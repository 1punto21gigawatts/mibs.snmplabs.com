#
# PySNMP MIB module CIENA-CES-MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-MPLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
cienaGlobalMacAddress, cienaGlobalSeverity = mibBuilder.importSymbols("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress", "cienaGlobalSeverity")
cienaCesNotifications, cienaCesConfig = mibBuilder.importSymbols("CIENA-SMI", "cienaCesNotifications", "cienaCesConfig")
CienaGlobalState, = mibBuilder.importSymbols("CIENA-TC", "CienaGlobalState")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
MplsBitRate, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsBitRate")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, ModuleIdentity, Bits, Integer32, Counter64, ObjectIdentity, IpAddress, MibIdentifier, Unsigned32, iso, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "ModuleIdentity", "Bits", "Integer32", "Counter64", "ObjectIdentity", "IpAddress", "MibIdentifier", "Unsigned32", "iso", "Counter32", "NotificationType")
TimeStamp, TextualConvention, RowPointer, StorageType, TruthValue, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "RowPointer", "StorageType", "TruthValue", "MacAddress", "DisplayString", "RowStatus")
cienaCesMplsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18))
cienaCesMplsMIB.setRevisions(('2016-11-22 00:00', '2016-11-17 00:00', '2016-10-21 00:00', '2016-10-12 00:00', '2016-09-21 00:00', '2016-08-29 00:00', '2016-08-22 00:00', '2016-07-18 00:00', '2016-07-12 00:00', '2016-07-11 00:00', '2016-07-04 00:00', '2016-06-10 00:00', '2016-03-11 00:00', '2016-02-15 00:00', '2016-01-04 00:00', '2015-08-18 00:00', '2015-02-23 00:00', '2014-12-01 00:00', '2014-11-04 00:00', '2014-06-11 00:00', '2014-04-08 00:00', '2014-02-28 00:00', '2013-09-27 00:00', '2013-05-08 00:00', '2011-02-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesMplsMIB.setRevisionsDescriptions(('Added new OID cienaCesGmplsDynamicIngressCoroutedLspId in cienaCesGmplsDynamicIngressCoroutedTunnelTable', 'Added new OID cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode in cienaCesGmplsDynamicIngressCoroutedTunnelTable', 'Added new OID cienaCesTeLinkSrlgCount in cienaCesTeLinkTable', 'Added new OID cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets, cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets, cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes, cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes in cienaCesGmplsDynamicTransitCoroutedTunnelTable', 'Added new OID cienaCesTeResourceColorUseCount,cienaCesTeResourceColorGroupUseCount in cienaCesTeResourceColorsTable and cienaCesTeResourceColorsTable respectively', 'Added new OIDs cienaCesMplsPwConfigBandwidth, cienaCesMplsPwOperBandwidth and cienaCesMplsPwBandwidthState in cienaCesMplsPwTable', 'Modified enums AutoSizeFailHdlr, AutoSizeState, PathDisjointType, PathDisjointMode and added new enums TEMode, MplsGlobalState. updated type of cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization and cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable, and description of cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable, cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval, cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll, cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny, cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny in cienaCesGmplsDynamicIngressCoroutedTunnelTable. Added new OIDs cienaCesTeResourceColorBitMask, cienaCesTeLinkMode and per priority unreserved bandwidth in cienaCesTeLinkTable and updated maximum bandwidth range', 'Updated the description of some of the attributes in following tables cienaCesMplsStaticTransitTunnelTable, cienaCesMplsDynamicTransitTunnelTable, cienaCesGmplsStaticTransitUniDirTunnelTable, cienaCesGmplsStaticTransitCoroutedTunnelTable, cienaCesGmplsDynamicTransitUniDirTunnelTable, cienaCesGmplsDynamicTransitCoroutedTunnelTable', 'Added tables: cienaCesTeLinkTable, cienaCesTeResourceGrpTable, cienaCesTeResourceColorsTable, cienaCesTeLinkSrlgTable', 'Added attributes cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization, cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval, cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType, cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState, cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelClassType, cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll, cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny, cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny in cienaCesGmplsDynamicIngressCoroutedTunnelTable', 'Added support for MPLS-CAC (Diffserv-TE) feature', 'Added cienaCesGmplsEncapTunnelResizeResultTrap, cienaCesGmplsEncapTunnelMbbResultTrap, cienaCesMplsCacInterfaceThresholdTrap', 'Added new OID for auto-backup tunnel in the cienaCesGmplsDynamicIngressCoroutedTunnelTable', 'Modified attributes related to if-num, LSP-id, src-tunnel-id and dest-tunnel-id in cienaCesGmplsStaticTransitCoroutedTunnelTable to match with the previous release 6.13.1', 'Added new attributes if-num, LSP-id, src-tunel-id and dest-tunnel-id in static tp corouted tunnel tables', 'Added new OIDs for the Traffic Statistics in the following tables cienaCesMplsStaticTransitTunnelTable, cienaCesMplsDynamicTransitTunnelTable, cienaCesGmplsStaticTransitUniDirTunnelTable, cienaCesGmplsStaticTransitCoroutedTunnelTable, cienaCesGmplsDynamicTransitUniDirTunnelTable, cienaCesGmplsDynamicTransitCoroutedTunnelTable', 'Added MS-PW support', 'Added new OIDs cienaCesMplsPwProtectionRole & cienaCesMplsPwProtectionState and deprecate OID cienaCesMplsPwRole', 'Added new OIDs cienaCesMplsPwReversion, cienaCesMplsPwRevertTime and modifed status of cienaCesServiceDelimiterVID, cienaCesServiceDelimiterTPID to Deprecated in cienaCesMplsPwEntry table', 'Modified tables: cienaCesGmplsStaticEgressCoroutedTunnelTable, cienaCesGmplsDynamicEgressCoroutedTunnelTable, cienaCesMplsTunnelCosProfileTable.', 'Modified the OID of cienaCesMplsAssociatedTunnelOperStateChgTrap. Updated the description of cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap and added varbinds cienaGlobalSeverity, cienaGlobalMacAddress to cienaCesMplsPwDown, cienaCesMplsPwUp and cienaCesMplsPwBundleActivePwChange traps', 'Created cienaCesMplsPw under cienaCesMplsMIBObjects. Added cienaCesMplsPwTable, cienaCesMplsPwCosProfileTable and cienaCesMplsPwVccvProfileTable under cienaCesMplsPw. Added a scalar cienaCesMplsGlobalNextFreeStaticVcLabel and cienaCesMplsFreeStaticTunnelTable under cienaCesMplsGlobal. Added BFD profile index in cienaCesMplsAssociatedTunnelTable, cienaCesGmplsStaticIngressCoroutedTunnelTable, cienaCesGmplsDynamicIngressCoroutedTunnelTable, cienaCesGmplsStaticEgressCoroutedTunnelTable, cienaCesGmplsDynamicEgressCoroutedTunnelTable and cienaCesGmplsAssociatedTunnelTable. Added cienaCesMplsAssociatedTunnelOperStateChgTrap, cienaCesGmplsEncapUnidirTunnelOperStateChgTrap, cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap, cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap, cienaCesGmplsTransitUnidirTunnelOperStateChgTrap, cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap, cienaCesGmplsAssociatedTunnelOperStateChgTrap, cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap, cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap, cienaCesGmplsDecapCoroutedTunnelGrpActiveEncapTunnelChangeTrap, cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap, cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap, cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap, cienaCesGmplsTunnelAisFaultErrorTrap, cienaCesMplsPwDown, cienaCesMplsPwUp and cienaCesMplsPwBundleActivePwChange', 'Created new table cienaCesMplsGlobal under cienaCesMplsMIBObjects and added cienaCesMplsTunnelCosProfileTable and added cienaCesMplsAttrs and cienaCesMplsGlobalTunnelPath from cienaCesMpls.Modified tunnel tables under cienaCesMpls, adding protection information, CosProfileIndex and CosProfileName, deprecated cos-profile parameters from individual tunnel tables. Added new tables cienaCesMplsAssociatedTunnelTable and cienaCesMplsTunnelARHopTable under cienaCesMpls. Added gmpls tunnel cienaCesGmpls under cienaCesMplsMIBObjects which contains all tuunel table, path table, AR hop table', 'Modified the status of cienaCesMplsStaticIngressTunnelFixedExp under cienaCesMplsStaticIngressTunnelTable and cienaCesMplsDynamicIngressTunnelFixedExp under cienaCesMplsDynamicIngressTunnelTable to deprecated. Added objects cienaCesMplsStaticIngressTunnelFixedTC under cienaCesMplsStaticIngressTunnelTable and cienaCesMplsDynamicIngressTunnelFixedTC under cienaCesMplsDynamicIngressTunnelTable. Modified the description of certain MIB tables and objects to match the description in 7.X', 'Initial version.',))
if mibBuilder.loadTexts: cienaCesMplsMIB.setLastUpdated('201611220000Z')
if mibBuilder.loadTexts: cienaCesMplsMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: cienaCesMplsMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesMplsMIB.setDescription('This MIB module defines the mgmt objects for the MPLS feature for LEOS based Ciena products.')
class TTLPolicy(TextualConvention, Integer32):
    description = 'TTL Policy'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("decrement", 0), ("fixed", 1), ("inherit", 2))

class PseudoWireType(TextualConvention, Integer32):
    description = 'Pseudo Wire Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("raw", 1), ("tagged", 2))

class RCosPolicy(TextualConvention, Integer32):
    description = 'Resolved Cos Policy'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fixed", 1), ("exp-mapped", 2))

class FCosPolicy(TextualConvention, Integer32):
    description = 'Frame Cos Policy'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fixed", 1), ("rcos-mapped", 2))

class PrivateForwardGroup(TextualConvention, Integer32):
    description = 'Private Forwarding Group'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("groupA", 1), ("groupB", 2), ("groupC", 3))

class OperState(TextualConvention, Integer32):
    description = 'Virtual Circuit Opererational State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("capable", 1), ("not-capable", 2))

class VCFailReason(TextualConvention, Integer32):
    description = 'Virtual Circuit Failure Reason'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("indeterminate", 1), ("ignore", 2))

class VCStatus(TextualConvention, Bits):
    description = 'VC Status. This is used for both local and remote status faults'
    status = 'current'
    namedValues = NamedValues(("notForwarding", 0), ("servicePwRxFault", 1), ("servicePwTxFault", 2), ("psnPwIngressRxFault", 3), ("psnPwEgressTxFault", 4), ("pwStandby", 5))

class VCState(TextualConvention, Integer32):
    description = 'Current VC state'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("notActive", 2))

class AttachGroupType(TextualConvention, Integer32):
    description = 'Attach Group Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dynamic", 2))

class TunnelType(TextualConvention, Integer32):
    description = 'Transport tunnel types for MPLS VC'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("mplsStaticIngress", 1), ("mplsDynamicIngress", 2), ("mplsAssociated", 3), ("gmplsStaticIngressCorouted", 4), ("gmplsDynamicIngressCorouted", 5), ("gmplsStaticEgressCorouted", 6), ("gmplsDynamicEgressCorouted", 7), ("gmplsAssociated", 8))

class TunnelAisFault(TextualConvention, Integer32):
    description = 'This is replaced by TunnelOamFault.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fault", 1), ("nofault", 2))

class TunnelOamFault(TextualConvention, Integer32):
    description = 'Oam fault status on the tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("aisfault", 1), ("bfdfault", 2), ("aisbfdfault", 3), ("nofault", 4))

class AutoSizeFailHdlr(TextualConvention, Integer32):
    description = 'Auto size failure handler.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("alarm", 2), ("mbb", 3), ("notApplicable", 4))

class AutoSizeState(TextualConvention, Integer32):
    description = 'Auto size dynamic states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ok", 1), ("upsizeInProgress", 2), ("upsizeFailed", 3), ("downsizeInProgress", 4), ("downsizeFailed", 5), ("notApplicable", 6))

class AutoSizeMode(TextualConvention, Integer32):
    description = 'Auto size mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("cac", 2), ("utilization", 3), ("notApplicable", 4))

class CacPolicy(TextualConvention, Integer32):
    description = 'MPLS Class Profile Cac Policy'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("invalid", 1), ("mam", 2), ("rdm", 3))

class PathDisjointType(TextualConvention, Integer32):
    description = 'Tunnel Path Disjoint Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 1), ("none", 2), ("link", 3), ("srlg", 4), ("node", 5), ("srlgAndNode", 6), ("srlgOrNode", 7), ("notApplicable", 8))

class PathDisjointMode(TextualConvention, Integer32):
    description = 'Tunnel Path Disjoint Mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("strict", 2), ("maximal", 3), ("notApplicable", 4))

class SRLGState(TextualConvention, Integer32):
    description = 'SRLG state'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inActive", 2))

class TEMode(TextualConvention, Integer32):
    description = 'TE mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("diffServ", 1), ("diffServ-Te", 2))

class MplsGlobalState(TextualConvention, Integer32):
    description = 'This textual convention enumerates the administrative and operational state with not applicable value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3))

cienaCesMplsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1))
cienaCesMpls = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1))
cienaCesGmpls = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2))
cienaCesMplsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3))
cienaCesMplsPw = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4))
cienaCesMplsTe = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5))
cienaCesMplsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17))
cienaCesMplsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0))
cienaCesGmplsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1))
cienaCesMplsPwMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 2))
cienaCesMplsGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1))
cienaCesMplsStaticAdminLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticAdminLabelRangeStart.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticAdminLabelRangeStart.setDescription(' The beginning of the static administrative label range. There cannot be any overlap between static and dynamic label ranges. Setting this object does not become effective until the device is rebooted.')
cienaCesMplsStaticAdminLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticAdminLabelRangeEnd.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticAdminLabelRangeEnd.setDescription(' The end of the static administrative label range. There cannot be any overlap between static and dynamic label ranges. Setting this object does not become effective until the device is rebooted.')
cienaCesMplsStaticOperLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticOperLabelRangeStart.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticOperLabelRangeStart.setDescription(' The beginning of the static operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsStaticOperLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticOperLabelRangeEnd.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticOperLabelRangeEnd.setDescription(' The end of the static operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsDynamicAdminLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicAdminLabelRangeStart.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicAdminLabelRangeStart.setDescription('The beginning of the dynamic administrative label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsDynamicAdminLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicAdminLabelRangeEnd.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicAdminLabelRangeEnd.setDescription('The end of the dynamic administrative label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsDynamicOperLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicOperLabelRangeStart.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicOperLabelRangeStart.setDescription('The beginning of the dynamic operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsDynamicOperLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicOperLabelRangeEnd.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicOperLabelRangeEnd.setDescription('The end of the dynamic operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsStaticIngressTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2), )
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelTable.setDescription('The (conceptual) table listing the MPLS static encap tunnels.')
cienaCesMplsStaticIngressTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsStaticIngressTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelEntry.setDescription('This represents an entry of the MPLS static encap tunnel table.')
cienaCesMplsStaticIngressTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelIndex.setDescription('Unique index in the table.')
cienaCesMplsStaticIngressTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelName.setDescription('This represents the encap tunnel name. Tunnel names are common across static and dynamic.')
cienaCesMplsStaticIngressTunnelWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelWeight.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelWeight.setDescription('A parameter to select the order of precedence of encap tunnels during tunnel switchover or reversion (if tunnel reversion is enabled). A higher weight indicates higher preference during switchover or reversion.')
cienaCesMplsStaticIngressTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelNextHopIp.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelNextHopIp.setDescription('Specifies the next hop IP address for the static encap tunnel.')
cienaCesMplsStaticIngressTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 5), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelAdminState.setDescription('Specifies the administrative status of the static encap tunnel.')
cienaCesMplsStaticIngressTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelOperState.setDescription('Specifies the operational status of the static encap tunnel.')
cienaCesMplsStaticIngressTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelDestIpAddr.setDescription('Destination IP address of the static encap tunnel. If not specified, the static encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the static encap tunnel entry is created.')
cienaCesMplsStaticIngressTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelLabel.setDescription('The label for the static encap tunnel.')
cienaCesMplsStaticIngressTunnelFrmCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 9), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFrmCosPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFrmCosPolicy.setDescription('Frame CoS policy of the static encap tunnel.')
cienaCesMplsStaticIngressTunnelFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFrmCosMapId.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFrmCosMapId.setDescription('The frame CoS map ID of the static encap tunnel. This value is valid if the frame CoS policy selected for the static encap tunnel is rcos-mapped. This value corresponds to the index cienaCesTceDpTsCosMapFcosMapId of the cienaCesTceDpTsCosMapFcosMapTable.')
cienaCesMplsStaticIngressTunnelFixedExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedExp.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedExp.setDescription('This object is deprecated and the new object to provide this information is cienaCesMplsStaticIngressTunnelFixedTC in this table.')
cienaCesMplsStaticIngressTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 12), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesMplsStaticIngressTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedTTL.setDescription('If the TTL policy for the static encap tunnel is fixed, then this object is the TTL value.')
cienaCesMplsStaticIngressTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelGrpIndex.setDescription('The group ID of the tunnel group of which the static encap tunnel is a member.')
cienaCesMplsStaticIngressTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelReversion.setDescription('Indicates whether tunnel reversion is turned on/off for this encap tunnel.')
cienaCesMplsStaticIngressTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelReversionTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelReversionTimeout.setDescription('This object represents the tunnel reversion hold time in seconds before the primary encap tunnel switches back as active tunnel in its tunnel group.')
cienaCesMplsStaticIngressTunnelPrimaryTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelPrimaryTunnelName.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelPrimaryTunnelName.setDescription('This object represents the primary tunnel it is protecting, if this is a backup tunnel.')
cienaCesMplsStaticIngressTunnelFixedTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedTC.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelFixedTC.setDescription('If the frame CoS policy for the static encap tunnel is fixed, this value is used for MPLS encapsulation.')
cienaCesMplsStaticIngressTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionRole.setDescription('specifies the protection role of the static encap tunnel ')
cienaCesMplsStaticIngressTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionState.setDescription('specifies the protection status of the static encap tunnel ')
cienaCesMplsStaticIngressTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelProtectionPartnerName.setDescription('This object represents the primary tunnel it is protecting, if this is a backup tunnel.')
cienaCesMplsStaticIngressTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesMplsStaticIngressTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesMplsStaticIngressTunnelRecoveryDisjoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("link", 2), ("node", 3), ("srlg", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelRecoveryDisjoint.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticIngressTunnelRecoveryDisjoint.setDescription('Specifies the type of Recovery Disjoint')
cienaCesMplsDynamicIngressTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3), )
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelTable.setDescription('The (conceptual) table listing the MPLS encap tunnels.')
cienaCesMplsDynamicIngressTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicIngressTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelEntry.setDescription('An entry in the dynamic encap tunnel table.')
cienaCesMplsDynamicIngressTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesMplsDynamicIngressTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelName.setDescription('This represents the dynamic encap tunnel name.')
cienaCesMplsDynamicIngressTunnelWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelWeight.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelWeight.setDescription('A parameter to select the order of precedence of encap tunnels during tunnel switchover or reversion (if tunnel reversion is enabled). A higher weight indicates higher preference during switchover or reversion.')
cienaCesMplsDynamicIngressTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelLspId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelLspId.setDescription('A unique index within a tunnel group.')
cienaCesMplsDynamicIngressTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelNextHopIp.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelNextHopIp.setDescription('Specifies the next hop IP address for the dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelAdminState.setDescription('Specifies the administrative status of the dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelOperState.setDescription('Specifies the operational status of the dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelDestIpAddr.setDescription('Destination IP address of the dynamic encap tunnel. If not specified, the dynamic encap tunnel inherits the IP address of the tunnel group. This object cannot be modified once the dynamic encap tunnel entry is created.')
cienaCesMplsDynamicIngressTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelLabel.setDescription('Label for the dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelFrmCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("rcos-mapped", 2))).clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFrmCosPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFrmCosPolicy.setDescription('Frame CoS policy of the dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFrmCosMapId.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFrmCosMapId.setDescription('The frame CoS map ID of the dynamic encap tunnel. This value is valid if the frame CoS policy selected for the dynamic encap tunnel is rcos-mapped. This value corresponds to the index cienaCesTceDpTsCosMapFcosMapId of the cienaCesTceDpTsCosMapFcosMapTable.')
cienaCesMplsDynamicIngressTunnelFixedExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedExp.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedExp.setDescription('This object is deprecated and the new object to provide this information is cienaCesMplsDynamicIngressTunnelFixedTC in this table.')
cienaCesMplsDynamicIngressTunnelSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelSetupPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelSetupPriority.setDescription('Indicates the set up priority of the dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelHoldPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelHoldPriority.setDescription('Indicates the holding priority of the dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelRecordRoute.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelRecordRoute.setDescription('Indicates whether or not an FRR (fast re-route) tunnel needs to be created for this dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelFastRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("link-protect", 2), ("node-protect", 3))).clone('link-protect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFastRoute.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFastRoute.setDescription('Indicates the fast route method for the dynamic encap tunnel. This object cannot be modified once the dynamic encap tunnel entry is created.')
cienaCesMplsDynamicIngressTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("inherit", 2))).clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesMplsDynamicIngressTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedTTL.setDescription('If the TTL policy for the dynamic encap tunnel is fixed, this object is the TTL value.')
cienaCesMplsDynamicIngressTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPathIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPathIndex.setDescription('Index into the cienaCesmplsTunnelPathTable entry that specifies the explicit route hops for this dynamic encap tunnel.')
cienaCesMplsDynamicIngressTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPathName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPathName.setDescription('The path name corresponding to the pathIndex object.')
cienaCesMplsDynamicIngressTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelGrpIndex.setDescription('The group id of the tunnel group of which the dynamic encap tunnel is a member.')
cienaCesMplsDynamicIngressTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 23), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelResourcePointer.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelResourcePointer.setDescription('The OID must be one of the entries in mplsTunnelResourceTable.')
cienaCesMplsDynamicIngressTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelReversion.setDescription('Indicates whether tunnel reversion is turned on/off for this encap tunnel.')
cienaCesMplsDynamicIngressTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelReversionTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelReversionTimeout.setDescription('This object represents the tunnel reversion hold time in seconds before the primary encap tunnel switches back as active tunnel in its tunnel group.')
cienaCesMplsDynamicIngressTunnelBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelBandwidthProfile.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelBandwidthProfile.setDescription('This object represents the bandwidth profile attached to this tunnel.')
cienaCesMplsDynamicIngressTunnelPrimaryTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPrimaryTunnelName.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelPrimaryTunnelName.setDescription('This object represents the primary tunnel it is protecting, if this is a backup tunnel.')
cienaCesMplsDynamicIngressTunnelFixedTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedTC.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelFixedTC.setDescription('If the frame CoS policy for the dynamic encap tunnel is fixed, this value is used for MPLS encapsulation.')
cienaCesMplsDynamicIngressTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionRole.setDescription('specifies the protection role of the static encap tunnel ')
cienaCesMplsDynamicIngressTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionState.setDescription('specifies the protection status of the static encap tunnel ')
cienaCesMplsDynamicIngressTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelProtectionPartnerName.setDescription('This object represents the primary tunnel it is protecting, if this is a backup tunnel.')
cienaCesMplsDynamicIngressTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesMplsDynamicIngressTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 3, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesMplsStaticEgressTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4), )
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelTable.setDescription('The (conceptual) table listing the MPLS decap tunnels.')
cienaCesMplsStaticEgressTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsStaticEgressTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelEntry.setDescription('An entry in the static decap tunnel table. ')
cienaCesMplsStaticEgressTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesMplsStaticEgressTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelName.setDescription('This represents the decap tunnel name.')
cienaCesMplsStaticEgressTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelAdminState.setDescription('Administrative status of the static decap tunnel.')
cienaCesMplsStaticEgressTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelOperState.setDescription('Indicates the operational status of the static decap tunnel.')
cienaCesMplsStaticEgressTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelSourceIpAddr.setDescription('Source IP address of the static decap tunnel. This object cannot be modified once the static decap tunnel entry is created.')
cienaCesMplsStaticEgressTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticEgressTunnelLabel.setDescription('Indicates the label of the static decap tunnel.')
cienaCesMplsDynamicEgressTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5), )
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelTable.setDescription('The (conceptual) table listing the MPLS dynamic decap tunnels. ')
cienaCesMplsDynamicEgressTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicEgressTunnelIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicEgressTunnelInstance"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicEgressTunnelSourceIpAddr"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicEgressTunnelDestIpAddr"))
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelEntry.setDescription('An entry in the dynamic decap tunnel table.')
cienaCesMplsDynamicEgressTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesMplsDynamicEgressTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelName.setDescription('This represents the dynamic decap tunnel name.')
cienaCesMplsDynamicEgressTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelAdminState.setDescription('Indicates the administrative status of the dynamic decap tunnel.')
cienaCesMplsDynamicEgressTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelOperState.setDescription('Indicates the operational status of the dynamic decap tunnel.')
cienaCesMplsDynamicEgressTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelInstance.setDescription('Indicates the LSP ID.')
cienaCesMplsDynamicEgressTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelSourceIpAddr.setDescription('Source IP address of the dynamic decap tunnel.')
cienaCesMplsDynamicEgressTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelDestIpAddr.setDescription('Destination IP address of the dynamic decap tunnel.')
cienaCesMplsDynamicEgressTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicEgressTunnelLabel.setDescription('Idicates the label of the dynamic decap tunnel.')
cienaCesMplsStaticTransitTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6), )
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelTable.setDescription('The (conceptual) table listing the MPLS static transit tunnels. ')
cienaCesMplsStaticTransitTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsStaticTransitTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelEntry.setDescription('An entry in the static transit tunnel table.')
cienaCesMplsStaticTransitTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesMplsStaticTransitTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelName.setDescription('This represents the static transit tunnel name.')
cienaCesMplsStaticTransitTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelAdminState.setDescription('Indicates the administrative status of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOperState.setDescription('Indicates the operational status of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelNextHopIpAddr.setDescription('Next hop IP address of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelInLabel.setDescription('Indicates the incoming label of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutLabel.setDescription('Indicates the outgoing label of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelFcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 8), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFcosPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFcosPolicy.setDescription('Frame CoS policy of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelFixedTc = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFixedTc.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFixedTc.setDescription('If frame CoS policy for the static transit tunnel is fixed, this value is used for MPLS encapsulation.')
cienaCesMplsStaticTransitTunnelFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFrmCosMapId.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFrmCosMapId.setDescription('The frame CoS map ID of the static transit tunnel. This value is valid if the frame cos policy selected for the static transit tunnel is rcos-mapped.')
cienaCesMplsStaticTransitTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 11), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesMplsStaticTransitTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelFixedTTL.setDescription('If the TTL policy for the static transit tunnel is fixed, then this object is the TTL value.')
cienaCesMplsStaticTransitTunnelRcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 13), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelRcosPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelRcosPolicy.setDescription('Resolved CoS policy of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelRCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelRCosMapId.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelRCosMapId.setDescription('The resolved CoS map ID of the static transit tunnel. This value is valid if the resolved CoS policy selected for the static transit tunnel is rcos-mapped.')
cienaCesMplsStaticTransitTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesMplsStaticTransitTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesMplsStaticTransitTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelSourceIpAddr.setDescription('Source IP address of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelDestIpAddr.setDescription('Destination IP address of the static transit tunnel.')
cienaCesMplsStaticTransitTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIncomingPackets.setDescription('The number of incoming packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesMplsStaticTransitTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutgoingPackets.setDescription('The number of outgoing packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesMplsStaticTransitTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelIncomingBytes.setDescription('The number of incoming bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesMplsStaticTransitTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 6, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsStaticTransitTunnelOutgoingBytes.setDescription('The number of outgoing bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesMplsDynamicTransitTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7), )
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelTable.setDescription('The (conceptual) table listing the MPLS dynamic transit tunnels. ')
cienaCesMplsDynamicTransitTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsDynamicTransitTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelEntry.setDescription('An entry in the dynamic transit tunnel table.')
cienaCesMplsDynamicTransitTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesMplsDynamicTransitTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelName.setDescription('This represents the dynamic transit tunnel name.')
cienaCesMplsDynamicTransitTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelAdminState.setDescription('Indicates the administrative status of the dynamic transit tunnel.')
cienaCesMplsDynamicTransitTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOperState.setDescription('Indicates the operational status of the dynamic transit tunnel.')
cienaCesMplsDynamicTransitTunnelInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelInLabel.setDescription('Indicates the incoming label of the dynamic transit tunnel.')
cienaCesMplsDynamicTransitTunnelOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutLabel.setDescription('Indicates the outgoing label of the dynamic transit tunnel.')
cienaCesMplsDynamicTransitTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelNextHopIpAddr.setDescription('Next hop IP address of the Dynamic transit tunnel.')
cienaCesMplsDynamicTransitTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelSourceIpAddr.setDescription('Source IP address of the static transit tunnel.')
cienaCesMplsDynamicTransitTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelDestIpAddr.setDescription('Destination IP address of the static transit tunnel.')
cienaCesMplsDynamicTransitTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIncomingPackets.setDescription('The number of incoming packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesMplsDynamicTransitTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutgoingPackets.setDescription('The number of outgoing packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesMplsDynamicTransitTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelIncomingBytes.setDescription('The number of incoming bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesMplsDynamicTransitTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicTransitTunnelOutgoingBytes.setDescription('The number of outgoing bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesMplsTunnelPath = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8))
cienaCesMplsTunnelPathTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1), )
if mibBuilder.loadTexts: cienaCesMplsTunnelPathTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathTable.setDescription('The (conceptual) table listing the MPLS tunnel paths. To create an entry in the tunnel path table, cienaCesMplsTunnelPathName and cienaCesMplsTunnelPathRowStatus must both be specified.')
cienaCesMplsTunnelPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsTunnelPathIndex"))
if mibBuilder.loadTexts: cienaCesMplsTunnelPathEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathEntry.setDescription('An entry in the tunnel path table.')
cienaCesMplsTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsTunnelPathIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathIndex.setDescription('A unique index in the path entry table.')
cienaCesMplsTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelPathName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathName.setDescription('Name associated with the path.')
cienaCesMplsTunnelPathUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelPathUseCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathUseCount.setDescription('Indicates the number of encap tunnels that are using this path.')
cienaCesMplsTunnelPathHopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2), )
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopTable.setDescription('The (conceptual) table listing the MPLS tunnel path hop. To create an entry in the path-hop table, cienaCesMplsTunnelPathHopIpAddr and cienaCesMplsTunnelPathHopRowStatus must both be specified.')
cienaCesMplsTunnelPathHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsTunnelPathIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsTunnelPathHopIndex"))
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopEntry.setDescription('A tunnel hop entry.')
cienaCesMplsTunnelPathHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopIndex.setDescription('Unique index in the path hop table.')
cienaCesMplsTunnelPathHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopIpAddr.setDescription('IP address associated with this hop. This object cannot be modified once the path hop is created.')
cienaCesMplsTunnelPathHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2))).clone('strict')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelPathHopType.setDescription('Indidcates the hop type of the path member. This object cannot be modified once the path hop is created.')
cienaCesMplsEncapTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9))
cienaCesMplsNotifEncapTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelTable.setDescription('Table of notification objects required for encap tunnel notification.')
cienaCesMplsNotifEncapTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelEntry.setDescription('An entry (conceptual row) in the cienaCesMplsNotifEncapTunnelTable. No Get, GetNext or Set is allowed on this table.')
cienaCesMplsNotifEncapTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelIndex.setDescription('Tunnel index of the encap tunnel associated with the notification.')
cienaCesMplsNotifEncapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("frr", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelType.setDescription('Encap tunnel type of the encap tunnel associated with the notification.')
cienaCesMplsNotifEncapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelName.setDescription('This represents the encap tunnel name.')
cienaCesMplsNotifEncapTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelAdminState.setDescription('Administrative state of the encap tunnel.')
cienaCesMplsNotifEncapTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelOperState.setDescription('Operational state of the encap tunnel.')
cienaCesMplsNotifEncapTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 6), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelOamFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelOamFaulted.setDescription('Indication if the tunnel has Oam fault.')
cienaCesMplsNotifEncapTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 9, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelFaultedNodeId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelFaultedNodeId.setDescription('IP address of the node with the AIS fault.')
cienaCesMplsTransitTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10))
cienaCesMplsNotifTransitTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelTable.setDescription('Table of notification objects required for transit tunnel notification.')
cienaCesMplsNotifTransitTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelEntry.setDescription('An entry (conceptual row) in the cienaCesMplsNotifTransitTunnelTable. No Get, GetNext or Set is allowed on this table.')
cienaCesMplsNotifTransitTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelIndex.setDescription('Tunnel index of the transit tunnel associated with the notification.')
cienaCesMplsNotifTransitTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelType.setDescription('Transit tunnel type of the transit tunnel associated with the notification.')
cienaCesMplsNotifTransitTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelName.setDescription('This represents the transit tunnel name.')
cienaCesMplsNotifTransitTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelAdminState.setDescription('Administrative state of the transit tunnel.')
cienaCesMplsNotifTransitTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelOperState.setDescription('Operational state of the transit tunnel.')
cienaCesMplsNotifTransitTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 10, 1, 1, 6), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelOamFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifTransitTunnelOamFaulted.setDescription('Indication if the tunnel has Oam fault.')
cienaCesMplsEncapTunnelGrpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11))
cienaCesMplsNotifEncapTunnelGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpTable.setDescription('Table of notification objects required for encap tunnel group notification.')
cienaCesMplsNotifEncapTunnelGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpEntry.setDescription('An entry (conceptual row) in the cienaCesMplsNotifEncapTunnelGrpTable. No Get, GetNext or Set is allowed on this table.')
cienaCesMplsNotifEncapTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpIndex.setDescription('Tunnel group index of the encap tunnel associated with the notification.')
cienaCesMplsNotifEncapTunnelGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpName.setDescription('Tunnel group name of the encap tunnel associated with the notification.')
cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex.setDescription('Active Encap Tunnel index of the tunnel group associated with the notification.')
cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName.setDescription('Active Encap Tunnel name of the Tunnel group associated with the notification.')
cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("frr", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType.setDescription('Encap tunnel type of the encap tunnel associated with the notification.')
cienaCesMplsAssociatedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12), )
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelTable.setDescription('The table listing the MPLS Associated tunnels.')
cienaCesMplsAssociatedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsAssociatedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelEntry.setDescription('This represents an entry of the MPLS associated tunnel table.')
cienaCesMplsAssociatedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelIndex.setDescription('Unique index in the table. Specifies mpls associated tunnel index')
cienaCesMplsAssociatedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelName.setDescription('specifies mpls associated tunnel name.')
cienaCesMplsAssociatedForwardTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelName.setDescription('specifies associated forward tunnel.')
cienaCesMplsAssociatedForwardTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelType.setDescription('specifies associated forward tunnel type.')
cienaCesMplsAssociatedReverseTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelName.setDescription('specifies associated reverse tunnel.')
cienaCesMplsAssociatedReverseTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelType.setDescription('specifies associated reverse tunnel type.')
cienaCesMplsAssociatedForwardTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelDestIpAddr.setDescription('specifies associated mpls forward tunnel destination IP address')
cienaCesMplsAssociatedDynamicTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedDynamicTunnelSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedDynamicTunnelSrcIpAddr.setDescription('specifies associated mpls reverse tunnel source IP address.')
cienaCesMplsAssociatedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 9), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelAdminState.setDescription('Administrative status of associated tunnel.')
cienaCesMplsAssociatedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 10), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelOperState.setDescription('Operational status of associated tunnel.')
cienaCesMplsAssociatedForwardTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 11), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedForwardTunnelOperState.setDescription('Operational status of associated forward tunnel.')
cienaCesMplsAssociatedReverseTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 12), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedReverseTunnelOperState.setDescription('Operational status of associated reverse tunnel.')
cienaCesMplsAssociatedProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedProtectionRole.setDescription('specifies the protection role of the associated tunnel ')
cienaCesMplsAssociatedProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedProtectionState.setDescription('specifies the protection status of the associated tunnel ')
cienaCesMplsAssociatedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelProtectionPartnerName.setDescription('This object represents the tunnel name it is protecting')
cienaCesMplsAssociatedBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 16), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdMonitoring.setDescription('Specifies status of BFD monitoring.')
cienaCesMplsAssociatedBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdProfileName.setDescription('This object represent BFD profile name.')
cienaCesMplsAssociatedBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdSessionName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdSessionName.setDescription('Specifies BFD session name.')
cienaCesMplsAssociatedBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdSessionFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdSessionFaulted.setDescription('Indicates if BFD is faulted.')
cienaCesMplsAssociatedBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedBfdProfileIndex.setDescription('This represents the BFD profile index in the BFD profile table configured for this associated tunnel')
cienaCesMplsTunnelARHopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13), )
if mibBuilder.loadTexts: cienaCesMplsTunnelARHopTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelARHopTable.setDescription('The mplsTunnelARHopTable is used to indicate the hops for an MPLS tunnel defined in mplsTunnelTable, as reported by the MPLS signalling protocol. Thus at a transit LSR, this table (if the table is supported and if the signaling protocol is recording actual route information) contains the actual route of the whole tunnel. If the signaling protocol is not recording the actual route, this table MAY report the information from the mplsTunnelHopTable or the mplsTunnelCHopTable. Each row in this table is indexed by mplsTunnelARHopListIndex. Each row also has a secondary index mplsTunnelARHopIndex, corresponding to the next hop that this row corresponds to. Please note that since the information necessary to build entries within this table is not provided by some MPLS signalling protocols, implementation of this table is optional. Furthermore, since the information in this table is actually provided by the MPLS signalling protocol after the path has been set-up, the entries in this table are provided only for observation, and hence, all variables in this table are accessible exclusively as read- only. Note also that the contencts of this table may change while it is being read because of re-routing activities. A network administrator may verify that the actual route read is consistent by reference to the mplsTunnelLastPathChange object.')
cienaCesMplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaMplsTunnelARHopListIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaMplsTunnelARHopIndex"))
if mibBuilder.loadTexts: cienaCesMplsTunnelARHopEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelARHopEntry.setDescription('An entry in this table represents a tunnel hop. An entry is created by the agent for signaled ERLSP set up by an MPLS signalling protocol.')
cienaMplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaMplsTunnelARHopListIndex.setStatus('current')
if mibBuilder.loadTexts: cienaMplsTunnelARHopListIndex.setDescription('Primary index into this table identifying a particular recorded hop list.')
cienaMplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cienaMplsTunnelARHopIndex.setStatus('current')
if mibBuilder.loadTexts: cienaMplsTunnelARHopIndex.setDescription('Secondary index into this table identifying the particular hop.')
cienaMplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaMplsTunnelARHopAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaMplsTunnelARHopAddrType.setDescription('The Hop Address Type of this tunnel hop. Note that lspid(5) is a valid option only for tunnels signaled via CRLDP.')
cienaMplsTunnelARHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaMplsTunnelARHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaMplsTunnelARHopIpAddr.setDescription('The Tunnel Hop Address for this tunnel hop. The type of this address is determined by the value of the corresponding mplsTunnelARHopAddrType. If mplsTunnelARHopAddrType is set to unnum(4), then this value contains the LSR Router ID of the unnumbered interface. Otherwise the agent SHOULD set this object to the zero-length string and the manager should ignore this object.')
cienaMplsTunnelARHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaMplsTunnelARHopAddrUnnum.setStatus('current')
if mibBuilder.loadTexts: cienaMplsTunnelARHopAddrUnnum.setDescription('If mplsTunnelARHopAddrType is set to unnum(4), then this value will contain the interface identifier of the unnumbered interface for this hop. This object should be used in conjunction with mplsTunnelARHopIpAddr which would contain the LSR Router ID in this case. Otherwise the agent should set this object to zero-length string and the manager should ignore this.')
cienaMplsTunnelARHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 13, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaMplsTunnelARHopLspId.setStatus('current')
if mibBuilder.loadTexts: cienaMplsTunnelARHopLspId.setDescription('If mplsTunnelARHopAddrType is set to lspid(5), then this value will contain the LSP ID of this hop. This object is otherwise insignificant and should contain a value of 0 to indicate this fact.')
cienaCesMplsAssociatedTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14))
cienaCesMplsNotifAssociatedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelTable.setDescription('Table of notification objects required for associated tunnel notification.')
cienaCesMplsNotifAssociatedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelEntry.setDescription('An entry (conceptual row) in the cienaCesMplsNotifAssociatedTunnelTable. No Get, GetNext or Set is allowed on this table.')
cienaCesMplsNotifAssociatedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelIndex.setDescription('Tunnel index of the associated tunnel associated with the notification.')
cienaCesMplsNotifAssociatedTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelType.setDescription('Associated tunnel type of the associated tunnel associated with the notification.')
cienaCesMplsNotifAssociatedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelName.setDescription('This represents the associated tunnel name.')
cienaCesMplsNotifAssociatedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelAdminState.setDescription('Administrative state of the associated tunnel.')
cienaCesMplsNotifAssociatedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelOperState.setDescription('Operational state of the associated tunnel.')
cienaCesMplsNotifAssociatedTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 6), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelOamFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelOamFaulted.setDescription('Indication if the tunnel has Oam fault.')
cienaCesMplsNotifAssociatedTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 14, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelFaultedNodeId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifAssociatedTunnelFaultedNodeId.setDescription('IP address of the node with the AIS fault.')
cienaCesMplsCacInterfaceNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15))
cienaCesMplsNotifCacInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1), )
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceTable.setDescription('Table of notification objects required for CAC interface notification.')
cienaCesMplsNotifCacInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceClassType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceIndex"))
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceEntry.setDescription('An entry (conceptual row) in the cienaCesMplsNotifCACInterfaceTable. No Get, GetNext or Set is allowed on this table.')
cienaCesMplsNotifCacInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceIndex.setDescription('CAC entry index associated with the notification.')
cienaCesMplsNotifCacInterfaceClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceClassType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceClassType.setDescription('CAC class type value of the associated interface associated with the notification.')
cienaCesMplsNotifCacInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceName.setDescription('This represents the associated interface name.')
cienaCesMplsNotifCacInterfaceThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 15, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceThreshold.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsNotifCacInterfaceThreshold.setDescription('Alarm threshold value of the associated interface associated with the notification.')
cienaCesMplsClassProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16), )
if mibBuilder.loadTexts: cienaCesMplsClassProfileTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassProfileTable.setDescription('The (conceptual) table listing the MPLS Class Profiles.')
cienaCesMplsClassProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsClassProfileIndex"))
if mibBuilder.loadTexts: cienaCesMplsClassProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassProfileEntry.setDescription('This represents an entry for MPLS Class Profile.')
cienaCesMplsClassProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: cienaCesMplsClassProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassProfileIndex.setDescription('This represents the unique index for MPLS Class Profile.')
cienaCesMplsClassProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassProfileName.setDescription('This represents the MPLS Class Profile name.')
cienaCesMplsClassProfileCacPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 16, 1, 3), CacPolicy().clone('mam')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassProfileCacPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassProfileCacPolicy.setDescription('MPLS Class Profile Cac policy.')
cienaCesMplsTEClassTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17), )
if mibBuilder.loadTexts: cienaCesMplsTEClassTypeTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTEClassTypeTable.setDescription('The (conceptual) table listing the MPLS Class Types.')
cienaCesMplsTEClassTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsClassProfileIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsClassType"))
if mibBuilder.loadTexts: cienaCesMplsTEClassTypeEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTEClassTypeEntry.setDescription('This represents an entry for MPLS Class Type.')
cienaCesMplsClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: cienaCesMplsClassType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassType.setDescription('Indicates the MPLS Class Type value. Used as an Index in combination with MPLS Class Profile Index.')
cienaCesMplsClassTypeQueueGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassTypeQueueGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassTypeQueueGroupIndex.setDescription('Indicates the queue group index associated with MPLS Class Type.')
cienaCesMplsClassTypeQueueGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassTypeQueueGroupInstance.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassTypeQueueGroupInstance.setDescription('Indicates the instance for MPLS Class Type mapped to a particular queue group.')
cienaCesMplsClassTypeLom = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassTypeLom.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassTypeLom.setDescription('Indicates the link multiplier value for the MPLS Class Type.')
cienaCesMplsClassTypeAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 1, 17, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassTypeAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassTypeAlarmThreshold.setDescription('Indicates the Alarm Threshold percentage (%) for MPLS Class Type.')
cienaCesMplsTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 1)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesMplsTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of an encap tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesMplsNotifEncapTunnelIndex, cienaCesMplsNotifEncapTunnelType, cienaCesMplsNotifEncapTunnelName, cienaCesMplsNotifEncapTunnelAdminState, cienaCesMplsNotifEncapTunnelOperState, cienaCesMplsNotifEncapTunnelOamFaulted, cienaCesMplsNotifEncapTunnelFaultNodeId.')
cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 2)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType"))
if mibBuilder.loadTexts: cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange.setDescription('This notification is sent whenever the active encap tunnel in a tunnel group changes.')
cienaCesMplsTransitTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 3)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifTransitTunnelOamFaulted"))
if mibBuilder.loadTexts: cienaCesMplsTransitTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTransitTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of a transit tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesMplsNotifTransitTunnelIndex, cienaCesMplsNotifTransitTunnelType, cienaCesMplsNotifTransitTunnelName, cienaCesMplsNotifTransitTunnelAdminState, cienaCesMplsNotifTransitTunnelOperState, cienaCesMplsNotifTransitTunnelOamFaulted.')
cienaCesMplsAssociatedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 6)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifAssociatedTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsAssociatedTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of an associated tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesMplsNotifAssociatedTunnelIndex, cienaCesMplsNotifAssociatedTunnelType, cienaCesMplsNotifAssociatedTunnelName, cienaCesMplsNotifAssociatedTunnelAdminState, cienaCesMplsNotifAssociatedTunnelOperState, cienaCesMplsNotifAssociatedTunnelOamFaulted, cienaCesMplsNotifAssociatedTunnelFaultedNodeId.')
cienaCesMplsCacInterfaceThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 0, 7)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceClassType"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsNotifCacInterfaceThreshold"))
if mibBuilder.loadTexts: cienaCesMplsCacInterfaceThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsCacInterfaceThresholdTrap.setDescription('This notification is sent when LSP bandwith usage exceeds the threshold. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesMplsNotifCasInterfaceIndex, cienaCesMplsNotifCacInterfaceClassType, cienaCesMplsNotifCacInterfaceName, cienaCesMplsNotifCacInterfaceThreshold.')
cienaCesGmplsStaticIngressUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1), )
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelTable.setDescription('The (conceptual) table listing the MPLS static encap tunnels.')
cienaCesGmplsStaticIngressUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticIngressUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelEntry.setDescription('This represents an entry of the MPLS static encap TP unidirectional tunnel table.')
cienaCesGmplsStaticIngressUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelIndex.setDescription('Unique index in the table.')
cienaCesGmplsStaticIngressUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelName.setDescription('This represents the encap tunnel name. Tunnel names are common across static and dynamic.')
cienaCesGmplsStaticIngressUniDirTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelNextHopIp.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelNextHopIp.setDescription('Specifies the next hop IP address for the static encap tunnel.')
cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr.setDescription('Source IP address of the static encap tunnel. If not specified, the static encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the static encap tunnel entry is created.')
cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr.setDescription('Destination IP address of the static encap tunnel. If not specified, the static encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the static encap tunnel entry is created.')
cienaCesGmplsStaticIngressUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelAdminState.setDescription('Specifies the administrative status of the static encap tunnel.')
cienaCesGmplsStaticIngressUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelOperState.setDescription('Specifies the operational status of the static encap tunnel.')
cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel.setDescription('The label for the static encap tunnel.')
cienaCesGmplsStaticIngressUniDirTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionRole.setDescription('The label for the static encap tunnel.')
cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName.setDescription('Protection partner name of the static encap tunnel.')
cienaCesGmplsStaticIngressUniDirTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelProtectionState.setDescription('Specifies the Protection status of the static encap tunnel.')
cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 12), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsStaticIngressUniDirTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelFixedTTL.setDescription('If the TTL policy for the static encap tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsStaticIngressUniDirTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelGrpIndex.setDescription('The group ID of the tunnel group of which the static encap tunnel is a member.')
cienaCesGmplsStaticIngressUniDirTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelReversion.setDescription('Indicates whether tunnel reversion is turned on/off for this encap tunnel.')
cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout.setDescription('This object represents the tunnel reversion hold time in seconds before the primary encap tunnel switches back as active tunnel in its tunnel group.')
cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesGmplsStaticIngressUniDirTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("link", 2), ("node", 3), ("srlg", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint.setDescription('Specifies the type of Recovery Disjoint')
cienaCesGmplsStaticIngressCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2), )
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelTable.setDescription('The (conceptual) table listing the MPLS static encap tunnels.')
cienaCesGmplsStaticIngressCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticIngressCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelEntry.setDescription('This represents an entry of the MPLS static encap tunnel table.')
cienaCesGmplsStaticIngressCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelIndex.setDescription('Unique index in the table.')
cienaCesGmplsStaticIngressCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelName.setDescription('This represents the encap tunnel name. Tunnel names are common across static and dynamic.')
cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp.setDescription('Specifies the next hop IP address for the static encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr.setDescription('Source IP address of the static encap tunnel. If not specified, the static encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the static encap tunnel entry is created.')
cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr.setDescription('Destination IP address of the static encap tunnel. If not specified, the static encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the static encap tunnel entry is created.')
cienaCesGmplsStaticIngressCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAdminState.setDescription('Specifies the administrative status of the static encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelOperState.setDescription('Specifies the operational status of the static encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel.setDescription('The label for the static encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel.setDescription('The label for the static encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole.setDescription('The label for the static encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName.setDescription('Protection partner name of the static encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelProtectionState.setDescription('Specifies the Protection status of the static encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL.setDescription('If the TTL policy for the static encap tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex.setDescription('The group ID of the tunnel group of which the static encap tunnel is a member.')
cienaCesGmplsStaticIngressCoroutedTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReversion.setDescription('Indicates whether tunnel reversion is turned on/off for this encap tunnel.')
cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout.setDescription('This object represents the tunnel reversion hold time in seconds before the primary encap tunnel switches back as active tunnel in its tunnel group.')
cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 20), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring.setDescription('Specifies status of BFD monitoring.')
cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName.setDescription('This object represent BFD profile name.')
cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName.setDescription('Specifies BFD session name.')
cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 23), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring.setDescription('Specifies status of AIS monitoring.')
cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName.setDescription('This object represent AIS profile name.')
cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted.setDescription('Indicates if BFD is faulted.')
cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex.setDescription('This represents the BFD profile index in the BFD profile table configured for this gmpls static ingress corouted tunnel')
cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("link", 2), ("node", 3), ("srlg", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint.setDescription('Specifies the type of Recovery Disjoint')
cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum.setDescription('This represents next hop interface number for this gmpls static ingress corouted tunnel')
cienaCesGmplsStaticIngressCoroutedTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelLspId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelLspId.setDescription('This represents LSP ID for this gmpls static ingress corouted tunnel')
cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId.setDescription('This represents source tunnel ID for this gmpls static ingress corouted tunnel')
cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId.setDescription('This represents destination tunnel ID for this gmpls static ingress corouted tunnel')
cienaCesGmplsDynamicIngressUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelTable.setDescription('The (conceptual) table listing the MPLS Dynamic encap tunnels.')
cienaCesGmplsDynamicIngressUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicIngressUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelEntry.setDescription('This represents an entry of the MPLS Dynamic encap tunnel table.')
cienaCesGmplsDynamicIngressUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelIndex.setDescription('Unique index in the table.')
cienaCesGmplsDynamicIngressUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelName.setDescription('This represents the encap tunnel name. Tunnel names are common across Dynamic and dynamic.')
cienaCesMplsDynamicIngressUniDirTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressUniDirTunnelLspId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsDynamicIngressUniDirTunnelLspId.setDescription('A unique index within a tunnel group.')
cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp.setDescription('Specifies the next hop IP address for the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr.setDescription('Source IP address of the Dynamic encap tunnel. If not specified, the Dynamic encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the Dynamic encap tunnel entry is created.')
cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr.setDescription('Destination IP address of the Dynamic encap tunnel. If not specified, the Dynamic encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the Dynamic encap tunnel entry is created.')
cienaCesGmplsDynamicIngressUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelAdminState.setDescription('Specifies the administrative status of the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 8), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelOperState.setDescription('Specifies the operational status of the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel.setDescription('The label for the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole.setDescription('The label for the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName.setDescription('Protection partner name of the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelProtectionState.setDescription('Specifies the Protection status of the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL.setDescription('If the TTL policy for the Dynamic encap tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex.setDescription('The group ID of the tunnel group of which the Dynamic encap tunnel is a member.')
cienaCesGmplsDynamicIngressUniDirTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelReversion.setDescription('Indicates whether tunnel reversion is turned on/off for this encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout.setDescription('This object represents the tunnel reversion hold time in seconds before the primary encap tunnel switches back as active tunnel in its tunnel group.')
cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute.setDescription('Indicates whether or not an FRR (fast re-route) tunnel needs to be created for this dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelFastRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("link-protect", 2), ("node-protect", 3))).clone('link-protect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelFastRoute.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelFastRoute.setDescription('Indicates the fast route method for the dynamic encap tunnel. This object cannot be modified once the dynamic encap tunnel entry is created.')
cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority.setDescription('Indicates the set up priority of the dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority.setDescription('Indicates the holding priority of the dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelPathIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelPathIndex.setDescription('Index into the cienaCesmplsTunnelPathTable entry that specifies the explicit route hops for this dynamic encap tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelPathName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelPathName.setDescription('The path name corresponding to the pathIndex object.')
cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile.setDescription('This object represents the bandwidth profile attached to this tunnel.')
cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 3, 1, 27), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer.setDescription('The OID must be one of the entries in mplsTunnelResourceTable.')
cienaCesGmplsDynamicIngressCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelTable.setDescription('The (conceptual) table listing the MPLS Dynamic encap co-routed tunnels.')
cienaCesGmplsDynamicIngressCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicIngressCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelEntry.setDescription('This represents an entry of the MPLS Dynamic encap co-routed tunnel table.')
cienaCesGmplsDynamicIngressCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelIndex.setDescription('Unique index in the table.')
cienaCesGmplsDynamicIngressCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelName.setDescription('This represents the encap tunnel name. Tunnel names are common across Dynamic and dynamic.')
cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp.setDescription('Specifies the next hop IP address for the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr.setDescription('Source IP address of the Dynamic encap tunnel. If not specified, the Dynamic encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the Dynamic encap tunnel entry is created.')
cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr.setDescription('Destination IP address of the Dynamic encap tunnel. If not specified, the Dynamic encap tunnel inherits the IP address of the tunnel-group. This object cannot be modified once the Dynamic encap tunnel entry is created.')
cienaCesGmplsDynamicIngressCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAdminState.setDescription('Specifies the administrative status of the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelOperState.setDescription('Specifies the operational status of the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel.setDescription('The label for the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel.setDescription('The label for the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole.setDescription('The label for the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName.setDescription('Protection partner name of the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState.setDescription('Specifies the Protection status of the Dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL.setDescription('If the TTL policy for the Dynamic encap tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex.setDescription('The group ID of the tunnel group of which the Dynamic encap tunnel is a member.')
cienaCesGmplsDynamicIngressCoroutedTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReversion.setDescription('Indicates whether tunnel reversion is turned on/off for this encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout.setDescription('This object represents the tunnel reversion hold time in seconds before the primary encap tunnel switches back as active tunnel in its tunnel group.')
cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute.setDescription('Indicates whether or not an FRR (fast re-route) tunnel needs to be created for this dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("link-protect", 2), ("node-protect", 3))).clone('link-protect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute.setDescription('Indicates the fast route method for the dynamic encap tunnel. This object cannot be modified once the dynamic encap tunnel entry is created.')
cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority.setDescription('Indicates the set up priority of the dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority.setDescription('Indicates the holding priority of the dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex.setDescription('Index into the cienaCesmplsTunnelPathTable entry that specifies the explicit route hops for this dynamic encap tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathName.setDescription('The path name corresponding to the pathIndex object.')
cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile.setDescription('This object represents the bandwidth profile attached to this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 27), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer.setDescription('The OID must be one of the entries in mplsTunnelResourceTable.')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 28), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring.setDescription('Specifies status of BFD monitoring.')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName.setDescription('This object represent BFD profile name.')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName.setDescription('Specifies BFD session name.')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted.setDescription('Indicates if BFD is faulted.')
cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex.setDescription('This represents the BFD profile index in the BFD profile table configured for this gmpls dynamic ingress corouted tunnel')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable.setDescription('Indicates if auto-backup is enabled for this tunnel and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 34), MplsGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization.setDescription('Indicates if Lsp-Reoptimization is enabled or disabled for this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval.setDescription('Indicates Lsp-Reoptimization Time interval(in minutes) for this tunnel and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 36), PathDisjointType().clone('srlg')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType.setDescription('Indicates path diversification criteria used for this tunnel. It can either be node based or srlg based or link based or combination.')
cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 37), PathDisjointMode().clone('strict')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode.setDescription('Indicates mode used for path diversification for this tunnel .')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 38), MplsGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable.setDescription('Indicates if auto-size is enabled for this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval.setDescription('Indicates auto-sizing interval(in minutes) for this tunnel and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 40), AutoSizeFailHdlr().clone('alarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr.setDescription('Indicates auto-sizing failure handler for this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 41), AutoSizeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState.setDescription('Indicates dynamic auto-sizing states for this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 42), AutoSizeMode().clone('cac')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode.setDescription('Indicates auto-sizing mode for this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 43), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth.setDescription('Indicates auto-size minimum bandwidth(in kbps) for this tunnel and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 44), MplsBitRate().clone(1000000000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth.setDescription('Indicates auto-size maximum bandwidth(in kbps) for this tunnel and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 45), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth.setDescription('Indicates auto-size increment bandwidth(in kbps) for this tunnel and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 46), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth.setDescription('Indicates auto-size current bandwidth(in kbps) for this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 47), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth.setDescription('Indicates auto-size requested bandwidth(in kbps) for this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 48), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth.setDescription('Indicates auto-size used bandwidth(in kbps) for this tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelClassType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelClassType.setDescription('Indicates the DSTE class type (CT0-CT7) mapped to this Tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll.setDescription('Resource affinity Admin Color-Group which is applied in include-all colors mode to constrain path selection and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny.setDescription('Resource affinity Admin Color-Group which is applied in include-any colors mode to constrain path selection and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny.setDescription('Resource affinity Admin Color-Group which is applied in exclude-any colors mode to constrain path selection and always remains 0 in case of backup tunnel.')
cienaCesGmplsDynamicIngressCoroutedLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 4, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedLspId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicIngressCoroutedLspId.setDescription('Indicates the Ingress LSP ID.')
cienaCesGmplsStaticEgressUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5), )
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelTable.setDescription('The (conceptual) table listing the MPLS decap tunnels.')
cienaCesGmplsStaticEgressUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticEgressUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelEntry.setDescription('An entry in the static decap tunnel table. ')
cienaCesGmplsStaticEgressUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesGmplsStaticEgressUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelName.setDescription('This represents the decap tunnel name.')
cienaCesGmplsStaticEgressUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelAdminState.setDescription('Administrative status of the static decap tunnel.')
cienaCesGmplsStaticEgressUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelOperState.setDescription('Indicates the operational status of the static decap tunnel.')
cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr.setDescription('Prev hop IP address of the static decap tunnel. This object cannot be modified once the static decap tunnel entry is created.')
cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr.setDescription('Source IP address of the static decap tunnel. This object cannot be modified once the static decap tunnel entry is created.')
cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr.setDescription('destination IP address of the static decap tunnel. This object cannot be modified once the static decap tunnel entry is created.')
cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel.setDescription('Indicates the label of the static decap tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6), )
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelTable.setDescription('The (conceptual) table listing the MPLS decap tunnels.')
cienaCesGmplsStaticEgressCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticEgressCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelEntry.setDescription('An entry in the static decap tunnel table. ')
cienaCesGmplsStaticEgressCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesGmplsStaticEgressCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelName.setDescription('This represents the decap tunnel name.')
cienaCesGmplsStaticEgressCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAdminState.setDescription('Administrative status of the static decap tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelOperState.setDescription('Indicates the operational status of the static decap tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr.setDescription('Prev hop IP address of the static decap tunnel. This object cannot be modified once the static decap tunnel entry is created.')
cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr.setDescription('Source IP address of the static decap tunnel. This object cannot be modified once the static decap tunnel entry is created.')
cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr.setDescription('destination IP address of the static decap tunnel. This object cannot be modified once the static decap tunnel entry is created.')
cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel.setDescription('Indicates the in label of the static decap tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel.setDescription('Indicates the out label of the static decap tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole.setDescription('specifies protection tunnel role.')
cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName.setDescription('Protection partner name of the static encap tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelProtectionState.setDescription('Specifies the Protection status of the static encap tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex.setDescription('The group ID of the tunnel group of which the Dynamic encap tunnel is a member.')
cienaCesGmplsStaticEgressCoroutedTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReversion.setDescription('Indicates whether tunnel reversion is turned on/off for this encap tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout.setDescription('This object represents the tunnel reversion hold time in seconds before the primary encap tunnel switches back as active tunnel in its tunnel group.')
cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 18), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring.setDescription('Specifies status of BFD monitoring.')
cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName.setDescription('This object represent BFD profile name.')
cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName.setDescription('Specifies BFD session name.')
cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 21), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring.setDescription('Specifies status of AIS monitoring.')
cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName.setDescription('This object represent AIS profile name.')
cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted.setDescription('Indicates if BFD is faulted.')
cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex.setDescription('This represents the BFD profile index in the BFD profile table configured for this gmpls static egress corouted tunnel')
cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("link", 2), ("node", 3), ("srlg", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint.setDescription('Specifies the type of Recovery Disjoint')
cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 26), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL.setDescription('If the TTL policy for the Dynamic encap tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum.setDescription('This represents previous hop interface number for this gmpls static egress corouted tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelLspId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelLspId.setDescription('This represents LSP ID for this gmpls static egress corouted tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId.setDescription('This represents source tunnel ID for this gmpls static egress corouted tunnel.')
cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 6, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId.setDescription('This represents source tunnel ID for this gmpls static egress corouted tunnel.')
cienaCesGmplsDynamicEgressUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelTable.setDescription('The (conceptual) table listing the MPLS dynamic decap tunnels.')
cienaCesGmplsDynamicEgressUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicEgressUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelEntry.setDescription('An entry in the dynamic decap tunnel table.')
cienaCesGmplsDynamicEgressUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesGmplsDynamicEgressUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelName.setDescription('This represents the dynamic decap tunnel name.')
cienaCesGmplsDynamicEgressUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelAdminState.setDescription('Indicates the administrative status of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelOperState.setDescription('Indicates the operational status of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressUniDirLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirLspId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirLspId.setDescription('Indicates the LSP ID.')
cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr.setDescription('Source IP address of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr.setDescription('Source IP address of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr.setDescription('Destination IP address of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel.setDescription('Idicates the label of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelTable.setDescription('The (conceptual) table listing the MPLS dynamic decap tunnels. ')
cienaCesGmplsDynamicEgressCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicEgressCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelEntry.setDescription('An entry in the dynamic decap tunnel table.')
cienaCesGmplsDynamicEgressCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesGmplsDynamicEgressCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelName.setDescription('This represents the dynamic decap tunnel name.')
cienaCesGmplsDynamicEgressCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelAdminState.setDescription('Indicates the administrative status of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelOperState.setDescription('Indicates the operational status of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressCoroutedLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedLspId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedLspId.setDescription('Indicates the LSP ID.')
cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr.setDescription('Prev hop IP address of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr.setDescription('Source IP address of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr.setDescription('Destination IP address of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel.setDescription('Idicates the label of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel.setDescription('Indicates the out label of the dynamic decap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole.setDescription('specifies role of this dynamic tunnel')
cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName.setDescription('Protection partner name of the dynamic encap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState.setDescription('Specifies the Protection status of the static encap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex.setDescription('The group ID of the tunnel group of which the Dynamic encap tunnel is a member.')
cienaCesGmplsDynamicEgressCoroutedTunnelReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReversion.setDescription('Indicates whether tunnel reversion is turned on/off for this encap tunnel.')
cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout.setDescription('This object represents the tunnel reversion hold time in seconds before the primary encap tunnel switches back as active tunnel in its tunnel group.')
cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 19), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring.setDescription('This parameter indicates if BFD monitoring is enabled or disableb on tunnel')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName.setDescription('It Indicates assigned BFD profile names to tunnel')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName.setDescription('It Indicates BFD session names.')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted.setDescription('Specifies if BFD faulted')
cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex.setDescription('This represents the BFD profile index in the BFD profile table configured for this gmpls dynamic egress corouted tunnel')
cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 24), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 8, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL.setDescription('If the TTL policy for the Dynamic encap tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsStaticTransitUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9), )
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelTable.setDescription('The (conceptual) table listing the MPLS static TransitUniDir tunnels. ')
cienaCesGmplsStaticTransitUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticTransitUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelEntry.setDescription('An entry in the static TransitUniDir tunnel table.')
cienaCesGmplsStaticTransitUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesGmplsStaticTransitUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelName.setDescription('This represents the static TransitUniDir tunnel name.')
cienaCesGmplsStaticTransitUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAdminState.setDescription('Indicates the administrative status of the static TransitUniDir tunnel.')
cienaCesGmplsStaticTransitUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOperState.setDescription('Indicates the operational status of the static TransitUniDir tunnel.')
cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr.setDescription('Source IP address of the static TransitUniDir tunnel.')
cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr.setDescription('Destination IP address of the static TransitUniDir tunnel.')
cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr.setDescription('Next hop IP address of the static TransitUniDir tunnel.')
cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr.setDescription('Previous hop IP address of the static TransitUniDir tunnel.')
cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel.setDescription('Indicates the incoming label of the static TransitUniDir tunnel.')
cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel.setDescription('Indicates the outgoing label of the static TransitUniDir tunnel.')
cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 11), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsStaticTransitUniDirTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelFixedTTL.setDescription('If the TTL policy for the static TransitUniDir tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesGmplsStaticTransitUniDirTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 15), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring.setDescription("Specifies AIS monitoring's status.")
cienaCesGmplsStaticTransitUniDirTunnelAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAisProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelAisProfileName.setDescription('This object contais AIS profile name.')
cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets.setDescription('The number of incoming packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets.setDescription('The number of outgoing packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes.setDescription('The number of incoming bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 9, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes.setDescription('The number of outgoing bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10), )
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelTable.setDescription('The (conceptual) table listing the MPLS static TransitCorouted tunnels. ')
cienaCesGmplsStaticTransitCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsStaticTransitCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelEntry.setDescription('An entry in the static TransitCorouted tunnel table.')
cienaCesGmplsStaticTransitCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesGmplsStaticTransitCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelName.setDescription('This represents the static TransitCorouted tunnel name.')
cienaCesGmplsStaticTransitCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAdminState.setDescription('Indicates the administrative status of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOperState.setDescription('Indicates the operational status of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr.setDescription('Source IP address of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr.setDescription('Destination IP address of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr.setDescription('Next hop IP address of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr.setDescription('Previous hop IP address of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel.setDescription('Indicates the incoming label of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel.setDescription('Indicates the outgoing label of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel.setDescription('Indicates the incoming label of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel.setDescription('Indicates the outgoing label of the static TransitCorouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL.setDescription('If the TTL policy for the static TransitCorouted tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex.setDescription('This object represents Cos profile index')
cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName.setDescription('Specifies the name of Cos profile')
cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 17), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring.setDescription('specifies AIS monitoring.')
cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName.setDescription('This object contains AIS profile name ')
cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum.setDescription('This represents previous hop interface number for this gmpls transit corouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum.setDescription('This represents next hop interface number for this gmpls transit corouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelLspId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelLspId.setDescription('This represents LSP ID for this gmpls transit corouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId.setDescription('This represents source tunnel ID for this gmpls transit corouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId.setDescription('This represents destination tunnel ID for this gmpls transit corouted tunnel.')
cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets.setDescription('The number of incoming packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets.setDescription('The number of outgoing packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes.setDescription('The number of incoming bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes.setDescription('The number of outgoing bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets.setDescription('The number of reverse direction incoming packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets.setDescription('The number of reverse direction outgoing packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes.setDescription('The number of reverse direction incoming bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 10, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes.setDescription('The number of reverse direction outgoing bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitUniDirTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelTable.setDescription('The (conceptual) table listing the MPLS Dynamic TransitUniDir tunnels. ')
cienaCesGmplsDynamicTransitUniDirTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicTransitUniDirTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelEntry.setDescription('An entry in the Dynamic TransitUniDir tunnel table.')
cienaCesGmplsDynamicTransitUniDirTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesGmplsDynamicTransitUniDirTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelName.setDescription('This represents the Dynamic TransitUniDir tunnel name.')
cienaCesGmplsDynamicTransitUniDirTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelAdminState.setDescription('Indicates the administrative status of the Dynamic TransitUniDir tunnel.')
cienaCesGmplsDynamicTransitUniDirTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOperState.setDescription('Indicates the operational status of the Dynamic TransitUniDir tunnel.')
cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr.setDescription('Source IP address of the Dynamic TransitUniDir tunnel.')
cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr.setDescription('Destination IP address of the Dynamic TransitUniDir tunnel.')
cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr.setDescription('Next hop IP address of the Dynamic TransitUniDir tunnel.')
cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel.setDescription('Indicates the incoming label of the Dynamic TransitUniDir tunnel.')
cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel.setDescription('Indicates the outgoing label of the Dynamic TransitUniDir tunnel.')
cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 10), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL.setDescription('If the TTL policy for the Dynamic TransitUniDir tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets.setDescription('The number of incoming packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets.setDescription('The number of outgoing packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes.setDescription('The number of incoming bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 11, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes.setDescription('The number of outgoing bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitCoroutedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12), )
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelTable.setDescription('The (conceptual) table listing the MPLS Dynamic TransitCoRouted tunnels. ')
cienaCesGmplsDynamicTransitCoroutedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsDynamicTransitCoroutedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelEntry.setDescription('An entry in the Dynamic TransitCorouted tunnel table.')
cienaCesGmplsDynamicTransitCoroutedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIndex.setDescription('This represents the unique index in the table.')
cienaCesGmplsDynamicTransitCoroutedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelName.setDescription('This represents the Dynamic TransitCorouted tunnel name.')
cienaCesGmplsDynamicTransitCoroutedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 3), CienaGlobalState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelAdminState.setDescription('Indicates the administrative status of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOperState.setDescription('Indicates the operational status of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr.setDescription('Source IP address of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr.setDescription('Destination IP address of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr.setDescription('Next hop IP address of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr.setDescription('Previous hop IP address of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel.setDescription('Indicates the incoming label of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel.setDescription('Indicates the outgoing label of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel.setDescription('Indicates the incoming label of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel.setDescription('Indicates the outgoing label of the Dynamic TransitCorouted tunnel.')
cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 13), TTLPolicy().clone('fixed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy.setDescription('Specifies whether TTL is fixed or inherited from the frame.')
cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL.setDescription('If the TTL policy for the Dynamic TransitCorouted tunnel is fixed, then this object is the TTL value.')
cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets.setDescription('The number of incoming packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets.setDescription('The number of outgoing packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes.setDescription('The number of incoming bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes.setDescription('The number of outgoing bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets.setDescription('The number of reverse incoming packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets.setDescription('The number of reverse outgoing packets for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes.setDescription('The number of reverse incoming bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 12, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes.setDescription('The number of reverse outgoing bytes for the given transit tunnel. This object is supported only on specific platforms.')
cienaCesGmplsAssociatedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13), )
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelTable.setDescription('The (conceptual) table listing the Gmpls Associated tunnels.')
cienaCesGmplsAssociatedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsAssociatedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelEntry.setDescription('This represents an entry of the Gmpls static encap tunnel table.')
cienaCesGmplsAssociatedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelIndex.setDescription('Unique tunnel index in the table.')
cienaCesGmplsAssociatedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelName.setDescription('specifies Gmpls associated tunnel name.')
cienaCesGmplsAssociatedForwardTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelName.setDescription('specifies associated forward tunnel.')
cienaCesGmplsAssociatedForwardTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelType.setDescription('specifies associated forward tunnel type.')
cienaCesGmplsAssociatedReverseTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelName.setDescription('specifies associated reverse tunnel.')
cienaCesGmplsAssociatedReverseTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelType.setDescription('specifies associated reverse tunnel type.')
cienaCesGmplsAssociatedForwardTunnelDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelDestIpAddr.setDescription('specifies associated Gmpls forward tunnel destination IP address')
cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr.setDescription('specifies associated Gmpls reverse tunnel source IP address.')
cienaCesGmplsAssociatedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 9), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelAdminState.setDescription('Administrator status of associated tunnel.')
cienaCesGmplsAssociatedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 10), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelOperState.setDescription('Operational status of associated tunnel.')
cienaCesGmplsAssociatedForwardTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 11), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedForwardTunnelOperState.setDescription('Operational status of associated forward tunnel.')
cienaCesGmplsAssociatedReverseTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 12), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedReverseTunnelOperState.setDescription('Operational status of associated reverse tunnel.')
cienaCesGmplsAssociatedProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedProtectionRole.setDescription('specifies the protection role of the associated tunnel ')
cienaCesGmplsAssociatedProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedProtectionState.setDescription('specifies the protection status of the associated tunnel ')
cienaCesGmplsAssociatedTunnelProtectionPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelProtectionPartnerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelProtectionPartnerName.setDescription('This object represents the tunnel name it is protecting')
cienaCesGmplsAssociatedBfdMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 16), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdMonitoring.setDescription('Specifies status of BFD monitoring.')
cienaCesGmplsAssociatedBfdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdProfileName.setDescription('This object represent BFD profile name.')
cienaCesGmplsAssociatedBfdSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdSessionName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdSessionName.setDescription('Specifies BFD session name.')
cienaCesGmplsAssociatedAisMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 19), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedAisMonitoring.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedAisMonitoring.setDescription('Specifies status of AIS monitoring.')
cienaCesGmplsAssociatedAisProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedAisProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedAisProfileName.setDescription('This object represent BFD profile name.')
cienaCesGmplsAssociatedBfdSessionFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdSessionFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdSessionFaulted.setDescription('Specifies BFD session error code.')
cienaCesGmplsAssociatedBfdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 13, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedBfdProfileIndex.setDescription('This represents the BFD profile index in the BFD profile table configured for this gmpls associated tunnel')
cienaCesGmplsTunnelARHopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14), )
if mibBuilder.loadTexts: cienaCesGmplsTunnelARHopTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsTunnelARHopTable.setDescription('The GmplsTunnelARHopTable is used to indicate the hops for an Gmpls tunnel defined in GmplsTunnelTable, as reported by the Gmpls signalling protocol. Thus at a transit LSR, this table (if the table is supported and if the signaling protocol is recording actual route information) contains the actual route of the whole tunnel. If the signaling protocol is not recording the actual route, this table MAY report the information from the GmplsTunnelHopTable or the GmplsTunnelCHopTable. Each row in this table is indexed by GmplsTunnelARHopListIndex. Each row also has a secondary index GmplsTunnelARHopIndex, corresponding to the next hop that this row corresponds to. Please note that since the information necessary to build entries within this table is not provided by some Gmpls signalling protocols, implementation of this table is optional. Furthermore, since the information in this table is actually provided by the Gmpls signalling protocol after the path has been set-up, the entries in this table are provided only for observation, and hence, all variables in this table are accessible exclusively as read- only. Note also that the contencts of this table may change while it is being read because of re-routing activities. A network administrator may verify that the actual route read is consistent by reference to the GmplsTunnelLastPathChange object.')
cienaCesGmplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaGmplsTunnelARHopListIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaGmplsTunnelARHopIndex"))
if mibBuilder.loadTexts: cienaCesGmplsTunnelARHopEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsTunnelARHopEntry.setDescription('An entry in this table represents a tunnel hop. An entry is created by the agent for signaled ERLSP set up by an Gmpls signalling protocol.')
cienaGmplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaGmplsTunnelARHopListIndex.setStatus('current')
if mibBuilder.loadTexts: cienaGmplsTunnelARHopListIndex.setDescription('Primary index into this table identifying a particular recorded hop list.')
cienaGmplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cienaGmplsTunnelARHopIndex.setStatus('current')
if mibBuilder.loadTexts: cienaGmplsTunnelARHopIndex.setDescription('Secondary index into this table identifying the particular hop.')
cienaGmplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaGmplsTunnelARHopAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaGmplsTunnelARHopAddrType.setDescription('The Hop Address Type of this tunnel hop. Note that lspid(5) is a valid option only for tunnels signaled via CRLDP.')
cienaGmplsTunnelARHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaGmplsTunnelARHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaGmplsTunnelARHopIpAddr.setDescription('The Tunnel Hop Address for this tunnel hop. The type of this address is determined by the value of the corresponding GmplsTunnelARHopAddrType. If GmplsTunnelARHopAddrType is set to unnum(4), then this value contains the LSR Router ID of the unnumbered interface. Otherwise the agent SHOULD set this object to the zero-length string and the manager should ignore this object.')
cienaGmplsTunnelARHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaGmplsTunnelARHopAddrUnnum.setStatus('current')
if mibBuilder.loadTexts: cienaGmplsTunnelARHopAddrUnnum.setDescription('If GmplsTunnelARHopAddrType is set to unnum(4), then this value will contain the interface identifier of the unnumbered interface for this hop. This object should be used in conjunction with GmplsTunnelARHopIpAddr which would contain the LSR Router ID in this case. Otherwise the agent should set this object to zero-length string and the manager should ignore this.')
cienaGmplsTunnelARHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaGmplsTunnelARHopLspId.setStatus('current')
if mibBuilder.loadTexts: cienaGmplsTunnelARHopLspId.setDescription('If GmplsTunnelARHopAddrType is set to lspid(5), then this value will contain the LSP ID of this hop. This object is otherwise insignificant and should contain a value of 0 to indicate this fact.')
cienaCesGmplsEncapTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15))
cienaCesGmplsNotifEncapTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelTable.setDescription('Table of notification objects required for encap tunnel notification.')
cienaCesGmplsNotifEncapTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelEntry.setDescription('An entry (conceptual row) in the cienaCesGmplsNotifEncapTunnelTable. No Get, GetNext or Set is allowed on this table.')
cienaCesGmplsNotifEncapTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelIndex.setDescription('Tunnel index of the encap tunnel associated with the notification.')
cienaCesGmplsNotifEncapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelType.setDescription('Encap tunnel type of the encap tunnel associated with the notification.')
cienaCesGmplsNotifEncapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelName.setDescription('This represents the encap tunnel name.')
cienaCesGmplsNotifEncapTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelAdminState.setDescription('Administrative state of the encap tunnel.')
cienaCesGmplsNotifEncapTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOperState.setDescription('Operational state of the encap tunnel.')
cienaCesGmplsNotifEncapTunnelAisFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 6), TunnelAisFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelAisFaulted.setStatus('obsolete')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelAisFaulted.setDescription('This is replaced by cienaCesGmplsNotifOamTunnelAisFaulted.')
cienaCesGmplsNotifEncapTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelFaultedNodeId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelFaultedNodeId.setDescription('IP address of the node with the AIS fault.')
cienaCesGmplsNotifEncapTunnelFarEndLerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelFarEndLerId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelFarEndLerId.setDescription('IP address of the far end LER for the tunne with the AIS fault.')
cienaCesGmplsNotifEncapTunnelResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelResult.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelResult.setDescription('specifies the result of encap tunnel auto sizing/MBB.')
cienaCesGmplsNotifEncapTunnelProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelProtectionRole.setDescription('specifies the protection role of the dynamic encap tunnel.')
cienaCesGmplsNotifEncapTunnelRequestedBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelRequestedBw.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelRequestedBw.setDescription('specifies the requested bandwidth of the dynamic encap tunnel.')
cienaCesGmplsNotifEncapTunnelOperationalBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOperationalBw.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOperationalBw.setDescription('specifies the operational bandwidth of the dynamic encap tunnel.')
cienaCesGmplsNotifEncapTunnelMbbParentApp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("autosize", 2), ("lspreoptimization", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelMbbParentApp.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelMbbParentApp.setDescription('specifies the parent application using MBB of the dynamic encap tunnel.')
cienaCesGmplsNotifEncapTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 15, 1, 1, 14), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOamFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelOamFaulted.setDescription('Indication if the tunnel has Oam fault.')
cienaCesGmplsDecapTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16))
cienaCesGmplsNotifDecapTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelTable.setDescription('Table of notification objects required for decap tunnel notification.')
cienaCesGmplsNotifDecapTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelEntry.setDescription('An entry (conceptual row) in the cienaCesGmplsNotifDecapTunnelTable. No Get, GetNext or Set is allowed on this table.')
cienaCesGmplsNotifDecapTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelIndex.setDescription('Tunnel index of the decap tunnel associated with the notification.')
cienaCesGmplsNotifDecapTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelType.setDescription('Decap tunnel type of the decap tunnel associated with the notification.')
cienaCesGmplsNotifDecapTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelName.setDescription('This represents the decap tunnel name.')
cienaCesGmplsNotifDecapTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelAdminState.setDescription('Administrative state of the decap tunnel.')
cienaCesGmplsNotifDecapTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelOperState.setDescription('Operational state of the decap tunnel.')
cienaCesGmplsNotifDecapTunnelAisFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 6), TunnelAisFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelAisFaulted.setStatus('obsolete')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelAisFaulted.setDescription('This is replaced by cienaCesGmplsNotifDecapTunnelOamFaulted.')
cienaCesGmplsNotifDecapTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelFaultedNodeId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelFaultedNodeId.setDescription('IP address of the node with the AIS fault.')
cienaCesGmplsNotifDecapTunnelFarEndLerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelFarEndLerId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelFarEndLerId.setDescription('IP address of the far end LER for the tunne with the AIS fault.')
cienaCesGmplsNotifDecapTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 16, 1, 1, 9), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelOamFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelOamFaulted.setDescription('Indication if the tunnel has Oam fault.')
cienaCesGmplsTransitTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17))
cienaCesGmplsNotifTransitTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelTable.setDescription('Table of notification objects required for transit tunnel notification.')
cienaCesGmplsNotifTransitTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelEntry.setDescription('An entry (conceptual row) in the cienaCesGmplsNotifTransitTunnelTable. No Get, GetNext or Set is allowed on this table.')
cienaCesGmplsNotifTransitTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelIndex.setDescription('Tunnel index of the transit tunnel associated with the notification.')
cienaCesGmplsNotifTransitTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelType.setDescription('Transit tunnel type of the transit tunnel associated with the notification.')
cienaCesGmplsNotifTransitTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelName.setDescription('This represents the transit tunnel name.')
cienaCesGmplsNotifTransitTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelAdminState.setDescription('Administrative state of the transit tunnel.')
cienaCesGmplsNotifTransitTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelOperState.setDescription('Operational state of the transit tunnel.')
cienaCesGmplsNotifTransitTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 17, 1, 1, 6), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelOamFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTransitTunnelOamFaulted.setDescription('Indication if the tunnel has Oam fault.')
cienaCesGmplsAssociatedTunnelNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18))
cienaCesGmplsNotifAssociatedTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelTable.setDescription('Table of notification objects required for associated tunnel notification.')
cienaCesGmplsNotifAssociatedTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelType"), (0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelEntry.setDescription('An entry (conceptual row) in the cienaCesGmplsNotifAssociatedTunnelTable. No Get, GetNext or Set is allowed on this table.')
cienaCesGmplsNotifAssociatedTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelIndex.setDescription('Tunnel index of the associated tunnel associated with the notification.')
cienaCesGmplsNotifAssociatedTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelType.setDescription('Associated tunnel type of the associated tunnel associated with the notification.')
cienaCesGmplsNotifAssociatedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelName.setDescription('This represents the associated tunnel name.')
cienaCesGmplsNotifAssociatedTunnelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 4), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelAdminState.setDescription('Administrative state of the associated tunnel.')
cienaCesGmplsNotifAssociatedTunnelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 5), CienaGlobalState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelOperState.setDescription('Operational state of the associated tunnel.')
cienaCesGmplsNotifAssociatedTunnelAisFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 6), TunnelAisFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelAisFaulted.setStatus('obsolete')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelAisFaulted.setDescription('Replaced by cienaCesGmplsNotifAssociatedTunnelOamFaulted')
cienaCesGmplsNotifAssociatedTunnelFaultedNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelFaultedNodeId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelFaultedNodeId.setDescription('IP address of the node with the AIS fault.')
cienaCesGmplsNotifAssociatedTunnelFarEndLerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelFarEndLerId.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelFarEndLerId.setDescription('IP address of the far end LER for the tunne with the AIS fault.')
cienaCesGmplsNotifAssociatedTunnelOamFaulted = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 18, 1, 1, 9), TunnelOamFault()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelOamFaulted.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifAssociatedTunnelOamFaulted.setDescription('Indication if the tunnel has Oam fault.')
cienaCesGmplsEncapTunnelGrpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19))
cienaCesGmplsNotifEncapTunnelGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpTable.setDescription('Table of notification objects required for encap tunnel group notification.')
cienaCesGmplsNotifEncapTunnelGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpEntry.setDescription('An entry (conceptual row) in the cienaCesGmplsNotifEncapTunnelGrpTable. No Get, GetNext or Set is allowed on this table.')
cienaCesGmplsNotifEncapTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpIndex.setDescription('Tunnel group index of the encap tunnel associated with the notification.')
cienaCesGmplsNotifEncapTunnelGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpName.setDescription('Tunnel group name of the encap tunnel associated with the notification.')
cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex.setDescription('Active Encap Tunnel index of the tunnel group associated with the notification.')
cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName.setDescription('Active Encap Tunnel name of the Tunnel group associated with the notification.')
cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType.setDescription('Encap tunnel type of the encap tunnel associated with the notification.')
cienaCesGmplsDecapTunnelGrpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20))
cienaCesGmplsNotifDecapTunnelGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpTable.setDescription('Table of notification objects required for decap tunnel group notification.')
cienaCesGmplsNotifDecapTunnelGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpIndex"))
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpEntry.setDescription('An entry(conceptual row) in the cienaCesGmplsNotifDecapTunnelGrpTable. No Get, GetNext or Set is allowed on this table.')
cienaCesGmplsNotifDecapTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpIndex.setDescription('Tunnel group index of the decap tunnel associated with the notification.')
cienaCesGmplsNotifDecapTunnelGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpName.setDescription('Tunnel group name of the decap tunnel associated with the notification.')
cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex.setDescription('Active Decap Tunnel index of the tunnel group associated with the notification.')
cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName.setDescription('Active Decap Tunnel name of the Tunnel group associated with the notification.')
cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType.setDescription('Decap tunnel type of the decap tunnel associated with the notification.')
cienaCesGmplsTunnelAisFaultErrorNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21))
cienaCesGmplsNotifTunnelAisFaultErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21, 1), )
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelAisFaultErrorTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelAisFaultErrorTable.setDescription('Table of notification objects required for tunnel Ais Fault error notification.')
cienaCesGmplsNotifTunnelAisFaultErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTunnelDecapLabel"))
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelAisFaultErrorEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelAisFaultErrorEntry.setDescription('An entry (conceptual row) in the cienaCesGmplsNotifTunnelAisFaultErrorTable No Get, GetNext or Set is allowed on this table.')
cienaCesGmplsNotifTunnelDecapLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelDecapLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelDecapLabel.setDescription('Decap label associated with the notification.')
cienaCesGmplsNotifTunnelErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 2, 21, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelErrorMsg.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsNotifTunnelErrorMsg.setDescription('This represents the fault error message for decap label associated with the notification')
cienaCesGmplsEncapUnidirTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 1)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesGmplsEncapUnidirTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsEncapUnidirTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of an encap uni-direction tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifEncapTunnelIndex, cienaCesGmplsNotifEncapTunnelType, cienaCesGmplsNotifEncapTunnelName, cienaCesGmplsNotifEncapTunnelAdminState, cienaCesGmplsNotifEncapTunnelOperState, cienaCesGmplsNotifEncapTunnelOamFaulted, cienaCesGmplsNotifEncapTunnelFaultedNodeId.')
cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 2)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of an encap corouted tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifEncapTunnelIndex, cienaCesGmplsNotifEncapTunnelType, cienaCesGmplsNotifEncapTunnelName, cienaCesGmplsNotifEncapTunnelAdminState, cienaCesGmplsNotifEncapTunnelOperState, cienaCesGmplsNotifEncapTunnelOamFaulted, cienaCesGmplsNotifEncapTunnelFaultedNodeId.')
cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 3)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of an decap corouted tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifDecapTunnelIndex, cienaCesGmplsNotifDecapTunnelType, cienaCesGmplsNotifDecapTunnelName, cienaCesGmplsNotifDecapTunnelAdminState, cienaCesGmplsNotifDecapTunnelOperState, cienaCesGmplsNotifDecapTunnelOamFaulted, cienaCesGmplsNotifDecapTunnelFaultedNodeId.')
cienaCesGmplsTransitUnidirTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 4)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelOamFaulted"))
if mibBuilder.loadTexts: cienaCesGmplsTransitUnidirTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsTransitUnidirTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of a transit uni-direcition tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifTransitTunnelIndex, cienaCesGmplsNotifTransitTunnelType, cienaCesGmplsNotifTransitTunnelName, cienaCesGmplsNotifTransitTunnelAdminState, cienaCesGmplsNotifTransitTunnelOperState, cienaCesGmplsNotifTransitTunnelOamFaulted.')
cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 5)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTransitTunnelOamFaulted"))
if mibBuilder.loadTexts: cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of a transit corouted tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifTransitTunnelIndex, cienaCesGmplsNotifTransitTunnelType, cienaCesGmplsNotifTransitTunnelName, cienaCesGmplsNotifTransitTunnelAdminState, cienaCesGmplsNotifTransitTunnelOperState, cienaCesGmplsNotifTransitTunnelOamFaulted.')
cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 6)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType"))
if mibBuilder.loadTexts: cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap.setDescription('This notification is sent whenever the active encap tunnel in an encap uni-direction tunnel group changes.')
cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 7)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType"))
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap.setDescription('This notification is sent whenever the active encap tunnel in an encap corouted tunnel group changes.')
cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 8)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType"))
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap.setDescription('This notification is sent whenever the active decap tunnel in a decap corouted tunnel group changes.')
cienaCesGmplsAssociatedTunnelOperStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 9)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelAdminState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelOperState"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelOamFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelFaultedNodeId"))
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelOperStateChgTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelOperStateChgTrap.setDescription('This notification is sent when the operational state of an encap tunnel changes. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifAssociatedTunnelIndex, cienaCesGmplsNotifAssociatedTunnelType, cienaCesGmplsNotifAssociatedTunnelName, cienaCesGmplsNotifAssociatedTunnelAdminState, cienaCesGmplsNotifAssociatedTunnelOperState, cienaCesGmplsNotifAssociatedTunnelOamFaulted, cienaCesGmplsNotifAssociatedTunnelFaultedNodeId.')
cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 10)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelAisFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelFaultedNodeId"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelFarEndLerId"))
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap.setStatus('obsolete')
if mibBuilder.loadTexts: cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap.setDescription('This notification is obsoleted, its functionality is absorbed in the OperState Change notification.')
cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 11)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelAisFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelFaultedNodeId"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifDecapTunnelFarEndLerId"))
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap.setStatus('obsolete')
if mibBuilder.loadTexts: cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap.setDescription('This notification is obsoleted, its functionality is absorbed in the OperState Change notification.')
cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 12)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelAisFaulted"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelFaultedNodeId"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifAssociatedTunnelFarEndLerId"))
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap.setStatus('obsolete')
if mibBuilder.loadTexts: cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap.setDescription('This notification is obsoleted, its functionality is absorbed in the OperState Change notification.')
cienaCesGmplsTunnelAisFaultErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 13)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTunnelDecapLabel"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifTunnelErrorMsg"))
if mibBuilder.loadTexts: cienaCesGmplsTunnelAisFaultErrorTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsTunnelAisFaultErrorTrap.setDescription('This notification is sent when there is a fault sent for a LSP whose label is not associated with any tunnel. This will happen whenever the AIS admin state is disabled for the bidirectional tunnel. Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifTunnelDecapLabel, and cienaCesGmplsNotifTunnelErrorMsg')
cienaCesGmplsEncapTunnelResizeResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 14)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelResult"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelProtectionRole"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelRequestedBw"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOperationalBw"))
if mibBuilder.loadTexts: cienaCesGmplsEncapTunnelResizeResultTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsEncapTunnelResizeResultTrap.setDescription('This notification is sent when the encap tunnel auto size is done Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifEncapTunnelIndex, cienaCesGmplsNotifEncapTunnelType, cienaCesGmplsNotifEncapTunnelName, cienaCesGmplsNotifEncapTunnelResult, cienaCesGmplsNotifEncapTunnelProtectionRole, cienaCesGmplsNotifEncapTunnelRequestdBw and cienaCesGmplsNotifEncapTunnelOperationalBw.')
cienaCesGmplsEncapTunnelMbbResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 1, 15)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelType"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelName"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelResult"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelProtectionRole"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelRequestedBw"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelOperationalBw"), ("CIENA-CES-MPLS-MIB", "cienaCesGmplsNotifEncapTunnelMbbParentApp"))
if mibBuilder.loadTexts: cienaCesGmplsEncapTunnelMbbResultTrap.setStatus('current')
if mibBuilder.loadTexts: cienaCesGmplsEncapTunnelMbbResultTrap.setDescription('This notification is sent when the encap tunnel MBB done Variable bindings include: cienaGlobalSeverity, cienaGlobalMacAddress, cienaCesGmplsNotifEncapTunnelIndex, cienaCesGmplsNotifEncapTunnelType, cienaCesGmplsNotifEncapTunnelName, cienaCesGmplsNotifEncapTunnelResult, cienaCesGmplsNotifEncapTunnelProtectionRole, cienaCesGmplsNotifEncapTunnelRequestdBw and cienaCesGmplsNotifEncapTunnelOperationalBw, cienaCesGmplsNotifEncapTunnelMbbParentApp.')
cienaCesMplsAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1))
cienaCesMplsGlobalStaticAdminLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminLabelRangeStart.setDescription(' The beginning of the static administrative label range. There cannot be any overlap between static and dynamic label ranges. Setting this object does not become effective until the device is rebooted.')
cienaCesMplsGlobalStaticAdminLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminLabelRangeEnd.setDescription(' The end of the static administrative label range. There cannot be any overlap between static and dynamic label ranges. Setting this object does not become effective until the device is rebooted.')
cienaCesMplsGlobalStaticOperLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperLabelRangeStart.setDescription(' The beginning of the static operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalStaticOperLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperLabelRangeEnd.setDescription(' The end of the static operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalDynamicAdminLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicAdminLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicAdminLabelRangeStart.setDescription('The beginning of the dynamic administrative label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalDynamicAdminLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicAdminLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicAdminLabelRangeEnd.setDescription('The end of the dynamic administrative label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalDynamicOperLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicOperLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicOperLabelRangeStart.setDescription('The beginning of the dynamic operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalDynamicOperLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicOperLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalDynamicOperLabelRangeEnd.setDescription('The end of the dynamic operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart.setDescription(' The beginning of the static tunnel administrative label range. There cannot be any overlap between static and dynamic label ranges. Setting this object does not become effective until the device is rebooted.')
cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd.setDescription(' The end of the static tunnel administrative label range. There cannot be any overlap between static and dynamic label ranges. Setting this object does not become effective until the device is rebooted.')
cienaCesMplsGlobalStaticOperTunnelLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperTunnelLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperTunnelLabelRangeStart.setDescription(' The beginning of the static tunnel operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd.setDescription(' The end of the static tunnel operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalStaticAdminVcLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminVcLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminVcLabelRangeStart.setDescription(' The beginning of the static VC administrative label range. There cannot be any overlap between static and dynamic label ranges. Setting this object does not become effective until the device is rebooted.')
cienaCesMplsGlobalStaticAdminVcLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminVcLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticAdminVcLabelRangeEnd.setDescription(' The end of the static VC administrative label range. There cannot be any overlap between static and dynamic label ranges. Setting this object does not become effective until the device is rebooted.')
cienaCesMplsGlobalStaticOperVcLabelRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperVcLabelRangeStart.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperVcLabelRangeStart.setDescription(' The beginning of the static VC operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalStaticOperVcLabelRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperVcLabelRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalStaticOperVcLabelRangeEnd.setDescription(' The end of the static VC operational label range. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsGlobalNextFreeStaticVcLabel = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalNextFreeStaticVcLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalNextFreeStaticVcLabel.setDescription('The next free static VC label. There cannot be any overlap between static and dynamic label ranges.')
cienaCesMplsTunnelCosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2), )
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileTable.setDescription('Mpls cos-profile table.')
cienaCesMplsTunnelCosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsTunnelCosProfileIndex"))
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileEntry.setDescription('Mpls cos-profile table entry.')
cienaCesMplsTunnelCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileIndex.setDescription('Unique index for Mpls tunnel Cos profile.')
cienaCesMplsTunnelCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelCosProfileName.setDescription('Mpls tunnel Cos profile name')
cienaCesMplsTunnelFrmCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 3), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosPolicy.setDescription('Frame CoS policy of the tunnel.')
cienaCesMplsTunnelFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosMapId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosMapId.setDescription('The frame CoS map ID of tunnel. This value is valid if the frame CoS policy selected for the tunnel is rcos-mapped.')
cienaCesMplsTunnelFrmCosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosMapName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelFrmCosMapName.setDescription('Mpls tunnel frame cos Map name')
cienaCesMplsTunnelFixedTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelFixedTC.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelFixedTC.setDescription('If the frame CoS policy for the tunnel is fixed, this value is used for MPLS encapsulation.')
cienaCesMplsTunnelRcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 7), RCosPolicy().clone('exp-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosPolicy.setDescription('Resolved CoS policy of the tunnel.')
cienaCesMplsTunnelRcosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosMapName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosMapName.setDescription('Mpls tunnel resolved cos Map name. This object is valid only for 39XX and 51XX platforms')
cienaCesMplsTunnelRCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRCosMapId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelRCosMapId.setDescription('The resolved CoS map ID of the tunnel. This value is valid if the resolved CoS policy selected for the tunnel is rcos-mapped. This object is valid only for 39XX and 51XX platforms')
cienaCesMplsTunnelRcosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelRcosProfileName.setDescription('Mpls Tunnel resolved cos Profile name. This object is valid only for 87XX platforms')
cienaCesMplsTunnelRCosProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsTunnelRCosProfileId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsTunnelRCosProfileId.setDescription('The resolved Cos profile ID of the Tunnel. This value is valid if the resolved Cos policy selected for the pseudowire is rcos-mapped. This object is valid only for 87XX platforms')
cienaCesMplsGlobalTunnelPath = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3))
cienaCesMplsGlobalTunnelPathTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1), )
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathTable.setDescription('The (conceptual) table listing the MPLS tunnel paths. To create an entry in the tunnel path table, cienaCesMplsGlobalTunnelPathName and cienaCesMplsGlobalTunnelPathRowStatus must both be specified.')
cienaCesMplsGlobalTunnelPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsGlobalTunnelPathIndex"))
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathEntry.setDescription('An entry in the tunnel path table.')
cienaCesMplsGlobalTunnelPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathIndex.setDescription('A unique index in the path entry table.')
cienaCesMplsGlobalTunnelPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathName.setDescription('Name associated with the path.')
cienaCesMplsGlobalTunnelPathUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathUseCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathUseCount.setDescription('Indicates the number of encap tunnels that are using this path.')
cienaCesMplsGlobalTunnelPathHopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2), )
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopTable.setDescription('The (conceptual) table listing the MPLS tunnel path hop. To create an entry in the path-hop table, cienaCesMplsGlobalTunnelPathHopIpAddr and cienaCesMplsGlobalTunnelPathHopRowStatus must both be specified.')
cienaCesMplsGlobalTunnelPathHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsGlobalTunnelPathIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesMplsGlobalTunnelPathHopIndex"))
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopEntry.setDescription('A tunnel hop entry.')
cienaCesMplsGlobalTunnelPathHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopIndex.setDescription('Unique index in the path hop table.')
cienaCesMplsGlobalTunnelPathHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopIpAddr.setDescription('IP address associated with this hop. This object cannot be modified once the path hop is created.')
cienaCesMplsGlobalTunnelPathHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2))).clone('strict')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalTunnelPathHopType.setDescription('Indidcates the hop type of the path member. This object cannot be modified once the path hop is created.')
cienaCesMplsGlobalFreeStaticTunnelLabelTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 4), )
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelTable.setDescription('Mpls Free static Tunnel Label table.')
cienaCesMplsGlobalFreeStaticTunnelLabelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 4, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsGlobalFreeStaticTunnelLabelIndex"))
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelEntry.setDescription('Mpls Free static Tunnel Label table.')
cienaCesMplsGlobalFreeStaticTunnelLabelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabelIndex.setDescription('Unique index for Mpls Free static Tunnel Label table.')
cienaCesMplsGlobalFreeStaticTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsGlobalFreeStaticTunnelLabel.setDescription('Mpls Free static Tunnel Label.')
cienaCesTeLinkTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1), )
if mibBuilder.loadTexts: cienaCesTeLinkTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTable.setDescription('This table captures the TE-link entries along with their respective attributes.')
cienaCesTeLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesTeIfIndex"))
if mibBuilder.loadTexts: cienaCesTeLinkEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkEntry.setDescription('This represents an entry for the TE-Link interface')
cienaCesTeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesTeIfIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeIfIndex.setDescription('This represents the unique index for TE-Interface.')
cienaCesTeInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeInterfaceName.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeInterfaceName.setDescription('This represents the TE Interface name.')
cienaCesTeLinkMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkMetric.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkMetric.setDescription('Link cost of the TE-Interface.')
cienaCesTeResourceColorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupIndex.setDescription('Resource Color Group Index this TE-link is associated to.')
cienaCesTeResourceColorBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorBitMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorBitMask.setDescription('This represents individual bit for Resource Color which will be set in Resource Color Group.')
cienaCesMplsClassProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsClassProfIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsClassProfIndex.setDescription('Class Profile Index this TE-link is associated to.')
cienaCesTeLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 7), TEMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkMode.setDescription('TE mode of the TE-Interface.')
cienaCesTeLinkSrlgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkSrlgCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkSrlgCount.setDescription('This identifies the total number of SRLGs configured on this TE link.')
cienaCesTeLinkMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 9), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkMaximumBandwidth.setDescription('Maximum TE-link Bandwidth(in kbps). This is same as the port bandwidth on which this TE-link is created')
cienaCesTeLinkMaximumReservableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 10), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkMaximumReservableBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkMaximumReservableBandwidth.setDescription('Maximum Reservable bandwidth(in kbps) on this TE-link.')
cienaCesTeLinkTotalBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 11), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio0.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio0.setDescription('Total Priority 0 Bandwidth(in kbps) allocated in this TE-link.')
cienaCesTeLinkReservedBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 12), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio0.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio0.setDescription('Reserved Priority 0 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkUnReservedBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 13), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio0.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio0.setDescription('UnReserved Priority 0 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkTotalBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 14), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio1.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio1.setDescription('Total Priority 1 Bandwidth(in kbps) allocated in this TE-link.')
cienaCesTeLinkReservedBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 15), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio1.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio1.setDescription('Reserved Priority 1 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkUnReservedBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 16), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio1.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio1.setDescription('UnReserved Priority 1 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkTotalBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 17), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio2.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio2.setDescription('Total Priority 2 Bandwidth(in kbps) allocated in this TE-link.')
cienaCesTeLinkReservedBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 18), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio2.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio2.setDescription('Reserved Priority 2 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkUnReservedBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 19), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio2.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio2.setDescription('UnReserved Priority 2 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkTotalBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 20), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio3.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio3.setDescription('Total Priority 3 Bandwidth(in kbps) allocated in this TE-link.')
cienaCesTeLinkReservedBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 21), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio3.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio3.setDescription('Reserved Priority 3 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkUnReservedBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 22), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio3.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio3.setDescription('UnReserved Priority 3 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkTotalBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 23), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio4.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio4.setDescription('Total Priority 4 Bandwidth(in kbps) allocated in this TE-link.')
cienaCesTeLinkReservedBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 24), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio4.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio4.setDescription('Reserved Priority 4 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkUnReservedBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 25), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio4.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio4.setDescription('UnReserved Priority 4 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkTotalBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 26), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio5.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio5.setDescription('Total Priority 5 Bandwidth(in kbps) allocated in this TE-link.')
cienaCesTeLinkReservedBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 27), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio5.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio5.setDescription('Reserved Priority 5 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkUnReservedBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 28), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio5.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio5.setDescription('UnReserved Priority 5 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkTotalBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 29), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio6.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio6.setDescription('Total Priority 6 Bandwidth(in kbps) allocated in this TE-link.')
cienaCesTeLinkReservedBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 30), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio6.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio6.setDescription('Reserved Priority 6 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkUnReservedBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 31), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio6.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio6.setDescription('UnReserved Priority 6 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkTotalBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 32), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio7.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkTotalBandwidthPrio7.setDescription('Total Priority 7 Bandwidth(in kbps) allocated in this TE-link.')
cienaCesTeLinkReservedBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 33), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio7.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkReservedBandwidthPrio7.setDescription('Reserved Priority 7 Bandwidth(in kbps) in this TE-link.')
cienaCesTeLinkUnReservedBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 1, 1, 34), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio7.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkUnReservedBandwidthPrio7.setDescription('UnReserved Priority 7 Bandwidth(in kbps) in this TE-link.')
cienaCesTeResourceGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2), )
if mibBuilder.loadTexts: cienaCesTeResourceGrpTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceGrpTable.setDescription('This table captures the Resource Color Group Template entries.')
cienaCesTeResGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesTeResourceColorGrpIndex"))
if mibBuilder.loadTexts: cienaCesTeResGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResGrpEntry.setDescription('An entry in this table exists for each of the Resource color group template.')
cienaCesTeResourceColorGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: cienaCesTeResourceColorGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorGrpIndex.setDescription('This represents the unique index for Resource Color Group entry. Index 0 is used to get the colors which are not associated to any color group cienaCesTeResourceColorsTable')
cienaCesTeResourceGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceGrpName.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceGrpName.setDescription('This represents the name of the Resource Color Group.')
cienaCesTeResourceColorGroupBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupBitMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupBitMask.setDescription('This represents the bitmask value for colors added to this Resource Color Group.')
cienaCesTeResourceColorGroupUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupUseCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorGroupUseCount.setDescription('Indicates the number of Tunnels using this MPLS Resource Color Group.')
cienaCesTeResourceColorsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3), )
if mibBuilder.loadTexts: cienaCesTeResourceColorsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorsTable.setDescription('This table captures the Resource Colors entries. These colors can be associated to any Resource Color Group')
cienaCesTeResColorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesTeResourceColorGrpIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesTeResourceColorIndex"))
if mibBuilder.loadTexts: cienaCesTeResColorEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResColorEntry.setDescription('An entry in this table exists for each of the Resource colors configured along with its associated Resource Group.')
cienaCesTeResourceColorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cienaCesTeResourceColorIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorIndex.setDescription('This represents the unique index for Resource Color entry.')
cienaCesTeResourceColorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorName.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorName.setDescription('This represents the name of the Resource Color.')
cienaCesTeResourceColorBit = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorBit.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorBit.setDescription("This represents individual bit for Resource Color which will be set in Resource Color Group's cienaCesTeResourceColorGroupBitMask.")
cienaCesTeResourceColorUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeResourceColorUseCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeResourceColorUseCount.setDescription('Indicates the number of MPLS Resource Groups using this Resource Color.')
cienaCesTeLinkSrlgTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 4), )
if mibBuilder.loadTexts: cienaCesTeLinkSrlgTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkSrlgTable.setDescription('This table specifies the SRLGs associated with TE links.')
cienaCesTeLinkSrlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 4, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesTeIfIndex"), (0, "CIENA-CES-MPLS-MIB", "cienaCesTeLinkSrlg"))
if mibBuilder.loadTexts: cienaCesTeLinkSrlgEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkSrlgEntry.setDescription('An entry in this table contains information about an SRLG associated with a TE link. An ifEntry in the ifTable must exist before a teLinkSrlgEntry using the same ifIndex is created. The ifType of ifEntry must be teLink(200). If a TE link entry in the ifTable is destroyed, then so are all of the entries in the teLinkSrlgTable that use the ifIndex of this TE link.')
cienaCesTeLinkSrlg = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: cienaCesTeLinkSrlg.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: cienaCesTeLinkSrlg.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkSrlg.setDescription('This identifies an SRLG supported by the TE link. An SRLG is identified with a 32-bit number that is unique within an IGP domain. Zero is a valid SRLG number.')
cienaCesTeLinkSrlgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 5, 4, 1, 2), SRLGState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesTeLinkSrlgStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesTeLinkSrlgStatus.setDescription('This variable represents the SRLG value status. Currently we support only active(1) indicating SRLG is configured.')
cienaCesMplsPwTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1), )
if mibBuilder.loadTexts: cienaCesMplsPwTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwTable.setDescription('The (conceptual) table listing the MPLS pseudo wires.')
cienaCesMplsPwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPwIndex"))
if mibBuilder.loadTexts: cienaCesMplsPwEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwEntry.setDescription('This represents an entry of the MPLS pseudowire table.')
cienaCesMplsPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMplsPwIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwIndex.setDescription('Unique index in the table.')
cienaCesMplsPwSignallingType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwSignallingType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwSignallingType.setDescription('Specifies Pw signalling type')
cienaCesMplsPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwId.setDescription('This represents the unique id that is signalled in LDP')
cienaCesMplsPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwName.setDescription('This represents the pseudowire name')
cienaCesMplsPwCustomerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCustomerName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCustomerName.setDescription('This represents the customer name')
cienaCesMplsPwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwAdminState.setDescription('This represents the pseudowire administrative status')
cienaCesMplsPwOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwOperState.setDescription('This represents the pseudowire operational status')
cienaCesMplsPwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwPeerIpAddr.setDescription('Peer Ip address of the pseudowire')
cienaCesMplsPwInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwInLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwInLabel.setDescription('Indicates the inbound label of the pseudowire')
cienaCesMplsPwOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwOutLabel.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwOutLabel.setDescription('Indicates the outbound label of the pseudowire')
cienaCesMplsPwStatusTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwStatusTlv.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwStatusTlv.setDescription('This represents whether the pseudowire status tlv is turned on or off')
cienaCesMplsPwRefreshStatusIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRefreshStatusIntvl.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwRefreshStatusIntvl.setDescription('This represents the refresh interval for status tlv. This is only applicable for static Pseudowire. For dynamic Pseudowire this is displayed as 0.')
cienaCesMplsPwLocalFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 13), VCStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwLocalFault.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwLocalFault.setDescription('This represents the pseudowire local fault')
cienaCesMplsPwRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 14), VCStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRemoteFault.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwRemoteFault.setDescription('This represents the pseudowire remote fault')
cienaCesMplsPwMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1500, 9128)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwMtu.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwMtu.setDescription('Indicates the pseudowire mtu ')
cienaCesMplsPwType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("raw", 1), ("tagged", 2), ("tdm", 3))).clone('raw')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwType.setDescription('This represents the pseudowire type raw or tagged')
cienaCesMplsPwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mesh", 1), ("spoke", 2), ("switching", 3))).clone('mesh')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwMode.setDescription('This represents the pseudowire mode whether it is mesh, spoke, or a MS-PW segment')
cienaCesMplsPwCoSProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCoSProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCoSProfileName.setDescription('This represents the cos profile name that is being used by pseudowire')
cienaCesMplsPwCoSProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCoSProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCoSProfileIndex.setDescription('This represents the index in cienaCesMplsPwCosProfile table ')
cienaCesMplsPwEgressL2PtTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 20), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwEgressL2PtTransform.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwEgressL2PtTransform.setDescription('This represents the pseudowire L2PT transform for classified L2 CFT control frames')
cienaCesMplsPwVccVProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccVProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVccVProfileName.setDescription('This represents the vccv profile name that is being used by pseudowire')
cienaCesMplsPwVccVProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccVProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVccVProfileIndex.setDescription('This represents the index in cienaCesMplsPwVccvProfile table ')
cienaCesMplsPwLocalCcCv = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwLocalCcCv.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwLocalCcCv.setDescription('This represents the CC/CV configured on the local pseudowire')
cienaCesMplsPwRemoteCcCv = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRemoteCcCv.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwRemoteCcCv.setDescription('This represents the CC/CV configured on the remote pseudowire')
cienaCesMplsPwOperatingCcCv = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwOperatingCcCv.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwOperatingCcCv.setDescription('This represents the negotiated/operating CC/CV')
cienaCesMplsPwBlocking = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwBlocking.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwBlocking.setDescription('Specifies whether pseudowire is blocking or forwarding ')
cienaCesMplsPwVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32769, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVifIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVifIndex.setDescription('This represents the Vif/tunnel group that is being used for the pseudowire ')
cienaCesMplsPwConfigTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelName.setDescription('This represents the configured transport tunnel name for the pseudowire')
cienaCesMplsPwConfigTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 29), TunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelType.setDescription('This represents the configured transport tunnel type for the pseudowire')
cienaCesMplsPwConfigTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwConfigTunnelIndex.setDescription('Specifies the configured transport tunnel index in one of the cienaCesMplsTunnel/cienaCesGmplsTunnel tables for the pseudowire')
cienaCesMplsPwActiveTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelName.setDescription('This represents the active transport tunnel name for the pseudowire')
cienaCesMplsPwActiveTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 32), TunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelType.setDescription('This represents the active transport tunnel type for the pseudo wire. This would be the same as configured tunnel type')
cienaCesMplsPwActiveTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwActiveTunnelIndex.setDescription('Specifies the active transport tunnel index in one of the cienaCesMplsTunnel/cienaCesGmplsTunnel tables for the pseudowire')
cienaCesMplsPwRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("stand-alone", 3))).clone('primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRole.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesMplsPwRole.setDescription('This represents the pseudowire role whether it is a protecting or primary pseudowire')
cienaCesMplsPwPrimaryPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwPrimaryPwName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwPrimaryPwName.setDescription('This represents the primary pseudowire name if this is a secondary pseudowire')
cienaCesMplsPwPrimaryPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwPrimaryPwIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwPrimaryPwIndex.setDescription('This represents the primary pseudowire index in cienaCesMplsPw table if this is a secondary pseudowire')
cienaCesMplsPwVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVsIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVsIndex.setDescription('This represents the virtual switch index in the virtual switch MIB table')
cienaCesServiceDelimiterVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesServiceDelimiterVID.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesServiceDelimiterVID.setDescription('This represents the service delimiter VID. This object is valid only for 39XX and 51XX platforms')
cienaCesServiceDelimiterTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesServiceDelimiterTPID.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesServiceDelimiterTPID.setDescription('This represents the service delimiter TPID. This object is valid only for 39XX and 51XX platforms')
cienaCesMplsPwReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwReversion.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwReversion.setDescription('This represents whether the Pseudowire Reversion is turned on or off. With the Reversion turned on, when the Primary Pseudowire has recovered from earlier failure, it will be held down for a period of cienaCesMplsPwRevertTime(sec) before the switchover from the Backup Pseudowire to Primary Pseudowire takes place. With the Reversion turned off, the user must use manual switchover command to perform a switchover back to the Primary Pseudowire')
cienaCesMplsPwRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwRevertTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwRevertTime.setDescription('This represents the Reversion Hold-time(in seconds) on the Primary Pseudowire. When the Primary Pseudowire has recovered from earlier failure, it will be held down for the length of this hold time. Once the time has elapsed, and if the Primary Pseudowire does not encountered any more failure, there will be a switchover from the Backup Pseudowire back to the Primary Pseudowire')
cienaCesMplsPwProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary-pseudowire", 1), ("backup-pseudowire", 2), ("stand-alone-pseudowire", 3))).clone('stand-alone-pseudowire')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwProtectionRole.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwProtectionRole.setDescription('This represents the role of the pseudowire in a Protection bundle.')
cienaCesMplsPwProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-applicable", 1), ("active", 2), ("standby", 3), ("man-swo-active", 4), ("man-swo-standby", 5), ("pw-reversion-pending", 6), ("pw-activation-pending", 7))).clone('not-applicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwProtectionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwProtectionState.setDescription('This represents the pseudowire protection state. It only applies to those pseudowires in the protection bundle. For stand alone pseudowire this has no meaning and is reflected as n/a in this object')
cienaCesMplsPwVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVsName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVsName.setDescription('This represents the virtual switch name to which the pseudowire is attached.')
cienaCesMplsPwStatusQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwStatusQuery.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwStatusQuery.setDescription('This represents whether the pseudowire status query is enabled. With the status query enabled, the pseudowire is able to query the remote status when it comes up and the remote status is unknown.')
cienaCesMplsMsPwPeerPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsMsPwPeerPwName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsMsPwPeerPwName.setDescription('This represents the peer pseudowire name if this is a MS-PW.')
cienaCesMplsMsPwPeerPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsMsPwPeerPwIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsMsPwPeerPwIndex.setDescription('This represents the peer pseudowire index if this is a MS-PW.')
cienaCesMplsPwIdInRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwIdInRemoteFault.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwIdInRemoteFault.setDescription('This represents the PW Id in the SP-PE TLV of the remote Status')
cienaCesMplsLocalIpInRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 49), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsLocalIpInRemoteFault.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsLocalIpInRemoteFault.setDescription('Local Ip address in the SP-PE TLV of the remote Status')
cienaCesMplsRemoteIpInRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 50), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsRemoteIpInRemoteFault.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsRemoteIpInRemoteFault.setDescription('Remote Ip address in the SP-PE TLV of the remote Status')
cienaCesMplsPwFaultToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 51), VCStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwFaultToNextHop.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwFaultToNextHop.setDescription('This represents the aggregated MS-PW faults sent to the next hop')
cienaCesMplsPwIdInFaultToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwIdInFaultToNextHop.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwIdInFaultToNextHop.setDescription('This represents the PW Id in the SP-PE TLV sent to the next hop')
cienaCesMplsLocalIpInFaultToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 53), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsLocalIpInFaultToNextHop.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsLocalIpInFaultToNextHop.setDescription('Local Ip address in the SP-PE TLV sent to the next hop')
cienaCesMplsRemoteIpInFaultToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 54), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsRemoteIpInFaultToNextHop.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsRemoteIpInFaultToNextHop.setDescription('Remote Ip address in the SP-PE TLV sent to the next hop')
cienaCesMplsPwConfigBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 55), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwConfigBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwConfigBandwidth.setDescription('This represents the configured Bandwidth(in kbps) of pseudowire')
cienaCesMplsPwOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 56), MplsBitRate().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwOperBandwidth.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwOperBandwidth.setDescription('This represents the operational Bandwidth(in kbps) of pseudowire')
cienaCesMplsPwBandwidthState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("configured", 2), ("notRequired", 3), ("admitted", 4), ("acquired", 5), ("rejected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwBandwidthState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwBandwidthState.setDescription('This represents the Bandwidth state of pseudowire')
cienaCesMplsPwCosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2), )
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileTable.setDescription('The (conceptual) table listing the MPLS pseudowire cos profiles.')
cienaCesMplsPwCosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPwCosProfileIndex"))
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileEntry.setDescription('This represents an entry of the MPLS pseudowire Cos profile table.')
cienaCesMplsPwCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileIndex.setDescription('Unique index for Mpls Pw Cos profile.')
cienaCesMplsPwCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileName.setDescription('Mpls pseudowire Cos profile name')
cienaCesMplsPwCosProfileFrmCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 3), FCosPolicy().clone('rcos-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosPolicy.setDescription('Frame CoS policy of the pseudowire')
cienaCesMplsPwCosProfileFrmCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosMapId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosMapId.setDescription('The frame CoS map ID of pseudo wire. This value is valid if the frame Cos policy selected for the pseudowire is rcos-mapped')
cienaCesMplsPwCosProfileFrmCosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosMapName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFrmCosMapName.setDescription('Mpls pseudowire frame cos Map name')
cienaCesMplsPwCosProfileFixedTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFixedTC.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileFixedTC.setDescription('If the frame CoS policy for the pseudowire is fixed, this value is used for MPLS encapsulation.')
cienaCesMplsPwCosProfileRcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 7), RCosPolicy().clone('exp-mapped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosPolicy.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosPolicy.setDescription('Resolved CoS policy of the pseudowire')
cienaCesMplsPwCosProfileRcosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosMapName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosMapName.setDescription('Mpls pseudowire resolved cos Map name. This object is valid only for 39XX and 51XX platforms')
cienaCesMplsPwCosProfileRCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosMapId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosMapId.setDescription('The resolved Cos map ID of the pseudo wire. This value is valid if the resolved Cos policy selected for the pseudowire is rcos-mapped. This object is valid only for 39XX and 51XX platforms')
cienaCesMplsPwCosProfileRcosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRcosProfileName.setDescription('Mpls pseudowire resolved cos Profile name. This object is valid only for 87XX')
cienaCesMplsPwCosProfileRCosProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosProfileId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosProfileId.setDescription('The resolved Cos profile ID of the pseudo wire. This value is valid if the resolved Cos policy selected for the pseudowire is rcos-mapped. This object is valid only for 87XX')
cienaCesMplsPwCosProfileRCosFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosFixed.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwCosProfileRCosFixed.setDescription('If the resolved CoS policy for the pseudowire is fixed, this value is used')
cienaCesMplsPwVccvProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3), )
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileTable.setDescription('The (conceptual) table listing the MPLS pseudowire Vccv profiles.')
cienaCesMplsPwVccvProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPwVccvProfileIndex"))
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileEntry.setDescription('This represents an entry of the MPLS pseudowire Vccv profile table.')
cienaCesMplsPwVccvProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileIndex.setDescription('Unique index for Mpls Pw Vccv profile.')
cienaCesMplsPwVccvProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileName.setDescription('Mpls pseudowire Vccv profile name')
cienaCesMplsPwVccvProfileCcTtlExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileCcTtlExp.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileCcTtlExp.setDescription('This represents the pseudowire TTL-expiry VCCV control channel (CC Type-3) operation')
cienaCesMplsPwVccvProfileCcCienaOob = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileCcCienaOob.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwVccvProfileCcCienaOob.setDescription('This represents the pseudowire CIENA proprietary out-of-band VCCV control channel (CC Type-4) operation')
cienaCesMplsPwNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4))
cienaCesMplsPwNotifTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1), )
if mibBuilder.loadTexts: cienaCesMplsPwNotifTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifTable.setDescription('Table of notification objects required for pseudowire notification.')
cienaCesMplsPwNotifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwIndex"))
if mibBuilder.loadTexts: cienaCesMplsPwNotifEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifEntry.setDescription('An entry (conceptual row) in the cienaCesMplsPwNotifTable. No Get, GetNext or Set is allowed on this table.')
cienaCesMplsPwNotifPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwIndex.setDescription('Unique pseudowire index in the PW table')
cienaCesMplsPwNotifPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwId.setDescription('Unique Pseudowire ID used to identify the PW in the signaling. For the static PW this represents the locally configured value.')
cienaCesMplsPwNotifPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwName.setDescription('This represents the locally configured PW name.')
cienaCesMplsPwNotifPwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 4), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifPwPeerIpAddr.setDescription('This represents the IP address of the Peer on the remote end of the PW.')
cienaCesMplsPwNotifPriPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwId.setDescription('This represents the PW Id of the primary PW.')
cienaCesMplsPwNotifPriPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwName.setDescription('This represents the PW name of the primary PW.')
cienaCesMplsPwNotifPriPwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifPriPwPeerIpAddr.setDescription('This represents the IP address of the Peer on the remote end of the primary PW.')
cienaCesMplsPwNotifActPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwIndex.setDescription('Unique pseudowire index in the PW table')
cienaCesMplsPwNotifActPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwId.setDescription('This represents the PW Id of the active PW.')
cienaCesMplsPwNotifActPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwName.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwName.setDescription('This represents the PW name of the active PW.')
cienaCesMplsPwNotifActPwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 4, 1, 1, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwNotifActPwPeerIpAddr.setDescription('This represents the IP address of the Peer on the remote end of the active PW.')
cienaCesMplsPwDown = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 2, 1)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwId"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwPeerIpAddr"))
if mibBuilder.loadTexts: cienaCesMplsPwDown.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwDown.setDescription('This notification is sent when the operational state of a pseudowire has changed from up to down.')
cienaCesMplsPwUp = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 2, 2)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwId"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPwPeerIpAddr"))
if mibBuilder.loadTexts: cienaCesMplsPwUp.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwUp.setDescription('This notification is sent when the operational state of a pseudowire has changed from down to up.')
cienaCesMplsPwBundleActivePwChange = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 17, 2, 3)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifActPwIndex"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifActPwName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifActPwId"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifActPwPeerIpAddr"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPriPwName"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPriPwId"), ("CIENA-CES-MPLS-MIB", "cienaCesMplsPwNotifPriPwPeerIpAddr"))
if mibBuilder.loadTexts: cienaCesMplsPwBundleActivePwChange.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPwBundleActivePwChange.setDescription('This notification is sent when the active member of the pseudowire bundle has changed.')
cienaCesMplsPWTrafficStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5), )
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsTable.setDescription('Mpls PW Traffic Statistics table. The attributes in this table are supported only on specific platforms.')
cienaCesMplsPWTrafficStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1), ).setIndexNames((0, "CIENA-CES-MPLS-MIB", "cienaCesMplsPWTrafficStatsPWIndex"))
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsEntry.setDescription('Mpls PW Traffic Statistics table entry.')
cienaCesMplsPWTrafficStatsPWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsPWIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsPWIndex.setDescription('Unique index for Mpls PW Traffic Statistics table.')
cienaCesMplsPWTrafficStatsIncomingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsIncomingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsIncomingPackets.setDescription('The number of incoming packets for the given PW.')
cienaCesMplsPWTrafficStatsOutgoingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsOutgoingPackets.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsOutgoingPackets.setDescription('The number of outgoing packets for the given PW.')
cienaCesMplsPWTrafficStatsIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsIncomingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsIncomingBytes.setDescription('The number of incoming bytes for the given PW.')
cienaCesMplsPWTrafficStatsOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 18, 1, 4, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsOutgoingBytes.setStatus('current')
if mibBuilder.loadTexts: cienaCesMplsPWTrafficStatsOutgoingBytes.setDescription('The number of outgoing bytes for the given PW.')
mibBuilder.exportSymbols("CIENA-CES-MPLS-MIB", cienaCesMplsDynamicTransitTunnelDestIpAddr=cienaCesMplsDynamicTransitTunnelDestIpAddr, cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr=cienaCesGmplsStaticTransitCoroutedTunnelSourceIpAddr, cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr=cienaCesGmplsDynamicTransitUniDirTunnelSourceIpAddr, cienaCesMplsNotifCacInterfaceName=cienaCesMplsNotifCacInterfaceName, cienaCesMplsTunnelCosProfileTable=cienaCesMplsTunnelCosProfileTable, cienaCesMplsGlobalTunnelPathTable=cienaCesMplsGlobalTunnelPathTable, cienaCesMplsStaticIngressTunnelIndex=cienaCesMplsStaticIngressTunnelIndex, cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex=cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileIndex, cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted=cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionFaulted, VCStatus=VCStatus, cienaCesTeLinkTotalBandwidthPrio5=cienaCesTeLinkTotalBandwidthPrio5, cienaCesMplsNotifTransitTunnelOperState=cienaCesMplsNotifTransitTunnelOperState, cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets=cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingPackets, cienaCesMplsGlobalFreeStaticTunnelLabelEntry=cienaCesMplsGlobalFreeStaticTunnelLabelEntry, cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr=cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIpAddr, cienaCesGmplsNotifEncapTunnelFarEndLerId=cienaCesGmplsNotifEncapTunnelFarEndLerId, cienaCesTeLinkTotalBandwidthPrio0=cienaCesTeLinkTotalBandwidthPrio0, cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap=cienaCesGmplsTransitCoroutedTunnelOperStateChgTrap, cienaCesGmplsAssociatedAisMonitoring=cienaCesGmplsAssociatedAisMonitoring, cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes=cienaCesGmplsDynamicTransitCoroutedTunnelOutgoingBytes, cienaGmplsTunnelARHopIpAddr=cienaGmplsTunnelARHopIpAddr, cienaCesMplsStaticEgressTunnelName=cienaCesMplsStaticEgressTunnelName, cienaCesMplsNotifTransitTunnelOamFaulted=cienaCesMplsNotifTransitTunnelOamFaulted, cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr=cienaCesGmplsStaticTransitUniDirTunnelNextHopIpAddr, cienaCesGmplsDynamicTransitCoroutedTunnelTable=cienaCesGmplsDynamicTransitCoroutedTunnelTable, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeInterval, PathDisjointMode=PathDisjointMode, cienaCesGmplsNotifTransitTunnelTable=cienaCesGmplsNotifTransitTunnelTable, cienaCesGmplsDynamicEgressUniDirTunnelEntry=cienaCesGmplsDynamicEgressUniDirTunnelEntry, cienaCesMplsAssociatedForwardTunnelName=cienaCesMplsAssociatedForwardTunnelName, cienaCesGmplsStaticEgressCoroutedTunnelProtectionState=cienaCesGmplsStaticEgressCoroutedTunnelProtectionState, VCFailReason=VCFailReason, cienaCesMplsDynamicTransitTunnelSourceIpAddr=cienaCesMplsDynamicTransitTunnelSourceIpAddr, cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex=cienaCesGmplsStaticTransitUniDirTunnelCosProfileIndex, cienaCesGmplsAssociatedAisProfileName=cienaCesGmplsAssociatedAisProfileName, cienaCesMplsGlobalStaticAdminLabelRangeEnd=cienaCesMplsGlobalStaticAdminLabelRangeEnd, cienaCesGmplsStaticIngressCoroutedTunnelName=cienaCesGmplsStaticIngressCoroutedTunnelName, cienaCesGmplsStaticIngressCoroutedTunnelOperState=cienaCesGmplsStaticIngressCoroutedTunnelOperState, cienaCesMplsPwMode=cienaCesMplsPwMode, cienaCesTeLinkMaximumBandwidth=cienaCesTeLinkMaximumBandwidth, cienaCesMplsDynamicIngressTunnelSetupPriority=cienaCesMplsDynamicIngressTunnelSetupPriority, cienaCesGmplsNotifDecapTunnelGrpIndex=cienaCesGmplsNotifDecapTunnelGrpIndex, cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName=cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlName, cienaCesMplsClassProfileName=cienaCesMplsClassProfileName, cienaCesMplsDynamicTransitTunnelOutLabel=cienaCesMplsDynamicTransitTunnelOutLabel, cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr=cienaCesGmplsDynamicTransitCoroutedTunnelNextHopIpAddr, cienaCesGmplsDynamicIngressCoroutedTunnelIndex=cienaCesGmplsDynamicIngressCoroutedTunnelIndex, cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout=cienaCesGmplsDynamicEgressCoroutedTunnelReversionTimeout, cienaCesMplsNotifEncapTunnelOamFaulted=cienaCesMplsNotifEncapTunnelOamFaulted, cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel=cienaCesGmplsDynamicEgressUniDirTunnelForwardInLabel, cienaCesMplsNotifAssociatedTunnelFaultedNodeId=cienaCesMplsNotifAssociatedTunnelFaultedNodeId, cienaCesMplsGlobalStaticAdminVcLabelRangeEnd=cienaCesMplsGlobalStaticAdminVcLabelRangeEnd, cienaCesMplsGlobalTunnelPathHopType=cienaCesMplsGlobalTunnelPathHopType, cienaCesGmplsNotifEncapTunnelGrpName=cienaCesGmplsNotifEncapTunnelGrpName, cienaCesMplsTunnelFrmCosMapName=cienaCesMplsTunnelFrmCosMapName, cienaCesMplsClassTypeQueueGroupInstance=cienaCesMplsClassTypeQueueGroupInstance, cienaCesTeLinkTotalBandwidthPrio3=cienaCesTeLinkTotalBandwidthPrio3, cienaCesGmplsStaticEgressUniDirTunnelOperState=cienaCesGmplsStaticEgressUniDirTunnelOperState, cienaCesMplsDynamicIngressTunnelEntry=cienaCesMplsDynamicIngressTunnelEntry, cienaCesMplsClassProfIndex=cienaCesMplsClassProfIndex, cienaCesMplsPwCosProfileRcosMapName=cienaCesMplsPwCosProfileRcosMapName, cienaCesMplsTransitTunnelNotif=cienaCesMplsTransitTunnelNotif, cienaCesMplsAssociatedTunnelNotif=cienaCesMplsAssociatedTunnelNotif, cienaCesMplsDynamicIngressTunnelFixedExp=cienaCesMplsDynamicIngressTunnelFixedExp, cienaCesGmplsStaticEgressCoroutedTunnelReversion=cienaCesGmplsStaticEgressCoroutedTunnelReversion, cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr=cienaCesGmplsDynamicTransitCoroutedTunnelSourceIpAddr, cienaCesMplsGlobalFreeStaticTunnelLabelIndex=cienaCesMplsGlobalFreeStaticTunnelLabelIndex, cienaCesMplsPwVccvProfileIndex=cienaCesMplsPwVccvProfileIndex, cienaCesMplsStaticTransitTunnelDestIpAddr=cienaCesMplsStaticTransitTunnelDestIpAddr, cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes=cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingBytes, cienaCesTeLinkReservedBandwidthPrio2=cienaCesTeLinkReservedBandwidthPrio2, cienaCesMplsDynamicEgressTunnelSourceIpAddr=cienaCesMplsDynamicEgressTunnelSourceIpAddr, cienaCesGmplsAssociatedProtectionRole=cienaCesGmplsAssociatedProtectionRole, cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer=cienaCesGmplsDynamicIngressUniDirTunnelResourcePointer, cienaCesMplsDynamicTransitTunnelOutgoingBytes=cienaCesMplsDynamicTransitTunnelOutgoingBytes, cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex=cienaCesGmplsStaticEgressCoroutedTunnelCosProfileIndex, cienaCesMplsPwRemoteCcCv=cienaCesMplsPwRemoteCcCv, cienaCesGmplsNotifEncapTunnelResult=cienaCesGmplsNotifEncapTunnelResult, cienaCesMplsGlobalDynamicOperLabelRangeStart=cienaCesMplsGlobalDynamicOperLabelRangeStart, cienaCesMplsDynamicEgressTunnelAdminState=cienaCesMplsDynamicEgressTunnelAdminState, cienaCesTeResourceColorGrpIndex=cienaCesTeResourceColorGrpIndex, cienaCesMplsPwAdminState=cienaCesMplsPwAdminState, cienaCesTeLinkTotalBandwidthPrio6=cienaCesTeLinkTotalBandwidthPrio6, cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelCurBandwidth, cienaCesMplsNotifEncapTunnelEntry=cienaCesMplsNotifEncapTunnelEntry, cienaCesMplsDynamicEgressTunnelName=cienaCesMplsDynamicEgressTunnelName, cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr=cienaCesGmplsDynamicEgressCoroutedTunnelDestIpAddr, cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole=cienaCesGmplsStaticEgressCoroutedTunnelProtectionRole, cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName=cienaCesGmplsDynamicEgressCoroutedTunnelProtectionPartnerName, cienaCesMplsStaticIngressTunnelFixedTTL=cienaCesMplsStaticIngressTunnelFixedTTL, cienaCesGmplsDynamicTransitCoroutedTunnelName=cienaCesGmplsDynamicTransitCoroutedTunnelName, cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted=cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionFaulted, cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute=cienaCesGmplsDynamicIngressCoroutedTunnelFastRoute, AttachGroupType=AttachGroupType, cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy=cienaCesGmplsDynamicEgressCoroutedTunnelTTLPolicy, cienaCesTeLinkReservedBandwidthPrio3=cienaCesTeLinkReservedBandwidthPrio3, cienaCesGmplsAssociatedForwardTunnelDestIpAddr=cienaCesGmplsAssociatedForwardTunnelDestIpAddr, cienaCesGmplsNotifEncapTunnelOperationalBw=cienaCesGmplsNotifEncapTunnelOperationalBw, cienaCesMplsPwNotifPriPwPeerIpAddr=cienaCesMplsPwNotifPriPwPeerIpAddr, cienaCesTeLinkUnReservedBandwidthPrio5=cienaCesTeLinkUnReservedBandwidthPrio5, cienaCesGmplsNotifEncapTunnelType=cienaCesGmplsNotifEncapTunnelType, cienaCesMplsDynamicIngressTunnelBandwidthProfile=cienaCesMplsDynamicIngressTunnelBandwidthProfile, cienaCesTeLinkReservedBandwidthPrio4=cienaCesTeLinkReservedBandwidthPrio4, cienaCesMplsPwSignallingType=cienaCesMplsPwSignallingType, cienaCesMplsNotifCacInterfaceThreshold=cienaCesMplsNotifCacInterfaceThreshold, cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL=cienaCesGmplsDynamicIngressCoroutedTunnelFixedTTL, cienaCesMplsNotifAssociatedTunnelOperState=cienaCesMplsNotifAssociatedTunnelOperState, cienaCesMplsGlobalDynamicAdminLabelRangeStart=cienaCesMplsGlobalDynamicAdminLabelRangeStart, cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring=cienaCesGmplsStaticEgressCoroutedTunnelAisMonitoring, cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring=cienaCesGmplsStaticTransitUniDirTunnelAisMonitoring, cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr=cienaCesGmplsStaticTransitCoroutedTunnelNextHopIpAddr, cienaCesMplsDynamicTransitTunnelIndex=cienaCesMplsDynamicTransitTunnelIndex, cienaCesMplsNotifEncapTunnelGrpTable=cienaCesMplsNotifEncapTunnelGrpTable, cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum=cienaCesGmplsStaticTransitCoroutedTunnelNextHopIfNum, cienaCesMplsStaticIngressTunnelLabel=cienaCesMplsStaticIngressTunnelLabel, cienaCesGmplsStaticTransitCoroutedTunnelEntry=cienaCesGmplsStaticTransitCoroutedTunnelEntry, cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr=cienaCesGmplsDynamicIngressUniDirTunnelSrcIpAddr, cienaCesTeResourceColorGroupUseCount=cienaCesTeResourceColorGroupUseCount, cienaCesMplsPwOperBandwidth=cienaCesMplsPwOperBandwidth, cienaCesMplsStaticTransitTunnelRcosPolicy=cienaCesMplsStaticTransitTunnelRcosPolicy, cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring=cienaCesGmplsStaticTransitCoroutedTunnelAisMonitoring, cienaCesTeResGrpEntry=cienaCesTeResGrpEntry, cienaCesMplsPwBundleActivePwChange=cienaCesMplsPwBundleActivePwChange, cienaCesMplsPwNotifTable=cienaCesMplsPwNotifTable, cienaCesGmplsStaticEgressUniDirTunnelEntry=cienaCesGmplsStaticEgressUniDirTunnelEntry, cienaCesMplsDynamicIngressTunnelTTLPolicy=cienaCesMplsDynamicIngressTunnelTTLPolicy, cienaCesGmplsNotifTransitTunnelEntry=cienaCesGmplsNotifTransitTunnelEntry, cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr=cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIpAddr, cienaCesGmplsNotifDecapTunnelIndex=cienaCesGmplsNotifDecapTunnelIndex, cienaCesGmplsStaticIngressUniDirTunnelEntry=cienaCesGmplsStaticIngressUniDirTunnelEntry, cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState=cienaCesGmplsDynamicIngressCoroutedTunnelProtectionState, cienaCesGmplsDynamicIngressCoroutedTunnelReversion=cienaCesGmplsDynamicIngressCoroutedTunnelReversion, AutoSizeState=AutoSizeState, cienaCesMplsPwCoSProfileName=cienaCesMplsPwCoSProfileName, cienaCesGmplsAssociatedProtectionState=cienaCesGmplsAssociatedProtectionState, cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel=cienaCesGmplsStaticTransitCoroutedTunnelReverseInLabel, cienaCesMplsStaticIngressTunnelCosProfileName=cienaCesMplsStaticIngressTunnelCosProfileName, cienaCesMplsStaticEgressTunnelSourceIpAddr=cienaCesMplsStaticEgressTunnelSourceIpAddr, cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute=cienaCesGmplsDynamicIngressCoroutedTunnelRecordRoute, cienaCesMplsNotifAssociatedTunnelType=cienaCesMplsNotifAssociatedTunnelType, cienaCesMplsGlobalAttrs=cienaCesMplsGlobalAttrs, cienaCesTeResourceColorsTable=cienaCesTeResourceColorsTable, cienaCesGmplsEncapUnidirTunnelOperStateChgTrap=cienaCesGmplsEncapUnidirTunnelOperStateChgTrap, cienaCesMplsAssociatedBfdProfileName=cienaCesMplsAssociatedBfdProfileName, cienaCesMplsDynamicIngressTunnelIndex=cienaCesMplsDynamicIngressTunnelIndex, cienaCesMplsTunnelFrmCosPolicy=cienaCesMplsTunnelFrmCosPolicy, cienaCesMplsStaticTransitTunnelOutgoingBytes=cienaCesMplsStaticTransitTunnelOutgoingBytes, cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName=cienaCesGmplsStaticEgressCoroutedTunnelBfdSessionName, cienaCesTeLinkUnReservedBandwidthPrio1=cienaCesTeLinkUnReservedBandwidthPrio1, cienaCesMplsNotifEncapTunnelType=cienaCesMplsNotifEncapTunnelType, cienaCesTeResourceColorName=cienaCesTeResourceColorName, cienaCesMplsStaticIngressTunnelEntry=cienaCesMplsStaticIngressTunnelEntry, cienaCesGmpls=cienaCesGmpls, cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy=cienaCesGmplsStaticTransitUniDirTunnelTTLPolicy, cienaCesTeResourceColorGroupBitMask=cienaCesTeResourceColorGroupBitMask, cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp=cienaCesGmplsDynamicIngressCoroutedTunnelNextHopIp, SRLGState=SRLGState, cienaCesMplsCacInterfaceThresholdTrap=cienaCesMplsCacInterfaceThresholdTrap, cienaCesMplsPWTrafficStatsEntry=cienaCesMplsPWTrafficStatsEntry, cienaCesTeResColorEntry=cienaCesTeResColorEntry, cienaCesMplsDynamicEgressTunnelLabel=cienaCesMplsDynamicEgressTunnelLabel, cienaCesGmplsStaticIngressCoroutedTunnelReversion=cienaCesGmplsStaticIngressCoroutedTunnelReversion, cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy=cienaCesGmplsStaticEgressCoroutedTunnelTTLPolicy, cienaCesMplsAssociatedTunnelTable=cienaCesMplsAssociatedTunnelTable, cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes=cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingBytes, PYSNMP_MODULE_ID=cienaCesMplsMIB, cienaCesGmplsTunnelARHopEntry=cienaCesGmplsTunnelARHopEntry, cienaCesMplsDynamicTransitTunnelName=cienaCesMplsDynamicTransitTunnelName, cienaCesMplsPwOutLabel=cienaCesMplsPwOutLabel, cienaCesTeLinkUnReservedBandwidthPrio4=cienaCesTeLinkUnReservedBandwidthPrio4, cienaCesGmplsDynamicIngressUniDirTunnelPathName=cienaCesGmplsDynamicIngressUniDirTunnelPathName, cienaCesMplsAssociatedTunnelName=cienaCesMplsAssociatedTunnelName, cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets=cienaCesGmplsDynamicTransitUniDirTunnelOutgoingPackets, cienaCesMplsNotifEncapTunnelOperState=cienaCesMplsNotifEncapTunnelOperState, cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName=cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlName, cienaCesMplsMIBNotificationPrefix=cienaCesMplsMIBNotificationPrefix, cienaCesMplsPw=cienaCesMplsPw, cienaCesGmplsStaticIngressUniDirTunnelNextHopIp=cienaCesGmplsStaticIngressUniDirTunnelNextHopIp, cienaMplsTunnelARHopAddrUnnum=cienaMplsTunnelARHopAddrUnnum, cienaCesMplsGlobalStaticAdminVcLabelRangeStart=cienaCesMplsGlobalStaticAdminVcLabelRangeStart, cienaCesTeResourceColorBitMask=cienaCesTeResourceColorBitMask, cienaCesGmplsNotifTunnelAisFaultErrorTable=cienaCesGmplsNotifTunnelAisFaultErrorTable, cienaCesMplsAssociatedTunnelOperState=cienaCesMplsAssociatedTunnelOperState, cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr=cienaCesGmplsDynamicIngressUniDirTunnelDestIpAddr, cienaCesMplsTunnelOperStateChgTrap=cienaCesMplsTunnelOperStateChgTrap, cienaCesMplsPwReversion=cienaCesMplsPwReversion, cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr=cienaCesGmplsDynamicEgressUniDirTunnelPrevHopIpAddr, cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint=cienaCesGmplsStaticIngressUniDirTunnelRecoveryDisjoint, cienaCesGmplsNotifDecapTunnelEntry=cienaCesGmplsNotifDecapTunnelEntry, cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap=cienaCesGmplsEncapCoroutedTunnelOperStateChgTrap, cienaCesTeLinkReservedBandwidthPrio6=cienaCesTeLinkReservedBandwidthPrio6, cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex=cienaCesGmplsDynamicIngressUniDirTunnelCosProfileIndex, cienaCesMplsPwVccvProfileCcCienaOob=cienaCesMplsPwVccvProfileCcCienaOob, cienaCesMplsPwCosProfileRcosPolicy=cienaCesMplsPwCosProfileRcosPolicy, cienaCesGmplsNotifTunnelAisFaultErrorEntry=cienaCesGmplsNotifTunnelAisFaultErrorEntry, cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring=cienaCesGmplsDynamicEgressCoroutedTunnelBfdMonitoring, cienaCesGmplsStaticTransitUniDirTunnelTable=cienaCesGmplsStaticTransitUniDirTunnelTable, cienaCesMplsStaticEgressTunnelEntry=cienaCesMplsStaticEgressTunnelEntry, cienaCesMplsPwInLabel=cienaCesMplsPwInLabel, cienaCesGmplsNotifTunnelDecapLabel=cienaCesGmplsNotifTunnelDecapLabel, cienaCesGmplsStaticEgressCoroutedTunnelName=cienaCesGmplsStaticEgressCoroutedTunnelName, cienaCesMplsPwOperatingCcCv=cienaCesMplsPwOperatingCcCv, cienaCesMplsPwNotifPwId=cienaCesMplsPwNotifPwId, cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole=cienaCesGmplsDynamicEgressCoroutedTunnelProtectionRole, cienaCesGmplsDynamicEgressUniDirTunnelOperState=cienaCesGmplsDynamicEgressUniDirTunnelOperState, cienaCesMplsTe=cienaCesMplsTe, cienaCesGmplsNotifEncapTunnelRequestedBw=cienaCesGmplsNotifEncapTunnelRequestedBw, cienaCesGmplsNotifEncapTunnelFaultedNodeId=cienaCesGmplsNotifEncapTunnelFaultedNodeId, cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout=cienaCesGmplsStaticIngressUniDirTunnelReversionTimeout, cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr=cienaCesGmplsDynamicIngressCoroutedTunnelSrcIpAddr, cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr=cienaCesGmplsStaticTransitUniDirTunnelPrevHopIpAddr, cienaCesMplsGlobalStaticOperVcLabelRangeEnd=cienaCesMplsGlobalStaticOperVcLabelRangeEnd, cienaCesMplsStaticTransitTunnelFrmCosMapId=cienaCesMplsStaticTransitTunnelFrmCosMapId, cienaCesMplsStaticIngressTunnelReversion=cienaCesMplsStaticIngressTunnelReversion, cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets=cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingPackets, cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes=cienaCesGmplsStaticTransitCoroutedTunnelIncomingBytes, cienaCesMplsNotifEncapTunnelFaultedNodeId=cienaCesMplsNotifEncapTunnelFaultedNodeId, cienaCesMplsAssociatedBfdSessionFaulted=cienaCesMplsAssociatedBfdSessionFaulted, cienaCesMplsStaticTransitTunnelEntry=cienaCesMplsStaticTransitTunnelEntry, cienaCesGmplsNotifTransitTunnelAdminState=cienaCesGmplsNotifTransitTunnelAdminState, cienaCesMplsClassProfileEntry=cienaCesMplsClassProfileEntry, cienaCesMplsPwVsName=cienaCesMplsPwVsName, cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap=cienaCesGmplsAssociatedTunnelAisFaultStateChgTrap, cienaCesMplsStaticIngressTunnelFrmCosMapId=cienaCesMplsStaticIngressTunnelFrmCosMapId, cienaCesMplsGlobalStaticOperLabelRangeEnd=cienaCesMplsGlobalStaticOperLabelRangeEnd, cienaCesMplsAssociatedDynamicTunnelSrcIpAddr=cienaCesMplsAssociatedDynamicTunnelSrcIpAddr, cienaCesMplsDynamicIngressTunnelName=cienaCesMplsDynamicIngressTunnelName, cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart=cienaCesMplsGlobalStaticAdminTunnelLabelRangeStart, cienaCesMplsGlobalTunnelPathUseCount=cienaCesMplsGlobalTunnelPathUseCount, cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr=cienaCesGmplsDynamicTransitUniDirTunnelNextHopIpAddr, cienaCesMplsDynamicIngressTunnelWeight=cienaCesMplsDynamicIngressTunnelWeight, cienaCesMplsDynamicTransitTunnelAdminState=cienaCesMplsDynamicTransitTunnelAdminState, cienaCesMplsPwCosProfileFrmCosMapId=cienaCesMplsPwCosProfileFrmCosMapId, cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile=cienaCesGmplsDynamicIngressCoroutedTunnelBandwidthProfile, cienaCesMplsClassProfileCacPolicy=cienaCesMplsClassProfileCacPolicy, cienaGmplsTunnelARHopAddrUnnum=cienaGmplsTunnelARHopAddrUnnum, cienaCesMplsTunnelARHopEntry=cienaCesMplsTunnelARHopEntry, cienaCesTeLinkUnReservedBandwidthPrio6=cienaCesTeLinkUnReservedBandwidthPrio6, cienaCesMplsPwProtectionState=cienaCesMplsPwProtectionState, cienaCesMplsTunnelRcosPolicy=cienaCesMplsTunnelRcosPolicy, OperState=OperState, cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr=cienaCesGmplsDynamicIngressCoroutedTunnelDestIpAddr, cienaCesTeLinkTable=cienaCesTeLinkTable, cienaCesGmplsStaticEgressUniDirTunnelAdminState=cienaCesGmplsStaticEgressUniDirTunnelAdminState, cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName=cienaCesGmplsDynamicIngressCoroutedTunnelProtectionPartnerName, cienaCesMplsNotifTransitTunnelName=cienaCesMplsNotifTransitTunnelName, cienaCesGmplsTunnelAisFaultErrorNotif=cienaCesGmplsTunnelAisFaultErrorNotif, cienaCesMplsPwActiveTunnelIndex=cienaCesMplsPwActiveTunnelIndex, cienaCesMplsAssociatedBfdMonitoring=cienaCesMplsAssociatedBfdMonitoring, cienaCesGmplsAssociatedTunnelName=cienaCesGmplsAssociatedTunnelName, cienaCesMplsTunnelFrmCosMapId=cienaCesMplsTunnelFrmCosMapId, cienaCesMplsStaticTransitTunnelName=cienaCesMplsStaticTransitTunnelName, cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum=cienaCesGmplsStaticIngressCoroutedTunnelNextHopIfNum, cienaCesGmplsDynamicIngressUniDirTunnelAdminState=cienaCesGmplsDynamicIngressUniDirTunnelAdminState)
mibBuilder.exportSymbols("CIENA-CES-MPLS-MIB", cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr=cienaCesGmplsStaticEgressUniDirTunnelDestIpAddr, cienaCesMplsStaticIngressTunnelNextHopIp=cienaCesMplsStaticIngressTunnelNextHopIp, cienaCesGmplsAssociatedBfdMonitoring=cienaCesGmplsAssociatedBfdMonitoring, cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll=cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAll, cienaCesMplsPwCosProfileFixedTC=cienaCesMplsPwCosProfileFixedTC, cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr=cienaCesGmplsStaticTransitUniDirTunnelSourceIpAddr, cienaCesGmplsNotifTransitTunnelIndex=cienaCesGmplsNotifTransitTunnelIndex, cienaCesMplsNotifCacInterfaceClassType=cienaCesMplsNotifCacInterfaceClassType, cienaCesGmplsNotifEncapTunnelAisFaulted=cienaCesGmplsNotifEncapTunnelAisFaulted, cienaCesMplsStaticIngressTunnelProtectionPartnerName=cienaCesMplsStaticIngressTunnelProtectionPartnerName, cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex=cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileIndex, cienaCesMplsPwCosProfileEntry=cienaCesMplsPwCosProfileEntry, cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr=cienaCesGmplsAssociatedDynamicTunnelSrcIpAddr, cienaCesTeResourceGrpName=cienaCesTeResourceGrpName, cienaCesGmplsNotifEncapTunnelTable=cienaCesGmplsNotifEncapTunnelTable, cienaCesMplsStaticIngressTunnelFixedTC=cienaCesMplsStaticIngressTunnelFixedTC, cienaCesMplsStaticTransitTunnelTTLPolicy=cienaCesMplsStaticTransitTunnelTTLPolicy, cienaCesGmplsStaticEgressUniDirTunnelName=cienaCesGmplsStaticEgressUniDirTunnelName, cienaCesMplsTunnelCosProfileEntry=cienaCesMplsTunnelCosProfileEntry, cienaCesGmplsStaticEgressCoroutedTunnelTable=cienaCesGmplsStaticEgressCoroutedTunnelTable, cienaCesGmplsNotifAssociatedTunnelIndex=cienaCesGmplsNotifAssociatedTunnelIndex, cienaCesMplsPwVccvProfileTable=cienaCesMplsPwVccvProfileTable, PrivateForwardGroup=PrivateForwardGroup, cienaCesGmplsDynamicEgressCoroutedTunnelName=cienaCesGmplsDynamicEgressCoroutedTunnelName, cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile=cienaCesGmplsDynamicIngressUniDirTunnelBandwidthProfile, cienaCesTeLinkSrlg=cienaCesTeLinkSrlg, cienaCesMplsPwVccVProfileIndex=cienaCesMplsPwVccVProfileIndex, cienaCesMplsDynamicIngressTunnelReversionTimeout=cienaCesMplsDynamicIngressTunnelReversionTimeout, cienaCesMplsNotifEncapTunnelTable=cienaCesMplsNotifEncapTunnelTable, cienaCesMplsStaticIngressTunnelProtectionState=cienaCesMplsStaticIngressTunnelProtectionState, cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName=cienaCesGmplsDynamicIngressUniDirTunnelProtectionPartnerName, cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL=cienaCesGmplsDynamicEgressCoroutedTunnelFixedTTL, cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelMinBandwidth, cienaCesGmplsNotifDecapTunnelOamFaulted=cienaCesGmplsNotifDecapTunnelOamFaulted, TEMode=TEMode, cienaCesMplsStaticTransitTunnelRCosMapId=cienaCesMplsStaticTransitTunnelRCosMapId, cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex=cienaCesGmplsStaticIngressUniDirTunnelCosProfileIndex, cienaCesGmplsDynamicTransitCoroutedTunnelIndex=cienaCesGmplsDynamicTransitCoroutedTunnelIndex, cienaCesGmplsAssociatedForwardTunnelType=cienaCesGmplsAssociatedForwardTunnelType, cienaCesMplsDynamicIngressTunnelRecordRoute=cienaCesMplsDynamicIngressTunnelRecordRoute, cienaCesMplsStaticTransitTunnelNextHopIpAddr=cienaCesMplsStaticTransitTunnelNextHopIpAddr, cienaCesMplsTunnelRCosMapId=cienaCesMplsTunnelRCosMapId, cienaCesMplsPwOperState=cienaCesMplsPwOperState, cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel=cienaCesGmplsDynamicTransitCoroutedTunnelReverseInLabel, cienaCesMplsGlobalTunnelPath=cienaCesMplsGlobalTunnelPath, cienaCesGmplsDynamicEgressCoroutedTunnelTable=cienaCesGmplsDynamicEgressCoroutedTunnelTable, cienaCesMplsPwCosProfileFrmCosMapName=cienaCesMplsPwCosProfileFrmCosMapName, cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelIncBandwidth, cienaCesMplsStaticTransitTunnelFixedTTL=cienaCesMplsStaticTransitTunnelFixedTTL, cienaCesGmplsNotifEncapTunnelName=cienaCesGmplsNotifEncapTunnelName, cienaCesMplsPwCosProfileName=cienaCesMplsPwCosProfileName, cienaCesGmplsDynamicEgressCoroutedTunnelEntry=cienaCesGmplsDynamicEgressCoroutedTunnelEntry, cienaCesMplsDynamicEgressTunnelEntry=cienaCesMplsDynamicEgressTunnelEntry, cienaCesMplsNotifTransitTunnelTable=cienaCesMplsNotifTransitTunnelTable, cienaCesMplsDynamicTransitTunnelEntry=cienaCesMplsDynamicTransitTunnelEntry, cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName=cienaCesGmplsDynamicIngressCoroutedTunnelBfdSessionName, cienaCesGmplsStaticTransitCoroutedTunnelName=cienaCesGmplsStaticTransitCoroutedTunnelName, cienaCesMplsDynamicAdminLabelRangeEnd=cienaCesMplsDynamicAdminLabelRangeEnd, cienaCesTeLinkTotalBandwidthPrio4=cienaCesTeLinkTotalBandwidthPrio4, cienaCesMplsPwRole=cienaCesMplsPwRole, cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr=cienaCesGmplsDynamicEgressUniDirTunnelSourceIpAddr, cienaCesMplsNotifCacInterfaceIndex=cienaCesMplsNotifCacInterfaceIndex, cienaCesMplsGlobalStaticOperTunnelLabelRangeStart=cienaCesMplsGlobalStaticOperTunnelLabelRangeStart, cienaCesMplsStaticTransitTunnelInLabel=cienaCesMplsStaticTransitTunnelInLabel, cienaCesGmplsDynamicIngressUniDirTunnelEntry=cienaCesGmplsDynamicIngressUniDirTunnelEntry, cienaCesGmplsNotifAssociatedTunnelFarEndLerId=cienaCesGmplsNotifAssociatedTunnelFarEndLerId, cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel=cienaCesGmplsStaticEgressUniDirTunnelForwardInLabel, cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel=cienaCesGmplsStaticEgressCoroutedTunnelReverseOutLabel, cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted=cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionFaulted, cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy=cienaCesGmplsStaticIngressUniDirTunnelTTLPolicy, cienaCesMplsStaticIngressTunnelWeight=cienaCesMplsStaticIngressTunnelWeight, cienaCesGmplsDynamicEgressUniDirTunnelIndex=cienaCesGmplsDynamicEgressUniDirTunnelIndex, cienaCesTeLinkMaximumReservableBandwidth=cienaCesTeLinkMaximumReservableBandwidth, cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState=cienaCesGmplsDynamicEgressCoroutedTunnelProtectionState, cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes=cienaCesGmplsStaticTransitUniDirTunnelOutgoingBytes, cienaCesGmplsNotifDecapTunnelName=cienaCesGmplsNotifDecapTunnelName, cienaMplsTunnelARHopLspId=cienaMplsTunnelARHopLspId, cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType=cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointType, cienaCesMplsStaticTransitTunnelFcosPolicy=cienaCesMplsStaticTransitTunnelFcosPolicy, cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute=cienaCesGmplsDynamicIngressUniDirTunnelRecordRoute, cienaCesTeLinkMetric=cienaCesTeLinkMetric, cienaCesMplsGlobalDynamicOperLabelRangeEnd=cienaCesMplsGlobalDynamicOperLabelRangeEnd, cienaCesMplsGlobal=cienaCesMplsGlobal, cienaCesGmplsDynamicIngressUniDirTunnelProtectionState=cienaCesGmplsDynamicIngressUniDirTunnelProtectionState, cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName=cienaCesGmplsStaticEgressCoroutedTunnelProtectionPartnerName, cienaCesMplsPwUp=cienaCesMplsPwUp, cienaCesMplsDynamicTransitTunnelNextHopIpAddr=cienaCesMplsDynamicTransitTunnelNextHopIpAddr, cienaCesMplsPwBandwidthState=cienaCesMplsPwBandwidthState, cienaCesMplsDynamicEgressTunnelDestIpAddr=cienaCesMplsDynamicEgressTunnelDestIpAddr, cienaCesMplsAssociatedProtectionState=cienaCesMplsAssociatedProtectionState, cienaCesGmplsTransitUnidirTunnelOperStateChgTrap=cienaCesGmplsTransitUnidirTunnelOperStateChgTrap, cienaCesMplsStaticOperLabelRangeEnd=cienaCesMplsStaticOperLabelRangeEnd, cienaCesGmplsTransitTunnelNotif=cienaCesGmplsTransitTunnelNotif, CacPolicy=CacPolicy, VCState=VCState, cienaCesMplsNotifAssociatedTunnelIndex=cienaCesMplsNotifAssociatedTunnelIndex, cienaCesMplsDynamicIngressTunnelReversion=cienaCesMplsDynamicIngressTunnelReversion, cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap=cienaCesGmplsDecapCoroutedTunnelGrpActiveDecapTunnelChangeTrap, cienaCesMplsPwNotifEntry=cienaCesMplsPwNotifEntry, cienaCesMplsPwNotifActPwName=cienaCesMplsPwNotifActPwName, cienaCesMplsPwCosProfileRcosProfileName=cienaCesMplsPwCosProfileRcosProfileName, cienaCesGmplsAssociatedTunnelTable=cienaCesGmplsAssociatedTunnelTable, cienaCesMplsDynamicTransitTunnelIncomingPackets=cienaCesMplsDynamicTransitTunnelIncomingPackets, cienaCesMplsNotifAssociatedTunnelName=cienaCesMplsNotifAssociatedTunnelName, cienaCesTeLinkTotalBandwidthPrio2=cienaCesTeLinkTotalBandwidthPrio2, cienaCesMplsStaticIngressTunnelRecoveryDisjoint=cienaCesMplsStaticIngressTunnelRecoveryDisjoint, cienaCesGmplsDynamicIngressUniDirTunnelPathIndex=cienaCesGmplsDynamicIngressUniDirTunnelPathIndex, cienaCesTeIfIndex=cienaCesTeIfIndex, cienaCesMplsPwNotifPwPeerIpAddr=cienaCesMplsPwNotifPwPeerIpAddr, cienaCesGmplsDynamicTransitCoroutedTunnelEntry=cienaCesGmplsDynamicTransitCoroutedTunnelEntry, cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelUsedBandwidth, cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr=cienaCesGmplsStaticIngressCoroutedTunnelSrcIpAddr, cienaCesGmplsStaticTransitCoroutedTunnelIndex=cienaCesGmplsStaticTransitCoroutedTunnelIndex, cienaCesMplsPwPeerIpAddr=cienaCesMplsPwPeerIpAddr, cienaCesMplsPwRemoteFault=cienaCesMplsPwRemoteFault, cienaCesMplsTEClassTypeTable=cienaCesMplsTEClassTypeTable, cienaCesMplsTransitTunnelOperStateChgTrap=cienaCesMplsTransitTunnelOperStateChgTrap, cienaCesMplsStaticIngressTunnelPrimaryTunnelName=cienaCesMplsStaticIngressTunnelPrimaryTunnelName, cienaCesGmplsMIBNotifications=cienaCesGmplsMIBNotifications, cienaCesMplsDynamicOperLabelRangeEnd=cienaCesMplsDynamicOperLabelRangeEnd, cienaCesGmplsStaticEgressCoroutedTunnelOperState=cienaCesGmplsStaticEgressCoroutedTunnelOperState, cienaCesGmplsNotifDecapTunnelOperState=cienaCesGmplsNotifDecapTunnelOperState, cienaCesMplsPWTrafficStatsPWIndex=cienaCesMplsPWTrafficStatsPWIndex, cienaCesGmplsAssociatedReverseTunnelName=cienaCesGmplsAssociatedReverseTunnelName, cienaCesMplsPwCoSProfileIndex=cienaCesMplsPwCoSProfileIndex, cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName=cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionName, cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName=cienaCesGmplsStaticIngressCoroutedTunnelAisProfileName, cienaCesGmplsNotifEncapTunnelMbbParentApp=cienaCesGmplsNotifEncapTunnelMbbParentApp, cienaCesMplsAssociatedForwardTunnelType=cienaCesMplsAssociatedForwardTunnelType, cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel=cienaCesGmplsStaticIngressCoroutedTunnelForwardOutLabel, cienaCesMplsDynamicTransitTunnelOperState=cienaCesMplsDynamicTransitTunnelOperState, cienaCesMplsPwIndex=cienaCesMplsPwIndex, cienaCesTeLinkSrlgCount=cienaCesTeLinkSrlgCount, cienaCesMplsPwEgressL2PtTransform=cienaCesMplsPwEgressL2PtTransform, cienaCesGmplsNotifEncapTunnelAdminState=cienaCesGmplsNotifEncapTunnelAdminState, cienaCesGmplsAssociatedForwardTunnelOperState=cienaCesGmplsAssociatedForwardTunnelOperState, cienaCesMplsStaticTransitTunnelCosProfileName=cienaCesMplsStaticTransitTunnelCosProfileName, cienaCesMplsPwNotifActPwPeerIpAddr=cienaCesMplsPwNotifActPwPeerIpAddr, cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName=cienaCesGmplsStaticIngressUniDirTunnelProtectionPartnerName, cienaCesMplsStaticAdminLabelRangeEnd=cienaCesMplsStaticAdminLabelRangeEnd, cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex=cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileIndex, cienaCesGmplsStaticTransitUniDirTunnelAdminState=cienaCesGmplsStaticTransitUniDirTunnelAdminState, cienaCesMplsGlobalTunnelPathName=cienaCesMplsGlobalTunnelPathName, cienaCesMplsDynamicEgressTunnelTable=cienaCesMplsDynamicEgressTunnelTable, cienaCesGmplsNotifTunnelErrorMsg=cienaCesGmplsNotifTunnelErrorMsg, cienaCesGmplsStaticIngressUniDirTunnelOperState=cienaCesGmplsStaticIngressUniDirTunnelOperState, cienaCesGmplsEncapTunnelMbbResultTrap=cienaCesGmplsEncapTunnelMbbResultTrap, cienaCesMplsDynamicIngressTunnelFastRoute=cienaCesMplsDynamicIngressTunnelFastRoute, cienaCesGmplsStaticTransitUniDirTunnelName=cienaCesGmplsStaticTransitUniDirTunnelName, cienaCesGmplsStaticIngressUniDirTunnelName=cienaCesGmplsStaticIngressUniDirTunnelName, cienaCesMplsStaticIngressTunnelReversionTimeout=cienaCesMplsStaticIngressTunnelReversionTimeout, cienaCesGmplsDynamicEgressUniDirTunnelAdminState=cienaCesGmplsDynamicEgressUniDirTunnelAdminState, cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr=cienaCesGmplsStaticEgressCoroutedTunnelDestIpAddr, cienaCesGmplsNotifEncapTunnelIndex=cienaCesGmplsNotifEncapTunnelIndex, cienaCesMplsTunnelPathTable=cienaCesMplsTunnelPathTable, cienaCesMplsStaticEgressTunnelIndex=cienaCesMplsStaticEgressTunnelIndex, cienaCesGmplsAssociatedTunnelProtectionPartnerName=cienaCesGmplsAssociatedTunnelProtectionPartnerName, cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel=cienaCesGmplsStaticIngressCoroutedTunnelReverseInLabel, cienaCesGmplsStaticTransitUniDirTunnelCosProfileName=cienaCesGmplsStaticTransitUniDirTunnelCosProfileName, cienaCesMplsClassProfileTable=cienaCesMplsClassProfileTable, cienaCesMplsDynamicTransitTunnelTable=cienaCesMplsDynamicTransitTunnelTable, cienaCesMplsNotifEncapTunnelGrpEntry=cienaCesMplsNotifEncapTunnelGrpEntry, cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority=cienaCesGmplsDynamicIngressCoroutedTunnelHoldPriority, cienaCesGmplsStaticEgressCoroutedTunnelAdminState=cienaCesGmplsStaticEgressCoroutedTunnelAdminState, cienaCesGmplsNotifEncapTunnelOperState=cienaCesGmplsNotifEncapTunnelOperState, cienaCesMplsPwNotif=cienaCesMplsPwNotif, cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring=cienaCesGmplsStaticIngressCoroutedTunnelBfdMonitoring, cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex=cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileIndex, cienaCesGmplsDynamicIngressCoroutedTunnelOperState=cienaCesGmplsDynamicIngressCoroutedTunnelOperState, cienaCesMplsMIB=cienaCesMplsMIB, cienaCesMplsDynamicIngressTunnelHoldPriority=cienaCesMplsDynamicIngressTunnelHoldPriority, cienaCesGmplsDynamicIngressCoroutedTunnelName=cienaCesGmplsDynamicIngressCoroutedTunnelName, cienaCesGmplsDynamicEgressCoroutedLspId=cienaCesGmplsDynamicEgressCoroutedLspId, cienaCesTeLinkUnReservedBandwidthPrio2=cienaCesTeLinkUnReservedBandwidthPrio2, cienaCesMplsPwLocalFault=cienaCesMplsPwLocalFault, cienaCesMplsPwConfigTunnelIndex=cienaCesMplsPwConfigTunnelIndex, cienaCesMplsPwPrimaryPwIndex=cienaCesMplsPwPrimaryPwIndex, cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr=cienaCesGmplsDynamicTransitCoroutedTunnelPrevHopIpAddr, cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName=cienaCesGmplsDynamicEgressCoroutedTunnelCosProfileName, cienaCesMplsPwIdInRemoteFault=cienaCesMplsPwIdInRemoteFault, cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId=cienaCesGmplsStaticIngressCoroutedTunnelDestTunnelId, cienaCesTeLinkTotalBandwidthPrio7=cienaCesTeLinkTotalBandwidthPrio7, cienaCesMplsPwConfigBandwidth=cienaCesMplsPwConfigBandwidth, cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelReqBandwidth, cienaCesGmplsNotifDecapTunnelGrpName=cienaCesGmplsNotifDecapTunnelGrpName, cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy=cienaCesGmplsDynamicTransitCoroutedTunnelTTLPolicy, cienaCesTeLinkUnReservedBandwidthPrio0=cienaCesTeLinkUnReservedBandwidthPrio0, cienaCesTeLinkSrlgStatus=cienaCesTeLinkSrlgStatus, cienaCesMplsNotifTransitTunnelAdminState=cienaCesMplsNotifTransitTunnelAdminState, cienaCesMplsStaticTransitTunnelTable=cienaCesMplsStaticTransitTunnelTable, cienaCesTeLinkMode=cienaCesTeLinkMode, cienaCesGmplsStaticIngressUniDirTunnelReversion=cienaCesGmplsStaticIngressUniDirTunnelReversion, cienaCesMplsPwId=cienaCesMplsPwId, cienaCesMplsPwVccvProfileCcTtlExp=cienaCesMplsPwVccvProfileCcTtlExp, cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName=cienaCesGmplsStaticIngressCoroutedTunnelCosProfileName, cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel=cienaCesGmplsStaticIngressUniDirTunnelForwardOutLabel, cienaCesTeResourceGrpTable=cienaCesTeResourceGrpTable, cienaCesMplsPWTrafficStatsIncomingBytes=cienaCesMplsPWTrafficStatsIncomingBytes, cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr=cienaCesGmplsStaticIngressUniDirTunnelDestIpAddr, cienaCesMplsDynamicIngressTunnelProtectionPartnerName=cienaCesMplsDynamicIngressTunnelProtectionPartnerName, cienaCesMplsCacInterfaceNotif=cienaCesMplsCacInterfaceNotif, cienaCesGmplsDynamicEgressCoroutedTunnelIndex=cienaCesGmplsDynamicEgressCoroutedTunnelIndex, cienaCesMplsGlobalTunnelPathHopTable=cienaCesMplsGlobalTunnelPathHopTable, cienaCesGmplsNotifTransitTunnelOperState=cienaCesGmplsNotifTransitTunnelOperState, cienaCesGmplsAssociatedTunnelIndex=cienaCesGmplsAssociatedTunnelIndex, cienaCesMplsPwVccvProfileName=cienaCesMplsPwVccvProfileName, cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex=cienaCesGmplsStaticTransitCoroutedTunnelCosProfileIndex, RCosPolicy=RCosPolicy, cienaCesTeLinkUnReservedBandwidthPrio7=cienaCesTeLinkUnReservedBandwidthPrio7, cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType=cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlType, cienaCesGmplsDynamicIngressUniDirTunnelName=cienaCesGmplsDynamicIngressUniDirTunnelName, cienaCesMplsAssociatedTunnelEntry=cienaCesMplsAssociatedTunnelEntry, cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL=cienaCesGmplsStaticTransitCoroutedTunnelFixedTTL, cienaCesGmplsNotifEncapTunnelEntry=cienaCesGmplsNotifEncapTunnelEntry, cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName=cienaCesGmplsStaticIngressCoroutedTunnelProtectionPartnerName, cienaCesMplsTunnelCosProfileName=cienaCesMplsTunnelCosProfileName, cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny=cienaCesGmplsDynamicIngressCoroutedTunnelResourceExcludeAny, cienaCesMplsDynamicIngressTunnelNextHopIp=cienaCesMplsDynamicIngressTunnelNextHopIp, cienaCesGmplsDynamicEgressCoroutedTunnelReversion=cienaCesGmplsDynamicEgressCoroutedTunnelReversion, cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode=cienaCesGmplsDynamicIngressCoroutedTunnelPathDisjointMode, cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex=cienaCesGmplsStaticIngressCoroutedTunnelCosProfileIndex, cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority=cienaCesGmplsDynamicIngressUniDirTunnelHoldPriority, cienaCesGmplsNotifEncapTunnelGrpTable=cienaCesGmplsNotifEncapTunnelGrpTable, cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName=cienaCesGmplsStaticEgressCoroutedTunnelCosProfileName, cienaCesMplsClassProfileIndex=cienaCesMplsClassProfileIndex, cienaMplsTunnelARHopIndex=cienaMplsTunnelARHopIndex, cienaCesMplsTunnelPathHopTable=cienaCesMplsTunnelPathHopTable, cienaCesMplsNotifEncapTunnelIndex=cienaCesMplsNotifEncapTunnelIndex, cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp=cienaCesGmplsStaticIngressCoroutedTunnelNextHopIp, cienaCesGmplsStaticTransitCoroutedTunnelAdminState=cienaCesGmplsStaticTransitCoroutedTunnelAdminState, cienaCesMplsTunnelARHopTable=cienaCesMplsTunnelARHopTable, cienaCesGmplsStaticTransitCoroutedTunnelTable=cienaCesGmplsStaticTransitCoroutedTunnelTable, cienaCesMplsStaticIngressTunnelProtectionRole=cienaCesMplsStaticIngressTunnelProtectionRole, cienaCesMplsClassTypeLom=cienaCesMplsClassTypeLom, cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel=cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutLabel, cienaCesGmplsStaticIngressCoroutedTunnelTable=cienaCesGmplsStaticIngressCoroutedTunnelTable, cienaCesMplsGlobalTunnelPathHopIndex=cienaCesMplsGlobalTunnelPathHopIndex, cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr=cienaCesGmplsDynamicEgressCoroutedTunnelSourceIpAddr, cienaCesTeResourceColorIndex=cienaCesTeResourceColorIndex, cienaCesMplsTunnelRCosProfileId=cienaCesMplsTunnelRCosProfileId, cienaCesMplsTEClassTypeEntry=cienaCesMplsTEClassTypeEntry, cienaCesGmplsDecapTunnelNotif=cienaCesGmplsDecapTunnelNotif, cienaCesTeLinkEntry=cienaCesTeLinkEntry, cienaCesMplsStaticTransitTunnelOperState=cienaCesMplsStaticTransitTunnelOperState, cienaCesMplsDynamicIngressTunnelPathName=cienaCesMplsDynamicIngressTunnelPathName, cienaCesMplsStaticEgressTunnelTable=cienaCesMplsStaticEgressTunnelTable, cienaCesMplsDynamicIngressTunnelOperState=cienaCesMplsDynamicIngressTunnelOperState, cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy=cienaCesGmplsDynamicIngressCoroutedTunnelTTLPolicy, cienaCesMplsNotifEncapTunnelGrpIndex=cienaCesMplsNotifEncapTunnelGrpIndex, cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId=cienaCesGmplsStaticEgressCoroutedTunnelDestTunnelId, cienaCesGmplsStaticTransitCoroutedTunnelOperState=cienaCesGmplsStaticTransitCoroutedTunnelOperState, cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes=cienaCesGmplsDynamicTransitCoroutedTunnelReverseOutgoingBytes, cienaCesGmplsTunnelARHopTable=cienaCesGmplsTunnelARHopTable, cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets=cienaCesGmplsStaticTransitCoroutedTunnelOutgoingPackets)
mibBuilder.exportSymbols("CIENA-CES-MPLS-MIB", cienaCesTeLinkSrlgEntry=cienaCesTeLinkSrlgEntry, cienaCesMplsAssociatedReverseTunnelType=cienaCesMplsAssociatedReverseTunnelType, cienaCesMplsPwDown=cienaCesMplsPwDown, cienaCesGmplsNotifAssociatedTunnelType=cienaCesGmplsNotifAssociatedTunnelType, cienaCesMplsDynamicIngressTunnelCosProfileIndex=cienaCesMplsDynamicIngressTunnelCosProfileIndex, cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes=cienaCesGmplsStaticTransitCoroutedTunnelOutgoingBytes, cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted=cienaCesGmplsStaticIngressCoroutedTunnelBfdSessionFaulted, cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets=cienaCesGmplsStaticTransitUniDirTunnelIncomingPackets, cienaCesMplsAssociatedTunnelIndex=cienaCesMplsAssociatedTunnelIndex, cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout=cienaCesGmplsDynamicIngressUniDirTunnelReversionTimeout, cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr=cienaCesGmplsDynamicEgressCoroutedTunnelPrevHopIpAddr, cienaCesMplsDynamicEgressTunnelIndex=cienaCesMplsDynamicEgressTunnelIndex, cienaCesMplsNotifAssociatedTunnelEntry=cienaCesMplsNotifAssociatedTunnelEntry, cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr=cienaCesGmplsDynamicTransitUniDirTunnelDestIpAddr, cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel=cienaCesGmplsStaticTransitUniDirTunnelForwardInLabel, cienaCesGmplsStaticIngressUniDirTunnelGrpIndex=cienaCesGmplsStaticIngressUniDirTunnelGrpIndex, cienaCesGmplsStaticEgressUniDirTunnelTable=cienaCesGmplsStaticEgressUniDirTunnelTable, cienaCesMplsTunnelPathEntry=cienaCesMplsTunnelPathEntry, cienaCesGmplsStaticTransitUniDirTunnelAisProfileName=cienaCesGmplsStaticTransitUniDirTunnelAisProfileName, cienaCesGmplsStaticEgressCoroutedTunnelLspId=cienaCesGmplsStaticEgressCoroutedTunnelLspId, cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint=cienaCesGmplsStaticIngressCoroutedTunnelRecoveryDisjoint, cienaCesMplsPwRefreshStatusIntvl=cienaCesMplsPwRefreshStatusIntvl, cienaCesGmplsNotifTransitTunnelName=cienaCesGmplsNotifTransitTunnelName, cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName=cienaCesGmplsStaticEgressCoroutedTunnelAisProfileName, cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType=cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlType, cienaCesMplsPwVifIndex=cienaCesMplsPwVifIndex, cienaCesMplsPwLocalCcCv=cienaCesMplsPwLocalCcCv, cienaCesGmplsStaticIngressUniDirTunnelProtectionRole=cienaCesGmplsStaticIngressUniDirTunnelProtectionRole, cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName=cienaCesGmplsDynamicEgressCoroutedTunnelBfdSessionName, cienaCesMplsEncapTunnelGrpNotif=cienaCesMplsEncapTunnelGrpNotif, cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy=cienaCesGmplsStaticTransitCoroutedTunnelTTLPolicy, cienaCesMplsGlobalStaticOperVcLabelRangeStart=cienaCesMplsGlobalStaticOperVcLabelRangeStart, cienaCesMplsDynamicIngressTunnelTable=cienaCesMplsDynamicIngressTunnelTable, cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel=cienaCesGmplsStaticTransitCoroutedTunnelForwardInLabel, cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets=cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingPackets, cienaCesGmplsNotifTransitTunnelOamFaulted=cienaCesGmplsNotifTransitTunnelOamFaulted, cienaCesGmplsAssociatedTunnelOperStateChgTrap=cienaCesGmplsAssociatedTunnelOperStateChgTrap, cienaCesMplsLocalIpInRemoteFault=cienaCesMplsLocalIpInRemoteFault, cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval=cienaCesGmplsDynamicIngressCoroutedTunnelLspReOptTimeInterval, cienaCesMplsPwNotifActPwId=cienaCesMplsPwNotifActPwId, cienaCesMplsStaticTransitTunnelIncomingPackets=cienaCesMplsStaticTransitTunnelIncomingPackets, cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority=cienaCesGmplsDynamicIngressUniDirTunnelSetupPriority, AutoSizeFailHdlr=AutoSizeFailHdlr, cienaCesMplsPwMIBNotifications=cienaCesMplsPwMIBNotifications, cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId=cienaCesGmplsStaticTransitCoroutedTunnelSrcTunnelId, cienaCesGmplsStaticEgressUniDirTunnelIndex=cienaCesGmplsStaticEgressUniDirTunnelIndex, cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap=cienaCesGmplsEncapCoroutedTunnelGrpActiveEncapTunnelChangeTrap, cienaCesMplsPwProtectionRole=cienaCesMplsPwProtectionRole, cienaCesMplsPwCosProfileIndex=cienaCesMplsPwCosProfileIndex, cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType=cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlType, cienaCesGmplsNotifAssociatedTunnelFaultedNodeId=cienaCesGmplsNotifAssociatedTunnelFaultedNodeId, cienaCesTeLinkReservedBandwidthPrio7=cienaCesTeLinkReservedBandwidthPrio7, cienaCesGmplsNotifEncapTunnelProtectionRole=cienaCesGmplsNotifEncapTunnelProtectionRole, cienaCesMplsDynamicIngressTunnelProtectionState=cienaCesMplsDynamicIngressTunnelProtectionState, cienaCesMplsStaticTransitTunnelSourceIpAddr=cienaCesMplsStaticTransitTunnelSourceIpAddr, cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel=cienaCesGmplsDynamicEgressCoroutedTunnelReverseOutLabel, cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes=cienaCesGmplsStaticTransitUniDirTunnelIncomingBytes, cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex=cienaCesGmplsNotifEncapTunnelGrpActiveEncapTunlIndex, cienaCesMplsAssociatedProtectionRole=cienaCesMplsAssociatedProtectionRole, cienaCesMplsStaticIngressTunnelTable=cienaCesMplsStaticIngressTunnelTable, cienaCesMplsNotifEncapTunnelAdminState=cienaCesMplsNotifEncapTunnelAdminState, cienaCesMplsTunnelPathHopEntry=cienaCesMplsTunnelPathHopEntry, cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId=cienaCesGmplsStaticIngressCoroutedTunnelSrcTunnelId, cienaCesGmplsNotifEncapTunnelGrpIndex=cienaCesGmplsNotifEncapTunnelGrpIndex, cienaCesMplsNotifAssociatedTunnelAdminState=cienaCesMplsNotifAssociatedTunnelAdminState, cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth=cienaCesGmplsDynamicIngressCoroutedTunnelMaxBandwidth, cienaCesGmplsNotifEncapTunnelOamFaulted=cienaCesGmplsNotifEncapTunnelOamFaulted, cienaCesGmplsNotifDecapTunnelAdminState=cienaCesGmplsNotifDecapTunnelAdminState, cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName=cienaCesGmplsStaticTransitCoroutedTunnelAisProfileName, cienaCesGmplsAssociatedTunnelNotif=cienaCesGmplsAssociatedTunnelNotif, cienaCesMplsPwNotifPriPwName=cienaCesMplsPwNotifPriPwName, cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange=cienaCesMplsEncapTunnelGrpActiveEncapTunnelChange, cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny=cienaCesGmplsDynamicIngressCoroutedTunnelResourceIncludeAny, cienaCesGmplsStaticTransitCoroutedTunnelLspId=cienaCesGmplsStaticTransitCoroutedTunnelLspId, cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap=cienaCesGmplsEncapCoroutedTunnelAisFaultStateChgTrap, cienaCesMplsStaticTransitTunnelFixedTc=cienaCesMplsStaticTransitTunnelFixedTc, cienaCesGmplsStaticIngressCoroutedTunnelEntry=cienaCesGmplsStaticIngressCoroutedTunnelEntry, cienaCesMplsDynamicEgressTunnelInstance=cienaCesMplsDynamicEgressTunnelInstance, cienaCesMplsStaticEgressTunnelLabel=cienaCesMplsStaticEgressTunnelLabel, cienaCesGmplsDynamicIngressCoroutedTunnelEntry=cienaCesGmplsDynamicIngressCoroutedTunnelEntry, cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName=cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlName, cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex=cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileIndex, cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap=cienaCesGmplsDecapCoroutedTunnelAisFaultStateChgTrap, cienaCesGmplsStaticIngressCoroutedTunnelProtectionState=cienaCesGmplsStaticIngressCoroutedTunnelProtectionState, cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes=cienaCesGmplsStaticTransitCoroutedTunnelReverseOutgoingBytes, PseudoWireType=PseudoWireType, cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout=cienaCesGmplsStaticEgressCoroutedTunnelReversionTimeout, cienaCesGmplsDynamicTransitCoroutedTunnelOperState=cienaCesGmplsDynamicTransitCoroutedTunnelOperState, cienaCesMplsGlobalNextFreeStaticVcLabel=cienaCesMplsGlobalNextFreeStaticVcLabel, cienaCesGmplsAssociatedTunnelEntry=cienaCesGmplsAssociatedTunnelEntry, cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL=cienaCesGmplsDynamicTransitUniDirTunnelFixedTTL, cienaCesGmplsNotifAssociatedTunnelOamFaulted=cienaCesGmplsNotifAssociatedTunnelOamFaulted, cienaCesGmplsAssociatedReverseTunnelOperState=cienaCesGmplsAssociatedReverseTunnelOperState, cienaCesMplsTunnelPathName=cienaCesMplsTunnelPathName, cienaCesGmplsDynamicIngressUniDirTunnelIndex=cienaCesGmplsDynamicIngressUniDirTunnelIndex, cienaCesGmplsDynamicTransitUniDirTunnelOperState=cienaCesGmplsDynamicTransitUniDirTunnelOperState, cienaCesGmplsAssociatedForwardTunnelName=cienaCesGmplsAssociatedForwardTunnelName, cienaCesMplsPwNotifPwName=cienaCesMplsPwNotifPwName, cienaCesMplsLocalIpInFaultToNextHop=cienaCesMplsLocalIpInFaultToNextHop, cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel=cienaCesGmplsDynamicTransitUniDirTunnelForwardOutLabel, cienaCesGmplsNotifDecapTunnelGrpEntry=cienaCesGmplsNotifDecapTunnelGrpEntry, cienaCesMplsRemoteIpInFaultToNextHop=cienaCesMplsRemoteIpInFaultToNextHop, cienaCesTeLinkSrlgTable=cienaCesTeLinkSrlgTable, cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel=cienaCesGmplsDynamicEgressCoroutedTunnelForwardInLabel, cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex=cienaCesGmplsDynamicEgressCoroutedTunnelGrpIndex, cienaCesMplsStaticTransitTunnelCosProfileIndex=cienaCesMplsStaticTransitTunnelCosProfileIndex, cienaCesMplsStaticIngressTunnelGrpIndex=cienaCesMplsStaticIngressTunnelGrpIndex, cienaCesTeResourceColorBit=cienaCesTeResourceColorBit, cienaCesMplsPwCosProfileRCosMapId=cienaCesMplsPwCosProfileRCosMapId, cienaCesMplsPwFaultToNextHop=cienaCesMplsPwFaultToNextHop, cienaCesMplsStaticTransitTunnelAdminState=cienaCesMplsStaticTransitTunnelAdminState, cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel=cienaCesGmplsStaticTransitCoroutedTunnelForwardOutLabel, cienaCesMplsTunnelPathHopIndex=cienaCesMplsTunnelPathHopIndex, cienaCesGmplsDynamicTransitUniDirTunnelName=cienaCesGmplsDynamicTransitUniDirTunnelName, cienaCesGmplsNotifAssociatedTunnelAdminState=cienaCesGmplsNotifAssociatedTunnelAdminState, cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd=cienaCesMplsGlobalStaticOperTunnelLabelRangeEnd, cienaCesMplsGlobalTunnelPathHopIpAddr=cienaCesMplsGlobalTunnelPathHopIpAddr, cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName=cienaCesGmplsDynamicIngressUniDirTunnelCosProfileName, cienaCesGmplsEncapTunnelNotif=cienaCesGmplsEncapTunnelNotif, cienaCesMplsNotifCacInterfaceEntry=cienaCesMplsNotifCacInterfaceEntry, cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel=cienaCesGmplsDynamicTransitUniDirTunnelForwardInLabel, cienaCesTeLinkUnReservedBandwidthPrio3=cienaCesTeLinkUnReservedBandwidthPrio3, cienaCesMplsPwVccvProfileEntry=cienaCesMplsPwVccvProfileEntry, cienaCesGmplsDynamicEgressCoroutedTunnelAdminState=cienaCesGmplsDynamicEgressCoroutedTunnelAdminState, cienaCesMplsDynamicIngressTunnelPrimaryTunnelName=cienaCesMplsDynamicIngressTunnelPrimaryTunnelName, cienaCesMplsAssociatedBfdProfileIndex=cienaCesMplsAssociatedBfdProfileIndex, cienaCesMplsDynamicOperLabelRangeStart=cienaCesMplsDynamicOperLabelRangeStart, cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel=cienaCesGmplsStaticTransitUniDirTunnelForwardOutLabel, cienaCesGmplsNotifAssociatedTunnelAisFaulted=cienaCesGmplsNotifAssociatedTunnelAisFaulted, cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring=cienaCesGmplsDynamicIngressCoroutedTunnelBfdMonitoring, cienaCesMplsStaticIngressTunnelDestIpAddr=cienaCesMplsStaticIngressTunnelDestIpAddr, cienaCesServiceDelimiterTPID=cienaCesServiceDelimiterTPID, cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex=cienaCesGmplsDynamicIngressUniDirTunnelGrpIndex, cienaCesMplsClassTypeAlarmThreshold=cienaCesMplsClassTypeAlarmThreshold, cienaCesMplsPwNotifActPwIndex=cienaCesMplsPwNotifActPwIndex, cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy=cienaCesGmplsStaticIngressCoroutedTunnelTTLPolicy, cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets=cienaCesGmplsDynamicTransitCoroutedTunnelReverseIncomingPackets, cienaCesGmplsDynamicEgressUniDirLspId=cienaCesGmplsDynamicEgressUniDirLspId, cienaCesGmplsDynamicIngressCoroutedTunnelTable=cienaCesGmplsDynamicIngressCoroutedTunnelTable, cienaCesGmplsDynamicIngressUniDirTunnelReversion=cienaCesGmplsDynamicIngressUniDirTunnelReversion, cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes=cienaCesGmplsDynamicTransitUniDirTunnelIncomingBytes, cienaCesGmplsStaticIngressUniDirTunnelProtectionState=cienaCesGmplsStaticIngressUniDirTunnelProtectionState, cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer=cienaCesGmplsDynamicIngressCoroutedTunnelResourcePointer, cienaCesGmplsNotifAssociatedTunnelEntry=cienaCesGmplsNotifAssociatedTunnelEntry, cienaCesMplsPwRevertTime=cienaCesMplsPwRevertTime, cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap=cienaCesGmplsEncapUnidirTunnelGrpActiveEncapTunnelChangeTrap, cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel=cienaCesGmplsDynamicIngressCoroutedTunnelReverseInLabel, cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId=cienaCesGmplsStaticEgressCoroutedTunnelSrcTunnelId, cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex=cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileIndex, cienaCesGmplsStaticTransitUniDirTunnelIndex=cienaCesGmplsStaticTransitUniDirTunnelIndex, cienaCesMplsTunnelPathUseCount=cienaCesMplsTunnelPathUseCount, cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring=cienaCesGmplsStaticEgressCoroutedTunnelBfdMonitoring, cienaCesMplsDynamicIngressTunnelGrpIndex=cienaCesMplsDynamicIngressTunnelGrpIndex, cienaCesGmplsNotifDecapTunnelType=cienaCesGmplsNotifDecapTunnelType, cienaCesGmplsAssociatedBfdSessionFaulted=cienaCesGmplsAssociatedBfdSessionFaulted, cienaCesTeLinkReservedBandwidthPrio1=cienaCesTeLinkReservedBandwidthPrio1, cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets=cienaCesGmplsStaticTransitCoroutedTunnelIncomingPackets, cienaCesMplsPWTrafficStatsIncomingPackets=cienaCesMplsPWTrafficStatsIncomingPackets, cienaGmplsTunnelARHopLspId=cienaGmplsTunnelARHopLspId, cienaCesGmplsNotifDecapTunnelAisFaulted=cienaCesGmplsNotifDecapTunnelAisFaulted, cienaCesMplsPwNotifPriPwId=cienaCesMplsPwNotifPriPwId, cienaCesMplsDynamicTransitTunnelInLabel=cienaCesMplsDynamicTransitTunnelInLabel, cienaCesMplsTunnelPathIndex=cienaCesMplsTunnelPathIndex, cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr=cienaCesGmplsDynamicEgressUniDirTunnelDestIpAddr, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeFailureHdlr, cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL=cienaCesGmplsDynamicTransitCoroutedTunnelFixedTTL, cienaCesMplsGlobalStaticOperLabelRangeStart=cienaCesMplsGlobalStaticOperLabelRangeStart, cienaCesGmplsDynamicEgressUniDirTunnelTable=cienaCesGmplsDynamicEgressUniDirTunnelTable, cienaCesMplsMsPwPeerPwIndex=cienaCesMplsMsPwPeerPwIndex, cienaCesMplsStaticIngressTunnelAdminState=cienaCesMplsStaticIngressTunnelAdminState, cienaCesGmplsStaticIngressUniDirTunnelAdminState=cienaCesGmplsStaticIngressUniDirTunnelAdminState, cienaCesMplsGlobalFreeStaticTunnelLabel=cienaCesMplsGlobalFreeStaticTunnelLabel, cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr=cienaCesGmplsStaticTransitCoroutedTunnelDestIpAddr, cienaCesMplsGlobalFreeStaticTunnelLabelTable=cienaCesMplsGlobalFreeStaticTunnelLabelTable, cienaCesMplsPwEntry=cienaCesMplsPwEntry, cienaCesGmplsDynamicIngressCoroutedTunnelAdminState=cienaCesGmplsDynamicIngressCoroutedTunnelAdminState, cienaCesMplsPWTrafficStatsOutgoingPackets=cienaCesMplsPWTrafficStatsOutgoingPackets, cienaCesMplsDynamicIngressTunnelAdminState=cienaCesMplsDynamicIngressTunnelAdminState, cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel=cienaCesGmplsDynamicIngressUniDirTunnelForwardOutLabel, cienaCesMplsPwStatusTlv=cienaCesMplsPwStatusTlv, cienaCesMplsPwBlocking=cienaCesMplsPwBlocking, cienaCesGmplsDynamicIngressCoroutedTunnelPathName=cienaCesGmplsDynamicIngressCoroutedTunnelPathName, cienaCesMplsPwCosProfileFrmCosPolicy=cienaCesMplsPwCosProfileFrmCosPolicy, cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum=cienaCesGmplsStaticTransitCoroutedTunnelPrevHopIfNum, cienaCesGmplsDynamicIngressCoroutedTunnelClassType=cienaCesGmplsDynamicIngressCoroutedTunnelClassType, cienaCesMplsAssociatedReverseTunnelOperState=cienaCesMplsAssociatedReverseTunnelOperState, cienaCesMplsPwIdInFaultToNextHop=cienaCesMplsPwIdInFaultToNextHop, cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring=cienaCesGmplsStaticIngressCoroutedTunnelAisMonitoring, cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL=cienaCesGmplsDynamicIngressUniDirTunnelFixedTTL, MplsGlobalState=MplsGlobalState, cienaCesGmplsStaticEgressCoroutedTunnelIndex=cienaCesGmplsStaticEgressCoroutedTunnelIndex, cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel=cienaCesGmplsStaticEgressCoroutedTunnelForwardInLabel, cienaCesServiceDelimiterVID=cienaCesServiceDelimiterVID, cienaCesMplsPwVsIndex=cienaCesMplsPwVsIndex, cienaCesMplsNotifTransitTunnelType=cienaCesMplsNotifTransitTunnelType, cienaCesGmplsDynamicTransitUniDirTunnelIndex=cienaCesGmplsDynamicTransitUniDirTunnelIndex, cienaCesGmplsDynamicEgressCoroutedTunnelOperState=cienaCesGmplsDynamicEgressCoroutedTunnelOperState, cienaCesMplsPwCosProfileRCosFixed=cienaCesMplsPwCosProfileRCosFixed, cienaCesMplsPwTable=cienaCesMplsPwTable, cienaCesMplsDynamicIngressTunnelLabel=cienaCesMplsDynamicIngressTunnelLabel, cienaCesGmplsDynamicIngressUniDirTunnelOperState=cienaCesGmplsDynamicIngressUniDirTunnelOperState, cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex=cienaCesGmplsStaticIngressCoroutedTunnelGrpIndex, cienaCesMplsAttrs=cienaCesMplsAttrs, cienaCesMplsPwConfigTunnelType=cienaCesMplsPwConfigTunnelType, cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets=cienaCesGmplsDynamicTransitUniDirTunnelIncomingPackets, cienaCesMplsMIBNotifications=cienaCesMplsMIBNotifications, cienaCesGmplsStaticTransitUniDirTunnelEntry=cienaCesGmplsStaticTransitUniDirTunnelEntry, cienaCesMplsDynamicIngressTunnelLspId=cienaCesMplsDynamicIngressTunnelLspId, cienaCesMplsPWTrafficStatsOutgoingBytes=cienaCesMplsPWTrafficStatsOutgoingBytes, cienaCesGmplsStaticIngressUniDirTunnelTable=cienaCesGmplsStaticIngressUniDirTunnelTable, cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr=cienaCesGmplsDynamicTransitCoroutedTunnelDestIpAddr, cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL=cienaCesGmplsStaticIngressCoroutedTunnelFixedTTL, cienaCesGmplsDynamicTransitUniDirTunnelEntry=cienaCesGmplsDynamicTransitUniDirTunnelEntry, cienaCesMplsStaticIngressTunnelName=cienaCesMplsStaticIngressTunnelName, cienaCesGmplsNotifEncapTunnelGrpEntry=cienaCesGmplsNotifEncapTunnelGrpEntry, cienaCesMplsGlobalTunnelPathHopEntry=cienaCesMplsGlobalTunnelPathHopEntry, cienaCesMplsNotifAssociatedTunnelTable=cienaCesMplsNotifAssociatedTunnelTable, cienaCesGmplsAssociatedReverseTunnelType=cienaCesGmplsAssociatedReverseTunnelType, cienaGmplsTunnelARHopAddrType=cienaGmplsTunnelARHopAddrType, cienaCesGmplsNotifDecapTunnelFaultedNodeId=cienaCesGmplsNotifDecapTunnelFaultedNodeId, cienaCesGmplsStaticIngressUniDirTunnelFixedTTL=cienaCesGmplsStaticIngressUniDirTunnelFixedTTL, cienaCesMplsStaticEgressTunnelOperState=cienaCesMplsStaticEgressTunnelOperState, cienaCesMplsAssociatedBfdSessionName=cienaCesMplsAssociatedBfdSessionName, cienaCesTeLinkTotalBandwidthPrio1=cienaCesTeLinkTotalBandwidthPrio1, cienaCesMplsGlobalStaticAdminLabelRangeStart=cienaCesMplsGlobalStaticAdminLabelRangeStart, cienaCesMplsStaticAdminLabelRangeStart=cienaCesMplsStaticAdminLabelRangeStart, cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex=cienaCesMplsNotifEncapTunnelGrpActiveEncapTunlIndex, cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr=cienaCesGmplsStaticEgressUniDirTunnelSourceIpAddr, cienaCesMplsNotifCacInterfaceTable=cienaCesMplsNotifCacInterfaceTable, cienaCesMplsClassType=cienaCesMplsClassType, cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr=cienaCesGmplsStaticTransitUniDirTunnelDestIpAddr, cienaCesGmplsAssociatedTunnelAdminState=cienaCesGmplsAssociatedTunnelAdminState, cienaCesGmplsStaticIngressUniDirTunnelCosProfileName=cienaCesGmplsStaticIngressUniDirTunnelCosProfileName, cienaCesGmplsNotifDecapTunnelGrpTable=cienaCesGmplsNotifDecapTunnelGrpTable, cienaCesMplsPwMtu=cienaCesMplsPwMtu, cienaCesMplsStaticIngressTunnelFrmCosPolicy=cienaCesMplsStaticIngressTunnelFrmCosPolicy, cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum=cienaCesGmplsStaticEgressCoroutedTunnelPrevHopIfNum, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeEnable, cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel=cienaCesGmplsDynamicTransitCoroutedTunnelForwardOutLabel, cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap=cienaCesGmplsDecapCoroutedTunnelOperStateChgTrap, cienaCesMplsDynamicIngressTunnelFrmCosPolicy=cienaCesMplsDynamicIngressTunnelFrmCosPolicy, cienaCesMplsPwCosProfileRCosProfileId=cienaCesMplsPwCosProfileRCosProfileId, cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr=cienaCesGmplsStaticEgressUniDirTunnelPrevHopIpAddr, FCosPolicy=FCosPolicy, cienaCesMplsDynamicIngressTunnelCosProfileName=cienaCesMplsDynamicIngressTunnelCosProfileName, cienaCesMplsPwPrimaryPwName=cienaCesMplsPwPrimaryPwName, cienaCesGmplsDynamicIngressUniDirTunnelTable=cienaCesGmplsDynamicIngressUniDirTunnelTable, cienaCesMplsPwActiveTunnelName=cienaCesMplsPwActiveTunnelName, cienaCesMplsStaticIngressTunnelTTLPolicy=cienaCesMplsStaticIngressTunnelTTLPolicy, cienaCesTeInterfaceName=cienaCesTeInterfaceName, cienaCesGmplsNotifDecapTunnelTable=cienaCesGmplsNotifDecapTunnelTable, cienaCesGmplsDynamicIngressUniDirTunnelFastRoute=cienaCesGmplsDynamicIngressUniDirTunnelFastRoute, cienaCesMplsTunnelPath=cienaCesMplsTunnelPath, cienaCesMplsStaticIngressTunnelOperState=cienaCesMplsStaticIngressTunnelOperState)
mibBuilder.exportSymbols("CIENA-CES-MPLS-MIB", TunnelAisFault=TunnelAisFault, cienaCesMplsNotifEncapTunnelGrpName=cienaCesMplsNotifEncapTunnelGrpName, cienaCesMplsStaticTransitTunnelIncomingBytes=cienaCesMplsStaticTransitTunnelIncomingBytes, cienaCesMplsStaticOperLabelRangeStart=cienaCesMplsStaticOperLabelRangeStart, cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel=cienaCesGmplsDynamicTransitCoroutedTunnelForwardInLabel, cienaCesGmplsAssociatedTunnelOperState=cienaCesGmplsAssociatedTunnelOperState, cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr=cienaCesGmplsStaticEgressCoroutedTunnelSourceIpAddr, cienaCesMplsNotifTransitTunnelIndex=cienaCesMplsNotifTransitTunnelIndex, PathDisjointType=PathDisjointType, cienaCesMpls=cienaCesMpls, cienaCesMplsDynamicIngressUniDirTunnelLspId=cienaCesMplsDynamicIngressUniDirTunnelLspId, cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp=cienaCesGmplsDynamicIngressUniDirTunnelNextHopIp, cienaCesMplsDynamicIngressTunnelFixedTTL=cienaCesMplsDynamicIngressTunnelFixedTTL, cienaCesMplsTunnelPathHopIpAddr=cienaCesMplsTunnelPathHopIpAddr, cienaCesMplsStaticTransitTunnelOutgoingPackets=cienaCesMplsStaticTransitTunnelOutgoingPackets, cienaCesGmplsStaticIngressUniDirTunnelIndex=cienaCesGmplsStaticIngressUniDirTunnelIndex, cienaCesMplsGlobalTunnelPathEntry=cienaCesMplsGlobalTunnelPathEntry, cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId=cienaCesGmplsStaticTransitCoroutedTunnelDestTunnelId, cienaCesMplsStaticEgressTunnelAdminState=cienaCesMplsStaticEgressTunnelAdminState, cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole=cienaCesGmplsDynamicIngressCoroutedTunnelProtectionRole, cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName=cienaCesGmplsStaticTransitCoroutedTunnelCosProfileName, cienaCesMplsDynamicIngressTunnelResourcePointer=cienaCesMplsDynamicIngressTunnelResourcePointer, cienaCesMplsDynamicIngressTunnelProtectionRole=cienaCesMplsDynamicIngressTunnelProtectionRole, cienaCesMplsStaticTransitTunnelOutLabel=cienaCesMplsStaticTransitTunnelOutLabel, cienaCesMplsRemoteIpInRemoteFault=cienaCesMplsRemoteIpInRemoteFault, cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy=cienaCesGmplsDynamicTransitUniDirTunnelTTLPolicy, cienaCesGmplsAssociatedBfdProfileIndex=cienaCesGmplsAssociatedBfdProfileIndex, cienaCesMplsTunnelFixedTC=cienaCesMplsTunnelFixedTC, cienaCesMplsNotifTransitTunnelEntry=cienaCesMplsNotifTransitTunnelEntry, cienaCesMplsTunnelCosProfileIndex=cienaCesMplsTunnelCosProfileIndex, cienaCesGmplsDecapTunnelGrpNotif=cienaCesGmplsDecapTunnelGrpNotif, cienaGmplsTunnelARHopListIndex=cienaGmplsTunnelARHopListIndex, cienaCesMplsGlobalDynamicAdminLabelRangeEnd=cienaCesMplsGlobalDynamicAdminLabelRangeEnd, cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole=cienaCesGmplsDynamicIngressUniDirTunnelProtectionRole, cienaCesGmplsDynamicTransitUniDirTunnelAdminState=cienaCesGmplsDynamicTransitUniDirTunnelAdminState, cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex=cienaCesGmplsDynamicIngressCoroutedTunnelPathIndex, cienaCesTeResourceColorUseCount=cienaCesTeResourceColorUseCount, cienaCesGmplsAssociatedBfdProfileName=cienaCesGmplsAssociatedBfdProfileName, cienaCesMplsStaticIngressTunnelCosProfileIndex=cienaCesMplsStaticIngressTunnelCosProfileIndex, cienaCesGmplsNotifAssociatedTunnelTable=cienaCesGmplsNotifAssociatedTunnelTable, cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout=cienaCesGmplsDynamicIngressCoroutedTunnelReversionTimeout, cienaCesGmplsAssociatedBfdSessionName=cienaCesGmplsAssociatedBfdSessionName, cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets=cienaCesGmplsStaticTransitCoroutedTunnelReverseIncomingPackets, cienaCesGmplsDynamicTransitUniDirTunnelTable=cienaCesGmplsDynamicTransitUniDirTunnelTable, cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName=cienaCesGmplsDynamicEgressCoroutedTunnelBfdProfileName, cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL=cienaCesGmplsStaticEgressCoroutedTunnelFixedTTL, cienaCesMplsEncapTunnelNotif=cienaCesMplsEncapTunnelNotif, cienaCesMplsStaticIngressTunnelFixedExp=cienaCesMplsStaticIngressTunnelFixedExp, cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout=cienaCesGmplsStaticIngressCoroutedTunnelReversionTimeout, cienaCesMplsPwCustomerName=cienaCesMplsPwCustomerName, cienaCesGmplsEncapTunnelResizeResultTrap=cienaCesGmplsEncapTunnelResizeResultTrap, cienaCesMplsAssociatedForwardTunnelDestIpAddr=cienaCesMplsAssociatedForwardTunnelDestIpAddr, cienaCesGmplsNotifTransitTunnelType=cienaCesGmplsNotifTransitTunnelType, cienaCesMplsTunnelPathHopType=cienaCesMplsTunnelPathHopType, cienaCesMplsDynamicAdminLabelRangeStart=cienaCesMplsDynamicAdminLabelRangeStart, cienaCesGmplsStaticIngressCoroutedTunnelAdminState=cienaCesGmplsStaticIngressCoroutedTunnelAdminState, cienaCesMplsPwActiveTunnelType=cienaCesMplsPwActiveTunnelType, cienaCesGmplsStaticIngressCoroutedTunnelIndex=cienaCesGmplsStaticIngressCoroutedTunnelIndex, cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets=cienaCesGmplsDynamicTransitCoroutedTunnelIncomingPackets, TunnelOamFault=TunnelOamFault, cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr=cienaCesGmplsStaticIngressCoroutedTunnelDestIpAddr, cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint=cienaCesGmplsStaticEgressCoroutedTunnelRecoveryDisjoint, AutoSizeMode=AutoSizeMode, cienaCesGmplsNotifDecapTunnelFarEndLerId=cienaCesGmplsNotifDecapTunnelFarEndLerId, cienaCesMplsPwVccVProfileName=cienaCesMplsPwVccVProfileName, cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes=cienaCesGmplsDynamicTransitUniDirTunnelOutgoingBytes, cienaCesMplsPWTrafficStatsTable=cienaCesMplsPWTrafficStatsTable, cienaCesMplsClassTypeQueueGroupIndex=cienaCesMplsClassTypeQueueGroupIndex, cienaCesGmplsDynamicEgressUniDirTunnelName=cienaCesGmplsDynamicEgressUniDirTunnelName, cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName=cienaCesGmplsStaticEgressCoroutedTunnelBfdProfileName, cienaCesMplsPwNotifPwIndex=cienaCesMplsPwNotifPwIndex, cienaCesMplsDynamicIngressTunnelDestIpAddr=cienaCesMplsDynamicIngressTunnelDestIpAddr, cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName=cienaCesGmplsDynamicIngressCoroutedTunnelBfdProfileName, cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes=cienaCesGmplsDynamicTransitCoroutedTunnelIncomingBytes, cienaMplsTunnelARHopIpAddr=cienaMplsTunnelARHopIpAddr, cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole=cienaCesGmplsStaticIngressCoroutedTunnelProtectionRole, cienaCesGmplsStaticTransitUniDirTunnelFixedTTL=cienaCesGmplsStaticTransitUniDirTunnelFixedTTL, cienaCesMplsStaticTransitTunnelIndex=cienaCesMplsStaticTransitTunnelIndex, cienaCesMplsAssociatedReverseTunnelName=cienaCesMplsAssociatedReverseTunnelName, cienaCesMplsMsPwPeerPwName=cienaCesMplsMsPwPeerPwName, cienaCesMplsAssociatedForwardTunnelOperState=cienaCesMplsAssociatedForwardTunnelOperState, cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable=cienaCesGmplsDynamicIngressCoroutedTunnelAutoBackupEnable, cienaCesTeLinkReservedBandwidthPrio5=cienaCesTeLinkReservedBandwidthPrio5, cienaCesGmplsNotifAssociatedTunnelName=cienaCesGmplsNotifAssociatedTunnelName, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeMode, cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState=cienaCesGmplsDynamicIngressCoroutedTunnelAutoSizeState, cienaCesMplsDynamicIngressTunnelPathIndex=cienaCesMplsDynamicIngressTunnelPathIndex, cienaCesMplsNotifAssociatedTunnelOamFaulted=cienaCesMplsNotifAssociatedTunnelOamFaulted, cienaGmplsTunnelARHopIndex=cienaGmplsTunnelARHopIndex, cienaCesGmplsTunnelAisFaultErrorTrap=cienaCesGmplsTunnelAisFaultErrorTrap, cienaCesMplsPwCosProfileTable=cienaCesMplsPwCosProfileTable, cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets=cienaCesGmplsStaticTransitUniDirTunnelOutgoingPackets, cienaCesMplsTunnelRcosProfileName=cienaCesMplsTunnelRcosProfileName, cienaCesMplsDynamicTransitTunnelOutgoingPackets=cienaCesMplsDynamicTransitTunnelOutgoingPackets, cienaCesMplsAssociatedTunnelAdminState=cienaCesMplsAssociatedTunnelAdminState, cienaCesMplsPwStatusQuery=cienaCesMplsPwStatusQuery, cienaCesGmplsStaticEgressCoroutedTunnelEntry=cienaCesGmplsStaticEgressCoroutedTunnelEntry, cienaCesMplsGlobalTunnelPathIndex=cienaCesMplsGlobalTunnelPathIndex, cienaCesMplsDynamicEgressTunnelOperState=cienaCesMplsDynamicEgressTunnelOperState, TTLPolicy=TTLPolicy, cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel=cienaCesGmplsDynamicIngressCoroutedTunnelForwardOutLabel, cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr=cienaCesGmplsStaticIngressUniDirTunnelSrcIpAddr, cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex=cienaCesGmplsDynamicIngressCoroutedTunnelGrpIndex, cienaCesTeLinkReservedBandwidthPrio0=cienaCesTeLinkReservedBandwidthPrio0, cienaCesMplsDynamicIngressTunnelFrmCosMapId=cienaCesMplsDynamicIngressTunnelFrmCosMapId, cienaCesMplsAssociatedTunnelOperStateChgTrap=cienaCesMplsAssociatedTunnelOperStateChgTrap, cienaCesMplsPwConfigTunnelName=cienaCesMplsPwConfigTunnelName, cienaCesMplsDynamicTransitTunnelIncomingBytes=cienaCesMplsDynamicTransitTunnelIncomingBytes, cienaCesMplsMIBObjects=cienaCesMplsMIBObjects, cienaCesMplsPwType=cienaCesMplsPwType, cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex=cienaCesGmplsNotifDecapTunnelGrpActiveDecapTunlIndex, cienaCesMplsPwName=cienaCesMplsPwName, cienaCesTeResourceColorGroupIndex=cienaCesTeResourceColorGroupIndex, cienaCesGmplsStaticTransitUniDirTunnelOperState=cienaCesGmplsStaticTransitUniDirTunnelOperState, cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel=cienaCesGmplsStaticTransitCoroutedTunnelReverseOutLabel, cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority=cienaCesGmplsDynamicIngressCoroutedTunnelSetupPriority, cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName=cienaCesGmplsDynamicIngressCoroutedTunnelCosProfileName, cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex=cienaCesGmplsStaticEgressCoroutedTunnelGrpIndex, cienaMplsTunnelARHopListIndex=cienaMplsTunnelARHopListIndex, cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy=cienaCesGmplsDynamicIngressUniDirTunnelTTLPolicy, cienaCesGmplsStaticIngressCoroutedTunnelLspId=cienaCesGmplsStaticIngressCoroutedTunnelLspId, cienaCesMplsAssociatedTunnelProtectionPartnerName=cienaCesMplsAssociatedTunnelProtectionPartnerName, cienaMplsTunnelARHopAddrType=cienaMplsTunnelARHopAddrType, cienaCesGmplsDynamicIngressCoroutedLspId=cienaCesGmplsDynamicIngressCoroutedLspId, cienaCesMplsTunnelRcosMapName=cienaCesMplsTunnelRcosMapName, cienaCesMplsNotifEncapTunnelName=cienaCesMplsNotifEncapTunnelName, cienaCesGmplsDynamicTransitCoroutedTunnelAdminState=cienaCesGmplsDynamicTransitCoroutedTunnelAdminState, cienaCesGmplsNotifAssociatedTunnelOperState=cienaCesGmplsNotifAssociatedTunnelOperState, cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization=cienaCesGmplsDynamicIngressCoroutedTunnelLspReoptimization, cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd=cienaCesMplsGlobalStaticAdminTunnelLabelRangeEnd, TunnelType=TunnelType, cienaCesGmplsEncapTunnelGrpNotif=cienaCesGmplsEncapTunnelGrpNotif, cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName=cienaCesGmplsStaticIngressCoroutedTunnelBfdProfileName, cienaCesMplsDynamicIngressTunnelFixedTC=cienaCesMplsDynamicIngressTunnelFixedTC)
