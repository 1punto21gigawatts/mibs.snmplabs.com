#
# PySNMP MIB module CISCO-WAN-BBIF-ATM-CONN-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-BBIF-ATM-CONN-STAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
bbChanCntGrp, = mibBuilder.importSymbols("BASIS-MIB", "bbChanCntGrp")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, Gauge32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, IpAddress, iso, Counter64, ObjectIdentity, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Gauge32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "IpAddress", "iso", "Counter64", "ObjectIdentity", "MibIdentifier", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoWanBbifAtmConnStatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 36))
ciscoWanBbifAtmConnStatMIB.setRevisions(('2002-10-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanBbifAtmConnStatMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoWanBbifAtmConnStatMIB.setLastUpdated('200210180000Z')
if mibBuilder.loadTexts: ciscoWanBbifAtmConnStatMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanBbifAtmConnStatMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanBbifAtmConnStatMIB.setDescription('This MIB module contains ATM Connection related real time statistical counter objects. The ATM connections are applicable to PXM1 service module. in MGX82xx products. Logical Channel refers to ATM Connection(or connection end point). Terminologies used: broadband interface - Logical port on PXM1. SCR - Sustained Cell Rate BT - Burst Tolerance PCR - Peak Cell Rate CDVT - Cell Delay Transfer Variance Tolerance GCRA - The Generic Cell Rate Algorithm(GCRA) is used to define comformance with repect to the traffic contract. For each cell arrival, the GCRA determines whether the cell conforms to the traffic contract of the connection. GCRA1 - GCRA Bucket 1. For CBR and UBR connections, only GCRA-1 is needed to check for PCR, CDVT Conformance. GCRA2 - GCRA Bucket 2. For VBR and ABR Connections, GCRA-1 is needed to check for PCR, CDVT conformance and GCRA-2 for SCR, BT Conformance. EFCI - Explicit Forward Congestion Indication. QE - Queue Engine(QE). This ASIC Provides the traffic management functions related to VC queues, QoS queues and interface queues. This management function is performed for both directions of traffic(ingress, egress). ingress - ingress traffic is defined as data flowing toward the switch fabric. Ingress data can come from either the Service Modules through the backplane or the PXM1 Uplink back card. egress - Egress traffic is defined as data flowing away from the switch fabric.')
bbChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1), )
if mibBuilder.loadTexts: bbChanCntGrpTable.setStatus('current')
if mibBuilder.loadTexts: bbChanCntGrpTable.setDescription('This is the broadband channel statistics table.')
bbChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanCntNum"))
if mibBuilder.loadTexts: bbChanCntGrpEntry.setStatus('current')
if mibBuilder.loadTexts: bbChanCntGrpEntry.setDescription('An entry for statistics on logical channel. Each entry contains statistics for an ATM connection on broadband interface.')
bbChanCntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanCntNum.setReference('bbChanCnfNum is defined in CISCO-WAN-BBIF-ATM-CONN-MIB.')
if mibBuilder.loadTexts: bbChanCntNum.setStatus('current')
if mibBuilder.loadTexts: bbChanCntNum.setDescription("This object identifies the logical channel number. The value for this object must be same as the value of 'bbChanCnfNum' from bbChanCnfGrpTable.")
bbChanRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: bbChanRcvClp0Cells.setDescription('CLP_0 Cells Received from broadband interface.')
bbChanRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: bbChanRcvClp1Cells.setDescription('CLP_1 Cells Received from broadband interface.')
bbChanNonConformCellsAtGcra1Policer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanNonConformCellsAtGcra1Policer.setStatus('current')
if mibBuilder.loadTexts: bbChanNonConformCellsAtGcra1Policer.setDescription('This object provides a count of the nonconforming cells that are received at the first policing point(GCRA1 policer).')
bbChanNonConformCellsAtGcra2Policer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanNonConformCellsAtGcra2Policer.setStatus('current')
if mibBuilder.loadTexts: bbChanNonConformCellsAtGcra2Policer.setDescription('This object provides a count of the nonconforming cells that are received at the second policing point(GCRA2 policer).')
bbChanRcvEOFCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanRcvEOFCells.setStatus('current')
if mibBuilder.loadTexts: bbChanRcvEOFCells.setDescription('This object provides count of End Of Frame(EOF) cells that are received.')
bbChanDscdClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanDscdClp0Cells.setStatus('current')
if mibBuilder.loadTexts: bbChanDscdClp0Cells.setDescription('This object provides a count of the CLP equal to 0 that are received and then discarded.')
bbChanDscdClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanDscdClp1Cells.setStatus('current')
if mibBuilder.loadTexts: bbChanDscdClp1Cells.setDescription('This object provides a count of the CLP equal to 1 that are received and then discarded.')
bbChanRcvCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanRcvCellsSent.setStatus('current')
if mibBuilder.loadTexts: bbChanRcvCellsSent.setDescription('Number of cells received from broadband interface and sent out of the Queue Engine(QE device).')
bbChanXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: bbChanXmtClp0Cells.setDescription('This object provides count of Number of cells with EFCI=0 that are transmitted.')
bbChanXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: bbChanXmtClp1Cells.setDescription('This object provides count of Number of cells with EFCI set that are transmitted.')
bbChanDscdClpZeroCellsToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanDscdClpZeroCellsToPort.setStatus('current')
if mibBuilder.loadTexts: bbChanDscdClpZeroCellsToPort.setDescription('Number of CLP = 0 cells discarded before transmitted to broadband interface.')
bbChanDscdClpOneCellsToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanDscdClpOneCellsToPort.setStatus('current')
if mibBuilder.loadTexts: bbChanDscdClpOneCellsToPort.setDescription('Number of CLP = 1 cells discarded before transmitted to broadband interface.')
bbChanCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanCntClrButton.setStatus('current')
if mibBuilder.loadTexts: bbChanCntClrButton.setDescription('Writing a value of 2 resets all the counters.')
cwbAtmConnStatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 36, 2))
cwbAtmConnStatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 36, 2, 1))
cwbAtmConnStatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 36, 2, 2))
cwbAtmConnStatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 36, 2, 2, 1)).setObjects(("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "cwbAtmConnStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbAtmConnStatCompliance = cwbAtmConnStatCompliance.setStatus('current')
if mibBuilder.loadTexts: cwbAtmConnStatCompliance.setDescription('The compliance statement for broadband interface Connection Statstics MIB.')
cwbAtmConnStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 36, 2, 1, 1)).setObjects(("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanCntNum"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanRcvClp0Cells"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanRcvClp1Cells"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanNonConformCellsAtGcra1Policer"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanNonConformCellsAtGcra2Policer"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanRcvEOFCells"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanDscdClp0Cells"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanDscdClp1Cells"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanRcvCellsSent"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanXmtClp0Cells"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanXmtClp1Cells"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanDscdClpZeroCellsToPort"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanDscdClpOneCellsToPort"), ("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", "bbChanCntClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbAtmConnStatsGroup = cwbAtmConnStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwbAtmConnStatsGroup.setDescription('The objects related to broadband interface connection statistics.')
mibBuilder.exportSymbols("CISCO-WAN-BBIF-ATM-CONN-STAT-MIB", bbChanRcvCellsSent=bbChanRcvCellsSent, cwbAtmConnStatMIBCompliances=cwbAtmConnStatMIBCompliances, bbChanCntGrpEntry=bbChanCntGrpEntry, bbChanDscdClp1Cells=bbChanDscdClp1Cells, bbChanDscdClpOneCellsToPort=bbChanDscdClpOneCellsToPort, bbChanRcvEOFCells=bbChanRcvEOFCells, bbChanRcvClp1Cells=bbChanRcvClp1Cells, bbChanDscdClp0Cells=bbChanDscdClp0Cells, bbChanCntGrpTable=bbChanCntGrpTable, bbChanNonConformCellsAtGcra2Policer=bbChanNonConformCellsAtGcra2Policer, cwbAtmConnStatsGroup=cwbAtmConnStatsGroup, bbChanXmtClp1Cells=bbChanXmtClp1Cells, bbChanNonConformCellsAtGcra1Policer=bbChanNonConformCellsAtGcra1Policer, bbChanCntClrButton=bbChanCntClrButton, cwbAtmConnStatMIBGroups=cwbAtmConnStatMIBGroups, PYSNMP_MODULE_ID=ciscoWanBbifAtmConnStatMIB, cwbAtmConnStatMIBConformance=cwbAtmConnStatMIBConformance, bbChanXmtClp0Cells=bbChanXmtClp0Cells, ciscoWanBbifAtmConnStatMIB=ciscoWanBbifAtmConnStatMIB, bbChanRcvClp0Cells=bbChanRcvClp0Cells, cwbAtmConnStatCompliance=cwbAtmConnStatCompliance, bbChanDscdClpZeroCellsToPort=bbChanDscdClpZeroCellsToPort, bbChanCntNum=bbChanCntNum)
