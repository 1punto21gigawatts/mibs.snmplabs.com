#
# PySNMP MIB module DOS-PREV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOS-PREV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:53:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, Counter64, Unsigned32, NotificationType, Gauge32, Integer32, Bits, TimeTicks, iso, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Counter64", "Unsigned32", "NotificationType", "Gauge32", "Integer32", "Bits", "TimeTicks", "iso", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, RowStatus, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue", "MacAddress")
swDoSMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 59))
if mibBuilder.loadTexts: swDoSMgmtMIB.setLastUpdated('201101240000Z')
if mibBuilder.loadTexts: swDoSMgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swDoSMgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swDoSMgmtMIB.setDescription('The MIB module for configuring the DoS prevention settings of the device.')
swDoSCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 59, 1))
swDoSTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSTrapLog.setStatus('current')
if mibBuilder.loadTexts: swDoSTrapLog.setDescription('This object indicates the status of the DoS prevention trap log.')
swDoSClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("land-attack", 1), ("blat-attack", 2), ("smurf-attack", 3), ("tcp-null-scan", 4), ("tcp-xmascan", 5), ("tcp-synfin", 6), ("tcp-syn-srcport-less-1024", 7), ("all", 8), ("other", 9), ("arp-mac-sa-mismatch", 10), ("fraggle-attack", 11), ("icmp-redirect-attack", 12), ("icmp-unreachable-attack", 13), ("ip-route-record-attac", 14), ("ip-source-route-attack", 15), ("ping-death-attack", 16), ("tcp-flag-synrst", 17), ("tcp-over-mac-mcbc", 18), ("tcp-syn-with-data", 19), ("tcp-tiny-frag-attack", 20), ("tcpudp-port-zero", 21), ("tracert-attack", 22), ("winnuke-attack", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSClearCounters.setStatus('current')
if mibBuilder.loadTexts: swDoSClearCounters.setDescription('This object clears the DoS prevention frame counters.')
swDoSCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3), )
if mibBuilder.loadTexts: swDoSCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlTable.setDescription('A table that holds the DoS prevention settings of the device.')
swDoSCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3, 1), ).setIndexNames((0, "DOS-PREV-MIB", "swDoSCtrlType"))
if mibBuilder.loadTexts: swDoSCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlEntry.setDescription('A list of DoS prevention settings of the device.')
swDoSCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("land-attack", 1), ("blat-attack", 2), ("smurf-attack", 3), ("tcp-null-scan", 4), ("tcp-xmascan", 5), ("tcp-synfin", 6), ("tcp-syn-srcport-less-1024", 7), ("arp-mac-sa-mismatch", 10), ("fraggle-attack", 11), ("icmp-redirect-attack", 12), ("icmp-unreachable-attack", 13), ("ip-route-record-attac", 14), ("ip-source-route-attack", 15), ("ping-death-attack", 16), ("tcp-flag-synrst", 17), ("tcp-over-mac-mcbc", 18), ("tcp-syn-with-data", 19), ("tcp-tiny-frag-attack", 20), ("tcpudp-port-zero", 21), ("tracert-attack", 22), ("winnuke-attack", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDoSCtrlType.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlType.setDescription('This object indicates the DoS prevention type.')
swDoSCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSCtrlState.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlState.setDescription('This object indicates the status of the DoS prevention type.')
swDoSCtrlActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("mirror", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSCtrlActionType.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlActionType.setDescription("This object indicates the action for the DoS prevention type. If this object is set to 'mirror' and swDoSCtrlState is set to 'enable', the configuration will not take effect until a valid mirror port is specified. If mirror port is not valid the behavior will be the same as 'drop'")
swDoSCtrlMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSCtrlMirrorPort.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlMirrorPort.setDescription("This object indicates the port to which the attack packet will be forwarded. A value of 0 means that the DoS prevention action type is either not set to 'mirror'. or the 'mirror' DoS action is not active. When swDoSCtrlActionType is set to 'mirror' with swDoSCtrlState set to 'enable', setting this value to a valid port number will activate the 'mirror' DoS action.")
swDoSCtrlMirrorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSCtrlMirrorPriority.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlMirrorPriority.setDescription('This object configures the priority of the detected packet. Valid priority values are from 0 to 7. The value 8 indicates that there will be no change in the priority of the DoS attack packet as it is forwarded to the mirror port. A valid mirror port must first be specified in order to set this value.')
swDoSCtrlMirrorRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSCtrlMirrorRxRate.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlMirrorRxRate.setDescription('This object indicates the rate of reception of DoS attack packets. The valid values are 64 to 1024000. A value of 0 indicates that the rate has no limit. The default value is 0. A valid mirror port must first be specified in order to set this value.')
swDoSCtrlFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDoSCtrlFrameCount.setStatus('current')
if mibBuilder.loadTexts: swDoSCtrlFrameCount.setDescription('This object indicates the number of frames detected under the DoS prevention type. A valid mirror port must first be specified in order to set this value.')
swDoSTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSTrapState.setStatus('current')
if mibBuilder.loadTexts: swDoSTrapState.setDescription('This object indicates the status of the DoS prevention trap.')
swDoSLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDoSLogState.setStatus('current')
if mibBuilder.loadTexts: swDoSLogState.setDescription('This object indicates the status of the DoS prevention log.')
swDoSFunctionVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 59, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDoSFunctionVersion.setStatus('current')
if mibBuilder.loadTexts: swDoSFunctionVersion.setDescription('This object indicates the function version.')
swDoSNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 59, 4))
swDoSNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 59, 4, 0))
swDoSAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 59, 4, 0, 1)).setObjects(("DOS-PREV-MIB", "swDoSCtrlType"), ("DOS-PREV-MIB", "swDoSNotifyVarIpAddr"), ("DOS-PREV-MIB", "swDoSNotifyVarPortNumber"))
if mibBuilder.loadTexts: swDoSAttackDetected.setStatus('current')
if mibBuilder.loadTexts: swDoSAttackDetected.setDescription('This trap is sent when the specific DoS packet is received and trap is enabled.')
swDoSNotifyVarBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 59, 4, 1))
swDoSNotifyVarIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 59, 4, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swDoSNotifyVarIpAddr.setStatus('current')
if mibBuilder.loadTexts: swDoSNotifyVarIpAddr.setDescription("If the DoS packet is from the end station, represent the IP address of attacker; otherwise represent the router's IP")
swDoSNotifyVarPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 59, 4, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swDoSNotifyVarPortNumber.setStatus('current')
if mibBuilder.loadTexts: swDoSNotifyVarPortNumber.setDescription('This object indicates the attacked portNum with a string, For example, if the device is in standalone mode, and the port number is 23, the string should be 23. If the device is in stack mode, and the unit ID is 2, and the port number is 3, the string should be 2:3.')
mibBuilder.exportSymbols("DOS-PREV-MIB", swDoSCtrlMirrorPriority=swDoSCtrlMirrorPriority, swDoSCtrlMirrorPort=swDoSCtrlMirrorPort, swDoSFunctionVersion=swDoSFunctionVersion, swDoSNotifyVarPortNumber=swDoSNotifyVarPortNumber, swDoSNotifyPrefix=swDoSNotifyPrefix, swDoSClearCounters=swDoSClearCounters, swDoSCtrlTable=swDoSCtrlTable, swDoSTrapLog=swDoSTrapLog, swDoSCtrlActionType=swDoSCtrlActionType, swDoSCtrlMirrorRxRate=swDoSCtrlMirrorRxRate, PYSNMP_MODULE_ID=swDoSMgmtMIB, swDoSAttackDetected=swDoSAttackDetected, swDoSCtrlEntry=swDoSCtrlEntry, swDoSCtrlState=swDoSCtrlState, swDoSMgmtMIB=swDoSMgmtMIB, swDoSNotify=swDoSNotify, swDoSCtrlFrameCount=swDoSCtrlFrameCount, swDoSTrapState=swDoSTrapState, swDoSNotifyVarBindings=swDoSNotifyVarBindings, swDoSCtrlType=swDoSCtrlType, swDoSCtrl=swDoSCtrl, swDoSLogState=swDoSLogState, swDoSNotifyVarIpAddr=swDoSNotifyVarIpAddr)
