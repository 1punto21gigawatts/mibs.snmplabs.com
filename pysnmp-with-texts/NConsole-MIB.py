#
# PySNMP MIB module NConsole-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NConsole-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Bits, Counter32, ModuleIdentity, TimeTicks, Integer32, Unsigned32, Counter64, Gauge32, NotificationType, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Bits", "Counter32", "ModuleIdentity", "TimeTicks", "Integer32", "Unsigned32", "Counter64", "Gauge32", "NotificationType", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
avanti = MibIdentifier((1, 3, 6, 1, 4, 1, 1117))
nconsolemib = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1))
serverinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 1))
configinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 2))
memoryinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 3))
moduleinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 4))
netinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 5))
nicstats = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 6))
setparminfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 7))
serverstats = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 8))
servertrends = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 9))
volinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 10))
voltrends = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 11))
driveinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 12))
drivetrends = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 13))
nictrends = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 14))
protocolinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 15))
protocoltrends = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 16))
sftserverinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 17))
sftmemoryinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 18))
sftmoduleinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 19))
sftnetinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 20))
sftsetparminfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 21))
sftservertrends = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 22))
smpinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 23))
smptrends = MibIdentifier((1, 3, 6, 1, 4, 1, 1117, 1, 24))
serverName = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverName.setStatus('mandatory')
if mibBuilder.loadTexts: serverName.setDescription('Name')
serverNwRevInfo = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNwRevInfo.setStatus('mandatory')
if mibBuilder.loadTexts: serverNwRevInfo.setDescription('NOS Revision Info')
serverNwSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNwSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: serverNwSerialNumber.setDescription('NOS Serial Number')
serverTimeLocal = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTimeLocal.setStatus('mandatory')
if mibBuilder.loadTexts: serverTimeLocal.setDescription('Time Local (string)')
serverTimeUTC = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTimeUTC.setStatus('mandatory')
if mibBuilder.loadTexts: serverTimeUTC.setDescription('Time GMT (UTC secs)')
serverUpTime = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: serverUpTime.setDescription('Up-Time (Ticks)')
serverCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCpuUtil.setStatus('mandatory')
if mibBuilder.loadTexts: serverCpuUtil.setDescription('Utilization')
serverCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCpuCount.setStatus('mandatory')
if mibBuilder.loadTexts: serverCpuCount.setDescription('Installed CPU Count')
serverCpuSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCpuSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: serverCpuSpeed.setDescription('CPU Speed (per NetWare)')
serverCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: serverCacheHits.setDescription('Cache Hit Ratio (%)')
serverCacheLRU = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCacheLRU.setStatus('mandatory')
if mibBuilder.loadTexts: serverCacheLRU.setDescription('Cache LRU (secs)')
serverCacheRatio = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCacheRatio.setStatus('mandatory')
if mibBuilder.loadTexts: serverCacheRatio.setDescription('Cache Buffer Ratio (%)')
serverLicenses = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLicenses.setStatus('mandatory')
if mibBuilder.loadTexts: serverLicenses.setDescription('Installed License Count')
serverConns = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverConns.setStatus('mandatory')
if mibBuilder.loadTexts: serverConns.setDescription('Active Connections')
serverUsers = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverUsers.setStatus('mandatory')
if mibBuilder.loadTexts: serverUsers.setDescription('Logged-in Users')
serverAllowUnencryptedPwds = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAllowUnencryptedPwds.setStatus('mandatory')
if mibBuilder.loadTexts: serverAllowUnencryptedPwds.setDescription('Unencrypted Passwords Allowed (ON/OFF)')
serverDOSPresent = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDOSPresent.setStatus('mandatory')
if mibBuilder.loadTexts: serverDOSPresent.setDescription('DOS Status (Present/Removed)')
serverLoginStatus = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLoginStatus.setStatus('mandatory')
if mibBuilder.loadTexts: serverLoginStatus.setDescription('Login Status (Enabled/Disabled)')
serverRemoteStatus = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRemoteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: serverRemoteStatus.setDescription('REMOTE.NLM Status (Loaded/Not Loaded)')
serverSecurityRestrictionLevel = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSecurityRestrictionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: serverSecurityRestrictionLevel.setDescription('Security Restriction Level')
serverNumOfActiveDrives = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNumOfActiveDrives.setStatus('mandatory')
if mibBuilder.loadTexts: serverNumOfActiveDrives.setDescription('# of Active Drives')
serverNumOfMountedVols = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNumOfMountedVols.setStatus('mandatory')
if mibBuilder.loadTexts: serverNumOfMountedVols.setDescription('# of Mounted Volumes')
serverStartupFilePath = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartupFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: serverStartupFilePath.setDescription('STARTUP.NCF full path')
serverAutoexecFilePath = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAutoexecFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: serverAutoexecFilePath.setDescription('AUTOEXEC.NCF full path')
configVersion = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configVersion.setStatus('mandatory')
if mibBuilder.loadTexts: configVersion.setDescription('NConsole Version Info')
configCycleLength = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configCycleLength.setStatus('mandatory')
if mibBuilder.loadTexts: configCycleLength.setDescription('NConsole Cycle Length (mins.)')
configStartTime = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: configStartTime.setDescription('NConsole Cycle Start Time (NULL = N/A else hh:mm)')
configStopTime = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: configStopTime.setDescription('NConsole Cycle Stop Time (NULL = N/A else hh:mm)')
configKeyboardStatus = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configKeyboardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: configKeyboardStatus.setDescription('NConsole Keyboard Lock Status (Locked/Unlocked)')
configKeyboardAutoLock = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configKeyboardAutoLock.setStatus('mandatory')
if mibBuilder.loadTexts: configKeyboardAutoLock.setDescription('NConsole Keyboard Auto Lock Status (On/Off)')
configScreenSaverTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configScreenSaverTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: configScreenSaverTimeout.setDescription('NConsole Screen Saver Timeout (mins.)')
configArchiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configArchiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: configArchiveStatus.setDescription('NConsole Log File Archive Status (Enabled/Disabled)')
configArchiveMaxDays = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configArchiveMaxDays.setStatus('mandatory')
if mibBuilder.loadTexts: configArchiveMaxDays.setDescription('NConsole Log File Max Archive Period (Days, if Enabled)')
configDataFileName = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDataFileName.setStatus('mandatory')
if mibBuilder.loadTexts: configDataFileName.setDescription('NConsole ASCII Delimited Log File (NULL, if Disabled)')
configDataFileFormat = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDataFileFormat.setStatus('mandatory')
if mibBuilder.loadTexts: configDataFileFormat.setDescription('NConsole ASCII Delimited Log File Format')
configLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configLogFileName.setStatus('mandatory')
if mibBuilder.loadTexts: configLogFileName.setDescription('NConsole ASCII Print Log File (NULL, if Disabled)')
configTrendFileName = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTrendFileName.setStatus('mandatory')
if mibBuilder.loadTexts: configTrendFileName.setDescription('NConsole Trend File (NULL, if Disabled)')
configTrendMaxDays = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTrendMaxDays.setStatus('mandatory')
if mibBuilder.loadTexts: configTrendMaxDays.setDescription('NConsole Max Trend Period (Days, if Enabled)')
memoryTotalRAM = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTotalRAM.setStatus('mandatory')
if mibBuilder.loadTexts: memoryTotalRAM.setDescription('Total Configured RAM')
memoryServerWorkRAM = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryServerWorkRAM.setStatus('mandatory')
if mibBuilder.loadTexts: memoryServerWorkRAM.setDescription('Total Work RAM')
memoryDOS = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDOS.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDOS.setDescription('Conventional Memory Used by DOS')
memoryBaseRAM = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryBaseRAM.setStatus('mandatory')
if mibBuilder.loadTexts: memoryBaseRAM.setDescription('Conventional Memory Available to NetWare')
memoryAllocPoolTotal = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAllocPoolTotal.setStatus('mandatory')
if mibBuilder.loadTexts: memoryAllocPoolTotal.setDescription('Work Dynamic Memory Pool Allocated')
memoryAllocPoolInUse = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAllocPoolInUse.setStatus('mandatory')
if mibBuilder.loadTexts: memoryAllocPoolInUse.setDescription('Work Dynamic Memory Pool In Use')
memoryCacheBufferPool = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheBufferPool.setStatus('mandatory')
if mibBuilder.loadTexts: memoryCacheBufferPool.setDescription('Cache Buffer Pool')
memoryCacheMovablePool = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheMovablePool.setStatus('mandatory')
if mibBuilder.loadTexts: memoryCacheMovablePool.setDescription('Cache Movable Pool')
memoryCacheNonMovablePool = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheNonMovablePool.setStatus('mandatory')
if mibBuilder.loadTexts: memoryCacheNonMovablePool.setDescription('Cache Non-Movable Pool')
memoryNw3PermMemoryPoolTotal = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryNw3PermMemoryPoolTotal.setStatus('mandatory')
if mibBuilder.loadTexts: memoryNw3PermMemoryPoolTotal.setDescription('Permanent Memory Pool Total (NetWare v3 only)')
memoryNw3PermMemoryPoolInUse = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryNw3PermMemoryPoolInUse.setStatus('mandatory')
if mibBuilder.loadTexts: memoryNw3PermMemoryPoolInUse.setDescription('Permanent Memory Pool In Use (NetWare v3 only)')
memoryNw4CodeDataPool = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryNw4CodeDataPool.setStatus('mandatory')
if mibBuilder.loadTexts: memoryNw4CodeDataPool.setDescription('Code And Data Memory Pool (NetWare v4 only)')
moduleCount = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCount.setStatus('mandatory')
if mibBuilder.loadTexts: moduleCount.setDescription('Loaded Modules')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2), )
if mibBuilder.loadTexts: moduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: moduleTable.setDescription('Loaded Module Entry Table')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1), ).setIndexNames((0, "NConsole-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: moduleEntry.setDescription('Loaded Module Entry')
moduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: moduleIndex.setDescription('Loaded Module Index Pointer')
moduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleName.setStatus('mandatory')
if mibBuilder.loadTexts: moduleName.setDescription('Loaded Module Name')
moduleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDesc.setStatus('mandatory')
if mibBuilder.loadTexts: moduleDesc.setDescription('Loaded Module Description')
moduleCopyright = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCopyright.setStatus('mandatory')
if mibBuilder.loadTexts: moduleCopyright.setDescription('Loaded Module Copyright Information')
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: moduleVersion.setDescription('Loaded Module Version Information')
moduleCompileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCompileDate.setStatus('mandatory')
if mibBuilder.loadTexts: moduleCompileDate.setDescription('Loaded Module Compile Date')
moduleCodeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCodeSize.setStatus('mandatory')
if mibBuilder.loadTexts: moduleCodeSize.setDescription('Loaded Module Static Code Size')
moduleDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataSize.setStatus('mandatory')
if mibBuilder.loadTexts: moduleDataSize.setDescription('Loaded Module Static Data Size')
moduleSmallMemoryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSmallMemoryAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSmallMemoryAlloc.setDescription('Loaded Module Small Memory Allocations')
moduleMediumMemoryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMediumMemoryAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: moduleMediumMemoryAlloc.setDescription('Loaded Module Medium Memory Allocations')
moduleLargeMemoryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLargeMemoryAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: moduleLargeMemoryAlloc.setDescription('Loaded Module Large Memory Allocations')
moduleActiveProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleActiveProcesses.setStatus('mandatory')
if mibBuilder.loadTexts: moduleActiveProcesses.setDescription('Loaded Module Active Processes')
moduleActiveScreens = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleActiveScreens.setStatus('mandatory')
if mibBuilder.loadTexts: moduleActiveScreens.setDescription('Loaded Module Active Screens')
netCount = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCount.setStatus('mandatory')
if mibBuilder.loadTexts: netCount.setDescription('Configured Networks')
netTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2), )
if mibBuilder.loadTexts: netTable.setStatus('mandatory')
if mibBuilder.loadTexts: netTable.setDescription('Configured Network Entry Table')
netEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1), ).setIndexNames((0, "NConsole-MIB", "netIndex"))
if mibBuilder.loadTexts: netEntry.setStatus('mandatory')
if mibBuilder.loadTexts: netEntry.setDescription('Configured Network Entry')
netIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netIndex.setStatus('mandatory')
if mibBuilder.loadTexts: netIndex.setDescription('Network Index Pointer')
netDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: netDriverName.setDescription('Network Driver Name')
netDriverDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netDriverDesc.setStatus('mandatory')
if mibBuilder.loadTexts: netDriverDesc.setDescription('Network Driver Description')
netFrameDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netFrameDesc.setStatus('mandatory')
if mibBuilder.loadTexts: netFrameDesc.setDescription('Network Frame Description')
netLogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLogicalName.setStatus('mandatory')
if mibBuilder.loadTexts: netLogicalName.setDescription('Network Logical Name')
netProtocolDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netProtocolDesc.setStatus('mandatory')
if mibBuilder.loadTexts: netProtocolDesc.setDescription('Network Protocol Description')
netNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: netNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: netNodeID.setDescription('Network Node ID')
netLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: netLineSpeed.setDescription('Network Line Speed (Kbps)')
netMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: netMaxPacketSize.setDescription('Network Maximum Packet Size')
netMaxRecvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMaxRecvSize.setStatus('mandatory')
if mibBuilder.loadTexts: netMaxRecvSize.setDescription('Network Maximum Rx Size')
netMaxProtocolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMaxProtocolSize.setStatus('mandatory')
if mibBuilder.loadTexts: netMaxProtocolSize.setDescription('Network Maximum Protocol Size')
netPrimaryIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPrimaryIOPort.setStatus('mandatory')
if mibBuilder.loadTexts: netPrimaryIOPort.setDescription('Network Primary I/O Port Address')
netPrimaryMemoryDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPrimaryMemoryDecode.setStatus('mandatory')
if mibBuilder.loadTexts: netPrimaryMemoryDecode.setDescription('Network Primary Memory Address')
netPrimaryInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPrimaryInterrupt.setStatus('mandatory')
if mibBuilder.loadTexts: netPrimaryInterrupt.setDescription('Network Primary IRQ')
netPrimaryDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPrimaryDMA.setStatus('mandatory')
if mibBuilder.loadTexts: netPrimaryDMA.setDescription('Network Primary DMA Channel')
netSecondaryIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netSecondaryIOPort.setStatus('mandatory')
if mibBuilder.loadTexts: netSecondaryIOPort.setDescription('Network Secondary I/O Port Address')
netSecondaryMemoryDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netSecondaryMemoryDecode.setStatus('mandatory')
if mibBuilder.loadTexts: netSecondaryMemoryDecode.setDescription('Network Secondary Memory Address')
netSecondaryInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netSecondaryInterrupt.setStatus('mandatory')
if mibBuilder.loadTexts: netSecondaryInterrupt.setDescription('Network Secondary IRQ')
netSecondaryDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netSecondaryDMA.setStatus('mandatory')
if mibBuilder.loadTexts: netSecondaryDMA.setDescription('Network Secondary DMA Channel')
netTotalRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netTotalRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: netTotalRxPacketCount.setDescription('Network Total Rx Packets')
netPacketRxOverflowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketRxOverflowCount.setStatus('mandatory')
if mibBuilder.loadTexts: netPacketRxOverflowCount.setDescription('Network Total Rx Packet Overflow Count')
netPacketRxTooBigCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketRxTooBigCount.setStatus('mandatory')
if mibBuilder.loadTexts: netPacketRxTooBigCount.setDescription('Network Total Rx Packet Too Big Count')
netPacketRxTooSmallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketRxTooSmallCount.setStatus('mandatory')
if mibBuilder.loadTexts: netPacketRxTooSmallCount.setDescription('Network Total Rx Packet Too Small Count')
netPacketRxMiscErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketRxMiscErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: netPacketRxMiscErrorCount.setDescription('Network Total Rx Misc. Errors')
netChecksumErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netChecksumErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: netChecksumErrorCount.setDescription('Network Total Rx Checksum Errors')
netHardwareRxMismatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netHardwareRxMismatchCount.setStatus('mandatory')
if mibBuilder.loadTexts: netHardwareRxMismatchCount.setDescription('Network Total Rx Mismatch Errors')
netTotalTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netTotalTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: netTotalTxPacketCount.setDescription('Network Total Tx Packets')
netNoECBAvailableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netNoECBAvailableCount.setStatus('mandatory')
if mibBuilder.loadTexts: netNoECBAvailableCount.setDescription('Network Total Tx No ECB Available Count')
netPacketTxTooBigCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketTxTooBigCount.setStatus('mandatory')
if mibBuilder.loadTexts: netPacketTxTooBigCount.setDescription('Network Total Tx Packet Too Big Count')
netPacketTxTooSmallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketTxTooSmallCount.setStatus('mandatory')
if mibBuilder.loadTexts: netPacketTxTooSmallCount.setDescription('Network Total Tx Packet Too Small Count')
netPacketTxMiscErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketTxMiscErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: netPacketTxMiscErrorCount.setDescription('Network Total Tx Misc. Errors')
netRetryTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 5, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netRetryTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: netRetryTxCount.setDescription('Network Total Tx Retry Count')
nicCount = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicCount.setDescription('Configured NICs (Network Interface Cards)')
nicTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2), )
if mibBuilder.loadTexts: nicTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicTable.setDescription('Configured NIC Entry Table')
nicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1), ).setIndexNames((0, "NConsole-MIB", "nicIndex"))
if mibBuilder.loadTexts: nicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicEntry.setDescription('Configured NIC Entry')
nicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicIndex.setDescription('NIC Index Pointer')
nicNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: nicNodeID.setDescription('NIC Node ID')
nicCurrRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCurrRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicCurrRxPacketCount.setDescription('NIC Current Rx Packets')
nicAvgRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicAvgRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicAvgRxPacketCount.setDescription('NIC Average Rx Packets')
nicPeakRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicPeakRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicPeakRxPacketCount.setDescription('NIC Peak Rx Packets')
nicCumlRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCumlRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicCumlRxPacketCount.setDescription('NIC Cumulative Rx Packets')
nicCurrTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCurrTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicCurrTxPacketCount.setDescription('NIC Current Tx Packets')
nicAvgTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicAvgTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicAvgTxPacketCount.setDescription('NIC Average Tx Packets')
nicPeakTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicPeakTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicPeakTxPacketCount.setDescription('NIC Peak Tx Packets')
nicCumlTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCumlTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicCumlTxPacketCount.setDescription('NIC Cumulative Tx Packets')
setparmTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1), )
if mibBuilder.loadTexts: setparmTable.setStatus('mandatory')
if mibBuilder.loadTexts: setparmTable.setDescription('SET Parameter Entry Table')
setparmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1), ).setIndexNames((0, "NConsole-MIB", "setparmIndex"))
if mibBuilder.loadTexts: setparmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: setparmEntry.setDescription('SET Parameter Entry')
setparmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setparmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: setparmIndex.setDescription('SET Parameter Index Pointer')
setparmName = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setparmName.setStatus('mandatory')
if mibBuilder.loadTexts: setparmName.setDescription('SET Parameter Name')
setparmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setparmDesc.setStatus('mandatory')
if mibBuilder.loadTexts: setparmDesc.setDescription('SET Parameter Description')
setparmCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setparmCategory.setStatus('mandatory')
if mibBuilder.loadTexts: setparmCategory.setDescription('SET Parameter Category')
setparmFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setparmFlags.setStatus('mandatory')
if mibBuilder.loadTexts: setparmFlags.setDescription('SET Parameter Flags')
setparmCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setparmCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: setparmCurrent.setDescription('SET Parameter Current Value')
setparmMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setparmMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: setparmMinimum.setDescription('SET Parameter Minimum Value')
setparmMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setparmMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: setparmMaximum.setDescription('SET Parameter Maximum Value')
serverCycleStartTime = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCycleStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: serverCycleStartTime.setDescription('Current Cycle Start Time (string)')
serverCycleStartUTC = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCycleStartUTC.setStatus('mandatory')
if mibBuilder.loadTexts: serverCycleStartUTC.setDescription('Current Cycle Start Time GMT (UTC secs)')
serverCycleElapsedTicks = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCycleElapsedTicks.setStatus('mandatory')
if mibBuilder.loadTexts: serverCycleElapsedTicks.setDescription('Current Cycle Elapsed Time (Ticks)')
serverCycleLengthTicks = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCycleLengthTicks.setStatus('mandatory')
if mibBuilder.loadTexts: serverCycleLengthTicks.setDescription('Current Cycle Length (Ticks)')
serverCurrUtil = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrUtil.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrUtil.setDescription('Current CPU Utilization')
serverAvgUtil = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgUtil.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgUtil.setDescription('Average CPU Utilization')
serverPeakUtil = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakUtil.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakUtil.setDescription('Peak CPU Utilization')
serverCurrCacheRatio = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrCacheRatio.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrCacheRatio.setDescription('Current Cache Buffer Ratio (%)')
serverAvgCacheRatio = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgCacheRatio.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgCacheRatio.setDescription('Average Cache Buffer Ratio (%)')
serverMinCacheRatio = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMinCacheRatio.setStatus('mandatory')
if mibBuilder.loadTexts: serverMinCacheRatio.setDescription('Minimum Cache Buffer Ratio (%)')
serverCurrCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrCacheHits.setDescription('Current Cache Hit Ratio (%)')
serverAvgCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgCacheHits.setDescription('Average Cache Hit Ratio (%)')
serverMinCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMinCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: serverMinCacheHits.setDescription('Minimum Cache Hit Ratio (%)')
serverCurrFSPs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrFSPs.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrFSPs.setDescription('Current File Service Processes (FSPs)')
serverAvgFSPs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgFSPs.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgFSPs.setDescription('Average File Service Processes (FSPs)')
serverPeakFSPs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakFSPs.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakFSPs.setDescription('Peak File Service Processes (FSPs)')
serverCurrProcs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrProcs.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrProcs.setDescription('Current Processes (non-FSPs)')
serverAvgProcs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgProcs.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgProcs.setDescription('Average Processes (non-FSPs)')
serverPeakProcs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakProcs.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakProcs.setDescription('Peak Processes (non-FSPs)')
serverCurrConns = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrConns.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrConns.setDescription('Current Connections In Use')
serverAvgConns = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgConns.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgConns.setDescription('Average Connections In Use (current cycle)')
serverPeakConns = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakConns.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakConns.setDescription('Peak Connections In Use (current cycle)')
serverCurrUsers = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrUsers.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrUsers.setDescription('Current Connections In Use')
serverAvgUsers = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgUsers.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgUsers.setDescription('Average Connections In Use')
serverPeakUsers = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakUsers.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakUsers.setDescription('Peak Connections In Use')
serverCurrRecvBuffs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrRecvBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrRecvBuffs.setDescription('Current Packet Receive Buffers')
serverAvgRecvBuffs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgRecvBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgRecvBuffs.setDescription('Average Packet Receive Buffers')
serverPeakRecvBuffs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakRecvBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakRecvBuffs.setDescription('Peak Packet Receive Buffers')
serverCurrDirBuffs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrDirBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrDirBuffs.setDescription('Current Directory Cache Buffers')
serverAvgDirBuffs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgDirBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgDirBuffs.setDescription('Average Directory Cache Buffers')
serverPeakDirBuffs = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakDirBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakDirBuffs.setDescription('Peak Directory Cache Buffers')
serverCurrOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrOpenFiles.setDescription('Current Open Files')
serverAvgOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgOpenFiles.setDescription('Average Open Files')
serverPeakOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakOpenFiles.setDescription('Peak Open Files')
serverCurrIOsPending = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrIOsPending.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrIOsPending.setDescription('Current Disk I/Os Pending')
serverAvgIOsPending = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgIOsPending.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgIOsPending.setDescription('Average Disk I/Os Pending (current cycle)')
serverPeakIOsPending = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakIOsPending.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakIOsPending.setDescription('Peak Disk I/Os Pending (current cycle)')
serverCumlIOsPending = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlIOsPending.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlIOsPending.setDescription('Cumulative Disk I/Os Pending (current cycle)')
serverCurrDirtyBlocks = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrDirtyBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrDirtyBlocks.setDescription('Current Dirty Blocks')
serverAvgDirtyBlocks = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgDirtyBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgDirtyBlocks.setDescription('Average Dirty Blocks (current cycle)')
serverPeakDirtyBlocks = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakDirtyBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakDirtyBlocks.setDescription('Peak Dirty Blocks (current cycle)')
serverCumlDirtyBlocks = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlDirtyBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlDirtyBlocks.setDescription('Cumulative Dirty Blocks (current cycle)')
serverCurrDiskReads = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrDiskReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrDiskReads.setDescription('Current Physical Disk Reads')
serverAvgDiskReads = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgDiskReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgDiskReads.setDescription('Average Physical Disk Reads (current cycle)')
serverPeakDiskReads = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakDiskReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakDiskReads.setDescription('Peak Physical Disk Reads (current cycle)')
serverCumlDiskReads = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlDiskReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlDiskReads.setDescription('Cumulative Physical Disk Reads (current cycle)')
serverCurrDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrDiskReadBytes.setDescription('Current Physical Disk Read Bytes')
serverAvgDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgDiskReadBytes.setDescription('Average Physical Disk Read Bytes (current cycle)')
serverPeakDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakDiskReadBytes.setDescription('Peak Physical Disk Read Bytes (current cycle)')
serverCumlDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlDiskReadBytes.setDescription('Cumulative Physical Disk Read Bytes (current cycle)')
serverCurrDiskWrites = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrDiskWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrDiskWrites.setDescription('Current Physical Disk Writes')
serverAvgDiskWrites = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgDiskWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgDiskWrites.setDescription('Average Physical Disk Writes (current cycle)')
serverPeakDiskWrites = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakDiskWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakDiskWrites.setDescription('Peak Physical Disk Writes (current cycle)')
serverCumlDiskWrites = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlDiskWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlDiskWrites.setDescription('Cumulative Physical Disk Writes (current cycle)')
serverCurrDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrDiskWriteBytes.setDescription('Current Physical Disk Write Bytes')
serverAvgDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgDiskWriteBytes.setDescription('Average Physical Disk Write Bytes (current cycle)')
serverPeakDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakDiskWriteBytes.setDescription('Peak Physical Disk Write Bytes (current cycle)')
serverCumlDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlDiskWriteBytes.setDescription('Cumulative Physical Disk Write Bytes (current cycle)')
serverCurrRoutedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrRoutedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrRoutedPkts.setDescription('Current LAN Routed Packets')
serverAvgRoutedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgRoutedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgRoutedPkts.setDescription('Average LAN Routed Packets (current cycle)')
serverPeakRoutedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakRoutedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakRoutedPkts.setDescription('Peak LAN Routed Packets (current cycle)')
serverCumlRoutedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlRoutedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlRoutedPkts.setDescription('Cumulative LAN Routed Packets (current cycle)')
serverCurrRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrRxPkts.setDescription('Current LAN Rx Packets')
serverAvgRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgRxPkts.setDescription('Average LAN Rx Packets (current cycle)')
serverPeakRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakRxPkts.setDescription('Peak LAN Rx Packets (current cycle)')
serverCumlRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlRxPkts.setDescription('Cumulative LAN Rx Packets (current cycle)')
serverCurrRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrRxBytes.setDescription('Current LAN Rx Bytes')
serverAvgRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgRxBytes.setDescription('Average LAN Rx Bytes (current cycle)')
serverPeakRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakRxBytes.setDescription('Peak LAN Rx Bytes (current cycle)')
serverCumlRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlRxBytes.setDescription('Cumulative LAN Rx Bytes (current cycle)')
serverCurrTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrTxPkts.setDescription('Current LAN Tx Packets')
serverAvgTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgTxPkts.setDescription('Average LAN Tx Packets (current cycle)')
serverPeakTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakTxPkts.setDescription('Peak LAN Tx Packets (current cycle)')
serverCumlTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlTxPkts.setDescription('Cumulative LAN Tx Packets (current cycle)')
serverCurrTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrTxBytes.setDescription('Current LAN Tx Bytes')
serverAvgTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgTxBytes.setDescription('Average LAN Tx Bytes (current cycle)')
serverPeakTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakTxBytes.setDescription('Peak LAN Tx Bytes (current cycle)')
serverCumlTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlTxBytes.setDescription('Cumulative LAN Tx Bytes (current cycle)')
serverCurrDirSearch = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrDirSearch.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrDirSearch.setDescription('Current Directory Search Requests')
serverAvgDirSearch = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgDirSearch.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgDirSearch.setDescription('Average Directory Search Requests (current cycle)')
serverPeakDirSearch = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakDirSearch.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakDirSearch.setDescription('Peak Directory Search Requests (current cycle)')
serverCumlDirSearch = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlDirSearch.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlDirSearch.setDescription('Cumulative Directory Search Requests (current cycle)')
serverCurrFileCreates = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrFileCreates.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrFileCreates.setDescription('Current File Create Requests')
serverAvgFileCreates = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgFileCreates.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgFileCreates.setDescription('Average File Create Requests (current cycle)')
serverPeakFileCreates = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakFileCreates.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakFileCreates.setDescription('Peak File Create Requests (current cycle)')
serverCumlFileCreates = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlFileCreates.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlFileCreates.setDescription('Cumulative File Create Requests (current cycle)')
serverCurrFileOpens = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrFileOpens.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrFileOpens.setDescription('Current File Open Requests')
serverAvgFileOpens = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgFileOpens.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgFileOpens.setDescription('Average File Open Requests (current cycle)')
serverPeakFileOpens = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakFileOpens.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakFileOpens.setDescription('Peak File Open Requests (current cycle)')
serverCumlFileOpens = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlFileOpens.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlFileOpens.setDescription('Cumulative File Open Requests (current cycle)')
serverCurrFileDeletes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrFileDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrFileDeletes.setDescription('Current File Delete Requests')
serverAvgFileDeletes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgFileDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgFileDeletes.setDescription('Average File Delete Requests (current cycle)')
serverPeakFileDeletes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakFileDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakFileDeletes.setDescription('Peak File Delete Requests (current cycle)')
serverCumlFileDeletes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlFileDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlFileDeletes.setDescription('Cumulative File Delete Requests (current cycle)')
serverCurrFileReads = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrFileReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrFileReads.setDescription('Current File Read Requests')
serverAvgFileReads = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgFileReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgFileReads.setDescription('Average File Read Requests (current cycle)')
serverPeakFileReads = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakFileReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakFileReads.setDescription('Peak File Read Requests (current cycle)')
serverCumlFileReads = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlFileReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlFileReads.setDescription('Cumulative File Read Requests (current cycle)')
serverCurrFileReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrFileReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrFileReadBytes.setDescription('Current File Read Bytes')
serverAvgFileReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgFileReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgFileReadBytes.setDescription('Average File Read Bytes (current cycle)')
serverPeakFileReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakFileReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakFileReadBytes.setDescription('Peak File Read Bytes (current cycle)')
serverCumlFileReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlFileReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlFileReadBytes.setDescription('Cumulative File Read Bytes (current cycle)')
serverCurrFileWrites = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrFileWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrFileWrites.setDescription('Current File Write Requests')
serverAvgFileWrites = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgFileWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgFileWrites.setDescription('Average File Write Requests (current cycle)')
serverPeakFileWrites = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakFileWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakFileWrites.setDescription('Peak File Write Requests (current cycle)')
serverCumlFileWrites = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlFileWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlFileWrites.setDescription('Cumulative File Write Requests (current cycle)')
serverCurrFileWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrFileWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCurrFileWriteBytes.setDescription('Current File Write Bytes')
serverAvgFileWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAvgFileWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverAvgFileWriteBytes.setDescription('Average File Write Bytes (current cycle)')
serverPeakFileWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeakFileWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverPeakFileWriteBytes.setDescription('Peak File Write Bytes (current cycle)')
serverCumlFileWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 8, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCumlFileWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverCumlFileWriteBytes.setDescription('Cumulative File Write Bytes (current cycle)')
serverTrendTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1), )
if mibBuilder.loadTexts: serverTrendTable.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendTable.setDescription('Trend Entry Table')
serverTrendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1), ).setIndexNames((0, "NConsole-MIB", "serverTrendIndex"))
if mibBuilder.loadTexts: serverTrendEntry.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendEntry.setDescription('Trend Entry')
serverTrendIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendIndex.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendIndex.setDescription('Trend Statistics Index Pointer')
serverTrendStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendStartTime.setDescription('Trend Cycle Start Time (string)')
serverTrendStartUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendStartUTC.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendStartUTC.setDescription('Trend Cycle Start Time GMT (UTC secs)')
serverTrendStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendStopTime.setDescription('Trend Cycle Stop Time (string)')
serverTrendStopUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendStopUTC.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendStopUTC.setDescription('Trend Cycle Stop Time GMT (UTC secs)')
serverTrendUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendUpTime.setDescription('Trend Cycle Up-Time (Ticks)')
serverTrendCacheLRU = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCacheLRU.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCacheLRU.setDescription('Trend Cycle Cache LRU (Ticks)')
serverTrendAvgUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgUtil.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgUtil.setDescription('Trend Average CPU Utilization')
serverTrendPeakUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakUtil.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakUtil.setDescription('Trend Peak CPU Utilization')
serverTrendAvgConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgConns.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgConns.setDescription('Trend Average Connections In Use')
serverTrendPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakConns.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakConns.setDescription('Trend Peak Connections In Use')
serverTrendAvgUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgUsers.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgUsers.setDescription('Trend Average Logged-in Users')
serverTrendPeakUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakUsers.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakUsers.setDescription('Trend Peak Logged-in Users')
serverTrendAvgFSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgFSPs.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgFSPs.setDescription('Trend Average File Service Processes (FSPs)')
serverTrendPeakFSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakFSPs.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakFSPs.setDescription('Trend Peak File Service Processes (FSPs)')
serverTrendAvgProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgProcs.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgProcs.setDescription('Trend Average Processes (non-FSPs)')
serverTrendPeakProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakProcs.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakProcs.setDescription('Trend Peak Processes (non-FSPs)')
serverTrendAvgCacheRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgCacheRatio.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgCacheRatio.setDescription('Trend Average Cache Buffer Ratio (%)')
serverTrendMinCacheRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMinCacheRatio.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMinCacheRatio.setDescription('Trend Minimum Cache Buffer Ratio (%)')
serverTrendAvgCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgCacheHits.setDescription('Trend Average Cache Hit Ratio (%)')
serverTrendMinCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMinCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMinCacheHits.setDescription('Trend Minimum Cache Hit Ratio (%)')
serverTrendAvgDirBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgDirBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgDirBuffs.setDescription('Trend Average Directory Cache Buffers')
serverTrendPeakDirBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakDirBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakDirBuffs.setDescription('Trend Peak Directory Cache Buffers')
serverTrendAvgRecvBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgRecvBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgRecvBuffs.setDescription('Trend Average Packet Receive Buffers')
serverTrendPeakRecvBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakRecvBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakRecvBuffs.setDescription('Trend Peak Packet Receive Buffers')
serverTrendAvgOpenFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgOpenFiles.setDescription('Trend Average Open Files')
serverTrendPeakOpenFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakOpenFiles.setDescription('Trend Peak Open Files')
serverTrendAvgIOsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgIOsPending.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgIOsPending.setDescription('Trend Average Disk I/Os Pending')
serverTrendPeakIOsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakIOsPending.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakIOsPending.setDescription('Trend Peak Disk I/Os Pending')
serverTrendCumlIOsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlIOsPending.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlIOsPending.setDescription('Trend Cumulative Disk I/Os Pending')
serverTrendAvgDirtyBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgDirtyBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgDirtyBlocks.setDescription('Trend Average Dirty Blocks')
serverTrendPeakDirtyBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakDirtyBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakDirtyBlocks.setDescription('Trend Peak Dirty Blocks')
serverTrendCumlDirtyBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlDirtyBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlDirtyBlocks.setDescription('Trend Cumulative Dirty Blocks')
serverTrendAvgDiskReads = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgDiskReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgDiskReads.setDescription('Trend Average Physical Disk Reads')
serverTrendPeakDiskReads = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakDiskReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakDiskReads.setDescription('Trend Peak Physical Disk Reads')
serverTrendCumlDiskReads = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlDiskReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlDiskReads.setDescription('Trend Cumulative Physical Disk Reads')
serverTrendAvgDiskReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgDiskReadBytes.setDescription('Trend Average Physical Disk Read Bytes')
serverTrendPeakDiskReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakDiskReadBytes.setDescription('Trend Peak Physical Disk Read Bytes')
serverTrendCumlDiskReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlDiskReadBytes.setDescription('Trend Cumulative Physical Disk Read Bytes')
serverTrendAvgDiskWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgDiskWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgDiskWrites.setDescription('Trend Average Physical Disk Writes')
serverTrendPeakDiskWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakDiskWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakDiskWrites.setDescription('Trend Peak Physical Disk Writes')
serverTrendCumlDiskWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlDiskWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlDiskWrites.setDescription('Trend Cumulative Physical Disk Writes')
serverTrendAvgDiskWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgDiskWriteBytes.setDescription('Trend Average Physical Disk Write Bytes')
serverTrendPeakDiskWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakDiskWriteBytes.setDescription('Trend Peak Physical Disk Write Bytes')
serverTrendCumlDiskWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlDiskWriteBytes.setDescription('Trend Cumulative Physical Disk Write Bytes')
serverTrendAvgRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgRoutedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgRoutedPkts.setDescription('Trend Average LAN Routed Packets')
serverTrendPeakRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakRoutedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakRoutedPkts.setDescription('Trend Peak LAN Routed Packets')
serverTrendCumlRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlRoutedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlRoutedPkts.setDescription('Trend Cumulative LAN Routed Packets')
serverTrendAvgRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgRxPkts.setDescription('Trend Average LAN Rx Packets')
serverTrendPeakRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakRxPkts.setDescription('Trend Peak LAN Rx Packets')
serverTrendCumlRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlRxPkts.setDescription('Trend Cumulative LAN Rx Packets')
serverTrendAvgRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgRxBytes.setDescription('Trend Average LAN Rx Bytes')
serverTrendPeakRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakRxBytes.setDescription('Trend Peak LAN Rx Bytes')
serverTrendCumlRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlRxBytes.setDescription('Trend Cumulative LAN Rx Bytes')
serverTrendAvgTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgTxPkts.setDescription('Trend Average LAN Tx Packets')
serverTrendPeakTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakTxPkts.setDescription('Trend Peak LAN Tx Packets')
serverTrendCumlTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlTxPkts.setDescription('Trend Cumulative LAN Tx Packets')
serverTrendAvgTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgTxBytes.setDescription('Trend Average LAN Tx Bytes')
serverTrendPeakTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakTxBytes.setDescription('Trend Peak LAN Tx Bytes')
serverTrendCumlTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlTxBytes.setDescription('Trend Cumulative LAN Tx Bytes')
serverTrendAvgDirSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgDirSearch.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgDirSearch.setDescription('Trend Average Directory Search Requests')
serverTrendPeakDirSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakDirSearch.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakDirSearch.setDescription('Trend Peak Directory Search Requests')
serverTrendCumlDirSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlDirSearch.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlDirSearch.setDescription('Trend Cumulative Directory Search Requests')
serverTrendAvgFileCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgFileCreates.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgFileCreates.setDescription('Trend Average File Create Requests')
serverTrendPeakFileCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakFileCreates.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakFileCreates.setDescription('Trend Peak File Create Requests')
serverTrendCumlFileCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlFileCreates.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlFileCreates.setDescription('Trend Cumulative File Create Requests')
serverTrendAvgFileOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgFileOpens.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgFileOpens.setDescription('Trend Average File Open Requests')
serverTrendPeakFileOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakFileOpens.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakFileOpens.setDescription('Trend Peak File Open Requests')
serverTrendCumlFileOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlFileOpens.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlFileOpens.setDescription('Trend Cumulative File Open Requests')
serverTrendAvgFileDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgFileDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgFileDeletes.setDescription('Trend Average File Delete Requests')
serverTrendPeakFileDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakFileDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakFileDeletes.setDescription('Trend Peak File Delete Requests')
serverTrendCumlFileDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlFileDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlFileDeletes.setDescription('Trend Cumulative File Delete Requests')
serverTrendAvgFileReads = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgFileReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgFileReads.setDescription('Trend Average File Read Requests')
serverTrendPeakFileReads = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakFileReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakFileReads.setDescription('Trend Peak File Read Requests')
serverTrendCumlFileReads = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlFileReads.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlFileReads.setDescription('Trend Cumulative File Read Requests')
serverTrendAvgFileReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgFileReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgFileReadBytes.setDescription('Trend Average File Read Bytes')
serverTrendPeakFileReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakFileReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakFileReadBytes.setDescription('Trend Peak File Read Bytes')
serverTrendCumlFileReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlFileReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlFileReadBytes.setDescription('Trend Cumulative File Read Bytes')
serverTrendAvgFileWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgFileWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgFileWrites.setDescription('Trend Average File Write Requests')
serverTrendPeakFileWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakFileWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakFileWrites.setDescription('Trend Peak File Write Requests')
serverTrendCumlFileWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlFileWrites.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlFileWrites.setDescription('Trend Cumulative File Write Requests')
serverTrendAvgFileWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendAvgFileWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendAvgFileWriteBytes.setDescription('Trend Average File Write Bytes')
serverTrendPeakFileWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendPeakFileWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendPeakFileWriteBytes.setDescription('Trend Peak File Write Bytes')
serverTrendCumlFileWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendCumlFileWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendCumlFileWriteBytes.setDescription('Trend Cumulative File Write Bytes')
serverTrendMemoryAllocPoolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMemoryAllocPoolTotal.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMemoryAllocPoolTotal.setDescription('Trend Work Dynamic Memory Pool Allocated')
serverTrendMemoryAllocPoolInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMemoryAllocPoolInUse.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMemoryAllocPoolInUse.setDescription('Trend Work Dynamic Memory Pool In Use')
serverTrendMemoryCacheBufferPool = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMemoryCacheBufferPool.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMemoryCacheBufferPool.setDescription('Trend Cache Buffer Pool')
serverTrendMemoryCacheMovablePool = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMemoryCacheMovablePool.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMemoryCacheMovablePool.setDescription('Trend Cache Movable Pool')
serverTrendMemoryCacheNonMovablePool = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMemoryCacheNonMovablePool.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMemoryCacheNonMovablePool.setDescription('Trend Cache Non-Movable Pool')
serverTrendMemoryNw3PermMemoryPoolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMemoryNw3PermMemoryPoolTotal.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMemoryNw3PermMemoryPoolTotal.setDescription('Trend Permanent Memory Pool Total (NetWare v3 only)')
serverTrendMemoryNw3PermMemoryPoolInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMemoryNw3PermMemoryPoolInUse.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMemoryNw3PermMemoryPoolInUse.setDescription('Trend Permanent Memory Pool In Use (NetWare v3 only)')
serverTrendMemoryNw4CodeDataPool = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 9, 1, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTrendMemoryNw4CodeDataPool.setStatus('mandatory')
if mibBuilder.loadTexts: serverTrendMemoryNw4CodeDataPool.setDescription('Trend Code And Data Memory Pool (NetWare v4 only)')
volCount = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCount.setStatus('mandatory')
if mibBuilder.loadTexts: volCount.setDescription('Mounted Volumes')
volTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2), )
if mibBuilder.loadTexts: volTable.setStatus('mandatory')
if mibBuilder.loadTexts: volTable.setDescription('Mounted Volume Entry Table')
volEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1), ).setIndexNames((0, "NConsole-MIB", "volIndex"))
if mibBuilder.loadTexts: volEntry.setStatus('mandatory')
if mibBuilder.loadTexts: volEntry.setDescription('Mounted Volume Entry')
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volIndex.setStatus('mandatory')
if mibBuilder.loadTexts: volIndex.setDescription('Mounted Volume Index Pointer')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volName.setStatus('mandatory')
if mibBuilder.loadTexts: volName.setDescription('Mounted Volume Name')
volDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDriveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: volDriveNumber.setDescription('Mounted Volume Drive Number')
volBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: volBlockSize.setDescription('Mounted Volume Block Size (bytes)')
volDirSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDirSlots.setStatus('mandatory')
if mibBuilder.loadTexts: volDirSlots.setDescription('Mounted Volume Allocated Directory Slots')
volDirSlotsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDirSlotsFree.setStatus('mandatory')
if mibBuilder.loadTexts: volDirSlotsFree.setDescription('Mounted Volume Available Directory Slots')
volDiskSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDiskSpace.setStatus('mandatory')
if mibBuilder.loadTexts: volDiskSpace.setDescription('Mounted Volume Configured Disk Space (Kb)')
volDiskSpaceFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDiskSpaceFree.setStatus('mandatory')
if mibBuilder.loadTexts: volDiskSpaceFree.setDescription('Mounted Volume Available Disk Space (Kb)')
volDiskSpacePurgable = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDiskSpacePurgable.setStatus('mandatory')
if mibBuilder.loadTexts: volDiskSpacePurgable.setDescription('Mounted Volume Purgable Disk Space (Kb)')
volDiskSpaceNotYetPurgable = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDiskSpaceNotYetPurgable.setStatus('mandatory')
if mibBuilder.loadTexts: volDiskSpaceNotYetPurgable.setDescription('Mounted Volume Not Yet Purgable Disk Space(Kb)')
volTrendTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1), )
if mibBuilder.loadTexts: volTrendTable.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendTable.setDescription('Volume Trends Entry Table')
volTrendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1), ).setIndexNames((0, "NConsole-MIB", "volTrendCycleIndex"), (0, "NConsole-MIB", "volTrendVolumeIndex"))
if mibBuilder.loadTexts: volTrendEntry.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendEntry.setDescription('Volume Trends Entry')
volTrendCycleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendCycleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendCycleIndex.setDescription('Volume Trend Cycle Index')
volTrendVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendVolumeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendVolumeIndex.setDescription('Volume Trend Volume Index')
volTrendStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendStartTime.setDescription('Volume Trend Start Time')
volTrendStartUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendStartUTC.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendStartUTC.setDescription('Volume Trend Start Time GMT (UTC secs)')
volTrendStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendStopTime.setDescription('Volume Trend Stop Time')
volTrendStopUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendStopUTC.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendStopUTC.setDescription('Volume Trend Stop Time GMT (UTC secs)')
volTrendName = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendName.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendName.setDescription('Volume Trend Volume Name')
volTrendDirSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendDirSlots.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendDirSlots.setDescription('Volume Trend Allocated Directory Slots')
volTrendDirSlotsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendDirSlotsFree.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendDirSlotsFree.setDescription('Volume Trend Available Directory Slots')
volTrendDiskSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendDiskSpace.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendDiskSpace.setDescription('Volume Trend Configured Disk Space (Kb)')
volTrendDiskSpaceFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendDiskSpaceFree.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendDiskSpaceFree.setDescription('Volume Trend Available Disk Space (Kb)')
volTrendDiskSpacePurgable = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendDiskSpacePurgable.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendDiskSpacePurgable.setDescription('Volume Trend Purgable Disk Space (Kb)')
volTrendDiskSpaceNotYetPurgable = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 11, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volTrendDiskSpaceNotYetPurgable.setStatus('mandatory')
if mibBuilder.loadTexts: volTrendDiskSpaceNotYetPurgable.setDescription('Volume Trend Not Yet Purgable Disk Space(Kb)')
driveCount = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveCount.setStatus('mandatory')
if mibBuilder.loadTexts: driveCount.setDescription('Active Drives')
driveTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2), )
if mibBuilder.loadTexts: driveTable.setStatus('mandatory')
if mibBuilder.loadTexts: driveTable.setDescription('Active Drive Entry Table')
driveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1), ).setIndexNames((0, "NConsole-MIB", "driveIndex"))
if mibBuilder.loadTexts: driveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: driveEntry.setDescription('Active Drive Entry')
driveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: driveIndex.setDescription('Active Drive Index Pointer')
driveDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveDesc.setStatus('mandatory')
if mibBuilder.loadTexts: driveDesc.setDescription('Active Drive Description')
driveType = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveType.setStatus('mandatory')
if mibBuilder.loadTexts: driveType.setDescription('Active Drive Type')
driveControllerCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveControllerCardID.setStatus('mandatory')
if mibBuilder.loadTexts: driveControllerCardID.setDescription('Active Drive Controller ID (Physical)')
driveControllerDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveControllerDeviceID.setStatus('mandatory')
if mibBuilder.loadTexts: driveControllerDeviceID.setDescription('Active Drive Controller Device ID (Logical)')
driveControllerDriveID = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveControllerDriveID.setStatus('mandatory')
if mibBuilder.loadTexts: driveControllerDriveID.setDescription('Active Drive Controller Drive ID (Physical)')
driveCylinderCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveCylinderCount.setStatus('mandatory')
if mibBuilder.loadTexts: driveCylinderCount.setDescription('Active Drive Cylinders')
driveHeadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveHeadCount.setStatus('mandatory')
if mibBuilder.loadTexts: driveHeadCount.setDescription('Active Drive Heads')
driveSectorsPerTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveSectorsPerTrack.setStatus('mandatory')
if mibBuilder.loadTexts: driveSectorsPerTrack.setDescription('Active Drive Sectors Per Track')
driveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveSize.setDescription('Active Drive Size (KBytes)')
driveNumberOfPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveNumberOfPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: driveNumberOfPartitions.setDescription('Active Drive Number Of Partitions')
driveNetWarePartitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveNetWarePartitionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: driveNetWarePartitionStatus.setDescription('Active Drive NetWare Partition Status (Present/None)')
driveNetWarePartitionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveNetWarePartitionType.setStatus('mandatory')
if mibBuilder.loadTexts: driveNetWarePartitionType.setDescription('Active Drive NetWare Partition Type (NetWare 286/NetWare 386)')
driveNetWarePartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveNetWarePartitionSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveNetWarePartitionSize.setDescription('Active Drive NetWare Partition Size (KBytes)')
driveMirrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveMirrorFlag.setStatus('mandatory')
if mibBuilder.loadTexts: driveMirrorFlag.setDescription('Active Drive Mirror Flag (Mirrored/Not-Mirrored)')
driveMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveMirrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: driveMirrorStatus.setDescription('Active Drive Mirror Status (In-Sync/Partial Sync/Remirroring)')
driveRemirrorPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveRemirrorPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: driveRemirrorPercentage.setDescription('Active Drive Remirror Process Status (Percent Complete)')
driveRedirectionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveRedirectionSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveRedirectionSize.setDescription('Active Drive NetWare Partition Redirection Size (HotFix Allocated KBytes)')
driveRedirectedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveRedirectedSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveRedirectedSize.setDescription('Active Drive NetWare Partition Redirected Size (HotFix Used KBytes)')
driveRedirectionReservedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 12, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveRedirectionReservedSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveRedirectionReservedSize.setDescription('Active Drive NetWare Partition Reserved Redirection Size (HotFix Reserved KBytes)')
driveTrendsTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1), )
if mibBuilder.loadTexts: driveTrendsTable.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendsTable.setDescription('Drive Trend Entry Table')
driveTrendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1), ).setIndexNames((0, "NConsole-MIB", "driveTrendCycleIndex"), (0, "NConsole-MIB", "driveTrendDriveIndex"))
if mibBuilder.loadTexts: driveTrendEntry.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendEntry.setDescription('Drive Trend Entry')
driveTrendCycleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendCycleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendCycleIndex.setDescription('Drive Trend Cycle Index')
driveTrendDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendDriveIndex.setDescription('Drive Trend Drive Index')
driveTrendStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendStartTime.setDescription('Drive Trend Start Time (string)')
driveTrendStartUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendStartUTC.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendStartUTC.setDescription('Drive Trend Start Time GMT (UTC secs)')
driveTrendStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendStopTime.setDescription('Drive Trend Stop Time')
driveTrendStopUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendStopUTC.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendStopUTC.setDescription('Drive Trend Stop Time GMT (UTC secs)')
driveTrendDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendDesc.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendDesc.setDescription('Drive Trend Description')
driveTrendSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendSize.setDescription('Drive Trend Size (KBytes)')
driveTrendRedirectionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendRedirectionSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendRedirectionSize.setDescription('Drive Trend NetWare Partition Redirection Size (HotFix Allocated KBytes)')
driveTrendRedirectedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendRedirectedSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendRedirectedSize.setDescription('Drive Trend NetWare Partition Redirected Size (HotFix Used KBytes)')
driveTrendRedirectionReservedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 13, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveTrendRedirectionReservedSize.setStatus('mandatory')
if mibBuilder.loadTexts: driveTrendRedirectionReservedSize.setDescription('Drive Trend NetWare Partition Reserved Redirection Size (HotFix Reserved KBytes)')
nicTrendsTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1), )
if mibBuilder.loadTexts: nicTrendsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendsTable.setDescription('NIC Trend Entry Table')
nicTrendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1), ).setIndexNames((0, "NConsole-MIB", "nicTrendCycleIndex"), (0, "NConsole-MIB", "nicTrendNICIndex"))
if mibBuilder.loadTexts: nicTrendEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendEntry.setDescription('NIC Trend Entry')
nicTrendCycleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendCycleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendCycleIndex.setDescription('NIC Trend Cycle Index')
nicTrendNICIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendNICIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendNICIndex.setDescription('NIC Trend NIC Index')
nicTrendStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendStartTime.setDescription('NIC Trend Start Time (string)')
nicTrendStartUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendStartUTC.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendStartUTC.setDescription('NIC Trend Start Time GMT (UTC secs)')
nicTrendStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendStopTime.setDescription('NIC Trend Stop Time')
nicTrendStopUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendStopUTC.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendStopUTC.setDescription('NIC Trend Stop Time GMT (UTC secs)')
nicTrendNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendNodeID.setDescription('NIC Trend Node ID')
nicTrendAvgRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendAvgRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendAvgRxPacketCount.setDescription('NIC Trend Average Rx Packets')
nicTrendPeakRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendPeakRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendPeakRxPacketCount.setDescription('NIC Trend Peak Rx Packets')
nicTrendCumlRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendCumlRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendCumlRxPacketCount.setDescription('NIC Trend Cumulative Rx Packets')
nicTrendAvgTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendAvgTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendAvgTxPacketCount.setDescription('NIC Trend Average Tx Packets')
nicTrendPeakTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendPeakTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendPeakTxPacketCount.setDescription('NIC Trend Peak Tx Packets')
nicTrendCumlTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 14, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTrendCumlTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTrendCumlTxPacketCount.setDescription('NIC Trend Cumulative Tx Packets')
protocolCount = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolCount.setDescription('Configured Protocols')
protocolTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2), )
if mibBuilder.loadTexts: protocolTable.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTable.setDescription('Configured Protocol Entry Table')
protocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1), ).setIndexNames((0, "NConsole-MIB", "protocolIndex"))
if mibBuilder.loadTexts: protocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: protocolEntry.setDescription('Configured Protocol Entry')
protocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: protocolIndex.setDescription('Protocol Index Pointer')
protocolDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDesc.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDesc.setDescription('Protocol Description')
protocolCurrRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolCurrRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolCurrRxPacketCount.setDescription('Protocol Current Rx Packets')
protocolAvgRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolAvgRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolAvgRxPacketCount.setDescription('Protocol Average Rx Packets')
protocolPeakRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolPeakRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolPeakRxPacketCount.setDescription('Protocol Peak Rx Packets')
protocolCumlRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolCumlRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolCumlRxPacketCount.setDescription('Protocol Cumulative Rx Packets')
protocolCurrTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolCurrTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolCurrTxPacketCount.setDescription('Protocol Current Tx Packets')
protocolAvgTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolAvgTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolAvgTxPacketCount.setDescription('Protocol Average Tx Packets')
protocolPeakTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolPeakTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolPeakTxPacketCount.setDescription('Protocol Peak Tx Packets')
protocolCumlTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 15, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolCumlTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolCumlTxPacketCount.setDescription('Protocol Cumulative Tx Packets')
protocolTrendsTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1), )
if mibBuilder.loadTexts: protocolTrendsTable.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendsTable.setDescription('Protocol Trend Entry Table')
protocolTrendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1), ).setIndexNames((0, "NConsole-MIB", "protocolTrendCycleIndex"), (0, "NConsole-MIB", "protocolTrendProtocolIndex"))
if mibBuilder.loadTexts: protocolTrendEntry.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendEntry.setDescription('Protocol Trend Entry')
protocolTrendCycleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendCycleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendCycleIndex.setDescription('Protocol Trend Cycle Index')
protocolTrendProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendProtocolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendProtocolIndex.setDescription('Protocol Trend Protocol Index')
protocolTrendStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendStartTime.setDescription('Protocol Trend Start Time')
protocolTrendStartUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendStartUTC.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendStartUTC.setDescription('Protocol Trend Start Time GMT (UTC secs)')
protocolTrendStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendStopTime.setDescription('Protocol Trend Stop Time')
protocolTrendStopUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendStopUTC.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendStopUTC.setDescription('Protocol Trend Stop Time GMT (UTC secs)')
protocolTrendDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendDesc.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendDesc.setDescription('Protocol Trend Description')
protocolTrendAvgRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendAvgRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendAvgRxPacketCount.setDescription('Protocol Trend Average Rx Packets')
protocolTrendPeakRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendPeakRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendPeakRxPacketCount.setDescription('Protocol Trend Peak Rx Packets')
protocolTrendCumlRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendCumlRxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendCumlRxPacketCount.setDescription('Protocol Trend Cumulative Rx Packets')
protocolTrendAvgTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendAvgTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendAvgTxPacketCount.setDescription('Protocol Trend Average Tx Packets')
protocolTrendPeakTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendPeakTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendPeakTxPacketCount.setDescription('Protocol Trend Peak Tx Packets')
protocolTrendCumlTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 16, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolTrendCumlTxPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: protocolTrendCumlTxPacketCount.setDescription('Protocol Trend Cumulative Tx Packets')
smpCount = MibScalar((1, 3, 6, 1, 4, 1, 1117, 1, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpCount.setStatus('mandatory')
if mibBuilder.loadTexts: smpCount.setDescription('SMP Processors')
smpTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 23, 2), )
if mibBuilder.loadTexts: smpTable.setStatus('mandatory')
if mibBuilder.loadTexts: smpTable.setDescription('SMP Processor Entry Table')
smpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 23, 2, 1), ).setIndexNames((0, "NConsole-MIB", "smpIndex"))
if mibBuilder.loadTexts: smpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smpEntry.setDescription('SMP Processor Entry')
smpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smpIndex.setDescription('SMP Processor Index Pointer')
smpCurrUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 23, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpCurrUtil.setStatus('mandatory')
if mibBuilder.loadTexts: smpCurrUtil.setDescription('SMP Processor Current Utilization')
smpAvgUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 23, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpAvgUtil.setStatus('mandatory')
if mibBuilder.loadTexts: smpAvgUtil.setDescription('SMP Processor Average Utilization (current cycle)')
smpPeakUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 23, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpPeakUtil.setStatus('mandatory')
if mibBuilder.loadTexts: smpPeakUtil.setDescription('SMP Processor Peak Utilization (current cycle)')
smpTrendTable = MibTable((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1), )
if mibBuilder.loadTexts: smpTrendTable.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendTable.setDescription('SMP Processor Trends Entry Table')
smpTrendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1), ).setIndexNames((0, "NConsole-MIB", "smpTrendCycleIndex"), (0, "NConsole-MIB", "smpTrendProcessorIndex"))
if mibBuilder.loadTexts: smpTrendEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendEntry.setDescription('SMP Processor Trends Entry')
smpTrendCycleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpTrendCycleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendCycleIndex.setDescription('SMP Trend Cycle Index')
smpTrendProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpTrendProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendProcessorIndex.setDescription('SMP Trend Processor Index')
smpTrendStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpTrendStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendStartTime.setDescription('SMP Trend Start Time')
smpTrendStartUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpTrendStartUTC.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendStartUTC.setDescription('SMP Trend Start Time GMT (UTC secs)')
smpTrendStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpTrendStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendStopTime.setDescription('SMP Trend Stop Time')
smpTrendStopUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpTrendStopUTC.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendStopUTC.setDescription('SMP Trend Stop Time GMT (UTC secs)')
smpTrendAvgUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpTrendAvgUtil.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendAvgUtil.setDescription('SMP Trend Processor Average Utilization')
smpTrendPeakUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1117, 1, 24, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smpTrendPeakUtil.setStatus('mandatory')
if mibBuilder.loadTexts: smpTrendPeakUtil.setDescription('SMP Trend Processor Peak Utilization')
mibBuilder.exportSymbols("NConsole-MIB", serverAvgDirBuffs=serverAvgDirBuffs, serverAvgDirtyBlocks=serverAvgDirtyBlocks, serverTrendAvgFileCreates=serverTrendAvgFileCreates, smpCount=smpCount, serverCurrFileOpens=serverCurrFileOpens, configStopTime=configStopTime, serverRemoteStatus=serverRemoteStatus, serverCumlTxPkts=serverCumlTxPkts, driveTrendStartUTC=driveTrendStartUTC, smpEntry=smpEntry, serverAutoexecFilePath=serverAutoexecFilePath, nicTrendPeakTxPacketCount=nicTrendPeakTxPacketCount, netPrimaryMemoryDecode=netPrimaryMemoryDecode, driveTrendDesc=driveTrendDesc, serverTrendAvgIOsPending=serverTrendAvgIOsPending, volDirSlotsFree=volDirSlotsFree, netFrameDesc=netFrameDesc, driveMirrorFlag=driveMirrorFlag, volDriveNumber=volDriveNumber, serverTrendPeakConns=serverTrendPeakConns, moduleCount=moduleCount, serverSecurityRestrictionLevel=serverSecurityRestrictionLevel, sftmemoryinfo=sftmemoryinfo, serverTrendPeakDirBuffs=serverTrendPeakDirBuffs, protocolTrendPeakTxPacketCount=protocolTrendPeakTxPacketCount, avanti=avanti, serverTrendAvgDiskWrites=serverTrendAvgDiskWrites, serverTrendAvgRxPkts=serverTrendAvgRxPkts, serverTrendStartTime=serverTrendStartTime, serverCurrFileReadBytes=serverCurrFileReadBytes, configArchiveMaxDays=configArchiveMaxDays, serverPeakRxPkts=serverPeakRxPkts, serverTrendPeakProcs=serverTrendPeakProcs, smpTrendPeakUtil=smpTrendPeakUtil, moduleCopyright=moduleCopyright, configVersion=configVersion, protocolTrendCycleIndex=protocolTrendCycleIndex, nicEntry=nicEntry, moduleLargeMemoryAlloc=moduleLargeMemoryAlloc, netHardwareRxMismatchCount=netHardwareRxMismatchCount, serverTrendAvgDiskWriteBytes=serverTrendAvgDiskWriteBytes, protocolCumlRxPacketCount=protocolCumlRxPacketCount, serverCumlDiskWriteBytes=serverCumlDiskWriteBytes, serverCumlTxBytes=serverCumlTxBytes, serverAvgUsers=serverAvgUsers, nicTrendNodeID=nicTrendNodeID, driveType=driveType, volDirSlots=volDirSlots, driveSize=driveSize, serverTrendAvgTxPkts=serverTrendAvgTxPkts, volTrendTable=volTrendTable, serverTrendStartUTC=serverTrendStartUTC, protocolTrendStartTime=protocolTrendStartTime, serverAvgFSPs=serverAvgFSPs, driveRemirrorPercentage=driveRemirrorPercentage, nictrends=nictrends, protocolTrendStartUTC=protocolTrendStartUTC, memoryServerWorkRAM=memoryServerWorkRAM, nicTrendCycleIndex=nicTrendCycleIndex, volTrendDiskSpacePurgable=volTrendDiskSpacePurgable, volinfo=volinfo, serverTrendPeakUtil=serverTrendPeakUtil, volDiskSpaceFree=volDiskSpaceFree, volBlockSize=volBlockSize, driveTrendStopTime=driveTrendStopTime, driveinfo=driveinfo, serverAvgFileCreates=serverAvgFileCreates, serverCumlFileDeletes=serverCumlFileDeletes, serverPeakFileWrites=serverPeakFileWrites, smpTrendStopUTC=smpTrendStopUTC, serverAvgRxPkts=serverAvgRxPkts, serverTrendPeakIOsPending=serverTrendPeakIOsPending, serverUsers=serverUsers, smpTrendStopTime=smpTrendStopTime, volTrendEntry=volTrendEntry, serverTrendAvgOpenFiles=serverTrendAvgOpenFiles, serverLicenses=serverLicenses, nicCurrRxPacketCount=nicCurrRxPacketCount, netPrimaryIOPort=netPrimaryIOPort, nicTrendsTable=nicTrendsTable, smpTrendTable=smpTrendTable, setparminfo=setparminfo, serverAvgProcs=serverAvgProcs, serverPeakFileDeletes=serverPeakFileDeletes, serverTrendCacheLRU=serverTrendCacheLRU, serverTrendAvgRoutedPkts=serverTrendAvgRoutedPkts, driveCylinderCount=driveCylinderCount, serverCycleStartTime=serverCycleStartTime, netLogicalName=netLogicalName, netRetryTxCount=netRetryTxCount, serverUpTime=serverUpTime, volCount=volCount, serverCacheLRU=serverCacheLRU, serverTrendCumlTxPkts=serverTrendCumlTxPkts, volTrendStartUTC=volTrendStartUTC, serverCurrFileWrites=serverCurrFileWrites, configLogFileName=configLogFileName, driveTrendRedirectionSize=driveTrendRedirectionSize, serverNumOfMountedVols=serverNumOfMountedVols, nicTrendPeakRxPacketCount=nicTrendPeakRxPacketCount, smpTrendProcessorIndex=smpTrendProcessorIndex, driveTrendDriveIndex=driveTrendDriveIndex, serverCumlIOsPending=serverCumlIOsPending, netProtocolDesc=netProtocolDesc, serverTrendAvgFileOpens=serverTrendAvgFileOpens, configScreenSaverTimeout=configScreenSaverTimeout, serverTrendAvgCacheHits=serverTrendAvgCacheHits, serverPeakProcs=serverPeakProcs, protocolTrendStopUTC=protocolTrendStopUTC, nicTrendStartTime=nicTrendStartTime, serverTrendPeakDirSearch=serverTrendPeakDirSearch, serverTrendPeakDiskWriteBytes=serverTrendPeakDiskWriteBytes, smpCurrUtil=smpCurrUtil, setparmMaximum=setparmMaximum, protocolCurrTxPacketCount=protocolCurrTxPacketCount, setparmFlags=setparmFlags, serverNwSerialNumber=serverNwSerialNumber, netSecondaryIOPort=netSecondaryIOPort, serverAvgFileWrites=serverAvgFileWrites, moduleCodeSize=moduleCodeSize, netPacketRxTooSmallCount=netPacketRxTooSmallCount, serverLoginStatus=serverLoginStatus, serverCumlFileWriteBytes=serverCumlFileWriteBytes, serverTrendAvgTxBytes=serverTrendAvgTxBytes, volIndex=volIndex, setparmName=setparmName, volTrendStopUTC=volTrendStopUTC, protocolTrendProtocolIndex=protocolTrendProtocolIndex, netNoECBAvailableCount=netNoECBAvailableCount, serverPeakUsers=serverPeakUsers, volTrendStopTime=volTrendStopTime, configDataFileFormat=configDataFileFormat, smpTable=smpTable, driveIndex=driveIndex, nicTrendCumlRxPacketCount=nicTrendCumlRxPacketCount, protocolPeakTxPacketCount=protocolPeakTxPacketCount, drivetrends=drivetrends, serverPeakFileOpens=serverPeakFileOpens, volEntry=volEntry, driveRedirectionSize=driveRedirectionSize, serverTrendMemoryNw4CodeDataPool=serverTrendMemoryNw4CodeDataPool, netNodeID=netNodeID, configStartTime=configStartTime, moduleCompileDate=moduleCompileDate, serverName=serverName, configTrendMaxDays=configTrendMaxDays, smpinfo=smpinfo, serverPeakDiskReads=serverPeakDiskReads, driveHeadCount=driveHeadCount, serverPeakFileReadBytes=serverPeakFileReadBytes, serverTrendPeakRxBytes=serverTrendPeakRxBytes, memoryCacheBufferPool=memoryCacheBufferPool, serverAvgOpenFiles=serverAvgOpenFiles, netPacketRxTooBigCount=netPacketRxTooBigCount, nicTrendStartUTC=nicTrendStartUTC, protocolTrendCumlTxPacketCount=protocolTrendCumlTxPacketCount, smpTrendCycleIndex=smpTrendCycleIndex, serverTrendMinCacheHits=serverTrendMinCacheHits, serverTrendMinCacheRatio=serverTrendMinCacheRatio, driveRedirectedSize=driveRedirectedSize, netMaxRecvSize=netMaxRecvSize, serverTrendPeakUsers=serverTrendPeakUsers, serverCumlRxBytes=serverCumlRxBytes, serverTrendPeakOpenFiles=serverTrendPeakOpenFiles, driveTrendStopUTC=driveTrendStopUTC, serverTimeLocal=serverTimeLocal, serverTrendCumlFileWrites=serverTrendCumlFileWrites, driveControllerDeviceID=driveControllerDeviceID, memoryDOS=memoryDOS, serverCumlFileReadBytes=serverCumlFileReadBytes, serverTrendCumlIOsPending=serverTrendCumlIOsPending, netPacketRxOverflowCount=netPacketRxOverflowCount, serverPeakDirBuffs=serverPeakDirBuffs, nicPeakRxPacketCount=nicPeakRxPacketCount, nicAvgTxPacketCount=nicAvgTxPacketCount, serverCumlDiskWrites=serverCumlDiskWrites, nicNodeID=nicNodeID, driveNumberOfPartitions=driveNumberOfPartitions, nicTrendAvgTxPacketCount=nicTrendAvgTxPacketCount, volTrendDirSlotsFree=volTrendDirSlotsFree, serverCurrDiskWrites=serverCurrDiskWrites, serverTrendCumlDiskReadBytes=serverTrendCumlDiskReadBytes, serverTrendPeakRecvBuffs=serverTrendPeakRecvBuffs, netTotalRxPacketCount=netTotalRxPacketCount, voltrends=voltrends, netPrimaryDMA=netPrimaryDMA, configKeyboardStatus=configKeyboardStatus, serverAvgFileDeletes=serverAvgFileDeletes, serverPeakDiskReadBytes=serverPeakDiskReadBytes, serverTrendPeakRoutedPkts=serverTrendPeakRoutedPkts, memoryNw3PermMemoryPoolTotal=memoryNw3PermMemoryPoolTotal, sftmoduleinfo=sftmoduleinfo, serverTrendCumlFileReads=serverTrendCumlFileReads, moduleSmallMemoryAlloc=moduleSmallMemoryAlloc, serverTrendPeakFileWrites=serverTrendPeakFileWrites, nicAvgRxPacketCount=nicAvgRxPacketCount, serverTrendCumlFileCreates=serverTrendCumlFileCreates, serverCurrTxBytes=serverCurrTxBytes, serverTrendCumlFileReadBytes=serverTrendCumlFileReadBytes, driveTable=driveTable, serverCumlFileCreates=serverCumlFileCreates, moduleinfo=moduleinfo, smpAvgUtil=smpAvgUtil, netTable=netTable, smpTrendAvgUtil=smpTrendAvgUtil, serverCumlRxPkts=serverCumlRxPkts, protocolEntry=protocolEntry, serverTrendMemoryAllocPoolTotal=serverTrendMemoryAllocPoolTotal, driveTrendEntry=driveTrendEntry, driveNetWarePartitionSize=driveNetWarePartitionSize, driveTrendStartTime=driveTrendStartTime, serverAvgRoutedPkts=serverAvgRoutedPkts, serverCumlRoutedPkts=serverCumlRoutedPkts, protocolTrendDesc=protocolTrendDesc, configinfo=configinfo, serverAvgRecvBuffs=serverAvgRecvBuffs, serverinfo=serverinfo, setparmEntry=setparmEntry, serverTrendCumlDirSearch=serverTrendCumlDirSearch, volTrendStartTime=volTrendStartTime, serverPeakRoutedPkts=serverPeakRoutedPkts, protocolTrendEntry=protocolTrendEntry, serverCurrFileDeletes=serverCurrFileDeletes, serverCycleStartUTC=serverCycleStartUTC, serverPeakTxPkts=serverPeakTxPkts, serverCacheHits=serverCacheHits, nicCurrTxPacketCount=nicCurrTxPacketCount, serverCurrIOsPending=serverCurrIOsPending, serverTrendAvgFileReadBytes=serverTrendAvgFileReadBytes, serverAvgDiskReadBytes=serverAvgDiskReadBytes, serverStartupFilePath=serverStartupFilePath, protocolTable=protocolTable, serverTrendMemoryNw3PermMemoryPoolTotal=serverTrendMemoryNw3PermMemoryPoolTotal, serverPeakDiskWriteBytes=serverPeakDiskWriteBytes, smpTrendStartUTC=smpTrendStartUTC, nicstats=nicstats, driveSectorsPerTrack=driveSectorsPerTrack, smpTrendStartTime=smpTrendStartTime, netPrimaryInterrupt=netPrimaryInterrupt, configKeyboardAutoLock=configKeyboardAutoLock, protocolAvgRxPacketCount=protocolAvgRxPacketCount, nicPeakTxPacketCount=nicPeakTxPacketCount, memoryAllocPoolTotal=memoryAllocPoolTotal, serverCurrDirtyBlocks=serverCurrDirtyBlocks, memoryBaseRAM=memoryBaseRAM, volTrendVolumeIndex=volTrendVolumeIndex, serverTrendMemoryCacheBufferPool=serverTrendMemoryCacheBufferPool, serverCycleElapsedTicks=serverCycleElapsedTicks, serverTrendAvgFSPs=serverTrendAvgFSPs, moduleActiveScreens=moduleActiveScreens, sftnetinfo=sftnetinfo, netPacketTxTooSmallCount=netPacketTxTooSmallCount, protocolIndex=protocolIndex, memoryAllocPoolInUse=memoryAllocPoolInUse)
mibBuilder.exportSymbols("NConsole-MIB", netTotalTxPacketCount=netTotalTxPacketCount, serverPeakOpenFiles=serverPeakOpenFiles, serverPeakFileCreates=serverPeakFileCreates, serverAvgDiskWriteBytes=serverAvgDiskWriteBytes, serverTrendPeakFileDeletes=serverTrendPeakFileDeletes, serverCpuSpeed=serverCpuSpeed, serverTrendPeakRxPkts=serverTrendPeakRxPkts, servertrends=servertrends, protocolTrendStopTime=protocolTrendStopTime, serverCurrFSPs=serverCurrFSPs, serverTrendPeakDirtyBlocks=serverTrendPeakDirtyBlocks, serverCurrRecvBuffs=serverCurrRecvBuffs, netDriverName=netDriverName, netPacketTxMiscErrorCount=netPacketTxMiscErrorCount, protocolinfo=protocolinfo, serverTrendTable=serverTrendTable, serverCumlDiskReads=serverCumlDiskReads, nicTrendAvgRxPacketCount=nicTrendAvgRxPacketCount, serverAvgFileReadBytes=serverAvgFileReadBytes, netLineSpeed=netLineSpeed, serverPeakFSPs=serverPeakFSPs, serverTrendCumlRxPkts=serverTrendCumlRxPkts, volTrendDiskSpaceNotYetPurgable=volTrendDiskSpaceNotYetPurgable, serverCumlDiskReadBytes=serverCumlDiskReadBytes, serverTrendCumlFileDeletes=serverTrendCumlFileDeletes, netPacketRxMiscErrorCount=netPacketRxMiscErrorCount, serverAvgDiskReads=serverAvgDiskReads, volDiskSpacePurgable=volDiskSpacePurgable, memoryNw3PermMemoryPoolInUse=memoryNw3PermMemoryPoolInUse, serverTrendAvgDirtyBlocks=serverTrendAvgDirtyBlocks, driveNetWarePartitionStatus=driveNetWarePartitionStatus, serverTrendMemoryAllocPoolInUse=serverTrendMemoryAllocPoolInUse, volTrendName=volTrendName, serverAvgConns=serverAvgConns, serverCurrUsers=serverCurrUsers, moduleVersion=moduleVersion, serverCurrConns=serverCurrConns, serverTimeUTC=serverTimeUTC, netCount=netCount, volDiskSpace=volDiskSpace, configDataFileName=configDataFileName, netEntry=netEntry, serverCacheRatio=serverCacheRatio, serverPeakFileWriteBytes=serverPeakFileWriteBytes, protocolCumlTxPacketCount=protocolCumlTxPacketCount, serverTrendPeakFSPs=serverTrendPeakFSPs, memoryTotalRAM=memoryTotalRAM, netPacketTxTooBigCount=netPacketTxTooBigCount, serverPeakFileReads=serverPeakFileReads, serverTrendPeakFileReadBytes=serverTrendPeakFileReadBytes, serverCurrRxBytes=serverCurrRxBytes, nicIndex=nicIndex, serverNumOfActiveDrives=serverNumOfActiveDrives, serverTrendAvgUtil=serverTrendAvgUtil, driveEntry=driveEntry, sftserverinfo=sftserverinfo, serverAvgCacheHits=serverAvgCacheHits, serverPeakRecvBuffs=serverPeakRecvBuffs, serverTrendCumlFileWriteBytes=serverTrendCumlFileWriteBytes, serverCurrDiskWriteBytes=serverCurrDiskWriteBytes, serverTrendIndex=serverTrendIndex, netMaxProtocolSize=netMaxProtocolSize, serverAvgUtil=serverAvgUtil, serverAvgFileOpens=serverAvgFileOpens, protocolTrendsTable=protocolTrendsTable, serverTrendPeakDiskReadBytes=serverTrendPeakDiskReadBytes, driveRedirectionReservedSize=driveRedirectionReservedSize, driveTrendSize=driveTrendSize, smpIndex=smpIndex, moduleIndex=moduleIndex, serverTrendPeakFileWriteBytes=serverTrendPeakFileWriteBytes, protocolTrendAvgTxPacketCount=protocolTrendAvgTxPacketCount, serverTrendAvgDiskReadBytes=serverTrendAvgDiskReadBytes, nicTrendCumlTxPacketCount=nicTrendCumlTxPacketCount, netSecondaryDMA=netSecondaryDMA, serverAllowUnencryptedPwds=serverAllowUnencryptedPwds, serverAvgCacheRatio=serverAvgCacheRatio, serverTrendAvgUsers=serverTrendAvgUsers, serverTrendCumlRoutedPkts=serverTrendCumlRoutedPkts, nicTrendNICIndex=nicTrendNICIndex, serverCumlFileReads=serverCumlFileReads, netSecondaryMemoryDecode=netSecondaryMemoryDecode, serverTrendPeakTxPkts=serverTrendPeakTxPkts, serverTrendAvgConns=serverTrendAvgConns, driveNetWarePartitionType=driveNetWarePartitionType, configCycleLength=configCycleLength, serverCurrTxPkts=serverCurrTxPkts, serverNwRevInfo=serverNwRevInfo, moduleActiveProcesses=moduleActiveProcesses, serverCpuUtil=serverCpuUtil, volTrendCycleIndex=volTrendCycleIndex, memoryNw4CodeDataPool=memoryNw4CodeDataPool, netSecondaryInterrupt=netSecondaryInterrupt, serverAvgIOsPending=serverAvgIOsPending, driveTrendsTable=driveTrendsTable, serverTrendAvgRxBytes=serverTrendAvgRxBytes, serverTrendAvgCacheRatio=serverTrendAvgCacheRatio, serverCurrOpenFiles=serverCurrOpenFiles, protocolCurrRxPacketCount=protocolCurrRxPacketCount, serverPeakRxBytes=serverPeakRxBytes, serverTrendStopTime=serverTrendStopTime, volTrendDiskSpaceFree=volTrendDiskSpaceFree, protocolCount=protocolCount, serverCumlFileWrites=serverCumlFileWrites, moduleDesc=moduleDesc, nconsolemib=nconsolemib, setparmIndex=setparmIndex, setparmDesc=setparmDesc, serverTrendAvgFileReads=serverTrendAvgFileReads, serverAvgDiskWrites=serverAvgDiskWrites, protocolTrendAvgRxPacketCount=protocolTrendAvgRxPacketCount, serverTrendCumlDiskWriteBytes=serverTrendCumlDiskWriteBytes, setparmCurrent=setparmCurrent, volDiskSpaceNotYetPurgable=volDiskSpaceNotYetPurgable, serverTrendPeakFileOpens=serverTrendPeakFileOpens, serverTrendAvgProcs=serverTrendAvgProcs, driveControllerCardID=driveControllerCardID, serverTrendCumlFileOpens=serverTrendCumlFileOpens, serverPeakUtil=serverPeakUtil, moduleDataSize=moduleDataSize, netDriverDesc=netDriverDesc, serverTrendMemoryNw3PermMemoryPoolInUse=serverTrendMemoryNw3PermMemoryPoolInUse, serverCumlDirtyBlocks=serverCumlDirtyBlocks, protocolTrendCumlRxPacketCount=protocolTrendCumlRxPacketCount, serverCurrDiskReads=serverCurrDiskReads, serverCumlDirSearch=serverCumlDirSearch, serverAvgFileWriteBytes=serverAvgFileWriteBytes, nicTrendEntry=nicTrendEntry, serverTrendPeakFileReads=serverTrendPeakFileReads, serverTrendCumlDirtyBlocks=serverTrendCumlDirtyBlocks, smpPeakUtil=smpPeakUtil, serverTrendAvgDiskReads=serverTrendAvgDiskReads, serverPeakDirtyBlocks=serverPeakDirtyBlocks, serverAvgDirSearch=serverAvgDirSearch, serverPeakDirSearch=serverPeakDirSearch, nicCumlRxPacketCount=nicCumlRxPacketCount, serverCycleLengthTicks=serverCycleLengthTicks, serverCurrFileCreates=serverCurrFileCreates, serverTrendMemoryCacheNonMovablePool=serverTrendMemoryCacheNonMovablePool, volName=volName, serverTrendPeakFileCreates=serverTrendPeakFileCreates, serverCurrUtil=serverCurrUtil, serverTrendCumlDiskWrites=serverTrendCumlDiskWrites, serverCurrDirBuffs=serverCurrDirBuffs, protocolDesc=protocolDesc, nicTrendStopTime=nicTrendStopTime, serverAvgRxBytes=serverAvgRxBytes, serverCurrProcs=serverCurrProcs, setparmCategory=setparmCategory, driveTrendCycleIndex=driveTrendCycleIndex, serverCurrFileWriteBytes=serverCurrFileWriteBytes, sftservertrends=sftservertrends, serverCurrDirSearch=serverCurrDirSearch, serverAvgTxPkts=serverAvgTxPkts, serverTrendMemoryCacheMovablePool=serverTrendMemoryCacheMovablePool, serverDOSPresent=serverDOSPresent, serverTrendUpTime=serverTrendUpTime, serverTrendAvgFileDeletes=serverTrendAvgFileDeletes, nicCumlTxPacketCount=nicCumlTxPacketCount, netChecksumErrorCount=netChecksumErrorCount, serverTrendAvgFileWrites=serverTrendAvgFileWrites, serverCurrRxPkts=serverCurrRxPkts, serverCurrFileReads=serverCurrFileReads, moduleMediumMemoryAlloc=moduleMediumMemoryAlloc, netIndex=netIndex, serverCpuCount=serverCpuCount, serverMinCacheHits=serverMinCacheHits, memoryCacheNonMovablePool=memoryCacheNonMovablePool, serverCurrRoutedPkts=serverCurrRoutedPkts, serverstats=serverstats, serverAvgTxBytes=serverAvgTxBytes, setparmMinimum=setparmMinimum, protocolPeakRxPacketCount=protocolPeakRxPacketCount, nicTable=nicTable, serverTrendAvgDirBuffs=serverTrendAvgDirBuffs, driveMirrorStatus=driveMirrorStatus, moduleTable=moduleTable, setparmTable=setparmTable, nicCount=nicCount, serverCurrCacheRatio=serverCurrCacheRatio, serverCurrCacheHits=serverCurrCacheHits, serverTrendCumlTxBytes=serverTrendCumlTxBytes, serverAvgFileReads=serverAvgFileReads, memoryinfo=memoryinfo, netinfo=netinfo, smpTrendEntry=smpTrendEntry, serverTrendPeakDiskReads=serverTrendPeakDiskReads, serverTrendEntry=serverTrendEntry, serverTrendAvgRecvBuffs=serverTrendAvgRecvBuffs, smptrends=smptrends, serverConns=serverConns, serverPeakConns=serverPeakConns, netMaxPacketSize=netMaxPacketSize, serverTrendAvgDirSearch=serverTrendAvgDirSearch, configTrendFileName=configTrendFileName, serverTrendCumlDiskReads=serverTrendCumlDiskReads, nicTrendStopUTC=nicTrendStopUTC, serverPeakIOsPending=serverPeakIOsPending, moduleName=moduleName, driveTrendRedirectedSize=driveTrendRedirectedSize, serverPeakDiskWrites=serverPeakDiskWrites, configArchiveStatus=configArchiveStatus, serverCumlFileOpens=serverCumlFileOpens, serverTrendPeakTxBytes=serverTrendPeakTxBytes, serverTrendPeakDiskWrites=serverTrendPeakDiskWrites, volTrendDiskSpace=volTrendDiskSpace, serverCurrDiskReadBytes=serverCurrDiskReadBytes, moduleEntry=moduleEntry, volTable=volTable, protocolTrendPeakRxPacketCount=protocolTrendPeakRxPacketCount, serverMinCacheRatio=serverMinCacheRatio, volTrendDirSlots=volTrendDirSlots, protocoltrends=protocoltrends, driveDesc=driveDesc, driveCount=driveCount, driveControllerDriveID=driveControllerDriveID, sftsetparminfo=sftsetparminfo, serverTrendStopUTC=serverTrendStopUTC, driveTrendRedirectionReservedSize=driveTrendRedirectionReservedSize, memoryCacheMovablePool=memoryCacheMovablePool, protocolAvgTxPacketCount=protocolAvgTxPacketCount, serverPeakTxBytes=serverPeakTxBytes, serverTrendAvgFileWriteBytes=serverTrendAvgFileWriteBytes, serverTrendCumlRxBytes=serverTrendCumlRxBytes)
