#
# PySNMP MIB module HP-SN-IP-VRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SN-IP-VRRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
snVrrp, = mibBuilder.importSymbols("HP-SN-ROOT-MIB", "snVrrp")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, NotificationType, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, iso, Bits, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "NotificationType", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "iso", "Bits", "Unsigned32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

snVrrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 1))
snVrrpIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2))
snVrrpVirRtr = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3))
snVrrpIntf2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4))
snVrrpVirRtr2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5))
snVrrpGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpGroupOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpGroupOperMode.setDescription('The VRRP is configured on this system either enabled or disabled and the default is disabled mode. disabled(0)..........disable VRRP enabled(1)...........activate VRRP')
snVrrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfStateChangeTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfStateChangeTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate vrrp and vrrpe interface state change traps.')
snVrrpIfMaxNumVridPerIntf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerIntf.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerIntf.setDescription('Indicates the maximum number of VRID per interface.')
snVrrpIfMaxNumVridPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerSystem.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerSystem.setDescription('Indicates the maximum number of VRID per system.')
snVrrpClearVrrpStat = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpClearVrrpStat.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpClearVrrpStat.setDescription('Clear VRRP statistics command.')
snVrrpGroupOperModeVrrpextended = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpGroupOperModeVrrpextended.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpGroupOperModeVrrpextended.setDescription('The VRRP_extended is configured on this system either enabled or disabled and the default is disabled mode. disabled(0)..........disable VRRP extended enabled(1)...........activate VRRP extended')
snVrrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1), )
if mibBuilder.loadTexts: snVrrpIfTable.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfTable.setDescription('The VRRP Interface Table describes the interfaces from the viewpoint of VRRP.')
snVrrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1, 1), ).setIndexNames((0, "HP-SN-IP-VRRP-MIB", "snVrrpIfPort"))
if mibBuilder.loadTexts: snVrrpIfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfEntry.setDescription('The VRRP Interface Entry describes one interface from the viewpoint of VRRP.')
snVrrpIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfPort.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfPort.setDescription('The IP port of this VRRP interface.')
snVrrpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfAuthType.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfAuthType.setDescription('The authentication type of this interface.')
snVrrpIfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfAuthPassword.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfAuthPassword.setDescription('The simple text password is allowed if only if the snVrrpIfAuthType type is simpleTextPasswd(1).')
snVrrpIfRxHeaderErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxHeaderErrCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfRxHeaderErrCnts.setDescription('The received Header error counts in this interface.')
snVrrpIfRxAuthTypeErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxAuthTypeErrCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfRxAuthTypeErrCnts.setDescription('The received authentication type error counts in this interface.')
snVrrpIfRxAuthPwdMismatchErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxAuthPwdMismatchErrCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfRxAuthPwdMismatchErrCnts.setDescription('The received authentication password mismatched error counts in this interface.')
snVrrpIfRxVridErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxVridErrCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpIfRxVridErrCnts.setDescription('The received unfound VRID error counts in this interface.')
snVrrpIf2Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4, 1), )
if mibBuilder.loadTexts: snVrrpIf2Table.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIf2Table.setDescription('The VRRP and VRRPE Interface Table describes the interfaces from the viewpoint of VRRP and VRRPE.')
snVrrpIf2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snVrrpIf2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIf2Entry.setDescription('The VRRP and VRRPE Interface Entry describes one interface from the viewpoint of VRRP and VRRPE.')
snVrrpIf2AuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIf2AuthType.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIf2AuthType.setDescription('The authentication type of this interface.')
snVrrpIf2AuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIf2AuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIf2AuthPassword.setDescription('The simple text password is allowed if only if the snVrrpIf2AuthType type is simpleTextPasswd(1).')
snVrrpIf2RxHeaderErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIf2RxHeaderErrCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIf2RxHeaderErrCnts.setDescription('The received Header error counts in this interface.')
snVrrpIf2RxAuthTypeErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIf2RxAuthTypeErrCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIf2RxAuthTypeErrCnts.setDescription('The received authentication type error counts in this interface.')
snVrrpIf2RxAuthPwdMismatchErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIf2RxAuthPwdMismatchErrCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIf2RxAuthPwdMismatchErrCnts.setDescription('The received authentication password mismatched error counts in this interface.')
snVrrpIf2RxVridErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIf2RxVridErrCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIf2RxVridErrCnts.setDescription('The received unfound VRID error counts in this interface.')
snVrrpVirRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1), )
if mibBuilder.loadTexts: snVrrpVirRtrTable.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTable.setDescription('The VRRP virtual router Entry describes one virtual router from the viewpoint of VRRP.')
snVrrpVirRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1), ).setIndexNames((0, "HP-SN-IP-VRRP-MIB", "snVrrpVirRtrPort"), (0, "HP-SN-IP-VRRP-MIB", "snVrrpVirRtrId"))
if mibBuilder.loadTexts: snVrrpVirRtrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrEntry.setDescription('The VRRP virtual router Entry describes one virtual router from the viewpoint of VRRP.')
snVrrpVirRtrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrPort.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrPort.setDescription('The IP port of this VRRP interface.')
snVrrpVirRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrId.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrId.setDescription('One of the virtual router ID of this VRRP interface.')
snVrrpVirRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrOwnership.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrOwnership.setDescription('The ownership of this VRRP router interface can be set either owner(1) or backup(2). VirRtr SNMP-GET returns incomplete(0), it means no IP address has assigned to this VRRP router interface.')
snVrrpVirRtrCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 254)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrCfgPriority.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrCfgPriority.setDescription('The higher the number the higher the priority is. This parameter decides which backup router should becomes the Active Router for the interface. A backup Router with higher priority selected to becomes the Active Router. Therefore, this Object can be set if only if snVrrpVirRtrOwnership is set to backup(2).')
snVrrpVirRtrTrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPriority.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTrackPriority.setDescription('The higher the number the higher the priority is. after this object is configured, the snVrrpVirRtrCurrPriority of this interface will be adjusted dynamically with this track priority when the Track Port states first changes from UP to DOWN.')
snVrrpVirRtrCurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrCurrPriority.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrCurrPriority.setDescription('The higher the number the higher the priority is. This object will be adjusted dynamically with the track priority when the Track Port states first changes from UP to DOWN.')
snVrrpVirRtrHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrHelloInt.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrHelloInt.setDescription('Time interval between advertisements (seconds).')
snVrrpVirRtrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrDeadInt.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrDeadInt.setDescription('Dead interval (seconds).')
snVrrpVirRtrPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrPreemptMode.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrPreemptMode.setDescription('This mode controls whether a higher priority Backup router preempts a lower priority Master. The mode with enabled(1) allow preemption and disabled(0) prohibit preemption.')
snVrrpVirRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrState.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrState.setDescription("This object specifies the VRRP Router's interface state as: init(0)...initialization state. master(1)...master state. backup(2)...backup state.")
snVrrpVirRtrActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrActivate.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrActivate.setDescription("This object specifies the VRRP Router's activate command as: disabled(0)...deactivate this VRRP Router. enabled(1)....activate this VRRP Router.")
snVrrpVirRtrIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrIpAddrMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrIpAddrMask.setDescription('The numbers of IP Addresses of this virtual router of this interface.')
snVrrpVirRtrTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortMask.setDescription("This object specifies the identity of the physical port whose state is to be monitored. Each bit is a port of the system. Default value is 0. VirRtr this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The Chassis/Stackable router VRRP Track port membership. The size of the OCTET STRING for Chassis is 32. The size of the OCTET STRING for Stackable is 4. (It was obsoleted after release 07100, replaced by snVrrpVirRtrTrackPortList)")
snVrrpVirRtrTrackVifMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifMask.setDescription("This object specifies the identity of the virtual interface whose state is to be monitored. Each bit is a port of the system. Default value is 0. VirRtr this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The Chassis/Stackable router VRRP Track port membership The size of the OCTET STRING for Chassis is 8. The size of the OCTET STRING for Stackable is 4. (It was obsoleted after release 07100, replaced by snVrrpVirRtrTrackVifPortList)")
snVrrpVirRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an existing row VirRtr the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snVrrpVirRtrRxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxArpPktDropCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRxArpPktDropCnts.setDescription('The received VRRP ARP Packet Drop Counts.')
snVrrpVirRtrRxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxIpPktDropCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRxIpPktDropCnts.setDescription('The received VRRP IP Packet Drop Counts.')
snVrrpVirRtrRxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxPortMismatchCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRxPortMismatchCnts.setDescription('The received VRRP Port mismatching Counts.')
snVrrpVirRtrRxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxNumOfIpMismatchCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRxNumOfIpMismatchCnts.setDescription('The received VRRP Number of IP Addresses mismatching Counts.')
snVrrpVirRtrRxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxIpMismatchCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRxIpMismatchCnts.setDescription('The received VRRP IP Address mismatching Counts.')
snVrrpVirRtrRxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxHelloIntMismatchCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRxHelloIntMismatchCnts.setDescription('The counts of the virtual router interface with hello interval mismatch counts.')
snVrrpVirRtrRxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxPriorityZeroFromMasterCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRxPriorityZeroFromMasterCnts.setDescription('The counts of the virtual router interface with Priority zero from the master.')
snVrrpVirRtrRxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxHigherPriorityCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrRxHigherPriorityCnts.setDescription('The counts of the virtual router interface with higher Priority.')
snVrrpVirRtrTransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrTransToMasterStateCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTransToMasterStateCnts.setDescription('The counts of the virtual router interface transition to master state.')
snVrrpVirRtrTransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrTransToBackupStateCnts.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTransToBackupStateCnts.setDescription('The counts of the virtual router interface transition to backup state.')
snVrrpVirRtrCurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrCurrDeadInt.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrCurrDeadInt.setDescription('Current Dead interval (in 100 milliseconds).')
snVrrpVirRtrTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortList.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortList.setDescription("This object specifies the identity of the physical port whose state is to be monitored. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number. Default value is 0 length octet string. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The router VRRP physical track port membership.")
snVrrpVirRtrTrackVifPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 3, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifPortList.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifPortList.setDescription("This object specifies the identity of the virtual interface whose state is to be monitored. Each port index is a 16-bit integer in big endian order. Default value is 0 length octet string. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The router VRRP virtual port track membership.")
snVrrpVirRtr2Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1), )
if mibBuilder.loadTexts: snVrrpVirRtr2Table.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2Table.setDescription('The Vrrp and Vrrpe virtual router Entry describes one virtual router from the viewpoint of Vrrp and Vrrpe.')
snVrrpVirRtr2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HP-SN-IP-VRRP-MIB", "snVrrpVirRtr2Id"))
if mibBuilder.loadTexts: snVrrpVirRtr2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2Entry.setDescription('The Vrrp and Vrrpe virtual router Entry describes one virtual router from the viewpoint of Vrrp and Vrrpe.')
snVrrpVirRtr2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2Id.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2Id.setDescription('One of the virtual router ID of this Vrrp and Vrrpe interface.')
snVrrpVirRtr2Ownership = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2Ownership.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2Ownership.setDescription('The ownership of this Vrrp router interface can be set either owner(1) or backup(2). VirRtr SNMP-GET returns incomplete(0), it means no IP address has assigned to this Vrrp router interface. vrrpe protocol has no owner(1), can only be set to backup(2) or incomplete(0).')
snVrrpVirRtr2CfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2CfgPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2CfgPriority.setDescription("This object specifies the priority to be used for the virtual router master election process. Higher values imply higher priority. A priority of '0', although not settable, is sent by the master router to indicate that this router has ceased to participate in VRRP and a backup virtual router should transition to become a new master. A priority of 255 is only for VRRP - owner. Not valid for number to configure VRRPE.")
snVrrpVirRtr2TrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2TrackPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2TrackPriority.setDescription('The higher the number the higher the priority is. after this object is configured, the snVrrpVirRtr2CurrPriority of this interface will be adjusted dynamically with this track priority when the Track Port states first changes from UP to DOWN.')
snVrrpVirRtr2CurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2CurrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2CurrPriority.setDescription('The higher the number the higher the priority is. This object will be adjusted dynamically with the track priority when the Track Port states first changes from UP to DOWN.')
snVrrpVirRtr2HelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2HelloInt.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2HelloInt.setDescription('Time interval between advertisements (seconds).')
snVrrpVirRtr2DeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2DeadInt.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2DeadInt.setDescription('Dead interval (seconds).')
snVrrpVirRtr2PreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2PreemptMode.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2PreemptMode.setDescription('This mode controls whether a higher priority Backup router preempts a lower priority Master. The mode with enabled(1) allow preemption and disabled(0) prohibit preemption.')
snVrrpVirRtr2State = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2State.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2State.setDescription("This object specifies the Vrrp and vrrpe Router's interface state as: init(0)...initialization state. master(1)...master state. backup(2)...backup state.")
snVrrpVirRtr2IpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2IpAddrMask.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2IpAddrMask.setDescription('The numbers of IP Addresses of this virtual router of this interface.')
snVrrpVirRtr2Activate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2Activate.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2Activate.setDescription("This object specifies the Vrrp Router's activate command as: disabled(0)...deactivate this Vrrp and Vrrpe Routers. enabled(1)....activate this Vrrp and Vrrpe Routers.")
snVrrpVirRtr2BackupInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2BackupInt.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2BackupInt.setDescription('Time interval between backup routers hello message advertisements (seconds).')
snVrrpVirRtr2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an existing row VirRtr the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snVrrpVirRtr2RxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxArpPktDropCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RxArpPktDropCnts.setDescription('The received Vrrp and Vrrpe ARP Packet Drop Counts.')
snVrrpVirRtr2RxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxIpPktDropCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RxIpPktDropCnts.setDescription('The received Vrrp and Vrrpe IP Packet Drop Counts.')
snVrrpVirRtr2RxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxPortMismatchCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RxPortMismatchCnts.setDescription('The received Vrrp and Vrrpe Port mismatching Counts.')
snVrrpVirRtr2RxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxNumOfIpMismatchCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RxNumOfIpMismatchCnts.setDescription('The received Vrrp and Vrrpe Number of IP Addresses mismatching Counts.')
snVrrpVirRtr2RxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxIpMismatchCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RxIpMismatchCnts.setDescription('The received Vrrp and Vrrpe IP Address mismatching Counts.')
snVrrpVirRtr2RxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxHelloIntMismatchCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RxHelloIntMismatchCnts.setDescription('The counts of the virtual router interface with hello interval mismatch counts.')
snVrrpVirRtr2RxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxPriorityZeroFromMasterCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RxPriorityZeroFromMasterCnts.setDescription('The counts of the virtual router interface with Priority zero from the master.')
snVrrpVirRtr2RxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxHigherPriorityCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2RxHigherPriorityCnts.setDescription('The counts of the virtual router interface with higher Priority.')
snVrrpVirRtr2TransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2TransToMasterStateCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2TransToMasterStateCnts.setDescription('The counts of the virtual router interface transition to master state.')
snVrrpVirRtr2TransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2TransToBackupStateCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2TransToBackupStateCnts.setDescription('The counts of the virtual router interface transition to backup state.')
snVrrpVirRtr2CurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2CurrDeadInt.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2CurrDeadInt.setDescription('Current Dead interval (in 100 milliseconds).')
snVrrpVirRtr2TrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2TrackPortList.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2TrackPortList.setDescription("This object specifies the identity of the physical port and virtual ports whose state is to be monitored. Each port index is an ifIndex, if there are consecutive 4 or more ifIndex then they will be encoded like below. Encoding and decoding scheme is range based: Each range prefix with 0000 (2 octets) where 0000 is not valid ifIndex. Next 2 octets indicates lower range ifIndex, followed by 2 octets of higher range ifIndex. Individual(non range) ones will be displayed as it is. Ex: port list: 0001..0005 0015 0032..0047 Port list in PDU: 0000 0001 0005 000f 0000 0020 002f. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The router VRRP and VRRP-E physical track port membership.")
snVrrpVirRtr2AdvertiseBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2AdvertiseBackup.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2AdvertiseBackup.setDescription('Set Advertise this backup router to master ')
snVrrpVirRtr2MasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2MasterIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2MasterIpAddr.setDescription("The master router's real/virtual (primary) IP address. This is the IP address listed as the source in VRRP and VRRPE advertisement last received by this virtual router.")
snVrrpVirRtr2IpAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2IpAddrCount.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2IpAddrCount.setDescription('The number of IP addresses that are associated with this virtual router. This number is equal to the number of rows in the vrrpAssoIpAddrTable that correspond to a given IF index/VRID pair.')
snVrrpVirRtr2VirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 12, 5, 1, 1, 29), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2VirtualMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtr2VirtualMacAddr.setDescription("The virtual MAC address of the virtual router. Although this object can be derived from the 'snVrrpVirRtr2VrId' object, it is defined so that it is easily obtainable by a management application and can be included in VRRP-related SNMP traps.")
mibBuilder.exportSymbols("HP-SN-IP-VRRP-MIB", snVrrpVirRtrHelloInt=snVrrpVirRtrHelloInt, snVrrpVirRtr2IpAddrMask=snVrrpVirRtr2IpAddrMask, snVrrpVirRtr2HelloInt=snVrrpVirRtr2HelloInt, snVrrpVirRtr2RxHelloIntMismatchCnts=snVrrpVirRtr2RxHelloIntMismatchCnts, snVrrpIf2RxAuthTypeErrCnts=snVrrpIf2RxAuthTypeErrCnts, snVrrpClearVrrpStat=snVrrpClearVrrpStat, snVrrpVirRtr2RxArpPktDropCnts=snVrrpVirRtr2RxArpPktDropCnts, snVrrpVirRtrTransToMasterStateCnts=snVrrpVirRtrTransToMasterStateCnts, snVrrpIf2RxHeaderErrCnts=snVrrpIf2RxHeaderErrCnts, snVrrpVirRtr2Entry=snVrrpVirRtr2Entry, snVrrpVirRtr2TransToBackupStateCnts=snVrrpVirRtr2TransToBackupStateCnts, snVrrpGlobal=snVrrpGlobal, snVrrpVirRtr2RxHigherPriorityCnts=snVrrpVirRtr2RxHigherPriorityCnts, snVrrpVirRtrRxHelloIntMismatchCnts=snVrrpVirRtrRxHelloIntMismatchCnts, snVrrpGroupOperMode=snVrrpGroupOperMode, snVrrpIf2RxAuthPwdMismatchErrCnts=snVrrpIf2RxAuthPwdMismatchErrCnts, snVrrpIfTable=snVrrpIfTable, snVrrpVirRtrRxIpPktDropCnts=snVrrpVirRtrRxIpPktDropCnts, snVrrpIfMaxNumVridPerSystem=snVrrpIfMaxNumVridPerSystem, snVrrpVirRtrPort=snVrrpVirRtrPort, snVrrpIfAuthType=snVrrpIfAuthType, snVrrpVirRtr2VirtualMacAddr=snVrrpVirRtr2VirtualMacAddr, snVrrpVirRtr2Id=snVrrpVirRtr2Id, snVrrpVirRtr2RxPortMismatchCnts=snVrrpVirRtr2RxPortMismatchCnts, snVrrpGroupOperModeVrrpextended=snVrrpGroupOperModeVrrpextended, snVrrpVirRtr2RxPriorityZeroFromMasterCnts=snVrrpVirRtr2RxPriorityZeroFromMasterCnts, snVrrpVirRtr2RxIpMismatchCnts=snVrrpVirRtr2RxIpMismatchCnts, snVrrpVirRtr2DeadInt=snVrrpVirRtr2DeadInt, snVrrpVirRtr2Ownership=snVrrpVirRtr2Ownership, snVrrpIfEntry=snVrrpIfEntry, snVrrpVirRtrPreemptMode=snVrrpVirRtrPreemptMode, snVrrpVirRtrIpAddrMask=snVrrpVirRtrIpAddrMask, snVrrpIf2RxVridErrCnts=snVrrpIf2RxVridErrCnts, snVrrpIfRxAuthPwdMismatchErrCnts=snVrrpIfRxAuthPwdMismatchErrCnts, snVrrpVirRtr2IpAddrCount=snVrrpVirRtr2IpAddrCount, snVrrpVirRtrCurrPriority=snVrrpVirRtrCurrPriority, snVrrpVirRtrState=snVrrpVirRtrState, snVrrpVirRtrTrackVifPortList=snVrrpVirRtrTrackVifPortList, snVrrpIfPort=snVrrpIfPort, snVrrpVirRtrCfgPriority=snVrrpVirRtrCfgPriority, snVrrpVirRtr2TrackPortList=snVrrpVirRtr2TrackPortList, snVrrpVirRtr2RxIpPktDropCnts=snVrrpVirRtr2RxIpPktDropCnts, snVrrpVirRtrTable=snVrrpVirRtrTable, snVrrpVirRtr2MasterIpAddr=snVrrpVirRtr2MasterIpAddr, snVrrpIf2Entry=snVrrpIf2Entry, snVrrpIf2AuthType=snVrrpIf2AuthType, snVrrpVirRtrRxPortMismatchCnts=snVrrpVirRtrRxPortMismatchCnts, snVrrpVirRtr2BackupInt=snVrrpVirRtr2BackupInt, snVrrpVirRtrRxPriorityZeroFromMasterCnts=snVrrpVirRtrRxPriorityZeroFromMasterCnts, snVrrpVirRtr2RowStatus=snVrrpVirRtr2RowStatus, snVrrpIfRxAuthTypeErrCnts=snVrrpIfRxAuthTypeErrCnts, snVrrpIntf2=snVrrpIntf2, snVrrpVirRtrTrackPriority=snVrrpVirRtrTrackPriority, snVrrpVirRtrRxHigherPriorityCnts=snVrrpVirRtrRxHigherPriorityCnts, snVrrpVirRtr2CfgPriority=snVrrpVirRtr2CfgPriority, snVrrpVirRtr2TrackPriority=snVrrpVirRtr2TrackPriority, snVrrpVirRtr2State=snVrrpVirRtr2State, snVrrpVirRtrTrackVifMask=snVrrpVirRtrTrackVifMask, snVrrpVirRtr2=snVrrpVirRtr2, snVrrpVirRtr2TransToMasterStateCnts=snVrrpVirRtr2TransToMasterStateCnts, snVrrpVirRtrRowStatus=snVrrpVirRtrRowStatus, snVrrpVirRtrRxNumOfIpMismatchCnts=snVrrpVirRtrRxNumOfIpMismatchCnts, snVrrpVirRtrRxArpPktDropCnts=snVrrpVirRtrRxArpPktDropCnts, snVrrpIf2Table=snVrrpIf2Table, snVrrpIntf=snVrrpIntf, snVrrpIfAuthPassword=snVrrpIfAuthPassword, snVrrpVirRtrActivate=snVrrpVirRtrActivate, snVrrpVirRtrDeadInt=snVrrpVirRtrDeadInt, snVrrpIfRxHeaderErrCnts=snVrrpIfRxHeaderErrCnts, snVrrpIfMaxNumVridPerIntf=snVrrpIfMaxNumVridPerIntf, snVrrpIfStateChangeTrap=snVrrpIfStateChangeTrap, snVrrpVirRtrTrackPortMask=snVrrpVirRtrTrackPortMask, snVrrpIf2AuthPassword=snVrrpIf2AuthPassword, snVrrpVirRtrId=snVrrpVirRtrId, snVrrpVirRtrTrackPortList=snVrrpVirRtrTrackPortList, snVrrpVirRtr2PreemptMode=snVrrpVirRtr2PreemptMode, snVrrpVirRtrCurrDeadInt=snVrrpVirRtrCurrDeadInt, snVrrpVirRtrTransToBackupStateCnts=snVrrpVirRtrTransToBackupStateCnts, snVrrpVirRtr2RxNumOfIpMismatchCnts=snVrrpVirRtr2RxNumOfIpMismatchCnts, snVrrpVirRtr=snVrrpVirRtr, snVrrpVirRtrEntry=snVrrpVirRtrEntry, snVrrpVirRtrRxIpMismatchCnts=snVrrpVirRtrRxIpMismatchCnts, snVrrpVirRtr2AdvertiseBackup=snVrrpVirRtr2AdvertiseBackup, snVrrpVirRtr2CurrPriority=snVrrpVirRtr2CurrPriority, snVrrpVirRtr2Table=snVrrpVirRtr2Table, snVrrpVirRtr2CurrDeadInt=snVrrpVirRtr2CurrDeadInt, snVrrpVirRtr2Activate=snVrrpVirRtr2Activate, snVrrpIfRxVridErrCnts=snVrrpIfRxVridErrCnts, MacAddress=MacAddress, snVrrpVirRtrOwnership=snVrrpVirRtrOwnership)
