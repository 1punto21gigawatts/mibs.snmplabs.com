#
# PySNMP MIB module BAS-TG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-TG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
basTrafGen, = mibBuilder.importSymbols("BAS-MIB", "basTrafGen")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Integer32, Counter64, iso, Gauge32, NotificationType, Bits, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Integer32", "Counter64", "iso", "Gauge32", "NotificationType", "Bits", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "IpAddress")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
basTrafGenMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1))
if mibBuilder.loadTexts: basTrafGenMIB.setLastUpdated('9902031415Z')
if mibBuilder.loadTexts: basTrafGenMIB.setOrganization('Broadband Access Systems, Inc.')
if mibBuilder.loadTexts: basTrafGenMIB.setContactInfo(' Tech Support Broadband Access Systems, Inc. 201 Forest Street Marlborough, MA 01752 USA 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basTrafGenMIB.setDescription('The MIB module defines the configuration MIB objects for Broadband Access Systems, Inc. Traffic Generation extensions.')
basTrafGenTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1), )
if mibBuilder.loadTexts: basTrafGenTable.setStatus('current')
if mibBuilder.loadTexts: basTrafGenTable.setDescription('A list of traffic generation entries. The number of entries is given by the value of ifNumber.')
basTrafGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1), ).setIndexNames((0, "BAS-TG-MIB", "basTrafGenIndex"))
if mibBuilder.loadTexts: basTrafGenEntry.setStatus('current')
if mibBuilder.loadTexts: basTrafGenEntry.setDescription('An entry containing management information applicable to a particular traffic generation.')
basTrafGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTrafGenIndex.setStatus('current')
if mibBuilder.loadTexts: basTrafGenIndex.setDescription('Used to create an instance of GenTraff.')
basTrafGenTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("basTrafIp", 1), ("basTrafUdp", 2), ("basTrafTcp", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenTransport.setStatus('current')
if mibBuilder.loadTexts: basTrafGenTransport.setDescription('Transport to use.')
basTrafGenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 3), Integer32().clone(99)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenPort.setStatus('current')
if mibBuilder.loadTexts: basTrafGenPort.setDescription('Port to use.')
basTrafGenStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basTrafStart", 1), ("basTrafStop", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenStart.setStatus('current')
if mibBuilder.loadTexts: basTrafGenStart.setDescription('Stop and start traffic.')
basTrafGenRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basTranMax", 1), ("basTran1sec", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenRate.setStatus('current')
if mibBuilder.loadTexts: basTrafGenRate.setDescription('Rate of sending max means no delay between transmissions. 1sec means send one packet per second.')
basTrafGenDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenDest.setStatus('current')
if mibBuilder.loadTexts: basTrafGenDest.setDescription('Destination IP address.')
basTrafGenSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenSrc.setStatus('current')
if mibBuilder.loadTexts: basTrafGenSrc.setDescription('Destination IP address.')
basTrafGenIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTrafGenIn.setStatus('current')
if mibBuilder.loadTexts: basTrafGenIn.setDescription('Received packets.')
basTrafGenOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTrafGenOut.setStatus('current')
if mibBuilder.loadTexts: basTrafGenOut.setDescription('Sent packets.')
basTrafGenSeqError = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTrafGenSeqError.setStatus('current')
if mibBuilder.loadTexts: basTrafGenSeqError.setDescription('Sequence error count.')
basTrafGenSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenSize.setStatus('current')
if mibBuilder.loadTexts: basTrafGenSize.setDescription('Packet size.')
basTrafGenPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenPattern.setStatus('current')
if mibBuilder.loadTexts: basTrafGenPattern.setDescription('32 bit pattern to send.')
basTrafGenReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenReset.setStatus('current')
if mibBuilder.loadTexts: basTrafGenReset.setDescription('Status.')
basTrafGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 13, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basTrafGenStatus.setStatus('current')
if mibBuilder.loadTexts: basTrafGenStatus.setDescription('Status.')
mibBuilder.exportSymbols("BAS-TG-MIB", basTrafGenRate=basTrafGenRate, basTrafGenIndex=basTrafGenIndex, basTrafGenStart=basTrafGenStart, basTrafGenPattern=basTrafGenPattern, basTrafGenSrc=basTrafGenSrc, basTrafGenSize=basTrafGenSize, basTrafGenTransport=basTrafGenTransport, basTrafGenTable=basTrafGenTable, basTrafGenOut=basTrafGenOut, basTrafGenIn=basTrafGenIn, basTrafGenMIB=basTrafGenMIB, basTrafGenPort=basTrafGenPort, PYSNMP_MODULE_ID=basTrafGenMIB, basTrafGenDest=basTrafGenDest, basTrafGenSeqError=basTrafGenSeqError, basTrafGenStatus=basTrafGenStatus, basTrafGenReset=basTrafGenReset, basTrafGenEntry=basTrafGenEntry)
