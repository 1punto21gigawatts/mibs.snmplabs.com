#
# PySNMP MIB module CISCO-CDL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, MibIdentifier, Bits, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "MibIdentifier", "Bits", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress")
TextualConvention, TimeStamp, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue")
ciscoCdlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 88))
ciscoCdlMIB.setRevisions(('2002-10-02 00:00', '2002-05-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCdlMIB.setRevisionsDescriptions(('Second version of this MIB module. The following new counters have been added - coCdlFromCdlNetEthernetCRC coCdlFromCdlNetEthernetCRCOvrflw coCdlFromCdlNetHCEthernetCRC ', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCdlMIB.setLastUpdated('200210020000Z')
if mibBuilder.loadTexts: ciscoCdlMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCdlMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-dwdm@cisco.com')
if mibBuilder.loadTexts: ciscoCdlMIB.setDescription('This MIB module defines objects to manage Converged Data Link (CDL). CDL provides OAM&P (Operation, Administration, Maintenance and Provisioning) in Ethernet packet-based optical networks without a SONET/SDH layer. The CDL functionality can be divided into the following categories: APS/Defect Indications: The CDL frame carries defect indication bits and provides signalling mechanism support for automatic protection switching. Message Channel: The message channel is used to carry control (e.g. routing, signalling) and management traffic. Packet-by-packet multiplexing of multiple data flows: CDL uses one or two octets to identify the elementary packet stream that this packet belongs to. This allows more than one elementary packet stream to share the bandwidth on a CDL enabled interface. This MIB defines objects to manage Defect Indications and the Packet-by-packet Multiplexing feature. The CDL Message channel is modeled as a separate interface and should be controlled using the IF-MIB and other MIBs for managing IP. This MIB does not provide a mechanism to manage the CDL message channel. APS configuration and monitoring can be done using the CISCO-APS-MIB and CISCO-APS-EXT-MIB. ')
coCdlMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 88, 0))
coCdlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 88, 1))
coCdlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 88, 3))
class CoCdlAggDefectIndStatus(TextualConvention, Bits):
    description = "This reflects the status of the aggregate defect indication bits, i.e., those defect indication bits defined to reflect the protection hop and aggregate path status in the CDL OAM field. The status of the end-to-end backward defect indication bit (BDI-E) is not included, since this status may vary for each elementary packet stream present at a CDL enabled interface. (MSB) (LSB) 7 6 5 4 3 2 1 0 +----------------------+ | | +----------------------+ | | | | | +-- FDI-H hop-by-hop forward defect | | indication | +----- BDI-H hop-by-hop backward defect | indication +-------- FDI-E end-to-end (aggregate path) forward defect indication A bit value of '1' indicates the presence of a defect. A bit value of '0' indicates the absence of a defect. "
    status = 'current'
    namedValues = NamedValues(("hopByHopForwardDefect", 0), ("hopByHopBackwardDefect", 1), ("endToEndAggPathForwardDefect", 2))

class CoCdlFlowDefectIndStatus(TextualConvention, Bits):
    description = "This reflects the status of the CDL flow defect indications. The end-to-end path forward defect indication is implicit, i.e. it is not signalled using a bit. An end-to-end path forward defect is inferred when no CDL Ethernet or Idle packets with a given CDL flow identifier value are received over a pre-determined length of time. The end-to-end path backward defect indication is signalled using one of the CDL Defect Indication bits in the CDL OAM field. (MSB) (LSB) 7 6 5 4 3 2 1 0 +----------------------+ | | +----------------------+ | | | +-- implicit end-to-end path forward | defect indication +----- BDI-E end-to-end path backward defect indication A bit value of '1' indicates the presence of a defect. A bit value of '0' indicates the absence of a defect. "
    status = 'current'
    namedValues = NamedValues(("endToEndPathImplicitFwdDefect", 0), ("endToEndPathBackwardDefect", 1))

class CoCdlNodeBehavior(TextualConvention, Integer32):
    description = 'A network element can take on one of three roles for each CDL enabled interface: endOfHop endOfAggPath cdlRegenerator endOfHop: Indicates that this network element acts as a CDL Hop Terminating Network Element but not as a CDL Aggregate Path Terminating Network Element, at this interface. A CDL Hop Terminating Network Element is a network element that terminates (generates in one direction and consumes in another direction) OAM information associated with a Hop at an interface. A network element will be designated a Hop Terminating Network Element at an interface only if it meets one of the following conditions: (1) It is an Aggregate Path Terminating Network Element, (2) It carries out Hop-by-hop Automatic Protection Switching (APS), or (3) It has been configured to be a Hop Terminating Network Element. This may be desirable at administrative boundaries between networks, for example, in order to limit the span of the hop-by-hop backward defect indication to the interface between the two networks. endOfAggPath: Indicates that this network element acts as a CDL Aggregate Path Terminating Network Element that terminates (generates in one direction and consumes in another direction) OAM information associated with an Aggregate Path (as well as OAM information associated with a Hop), at this interface. A network element will be designated an Aggregate Path Terminating network element at an interface only if it: (1) applies/removes the CDL Ethernet encapsulation, or (2) demultiplexes the arriving aggregate packet stream into elementary packet streams, and multiplexes two or more elementary packet streams into the departing packet stream. cdlRegenerator: A CDL Regenerator transmits a regenerated input packet stream. It monitors integrity of the CDL header and generates CDL alarms (FDI-H) if the incoming packet stream fails. It also terminates the CDL Message Channel. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("endOfAggPath", 1), ("endOfHop", 2), ("cdlRegenerator", 3))

class CoCdlFlowIdentifier(TextualConvention, Unsigned32):
    description = 'A CDL Flow Identifier value that is used to differentiate one elementary packet stream from other elementary packet streams carried on a CDL enabled interface. This value is carried in the CDL header of packets belonging to this elementary packet stream. '
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

coCdlBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1))
coCdlFlowTermGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2))
coCdlIntfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1), )
if mibBuilder.loadTexts: coCdlIntfTable.setStatus('current')
if mibBuilder.loadTexts: coCdlIntfTable.setDescription('This table provides objects to configure and monitor CDL on an Ethernet interface. ')
coCdlIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coCdlIntfEntry.setStatus('current')
if mibBuilder.loadTexts: coCdlIntfEntry.setDescription('An entry in the CDL Interface Table, providing objects to configure and monitor CDL on an Ethernet interface. An entry exists for each CDL capable Ethernet interface. ')
coCdlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: coCdlAdminStatus.setDescription("Enables/disables CDL on this interface. When this object is set to 'true', CDL is enabled on this interface. When this object is set to 'false', CDL is disabled on this interface. When CDL is enabled, the following actions are taken: 1) When a non-CDL packet is progressed to this interface for transmission, the Ethernet packet is modified to carry the CDL header. Similarly, when a received packet is progressed from this interface to a non-CDL interface, the CDL header is removed from the Ethernet packet. 2) Processing of CDL defect indications is activated. 3) The CDL Message Channel used to carry control (e.g. routing, signalling) and management traffic is activated. The SNMP agent creates an interface that represents the CDL Message Channel. The interface representing the CDL Message Channel is shown as a higher layer interface, with ifType 'propPointToPointSerial', residing above this CDL enabled interface in the ifStackTable in the IF-MIB. 4) The CDL APS Channel is activated, if supported and APS is configured for this interface. 5) Transport of multiple data flows (i.e. packet-by-packet multiplexing) is activated, if this capability is supported on this interface. When CDL is disabled, only traditional (non-CDL) Ethernet packets are transported, all packets on this interface are treated as one Ethernet data flow, and the interface representing the CDL message channel is deleted. ")
coCdlForceEndOfHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlForceEndOfHop.setStatus('current')
if mibBuilder.loadTexts: coCdlForceEndOfHop.setDescription("When set to 'true', this object forces CDL Hop Terminating behavior at this interface. A CDL Hop Terminating Network Element terminates (generates in one direction and consumes in another direction) hop-by-hop CDL Defect Indications at an interface. When this object is set to 'false', this network element may still act as a CDL Hop Terminating Network Element at this interface, if either 1) Automatic Protection Switching (APS) has been configured for this interface, or 2) this network element is an Aggregate Path Terminating Network Element at this interface. It is recommended to force CDL Hop Terminating behavior at administrative boundaries. This ensures that the hop-by-hop CDL Defect Indications (FDI-H and BDI-H) between two administrative domains reflect only errors that occur between the domains, even if APS is not configured for this interface. ")
coCdlNodeBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 3), CoCdlNodeBehavior()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlNodeBehavior.setStatus('current')
if mibBuilder.loadTexts: coCdlNodeBehavior.setDescription('This object indicates the current CDL defect indication behavior of this network element, at this interface. A network element can take on one of three roles at a CDL enabled interface: Aggregate Path Terminating Network Element (endOfAggPath), Hop Terminating Network Element (endOfHop), or CDL Regenerator. ')
coCdlRxAggDefectIndCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 4), CoCdlAggDefectIndStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlRxAggDefectIndCurrStatus.setStatus('current')
if mibBuilder.loadTexts: coCdlRxAggDefectIndCurrStatus.setDescription('This object reflects the current status of the CDL Defect Indication bits received on this interface. ')
coCdlRxAggDefectIndLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlRxAggDefectIndLastChange.setStatus('current')
if mibBuilder.loadTexts: coCdlRxAggDefectIndLastChange.setDescription('This object specifies the value of sysUpTime at the last time there was a change in the value of coCdlRxAggDefectIndCurrStatus. ')
coCdlTxAggDefectIndCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 6), CoCdlAggDefectIndStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlTxAggDefectIndCurrStatus.setStatus('current')
if mibBuilder.loadTexts: coCdlTxAggDefectIndCurrStatus.setDescription('This object reflects the current status of the CDL Defect Indication bits transmitted on this interface. ')
coCdlTxAggDefectIndLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlTxAggDefectIndLastChange.setStatus('current')
if mibBuilder.loadTexts: coCdlTxAggDefectIndLastChange.setDescription('This object specifies the value of sysUpTime at the last time there was a change in the value of coCdlTxAggDefectIndCurrStatus. ')
coCdlTransmitMaxFlowIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 8), CoCdlFlowIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlTransmitMaxFlowIdentifier.setStatus('current')
if mibBuilder.loadTexts: coCdlTransmitMaxFlowIdentifier.setDescription('A CDL enabled interface can aggregate packet streams (called elementary packet streams) from multiple interfaces. CDL uses one or two octets to identify the elementary packet stream that this packet belongs to (called the flow identifier). This object identifies the maximum value that can be assigned to the CDL flow identifier for a packet transmitted on this interface. ')
coCdlReceiveMaxFlowIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 9), CoCdlFlowIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlReceiveMaxFlowIdentifier.setStatus('current')
if mibBuilder.loadTexts: coCdlReceiveMaxFlowIdentifier.setDescription('A CDL enabled interface can aggregate packet streams (called elementary packet streams) from multiple interfaces. CDL uses one or two octets to identify the elementary packet stream that this packet belongs to (called the flow identifier). This object identifies the maximum value that can be assigned to the CDL flow identifier for a packet received on this interface. ')
coCdlRxHeaderCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlRxHeaderCRCError.setStatus('current')
if mibBuilder.loadTexts: coCdlRxHeaderCRCError.setDescription('The number of CDL frames received with CDL Header CRC errors. This object represents the lower word value of the counter associated with the number of CDL header CRC errors encountered in the receive direction. NOTE: The object coCdlRxHeaderCRCErrorOverflow contains the higher 32 bits of this counter value. SNMP v2c or v3 managers can use the coCdlHCRxHeaderCRCError object directly which is a 64 bit counter. ')
coCdlRxHeaderCRCErrorOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlRxHeaderCRCErrorOverflow.setStatus('current')
if mibBuilder.loadTexts: coCdlRxHeaderCRCErrorOverflow.setDescription('This object represents the higher word value of the counter associated with the number of CDL Header CRC errors encountered in the receive direction. NOTE: The object coCdlRxHecError contains the lower 32 bits of this counter value. If the error count is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can use the coCdlHCRxHeaderCRCError object directly which is a 64 bit counter. ')
coCdlHCRxHeaderCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlHCRxHeaderCRCError.setStatus('current')
if mibBuilder.loadTexts: coCdlHCRxHeaderCRCError.setDescription('The number of CDL frames received with CDL Header CRC errors. This is a High Capacity (64 bit) version of the coCdlRxHeaderCRCError counter. ')
coCdlRxInvalidFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlRxInvalidFlowID.setStatus('current')
if mibBuilder.loadTexts: coCdlRxInvalidFlowID.setDescription('This object counts the number of CDL Flow Identifier lookup errors in the receive direction. When a CDL interface multiplexes/demultiplexes more than one elementary packet stream, it uses the flow identifier in the CDL header. This error counter is incremented when a flow identifier value received on this interface does not map to any of the elementary packet streams demultiplexed by this interface. This object represents the lower word value of the counter associated with the number of CDL Flow Identifier lookup errors encountered in the receive direction. NOTE: The object coCdlRxInvalidFlowIDOverflow contains the higher 32 bits of this counter value. SNMP v2c or v3 managers can use the coCdlHCRxInvalidFlowID object directly which is a 64 bit counter. ')
coCdlRxInvalidFlowIDOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlRxInvalidFlowIDOverflow.setStatus('current')
if mibBuilder.loadTexts: coCdlRxInvalidFlowIDOverflow.setDescription('This object represents the higher word value of the counter associated with the number of CDL Flow Identifier lookup errors encountered in the receive direction. NOTE: The object coCdlRxInvalidFlowID contains the lower 32 bits of this counter value. If the error count is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can use the coCdlHCRxInvalidFlowID object directly which is a 64 bit counter. ')
coCdlHCRxInvalidFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlHCRxInvalidFlowID.setStatus('current')
if mibBuilder.loadTexts: coCdlHCRxInvalidFlowID.setDescription('This object counts the number of CDL Flow Identifier lookup errors in the receive direction. When a CDL interface multiplexes/demultiplexes more than one elementary packet stream, it uses the flow identifier in the CDL header. This error counter is incremented when a flow identifier value received on this interface does not map to any of the elementary packet streams demultiplexed by this interface. This is a High Capacity (64 bit) version of the coCdlRxInvalidFlowID counter. ')
coCdlRxNonCdlPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlRxNonCdlPackets.setStatus('current')
if mibBuilder.loadTexts: coCdlRxNonCdlPackets.setDescription('This object counts the number of packets received without a CDL header on this interface. This counter is incremented only when CDL is enabled on this interface. This object represents the lower word value of the counter associated with the number of packets received without a CDL header on this interface. NOTE: The object coCdlRxNonCdlPacketsOverflow contains the higher 32 bits of this counter value. SNMP v2c or v3 managers can use the coCdlHCRxNonCdlPackets object directly which is a 64 bit counter. ')
coCdlRxNonCdlPacketsOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlRxNonCdlPacketsOverflow.setStatus('current')
if mibBuilder.loadTexts: coCdlRxNonCdlPacketsOverflow.setDescription('This object represents the higher word value of the counter associated with the number of packets received without a CDL header on this interface. NOTE: The object coCdlRxNonCdlPackets contains the lower 32 bits of this counter value. If the error count is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can use the coCdlHCRxNonCdlPackets object directly which is a 64 bit counter. ')
coCdlHCRxNonCdlPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlHCRxNonCdlPackets.setStatus('current')
if mibBuilder.loadTexts: coCdlHCRxNonCdlPackets.setDescription('This object counts the number of packets received without a CDL header on this interface. This counter is incremented only when CDL is enabled on this interface. This is a High Capacity (64 bit) version of the coCdlRxNonCdlPackets counter. ')
coCdlDefectIndNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledAtTerminatingInterfaces", 2), ("enabledAtAllInterfaces", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlDefectIndNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: coCdlDefectIndNotifyEnable.setDescription('This object indicates whether a change in the received CDL Defect Indications, including the implicit end-to-end path defect indication as well as the CDL defect indication bits in the CDL OAM field, causes a notification to be generated. disabled: Received CDL aggregate defect indication bit changes do not cause coCdlRxAggDefectIndChange notifications to be generated, and CDL flow defect indication changes from the CDL network at path terminating interfaces do not cause coCdlFromCdlNetFlowDIChange notifications to be generated. enabledAtTerminatingInterfaces: A coCdlRxAggDefectIndChange notification is generated whenever - the received hop-by-hop forward defect indication (FDI-H) or the received hop-by-hop backward defect indication bit (BDI-H) changes at a hop terminating interface, or - the received end-to-end (aggregate path) defect indication bit (FDI-E) changes at an aggregate path terminating interface. A coCdlFromCdlNetFlowDIChange notification is generated whenever a CDL flow defect indication, i.e. implicit end-to-end path forward defect indication or end-to-end path backward defect indication bit, from the CDL network changes at a path terminating interface. enabledAtAllInterfaces: a coCdlRxAggDefectIndChange notification is generated whenever a received CDL aggregate defect indication bit changes on any interface, and a coCdlFromCdlNetFlowDIChange notification is generated whenever a CDL flow defect indication, i.e. implicit end-to-end path forward defect indication or end-to-end path backward defect indication bit, from the CDL network changes at a path terminating interface. To minimize the probability of prematurely reacting to momentary signal variations, a soak time may be incorporated into the notification in the following manner. A notification is generated after a defect is first detected, when the defect persists for a period of time that exceeds the set soak interval specified by coCdlDefectIndSetSoakInterval. A notification is generated after a defect stops being detected, when the defect does not appear over a period of time that exceeds the clear soak interval specified by coCdlDefectIndClearSoakInterval. When changes in CDL defect indications are received for multiple interfaces within a short time span, notifications should be deferred so that each notification is generated at least one coCdlDINotifyThrottleInterval after the previous notification. ')
coCdlDefectIndSetSoakInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(2500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlDefectIndSetSoakInterval.setStatus('current')
if mibBuilder.loadTexts: coCdlDefectIndSetSoakInterval.setDescription('To minimize the probability of prematurely reacting to momentary signal variations, a soak time may be incorporated into the defect indications. The indication is set when the defect persists for a period of time that exceeds the set soak interval. ')
coCdlDefectIndClearSoakInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlDefectIndClearSoakInterval.setStatus('current')
if mibBuilder.loadTexts: coCdlDefectIndClearSoakInterval.setDescription('To minimize the probability of prematurely reacting to momentary signal variations, a soak time may be incorporated into the defect indications. The indication is cleared when no defect occurs over a period of time that exceeds the clear soak interval. ')
coCdlDINotifyThrottleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlDINotifyThrottleInterval.setStatus('current')
if mibBuilder.loadTexts: coCdlDINotifyThrottleInterval.setDescription("The minimum time interval between generation of successive CDL defect indication 'notification-events' by this agent. A 'notification-event' is the transmission of a single trap or inform PDU to a list of notification destinations. If more than one change occurs within a short time span, for for example if hop-by-hop forward defect indications are received for multiple interfaces, then notification-events for these changes should be deferred by the agent so that each notification-event occurs at least one throttle interval after the previous notification-event. At the end of each throttle interval, one notification-event should be generated if the current defect indication state on any interface is different from the last state indicated in a notification-event. In such a case, another throttle interval is started immediately. ")
coCdlFlowTermTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1), )
if mibBuilder.loadTexts: coCdlFlowTermTable.setStatus('current')
if mibBuilder.loadTexts: coCdlFlowTermTable.setDescription("This table contains objects used to manage logical or physical interfaces representing elementary packet streams at the point where the CDL path defect indications are terminated. Typically, this is a point where the CDL Ethernet encapsulation is applied and removed. This can also be a point between a part of the CDL network that supports packet-by-packet multiplexing, and a part of the CDL network that does not support packet-by-packet multiplexing. Several elementary packet streams (from multiple logical or physical path terminating interfaces) may be multiplexed into an aggregate packet stream before being transmitted out of this network element, towards the rest of the CDL network. (1) +---------------+ ------>|\\ | Aggregate CDL packet stream : | +----------\\ | ------>|-------------==|======> towards CDL network : | +----------/ | (A) ------>|/ | (N) +---------------+ In the figure above, interface 'A' aggregates the elementary packet streams from interfaces '1' through 'N'. A row in this table exists for each path terminating interface carrying an elementary packet stream. In the figure above, these interfaces are labeled '1' through 'N'. The relationship between the aggregating interface 'A' and an interface carrying an elementary packet stream is not specified in this table. It could be derived from the ifstackTable, or from a cross connect MIB supported by the platform, or from any other means suitable to the platform. ")
coCdlFlowTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coCdlFlowTermEntry.setStatus('current')
if mibBuilder.loadTexts: coCdlFlowTermEntry.setDescription("An entry that contains objects used to manage a logical or physical interface representing a single elementary packet stream at the point where the CDL path defect indications are terminated. Typically, this is a point where the CDL Ethernet encapsulation is applied and removed. This can also be a point between a part of the CDL network that supports packet-by-packet multiplexing, and a part of the CDL network that does not support packet-by-packet multiplexing. This interface may have ifType value other than 'ethernetCsmacd', if traffic from a non-Ethernet protocol is received on this interface and then encapsulated (or otherwise interworked) in Ethernet and then CDL, before being progressed into the CDL network. ")
coCdlFromCdlNetFlowIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 1), CoCdlFlowIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlFromCdlNetFlowIdentifier.setStatus('current')
if mibBuilder.loadTexts: coCdlFromCdlNetFlowIdentifier.setDescription('This object specifies the flow identifier value received from the CDL network that identifies this elementary packet stream at this interface. Note that if CDL is not enabled on this interface, this represents the flow identifier value passed to this interface from the cross connect fabric. If the cross connect fabric does not map the flow identifier value for this elementary packet stream, this is the value passed from the CDL aggregation interface on the other side of the cross connect. ')
coCdlToCdlNetFlowIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 2), CoCdlFlowIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coCdlToCdlNetFlowIdentifier.setStatus('current')
if mibBuilder.loadTexts: coCdlToCdlNetFlowIdentifier.setDescription('This object specifies the flow identifier value set in CDL packets in this elementary packet stream that are progressed from this interface towards the CDL network. Note that if CDL is not enabled on this interface, this represents the flow identifier value passed to the fabric that cross connects this packet stream onto a CDL aggregation interface. ')
coCdlFromCdlNetFlowDICurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 3), CoCdlFlowDefectIndStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlFromCdlNetFlowDICurrStatus.setStatus('current')
if mibBuilder.loadTexts: coCdlFromCdlNetFlowDICurrStatus.setDescription('This object reflects the current status of the CDL flow defect indications received from the CDL network, at this interface. Note that the end-to-end path forward defect indication is implicit, i.e. it is not signalled using a bit. An end-to-end path forward defect is inferred when no CDL Ethernet or Idle packets are received with the flow identifier value specified by coCdlFromCdlNetFlowIdentifier, over a pre-determined length of time. ')
coCdlFromCdlNetFlowDILastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlFromCdlNetFlowDILastChange.setStatus('current')
if mibBuilder.loadTexts: coCdlFromCdlNetFlowDILastChange.setDescription('This object specifies the value of sysUpTime at the last time there was a change in the value of coCdlFromCdlNetFlowDICurrStatus. ')
coCdlToCdlNetFlowDICurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 5), CoCdlFlowDefectIndStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlToCdlNetFlowDICurrStatus.setStatus('current')
if mibBuilder.loadTexts: coCdlToCdlNetFlowDICurrStatus.setDescription('This object reflects the current status of the CDL flow defect indications progressed towards the CDL network from this interface. Note that the end-to-end path forward defect indication is implicit, i.e. it is not signalled using a bit. An end-to-end path forward defect is indicated by stopping transmission of CDL Ethernet and Idle packets with the flow identifier value specified by coCdlToCdlNetFlowIdentifier. ')
coCdlToCdlNetFlowDILastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlToCdlNetFlowDILastChange.setStatus('current')
if mibBuilder.loadTexts: coCdlToCdlNetFlowDILastChange.setDescription('This object specifies the value of sysUpTime at the last time there was a change in the value of coCdlToCdlNetFlowDICurrStatus. ')
coCdlFromCdlNetEthernetCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlFromCdlNetEthernetCRC.setStatus('current')
if mibBuilder.loadTexts: coCdlFromCdlNetEthernetCRC.setDescription('This object represents the lower word value of the counter that provides a count of Ethernet packets with CRC errors, for an elementary packet stream, at the point where the CDL header is removed. When Ethernet is used as an encapsulation for transport of non-Ethernet protocols, this is the number of Ethernet CRC errors, before the Ethernet encapsulation is removed and the resulting traffic for the underlying protocol is transmitted out this interface. NOTE: The object coCdlFromCdlNetEthernetCRCOvrflw contains the higher 32 bits of this counter value. SNMP v2c or v3 managers can use the coCdlFromCdlNetHCEthernetCRC object directly which is a 64 bit counter. ')
coCdlFromCdlNetEthernetCRCOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlFromCdlNetEthernetCRCOvrflw.setStatus('current')
if mibBuilder.loadTexts: coCdlFromCdlNetEthernetCRCOvrflw.setDescription('This object represents the higher word value of the counter that provides a count of Ethernet packets with CRC errors, for an elementary packet stream, at the point where the CDL header is removed. When Ethernet is used as an encapsulation for transport of non-Ethernet protocols, this is the number of Ethernet CRC errors, before the Ethernet encapsulation is removed and the resulting traffic for the underlying protocol is transmitted out this interface. NOTE: The object coCdlFromCdlNetEthernetCRC contains the lower 32 bits of this counter value. SNMP v2c or v3 managers can use the coCdlFromCdlNetHCEthernetCRC object directly which is a 64 bit counter. ')
coCdlFromCdlNetHCEthernetCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 88, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coCdlFromCdlNetHCEthernetCRC.setStatus('current')
if mibBuilder.loadTexts: coCdlFromCdlNetHCEthernetCRC.setDescription('This object provides a count of Ethernet packets with CRC errors, for an elementary packet stream, at the point where the CDL header is removed. When Ethernet is used as an encapsulation for transport of non-Ethernet protocols, this is the number of Ethernet CRC errors, before the Ethernet encapsulation is removed and the resulting traffic for the underlying protocol is transmitted out this interface. This is a High Capacity (64 bit) version of the coCdlFromCdlNetEthernetCRC counter. ')
coCdlRxAggDefectIndChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 88, 0, 1)).setObjects(("CISCO-CDL-MIB", "coCdlRxAggDefectIndCurrStatus"), ("CISCO-CDL-MIB", "coCdlRxAggDefectIndLastChange"))
if mibBuilder.loadTexts: coCdlRxAggDefectIndChange.setStatus('current')
if mibBuilder.loadTexts: coCdlRxAggDefectIndChange.setDescription('This notification is sent when the value of the hop-by-hop forward defect indication (FDI-H), hop-by-hop backward defect indication (BDI-H), or end-to-end (aggregate path) forward defect indication (FDI-E) bit received on an interface changes. To minimize the probability of prematurely reacting to momentary signal variations, a soak time may be incorporated into the notification in the following manner. A notification is generated after a defect is first detected, when the defect persists for a period of time that exceeds the set soak interval specified by coCdlDefectIndSetSoakInterval. A notification is generated after a defect stops being detected, when the defect does not appear over a period of time that exceeds the clear soak interval specified by coCdlDefectIndClearSoakInterval. When changes in CDL defect indications are received for multiple interfaces within a short time span, notifications should be deferred so that each notification is generated at least one coCdlDINotifyThrottleInterval after the previous notification. ')
coCdlFromCdlNetFlowDIChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 88, 0, 2)).setObjects(("CISCO-CDL-MIB", "coCdlFromCdlNetFlowDICurrStatus"), ("CISCO-CDL-MIB", "coCdlFromCdlNetFlowDILastChange"))
if mibBuilder.loadTexts: coCdlFromCdlNetFlowDIChange.setStatus('current')
if mibBuilder.loadTexts: coCdlFromCdlNetFlowDIChange.setDescription('This notification is sent when the value of the received end-to-end path forward defect indication or the received end-to-end path backward defect indication changes. Note that the end-to-end path forward defect indication is implicit, i.e. it is not signalled using a bit. An end-to-end path forward defect is inferred when no CDL Ethernet or Idle packets are received over a pre-determined length of time. To minimize the probability of prematurely reacting to momentary signal variations, a soak time may be incorporated into the notification in the following manner. A notification is generated after a defect is first detected, when the defect persists for a period of time that exceeds the set soak interval specified by coCdlDefectIndSetSoakInterval. A notification is generated after a defect stops being detected, when the defect does not appear over a period of time that exceeds the clear soak interval specified by coCdlDefectIndClearSoakInterval. When changes in CDL defect indications are received for multiple interfaces within a short time span, notifications should be deferred so that each notification is generated at least one coCdlDINotifyThrottleInterval after the previous notification. ')
coCdlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 1))
coCdlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2))
coCdlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 1, 1)).setObjects(("CISCO-CDL-MIB", "coCdlMIBBaseGroup"), ("CISCO-CDL-MIB", "coCdlDIAggMandatoryGroup"), ("CISCO-CDL-MIB", "coCdlDIAggNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlMIBCompliance = coCdlMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: coCdlMIBCompliance.setDescription('The Compliance statement for the Cisco CDL MIB.')
coCdlMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 1, 2)).setObjects(("CISCO-CDL-MIB", "coCdlMIBBaseGroup"), ("CISCO-CDL-MIB", "coCdlDIAggMandatoryGroup"), ("CISCO-CDL-MIB", "coCdlDIAggNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlMIBCompliance2 = coCdlMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: coCdlMIBCompliance2.setDescription('The Compliance statement for the Cisco CDL MIB.')
coCdlMIBBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2, 1)).setObjects(("CISCO-CDL-MIB", "coCdlAdminStatus"), ("CISCO-CDL-MIB", "coCdlNodeBehavior"), ("CISCO-CDL-MIB", "coCdlRxHeaderCRCError"), ("CISCO-CDL-MIB", "coCdlRxHeaderCRCErrorOverflow"), ("CISCO-CDL-MIB", "coCdlHCRxHeaderCRCError"), ("CISCO-CDL-MIB", "coCdlRxNonCdlPackets"), ("CISCO-CDL-MIB", "coCdlRxNonCdlPacketsOverflow"), ("CISCO-CDL-MIB", "coCdlHCRxNonCdlPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlMIBBaseGroup = coCdlMIBBaseGroup.setStatus('current')
if mibBuilder.loadTexts: coCdlMIBBaseGroup.setDescription('A collection of objects used to control and monitor CDL on an Ethernet interface. ')
coCdlMIBFlowIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2, 2)).setObjects(("CISCO-CDL-MIB", "coCdlTransmitMaxFlowIdentifier"), ("CISCO-CDL-MIB", "coCdlReceiveMaxFlowIdentifier"), ("CISCO-CDL-MIB", "coCdlRxInvalidFlowID"), ("CISCO-CDL-MIB", "coCdlRxInvalidFlowIDOverflow"), ("CISCO-CDL-MIB", "coCdlHCRxInvalidFlowID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlMIBFlowIdGroup = coCdlMIBFlowIdGroup.setStatus('current')
if mibBuilder.loadTexts: coCdlMIBFlowIdGroup.setDescription('A collection of objects used to manage packet-by-packet multiplexing on a CDL enabled interface. ')
coCdlMIBFlowTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2, 3)).setObjects(("CISCO-CDL-MIB", "coCdlFromCdlNetFlowIdentifier"), ("CISCO-CDL-MIB", "coCdlToCdlNetFlowIdentifier"), ("CISCO-CDL-MIB", "coCdlFromCdlNetFlowDICurrStatus"), ("CISCO-CDL-MIB", "coCdlFromCdlNetFlowDILastChange"), ("CISCO-CDL-MIB", "coCdlToCdlNetFlowDICurrStatus"), ("CISCO-CDL-MIB", "coCdlToCdlNetFlowDILastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlMIBFlowTermGroup = coCdlMIBFlowTermGroup.setStatus('deprecated')
if mibBuilder.loadTexts: coCdlMIBFlowTermGroup.setDescription('A collection of objects to configure and monitor the status of elementary packet streams at path terminating interfaces. ')
coCdlDIConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2, 4)).setObjects(("CISCO-CDL-MIB", "coCdlForceEndOfHop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlDIConfigGroup = coCdlDIConfigGroup.setStatus('current')
if mibBuilder.loadTexts: coCdlDIConfigGroup.setDescription('A collection of objects to configure CDL aggregate defect indication behavior. ')
coCdlDIAggMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2, 5)).setObjects(("CISCO-CDL-MIB", "coCdlRxAggDefectIndCurrStatus"), ("CISCO-CDL-MIB", "coCdlRxAggDefectIndLastChange"), ("CISCO-CDL-MIB", "coCdlTxAggDefectIndCurrStatus"), ("CISCO-CDL-MIB", "coCdlTxAggDefectIndLastChange"), ("CISCO-CDL-MIB", "coCdlDefectIndNotifyEnable"), ("CISCO-CDL-MIB", "coCdlDefectIndSetSoakInterval"), ("CISCO-CDL-MIB", "coCdlDefectIndClearSoakInterval"), ("CISCO-CDL-MIB", "coCdlDINotifyThrottleInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlDIAggMandatoryGroup = coCdlDIAggMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: coCdlDIAggMandatoryGroup.setDescription('A collection of objects to monitor CDL aggregate defect indications. ')
coCdlDIAggNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2, 6)).setObjects(("CISCO-CDL-MIB", "coCdlRxAggDefectIndChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlDIAggNotifGroup = coCdlDIAggNotifGroup.setStatus('current')
if mibBuilder.loadTexts: coCdlDIAggNotifGroup.setDescription('A collection of notifications for CDL aggregate defect indications. ')
coCdlDIFlowNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2, 7)).setObjects(("CISCO-CDL-MIB", "coCdlFromCdlNetFlowDIChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlDIFlowNotifGroup = coCdlDIFlowNotifGroup.setStatus('current')
if mibBuilder.loadTexts: coCdlDIFlowNotifGroup.setDescription('A collection of notifications for CDL flow defect indications. ')
coCdlMIBFlowTerm2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 88, 3, 2, 8)).setObjects(("CISCO-CDL-MIB", "coCdlFromCdlNetFlowIdentifier"), ("CISCO-CDL-MIB", "coCdlToCdlNetFlowIdentifier"), ("CISCO-CDL-MIB", "coCdlFromCdlNetFlowDICurrStatus"), ("CISCO-CDL-MIB", "coCdlFromCdlNetFlowDILastChange"), ("CISCO-CDL-MIB", "coCdlToCdlNetFlowDICurrStatus"), ("CISCO-CDL-MIB", "coCdlToCdlNetFlowDILastChange"), ("CISCO-CDL-MIB", "coCdlFromCdlNetEthernetCRC"), ("CISCO-CDL-MIB", "coCdlFromCdlNetEthernetCRCOvrflw"), ("CISCO-CDL-MIB", "coCdlFromCdlNetHCEthernetCRC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coCdlMIBFlowTerm2Group = coCdlMIBFlowTerm2Group.setStatus('current')
if mibBuilder.loadTexts: coCdlMIBFlowTerm2Group.setDescription('A collection of objects to configure and monitor the status of elementary packet streams at path terminating interfaces. ')
mibBuilder.exportSymbols("CISCO-CDL-MIB", coCdlFromCdlNetEthernetCRCOvrflw=coCdlFromCdlNetEthernetCRCOvrflw, coCdlMIBBaseGroup=coCdlMIBBaseGroup, coCdlFromCdlNetEthernetCRC=coCdlFromCdlNetEthernetCRC, coCdlMIBNotifications=coCdlMIBNotifications, CoCdlFlowDefectIndStatus=CoCdlFlowDefectIndStatus, coCdlToCdlNetFlowDILastChange=coCdlToCdlNetFlowDILastChange, coCdlFromCdlNetHCEthernetCRC=coCdlFromCdlNetHCEthernetCRC, coCdlMIBFlowTermGroup=coCdlMIBFlowTermGroup, coCdlFromCdlNetFlowDIChange=coCdlFromCdlNetFlowDIChange, coCdlDefectIndSetSoakInterval=coCdlDefectIndSetSoakInterval, coCdlMIBCompliance2=coCdlMIBCompliance2, coCdlHCRxNonCdlPackets=coCdlHCRxNonCdlPackets, coCdlMIBConformance=coCdlMIBConformance, coCdlTransmitMaxFlowIdentifier=coCdlTransmitMaxFlowIdentifier, coCdlMIBCompliances=coCdlMIBCompliances, coCdlFromCdlNetFlowIdentifier=coCdlFromCdlNetFlowIdentifier, coCdlRxInvalidFlowIDOverflow=coCdlRxInvalidFlowIDOverflow, coCdlDIAggMandatoryGroup=coCdlDIAggMandatoryGroup, coCdlDIFlowNotifGroup=coCdlDIFlowNotifGroup, coCdlRxNonCdlPacketsOverflow=coCdlRxNonCdlPacketsOverflow, coCdlFlowTermEntry=coCdlFlowTermEntry, coCdlToCdlNetFlowIdentifier=coCdlToCdlNetFlowIdentifier, coCdlMIBGroups=coCdlMIBGroups, coCdlMIBFlowIdGroup=coCdlMIBFlowIdGroup, coCdlNodeBehavior=coCdlNodeBehavior, CoCdlFlowIdentifier=CoCdlFlowIdentifier, coCdlIntfEntry=coCdlIntfEntry, coCdlDINotifyThrottleInterval=coCdlDINotifyThrottleInterval, coCdlFlowTermTable=coCdlFlowTermTable, PYSNMP_MODULE_ID=ciscoCdlMIB, coCdlRxAggDefectIndCurrStatus=coCdlRxAggDefectIndCurrStatus, coCdlTxAggDefectIndLastChange=coCdlTxAggDefectIndLastChange, coCdlDIConfigGroup=coCdlDIConfigGroup, coCdlFlowTermGroup=coCdlFlowTermGroup, CoCdlAggDefectIndStatus=CoCdlAggDefectIndStatus, coCdlMIBObjects=coCdlMIBObjects, coCdlForceEndOfHop=coCdlForceEndOfHop, coCdlFromCdlNetFlowDILastChange=coCdlFromCdlNetFlowDILastChange, coCdlDefectIndClearSoakInterval=coCdlDefectIndClearSoakInterval, coCdlAdminStatus=coCdlAdminStatus, coCdlRxHeaderCRCError=coCdlRxHeaderCRCError, coCdlBaseGroup=coCdlBaseGroup, coCdlRxAggDefectIndChange=coCdlRxAggDefectIndChange, coCdlMIBFlowTerm2Group=coCdlMIBFlowTerm2Group, coCdlRxNonCdlPackets=coCdlRxNonCdlPackets, coCdlRxInvalidFlowID=coCdlRxInvalidFlowID, coCdlReceiveMaxFlowIdentifier=coCdlReceiveMaxFlowIdentifier, coCdlHCRxHeaderCRCError=coCdlHCRxHeaderCRCError, coCdlDIAggNotifGroup=coCdlDIAggNotifGroup, coCdlRxAggDefectIndLastChange=coCdlRxAggDefectIndLastChange, coCdlMIBCompliance=coCdlMIBCompliance, coCdlHCRxInvalidFlowID=coCdlHCRxInvalidFlowID, CoCdlNodeBehavior=CoCdlNodeBehavior, coCdlRxHeaderCRCErrorOverflow=coCdlRxHeaderCRCErrorOverflow, coCdlIntfTable=coCdlIntfTable, ciscoCdlMIB=ciscoCdlMIB, coCdlDefectIndNotifyEnable=coCdlDefectIndNotifyEnable, coCdlTxAggDefectIndCurrStatus=coCdlTxAggDefectIndCurrStatus, coCdlFromCdlNetFlowDICurrStatus=coCdlFromCdlNetFlowDICurrStatus, coCdlToCdlNetFlowDICurrStatus=coCdlToCdlNetFlowDICurrStatus)
