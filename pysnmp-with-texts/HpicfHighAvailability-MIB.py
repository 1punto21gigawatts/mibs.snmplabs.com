#
# PySNMP MIB module HpicfHighAvailability-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HpicfHighAvailability-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
EntityStandbyStatus, = mibBuilder.importSymbols("ENTITY-STATE-MIB", "EntityStandbyStatus")
hpicfCommon, = mibBuilder.importSymbols("HP-ICF-OID", "hpicfCommon")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, ObjectIdentity, Gauge32, iso, NotificationType, Bits, Counter64, MibIdentifier, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "ObjectIdentity", "Gauge32", "iso", "NotificationType", "Bits", "Counter64", "MibIdentifier", "Unsigned32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hpicfHighAvailability = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11))
hpicfHighAvailability.setRevisions(('2017-01-05 00:00', '2012-05-15 00:00', '2009-10-18 00:00', '2009-09-06 00:00', '2009-08-21 00:00', '2006-09-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfHighAvailability.setRevisionsDescriptions(('Added hpicfHAPreferredActiveManagement to hpicfHAConfigObjects. And added hpicfHAConfigGroup1 and deprecated hpicfHAConfigGroup and hpicfHACompliance', 'Added hpicfHAMgmtModuleBackUpState to the table hpicfHAMgmtModuleTable.Added hpicfHAMgmtModuleGroup, hpicfHACompliance2 and deprecated hpicfHAMgmtModuleGroup and hpicfHACompliance1.', 'Added hpicfHAFailOverLogTable and hpicfHAMgmtModuleTable.', 'Added hpicfHAContinuousFwdingTime and Removed hpicfHARedundancyWarmStandby scalar mib and added it as enum to hpicfHARedundancyManagementModuleMode.', 'Added hpicfHARedundancyWarmStandby scalar mib.', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: hpicfHighAvailability.setLastUpdated('201701050000Z')
if mibBuilder.loadTexts: hpicfHighAvailability.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfHighAvailability.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfHighAvailability.setDescription('Management information for configuring Redundant Management module on Hewlett-Packard network devices.')
hpicfHAConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 1))
hpicfHAStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2))
hpicfHAConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3))
hpicfHARedundancyManagementModuleMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("warmStandby", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfHARedundancyManagementModuleMode.setStatus('current')
if mibBuilder.loadTexts: hpicfHARedundancyManagementModuleMode.setDescription('Specify to enable/disable this feature. Enabling allows for management module redundancy when there are two management modules in the switch and does a hitless failover. Disabling prevents redundancy except due to fatal hardware errors on one management module. warmStandby option does a non-hitless failover.')
hpicfHAContinuousFwdingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 1, 2), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfHAContinuousFwdingTime.setStatus('current')
if mibBuilder.loadTexts: hpicfHAContinuousFwdingTime.setDescription('This is a configurable timer. After the failover, on the new AMM, the route and neighbor table entries are marked as stale in the FIB. As routing protocols begin to re-add routes, this stale flag will be reset. When this timer expires, all route and neighbor table entries still marked stale [not yet re-added] will be removed. A value of 0 means that no layer 3 hitless behavior is desired, and in this configuration, upon failover all FIB entries are flushed and corresponding hardware entries are removed. A default value of 5 minutes is chosen with the assumption that the routing protocols can finish re-adding the routes to the equivalent state within this time.')
hpicfHAPreferredActiveManagement = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("management-module1", 1), ("management-module2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfHAPreferredActiveManagement.setStatus('current')
if mibBuilder.loadTexts: hpicfHAPreferredActiveManagement.setDescription('Specify management module priority to specify Active management module across several reboot. The module is likely to become Active post reboot and Not instantaneously. The setting is applied to the running-configuration')
hpicfHAMgmtRedundancyFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noRedundantModule", 1), ("noFailure", 2), ("unknownReason", 3), ("mismatchOS", 4), ("failedSelftest", 5), ("communicationFailure", 6), ("redundancyDisable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAMgmtRedundancyFailureReason.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtRedundancyFailureReason.setDescription('Specifies the reason a redundant management module failed to become a standby module.')
hpicfHAMgmtFailovers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAMgmtFailovers.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtFailovers.setDescription('Specifies the number of management module failovers since last chassis boot.')
hpicfHALastFailoverTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHALastFailoverTime.setStatus('current')
if mibBuilder.loadTexts: hpicfHALastFailoverTime.setDescription('Specifies the time (in hundredths of a second) of the last management module failover.')
hpicfHAFailOverLogTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 4), )
if mibBuilder.loadTexts: hpicfHAFailOverLogTable.setStatus('current')
if mibBuilder.loadTexts: hpicfHAFailOverLogTable.setDescription('This table contains High Availability(HA) failover log specific information.')
hpicfHAFailOverLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 4, 1), ).setIndexNames((0, "HpicfHighAvailability-MIB", "hpicfHAFailOverIndex"))
if mibBuilder.loadTexts: hpicfHAFailOverLogEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfHAFailOverLogEntry.setDescription('Failover log information maintained for HA.')
hpicfHAFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfHAFailOverIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfHAFailOverIndex.setDescription('This object uniquely identifies the entries in the failover log table. This table contains maximum of recent 10 entries.')
hpicfHAFailOverMgmtModule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 4, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAFailOverMgmtModule.setStatus('current')
if mibBuilder.loadTexts: hpicfHAFailOverMgmtModule.setDescription('This object displays the management module information.It is similar to entPhysicalIndex.')
hpicfHAFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAFailOverState.setStatus('current')
if mibBuilder.loadTexts: hpicfHAFailOverState.setDescription("This object indicates the failover state. 'unknown' indicates the state of the management module is undefined and this resource is unable to report standby state. 'active' indicates the state of the management module as active module and it means the resource is providing service. 'standby' indicates that the management module is not providing service, but it will be immediately able to take over the role of the resource to be backed up, without the need for initialization activity, and will contain the same information as the resource to be backed up.")
hpicfHAFailOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAFailOverTime.setStatus('current')
if mibBuilder.loadTexts: hpicfHAFailOverTime.setDescription('This object indicates the failover time in seconds since 1/1/1990 0:0:0.')
hpicfHAFailOverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("switchoverReq", 1), ("buttonReq", 2), ("crashReq", 3), ("activeReset", 4), ("altReset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAFailOverReason.setStatus('current')
if mibBuilder.loadTexts: hpicfHAFailOverReason.setDescription("This object define the reason for failover. 'switchoverReq' indicates failover as a result of switchover command issued by the user. 'buttonReq' indicates failover as a result of manual boot done by the user via reboot button. 'crashReq' indicates failover as a result of crash that happened to the active module. 'activeReset' indicates failover as a result of reset command issued by the user at active module. 'altReset' indicates failover as a result of reset command issued by the user at the alternate module. ")
hpicfHAMgmtModuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 5), )
if mibBuilder.loadTexts: hpicfHAMgmtModuleTable.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtModuleTable.setDescription('This table contains High Availability (HA) management module specific information.')
hpicfHAMgmtModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpicfHAMgmtModuleEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtModuleEntry.setDescription('Management module information maintained for HA.')
hpicfHAMgmtModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 5, 1, 1), EntityStandbyStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAMgmtModuleState.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtModuleState.setDescription('This object displays the state of the the management module.This object is similar to entStateStandby object.')
hpicfHAMgmtModuleCardUpSince = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAMgmtModuleCardUpSince.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtModuleCardUpSince.setDescription('This object displays the card uptime in seconds since this module state. ')
hpicfHAMgmtModuleStateSince = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAMgmtModuleStateSince.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtModuleStateSince.setDescription('This object displays time in seconds from which the current state is valid.')
hpicfHAMgmtModuleRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unavailable", 1), ("active", 2), ("disabled", 3), ("syncing", 4), ("warmStandby", 5), ("hitless", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAMgmtModuleRedundancyState.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtModuleRedundancyState.setDescription("This object describes the management module's redundancy state. 'unavailable' indicates the redundancy module is not available due to error or absence of the module. 'active' indicates the redundancy module is currently active and is providing service. 'disabled' indicates the redundancy module is disabled. 'syncing' indicates the redundancy module is in syncing state and after successful syncing it will enter active state else it will report error. 'warmStandby' indicates the redundancy module is in warmstandby mode and is not providing service, but it will be immediately able to take over the role of the resource to be backed up, without the need for initialization activity, and will contain the same information as the resource to be backed up but the Layer2 information will not be synced. 'hitless'indicates the redundancy module is in hitless mode and is not providing service, but it will be immediately able to take over the role of the resource to be backed up, without the need for initialization activity, and will contain the same information as the resource to be backed up.")
hpicfHAMgmtModuleBackUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("failed", 0), ("unknown", 1), ("waiting", 2), ("realtimeBackupToSlave", 3), ("slaveIsAbsent", 4), ("batchBackup", 5), ("receivingRealtimeData", 6), ("offline", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfHAMgmtModuleBackUpState.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtModuleBackUpState.setDescription("This object describes the management module's backup state. 'failed' indicates that the redundancy module has failed due to some communication failure or incompatible OS. 'unknown' indicates that the redundancy module is shutdown. 'waiting' indicates that the redundancy module is waiting for batch backup request. 'realtimeBackuptoSlave' indicates that the redundancy module is currently in active state and is providing service. 'slaveIsAbsent' indicates that there is no redundant module due to error or absence of the redundancy module. 'batchBackup' indicates that the redundancy module is in syncing state and it enters the active state after successful syncing. 'receivingRealtimeData' indicates that the redundancy module is in standby state.'offline' indicates that the redundancy module is disabled.")
hpicfHACompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 1))
hpicfHAGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 2))
hpicfHACompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 1, 1)).setObjects(("HpicfHighAvailability-MIB", "hpicfHAConfigGroup"), ("HpicfHighAvailability-MIB", "hpicfHAStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHACompliance = hpicfHACompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfHACompliance.setDescription('*********** THIS COMPLIANCE IS DEPRECATED ************ The compliance statement for SNMP entities which implement the hpicfHighAvailability MIB. This compliance section has been deprecated and replaced with hpicfHACompliance3')
hpicfHACompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 1, 2)).setObjects(("HpicfHighAvailability-MIB", "hpicfHAFailOverGroup"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHACompliance1 = hpicfHACompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfHACompliance1.setDescription('*********** THIS COMPLIANCE IS DEPRECATED ************ The compliance statement for SNMP entities which implement the hpicfHighAvailability MIB. This compliance section has been deprecated and replaced with hpicfHACompliance2 .')
hpicfHACompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 1, 3)).setObjects(("HpicfHighAvailability-MIB", "hpicfHAFailOverGroup"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHACompliance2 = hpicfHACompliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfHACompliance2.setDescription('The compliance statement for SNMP entities which implement the hpicfHighAvailability MIB.')
hpicfHACompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 1, 4)).setObjects(("HpicfHighAvailability-MIB", "hpicfHAConfigGroup1"), ("HpicfHighAvailability-MIB", "hpicfHAStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHACompliance3 = hpicfHACompliance3.setStatus('current')
if mibBuilder.loadTexts: hpicfHACompliance3.setDescription('The compliance statement for SNMP entities which implement the hpicfHighAvailability MIB.')
hpicfHAConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 2, 1)).setObjects(("HpicfHighAvailability-MIB", "hpicfHARedundancyManagementModuleMode"), ("HpicfHighAvailability-MIB", "hpicfHAContinuousFwdingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHAConfigGroup = hpicfHAConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfHAConfigGroup.setDescription('********** THIS GROUP IS DEPRECATED *************** The collection of objects which are used to configure the Redundancy Management Module. This group has been deprecated and replaced with hpicfHAConfigGroup1 .')
hpicfHAStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 2, 2)).setObjects(("HpicfHighAvailability-MIB", "hpicfHAMgmtRedundancyFailureReason"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtFailovers"), ("HpicfHighAvailability-MIB", "hpicfHALastFailoverTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHAStatusGroup = hpicfHAStatusGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfHAStatusGroup.setDescription('The collection of objects which are used to represent Management Module statistics information.')
hpicfHAFailOverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 2, 3)).setObjects(("HpicfHighAvailability-MIB", "hpicfHAFailOverMgmtModule"), ("HpicfHighAvailability-MIB", "hpicfHAFailOverState"), ("HpicfHighAvailability-MIB", "hpicfHAFailOverTime"), ("HpicfHighAvailability-MIB", "hpicfHAFailOverReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHAFailOverGroup = hpicfHAFailOverGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfHAFailOverGroup.setDescription('The collection of objects which are used to represent failover log statistics information.')
hpicfHAMgmtModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 2, 4)).setObjects(("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleState"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleCardUpSince"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleStateSince"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleRedundancyState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHAMgmtModuleGroup = hpicfHAMgmtModuleGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfHAMgmtModuleGroup.setDescription('********** THIS GROUP IS DEPRECATED *************** The collection of objects which are used to represent management module specific information. This group has been deprecated and replaced with hpicfHAMgmtModuleGroup1 .')
hpicfHAMgmtModuleGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 2, 5)).setObjects(("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleState"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleCardUpSince"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleStateSince"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleRedundancyState"), ("HpicfHighAvailability-MIB", "hpicfHAMgmtModuleBackUpState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHAMgmtModuleGroup1 = hpicfHAMgmtModuleGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfHAMgmtModuleGroup1.setDescription('The collection of objects which are used to represent management module specific information.')
hpicfHAConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 11, 3, 2, 6)).setObjects(("HpicfHighAvailability-MIB", "hpicfHARedundancyManagementModuleMode"), ("HpicfHighAvailability-MIB", "hpicfHAContinuousFwdingTime"), ("HpicfHighAvailability-MIB", "hpicfHAPreferredActiveManagement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfHAConfigGroup1 = hpicfHAConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfHAConfigGroup1.setDescription('The collection of objects which are used to configure the Redundancy Management Module.')
mibBuilder.exportSymbols("HpicfHighAvailability-MIB", hpicfHAFailOverReason=hpicfHAFailOverReason, hpicfHAFailOverLogEntry=hpicfHAFailOverLogEntry, hpicfHAConfigGroup1=hpicfHAConfigGroup1, hpicfHAMgmtModuleState=hpicfHAMgmtModuleState, hpicfHAConformance=hpicfHAConformance, PYSNMP_MODULE_ID=hpicfHighAvailability, hpicfHACompliance2=hpicfHACompliance2, hpicfHAStatusGroup=hpicfHAStatusGroup, hpicfHAContinuousFwdingTime=hpicfHAContinuousFwdingTime, hpicfHAMgmtModuleGroup=hpicfHAMgmtModuleGroup, hpicfHighAvailability=hpicfHighAvailability, hpicfHAMgmtFailovers=hpicfHAMgmtFailovers, hpicfHAFailOverIndex=hpicfHAFailOverIndex, hpicfHAGroups=hpicfHAGroups, hpicfHAFailOverState=hpicfHAFailOverState, hpicfHACompliance1=hpicfHACompliance1, hpicfHAPreferredActiveManagement=hpicfHAPreferredActiveManagement, hpicfHAFailOverTime=hpicfHAFailOverTime, hpicfHAMgmtModuleGroup1=hpicfHAMgmtModuleGroup1, hpicfHACompliance3=hpicfHACompliance3, hpicfHAMgmtRedundancyFailureReason=hpicfHAMgmtRedundancyFailureReason, hpicfHAMgmtModuleRedundancyState=hpicfHAMgmtModuleRedundancyState, hpicfHALastFailoverTime=hpicfHALastFailoverTime, hpicfHAMgmtModuleEntry=hpicfHAMgmtModuleEntry, hpicfHAMgmtModuleBackUpState=hpicfHAMgmtModuleBackUpState, hpicfHAFailOverMgmtModule=hpicfHAFailOverMgmtModule, hpicfHAConfigObjects=hpicfHAConfigObjects, hpicfHARedundancyManagementModuleMode=hpicfHARedundancyManagementModuleMode, hpicfHAStatusObjects=hpicfHAStatusObjects, hpicfHAMgmtModuleTable=hpicfHAMgmtModuleTable, hpicfHACompliances=hpicfHACompliances, hpicfHAFailOverGroup=hpicfHAFailOverGroup, hpicfHAFailOverLogTable=hpicfHAFailOverLogTable, hpicfHAMgmtModuleStateSince=hpicfHAMgmtModuleStateSince, hpicfHAConfigGroup=hpicfHAConfigGroup, hpicfHACompliance=hpicfHACompliance, hpicfHAMgmtModuleCardUpSince=hpicfHAMgmtModuleCardUpSince)
