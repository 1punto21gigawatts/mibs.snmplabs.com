#
# PySNMP MIB module JUNIPER-WX-GLOBAL-REG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-WX-GLOBAL-REG
# Produced by pysmi-0.3.4 at Wed May  1 14:01:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Counter64, TimeTicks, Unsigned32, Gauge32, MibIdentifier, Integer32, Counter32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Counter64", "TimeTicks", "Unsigned32", "Gauge32", "MibIdentifier", "Integer32", "Counter32", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxWxGlobalRegModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 1, 1))
jnxWxGlobalRegModule.setRevisions(('2007-11-17 10:00', '2007-11-17 10:00', '2007-11-14 01:30', '2006-06-08 18:00', '2005-05-09 10:12', '2004-03-15 14:00', '2003-06-26 20:00', '2001-07-29 22:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxWxGlobalRegModule.setRevisionsDescriptions((' Add wxc1800, wxc2600, wxc3400 product OID', ' Change ISM200 product identity to jnxIsm200Wxc', ' Add ISM200 product OID.', ' Update contact and MIB with Juniper information Add wxc590 and wx60 product OID.', ' Added wxc250 product OID.', ' Add wx100 product OID.', ' Add wx80 product OID.', ' Rev 1.0 Initial version of MIB module JUNIPER-WX-GLOBAL-REG.',))
if mibBuilder.loadTexts: jnxWxGlobalRegModule.setLastUpdated('200107292200Z')
if mibBuilder.loadTexts: jnxWxGlobalRegModule.setOrganization('Juniper Networks, Inc')
if mibBuilder.loadTexts: jnxWxGlobalRegModule.setContactInfo(' Customer Support Juniper Networks, Inc. 1194 North Mathilda Avenue Sunnyvale, CA 94089 +1 888-314-JTAC support@juniper.net')
if mibBuilder.loadTexts: jnxWxGlobalRegModule.setDescription(" A MIB module containing top-level OID definitions for various sub-trees for Juniper Networks' enterprise MIB modules.")
juniperWxRoot = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239))
if mibBuilder.loadTexts: juniperWxRoot.setStatus('current')
if mibBuilder.loadTexts: juniperWxRoot.setDescription(' The root of the OID sub-tree assigned to Juniper Networks assigned by the Internet Assigned Numbers Authority (IANA).')
jnxWxReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1))
if mibBuilder.loadTexts: jnxWxReg.setStatus('current')
if mibBuilder.loadTexts: jnxWxReg.setDescription(' Sub-tree for registrations - identification of modules and logical and physical components.')
jnxWxModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 1))
if mibBuilder.loadTexts: jnxWxModules.setStatus('current')
if mibBuilder.loadTexts: jnxWxModules.setDescription(' Sub-tree for module registrations.')
jnxWxMibs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2))
if mibBuilder.loadTexts: jnxWxMibs.setStatus('current')
if mibBuilder.loadTexts: jnxWxMibs.setDescription(' Sub-tree for all WX object and event definitions.')
jnxWxCaps = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 3))
if mibBuilder.loadTexts: jnxWxCaps.setStatus('current')
if mibBuilder.loadTexts: jnxWxCaps.setDescription(' Sub-tree for agent profiles.')
jnxWxReqs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 4))
if mibBuilder.loadTexts: jnxWxReqs.setStatus('current')
if mibBuilder.loadTexts: jnxWxReqs.setDescription(' Sub-tree for management application requirements.')
jnxWxExpr = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 5))
if mibBuilder.loadTexts: jnxWxExpr.setStatus('current')
if mibBuilder.loadTexts: jnxWxExpr.setDescription(' Sub-tree for experimental definitions.')
jnxWxCommonMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1))
if mibBuilder.loadTexts: jnxWxCommonMib.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonMib.setDescription(' Sub-tree for common WX object and event definitions. These would be implemented by all WX products.')
jnxWxSpecificMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2))
if mibBuilder.loadTexts: jnxWxSpecificMib.setStatus('current')
if mibBuilder.loadTexts: jnxWxSpecificMib.setDescription(' Sub-tree for specific WX object and event definitions.')
jnxWxProduct = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2))
if mibBuilder.loadTexts: jnxWxProduct.setStatus('current')
if mibBuilder.loadTexts: jnxWxProduct.setDescription(' The WAN Acceleration product family.')
jnxWxProductWx50 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 1))
if mibBuilder.loadTexts: jnxWxProductWx50.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWx50.setDescription(' WAN Acceleration Model 50')
jnxWxProductWx55 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 2))
if mibBuilder.loadTexts: jnxWxProductWx55.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWx55.setDescription(' WAN Acceleration Model 55')
jnxWxProductWx20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 3))
if mibBuilder.loadTexts: jnxWxProductWx20.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWx20.setDescription(' WAN Acceleration Model 20')
jnxWxProductWx80 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 4))
if mibBuilder.loadTexts: jnxWxProductWx80.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWx80.setDescription(' WAN Acceleration Model 80')
jnxWxProductWx100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 5))
if mibBuilder.loadTexts: jnxWxProductWx100.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWx100.setDescription(' WAN Acceleration Model 100')
jnxWxProductWxc500 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 6))
if mibBuilder.loadTexts: jnxWxProductWxc500.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWxc500.setDescription(' Sequence Caching Model 500')
jnxWxProductWx15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 7))
if mibBuilder.loadTexts: jnxWxProductWx15.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWx15.setDescription(' WAN Acceleration Model 15')
jnxWxProductWxc250 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 8))
if mibBuilder.loadTexts: jnxWxProductWxc250.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWxc250.setDescription(' Sequence Caching Model 250')
jnxWxProductWx60 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 9))
if mibBuilder.loadTexts: jnxWxProductWx60.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWx60.setDescription(' WAN Acceleration Model 60')
jnxWxProductWxc590 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 10))
if mibBuilder.loadTexts: jnxWxProductWxc590.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWxc590.setDescription(' Sequence Caching Model 590')
jnxWxProductIsm200Wxc = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 11))
if mibBuilder.loadTexts: jnxWxProductIsm200Wxc.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductIsm200Wxc.setDescription(' WAN Acceleration Model ISM200')
jnxWxProductWxc1800 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 12))
if mibBuilder.loadTexts: jnxWxProductWxc1800.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWxc1800.setDescription(' WAN Acceleration Model 1800')
jnxWxProductWxc2600 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 13))
if mibBuilder.loadTexts: jnxWxProductWxc2600.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWxc2600.setDescription(' WAN Acceleration Model 2600')
jnxWxProductWxc3400 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 14))
if mibBuilder.loadTexts: jnxWxProductWxc3400.setStatus('current')
if mibBuilder.loadTexts: jnxWxProductWxc3400.setDescription(' WAN Acceleration Model 3400')
mibBuilder.exportSymbols("JUNIPER-WX-GLOBAL-REG", jnxWxProductWx20=jnxWxProductWx20, jnxWxModules=jnxWxModules, jnxWxExpr=jnxWxExpr, jnxWxProductWx100=jnxWxProductWx100, jnxWxReqs=jnxWxReqs, jnxWxProductIsm200Wxc=jnxWxProductIsm200Wxc, jnxWxProductWxc250=jnxWxProductWxc250, jnxWxCaps=jnxWxCaps, jnxWxSpecificMib=jnxWxSpecificMib, jnxWxProductWx60=jnxWxProductWx60, jnxWxProductWxc500=jnxWxProductWxc500, jnxWxProductWxc590=jnxWxProductWxc590, jnxWxProductWx80=jnxWxProductWx80, jnxWxReg=jnxWxReg, jnxWxMibs=jnxWxMibs, jnxWxProduct=jnxWxProduct, jnxWxProductWx50=jnxWxProductWx50, PYSNMP_MODULE_ID=jnxWxGlobalRegModule, jnxWxProductWxc2600=jnxWxProductWxc2600, jnxWxProductWxc3400=jnxWxProductWxc3400, jnxWxProductWxc1800=jnxWxProductWxc1800, jnxWxProductWx15=jnxWxProductWx15, jnxWxGlobalRegModule=jnxWxGlobalRegModule, juniperWxRoot=juniperWxRoot, jnxWxCommonMib=jnxWxCommonMib, jnxWxProductWx55=jnxWxProductWx55)
