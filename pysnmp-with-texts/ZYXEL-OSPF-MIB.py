#
# PySNMP MIB module ZYXEL-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ospfAddressLessIf, ospfNbrIpAddr, ospfNbrAddressLessIndex, ospfLsdbType, ospfLsdbRouterId, ospfVirtIfAreaId, ospfIfIpAddress, ospfAreaId, ospfVirtIfNeighbor, ospfLsdbAreaId, ospfLsdbLsid = mibBuilder.importSymbols("OSPF-MIB", "ospfAddressLessIf", "ospfNbrIpAddr", "ospfNbrAddressLessIndex", "ospfLsdbType", "ospfLsdbRouterId", "ospfVirtIfAreaId", "ospfIfIpAddress", "ospfAreaId", "ospfVirtIfNeighbor", "ospfLsdbAreaId", "ospfLsdbLsid")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Counter64, iso, TimeTicks, Integer32, Unsigned32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Counter64", "iso", "TimeTicks", "Integer32", "Unsigned32", "Gauge32", "ModuleIdentity")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelOspf = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57))
if mibBuilder.loadTexts: zyxelOspf.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelOspf.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelOspf.setContactInfo('')
if mibBuilder.loadTexts: zyxelOspf.setDescription('The subtree for Open Shortest Path First (OSPF)')
zyxelOspfSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1))
zyxelOspfStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2))
zyxelOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 1), )
if mibBuilder.loadTexts: zyxelOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfIfTable.setDescription('The table contains OSPF interface configuration.')
zyxelOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 1, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"))
if mibBuilder.loadTexts: zyxelOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfIfEntry.setDescription('An entry contains OSPF interface configuration')
zyOspfIfKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyOspfIfKeyId.setStatus('current')
if mibBuilder.loadTexts: zyOspfIfKeyId.setDescription('Specify the identification number of the authentication if you want to use.')
zyxelOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 2), )
if mibBuilder.loadTexts: zyxelOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfAreaTable.setDescription('The table contains OSPF area configuration.')
zyxelOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 2, 1), ).setIndexNames((0, "OSPF-MIB", "ospfAreaId"))
if mibBuilder.loadTexts: zyxelOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfAreaEntry.setDescription('An entry contains OSPF area configuration.')
zyOspfAreaName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyOspfAreaName.setStatus('current')
if mibBuilder.loadTexts: zyOspfAreaName.setDescription('Specify a descriptive name (up to 32 printable ASCII characters) for identification purposes.')
zyxelOspfRedistributeRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 3), )
if mibBuilder.loadTexts: zyxelOspfRedistributeRouteTable.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfRedistributeRouteTable.setDescription('The table contains OSPF redistribute route configuration.')
zyxelOspfRedistributeRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 3, 1), ).setIndexNames((0, "ZYXEL-OSPF-MIB", "zyOspfRedistributeRouteProtocol"))
if mibBuilder.loadTexts: zyxelOspfRedistributeRouteEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfRedistributeRouteEntry.setDescription('An entry contains OSPF redistribute route configuration.')
zyOspfRedistributeRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rip", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfRedistributeRouteProtocol.setStatus('current')
if mibBuilder.loadTexts: zyOspfRedistributeRouteProtocol.setDescription('Route redistribution allows your switch to import and translate external routes learned through RIP routing protocol or configured manually (Static) into the OSPF network transparently.')
zyOspfRedistributeRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 3, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyOspfRedistributeRouteState.setStatus('current')
if mibBuilder.loadTexts: zyOspfRedistributeRouteState.setDescription('Enable/Disable the routing protocol to activate route redistribution for routes learned.')
zyOspfRedistributeRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyOspfRedistributeRouteType.setStatus('current')
if mibBuilder.loadTexts: zyOspfRedistributeRouteType.setDescription('Select 1 for routing protocols (such as RIP) whose external metrics are directly comparable to the internal OSPF cost. When selecting a path, the internal OSPF cost is added to the AB boundary router to the external metrics. Select 2 for routing protocols whose external metrics are not comparable to the OSPF cost. In this case, the external cost of the AB boundary router is used in path decision to a destination.')
zyOspfRedistributeRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyOspfRedistributeRouteMetric.setStatus('current')
if mibBuilder.loadTexts: zyOspfRedistributeRouteMetric.setDescription('Specify a route cost (between 0 and 16777215).')
zyxelOspfVirtualLinkTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 4), )
if mibBuilder.loadTexts: zyxelOspfVirtualLinkTable.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfVirtualLinkTable.setDescription('The table contains OSPF virtual link configuration.')
zyxelOspfVirtualLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 4, 1), ).setIndexNames((0, "OSPF-MIB", "ospfVirtIfAreaId"), (0, "OSPF-MIB", "ospfVirtIfNeighbor"))
if mibBuilder.loadTexts: zyxelOspfVirtualLinkEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfVirtualLinkEntry.setDescription('An entry contains OSPF virtual link configuration.')
zyOspfVirtualLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyOspfVirtualLinkName.setStatus('current')
if mibBuilder.loadTexts: zyOspfVirtualLinkName.setDescription('Specify a descriptive name (up to 32 printable ASCII characters) for identification purpose.')
zyOspfVirtualLinkKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyOspfVirtualLinkKeyId.setStatus('current')
if mibBuilder.loadTexts: zyOspfVirtualLinkKeyId.setDescription('Specify the identification number of the authentication you want to use.')
zyOspfMaxNumberOfSummaryAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfMaxNumberOfSummaryAddress.setStatus('current')
if mibBuilder.loadTexts: zyOspfMaxNumberOfSummaryAddress.setDescription('The maximum number of summary address that can be created.')
zyxelOspfSummaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 6), )
if mibBuilder.loadTexts: zyxelOspfSummaryAddressTable.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfSummaryAddressTable.setDescription('The table contains OSPF summary address configuration.')
zyxelOspfSummaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 6, 1), ).setIndexNames((0, "ZYXEL-OSPF-MIB", "zyOspfSummaryAddressIpAddress"), (0, "ZYXEL-OSPF-MIB", "zyOspfSummaryAddressMaskBits"))
if mibBuilder.loadTexts: zyxelOspfSummaryAddressEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfSummaryAddressEntry.setDescription('An entry contains OSPF summary address configuration.')
zyOspfSummaryAddressIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: zyOspfSummaryAddressIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyOspfSummaryAddressIpAddress.setDescription('Specify a network IP address which can cover more than one network in order to reduce the routing table size. For example, you can use 192.168.8.0/22 instead of using 192.168.8.0/24, 192.168.9.0/24, 192.168.10.0/24, and 192.168.11.0/24. The third octet of these four network IP addresses is 00001000, 00001001, 00001010, 00001011 respectively. The first 6 digits (000010) are the common part among these IP addresses. So 192.168.8.0/22 can represent all of these networks.')
zyOspfSummaryAddressMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfSummaryAddressMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyOspfSummaryAddressMaskBits.setDescription('Specify the subnet mask for this summary IP address which can cover multiple networks.')
zyOspfSummaryAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyOspfSummaryAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyOspfSummaryAddressRowStatus.setDescription('This object allow entries to be created and deleted from the summary address table.')
zyxelOspfGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 7))
zyOspfDistance = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyOspfDistance.setStatus('current')
if mibBuilder.loadTexts: zyOspfDistance.setDescription('The administrative distance of OSPF routes.')
zyxelOspfIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 1), )
if mibBuilder.loadTexts: zyxelOspfIfInfoTable.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfIfInfoTable.setDescription('The table contains OSPF interface information.')
zyxelOspfIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 1, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"))
if mibBuilder.loadTexts: zyxelOspfIfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfIfInfoEntry.setDescription('An entry contains OSPF interface information.')
zyOspfIfInfoMaskbits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfIfInfoMaskbits.setStatus('current')
if mibBuilder.loadTexts: zyOspfIfInfoMaskbits.setDescription('The subnet mask bits of an IP routing domain that is associated to this interface.')
zyOspfIfInfoDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfIfInfoDesignatedRouterID.setStatus('current')
if mibBuilder.loadTexts: zyOspfIfInfoDesignatedRouterID.setDescription('The IP Address of the Designated Router.')
zyOspfIfInfoBackupDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfIfInfoBackupDesignatedRouterID.setStatus('current')
if mibBuilder.loadTexts: zyOspfIfInfoBackupDesignatedRouterID.setDescription('The IP Address of the Backup Designated Router.')
zyOspfIfInfoNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfIfInfoNbrCount.setStatus('current')
if mibBuilder.loadTexts: zyOspfIfInfoNbrCount.setDescription('Regardless of state, counting all adjacent neighbors.')
zyOspfIfInfoAdjacentNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfIfInfoAdjacentNbrCount.setStatus('current')
if mibBuilder.loadTexts: zyOspfIfInfoAdjacentNbrCount.setDescription('Counting the adjacent neighbor if its state is full.')
zyOspfIfInfoHelloDueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfIfInfoHelloDueTime.setStatus('current')
if mibBuilder.loadTexts: zyOspfIfInfoHelloDueTime.setDescription('The interface would send hello packet when the due time is timeout.')
zyxelOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 2), )
if mibBuilder.loadTexts: zyxelOspfNbrTable.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfNbrTable.setDescription('The table contains OSPF neighbor information.')
zyxelOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 2, 1), ).setIndexNames((0, "OSPF-MIB", "ospfNbrIpAddr"), (0, "OSPF-MIB", "ospfNbrAddressLessIndex"))
if mibBuilder.loadTexts: zyxelOspfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfNbrEntry.setDescription('An entry contains OSPF neighbor information.')
zyOspfNbrRole = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dr", 1), ("backup", 2), ("drOther", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfNbrRole.setStatus('current')
if mibBuilder.loadTexts: zyOspfNbrRole.setDescription('This variable display the neighbor role.')
zyOspfNbrDeadtime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfNbrDeadtime.setStatus('current')
if mibBuilder.loadTexts: zyOspfNbrDeadtime.setDescription('The neighbor would be disconnect when the dead time is timeout. The dead time would be reset when the switch receives hello packet from the neighbor.')
zyOspfNbrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfNbrInterface.setStatus('current')
if mibBuilder.loadTexts: zyOspfNbrInterface.setDescription('The interface is connected with the neighbor.')
zyOspfNbrRetransmitLSA = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfNbrRetransmitLSA.setStatus('current')
if mibBuilder.loadTexts: zyOspfNbrRetransmitLSA.setDescription('The list of LSAs that have been flooded but not acknowledged on this adjacency. These will be retransmitted at intervals until they are acknowledged, or until the adjacency is destroyed.')
zyOspfNbrRequestLSA = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfNbrRequestLSA.setStatus('current')
if mibBuilder.loadTexts: zyOspfNbrRequestLSA.setDescription("The list of LSAs that need to be received from this neighbor in order to synchronize the two neighbors' link-state databases. This list is created as Database Description packets are received, and is then sent to the neighbor in Link State Request packets. The list is depleted as appropriate Link State Update packets are received.")
zyOspfNbrDatabaseSummaryLSA = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfNbrDatabaseSummaryLSA.setStatus('current')
if mibBuilder.loadTexts: zyOspfNbrDatabaseSummaryLSA.setDescription('The complete list of LSAs that make up the area link-state database, at the moment the neighbor goes into Database Exchange state. This list is sent to the neighbor in DatabaseDescription packets.')
zyxelOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 3), )
if mibBuilder.loadTexts: zyxelOspfLsdbTable.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfLsdbTable.setDescription('The table contains OSPF link state database information.')
zyxelOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 3, 1), ).setIndexNames((0, "OSPF-MIB", "ospfLsdbAreaId"), (0, "OSPF-MIB", "ospfLsdbType"), (0, "OSPF-MIB", "ospfLsdbLsid"), (0, "OSPF-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: zyxelOspfLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelOspfLsdbEntry.setDescription('An entry contains OSPF link state database information.')
zyOspfLsdbLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfLsdbLinkCount.setStatus('current')
if mibBuilder.loadTexts: zyOspfLsdbLinkCount.setDescription('Display how many link in this Link State Database.')
zyOspfLsdbRouteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfLsdbRouteIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyOspfLsdbRouteIpAddress.setDescription('Display the ip address of routing domain in this Link State Database.')
zyOspfLsdbRouteMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 57, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyOspfLsdbRouteMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyOspfLsdbRouteMaskBits.setDescription('Display the mask bits of routing domain in this Link State Database.')
mibBuilder.exportSymbols("ZYXEL-OSPF-MIB", zyOspfVirtualLinkKeyId=zyOspfVirtualLinkKeyId, zyOspfNbrRequestLSA=zyOspfNbrRequestLSA, zyxelOspfGeneralGroup=zyxelOspfGeneralGroup, zyOspfNbrRole=zyOspfNbrRole, zyOspfLsdbLinkCount=zyOspfLsdbLinkCount, zyxelOspfIfEntry=zyxelOspfIfEntry, zyOspfIfInfoHelloDueTime=zyOspfIfInfoHelloDueTime, zyxelOspfRedistributeRouteEntry=zyxelOspfRedistributeRouteEntry, zyOspfRedistributeRouteProtocol=zyOspfRedistributeRouteProtocol, zyxelOspfSummaryAddressTable=zyxelOspfSummaryAddressTable, zyxelOspfIfInfoEntry=zyxelOspfIfInfoEntry, PYSNMP_MODULE_ID=zyxelOspf, zyOspfNbrInterface=zyOspfNbrInterface, zyOspfAreaName=zyOspfAreaName, zyOspfIfInfoDesignatedRouterID=zyOspfIfInfoDesignatedRouterID, zyOspfNbrDeadtime=zyOspfNbrDeadtime, zyxelOspfAreaEntry=zyxelOspfAreaEntry, zyOspfSummaryAddressIpAddress=zyOspfSummaryAddressIpAddress, zyOspfLsdbRouteIpAddress=zyOspfLsdbRouteIpAddress, zyOspfIfInfoAdjacentNbrCount=zyOspfIfInfoAdjacentNbrCount, zyOspfRedistributeRouteState=zyOspfRedistributeRouteState, zyOspfIfInfoMaskbits=zyOspfIfInfoMaskbits, zyOspfIfInfoBackupDesignatedRouterID=zyOspfIfInfoBackupDesignatedRouterID, zyOspfMaxNumberOfSummaryAddress=zyOspfMaxNumberOfSummaryAddress, zyOspfNbrDatabaseSummaryLSA=zyOspfNbrDatabaseSummaryLSA, zyxelOspfVirtualLinkEntry=zyxelOspfVirtualLinkEntry, zyxelOspfIfTable=zyxelOspfIfTable, zyOspfIfKeyId=zyOspfIfKeyId, zyxelOspf=zyxelOspf, zyxelOspfLsdbTable=zyxelOspfLsdbTable, zyxelOspfNbrTable=zyxelOspfNbrTable, zyxelOspfNbrEntry=zyxelOspfNbrEntry, zyxelOspfIfInfoTable=zyxelOspfIfInfoTable, zyxelOspfStatus=zyxelOspfStatus, zyxelOspfRedistributeRouteTable=zyxelOspfRedistributeRouteTable, zyxelOspfSetup=zyxelOspfSetup, zyxelOspfVirtualLinkTable=zyxelOspfVirtualLinkTable, zyOspfNbrRetransmitLSA=zyOspfNbrRetransmitLSA, zyOspfSummaryAddressMaskBits=zyOspfSummaryAddressMaskBits, zyOspfIfInfoNbrCount=zyOspfIfInfoNbrCount, zyxelOspfAreaTable=zyxelOspfAreaTable, zyxelOspfLsdbEntry=zyxelOspfLsdbEntry, zyxelOspfSummaryAddressEntry=zyxelOspfSummaryAddressEntry, zyOspfDistance=zyOspfDistance, zyOspfRedistributeRouteType=zyOspfRedistributeRouteType, zyOspfRedistributeRouteMetric=zyOspfRedistributeRouteMetric, zyOspfSummaryAddressRowStatus=zyOspfSummaryAddressRowStatus, zyOspfLsdbRouteMaskBits=zyOspfLsdbRouteMaskBits, zyOspfVirtualLinkName=zyOspfVirtualLinkName)
