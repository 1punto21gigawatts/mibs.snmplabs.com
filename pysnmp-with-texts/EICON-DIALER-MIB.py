#
# PySNMP MIB module EICON-DIALER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EICON-DIALER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, enterprises, iso, Integer32, ObjectIdentity, TimeTicks, Gauge32, ModuleIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "enterprises", "iso", "Integer32", "ObjectIdentity", "TimeTicks", "Gauge32", "ModuleIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
class PortRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class ActionState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("done", 1), ("failed", 2), ("in-progress", 3))

class DataEncoding(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("nrz", 1), ("nrzi", 2), ("fm0", 3), ("fm1", 4))

class ClockType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("external", 1), ("internal", 2), ("ext-dpll", 3), ("int-dpll", 4))

class OnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class FalseTrue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("false", 1), ("true", 2))

class DisEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class PrimBitRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("speed1200", 1), ("speed2400", 2), ("speed4800", 3), ("speed7200", 4), ("speed9600", 5), ("speed12000", 6), ("speed14400", 7), ("not-supported", 8))

class PrimCfg(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("v22bis", 1), ("v32", 2), ("v32tcm", 3), ("v32bis", 4), ("not-supported", 5))

class IsdnSpidStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("uninit", 1), ("init", 2), ("blocked", 3), ("illegal", 4))

class IsdnDnType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("international", 2), ("national", 3), ("net-specific", 4), ("subscriber", 5), ("abbreviated", 6), ("illegal", 7))

class IsdnDnPlan(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("isdn-numbering", 2), ("data-numbering", 3), ("private-net", 4), ("telex-numbering", 5), ("nat-numbering", 6), ("illegal", 7))

class IsdnSubType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("nsap", 1), ("user-specified", 2), ("osi", 3), ("illegal", 4))

class IsdnTnsNetId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("user-specified", 1), ("national", 2), ("international", 3), ("illegal", 4))

class IsdnTnsIdPlan(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("interlata", 2), ("data", 3), ("illegal", 4))

class IsdnCallType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("circuit-switched", 1), ("packet-switched", 2), ("nailed-packet", 3), ("circuit-spv", 4), ("fax-3", 5), ("fax-4", 6), ("btx", 7), ("teletex", 8), ("videotex", 9), ("illegal", 10))

class IsdnCallSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("speed-56k", 1), ("speed-64k", 2), ("speed-illegal", 3))

class IsdnBChannels(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("b1-channel", 1), ("b2-channel", 2), ("illegal", 3))

class IsdnAnsEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2), ("enabled-illegal", 3))

class IsdnScrStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2), ("illegal", 3))

class IsdnCallOpt(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("opt", 1), ("option", 2), ("call-opt", 3))

class IsdnStoDefined(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("stored", 1))

class IsdnTeiStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unassigned", 1), ("outstanding", 2), ("assigned", 3), ("illegal", 4))

class IsdnL2State(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("null-state", 1), ("tei-unassigned", 2), ("assign-awaiting-tei", 3), ("establish-awaiting-tei", 4), ("tei-assigned", 5), ("awaiting-established", 6), ("awaiting-release", 7), ("mutiple-frame-established", 8), ("timer-recovery", 9), ("illegal", 10))

class IsdnL3State(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))
    namedValues = NamedValues(("null-state", 1), ("call-init", 2), ("overlap-sending", 3), ("out-call-proc", 4), ("call-delivered", 5), ("undefined-state-5", 6), ("call-present", 7), ("call-received", 8), ("connect-request", 9), ("in-call-proc", 10), ("call-active", 11), ("disconnect-request", 12), ("disconnect-ind", 13), ("undefined-state-13", 14), ("call-passive", 15), ("suspend-request", 16), ("undefined-state-16", 17), ("resume-request", 18), ("undefined-state-18", 19), ("release-request", 20), ("register-request", 21), ("cancel-request", 22), ("undefined-state-22", 23), ("undefined-state-23", 24), ("undefined-state-24", 25), ("overlap-receive", 26), ("idle-state", 27), ("establish-wait", 28), ("asai-tr1-state", 29), ("u10-hold-request", 30), ("u10-transfer-request", 31), ("u10-conference-request", 32), ("u10-reconnect-request", 33), ("u10-awaiting-disc", 34), ("u10-call-on-hold", 35), ("broadcast-state", 36), ("illegal", 37))

class IsdnP3State(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("closed", 1), ("opening", 2), ("opened", 3), ("tei-establishment", 4), ("sw-activation", 5), ("activated", 6), ("deactivated", 7), ("closing", 8), ("illegal", 9))

class IsdnActState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("deactivated", 1), ("activating", 2), ("active", 3), ("call-failed", 4), ("activ-failed", 5), ("illegal", 6))

class IsdnNI1BCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connected", 4), ("dialing", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routing", 10), ("call-queued", 11), ("illegal", 12))

class IsdnTR6BCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connecting", 4), ("connected", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routing", 10), ("call-queued", 11), ("illegal", 12))

class IsdnVN3BCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connecting", 4), ("connected", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routing", 10), ("call-queued", 11), ("illegal", 12))

class IsdnNET3BCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connecting", 4), ("connected", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routingout", 10), ("call-queued", 11), ("bell-releasing", 12), ("illegal", 13))

class IsdnTPHBCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connected", 4), ("dialing", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routing", 10), ("call-queued", 11), ("illegal", 12))

dialer = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16))
dialerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1), )
if mibBuilder.loadTexts: dialerInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoTable.setDescription('General Information Table for dailer.')
dialerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerInfoPortRef"))
if mibBuilder.loadTexts: dialerInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoPortRef.setDescription('The id of the port, equal to portIndex from the port group. It identifies the port to which the configuration parameters apply.')
dialerInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("direct", 1), ("v25bis", 2), ("v22bis", 3), ("at-cmd", 4), ("isdn-stat", 5), ("v32bis", 6), ("none", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoType.setDescription(' Type of interface connecting the gateway to local or remote host computers.')
dialerInfoTimeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoTimeStart.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoTimeStart.setDescription('The time elapsed since the dialer was statrted.')
dialerInfoTimeConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoTimeConnect.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoTimeConnect.setDescription('The time elapsed since the dialer established the current connection.')
dialerInfoLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoLineSpeed.setDescription('The speed setting of the driver (line speed), or the dialer (modem speed).')
dialerInfoDataEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 6), DataEncoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoDataEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoDataEncoding.setDescription('The type of data encoding used on the connection.')
dialerInfoClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 7), ClockType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoClockType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerInfoClockType.setDescription('The type of clocking used by the modem.')
dialerDirectInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2), )
if mibBuilder.loadTexts: dialerDirectInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectInfoTable.setDescription('General Information Table for Direct dialer.')
dialerDirectInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerDirectPortRef"))
if mibBuilder.loadTexts: dialerDirectInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectInfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerDirectPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectPortRef.setDescription('The id of the port, equal to portIndex from the port group. It identifies the port to which the configuration parameters apply.')
dialerDirectIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("x21", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectIfType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectIfType.setDescription(' Interface type of the Dialer')
dialerDirectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("dial", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectMode.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectMode.setDescription('States whether the modem is connected to a Leased or Dial-Up phone line.')
dialerDirectConnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectConnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectConnDelay.setDescription(' Max time for connection in seconds.')
dialerDirectRtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRtsDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectRtsDelay.setDescription(' Delay between arrival of DSR and activation of RTS circuit in msec.')
dialerDirectState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("closed", 1), ("opening", 2), ("answering", 3), ("delaying", 4), ("opened", 5), ("closing", 6), ("ringing", 7), ("answer-wait", 8), ("originating", 9), ("connecting", 10), ("connect-delay", 11), ("connected", 12), ("disconnecting", 13), ("remote-disc", 14), ("local-disc", 15), ("connect-req", 16), ("incomming-call", 17), ("outgoing-call", 18), ("outgoing-delay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectState.setDescription('State of the Direct dialer: closed(1) - Modem signals on a dial modem were lost. opening(2) - Link is being set up (modem dialing). asnwering(3) - Accepting call from remote. delaying(4) - Waiting for a timer to expire. opened(5) - Physical link is established. Closing(6) - Disconnecting the physical link. ringing (7) - answer-wait (8) - originating (9) - connecting (10) - connect-delay (11) - connected (12) - disconnecting (13) - remote-disc (14) - local-disc (15) - connect-req (16) - incomming-call (17) - outgoing-call (18) - outgoing-delay (19) - ')
dialerDirectRs232InfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3), )
if mibBuilder.loadTexts: dialerDirectRs232InfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectRs232InfoTable.setDescription('General Information Table for Direct dialer RS232.')
dialerDirectRs232InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerDirectRs232PortRef"))
if mibBuilder.loadTexts: dialerDirectRs232InfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectRs232InfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerDirectRs232PortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRs232PortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectRs232PortRef.setDescription('The id of the port, equal to portIndex from the port group. It identifies the port to which the configuration parameters apply.')
dialerDirectRs232DbounceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRs232DbounceDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectRs232DbounceDelay.setDescription(' This applies to Leased line only. It is the amount of time, expressed in msecs, that DSR signal stays on.')
dialerDirectRs232DtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 3), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRs232DtrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectRs232DtrSignal.setDescription(' The current status of the DTR signal. ')
dialerDirectRs232DsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 4), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerDirectRs232DsrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectRs232DsrSignal.setDescription(' The current status of the DSR signal.')
dialerDirectRs232RiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 5), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRs232RiSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectRs232RiSignal.setDescription(' The current status of the RI signal. This is set to ON when there is an incoming call.')
dialerDirectX21InfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4), )
if mibBuilder.loadTexts: dialerDirectX21InfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectX21InfoTable.setDescription('General Information Table for Direct dialer X21.')
dialerDirectX21InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerDirectX21PortRef"))
if mibBuilder.loadTexts: dialerDirectX21InfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectX21InfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerDirectX21PortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectX21PortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectX21PortRef.setDescription('The id of the port, equal to portIndex from the port group. It identifies the port to which the configuration parameters apply.')
dialerDirectX21CtrlSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4, 1, 2), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectX21CtrlSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectX21CtrlSignal.setDescription(' The control circuit status.')
dialerDirectX21IndicSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4, 1, 3), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectX21IndicSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerDirectX21IndicSignal.setDescription('The indication circuit status.')
dialerV25bisInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5), )
if mibBuilder.loadTexts: dialerV25bisInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisInfoTable.setDescription('General Information Table for V25Bis dialer.')
dialerV25bisInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerV25bisPortRef"))
if mibBuilder.loadTexts: dialerV25bisInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisInfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerV25bisPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisPortRef.setDescription('The Port Number.')
dialerV25bisPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV25bisPrimaryNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisPrimaryNum.setDescription('The main telephone number stored in the dialer.')
dialerV25bisSecondaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV25bisSecondaryNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisSecondaryNum.setDescription('The alternate telephone number stored in the dialer. This number is dialed if the main number is busy of if there is no answer.')
dialerV25bisAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 4), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV25bisAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisAnsEnable.setDescription('States whether or not the dialer answers incoming calls.')
dialerV25bisRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 5), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisRetryAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisRetryAllowed.setDescription('Indicates whether or not the dialer will try to redial a number that is busy or does not answer.')
dialerV25bisMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisMaxRetries.setDescription('Specifies how many times a number will be redialed if it is busy or otherwise unresponsive.')
dialerV25bisRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisRetryDelay.setDescription('The amount of time in msecs between redial attempts.')
dialerV25bisConnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisConnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisConnDelay.setDescription('Maximum delay for connection establishment (secs).')
dialerV25bisOnOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisOnOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisOnOffDelay.setDescription('The delay allowed in seconds for the DSR to go off before hangup.')
dialerV25bisLossDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisLossDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisLossDelay.setDescription('Amount of delay in msecs before DSR debouncing for OFF.')
dialerV25bisMinDsrOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisMinDsrOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisMinDsrOnDelay.setDescription('Amount of delay in msecs before DSR debouncing for ON.')
dialerV25bisRiDtrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisRiDtrDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisRiDtrDelay.setDescription('Amount of delay in msec before raising DTR when RING occurs.')
dialerV25bisHangupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisHangupDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisHangupDelay.setDescription('Amount of delay in secs before hangup, if DSR goes OFF in connected state.')
dialerV25bisDeltaRiDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisDeltaRiDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisDeltaRiDelay.setDescription('Delay in msecs before rings are no longer occur.')
dialerV25bisCtsOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisCtsOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisCtsOnDelay.setDescription('Maximum delay in msecs for sending a message to the modem.')
dialerV25bisDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 16), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisDtrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisDtrSignal.setDescription('DTR status.')
dialerV25bisDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 17), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisDsrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisDsrSignal.setDescription('DSR status.')
dialerV25bisCtsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 18), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisCtsSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisCtsSignal.setDescription('CTS status.')
dialerV25bisRiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 19), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisRiSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisRiSignal.setDescription('RI status.')
dialerV25bisState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("on-hook", 1), ("ready", 2), ("dialing", 3), ("connect", 4), ("data-tran", 5), ("retrying", 6), ("ringing", 7), ("ans-start", 8), ("ans-cplt", 9), ("hanging-up", 10), ("ignore-ring", 11), ("collision", 12), ("ans-accepting", 13), ("prog-rdy", 14), ("program", 15), ("prog-ring", 16), ("prog-not-rdy", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV25bisState.setDescription(' The status of the V.25bis modem: on-hook (1) - Modem not active ready (2) - Connection established dialing (3) - Dialing a number connect (4) - Successful dial attemp data-tran (5) - Data transfer state enabled retrying (6) - Awaiting call attempt ringing (7) - Incoming call present ans-start (8) - Connect request received ans-cplt (9) - Call establised. hanging-up (10) - Dialer disconnecting from DCE ignore-ring (11) - Ringing signal ignored collision (12) - Collision between connection request and incoming call ans-accepting (13) - Accepted incoming call prog-rdy (14) - Dialer ready to communicate with modem program (15) - Modem ready to communicate with dialer prog-ring (16) - Signal detected from DCE prog-not-rdy (17) - Dialer not ready to communicate with modem. ')
dialerAtCmdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6), )
if mibBuilder.loadTexts: dialerAtCmdInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdInfoTable.setDescription('General Information Table for AT-CMD dialer.')
dialerAtCmdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerAtCmdPortRef"))
if mibBuilder.loadTexts: dialerAtCmdInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdInfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerAtCmdPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdPortRef.setDescription('The Port Number.')
dialerAtCmdPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerAtCmdPrimaryNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdPrimaryNum.setDescription('The main telephone number stored in the dialer.')
dialerAtCmdSecondaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerAtCmdSecondaryNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdSecondaryNum.setDescription('The alternate telephone number stored in the dialer. This number is dialed if the main number is busy or if there is no answer.')
dialerAtCmdAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 4), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerAtCmdAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdAnsEnable.setDescription('States whether or not the dialer answers incoming calls.')
dialerAtCmdRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 5), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdRetryAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdRetryAllowed.setDescription('Indicates whether or not the dialer will try to redial a number that is busy or does not answer.')
dialerAtCmdMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdMaxRetries.setDescription('Specifies how many times a number will be redialed if it is busy or otherwise unresponsive.')
dialerAtCmdRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdRetryDelay.setDescription('The amount of time in msecs between redial attempts.')
dialerAtCmdConnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdConnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdConnDelay.setDescription('Maximum delay for connection establishment (secs).')
dialerAtCmdOnOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdOnOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdOnOffDelay.setDescription('The delay allowed in seconds for the DSR signal to go off before hangup.')
dialerAtCmdLossDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdLossDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdLossDelay.setDescription('Number of msecs allowed before DSR debouncing for OFF.')
dialerAtCmdMinDsrOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdMinDsrOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdMinDsrOnDelay.setDescription('msecs DSR debouncing for ON before going OFF.')
dialerAtCmdRiDtrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdRiDtrDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdRiDtrDelay.setDescription('Amount of delay in msec, before raising DTR when RING occurs.')
dialerAtCmdHangupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdHangupDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdHangupDelay.setDescription('Amount of delay in secs before hangup, if DSR goes OFF in connected state.')
dialerAtCmdDeltaRiDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdDeltaRiDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdDeltaRiDelay.setDescription('delay in msecs before rings no longer occur.')
dialerAtCmdParity = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdParity.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdParity.setDescription('The parity.')
dialerAtCmdBitsPerByte = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data7", 1), ("data8", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdBitsPerByte.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdBitsPerByte.setDescription('The number of data bits per byte.')
dialerAtCmdModemSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdModemSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdModemSpeed.setDescription('Modem Speed.')
dialerAtCmdDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 18), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdDtrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdDtrSignal.setDescription('DTR status.')
dialerAtCmdDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 19), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdDsrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdDsrSignal.setDescription('DSR status.')
dialerAtCmdRiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 20), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdRiSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdRiSignal.setDescription('RI status.')
dialerAtCmdState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("on-hook", 1), ("dialing", 2), ("answering", 3), ("ringing", 4), ("retrying", 5), ("off-hook", 6), ("hanging-up", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerAtCmdState.setDescription(' The status of the AT modem: on-hook (1) - modem not active dialing (2) - dialing a number answering (3) - accepting call from remote ringing (4) - incoming call present retrying (5) - awaiting new call attempt off-hook (6) - Modem active hanging-up (7) - Disconnecting from DCE ')
dialerV22BisDnaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7), )
if mibBuilder.loadTexts: dialerV22BisDnaInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaInfoTable.setDescription('General Information Table for V22BISDNA dialer.')
dialerV22BisDnaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerV22BisDnaPortRef"))
if mibBuilder.loadTexts: dialerV22BisDnaInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaInfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerV22BisDnaPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaPortRef.setDescription('The Port Number.')
dialerV22BisDnaPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisDnaPrimaryNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaPrimaryNum.setDescription('The main telephone number stored in the dialer.')
dialerV22BisDnaSecondaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisDnaSecondaryNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaSecondaryNum.setDescription('The alternate telephone number stored in the dialer. This number is dialed if the main number is busy or if there is no answer.')
dialerV22BisDnaAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 4), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisDnaAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaAnsEnable.setDescription('States whether or not the dialer answers incoming calls.')
dialerV22BisDnaRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 5), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRetryAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaRetryAllowed.setDescription('Indicates whether or not the dialer will try to redial a number that is busy or does not answer.')
dialerV22BisDnaMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaMaxRetries.setDescription('Specifies how many times a number will be redialed if it is busy or otherwise unresponsive.')
dialerV22BisDnaCallProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 7), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaCallProgress.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaCallProgress.setDescription('Call progress tone detection.')
dialerV22BisDnaDecadic = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 8), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDecadic.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDecadic.setDescription('Indicates whether Decadic dialing is active or not. Decadic dialing does the following: each digit you dial is subtracted from 10, and the result is the number actually dialed.')
dialerV22BisDnaMakeBreakRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaMakeBreakRatio.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaMakeBreakRatio.setDescription('Ratio for PULSE and DIAL make and break time.')
dialerV22BisDnaRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaRetryDelay.setDescription('The amount of time in msecs between redial attempts.')
dialerV22BisDnaMinDialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaMinDialDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaMinDialDelay.setDescription('The length of delay (msec) associated with a comma placed in a dialing command.')
dialerV22BisDnaWaitDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaWaitDialTone.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaWaitDialTone.setDescription('The amount of time (msec) the modem waits when it encounters the wait for dial tone modifier in dial string.')
dialerV22BisDnaWaitCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaWaitCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaWaitCarrier.setDescription('The amount of time (msec) the modem waits for valid carrier after completing a dial.')
dialerV22BisDnaHndshkAbortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaHndshkAbortTimer.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaHndshkAbortTimer.setDescription('The amount of time (sec) allowed before the call is aborted if DSR does not go ON.')
dialerV22BisDnaGuardTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaGuardTone.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaGuardTone.setDescription('Indicates a guard tone frequency. ')
dialerV22BisDnaPulseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaPulseDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaPulseDelay.setDescription('The delay (msec) between digits dialed on a pulse line.')
dialerV22BisDnaDTMFDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDTMFDuration.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDTMFDuration.setDescription('The tone duration (msec) used in DMTF dialing.')
dialerV22BisDnaDTMFDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDTMFDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDTMFDelay.setDescription('The delay (msec) between digits dialed when in tone dial mode.')
dialerV22BisDnaDTMFLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDTMFLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDTMFLevel.setDescription('The tone dialing level attenuation in dB.')
dialerV22BisDnaTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaTxLevel.setDescription('The attenuation level (Db) on data transmission, once the handshake is completed with the remote modem.')
dialerV22BisDnaRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 21), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaRxLevel.setDescription('Minimum acceptable receiver threshold value. This indicates whether a 3dB attenuation is used on the receive signal at line input.')
dialerV22BisDnaRiNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRiNbr.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaRiNbr.setDescription('The number of rings required before the modem answers, if it is set to auto-answer mode.')
dialerV22BisDnaDeltaRiDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDeltaRiDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDeltaRiDelay.setDescription('delay in msecs before rings no longer occur.')
dialerV22BisDnaRiDtrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRiDtrDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaRiDtrDelay.setDescription('Amount of delay in msec, before raising DTR when RING occurs.')
dialerV22BisDnaDsrRtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDsrRtsDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDsrRtsDelay.setDescription(' Delay between arrival of DSR and activation of RTS circuit in msec.')
dialerV22BisDnaModemSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaModemSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaModemSpeed.setDescription('Modem Speed.')
dialerV22BisDnaDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 27), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDtrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDtrSignal.setDescription('DTR status.')
dialerV22BisDnaDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 28), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDsrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDsrSignal.setDescription('DSR status.')
dialerV22BisDnaRiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 29), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRiSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaRiSignal.setDescription('RI status.')
dialerV22BisDnaCdSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 30), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaCdSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaCdSignal.setDescription('Carrier detect status.')
dialerV22BisDnaToneInd = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 31), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaToneInd.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaToneInd.setDescription('Tone indication.')
dialerV22BisDnaDloInd = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 32), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDloInd.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaDloInd.setDescription('Dial line occupied indication.')
dialerV22BisDnaState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("dialing-phone", 1), ("dialing-mdm", 2), ("retrying", 3), ("ringing", 4), ("line-busy", 5), ("off-hook", 6), ("on-hook", 7), ("answering", 8), ("delaying", 9), ("voice-com", 10), ("handshaking", 11), ("wait-ringback", 12), ("initialising", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisDnaState.setDescription(' Status of the V22bis Dna modem: dialing-phone (1) - Dialing a number on the phone attached to the DNA phone plug. dialing-mdm (2) - Dialing a remote modem retrying (3) - Awaiting call attempt ringing (4) - Incoming call present line-busy (5) - Busy signal encountered off-hook (6) - Modem active on-hook (7) - Modem not active answering (8) - Accepting call from remote delaying (9) - Waiting for timer to expire voice-com (10) - the line is already used by a voice connection. handshaking (11) - Synchronizing calls with remote wait-ringback (12) - Awaiting remote response initialising (13) - initializing modem ')
dialerV22BisImcInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8), )
if mibBuilder.loadTexts: dialerV22BisImcInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcInfoTable.setDescription('General Information Table for V22BISIMC dialer.')
dialerV22BisImcInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerV22BisImcPortRef"))
if mibBuilder.loadTexts: dialerV22BisImcInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcInfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerV22BisImcPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcPortRef.setDescription('The Port Number.')
dialerV22BisImcPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisImcPrimaryNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcPrimaryNum.setDescription('The main telephone number stored in the dialer.')
dialerV22BisImcSecondaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisImcSecondaryNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcSecondaryNum.setDescription('The alternate telephone number stored in the dialer. This number is dialed if the main number is busy or if there is no answer.')
dialerV22BisImcAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 4), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisImcAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcAnsEnable.setDescription('States whether or not the dialer answers incoming calls.')
dialerV22BisImcRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 5), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRetryAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcRetryAllowed.setDescription('Indicates whether or not the dialer will try to redial a number that is busy or does not answer.')
dialerV22BisImcMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcMaxRetries.setDescription('Specifies how many times a number will be redialed if it is busy or otherwise unresponsive.')
dialerV22BisImcCallProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 7), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcCallProgress.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcCallProgress.setDescription('Call progress tone detection.')
dialerV22BisImcDecadic = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 8), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDecadic.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDecadic.setDescription('Indicates whether Decadic dialing is active or not. Decadic dialing does the following: each digit you dial is subtracted from 10, and the result is the number actually dialed.')
dialerV22BisImcMakeBreakRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcMakeBreakRatio.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcMakeBreakRatio.setDescription('Ratio of PULSE and DIAL make and break time.')
dialerV22BisImcRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcRetryDelay.setDescription('The amount of time in msecs between redial attempts.')
dialerV22BisImcMinDialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcMinDialDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcMinDialDelay.setDescription('The length of delay (msec) associated with a comma placed in a dialing command.')
dialerV22BisImcWaitDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcWaitDialTone.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcWaitDialTone.setDescription('The amount of time (msec) the modem waits when it encounters the wait for dial tone modifier in dial string.')
dialerV22BisImcWaitCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcWaitCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcWaitCarrier.setDescription('The amount of time (msec) the modem waits for valid carrier after completing a dial.')
dialerV22BisImcHndshkAbortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcHndshkAbortTimer.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcHndshkAbortTimer.setDescription('The amount of time (sec) allowed before the call is aborted if DSR does not go ON.')
dialerV22BisImcGuardTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcGuardTone.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcGuardTone.setDescription('Indicates a guard tone frequency. ')
dialerV22BisImcPulseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcPulseDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcPulseDelay.setDescription('The delay between (msec) digits dialed on a pulse line.')
dialerV22BisImcDTMFDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDTMFDuration.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDTMFDuration.setDescription('The tone (msec) duration used in DMTF dialing.')
dialerV22BisImcDTMFDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDTMFDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDTMFDelay.setDescription('The delay (msec) between digits dialed when in tone dial mode.')
dialerV22BisImcDTMFLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDTMFLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDTMFLevel.setDescription('The tone dialing level attenuation in dB.')
dialerV22BisImcTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcTxLevel.setDescription('The attenuation level (Db) on data transmission, once the handshake is completed with the remote modem.')
dialerV22BisImcRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcRxLevel.setDescription('Minimum acceptable receiver threshold value. This indicates whether a 3dB attenuation is used on the receive signal at line input.')
dialerV22BisImcRiNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRiNbr.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcRiNbr.setDescription('The numbet of rings required before the modem answers, if it is set to auto-answer mode.')
dialerV22BisImcDeltaRiDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDeltaRiDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDeltaRiDelay.setDescription('delay in msecs before rings no longer occur.')
dialerV22BisImcRiDtrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRiDtrDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcRiDtrDelay.setDescription('Amount of delay in msec, before raising DTR when RING occurs.')
dialerV22BisImcDsrRtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDsrRtsDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDsrRtsDelay.setDescription(' Delay between arrival of DSR and activation of RTS circuit in msec.')
dialerV22BisImcModemSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcModemSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcModemSpeed.setDescription('Modem Speed.')
dialerV22BisImcDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 27), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDtrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDtrSignal.setDescription('DTR status.')
dialerV22BisImcDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 28), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDsrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDsrSignal.setDescription('DSR status.')
dialerV22BisImcRiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 29), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRiSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcRiSignal.setDescription('RI status.')
dialerV22BisImcCdSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 30), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcCdSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcCdSignal.setDescription('Carrier Detect status.')
dialerV22BisImcToneInd = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 31), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcToneInd.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcToneInd.setDescription('Tone indication.')
dialerV22BisImcDloInd = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 32), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDloInd.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcDloInd.setDescription('Dial line occupied indication.')
dialerV22BisImcLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dial", 1), ("leased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcLineType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcLineType.setDescription('States whether the modem is connected to a Leased or Dial-Up phone line.')
dialerV22BisImcLeasedOpertn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcLeasedOpertn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcLeasedOpertn.setDescription('This applies to Leased line type only. This field states whether the dialer will go off-hook in Originate or Answer mode.')
dialerV22BisImcSpeakerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcSpeakerLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcSpeakerLevel.setDescription("The volume level of the Eiconcard's speaker.")
dialerV22BisImcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("dialing-phone", 1), ("dialing-mdm", 2), ("retrying", 3), ("ringing", 4), ("line-busy", 5), ("off-hook", 6), ("on-hook", 7), ("answering", 8), ("delaying", 9), ("voice-com", 10), ("handshaking", 11), ("wait-ringback", 12), ("initialising", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV22BisImcState.setDescription(' Status of the V22bis Imc modem: dialing-phone (1) - Dialing a number on the phone attached to the DNA phone plug. dialing-mdm (2) - Dialing a remote modem retrying (3) - Awaiting call attempt ringing (4) - Incoming call present line-busy (5) - Busy signal encountered off-hook (6) - Modem active on-hook (7) - Modem not active answering (8) - Accepting call from remote delaying (9) - Waiting for timer to expire voice-com (10) - the line is already used by a voice connection. handshaking (11) - Syncronizing calls with remote wait-ringback (12) - Awaiting remote response initialising (13) - initializing modem ')
dialerV32BisInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9), )
if mibBuilder.loadTexts: dialerV32BisInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisInfoTable.setDescription('General Information Table for V32Bis dialer.')
dialerV32BisInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerV32BisPortRef"))
if mibBuilder.loadTexts: dialerV32BisInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisInfoEntry.setDescription('The set of dialer configuration attributes for one port.')
dialerV32BisPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisPortRef.setDescription('The Port Number.')
dialerV32BisPrimNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV32BisPrimNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisPrimNum.setDescription('The main telephone number stored in the dialer.')
dialerV32BisSecNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV32BisSecNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisSecNum.setDescription('The alternate telephone number stored in the dialer. This number is dialed if the main number is busy or if there is no answer.')
dialerV32BisOverrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisOverrNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisOverrNum.setDescription('Override number.')
dialerV32BisCurrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCurrNum.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCurrNum.setDescription('Current number.')
dialerV32BisPrimBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 6), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPrimBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisPrimBitRate.setDescription('Default bit rate for primary number.')
dialerV32BisSecBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 7), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisSecBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisSecBitRate.setDescription('Default bit rate for secondary number.')
dialerV32BisOverrBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 8), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisOverrBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisOverrBitRate.setDescription('Default bit rate for override number.')
dialerV32BisCurrBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 9), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCurrBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCurrBitRate.setDescription('Default bit rate for current number.')
dialerV32BisPrimConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 10), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPrimConfig.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisPrimConfig.setDescription('Dial modem primary configuration')
dialerV32BisSecConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 11), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisSecConfig.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisSecConfig.setDescription('Dial modem secondary configuration')
dialerV32BisOverrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 12), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisOverrConfig.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisOverrConfig.setDescription('Dial modem override configuration')
dialerV32BisCurrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 13), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCurrConfig.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCurrConfig.setDescription('Dial modem current configuration')
dialerV32BisCurrRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCurrRetry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCurrRetry.setDescription('Current number of retries.')
dialerV32BisRingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRingCount.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRingCount.setDescription('Incoming ring counter.')
dialerV32BisAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 16), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV32BisAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisAnsEnable.setDescription('States whether or not the dialer answers incoming calls.')
dialerV32BisDialMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDialMethod.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDialMethod.setDescription('The method used for dialing.')
dialerV32BisRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 18), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRetry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRetry.setDescription('Indicates whether or not the dialer will try to redial a number that is busy or does not answer.')
dialerV32BisCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCallFailure.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCallFailure.setDescription('Reason for last call failure.')
dialerV32BisCarrierDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCarrierDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCarrierDetect.setDescription('Delay in msec to wait for verification of carrier detect.')
dialerV32BisCarrierWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCarrierWait.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCarrierWait.setDescription('Delay in msec to wait for carrier detect.')
dialerV32BisHangupVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisHangupVerify.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisHangupVerify.setDescription('Delay in msec to wait to verify for hangup.')
dialerV32BisHangupSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 23), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisHangupSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisHangupSignal.setDescription('Hangup signal state.')
dialerV32BisTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisTxLevel.setDescription('The attenuation level (Db) on data transmission, once the handshake is completed with the remote modem.')
dialerV32BisRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRxLevel.setDescription('Minimum acceptable receiver threshold value. This indicates whether a 3dB attenuation is used on the receive signal at line input.')
dialerV32BisGuardTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisGuardTone.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisGuardTone.setDescription('Indicates a guard tone frequency. ')
dialerV32BisLeasedLine = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("two-w-ll", 1), ("four-w-ll", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLeasedLine.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisLeasedLine.setDescription('Dial or leased line.')
dialerV32BisLeaseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLeaseMode.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisLeaseMode.setDescription('This applies to Leased line type only. This field states whether the dialer will go off-hook in Originate or Answer mode.')
dialerV32BisLLTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLLTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisLLTxLevel.setDescription('The attenuation level (Db) on data transmission once the handshake is completed with the remote modem (for leased line).')
dialerV32BisLLConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 30), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLLConfig.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisLLConfig.setDescription('Leased line configuration')
dialerV32BisLLBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 31), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLLBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisLLBitRate.setDescription('Leased line bit rate.')
dialerV32BisCallingTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 32), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCallingTone.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCallingTone.setDescription('Calling tone state.')
dialerV32BisAutoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 33), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisAutoMode.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisAutoMode.setDescription('Auto mode state (fallback/forward).')
dialerV32BisRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 34), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRetryAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRetryAllowed.setDescription('Indicates whether or not the dialer will try to redial a number that is busy or does not answer.')
dialerV32BisMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisMaxRetry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisMaxRetry.setDescription('Specifies how many times a number will be redialed if it is busy or otherwise unresponsive.')
dialerV32BisDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 36), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDialTone.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDialTone.setDescription('The dial tone state.')
dialerV32BisDialToneWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDialToneWait.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDialToneWait.setDescription('The amount of time (msec) the modem waits when it encounters the wait for dial tone modifier in dial string.')
dialerV32BisRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRetryWait.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRetryWait.setDescription('Retry timer delay.')
dialerV32BisHangupWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisHangupWait.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisHangupWait.setDescription('Hangup timer delay.')
dialerV32BisDialPauseWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDialPauseWait.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDialPauseWait.setDescription('maximum delay before dial.')
dialerV32BisDeltaRiWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDeltaRiWait.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDeltaRiWait.setDescription('Maximum delay (msec) between 2 rings.')
dialerV32BisDTMFDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDTMFDuration.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDTMFDuration.setDescription('The tone duration (msec) used in DMTF dialing.')
dialerV32BisDTMFDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDTMFDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDTMFDelay.setDescription('The delay (msec) between digits dialed when in tone dial mode.')
dialerV32BisDTMFFreq1Level = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDTMFFreq1Level.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDTMFFreq1Level.setDescription('DTMF high frequency power level.')
dialerV32BisDTMFFreq2Level = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDTMFFreq2Level.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDTMFFreq2Level.setDescription('DTMF low frequency power level.')
dialerV32BisPulseMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPulseMakeTime.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisPulseMakeTime.setDescription('Pulse make time (msec).')
dialerV32BisPulseBreakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPulseBreakTime.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisPulseBreakTime.setDescription('Pulse break time (msec).')
dialerV32BisPulseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPulseDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisPulseDelay.setDescription('Pulse interdigit delay (msec).')
dialerV32BisSpeakerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisSpeakerLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisSpeakerLevel.setDescription("The volume level of the Eiconcard's speaker.")
dialerV32BisRiToAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRiToAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRiToAnswer.setDescription('Number of rings befor answering.')
dialerV32BisAnswerBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 51), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisAnswerBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisAnswerBitRate.setDescription('Answer bit rate.')
dialerV32BisAnswerConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 52), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisAnswerConfig.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisAnswerConfig.setDescription('Answer configuration.')
dialerV32BisRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 53), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRetrain.setDescription('.')
dialerV32BisEqmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("low-quality", 2), ("medium-quality", 3), ("high-quality", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisEqmLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisEqmLevel.setDescription('.')
dialerV32BisRiOnOffDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 55), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRiOnOffDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRiOnOffDetect.setDescription('Ring signal status.')
dialerV32BisCdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 56), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCdDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCdDetect.setDescription('Carrier detect status.')
dialerV32BisRingbackDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 57), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRingbackDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisRingbackDetect.setDescription('Ringback signal detect status.')
dialerV32BisAnswerDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 58), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisAnswerDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisAnswerDetect.setDescription('Answer tone detect status.')
dialerV32BisBusyDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 59), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisBusyDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisBusyDetect.setDescription('Busy tone detect status.')
dialerV32BisDiscDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 60), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDiscDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDiscDetect.setDescription('Disconnect detect status.')
dialerV32BisCdSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 61), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCdSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisCdSignal.setDescription('CD signal status.')
dialerV32BisDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 62), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDsrSignal.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisDsrSignal.setDescription('DSR signal status.')
dialerV32BisState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("m-closed", 1), ("m-opened", 2), ("m-local-test", 3), ("m-ringing", 4), ("m-dialing", 5), ("m-answering", 6), ("m-originating", 7), ("m-retrying", 8), ("m-connected", 9), ("m-retraining", 10), ("m-remote-test", 11), ("m-remote-disc", 12), ("m-local-disc", 13), ("m-hangup-idle", 14), ("m-closing", 15), ("m-offhook-idle", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerV32BisState.setDescription(' State of the V32bis dialer: m-closed (1) - Dialer not active m-opened (2) - No connection establised m-local-test (3) - Local analog loopback m-ringing (4) - Incoming call present m-dialing (5) - Dialing a number m-answering (6) - Call answer in progress m-originating (7) - Call originate in progress m-retrying (8) - Awaiting call attempt m-connected (9) - connection present m-retraining (10) - performing retrain m-remote-test (11) - Remote digital loopback m-remote-disc (12) - Remote has disconnected m-local-disc (13) - Local has disconnected m-hangup-idle (14) - Idle after hangup m-closing (15) - Awaiting local disconnect m-offhook-idle (16) - Modem goes off hook on command ')
dialerControlTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10), )
if mibBuilder.loadTexts: dialerControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerControlTable.setDescription('The table for dynamic dialing entries.')
dialerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerCtrlPortRef"))
if mibBuilder.loadTexts: dialerControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerControlEntry.setDescription('The set of attributes for one entry per port.')
dialerCtrlPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlPortRef.setDescription('The Port number of the dialer.')
dialerCtrlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("exec", 1), ("dial", 2), ("hangup", 3), ("start", 4), ("idle", 5), ("store", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlAction.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlAction.setDescription('The Action states. exec (1) - This action executes the script file which would be set in dialerCtrlScriptFile. dial (2) - This action dials the number stored in dialerCtrlMainNumber. if dialerCtrlMainNumber is not set then the dialerCtrlPrimary number is dialed by the dialer. ISDN dialer dials the number stored by the card. hangup (3) - This action hangs-up the current connection. store (6) - This action stores the parameters in the card. ISDN dialer only. ')
dialerCtrlAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 3), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlAnsEnable.setDescription('States whether or not the dialer answers incoming calls.')
dialerCtrlDirectDSROnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 4), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlDirectDSROnOff.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlDirectDSROnOff.setDescription('Defines the setting of the Data Rate Select signal. Setting this mib is valid only if the dialer type is Direct and the interface is RS-232.')
dialerCtrlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlNumber.setDescription('The primary Phone Number')
dialerCtrlScriptFile = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlScriptFile.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlScriptFile.setDescription('The Complete path where the Dialer Script file resides.')
dialerCtrlActionState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 7), ActionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlActionState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlActionState.setDescription('The state of the action operation performed by the Agent as a result of setting the values to the dialerCtrlAction. The Management station will poll that variable after initiating an action. The value done(1) indicates that the action terminated successfully. The value failed(2) indicates that the action terminated with an error. The variable dialerCtrlActionError indicates the error code.')
dialerCtrlActionError = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlActionError.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlActionError.setDescription('If the value is 0, this means no error. Otherwise, the value indicates the error code returned after the action operation.')
dialerCtrlConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 9), PrimCfg()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlConfig.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlConfig.setDescription('The config to which the V32 dialer will have to be set. This information is only used when using a V32 dialer.')
dialerCtrlBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 10), PrimBitRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlBitRate.setDescription('The Bit Rate to which the V32 dialer will have to be set. This information is only used when using a V32 dialer.')
dialerCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 11), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlType.setDescription('The remote directory number type. Used by ISDN dialer only. DEFINED ONLY FOR TESTS. ')
dialerCtrlPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 12), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlPlan.setDescription('The remote directory number plan. Used by ISDN dialer only. DEFINED ONLY FOR TESTS. ')
dialerCtrlSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlSub.setDescription('The remote subaddress. When in the connected state, the remote subaddress dialer is displayed. Otherwise, the stored subaddress is displayed. Used by ISDN dialer only. DEFINED ONLY FOR TESTS. ')
dialerCtrlSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 14), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlSubType.setDescription('The local subaddress type. Used by ISDN dialer only. DEFINED ONLY FOR TESTS. ')
dialerCtrlTns = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlTns.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlTns.setDescription('The string identifying the selected long distance carrier. In ISDN terms, it is called the Transit Network Selection. This string is usually made of 3 digits and is assigned by Bellcore. Used by ISDN dialer only. DEFINED ONLY FOR TESTS. ')
dialerCtrlNumberTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlNumberTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlNumberTemp.setDescription('The temporary Phone Number. DEFINED ONLY FOR ISDN TESTS.')
dialerCtrlDialMask = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlDialMask.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlDialMask.setDescription('Read the mask state. DEFINED ONLY FOR TESTS.')
dialerCtrlCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlCallSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerCtrlCallSpeed.setDescription('Read the mask state. DEFINED ONLY FOR TESTS.')
dialerIsdnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11), )
if mibBuilder.loadTexts: dialerIsdnStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnStatusTable.setDescription('The table for ISDN dialer Status.')
dialerIsdnStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnStatusPortRef"))
if mibBuilder.loadTexts: dialerIsdnStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnStatusEntry.setDescription('The set of attributes for one port.')
dialerIsdnStatusPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnStatusPortRef.setDescription('The port number for which isdn status is displayed.')
dialerIsdnStatusSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ni1", 1), ("nt", 2), ("att", 3), ("tr6", 4), ("vn3", 5), ("net3", 6), ("tph", 7), ("illegal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnStatusSwitchType.setDescription('The current switch type in use for isdn. ')
dialerIsdnStatusChType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("b-channel", 1), ("d-channel", 2), ("illegal", 3), ("unused", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusChType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnStatusChType.setDescription('The isdn channel type, B channel or D channel. ')
dialerIsdnStatusL1State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deactivated", 1), ("await-info2", 2), ("await-info4", 3), ("activate", 4), ("illegal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusL1State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnStatusL1State.setDescription(' The current state of layer 1 subsystem. ')
dialerIsdnStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("isdn-deact-closed", 1), ("isdn-deact-opened", 2), ("isdn-wait-act-closed", 3), ("isdn-wait-act-opened", 4), ("isdn-release-closed", 5), ("isdn-release-opened", 6), ("isdn-closed", 7), ("isdn-opened", 8), ("isdn-connecting", 9), ("isdn-connected", 10), ("isdn-ringing", 11), ("isdn-disconnecting", 12), ("isdn-closing", 13), ("isdn-loopback", 14), ("isdn-linking-deact", 15), ("isdn-linking-act", 16), ("isdn-test", 17), ("isdn-linking-ring", 18), ("isdn-illegal", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnStatusState.setDescription(' The current state of the ISDN dialer. ')
dialerIsdnNI1BChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12), )
if mibBuilder.loadTexts: dialerIsdnNI1BChTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChTable.setDescription('The table for the ISDN NI1 BChannel dialer.')
dialerIsdnNI1BChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnNI1BChPortRef"))
if mibBuilder.loadTexts: dialerIsdnNI1BChEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChEntry.setDescription('The set of attributes for one port.')
dialerIsdnNI1BChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChPortRef.setDescription(' The port number which is configured for NI1-BChannel.')
dialerIsdnNI1BChSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChSpid.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChSpid.setDescription(" The Terminal's Service Profile IDentification.")
dialerIsdnNI1BChSpidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 3), IsdnSpidStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChSpidStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChSpidStatus.setDescription('The current SPID status. ')
dialerIsdnNI1BChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDn.setDescription('The local directory number type. ')
dialerIsdnNI1BChLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalSub.setDescription('The local subaddress. ')
dialerIsdnNI1BChTnsDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsDigs.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsDigs.setDescription('The string identifying the selected long distance carrier. In ISDN terms, it is called the Transit Network Selection. This string is usually made of 3 digits and is assigned by Bellcore.')
dialerIsdnNI1BChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDn.setDescription('When in the connected state, the number dialed is displayed. Otherwise, the stored number is displayed.')
dialerIsdnNI1BChRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteSub.setDescription('When in the connected state, the remote subaddress dialer is displayed. Otherwise, the stored subaddress is displayed.')
dialerIsdnNI1BChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 9), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCallType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChCallType.setDescription('The current call type. ')
dialerIsdnNI1BChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 10), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChCallSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChCallSpeed.setDescription('The current call speed. ')
dialerIsdnNI1BChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 11), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChBChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChBChannel.setDescription(' The current B channel connected to.')
dialerIsdnNI1BChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 12), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChAnsEnable.setDescription(' Answer Enable Status.')
dialerIsdnNI1BChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 13), IsdnNI1BCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCcState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChCcState.setDescription('The state of call control subsystem. ')
dialerIsdnNI1BChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCcNbCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChCcNbCause.setDescription('The number of causes saved. ')
dialerIsdnNI1BChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCcCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChCcCause.setDescription('Last causes saved. ')
dialerIsdnNI1BChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 16), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChL3State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChL3State.setDescription('The state of layer 3 subsystem. ')
dialerIsdnNI1BChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 17), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChL2State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChL2State.setDescription('The state of layer 2 subsystem. ')
dialerIsdnNI1BChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChTeiValue.setDescription('The value of the terminal is dynamic TEI. ')
dialerIsdnNI1BChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 19), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChTeiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChTeiStatus.setDescription("The status of the terminal's dynamic TEI. ")
dialerIsdnNI1BChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 20), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDnType.setDescription('The local directory number type. ')
dialerIsdnNI1BChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 21), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDnPlan.setDescription('The local directory number plan. ')
dialerIsdnNI1BChLocalSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 22), IsdnSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalSubType.setDescription('The local subaddress type. ')
dialerIsdnNI1BChTnsNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 23), IsdnTnsNetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsNetId.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsNetId.setDescription('The transit network id. ')
dialerIsdnNI1BChTnsIdPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 24), IsdnTnsIdPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsIdPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsIdPlan.setDescription('The transit network plan. ')
dialerIsdnNI1BChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 25), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDnType.setDescription('The remote directory number type. ')
dialerIsdnNI1BChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 26), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDnPlan.setDescription('The remote directory number plan. ')
dialerIsdnNI1BChRemoteSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 27), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteSubType.setDescription('The local subaddress type. ')
dialerIsdnNI1BChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 28), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChScrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChScrStatus.setDescription('The status of call screening. ')
dialerIsdnNI1BChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 29), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCallOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChCallOpt.setDescription('The current call option. ')
dialerIsdnNI1BChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 30), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDefined.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDefined.setDescription('The validity of sto- elements. ')
dialerIsdnNI1BChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDnType.setDescription('The stored directory number type. ')
dialerIsdnNI1BChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDnPlan.setDescription('The stored directory number plan. ')
dialerIsdnNI1BChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDn.setDescription('The stored directory number. ')
dialerIsdnNI1BChStoSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoSubType.setDescription('The stored subaddress type. ')
dialerIsdnNI1BChStoSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoSub.setDescription('The stored subaddress. ')
dialerIsdnNI1BChStoTnsNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoTnsNetId.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoTnsNetId.setDescription('The stored transit network id. ')
dialerIsdnNI1BChStoTnsPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoTnsPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoTnsPlan.setDescription('The stored transit network plan. ')
dialerIsdnNI1BChStoDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDigs.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDigs.setDescription('The stored transit network address. ')
dialerIsdnNI1BChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoBcType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoBcType.setDescription('The stored bearer cap. type. ')
dialerIsdnNI1BChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoBcOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1BChStoBcOpt.setDescription('The stored bearer cap. option. ')
dialerIsdnNI1DChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13), )
if mibBuilder.loadTexts: dialerIsdnNI1DChTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1DChTable.setDescription('The table for the ISDN NI1 DChannel dialer.')
dialerIsdnNI1DChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnNI1DChPortRef"))
if mibBuilder.loadTexts: dialerIsdnNI1DChEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1DChEntry.setDescription('The set of attributes for one port.')
dialerIsdnNI1DChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1DChPortRef.setDescription('The port number configured for the NI1 DChannel.')
dialerIsdnNI1DChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1DChTeiValue.setDescription(' The static TEI value on the D Channel for data communications.')
dialerIsdnNI1DChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 3), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChTeiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1DChTeiStatus.setDescription(' The status of TEI - always ASSIGNED.')
dialerIsdnNI1DChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 4), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChL2State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1DChL2State.setDescription('The current layer 2 state. ')
dialerIsdnNI1DChP3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 5), IsdnP3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChP3State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1DChP3State.setDescription('The current Packet layer state. ')
dialerIsdnNI1DChActState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 6), IsdnActState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChActState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNI1DChActState.setDescription('The current activation FSM state. ')
dialerIsdnTR6BChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14), )
if mibBuilder.loadTexts: dialerIsdnTR6BChTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChTable.setDescription('The table for the ISDN TR6 BChannel dialer.')
dialerIsdnTR6BChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnTR6BChPortRef"))
if mibBuilder.loadTexts: dialerIsdnTR6BChEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChEntry.setDescription('The set of attributes for one port.')
dialerIsdnTR6BChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChPortRef.setDescription('The port number for which the 1TR6 BChannel info is displayed. ')
dialerIsdnTR6BChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDn.setDescription('The local directory number type. ')
dialerIsdnTR6BChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDn.setDescription('When in the connected state, the number dialed is displayed. Otherwise, the stored number is displayed.')
dialerIsdnTR6BChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 4), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCallType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChCallType.setDescription('The current call type. ')
dialerIsdnTR6BChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 5), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTR6BChCallSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChCallSpeed.setDescription('The current call speed. ')
dialerIsdnTR6BChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 6), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChBChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChBChannel.setDescription('The current B Channel connected to. ')
dialerIsdnTR6BChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 7), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChAnsEnable.setDescription('Answer enable status. ')
dialerIsdnTR6BChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 8), IsdnTR6BCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCcState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChCcState.setDescription('The state of call control subsystem.')
dialerIsdnTR6BChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCcNbCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChCcNbCause.setDescription('The number of causes saved.')
dialerIsdnTR6BChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCcCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChCcCause.setDescription('Last causes saved. ')
dialerIsdnTR6BChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 11), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChL3State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChL3State.setDescription('The state of layer 3 subsystem. ')
dialerIsdnTR6BChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 12), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChL2State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChL2State.setDescription('The state of layer 2 subsystem. ')
dialerIsdnTR6BChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 13), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDnType.setDescription('The local directory number type. ')
dialerIsdnTR6BChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 14), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDnPlan.setDescription('The local directory number plan. ')
dialerIsdnTR6BChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 15), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDnType.setDescription('The remote directory number type. ')
dialerIsdnTR6BChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 16), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDnPlan.setDescription('The remote directory number plan. ')
dialerIsdnTR6BChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 17), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChScrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChScrStatus.setDescription('The status of call screening. ')
dialerIsdnTR6BChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 18), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCallOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChCallOpt.setDescription('The current call option. ')
dialerIsdnTR6BChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChTeiValue.setDescription(' The static TEI value on the D Channel for data communications.')
dialerIsdnTR6BChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 20), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChTeiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChTeiStatus.setDescription(' The status of TEI - always ASSIGNED.')
dialerIsdnTR6BChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 21), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDefined.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDefined.setDescription('The validity of sto- elements. ')
dialerIsdnTR6BChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDnType.setDescription('The stored directory number type. ')
dialerIsdnTR6BChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDnPlan.setDescription('The stored directory number plan. ')
dialerIsdnTR6BChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDn.setDescription('The stored directory number. ')
dialerIsdnTR6BChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoBcType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChStoBcType.setDescription('The stored bearer cap. type. ')
dialerIsdnTR6BChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoBcOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTR6BChStoBcOpt.setDescription('The stored bearer cap. option. ')
dialerIsdnVN3BChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15), )
if mibBuilder.loadTexts: dialerIsdnVN3BChTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChTable.setDescription('The table for the ISDN VN3 BChannel dialer.')
dialerIsdnVN3BChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnVN3BChPortRef"))
if mibBuilder.loadTexts: dialerIsdnVN3BChEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChEntry.setDescription('The set of attributes for one port.')
dialerIsdnVN3BChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChPortRef.setDescription('The port number for which the VN3 BChannel info is displayed. ')
dialerIsdnVN3BChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 2), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDnType.setDescription('The local directory number type. ')
dialerIsdnVN3BChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 3), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDnPlan.setDescription('The local directory number plan. ')
dialerIsdnVN3BChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDn.setDescription('The local directory number type. ')
dialerIsdnVN3BChLocalSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 5), IsdnSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalSubType.setDescription('The local subaddress type. ')
dialerIsdnVN3BChLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalSub.setDescription('The local directory number type. ')
dialerIsdnVN3BChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 7), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDnType.setDescription('The local directory number type. ')
dialerIsdnVN3BChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 8), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDnPlan.setDescription('The local directory number plan. ')
dialerIsdnVN3BChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDn.setDescription('The local directory number type. ')
dialerIsdnVN3BChRemoteSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 10), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteSubType.setDescription('The local subaddress type. ')
dialerIsdnVN3BChRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteSub.setDescription('The local directory number type. ')
dialerIsdnVN3BChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 12), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCallType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChCallType.setDescription('The current call type. ')
dialerIsdnVN3BChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 13), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChCallSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChCallSpeed.setDescription('The current call speed. ')
dialerIsdnVN3BChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 14), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChBChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChBChannel.setDescription('The current B Channel connected to. ')
dialerIsdnVN3BChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 15), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChAnsEnable.setDescription('Answer enable status. ')
dialerIsdnVN3BChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 16), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChScrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChScrStatus.setDescription('The status of call screening. ')
dialerIsdnVN3BChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 17), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCallOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChCallOpt.setDescription('The current call option. ')
dialerIsdnVN3BChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 18), IsdnVN3BCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCcState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChCcState.setDescription('The state of call control subsystem.')
dialerIsdnVN3BChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCcNbCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChCcNbCause.setDescription('The number of causes saved.')
dialerIsdnVN3BChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCcCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChCcCause.setDescription('Last causes saved. ')
dialerIsdnVN3BChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 21), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChL3State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChL3State.setDescription('The state of layer 3 subsystem. ')
dialerIsdnVN3BChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 22), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChL2State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChL2State.setDescription('The state of layer 2 subsystem. ')
dialerIsdnVN3BChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChTeiValue.setDescription(' The static TEI value on the D Channel for data communications.')
dialerIsdnVN3BChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 24), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChTeiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChTeiStatus.setDescription(' The status of TEI - always ASSIGNED.')
dialerIsdnVN3BChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 25), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDefined.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDefined.setDescription('The validity of sto- elements. ')
dialerIsdnVN3BChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDnType.setDescription('The stored directory number type. ')
dialerIsdnVN3BChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDnPlan.setDescription('The stored directory number plan. ')
dialerIsdnVN3BChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDn.setDescription('The stored directory number. ')
dialerIsdnVN3BChStoSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChStoSubType.setDescription('The stored subaddress type. ')
dialerIsdnVN3BChStoSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChStoSub.setDescription('The stored subaddress. ')
dialerIsdnVN3BChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoBcType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChStoBcType.setDescription('The stored bearer cap type. ')
dialerIsdnVN3BChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoBcOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3BChStoBcOpt.setDescription('The stored bearer cap option. ')
dialerIsdnVN3DChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16), )
if mibBuilder.loadTexts: dialerIsdnVN3DChTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3DChTable.setDescription('The table for the ISDN VN3 DChannel dialer.')
dialerIsdnVN3DChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnVN3DChPortRef"))
if mibBuilder.loadTexts: dialerIsdnVN3DChEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3DChEntry.setDescription('The set of attributes for one port.')
dialerIsdnVN3DChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3DChPortRef.setDescription('The port number for which the VN3 DChannel info is displayed. ')
dialerIsdnVN3DChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3DChTeiValue.setDescription(' The static TEI value on the D Channel for data communications.')
dialerIsdnVN3DChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 3), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChTeiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3DChTeiStatus.setDescription(' The status of TEI - always ASSIGNED.')
dialerIsdnVN3DChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 4), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChL2State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3DChL2State.setDescription('The state of layer 2 subsystem. ')
dialerIsdnVN3DChP3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 5), IsdnP3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChP3State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnVN3DChP3State.setDescription('The current Packet layer state. ')
dialerIsdnNET3BChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17), )
if mibBuilder.loadTexts: dialerIsdnNET3BChTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChTable.setDescription('The table for the ISDN NET3 BChannel dialer.')
dialerIsdnNET3BChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnNET3BChPortRef"))
if mibBuilder.loadTexts: dialerIsdnNET3BChEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChEntry.setDescription('The set of attributes for one port.')
dialerIsdnNET3BChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChPortRef.setDescription('The port number for which the NET3 BChannel info is displayed. ')
dialerIsdnNET3BChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 2), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDnType.setDescription('The local directory number type. ')
dialerIsdnNET3BChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 3), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDnPlan.setDescription('The local directory number plan. ')
dialerIsdnNET3BChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDn.setDescription('The local directory number type. ')
dialerIsdnNET3BChLocalSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 5), IsdnSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalSubType.setDescription('The local subaddress type. ')
dialerIsdnNET3BChLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalSub.setDescription('The local directory number type. ')
dialerIsdnNET3BChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 7), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDnType.setDescription('The local directory number type. ')
dialerIsdnNET3BChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 8), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDnPlan.setDescription('The local directory number plan. ')
dialerIsdnNET3BChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDn.setDescription('The local directory number type. ')
dialerIsdnNET3BChRemoteSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 10), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteSubType.setDescription('The local subaddress type. ')
dialerIsdnNET3BChRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteSub.setDescription('The local directory number type. ')
dialerIsdnNET3BChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 12), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCallType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChCallType.setDescription('The current call type. ')
dialerIsdnNET3BChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 13), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChCallSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChCallSpeed.setDescription('The current call speed. ')
dialerIsdnNET3BChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 14), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChBChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChBChannel.setDescription('The current B Channel connected to. ')
dialerIsdnNET3BChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 15), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChAnsEnable.setDescription('Answer enable status. ')
dialerIsdnNET3BChTnsNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 16), IsdnTnsNetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsNetId.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsNetId.setDescription('The transit network id. ')
dialerIsdnNET3BChTnsIdPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 17), IsdnTnsIdPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsIdPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsIdPlan.setDescription('The transit network plan. ')
dialerIsdnNET3BChTnsDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsDigs.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsDigs.setDescription('The string identifying the selected long distance carrier. In ISDN terms, it is called the Transit Network Selection. This string is usually made of 3 digits and is assigned by Bellcore.')
dialerIsdnNET3BChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 19), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChScrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChScrStatus.setDescription('The status of call screening. ')
dialerIsdnNET3BChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 20), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCallOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChCallOpt.setDescription('The current call option. ')
dialerIsdnNET3BChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 21), IsdnNET3BCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCcState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChCcState.setDescription('The state of call control subsystem.')
dialerIsdnNET3BChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCcNbCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChCcNbCause.setDescription('The number of causes saved.')
dialerIsdnNET3BChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCcCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChCcCause.setDescription('Last causes saved. ')
dialerIsdnNET3BChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 24), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChL3State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChL3State.setDescription('The state of layer 3 subsystem. ')
dialerIsdnNET3BChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 25), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChL2State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChL2State.setDescription('The state of layer 2 subsystem. ')
dialerIsdnNET3BChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChTeiValue.setDescription(' The static TEI value on the D Channel for data communications.')
dialerIsdnNET3BChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 27), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChTeiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChTeiStatus.setDescription(' The status of TEI - always ASSIGNED.')
dialerIsdnNET3BChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 28), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDefined.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDefined.setDescription('The validity of sto- elements. ')
dialerIsdnNET3BChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDnType.setDescription('The stored directory number type. ')
dialerIsdnNET3BChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDnPlan.setDescription('The stored directory number plan. ')
dialerIsdnNET3BChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDn.setDescription('The stored directory number. ')
dialerIsdnNET3BChStoSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoSubType.setDescription('The stored subaddress type. ')
dialerIsdnNET3BChStoSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoSub.setDescription('The stored subaddress. ')
dialerIsdnNET3BChStoTnsNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoTnsNetId.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoTnsNetId.setDescription('The stored transit network id. ')
dialerIsdnNET3BChStoTnsPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoTnsPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoTnsPlan.setDescription('The stored transit network plan. ')
dialerIsdnNET3BChStoDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDigs.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDigs.setDescription('The stored transit network address. ')
dialerIsdnNET3BChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoBcType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoBcType.setDescription('The stored bearer cap. type. ')
dialerIsdnNET3BChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoBcOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnNET3BChStoBcOpt.setDescription('The stored bearer cap. option. ')
dialerIsdnTPHBChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18), )
if mibBuilder.loadTexts: dialerIsdnTPHBChTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChTable.setDescription('The table for the ISDN TPH BChannel dialer.')
dialerIsdnTPHBChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnTPHBChPortRef"))
if mibBuilder.loadTexts: dialerIsdnTPHBChEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChEntry.setDescription('The set of attributes for one port.')
dialerIsdnTPHBChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChPortRef.setDescription('The port number for which the TPH BChannel info is displayed. ')
dialerIsdnTPHBChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 2), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDnType.setDescription('The local directory number type. ')
dialerIsdnTPHBChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 3), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDnPlan.setDescription('The local directory number plan. ')
dialerIsdnTPHBChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDn.setDescription('The local directory number type. ')
dialerIsdnTPHBChLocalSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 5), IsdnSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalSubType.setDescription('The local subaddress type. ')
dialerIsdnTPHBChLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalSub.setDescription('The local directory number type. ')
dialerIsdnTPHBChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 7), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDnType.setDescription('The local directory number type. ')
dialerIsdnTPHBChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 8), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDnPlan.setDescription('The local directory number plan. ')
dialerIsdnTPHBChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDn.setDescription('The local directory number type. ')
dialerIsdnTPHBChRemoteSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 10), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteSubType.setDescription('The local subaddress type. ')
dialerIsdnTPHBChRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteSub.setDescription('The local directory number type. ')
dialerIsdnTPHBChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 12), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCallType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChCallType.setDescription('The current call type. ')
dialerIsdnTPHBChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 13), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChCallSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChCallSpeed.setDescription('The current call speed. ')
dialerIsdnTPHBChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 14), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChBChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChBChannel.setDescription('The current B Channel connected to. ')
dialerIsdnTPHBChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 15), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChAnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChAnsEnable.setDescription('Answer enable status. ')
dialerIsdnTPHBChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 16), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChScrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChScrStatus.setDescription('The status of call screening. ')
dialerIsdnTPHBChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 17), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCallOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChCallOpt.setDescription('The current call option. ')
dialerIsdnTPHBChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 18), IsdnTPHBCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCcState.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChCcState.setDescription('The state of call control subsystem.')
dialerIsdnTPHBChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCcNbCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChCcNbCause.setDescription('The number of causes saved.')
dialerIsdnTPHBChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCcCause.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChCcCause.setDescription('Last causes saved. ')
dialerIsdnTPHBChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 21), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChL3State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChL3State.setDescription('The state of layer 3 subsystem. ')
dialerIsdnTPHBChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 22), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChL2State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChL2State.setDescription('The state of layer 2 subsystem. ')
dialerIsdnTPHBChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChTeiValue.setDescription(' The static TEI value on the D Channel for data communications.')
dialerIsdnTPHBChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 24), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChTeiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChTeiStatus.setDescription(' The status of TEI - always ASSIGNED.')
dialerIsdnTPHBChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 25), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDefined.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDefined.setDescription('The validity of sto- elements. ')
dialerIsdnTPHBChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDnType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDnType.setDescription('The stored directory number type. ')
dialerIsdnTPHBChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDnPlan.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDnPlan.setDescription('The stored directory number plan. ')
dialerIsdnTPHBChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDn.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDn.setDescription('The stored directory number. ')
dialerIsdnTPHBChStoSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoSubType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChStoSubType.setDescription('The stored subaddress type. ')
dialerIsdnTPHBChStoSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoSub.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChStoSub.setDescription('The stored subaddress. ')
dialerIsdnTPHBChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoBcType.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChStoBcType.setDescription('The stored bearer cap. type. ')
dialerIsdnTPHBChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoBcOpt.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHBChStoBcOpt.setDescription('The stored bearer cap. option. ')
dialerIsdnTPHDChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19), )
if mibBuilder.loadTexts: dialerIsdnTPHDChTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHDChTable.setDescription('The table for the ISDN TPH DChannel dialer.')
dialerIsdnTPHDChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnTPHDChPortRef"))
if mibBuilder.loadTexts: dialerIsdnTPHDChEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHDChEntry.setDescription('The set of attributes for one port.')
dialerIsdnTPHDChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHDChPortRef.setDescription('The port number for which the TPH DChannel info is displayed. ')
dialerIsdnTPHDChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHDChTeiValue.setDescription(' The static TEI value on the D Channel for data communications.')
dialerIsdnTPHDChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 3), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChTeiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHDChTeiStatus.setDescription(' The status of TEI - always ASSIGNED.')
dialerIsdnTPHDChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 4), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChL2State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHDChL2State.setDescription('The state of layer 2 subsystem. ')
dialerIsdnTPHDChP3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 5), IsdnP3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChP3State.setStatus('mandatory')
if mibBuilder.loadTexts: dialerIsdnTPHDChP3State.setDescription('The current Packet layer state. ')
mibBuilder.exportSymbols("EICON-DIALER-MIB", dialerDirectRs232DbounceDelay=dialerDirectRs232DbounceDelay, dialerIsdnNI1BChSpid=dialerIsdnNI1BChSpid, dialerIsdnVN3BChPortRef=dialerIsdnVN3BChPortRef, dialerAtCmdRetryDelay=dialerAtCmdRetryDelay, dialerV32BisAnswerDetect=dialerV32BisAnswerDetect, dialerIsdnNET3BChLocalSub=dialerIsdnNET3BChLocalSub, dialerIsdnNI1BChScrStatus=dialerIsdnNI1BChScrStatus, dialerV32BisInfoTable=dialerV32BisInfoTable, dialerIsdnStatusL1State=dialerIsdnStatusL1State, dialerDirectX21PortRef=dialerDirectX21PortRef, dialerV32BisRingbackDetect=dialerV32BisRingbackDetect, mibv2=mibv2, dialerIsdnVN3DChTeiValue=dialerIsdnVN3DChTeiValue, dialerIsdnNET3BChPortRef=dialerIsdnNET3BChPortRef, dialerDirectX21InfoEntry=dialerDirectX21InfoEntry, dialerV22BisImcSpeakerLevel=dialerV22BisImcSpeakerLevel, dialerV22BisImcPrimaryNum=dialerV22BisImcPrimaryNum, dialerV32BisHangupWait=dialerV32BisHangupWait, dialerIsdnTPHBChStoDn=dialerIsdnTPHBChStoDn, dialerIsdnTPHDChP3State=dialerIsdnTPHDChP3State, dialerIsdnVN3BChLocalDnType=dialerIsdnVN3BChLocalDnType, dialerIsdnTR6BChBChannel=dialerIsdnTR6BChBChannel, dialerIsdnNI1BChStoBcType=dialerIsdnNI1BChStoBcType, dialerIsdnTPHBChTeiStatus=dialerIsdnTPHBChTeiStatus, dialerAtCmdParity=dialerAtCmdParity, dialerV22BisImcGuardTone=dialerV22BisImcGuardTone, dialerV32BisMaxRetry=dialerV32BisMaxRetry, dialerIsdnTPHBChRemoteDnPlan=dialerIsdnTPHBChRemoteDnPlan, dialerIsdnVN3BChStoSub=dialerIsdnVN3BChStoSub, dialerIsdnNET3BChStoSubType=dialerIsdnNET3BChStoSubType, dialerIsdnNI1BChStoTnsNetId=dialerIsdnNI1BChStoTnsNetId, dialerV32BisDeltaRiWait=dialerV32BisDeltaRiWait, dialerV32BisBusyDetect=dialerV32BisBusyDetect, dialerV22BisImcToneInd=dialerV22BisImcToneInd, dialerV22BisDnaCdSignal=dialerV22BisDnaCdSignal, dialerIsdnVN3BChRemoteDn=dialerIsdnVN3BChRemoteDn, dialerV32BisRetryWait=dialerV32BisRetryWait, dialerIsdnNI1BChStoDn=dialerIsdnNI1BChStoDn, dialerIsdnStatusPortRef=dialerIsdnStatusPortRef, IsdnVN3BCcState=IsdnVN3BCcState, dialerV32BisCarrierDetect=dialerV32BisCarrierDetect, dialerAtCmdMaxRetries=dialerAtCmdMaxRetries, dialerIsdnTPHBChAnsEnable=dialerIsdnTPHBChAnsEnable, dialerV25bisRiDtrDelay=dialerV25bisRiDtrDelay, dialerV25bisAnsEnable=dialerV25bisAnsEnable, PrimBitRate=PrimBitRate, dialerIsdnNET3BChRemoteDn=dialerIsdnNET3BChRemoteDn, dialerIsdnNET3BChTnsDigs=dialerIsdnNET3BChTnsDigs, dialerIsdnTPHBChLocalDnPlan=dialerIsdnTPHBChLocalDnPlan, dialerInfoPortRef=dialerInfoPortRef, IsdnBChannels=IsdnBChannels, FalseTrue=FalseTrue, dialerV25bisDtrSignal=dialerV25bisDtrSignal, dialerIsdnTR6BChStoBcType=dialerIsdnTR6BChStoBcType, dialerIsdnNI1BChTnsDigs=dialerIsdnNI1BChTnsDigs, IsdnDnType=IsdnDnType, dialerIsdnNI1BChEntry=dialerIsdnNI1BChEntry, dialerIsdnTR6BChPortRef=dialerIsdnTR6BChPortRef, dialerV32BisDialPauseWait=dialerV32BisDialPauseWait, dialerV32BisDiscDetect=dialerV32BisDiscDetect, dialerCtrlTns=dialerCtrlTns, dialerCtrlConfig=dialerCtrlConfig, dialerControlTable=dialerControlTable, IsdnDnPlan=IsdnDnPlan, dialerV22BisDnaWaitDialTone=dialerV22BisDnaWaitDialTone, dialerV22BisImcMaxRetries=dialerV22BisImcMaxRetries, DataEncoding=DataEncoding, dialerDirectX21IndicSignal=dialerDirectX21IndicSignal, dialerV22BisDnaDecadic=dialerV22BisDnaDecadic, dialerV32BisRetrain=dialerV32BisRetrain, dialerIsdnTPHDChTeiStatus=dialerIsdnTPHDChTeiStatus, dialerV22BisDnaRiNbr=dialerV22BisDnaRiNbr, dialerV22BisDnaRiSignal=dialerV22BisDnaRiSignal, dialerAtCmdRiDtrDelay=dialerAtCmdRiDtrDelay, dialerIsdnTR6BChCallSpeed=dialerIsdnTR6BChCallSpeed, dialerCtrlPlan=dialerCtrlPlan, dialerV22BisDnaAnsEnable=dialerV22BisDnaAnsEnable, dialerIsdnTPHBChBChannel=dialerIsdnTPHBChBChannel, dialerV32BisCdSignal=dialerV32BisCdSignal, dialerV22BisImcMinDialDelay=dialerV22BisImcMinDialDelay, dialerIsdnNET3BChCcCause=dialerIsdnNET3BChCcCause, dialerIsdnNI1BChLocalDn=dialerIsdnNI1BChLocalDn, dialerIsdnVN3BChStoDnType=dialerIsdnVN3BChStoDnType, dialerV32BisPrimNum=dialerV32BisPrimNum, dialerIsdnTR6BChL2State=dialerIsdnTR6BChL2State, dialerIsdnNI1DChP3State=dialerIsdnNI1DChP3State, dialerDirectState=dialerDirectState, PortRef=PortRef, dialerV22BisDnaPulseDelay=dialerV22BisDnaPulseDelay, dialerIsdnStatusTable=dialerIsdnStatusTable, dialerIsdnNI1BChAnsEnable=dialerIsdnNI1BChAnsEnable, dialerV25bisState=dialerV25bisState, dialerV32BisAnsEnable=dialerV32BisAnsEnable, eicon=eicon, dialerIsdnVN3BChStoDnPlan=dialerIsdnVN3BChStoDnPlan, dialerIsdnTR6BChAnsEnable=dialerIsdnTR6BChAnsEnable, dialerV32BisAnswerBitRate=dialerV32BisAnswerBitRate, dialerV32BisOverrBitRate=dialerV32BisOverrBitRate, dialerIsdnTR6BChStoDn=dialerIsdnTR6BChStoDn, dialerV22BisImcRiSignal=dialerV22BisImcRiSignal, dialerIsdnNET3BChEntry=dialerIsdnNET3BChEntry, management=management, dialerV32BisRiToAnswer=dialerV32BisRiToAnswer, dialerV22BisDnaInfoEntry=dialerV22BisDnaInfoEntry, dialerIsdnTPHBChStoBcOpt=dialerIsdnTPHBChStoBcOpt, dialerV25bisRetryDelay=dialerV25bisRetryDelay, dialerIsdnNET3BChStoTnsPlan=dialerIsdnNET3BChStoTnsPlan, dialerIsdnNET3BChStoDnPlan=dialerIsdnNET3BChStoDnPlan, dialerIsdnTPHBChEntry=dialerIsdnTPHBChEntry, PrimCfg=PrimCfg, dialerIsdnVN3BChRemoteDnPlan=dialerIsdnVN3BChRemoteDnPlan, dialerV22BisImcDTMFLevel=dialerV22BisImcDTMFLevel, dialerIsdnNI1DChActState=dialerIsdnNI1DChActState, dialerV32BisCallFailure=dialerV32BisCallFailure, dialerV22BisDnaDTMFDelay=dialerV22BisDnaDTMFDelay, dialerIsdnTPHBChLocalDn=dialerIsdnTPHBChLocalDn, dialerIsdnNI1BChSpidStatus=dialerIsdnNI1BChSpidStatus, dialerIsdnTR6BChEntry=dialerIsdnTR6BChEntry, dialerV32BisSecConfig=dialerV32BisSecConfig, dialerAtCmdHangupDelay=dialerAtCmdHangupDelay, dialerIsdnVN3BChRemoteSub=dialerIsdnVN3BChRemoteSub, dialerIsdnVN3DChTable=dialerIsdnVN3DChTable, dialerV32BisLeaseMode=dialerV32BisLeaseMode, dialerV32BisSecNum=dialerV32BisSecNum, dialerV32BisSecBitRate=dialerV32BisSecBitRate, dialerDirectIfType=dialerDirectIfType, dialerAtCmdModemSpeed=dialerAtCmdModemSpeed, dialerV25bisCtsOnDelay=dialerV25bisCtsOnDelay, dialerIsdnVN3BChStoDefined=dialerIsdnVN3BChStoDefined, dialerIsdnVN3BChEntry=dialerIsdnVN3BChEntry, dialerIsdnNET3BChStoDn=dialerIsdnNET3BChStoDn, dialerIsdnVN3BChLocalSubType=dialerIsdnVN3BChLocalSubType, dialerIsdnVN3BChAnsEnable=dialerIsdnVN3BChAnsEnable, dialerIsdnVN3BChL2State=dialerIsdnVN3BChL2State, dialerIsdnTR6BChLocalDnType=dialerIsdnTR6BChLocalDnType, dialerIsdnTPHBChTeiValue=dialerIsdnTPHBChTeiValue, dialerIsdnTR6BChCallOpt=dialerIsdnTR6BChCallOpt, dialerV22BisDnaCallProgress=dialerV22BisDnaCallProgress, dialerAtCmdDtrSignal=dialerAtCmdDtrSignal, dialerIsdnVN3DChL2State=dialerIsdnVN3DChL2State, dialerV22BisImcDloInd=dialerV22BisImcDloInd, dialerIsdnVN3BChLocalDn=dialerIsdnVN3BChLocalDn, dialerV25bisMaxRetries=dialerV25bisMaxRetries, dialerIsdnStatusState=dialerIsdnStatusState, dialerV22BisDnaToneInd=dialerV22BisDnaToneInd, dialerIsdnNI1BChLocalDnPlan=dialerIsdnNI1BChLocalDnPlan, dialerV32BisPulseMakeTime=dialerV32BisPulseMakeTime, dialerAtCmdState=dialerAtCmdState, dialerIsdnNET3BChTable=dialerIsdnNET3BChTable, dialerDirectX21CtrlSignal=dialerDirectX21CtrlSignal, dialerV25bisDsrSignal=dialerV25bisDsrSignal, dialerIsdnNET3BChTeiValue=dialerIsdnNET3BChTeiValue, dialerV22BisImcDsrRtsDelay=dialerV22BisImcDsrRtsDelay, dialerCtrlSub=dialerCtrlSub, dialerCtrlCallSpeed=dialerCtrlCallSpeed, dialerV32BisState=dialerV32BisState, dialerV22BisDnaDeltaRiDelay=dialerV22BisDnaDeltaRiDelay, dialerV22BisImcTxLevel=dialerV22BisImcTxLevel, dialer=dialer, dialerIsdnNET3BChCallOpt=dialerIsdnNET3BChCallOpt, dialerIsdnTPHDChTeiValue=dialerIsdnTPHDChTeiValue, IsdnL3State=IsdnL3State, dialerV22BisImcCdSignal=dialerV22BisImcCdSignal, dialerInfoTimeConnect=dialerInfoTimeConnect, dialerAtCmdOnOffDelay=dialerAtCmdOnOffDelay, dialerIsdnTPHBChStoDnPlan=dialerIsdnTPHBChStoDnPlan, dialerIsdnTPHBChRemoteDn=dialerIsdnTPHBChRemoteDn, IsdnCallSpeed=IsdnCallSpeed, dialerIsdnVN3BChScrStatus=dialerIsdnVN3BChScrStatus, IsdnSpidStatus=IsdnSpidStatus, dialerV22BisDnaDTMFDuration=dialerV22BisDnaDTMFDuration, dialerIsdnTPHBChCallOpt=dialerIsdnTPHBChCallOpt, dialerIsdnNET3BChAnsEnable=dialerIsdnNET3BChAnsEnable, dialerIsdnNI1BChLocalSubType=dialerIsdnNI1BChLocalSubType, dialerIsdnVN3BChCcNbCause=dialerIsdnVN3BChCcNbCause, dialerIsdnTPHDChEntry=dialerIsdnTPHDChEntry, dialerIsdnNET3BChStoDefined=dialerIsdnNET3BChStoDefined, dialerDirectRs232PortRef=dialerDirectRs232PortRef, dialerV32BisPortRef=dialerV32BisPortRef, dialerIsdnNET3BChTeiStatus=dialerIsdnNET3BChTeiStatus, dialerIsdnTPHBChStoSub=dialerIsdnTPHBChStoSub, IsdnP3State=IsdnP3State, dialerIsdnVN3BChCallOpt=dialerIsdnVN3BChCallOpt, dialerIsdnVN3BChStoBcType=dialerIsdnVN3BChStoBcType, dialerDirectRs232InfoEntry=dialerDirectRs232InfoEntry, dialerV32BisInfoEntry=dialerV32BisInfoEntry, dialerAtCmdInfoTable=dialerAtCmdInfoTable, dialerIsdnNI1BChRemoteSubType=dialerIsdnNI1BChRemoteSubType, dialerIsdnNI1DChL2State=dialerIsdnNI1DChL2State, dialerAtCmdAnsEnable=dialerAtCmdAnsEnable, dialerV22BisImcAnsEnable=dialerV22BisImcAnsEnable, dialerIsdnNI1DChTable=dialerIsdnNI1DChTable, dialerIsdnTPHBChCallType=dialerIsdnTPHBChCallType, dialerV32BisDialTone=dialerV32BisDialTone, dialerIsdnNI1BChTeiStatus=dialerIsdnNI1BChTeiStatus, dialerIsdnTPHBChStoDnType=dialerIsdnTPHBChStoDnType, dialerV32BisGuardTone=dialerV32BisGuardTone, dialerV25bisConnDelay=dialerV25bisConnDelay, dialerDirectRtsDelay=dialerDirectRtsDelay, dialerIsdnNI1BChLocalSub=dialerIsdnNI1BChLocalSub, dialerV32BisRxLevel=dialerV32BisRxLevel, dialerV22BisImcSecondaryNum=dialerV22BisImcSecondaryNum, dialerCtrlAction=dialerCtrlAction, dialerInfoClockType=dialerInfoClockType, dialerV32BisRetryAllowed=dialerV32BisRetryAllowed, dialerIsdnTR6BChCcState=dialerIsdnTR6BChCcState, dialerV22BisDnaPortRef=dialerV22BisDnaPortRef, dialerIsdnVN3BChLocalSub=dialerIsdnVN3BChLocalSub, dialerIsdnNET3BChScrStatus=dialerIsdnNET3BChScrStatus, dialerIsdnVN3BChCcState=dialerIsdnVN3BChCcState, dialerIsdnNI1BChStoSub=dialerIsdnNI1BChStoSub, IsdnTnsNetId=IsdnTnsNetId, dialerV25bisPortRef=dialerV25bisPortRef, dialerV25bisInfoEntry=dialerV25bisInfoEntry, dialerCtrlSubType=dialerCtrlSubType, dialerAtCmdInfoEntry=dialerAtCmdInfoEntry, dialerIsdnTPHBChStoBcType=dialerIsdnTPHBChStoBcType, dialerV32BisAutoMode=dialerV32BisAutoMode, dialerCtrlActionError=dialerCtrlActionError, dialerInfoEntry=dialerInfoEntry, dialerV22BisDnaMinDialDelay=dialerV22BisDnaMinDialDelay, ClockType=ClockType, dialerAtCmdRiSignal=dialerAtCmdRiSignal, dialerAtCmdPortRef=dialerAtCmdPortRef, dialerDirectPortRef=dialerDirectPortRef, dialerIsdnVN3BChStoBcOpt=dialerIsdnVN3BChStoBcOpt, dialerV22BisImcRiNbr=dialerV22BisImcRiNbr, dialerIsdnTR6BChStoDnType=dialerIsdnTR6BChStoDnType, dialerDirectX21InfoTable=dialerDirectX21InfoTable, dialerIsdnStatusChType=dialerIsdnStatusChType, dialerIsdnNET3BChStoSub=dialerIsdnNET3BChStoSub, dialerIsdnTR6BChTable=dialerIsdnTR6BChTable, dialerV22BisImcPortRef=dialerV22BisImcPortRef, dialerV32BisPrimConfig=dialerV32BisPrimConfig, dialerV32BisDTMFFreq2Level=dialerV32BisDTMFFreq2Level, dialerIsdnVN3BChStoDn=dialerIsdnVN3BChStoDn, dialerIsdnTPHBChL2State=dialerIsdnTPHBChL2State, dialerIsdnTPHDChTable=dialerIsdnTPHDChTable, dialerV25bisRiSignal=dialerV25bisRiSignal, dialerIsdnTPHBChCcState=dialerIsdnTPHBChCcState, dialerIsdnNI1BChStoDefined=dialerIsdnNI1BChStoDefined, dialerIsdnNET3BChStoDigs=dialerIsdnNET3BChStoDigs, dialerIsdnNI1DChPortRef=dialerIsdnNI1DChPortRef, IsdnTeiStatus=IsdnTeiStatus, dialerIsdnNI1BChBChannel=dialerIsdnNI1BChBChannel, dialerIsdnTPHBChTable=dialerIsdnTPHBChTable, dialerIsdnStatusSwitchType=dialerIsdnStatusSwitchType, dialerV22BisDnaTxLevel=dialerV22BisDnaTxLevel, dialerV22BisImcLeasedOpertn=dialerV22BisImcLeasedOpertn, dialerIsdnTPHBChRemoteSub=dialerIsdnTPHBChRemoteSub, dialerIsdnNI1BChCcState=dialerIsdnNI1BChCcState, dialerV32BisDTMFDelay=dialerV32BisDTMFDelay, dialerIsdnTPHBChCallSpeed=dialerIsdnTPHBChCallSpeed, dialerV22BisDnaState=dialerV22BisDnaState)
mibBuilder.exportSymbols("EICON-DIALER-MIB", dialerDirectConnDelay=dialerDirectConnDelay, dialerV32BisCdDetect=dialerV32BisCdDetect, dialerIsdnTPHDChL2State=dialerIsdnTPHDChL2State, dialerV22BisDnaModemSpeed=dialerV22BisDnaModemSpeed, dialerIsdnVN3BChCallSpeed=dialerIsdnVN3BChCallSpeed, dialerV22BisImcModemSpeed=dialerV22BisImcModemSpeed, dialerIsdnVN3DChP3State=dialerIsdnVN3DChP3State, dialerV22BisDnaGuardTone=dialerV22BisDnaGuardTone, dialerV22BisDnaRetryAllowed=dialerV22BisDnaRetryAllowed, dialerV25bisInfoTable=dialerV25bisInfoTable, dialerCtrlType=dialerCtrlType, dialerIsdnNI1DChEntry=dialerIsdnNI1DChEntry, dialerIsdnNET3BChRemoteSubType=dialerIsdnNET3BChRemoteSubType, dialerIsdnNET3BChL2State=dialerIsdnNET3BChL2State, dialerIsdnVN3BChTable=dialerIsdnVN3BChTable, dialerIsdnTPHBChCcCause=dialerIsdnTPHBChCcCause, dialerV25bisDeltaRiDelay=dialerV25bisDeltaRiDelay, dialerV22BisDnaRiDtrDelay=dialerV22BisDnaRiDtrDelay, dialerV22BisImcInfoTable=dialerV22BisImcInfoTable, dialerV22BisImcLineType=dialerV22BisImcLineType, dialerIsdnNI1BChStoTnsPlan=dialerIsdnNI1BChStoTnsPlan, dialerCtrlNumberTemp=dialerCtrlNumberTemp, dialerIsdnNET3BChTnsNetId=dialerIsdnNET3BChTnsNetId, dialerV25bisLossDelay=dialerV25bisLossDelay, dialerV32BisPulseDelay=dialerV32BisPulseDelay, dialerV22BisImcRxLevel=dialerV22BisImcRxLevel, dialerIsdnTR6BChCallType=dialerIsdnTR6BChCallType, dialerV22BisDnaMakeBreakRatio=dialerV22BisDnaMakeBreakRatio, IsdnNET3BCcState=IsdnNET3BCcState, dialerIsdnTPHBChScrStatus=dialerIsdnTPHBChScrStatus, IsdnCallType=IsdnCallType, dialerV22BisDnaWaitCarrier=dialerV22BisDnaWaitCarrier, dialerV22BisImcInfoEntry=dialerV22BisImcInfoEntry, dialerV22BisDnaMaxRetries=dialerV22BisDnaMaxRetries, dialerV32BisCurrNum=dialerV32BisCurrNum, dialerV22BisDnaRetryDelay=dialerV22BisDnaRetryDelay, dialerIsdnStatusEntry=dialerIsdnStatusEntry, dialerIsdnNI1BChStoSubType=dialerIsdnNI1BChStoSubType, DisEnable=DisEnable, IsdnTPHBCcState=IsdnTPHBCcState, dialerIsdnVN3BChBChannel=dialerIsdnVN3BChBChannel, dialerV22BisImcRetryDelay=dialerV22BisImcRetryDelay, dialerCtrlScriptFile=dialerCtrlScriptFile, dialerV22BisImcRiDtrDelay=dialerV22BisImcRiDtrDelay, dialerIsdnNI1BChRemoteDnType=dialerIsdnNI1BChRemoteDnType, dialerIsdnNET3BChL3State=dialerIsdnNET3BChL3State, dialerIsdnTR6BChCcNbCause=dialerIsdnTR6BChCcNbCause, dialerIsdnNI1BChTnsIdPlan=dialerIsdnNI1BChTnsIdPlan, dialerIsdnVN3BChStoSubType=dialerIsdnVN3BChStoSubType, dialerV22BisImcRetryAllowed=dialerV22BisImcRetryAllowed, dialerIsdnNI1DChTeiValue=dialerIsdnNI1DChTeiValue, dialerV32BisDialMethod=dialerV32BisDialMethod, IsdnTR6BCcState=IsdnTR6BCcState, dialerIsdnNET3BChCcState=dialerIsdnNET3BChCcState, dialerV32BisCurrBitRate=dialerV32BisCurrBitRate, IsdnSubType=IsdnSubType, dialerV32BisCurrConfig=dialerV32BisCurrConfig, dialerInfoType=dialerInfoType, dialerV25bisMinDsrOnDelay=dialerV25bisMinDsrOnDelay, dialerV32BisPulseBreakTime=dialerV32BisPulseBreakTime, dialerAtCmdSecondaryNum=dialerAtCmdSecondaryNum, dialerIsdnVN3BChRemoteSubType=dialerIsdnVN3BChRemoteSubType, dialerCtrlBitRate=dialerCtrlBitRate, dialerV22BisDnaInfoTable=dialerV22BisDnaInfoTable, dialerV22BisImcDTMFDuration=dialerV22BisImcDTMFDuration, ActionState=ActionState, dialerIsdnNI1BChLocalDnType=dialerIsdnNI1BChLocalDnType, dialerIsdnNET3BChCallSpeed=dialerIsdnNET3BChCallSpeed, dialerV22BisDnaDtrSignal=dialerV22BisDnaDtrSignal, dialerV32BisHangupVerify=dialerV32BisHangupVerify, dialerAtCmdDeltaRiDelay=dialerAtCmdDeltaRiDelay, dialerAtCmdMinDsrOnDelay=dialerAtCmdMinDsrOnDelay, dialerV22BisDnaPrimaryNum=dialerV22BisDnaPrimaryNum, dialerV25bisOnOffDelay=dialerV25bisOnOffDelay, dialerInfoTable=dialerInfoTable, dialerIsdnTR6BChLocalDn=dialerIsdnTR6BChLocalDn, dialerIsdnTPHBChLocalDnType=dialerIsdnTPHBChLocalDnType, dialerV22BisImcState=dialerV22BisImcState, dialerV32BisLLConfig=dialerV32BisLLConfig, dialerV32BisAnswerConfig=dialerV32BisAnswerConfig, dialerIsdnTPHBChLocalSubType=dialerIsdnTPHBChLocalSubType, dialerCtrlDialMask=dialerCtrlDialMask, dialerDirectRs232DtrSignal=dialerDirectRs232DtrSignal, dialerIsdnNET3BChLocalDn=dialerIsdnNET3BChLocalDn, dialerIsdnNI1DChTeiStatus=dialerIsdnNI1DChTeiStatus, dialerIsdnVN3DChEntry=dialerIsdnVN3DChEntry, dialerIsdnTPHBChRemoteSubType=dialerIsdnTPHBChRemoteSubType, dialerCtrlAnsEnable=dialerCtrlAnsEnable, IsdnL2State=IsdnL2State, dialerCtrlPortRef=dialerCtrlPortRef, dialerIsdnVN3DChPortRef=dialerIsdnVN3DChPortRef, dialerV22BisImcDeltaRiDelay=dialerV22BisImcDeltaRiDelay, dialerCtrlNumber=dialerCtrlNumber, dialerV22BisDnaRxLevel=dialerV22BisDnaRxLevel, dialerAtCmdBitsPerByte=dialerAtCmdBitsPerByte, dialerV22BisImcHndshkAbortTimer=dialerV22BisImcHndshkAbortTimer, dialerAtCmdConnDelay=dialerAtCmdConnDelay, dialerIsdnNI1BChTnsNetId=dialerIsdnNI1BChTnsNetId, dialerIsdnNI1BChCallType=dialerIsdnNI1BChCallType, dialerIsdnNI1BChStoDnType=dialerIsdnNI1BChStoDnType, dialerV32BisPrimBitRate=dialerV32BisPrimBitRate, dialerV32BisRingCount=dialerV32BisRingCount, dialerV32BisOverrNum=dialerV32BisOverrNum, dialerIsdnNET3BChTnsIdPlan=dialerIsdnNET3BChTnsIdPlan, dialerV32BisCurrRetry=dialerV32BisCurrRetry, dialerV25bisHangupDelay=dialerV25bisHangupDelay, dialerIsdnTR6BChStoBcOpt=dialerIsdnTR6BChStoBcOpt, dialerIsdnTPHDChPortRef=dialerIsdnTPHDChPortRef, IsdnTnsIdPlan=IsdnTnsIdPlan, dialerV32BisCarrierWait=dialerV32BisCarrierWait, dialerIsdnNET3BChBChannel=dialerIsdnNET3BChBChannel, dialerIsdnNET3BChStoDnType=dialerIsdnNET3BChStoDnType, dialerIsdnNET3BChLocalDnType=dialerIsdnNET3BChLocalDnType, dialerIsdnTR6BChTeiStatus=dialerIsdnTR6BChTeiStatus, dialerInfoTimeStart=dialerInfoTimeStart, dialerV22BisImcWaitCarrier=dialerV22BisImcWaitCarrier, dialerIsdnNET3BChCcNbCause=dialerIsdnNET3BChCcNbCause, dialerIsdnTR6BChCcCause=dialerIsdnTR6BChCcCause, dialerIsdnNET3BChStoTnsNetId=dialerIsdnNET3BChStoTnsNetId, dialerIsdnNET3BChStoBcOpt=dialerIsdnNET3BChStoBcOpt, IsdnAnsEnable=IsdnAnsEnable, dialerIsdnTPHBChPortRef=dialerIsdnTPHBChPortRef, IsdnScrStatus=IsdnScrStatus, dialerIsdnTR6BChStoDnPlan=dialerIsdnTR6BChStoDnPlan, dialerIsdnVN3BChTeiValue=dialerIsdnVN3BChTeiValue, dialerIsdnTPHBChStoSubType=dialerIsdnTPHBChStoSubType, dialerDirectInfoTable=dialerDirectInfoTable, dialerIsdnVN3BChCcCause=dialerIsdnVN3BChCcCause, dialerV25bisRetryAllowed=dialerV25bisRetryAllowed, dialerV22BisImcWaitDialTone=dialerV22BisImcWaitDialTone, dialerV32BisLLBitRate=dialerV32BisLLBitRate, dialerV22BisImcDecadic=dialerV22BisImcDecadic, dialerV32BisEqmLevel=dialerV32BisEqmLevel, dialerV32BisDialToneWait=dialerV32BisDialToneWait, IsdnNI1BCcState=IsdnNI1BCcState, dialerV32BisRiOnOffDetect=dialerV32BisRiOnOffDetect, dialerIsdnTPHBChL3State=dialerIsdnTPHBChL3State, dialerIsdnNI1BChL2State=dialerIsdnNI1BChL2State, dialerIsdnTR6BChL3State=dialerIsdnTR6BChL3State, dialerV22BisDnaDTMFLevel=dialerV22BisDnaDTMFLevel, dialerV32BisSpeakerLevel=dialerV32BisSpeakerLevel, dialerV22BisDnaDsrSignal=dialerV22BisDnaDsrSignal, dialerIsdnTPHBChCcNbCause=dialerIsdnTPHBChCcNbCause, dialerIsdnVN3BChLocalDnPlan=dialerIsdnVN3BChLocalDnPlan, dialerControlEntry=dialerControlEntry, dialerV22BisImcCallProgress=dialerV22BisImcCallProgress, dialerV32BisOverrConfig=dialerV32BisOverrConfig, dialerIsdnTPHBChRemoteDnType=dialerIsdnTPHBChRemoteDnType, IsdnStoDefined=IsdnStoDefined, dialerIsdnNI1BChTable=dialerIsdnNI1BChTable, dialerIsdnNET3BChRemoteSub=dialerIsdnNET3BChRemoteSub, dialerV32BisDTMFDuration=dialerV32BisDTMFDuration, dialerIsdnNI1BChRemoteSub=dialerIsdnNI1BChRemoteSub, dialerV22BisDnaDloInd=dialerV22BisDnaDloInd, dialerAtCmdRetryAllowed=dialerAtCmdRetryAllowed, dialerV32BisDTMFFreq1Level=dialerV32BisDTMFFreq1Level, dialerIsdnVN3BChL3State=dialerIsdnVN3BChL3State, dialerCtrlDirectDSROnOff=dialerCtrlDirectDSROnOff, dialerV22BisImcDtrSignal=dialerV22BisImcDtrSignal, dialerV32BisLeasedLine=dialerV32BisLeasedLine, dialerIsdnVN3DChTeiStatus=dialerIsdnVN3DChTeiStatus, dialerIsdnNI1BChCallSpeed=dialerIsdnNI1BChCallSpeed, dialerIsdnNET3BChRemoteDnType=dialerIsdnNET3BChRemoteDnType, dialerIsdnNET3BChLocalDnPlan=dialerIsdnNET3BChLocalDnPlan, dialerV22BisImcDTMFDelay=dialerV22BisImcDTMFDelay, dialerIsdnTPHBChStoDefined=dialerIsdnTPHBChStoDefined, dialerIsdnNI1BChStoDigs=dialerIsdnNI1BChStoDigs, dialerV22BisImcMakeBreakRatio=dialerV22BisImcMakeBreakRatio, dialerV32BisTxLevel=dialerV32BisTxLevel, dialerIsdnTR6BChRemoteDnType=dialerIsdnTR6BChRemoteDnType, dialerV22BisDnaSecondaryNum=dialerV22BisDnaSecondaryNum, dialerV22BisImcPulseDelay=dialerV22BisImcPulseDelay, dialerV22BisDnaHndshkAbortTimer=dialerV22BisDnaHndshkAbortTimer, dialerIsdnTR6BChRemoteDnPlan=dialerIsdnTR6BChRemoteDnPlan, dialerIsdnTPHBChLocalSub=dialerIsdnTPHBChLocalSub, dialerCtrlActionState=dialerCtrlActionState, dialerIsdnNI1BChPortRef=dialerIsdnNI1BChPortRef, dialerIsdnNI1BChRemoteDn=dialerIsdnNI1BChRemoteDn, dialerIsdnNI1BChL3State=dialerIsdnNI1BChL3State, dialerV32BisRetry=dialerV32BisRetry, dialerIsdnTR6BChLocalDnPlan=dialerIsdnTR6BChLocalDnPlan, dialerV25bisCtsSignal=dialerV25bisCtsSignal, module=module, dialerIsdnNET3BChCallType=dialerIsdnNET3BChCallType, dialerIsdnNET3BChStoBcType=dialerIsdnNET3BChStoBcType, dialerDirectRs232RiSignal=dialerDirectRs232RiSignal, dialerV32BisCallingTone=dialerV32BisCallingTone, dialerDirectRs232DsrSignal=dialerDirectRs232DsrSignal, dialerIsdnTR6BChStoDefined=dialerIsdnTR6BChStoDefined, dialerAtCmdPrimaryNum=dialerAtCmdPrimaryNum, dialerIsdnNI1BChRemoteDnPlan=dialerIsdnNI1BChRemoteDnPlan, dialerIsdnTR6BChRemoteDn=dialerIsdnTR6BChRemoteDn, OnOff=OnOff, dialerIsdnNI1BChCcCause=dialerIsdnNI1BChCcCause, dialerDirectRs232InfoTable=dialerDirectRs232InfoTable, dialerDirectMode=dialerDirectMode, dialerV25bisPrimaryNum=dialerV25bisPrimaryNum, dialerV25bisSecondaryNum=dialerV25bisSecondaryNum, dialerIsdnNI1BChCcNbCause=dialerIsdnNI1BChCcNbCause, dialerIsdnVN3BChTeiStatus=dialerIsdnVN3BChTeiStatus, dialerAtCmdLossDelay=dialerAtCmdLossDelay, dialerV32BisDsrSignal=dialerV32BisDsrSignal, dialerIsdnNI1BChStoBcOpt=dialerIsdnNI1BChStoBcOpt, dialerIsdnNI1BChTeiValue=dialerIsdnNI1BChTeiValue, IsdnCallOpt=IsdnCallOpt, dialerV32BisLLTxLevel=dialerV32BisLLTxLevel, dialerInfoLineSpeed=dialerInfoLineSpeed, dialerIsdnVN3BChRemoteDnType=dialerIsdnVN3BChRemoteDnType, dialerIsdnNET3BChLocalSubType=dialerIsdnNET3BChLocalSubType, dialerIsdnTR6BChTeiValue=dialerIsdnTR6BChTeiValue, dialerV32BisHangupSignal=dialerV32BisHangupSignal, dialerInfoDataEncoding=dialerInfoDataEncoding, dialerV22BisImcDsrSignal=dialerV22BisImcDsrSignal, dialerIsdnVN3BChCallType=dialerIsdnVN3BChCallType, dialerAtCmdDsrSignal=dialerAtCmdDsrSignal, dialerIsdnNI1BChCallOpt=dialerIsdnNI1BChCallOpt, dialerDirectInfoEntry=dialerDirectInfoEntry, dialerIsdnTR6BChScrStatus=dialerIsdnTR6BChScrStatus, IsdnActState=IsdnActState, dialerIsdnNI1BChStoDnPlan=dialerIsdnNI1BChStoDnPlan, dialerV22BisDnaDsrRtsDelay=dialerV22BisDnaDsrRtsDelay, dialerIsdnNET3BChRemoteDnPlan=dialerIsdnNET3BChRemoteDnPlan)
