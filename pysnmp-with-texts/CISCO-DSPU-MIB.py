#
# PySNMP MIB module CISCO-DSPU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DSPU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, NotificationType, Counter32, Counter64, IpAddress, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Integer32, Gauge32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Counter32", "Counter64", "IpAddress", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Integer32", "Gauge32", "Bits", "iso")
TruthValue, DisplayString, RowStatus, MacAddress, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "MacAddress", "TextualConvention", "TimeStamp")
ciscoDspuMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 24))
ciscoDspuMIB.setRevisions(('1995-12-18 00:00', '1995-08-15 00:00', '1995-01-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDspuMIB.setRevisionsDescriptions(('Declare some Trap objects obsolete and create new Trap Objects to permit Trap generation.', 'Specify a correct (non-negative) range for several index objects.', 'Updated compliance/conformance information.',))
if mibBuilder.loadTexts: ciscoDspuMIB.setLastUpdated('9508150000Z')
if mibBuilder.loadTexts: ciscoDspuMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDspuMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoDspuMIB.setDescription('Used to define and manage DSPU objects.')
dspuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1))
dspuNode = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1))
dspuPoolClass = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 2))
dspuPooledLu = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 3))
dspuPu = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4))
dspuLu = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5))
dspuSap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6))
dspuNodeRsrb = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeRsrb.setStatus('current')
if mibBuilder.loadTexts: dspuNodeRsrb.setDescription('RSRB feature enabled/disabled for the DSPU node. TRUE -> RSRB feature enabled FALSE -> RSRB feature disabled If the RSRB feature is enabled, the following object values must be valid (i.e. non-zero): - dspuNodeRsrbLocalVirtualRing - dspuNodeRsrbBridgeNumber - dspuNodeRsrbTargetVirtualRing - dspuNodeRsrbVirtualMacAddress')
dspuNodeRsrbLocalVirtualRing = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeRsrbLocalVirtualRing.setStatus('current')
if mibBuilder.loadTexts: dspuNodeRsrbLocalVirtualRing.setDescription('Local virtual ring number used by the DSPU node. LocalVirtualRing is zero if RSRB is not enabled.')
dspuNodeRsrbBridgeNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeRsrbBridgeNumber.setStatus('current')
if mibBuilder.loadTexts: dspuNodeRsrbBridgeNumber.setDescription('Bridge number connecting the DSPU LocalVirtualRing with the RSRB TargetVirtualRing. Currently, the only valid BridgeNumber supported is 1. BridgeNumber must be one if RSRB is enabled. BridgeNumber is zero if RSRB is not enabled.')
dspuNodeRsrbTargetVirtualRing = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeRsrbTargetVirtualRing.setStatus('current')
if mibBuilder.loadTexts: dspuNodeRsrbTargetVirtualRing.setDescription('Target virtual ring number used for RSRB. TargetVirtualRing is zero if RSRB is not enabled.')
dspuNodeRsrbVirtualMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeRsrbVirtualMacAddress.setStatus('current')
if mibBuilder.loadTexts: dspuNodeRsrbVirtualMacAddress.setDescription('Virtual MAC address of the the DSPU node. VirtualMacAddress is zero if RSRB is not enabled.')
dspuNodeDefaultPu = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeDefaultPu.setStatus('current')
if mibBuilder.loadTexts: dspuNodeDefaultPu.setDescription('Default-PU feature enabled/disabled for the DSPU node. TRUE -> Default-PU feature enabled FALSE -> Default-PU feature disabled')
dspuNodeDefaultPuWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeDefaultPuWindowSize.setStatus('current')
if mibBuilder.loadTexts: dspuNodeDefaultPuWindowSize.setDescription('Send/receive window size to be used across the link between the default-PU and a remote PU.')
dspuNodeDefaultPuMaxIframe = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 18432)).clone(1472)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeDefaultPuMaxIframe.setStatus('current')
if mibBuilder.loadTexts: dspuNodeDefaultPuMaxIframe.setDescription('Maximum size of an I-frame that can be transmitted/received across the link between the default-PU and a remote PU.')
dspuNodeActivationWindow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuNodeActivationWindow.setStatus('current')
if mibBuilder.loadTexts: dspuNodeActivationWindow.setDescription('Activation pacing window used by the DSPU node to limit the number of activation RUs sent for a given SAP before waiting for responses from the remote.')
dspuNodeLastConfigChgTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuNodeLastConfigChgTime.setStatus('current')
if mibBuilder.loadTexts: dspuNodeLastConfigChgTime.setDescription('Timestamp of last change to DSPU configuration parameters. LastConfigChgTime reflects any change in DSPU configuration.')
dspuPoolClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 2, 1), )
if mibBuilder.loadTexts: dspuPoolClassTable.setStatus('current')
if mibBuilder.loadTexts: dspuPoolClassTable.setDescription('Table listing defined pool classes for the DSPU node. A pool class is defined at the DSPU node as a pool of upstream LUs that may be shared among downstream PUs. Each entry in the table represents a separate pool class definition. Entries in the table may not be created/deleted; however, values in existing entries may be modified. Pool classes are created when an existing LU is defined as a member of the pool class.')
dspuPoolClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-DSPU-MIB", "dspuPoolClassIndex"))
if mibBuilder.loadTexts: dspuPoolClassEntry.setStatus('current')
if mibBuilder.loadTexts: dspuPoolClassEntry.setDescription('Each entry represents a defined pool class.')
dspuPoolClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: dspuPoolClassIndex.setStatus('current')
if mibBuilder.loadTexts: dspuPoolClassIndex.setDescription('Index of a pool class entry in the dspuPoolClassTable.')
dspuPoolClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuPoolClassName.setStatus('current')
if mibBuilder.loadTexts: dspuPoolClassName.setDescription('Name identifier of the pool class.')
dspuPoolClassInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspuPoolClassInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: dspuPoolClassInactivityTimeout.setDescription('Value (in minutes) of the inactivity timeout that will be applied to active LU sessions assigned from the pool class. The inactivity timeout feature for pooled LUs is disabled if the InactivityTimeout value is zero.')
dspuPoolClassOperUpStreamLuDefs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPoolClassOperUpStreamLuDefs.setStatus('current')
if mibBuilder.loadTexts: dspuPoolClassOperUpStreamLuDefs.setDescription('Number of upstream LUs defined in the pool class.')
dspuPoolClassOperDnStreamLuDefs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPoolClassOperDnStreamLuDefs.setStatus('current')
if mibBuilder.loadTexts: dspuPoolClassOperDnStreamLuDefs.setDescription('Number of downstream LUs defined in the pool class.')
dspuPooledLuTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 3, 1), )
if mibBuilder.loadTexts: dspuPooledLuTable.setStatus('current')
if mibBuilder.loadTexts: dspuPooledLuTable.setDescription('Table listing all LUs defined in a specified pool class. The entries in the table provide information such that the downstream LUs in the pool can be correlated with the upstream LUs to which they may be assigned and vice versa. If all upstream LUs have been assigned, downstream LUs may be waiting for assignment. If there are no downstream LUs waiting for assignment, upstream LUs may be unassigned.')
dspuPooledLuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-DSPU-MIB", "dspuPoolClassIndex"), (0, "CISCO-DSPU-MIB", "dspuPuOperIndex"), (0, "CISCO-DSPU-MIB", "dspuLuOperLuLocalAddress"))
if mibBuilder.loadTexts: dspuPooledLuEntry.setStatus('current')
if mibBuilder.loadTexts: dspuPooledLuEntry.setDescription('Each entry represents an LU that is defined as a member of the specified pool class.')
dspuPooledLuPeerPuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPooledLuPeerPuIndex.setStatus('current')
if mibBuilder.loadTexts: dspuPooledLuPeerPuIndex.setDescription('Index (dspuPuOperIndex) of the peer PU that owns the peer LU. PeerPuIndex is zero if peer LU has not been assigned.')
dspuPooledLuPeerLuLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPooledLuPeerLuLocalAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPooledLuPeerLuLocalAddress.setDescription('NAU address (dspuLuOperLuLocalAddress) of the peer LU. PeerLuLocalAddress is zero if peer LU has not been assigned.')
dspuPuAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1), )
if mibBuilder.loadTexts: dspuPuAdminTable.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminTable.setDescription('Table listing all defined upstream/downstream PUs that are owned by the DSPU node. NOTE: The dspuPuAdminTable does not include default downstream PUs that may be dynamically created.')
dspuPuAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-DSPU-MIB", "dspuPuAdminIndex"))
if mibBuilder.loadTexts: dspuPuAdminEntry.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminEntry.setDescription('Each entry represents a defined upstream/downstream PU.')
dspuPuAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: dspuPuAdminIndex.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminIndex.setDescription('Index of the PU entry in the dspuPuAdminTable.')
dspuPuAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminName.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminName.setDescription('Name of the PU.')
dspuPuAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstreamPu", 1), ("dnstreamPu", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminType.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminType.setDescription('PU Type is either upstream or downstream.')
dspuPuAdminRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminRemoteMacAddress.setDescription('MAC address of the remote PU.')
dspuPuAdminRemoteSapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminRemoteSapAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminRemoteSapAddress.setDescription('SAP address of the remote PU.')
dspuPuAdminLocalSapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminLocalSapAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminLocalSapAddress.setDescription('SAP address of the local PU.')
dspuPuAdminXid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminXid.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminXid.setDescription('Upstream PU : XID that will be sent to the remote PU. Dnstream PU : XID that must be received from the remote PU.')
dspuPuAdminXidFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("formatUnknown", 1), ("format0", 2), ("format3", 3))).clone('format3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminXidFmt.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminXidFmt.setDescription('Type of XID format used during activation of the link between this dspuNode and the remote PU.')
dspuPuAdminWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminWindowSize.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminWindowSize.setDescription('Send/Receive window size to be used across the link between this dspuNode and the remote PU.')
dspuPuAdminMaxIframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 18432)).clone(1472)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminMaxIframe.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminMaxIframe.setDescription('Maximum size of an I-frame that can be transmitted/received across the link between this dspuNode and the remote PU.')
dspuPuAdminLinkRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminLinkRetryCount.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminLinkRetryCount.setDescription('Number of times that the DSPU node will attempt to activate the link between the dspuNode and the remote PU.')
dspuPuAdminLinkRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminLinkRetryTimeout.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminLinkRetryTimeout.setDescription('Value (in seconds) for the delay between link activation attempts between the dspuNode and the remote PU.')
dspuPuAdminStartPu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminStartPu.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminStartPu.setDescription('Attempt link activation with the remote PU. TRUE -> Attempt link activation with remote PU. FALSE -> Do not attempt link activation with remote PU.')
dspuPuAdminDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 8, 9, 10, 11))).clone(namedValues=NamedValues(("undefined", 1), ("sdlc", 2), ("ethernet", 5), ("tokenRing", 6), ("rsrb", 8), ("framerelay", 9), ("fddi", 10), ("qllc", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminDlcType.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminDlcType.setDescription('DLC type used by the dspuNode for link activation with the remote PU.')
dspuPuAdminDlcUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminDlcUnit.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminDlcUnit.setDescription('DLC unit used by the dspuNode for link activation with the remote PU.')
dspuPuAdminDlcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminDlcPort.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminDlcPort.setDescription('DLC port used by the dspuNode for link activation with the remote PU.')
dspuPuAdminFocalPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminFocalPoint.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminFocalPoint.setDescription('PU serves as a focal point for alert forwarding. TRUE -> PU serves as focal point FALSE -> PU does not serve as focal point Only an upstream PU may be defined as a focal point. Downstream PUs can never be defined as a focal point; FocalPoint is always FALSE for downstream PUs. The DSPU node may define only one upstream PU as a focal point PU.')
dspuPuAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminRowStatus.setDescription("Used by a Management Station to create or delete the row entry in the dspuPuAdminTable following the RowStatus textual convention. Upon successful creation of the row, an Agent automatically creates a corresponding entry in the dspuPuOperTable. The Management Station can set the value to 'destroy (6)' and the Agent will then delete the rows corresponding to this PU from the dspuPuAdminTable and dspuPuOperTable.")
dspuPuAdminRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuPuAdminRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPuAdminRemoteAddress.setDescription('Poll address, DLCI, or subscriber address associated with the remote PU.')
dspuPuOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2), )
if mibBuilder.loadTexts: dspuPuOperTable.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperTable.setDescription('Table listing all active upstream/downstream PUs that are owned by the DSPU node (including default PUs). NOTE: In addition to the explicitly defined PUs from the dspuPuAdminTable, the dspuPuOperTable also includes default downstream PUs that may be dynamically created.')
dspuPuOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-DSPU-MIB", "dspuPuOperIndex"))
if mibBuilder.loadTexts: dspuPuOperEntry.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperEntry.setDescription('Each entry represents an active upstream/downstream PU.')
dspuPuOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: dspuPuOperIndex.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperIndex.setDescription('Index of the PU entry in dspuPuOperTable.')
dspuPuOperName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperName.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperName.setDescription('Name of the PU.')
dspuPuOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstreamPu", 1), ("dnstreamPu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperType.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperType.setDescription('PU type is either upstream or downstream.')
dspuPuOperRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperRemoteMacAddress.setDescription('MAC address of the remote PU.')
dspuPuOperRemoteSapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperRemoteSapAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperRemoteSapAddress.setDescription('SAP address of the remote PU.')
dspuPuOperLocalSapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperLocalSapAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperLocalSapAddress.setDescription('SAP address of the local PU.')
dspuPuOperXid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperXid.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperXid.setDescription('Upstream PU : XID that was sent to the remote PU. Dnstream PU : XID that was received from the remote PU.')
dspuPuOperXidFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("formatUnknown", 1), ("format0", 2), ("format3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperXidFmt.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperXidFmt.setDescription('Type of XID format used during activation of the link between this dspuNode and the remote PU.')
dspuPuOperWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperWindowSize.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperWindowSize.setDescription('Send/Receive window size to be used across the link between this dspuNode and the remote PU.')
dspuPuOperMaxIframe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 18432)).clone(1472)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperMaxIframe.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperMaxIframe.setDescription('Maximum size of an I-frame that can be transmitted/received across the link between this dspuNode and the remote PU.')
dspuPuOperLinkRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperLinkRetryCount.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperLinkRetryCount.setDescription('Number of times that the DSPU node will attempt to activate the link between the dspuNode and the remote PU.')
dspuPuOperLinkRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperLinkRetryTimeout.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperLinkRetryTimeout.setDescription('Value (in seconds) for the delay between link activation attempts between the dspuNode and the remote PU.')
dspuPuOperStartPu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperStartPu.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperStartPu.setDescription('Attempt link activation with the remote PU. TRUE -> Attempt link activation with remote PU. FALSE -> Do not attempt link activation with remote PU.')
dspuPuOperDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 8, 9, 10, 11))).clone(namedValues=NamedValues(("undefined", 1), ("sdlc", 2), ("ethernet", 5), ("tokenRing", 6), ("rsrb", 8), ("framerelay", 9), ("fddi", 10), ("qllc", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperDlcType.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperDlcType.setDescription('DLC type used by the dspuNode for link activation with the remote PU.')
dspuPuOperDlcUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperDlcUnit.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperDlcUnit.setDescription('DLC unit used by the dspuNode for link activation with the remote PU.')
dspuPuOperDlcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperDlcPort.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperDlcPort.setDescription('DLC port used by the dspuNode for link activation with the remote PU.')
dspuPuOperFocalPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperFocalPoint.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperFocalPoint.setDescription('PU serves as a focal point for alert forwarding. TRUE -> PU serves as focal point FALSE -> PU does not serve as focal point Only an upstream PU may be defined as a focal point. Downstream PUs can never be defined as a focal point; FocalPoint is always FALSE for downstream PUs. The DSPU node may define only one upstream PU as a focal point PU.')
dspuPuOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperState.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperState.setDescription('Operational state of PU is either active or inactive.')
dspuPuOperFsmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("linkReset", 1), ("linkPendConnOut", 2), ("linkPendConnIn", 3), ("linkPendXid", 4), ("linkXidNeg", 5), ("linkConnOut", 6), ("linkConnIn", 7), ("linkConnected", 8), ("puPendAct", 9), ("puActive", 10), ("puBusy", 11), ("puPendInact", 12), ("linkPendDisc", 13), ("linkPendClose", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperFsmState.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperFsmState.setDescription('Current FSM state of the PU as follows: linkReset - Link is in reset state - not connected linkPendConnOut - Pending ConnectOut to establish link linkPendConnIn - Pending ConnectIn to establish link linkPendXid - Pending XID negotiation on the link linkXidNeg - XID negotiation proceeding on link linkConnOut - ConnectOut link activation linkConnIn - ConnectIn link activation linkConnected - Link connected, PU inactive puPendAct - Link connected, PU pending activation puActive - Link connected, PU active puBusy - Link connected, PU busy puPendInact - Link connected, PU pending deactivation linkPendDisc - Pending disconnect of link linkPendClose - Pending close of link station')
dspuPuOperStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperStartTime.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperStartTime.setDescription('Timestamp of PU activation (when ACTPU +rsp received).')
dspuPuOperLastStateChgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperLastStateChgTime.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperLastStateChgTime.setDescription('TimeStamp of last PU state change between active<->inactive.')
dspuPuOperRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuOperRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: dspuPuOperRemoteAddress.setDescription('Poll address, DLCI, or subscriber address associated with the remote PU.')
dspuPuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3), )
if mibBuilder.loadTexts: dspuPuStatsTable.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsTable.setDescription('Table listing the statistics recorded for each PU.')
dspuPuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-DSPU-MIB", "dspuPuOperIndex"))
if mibBuilder.loadTexts: dspuPuStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsEntry.setDescription('Each entry represents an active upstream/downstream PU and has a corresponding entry in the dspuPuOperTable.')
dspuPuStatsSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsSentBytes.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsSentBytes.setDescription('Number of bytes sent by this PU.')
dspuPuStatsRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsRcvdBytes.setDescription('Number of bytes received by this PU.')
dspuPuStatsSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsSentFrames.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsSentFrames.setDescription('Number of frames sent by this PU.')
dspuPuStatsRcvdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsRcvdFrames.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsRcvdFrames.setDescription('Number of frames received by this PU.')
dspuPuStatsSentNegativeRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsSentNegativeRsps.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsSentNegativeRsps.setDescription('Number of negative responses sent by this PU.')
dspuPuStatsRcvdNegativeRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsRcvdNegativeRsps.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsRcvdNegativeRsps.setDescription('Number of negative responses received by this PU.')
dspuPuStatsActiveLus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsActiveLus.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsActiveLus.setDescription('Number of active LUs on this PU (LU becomes active when ACTLU +rsp received).')
dspuPuStatsInactiveLus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsInactiveLus.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsInactiveLus.setDescription('Number of inactive LUs on this PU (LU is inactive until ACTLU rq or ACTLU +rsp received).')
dspuPuStatsBindLus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsBindLus.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsBindLus.setDescription('Number of LUs on this PU which are active-in-session. (LU is active-in-session when BIND rq received)')
dspuPuStatsActivationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsActivationFailures.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsActivationFailures.setDescription('Number of activation failures for this PU.')
dspuPuStatsLastActivationFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noError", 1), ("otherError", 2), ("internalError", 3), ("configurationError", 4), ("puNegativeResponse", 5), ("puAlreadyActive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuPuStatsLastActivationFailureReason.setStatus('current')
if mibBuilder.loadTexts: dspuPuStatsLastActivationFailureReason.setDescription('Reason for last activation failure of this PU as follows: noError - No PU activation failure has been detected otherError - Undefined error detected during PU activation internalError - Internal resources error detected during PU activation configurationError - PU configuration error - PU could not be activated puNegativeResponse - Negative ACTPU response received from remote PU puAlreadyActive - PU is already active')
dspuPuTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 4))
dspuPuStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 4, 1)).setObjects(("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuPuOperState"))
if mibBuilder.loadTexts: dspuPuStateChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: dspuPuStateChangeTrap.setDescription('Generated when the operational state of the PU changes between active<-->inactive. The following information is returned: dspuPuOperName -> PU name dspuPuOperState -> Current operational state of the PU')
dspuPuActivationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 4, 2)).setObjects(("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuPuOperState"), ("CISCO-DSPU-MIB", "dspuPuStatsLastActivationFailureReason"))
if mibBuilder.loadTexts: dspuPuActivationFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: dspuPuActivationFailureTrap.setDescription('Generated whenever a PU activation failure is detected. The following information is returned: dspuPuOperName -> PU name dspuPuOperState -> Current operational state of the PU dspuPuStatsLastActivationFailureReason -> Reason for PU activation failure')
dspuPuTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 4, 0))
newdspuPuStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 4, 0, 1)).setObjects(("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuPuOperState"))
if mibBuilder.loadTexts: newdspuPuStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: newdspuPuStateChangeTrap.setDescription('Generated when the operational state of the PU changes between active<-->inactive. The following information is returned: dspuPuOperName -> PU name dspuPuOperState -> Current operational state of the PU')
newdspuPuActivationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 4, 4, 0, 2)).setObjects(("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuPuOperState"), ("CISCO-DSPU-MIB", "dspuPuStatsLastActivationFailureReason"))
if mibBuilder.loadTexts: newdspuPuActivationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: newdspuPuActivationFailureTrap.setDescription('Generated whenever a PU activation failure is detected. The following information is returned: dspuPuOperName -> PU name dspuPuOperState -> Current operational state of the PU dspuPuStatsLastActivationFailureReason -> Reason for PU activation failure')
dspuLuAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 1), )
if mibBuilder.loadTexts: dspuLuAdminTable.setStatus('current')
if mibBuilder.loadTexts: dspuLuAdminTable.setDescription('Table listing all LUs owned by the PU. NOTE: The dspuLuAdminTable does not include LUs owned by default downstream PUs that may be dynamically created.')
dspuLuAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-DSPU-MIB", "dspuPuAdminIndex"), (0, "CISCO-DSPU-MIB", "dspuLuAdminLuLocalAddress"))
if mibBuilder.loadTexts: dspuLuAdminEntry.setStatus('current')
if mibBuilder.loadTexts: dspuLuAdminEntry.setDescription('Each entry represents a defined LU owned by the PU.')
dspuLuAdminLuLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: dspuLuAdminLuLocalAddress.setStatus('current')
if mibBuilder.loadTexts: dspuLuAdminLuLocalAddress.setDescription('NAU address of the local LU.')
dspuLuAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pooled", 1), ("dedicated", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuLuAdminType.setStatus('current')
if mibBuilder.loadTexts: dspuLuAdminType.setDescription('LU type is either pooled or dedicated.')
dspuLuAdminPoolClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuLuAdminPoolClassName.setStatus('current')
if mibBuilder.loadTexts: dspuLuAdminPoolClassName.setDescription('Pool class to which the LU is defined as a member. The dspuLuAdminPoolClassName is valid for pooled LUs only.')
dspuLuAdminPeerPuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuLuAdminPeerPuIndex.setStatus('current')
if mibBuilder.loadTexts: dspuLuAdminPeerPuIndex.setDescription('For downstream LUs, the PeerPuIndex identifies the upstream PU that owns the upstream LU to which this downstream LU is assigned. For upstream LUs, the PeerPuIndex identifies the downstream PU that owns the downstream LU to which this upstream LU is assigned. The PeerPuIndex is valid for dedicated LUs only; otherwise, the PeerPuIndex is zero.')
dspuLuAdminPeerLuLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuLuAdminPeerLuLocalAddress.setStatus('current')
if mibBuilder.loadTexts: dspuLuAdminPeerLuLocalAddress.setDescription('For downstream LUs, the PeerLuLocalAddress identifies the NAU address of the upstream LU to which this downstream LU is assigned. For upstream LUs, the PeerLuLocalAddress identifies the NAU address of the downstream LU to which this upstream LU is assigned. The PeerLuLocalAddress is valid for dedicated LUs only; otherwise, the PeerLuLocalAddress is zero.')
dspuLuAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuLuAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: dspuLuAdminRowStatus.setDescription("Used by a Management Station to create or delete the row entry in the dspuLuAdminTable following the RowStatus textual convention. Upon successful creation of the row, an Agent automatically creates a corresponding entry in the dspuLuOperTable. The Management Station can set the value to 'destroy (6)' and the Agent will then delete the rows corresponding to this LU from the dspuLuAdminTable and the dspuLuOperTable.")
dspuLuOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2), )
if mibBuilder.loadTexts: dspuLuOperTable.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperTable.setDescription('Table listing all LUs owned by the PU. NOTE: In addition to the LUs owned by explicitly defined PUs from the dspuLuAdminTable, the dspuLuOperTable also includes the LUs owned by default downstream PUs that may be dynamically created.')
dspuLuOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-DSPU-MIB", "dspuPuOperIndex"), (0, "CISCO-DSPU-MIB", "dspuLuOperLuLocalAddress"))
if mibBuilder.loadTexts: dspuLuOperEntry.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperEntry.setDescription('Each entry represents a defined LU owned by the PU.')
dspuLuOperLuLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: dspuLuOperLuLocalAddress.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperLuLocalAddress.setDescription('NAU address of the local LU.')
dspuLuOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pooled", 1), ("dedicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuLuOperType.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperType.setDescription('LU type is either pooled or dedicated.')
dspuLuOperPoolClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuLuOperPoolClassName.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperPoolClassName.setDescription('Pool class to which the LU is defined as a member. The dspuLuOperPoolClassName is valid for pooled LUs only.')
dspuLuOperPeerPuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuLuOperPeerPuIndex.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperPeerPuIndex.setDescription('For downstream LUs, the PeerPuIndex identifies the upstream PU that owns the upstream LU to which this downstream LU is assigned. For upstream LUs, the PeerPuIndex identifies the downstream PU that owns the downstream LU to which this upstream LU is assigned. If PeerPuIndex is zero, the LU is a pooled LU and has not been assigned a peer LU from the pool.')
dspuLuOperPeerLuLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuLuOperPeerLuLocalAddress.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperPeerLuLocalAddress.setDescription('For downstream LUs, the PeerLuLocalAddress identifies the NAU address of the upstream LU to which this downstream LU is assigned. For upstream LUs, the PeerLuLocalAddress identifies the NAU address of the downstream LU to which this upstream LU is assigned. If the PeerLuLocalAddress is zero, the LU is a pooled LU and has not been assigned a peer LU from the pool.')
dspuLuOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuLuOperState.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperState.setDescription('Operational state of LU is either active or inactive.')
dspuLuOperFsmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("reset", 1), ("dnLuStarted", 2), ("upLuActive", 3), ("dnLuPendAct", 4), ("dnLuActUnav", 5), ("upLuPendAvail", 6), ("bothAvail", 7), ("dnLuPendInact", 8), ("upLuPendInact", 9), ("luInactivityTimeout", 10), ("dnInactivityPendInact", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuLuOperFsmState.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperFsmState.setDescription('Current FSM state of the LU as follows: reset - neither dnLu or upLu active dnLuStarted - dnLu active, upLu inactive upLuActive - upLu active, dnLu inactive dnLuPendAct - dnLu pending activation, upLu active-unavailable dnLuActUnav - dnLu active-unavailable, upLu active-available upLuPendAvail - upLu pending-available bothAvail - both upLu and dnLu active-available dnLuPendInact - dnLu pending inactive upLuPendInact - upLu pending inactive luInactivityTimeout - inactivity Timeout on LU-to-LU session dnInactivityPendInact - dnLu pending inactive from inactivity timeout')
dspuLuOperSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bound", 1), ("unbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuLuOperSessionState.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperSessionState.setDescription('Operational state of LU session is either bound or unbound.')
dspuLuOperLastActivationFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noError", 1), ("otherError", 2), ("luNegativeResponse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuLuOperLastActivationFailureReason.setStatus('current')
if mibBuilder.loadTexts: dspuLuOperLastActivationFailureReason.setDescription('Reason for last activation failure of this PU as follows: noError - No LU activation failure has been detected otherError - Undefined error detected during LU activation luNegativeResponse - Negative ACTLU response received from remote LU')
dspuLuTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 3))
dspuLuStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 3, 1)).setObjects(("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuLuOperLuLocalAddress"), ("CISCO-DSPU-MIB", "dspuLuOperState"))
if mibBuilder.loadTexts: dspuLuStateChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: dspuLuStateChangeTrap.setDescription('Generated when the operational state of the PU changes between active<-->inactive. The following information is returned: dspuPuOperName -> PU name dspuLuOperLuLocalAddress -> NAU address of LU dspuLuOperState -> Current operational state of the LU')
dspuLuTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 3, 0))
newdspuLuStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 3, 0, 1)).setObjects(("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuLuOperState"))
if mibBuilder.loadTexts: newdspuLuStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: newdspuLuStateChangeTrap.setDescription('Generated when the operational state of the LU changes between active<-->inactive. The following information is returned: dspuPuOperName -> PU name dspuLuOperState -> Current operational state of the LU')
dspuLuActivationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 5, 3, 0, 2)).setObjects(("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuLuOperState"), ("CISCO-DSPU-MIB", "dspuLuOperLastActivationFailureReason"))
if mibBuilder.loadTexts: dspuLuActivationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: dspuLuActivationFailureTrap.setDescription('Generated whenever an LU activation failure is detected. The following information is returned: dspuPuOperName -> PU name dspuLuOperState -> Current operational state of the LU dspuLuOperLastActivationFailureReason -> Reason for LU activation failure')
dspuSapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1), )
if mibBuilder.loadTexts: dspuSapTable.setStatus('current')
if mibBuilder.loadTexts: dspuSapTable.setDescription('Table listing the SAPs that are enabled for the DSPU node.')
dspuSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-DSPU-MIB", "dspuSapDlcType"), (0, "CISCO-DSPU-MIB", "dspuSapDlcUnit"), (0, "CISCO-DSPU-MIB", "dspuSapDlcPort"), (0, "CISCO-DSPU-MIB", "dspuSapAddress"))
if mibBuilder.loadTexts: dspuSapEntry.setStatus('current')
if mibBuilder.loadTexts: dspuSapEntry.setDescription('Each entry represents an enabled SAP for the DSPU node.')
dspuSapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: dspuSapAddress.setStatus('current')
if mibBuilder.loadTexts: dspuSapAddress.setDescription('SAP address of the local SAP.')
dspuSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstreamSap", 1), ("dnstreamSap", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuSapType.setStatus('current')
if mibBuilder.loadTexts: dspuSapType.setDescription('Local SAP type is either upstreamSap or downstreamSap.')
dspuSapDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 8, 9, 10, 11))).clone(namedValues=NamedValues(("undefined", 1), ("sdlc", 2), ("ethernet", 5), ("tokenRing", 6), ("rsrb", 8), ("framerelay", 9), ("fddi", 10), ("qllc", 11))))
if mibBuilder.loadTexts: dspuSapDlcType.setStatus('current')
if mibBuilder.loadTexts: dspuSapDlcType.setDescription('DLC type of the adapter that owns the local SAP.')
dspuSapDlcUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: dspuSapDlcUnit.setStatus('current')
if mibBuilder.loadTexts: dspuSapDlcUnit.setDescription('DLC unit of the adapter that owns the local SAP.')
dspuSapDlcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: dspuSapDlcPort.setStatus('current')
if mibBuilder.loadTexts: dspuSapDlcPort.setDescription('DLC port of the adapter that owns the local SAP.')
dspuSapOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sapClosed", 1), ("sapOpening", 2), ("sapOpened", 3), ("sapClosing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspuSapOperState.setStatus('current')
if mibBuilder.loadTexts: dspuSapOperState.setDescription('Operational state of the local SAP as follows: - sapClosed - sapOpening - sapOpened - sapClosing')
dspuSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspuSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: dspuSapRowStatus.setDescription("This object is used by a Management Station to create or delete the row entry in the dspuSapTable following the RowStatus textual convention. The Management Station can set the value to 'destroy (6)' and the Agent will then delete the rows corresponding to this SAP from the dspuSapTable. The local SAP address is enabled on the specified adapter when a row entry in the dspuSapTable is created.")
dspuSapTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 2))
dspuSapStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 24, 1, 6, 2, 1)).setObjects(("CISCO-DSPU-MIB", "dspuSapDlcType"), ("CISCO-DSPU-MIB", "dspuSapDlcUnit"), ("CISCO-DSPU-MIB", "dspuSapDlcPort"), ("CISCO-DSPU-MIB", "dspuSapAddress"), ("CISCO-DSPU-MIB", "dspuSapOperState"))
if mibBuilder.loadTexts: dspuSapStateChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: dspuSapStateChangeTrap.setDescription("Generated when the operational state of the SAP changes between 'open' or 'closed'. The following information is returned: dspuSapOperDlcType -> DLC type of the adapter on which SAP is located dspuSapOperDlcUnit -> Unit ID of the adapter on which SAP is located dspuSapOperDlcPort -> Port ID of the adapter on which SAP is located dspuSapOperAddress -> SAP address dspuSapOperState -> Current operational state of the SAP")
ciscoDspuMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 2))
ciscoDspuMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 1))
ciscoDspuMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2))
ciscoDspuMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 1, 1)).setObjects(("CISCO-DSPU-MIB", "dspuNodeGroup"), ("CISCO-DSPU-MIB", "dspuPoolClassGroup"), ("CISCO-DSPU-MIB", "dspuPooledLuGroup"), ("CISCO-DSPU-MIB", "dspuPuGroup"), ("CISCO-DSPU-MIB", "dspuLuGroup"), ("CISCO-DSPU-MIB", "dspuSapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDspuMIBCompliance = ciscoDspuMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoDspuMIBCompliance.setDescription('The compliance statement for the SNMPv2 entities which implement the Cisco DSPU MIB.')
ciscoDspuMIBComplianceV11R01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 1, 2)).setObjects(("CISCO-DSPU-MIB", "dspuNodeGroup"), ("CISCO-DSPU-MIB", "dspuPoolClassGroup"), ("CISCO-DSPU-MIB", "dspuPooledLuGroup"), ("CISCO-DSPU-MIB", "dspuPuGroupV11R01"), ("CISCO-DSPU-MIB", "dspuLuGroupV11R01"), ("CISCO-DSPU-MIB", "dspuSapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDspuMIBComplianceV11R01 = ciscoDspuMIBComplianceV11R01.setStatus('current')
if mibBuilder.loadTexts: ciscoDspuMIBComplianceV11R01.setDescription('The compliance statement for the SNMPv2 entities which implement the Cisco DSPU MIB.')
dspuNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2, 1)).setObjects(("CISCO-DSPU-MIB", "dspuNodeRsrb"), ("CISCO-DSPU-MIB", "dspuNodeRsrbLocalVirtualRing"), ("CISCO-DSPU-MIB", "dspuNodeRsrbBridgeNumber"), ("CISCO-DSPU-MIB", "dspuNodeRsrbTargetVirtualRing"), ("CISCO-DSPU-MIB", "dspuNodeRsrbVirtualMacAddress"), ("CISCO-DSPU-MIB", "dspuNodeDefaultPu"), ("CISCO-DSPU-MIB", "dspuNodeDefaultPuWindowSize"), ("CISCO-DSPU-MIB", "dspuNodeDefaultPuMaxIframe"), ("CISCO-DSPU-MIB", "dspuNodeActivationWindow"), ("CISCO-DSPU-MIB", "dspuNodeLastConfigChgTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dspuNodeGroup = dspuNodeGroup.setStatus('current')
if mibBuilder.loadTexts: dspuNodeGroup.setDescription('Global DSPU node information')
dspuPoolClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2, 2)).setObjects(("CISCO-DSPU-MIB", "dspuPoolClassName"), ("CISCO-DSPU-MIB", "dspuPoolClassInactivityTimeout"), ("CISCO-DSPU-MIB", "dspuPoolClassOperUpStreamLuDefs"), ("CISCO-DSPU-MIB", "dspuPoolClassOperDnStreamLuDefs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dspuPoolClassGroup = dspuPoolClassGroup.setStatus('current')
if mibBuilder.loadTexts: dspuPoolClassGroup.setDescription('LU pool class information')
dspuPooledLuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2, 3)).setObjects(("CISCO-DSPU-MIB", "dspuPooledLuPeerPuIndex"), ("CISCO-DSPU-MIB", "dspuPooledLuPeerLuLocalAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dspuPooledLuGroup = dspuPooledLuGroup.setStatus('current')
if mibBuilder.loadTexts: dspuPooledLuGroup.setDescription('Pooled LU information')
dspuPuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2, 4)).setObjects(("CISCO-DSPU-MIB", "dspuPuAdminName"), ("CISCO-DSPU-MIB", "dspuPuAdminType"), ("CISCO-DSPU-MIB", "dspuPuAdminRemoteMacAddress"), ("CISCO-DSPU-MIB", "dspuPuAdminRemoteSapAddress"), ("CISCO-DSPU-MIB", "dspuPuAdminLocalSapAddress"), ("CISCO-DSPU-MIB", "dspuPuAdminXid"), ("CISCO-DSPU-MIB", "dspuPuAdminXidFmt"), ("CISCO-DSPU-MIB", "dspuPuAdminWindowSize"), ("CISCO-DSPU-MIB", "dspuPuAdminMaxIframe"), ("CISCO-DSPU-MIB", "dspuPuAdminLinkRetryCount"), ("CISCO-DSPU-MIB", "dspuPuAdminLinkRetryTimeout"), ("CISCO-DSPU-MIB", "dspuPuAdminStartPu"), ("CISCO-DSPU-MIB", "dspuPuAdminDlcType"), ("CISCO-DSPU-MIB", "dspuPuAdminDlcUnit"), ("CISCO-DSPU-MIB", "dspuPuAdminDlcPort"), ("CISCO-DSPU-MIB", "dspuPuAdminFocalPoint"), ("CISCO-DSPU-MIB", "dspuPuAdminRowStatus"), ("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuPuOperType"), ("CISCO-DSPU-MIB", "dspuPuOperRemoteMacAddress"), ("CISCO-DSPU-MIB", "dspuPuOperRemoteSapAddress"), ("CISCO-DSPU-MIB", "dspuPuOperLocalSapAddress"), ("CISCO-DSPU-MIB", "dspuPuOperXid"), ("CISCO-DSPU-MIB", "dspuPuOperXidFmt"), ("CISCO-DSPU-MIB", "dspuPuOperWindowSize"), ("CISCO-DSPU-MIB", "dspuPuOperMaxIframe"), ("CISCO-DSPU-MIB", "dspuPuOperLinkRetryCount"), ("CISCO-DSPU-MIB", "dspuPuOperLinkRetryTimeout"), ("CISCO-DSPU-MIB", "dspuPuOperStartPu"), ("CISCO-DSPU-MIB", "dspuPuOperDlcType"), ("CISCO-DSPU-MIB", "dspuPuOperDlcUnit"), ("CISCO-DSPU-MIB", "dspuPuOperDlcPort"), ("CISCO-DSPU-MIB", "dspuPuOperFocalPoint"), ("CISCO-DSPU-MIB", "dspuPuOperState"), ("CISCO-DSPU-MIB", "dspuPuOperFsmState"), ("CISCO-DSPU-MIB", "dspuPuOperStartTime"), ("CISCO-DSPU-MIB", "dspuPuOperLastStateChgTime"), ("CISCO-DSPU-MIB", "dspuPuStatsSentBytes"), ("CISCO-DSPU-MIB", "dspuPuStatsRcvdBytes"), ("CISCO-DSPU-MIB", "dspuPuStatsSentFrames"), ("CISCO-DSPU-MIB", "dspuPuStatsRcvdFrames"), ("CISCO-DSPU-MIB", "dspuPuStatsSentNegativeRsps"), ("CISCO-DSPU-MIB", "dspuPuStatsRcvdNegativeRsps"), ("CISCO-DSPU-MIB", "dspuPuStatsActiveLus"), ("CISCO-DSPU-MIB", "dspuPuStatsInactiveLus"), ("CISCO-DSPU-MIB", "dspuPuStatsBindLus"), ("CISCO-DSPU-MIB", "dspuPuStatsActivationFailures"), ("CISCO-DSPU-MIB", "dspuPuStatsLastActivationFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dspuPuGroup = dspuPuGroup.setStatus('obsolete')
if mibBuilder.loadTexts: dspuPuGroup.setDescription('Upstream/Downstream PU node information')
dspuLuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2, 5)).setObjects(("CISCO-DSPU-MIB", "dspuLuAdminType"), ("CISCO-DSPU-MIB", "dspuLuAdminPoolClassName"), ("CISCO-DSPU-MIB", "dspuLuAdminPeerPuIndex"), ("CISCO-DSPU-MIB", "dspuLuAdminPeerLuLocalAddress"), ("CISCO-DSPU-MIB", "dspuLuAdminRowStatus"), ("CISCO-DSPU-MIB", "dspuLuOperType"), ("CISCO-DSPU-MIB", "dspuLuOperPoolClassName"), ("CISCO-DSPU-MIB", "dspuLuOperPeerPuIndex"), ("CISCO-DSPU-MIB", "dspuLuOperPeerLuLocalAddress"), ("CISCO-DSPU-MIB", "dspuLuOperState"), ("CISCO-DSPU-MIB", "dspuLuOperFsmState"), ("CISCO-DSPU-MIB", "dspuLuOperSessionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dspuLuGroup = dspuLuGroup.setStatus('obsolete')
if mibBuilder.loadTexts: dspuLuGroup.setDescription('Upstream/Downstream LU information')
dspuSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2, 6)).setObjects(("CISCO-DSPU-MIB", "dspuSapType"), ("CISCO-DSPU-MIB", "dspuSapOperState"), ("CISCO-DSPU-MIB", "dspuSapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dspuSapGroup = dspuSapGroup.setStatus('current')
if mibBuilder.loadTexts: dspuSapGroup.setDescription('Local SAP information')
dspuPuGroupV11R01 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2, 7)).setObjects(("CISCO-DSPU-MIB", "dspuPuAdminName"), ("CISCO-DSPU-MIB", "dspuPuAdminType"), ("CISCO-DSPU-MIB", "dspuPuAdminRemoteMacAddress"), ("CISCO-DSPU-MIB", "dspuPuAdminRemoteSapAddress"), ("CISCO-DSPU-MIB", "dspuPuAdminLocalSapAddress"), ("CISCO-DSPU-MIB", "dspuPuAdminXid"), ("CISCO-DSPU-MIB", "dspuPuAdminXidFmt"), ("CISCO-DSPU-MIB", "dspuPuAdminWindowSize"), ("CISCO-DSPU-MIB", "dspuPuAdminMaxIframe"), ("CISCO-DSPU-MIB", "dspuPuAdminLinkRetryCount"), ("CISCO-DSPU-MIB", "dspuPuAdminLinkRetryTimeout"), ("CISCO-DSPU-MIB", "dspuPuAdminStartPu"), ("CISCO-DSPU-MIB", "dspuPuAdminDlcType"), ("CISCO-DSPU-MIB", "dspuPuAdminDlcUnit"), ("CISCO-DSPU-MIB", "dspuPuAdminDlcPort"), ("CISCO-DSPU-MIB", "dspuPuAdminFocalPoint"), ("CISCO-DSPU-MIB", "dspuPuAdminRowStatus"), ("CISCO-DSPU-MIB", "dspuPuAdminRemoteAddress"), ("CISCO-DSPU-MIB", "dspuPuOperName"), ("CISCO-DSPU-MIB", "dspuPuOperType"), ("CISCO-DSPU-MIB", "dspuPuOperRemoteMacAddress"), ("CISCO-DSPU-MIB", "dspuPuOperRemoteSapAddress"), ("CISCO-DSPU-MIB", "dspuPuOperLocalSapAddress"), ("CISCO-DSPU-MIB", "dspuPuOperXid"), ("CISCO-DSPU-MIB", "dspuPuOperXidFmt"), ("CISCO-DSPU-MIB", "dspuPuOperWindowSize"), ("CISCO-DSPU-MIB", "dspuPuOperMaxIframe"), ("CISCO-DSPU-MIB", "dspuPuOperLinkRetryCount"), ("CISCO-DSPU-MIB", "dspuPuOperLinkRetryTimeout"), ("CISCO-DSPU-MIB", "dspuPuOperStartPu"), ("CISCO-DSPU-MIB", "dspuPuOperDlcType"), ("CISCO-DSPU-MIB", "dspuPuOperDlcUnit"), ("CISCO-DSPU-MIB", "dspuPuOperDlcPort"), ("CISCO-DSPU-MIB", "dspuPuOperFocalPoint"), ("CISCO-DSPU-MIB", "dspuPuOperState"), ("CISCO-DSPU-MIB", "dspuPuOperFsmState"), ("CISCO-DSPU-MIB", "dspuPuOperStartTime"), ("CISCO-DSPU-MIB", "dspuPuOperLastStateChgTime"), ("CISCO-DSPU-MIB", "dspuPuOperRemoteAddress"), ("CISCO-DSPU-MIB", "dspuPuStatsSentBytes"), ("CISCO-DSPU-MIB", "dspuPuStatsRcvdBytes"), ("CISCO-DSPU-MIB", "dspuPuStatsSentFrames"), ("CISCO-DSPU-MIB", "dspuPuStatsRcvdFrames"), ("CISCO-DSPU-MIB", "dspuPuStatsSentNegativeRsps"), ("CISCO-DSPU-MIB", "dspuPuStatsRcvdNegativeRsps"), ("CISCO-DSPU-MIB", "dspuPuStatsActiveLus"), ("CISCO-DSPU-MIB", "dspuPuStatsInactiveLus"), ("CISCO-DSPU-MIB", "dspuPuStatsBindLus"), ("CISCO-DSPU-MIB", "dspuPuStatsActivationFailures"), ("CISCO-DSPU-MIB", "dspuPuStatsLastActivationFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dspuPuGroupV11R01 = dspuPuGroupV11R01.setStatus('current')
if mibBuilder.loadTexts: dspuPuGroupV11R01.setDescription('Upstream/Downstream PU node information')
dspuLuGroupV11R01 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 24, 2, 2, 8)).setObjects(("CISCO-DSPU-MIB", "dspuLuAdminType"), ("CISCO-DSPU-MIB", "dspuLuAdminPoolClassName"), ("CISCO-DSPU-MIB", "dspuLuAdminPeerPuIndex"), ("CISCO-DSPU-MIB", "dspuLuAdminPeerLuLocalAddress"), ("CISCO-DSPU-MIB", "dspuLuAdminRowStatus"), ("CISCO-DSPU-MIB", "dspuLuOperType"), ("CISCO-DSPU-MIB", "dspuLuOperPoolClassName"), ("CISCO-DSPU-MIB", "dspuLuOperPeerPuIndex"), ("CISCO-DSPU-MIB", "dspuLuOperPeerLuLocalAddress"), ("CISCO-DSPU-MIB", "dspuLuOperState"), ("CISCO-DSPU-MIB", "dspuLuOperFsmState"), ("CISCO-DSPU-MIB", "dspuLuOperSessionState"), ("CISCO-DSPU-MIB", "dspuLuOperLastActivationFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dspuLuGroupV11R01 = dspuLuGroupV11R01.setStatus('current')
if mibBuilder.loadTexts: dspuLuGroupV11R01.setDescription('Upstream/Downstream LU information')
mibBuilder.exportSymbols("CISCO-DSPU-MIB", dspuLuOperLuLocalAddress=dspuLuOperLuLocalAddress, dspuNodeDefaultPuWindowSize=dspuNodeDefaultPuWindowSize, dspuSapTraps=dspuSapTraps, dspuPooledLuTable=dspuPooledLuTable, dspuLuOperLastActivationFailureReason=dspuLuOperLastActivationFailureReason, dspuPooledLuGroup=dspuPooledLuGroup, dspuPuTraps=dspuPuTraps, dspuPuOperRemoteMacAddress=dspuPuOperRemoteMacAddress, dspuLuActivationFailureTrap=dspuLuActivationFailureTrap, dspuPooledLuPeerLuLocalAddress=dspuPooledLuPeerLuLocalAddress, dspuPoolClassInactivityTimeout=dspuPoolClassInactivityTimeout, dspuObjects=dspuObjects, dspuLuAdminPeerLuLocalAddress=dspuLuAdminPeerLuLocalAddress, dspuPoolClassTable=dspuPoolClassTable, dspuPuAdminXidFmt=dspuPuAdminXidFmt, dspuPuOperXid=dspuPuOperXid, dspuLuAdminRowStatus=dspuLuAdminRowStatus, PYSNMP_MODULE_ID=ciscoDspuMIB, ciscoDspuMIBGroups=ciscoDspuMIBGroups, dspuNodeDefaultPu=dspuNodeDefaultPu, dspuLuAdminPoolClassName=dspuLuAdminPoolClassName, dspuPuGroup=dspuPuGroup, dspuPuAdminMaxIframe=dspuPuAdminMaxIframe, dspuPooledLu=dspuPooledLu, dspuSapTable=dspuSapTable, ciscoDspuMIBCompliances=ciscoDspuMIBCompliances, dspuSapDlcUnit=dspuSapDlcUnit, dspuPoolClassOperDnStreamLuDefs=dspuPoolClassOperDnStreamLuDefs, dspuLuOperPeerPuIndex=dspuLuOperPeerPuIndex, dspuPuOperLocalSapAddress=dspuPuOperLocalSapAddress, dspuPuOperRemoteSapAddress=dspuPuOperRemoteSapAddress, dspuLuOperFsmState=dspuLuOperFsmState, dspuPuOperDlcUnit=dspuPuOperDlcUnit, newdspuLuStateChangeTrap=newdspuLuStateChangeTrap, dspuSapType=dspuSapType, dspuPuAdminLinkRetryTimeout=dspuPuAdminLinkRetryTimeout, dspuPuOperStartPu=dspuPuOperStartPu, dspuPuAdminLocalSapAddress=dspuPuAdminLocalSapAddress, dspuLu=dspuLu, dspuLuAdminPeerPuIndex=dspuLuAdminPeerPuIndex, dspuPuStatsActivationFailures=dspuPuStatsActivationFailures, dspuPuTrapsPrefix=dspuPuTrapsPrefix, dspuPuOperIndex=dspuPuOperIndex, dspuPuAdminFocalPoint=dspuPuAdminFocalPoint, dspuLuAdminType=dspuLuAdminType, dspuPuAdminXid=dspuPuAdminXid, dspuPuOperEntry=dspuPuOperEntry, dspuPuStatsSentBytes=dspuPuStatsSentBytes, ciscoDspuMIB=ciscoDspuMIB, dspuPuAdminTable=dspuPuAdminTable, dspuNodeDefaultPuMaxIframe=dspuNodeDefaultPuMaxIframe, dspuPuOperDlcPort=dspuPuOperDlcPort, dspuPuAdminName=dspuPuAdminName, newdspuPuActivationFailureTrap=newdspuPuActivationFailureTrap, dspuPuOperLinkRetryTimeout=dspuPuOperLinkRetryTimeout, dspuNode=dspuNode, dspuPuStateChangeTrap=dspuPuStateChangeTrap, dspuLuOperSessionState=dspuLuOperSessionState, dspuSapStateChangeTrap=dspuSapStateChangeTrap, dspuPuOperRemoteAddress=dspuPuOperRemoteAddress, dspuPuAdminType=dspuPuAdminType, dspuPuAdminWindowSize=dspuPuAdminWindowSize, dspuPuStatsRcvdBytes=dspuPuStatsRcvdBytes, dspuPuOperWindowSize=dspuPuOperWindowSize, dspuPuOperLastStateChgTime=dspuPuOperLastStateChgTime, dspuSapRowStatus=dspuSapRowStatus, dspuPuOperStartTime=dspuPuOperStartTime, dspuPuStatsEntry=dspuPuStatsEntry, dspuPuOperDlcType=dspuPuOperDlcType, dspuPuAdminStartPu=dspuPuAdminStartPu, dspuPuStatsRcvdFrames=dspuPuStatsRcvdFrames, dspuPu=dspuPu, dspuLuOperEntry=dspuLuOperEntry, dspuSap=dspuSap, dspuPuAdminRemoteSapAddress=dspuPuAdminRemoteSapAddress, dspuPoolClass=dspuPoolClass, dspuPuAdminDlcType=dspuPuAdminDlcType, dspuPuStatsActiveLus=dspuPuStatsActiveLus, dspuLuGroupV11R01=dspuLuGroupV11R01, dspuSapGroup=dspuSapGroup, dspuPuAdminRemoteAddress=dspuPuAdminRemoteAddress, dspuLuAdminTable=dspuLuAdminTable, dspuLuAdminEntry=dspuLuAdminEntry, dspuLuAdminLuLocalAddress=dspuLuAdminLuLocalAddress, dspuNodeLastConfigChgTime=dspuNodeLastConfigChgTime, dspuPuGroupV11R01=dspuPuGroupV11R01, dspuNodeActivationWindow=dspuNodeActivationWindow, dspuPuOperMaxIframe=dspuPuOperMaxIframe, dspuPuActivationFailureTrap=dspuPuActivationFailureTrap, ciscoDspuMIBCompliance=ciscoDspuMIBCompliance, dspuPuAdminRowStatus=dspuPuAdminRowStatus, dspuNodeRsrbLocalVirtualRing=dspuNodeRsrbLocalVirtualRing, dspuLuOperPoolClassName=dspuLuOperPoolClassName, dspuPuOperFsmState=dspuPuOperFsmState, dspuPuAdminIndex=dspuPuAdminIndex, dspuPuOperName=dspuPuOperName, dspuLuOperTable=dspuLuOperTable, dspuLuOperPeerLuLocalAddress=dspuLuOperPeerLuLocalAddress, dspuNodeRsrb=dspuNodeRsrb, dspuLuOperType=dspuLuOperType, dspuPuOperState=dspuPuOperState, dspuPoolClassIndex=dspuPoolClassIndex, dspuPuOperFocalPoint=dspuPuOperFocalPoint, dspuPuOperTable=dspuPuOperTable, dspuPuOperLinkRetryCount=dspuPuOperLinkRetryCount, dspuPuAdminDlcPort=dspuPuAdminDlcPort, dspuPuOperXidFmt=dspuPuOperXidFmt, ciscoDspuMIBComplianceV11R01=ciscoDspuMIBComplianceV11R01, dspuPoolClassName=dspuPoolClassName, dspuNodeRsrbVirtualMacAddress=dspuNodeRsrbVirtualMacAddress, dspuPuStatsBindLus=dspuPuStatsBindLus, dspuPoolClassGroup=dspuPoolClassGroup, dspuPuStatsRcvdNegativeRsps=dspuPuStatsRcvdNegativeRsps, ciscoDspuMIBConformance=ciscoDspuMIBConformance, dspuSapEntry=dspuSapEntry, dspuPuAdminEntry=dspuPuAdminEntry, dspuPooledLuEntry=dspuPooledLuEntry, dspuPooledLuPeerPuIndex=dspuPooledLuPeerPuIndex, dspuPuStatsTable=dspuPuStatsTable, dspuLuTraps=dspuLuTraps, dspuNodeGroup=dspuNodeGroup, dspuLuTrapsPrefix=dspuLuTrapsPrefix, dspuSapAddress=dspuSapAddress, dspuPuStatsSentFrames=dspuPuStatsSentFrames, dspuSapDlcPort=dspuSapDlcPort, dspuLuGroup=dspuLuGroup, dspuNodeRsrbTargetVirtualRing=dspuNodeRsrbTargetVirtualRing, dspuPuOperType=dspuPuOperType, dspuLuOperState=dspuLuOperState, dspuPuStatsLastActivationFailureReason=dspuPuStatsLastActivationFailureReason, dspuSapOperState=dspuSapOperState, dspuNodeRsrbBridgeNumber=dspuNodeRsrbBridgeNumber, dspuLuStateChangeTrap=dspuLuStateChangeTrap, newdspuPuStateChangeTrap=newdspuPuStateChangeTrap, dspuPuStatsSentNegativeRsps=dspuPuStatsSentNegativeRsps, dspuPuAdminRemoteMacAddress=dspuPuAdminRemoteMacAddress, dspuPoolClassOperUpStreamLuDefs=dspuPoolClassOperUpStreamLuDefs, dspuPuStatsInactiveLus=dspuPuStatsInactiveLus, dspuSapDlcType=dspuSapDlcType, dspuPuAdminDlcUnit=dspuPuAdminDlcUnit, dspuPoolClassEntry=dspuPoolClassEntry, dspuPuAdminLinkRetryCount=dspuPuAdminLinkRetryCount)
