#
# PySNMP MIB module CISCO-LRE-CPE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LRE-CPE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
dot1dTpFdbAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dTpFdbAddress")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Gauge32, Unsigned32, IpAddress, MibIdentifier, Counter32, ObjectIdentity, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Gauge32", "Unsigned32", "IpAddress", "MibIdentifier", "Counter32", "ObjectIdentity", "Integer32", "TimeTicks")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoLreCpeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 340))
ciscoLreCpeMIB.setRevisions(('2003-03-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLreCpeMIB.setRevisionsDescriptions(('Initial version of the Cisco Long Reach Ethernet CPE MIB',))
if mibBuilder.loadTexts: ciscoLreCpeMIB.setLastUpdated('200303120000Z')
if mibBuilder.loadTexts: ciscoLreCpeMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoLreCpeMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: switchsnmp@cisco.com')
if mibBuilder.loadTexts: ciscoLreCpeMIB.setDescription('The MIB module for the Cisco Long Reach Ethernet Customer Premise Equipment device information. *** ABBREVIATIONS, ACRONYMS, AND SYMBOLS *** CPE - Customer Premise Equipment DSL - Digital Subscriber Loop VDSL - Very High Speed DSL LRE - Long Reach Ethernet ')
ciscoLreCpeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 340, 1))
clreCpeDot1dTp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 1))
clreCpePort = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 2))
clreCpeDot1dTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 1, 1), )
if mibBuilder.loadTexts: clreCpeDot1dTpFdbTable.setStatus('current')
if mibBuilder.loadTexts: clreCpeDot1dTpFdbTable.setDescription('A table that supplements the information from the BRIDGE-MIB. The BRIDGE-MIB tracks the MAC address to switch interface mapping in the dot1dTpFdbTable. On the long reach ethernet switch, CPE devices connect to the switch interfaces. Each CPE device has one or more ports. This table maps a MAC address on the switch to an interface associated with a CPE port.')
clreCpeDot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 1, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dTpFdbAddress"))
if mibBuilder.loadTexts: clreCpeDot1dTpFdbEntry.setStatus('current')
if mibBuilder.loadTexts: clreCpeDot1dTpFdbEntry.setDescription('An entry that supplements the information in the dot1dTpFdbTable table from the BRIDGE-MIB.')
clreCpeDot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clreCpeDot1dBasePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: clreCpeDot1dBasePortIfIndex.setDescription('The value of the instance of the ifIndex object, define in MIB-II, for the interface corresponding to this CPE port. The Forwarding database on the switch tracks a MAC address and its associated switch interface in the dot1dTpFdbTable table. This object adds information about which port on the CPE the MAC address was learnt on.')
clreCpePortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 2, 1), )
if mibBuilder.loadTexts: clreCpePortTable.setStatus('current')
if mibBuilder.loadTexts: clreCpePortTable.setDescription('A list of LRE CPE port entries. The number of entries is determined by the number of Long Reach Ethernet interfaces (to which the CPE attaches) on the switch and the number of Fast Ethernet ports each CPE supports.')
clreCpePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: clreCpePortEntry.setStatus('current')
if mibBuilder.loadTexts: clreCpePortEntry.setDescription('Entry containing information for a particular CPE Fast Ethernet port. The entries are created as new CPE devices are discovered. A new CPE device is discovered when the LRE link between that CPE device and the LRE switch becomes operational. These entries are only valid for ifIndexes of ifType ethernetCsmacd(6).')
clreCpePortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clreCpePortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: clreCpePortAdminStatus.setDescription('The desired state of the CPE port. The testing(3) state indicates that no operational packets can be passed. When a managed system initializes, all CPE ports start with clreCpePortAdminStatus in the down(2) state. As a result of either explicit management action or per configuration information retained by the managed system, clreCpePortAdminStatus is then changed to either the up(1) or testing(3) states (or remains in the down(2) state).')
clreCpePortAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10000000, 100000000))).clone(namedValues=NamedValues(("autoDetect", 1), ("s10000000", 10000000), ("s100000000", 100000000))).clone('autoDetect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clreCpePortAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: clreCpePortAdminSpeed.setDescription('This object controls the speed of this CPE Fast Ethernet port. When set to autoDetect(1), the CPE port negotiates with its peer for the optimum speed, either s10000000(10000000) or s100000000(100000000). If the peer does not support the autoDetect(1) capability, the CPE port speed defaults to s10000000(10000000).')
clreCpePortAdminDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoDetect", 1), ("fullDuplex", 2), ("halfDuplex", 3))).clone('autoDetect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clreCpePortAdminDuplex.setStatus('current')
if mibBuilder.loadTexts: clreCpePortAdminDuplex.setDescription("This object controls the duplex of this CPE Fast Ethernet port. When set to autoDetect(1), the CPE port negotiates with its peer for the optimum duplex setting, either fullDuplex(2) or halfDuplex(3). If the peer does not support the autoDetect(1) capability, this CPE port's duplex defaults to halfDuplex(3).")
clreCpePortAdminProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clreCpePortAdminProtected.setStatus('current')
if mibBuilder.loadTexts: clreCpePortAdminProtected.setDescription('This object configures a CPE Fast Ethernet port as a protected port when its value is set to true. Data traffic is disallowed between two CPE ports configured as protected ports. When the value of this object is set to false, the protected port property of this CPE port is removed. The value of this object can be set to true only on those CPE ports that support the protected port function.Note that the value of this object represents the desired state of the port. The actual state of the port may have a different value.')
clreCpePortOperProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 340, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clreCpePortOperProtected.setStatus('current')
if mibBuilder.loadTexts: clreCpePortOperProtected.setDescription('The value represented by this object is the actual protected port state of the CPE port. The object value is true when this CPE port is configured as a protected port. Data packets are not forwarded between two CPE ports configured as protected ports.')
clreCpeMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 340, 0))
clreCpeMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 340, 0, 0))
clreCpeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 340, 2))
clreCpeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 340, 2, 1))
clreCpeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 340, 2, 2))
clreCpeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 340, 2, 1, 1)).setObjects(("CISCO-LRE-CPE-MIB", "clreCpePortGroup"), ("CISCO-LRE-CPE-MIB", "clreCpeDot1dTpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clreCpeMIBCompliance = clreCpeMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: clreCpeMIBCompliance.setDescription('The compliance statement for switches supporting the LRE CPE devices.')
clreCpeDot1dTpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 340, 2, 2, 1)).setObjects(("CISCO-LRE-CPE-MIB", "clreCpeDot1dBasePortIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clreCpeDot1dTpGroup = clreCpeDot1dTpGroup.setStatus('current')
if mibBuilder.loadTexts: clreCpeDot1dTpGroup.setDescription('The collection of MIB objects used to monitor the transparent learning bridge on the LRE CPE.')
clreCpePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 340, 2, 2, 2)).setObjects(("CISCO-LRE-CPE-MIB", "clreCpePortAdminStatus"), ("CISCO-LRE-CPE-MIB", "clreCpePortAdminSpeed"), ("CISCO-LRE-CPE-MIB", "clreCpePortAdminDuplex"), ("CISCO-LRE-CPE-MIB", "clreCpePortAdminProtected"), ("CISCO-LRE-CPE-MIB", "clreCpePortOperProtected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clreCpePortGroup = clreCpePortGroup.setStatus('current')
if mibBuilder.loadTexts: clreCpePortGroup.setDescription('The collection of MIB objects used to manage and monitor LRE CPE Fast Ethernet ports.')
mibBuilder.exportSymbols("CISCO-LRE-CPE-MIB", clreCpePortGroup=clreCpePortGroup, clreCpeMIBGroups=clreCpeMIBGroups, clreCpeMIBCompliance=clreCpeMIBCompliance, clreCpePortTable=clreCpePortTable, clreCpeMIBCompliances=clreCpeMIBCompliances, clreCpePortOperProtected=clreCpePortOperProtected, clreCpePort=clreCpePort, clreCpePortAdminSpeed=clreCpePortAdminSpeed, clreCpeMIBNotificationsPrefix=clreCpeMIBNotificationsPrefix, clreCpeMIBNotifications=clreCpeMIBNotifications, clreCpePortAdminDuplex=clreCpePortAdminDuplex, clreCpeDot1dBasePortIfIndex=clreCpeDot1dBasePortIfIndex, ciscoLreCpeMIBObjects=ciscoLreCpeMIBObjects, clreCpePortEntry=clreCpePortEntry, clreCpeDot1dTp=clreCpeDot1dTp, PYSNMP_MODULE_ID=ciscoLreCpeMIB, ciscoLreCpeMIB=ciscoLreCpeMIB, clreCpeDot1dTpGroup=clreCpeDot1dTpGroup, clreCpeDot1dTpFdbEntry=clreCpeDot1dTpFdbEntry, clreCpePortAdminProtected=clreCpePortAdminProtected, clreCpePortAdminStatus=clreCpePortAdminStatus, clreCpeMIBConformance=clreCpeMIBConformance, clreCpeDot1dTpFdbTable=clreCpeDot1dTpFdbTable)
