#
# PySNMP MIB module Nortel-Magellan-Passport-CallRedirectionMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-CallRedirectionMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
RowStatus, Integer32, StorageType, Unsigned32, DisplayString, Counter32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowStatus", "Integer32", "StorageType", "Unsigned32", "DisplayString", "Counter32")
AsciiString, Link, AsciiStringIndex, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiString", "Link", "AsciiStringIndex", "NonReplicated")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, NotificationType, Gauge32, Unsigned32, Bits, ModuleIdentity, Counter32, Counter64, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "NotificationType", "Gauge32", "Unsigned32", "Bits", "ModuleIdentity", "Counter32", "Counter64", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
callRedirectionMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132))
crs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132))
crsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 1), )
if mibBuilder.loadTexts: crsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsRowStatusTable.setDescription('This entry controls the addition and deletion of crs components.')
crsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"))
if mibBuilder.loadTexts: crsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsRowStatusEntry.setDescription('A single entry in the table represents a single crs component.')
crsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: crsRowStatus.setDescription('This variable is used as the basis for SNMP naming of crs components. These components can be added and deleted.')
crsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: crsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
crsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: crsStorageType.setDescription('This variable represents the storage type value for the crs tables.')
crsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: crsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: crsIndex.setDescription('This variable represents the index for the crs tables.')
crsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 10), )
if mibBuilder.loadTexts: crsProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsProvTable.setDescription('The Provisioned group contains provisionable attributes of the CallRedirectionServer component.')
crsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"))
if mibBuilder.loadTexts: crsProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsProvEntry.setDescription('An entry in the crsProvTable.')
crsLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 10, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsLogicalProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: crsLogicalProcessor.setDescription('This attribute specifies the logical processor on which the call redirection server process is to run.')
crsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 11), )
if mibBuilder.loadTexts: crsStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
crsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"))
if mibBuilder.loadTexts: crsStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsStateEntry.setDescription('An entry in the crsStateTable.')
crsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: crsAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
crsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: crsOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
crsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: crsUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
crsStatTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12), )
if mibBuilder.loadTexts: crsStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsStatTable.setDescription('The Statistics operational group defines the statistics associated with the CallRedirectionServer component.')
crsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"))
if mibBuilder.loadTexts: crsStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsStatEntry.setDescription('An entry in the crsStatTable.')
crsTotalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsTotalAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: crsTotalAddresses.setDescription('The totalAddresses attribute indicates the number of PrimaryAddress components associated with the CallRedirectionServer component.')
crsRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsRequestsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: crsRequestsReceived.setDescription('The requestsReceived attribute counts the number of redirection requests received by the CallRedirectionServer component. This counter wraps to 0 when it exceeds its maximum value.')
crsPrimaryMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsPrimaryMatches.setStatus('mandatory')
if mibBuilder.loadTexts: crsPrimaryMatches.setDescription('The primaryMatches attribute counts the Call Redirection Server attempts to find a matching PrimaryAddress where the lookup attempt was successful. This counter wraps to 0 when it exceeds its maximum value.')
crsSecAddressListExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsSecAddressListExhausted.setStatus('mandatory')
if mibBuilder.loadTexts: crsSecAddressListExhausted.setDescription('The secAddressListExhausted attribute counts the Call Redirection Server attempts to find a SecondaryAddress component given a PrimaryAddress component where the lookup attempt resulted in the exhaustion of the secondary redirection list. This counter wraps to 0 when it exceeds its maximum value.')
crsMaxAddrLenExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsMaxAddrLenExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: crsMaxAddrLenExceeded.setDescription('The maxAddrLenExceeded attribute counts how often the concatenation of the secondary address and the suffix digits from the original called address have exceeded the maximum of 15 digits. The suffix digits can be determined by removing the primary address digits from the front of the original called address. If appending the suffix digits to a secondary address causes the resulting address to exceed 15 digits, this secondary member is skipped and the next secondary member is tried.')
crsSecRidMidUnsuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsSecRidMidUnsuccessful.setStatus('mandatory')
if mibBuilder.loadTexts: crsSecRidMidUnsuccessful.setDescription('The secRidMidUnsuccessful attribute counts the number of RID/ MID redirections resulting in the destination address not being reached. This situation could occur when the destination address does not exist on the specified module or the specified module could not be reached.')
crsSecAddrUnsuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsSecAddrUnsuccessful.setStatus('mandatory')
if mibBuilder.loadTexts: crsSecAddrUnsuccessful.setDescription('The secAddrUnsuccessful attribute counts the number of Address redirections resulting in the destination user not being reached. This situation could occur when the destination user line is disabled, the destination address does not exist on the specified module, or the specified module could not be reached.')
crsRidRedirected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsRidRedirected.setStatus('mandatory')
if mibBuilder.loadTexts: crsRidRedirected.setDescription('The ridRedirected attribute counts requests received by the Call Redirection Server resulting in the request being redirected to another RID specified by the AlternateRid component. This counter wraps to 0 when it exceeds its maximum value.')
crsRidMidRedirected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsRidMidRedirected.setStatus('mandatory')
if mibBuilder.loadTexts: crsRidMidRedirected.setDescription('The ridMidRedirected attribute counts requests received by the Call Redirection Server resulting in the request being redirected to another RID/MID specified by the SecondaryRidMid component. This counter wraps to 0 when it exceeds its maximum value.')
crsAddressRedirected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsAddressRedirected.setStatus('mandatory')
if mibBuilder.loadTexts: crsAddressRedirected.setDescription('The addressRedirected attribute counts requests received by the Call Redirection Server resulting in the request being redirected to another Address specified by the SecondaryAddress component. This counter wraps to 0 when it exceeds its maximum value.')
crsAltRidUnsuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsAltRidUnsuccessful.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidUnsuccessful.setDescription('The altRidUnsuccessful attribute counts the number of RID redirections resulting in the destination address not being reached. This situation could occur when the alternate RID cannot be reached, the module hosting the destination address is isolated, or the port associated with the secondary address is unavailable at the alternate RID.')
crsPAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2))
crsPAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 1), )
if mibBuilder.loadTexts: crsPAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrRowStatusTable.setDescription('This entry controls the addition and deletion of crsPAddr components.')
crsPAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrIndex"))
if mibBuilder.loadTexts: crsPAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrRowStatusEntry.setDescription('A single entry in the table represents a single crsPAddr component.')
crsPAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsPAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of crsPAddr components. These components can be added and deleted.')
crsPAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsPAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
crsPAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsPAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrStorageType.setDescription('This variable represents the storage type value for the crsPAddr tables.')
crsPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: crsPAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrIndex.setDescription('This variable represents the index for the crsPAddr tables.')
crsPAddrSRidMid = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2))
crsPAddrSRidMidRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 1), )
if mibBuilder.loadTexts: crsPAddrSRidMidRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidRowStatusTable.setDescription('This entry controls the addition and deletion of crsPAddrSRidMid components.')
crsPAddrSRidMidRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrSRidMidIndex"))
if mibBuilder.loadTexts: crsPAddrSRidMidRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidRowStatusEntry.setDescription('A single entry in the table represents a single crsPAddrSRidMid component.')
crsPAddrSRidMidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsPAddrSRidMidRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidRowStatus.setDescription('This variable is used as the basis for SNMP naming of crsPAddrSRidMid components. These components can be added and deleted.')
crsPAddrSRidMidComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsPAddrSRidMidComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
crsPAddrSRidMidStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsPAddrSRidMidStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidStorageType.setDescription('This variable represents the storage type value for the crsPAddrSRidMid tables.')
crsPAddrSRidMidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: crsPAddrSRidMidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidIndex.setDescription('This variable represents the index for the crsPAddrSRidMid tables.')
crsPAddrSRidMidRidMidProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 10), )
if mibBuilder.loadTexts: crsPAddrSRidMidRidMidProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidRidMidProvTable.setDescription('The SecRidMidProv group defines the secondary RID/MID pair associated with a specific primary address.')
crsPAddrSRidMidRidMidProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrSRidMidIndex"))
if mibBuilder.loadTexts: crsPAddrSRidMidRidMidProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidRidMidProvEntry.setDescription('An entry in the crsPAddrSRidMidRidMidProvTable.')
crsPAddrSRidMidRoutingId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsPAddrSRidMidRoutingId.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidRoutingId.setDescription('This attribute specifies a group of one or more interconnected nodes (called a subnet) to which the primary address is redirected.')
crsPAddrSRidMidModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1909))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsPAddrSRidMidModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSRidMidModuleId.setDescription('This attribute specifies a Passport node to which the primary address is redirected.')
crsPAddrSAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3))
crsPAddrSAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 1), )
if mibBuilder.loadTexts: crsPAddrSAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrRowStatusTable.setDescription('This entry controls the addition and deletion of crsPAddrSAddr components.')
crsPAddrSAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrSAddrIndex"))
if mibBuilder.loadTexts: crsPAddrSAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrRowStatusEntry.setDescription('A single entry in the table represents a single crsPAddrSAddr component.')
crsPAddrSAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsPAddrSAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of crsPAddrSAddr components. These components can be added and deleted.')
crsPAddrSAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsPAddrSAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
crsPAddrSAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsPAddrSAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrStorageType.setDescription('This variable represents the storage type value for the crsPAddrSAddr tables.')
crsPAddrSAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: crsPAddrSAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrIndex.setDescription('This variable represents the index for the crsPAddrSAddr tables.')
crsPAddrSAddrSecAddrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 10), )
if mibBuilder.loadTexts: crsPAddrSAddrSecAddrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrSecAddrProvTable.setDescription('The SecAddrProv group defines one of the secondary addresses associated with a specific primary address.')
crsPAddrSAddrSecAddrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsPAddrSAddrIndex"))
if mibBuilder.loadTexts: crsPAddrSAddrSecAddrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrSecAddrProvEntry.setDescription('An entry in the crsPAddrSAddrSecAddrProvTable.')
crsPAddrSAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 2, 3, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsPAddrSAddrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: crsPAddrSAddrAddress.setDescription('This attribute specifies a secondary address to which the primary address is redirected. The address attribute includes the Numbering Plan Indicator (NPI) and the digits which form a unique identifier of the customer interface. The address may belong to the X.121 or E.164 addressing plan. Address digits are selected and assigned by network operators. The address attribute takes the form: x.<X.121 address> or e.<E.164 address>')
crsAltRid = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3))
crsAltRidRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 1), )
if mibBuilder.loadTexts: crsAltRidRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidRowStatusTable.setDescription('This entry controls the addition and deletion of crsAltRid components.')
crsAltRidRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsAltRidIndex"))
if mibBuilder.loadTexts: crsAltRidRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidRowStatusEntry.setDescription('A single entry in the table represents a single crsAltRid component.')
crsAltRidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsAltRidRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidRowStatus.setDescription('This variable is used as the basis for SNMP naming of crsAltRid components. These components can be added and deleted.')
crsAltRidComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsAltRidComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
crsAltRidStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crsAltRidStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidStorageType.setDescription('This variable represents the storage type value for the crsAltRid tables.')
crsAltRidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: crsAltRidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidIndex.setDescription('This variable represents the index for the crsAltRid tables.')
crsAltRidAltRidProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 10), )
if mibBuilder.loadTexts: crsAltRidAltRidProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidAltRidProvTable.setDescription('The AltRidProv group defines the alternate RID associated with the Crs component.')
crsAltRidAltRidProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsIndex"), (0, "Nortel-Magellan-Passport-CallRedirectionMIB", "crsAltRidIndex"))
if mibBuilder.loadTexts: crsAltRidAltRidProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidAltRidProvEntry.setDescription('An entry in the crsAltRidAltRidProvTable.')
crsAltRidRoutingId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 132, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crsAltRidRoutingId.setStatus('mandatory')
if mibBuilder.loadTexts: crsAltRidRoutingId.setDescription('This attribute specifies a group of one or more interconnected nodes (called a subnet) to which the request is redirected.')
callRedirectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132, 1))
callRedirectionGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132, 1, 5))
callRedirectionGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132, 1, 5, 2))
callRedirectionGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132, 1, 5, 2, 2))
callRedirectionCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132, 3))
callRedirectionCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132, 3, 5))
callRedirectionCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132, 3, 5, 2))
callRedirectionCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 132, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-CallRedirectionMIB", crsIndex=crsIndex, crsSecAddressListExhausted=crsSecAddressListExhausted, crsAltRid=crsAltRid, crsPAddrSRidMidRowStatusTable=crsPAddrSRidMidRowStatusTable, crsStorageType=crsStorageType, crsAddressRedirected=crsAddressRedirected, crsTotalAddresses=crsTotalAddresses, crsAltRidUnsuccessful=crsAltRidUnsuccessful, crsPAddrComponentName=crsPAddrComponentName, crsPrimaryMatches=crsPrimaryMatches, crsPAddrSRidMidRowStatus=crsPAddrSRidMidRowStatus, crsAltRidComponentName=crsAltRidComponentName, crsAltRidIndex=crsAltRidIndex, callRedirectionCapabilitiesBE01=callRedirectionCapabilitiesBE01, crsPAddrSRidMid=crsPAddrSRidMid, crsStateEntry=crsStateEntry, crsSecAddrUnsuccessful=crsSecAddrUnsuccessful, crsAltRidAltRidProvTable=crsAltRidAltRidProvTable, callRedirectionGroupBE01A=callRedirectionGroupBE01A, crsPAddrSRidMidStorageType=crsPAddrSRidMidStorageType, crsRowStatusEntry=crsRowStatusEntry, crsPAddrSRidMidIndex=crsPAddrSRidMidIndex, crsSecRidMidUnsuccessful=crsSecRidMidUnsuccessful, crsProvTable=crsProvTable, crsPAddrSRidMidModuleId=crsPAddrSRidMidModuleId, crsAltRidRoutingId=crsAltRidRoutingId, callRedirectionCapabilitiesBE=callRedirectionCapabilitiesBE, crsRowStatus=crsRowStatus, crsRowStatusTable=crsRowStatusTable, crsPAddrRowStatusEntry=crsPAddrRowStatusEntry, crsPAddrSAddrIndex=crsPAddrSAddrIndex, crsPAddrSRidMidRowStatusEntry=crsPAddrSRidMidRowStatusEntry, crsComponentName=crsComponentName, crsAltRidRowStatus=crsAltRidRowStatus, crsPAddrSRidMidRoutingId=crsPAddrSRidMidRoutingId, crsPAddrSAddrRowStatus=crsPAddrSAddrRowStatus, callRedirectionGroup=callRedirectionGroup, crsRidRedirected=crsRidRedirected, crs=crs, callRedirectionGroupBE=callRedirectionGroupBE, crsMaxAddrLenExceeded=crsMaxAddrLenExceeded, crsStateTable=crsStateTable, crsPAddr=crsPAddr, crsPAddrRowStatus=crsPAddrRowStatus, crsPAddrSAddrRowStatusEntry=crsPAddrSAddrRowStatusEntry, crsPAddrSAddr=crsPAddrSAddr, crsPAddrSAddrSecAddrProvTable=crsPAddrSAddrSecAddrProvTable, crsAltRidAltRidProvEntry=crsAltRidAltRidProvEntry, crsRidMidRedirected=crsRidMidRedirected, crsPAddrStorageType=crsPAddrStorageType, crsAltRidRowStatusTable=crsAltRidRowStatusTable, crsPAddrSRidMidRidMidProvTable=crsPAddrSRidMidRidMidProvTable, crsStatTable=crsStatTable, callRedirectionCapabilitiesBE01A=callRedirectionCapabilitiesBE01A, crsAltRidStorageType=crsAltRidStorageType, crsOperationalState=crsOperationalState, crsPAddrSAddrAddress=crsPAddrSAddrAddress, crsProvEntry=crsProvEntry, crsAdminState=crsAdminState, crsPAddrSAddrRowStatusTable=crsPAddrSAddrRowStatusTable, callRedirectionMIB=callRedirectionMIB, crsLogicalProcessor=crsLogicalProcessor, crsPAddrSRidMidRidMidProvEntry=crsPAddrSRidMidRidMidProvEntry, callRedirectionCapabilities=callRedirectionCapabilities, crsPAddrSRidMidComponentName=crsPAddrSRidMidComponentName, crsPAddrSAddrStorageType=crsPAddrSAddrStorageType, crsPAddrSAddrSecAddrProvEntry=crsPAddrSAddrSecAddrProvEntry, callRedirectionGroupBE01=callRedirectionGroupBE01, crsPAddrRowStatusTable=crsPAddrRowStatusTable, crsRequestsReceived=crsRequestsReceived, crsPAddrSAddrComponentName=crsPAddrSAddrComponentName, crsAltRidRowStatusEntry=crsAltRidRowStatusEntry, crsStatEntry=crsStatEntry, crsPAddrIndex=crsPAddrIndex, crsUsageState=crsUsageState)
