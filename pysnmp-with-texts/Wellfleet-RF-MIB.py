#
# PySNMP MIB module Wellfleet-RF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-RF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, MibIdentifier, Bits, IpAddress, Gauge32, NotificationType, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "MibIdentifier", "Bits", "IpAddress", "Gauge32", "NotificationType", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfIpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIpGroup")
wfIpRfRipImportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8), )
if mibBuilder.loadTexts: wfIpRfRipImportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportTable.setDescription('The list of Rip Import Route Filter Rules in IP')
wfIpRfRipImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfRipImportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfRipImportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfRipImportRipGateway"), (0, "Wellfleet-RF-MIB", "wfIpRfRipImportRipInterface"))
if mibBuilder.loadTexts: wfIpRfRipImportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportEntry.setDescription('An entry in the Rip Import Rule Table')
wfIpRfRipImportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportCreate.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this Rule.')
wfIpRfRipImportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Rule.')
wfIpRfRipImportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipImportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportAddress.setDescription('The IP address to which this filter applies')
wfIpRfRipImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipImportMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportMask.setDescription('The Mask to which this filter applies. When combined with the Address, a range is specified for application of this rule')
wfIpRfRipImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportAction.setDescription('The Action of this Filter')
wfIpRfRipImportPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportPreference.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportPreference.setDescription('The Preference associated with this filter - only valid if accept')
wfIpRfRipImportRipGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipImportRipGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportRipGateway.setDescription('The RIP Gateway to be concerned with')
wfIpRfRipImportRipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipImportRipInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportRipInterface.setDescription('The IP Network Interface to be concerned with')
wfIpRfRipImportApplyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 8, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipImportApplyMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipImportApplyMask.setDescription('The Mask to apply to this route learned instead of the default. NULL means to apply the normal filter')
wfIpRfRipExportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9), )
if mibBuilder.loadTexts: wfIpRfRipExportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportTable.setDescription('The list of Rip Export Route Filter Rules in IP')
wfIpRfRipExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfRipExportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfRipExportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfRipExportFromProtocol"), (0, "Wellfleet-RF-MIB", "wfIpRfRipExportInterface"))
if mibBuilder.loadTexts: wfIpRfRipExportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportEntry.setDescription('An entry in the Rip Export Rule Table')
wfIpRfRipExportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipExportCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportCreate.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this Rule.')
wfIpRfRipExportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipExportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Rule.')
wfIpRfRipExportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipExportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportAddress.setDescription('The IP address to which this filter applies')
wfIpRfRipExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipExportMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportMask.setDescription('The Mask for the Address Above. When combined with the Address, a range is specified for application of this filter rule')
wfIpRfRipExportFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rip", 1), ("egp", 2), ("ospf", 3), ("direct", 4), ("static", 5), ("bgp3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipExportFromProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportFromProtocol.setDescription('The protocol from which this Information is derived')
wfIpRfRipExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("propa", 2), ("ignore", 3), ("aggregate", 4))).clone('propa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipExportAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportAction.setDescription('The action of this export filter; if IP_RF_RIP_EXP_ACTION_AGGREGATE action, the default route, 0.0.0.0, is advertised instead networks that match this filter')
wfIpRfRipExportInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfRipExportInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportInterface.setDescription('The optional outbound interface on which to apply this filter')
wfIpRfRipExportRipMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfRipExportRipMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfRipExportRipMetric.setDescription("The optional export RIP metric to apply to this filter. Zero means: use the route's actual cost. Only valid for propagate")
wfIpRfOspfImportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10), )
if mibBuilder.loadTexts: wfIpRfOspfImportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportTable.setDescription('The list of OSPF Import Route Filter Rules in IP')
wfIpRfOspfImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfOspfImportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfImportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfImportType"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfImportTag"))
if mibBuilder.loadTexts: wfIpRfOspfImportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportEntry.setDescription('An entry in the OSPF Import Route Filter Table')
wfIpRfOspfImportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfImportCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportCreate.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this Rule.')
wfIpRfOspfImportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfImportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Rule.')
wfIpRfOspfImportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfImportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportAddress.setDescription('The IP Address to which this filter applies')
wfIpRfOspfImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfImportMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportMask.setDescription('The Mask to which this filter applies. When combined with the Address, a range is specified for application of this rule')
wfIpRfOspfImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfImportAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportAction.setDescription('The Action of this Filter')
wfIpRfOspfImportPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfImportPreference.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportPreference.setDescription('The Preference associated with this filter - only valid if accept')
wfIpRfOspfImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfImportType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportType.setDescription('The OSPF route Type to be concerned with. The valid values are null (any route type), 1 (OSPF external type 1), and 2 (OSPF external type 2).')
wfIpRfOspfImportTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfImportTag.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfImportTag.setDescription('The OSPF Tag to be concerned with')
wfIpRfOspfExportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11), )
if mibBuilder.loadTexts: wfIpRfOspfExportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportTable.setDescription('The list of OSPF Export Route Filter Rules in IP')
wfIpRfOspfExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfOspfExportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfExportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfOspfExportFromProtocol"))
if mibBuilder.loadTexts: wfIpRfOspfExportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportEntry.setDescription('An entry in the OSPF Export Route Filter Table')
wfIpRfOspfExportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportCreate.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this Rule.')
wfIpRfOspfExportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Rule.')
wfIpRfOspfExportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfExportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportAddress.setDescription('The IP address to which this filter applies')
wfIpRfOspfExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfExportMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportMask.setDescription('The Mask for the Address Above. When combined with the Address, a range is specified for application of this filter rule')
wfIpRfOspfExportFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rip", 1), ("egp", 2), ("ospf", 3), ("direct", 4), ("static", 5), ("bgp3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfOspfExportFromProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportFromProtocol.setDescription('The protocol from which this Information is derived')
wfIpRfOspfExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("propa", 2), ("ignore", 3))).clone('propa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportAction.setDescription('The action of this export filter')
wfIpRfOspfExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportType.setDescription('The ospf type to use when this filter matches')
wfIpRfOspfExportTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportTag.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportTag.setDescription('The ospf tag to use when this filter matches')
wfIpRfOspfExportAutoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfOspfExportAutoTag.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfOspfExportAutoTag.setDescription('BGP/OSPF automatic tag generation: if enabled, a tag will be generated according to the criteria in RFC 1364. Only valid if wfIpRfOspfExportType is set. If enabled, wfIpRfOspfExportTag is ignored.')
wfIpRfEgpImportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12), )
if mibBuilder.loadTexts: wfIpRfEgpImportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportTable.setDescription('The list of Egp Import Route Filter Rules in IP')
wfIpRfEgpImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfEgpImportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpImportPeer"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpImportAs"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpImportGateway"))
if mibBuilder.loadTexts: wfIpRfEgpImportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportEntry.setDescription('An entry in the Egp Import Rule Table')
wfIpRfEgpImportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpImportCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportCreate.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this Rule.')
wfIpRfEgpImportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpImportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Rule.')
wfIpRfEgpImportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportAddress.setDescription('The advertised network to which this filter applies')
wfIpRfEgpImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportMask.setDescription('The Mask of the Address to which this filter applies.')
wfIpRfEgpImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpImportAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportAction.setDescription('The Action of this Filter')
wfIpRfEgpImportPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpImportPreference.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportPreference.setDescription('The Preference associated with this filter - only valid if accept')
wfIpRfEgpImportPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportPeer.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportPeer.setDescription('The Egp Peer to be to be concerned with')
wfIpRfEgpImportAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportAs.setDescription('The Autonomous System number to be concerned with')
wfIpRfEgpImportGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 12, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpImportGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpImportGateway.setDescription('The EGP gateway to be concerned with')
wfIpRfEgpExportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13), )
if mibBuilder.loadTexts: wfIpRfEgpExportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportTable.setDescription('The list of Egp Export Route Filter Rules in IP')
wfIpRfEgpExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfEgpExportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportFromProtocol"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportPeer"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportOspfType"), (0, "Wellfleet-RF-MIB", "wfIpRfEgpExportOspfTag"))
if mibBuilder.loadTexts: wfIpRfEgpExportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportEntry.setDescription('An entry in the Egp Export Rule Table')
wfIpRfEgpExportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportCreate.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this Rule.')
wfIpRfEgpExportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Rule.')
wfIpRfEgpExportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportAddress.setDescription('The advertised network to which this filter applies')
wfIpRfEgpExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportMask.setDescription('The Mask of the Address to which this filter applies.')
wfIpRfEgpExportFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rip", 1), ("egp", 2), ("ospf", 3), ("direct", 4), ("static", 5), ("bgp3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportFromProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportFromProtocol.setDescription('The protocol from which this Information is derived')
wfIpRfEgpExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("propa", 2), ("ignore", 3))).clone('propa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportAction.setDescription('The action of this export filter')
wfIpRfEgpExportPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportPeer.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportPeer.setDescription('The Egp Peer to be to be concerned with')
wfIpRfEgpExportOspfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfexttype1", 1), ("ospfexttype2", 2), ("ospfinttype", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportOspfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportOspfType.setDescription('The type of route being filtered. This field is only valid if the wfIpRfEgpExportFromProtocol is OSPF. Otherwise, the field is 0.')
wfIpRfEgpExportOspfTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfEgpExportOspfTag.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportOspfTag.setDescription('The tag of the route being filtered. This field is only valid if the wfIpRfEgpExportFromProtocol is OSPF. Otherwise, this field is 0.')
wfIpRfEgpExportInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportInterface.setDescription('The optional outbound interface on which to apply this filter')
wfIpRfEgpExportMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfEgpExportMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfEgpExportMetric.setDescription("The optional export Egp metric to apply to this filter. Zero means: use the route's actual cost. Only valid for propagate ")
wfIpRfBgp3ImportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14), )
if mibBuilder.loadTexts: wfIpRfBgp3ImportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportTable.setDescription('The table of BGP-3 Import Route Filter Rules')
wfIpRfBgp3ImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportPeerAs"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportPeerAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportOrigAs"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ImportRouteOrigin"))
if mibBuilder.loadTexts: wfIpRfBgp3ImportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportEntry.setDescription('An entry in the BGP-3 Import Rule Table')
wfIpRfBgp3ImportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportCreate.setDescription('Create/Delete parameter. if set to delete, the rule is removed.')
wfIpRfBgp3ImportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportEnable.setDescription('Enable/Disable parameter. controls whether the rule is enabled or disabled.')
wfIpRfBgp3ImportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportAddress.setDescription("The advertised network to which this filter applies. Zero implies `all networks' or the default route, based on wfIpRfBgp3ImportMask.")
wfIpRfBgp3ImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportMask.setDescription('The mask applied to wfIpRfBgp3ImportAddress. If zero, this filter applies to all networks. If the address is zero and this parameter is 255.255.255.255, this filter applies to the default route.')
wfIpRfBgp3ImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("accept", 1), ("ignore", 3))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportAction.setDescription('The Action of this Filter')
wfIpRfBgp3ImportPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportPreference.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportPreference.setDescription('The Preference associated with this filter - only valid if accept')
wfIpRfBgp3ImportPeerAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportPeerAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportPeerAs.setDescription("The BGP-3 Peer's AS number (or zero if `any AS')")
wfIpRfBgp3ImportPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportPeerAddress.setDescription("The IP address (not the peer ID) of the peer that this advertisement was received from (zero if `any peer')")
wfIpRfBgp3ImportOrigAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportOrigAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportOrigAs.setDescription("The AS number of the BGP-3 gateway that originated the route (or zero for `any AS')")
wfIpRfBgp3ImportRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ImportRouteOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportRouteOrigin.setDescription('A value for the ORIGIN path attribute (or zero if not applicable)')
wfIpRfBgp3ImportBgp3Preference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 14, 1, 11), Gauge32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ImportBgp3Preference.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ImportBgp3Preference.setDescription('The Preference associated with this filter for comparison to other BGP routes only - only valid if accept')
wfIpRfBgp3ExportTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15), )
if mibBuilder.loadTexts: wfIpRfBgp3ExportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportTable.setDescription('The table of BGP-3 Export Route Filter Rules')
wfIpRfBgp3ExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1), ).setIndexNames((0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportMask"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportFromProtocol"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportPeerAs"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportPeerAddress"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportOspfType"), (0, "Wellfleet-RF-MIB", "wfIpRfBgp3ExportOspfTag"))
if mibBuilder.loadTexts: wfIpRfBgp3ExportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportEntry.setDescription('An entry in the BGP-3 Export Rule Table')
wfIpRfBgp3ExportCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportCreate.setDescription('Create/Delete: if set to delete, the rule is removed')
wfIpRfBgp3ExportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportEnable.setDescription('Enable/Disable: controls whether the rule is enabled or disabled')
wfIpRfBgp3ExportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportAddress.setDescription("The advertised network to which this filter applies. Zero implies `all networks' or the default route, based on wfIpRfBgp3ExportMask.")
wfIpRfBgp3ExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportMask.setDescription('The mask applied to wfIpRfBgp3ExportAddress. If zero, this filter applies to all networks. If the address is zero and this parameter is 255.255.255.255, this filter applies to the default route.')
wfIpRfBgp3ExportFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rip", 1), ("egp", 2), ("ospf", 3), ("direct", 4), ("static", 5), ("bgp3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportFromProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportFromProtocol.setDescription('The protocol from which this Information is derived')
wfIpRfBgp3ExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("propa", 2), ("ignore", 3), ("aggregate", 4))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportAction.setDescription('The action of this export filter; if IP_RF_BGP3_EXP_ACTION_AGGREGATE action, the default route, 0.0.0.0, is advertised instead networks that match this filter')
wfIpRfBgp3ExportPeerAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportPeerAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportPeerAs.setDescription("The AS number to which the network advertisement is going (zero if `any AS')")
wfIpRfBgp3ExportPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportPeerAddress.setDescription("The IP address (not the peer ID) of the peer that this advertisement is going to (zero if `any peer')")
wfIpRfBgp3ExportOspfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfexttype1", 1), ("ospfexttype2", 2), ("ospfinttype", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportOspfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportOspfType.setDescription('The type of route being filtered. This field is only valid if the wfIpRfEgpExportFromProtocol is OSPF. Otherwise, the field is 0.')
wfIpRfBgp3ExportOspfTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpRfBgp3ExportOspfTag.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportOspfTag.setDescription('The OSPF tag of the route being filtered. This field is only valid if the wfIpRfBgp3ExportFromProtocol is OSPF and wfIpRfBgp3ExportOspfType is external type 1 or 2. Otherwise, this field is 0.')
wfIpRfBgp3ExportUseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("specified", 2), ("originating", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportUseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportUseMetric.setDescription('Determines whether or not an INTER_AS_METRIC will be advertised for the associated network(s). none (1) indicates that no metric will be advertised. specified (2) indicates that the value in wfIpRfBgp3ExportInterAsMetric will be used. originating (3) indicates that the metric from the originating protocol will be used. Only valid for propagate.')
wfIpRfBgp3ExportInterAsMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportInterAsMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportInterAsMetric.setDescription('If wfIpRfBgp3ExportUseMetric is set to specified (2), this is the value that will be used for the INTER_AS_METRIC. Only valid for propagate.')
wfIpRfBgp3ExportOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportOrigin.setDescription("The value to use for the ORIGIN path attribute when advertising this route (zero means `do according to default'). Only valid for propagate action. Only valid if route origin is RIP or STATIC (ignored otherwise).")
wfIpRfBgp3ExportNeighAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpRfBgp3ExportNeighAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpRfBgp3ExportNeighAs.setDescription('If action is propagate, route origin is RIP or STATIC, and ExportOrigin is EGP, this AS number is used as the EGP neighbor AS number when constructing the AS-PATH (ignored otherwise).')
mibBuilder.exportSymbols("Wellfleet-RF-MIB", wfIpRfRipImportPreference=wfIpRfRipImportPreference, wfIpRfBgp3ImportEnable=wfIpRfBgp3ImportEnable, wfIpRfBgp3ImportCreate=wfIpRfBgp3ImportCreate, wfIpRfEgpImportMask=wfIpRfEgpImportMask, wfIpRfOspfExportMask=wfIpRfOspfExportMask, wfIpRfEgpImportPreference=wfIpRfEgpImportPreference, wfIpRfEgpExportEntry=wfIpRfEgpExportEntry, wfIpRfRipImportAction=wfIpRfRipImportAction, wfIpRfEgpExportAction=wfIpRfEgpExportAction, wfIpRfBgp3ExportInterAsMetric=wfIpRfBgp3ExportInterAsMetric, wfIpRfEgpExportTable=wfIpRfEgpExportTable, wfIpRfRipExportFromProtocol=wfIpRfRipExportFromProtocol, wfIpRfBgp3ExportEnable=wfIpRfBgp3ExportEnable, wfIpRfEgpExportEnable=wfIpRfEgpExportEnable, wfIpRfRipImportTable=wfIpRfRipImportTable, wfIpRfBgp3ImportBgp3Preference=wfIpRfBgp3ImportBgp3Preference, wfIpRfBgp3ExportAddress=wfIpRfBgp3ExportAddress, wfIpRfOspfExportEntry=wfIpRfOspfExportEntry, wfIpRfEgpImportEnable=wfIpRfEgpImportEnable, wfIpRfEgpImportPeer=wfIpRfEgpImportPeer, wfIpRfOspfExportAutoTag=wfIpRfOspfExportAutoTag, wfIpRfBgp3ExportNeighAs=wfIpRfBgp3ExportNeighAs, wfIpRfRipImportEnable=wfIpRfRipImportEnable, wfIpRfRipImportApplyMask=wfIpRfRipImportApplyMask, wfIpRfRipImportEntry=wfIpRfRipImportEntry, wfIpRfOspfImportAction=wfIpRfOspfImportAction, wfIpRfRipImportCreate=wfIpRfRipImportCreate, wfIpRfOspfExportTag=wfIpRfOspfExportTag, wfIpRfBgp3ImportAction=wfIpRfBgp3ImportAction, wfIpRfRipImportRipInterface=wfIpRfRipImportRipInterface, wfIpRfRipExportEnable=wfIpRfRipExportEnable, wfIpRfBgp3ExportFromProtocol=wfIpRfBgp3ExportFromProtocol, wfIpRfBgp3ExportCreate=wfIpRfBgp3ExportCreate, wfIpRfEgpExportPeer=wfIpRfEgpExportPeer, wfIpRfOspfImportTag=wfIpRfOspfImportTag, wfIpRfOspfExportType=wfIpRfOspfExportType, wfIpRfEgpImportEntry=wfIpRfEgpImportEntry, wfIpRfEgpImportCreate=wfIpRfEgpImportCreate, wfIpRfOspfExportAddress=wfIpRfOspfExportAddress, wfIpRfBgp3ExportTable=wfIpRfBgp3ExportTable, wfIpRfBgp3ExportPeerAs=wfIpRfBgp3ExportPeerAs, wfIpRfRipExportTable=wfIpRfRipExportTable, wfIpRfEgpExportInterface=wfIpRfEgpExportInterface, wfIpRfRipExportRipMetric=wfIpRfRipExportRipMetric, wfIpRfRipExportInterface=wfIpRfRipExportInterface, wfIpRfOspfExportFromProtocol=wfIpRfOspfExportFromProtocol, wfIpRfBgp3ImportTable=wfIpRfBgp3ImportTable, wfIpRfRipImportRipGateway=wfIpRfRipImportRipGateway, wfIpRfRipExportEntry=wfIpRfRipExportEntry, wfIpRfRipExportCreate=wfIpRfRipExportCreate, wfIpRfBgp3ImportRouteOrigin=wfIpRfBgp3ImportRouteOrigin, wfIpRfEgpImportGateway=wfIpRfEgpImportGateway, wfIpRfEgpExportOspfTag=wfIpRfEgpExportOspfTag, wfIpRfBgp3ExportPeerAddress=wfIpRfBgp3ExportPeerAddress, wfIpRfEgpExportAddress=wfIpRfEgpExportAddress, wfIpRfOspfImportMask=wfIpRfOspfImportMask, wfIpRfBgp3ImportPeerAddress=wfIpRfBgp3ImportPeerAddress, wfIpRfOspfExportCreate=wfIpRfOspfExportCreate, wfIpRfBgp3ImportOrigAs=wfIpRfBgp3ImportOrigAs, wfIpRfBgp3ExportEntry=wfIpRfBgp3ExportEntry, wfIpRfEgpExportOspfType=wfIpRfEgpExportOspfType, wfIpRfEgpImportAs=wfIpRfEgpImportAs, wfIpRfEgpImportTable=wfIpRfEgpImportTable, wfIpRfEgpImportAddress=wfIpRfEgpImportAddress, wfIpRfRipExportAction=wfIpRfRipExportAction, wfIpRfOspfImportTable=wfIpRfOspfImportTable, wfIpRfOspfImportPreference=wfIpRfOspfImportPreference, wfIpRfOspfExportAction=wfIpRfOspfExportAction, wfIpRfOspfImportAddress=wfIpRfOspfImportAddress, wfIpRfRipExportMask=wfIpRfRipExportMask, wfIpRfBgp3ExportOrigin=wfIpRfBgp3ExportOrigin, wfIpRfOspfExportTable=wfIpRfOspfExportTable, wfIpRfRipImportAddress=wfIpRfRipImportAddress, wfIpRfOspfImportType=wfIpRfOspfImportType, wfIpRfBgp3ImportEntry=wfIpRfBgp3ImportEntry, wfIpRfBgp3ImportPreference=wfIpRfBgp3ImportPreference, wfIpRfBgp3ExportMask=wfIpRfBgp3ExportMask, wfIpRfOspfImportEntry=wfIpRfOspfImportEntry, wfIpRfBgp3ExportAction=wfIpRfBgp3ExportAction, wfIpRfEgpImportAction=wfIpRfEgpImportAction, wfIpRfBgp3ImportMask=wfIpRfBgp3ImportMask, wfIpRfEgpExportCreate=wfIpRfEgpExportCreate, wfIpRfBgp3ExportOspfType=wfIpRfBgp3ExportOspfType, wfIpRfBgp3ImportPeerAs=wfIpRfBgp3ImportPeerAs, wfIpRfOspfImportCreate=wfIpRfOspfImportCreate, wfIpRfBgp3ExportOspfTag=wfIpRfBgp3ExportOspfTag, wfIpRfBgp3ExportUseMetric=wfIpRfBgp3ExportUseMetric, wfIpRfOspfImportEnable=wfIpRfOspfImportEnable, wfIpRfEgpExportMetric=wfIpRfEgpExportMetric, wfIpRfEgpExportFromProtocol=wfIpRfEgpExportFromProtocol, wfIpRfRipImportMask=wfIpRfRipImportMask, wfIpRfOspfExportEnable=wfIpRfOspfExportEnable, wfIpRfBgp3ImportAddress=wfIpRfBgp3ImportAddress, wfIpRfRipExportAddress=wfIpRfRipExportAddress, wfIpRfEgpExportMask=wfIpRfEgpExportMask)
