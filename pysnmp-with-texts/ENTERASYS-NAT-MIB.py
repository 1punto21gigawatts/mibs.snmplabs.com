#
# PySNMP MIB module ENTERASYS-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:04:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetVersion, InetAddress, InetAddressPrefixLength, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetVersion", "InetAddress", "InetAddressPrefixLength", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, IpAddress, TimeTicks, MibIdentifier, Counter32, Bits, Counter64, ModuleIdentity, Unsigned32, Integer32, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "IpAddress", "TimeTicks", "MibIdentifier", "Counter32", "Bits", "Counter64", "ModuleIdentity", "Unsigned32", "Integer32", "iso", "ObjectIdentity")
RowStatus, DisplayString, TruthValue, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention", "DateAndTime")
etsysNatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75))
etsysNatMIB.setRevisions(('2010-06-02 11:53',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysNatMIB.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: etsysNatMIB.setLastUpdated('201006021153Z')
if mibBuilder.loadTexts: etsysNatMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysNatMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysNatMIB.setDescription('The Enterasys Networks Proprietary MIB module for entities implementing NAT.')
etsysNatGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1))
etsysNatGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1))
etsysNatGlobalIpv4Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2))
etsysNatTables = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2))
etsysNatConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3))
etsysNatStatsPoolsUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsPoolsUsed.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsPoolsUsed.setDescription('This object contains the number of NAT Pools currently configured.')
etsysNatStatsListRulesUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsListRulesUsed.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsListRulesUsed.setDescription('This object contains the number of NAT List Rules currently configured.')
etsysNatStatsStaticRulesUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsStaticRulesUsed.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsStaticRulesUsed.setDescription('This object contains the number of NAT Static Rules currently configured.')
etsysNatStatsAddressUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsAddressUsed.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsAddressUsed.setDescription('This object contains the number of NAT IP Addresses currently configured.')
etsysNatStatsPortMapsUsed = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsPortMapsUsed.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsPortMapsUsed.setDescription('This object contains the number of NAT Port Maps currently configured.')
etsysNatStatsBindingsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsCurrent.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsCurrent.setDescription('This object contains the current number of active NAT bindings.')
etsysNatStatsBindingsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsHigh.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsHigh.setDescription('This object contains the highest number of NAT bindings active at one time.')
etsysNatStatsBindingsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsDeleted.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsDeleted.setDescription('This object contains the total number of NAT bindings that have been deleted.')
etsysNatStatsBindingsTotal = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsTotal.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsTotal.setDescription('This object contains the total number of NAT bindings created.')
etsysNatStatsBindingsExhausted = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsExhausted.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsExhausted.setDescription('This object contains the number of times a request to create a NAT binding failed because there were no available free entries.')
etsysNatStatsBindingsMaxReached = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsMaxReached.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsMaxReached.setDescription('This object contains the number of times a request to create a NAT binding failed because the maximum number of bindings specified in etsysNatConfigMaxEntries allowed has been reached.')
etsysNatStatsBindingsNoIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsNoIpAddr.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsNoIpAddr.setDescription('This object contains the number of times a request to create a NAT binding failed because there were no available configured IP addresses to establish a binding.')
etsysNatStatsBindingsNoPortmapPort = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsNoPortmapPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsNoPortmapPort.setDescription('This object contains the number of times a request to create a NAT binding failed because there were no available Port Map Port entries to establish a binding.')
etsysNatStatsBindingsNoFtpALG = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsNoFtpALG.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsNoFtpALG.setDescription("This object contains the number of times a request to create a NAT binding failed because there were no available FTP ALG's to establish a binding.")
etsysNatStatsBindingsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsBindingsPerSecond.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsBindingsPerSecond.setDescription('This object contains the average number of NAT bindings created per second. Normalized for 5 seconds.')
etsysNatStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatStatsClear.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsClear.setDescription('Setting this object to a value of true(1) will clear NAT statistics and cause the following objects to be reset to zero and new values generated: etsysNatStatsBindingsDeleted, etsysNatStatsBindingsTotal, etsysNatStatsBindingsExhausted, etsysNatStatsBindingsMaxReached, etsysNatStatsBindingsNoIpAddr, etsysNatStatsBindingsNoPortmapPort, etsysNatStatsBindingsNoFtpALG, etsysNatStatsBindingsPerSecond. The following etsysNatStatsBindingsHigh object will be reset to its current active count. Setting this object to a value of false(2) has no effect. This object will always return a value of false(2).')
etsysNatStatsClearDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsClearDateAndTime.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsClearDateAndTime.setDescription('The date / time the NAT statistics were cleared.')
etsysNatStatsTranslationProtocolRulesCount = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsTranslationProtocolRulesCount.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsTranslationProtocolRulesCount.setDescription('The number of etsysNatTranslationProtocolRulesEntry in the etsysNatTranslationProtocolRulesTable')
etsysNatStatsMinTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 19), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsMinTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsMinTimeoutValue.setDescription('The minimum timeout value allowable for NAT timeouts.')
etsysNatStatsMaxTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 1, 20), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStatsMaxTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: etsysNatStatsMaxTimeoutValue.setDescription('The maximum timeout value allowable for NAT timeouts.')
etsysNatIpv4ConfigLogTranslations = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigLogTranslations.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigLogTranslations.setDescription("This object contains the state of NAT IPv4 Translations logging. - `disabled', a log message will not be generated when a NAT binding is either created or deleted. - `enabled', a log message will be generated when a NAT binding is either created or deleted.")
etsysNatIpv4ConfigInspectDNS = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigInspectDNS.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigInspectDNS.setDescription("This object contains the state of NAT IPv4 Inspect/Fix up DNS. NAT DNS packet inspection and fix up consists of parsing DNS request or response packets, identifying IP addresses contained within that may need to be NAT'ed, and fixing up the DNS packet with the appropriate NAT translations. - `disabled', NAT does not inspect DNS packets that are being forwarded by the NAT process. - `enabled', NAT inspects DNS packets that are being forwarded by the NAT process.")
etsysNatIpv4ConfigFtpCtrlPort = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 3), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigFtpCtrlPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigFtpCtrlPort.setDescription('This object contains the NAT IPv4 FTP control port.')
etsysNatIpv4ConfigMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigMaxEntries.setDescription("This object contains the maximum number of NAT IPv4 Translation entries. A value of '0' indicates that there is no limit.")
etsysNatIpv4ConfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 5), Unsigned32().clone(240)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigTimeout.setDescription('This object contains the general NAT IPv4 idle translation timeout value.')
etsysNatIpv4ConfigUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 6), Unsigned32().clone(240)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigUdpTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigUdpTimeout.setDescription('This object contains the NAT IPv4 UDP idle translation timeout value.')
etsysNatIpv4ConfigTcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 7), Unsigned32().clone(240)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigTcpTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigTcpTimeout.setDescription('This object contains the NAT IPv4 TCP idle translation timeout value.')
etsysNatIpv4ConfigFtpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 8), Unsigned32().clone(240)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigFtpTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigFtpTimeout.setDescription('This object contains the NAT IPv4 FTP idle translation timeout value.')
etsysNatIpv4ConfigDnsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 9), Unsigned32().clone(240)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigDnsTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigDnsTimeout.setDescription('This object contains the NAT IPv4 DNS idle translation timeout value.')
etsysNatIpv4ConfigIcmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 10), Unsigned32().clone(240)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigIcmpTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigIcmpTimeout.setDescription('This object contains the NAT IPv4 ICMP idle translation timeout value.')
etsysNatIpv4ConfigFinRstTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), )).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigFinRstTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigFinRstTimeout.setDescription("The timeout value after TCP FIN/RST observed on IPv4 NAT bindings. Setting a value of '0' results in this feature being disabled.")
etsysNatIpv4ConfigFinRstTimeoutHalfClosedStatus = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatIpv4ConfigFinRstTimeoutHalfClosedStatus.setStatus('current')
if mibBuilder.loadTexts: etsysNatIpv4ConfigFinRstTimeoutHalfClosedStatus.setDescription("This object indicates if the IPv4 TCP FIN/RST timeout will apply to bindings only when the hardware connections have aged out. - `disabled', indicates the IPv4 TCP FIN/RST timeout does not apply to half closed bindings. - `enabled', indicates the IPv4 TCP FIN/RST timeout applies to half closed bindings.")
etsysNatTranslationProtocolRulesTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 1), )
if mibBuilder.loadTexts: etsysNatTranslationProtocolRulesTable.setStatus('current')
if mibBuilder.loadTexts: etsysNatTranslationProtocolRulesTable.setDescription('A table of entries defining NAT rules for non standard protocols.')
etsysNatTranslationProtocolRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 1, 1), ).setIndexNames((0, "ENTERASYS-NAT-MIB", "etsysNatTranslationInetVersion"), (0, "ENTERASYS-NAT-MIB", "etsysNatTranslationProtocol"), (0, "ENTERASYS-NAT-MIB", "etsysNatTranslationPort"))
if mibBuilder.loadTexts: etsysNatTranslationProtocolRulesEntry.setStatus('current')
if mibBuilder.loadTexts: etsysNatTranslationProtocolRulesEntry.setDescription('An entry in the etsysNatTranslationProtocolRulesTable defining the configuration values for a unique NAT Translation Protocol entry. The Translation Protocol Rules Table entry defines the protocol and timeout value for a NAT Translation Protocol.')
etsysNatTranslationInetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 1, 1, 1), InetVersion())
if mibBuilder.loadTexts: etsysNatTranslationInetVersion.setStatus('current')
if mibBuilder.loadTexts: etsysNatTranslationInetVersion.setDescription('The Internet address version of the NAT Translation Protocol Rule.')
etsysNatTranslationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), )))
if mibBuilder.loadTexts: etsysNatTranslationProtocol.setStatus('current')
if mibBuilder.loadTexts: etsysNatTranslationProtocol.setDescription("The NAT Translation Internet Protocol number. A value of any(0) indicates that any protocol is allowed. Common IP Protocol values are ICMP(1), TCP(6) or UDP(17). All IP Protocol values except for TCP and UDP require a etsysNatTranslationPort value of '0'. TCP or UDP may have a non zero value in etsysNatTranslationPort.")
etsysNatTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 1, 1, 3), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), )))
if mibBuilder.loadTexts: etsysNatTranslationPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatTranslationPort.setDescription("The port assigned to this NAT Translation Protocol entry. A value of '0' indicates any port is allowed for this NAT Translation Protocol entry. An entry in etsysNatTranslationProtocol of either TCP(6) or UDP(17) may contain a non-zero value in this entry indicating the specific port assigned for this protocol. Any other value in etsysNatTranslationProtocol requires that this entry be set to '0'.")
etsysNatTranslationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 1, 1, 4), Unsigned32().clone(240)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatTranslationTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysNatTranslationTimeout.setDescription('The timeout value for idle NAT translations using this NAT Translation Protocol entry.')
etsysNatTranslationOneShot = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatTranslationOneShot.setStatus('current')
if mibBuilder.loadTexts: etsysNatTranslationOneShot.setDescription('This object enables the One Shot feature for this NAT Translation Protocol entry. One Shot is a feature specific to protocol bindings such as ICMP and UDP traffic such as DNS which are generally bi-directional and usually only send one packet in each direction. One Shot provides the benefit of quickly cleaning up such bindings given their temporary nature.')
etsysNatTranslationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatTranslationRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysNatTranslationRowStatus.setDescription("This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The NAT Translation Protocol entry is available for use in NAT operations. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid etsysNatTranslationProtocol must be present. A value in etsysNatTranslationProtocol not equal to either TCP(6), UDP(17) requires a '0' value in etsysNatTranslationPort. There are no other writable leaves so a successful createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysNatTranslationProtocolRulesEntry from the etsysNatTranslationProtocolRulesTable and make it unavailable for NAT operations.")
etsysNatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2), )
if mibBuilder.loadTexts: etsysNatPoolTable.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolTable.setDescription('A table of entries defining the operational characteristics of NAT Pools.')
etsysNatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1), ).setIndexNames((0, "ENTERASYS-NAT-MIB", "etsysNatPoolAddressType"), (0, "ENTERASYS-NAT-MIB", "etsysNatPoolName"))
if mibBuilder.loadTexts: etsysNatPoolEntry.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolEntry.setDescription('An entry in the etsysNatPoolTable containing the operational characteristics of a NAT Pool. A NAT Pool defines a range of public (outside) IP addresses defining this NAT pool and is identified by etsysNatPoolName.')
etsysNatPoolAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysNatPoolAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolAddressType.setDescription('The Internet Protocol version. The value of this property affects the size and format of: etsysNatPoolFirstIpAddr, etsysNatPoolLastIpAddr, and etsysNatPoolNextIpAddr. All objects must be of the same INET Address Type.')
etsysNatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: etsysNatPoolName.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolName.setDescription('This object contains the unique name of the NAT Pool.')
etsysNatPoolFirstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatPoolFirstIpAddr.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolFirstIpAddr.setDescription('The assigned IP address represents the first IP address in the range for this NAT Pool entry.')
etsysNatPoolLastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatPoolLastIpAddr.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolLastIpAddr.setDescription('The assigned IP address represents the last IP address in the range for this NAT Pool entry.')
etsysNatPoolPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 5), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatPoolPrefixLen.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolPrefixLen.setDescription("The length of the IP network mask used to refine the range of IP addresses defined by etsysNatPoolFirstIpAddr and etsysNatPoolLastIpAddr in defining the range of IP addresses for this NAT Pool entry. The values for the index objects etsysNatPoolFirstIpAddr, etsysNatPoolLastIpAddr and etsysNatPoolPrefixLen must be consistent. If a prefix length of '0' is specified than all addresses in the range are used.")
etsysNatPoolNextIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolNextIpAddr.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolNextIpAddr.setDescription('The Next NAT IP address that the pool is due to assign to a dynamic translation binding')
etsysNatPoolAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolAddrCount.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolAddrCount.setDescription('The total number of IP addresses assigned to this NAT Pool entry.')
etsysNatPoolAddrUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolAddrUsed.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolAddrUsed.setDescription('The total number of IP addresses in use for this NAT Pool entry.')
etsysNatPoolAddrAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolAddrAlloc.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolAddrAlloc.setDescription('The total number of IP addresses allocated for this NAT Pool entry.')
etsysNatPoolOutOfAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolOutOfAddrs.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolOutOfAddrs.setDescription('The number of times an allocation of a Pool entry failed because there were no available NAT IP addresses for this NAT Pool entry.')
etsysNatPoolPortAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolPortAlloc.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolPortAlloc.setDescription('The total number of Port Maps allocated for this Nat Pool entry.')
etsysNatPoolOutOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolOutOfPorts.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolOutOfPorts.setDescription('The number of times an allocation of a Pool entry failed because there were no available NAT Port Maps for this NAT Pool entry.')
etsysNatPoolConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolConns.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolConns.setDescription('The current number of active NAT connections established using this NAT Pool entry.')
etsysNatPoolHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolHits.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolHits.setDescription('The total number of hits this NAT Pool has received.')
etsysNatPoolListRulesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolListRulesCount.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolListRulesCount.setDescription('The total number of List Rules (etsysNatListPoolName) configured using this Nat Pool entry.')
etsysNatPoolLsnatVservers = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatPoolLsnatVservers.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolLsnatVservers.setDescription('The number of Virtual Servers (etsysLsnatVserverSourceNatPool) using this Nat Pool.')
etsysNatPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 2, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysNatPoolRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The NAT Pool entry is available for use by NAT operations. Other writable leaves in this table MAY be modified while the row is in the active state. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid createAndGo requires a unique etsysNatPoolName, errors resulting from existing etsysNatPoolNames will result in the row not being created. A valid createAndGo also requires sets to these leaves as part of a multi-varbind set when creating the instance: etsysNatPoolFirstIpAddr, etsysNatPoolLastIpAddr, etsysNatPoolPrefixLen A valid createAndGo also requires a valid IP address range and etsysNatPoolPrefixLen, errors resulting from an invalid IP range or prefix length will result in the row not being created. There are no other writable leaves so a successful createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysNatPoolEntry from the etsysNatPoolTable and make it unavailable for NAT operations. This will result in any NAT List table entries (etsysNatListPoolName) using this entry to be deleted. In addition this will also result in all associated LSNAT Virtual Server Table entries (etsysLsnatVserverSourceNatPool) to also be deleted.')
etsysNatListRuleTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3), )
if mibBuilder.loadTexts: etsysNatListRuleTable.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleTable.setDescription('A table of entries defining the operational characteristics of NAT Lists rules.')
etsysNatListRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1), ).setIndexNames((0, "ENTERASYS-NAT-MIB", "etsysNatListRuleInetVersion"), (0, "ENTERASYS-NAT-MIB", "etsysNatListRuleDirection"), (0, "ENTERASYS-NAT-MIB", "etsysNatListRuleMatchType"), (0, "ENTERASYS-NAT-MIB", "etsysNatListRuleName"), (0, "ENTERASYS-NAT-MIB", "etsysNatListRuleInsideVrfName"))
if mibBuilder.loadTexts: etsysNatListRuleEntry.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleEntry.setDescription('An entry in the etsysNatListRuleTable containing the operational characteristics of a NAT List rule. A NAT List rule defines the operational characteristics for the forming of dynamic address bindings from a pre-configured address pool (etsysNatPoolName) of public outside addresses and a pre-configured access-list (etsysNatListRuleName) of local inside addresses.')
etsysNatListRuleInetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 1), InetVersion())
if mibBuilder.loadTexts: etsysNatListRuleInetVersion.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleInetVersion.setDescription('The Internet address version of the NAT List rule. The value of etsysNatListRuleInetVersion must be consistent with the value of etsysNatPoolAddressType defined by the etsysNatPoolName associated with this etsysNatListRuleEntry.')
etsysNatListRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inside", 1), ("outside", 2))))
if mibBuilder.loadTexts: etsysNatListRuleDirection.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleDirection.setDescription("This value identifies if this NAT List rule is associated with an 'inside' or 'outside' network.")
etsysNatListRuleMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source", 1), ("destination", 2))))
if mibBuilder.loadTexts: etsysNatListRuleMatchType.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleMatchType.setDescription("This value identifies if this NAT List rule is associated with a 'source' or 'destination' packet.")
etsysNatListRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: etsysNatListRuleName.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleName.setDescription('This object contains the unique name of the access-list of IP addresses to translate for the inside source address defined by this NAT List rule.')
etsysNatListRuleInsideVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: etsysNatListRuleInsideVrfName.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleInsideVrfName.setDescription('This object contains the unique name of the Inside VRF for cross VRF NAT for this NAT List rule.')
etsysNatListRulePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatListRulePoolName.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRulePoolName.setDescription('This object contains the unique name of the NAT Pool. This value must be set with the row status set that creates the entry. The value may not be changed after the row is created.')
etsysNatListRuleIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatListRuleIfIndex.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleIfIndex.setDescription("The outside NAT List rule interface index used for this NAT List rule entry. A value of '0' indicates that this List Rule would apply to 'any' interface. This value must be set with the row status set that creates the entry. The value may not be changed after the row is created.")
etsysNatListRuleOverloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatListRuleOverloaded.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleOverloaded.setDescription('This entry indicates if this NAT List rule entry will be overloaded enabling Network Address Port Translation (NAPT). This value must be set with the row status set that creates the entry. The value may not be changed after the row is created.')
etsysNatListRuleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatListRuleConns.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleConns.setDescription('The current number of active NAT connections established on this NAT List rule entry.')
etsysNatListRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatListRuleHits.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleHits.setDescription('The total number of hits this NAT List rule entry has received.')
etsysNatListRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatListRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysNatListRuleRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The NAT List rule entry is available for use in NAT operations. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid createAndGo requires an active(1) etsysNatPoolName be provided for the etsysNatListRulePoolName. If the list rule leaves: etsysNatListRuleIfIndex or etsysNatListRuleOverloaded are to be set, then can only be set at create time. Sets to these leaves: etsysNatListRulePoolName, etsysNatListRuleIfIndex, etsysNatListRuleOverloaded Will not be accepted after the entry is created. Errors resulting from an invalid configuration will result in the row not being created. There are no other writable leaves so a successful createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysNatListRuleEntry from the etsysNatListRuleTable and make it unavailable for NAT operations.')
etsysNatStaticRuleTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4), )
if mibBuilder.loadTexts: etsysNatStaticRuleTable.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleTable.setDescription('A table of entries defining the operational characteristics of NAT Static rules.')
etsysNatStaticRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1), ).setIndexNames((0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleAddressType"), (0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleDirection"), (0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleMatchType"), (0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleProtocol"), (0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleLocalIpAddr"), (0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleLocalPort"), (0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleGlobalIpAddr"), (0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleGlobalPort"), (0, "ENTERASYS-NAT-MIB", "etsysNatStaticRuleInsideVrfName"))
if mibBuilder.loadTexts: etsysNatStaticRuleEntry.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleEntry.setDescription('An entry in the etsysNatStaticRuleTable containing the operational characteristics of a NAT Static rule. A NAT Static rule defines a range of private (inside) IP addresses and operational characteristics for which specified NAT Static rules will be applied. Static inside address translations are one-to-one bindings between the inside and outside IP addresses.')
etsysNatStaticRuleAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: etsysNatStaticRuleAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleAddressType.setDescription('The Internet Protocol version. The value of this property affects the size and format of: etsysNatStaticRuleLocalIpAddr, and etsysNatStaticRuleGlobalIpAddr both objects must be of the same INET Address Type.')
etsysNatStaticRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inside", 1), ("outside", 2))))
if mibBuilder.loadTexts: etsysNatStaticRuleDirection.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleDirection.setDescription("This value identifies if this NAT Static rule is associated with an 'inside' or 'outside' network.")
etsysNatStaticRuleMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source", 1), ("destination", 2))))
if mibBuilder.loadTexts: etsysNatStaticRuleMatchType.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleMatchType.setDescription("This value identifies if this NAT List rule is associated with a 'source' or 'destination' packet.")
etsysNatStaticRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 17))).clone(namedValues=NamedValues(("any", 0), ("tcp", 6), ("udp", 17))))
if mibBuilder.loadTexts: etsysNatStaticRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleProtocol.setDescription("This object contains the NAT Binding protocol type. A value of '0' indicates that the protocol type is 'any' and requires that etsysNatStaticRuleLocalPort and etsysNatStaticRuleGlobalPort be set to a value of '0'. A value of tcp(6) or udp(17) indicates that this entry defines NAPT translation of inside source addresses.")
etsysNatStaticRuleLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysNatStaticRuleLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleLocalIpAddr.setDescription('The NAT Static Local rule IP addresses representing the local IP address for this NAT Static rule entry.')
etsysNatStaticRuleLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 6), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), )))
if mibBuilder.loadTexts: etsysNatStaticRuleLocalPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleLocalPort.setDescription("The NAT Static Local rule port representing the local port for this NAT Static rule entry. This value is only meaningful if the etsysNatStaticRuleProtocol is set to tcp(6) or udp(17) otherwise this value must be set to '0'.")
etsysNatStaticRuleGlobalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 7), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: etsysNatStaticRuleGlobalIpAddr.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleGlobalIpAddr.setDescription('The NAT Static Global rule IP addresses representing the global IP address for this NAT Static rule entry.')
etsysNatStaticRuleGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 8), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), )))
if mibBuilder.loadTexts: etsysNatStaticRuleGlobalPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleGlobalPort.setDescription("The NAT Static Global rule port representing the global port for this NAT Static rule entry. This value is only meaningful if the etsysNatStaticRuleProtocol is set to tcp(6) or udp(17) otherwise this value must be set to '0'.")
etsysNatStaticRuleInsideVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: etsysNatStaticRuleInsideVrfName.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleInsideVrfName.setDescription('This object contains the unique name of the Inside VRF for cross VRF NAT.')
etsysNatStaticRuleOverloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStaticRuleOverloaded.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleOverloaded.setDescription('This entry indicates if this NAT Static rule entry is overloaded enabling Network Address Port Translation (NAPT). If the etsysNatStaticRuleProtocol is set to tcp(6) or udp(17) this value will display true(1) otherwise it will display false(2).')
etsysNatStaticRuleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStaticRuleConns.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleConns.setDescription('The current number of active NAT connections established on this NAT Static rule entry.')
etsysNatStaticRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStaticRuleHits.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleHits.setDescription('The total number of hits this NAT Static rule entry has received.')
etsysNatStaticRuleReservedBindingId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatStaticRuleReservedBindingId.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleReservedBindingId.setDescription("This value is a unique NAT Static rule binding identifier reserved by NAT at the creation of this Static rule entry. A value of '0' indicates that there is no binding identifier currently set for this static entry.")
etsysNatStaticRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysNatStaticRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysNatStaticRuleRowStatus.setDescription("This object permits management of the table by facilitating actions such as row creation and deletion. The value of this object has no effect on whether other objects in the conceptual row can be modified. The only allowable row status of this conceptual row in the table are: active(1) - The NAT Static rule entry is available for use in NAT operations. createAndGo(4) - This is the preferred mechanism for creating conceptual rows in this table. A valid createAndGo requires a valid etsysNatStaticRuleProtocol, a valid IP addresses for etsysNatStaticRuleLocalIpAddr and etsysNatStaticRuleGlobalIpAddr, and a valid port for etsysNatStaticRuleLocalPort and etsysNatStaticRuleGlobalPort, errors resulting from an invalid configuration will result in the row not being created. There are no other writable leaves so a successful createAndGo will always transition a new entry to the active(1) state. destroy(6) - This will remove the etsysNatStaticRuleEntry from the etsysNatStaticRuleTable, remove it's static NAT binding entry and make it unavailable for NAT operations.")
etsysNatBindingTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5), )
if mibBuilder.loadTexts: etsysNatBindingTable.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingTable.setDescription('A table of entries defining active NAT bindings.')
etsysNatBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1), ).setIndexNames((0, "ENTERASYS-NAT-MIB", "etsysNatBindingId"))
if mibBuilder.loadTexts: etsysNatBindingEntry.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingEntry.setDescription('An entry in the etsysNatBindingTable defining an active NAT binding. The etsysNatBindingEntry defines the runtime characteristics of a NAT binding.')
etsysNatBindingId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: etsysNatBindingId.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingId.setDescription('This value is a unique NAT binding identifier assigned by NAT during binding creation.')
etsysNatBindingState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("syncing", 2), ("waitroute", 3), ("established", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingState.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingState.setDescription("This object contains the state of the binding. - `init', indicates this binding is initializing. - `syncing', indicates this binding is syncing. - `waitroute', indicates this binding is in a wait route state. - `established', indicates this binding is established.")
etsysNatBindingAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingAddressType.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingAddressType.setDescription('The Internet Protocol version. The value of this property affects the size and format of: etsysNatBindingForwardSrcIp, etsysNatBindingForwardDstIp, etsysNatBindingReverseSrcIp and etsysNatBindingReverseDstIp objects.')
etsysNatBindingForwardSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingForwardSrcIp.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingForwardSrcIp.setDescription('The forward source IP address for this NAT binding entry.')
etsysNatBindingForwardSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 5), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingForwardSrcPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingForwardSrcPort.setDescription("The forward source port for this NAT binding entry. This value is only meaningful if the etsysNatBindingProtocol is set to tcp(6) or udp(17) otherwise this object will return a value of '0'.")
etsysNatBindingForwardDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingForwardDstIp.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingForwardDstIp.setDescription('The forward destination IP address for this NAT binding entry.')
etsysNatBindingForwardDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 7), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingForwardDstPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingForwardDstPort.setDescription("The forward destination port for this NAT binding entry. This value is only meaningful if the etsysNatBindingProtocol is set to tcp(6) or udp(17) otherwise this object will return a value of '0'.")
etsysNatBindingReverseSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingReverseSrcIp.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingReverseSrcIp.setDescription('The reverse NAT source IP address for this NAT binding entry.')
etsysNatBindingReverseSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 9), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingReverseSrcPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingReverseSrcPort.setDescription("The reverse NAT source port for this NAT binding entry. This value is only meaningful if the etsysNatBindingProtocol is set to tcp(6) or udp(17) otherwise this object will return a value of '0'.")
etsysNatBindingReverseDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingReverseDstIp.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingReverseDstIp.setDescription('The reverse NAT destination IP address for this NAT binding entry.')
etsysNatBindingReverseDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 11), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingReverseDstPort.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingReverseDstPort.setDescription("The reverse NAT destination port for this NAT binding entry. This value is only meaningful if the etsysNatBindingProtocol is set to tcp(6) or udp(17) otherwise this object will return a value of '0'.")
etsysNatBindingRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticReserved", 3), ("dynamicReserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingRuleType.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingRuleType.setDescription("This object contains the NAT Binding Rule type. - `static', indicates that the NAT binding is static. - `dynamic', indicates that the NAT binding is dynamic. - `staticReserved', indicates that the NAT binding is static (reserved). - `dynamicReserved', indicates that the NAT binding is dynamic (reserved).")
etsysNatBindingPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingPoolName.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingPoolName.setDescription('This object contains the name of the NAT Pool (etsysNatPoolName) associated with this NAT binding.')
etsysNatBindingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingProtocol.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingProtocol.setDescription("This object contains the NAT Binding protocol type. A value of '0' indicates that the protocol type is 'any'. Common IP Protocol values are TCP(6) and UDP(17).")
etsysNatBindingAlgType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("ftpctrl", 2), ("ftpdata", 3), ("tftpctrl", 4), ("icmpecho", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingAlgType.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingAlgType.setDescription("This object contains the NAT ALG Binding type. - `none', indicates that this NAT binding is not an ALG binding. - `ftpctrl', indicates that this NAT binding is a FTP control binding. - `ftpdata, indicates that this NAT binding is a FTP data binding. - `tftpctrl', indicates that this NAT binding is a TFTP control binding. - `icmpecho', indicates that this NAT binding is an ICMP echo binding.")
etsysNatBindingFtpDataChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingFtpDataChannelCount.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingFtpDataChannelCount.setDescription("This object contains the NAT Binding FTP Data channel. This value is only significant if the etsysNatBindingAlgType is ftpctrl(2), otherwise this object will return a value of '0'.")
etsysNatBindingIcmpFwdIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingIcmpFwdIdent.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingIcmpFwdIdent.setDescription("This object contains the NAT Binding ICMP Forward ID. This value is only significant if the etsysNatBindingAlgType is icmpecho(5), otherwise this object will return a value of '0'.")
etsysNatBindingIcmpRevIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingIcmpRevIdent.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingIcmpRevIdent.setDescription("This object contains the NAT Binding ICMP Reverse ID. This value is only significant if the etsysNatBindingAlgType is icmpecho(5), otherwise this object will return a value of '0'.")
etsysNatBindingHWConns = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingHWConns.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingHWConns.setDescription('This object contains the total number of hardware connections currently active using this NAT binding.')
etsysNatBindingCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingCreationDate.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingCreationDate.setDescription('The creation date / time for this NAT binding entry.')
etsysNatBindingExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingExpirationDate.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingExpirationDate.setDescription("The expiration date / time for this NAT binding entry. If the NAT binding expire time (etsysNatBindingExpireTime) is '0' there is no expiration date and this object will return the current date / time.")
etsysNatBindingIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 22), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingIdleTime.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingIdleTime.setDescription('The consecutive number of seconds this NAT binding entry has been idle.')
etsysNatBindingExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysNatBindingExpireTime.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingExpireTime.setDescription("The number of idle seconds left before this NAT binding entry will age out. A value of '0' indicates that this NAT binding will not age out.")
etsysNatBindingClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 2, 5, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysNatBindingClear.setStatus('current')
if mibBuilder.loadTexts: etsysNatBindingClear.setDescription("Setting this object to a value of true(1) will cause this etsysNatBindingEntry to be deleted from the etsysNatBindingTable if the corresponding etsysNatBindingRuleType is 'dynamic(2)' or 'dynamicReserved(4)' otherwise the binding entry will not be deleted. Setting this object to a value of false(2) has no effect. This object will always return a value of false(2).")
etsysNatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 1))
etsysNatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 2))
etsysNatMIBGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 1, 1)).setObjects(("ENTERASYS-NAT-MIB", "etsysNatStatsPoolsUsed"), ("ENTERASYS-NAT-MIB", "etsysNatStatsListRulesUsed"), ("ENTERASYS-NAT-MIB", "etsysNatStatsStaticRulesUsed"), ("ENTERASYS-NAT-MIB", "etsysNatStatsAddressUsed"), ("ENTERASYS-NAT-MIB", "etsysNatStatsPortMapsUsed"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsCurrent"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsHigh"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsDeleted"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsTotal"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsExhausted"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsMaxReached"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsNoIpAddr"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsNoPortmapPort"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsNoFtpALG"), ("ENTERASYS-NAT-MIB", "etsysNatStatsBindingsPerSecond"), ("ENTERASYS-NAT-MIB", "etsysNatStatsClear"), ("ENTERASYS-NAT-MIB", "etsysNatStatsClearDateAndTime"), ("ENTERASYS-NAT-MIB", "etsysNatStatsTranslationProtocolRulesCount"), ("ENTERASYS-NAT-MIB", "etsysNatStatsMinTimeoutValue"), ("ENTERASYS-NAT-MIB", "etsysNatStatsMaxTimeoutValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysNatMIBGlobalStatsGroup = etsysNatMIBGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: etsysNatMIBGlobalStatsGroup.setDescription('The information group for NAT global resources and operations.')
etsysNatMIBGlobalIpv4ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 1, 2)).setObjects(("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigLogTranslations"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigInspectDNS"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigFtpCtrlPort"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigMaxEntries"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigTimeout"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigUdpTimeout"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigTcpTimeout"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigFtpTimeout"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigDnsTimeout"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigIcmpTimeout"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigFinRstTimeout"), ("ENTERASYS-NAT-MIB", "etsysNatIpv4ConfigFinRstTimeoutHalfClosedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysNatMIBGlobalIpv4ConfigGroup = etsysNatMIBGlobalIpv4ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: etsysNatMIBGlobalIpv4ConfigGroup.setDescription('The information group for NAT IPv4 global resources and operations.')
etsysNatMIBTranslationProtocolRulesTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 1, 3)).setObjects(("ENTERASYS-NAT-MIB", "etsysNatTranslationTimeout"), ("ENTERASYS-NAT-MIB", "etsysNatTranslationOneShot"), ("ENTERASYS-NAT-MIB", "etsysNatTranslationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysNatMIBTranslationProtocolRulesTableGroup = etsysNatMIBTranslationProtocolRulesTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysNatMIBTranslationProtocolRulesTableGroup.setDescription('The information group for NAT global IPv4 Translation Protocol Rules configuration.')
etsysNatMIBNatPoolTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 1, 4)).setObjects(("ENTERASYS-NAT-MIB", "etsysNatPoolFirstIpAddr"), ("ENTERASYS-NAT-MIB", "etsysNatPoolLastIpAddr"), ("ENTERASYS-NAT-MIB", "etsysNatPoolPrefixLen"), ("ENTERASYS-NAT-MIB", "etsysNatPoolNextIpAddr"), ("ENTERASYS-NAT-MIB", "etsysNatPoolAddrCount"), ("ENTERASYS-NAT-MIB", "etsysNatPoolAddrUsed"), ("ENTERASYS-NAT-MIB", "etsysNatPoolAddrAlloc"), ("ENTERASYS-NAT-MIB", "etsysNatPoolOutOfAddrs"), ("ENTERASYS-NAT-MIB", "etsysNatPoolPortAlloc"), ("ENTERASYS-NAT-MIB", "etsysNatPoolOutOfPorts"), ("ENTERASYS-NAT-MIB", "etsysNatPoolConns"), ("ENTERASYS-NAT-MIB", "etsysNatPoolHits"), ("ENTERASYS-NAT-MIB", "etsysNatPoolListRulesCount"), ("ENTERASYS-NAT-MIB", "etsysNatPoolLsnatVservers"), ("ENTERASYS-NAT-MIB", "etsysNatPoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysNatMIBNatPoolTableGroup = etsysNatMIBNatPoolTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysNatMIBNatPoolTableGroup.setDescription('The information group for NAT Pool configurations.')
etsysNatMIBNatListRuleTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 1, 5)).setObjects(("ENTERASYS-NAT-MIB", "etsysNatListRulePoolName"), ("ENTERASYS-NAT-MIB", "etsysNatListRuleIfIndex"), ("ENTERASYS-NAT-MIB", "etsysNatListRuleOverloaded"), ("ENTERASYS-NAT-MIB", "etsysNatListRuleConns"), ("ENTERASYS-NAT-MIB", "etsysNatListRuleHits"), ("ENTERASYS-NAT-MIB", "etsysNatListRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysNatMIBNatListRuleTableGroup = etsysNatMIBNatListRuleTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysNatMIBNatListRuleTableGroup.setDescription('The information group for NAT List rule configurations.')
etsysNatMIBNatStaticRuleTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 1, 6)).setObjects(("ENTERASYS-NAT-MIB", "etsysNatStaticRuleOverloaded"), ("ENTERASYS-NAT-MIB", "etsysNatStaticRuleConns"), ("ENTERASYS-NAT-MIB", "etsysNatStaticRuleHits"), ("ENTERASYS-NAT-MIB", "etsysNatStaticRuleReservedBindingId"), ("ENTERASYS-NAT-MIB", "etsysNatStaticRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysNatMIBNatStaticRuleTableGroup = etsysNatMIBNatStaticRuleTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysNatMIBNatStaticRuleTableGroup.setDescription('The information group for NAT static rule configurations.')
etsysNatMIBNatBindingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 1, 7)).setObjects(("ENTERASYS-NAT-MIB", "etsysNatBindingState"), ("ENTERASYS-NAT-MIB", "etsysNatBindingAddressType"), ("ENTERASYS-NAT-MIB", "etsysNatBindingForwardSrcIp"), ("ENTERASYS-NAT-MIB", "etsysNatBindingForwardSrcPort"), ("ENTERASYS-NAT-MIB", "etsysNatBindingForwardDstIp"), ("ENTERASYS-NAT-MIB", "etsysNatBindingForwardDstPort"), ("ENTERASYS-NAT-MIB", "etsysNatBindingReverseSrcIp"), ("ENTERASYS-NAT-MIB", "etsysNatBindingReverseSrcPort"), ("ENTERASYS-NAT-MIB", "etsysNatBindingReverseDstIp"), ("ENTERASYS-NAT-MIB", "etsysNatBindingReverseDstPort"), ("ENTERASYS-NAT-MIB", "etsysNatBindingRuleType"), ("ENTERASYS-NAT-MIB", "etsysNatBindingPoolName"), ("ENTERASYS-NAT-MIB", "etsysNatBindingProtocol"), ("ENTERASYS-NAT-MIB", "etsysNatBindingAlgType"), ("ENTERASYS-NAT-MIB", "etsysNatBindingFtpDataChannelCount"), ("ENTERASYS-NAT-MIB", "etsysNatBindingIcmpFwdIdent"), ("ENTERASYS-NAT-MIB", "etsysNatBindingIcmpRevIdent"), ("ENTERASYS-NAT-MIB", "etsysNatBindingHWConns"), ("ENTERASYS-NAT-MIB", "etsysNatBindingCreationDate"), ("ENTERASYS-NAT-MIB", "etsysNatBindingExpirationDate"), ("ENTERASYS-NAT-MIB", "etsysNatBindingIdleTime"), ("ENTERASYS-NAT-MIB", "etsysNatBindingExpireTime"), ("ENTERASYS-NAT-MIB", "etsysNatBindingClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysNatMIBNatBindingTableGroup = etsysNatMIBNatBindingTableGroup.setStatus('current')
if mibBuilder.loadTexts: etsysNatMIBNatBindingTableGroup.setDescription('The information group for NAT bindings.')
etsysNatMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 75, 3, 2, 1)).setObjects(("ENTERASYS-NAT-MIB", "etsysNatMIBGlobalStatsGroup"), ("ENTERASYS-NAT-MIB", "etsysNatMIBGlobalIpv4ConfigGroup"), ("ENTERASYS-NAT-MIB", "etsysNatMIBTranslationProtocolRulesTableGroup"), ("ENTERASYS-NAT-MIB", "etsysNatMIBNatPoolTableGroup"), ("ENTERASYS-NAT-MIB", "etsysNatMIBNatListRuleTableGroup"), ("ENTERASYS-NAT-MIB", "etsysNatMIBNatStaticRuleTableGroup"), ("ENTERASYS-NAT-MIB", "etsysNatMIBNatBindingTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysNatMIBCompliance = etsysNatMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysNatMIBCompliance.setDescription('The compliance statement for implementation of the Router Application Services NAT functionality.')
mibBuilder.exportSymbols("ENTERASYS-NAT-MIB", etsysNatStaticRuleInsideVrfName=etsysNatStaticRuleInsideVrfName, etsysNatIpv4ConfigFinRstTimeout=etsysNatIpv4ConfigFinRstTimeout, etsysNatListRuleDirection=etsysNatListRuleDirection, etsysNatStaticRuleHits=etsysNatStaticRuleHits, etsysNatStatsPortMapsUsed=etsysNatStatsPortMapsUsed, etsysNatStaticRuleEntry=etsysNatStaticRuleEntry, etsysNatIpv4ConfigFtpTimeout=etsysNatIpv4ConfigFtpTimeout, etsysNatIpv4ConfigTimeout=etsysNatIpv4ConfigTimeout, etsysNatStatsBindingsDeleted=etsysNatStatsBindingsDeleted, etsysNatBindingId=etsysNatBindingId, etsysNatMIBCompliance=etsysNatMIBCompliance, etsysNatBindingTable=etsysNatBindingTable, etsysNatBindingProtocol=etsysNatBindingProtocol, etsysNatMIBNatPoolTableGroup=etsysNatMIBNatPoolTableGroup, etsysNatGlobalIpv4Config=etsysNatGlobalIpv4Config, etsysNatBindingExpirationDate=etsysNatBindingExpirationDate, etsysNatConformance=etsysNatConformance, etsysNatStatsMinTimeoutValue=etsysNatStatsMinTimeoutValue, etsysNatStatsPoolsUsed=etsysNatStatsPoolsUsed, etsysNatStatsBindingsNoIpAddr=etsysNatStatsBindingsNoIpAddr, etsysNatPoolNextIpAddr=etsysNatPoolNextIpAddr, etsysNatPoolLsnatVservers=etsysNatPoolLsnatVservers, etsysNatStaticRuleConns=etsysNatStaticRuleConns, etsysNatStatsBindingsNoPortmapPort=etsysNatStatsBindingsNoPortmapPort, etsysNatListRuleEntry=etsysNatListRuleEntry, etsysNatStatsBindingsPerSecond=etsysNatStatsBindingsPerSecond, etsysNatPoolListRulesCount=etsysNatPoolListRulesCount, etsysNatStaticRuleProtocol=etsysNatStaticRuleProtocol, etsysNatStatsAddressUsed=etsysNatStatsAddressUsed, etsysNatIpv4ConfigIcmpTimeout=etsysNatIpv4ConfigIcmpTimeout, etsysNatPoolPrefixLen=etsysNatPoolPrefixLen, etsysNatPoolAddrUsed=etsysNatPoolAddrUsed, etsysNatBindingForwardDstIp=etsysNatBindingForwardDstIp, etsysNatPoolLastIpAddr=etsysNatPoolLastIpAddr, etsysNatBindingForwardSrcPort=etsysNatBindingForwardSrcPort, etsysNatTranslationRowStatus=etsysNatTranslationRowStatus, etsysNatTables=etsysNatTables, etsysNatListRuleOverloaded=etsysNatListRuleOverloaded, etsysNatTranslationProtocolRulesTable=etsysNatTranslationProtocolRulesTable, etsysNatListRuleMatchType=etsysNatListRuleMatchType, etsysNatListRulePoolName=etsysNatListRulePoolName, etsysNatBindingReverseDstIp=etsysNatBindingReverseDstIp, etsysNatMIBNatListRuleTableGroup=etsysNatMIBNatListRuleTableGroup, etsysNatStatsTranslationProtocolRulesCount=etsysNatStatsTranslationProtocolRulesCount, etsysNatIpv4ConfigTcpTimeout=etsysNatIpv4ConfigTcpTimeout, etsysNatStatsBindingsNoFtpALG=etsysNatStatsBindingsNoFtpALG, etsysNatBindingIcmpFwdIdent=etsysNatBindingIcmpFwdIdent, etsysNatMIBCompliances=etsysNatMIBCompliances, etsysNatListRuleConns=etsysNatListRuleConns, etsysNatListRuleName=etsysNatListRuleName, etsysNatBindingEntry=etsysNatBindingEntry, etsysNatStaticRuleOverloaded=etsysNatStaticRuleOverloaded, etsysNatGlobal=etsysNatGlobal, etsysNatTranslationProtocol=etsysNatTranslationProtocol, etsysNatPoolOutOfPorts=etsysNatPoolOutOfPorts, etsysNatIpv4ConfigDnsTimeout=etsysNatIpv4ConfigDnsTimeout, etsysNatListRuleRowStatus=etsysNatListRuleRowStatus, etsysNatBindingForwardSrcIp=etsysNatBindingForwardSrcIp, etsysNatStatsBindingsHigh=etsysNatStatsBindingsHigh, etsysNatListRuleInetVersion=etsysNatListRuleInetVersion, etsysNatBindingIdleTime=etsysNatBindingIdleTime, etsysNatPoolEntry=etsysNatPoolEntry, etsysNatGlobalStats=etsysNatGlobalStats, etsysNatBindingCreationDate=etsysNatBindingCreationDate, etsysNatStatsClear=etsysNatStatsClear, PYSNMP_MODULE_ID=etsysNatMIB, etsysNatStaticRuleAddressType=etsysNatStaticRuleAddressType, etsysNatStaticRuleLocalPort=etsysNatStaticRuleLocalPort, etsysNatStatsBindingsExhausted=etsysNatStatsBindingsExhausted, etsysNatListRuleTable=etsysNatListRuleTable, etsysNatStaticRuleGlobalIpAddr=etsysNatStaticRuleGlobalIpAddr, etsysNatStaticRuleRowStatus=etsysNatStaticRuleRowStatus, etsysNatBindingPoolName=etsysNatBindingPoolName, etsysNatStaticRuleGlobalPort=etsysNatStaticRuleGlobalPort, etsysNatBindingHWConns=etsysNatBindingHWConns, etsysNatStaticRuleDirection=etsysNatStaticRuleDirection, etsysNatIpv4ConfigUdpTimeout=etsysNatIpv4ConfigUdpTimeout, etsysNatMIBNatStaticRuleTableGroup=etsysNatMIBNatStaticRuleTableGroup, etsysNatBindingExpireTime=etsysNatBindingExpireTime, etsysNatPoolHits=etsysNatPoolHits, etsysNatPoolPortAlloc=etsysNatPoolPortAlloc, etsysNatPoolAddrCount=etsysNatPoolAddrCount, etsysNatBindingState=etsysNatBindingState, etsysNatListRuleInsideVrfName=etsysNatListRuleInsideVrfName, etsysNatStatsBindingsMaxReached=etsysNatStatsBindingsMaxReached, etsysNatStatsBindingsCurrent=etsysNatStatsBindingsCurrent, etsysNatIpv4ConfigFtpCtrlPort=etsysNatIpv4ConfigFtpCtrlPort, etsysNatPoolAddrAlloc=etsysNatPoolAddrAlloc, etsysNatStatsListRulesUsed=etsysNatStatsListRulesUsed, etsysNatTranslationOneShot=etsysNatTranslationOneShot, etsysNatMIBGlobalIpv4ConfigGroup=etsysNatMIBGlobalIpv4ConfigGroup, etsysNatStaticRuleReservedBindingId=etsysNatStaticRuleReservedBindingId, etsysNatBindingReverseSrcPort=etsysNatBindingReverseSrcPort, etsysNatBindingReverseDstPort=etsysNatBindingReverseDstPort, etsysNatStatsMaxTimeoutValue=etsysNatStatsMaxTimeoutValue, etsysNatStaticRuleTable=etsysNatStaticRuleTable, etsysNatMIBTranslationProtocolRulesTableGroup=etsysNatMIBTranslationProtocolRulesTableGroup, etsysNatIpv4ConfigLogTranslations=etsysNatIpv4ConfigLogTranslations, etsysNatTranslationTimeout=etsysNatTranslationTimeout, etsysNatPoolName=etsysNatPoolName, etsysNatBindingAlgType=etsysNatBindingAlgType, etsysNatListRuleHits=etsysNatListRuleHits, etsysNatTranslationInetVersion=etsysNatTranslationInetVersion, etsysNatIpv4ConfigInspectDNS=etsysNatIpv4ConfigInspectDNS, etsysNatBindingReverseSrcIp=etsysNatBindingReverseSrcIp, etsysNatBindingForwardDstPort=etsysNatBindingForwardDstPort, etsysNatMIB=etsysNatMIB, etsysNatPoolFirstIpAddr=etsysNatPoolFirstIpAddr, etsysNatStaticRuleMatchType=etsysNatStaticRuleMatchType, etsysNatIpv4ConfigMaxEntries=etsysNatIpv4ConfigMaxEntries, etsysNatTranslationPort=etsysNatTranslationPort, etsysNatIpv4ConfigFinRstTimeoutHalfClosedStatus=etsysNatIpv4ConfigFinRstTimeoutHalfClosedStatus, etsysNatStaticRuleLocalIpAddr=etsysNatStaticRuleLocalIpAddr, etsysNatMIBNatBindingTableGroup=etsysNatMIBNatBindingTableGroup, etsysNatStatsStaticRulesUsed=etsysNatStatsStaticRulesUsed, etsysNatPoolOutOfAddrs=etsysNatPoolOutOfAddrs, etsysNatMIBGlobalStatsGroup=etsysNatMIBGlobalStatsGroup, etsysNatBindingRuleType=etsysNatBindingRuleType, etsysNatTranslationProtocolRulesEntry=etsysNatTranslationProtocolRulesEntry, etsysNatBindingIcmpRevIdent=etsysNatBindingIcmpRevIdent, etsysNatStatsBindingsTotal=etsysNatStatsBindingsTotal, etsysNatPoolConns=etsysNatPoolConns, etsysNatPoolAddressType=etsysNatPoolAddressType, etsysNatBindingFtpDataChannelCount=etsysNatBindingFtpDataChannelCount, etsysNatBindingAddressType=etsysNatBindingAddressType, etsysNatListRuleIfIndex=etsysNatListRuleIfIndex, etsysNatMIBGroups=etsysNatMIBGroups, etsysNatPoolTable=etsysNatPoolTable, etsysNatBindingClear=etsysNatBindingClear, etsysNatStatsClearDateAndTime=etsysNatStatsClearDateAndTime, etsysNatPoolRowStatus=etsysNatPoolRowStatus)
