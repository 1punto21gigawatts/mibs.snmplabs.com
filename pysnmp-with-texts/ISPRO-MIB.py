#
# PySNMP MIB module ISPRO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISPRO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter32, ObjectIdentity, Gauge32, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, iso, enterprises, Unsigned32, IpAddress, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "ObjectIdentity", "Gauge32", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "iso", "enterprises", "Unsigned32", "IpAddress", "Counter64", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jacarta = MibIdentifier((1, 3, 6, 1, 4, 1, 19011))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1))
webAppliance = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3))
ispro = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2))
isObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1))
isTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 2))
isIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1))
isConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2))
isDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3))
isDeviceMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1))
isDeviceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2))
class IsproEnuEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class IsproEnuReset(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("reset", 1), ("nothing", 2))

class IsproEnuRestart(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("restart", 1), ("nothing", 2))

class IsproEnuSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("information", 1), ("warning", 2), ("severe", 3))

class IsproEnuAccess(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noAccess", 1), ("readonly", 2), ("readwrite", 3))

class IsproEnuTempUnit(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("celsius", 1), ("fahrenheit", 2))

class IsproEnuDateFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dd-mm-yyyy", 1), ("mm-dd-yyyy", 2))

class IsproEnuTimeZone(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("gMT-1200", 1), ("gMT-1100", 2), ("gMT-1000", 3), ("gMT-0900", 4), ("gMT-0800", 5), ("gMT-0700", 6), ("gMT-0600", 7), ("gMT-0500", 8), ("gMT-0400", 9), ("gMT-0330", 10), ("gMT-0300", 11), ("gMT-0200", 12), ("gMT-0100", 13), ("gMT-0000", 14), ("gMT0100", 15), ("gMT0200", 16), ("gMT0300", 17), ("gMT0330", 18), ("gMT0400", 19), ("gMT0500", 20), ("gMT0530", 21), ("gMT0600", 22), ("gMT0700", 23), ("gMT0800", 24), ("gMT0900", 25), ("gMT1000", 26), ("gMT1100", 27), ("gMT1200", 28))

class IsproEnuSensorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("sensorHT", 2))

class IsproEnuThresholdStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("disable", 2), ("normal", 3), ("below-low-warning", 4), ("below-low-critical", 5), ("above-high-warning", 6), ("above-high-critical", 7))

class IsproEnuDigitalStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

class IsproTriggerStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("triggered", 2))

class IsproEnuSensorState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("auto", 1), ("disable", 2))

class IsproEnuTempCalibration(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("temperatureIncrease0Point0", 1), ("temperatureIncrease0Point5", 2), ("temperatureIncrease1Point0", 3), ("temperatureIncrease1Point5", 4), ("temperatureIncrease2Point0", 5), ("temperatureIncrease2Point5", 6), ("temperatureIncrease3Point0", 7), ("temperatureDecrease0Point5", 8), ("temperatureDecrease1Point0", 9), ("temperatureDecrease1Point5", 10), ("temperatureDecrease2Point0", 11), ("temperatureDecrease2Point5", 12), ("temperatureDecrease3Point0", 13))

class IsproEnuHumidityCalibration(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("humidityIncrease0Point0", 1), ("humidityIncrease0Point5", 2), ("humidityIncrease1Point0", 3), ("humidityIncrease1Point5", 4), ("humidityIncrease2Point0", 5), ("humidityIncrease2Point5", 6), ("humidityIncrease3Point0", 7), ("humidityDecrease0Point5", 8), ("humidityDecrease1Point0", 9), ("humidityDecrease1Point5", 10), ("humidityDecrease2Point0", 11), ("humidityDecrease2Point5", 12), ("humidityDecrease3Point0", 13))

class IsproEnuAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3))

class IsproEnuOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class IsproEnuTurnOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("turnOn", 1), ("turnOff", 2))

class IsproEnuPresent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("present", 1), ("absent", 2))

class IsproEnuDO(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("digitalOutput1", 2), ("digitalOutput2", 3))

class IsproEnuHighLow(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("high", 1), ("low", 2))

class IsproLogType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("historyLog", 1), ("extendedLog", 2), ("deviceEventLog", 3), ("systemEventLog", 4))

isIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: isIdentManufacturer.setDescription('The name of the ispro manufacturer.')
isIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: isIdentModel.setDescription('The ispro Model designation.')
isIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isIdentAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: isIdentAgentSoftwareVersion.setDescription('The ispro software/firmware version. This variable may or may not have the same value as upsIdentUPSSoftwareVersion in some implementations.')
isIdentName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: isIdentName.setDescription('A string identifying the ispro. This object should be set by the administrator.')
isConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isConfigMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigMibVersion.setDescription('The version of MIB spec.')
isConfigNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 2))
isConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigIpAddress.setDescription(' The ip address that NMS can identify the managed device')
isConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigGateway.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigGateway.setDescription(' The default gateway that allow device managed through routers ')
isConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigSubnetMask.setDescription(' Internet address subnet mask')
isConfigDateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3))
isConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigDate.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigDate.setDescription('The date in ispro, format ask the Date Format of references ')
isConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTime.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTime.setDescription('The time of ispro, format is (hh:mm:ss)')
isConfigTimeFromNtp = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 3), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTimeFromNtp.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTimeFromNtp.setDescription('Enable/disable update date/time from NTP server.')
isConfigNtpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigNtpIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigNtpIpAddress.setDescription('NTP IP address.')
isConfigNtpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 5), IsproEnuTimeZone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigNtpTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigNtpTimeZone.setDescription('Configure the time zone of ispro to access NTP server.')
isConfigDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 3, 6), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigDayLightSaving.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigDayLightSaving.setDescription('Enable/disable daylight saving for NTP time, if enabled, the time get from NTP will be set set one hour in advance to reflect daylight saving status.')
isConfigLog = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4))
isConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigHistoryLogFrequency.setDescription('The frequency of the history log updates. The value is in seconds')
isConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigExtHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigExtHistoryLogFrequency.setDescription('The frequency of the extended history log updates. The value is in seconds')
isConfigConfigurationLog = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4, 3), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigConfigurationLog.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigConfigurationLog.setDescription(' Enable/disable ispro to log parameters change.')
isConfigLogType = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 4, 4), IsproLogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isConfigLogType.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigLogType.setDescription('The type of log in agent')
isConfigDhcpState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 5), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigDhcpState.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigDhcpState.setDescription('Enable or disable DHCP/BootP capability')
isConfigPingState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 6), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigPingState.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigPingState.setDescription('Enable or disable Ping Echo capability')
isConfigTftpState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 7), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTftpState.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTftpState.setDescription('Enable or disable TFTP network upgrade capability')
isConfigTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 8))
isConfigTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 8, 1), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTelnetState.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTelnetState.setDescription('Enable or disable telnet access')
isConfigTelnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTelnetPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTelnetPortNumber.setDescription('Setting the server port of telnet.')
isConfigHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 9))
isConfigHttpState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 9, 1), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigHttpState.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigHttpState.setDescription('Enable or disable HTTP access')
isConfigHttpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigHttpPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigHttpPortNumber.setDescription('Setting the server port of HTTP.')
isConfigHttpSecurity = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 9, 3), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigHttpSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigHttpSecurity.setDescription('Enable/disable HTTP access for read-only users')
isConfigSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 10))
isConfigSnmpState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 10, 1), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigSnmpState.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigSnmpState.setDescription('Enable or disable SNMP access')
isConfigSnmpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigSnmpPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigSnmpPortNumber.setDescription('Setting the server port of SNMP.')
isConfigControl = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 11))
isConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 11, 1), IsproEnuReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigResetToDefault.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigResetToDefault.setDescription('Reset all parameters of ispro to default value')
isConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 11, 2), IsproEnuRestart()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigRestart.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigRestart.setDescription('Restart ispro')
isConfigTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 12))
isConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTrapRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTrapRetryCount.setDescription('The count of repeat traps to send to NMS before trap acknowledge received.')
isConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTrapRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTrapRetryTime.setDescription('The time between retry traps send to NMS.')
isConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTrapAckSignature.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTrapAckSignature.setDescription('The signature of trap acknowledge.')
isConfigRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigRefreshRate.setDescription(' The frequency that ispro refresh web page from agent (unit : second).')
isConfigTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14), )
if mibBuilder.loadTexts: isConfigTrapReceiverTable.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTrapReceiverTable.setDescription('A list of managers to send traps to. The number of entries is given by the value of isConfigNumTrapReceivers')
isConfigTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1), ).setIndexNames((0, "ISPRO-MIB", "isReceiverIndex"))
if mibBuilder.loadTexts: isConfigTrapReceiverEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTrapReceiverEntry.setDescription('The managers to send traps to.')
isReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isReceiverIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isReceiverIndex.setDescription('The index to a trap receiver entry.')
isReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: isReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
isReceiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isReceiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: isReceiverCommunityString.setDescription('The community name to use in the trap when sent to the manager.')
isReceiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 4), IsproEnuSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isReceiverSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: isReceiverSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
isReceiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isReceiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: isReceiverDescription.setDescription('Description of trap receivers')
isConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15), )
if mibBuilder.loadTexts: isConfigAccessControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigAccessControlTable.setDescription('A list of managers which can access ispro with private community string.')
isConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1), ).setIndexNames((0, "ISPRO-MIB", "isAccessIndex"))
if mibBuilder.loadTexts: isConfigAccessControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigAccessControlEntry.setDescription('The managers.')
isAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isAccessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isAccessIndex.setDescription('The index to an access control entry.')
isAccessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isAccessControlAddr.setStatus('mandatory')
if mibBuilder.loadTexts: isAccessControlAddr.setDescription('The IP address of the manager to access ispro')
isAccessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isAccessCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: isAccessCommunityString.setDescription('The community name to use in the manager when access ispro')
isAccessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 4), IsproEnuAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isAccessControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: isAccessControlMode.setDescription('Access type, only read/Write access type can change parameter of ispro')
isAccessAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isAccessAccount.setStatus('mandatory')
if mibBuilder.loadTexts: isAccessAccount.setDescription('Access account, the account for web login to access ispro')
isConfigTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 16), IsproEnuTempUnit()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigTemperatureUnit.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigTemperatureUnit.setDescription('The temperature unit of the system, can be Celsius or Fahrenheit')
isConfigDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 2, 17), IsproEnuDateFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isConfigDateFormat.setStatus('mandatory')
if mibBuilder.loadTexts: isConfigDateFormat.setDescription('The date format of the system, can be dd/mm/yyyy or mm/dd/yyyy')
isDeviceMonitorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: isDeviceMonitorTemperatureTable.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorTemperatureTable.setDescription('The temperature monitoring table, to provides overall status of temperature.')
isDeviceMonitorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceMonitorTemperatureIndex"))
if mibBuilder.loadTexts: isDeviceMonitorTemperatureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorTemperatureEntry.setDescription('The temperature monitoring table, to provides overall status of temperature.')
isDeviceMonitorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorTemperatureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorTemperatureIndex.setDescription('The index to a temperature entry.')
isDeviceMonitorTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorTemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorTemperatureName.setDescription('The temperature sensor name.')
isDeviceMonitorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorTemperature.setDescription('The temperature of sensor on device Ispro, the unit is 0.01 degree.')
isDeviceMonitorTemperatureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 1, 1, 4), IsproEnuThresholdStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorTemperatureAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorTemperatureAlarm.setDescription('The status of temperature sensor in Ispro.')
isDeviceMonitorHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2), )
if mibBuilder.loadTexts: isDeviceMonitorHumidityTable.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorHumidityTable.setDescription('The humidity monitoring table, to provides overall status of humidity.')
isDeviceMonitorHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceMonitorHumidityIndex"))
if mibBuilder.loadTexts: isDeviceMonitorHumidityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorHumidityEntry.setDescription('The humidity monitoring table, to provides overall status of humidity.')
isDeviceMonitorHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorHumidityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorHumidityIndex.setDescription('The index to a humidity entry.')
isDeviceMonitorHumidityName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorHumidityName.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorHumidityName.setDescription('The humidity sensor name.')
isDeviceMonitorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorHumidity.setDescription('The humidity of sensor on device Ispro, the unit is 0.01 %.')
isDeviceMonitorHumidityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 2, 1, 4), IsproEnuThresholdStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorHumidityAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorHumidityAlarm.setDescription('The status of humidity sensor in Ispro.')
isDeviceMonitorDigitalInTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3), )
if mibBuilder.loadTexts: isDeviceMonitorDigitalInTable.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorDigitalInTable.setDescription('The digital input monitoring table, to provides overall status of digital input.')
isDeviceMonitorDigitalInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceMonitorDigitalInIndex"))
if mibBuilder.loadTexts: isDeviceMonitorDigitalInEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorDigitalInEntry.setDescription('The digital input monitoring table, to provides overall status of digital input.')
isDeviceMonitorDigitalInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorDigitalInIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorDigitalInIndex.setDescription('The index to a digital input entry.')
isDeviceMonitorDigitalInName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorDigitalInName.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorDigitalInName.setDescription('The digital input sensor name.')
isDeviceMonitorDigitalIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1, 3), IsproEnuDigitalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorDigitalIn.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorDigitalIn.setDescription('The digital input of sensor on device Ispro.')
isDeviceMonitorDigitalInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 1, 3, 1, 4), IsproTriggerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceMonitorDigitalInAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceMonitorDigitalInAlarm.setDescription('The status of digital alarm sensor.')
isDeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: isDeviceConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTable.setDescription('The device configuration table.')
isDeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceConfigIndex"))
if mibBuilder.loadTexts: isDeviceConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigEntry.setDescription('The device configuration table.')
isDeviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigIndex.setDescription('The index to a sensor entry.')
isDeviceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigName.setDescription('The name of sensor device.')
isDeviceConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1, 3), IsproEnuSensorState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigState.setDescription('The setup of device type.')
isDeviceConfigDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 1, 1, 4), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigDisplay.setDescription('Enable or disable of displaying this sensor in Comprehensive webpage.')
isDeviceConfigTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2), )
if mibBuilder.loadTexts: isDeviceConfigTemperatureTable.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureTable.setDescription('The temperature configuration table of Device.')
isDeviceConfigTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceConfigTemperatureIndex"))
if mibBuilder.loadTexts: isDeviceConfigTemperatureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureEntry.setDescription('The sensor configuration table of Device.')
isDeviceConfigTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceConfigTemperatureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureIndex.setDescription('The index to a temperature device entry.')
isDeviceConfigTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureName.setDescription('The temperature sensor name.')
isDeviceConfigTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 6500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowWarning.setDescription('The set point to trigger low warning alarm. the unit is 0.01 degree.')
isDeviceConfigTemperatureLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 6500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowCritical.setDescription('The threshold to trigger low critical alarm. the unit is 0.01 degree.')
isDeviceConfigTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 6500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighWarning.setDescription('The threshold to trigger high warning alarm. the unit is 0.01 degree.')
isDeviceConfigTemperatureHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1500, 6500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighCritical.setDescription('The threshold to trigger high critical alarm. the unit is 0.01 degree.')
isDeviceConfigTemperatureHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureHysteresis.setDescription('The set value to prevent too many alarms when temperature is hovering around the set threshold. The unit is 0.01')
isDeviceConfigTemperatureCalibration = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 8), IsproEnuTempCalibration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureCalibration.setDescription('The set value to get the correct temperature according to your reference temperature.')
isDeviceConfigTemperatureLowWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 9), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowWarningState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowWarningState.setDescription('Enable/disable the set point to trigger low warning alarm.')
isDeviceConfigTemperatureLowCriticalState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 10), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowCriticalState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureLowCriticalState.setDescription('Enable/disable the set point to trigger low critical alarm.')
isDeviceConfigTemperatureHighWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 11), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighWarningState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighWarningState.setDescription('Enable/disable the set point to trigger high warning alarm.')
isDeviceConfigTemperatureHighCriticalState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 12), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighCriticalState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureHighCriticalState.setDescription('Enable/disable the set point to trigger high critical alarm.')
isDeviceConfigTemperatureEventDO = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 2, 1, 13), IsproEnuDO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigTemperatureEventDO.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigTemperatureEventDO.setDescription('Set the trigger action of temperature events. If event asserted, this will invert the digital output #1 or #2.')
isDeviceConfigHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3), )
if mibBuilder.loadTexts: isDeviceConfigHumidityTable.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityTable.setDescription('The humidity configuration table of Device.')
isDeviceConfigHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceConfigHumidityIndex"))
if mibBuilder.loadTexts: isDeviceConfigHumidityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityEntry.setDescription('The humidity configuration table of Device.')
isDeviceConfigHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceConfigHumidityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityIndex.setDescription('The index to a humidity device entry.')
isDeviceConfigHumidityName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityName.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityName.setDescription('The humidity sensor name.')
isDeviceConfigHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityLowWarning.setDescription('The set point to trigger low warning alarm. the unit is 0.01 %.')
isDeviceConfigHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityLowCritical.setDescription('The threshold to trigger low critical alarm. the unit is 0.01 %.')
isDeviceConfigHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityHighWarning.setDescription('The threshold to trigger high warning alarm. the unit is 0.01 %.')
isDeviceConfigHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 9500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityHighCritical.setDescription('The threshold to trigger high critical alarm. the unit is 0.01 %.')
isDeviceConfigHumidityHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityHysteresis.setDescription('The set value to prevent too many alarms when Humidity is hovering around the set threshold. The unit is 0.01')
isDeviceConfigHumidityCalibration = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 8), IsproEnuHumidityCalibration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityCalibration.setDescription('The set value to get the correct temperature according to your reference temperature.')
isDeviceConfigHumidityLowWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 9), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityLowWarningState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityLowWarningState.setDescription('Enable/disable the set point to trigger low warning alarm.')
isDeviceConfigHumidityLowCriticalState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 10), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityLowCriticalState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityLowCriticalState.setDescription('Enable/disable the set point to trigger low critical alarm.')
isDeviceConfigHumidityHighWarningState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 11), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHighWarningState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityHighWarningState.setDescription('Enable/disable the set point to trigger high warning alarm.')
isDeviceConfigHumidityHighCriticalState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 12), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityHighCriticalState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityHighCriticalState.setDescription('Enable/disable the set point to trigger high critical alarm.')
isDeviceConfigHumidityEventDO = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 3, 1, 13), IsproEnuDO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigHumidityEventDO.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigHumidityEventDO.setDescription('Set the trigger action of humidity events. If event asserted, this will invert the digital output #1 or #2.')
isDeviceConfigDigitalInTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4), )
if mibBuilder.loadTexts: isDeviceConfigDigitalInTable.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigDigitalInTable.setDescription('The digital input configuration table of Device.')
isDeviceConfigDigitalInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceConfigDigitalInIndex"))
if mibBuilder.loadTexts: isDeviceConfigDigitalInEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigDigitalInEntry.setDescription('The digital input configuration table of Device.')
isDeviceConfigDigitalInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceConfigDigitalInIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigDigitalInIndex.setDescription('The index to a digital input device entry.')
isDeviceConfigDigitalInName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDigitalInName.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigDigitalInName.setDescription('The name of digital input.')
isDeviceConfigDigitalInState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 3), IsproEnuAlarmState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDigitalInState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigDigitalInState.setDescription('Setup the signal type to trigger alarm.')
isDeviceConfigDigitalInHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDigitalInHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigDigitalInHysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
isDeviceConfigDigitalInEventDO = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 4, 1, 5), IsproEnuDO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceConfigDigitalInEventDO.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceConfigDigitalInEventDO.setDescription('Set the trigger action of digital alarm #1 events. If event asserted, this will invert the digital output #1 or #2.')
isDeviceDigitalOutTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5), )
if mibBuilder.loadTexts: isDeviceDigitalOutTable.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceDigitalOutTable.setDescription('The configuration table of Device digital output.')
isDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceID.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceID.setDescription('The device board id.')
isDeviceDigitalOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1), ).setIndexNames((0, "ISPRO-MIB", "isDeviceDigitalOutIndex"))
if mibBuilder.loadTexts: isDeviceDigitalOutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceDigitalOutEntry.setDescription('The configuration table of Device digital output.')
isDeviceDigitalOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDeviceDigitalOutIndex.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceDigitalOutIndex.setDescription('The index is 1 and 2, it maps to digital output 1 and 2.')
isDeviceDigitalOutStartState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1, 2), IsproEnuOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceDigitalOutStartState.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceDigitalOutStartState.setDescription('Turn power on/off specific digital output when system start up.')
isDeviceDigitalOutEventAction = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1, 3), IsproEnuEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceDigitalOutEventAction.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceDigitalOutEventAction.setDescription('If select yes, it will invert the current status of specific digital output when Ispro event occurred.')
isDeviceDigitalOutManualControl = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 1, 3, 2, 5, 1, 4), IsproEnuTurnOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isDeviceDigitalOutManualControl.setStatus('mandatory')
if mibBuilder.loadTexts: isDeviceDigitalOutManualControl.setDescription('Invert current status of specific digital output manually.')
isTrapsDescription = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isTrapsDescription.setStatus('mandatory')
if mibBuilder.loadTexts: isTrapsDescription.setDescription('The description of current trap')
mibBuilder.exportSymbols("ISPRO-MIB", isDeviceConfigHumidityLowWarningState=isDeviceConfigHumidityLowWarningState, isDeviceMonitorTemperature=isDeviceMonitorTemperature, isDeviceMonitorDigitalInIndex=isDeviceMonitorDigitalInIndex, isDeviceConfigTemperatureEventDO=isDeviceConfigTemperatureEventDO, isDeviceDigitalOutIndex=isDeviceDigitalOutIndex, isDeviceConfigHumidityLowCriticalState=isDeviceConfigHumidityLowCriticalState, IsproEnuPresent=IsproEnuPresent, IsproEnuTempUnit=IsproEnuTempUnit, isIdentManufacturer=isIdentManufacturer, ispro=ispro, IsproEnuSensorType=IsproEnuSensorType, isConfigTrapRetryTime=isConfigTrapRetryTime, product=product, isDeviceMonitorTemperatureTable=isDeviceMonitorTemperatureTable, isDeviceConfigDigitalInHysteresis=isDeviceConfigDigitalInHysteresis, isIdentName=isIdentName, isConfigNetwork=isConfigNetwork, isConfigResetToDefault=isConfigResetToDefault, isDeviceConfigHumidityCalibration=isDeviceConfigHumidityCalibration, isReceiverDescription=isReceiverDescription, isDeviceConfigHumidityHighWarningState=isDeviceConfigHumidityHighWarningState, IsproEnuSensorState=IsproEnuSensorState, isDeviceConfigTemperatureHysteresis=isDeviceConfigTemperatureHysteresis, isConfigDateFormat=isConfigDateFormat, isDeviceConfigTemperatureLowWarning=isDeviceConfigTemperatureLowWarning, IsproEnuEnable=IsproEnuEnable, isAccessControlMode=isAccessControlMode, IsproEnuAccess=IsproEnuAccess, isReceiverSeverityLevel=isReceiverSeverityLevel, isDeviceConfigHumidityName=isDeviceConfigHumidityName, isDeviceMonitorHumidity=isDeviceMonitorHumidity, isDeviceConfigTemperatureLowCritical=isDeviceConfigTemperatureLowCritical, isDeviceDigitalOutEventAction=isDeviceDigitalOutEventAction, IsproTriggerStatus=IsproTriggerStatus, isDeviceConfigEntry=isDeviceConfigEntry, isDeviceConfigHumidityEventDO=isDeviceConfigHumidityEventDO, isConfigSnmpPortNumber=isConfigSnmpPortNumber, IsproEnuHumidityCalibration=IsproEnuHumidityCalibration, isConfigTelnet=isConfigTelnet, isConfigHistoryLogFrequency=isConfigHistoryLogFrequency, IsproEnuReset=IsproEnuReset, isAccessIndex=isAccessIndex, isConfigRefreshRate=isConfigRefreshRate, isDevice=isDevice, isConfigMibVersion=isConfigMibVersion, isDeviceMonitorDigitalInName=isDeviceMonitorDigitalInName, isDeviceConfigHumidityLowCritical=isDeviceConfigHumidityLowCritical, isDeviceConfigDigitalInTable=isDeviceConfigDigitalInTable, isDeviceMonitorTemperatureIndex=isDeviceMonitorTemperatureIndex, isReceiverCommunityString=isReceiverCommunityString, isConfigGateway=isConfigGateway, isConfigTrapReceiverTable=isConfigTrapReceiverTable, isDeviceConfigName=isDeviceConfigName, isDeviceMonitorHumidityAlarm=isDeviceMonitorHumidityAlarm, isConfigDayLightSaving=isConfigDayLightSaving, isDeviceConfigTemperatureHighCritical=isDeviceConfigTemperatureHighCritical, isDeviceConfigDigitalInName=isDeviceConfigDigitalInName, isDeviceConfigHumidityEntry=isDeviceConfigHumidityEntry, isDeviceMonitor=isDeviceMonitor, isConfig=isConfig, isObjects=isObjects, isAccessAccount=isAccessAccount, isDeviceConfigDigitalInIndex=isDeviceConfigDigitalInIndex, isConfigTrapReceiverEntry=isConfigTrapReceiverEntry, isConfigTftpState=isConfigTftpState, isDeviceMonitorTemperatureName=isDeviceMonitorTemperatureName, isDeviceID=isDeviceID, isConfigConfigurationLog=isConfigConfigurationLog, isDeviceConfigTable=isDeviceConfigTable, isDeviceConfigTemperatureLowWarningState=isDeviceConfigTemperatureLowWarningState, isDeviceConfigTemperatureHighWarningState=isDeviceConfigTemperatureHighWarningState, IsproEnuHighLow=IsproEnuHighLow, isConfigTelnetPortNumber=isConfigTelnetPortNumber, IsproEnuSeverity=IsproEnuSeverity, isDeviceMonitorTemperatureEntry=isDeviceMonitorTemperatureEntry, isReceiverAddr=isReceiverAddr, isDeviceMonitorDigitalInTable=isDeviceMonitorDigitalInTable, isConfigHttpSecurity=isConfigHttpSecurity, isReceiverIndex=isReceiverIndex, isDeviceMonitorDigitalInEntry=isDeviceMonitorDigitalInEntry, isConfigExtHistoryLogFrequency=isConfigExtHistoryLogFrequency, isConfigIpAddress=isConfigIpAddress, isDeviceMonitorDigitalIn=isDeviceMonitorDigitalIn, isConfigNtpIpAddress=isConfigNtpIpAddress, isTrapsDescription=isTrapsDescription, isDeviceConfigHumidityHighWarning=isDeviceConfigHumidityHighWarning, isIdentAgentSoftwareVersion=isIdentAgentSoftwareVersion, isConfigTrapAckSignature=isConfigTrapAckSignature, isDeviceMonitorTemperatureAlarm=isDeviceMonitorTemperatureAlarm, isDeviceDigitalOutEntry=isDeviceDigitalOutEntry, isDeviceConfigTemperatureTable=isDeviceConfigTemperatureTable, isConfigLogType=isConfigLogType, isConfigAccessControlTable=isConfigAccessControlTable, webAppliance=webAppliance, isConfigHttpState=isConfigHttpState, isDeviceDigitalOutStartState=isDeviceDigitalOutStartState, isConfigTimeFromNtp=isConfigTimeFromNtp, isDeviceConfigHumidityIndex=isDeviceConfigHumidityIndex, IsproEnuAlarmState=IsproEnuAlarmState, jacarta=jacarta, isConfigLog=isConfigLog, isConfigSnmpState=isConfigSnmpState, isDeviceDigitalOutManualControl=isDeviceDigitalOutManualControl, IsproEnuDateFormat=IsproEnuDateFormat, isDeviceMonitorDigitalInAlarm=isDeviceMonitorDigitalInAlarm, isDeviceConfigHumidityLowWarning=isDeviceConfigHumidityLowWarning, IsproEnuTurnOnOff=IsproEnuTurnOnOff, isDeviceConfigTemperatureName=isDeviceConfigTemperatureName, isDeviceConfigTemperatureHighWarning=isDeviceConfigTemperatureHighWarning, isDeviceConfigHumidityHighCriticalState=isDeviceConfigHumidityHighCriticalState, isConfigHttp=isConfigHttp, isDeviceConfigTemperatureHighCriticalState=isDeviceConfigTemperatureHighCriticalState, isDeviceConfigDigitalInEntry=isDeviceConfigDigitalInEntry, isDeviceConfigHumidityTable=isDeviceConfigHumidityTable, isDeviceConfigDisplay=isDeviceConfigDisplay, isAccessCommunityString=isAccessCommunityString, isConfigTrapRetryCount=isConfigTrapRetryCount, isDeviceMonitorHumidityTable=isDeviceMonitorHumidityTable, isAccessControlAddr=isAccessControlAddr, isConfigDhcpState=isConfigDhcpState, isConfigTemperatureUnit=isConfigTemperatureUnit, isDeviceConfigTemperatureLowCriticalState=isDeviceConfigTemperatureLowCriticalState, isConfigDateTime=isConfigDateTime, isDeviceDigitalOutTable=isDeviceDigitalOutTable, isTraps=isTraps, isDeviceConfigHumidityHighCritical=isDeviceConfigHumidityHighCritical, IsproEnuOnOff=IsproEnuOnOff, isDeviceConfigDigitalInEventDO=isDeviceConfigDigitalInEventDO, isDeviceConfig=isDeviceConfig, isDeviceMonitorHumidityEntry=isDeviceMonitorHumidityEntry, isConfigSnmp=isConfigSnmp, isConfigNtpTimeZone=isConfigNtpTimeZone, isDeviceConfigState=isDeviceConfigState, isConfigDate=isConfigDate, isDeviceConfigIndex=isDeviceConfigIndex, isDeviceConfigTemperatureEntry=isDeviceConfigTemperatureEntry, IsproEnuTempCalibration=IsproEnuTempCalibration, isIdentModel=isIdentModel, IsproEnuDigitalStatus=IsproEnuDigitalStatus, isDeviceMonitorHumidityName=isDeviceMonitorHumidityName, IsproEnuTimeZone=IsproEnuTimeZone, isDeviceConfigTemperatureCalibration=isDeviceConfigTemperatureCalibration, isDeviceConfigHumidityHysteresis=isDeviceConfigHumidityHysteresis, isConfigTelnetState=isConfigTelnetState, IsproEnuThresholdStatus=IsproEnuThresholdStatus, isConfigAccessControlEntry=isConfigAccessControlEntry, isConfigRestart=isConfigRestart, IsproEnuDO=IsproEnuDO, isConfigHttpPortNumber=isConfigHttpPortNumber, isConfigTime=isConfigTime, isConfigTrap=isConfigTrap, isConfigControl=isConfigControl, isDeviceConfigDigitalInState=isDeviceConfigDigitalInState, isIdent=isIdent, isDeviceMonitorHumidityIndex=isDeviceMonitorHumidityIndex, isDeviceConfigTemperatureIndex=isDeviceConfigTemperatureIndex, isConfigSubnetMask=isConfigSubnetMask, isConfigPingState=isConfigPingState, IsproEnuRestart=IsproEnuRestart, IsproLogType=IsproLogType)
