#
# PySNMP MIB module SWAPCOM-SNMP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWAPCOM-SNMP
# Produced by pysmi-0.3.4 at Wed May  1 15:12:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, enterprises, NotificationType, Bits, Unsigned32, IpAddress, Counter64, Integer32, TimeTicks, MibIdentifier, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "enterprises", "NotificationType", "Bits", "Unsigned32", "IpAddress", "Counter64", "Integer32", "TimeTicks", "MibIdentifier", "Gauge32", "ObjectIdentity")
RowStatus, DisplayString, TestAndIncr, StorageType, TruthValue, MacAddress, DateAndTime, TextualConvention, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TestAndIncr", "StorageType", "TruthValue", "MacAddress", "DateAndTime", "TextualConvention", "TimeInterval")
swapcom = ModuleIdentity((1, 3, 6, 1, 4, 1, 11308))
swapcom.setRevisions(('2005-07-13 18:17',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: swapcom.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: swapcom.setLastUpdated('200507131817Z')
if mibBuilder.loadTexts: swapcom.setOrganization('SWAPCOM')
if mibBuilder.loadTexts: swapcom.setContactInfo('support@swapcom.fr')
if mibBuilder.loadTexts: swapcom.setDescription('SWAPCOM SNMP MIB')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2))
platform = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1))
notificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 1))
defaultNotification = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 1, 1))
if mibBuilder.loadTexts: defaultNotification.setStatus('current')
if mibBuilder.loadTexts: defaultNotification.setDescription('Use to send the notifications whose trap type is not defined')
notificationMessage = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 1, 2), DisplayString())
if mibBuilder.loadTexts: notificationMessage.setStatus('current')
if mibBuilder.loadTexts: notificationMessage.setDescription('This scalar leaf node would be present as one of the varbinds in the Trap to hold the notification message')
platformPlatformId = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformPlatformId.setStatus('current')
if mibBuilder.loadTexts: platformPlatformId.setDescription('')
platformPlatformStatus = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("platform-initializing", 0), ("platform-initialized", 1), ("domains-initializing", 2), ("started", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformPlatformStatus.setStatus('current')
if mibBuilder.loadTexts: platformPlatformStatus.setDescription('')
platformStart = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 4))
if mibBuilder.loadTexts: platformStart.setStatus('current')
if mibBuilder.loadTexts: platformStart.setDescription('This notification is sent when the platform is started')
platformStop = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 5))
if mibBuilder.loadTexts: platformStop.setStatus('current')
if mibBuilder.loadTexts: platformStop.setDescription('This notification is sent when the platform stops')
platformVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6))
platformVersionProductName = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVersionProductName.setStatus('current')
if mibBuilder.loadTexts: platformVersionProductName.setDescription('')
platformVersionProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVersionProductVersion.setStatus('current')
if mibBuilder.loadTexts: platformVersionProductVersion.setDescription('')
platformVersionBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVersionBuildNumber.setStatus('current')
if mibBuilder.loadTexts: platformVersionBuildNumber.setDescription('')
platformVersionBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVersionBuildDate.setStatus('current')
if mibBuilder.loadTexts: platformVersionBuildDate.setDescription('')
applicationVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7))
applicationVersionProductName = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationVersionProductName.setStatus('current')
if mibBuilder.loadTexts: applicationVersionProductName.setDescription('')
applicationVersionProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationVersionProductVersion.setStatus('current')
if mibBuilder.loadTexts: applicationVersionProductVersion.setDescription('')
applicationVersionBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationVersionBuildNumber.setStatus('current')
if mibBuilder.loadTexts: applicationVersionBuildNumber.setDescription('')
applicationVersionBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationVersionBuildDate.setStatus('current')
if mibBuilder.loadTexts: applicationVersionBuildDate.setDescription('')
logger = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8))
unknownLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 1))
if mibBuilder.loadTexts: unknownLog.setStatus('current')
if mibBuilder.loadTexts: unknownLog.setDescription('This notification is sent when a log with unknown level is sent')
infoLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 2))
if mibBuilder.loadTexts: infoLog.setStatus('current')
if mibBuilder.loadTexts: infoLog.setDescription('This notification is sent when a log with INFO level is sent')
warnLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 3))
if mibBuilder.loadTexts: warnLog.setStatus('current')
if mibBuilder.loadTexts: warnLog.setDescription('This notification is sent when a log with WARN level is sent')
errorLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 4))
if mibBuilder.loadTexts: errorLog.setStatus('current')
if mibBuilder.loadTexts: errorLog.setDescription('This notification is sent when a log with ERROR level is sent')
fatalLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 5))
if mibBuilder.loadTexts: fatalLog.setStatus('current')
if mibBuilder.loadTexts: fatalLog.setDescription('This notification is sent when a log with FATAL level is sent')
remotePlatform = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9))
remotePlatformTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1), )
if mibBuilder.loadTexts: remotePlatformTable.setStatus('current')
if mibBuilder.loadTexts: remotePlatformTable.setDescription('Remote platform table')
remotePlatformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1, 1), ).setIndexNames((0, "SWAPCOM-SNMP", "remotePlatformPlatformId"))
if mibBuilder.loadTexts: remotePlatformEntry.setStatus('current')
if mibBuilder.loadTexts: remotePlatformEntry.setDescription('The entry for remotePlatformTable')
remotePlatformPlatformId = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformId.setStatus('current')
if mibBuilder.loadTexts: remotePlatformPlatformId.setDescription('')
remotePlatformPlatformProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformProtocol.setStatus('current')
if mibBuilder.loadTexts: remotePlatformPlatformProtocol.setDescription('')
remotePlatformPlatformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformStatus.setStatus('current')
if mibBuilder.loadTexts: remotePlatformPlatformStatus.setDescription('')
remotePlatformUp = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 2))
if mibBuilder.loadTexts: remotePlatformUp.setStatus('current')
if mibBuilder.loadTexts: remotePlatformUp.setDescription('This notification is sent when a remote platform is going to be up')
remotePlatformDown = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 3))
if mibBuilder.loadTexts: remotePlatformDown.setStatus('current')
if mibBuilder.loadTexts: remotePlatformDown.setDescription('This notification is sent when a remote platform is going to be down')
mibBuilder.exportSymbols("SWAPCOM-SNMP", notificationGroup=notificationGroup, platformPlatformId=platformPlatformId, warnLog=warnLog, unknownLog=unknownLog, dod=dod, platformStop=platformStop, platformVersionProductName=platformVersionProductName, platformStart=platformStart, remotePlatform=remotePlatform, remotePlatformUp=remotePlatformUp, notificationMessage=notificationMessage, remotePlatformEntry=remotePlatformEntry, remotePlatformDown=remotePlatformDown, applicationVersionBuildNumber=applicationVersionBuildNumber, applicationVersionBuildDate=applicationVersionBuildDate, defaultNotification=defaultNotification, errorLog=errorLog, applicationVersionProductName=applicationVersionProductName, platformPlatformStatus=platformPlatformStatus, enterprises=enterprises, remotePlatformPlatformStatus=remotePlatformPlatformStatus, internet=internet, applicationVersion=applicationVersion, fatalLog=fatalLog, PYSNMP_MODULE_ID=swapcom, private=private, snmp=snmp, remotePlatformTable=remotePlatformTable, platformVersionBuildDate=platformVersionBuildDate, logger=logger, platformVersion=platformVersion, remotePlatformPlatformId=remotePlatformPlatformId, org=org, applicationVersionProductVersion=applicationVersionProductVersion, platform=platform, platformVersionBuildNumber=platformVersionBuildNumber, infoLog=infoLog, remotePlatformPlatformProtocol=remotePlatformPlatformProtocol, swapcom=swapcom, platformVersionProductVersion=platformVersionProductVersion)
