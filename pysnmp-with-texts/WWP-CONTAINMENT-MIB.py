#
# PySNMP MIB module WWP-CONTAINMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-CONTAINMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, iso, TimeTicks, Counter64, ModuleIdentity, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, MibIdentifier, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "iso", "TimeTicks", "Counter64", "ModuleIdentity", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "MibIdentifier", "Gauge32", "ObjectIdentity")
MacAddress, TruthValue, DisplayString, RowStatus, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "RowStatus", "TextualConvention", "DateAndTime")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpContainmentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 55))
if mibBuilder.loadTexts: wwpContainmentMIB.setLastUpdated('200506091700Z')
if mibBuilder.loadTexts: wwpContainmentMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpContainmentMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpContainmentMIB.setDescription('This MIB contains objects that control packet containment within the device. This MIB deals with packet containment on a per-port basis using Link Shaping containment mechanisms.')
wwpContainmentMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1))
wwpContainment = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1))
wwpContainmentMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 55, 2))
wwpContainmentMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 55, 2, 0))
wwpContainmentMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 55, 3))
wwpContainmentMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 55, 3, 1))
wwpContainmentMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 55, 3, 2))
wwpContainmentBroadcastTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 1), )
if mibBuilder.loadTexts: wwpContainmentBroadcastTable.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentBroadcastTable.setDescription('The (conceptual) table listing the broadcast containment settings per port.')
wwpContainmentBroadcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 1, 1), ).setIndexNames((0, "WWP-CONTAINMENT-MIB", "wwpContainmentBroadcastPortId"))
if mibBuilder.loadTexts: wwpContainmentBroadcastEntry.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentBroadcastEntry.setDescription('An entry (conceptual row) in the wwpContainmentBroadcastTable.')
wwpContainmentBroadcastPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpContainmentBroadcastPortId.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentBroadcastPortId.setDescription('The Id of the port for which this entry contains the containment settings. This value corresponds to the same portId for this port defined in the object wwpPortStatsPortId as defined in the MIB wwpPortStatsMIB.')
wwpContainmentBroadcastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("monitor", 2), ("throttle", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpContainmentBroadcastAction.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentBroadcastAction.setDescription('This value defines the action that is associated with the broadcast containment mechanism for this port. When this object contains the value of disable(1), then all broadcast containment activity for this port is disabled. When this object contains the value of monitor(1), then the broadcast containment mechanism will not inhibit packet forwarding on this port while the broadcast containment mechanism is engaged. This setting is useful for monitoring SNMP traps that may be generated by the broadcast containment mechanism. When this object contains the value of throttle(2), then the broadcast containment mechanism will inhibit packet forwarding on this port while the broadcast containment mechanism is engaged.')
wwpContainmentBroadcastHighMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpContainmentBroadcastHighMark.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentBroadcastHighMark.setDescription('The value which must be reached or exceeded to trigger the engagement of the broadcast containment mechanism. To prevent containment engagement lockup, the broadcast containment mechanism will not engage if the value of this is less than or equal to the value specified in wwpContainmentBroadcastLowMark. This value refers to the number of ingressing frames-per-second.')
wwpContainmentBroadcastLowMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpContainmentBroadcastLowMark.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentBroadcastLowMark.setDescription('The value which must be reached or preceded to release the engagement of the broadcast containment mechanism. This value refers to the number of ingressing frames-per-second.')
wwpContainmentBroadcastTrapsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpContainmentBroadcastTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentBroadcastTrapsEnable.setDescription('Enables or disables the traps associated with the containment mechanism for this port. When set to true, a trap will be sent when the broadcast containment mechanism becomes engaged and a trap will be sent when the broadcast containment mechanism becomes disengaged. When set to false, no containment traps will be sent from the broadcast containment mechanism for this port.')
wwpContainmentBroadcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("starting", 2), ("engaged", 3), ("stopping", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpContainmentBroadcastState.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentBroadcastState.setDescription('This value indicates the present state of the broadcast containment mechanism within the device. idle(1) - The broadcast containment is presently disengaged. starting(2) - The broadcast containment mechanism has determined that the conditions warrant the engagement of the broadcast containment mechanism. This is a momentary state which may exist during the transition from the idle state to the engaged state. engaged(3) - The broadcast containment mechanism is currently engaged. The action defined by wwpContainmentBroadcastAction is presently in effect. stopping(4) - The broadcast containment mechanism has determined that the conditions warrant the disengagement of the broadcast containment mechanism. This is a momentary state which may exist during the transition from the engaged state to the idle state.')
wwpContainmentMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 2), )
if mibBuilder.loadTexts: wwpContainmentMulticastTable.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentMulticastTable.setDescription('The (conceptual) table listing the multicast containment settings per port.')
wwpContainmentMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 2, 1), ).setIndexNames((0, "WWP-CONTAINMENT-MIB", "wwpContainmentMulticastPortId"))
if mibBuilder.loadTexts: wwpContainmentMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentMulticastEntry.setDescription('An entry (conceptual row) in the wwpContainmentMulticastTable.')
wwpContainmentMulticastPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpContainmentMulticastPortId.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentMulticastPortId.setDescription('The Id of the port for which this entry contains the containment settings. This value corresponds to the same portId for this port defined in the object wwpPortStatsPortId as defined in the MIB wwpPortStatsMIB.')
wwpContainmentMulticastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("monitor", 2), ("throttle", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpContainmentMulticastAction.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentMulticastAction.setDescription('This value defines the action that is associated with the multicast containment mechanism for this port. When this object contains the value of disable(1), then all multicast containment activity for this port is disabled. When this object contains the value of monitor(1), then the multicast containment mechanism will not inhibit packet forwarding on this port while the multicast containment mechanism is engaged. This setting is useful for monitoring SNMP traps that may be generated by the multicast containment mechanism. When this object contains the value of throttle(2), then the multicast containment mechanism will inhibit packet forwarding on this port while the multicast containment mechanism is engaged.')
wwpContainmentMulticastHighMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpContainmentMulticastHighMark.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentMulticastHighMark.setDescription('The value which must be reached or exceeded to trigger the engagement of the multicast containment mechanism. To prevent containment engagement lockup, the multicast containment mechanism will not engage if the value of this is less than or equal to the value specified in wwpContainmentMulticastLowMark. This value refers to the number of ingressing frames-per-second.')
wwpContainmentMulticastLowMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpContainmentMulticastLowMark.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentMulticastLowMark.setDescription('The value which must be reached or preceded to release the engagement of the multicast containment mechanism. This value refers to the number of ingressing frames-per-second.')
wwpContainmentMulticastTrapsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpContainmentMulticastTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentMulticastTrapsEnable.setDescription('Enables or disables the traps associated with the containment mechanism for this port. When set to true, a trap will be sent when the multicast containment mechanism becomes engaged and a trap will be sent when the multicast containment mechanism becomes disengaged. When set to false, no containment traps will be sent from the multicast containment mechanism for this port.')
wwpContainmentMulticastState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 55, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("starting", 2), ("engaged", 3), ("stopping", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpContainmentMulticastState.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentMulticastState.setDescription('This value indicates the present state of the multicast containment mechanism within the device. idle(1) - The multicast containment is presently disengaged. starting(2) - The multicast containment mechanism has determined that the conditions warrant the engagement of the multicast containment mechanism. This is a momentary state which may exist during the transition from the idle state to the engaged state. engaged(3) - The multicast containment mechanism is currently engaged. The action defined by wwpContainmentMulticastAction is presently in effect. stopping(4) - The multicast containment mechanism has determined that the conditions warrant the disengagement of the multicast containment mechanism. This is a momentary state which may exist during the transition from the engaged state to the idle state.')
wwpContainmentNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 55, 2, 0, 1)).setObjects(("WWP-CONTAINMENT-MIB", "wwpContainmentBroadcastState"), ("WWP-CONTAINMENT-MIB", "wwpContainmentMulticastState"))
if mibBuilder.loadTexts: wwpContainmentNotification.setStatus('current')
if mibBuilder.loadTexts: wwpContainmentNotification.setDescription('A wwpContainmentNotification is sent when the wwpContainmentBroadcastState is changed or when the wwpContainmentMulticastState is changed.')
mibBuilder.exportSymbols("WWP-CONTAINMENT-MIB", wwpContainmentNotification=wwpContainmentNotification, wwpContainmentMulticastHighMark=wwpContainmentMulticastHighMark, wwpContainmentMulticastTable=wwpContainmentMulticastTable, wwpContainmentMulticastLowMark=wwpContainmentMulticastLowMark, wwpContainmentBroadcastLowMark=wwpContainmentBroadcastLowMark, PYSNMP_MODULE_ID=wwpContainmentMIB, wwpContainmentBroadcastPortId=wwpContainmentBroadcastPortId, wwpContainmentMIBObjects=wwpContainmentMIBObjects, wwpContainmentMIBNotifications=wwpContainmentMIBNotifications, wwpContainmentMulticastPortId=wwpContainmentMulticastPortId, wwpContainmentBroadcastTable=wwpContainmentBroadcastTable, wwpContainmentMulticastEntry=wwpContainmentMulticastEntry, wwpContainmentMulticastState=wwpContainmentMulticastState, wwpContainmentMIBConformance=wwpContainmentMIBConformance, wwpContainmentMIB=wwpContainmentMIB, wwpContainmentMIBNotificationPrefix=wwpContainmentMIBNotificationPrefix, wwpContainmentBroadcastState=wwpContainmentBroadcastState, wwpContainmentBroadcastEntry=wwpContainmentBroadcastEntry, wwpContainment=wwpContainment, wwpContainmentBroadcastHighMark=wwpContainmentBroadcastHighMark, wwpContainmentMulticastTrapsEnable=wwpContainmentMulticastTrapsEnable, wwpContainmentBroadcastAction=wwpContainmentBroadcastAction, wwpContainmentMulticastAction=wwpContainmentMulticastAction, wwpContainmentBroadcastTrapsEnable=wwpContainmentBroadcastTrapsEnable, wwpContainmentMIBGroups=wwpContainmentMIBGroups, wwpContainmentMIBCompliances=wwpContainmentMIBCompliances)
