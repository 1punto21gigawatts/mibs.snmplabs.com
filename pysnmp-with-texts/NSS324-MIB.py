#
# PySNMP MIB module NSS324-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSS324-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, Gauge32, TimeTicks, iso, NotificationType, IpAddress, ObjectIdentity, Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Unsigned32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Gauge32", "TimeTicks", "iso", "NotificationType", "IpAddress", "ObjectIdentity", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

cisco = MibIdentifier((1, 3, 6, 1, 4, 1, 9))
otherEnterprises = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6))
ciscoSB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1))
nas004 = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 103))
nss = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41))
nss324 = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324))
nssAthens = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114))
nssAthens.setRevisions(('2011-03-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nssAthens.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: nssAthens.setLastUpdated('201103240000Z')
if mibBuilder.loadTexts: nssAthens.setOrganization('Cisco Small Business')
if mibBuilder.loadTexts: nssAthens.setContactInfo('Postal: 170 West Tasman Drive San Jose, CA 95134-1706 USA Website: Cisco Small Business Home <http://www.cisco.com/smb> Cisco Small Business Support Community <http://www.cisco.com/go/smallbizsupport>')
if mibBuilder.loadTexts: nssAthens.setDescription('')
storageSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1))
systemEventMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 1))
eventInformMsg = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventInformMsg.setStatus('current')
if mibBuilder.loadTexts: eventInformMsg.setDescription('Information event of NAS system.')
eventWarningMsg = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 1, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventWarningMsg.setStatus('current')
if mibBuilder.loadTexts: eventWarningMsg.setDescription('Warning event of NAS system.')
eventErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventErrorMsg.setStatus('current')
if mibBuilder.loadTexts: eventErrorMsg.setDescription('Error event of NAS system.')
systemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 10))
eventInform = NotificationType((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 10) + (0,1)).setObjects(("NSS324-MIB", "eventInformMsg"))
if mibBuilder.loadTexts: eventInform.setDescription('Info: %s')
eventWarning = NotificationType((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 10) + (0,2)).setObjects(("NSS324-MIB", "eventWarningMsg"))
if mibBuilder.loadTexts: eventWarning.setDescription('Warn: %s')
eventError = NotificationType((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 10) + (0,4)).setObjects(("NSS324-MIB", "eventErrorMsg"))
if mibBuilder.loadTexts: eventError.setDescription('Error: %s')
systemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2))
systemCPU_Usage = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 1), DisplayString()).setLabel("systemCPU-Usage").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCPU_Usage.setStatus('current')
if mibBuilder.loadTexts: systemCPU_Usage.setDescription('System CPU usage')
systemTotalMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTotalMem.setStatus('current')
if mibBuilder.loadTexts: systemTotalMem.setDescription('System total memory')
systemFreeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFreeMem.setStatus('current')
if mibBuilder.loadTexts: systemFreeMem.setDescription('System free memory')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
if mibBuilder.loadTexts: systemUptime.setDescription('The amount of time since this host was last initialized. Note that this is different from sysUpTime in the SNMPv2-MIB [RFC1907] because sysUpTime is the uptime of the network management portion of the system.')
cpu_Temperature = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 5), DisplayString()).setLabel("cpu-Temperature").setMaxAccess("readonly")
if mibBuilder.loadTexts: cpu_Temperature.setStatus('current')
if mibBuilder.loadTexts: cpu_Temperature.setDescription('CPU temperature')
systemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperature.setStatus('current')
if mibBuilder.loadTexts: systemTemperature.setDescription('System temperature')
ifNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ifNumber.setDescription('The number of network interfaces (regardless of their current state) present on this system.')
systemIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 9), )
if mibBuilder.loadTexts: systemIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemIfTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
ifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 9, 1), ).setIndexNames((0, "NSS324-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ifEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ifIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
ifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: ifDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
ifPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ifPacketsReceived.setDescription('System packets received.')
ifPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ifPacketsSent.setDescription('System packets sent.')
ifErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrorPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ifErrorPackets.setDescription('System error packets.')
hdNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hdNumber.setDescription('The number of hard disk (regardless of their current state) present on this system.')
systemHdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11), )
if mibBuilder.loadTexts: systemHdTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemHdTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
hdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11, 1), ).setIndexNames((0, "NSS324-MIB", "hdIndex"))
if mibBuilder.loadTexts: hdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
hdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdIndex.setDescription("A unique value for each hard disk. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
hdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdDescr.setStatus('mandatory')
if mibBuilder.loadTexts: hdDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
hdTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: hdTemperature.setDescription('Hard disk temperature.')
hdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hdStatus.setDescription('HDD status. 0:not availible, 1:availible.')
hdModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdModel.setStatus('mandatory')
if mibBuilder.loadTexts: hdModel.setDescription('Hard disk model.')
hdCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: hdCapacity.setDescription('Hard disk capacity.')
hdSmartInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSmartInfo.setStatus('mandatory')
if mibBuilder.loadTexts: hdSmartInfo.setDescription('Hard disk SMART information.')
modelName = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
if mibBuilder.loadTexts: modelName.setDescription('Model name')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('current')
if mibBuilder.loadTexts: hostName.setDescription('Model name')
sysFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanNumber.setDescription('The number of system fan (regardless of their current state) present on this system.')
systemFanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 15), )
if mibBuilder.loadTexts: systemFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemFanTable.setDescription('A list of interface entries. The number of entries is given by the value of sysFanNumber.')
sysFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 15, 1), ).setIndexNames((0, "NSS324-MIB", "sysFanIndex"))
if mibBuilder.loadTexts: sysFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanEntry.setDescription('An system fan entry containing objects at the subnetwork layer and below for a particular interface.')
sysFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanIndex.setDescription("A unique value for each system fan. Its value ranges between 1 and the value of sysFanNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
sysFanDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanDescr.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
sysFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanSpeed.setDescription('System fan speed.')
sysVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeNumber.setDescription('The number of system volumes (regardless of their current state) present on this system.')
systemVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 17), )
if mibBuilder.loadTexts: systemVolumeTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemVolumeTable.setDescription('A list of volume entries. The number of entries is given by the value of sysVolumeNumber.')
sysVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 17, 1), ).setIndexNames((0, "NSS324-MIB", "sysVolumeIndex"))
if mibBuilder.loadTexts: sysVolumeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeEntry.setDescription('An system volume entry')
sysVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeIndex.setDescription("A unique value for each system volume. Its value ranges between 1 and the value of sysVolumeNumber. The value for each volume must remain constant at least from one re-initialization of the entity's volume system to the next re-initialization.")
sysVolumeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeDescr.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeDescr.setDescription('A textual string containing information about the volume.')
sysVolumeFS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeFS.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeFS.setDescription('System Volume file system.')
sysVolumeTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeTotalSize.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeTotalSize.setDescription('System Volume total size.')
sysVolumeFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeFreeSize.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeFreeSize.setDescription('System Volume free size.')
sysVolumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 103, 41, 324, 114, 1, 2, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeStatus.setDescription('System Volume status.')
mibBuilder.exportSymbols("NSS324-MIB", ifNumber=ifNumber, sysVolumeTotalSize=sysVolumeTotalSize, sysVolumeIndex=sysVolumeIndex, cpu_Temperature=cpu_Temperature, hostName=hostName, nssAthens=nssAthens, systemVolumeTable=systemVolumeTable, eventErrorMsg=eventErrorMsg, systemIfTable=systemIfTable, sysFanDescr=sysFanDescr, sysVolumeNumber=sysVolumeNumber, ifPacketsSent=ifPacketsSent, ifErrorPackets=ifErrorPackets, hdNumber=hdNumber, sysVolumeFreeSize=sysVolumeFreeSize, systemCPU_Usage=systemCPU_Usage, eventInform=eventInform, ifPacketsReceived=ifPacketsReceived, hdStatus=hdStatus, systemTemperature=systemTemperature, eventWarning=eventWarning, eventInformMsg=eventInformMsg, nss=nss, ifEntry=ifEntry, sysFanEntry=sysFanEntry, eventWarningMsg=eventWarningMsg, systemInfo=systemInfo, sysVolumeFS=sysVolumeFS, systemHdTable=systemHdTable, nas004=nas004, cisco=cisco, sysVolumeStatus=sysVolumeStatus, hdTemperature=hdTemperature, DisplayString=DisplayString, sysVolumeEntry=sysVolumeEntry, ifIndex=ifIndex, sysFanNumber=sysFanNumber, sysVolumeDescr=sysVolumeDescr, hdModel=hdModel, sysFanIndex=sysFanIndex, nss324=nss324, hdDescr=hdDescr, eventError=eventError, storageSystem=storageSystem, systemTotalMem=systemTotalMem, PYSNMP_MODULE_ID=nssAthens, systemFanTable=systemFanTable, otherEnterprises=otherEnterprises, hdCapacity=hdCapacity, systemTraps=systemTraps, hdEntry=hdEntry, sysFanSpeed=sysFanSpeed, ciscoSB=ciscoSB, systemEventMsg=systemEventMsg, systemUptime=systemUptime, hdIndex=hdIndex, modelName=modelName, systemFreeMem=systemFreeMem, ifDescr=ifDescr, hdSmartInfo=hdSmartInfo)
