#
# PySNMP MIB module DLB-ATHDRV-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLB-ATHDRV-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:47:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
dlbMgmt, = mibBuilder.importSymbols("DELIBERANT-MIB", "dlbMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, iso, NotificationType, Unsigned32, TimeTicks, Counter32, Integer32, ObjectIdentity, IpAddress, Counter64, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "iso", "NotificationType", "Unsigned32", "TimeTicks", "Counter32", "Integer32", "ObjectIdentity", "IpAddress", "Counter64", "MibIdentifier", "Bits")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
dlbAthDrvStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 32761, 3, 7))
dlbAthDrvStatsMIB.setRevisions(('2008-12-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dlbAthDrvStatsMIB.setRevisionsDescriptions(('First revision.',))
if mibBuilder.loadTexts: dlbAthDrvStatsMIB.setLastUpdated('200812120000Z')
if mibBuilder.loadTexts: dlbAthDrvStatsMIB.setOrganization('Deliberant')
if mibBuilder.loadTexts: dlbAthDrvStatsMIB.setContactInfo(' Deliberant Customer Support E-mail: support@deliberant.com')
if mibBuilder.loadTexts: dlbAthDrvStatsMIB.setDescription('The Atheros Driver Statistics MIB by Deliberant.')
dlbAthDrvStatsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1))
dlbAthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1), )
if mibBuilder.loadTexts: dlbAthStatsTable.setStatus('current')
if mibBuilder.loadTexts: dlbAthStatsTable.setDescription("Atheros driver's network traffic statistics table.")
dlbAthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dlbAthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dlbAthStatsEntry.setDescription("Atheros driver's network traffic statistics table entry.")
dlbAthWatchdogTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthWatchdogTimeouts.setStatus('current')
if mibBuilder.loadTexts: dlbAthWatchdogTimeouts.setDescription('Watchdog timeouts.')
dlbAthHardwareErrorInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthHardwareErrorInterrupts.setStatus('current')
if mibBuilder.loadTexts: dlbAthHardwareErrorInterrupts.setDescription('Hardware error interrupts.')
dlbAthBeaconMissInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthBeaconMissInterrupts.setStatus('current')
if mibBuilder.loadTexts: dlbAthBeaconMissInterrupts.setDescription('Beacon miss interrupts.')
dlbAthRecvOverrunInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRecvOverrunInterrupts.setStatus('current')
if mibBuilder.loadTexts: dlbAthRecvOverrunInterrupts.setDescription('Received overrun interrupts.')
dlbAthRecvEolInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRecvEolInterrupts.setStatus('current')
if mibBuilder.loadTexts: dlbAthRecvEolInterrupts.setDescription('Received EOL interrupts.')
dlbAthTxmitUnderrunInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxmitUnderrunInterrupts.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxmitUnderrunInterrupts.setDescription('Transmission underrun interrupts.')
dlbAthTxManagementFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxManagementFrames.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxManagementFrames.setDescription('Transmitted management frames.')
dlbAthTxFramesDiscQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesDiscQueueDepth.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesDiscQueueDepth.setDescription('Transmit frames discarded due to queue depth.')
dlbAthTxFramesDiscDeviceGone = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesDiscDeviceGone.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesDiscDeviceGone.setDescription('Transmit frames discarded due to device gone.')
dlbAthTxQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxQueueFull.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxQueueFull.setDescription('Transmit queue stopped because it is full.')
dlbAthTxEncapsulationFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxEncapsulationFailed.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxEncapsulationFailed.setDescription('Transmit encapsulation failed.')
dlbAthTxFailedNoNode = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFailedNoNode.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFailedNoNode.setDescription('Transmissions failed due to no node.')
dlbAthTxFailedNoDataTxBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFailedNoDataTxBuffer.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFailedNoDataTxBuffer.setDescription('Transmissions failed due to no place in transmit buffer for data frames.')
dlbAthTxFailedNoMgtTxBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFailedNoMgtTxBuffer.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFailedNoMgtTxBuffer.setDescription('Transmissions failed due to no place in transmit buffer for management frames.')
dlbAthTxFailedTooManyRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFailedTooManyRetries.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFailedTooManyRetries.setDescription('Transmissions failed due to too many retries.')
dlbAthTxFailedFifoUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFailedFifoUnderrun.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFailedFifoUnderrun.setDescription('Transmissions failed due to FIFO underruns.')
dlbAthTxFailedXmitFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFailedXmitFiltered.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFailedXmitFiltered.setDescription('Transmissions failed due to filtered packets.')
dlbAthShortOnchipTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthShortOnchipTxRetries.setStatus('current')
if mibBuilder.loadTexts: dlbAthShortOnchipTxRetries.setDescription('Short on-chip transmission retries.')
dlbAthLongOnchipTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthLongOnchipTxRetries.setStatus('current')
if mibBuilder.loadTexts: dlbAthLongOnchipTxRetries.setDescription('Long on-chip transmission retries.')
dlbAthTxFailedBogusXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFailedBogusXmitRate.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFailedBogusXmitRate.setDescription('Transmissions failed due to bogus transmission rate.')
dlbAthTxFramesNoAckMarked = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesNoAckMarked.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesNoAckMarked.setDescription('Transmitted frames with no ACK marked.')
dlbAthTxFramesRtsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesRtsEnabled.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesRtsEnabled.setDescription('Transmitted frames with RTS enabled.')
dlbAthTxFramesCtsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesCtsEnabled.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesCtsEnabled.setDescription('Transmitted frames with CTS enabled.')
dlbAthTxFramesShortPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesShortPreamble.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesShortPreamble.setDescription('Transmitted frames with short preamble.')
dlbAthTxFramesAlternateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesAlternateRate.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesAlternateRate.setDescription('Transmitted frames with an alternate rate.')
dlbAthTxFrames11gProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFrames11gProtection.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFrames11gProtection.setDescription('Transmitted frames with 11g protection.')
dlbAthRxFailedDescOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFailedDescOverrun.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFailedDescOverrun.setDescription('Receptions failed due to desc overrun.')
dlbAthRxFailedBadCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFailedBadCrc.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFailedBadCrc.setDescription('Receptions failed due to bad CRC.')
dlbAthRxFailedFifoOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFailedFifoOverrun.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFailedFifoOverrun.setDescription('Receptions failed due to FIFO overrun.')
dlbAthRxFailedDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFailedDecryptErrors.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFailedDecryptErrors.setDescription('Receptions failed due to decryption errors.')
dlbAthRxFailedMicFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFailedMicFailure.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFailedMicFailure.setDescription('Receptions failed due to MIC failure.')
dlbAthRxFailedFrameTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFailedFrameTooShort.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFailedFrameTooShort.setDescription('Receptions failed due to frame being too short.')
dlbAthRxSetupFailedNoSkbuff = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxSetupFailedNoSkbuff.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxSetupFailedNoSkbuff.setDescription('Reception setup failed due to no space in skbuff buffer.')
dlbAthRxManagementFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxManagementFrames.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxManagementFrames.setDescription('Received management frames.')
dlbAthRxControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxControlFrames.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxControlFrames.setDescription('Received control frames.')
dlbAthNoSkbuffForBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthNoSkbuffForBeacon.setStatus('current')
if mibBuilder.loadTexts: dlbAthNoSkbuffForBeacon.setDescription('No skbuff buffer space available for beacon.')
dlbAthBeaconsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthBeaconsTransmitted.setStatus('current')
if mibBuilder.loadTexts: dlbAthBeaconsTransmitted.setDescription('Beacons transmitted.')
dlbAthPeriodicCalibrations = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeriodicCalibrations.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeriodicCalibrations.setDescription('Periodic calibrations.')
dlbAthPeriodicCalibrFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeriodicCalibrFailures.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeriodicCalibrFailures.setDescription('Periodic calibration failures.')
dlbAthRfgainValueChange = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRfgainValueChange.setStatus('current')
if mibBuilder.loadTexts: dlbAthRfgainValueChange.setDescription('RFgain value changes.')
dlbAthRateControlChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRateControlChecks.setStatus('current')
if mibBuilder.loadTexts: dlbAthRateControlChecks.setDescription('Rate control checks.')
dlbAthRateCtrlRaisedXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRateCtrlRaisedXmitRate.setStatus('current')
if mibBuilder.loadTexts: dlbAthRateCtrlRaisedXmitRate.setDescription('Rate control raised transmission rate.')
dlbAthRateCtrlDroppedXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRateCtrlDroppedXmitRate.setStatus('current')
if mibBuilder.loadTexts: dlbAthRateCtrlDroppedXmitRate.setDescription('Rate control dropped transmission rate.')
dlbAthRssiOfLastAck = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRssiOfLastAck.setStatus('current')
if mibBuilder.loadTexts: dlbAthRssiOfLastAck.setDescription('RSSI of last ACK.')
dlbAthRssiOfLastRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 1, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRssiOfLastRcv.setStatus('current')
if mibBuilder.loadTexts: dlbAthRssiOfLastRcv.setDescription('RSSI of last reception.')
dlbAthPhyErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2), )
if mibBuilder.loadTexts: dlbAthPhyErrorsTable.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyErrorsTable.setDescription('PHY errrors table.')
dlbAthPhyErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dlbAthPhyErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyErrorsEntry.setDescription('PHY errors table entry.')
dlbAthPhyTransmitUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyTransmitUnderrun.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyTransmitUnderrun.setDescription('Transmit underrun errors.')
dlbAthPhyTimingError = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyTimingError.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyTimingError.setDescription('Timing errors.')
dlbAthPhyIllegalParity = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyIllegalParity.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyIllegalParity.setDescription('Illegal parity errors.')
dlbAthPhyIllegalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyIllegalRate.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyIllegalRate.setDescription('Illegal rate errors.')
dlbAthPhyIllegalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyIllegalLength.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyIllegalLength.setDescription('Illegal length errors.')
dlbAthPhyRadarDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyRadarDetect.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyRadarDetect.setDescription('Radar detected.')
dlbAthPhyIllegalService = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyIllegalService.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyIllegalService.setDescription('Illegal service errors.')
dlbAthPhyTxmitOverrideRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyTxmitOverrideRecv.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyTxmitOverrideRecv.setDescription('Transmission overrode reception errors.')
dlbAthPhyOfdmTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyOfdmTiming.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyOfdmTiming.setDescription('OFDM timing errors.')
dlbAthPhyOfdmIllegalParity = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyOfdmIllegalParity.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyOfdmIllegalParity.setDescription('OFDM illegal parity errors.')
dlbAthPhyOfdmIllegalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyOfdmIllegalRate.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyOfdmIllegalRate.setDescription('OFDM illegal rate errors.')
dlbAthPhyOfdmIllegalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyOfdmIllegalLength.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyOfdmIllegalLength.setDescription('OFDM illegal length errors.')
dlbAthPhyOfdmPowerDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyOfdmPowerDrop.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyOfdmPowerDrop.setDescription('OFDM power dropped.')
dlbAthPhyOfdmIllegalService = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyOfdmIllegalService.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyOfdmIllegalService.setDescription('OFDM illegal service errors.')
dlbAthPhyOfdmRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyOfdmRestart.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyOfdmRestart.setDescription('Number of times OFDM restarted.')
dlbAthPhyCckTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyCckTiming.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyCckTiming.setDescription('CCK timing errors.')
dlbAthPhyCckHeaderCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyCckHeaderCrc.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyCckHeaderCrc.setDescription('CCK header CRC errors.')
dlbAthPhyCckIllegalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyCckIllegalRate.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyCckIllegalRate.setDescription('CCK illegal rate errors.')
dlbAthPhyCckIllegalService = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyCckIllegalService.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyCckIllegalService.setDescription('CCK illegal service errors.')
dlbAthPhyCckRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPhyCckRestart.setStatus('current')
if mibBuilder.loadTexts: dlbAthPhyCckRestart.setDescription('Number of times CCK restarted.')
dlbAthAntennaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3), )
if mibBuilder.loadTexts: dlbAthAntennaStatsTable.setStatus('current')
if mibBuilder.loadTexts: dlbAthAntennaStatsTable.setDescription('Antenna statistics table.')
dlbAthAntennaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dlbAthAntennaStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dlbAthAntennaStatsEntry.setDescription('Antenna statistics table entry.')
dlbAthSwitchedDefaultRxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthSwitchedDefaultRxAntenna.setStatus('current')
if mibBuilder.loadTexts: dlbAthSwitchedDefaultRxAntenna.setDescription('Number of times default/RX antenna was switched.')
dlbAthTxUsedAlternateAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxUsedAlternateAntenna.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxUsedAlternateAntenna.setDescription('Number of times alternate antenna was used for transmission.')
dlbAthTxFramesAntenna1 = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesAntenna1.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesAntenna1.setDescription('Transmitted over first antenna.')
dlbAthRxFramesAntenna1 = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFramesAntenna1.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFramesAntenna1.setDescription('Received over first antenna.')
dlbAthTxFramesAntenna2 = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesAntenna2.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesAntenna2.setDescription('Transmitted over second antenna.')
dlbAthRxFramesAntenna2 = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFramesAntenna2.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFramesAntenna2.setDescription('Received over second antenna.')
dlbAthTxFramesAntenna3 = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthTxFramesAntenna3.setStatus('current')
if mibBuilder.loadTexts: dlbAthTxFramesAntenna3.setDescription('Transmitted over third antenna.')
dlbAthRxFramesAntenna3 = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthRxFramesAntenna3.setStatus('current')
if mibBuilder.loadTexts: dlbAthRxFramesAntenna3.setDescription('Received over third antenna.')
dlbAthDot11StatsTable = MibTable((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4), )
if mibBuilder.loadTexts: dlbAthDot11StatsTable.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11StatsTable.setDescription('802.11 stack statistics table.')
dlbAthDot11StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dlbAthDot11StatsEntry.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11StatsEntry.setDescription('802.11 stack statistics table entry.')
dlbAthDot11RxBadVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxBadVersion.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxBadVersion.setDescription('Received frames with bad version.')
dlbAthDot11RxTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxTooShort.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxTooShort.setDescription('Received too short frames.')
dlbAthDot11RxWrongBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxWrongBssid.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxWrongBssid.setDescription('Received from wrong BSSID.')
dlbAthDot11RxDup = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxDup.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxDup.setDescription('Received and discarded duplicate frames.')
dlbAthDot11RxWrongDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxWrongDirection.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxWrongDirection.setDescription('Received with wrong direction.')
dlbAthDot11RxMcastEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxMcastEcho.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxMcastEcho.setDescription('Received frames discarded due to multicast echo.')
dlbAthDot11RxNotAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxNotAssoc.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxNotAssoc.setDescription('Received frames discarded because station is not associated.')
dlbAthDot11RxNoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxNoPrivacy.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxNoPrivacy.setDescription('Received frames with WEP while privacy was off.')
dlbAthDot11RxUnencrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxUnencrypted.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxUnencrypted.setDescription('Received unencrypted frames while privacy was on.')
dlbAthDot11RxWepFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxWepFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxWepFail.setDescription('Received frames that failed WEP processing.')
dlbAthDot11RxDecapFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxDecapFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxDecapFail.setDescription('Received frames that failed decapsulation.')
dlbAthDot11RxDiscardMgt = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxDiscardMgt.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxDiscardMgt.setDescription('Received and discarded management frames.')
dlbAthDot11RxDiscardCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxDiscardCtrl.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxDiscardCtrl.setDescription('Received and discarded control frames.')
dlbAthDot11RxBeaconFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxBeaconFrames.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxBeaconFrames.setDescription('Received beacon frames.')
dlbAthDot11RxRateSetTrunc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxRateSetTrunc.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxRateSetTrunc.setDescription('Received frames with rate set truncated.')
dlbAthDot11RxReqElemMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxReqElemMissing.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxReqElemMissing.setDescription('Received frames with required element missing.')
dlbAthDot11RxElementTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxElementTooBig.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxElementTooBig.setDescription('Received frames with too big elements.')
dlbAthDot11RxElementTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxElementTooSmall.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxElementTooSmall.setDescription('Received frames with too small elements.')
dlbAthDot11RxElementUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxElementUnknown.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxElementUnknown.setDescription('Received frames with unknown elements.')
dlbAthDot11RxInvalidChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxInvalidChannel.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxInvalidChannel.setDescription('Recevied frames with invalid channel.')
dlbAthDot11RxChannelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxChannelMismatch.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxChannelMismatch.setDescription('Received frames with channel mismatch.')
dlbAthDot11RxNodesAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxNodesAllocated.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxNodesAllocated.setDescription('Nodes allocated for received frames.')
dlbAthDot11RxSsidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxSsidMismatch.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxSsidMismatch.setDescription('Received frame SSID mismatches.')
dlbAthDot11RxUnsupportedAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxUnsupportedAuthAlg.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxUnsupportedAuthAlg.setDescription('Received frames with unsupported authentication algorithm.')
dlbAthDot11RxAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxAuthFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxAuthFail.setDescription('Station authentication failures.')
dlbAthDot11RxTkipCtrm = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxTkipCtrm.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxTkipCtrm.setDescription('Station authentication failures due to TKIP countermeasures.')
dlbAthDot11RxAssocWrongBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxAssocWrongBssid.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxAssocWrongBssid.setDescription('Associations from wrong BSSID.')
dlbAthDot11RxAssocNotAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxAssocNotAuth.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxAssocNotAuth.setDescription('Associations without authentication.')
dlbAthDot11RxAssocCapMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxAssocCapMismatch.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxAssocCapMismatch.setDescription('Associations with capabilities mismatch.')
dlbAthDot11RxAssocNoRateMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxAssocNoRateMatch.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxAssocNoRateMatch.setDescription('Associations with no matching rate.')
dlbAthDot11RxAssocBadWpaIe = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxAssocBadWpaIe.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxAssocBadWpaIe.setDescription('Associations with bad WPA IE.')
dlbAthDot11RxDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxDeauth.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxDeauth.setDescription('Deauthentications.')
dlbAthDot11RxDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxDisassoc.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxDisassoc.setDescription('Disassociations.')
dlbAthDot11RxUnknownSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxUnknownSubtype.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxUnknownSubtype.setDescription('Received frames with unknown subtype.')
dlbAthDot11RxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxNoBuffer.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxNoBuffer.setDescription('Buffer allocations failed for received frames.')
dlbAthDot11RxDecryptCrcError = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxDecryptCrcError.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxDecryptCrcError.setDescription('Decryptions failed with CRC error.')
dlbAthDot11RxMgmtInAhdocDemo = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxMgmtInAhdocDemo.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxMgmtInAhdocDemo.setDescription('Discarded management frames received in ahdoc demo mode.')
dlbAthDot11RxBadAuthRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxBadAuthRequest.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxBadAuthRequest.setDescription('Bad authentication requests.')
dlbAthDot11RxPortUnauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxPortUnauth.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxPortUnauth.setDescription('Received frames discarded due to unauthorized port.')
dlbAthDot11RxBadKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxBadKeyId.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxBadKeyId.setDescription('Received frames with incorrect keyid.')
dlbAthDot11RxCcmpBadSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxCcmpBadSeqNum.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxCcmpBadSeqNum.setDescription('CCMP sequence number violations.')
dlbAthDot11RxCcmpBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxCcmpBadFormat.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxCcmpBadFormat.setDescription('Bad format CCMP frames.')
dlbAthDot11RxCcmpMicCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxCcmpMicCheck.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxCcmpMicCheck.setDescription('CCMP MIC check failures.')
dlbAthDot11RxTkipBadSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxTkipBadSeqNum.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxTkipBadSeqNum.setDescription('TKIP sequence number violations.')
dlbAthDot11RxTkipBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxTkipBadFormat.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxTkipBadFormat.setDescription('Bad format TKIP frames.')
dlbAthDot11RxTkipMicCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxTkipMicCheck.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxTkipMicCheck.setDescription('TKIP MIC check failures.')
dlbAthDot11RxTkipIcvCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxTkipIcvCheck.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxTkipIcvCheck.setDescription('TKIP ICV check failures.')
dlbAthDot11RxBadCipherKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxBadCipherKeyType.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxBadCipherKeyType.setDescription('Receptions failed due to bad cipher/key type.')
dlbAthDot11RxCipherKeyNotSet = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxCipherKeyNotSet.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxCipherKeyNotSet.setDescription('Receptions failed due to cipher/key not setup.')
dlbAthDot11RxAclPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxAclPolicy.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxAclPolicy.setDescription('Received frames discarded due to ACL policy.')
dlbAthDot11RxFastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxFastFrames.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxFastFrames.setDescription('Received fast frames.')
dlbAthDot11RxFfBadTunnelHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11RxFfBadTunnelHdr.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11RxFfBadTunnelHdr.setDescription('Fast frames failed due to bad tunnel header.')
dlbAthDot11TxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11TxNoBuffer.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11TxNoBuffer.setDescription('Buffer allocations failed for transmitted frames.')
dlbAthDot11TxNoNode = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11TxNoNode.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11TxNoNode.setDescription('Transmissions failed for no node.')
dlbAthDot11TxBadMgtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11TxBadMgtFrames.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11TxBadMgtFrames.setDescription('Attempted transmissions of unknown management frame.')
dlbAthDot11TxBadCipherKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11TxBadCipherKeyType.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11TxBadCipherKeyType.setDescription('Transmissions failed due to bad cipher/key type.')
dlbAthDot11TxNoDefKey = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11TxNoDefKey.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11TxNoDefKey.setDescription('Transmissions failed due to no default key.')
dlbAthDot11TxNoCryptoHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11TxNoCryptoHeadroom.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11TxNoCryptoHeadroom.setDescription('Transmissions failed due to no space for crypto headers.')
dlbAthDot11TxGoodFastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11TxGoodFastFrames.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11TxGoodFastFrames.setDescription('Successful fast frames transmissions.')
dlbAthDot11TxBadFastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11TxBadFastFrames.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11TxBadFastFrames.setDescription('Failed fast frames transmissions.')
dlbAthDot11ActiveScans = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11ActiveScans.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11ActiveScans.setDescription('Active scans started.')
dlbAthDot11PassiveScans = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11PassiveScans.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11PassiveScans.setDescription('Passive scans started.')
dlbAthDot11NodesTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11NodesTimeout.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11NodesTimeout.setDescription('Nodes timed out due to inactivity.')
dlbAthDot11CryptoCipherMalloc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoCipherMalloc.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoCipherMalloc.setDescription('Failed memory allocations for cipher context.')
dlbAthDot11CryptoSwTkip = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoSwTkip.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoSwTkip.setDescription('TKIP encryptions done in software.')
dlbAthDot11CryptoTkipSwMicEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoTkipSwMicEnc.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoTkipSwMicEnc.setDescription('TKIP MIC encryptions done in software.')
dlbAthDot11CryptoTkipSwMicDec = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoTkipSwMicDec.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoTkipSwMicDec.setDescription('TKIP MIC decryptions done in software.')
dlbAthDot11CryptoTkipCtrm = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoTkipCtrm.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoTkipCtrm.setDescription('TKIP frames dropped due to countermeasures.')
dlbAthDot11CryptoSwCcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoSwCcmp.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoSwCcmp.setDescription('CCMP encryptions done in software.')
dlbAthDot11CryptoSwWep = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoSwWep.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoSwWep.setDescription('WEP encryptions done in software.')
dlbAthDot11CryptoCipherRej = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoCipherRej.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoCipherRej.setDescription('Crypto failures due to cipher rejected data.')
dlbAthDot11CryptoNoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoNoKey.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoNoKey.setDescription('Crypto failures due to no key index.')
dlbAthDot11CryptoDelKey = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoDelKey.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoDelKey.setDescription('Failed driver key deletions.')
dlbAthDot11CryptoBadCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoBadCipher.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoBadCipher.setDescription('Crypto failures due to unknown cipher.')
dlbAthDot11CryptoNoCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoNoCipher.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoNoCipher.setDescription('Crypto failures due to unavailable cipher module.')
dlbAthDot11CryptoAttachFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoAttachFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoAttachFail.setDescription('Crypto failures due to cipher attach failure.')
dlbAthDot11CryptoSwFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoSwFallback.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoSwFallback.setDescription('Crypto fallbacks to software implementation.')
dlbAthDot11CryptoKeyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11CryptoKeyFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11CryptoKeyFail.setDescription('Crypto failures due to driver key allocation failure.')
dlbAthDot11SnoopMcastPass = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11SnoopMcastPass.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11SnoopMcastPass.setDescription('Multicast packets passed by snooping filter.')
dlbAthDot11SnoopMcastDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 4, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthDot11SnoopMcastDrop.setStatus('current')
if mibBuilder.loadTexts: dlbAthDot11SnoopMcastDrop.setDescription('Multicast packets dropped by snooping filter.')
dlbAthPeerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5), )
if mibBuilder.loadTexts: dlbAthPeerStatsTable.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerStatsTable.setDescription('Peer statistics table.')
dlbAthPeerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DLB-ATHDRV-STATS-MIB", "dlbAthPeerIndex"))
if mibBuilder.loadTexts: dlbAthPeerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerStatsEntry.setDescription('Peer statistics table entry.')
dlbAthPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: dlbAthPeerIndex.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerIndex.setDescription('Peer index, indexed from 1.')
dlbAthPeerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerMacAddr.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerMacAddr.setDescription('Peer MAC address.')
dlbAthPeerRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxData.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxData.setDescription('Received data frames.')
dlbAthPeerRxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxMgmt.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxMgmt.setDescription('Received management frames.')
dlbAthPeerRxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxCtrl.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxCtrl.setDescription('Received control frames.')
dlbAthPeerRxBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxBeacons.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxBeacons.setDescription('Received beacon frames.')
dlbAthPeerRxProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxProbeResponse.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxProbeResponse.setDescription('Received probe response frames.')
dlbAthPeerRxUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxUcast.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxUcast.setDescription('Received unicast frames.')
dlbAthPeerRxMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxMcast.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxMcast.setDescription('Received multicast/broadcast frames.')
dlbAthPeerRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxBytes.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxBytes.setDescription('Received bytes.')
dlbAthPeerRxDup = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxDup.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxDup.setDescription('Received and discarded duplicate frames.')
dlbAthPeerRxNoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxNoPrivacy.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxNoPrivacy.setDescription('Received frames with WEP while privacy was off.')
dlbAthPeerRxWepFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxWepFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxWepFail.setDescription('Received frames that failed WEP processing.')
dlbAthPeerRxDemicFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxDemicFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxDemicFail.setDescription('MIC decoding failures.')
dlbAthPeerRxDecapFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxDecapFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxDecapFail.setDescription('Decapsulation failures.')
dlbAthPeerRxDefragFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxDefragFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxDefragFail.setDescription('Defragmentation failures.')
dlbAthPeerRxDissasoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxDissasoc.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxDissasoc.setDescription('Disassociations.')
dlbAthPeerRxDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxDeauth.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxDeauth.setDescription('Deauthentications.')
dlbAthPeerRxDecryptCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxDecryptCrc.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxDecryptCrc.setDescription('Decryptions failed with CRC error.')
dlbAthPeerRxUnauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxUnauth.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxUnauth.setDescription('Received frames discarded due to unauthorized port.')
dlbAthPeerRxUnencrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerRxUnencrypted.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerRxUnencrypted.setDescription('Received unencrypted frames while privacy was on.')
dlbAthPeerTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxData.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxData.setDescription('Transmitted data frames.')
dlbAthPeerTxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxMgmt.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxMgmt.setDescription('Tranmitted management frames.')
dlbAthPeerTxProbeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxProbeReq.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxProbeReq.setDescription('Transmitted probe requests.')
dlbAthPeerTxUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxUcast.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxUcast.setDescription('Transmitted unicast frames.')
dlbAthPeerTxMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxMcast.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxMcast.setDescription('Transmitted multicast/broadcast frames.')
dlbAthPeerTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxBytes.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxBytes.setDescription('Transmitted bytes.')
dlbAthPeerTxNoVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxNoVlanTag.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxNoVlanTag.setDescription('Frames discarded due to no tag.')
dlbAthPeerTxVlanMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxVlanMismatch.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxVlanMismatch.setDescription('Frames discarded due to bad tag.')
dlbAthPeerTxUapsd = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxUapsd.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxUapsd.setDescription('Frames in UAPSD queue.')
dlbAthPeerUapsdTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerUapsdTriggers.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerUapsdTriggers.setDescription('Number of UAPSD triggers.')
dlbAthPeerTxEospLost = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxEospLost.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxEospLost.setDescription('Retried frames with UAPSD EOSP set.')
dlbAthPeerTxAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxAssoc.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxAssoc.setDescription('Associations/reassociations.')
dlbAthPeerTxAssocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxAssocFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxAssocFail.setDescription('Association/reassociation failures.')
dlbAthPeerTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxAuth.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxAuth.setDescription('Authentications/reauthentications.')
dlbAthPeerTxAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxAuthFail.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxAuthFail.setDescription('Authentication/reauthentication failures.')
dlbAthPeerTxDeauth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxDeauth.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxDeauth.setDescription('Deauthentications.')
dlbAthPeerTxDeauthCode = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxDeauthCode.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxDeauthCode.setDescription('Last deauthentication reason.')
dlbAthPeerTxDisassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxDisassoc.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxDisassoc.setDescription('Disassociations.')
dlbAthPeerTxDisassocCode = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerTxDisassocCode.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerTxDisassocCode.setDescription('Last disassociation reason.')
dlbAthPeerPsqDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerPsqDrops.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerPsqDrops.setDescription('Power save queue drops.')
dlbAthPeerMcastSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 7, 1, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbAthPeerMcastSnoop.setStatus('current')
if mibBuilder.loadTexts: dlbAthPeerMcastSnoop.setDescription('Frames passed by multicast snooping.')
mibBuilder.exportSymbols("DLB-ATHDRV-STATS-MIB", PYSNMP_MODULE_ID=dlbAthDrvStatsMIB, dlbAthPeerTxAuthFail=dlbAthPeerTxAuthFail, dlbAthDot11RxAuthFail=dlbAthDot11RxAuthFail, dlbAthRfgainValueChange=dlbAthRfgainValueChange, dlbAthTxEncapsulationFailed=dlbAthTxEncapsulationFailed, dlbAthPeerIndex=dlbAthPeerIndex, dlbAthPeerRxNoPrivacy=dlbAthPeerRxNoPrivacy, dlbAthRateControlChecks=dlbAthRateControlChecks, dlbAthStatsTable=dlbAthStatsTable, dlbAthTxmitUnderrunInterrupts=dlbAthTxmitUnderrunInterrupts, dlbAthPeerTxDeauthCode=dlbAthPeerTxDeauthCode, dlbAthPeerRxMgmt=dlbAthPeerRxMgmt, dlbAthDot11RxBadVersion=dlbAthDot11RxBadVersion, dlbAthPeerRxDissasoc=dlbAthPeerRxDissasoc, dlbAthHardwareErrorInterrupts=dlbAthHardwareErrorInterrupts, dlbAthPeerUapsdTriggers=dlbAthPeerUapsdTriggers, dlbAthPeerTxAssoc=dlbAthPeerTxAssoc, dlbAthTxFailedNoDataTxBuffer=dlbAthTxFailedNoDataTxBuffer, dlbAthPeerTxUapsd=dlbAthPeerTxUapsd, dlbAthPhyOfdmIllegalService=dlbAthPhyOfdmIllegalService, dlbAthDot11StatsEntry=dlbAthDot11StatsEntry, dlbAthPhyIllegalService=dlbAthPhyIllegalService, dlbAthDot11CryptoDelKey=dlbAthDot11CryptoDelKey, dlbAthPhyCckRestart=dlbAthPhyCckRestart, dlbAthDot11CryptoAttachFail=dlbAthDot11CryptoAttachFail, dlbAthPeerStatsTable=dlbAthPeerStatsTable, dlbAthPeerRxWepFail=dlbAthPeerRxWepFail, dlbAthPeerRxBeacons=dlbAthPeerRxBeacons, dlbAthPhyOfdmIllegalRate=dlbAthPhyOfdmIllegalRate, dlbAthDot11TxNoDefKey=dlbAthDot11TxNoDefKey, dlbAthTxFailedBogusXmitRate=dlbAthTxFailedBogusXmitRate, dlbAthRxFramesAntenna3=dlbAthRxFramesAntenna3, dlbAthDot11RxDecapFail=dlbAthDot11RxDecapFail, dlbAthRxFailedMicFailure=dlbAthRxFailedMicFailure, dlbAthPhyOfdmIllegalParity=dlbAthPhyOfdmIllegalParity, dlbAthDot11RxWrongBssid=dlbAthDot11RxWrongBssid, dlbAthRxFramesAntenna2=dlbAthRxFramesAntenna2, dlbAthDot11RxCcmpBadFormat=dlbAthDot11RxCcmpBadFormat, dlbAthTxFailedFifoUnderrun=dlbAthTxFailedFifoUnderrun, dlbAthDot11RxBeaconFrames=dlbAthDot11RxBeaconFrames, dlbAthPeerTxAuth=dlbAthPeerTxAuth, dlbAthDot11CryptoTkipSwMicDec=dlbAthDot11CryptoTkipSwMicDec, dlbAthDot11SnoopMcastDrop=dlbAthDot11SnoopMcastDrop, dlbAthDot11RxBadAuthRequest=dlbAthDot11RxBadAuthRequest, dlbAthDot11RxRateSetTrunc=dlbAthDot11RxRateSetTrunc, dlbAthDot11RxDecryptCrcError=dlbAthDot11RxDecryptCrcError, dlbAthDot11RxTkipCtrm=dlbAthDot11RxTkipCtrm, dlbAthDot11RxTkipBadFormat=dlbAthDot11RxTkipBadFormat, dlbAthDot11RxNotAssoc=dlbAthDot11RxNotAssoc, dlbAthPeerTxEospLost=dlbAthPeerTxEospLost, dlbAthRssiOfLastRcv=dlbAthRssiOfLastRcv, dlbAthTxUsedAlternateAntenna=dlbAthTxUsedAlternateAntenna, dlbAthTxFailedXmitFiltered=dlbAthTxFailedXmitFiltered, dlbAthDot11RxCcmpMicCheck=dlbAthDot11RxCcmpMicCheck, dlbAthPhyIllegalLength=dlbAthPhyIllegalLength, dlbAthPeerTxProbeReq=dlbAthPeerTxProbeReq, dlbAthRxFailedDecryptErrors=dlbAthRxFailedDecryptErrors, dlbAthRxFailedFifoOverrun=dlbAthRxFailedFifoOverrun, dlbAthPhyTimingError=dlbAthPhyTimingError, dlbAthPhyIllegalRate=dlbAthPhyIllegalRate, dlbAthDot11CryptoNoCipher=dlbAthDot11CryptoNoCipher, dlbAthPeerTxData=dlbAthPeerTxData, dlbAthDrvStatsMIB=dlbAthDrvStatsMIB, dlbAthDot11RxElementTooBig=dlbAthDot11RxElementTooBig, dlbAthRxFailedDescOverrun=dlbAthRxFailedDescOverrun, dlbAthDot11SnoopMcastPass=dlbAthDot11SnoopMcastPass, dlbAthDot11RxNoPrivacy=dlbAthDot11RxNoPrivacy, dlbAthDot11RxAssocBadWpaIe=dlbAthDot11RxAssocBadWpaIe, dlbAthTxQueueFull=dlbAthTxQueueFull, dlbAthRxControlFrames=dlbAthRxControlFrames, dlbAthDot11PassiveScans=dlbAthDot11PassiveScans, dlbAthDot11CryptoKeyFail=dlbAthDot11CryptoKeyFail, dlbAthPeerTxNoVlanTag=dlbAthPeerTxNoVlanTag, dlbAthDot11TxNoCryptoHeadroom=dlbAthDot11TxNoCryptoHeadroom, dlbAthTxFailedNoMgtTxBuffer=dlbAthTxFailedNoMgtTxBuffer, dlbAthDot11CryptoTkipSwMicEnc=dlbAthDot11CryptoTkipSwMicEnc, dlbAthPeriodicCalibrFailures=dlbAthPeriodicCalibrFailures, dlbAthTxFramesShortPreamble=dlbAthTxFramesShortPreamble, dlbAthDot11RxTooShort=dlbAthDot11RxTooShort, dlbAthDot11RxInvalidChannel=dlbAthDot11RxInvalidChannel, dlbAthPhyOfdmIllegalLength=dlbAthPhyOfdmIllegalLength, dlbAthDot11TxBadFastFrames=dlbAthDot11TxBadFastFrames, dlbAthDot11CryptoSwCcmp=dlbAthDot11CryptoSwCcmp, dlbAthDot11RxCipherKeyNotSet=dlbAthDot11RxCipherKeyNotSet, dlbAthPeerRxDeauth=dlbAthPeerRxDeauth, dlbAthRecvEolInterrupts=dlbAthRecvEolInterrupts, dlbAthRateCtrlRaisedXmitRate=dlbAthRateCtrlRaisedXmitRate, dlbAthAntennaStatsEntry=dlbAthAntennaStatsEntry, dlbAthRxFailedBadCrc=dlbAthRxFailedBadCrc, dlbAthPhyTransmitUnderrun=dlbAthPhyTransmitUnderrun, dlbAthPeerRxUnencrypted=dlbAthPeerRxUnencrypted, dlbAthBeaconsTransmitted=dlbAthBeaconsTransmitted, dlbAthPeerRxData=dlbAthPeerRxData, dlbAthPeerMcastSnoop=dlbAthPeerMcastSnoop, dlbAthPeerTxDisassoc=dlbAthPeerTxDisassoc, dlbAthDot11RxPortUnauth=dlbAthDot11RxPortUnauth, dlbAthPhyIllegalParity=dlbAthPhyIllegalParity, dlbAthDot11RxAssocNotAuth=dlbAthDot11RxAssocNotAuth, dlbAthDot11RxElementUnknown=dlbAthDot11RxElementUnknown, dlbAthDot11RxDiscardCtrl=dlbAthDot11RxDiscardCtrl, dlbAthTxFramesAntenna2=dlbAthTxFramesAntenna2, dlbAthRxManagementFrames=dlbAthRxManagementFrames, dlbAthPeerTxVlanMismatch=dlbAthPeerTxVlanMismatch, dlbAthTxFramesCtsEnabled=dlbAthTxFramesCtsEnabled, dlbAthPeerRxMcast=dlbAthPeerRxMcast, dlbAthRxFailedFrameTooShort=dlbAthRxFailedFrameTooShort, dlbAthRateCtrlDroppedXmitRate=dlbAthRateCtrlDroppedXmitRate, dlbAthDot11CryptoSwFallback=dlbAthDot11CryptoSwFallback, dlbAthPeerTxBytes=dlbAthPeerTxBytes, dlbAthDot11TxGoodFastFrames=dlbAthDot11TxGoodFastFrames, dlbAthPhyCckIllegalService=dlbAthPhyCckIllegalService, dlbAthTxFramesAntenna3=dlbAthTxFramesAntenna3, dlbAthDot11RxNoBuffer=dlbAthDot11RxNoBuffer, dlbAthPeerRxDefragFail=dlbAthPeerRxDefragFail, dlbAthDot11CryptoTkipCtrm=dlbAthDot11CryptoTkipCtrm, dlbAthDot11TxBadCipherKeyType=dlbAthDot11TxBadCipherKeyType, dlbAthDot11RxUnknownSubtype=dlbAthDot11RxUnknownSubtype, dlbAthStatsEntry=dlbAthStatsEntry, dlbAthPhyCckIllegalRate=dlbAthPhyCckIllegalRate, dlbAthDot11RxTkipMicCheck=dlbAthDot11RxTkipMicCheck, dlbAthPeerTxUcast=dlbAthPeerTxUcast, dlbAthPeriodicCalibrations=dlbAthPeriodicCalibrations, dlbAthDot11RxCcmpBadSeqNum=dlbAthDot11RxCcmpBadSeqNum, dlbAthDot11RxUnencrypted=dlbAthDot11RxUnencrypted, dlbAthDot11CryptoCipherRej=dlbAthDot11CryptoCipherRej, dlbAthPeerRxUcast=dlbAthPeerRxUcast, dlbAthAntennaStatsTable=dlbAthAntennaStatsTable, dlbAthDot11ActiveScans=dlbAthDot11ActiveScans, dlbAthPeerRxCtrl=dlbAthPeerRxCtrl, dlbAthTxFramesDiscQueueDepth=dlbAthTxFramesDiscQueueDepth, dlbAthDot11RxElementTooSmall=dlbAthDot11RxElementTooSmall, dlbAthDot11TxNoBuffer=dlbAthDot11TxNoBuffer, dlbAthTxFramesAlternateRate=dlbAthTxFramesAlternateRate, dlbAthPhyCckHeaderCrc=dlbAthPhyCckHeaderCrc, dlbAthPeerTxAssocFail=dlbAthPeerTxAssocFail, dlbAthPeerPsqDrops=dlbAthPeerPsqDrops, dlbAthDot11RxChannelMismatch=dlbAthDot11RxChannelMismatch, dlbAthDot11RxTkipBadSeqNum=dlbAthDot11RxTkipBadSeqNum, dlbAthDot11CryptoNoKey=dlbAthDot11CryptoNoKey, dlbAthPeerMacAddr=dlbAthPeerMacAddr, dlbAthRssiOfLastAck=dlbAthRssiOfLastAck, dlbAthDot11CryptoBadCipher=dlbAthDot11CryptoBadCipher, dlbAthDot11RxReqElemMissing=dlbAthDot11RxReqElemMissing, dlbAthPeerRxProbeResponse=dlbAthPeerRxProbeResponse, dlbAthDot11CryptoSwWep=dlbAthDot11CryptoSwWep, dlbAthDot11RxAssocCapMismatch=dlbAthDot11RxAssocCapMismatch, dlbAthPeerTxDeauth=dlbAthPeerTxDeauth, dlbAthDot11RxUnsupportedAuthAlg=dlbAthDot11RxUnsupportedAuthAlg, dlbAthDot11CryptoSwTkip=dlbAthDot11CryptoSwTkip, dlbAthPhyCckTiming=dlbAthPhyCckTiming, dlbAthDot11RxDeauth=dlbAthDot11RxDeauth, dlbAthDot11StatsTable=dlbAthDot11StatsTable, dlbAthPeerTxMgmt=dlbAthPeerTxMgmt, dlbAthPhyOfdmRestart=dlbAthPhyOfdmRestart, dlbAthDot11RxBadCipherKeyType=dlbAthDot11RxBadCipherKeyType, dlbAthDot11TxNoNode=dlbAthDot11TxNoNode, dlbAthTxFrames11gProtection=dlbAthTxFrames11gProtection, dlbAthPhyTxmitOverrideRecv=dlbAthPhyTxmitOverrideRecv, dlbAthTxManagementFrames=dlbAthTxManagementFrames, dlbAthPeerStatsEntry=dlbAthPeerStatsEntry, dlbAthPeerRxDup=dlbAthPeerRxDup, dlbAthTxFailedTooManyRetries=dlbAthTxFailedTooManyRetries, dlbAthDot11RxDup=dlbAthDot11RxDup, dlbAthTxFramesAntenna1=dlbAthTxFramesAntenna1, dlbAthDot11CryptoCipherMalloc=dlbAthDot11CryptoCipherMalloc, dlbAthPhyOfdmTiming=dlbAthPhyOfdmTiming, dlbAthDrvStatsMIBObjects=dlbAthDrvStatsMIBObjects, dlbAthDot11RxAssocWrongBssid=dlbAthDot11RxAssocWrongBssid, dlbAthRxFramesAntenna1=dlbAthRxFramesAntenna1, dlbAthPeerRxBytes=dlbAthPeerRxBytes, dlbAthPeerRxDecryptCrc=dlbAthPeerRxDecryptCrc, dlbAthDot11RxFastFrames=dlbAthDot11RxFastFrames, dlbAthDot11RxDiscardMgt=dlbAthDot11RxDiscardMgt, dlbAthPeerRxDemicFail=dlbAthPeerRxDemicFail, dlbAthWatchdogTimeouts=dlbAthWatchdogTimeouts, dlbAthPeerTxMcast=dlbAthPeerTxMcast, dlbAthTxFramesNoAckMarked=dlbAthTxFramesNoAckMarked, dlbAthPhyRadarDetect=dlbAthPhyRadarDetect, dlbAthShortOnchipTxRetries=dlbAthShortOnchipTxRetries, dlbAthPeerTxDisassocCode=dlbAthPeerTxDisassocCode, dlbAthPhyErrorsEntry=dlbAthPhyErrorsEntry, dlbAthDot11RxFfBadTunnelHdr=dlbAthDot11RxFfBadTunnelHdr, dlbAthDot11RxWepFail=dlbAthDot11RxWepFail, dlbAthPeerRxUnauth=dlbAthPeerRxUnauth, dlbAthDot11RxDisassoc=dlbAthDot11RxDisassoc, dlbAthPhyOfdmPowerDrop=dlbAthPhyOfdmPowerDrop, dlbAthDot11RxWrongDirection=dlbAthDot11RxWrongDirection, dlbAthBeaconMissInterrupts=dlbAthBeaconMissInterrupts, dlbAthLongOnchipTxRetries=dlbAthLongOnchipTxRetries, dlbAthPeerRxDecapFail=dlbAthPeerRxDecapFail, dlbAthDot11NodesTimeout=dlbAthDot11NodesTimeout, dlbAthTxFramesDiscDeviceGone=dlbAthTxFramesDiscDeviceGone, dlbAthDot11RxTkipIcvCheck=dlbAthDot11RxTkipIcvCheck, dlbAthRecvOverrunInterrupts=dlbAthRecvOverrunInterrupts, dlbAthDot11RxNodesAllocated=dlbAthDot11RxNodesAllocated, dlbAthDot11RxSsidMismatch=dlbAthDot11RxSsidMismatch, dlbAthDot11RxAclPolicy=dlbAthDot11RxAclPolicy, dlbAthPhyErrorsTable=dlbAthPhyErrorsTable, dlbAthDot11RxMcastEcho=dlbAthDot11RxMcastEcho, dlbAthDot11TxBadMgtFrames=dlbAthDot11TxBadMgtFrames, dlbAthTxFailedNoNode=dlbAthTxFailedNoNode, dlbAthSwitchedDefaultRxAntenna=dlbAthSwitchedDefaultRxAntenna, dlbAthTxFramesRtsEnabled=dlbAthTxFramesRtsEnabled, dlbAthRxSetupFailedNoSkbuff=dlbAthRxSetupFailedNoSkbuff, dlbAthNoSkbuffForBeacon=dlbAthNoSkbuffForBeacon, dlbAthDot11RxAssocNoRateMatch=dlbAthDot11RxAssocNoRateMatch, dlbAthDot11RxMgmtInAhdocDemo=dlbAthDot11RxMgmtInAhdocDemo, dlbAthDot11RxBadKeyId=dlbAthDot11RxBadKeyId)
