#
# PySNMP MIB module ENTERASYS-LICENSE-KEY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-LICENSE-KEY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, ModuleIdentity, IpAddress, Unsigned32, NotificationType, Integer32, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, MibIdentifier, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "IpAddress", "Unsigned32", "NotificationType", "Integer32", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "MibIdentifier", "Bits", "Counter64")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
etsysLicenseKeyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54))
etsysLicenseKeyMIB.setRevisions(('2009-09-02 18:59', '2004-11-03 19:52', '2004-08-30 14:52', '2004-08-17 16:35',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysLicenseKeyMIB.setRevisionsDescriptions(('Increased the size of the etsysLicenseKeyPhysicalString object.', 'Added the etsysLicenseKeyPhysicalTable to represent licensable features that are bound to specific physical subsystems. Obsoleted the etsysLicenseKeyTable since it can be represented in the etsysLicenseKeyPhysicalTable.', 'Added a new enumeration to the etsysLicenseKeyStatus object to indicate licenses that are valid but the system has not yet activated.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysLicenseKeyMIB.setLastUpdated('200909021859Z')
if mibBuilder.loadTexts: etsysLicenseKeyMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysLicenseKeyMIB.setContactInfo('Postal: Enterasys Networks, Inc. 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysLicenseKeyMIB.setDescription("This MIB module defines a portion of the SNMP enterprise MIBs under Enterasys Networks' enterprise OID pertaining to the configuration of license keys.")
class LicenseKeyStatus(TextualConvention, Integer32):
    description = 'This textual convention enumerates the possible status values for a given license key.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("active", 2), ("invalid", 3), ("expired", 4), ("restricted", 5), ("uninitialized", 6), ("validNotActive", 7))

etsysLicenseKeyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1))
etsysLicenseKeyConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1))
etsysLicenseKeyTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1), )
if mibBuilder.loadTexts: etsysLicenseKeyTable.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyTable.setDescription('This table contains license keys for optional features.')
etsysLicenseKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1), ).setIndexNames((0, "ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyIndex"))
if mibBuilder.loadTexts: etsysLicenseKeyEntry.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyEntry.setDescription('Information for a particular license key.')
etsysLicenseKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: etsysLicenseKeyIndex.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyIndex.setDescription('An arbitrary index that uniquely identifies each entry in this table. This value is only unique within a given managed device.')
etsysLicenseKeyIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyIdentifier.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyIdentifier.setDescription('The unique OID for this licensable feature.')
etsysLicenseKeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyDescription.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyDescription.setDescription('A textual description of this licensable feature.')
etsysLicenseKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLicenseKeyString.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyString.setDescription('The textual license key for this feature that has been, or will be, entered by the end user.')
etsysLicenseKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1, 5), LicenseKeyStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyStatus.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyStatus.setDescription('The status of the license key for this feature.')
etsysLicenseKeyStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyStatusText.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyStatusText.setDescription('A textual description of the status of the license key for this feature.')
etsysLicenseKeyLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1, 7), DateAndTime().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyLastModified.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyLastModified.setDescription("The local date and time at which the license key string, etsysLicenseKeyString, associated with this row was last modified. If this information is not available, or the license key string has not been modified, this object MUST return '00000000'H.")
etsysLicenseKeyExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 1, 1, 8), DateAndTime().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyExpiration.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyExpiration.setDescription("The local date and time at which this license key will expire. Once the key has expired this object will indicate the local date and time when the key expired. If the key does not have an expiration period then this object MUST return '00000000'H.")
etsysLicenseKeyPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2), )
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalTable.setDescription('This table contains license keys for optional features.')
etsysLicenseKeyPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalIndex"))
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalEntry.setDescription('An entry containing per physical component information for a particular license key. Only physical indexes that have unique licensable features are represented in this table. Such physical entities may include, but are not limited to, ports, slots in a chassis, or the chassis itself.')
etsysLicenseKeyPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalIndex.setDescription('An arbitrary index that uniquely identifies each entry in this table. This value is only unique within a given managed device.')
etsysLicenseKeyPhysicalIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalIdentifier.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalIdentifier.setDescription('The unique OID for this licensable feature.')
etsysLicenseKeyPhysicalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalDescription.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalDescription.setDescription('A textual description of this licensable feature.')
etsysLicenseKeyPhysicalString = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalString.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalString.setDescription('The textual license key for this feature that has been, or will be, entered by the end user.')
etsysLicenseKeyPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1, 5), LicenseKeyStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalStatus.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalStatus.setDescription('The status of the license key for this feature.')
etsysLicenseKeyPhysicalStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalStatusText.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalStatusText.setDescription('A textual description of the status of the license key for this feature.')
etsysLicenseKeyPhysicalLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1, 7), DateAndTime().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalLastModified.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalLastModified.setDescription("The local date and time at which the license key string, etsysLicenseKeyPhysicalString, associated with this row was last modified. If this information is not available, or the license key string has not been modified, this object MUST return '00000000'H.")
etsysLicenseKeyPhysicalExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 1, 1, 2, 1, 8), DateAndTime().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalExpiration.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalExpiration.setDescription("The local date and time at which this license key will expire. Once the key has expired this object will indicate the local date and time when the key expired. If the key does not have an expiration period then this object MUST return '00000000'H.")
etsysLicenseKeyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 2))
etsysLicenseKeyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 2, 1))
etsysLicenseKeyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 2, 2))
etsysLicenseKeyConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 2, 1, 1)).setObjects(("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyIdentifier"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyDescription"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyString"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyStatus"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyStatusText"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyLastModified"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyExpiration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLicenseKeyConfigurationGroup = etsysLicenseKeyConfigurationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyConfigurationGroup.setDescription('A collection of objects for configuring license keys for optional features.')
etsysLicenseKeyPhysicalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 2, 1, 2)).setObjects(("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalIdentifier"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalDescription"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalString"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalStatus"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalStatusText"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalLastModified"), ("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalExpiration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLicenseKeyPhysicalConfigGroup = etsysLicenseKeyPhysicalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyPhysicalConfigGroup.setDescription('A collection of objects for configuring license keys that are bound to a specific physical subsystem of the device.')
etsysLicenseKeyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 2, 2, 1)).setObjects(("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLicenseKeyCompliance = etsysLicenseKeyCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: etsysLicenseKeyCompliance.setDescription('The compliance statement for devices that support the Enterasys License Key MIB.')
etsysLicenseKeyCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 54, 2, 2, 2)).setObjects(("ENTERASYS-LICENSE-KEY-MIB", "etsysLicenseKeyPhysicalConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysLicenseKeyCompliance2 = etsysLicenseKeyCompliance2.setStatus('current')
if mibBuilder.loadTexts: etsysLicenseKeyCompliance2.setDescription('The compliance statement for devices that support the Enterasys License Key MIB.')
mibBuilder.exportSymbols("ENTERASYS-LICENSE-KEY-MIB", etsysLicenseKeyMIB=etsysLicenseKeyMIB, etsysLicenseKeyPhysicalConfigGroup=etsysLicenseKeyPhysicalConfigGroup, PYSNMP_MODULE_ID=etsysLicenseKeyMIB, etsysLicenseKeyExpiration=etsysLicenseKeyExpiration, etsysLicenseKeyCompliance=etsysLicenseKeyCompliance, etsysLicenseKeyCompliance2=etsysLicenseKeyCompliance2, etsysLicenseKeyIdentifier=etsysLicenseKeyIdentifier, etsysLicenseKeyCompliances=etsysLicenseKeyCompliances, etsysLicenseKeyObjects=etsysLicenseKeyObjects, etsysLicenseKeyTable=etsysLicenseKeyTable, etsysLicenseKeyPhysicalEntry=etsysLicenseKeyPhysicalEntry, etsysLicenseKeyIndex=etsysLicenseKeyIndex, etsysLicenseKeyStatusText=etsysLicenseKeyStatusText, etsysLicenseKeyPhysicalDescription=etsysLicenseKeyPhysicalDescription, etsysLicenseKeyEntry=etsysLicenseKeyEntry, etsysLicenseKeyGroups=etsysLicenseKeyGroups, etsysLicenseKeyString=etsysLicenseKeyString, etsysLicenseKeyStatus=etsysLicenseKeyStatus, etsysLicenseKeyPhysicalIdentifier=etsysLicenseKeyPhysicalIdentifier, etsysLicenseKeyLastModified=etsysLicenseKeyLastModified, etsysLicenseKeyPhysicalTable=etsysLicenseKeyPhysicalTable, etsysLicenseKeyDescription=etsysLicenseKeyDescription, LicenseKeyStatus=LicenseKeyStatus, etsysLicenseKeyPhysicalStatusText=etsysLicenseKeyPhysicalStatusText, etsysLicenseKeyConformance=etsysLicenseKeyConformance, etsysLicenseKeyPhysicalString=etsysLicenseKeyPhysicalString, etsysLicenseKeyPhysicalExpiration=etsysLicenseKeyPhysicalExpiration, etsysLicenseKeyConfigurationGroup=etsysLicenseKeyConfigurationGroup, etsysLicenseKeyPhysicalLastModified=etsysLicenseKeyPhysicalLastModified, etsysLicenseKeyConfiguration=etsysLicenseKeyConfiguration, etsysLicenseKeyPhysicalIndex=etsysLicenseKeyPhysicalIndex, etsysLicenseKeyPhysicalStatus=etsysLicenseKeyPhysicalStatus)
