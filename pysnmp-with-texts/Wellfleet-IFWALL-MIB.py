#
# PySNMP MIB module Wellfleet-IFWALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IFWALL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Unsigned32, IpAddress, Counter64, iso, MibIdentifier, Bits, Gauge32, ModuleIdentity, TimeTicks, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Unsigned32", "IpAddress", "Counter64", "iso", "MibIdentifier", "Bits", "Gauge32", "ModuleIdentity", "TimeTicks", "Integer32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfFwallGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFwallGroup")
wfIFwallIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1), )
if mibBuilder.loadTexts: wfIFwallIfTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfTable.setDescription('WF_IFWALL_INTERFACE_TABLE - Interface This tabulates the interfaces within an interface firewall group. All interfaces are indexed according to their physical slot and connector designation. ')
wfIFwallIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1, 1), ).setIndexNames((0, "Wellfleet-IFWALL-MIB", "wfIFwallIfSlot"), (0, "Wellfleet-IFWALL-MIB", "wfIFwallIfPort"))
if mibBuilder.loadTexts: wfIFwallIfEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfEntry.setDescription('Firewall interface entries.')
wfIFwallIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIFwallIfDelete.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfDelete.setDescription('Creation and deletion flag for this record. When set, it will cause this entry to be deleted from the MIB.')
wfIFwallIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIFwallIfDisable.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfDisable.setDescription('Enable/Disable parameter. A disabled interface will never be selected as the active interface for a circuit.')
wfIFwallIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIFwallIfCct.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfCct.setDescription('The circuit number of the circuit to which the interface belongs. This interface will either act as the active interface for the circuit or as a hot stand-by.')
wfIFwallIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIFwallIfSlot.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfSlot.setDescription('Slot ID of the interface, used as instance ID')
wfIFwallIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIFwallIfPort.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfPort.setDescription('Port ID of the interface, used as instance ID')
wfIFwallIfLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIFwallIfLineNumber.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfLineNumber.setDescription('The Line number for the port')
wfIFwallIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIFwallIfName.setStatus('obsolete')
if mibBuilder.loadTexts: wfIFwallIfName.setDescription('Displayable string that is associated with this instance')
wfFwallIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 3), )
if mibBuilder.loadTexts: wfFwallIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFwallIntfTable.setDescription('WF_IFWALL_INTERFACE_TABLE - Interface This tabulates the interfaces within an interface firewall group. All interfaces are indexed according to the circuit number.')
wfFwallIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 3, 1), ).setIndexNames((0, "Wellfleet-IFWALL-MIB", "wfFwallIntfCct"))
if mibBuilder.loadTexts: wfFwallIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFwallIntfEntry.setDescription('Firewall interface entries.')
wfFwallIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFwallIntfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFwallIntfDelete.setDescription('Creation and deletion flag for this record. When set, it will cause this entry to be deleted from the MIB.')
wfFwallIntfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFwallIntfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFwallIntfDisable.setDescription('Enable/Disable parameter. A disabled interface will never be selected as the active interface for a circuit.')
wfFwallIntfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFwallIntfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFwallIntfCct.setDescription('The circuit number of the circuit to which the interface belongs. This interface will either act as the active interface for the circuit or as a hot stand-by.')
wfFwallIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFwallIntfName.setStatus('mandatory')
if mibBuilder.loadTexts: wfFwallIntfName.setDescription('Displayable string that is associated with this instance')
wfFwallIntfPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFwallIntfPolicyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFwallIntfPolicyIndex.setDescription('Policy Index allows same virtual machine to be used by one or more circuits specified when the same policy index is configured on them. Thus allows scaling.')
mibBuilder.exportSymbols("Wellfleet-IFWALL-MIB", wfIFwallIfPort=wfIFwallIfPort, wfIFwallIfTable=wfIFwallIfTable, wfFwallIntfName=wfFwallIntfName, wfFwallIntfDisable=wfFwallIntfDisable, wfFwallIntfDelete=wfFwallIntfDelete, wfFwallIntfTable=wfFwallIntfTable, wfIFwallIfSlot=wfIFwallIfSlot, wfFwallIntfCct=wfFwallIntfCct, wfFwallIntfPolicyIndex=wfFwallIntfPolicyIndex, wfIFwallIfCct=wfIFwallIfCct, wfIFwallIfEntry=wfIFwallIfEntry, wfFwallIntfEntry=wfFwallIntfEntry, wfIFwallIfLineNumber=wfIFwallIfLineNumber, wfIFwallIfDisable=wfIFwallIfDisable, wfIFwallIfName=wfIFwallIfName, wfIFwallIfDelete=wfIFwallIfDelete)
