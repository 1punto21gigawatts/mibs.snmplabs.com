#
# PySNMP MIB module UBNT-AirMAX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UBNT-AirMAX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Gauge32, ModuleIdentity, Counter64, ObjectIdentity, IpAddress, Bits, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "ModuleIdentity", "Counter64", "ObjectIdentity", "IpAddress", "Bits", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "iso", "Unsigned32")
MacAddress, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "TruthValue")
ubntMIB, ubntAirosGroups = mibBuilder.importSymbols("UBNT-MIB", "ubntMIB", "ubntAirosGroups")
ubntAirMAX = ModuleIdentity((1, 3, 6, 1, 4, 1, 41112, 1, 4))
ubntAirMAX.setRevisions(('2015-09-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ubntAirMAX.setRevisionsDescriptions(('ubntAirMAX revision',))
if mibBuilder.loadTexts: ubntAirMAX.setLastUpdated('201509170000Z')
if mibBuilder.loadTexts: ubntAirMAX.setOrganization('Ubiquiti Networks, Inc.')
if mibBuilder.loadTexts: ubntAirMAX.setContactInfo('support@ubnt.com')
if mibBuilder.loadTexts: ubntAirMAX.setDescription('The AirMAX MIB module for Ubiquiti Networks, Inc. entities')
ubntRadioTable = MibTable((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1), )
if mibBuilder.loadTexts: ubntRadioTable.setStatus('current')
if mibBuilder.loadTexts: ubntRadioTable.setDescription('Radio status & statistics')
ubntRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1), ).setIndexNames((0, "UBNT-AirMAX-MIB", "ubntRadioIndex"))
if mibBuilder.loadTexts: ubntRadioEntry.setStatus('current')
if mibBuilder.loadTexts: ubntRadioEntry.setDescription('An entry in the ubntRadioTable')
ubntRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ubntRadioIndex.setStatus('current')
if mibBuilder.loadTexts: ubntRadioIndex.setDescription('Index for the ubntRadioTable')
ubntRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sta", 1), ("ap", 2), ("aprepeater", 3), ("apwds", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioMode.setStatus('current')
if mibBuilder.loadTexts: ubntRadioMode.setDescription('Radio mode')
ubntRadioCCode = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioCCode.setStatus('current')
if mibBuilder.loadTexts: ubntRadioCCode.setDescription('Country code')
ubntRadioFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioFreq.setStatus('current')
if mibBuilder.loadTexts: ubntRadioFreq.setDescription('Operating frequency')
ubntRadioDfsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioDfsEnabled.setStatus('current')
if mibBuilder.loadTexts: ubntRadioDfsEnabled.setDescription('DFS status')
ubntRadioTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioTxPower.setStatus('current')
if mibBuilder.loadTexts: ubntRadioTxPower.setDescription('Transmit power')
ubntRadioDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioDistance.setStatus('current')
if mibBuilder.loadTexts: ubntRadioDistance.setDescription('Distance')
ubntRadioChainmask = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioChainmask.setStatus('current')
if mibBuilder.loadTexts: ubntRadioChainmask.setDescription('Chainmask')
ubntRadioAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioAntenna.setStatus('current')
if mibBuilder.loadTexts: ubntRadioAntenna.setDescription('Antenna')
ubntRadioRssiTable = MibTable((1, 3, 6, 1, 4, 1, 41112, 1, 4, 2), )
if mibBuilder.loadTexts: ubntRadioRssiTable.setStatus('current')
if mibBuilder.loadTexts: ubntRadioRssiTable.setDescription('Radio RSSI per chain')
ubntRadioRssiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 41112, 1, 4, 2, 1), ).setIndexNames((0, "UBNT-AirMAX-MIB", "ubntRadioIndex"), (0, "UBNT-AirMAX-MIB", "ubntRadioRssiIndex"))
if mibBuilder.loadTexts: ubntRadioRssiEntry.setStatus('current')
if mibBuilder.loadTexts: ubntRadioRssiEntry.setDescription('An entry in the ubntRadioRssiTable')
ubntRadioRssiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ubntRadioRssiIndex.setStatus('current')
if mibBuilder.loadTexts: ubntRadioRssiIndex.setDescription('Index for the ubntRadioRssiTable')
ubntRadioRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioRssi.setStatus('current')
if mibBuilder.loadTexts: ubntRadioRssi.setDescription('Data frames rssi per chain')
ubntRadioRssiMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioRssiMgmt.setStatus('current')
if mibBuilder.loadTexts: ubntRadioRssiMgmt.setDescription('Management frames rssi per chain')
ubntRadioRssiExt = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntRadioRssiExt.setStatus('current')
if mibBuilder.loadTexts: ubntRadioRssiExt.setDescription('Extension channel rssi per chain')
ubntAirMaxTable = MibTable((1, 3, 6, 1, 4, 1, 41112, 1, 4, 6), )
if mibBuilder.loadTexts: ubntAirMaxTable.setStatus('current')
if mibBuilder.loadTexts: ubntAirMaxTable.setDescription('airMAX protocol statistics')
ubntAirMaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 41112, 1, 4, 6, 1), ).setIndexNames((0, "UBNT-AirMAX-MIB", "ubntAirMaxIfIndex"))
if mibBuilder.loadTexts: ubntAirMaxEntry.setStatus('current')
if mibBuilder.loadTexts: ubntAirMaxEntry.setDescription('An entry in the ubntAirMaxTable')
ubntAirMaxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ubntAirMaxIfIndex.setStatus('current')
if mibBuilder.loadTexts: ubntAirMaxIfIndex.setDescription('Index for the ubntAirMaxTable')
ubntAirMaxEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirMaxEnabled.setStatus('current')
if mibBuilder.loadTexts: ubntAirMaxEnabled.setDescription('airMAX status - on/off')
ubntAirMaxQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirMaxQuality.setStatus('current')
if mibBuilder.loadTexts: ubntAirMaxQuality.setDescription('airMAX quality - percentage')
ubntAirMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirMaxCapacity.setStatus('current')
if mibBuilder.loadTexts: ubntAirMaxCapacity.setDescription('airMAX capacity - percentage')
ubntAirMaxPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("high", 0), ("medium", 1), ("low", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirMaxPriority.setStatus('current')
if mibBuilder.loadTexts: ubntAirMaxPriority.setDescription('airMAX priority - none/high/low/medium')
ubntAirMaxNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirMaxNoAck.setStatus('current')
if mibBuilder.loadTexts: ubntAirMaxNoAck.setDescription('airMAX NoACK mode - on/off')
ubntAirSyncTable = MibTable((1, 3, 6, 1, 4, 1, 41112, 1, 4, 3), )
if mibBuilder.loadTexts: ubntAirSyncTable.setStatus('current')
if mibBuilder.loadTexts: ubntAirSyncTable.setDescription('airSync protocol statistics')
ubntAirSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 41112, 1, 4, 3, 1), ).setIndexNames((0, "UBNT-AirMAX-MIB", "ubntAirSyncIfIndex"))
if mibBuilder.loadTexts: ubntAirSyncEntry.setStatus('current')
if mibBuilder.loadTexts: ubntAirSyncEntry.setDescription('An entry in the ubntAirSyncTable')
ubntAirSyncIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ubntAirSyncIfIndex.setStatus('current')
if mibBuilder.loadTexts: ubntAirSyncIfIndex.setDescription('Index for the ubntAirSyncTable')
ubntAirSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirSyncMode.setStatus('current')
if mibBuilder.loadTexts: ubntAirSyncMode.setDescription('airSync mode - master/slave')
ubntAirSyncCount = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirSyncCount.setStatus('current')
if mibBuilder.loadTexts: ubntAirSyncCount.setDescription('airSync client count')
ubntAirSyncDownUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirSyncDownUtil.setStatus('current')
if mibBuilder.loadTexts: ubntAirSyncDownUtil.setDescription('airSync down utilization')
ubntAirSyncUpUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirSyncUpUtil.setStatus('current')
if mibBuilder.loadTexts: ubntAirSyncUpUtil.setDescription('airSync up utilization')
ubntAirSelTable = MibTable((1, 3, 6, 1, 4, 1, 41112, 1, 4, 4), )
if mibBuilder.loadTexts: ubntAirSelTable.setStatus('current')
if mibBuilder.loadTexts: ubntAirSelTable.setDescription('airSelect protocol statistics')
ubntAirSelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 41112, 1, 4, 4, 1), ).setIndexNames((0, "UBNT-AirMAX-MIB", "ubntAirSelIfIndex"))
if mibBuilder.loadTexts: ubntAirSelEntry.setStatus('current')
if mibBuilder.loadTexts: ubntAirSelEntry.setDescription('An entry in the ubntAirSelTable')
ubntAirSelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ubntAirSelIfIndex.setStatus('current')
if mibBuilder.loadTexts: ubntAirSelIfIndex.setDescription('Index for the ubntAirSelTable')
ubntAirSelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirSelEnabled.setStatus('current')
if mibBuilder.loadTexts: ubntAirSelEnabled.setDescription('airSelect status - on/off')
ubntAirSelInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntAirSelInterval.setStatus('current')
if mibBuilder.loadTexts: ubntAirSelInterval.setDescription('airSelect hop interval (miliseconds)')
ubntWlStatTable = MibTable((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5), )
if mibBuilder.loadTexts: ubntWlStatTable.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatTable.setDescription('Wireless statistics')
ubntWlStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1), ).setIndexNames((0, "UBNT-AirMAX-MIB", "ubntWlStatIndex"))
if mibBuilder.loadTexts: ubntWlStatEntry.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatEntry.setDescription('An entry in the ubntWlStatTable')
ubntWlStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ubntWlStatIndex.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatIndex.setDescription('Index for the ubntWlStatTable')
ubntWlStatSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatSsid.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatSsid.setDescription('SSID')
ubntWlStatHideSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatHideSsid.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatHideSsid.setDescription('Hide SSID - on/off')
ubntWlStatApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatApMac.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatApMac.setDescription('AP MAC address')
ubntWlStatSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatSignal.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatSignal.setDescription('Signal strength, dBm')
ubntWlStatRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatRssi.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatRssi.setDescription('RSSI, dBm')
ubntWlStatCcq = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatCcq.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatCcq.setDescription('CCQ in %')
ubntWlStatNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatNoiseFloor.setDescription('Noise floor')
ubntWlStatTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatTxRate.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatTxRate.setDescription('TX rate')
ubntWlStatRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatRxRate.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatRxRate.setDescription('RX rate')
ubntWlStatSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatSecurity.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatSecurity.setDescription('Wireless security mode')
ubntWlStatWdsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatWdsEnabled.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatWdsEnabled.setDescription('WDS - on/off')
ubntWlStatApRepeater = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatApRepeater.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatApRepeater.setDescription('AP repeater - on/off')
ubntWlStatChanWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatChanWidth.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatChanWidth.setDescription('Channel Width')
ubntWlStatStaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntWlStatStaCount.setStatus('current')
if mibBuilder.loadTexts: ubntWlStatStaCount.setDescription('Station count')
ubntStaTable = MibTable((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7), )
if mibBuilder.loadTexts: ubntStaTable.setStatus('current')
if mibBuilder.loadTexts: ubntStaTable.setDescription('Station list')
ubntStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1), ).setIndexNames((0, "UBNT-AirMAX-MIB", "ubntWlStatIndex"), (0, "UBNT-AirMAX-MIB", "ubntStaMac"))
if mibBuilder.loadTexts: ubntStaEntry.setStatus('current')
if mibBuilder.loadTexts: ubntStaEntry.setDescription('An entry in the ubntStaEntry')
ubntStaMac = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: ubntStaMac.setStatus('current')
if mibBuilder.loadTexts: ubntStaMac.setDescription('Station MAC address')
ubntStaName = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaName.setStatus('current')
if mibBuilder.loadTexts: ubntStaName.setDescription('Station name')
ubntStaSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaSignal.setStatus('current')
if mibBuilder.loadTexts: ubntStaSignal.setDescription('Signal strength, dBm')
ubntStaNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: ubntStaNoiseFloor.setDescription('Noise floor')
ubntStaDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaDistance.setStatus('current')
if mibBuilder.loadTexts: ubntStaDistance.setDescription('Distance')
ubntStaCcq = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaCcq.setStatus('current')
if mibBuilder.loadTexts: ubntStaCcq.setDescription('CCQ in %')
ubntStaAmp = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaAmp.setStatus('current')
if mibBuilder.loadTexts: ubntStaAmp.setDescription('airMAX priority')
ubntStaAmq = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaAmq.setStatus('current')
if mibBuilder.loadTexts: ubntStaAmq.setDescription('airMAX quality')
ubntStaAmc = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaAmc.setStatus('current')
if mibBuilder.loadTexts: ubntStaAmc.setDescription('airMAX capacity')
ubntStaLastIp = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaLastIp.setStatus('current')
if mibBuilder.loadTexts: ubntStaLastIp.setDescription('Last known IP address')
ubntStaTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaTxRate.setStatus('current')
if mibBuilder.loadTexts: ubntStaTxRate.setDescription('TX rate')
ubntStaRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaRxRate.setStatus('current')
if mibBuilder.loadTexts: ubntStaRxRate.setDescription('RX rate')
ubntStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaTxBytes.setStatus('current')
if mibBuilder.loadTexts: ubntStaTxBytes.setDescription('TX bytes')
ubntStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaRxBytes.setStatus('current')
if mibBuilder.loadTexts: ubntStaRxBytes.setDescription('TX rate')
ubntStaConnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaConnTime.setStatus('current')
if mibBuilder.loadTexts: ubntStaConnTime.setDescription('Connection Time in seconds')
ubntStaLocalCINR = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaLocalCINR.setStatus('current')
if mibBuilder.loadTexts: ubntStaLocalCINR.setDescription('Local CINR')
ubntStaTxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaTxCapacity.setStatus('current')
if mibBuilder.loadTexts: ubntStaTxCapacity.setDescription('Uplink Capacity in Kbps')
ubntStaRxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaRxCapacity.setStatus('current')
if mibBuilder.loadTexts: ubntStaRxCapacity.setDescription('Downlink Capacity in Kbps')
ubntStaTxAirtime = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaTxAirtime.setStatus('current')
if mibBuilder.loadTexts: ubntStaTxAirtime.setDescription('Uplink Airtime in % multiplied by 10')
ubntStaRxAirtime = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaRxAirtime.setStatus('current')
if mibBuilder.loadTexts: ubntStaRxAirtime.setDescription('Downlink Airtime in % multiplied by 10')
ubntStaTxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 41112, 1, 4, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ubntStaTxLatency.setStatus('current')
if mibBuilder.loadTexts: ubntStaTxLatency.setDescription('Uplink Latency in milliseconds')
ubntAirMAXStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 41112, 1, 2, 2, 1)).setObjects(("UBNT-AirMAX-MIB", "ubntStaName"), ("UBNT-AirMAX-MIB", "ubntStaSignal"), ("UBNT-AirMAX-MIB", "ubntStaNoiseFloor"), ("UBNT-AirMAX-MIB", "ubntStaDistance"), ("UBNT-AirMAX-MIB", "ubntStaCcq"), ("UBNT-AirMAX-MIB", "ubntStaAmp"), ("UBNT-AirMAX-MIB", "ubntStaAmq"), ("UBNT-AirMAX-MIB", "ubntStaAmc"), ("UBNT-AirMAX-MIB", "ubntStaLastIp"), ("UBNT-AirMAX-MIB", "ubntStaTxRate"), ("UBNT-AirMAX-MIB", "ubntStaRxRate"), ("UBNT-AirMAX-MIB", "ubntStaTxBytes"), ("UBNT-AirMAX-MIB", "ubntStaRxBytes"), ("UBNT-AirMAX-MIB", "ubntStaConnTime"), ("UBNT-AirMAX-MIB", "ubntStaLocalCINR"), ("UBNT-AirMAX-MIB", "ubntStaTxCapacity"), ("UBNT-AirMAX-MIB", "ubntStaRxCapacity"), ("UBNT-AirMAX-MIB", "ubntStaTxAirtime"), ("UBNT-AirMAX-MIB", "ubntStaRxAirtime"), ("UBNT-AirMAX-MIB", "ubntStaTxLatency"), ("UBNT-AirMAX-MIB", "ubntRadioMode"), ("UBNT-AirMAX-MIB", "ubntRadioCCode"), ("UBNT-AirMAX-MIB", "ubntRadioFreq"), ("UBNT-AirMAX-MIB", "ubntRadioDfsEnabled"), ("UBNT-AirMAX-MIB", "ubntRadioTxPower"), ("UBNT-AirMAX-MIB", "ubntRadioDistance"), ("UBNT-AirMAX-MIB", "ubntRadioChainmask"), ("UBNT-AirMAX-MIB", "ubntRadioAntenna"), ("UBNT-AirMAX-MIB", "ubntRadioRssi"), ("UBNT-AirMAX-MIB", "ubntRadioRssiMgmt"), ("UBNT-AirMAX-MIB", "ubntRadioRssiExt"), ("UBNT-AirMAX-MIB", "ubntAirMaxEnabled"), ("UBNT-AirMAX-MIB", "ubntAirMaxQuality"), ("UBNT-AirMAX-MIB", "ubntAirMaxCapacity"), ("UBNT-AirMAX-MIB", "ubntAirMaxPriority"), ("UBNT-AirMAX-MIB", "ubntAirMaxNoAck"), ("UBNT-AirMAX-MIB", "ubntAirSyncMode"), ("UBNT-AirMAX-MIB", "ubntAirSyncCount"), ("UBNT-AirMAX-MIB", "ubntAirSyncDownUtil"), ("UBNT-AirMAX-MIB", "ubntAirSyncUpUtil"), ("UBNT-AirMAX-MIB", "ubntAirSelEnabled"), ("UBNT-AirMAX-MIB", "ubntAirSelInterval"), ("UBNT-AirMAX-MIB", "ubntWlStatSsid"), ("UBNT-AirMAX-MIB", "ubntWlStatHideSsid"), ("UBNT-AirMAX-MIB", "ubntWlStatApMac"), ("UBNT-AirMAX-MIB", "ubntWlStatSignal"), ("UBNT-AirMAX-MIB", "ubntWlStatRssi"), ("UBNT-AirMAX-MIB", "ubntWlStatCcq"), ("UBNT-AirMAX-MIB", "ubntWlStatNoiseFloor"), ("UBNT-AirMAX-MIB", "ubntWlStatTxRate"), ("UBNT-AirMAX-MIB", "ubntWlStatRxRate"), ("UBNT-AirMAX-MIB", "ubntWlStatSecurity"), ("UBNT-AirMAX-MIB", "ubntWlStatWdsEnabled"), ("UBNT-AirMAX-MIB", "ubntWlStatApRepeater"), ("UBNT-AirMAX-MIB", "ubntWlStatChanWidth"), ("UBNT-AirMAX-MIB", "ubntWlStatStaCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ubntAirMAXStatusGroup = ubntAirMAXStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ubntAirMAXStatusGroup.setDescription('Status and statistics for AirMax monitoring')
ubntAirMAXStatusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 41112, 1, 2, 2, 2)).setObjects(("UBNT-AirMAX-MIB", "ubntAirMAXStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ubntAirMAXStatusCompliance = ubntAirMAXStatusCompliance.setStatus('current')
if mibBuilder.loadTexts: ubntAirMAXStatusCompliance.setDescription('The compliance statement for Ubiquiti AirMax entities.')
mibBuilder.exportSymbols("UBNT-AirMAX-MIB", ubntStaRxBytes=ubntStaRxBytes, ubntWlStatIndex=ubntWlStatIndex, ubntWlStatNoiseFloor=ubntWlStatNoiseFloor, ubntStaName=ubntStaName, ubntStaTxLatency=ubntStaTxLatency, ubntAirMAX=ubntAirMAX, ubntStaAmp=ubntStaAmp, ubntWlStatStaCount=ubntWlStatStaCount, ubntRadioChainmask=ubntRadioChainmask, ubntAirSyncDownUtil=ubntAirSyncDownUtil, ubntRadioTxPower=ubntRadioTxPower, ubntWlStatSecurity=ubntWlStatSecurity, ubntStaDistance=ubntStaDistance, ubntStaNoiseFloor=ubntStaNoiseFloor, ubntWlStatTxRate=ubntWlStatTxRate, ubntStaRxCapacity=ubntStaRxCapacity, ubntWlStatHideSsid=ubntWlStatHideSsid, ubntRadioRssiMgmt=ubntRadioRssiMgmt, ubntAirSyncIfIndex=ubntAirSyncIfIndex, ubntRadioEntry=ubntRadioEntry, ubntStaEntry=ubntStaEntry, ubntAirSyncUpUtil=ubntAirSyncUpUtil, ubntStaRxAirtime=ubntStaRxAirtime, ubntAirSelEntry=ubntAirSelEntry, ubntRadioRssiExt=ubntRadioRssiExt, ubntWlStatRssi=ubntWlStatRssi, ubntRadioTable=ubntRadioTable, ubntRadioAntenna=ubntRadioAntenna, ubntStaTxCapacity=ubntStaTxCapacity, ubntRadioFreq=ubntRadioFreq, ubntWlStatEntry=ubntWlStatEntry, ubntStaTxRate=ubntStaTxRate, ubntAirMaxNoAck=ubntAirMaxNoAck, ubntStaSignal=ubntStaSignal, ubntAirSelInterval=ubntAirSelInterval, ubntWlStatRxRate=ubntWlStatRxRate, ubntRadioRssi=ubntRadioRssi, ubntAirMaxEnabled=ubntAirMaxEnabled, ubntWlStatApRepeater=ubntWlStatApRepeater, ubntWlStatChanWidth=ubntWlStatChanWidth, ubntRadioIndex=ubntRadioIndex, ubntAirSyncCount=ubntAirSyncCount, ubntAirMaxQuality=ubntAirMaxQuality, ubntAirMaxTable=ubntAirMaxTable, ubntStaTxBytes=ubntStaTxBytes, ubntRadioCCode=ubntRadioCCode, ubntAirMaxCapacity=ubntAirMaxCapacity, ubntRadioDistance=ubntRadioDistance, ubntStaConnTime=ubntStaConnTime, ubntAirMaxIfIndex=ubntAirMaxIfIndex, ubntStaAmq=ubntStaAmq, ubntAirSyncMode=ubntAirSyncMode, ubntRadioRssiTable=ubntRadioRssiTable, ubntStaLocalCINR=ubntStaLocalCINR, ubntWlStatWdsEnabled=ubntWlStatWdsEnabled, ubntStaAmc=ubntStaAmc, ubntRadioMode=ubntRadioMode, ubntWlStatTable=ubntWlStatTable, ubntAirSyncEntry=ubntAirSyncEntry, ubntWlStatCcq=ubntWlStatCcq, PYSNMP_MODULE_ID=ubntAirMAX, ubntAirMAXStatusGroup=ubntAirMAXStatusGroup, ubntWlStatSignal=ubntWlStatSignal, ubntAirMaxEntry=ubntAirMaxEntry, ubntStaMac=ubntStaMac, ubntAirSyncTable=ubntAirSyncTable, ubntWlStatSsid=ubntWlStatSsid, ubntWlStatApMac=ubntWlStatApMac, ubntStaRxRate=ubntStaRxRate, ubntRadioRssiEntry=ubntRadioRssiEntry, ubntAirSelIfIndex=ubntAirSelIfIndex, ubntRadioDfsEnabled=ubntRadioDfsEnabled, ubntRadioRssiIndex=ubntRadioRssiIndex, ubntAirSelTable=ubntAirSelTable, ubntStaLastIp=ubntStaLastIp, ubntAirMaxPriority=ubntAirMaxPriority, ubntStaTxAirtime=ubntStaTxAirtime, ubntAirSelEnabled=ubntAirSelEnabled, ubntAirMAXStatusCompliance=ubntAirMAXStatusCompliance, ubntStaCcq=ubntStaCcq, ubntStaTable=ubntStaTable)
