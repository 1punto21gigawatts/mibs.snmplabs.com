#
# PySNMP MIB module HiplexAF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HiplexAF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, enterprises, Integer32, NotificationType, TimeTicks, MibIdentifier, iso, Counter64, ModuleIdentity, Counter32, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "enterprises", "Integer32", "NotificationType", "TimeTicks", "MibIdentifier", "iso", "Counter64", "ModuleIdentity", "Counter32", "Bits", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniHiplexAF = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35))
hiplexAFObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1))
hiplexAFGlobalData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 1))
hiplexAFHostInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2))
hiplexAFSWUInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3))
hiplexAFSWUHostParamInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 4))
hiplexAFSWUHostFEPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 5))
hiplexAFSWUVolumeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6))
hiplexAFSWUApplicationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 7))
hiplexAFPubsetVolumeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 8))
hiplexAFVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFVersion.setDescription('Version of Hiplex AF agent')
hiplexAFSPVSUserid = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSPVSUserid.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSPVSUserid.setDescription('User-Id of Hiplex AF (usually TSOS)')
hiplexAFSPVSCatid = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFSPVSCatid.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSPVSCatid.setDescription('Catalog-Id of Shared Pubset containing Jobvariables and Files of Hiplex AF')
hiplexAFState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("started", 1), ("stopped", 2), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFState.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFState.setDescription('State of Hiplex AF: started: at least one main procedure has been started on one host stopped: Hiplex AF is stopped. No Hiplex AF procedure is running on any host undefined: state of Hiplex AF is unkown. Jobvariables with correct value could not be found. State may be set to stopped if it is started.')
hiplexAFTermHost = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFTermHost.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFTermHost.setDescription('BCAM Name of the system where termination request for Hiplex AF was started.')
hiplexAFHostTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFHostTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostTabNum.setDescription('number of Hosts in the availability cluster')
hiplexAFHostTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2), )
if mibBuilder.loadTexts: hiplexAFHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostTable.setDescription('The table of host in the availability cluster')
hiplexAFHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1), ).setIndexNames((0, "HiplexAF-MIB", "hiplexAFHostName"))
if mibBuilder.loadTexts: hiplexAFHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostEntry.setDescription('entry for each host')
hiplexAFHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFHostName.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostName.setDescription('BCAM Name of the system')
hiplexAFHostEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("no-event", 1), ("termination-requested", 2), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFHostEventId.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostEventId.setDescription('Request Indicator for the main procedure')
hiplexAFHostStateInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("working", 1), ("terminated", 2), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFHostStateInd.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostStateInd.setDescription('State of the main procedure. Indicator for partitipation of the host. State may only be set to working if it is terminated.')
hiplexAFHostOperatorRole = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFHostOperatorRole.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostOperatorRole.setDescription('Value of parameter Operator-Role of START-XAF command')
hiplexAFHostHomeCatid = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFHostHomeCatid.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostHomeCatid.setDescription('Home Catalog Id of the system')
hiplexAFHostSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFHostSystemId.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostSystemId.setDescription('SystemId of the system according to the output of the SHOW-SHARED-PUBSET-command')
hiplexAFHostBS2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFHostBS2Version.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostBS2Version.setDescription('Version of BS2000 on the system according to the output of the SHOW-SHARED-PUBSET-command')
hiplexAFHostImcatInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("check", 1), ("crash", 2), ("excat", 3), ("imcat", 4), ("mchange", 5), ("readerr", 6), ("shutdown", 7), ("wrterr", 8), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFHostImcatInd.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostImcatInd.setDescription('Sharer State of the host, according to the output of the SHOW-SHARED-PUBSET-command')
hiplexAFHostMasterSlaveInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("master", 1), ("backup", 2), ("slave", 3), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFHostMasterSlaveInd.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostMasterSlaveInd.setDescription('Sharer type of the host')
hiplexAFHostSnmpAgentStateInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("working", 1), ("not-working", 2), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFHostSnmpAgentStateInd.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFHostSnmpAgentStateInd.setDescription('State of the SNMP-Subagent. State may be set to not-working if it is working.')
hiplexAFSWUTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUTabNum.setDescription('number of Switch Units in the availability cluster')
hiplexAFSWUTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2), )
if mibBuilder.loadTexts: hiplexAFSWUTable.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUTable.setDescription('The table of host in the availability cluster')
hiplexAFSWUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1), ).setIndexNames((0, "HiplexAF-MIB", "hiplexAFSWUName"))
if mibBuilder.loadTexts: hiplexAFSWUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUEntry.setDescription('entry for each host')
hiplexAFSWUName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUName.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUName.setDescription('Name of the switch unit')
hiplexAFSWUCreaTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUCreaTime.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUCreaTime.setDescription('Creation Time of Switch Unit (configuration file)')
hiplexAFSWUWorkSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFSWUWorkSystem.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUWorkSystem.setDescription('BCAM Name of the system which presently is work system for this switch unit. Changing the value of this object will start a switch procedure.')
hiplexAFSWUVirtHost = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVirtHost.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVirtHost.setDescription('BCAM Name of the virtual host of the switch unit')
hiplexAFSWUVirtHostAct = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVirtHostAct.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVirtHostAct.setDescription('Name of the procedure for activating the routes to the virtual host')
hiplexAFSWUVirtHostDeact = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVirtHostDeact.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVirtHostDeact.setDescription('Name of the procedure for deactivating the routes to the virtual host')
hiplexAFSWUFEPNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUFEPNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUFEPNumber.setDescription('Number of front end processors')
hiplexAFSWUPubsetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUPubsetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUPubsetNumber.setDescription('Number of non-shared pubsets used by applications of the switch unit')
hiplexAFSWUApplicationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUApplicationNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUApplicationNumber.setDescription('Number of applications contained in this switch unit')
hiplexAFSWUHostParamTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 4, 1), )
if mibBuilder.loadTexts: hiplexAFSWUHostParamTable.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostParamTable.setDescription('The table of host specific Parameters of Switch Units')
hiplexAFSWUHostParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 4, 1, 1), ).setIndexNames((0, "HiplexAF-MIB", "hiplexAFSWUName"), (0, "HiplexAF-MIB", "hiplexAFHostName"))
if mibBuilder.loadTexts: hiplexAFSWUHostParamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostParamEntry.setDescription('entry for each host')
hiplexAFSWUHostParamEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("no-action", 1), ("pass-over", 2), ("take-over", 3), ("terminate", 4), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUHostParamEventId.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostParamEventId.setDescription('Last action of the switch unit on the system')
hiplexAFSWUHostParamStateInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("work", 1), ("standby", 2), ("crashed", 3), ("terminated", 4), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFSWUHostParamStateInd.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostParamStateInd.setDescription('State of the Switch Unit. Value terminated may be changed to work or standby')
hiplexAFSWUHostParamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFSWUHostParamPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostParamPriority.setDescription('Priority of the host in case of an automatic switch')
hiplexAFSWUHostParamOperatorRole = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFSWUHostParamOperatorRole.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostParamOperatorRole.setDescription('Value of parameter Operator-Role of START-SWITCH-UNIT command')
hiplexAFSWUHostFEPTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUHostFEPTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostFEPTabNum.setDescription('number of FEP Entries')
hiplexAFSWUHostFEPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 5, 2), )
if mibBuilder.loadTexts: hiplexAFSWUHostFEPTable.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostFEPTable.setDescription('The table of parameters of switch units concerning front end processors')
hiplexAFSWUHostFEPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 5, 2, 1), ).setIndexNames((0, "HiplexAF-MIB", "hiplexAFSWUName"), (0, "HiplexAF-MIB", "hiplexAFHostName"), (0, "HiplexAF-MIB", "hiplexAFSWUHostFEPIndex"))
if mibBuilder.loadTexts: hiplexAFSWUHostFEPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostFEPEntry.setDescription('Entry describing a relation between a switch units and front end processor')
hiplexAFSWUHostFEPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUHostFEPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostFEPIndex.setDescription('Index of Front End Processor')
hiplexAFSWUHostFEPName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFSWUHostFEPName.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostFEPName.setDescription('BCAM Name of Front End Processor')
hiplexAFSWUHostFEPPortnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFSWUHostFEPPortnumber.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUHostFEPPortnumber.setDescription('Number of Port used for the System')
hiplexAFSWUVolumeTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVolumeTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVolumeTabNum.setDescription('number of data volumes ')
hiplexAFSWUVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6, 2), )
if mibBuilder.loadTexts: hiplexAFSWUVolumeTable.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVolumeTable.setDescription('Table of data volumes')
hiplexAFSWUVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6, 2, 1), ).setIndexNames((0, "HiplexAF-MIB", "hiplexAFSWUName"), (0, "HiplexAF-MIB", "hiplexAFSWUVolumeName"))
if mibBuilder.loadTexts: hiplexAFSWUVolumeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVolumeEntry.setDescription('Entry for each data volume')
hiplexAFSWUVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVolumeName.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVolumeName.setDescription('Name of Data Volume')
hiplexAFSWUVolumeTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVolumeTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVolumeTypeName.setDescription('Name of Data Volumetype ')
hiplexAFSWUVolumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("shared-pubset", 1), ("pubset", 2), ("private-disk", 3), ("by-user", 4), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVolumeType.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVolumeType.setDescription('Type of data volume')
hiplexAFSWUVolumeImportProc = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVolumeImportProc.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVolumeImportProc.setDescription('Name of procedure importing data volume')
hiplexAFSWUVolumeExportProc = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUVolumeExportProc.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUVolumeExportProc.setDescription('Name of procedure exporting data volume')
hiplexAFSWUApplicationTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUApplicationTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUApplicationTabNum.setDescription('Number of applications')
hiplexAFSWUApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 7, 2), )
if mibBuilder.loadTexts: hiplexAFSWUApplicationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUApplicationTable.setDescription('Table of applications')
hiplexAFSWUApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 7, 2, 1), ).setIndexNames((0, "HiplexAF-MIB", "hiplexAFSWUName"), (0, "HiplexAF-MIB", "hiplexAFSWUApplicationMonJVName"))
if mibBuilder.loadTexts: hiplexAFSWUApplicationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUApplicationEntry.setDescription('entry for each application')
hiplexAFSWUApplicationMonJVName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUApplicationMonJVName.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUApplicationMonJVName.setDescription('Name of jobvariable monitoring application')
hiplexAFSWUApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("job", 1), ("utm", 2), ("bcam", 3), ("by-user", 4), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUApplicationType.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUApplicationType.setDescription('Application type')
hiplexAFSWUApplicationStartProc = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUApplicationStartProc.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUApplicationStartProc.setDescription('Procedure used to start the application')
hiplexAFSWUApplicationStopProc = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 7, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFSWUApplicationStopProc.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFSWUApplicationStopProc.setDescription('Procedure used to stop the application')
hiplexAFTrapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 20), )
if mibBuilder.loadTexts: hiplexAFTrapFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFTrapFilterTable.setDescription('This double-indexed table is a matrix containing an indicator for each pair (host1,host2). A HIPLEX-AF subagent residing on host1 will send traps concerning events of host2 only if the indicator has value yes.')
hiplexAFTrapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 20, 1), ).setIndexNames((0, "HiplexAF-MIB", "hiplexAFTrapFilterHost1Name"), (0, "HiplexAF-MIB", "hiplexAFTrapFilterHost2Name"))
if mibBuilder.loadTexts: hiplexAFTrapFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFTrapFilterEntry.setDescription('Entry for each pair (host1,host2)')
hiplexAFTrapFilterHost1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 20, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFTrapFilterHost1Name.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFTrapFilterHost1Name.setDescription('BCAM Name of the system where HIPLEX-AF subagent is running')
hiplexAFTrapFilterHost2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiplexAFTrapFilterHost2Name.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFTrapFilterHost2Name.setDescription('BCAM Name of the system in the HIPLEX-AF cluster.')
hiplexAFTrapFilterTrapSendInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 35, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiplexAFTrapFilterTrapSendInd.setStatus('mandatory')
if mibBuilder.loadTexts: hiplexAFTrapFilterTrapSendInd.setDescription('yes: traps will be sent. no: no traps will be sent.')
hiplexAFTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 35, 2))
hiplexAFStart = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 35, 2) + (0,301)).setObjects(("HiplexAF-MIB", "hiplexAFHostName"))
if mibBuilder.loadTexts: hiplexAFStart.setDescription('Hiplex AF main procedure has been started.')
hiplexAFSWUStart = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 35, 2) + (0,302)).setObjects(("HiplexAF-MIB", "hiplexAFSWUHostParamStateInd"), ("HiplexAF-MIB", "hiplexAFSWUName"), ("HiplexAF-MIB", "hiplexAFHostName"))
if mibBuilder.loadTexts: hiplexAFSWUStart.setDescription('Switch unit procedure has been started.')
hiplexAFStop = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 35, 2) + (0,303)).setObjects(("HiplexAF-MIB", "hiplexAFTermHost"))
if mibBuilder.loadTexts: hiplexAFStop.setDescription('Termination of Hiplex AF has been started.')
hiplexAFCrash = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 35, 2) + (0,304)).setObjects(("HiplexAF-MIB", "hiplexAFHostName"))
if mibBuilder.loadTexts: hiplexAFCrash.setDescription('A system has been terminated abnormally.')
hiplexAFSWUAppStop = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 35, 2) + (0,305)).setObjects(("HiplexAF-MIB", "hiplexAFSWUHostParamStateInd"), ("HiplexAF-MIB", "hiplexAFSWUName"), ("HiplexAF-MIB", "hiplexAFHostName"))
if mibBuilder.loadTexts: hiplexAFSWUAppStop.setDescription('The applications of a switch unit will be stopped.')
hiplexAFSWUAppStart = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 35, 2) + (0,306)).setObjects(("HiplexAF-MIB", "hiplexAFSWUHostParamStateInd"), ("HiplexAF-MIB", "hiplexAFSWUName"), ("HiplexAF-MIB", "hiplexAFHostName"))
if mibBuilder.loadTexts: hiplexAFSWUAppStart.setDescription('The applications of a switch unit will be started.')
hiplexAFSWUStop = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 35, 2) + (0,307)).setObjects(("HiplexAF-MIB", "hiplexAFSWUHostParamStateInd"), ("HiplexAF-MIB", "hiplexAFSWUName"), ("HiplexAF-MIB", "hiplexAFHostName"))
if mibBuilder.loadTexts: hiplexAFSWUStop.setDescription('Switch unit procedure has been stopped.')
mibBuilder.exportSymbols("HiplexAF-MIB", hiplexAFSWUAppStart=hiplexAFSWUAppStart, hiplexAFHostTabNum=hiplexAFHostTabNum, hiplexAFSWUVirtHostDeact=hiplexAFSWUVirtHostDeact, hiplexAFHostSnmpAgentStateInd=hiplexAFHostSnmpAgentStateInd, hiplexAFHostMasterSlaveInd=hiplexAFHostMasterSlaveInd, hiplexAFTrapFilterTrapSendInd=hiplexAFTrapFilterTrapSendInd, hiplexAFHostBS2Version=hiplexAFHostBS2Version, hiplexAFSWUApplicationMonJVName=hiplexAFSWUApplicationMonJVName, hiplexAFSWUApplicationType=hiplexAFSWUApplicationType, hiplexAFHostEventId=hiplexAFHostEventId, hiplexAFSWUTabNum=hiplexAFSWUTabNum, hiplexAFSWUHostParamEventId=hiplexAFSWUHostParamEventId, hiplexAFSPVSUserid=hiplexAFSPVSUserid, hiplexAFHostOperatorRole=hiplexAFHostOperatorRole, hiplexAFState=hiplexAFState, hiplexAFSWUApplicationInfo=hiplexAFSWUApplicationInfo, hiplexAFStart=hiplexAFStart, hiplexAFTrapFilterEntry=hiplexAFTrapFilterEntry, hiplexAFHostTable=hiplexAFHostTable, hiplexAFSWUWorkSystem=hiplexAFSWUWorkSystem, hiplexAFSWUVolumeTable=hiplexAFSWUVolumeTable, hiplexAFTrapFilterHost1Name=hiplexAFTrapFilterHost1Name, hiplexAFSWUVolumeType=hiplexAFSWUVolumeType, hiplexAFGlobalData=hiplexAFGlobalData, hiplexAFSPVSCatid=hiplexAFSPVSCatid, hiplexAFSWUApplicationEntry=hiplexAFSWUApplicationEntry, hiplexAFHostEntry=hiplexAFHostEntry, hiplexAFSWUEntry=hiplexAFSWUEntry, hiplexAFSWUAppStop=hiplexAFSWUAppStop, hiplexAFHostSystemId=hiplexAFHostSystemId, hiplexAFSWUVolumeName=hiplexAFSWUVolumeName, hiplexAFSWUPubsetNumber=hiplexAFSWUPubsetNumber, hiplexAFTermHost=hiplexAFTermHost, hiplexAFSWUVolumeTypeName=hiplexAFSWUVolumeTypeName, hiplexAFStop=hiplexAFStop, hiplexAFSWUApplicationStopProc=hiplexAFSWUApplicationStopProc, hiplexAFTrapFilterTable=hiplexAFTrapFilterTable, hiplexAFSWUHostParamTable=hiplexAFSWUHostParamTable, hiplexAFSWUHostFEPTabNum=hiplexAFSWUHostFEPTabNum, hiplexAFHostImcatInd=hiplexAFHostImcatInd, hiplexAFSWUHostParamEntry=hiplexAFSWUHostParamEntry, hiplexAFSWUVolumeInfo=hiplexAFSWUVolumeInfo, hiplexAFTraps=hiplexAFTraps, hiplexAFSWUHostFEPPortnumber=hiplexAFSWUHostFEPPortnumber, hiplexAFSWUApplicationTabNum=hiplexAFSWUApplicationTabNum, hiplexAFVersion=hiplexAFVersion, hiplexAFPubsetVolumeInfo=hiplexAFPubsetVolumeInfo, hiplexAFSWUCreaTime=hiplexAFSWUCreaTime, hiplexAFHostName=hiplexAFHostName, hiplexAFSWUFEPNumber=hiplexAFSWUFEPNumber, hiplexAFSWUHostFEPInfo=hiplexAFSWUHostFEPInfo, hiplexAFSWUVirtHostAct=hiplexAFSWUVirtHostAct, hiplexAFSWUHostFEPTable=hiplexAFSWUHostFEPTable, hiplexAFSWUHostParamPriority=hiplexAFSWUHostParamPriority, hiplexAFSWUVirtHost=hiplexAFSWUVirtHost, hiplexAFObjects=hiplexAFObjects, hiplexAFSWUInfo=hiplexAFSWUInfo, hiplexAFHostStateInd=hiplexAFHostStateInd, hiplexAFSWUTable=hiplexAFSWUTable, sniProductMibs=sniProductMibs, hiplexAFCrash=hiplexAFCrash, hiplexAFSWUVolumeImportProc=hiplexAFSWUVolumeImportProc, hiplexAFSWUStart=hiplexAFSWUStart, hiplexAFSWUHostFEPName=hiplexAFSWUHostFEPName, hiplexAFSWUName=hiplexAFSWUName, hiplexAFSWUHostParamOperatorRole=hiplexAFSWUHostParamOperatorRole, hiplexAFSWUHostFEPIndex=hiplexAFSWUHostFEPIndex, hiplexAFSWUApplicationTable=hiplexAFSWUApplicationTable, hiplexAFSWUApplicationStartProc=hiplexAFSWUApplicationStartProc, hiplexAFSWUApplicationNumber=hiplexAFSWUApplicationNumber, hiplexAFSWUVolumeTabNum=hiplexAFSWUVolumeTabNum, hiplexAFSWUHostParamStateInd=hiplexAFSWUHostParamStateInd, hiplexAFSWUHostFEPEntry=hiplexAFSWUHostFEPEntry, hiplexAFSWUHostParamInfo=hiplexAFSWUHostParamInfo, hiplexAFHostInfo=hiplexAFHostInfo, sniHiplexAF=sniHiplexAF, hiplexAFSWUStop=hiplexAFSWUStop, hiplexAFTrapFilterHost2Name=hiplexAFTrapFilterHost2Name, sni=sni, hiplexAFHostHomeCatid=hiplexAFHostHomeCatid, hiplexAFSWUVolumeEntry=hiplexAFSWUVolumeEntry, hiplexAFSWUVolumeExportProc=hiplexAFSWUVolumeExportProc)
