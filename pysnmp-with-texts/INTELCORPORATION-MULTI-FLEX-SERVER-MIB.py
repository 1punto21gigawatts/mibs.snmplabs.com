#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
instanceId, user, groups, eventType, detail, component, eventId, notifications, components, severity, regModule = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "instanceId", "user", "groups", "eventType", "detail", "component", "eventId", "notifications", "components", "severity", "regModule")
Power, IdromBinary16 = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "Power", "IdromBinary16")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, Integer32, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, Gauge32, Unsigned32, NotificationType, IpAddress, TimeTicks, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "Gauge32", "Unsigned32", "NotificationType", "IpAddress", "TimeTicks", "ModuleIdentity", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
multiFlexServerMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 10))
multiFlexServerMibModule.setRevisions(('2007-08-21 17:00', '2007-08-16 13:30', '2007-07-16 11:30', '2007-06-07 20:30', '2007-06-07 13:30', '2007-05-30 13:30', '2007-05-30 10:30', '2007-04-09 10:30', '2007-03-12 18:30', '2007-03-06 10:30', '2007-02-22 17:00', '2006-11-01 10:00', '2006-09-29 15:29', '2006-09-28 17:32', '2006-09-01 06:24',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: multiFlexServerMibModule.setRevisionsDescriptions(('Renamed eventPolicyId to eventId', 'Reordered Revision to reverse chronological as some browsers choke, cleaned up some other simple nit-picky errors Added eventPolicyId to the notification group ', 'Dropped chassisBmcFirmwareVersion as it is really the same information as the the CMM, which manages the chassis.', 'Added the IdromBinary16 to represent the asset tag, part number, and serial number fields within the IDROM fields.', 'Corrected maximum/nominal IDROM parameters and comments', "Fixed location of the chassisNotificationGroup (previously typo'd to the wrong tree)", 'Added initial generic notification/trap type', 'Added overlooked BMC Version information', 'Moved FirmwareBundleId from chassis to CMM Tree. Data now complies with IDROM (DID/DSD) information. Renumbered / reorganized accordingly', "Removed chassisVersion & chassisUpgradeFirmware at architects' request Renumbered/resequenced entries accordingly", 'Renamed MIB file and updated internal relevance to formal product name Multi-Flex Server', "Changed 'theChassis' to 'chassis'", 'Rearranged the Promise MIB information and morphed it into our format. Removed either superfluous or undesired objects.', "Removed codename references and 'global prefixing.' Created and moved Textual Conventions to own module.", 'Parceled out the sub components to their own modules.',))
if mibBuilder.loadTexts: multiFlexServerMibModule.setLastUpdated('200708211700Z')
if mibBuilder.loadTexts: multiFlexServerMibModule.setOrganization('Intel Corporation')
if mibBuilder.loadTexts: multiFlexServerMibModule.setContactInfo('Brian Kurle Intel Corporation JF5-2-C3 Tel: 503-712-5032 E-Mail: brianx.j.kurle@intel.com')
if mibBuilder.loadTexts: multiFlexServerMibModule.setDescription('Managment access to Multi-Flex Server chassis. There is still some question where under the products tree this belongs the chassisManagement tree would be logical *if* there is possibility of either the Multi-Flex Server chassis will be allowed a 3rd party CMM, or if the CMM may be put in a 3rd party chassis. It appears that initially that neither is the case and that Multi-Flex Server will remain solely an SMB unit. Thus, it may be placed by itself under the smb tree')
chassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10))
if mibBuilder.loadTexts: chassis.setStatus('current')
if mibBuilder.loadTexts: chassis.setDescription('chassis for the Multi-Flex Server product. Container for chassis specific information as well as all components logically contained within.')
chassisVendor = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisVendor.setStatus('current')
if mibBuilder.loadTexts: chassisVendor.setDescription('Device manufacturer')
chassisMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMfgDate.setStatus('current')
if mibBuilder.loadTexts: chassisMfgDate.setDescription('Manufacture date/time')
chassisDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisDeviceName.setStatus('current')
if mibBuilder.loadTexts: chassisDeviceName.setDescription('Device Name')
chassisPart = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 4), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPart.setStatus('current')
if mibBuilder.loadTexts: chassisPart.setDescription('Device Part Number')
chassisSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 5), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSerialNo.setStatus('current')
if mibBuilder.loadTexts: chassisSerialNo.setDescription('Device Serial Number')
chassisMaximumPower = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 6), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMaximumPower.setStatus('current')
if mibBuilder.loadTexts: chassisMaximumPower.setDescription('Static maximum power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Maximum power generation/consumption not known or specified')
chassisNominalPower = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 7), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNominalPower.setStatus('current')
if mibBuilder.loadTexts: chassisNominalPower.setDescription('Static Nominal power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Nominal power generation/consumption not known or specified')
chassisAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 8), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisAssetTag.setStatus('current')
if mibBuilder.loadTexts: chassisAssetTag.setDescription('Asset Tag # of device')
chassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 10)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassisVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassisMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassisDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassisPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassisSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassisMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassisNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassisAssetTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisGroup = chassisGroup.setStatus('current')
if mibBuilder.loadTexts: chassisGroup.setDescription('Root level objects for the chassis.')
genericChassisEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 0, 10)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "component"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "severity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "eventType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "user"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "instanceId"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "detail"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "eventId"))
if mibBuilder.loadTexts: genericChassisEvent.setStatus('current')
if mibBuilder.loadTexts: genericChassisEvent.setDescription('Generic event reporting')
chassisNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 110)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "genericChassisEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisNotificationGroup = chassisNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: chassisNotificationGroup.setDescription('Chassis Related Events')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", multiFlexServerMibModule=multiFlexServerMibModule, PYSNMP_MODULE_ID=multiFlexServerMibModule, chassisNominalPower=chassisNominalPower, chassisDeviceName=chassisDeviceName, genericChassisEvent=genericChassisEvent, chassisNotificationGroup=chassisNotificationGroup, chassisAssetTag=chassisAssetTag, chassisSerialNo=chassisSerialNo, chassisPart=chassisPart, chassis=chassis, chassisVendor=chassisVendor, chassisGroup=chassisGroup, chassisMaximumPower=chassisMaximumPower, chassisMfgDate=chassisMfgDate)
