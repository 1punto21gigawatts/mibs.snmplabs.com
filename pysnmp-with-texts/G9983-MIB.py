#
# PySNMP MIB module G9983-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G9983-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
HCPerfTimeElapsed, HCPerfValidIntervals, HCPerfIntervalCount, HCPerfInvalidIntervals, HCPerfCurrentCount = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfTimeElapsed", "HCPerfValidIntervals", "HCPerfIntervalCount", "HCPerfInvalidIntervals", "HCPerfCurrentCount")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter32, TimeTicks, Counter64, NotificationType, Bits, IpAddress, MibIdentifier, iso, ObjectIdentity, Gauge32, Integer32, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "TimeTicks", "Counter64", "NotificationType", "Bits", "IpAddress", "MibIdentifier", "iso", "ObjectIdentity", "Gauge32", "Integer32", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
g9983MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 210))
g9983MIB.setRevisions(('2013-02-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: g9983MIB.setRevisionsDescriptions(('Initial version, published as RFC 6766.',))
if mibBuilder.loadTexts: g9983MIB.setLastUpdated('201302200000Z')
if mibBuilder.loadTexts: g9983MIB.setOrganization('IETF ADSL MIB Working Group')
if mibBuilder.loadTexts: g9983MIB.setContactInfo('WG charter: http://datatracker.ietf.org/wg/adslmib/charter/ Mailing Lists: General Discussion: adslmib@ietf.org To Subscribe: adslmib-request@ietf.org In Body: subscribe your_email_address Chair: Menachem Dodge Postal: ECI Telecom, Ltd. 30 Hasivim St. Petach-Tikva 4951169 Israel Phone: +972-3-926-8421 EMail: menachemdodge1@gmail.com Editor: Edward Beili Postal: Actelis Networks, Inc. 25 Bazel St., P.O.B. 10173 Petach-Tikva 49103 Israel Phone: +972-3-924-3491 EMail: edward.beili@actelis.com')
if mibBuilder.loadTexts: g9983MIB.setDescription("The objects in this MIB module are used to manage the multi-pair bonded xDSL interfaces using time-division inverse multiplexing (TDIM), as defined in ITU-T Recommendation G.998.3 (G.Bond/TDIM). This MIB module MUST be used in conjunction with the GBOND-MIB module, common to all G.Bond technologies. The following references are used throughout this MIB module: [G.998.3] refers to: ITU-T Recommendation G.998.3: 'Multi-pair bonding using time-division inverse multiplexing', January 2005. [TR-159] refers to: Broadband Forum Technical Report: 'Management Framework for xDSL Bonding', December 2008. Naming Conventions: BCE - Bonding Channel Entity BTU - Bonding Terminating Unit BTU-C - Bonding Terminating Unit, CO side BTU-R - Bonding Terminating Unit, Remote Terminal (CPE) side CO - Central Office CPE - Customer Premises Equipment GBS - Generic Bonding Sub-layer GBS-C - Generic Bonding Sub-layer, CO side GBS-R - Generic Bonding Sub-layer, Remote Terminal (CPE) side SNR - Signal to Noise Ratio Copyright (c) 2013 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).")
g9983Objects = MibIdentifier((1, 3, 6, 1, 2, 1, 210, 1))
g9983Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 210, 2))
g9983Port = MibIdentifier((1, 3, 6, 1, 2, 1, 210, 1, 1))
class G9983SvcIndex(TextualConvention, Unsigned32):
    description = 'A unique value, greater than zero, for each service defined in the managed G.Bond/TDIM port. It is RECOMMENDED that values be assigned contiguously starting from 1. The value for each service MUST remain constant at least from one re-initialization of the local management subsystem to the next re-initialization.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 255)

class G9983SvcIndexList(TextualConvention, OctetString):
    description = "This textual convention represents a continuous ordered list of all the services defined for the managed G.Bond/TDIM port. The value of this object is a concatenation of zero or more (up to 60) octets, where each octet contains an 8-bit G9983SvcIndex value, identifying a particular service. An octet's position reflects the associated service position and its priority in the G.Bond/TDIM frame, with the first octet being the first service of highest priority. A zero-length octet string is object-specific and MUST therefore be defined as part of the description of any object that uses this syntax. Examples of the usage of a zero-length value might include situations where an object using this textual convention is irrelevant for a specific G.Bond/TDIM port type or where no services have been defined for this port."
    status = 'current'
    displayHint = '1d:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 60)

class G9983SvcOrderIndex(TextualConvention, Unsigned32):
    description = 'A unique value, greater than zero, for each service defined in the managed G.Bond/TDIM port, showing its relative position inside the G.Bond/TDIM frame.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 60)

g9983PortNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 210, 1, 1, 0))
g9983SvcUp = NotificationType((1, 3, 6, 1, 2, 1, 210, 1, 1, 0, 1)).setObjects(("G9983-MIB", "g9983OperSvcIdx"), ("G9983-MIB", "g9983SvcIfIdx"))
if mibBuilder.loadTexts: g9983SvcUp.setStatus('current')
if mibBuilder.loadTexts: g9983SvcUp.setDescription("This notification indicates that a service, indicated by the g9983OperSvcIdx (mapped to a particular interface indicated by the g9983SvcIfIdx), in a particular G.Bond/TDIM port is passing traffic. This notification is generated (unless disabled or dropped by the rate-limiting mechanism) when the g9983OperSvcState object has left the 'down' state, while the G.Bond/TDIM port state (the ifOperStatus of the IF-MIB) is 'up'. Generation of this notification is controlled by the g9983PortConfSvcUpDownEnable object. This object maps to the TR-159 notification nServiceUp.")
if mibBuilder.loadTexts: g9983SvcUp.setReference('[TR-159], Section 5.5.5.7')
g9983SvcDown = NotificationType((1, 3, 6, 1, 2, 1, 210, 1, 1, 0, 2)).setObjects(("G9983-MIB", "g9983OperSvcIdx"), ("G9983-MIB", "g9983SvcIfIdx"))
if mibBuilder.loadTexts: g9983SvcDown.setStatus('current')
if mibBuilder.loadTexts: g9983SvcDown.setDescription("This notification indicates that a service indicated by the g9983OperSvcIdx (mapped to a particular interface indicated by the g9983SvcIfIdx) in a particular G.Bond/TDIM port has stopped passing traffic. This notification is generated (unless disabled or dropped by the rate-limiting mechanism), when the g9983OperSvcState object has entered the 'down' state, while the G.Bond/TDIM port state (the ifOperStatus of the IF-MIB) is 'up'. Generation of this notification is controlled by the g9983PortConfSvcUpDownEnable object. This object maps to the TR-159 notification nServiceDown.")
if mibBuilder.loadTexts: g9983SvcDown.setReference('[TR-159], Section 5.5.5.8')
g9983PortConfTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 1), )
if mibBuilder.loadTexts: g9983PortConfTable.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfTable.setDescription('Table for configuration of G.Bond/TDIM ports. Entries in this table MUST be maintained in a persistent manner.')
g9983PortConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9983PortConfEntry.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfEntry.setDescription('An entry in the G.Bond/TDIM Port Configuration table. Each entry represents a G.Bond/TDIM port indexed by the ifIndex. Additional configuration parameters are available via the gBondPortConfEntry of the GBOND-MIB. Note that a G.Bond/TDIM port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
g9983PortConfFecAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9983PortConfFecAdminState.setReference('[TR-159], Section 5.5.4.5; [G.998.3], Appendix II, B-X')
if mibBuilder.loadTexts: g9983PortConfFecAdminState.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfFecAdminState.setDescription("A desired state of the OPTIONAL Forward Error Correction (FEC) function of the G.Bond/TDIM port. A value of 'false' indicates that the FEC function SHALL be disabled. A value of 'true' indicates that the FEC function SHALL be enabled, if supported by the G.Bond/TDIM port, as indicated by the g9983PortCapFecSupported object. The g9983PortStatFecOperState object indicates the current operational state of the FEC function. For the GBS-R ports, the value of this object cannot be changed directly. This value may be changed as a result of a write operation on the g9983PortCapFecSupported object of a remote GBS-C. Modifications of this object MUST be performed when the link is 'down'. Attempts to change this object MUST be rejected if the link is 'up' or initializing, or if it is a GBS-R. This object maps to the TR-159/G.998.3 attribute aFECAdminState.")
g9983PortConfFecWordSize = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 255), ))).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9983PortConfFecWordSize.setReference('[TR-159], Section 5.5.4.7; [G.998.3], Appendix II, B-XI')
if mibBuilder.loadTexts: g9983PortConfFecWordSize.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfFecWordSize.setDescription("A FEC code word size, in octets, for G.Bond/TDIM ports supporting the FEC function. This object is read-write for the GBS-C ports and read-only for the GBS-R. A value of zero SHALL be returned if the FEC function is disabled (via g9983PortConfFecAdminState) or not supported. Changing of the FEC code word size MUST be performed when the FEC-enabled link is 'down'. Attempts to change this object MUST be rejected if the link is 'up' or initializing or if the FEC function is disabled/not supported. This object maps to the TR-159/G.998.3 attribute aFECWordSize.")
g9983PortConfFecRedundancySize = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ))).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9983PortConfFecRedundancySize.setReference('[TR-159], Section 5.5.4.8; [G.998.3], Appendix II, B-XII')
if mibBuilder.loadTexts: g9983PortConfFecRedundancySize.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfFecRedundancySize.setDescription("A FEC redundancy word size, in octets, for G.Bond/TDIM ports supporting the FEC function. This object is read-write for the GBS-C ports and read-only for the GBS-R. A value of zero SHALL be returned if the FEC function is disabled (via g9983PortConfFecAdminState) or not supported. Changing of the FEC redundancy word size MUST be performed when the FEC-enabled link is 'down'. Attempts to change this object MUST be rejected if the link is 'up' or initializing or if the FEC function is disabled/not supported. This object maps to the TR-159/G.998.3 attribute aFECRedundancySize.")
g9983PortConfFecInterleaverType = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("block", 1), ("convolution", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9983PortConfFecInterleaverType.setReference('[TR-159], Section 5.5.4.9; [G.998.3], Appendix II, B-XIII')
if mibBuilder.loadTexts: g9983PortConfFecInterleaverType.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfFecInterleaverType.setDescription("An Interleaver type for G.Bond/TDIM ports supporting the FEC function. This object is read-write for the GBS-C ports and read-only for the GBS-R. A value of none(0) SHALL be returned if the FEC function is disabled (via g9983PortConfFecAdminState) or not supported. Changing of the Interleaver type MUST be performed when the FEC-enabled link is 'down'. Attempts to change this object MUST be rejected if the link is 'up' or initializing or if the FEC function is disabled/not supported. This object maps to the TR-159/G.998.3 attribute aFECInterleaverType.")
g9983PortConfFecInterleaverDepth = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(6, 6), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(24, 24), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(96, 96), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9983PortConfFecInterleaverDepth.setReference('[TR-159], Section 5.5.4.10; [G.998.3], Appendix II, B-XIV')
if mibBuilder.loadTexts: g9983PortConfFecInterleaverDepth.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfFecInterleaverDepth.setDescription("An Interleaver depth for G.Bond/TDIM ports supporting the FEC function. This object is read-write for the GBS-C ports and read-only for the GBS-R. A value of zero SHALL be returned if the FEC function is disabled (via g9983PortConfFecAdminState) or not supported. Changing of the Interleaver depth MUST be performed when the FEC-enabled link is 'down'. Attempts to change this object MUST be rejected if the link is 'up' or initializing or if the FEC function is disabled/not supported. This object maps to the TR-159/G.998.3 attribute aFECInterleaverDepth.")
g9983PortConfAdminServices = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 1, 1, 6), G9983SvcIndexList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9983PortConfAdminServices.setReference('[G.998.3], Sections 10.2.3, 13.3.4.6-13.3.4.11')
if mibBuilder.loadTexts: g9983PortConfAdminServices.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfAdminServices.setDescription("Desired list of services for a G.Bond/TDIM port. This object is a list of pointers to entries in the g9983SvcTable. The value of this object is a continuous ordered list of up to 60 indices (g9983SvcIdx) of the active services carried via the G.Bond/TDIM link. The position of a service in the list determines its relative priority in cases of bandwidth degradation -- the priority decreases towards the end of the list, which means that the last service in the list would be suspended first when the bandwidth degrades. This object is writable and readable for the GBS-C ports. It is irrelevant for the GBS-R ports -- a zero-length octet string SHALL be returned on an attempt to read this object, and an attempt to change this object MUST be rejected in this case. Note that the current operational service list is available via the g9983OperSvcTable object. This object for a GBS-C port MAY be modified independently of the link's state, i.e., in-service and out-of-service. Attempts to set this object to a list with a member value that is not the value of the index for an active entry in the corresponding g9983SvcTable table MUST be rejected.")
g9983PortConfSvcUpDownEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g9983PortConfSvcUpDownEnable.setReference('[TR-159], Section 5.5.5.6')
if mibBuilder.loadTexts: g9983PortConfSvcUpDownEnable.setStatus('current')
if mibBuilder.loadTexts: g9983PortConfSvcUpDownEnable.setDescription('Indicates whether g9983SvcUp and g9983SvcDown notifications should be generated for this interface. A value of true(1) indicates that the notifications are enabled. A value of false(2) indicates that the notifications are disabled. This object maps to the TR-159 attribute aServiceUpDownEnable.')
g9983PortCapTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 2), )
if mibBuilder.loadTexts: g9983PortCapTable.setStatus('current')
if mibBuilder.loadTexts: g9983PortCapTable.setDescription('Table for capabilities of G.Bond/TDIM ports. Entries in this table MUST be maintained in a persistent manner.')
g9983PortCapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9983PortCapEntry.setStatus('current')
if mibBuilder.loadTexts: g9983PortCapEntry.setDescription('An entry in the G.Bond/TDIM Port Capability table. Each entry represents a G.Bond/TDIM port indexed by the ifIndex. Additional capabilities are available via the gBondPortCapabilityEntry of the GBOND-MIB. Note that a G.Bond/TDIM port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
g9983PortCapFecSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortCapFecSupported.setReference('[TR-159], Section 5.5.4.4; [G.998.3], Appendix II, B-VI')
if mibBuilder.loadTexts: g9983PortCapFecSupported.setStatus('current')
if mibBuilder.loadTexts: g9983PortCapFecSupported.setDescription('FEC and Interleaver capability of the G.Bond/TDIM port. This object has a value of true(1) when the port supports the FEC and Interleaver function. A value of false(2) is returned when the port does not support the FEC and Interleaver function. This object maps to the TR-159/G.998.3 attribute aFECSupported.')
g9983PortCapFecMaxWordSize = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 255), ))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortCapFecMaxWordSize.setReference('[TR-159], Section 5.5.4.11; [G.998.3], Appendix II, B-XI')
if mibBuilder.loadTexts: g9983PortCapFecMaxWordSize.setStatus('current')
if mibBuilder.loadTexts: g9983PortCapFecMaxWordSize.setDescription('A maximum supported FEC code word size, in octets, for G.Bond/TDIM ports supporting the FEC function. A value of zero SHALL be returned if the FEC function is not supported. This object maps to the TR-159 attribute aFECWordSize.')
g9983PortCapFecMaxRedundancySize = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(20, 20), ))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortCapFecMaxRedundancySize.setReference('[TR-159], Section 5.5.4.12; [G.998.3], Appendix II, B-XII')
if mibBuilder.loadTexts: g9983PortCapFecMaxRedundancySize.setStatus('current')
if mibBuilder.loadTexts: g9983PortCapFecMaxRedundancySize.setDescription('A maximum supported FEC redundancy word size, in octets, for G.Bond/TDIM ports supporting the FEC function. A value of zero SHALL be returned if the FEC function is not supported. This object maps to the TR-159 attribute aFECMaxRedundancySize.')
g9983PortCapFecInterleaverTypeSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("block", 1), ("convolution", 2), ("blockConvolution", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortCapFecInterleaverTypeSupported.setReference('[TR-159], Section 5.5.4.13; [G.998.3], Appendix II, B-XIII')
if mibBuilder.loadTexts: g9983PortCapFecInterleaverTypeSupported.setStatus('current')
if mibBuilder.loadTexts: g9983PortCapFecInterleaverTypeSupported.setDescription('Supported Interleaver types for G.Bond/TDIM ports supporting the FEC function. Possible values are: none - the port does not support interleaving block - the port supports Block Interleaver convolution - the port supports Convolution Interleaver blockConvolution - the port supports both Block Interleaver and Convolution Interleaver This object maps to the TR-159 attribute aFECInterleaverTypesSupported.')
g9983PortCapFecMaxInterleaverDepth = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(6, 6), ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), ValueRangeConstraint(16, 16), ValueRangeConstraint(24, 24), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(96, 96), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortCapFecMaxInterleaverDepth.setReference('[TR-159], Section 5.5.4.14; [G.998.3], Appendix II, B-XIV')
if mibBuilder.loadTexts: g9983PortCapFecMaxInterleaverDepth.setStatus('current')
if mibBuilder.loadTexts: g9983PortCapFecMaxInterleaverDepth.setDescription('A maximum Interleaver depth for G.Bond/TDIM ports supporting the FEC function. A value of zero SHALL be returned if the Interleaver is not supported. This object maps to the TR-159 attribute aFECMaxInterleaverDepth.')
g9983PortStatTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 3), )
if mibBuilder.loadTexts: g9983PortStatTable.setStatus('current')
if mibBuilder.loadTexts: g9983PortStatTable.setDescription('This table provides overall status information of G.Bond TDIM ports, complementing the generic status information from the ifTable of the IF-MIB and the gBondPortStatFltStatus of the GBOND-MIB. Additional status information about connected BCEs is available from the relevant line MIBs. This table contains live data from the equipment. As such, it is NOT persistent.')
g9983PortStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9983PortStatEntry.setStatus('current')
if mibBuilder.loadTexts: g9983PortStatEntry.setDescription('An entry in the G.Bond/TDIM Port Status table. Each entry represents a G.Bond/TDIM port indexed by the ifIndex. Note that a G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by the ifIndex.')
g9983PortStatFecOperState = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortStatFecOperState.setReference('[TR-159], Section 5.5.4.6')
if mibBuilder.loadTexts: g9983PortStatFecOperState.setStatus('current')
if mibBuilder.loadTexts: g9983PortStatFecOperState.setDescription("A read-only value indicating the current operational state of the OPTIONAL Forward Error Correction (FEC) function for the G.998.3 port. A value of 'false' indicates that the FEC function is disabled. A value of 'true' indicates that the FEC function is enabled (and supported). This object maps to the TR-159 attribute aFECOperState.")
g9983PortStatFltStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("serviceDown", 0), ("wrongConfig", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortStatFltStatus.setReference('[G.998.3], Section 6.3; RFC 2863, IF-MIB, ifOperStatus; RFC 6765, GBOND-MIB, gBondPortStatFltStatus')
if mibBuilder.loadTexts: g9983PortStatFltStatus.setStatus('current')
if mibBuilder.loadTexts: g9983PortStatFltStatus.setDescription('G.Bond/TDIM port fault status. This is a bitmap of possible conditions. The various bit positions are: serviceDown - at least one of the services defined for this aggregation group is down (due to low rate). wrongConfig - at least one BCE at the remote GBS-R is already connected to another GBS. This object is intended to supplement the ifOperStatus object in the IF-MIB and the gBondPortStatFltStatus object in the GBOND-MIB.')
g9983PortStatCrc4Errors = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortStatCrc4Errors.setReference('[TR-159], Section 5.5.4.1; [G.998.3], Appendix II, B-VII')
if mibBuilder.loadTexts: g9983PortStatCrc4Errors.setStatus('current')
if mibBuilder.loadTexts: g9983PortStatCrc4Errors.setDescription('The total number of CRC-4 errors (frame header errors) on all pairs in the G.Bond/TDIM port. Simultaneous errors on M lines SHOULD be counted M times. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime as defined in the IF-MIB. This object maps to the TR-159/G.998.3 attribute aCRC4Errors.')
g9983PortStatCrc6Errors = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortStatCrc6Errors.setReference('[TR-159], Section 5.5.4.2; [G.998.3], Appendix II, B-VIII')
if mibBuilder.loadTexts: g9983PortStatCrc6Errors.setStatus('current')
if mibBuilder.loadTexts: g9983PortStatCrc6Errors.setDescription('The total number of CRC-6 errors (super-frame errors) on all pairs in the G.Bond/TDIM port. Simultaneous errors on M lines SHOULD be counted 1 time. Discontinuities in the value of this counter can occur at re-initialization of the local management subsystem, and at other times as indicated by the value of ifCounterDiscontinuityTime as defined in the IF-MIB. This object maps to the TR-159/G.998.3 attribute aCRC6Errors.')
g9983PortStatCrc8Errors = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortStatCrc8Errors.setReference('[TR-159], Section 5.5.4.3; [G.998.3], Appendix II, B-IX')
if mibBuilder.loadTexts: g9983PortStatCrc8Errors.setStatus('current')
if mibBuilder.loadTexts: g9983PortStatCrc8Errors.setDescription('The total number of CRC-8 errors (event/message errors) on all pairs in the G.Bond/TDIM port. Simultaneous errors on M lines SHOULD be counted M times. Discontinuities in the value of this counter can occur at re-initialization of the local management subsystem, and at other times as indicated by the value of ifCounterDiscontinuityTime as defined in the IF-MIB. This object maps to the TR-159/G.998.3 attribute aCRC8Errors.')
g9983OperSvcTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 4), )
if mibBuilder.loadTexts: g9983OperSvcTable.setStatus('current')
if mibBuilder.loadTexts: g9983OperSvcTable.setDescription('Table of the operational services configured on a G.Bond/TDIM port. This table reflects current actual service configuration, set by the g9983PortConfAdminServices object. The number of entries (services) in this table therefore can vary between 0, when no services are configured, and 60, for the maximum number of services. This table contains live data from the equipment. As such, it is NOT persistent.')
g9983OperSvcEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9983-MIB", "g9983OperSvcPosition"))
if mibBuilder.loadTexts: g9983OperSvcEntry.setStatus('current')
if mibBuilder.loadTexts: g9983OperSvcEntry.setDescription('An entry in the G.Bond/TDIM Port Operational Service table, containing the index of an active service entry in the g9983SvcTable. The entry is indexed by the ifIndex, indicating a corresponding G.Bond/TDIM port, and by g9983OperSvcPosition (1..60), indicating the corresponding service position in the G.Bond/TDIM frame.')
g9983OperSvcPosition = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 4, 1, 1), G9983SvcOrderIndex())
if mibBuilder.loadTexts: g9983OperSvcPosition.setReference('[TR-159], Section 5.5.5.1; [G.998.3], Appendix II, C-I')
if mibBuilder.loadTexts: g9983OperSvcPosition.setStatus('current')
if mibBuilder.loadTexts: g9983OperSvcPosition.setDescription('G.Bond/TDIM operational service position -- a unique index, indicating relative placement of the associated service pointed to by g9983OperSvcIdx, within the G.Bond/TDIM frame. There can be up to 60 services defined over a TDIM bonded facility. Services with lower indices have higher priority in cases of bandwidth degradation. The value of g9983OperSvcPosition for the first g9983OperSvcEntry is always 1, incrementing sequentially for each consecutive entry, i.e., 2 for the second entry, 3 for the third, etc. This objects maps to the TR-159/G.998.3 attribute aServiceID.')
g9983OperSvcIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 4, 1, 2), G9983SvcIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983OperSvcIdx.setStatus('current')
if mibBuilder.loadTexts: g9983OperSvcIdx.setDescription('G.Bond/TDIM operational service index -- a read-only pointer to an existing entry in the g9983SvcTable (value of g9983SvcIdx) describing a particular service.')
g9983OperSvcState = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983OperSvcState.setReference('[TR-159], Section 5.5.5.5')
if mibBuilder.loadTexts: g9983OperSvcState.setStatus('current')
if mibBuilder.loadTexts: g9983OperSvcState.setDescription('G.Bond/TDIM service operational state. Possible values are: up - Service is up and passing traffic. down - Service is down, due to a variety of reasons, e.g., G.Bond/TDIM port is down, current link bandwidth is too low to support a particular service, etc. This objects maps to the TR-159 attribute aServiceOperState.')
g9983SvcTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 5), )
if mibBuilder.loadTexts: g9983SvcTable.setStatus('current')
if mibBuilder.loadTexts: g9983SvcTable.setDescription('Table of possible services for G.Bond/TDIM ports. Entries in this table MUST be maintained in a persistent manner.')
g9983SvcEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9983-MIB", "g9983SvcIdx"))
if mibBuilder.loadTexts: g9983SvcEntry.setStatus('current')
if mibBuilder.loadTexts: g9983SvcEntry.setDescription('An entry in the G.Bond/TDIM Port Service table, containing the management information applicable to a particular service, indexed by the g9983SvcIdx, on a G.Bond/TDIM port, indexed by the ifIndex.')
g9983SvcIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 5, 1, 1), G9983SvcIndex())
if mibBuilder.loadTexts: g9983SvcIdx.setStatus('current')
if mibBuilder.loadTexts: g9983SvcIdx.setDescription('G.Bond/TDIM service index -- a unique index associated with a particular service entry.')
g9983SvcIfIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 5, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: g9983SvcIfIdx.setReference('[TR-159], Section 5.5.5.2')
if mibBuilder.loadTexts: g9983SvcIfIdx.setStatus('current')
if mibBuilder.loadTexts: g9983SvcIfIdx.setDescription('This is a unique index within the ifTable. It represents the interface index of a service to be transmitted over the G.Bond/TDIM service instance. This objects maps to the TR-159 attribute aServiceIfIndex.')
g9983SvcType = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ds1", 0), ("e1", 1), ("nxds0", 2), ("nxe0", 3), ("ds3", 4), ("e3", 5), ("clock", 6), ("ethernet", 7), ("atm", 8), ("gfpNoFCS", 9), ("gfp", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: g9983SvcType.setReference('[TR-159], Section 5.5.5.3; [G.998.3], Appendix II, C-II')
if mibBuilder.loadTexts: g9983SvcType.setStatus('current')
if mibBuilder.loadTexts: g9983SvcType.setDescription('G.Bond/TDIM service type. Possible values are: ds1 - Clear Channel DS1 (synchronous) e1 - Clear Channel E1 (synchronous) nxds0 - Fractional DS1 (synchronous) nxe0 - Fractional E1 (synchronous) ds3 - DS3 (synchronous) e3 - E3 (synchronous) clock - Clock transfer (synchronous) ethernet - Ethernet (asynchronous) atm - ATM (asynchronous) gfpNoFCS - GFP encapsulated without FCS (asynchronous) gfp - GFP encapsulated with FCS (asynchronous) For the GBS-R ports, the value of this object cannot be changed directly. This value may be changed as a result of a write operation on the g9983SvcType object of a remote GBS-C. Attempts to change this object MUST be rejected for the GBS-R ports. This object maps to the TR-159/G.998.3 attribute aServiceType.')
g9983SvcSize = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 255), ))).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: g9983SvcSize.setReference('[TR-159], Section 5.5.5.4; [G.998.3], Appendix II, C-III')
if mibBuilder.loadTexts: g9983SvcSize.setStatus('current')
if mibBuilder.loadTexts: g9983SvcSize.setDescription('Service size, in octets, per bonding sub-block for a specific service identified by g9983SvcIdx. For TDM (synchronous) services with variable size (e.g., fractional DS1/E1), this object represents the number of DS0/E0 channels. For asynchronous services (Ethernet, ATM, GFPnoFCS, or GFP), this object represents the maximum number of octets. For non-fractional TDM services (i.e., DS1, E1, DS3, E3, and clock), the value of this object MUST be 0. A GET operation returns the current value. A SET operation, allowed on GBS-C ports, changes the service size to the indicated value. If the service type is a fixed-rate synchronous service (g9983SvcType is nxds0, nxe0, ds1, e1, ds3, e3, or clock), the operation MUST be rejected. This object maps to the TR-159/G.998.3 attribute aServiceSize.')
g9983SvcRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: g9983SvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: g9983SvcRowStatus.setDescription("This object controls the creation, modification, or deletion of the associated entry in the g9983SvcTable per the semantics of RowStatus. If an 'active' entry is referenced via g9983OperSvcIdx or a g9983PortConfAdminServices instance, or indexes a g9983SvcPm*Entry, the entry MUST remain 'active'. An 'active' entry SHALL NOT be modified. In order to modify an existing entry, it MUST be taken out of service (by setting this object to 'notInService'), modified, and set to 'active' again.")
g9983PM = MibIdentifier((1, 3, 6, 1, 2, 1, 210, 1, 1, 6))
g9983PortPmCurTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1), )
if mibBuilder.loadTexts: g9983PortPmCurTable.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCurTable.setDescription('This table contains current Performance Monitoring information for a G.Bond/TDIM port. This table contains live data from the equipment and as such is NOT persistent.')
g9983PortPmCurEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: g9983PortPmCurEntry.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCurEntry.setDescription('An entry in the G.Bond/TDIM Port PM table. Each entry represents a G.Bond/TDIM port indexed by the ifIndex.')
g9983PortPmCur15MinValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 1), HCPerfValidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur15MinValidIntervals.setReference('[TR-159], Section 5.5.1.32')
if mibBuilder.loadTexts: g9983PortPmCur15MinValidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur15MinValidIntervals.setDescription('A read-only number of 15-minute intervals for which the performance data was collected. The value of this object will be 96 or the maximum number of 15-minute history intervals collected by the implementation, unless the measurement was (re)started recently, in which case the value will be the number of complete 15-minute intervals for which there are at least some data. In certain cases, it is possible that some intervals are unavailable. In this case, this object reports the maximum interval number for which data is available. This object partially maps to the TR-159 attribute aGroupPerf15MinValidIntervals.')
g9983PortPmCur15MinInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 2), HCPerfInvalidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur15MinInvalidIntervals.setReference('[TR-159], Section 5.5.1.33')
if mibBuilder.loadTexts: g9983PortPmCur15MinInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur15MinInvalidIntervals.setDescription('A read-only number of 15-minute intervals for which the performance data was not always available. The value will typically be zero, except in cases where the data for some intervals are not available. This object partially maps to the TR-159 attribute aGroupPerf15MinInvalidIntervals.')
g9983PortPmCur15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 3), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur15MinTimeElapsed.setReference('[TR-159], Section 5.5.1.34')
if mibBuilder.loadTexts: g9983PortPmCur15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur15MinTimeElapsed.setDescription('A read-only count of seconds that have elapsed since the beginning of the current 15-minute performance interval. This object partially maps to the TR-159 attribute aGroupPerfCurr15MinTimeElapsed.')
g9983PortPmCur15MinCrc4s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 4), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc4s.setReference('[TR-159], Section 5.5.4.1')
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc4s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc4s.setDescription('A read-only count of CRC-4 errors (frame header errors) on all active pairs in the G.Bond/TDIM port during the current 15-minute performance interval. Simultaneous errors on M lines SHOULD be counted M times. Note that the total number of CRC-4 errors is indicated by the g9983PortStatCrc4Errors object. This object is inhibited during Severely Errored Seconds (SES) or Unavailable Seconds (UAS).')
g9983PortPmCur15MinCrc6s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 5), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc6s.setReference('[TR-159], Section 5.5.4.2')
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc6s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc6s.setDescription('A read-only count of CRC-6 errors (super-frame errors) on all active pairs in the G.Bond/TDIM port during the current 15-minute performance interval. Simultaneous errors on M lines SHOULD be counted 1 time. Note that the total number of CRC-6 errors is indicated by the g9983PortStatCrc6Errors object. This object is inhibited during Unavailable Seconds (UAS).')
g9983PortPmCur15MinCrc8s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 6), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc8s.setReference('[TR-159], Section 5.5.4.3')
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc8s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur15MinCrc8s.setDescription('A read-only count of CRC-8 errors (event/message errors) on all active pairs in the G.Bond/TDIM port during the current 15-minute performance interval. Simultaneous errors on M lines SHOULD be counted M times. Note that the total number of CRC-8 errors is indicated by the g9983PortStatCrc8Errors object. This object is inhibited during Unavailable Seconds (UAS).')
g9983PortPmCur1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur1DayValidIntervals.setReference('[TR-159], Section 5.5.1.45')
if mibBuilder.loadTexts: g9983PortPmCur1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur1DayValidIntervals.setDescription('A read-only number of 1-day intervals for which data was collected. The value of this object will be 7 or the maximum number of 1-day history intervals collected by the implementation, unless the measurement was (re)started recently, in which case the value will be the number of complete 1-day intervals for which there are at least some data. In certain cases, it is possible that some intervals are unavailable. In this case, this object reports the maximum interval number for which data is available.')
g9983PortPmCur1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur1DayInvalidIntervals.setReference('[TR-159], Section 5.5.1.46')
if mibBuilder.loadTexts: g9983PortPmCur1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur1DayInvalidIntervals.setDescription('A read-only number of 1-day intervals for which data was not always available. The value will typically be zero, except in cases where the data for some intervals are not available.')
g9983PortPmCur1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 9), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur1DayTimeElapsed.setReference('[TR-159], Section 5.5.1.47')
if mibBuilder.loadTexts: g9983PortPmCur1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur1DayTimeElapsed.setDescription('A read-only count of seconds that have elapsed since the beginning of the current 1-day performance interval.')
g9983PortPmCur1DayCrc4s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 10), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur1DayCrc4s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur1DayCrc4s.setDescription('A read-only count of CRC-4 errors on the G.Bond/TDIM port in the current 1-day performance interval. This object is inhibited during Severely Errored Seconds (SES) and Unavailable Seconds (UAS).')
g9983PortPmCur1DayCrc6s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 11), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur1DayCrc6s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur1DayCrc6s.setDescription('A read-only count of CRC-6 errors on the G.Bond/TDIM port in the current 1-day performance interval. This object is inhibited during Unavailable Seconds (UAS).')
g9983PortPmCur1DayCrc8s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 1, 1, 12), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPmCur1DayCrc8s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPmCur1DayCrc8s.setDescription('A read-only count of CRC-8 errors on the G.Bond/TDIM port in the current 1-day performance interval. This object is inhibited during Unavailable Seconds (UAS).')
g9983PortPm15MinTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 2), )
if mibBuilder.loadTexts: g9983PortPm15MinTable.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm15MinTable.setDescription('This table contains historical 15-minute buckets of Performance Monitoring information for a G.Bond/TDIM port (a row for each 15-minute interval, up to 96 intervals). Entries in this table MUST be maintained in a persistent manner.')
g9983PortPm15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9983-MIB", "g9983PortPm15MinIntervalIndex"))
if mibBuilder.loadTexts: g9983PortPm15MinEntry.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm15MinEntry.setDescription('An entry in the G.Bond/TDIM Port historical 15-minute PM table. Each entry represents Performance Monitoring data for a G.Bond TDIM port, indexed by the ifIndex, collected during a particular 15-minute interval, indexed by the g9983PortPm15MinIntervalIndex.')
g9983PortPm15MinIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: g9983PortPm15MinIntervalIndex.setReference('[TR-159], Section 5.5.1.57')
if mibBuilder.loadTexts: g9983PortPm15MinIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm15MinIntervalIndex.setDescription('Performance data interval number. 1 is the most recent previous interval; interval 96 is 24 hours ago. Intervals 2..96 are OPTIONAL. This object partially maps to the TR-159 attribute aGroupPerf15MinIntervalNumber.')
g9983PortPm15MinIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 2, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm15MinIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm15MinIntervalMoniTime.setDescription('A read-only count of seconds over which the performance data was actually monitored. This value will be the same as the interval duration (900 seconds), except in a situation where performance data could not be collected for any reason.')
g9983PortPm15MinIntervalCrc4s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 2, 1, 3), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm15MinIntervalCrc4s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm15MinIntervalCrc4s.setDescription('A read-only count of CRC-4 errors on the G.Bond/TDIM port during the 15-minute performance history interval. This object is inhibited during Severely Errored Seconds (SES) and Unavailable Seconds (UAS).')
g9983PortPm15MinIntervalCrc6s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 2, 1, 4), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm15MinIntervalCrc6s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm15MinIntervalCrc6s.setDescription('A read-only count of CRC-6 errors on the G.Bond/TDIM port during the 15-minute performance history interval. This object is inhibited during Unavailable Seconds (UAS).')
g9983PortPm15MinIntervalCrc8s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 2, 1, 5), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm15MinIntervalCrc8s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm15MinIntervalCrc8s.setDescription('A read-only count of CRC-8 errors on the G.Bond/TDIM port during the current 15-minute performance interval. This object is inhibited during Unavailable Seconds (UAS).')
g9983PortPm15MinIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm15MinIntervalValid.setReference('[TR-159], Section 5.5.1.58')
if mibBuilder.loadTexts: g9983PortPm15MinIntervalValid.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm15MinIntervalValid.setDescription('A read-only object indicating whether or not this history bucket contains valid data. A valid bucket is reported as true(1) and an invalid bucket as false(2). If this history bucket is invalid, the BTU-C MUST NOT produce notifications based upon the value of the counters in this bucket. Note that an implementation may decide not to store invalid history buckets in its database. In such a case, this object is not required, as only valid history buckets are available while invalid history buckets are simply not in the database. This object partially maps to the TR-159 attribute aGroupPerf15MinIntervalValid.')
g9983PortPm1DayTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 3), )
if mibBuilder.loadTexts: g9983PortPm1DayTable.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm1DayTable.setDescription('This table contains historical 1-day buckets of Performance Monitoring information for a G.Bond/TDIM port (a row for each 1-day interval, up to 7 intervals). Entries in this table MUST be maintained in a persistent manner.')
g9983PortPm1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9983-MIB", "g9983PortPm1DayIntervalIndex"))
if mibBuilder.loadTexts: g9983PortPm1DayEntry.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm1DayEntry.setDescription('An entry in the G.Bond/TDIM Port historical 1-day PM table. Each entry represents Performance Monitoring data for such a port, indexed by the ifIndex, collected during a particular 1-day interval, indexed by the g9983PortPm1DayIntervalIndex.')
g9983PortPm1DayIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: g9983PortPm1DayIntervalIndex.setReference('[TR-159], Section 5.5.1.62')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalIndex.setDescription('Performance data interval number. 1 is the most recent previous interval; interval 7 is 7 days ago. Intervals 2..7 are OPTIONAL. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalNumber.')
g9983PortPm1DayIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 3, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm1DayIntervalMoniTime.setReference('[TR-159], Section 5.5.1.64')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalMoniTime.setDescription('A read-only count of seconds over which the performance data was actually monitored. This value will be the same as the interval duration (86400 seconds), except in a situation where performance data could not be collected for any reason. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalMoniSecs.')
g9983PortPm1DayIntervalCrc4s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 3, 1, 3), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm1DayIntervalCrc4s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalCrc4s.setDescription('A read-only count of CRC-4 errors on the G.Bond/TDIM port during the 1-day performance history interval. This object is inhibited during Severely Errored Seconds (SES) and Unavailable Seconds (UAS).')
g9983PortPm1DayIntervalCrc6s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 3, 1, 4), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm1DayIntervalCrc6s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalCrc6s.setDescription('A read-only count of CRC-6 errors on the G.Bond/TDIM port during the 1-day performance history interval. This object is inhibited during Unavailable Seconds (UAS).')
g9983PortPm1DayIntervalCrc8s = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 3, 1, 5), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm1DayIntervalCrc8s.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalCrc8s.setDescription('A read-only count of CRC-8 errors on the G.Bond/TDIM port during the current 1-day performance interval. This object is inhibited during Unavailable Seconds (UAS).')
g9983PortPm1DayIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983PortPm1DayIntervalValid.setReference('[TR-159], Section 5.5.1.63')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalValid.setStatus('current')
if mibBuilder.loadTexts: g9983PortPm1DayIntervalValid.setDescription('A read-only object indicating whether or not this history bucket contains valid data. A valid bucket is reported as true(1) and an invalid bucket as false(2). If this history bucket is invalid, the BTU-C MUST NOT produce notifications based upon the value of the counters in this bucket. Note that an implementation may decide not to store invalid history buckets in its database. In such a case, this object is not required, as only valid history buckets are available while invalid history buckets are simply not in the database. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalValid.')
g9983SvcPmCurTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4), )
if mibBuilder.loadTexts: g9983SvcPmCurTable.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCurTable.setDescription('This table contains current Performance Monitoring information for the services of a G.Bond/TDIM port. This table contains live data from the equipment and as such is NOT persistent.')
g9983SvcPmCurEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9983-MIB", "g9983SvcIdx"))
if mibBuilder.loadTexts: g9983SvcPmCurEntry.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCurEntry.setDescription('An entry in the G.Bond/TDIM Services PM table. Each entry represents a service, indexed by the g9983SvcIdx, in a G.Bond/TDIM port, indexed by the ifIndex.')
g9983SvcPmCur15MinValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1, 1), HCPerfValidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPmCur15MinValidIntervals.setReference('[TR-159], Section 5.5.1.32')
if mibBuilder.loadTexts: g9983SvcPmCur15MinValidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCur15MinValidIntervals.setDescription('A read-only number of 15-minute intervals for which the performance data was collected. The value of this object will be 96 or the maximum number of 15-minute history intervals collected by the implementation, unless the measurement was (re)started recently, in which case the value will be the number of complete 15-minute intervals for which there are at least some data. In certain cases, it is possible that some intervals are unavailable. In this case, this object reports the maximum interval number for which data is available. This object partially maps to the TR-159 attribute aGroupPerf15MinValidIntervals.')
g9983SvcPmCur15MinInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1, 2), HCPerfInvalidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPmCur15MinInvalidIntervals.setReference('[TR-159], Section 5.5.1.33')
if mibBuilder.loadTexts: g9983SvcPmCur15MinInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCur15MinInvalidIntervals.setDescription('A read-only number of 15-minute intervals for which the performance data was not always available. The value will typically be zero, except in cases where the data for some intervals are not available. This object partially maps to the TR-159 attribute aGroupPerf15MinInvalidIntervals.')
g9983SvcPmCur15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1, 3), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPmCur15MinTimeElapsed.setReference('[TR-159], Section 5.5.1.34')
if mibBuilder.loadTexts: g9983SvcPmCur15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCur15MinTimeElapsed.setDescription('A read-only count of seconds that have elapsed since the beginning of the current 15-minute performance interval. This object partially maps to the TR-159 attribute aGroupPerfCurr15MinTimeElapsed.')
g9983SvcPmCur15MinDowns = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1, 4), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPmCur15MinDowns.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCur15MinDowns.setDescription("A read-only count of seconds in the current 15-minute performance interval during which a particular TDIM service was 'down', as indicated by the g9983OperSvcState object. This object is inhibited during Unavailable Seconds (UAS).")
g9983SvcPmCur1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPmCur1DayValidIntervals.setReference('[TR-159], Section 5.5.1.45')
if mibBuilder.loadTexts: g9983SvcPmCur1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCur1DayValidIntervals.setDescription('A read-only number of 1-day performance history intervals for which the data was collected. The value of this object will be 7 or the maximum number of 1-day history intervals collected by the implementation, unless the measurement was (re)started recently, in which case the value will be the number of complete 1-day intervals for which there are at least some data. In certain cases, it is possible that some intervals are unavailable. In this case, this object reports the maximum interval number for which data is available.')
g9983SvcPmCur1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPmCur1DayInvalidIntervals.setReference('[TR-159], Section 5.5.1.46')
if mibBuilder.loadTexts: g9983SvcPmCur1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCur1DayInvalidIntervals.setDescription('A read-only number of 1-day performance history intervals for which the performance data was not always available. The value will typically be zero, except in cases where the data for some intervals are not available.')
g9983SvcPmCur1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1, 7), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPmCur1DayTimeElapsed.setReference('[TR-159], Section 5.5.1.47')
if mibBuilder.loadTexts: g9983SvcPmCur1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCur1DayTimeElapsed.setDescription('A read-only count of seconds that have elapsed since the beginning of the current 1-day performance interval.')
g9983SvcPmCur1DayDowns = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 4, 1, 8), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPmCur1DayDowns.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPmCur1DayDowns.setDescription("A read-only count of seconds in the current 1-day performance interval during which a particular TDIM service was 'down', as indicated by the g9983OperSvcState object. This object is inhibited during Unavailable Seconds (UAS).")
g9983SvcPm15MinTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 5), )
if mibBuilder.loadTexts: g9983SvcPm15MinTable.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm15MinTable.setDescription('This table contains historical 15-minute buckets of Performance Monitoring information for the services of a G.Bond/TDIM port (a multi-dimensional row for each 15-minute interval, up to 96 intervals). Entries in this table MUST be maintained in a persistent manner.')
g9983SvcPm15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9983-MIB", "g9983SvcIdx"), (0, "G9983-MIB", "g9983SvcPm15MinIntervalIndex"))
if mibBuilder.loadTexts: g9983SvcPm15MinEntry.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm15MinEntry.setDescription('An entry in the G.Bond/TDIM Service historical 15-minute PM table. Each entry represents Performance Monitoring data for a particular service, indexed by the g9983SvcIdx, in a G.Bond TDIM port, indexed by the ifIndex, collected during a particular 15-minute interval, indexed by the g9983SvcPm15MinIntervalIndex.')
g9983SvcPm15MinIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalIndex.setReference('[TR-159], Section 5.5.1.57')
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalIndex.setDescription('Performance data interval number. 1 is the most recent previous interval; interval 96 is 24 hours ago. Intervals 2..96 are OPTIONAL. This object partially maps to the TR-159 attribute aGroupPerf15MinIntervalNumber.')
g9983SvcPm15MinIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 5, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalMoniTime.setDescription('A read-only count of seconds over which the performance data was actually monitored. This value will be the same as the interval duration (900 seconds), except in a situation where performance data could not be collected for any reason.')
g9983SvcPm15MinIntervalDowns = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 5, 1, 3), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalDowns.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalDowns.setDescription("A read-only count of seconds in the 15-minute performance history interval during which a particular TDIM service was 'down', as indicated by the g9983OperSvcState object. This object is inhibited during Unavailable Seconds (UAS).")
g9983SvcPm15MinIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalValid.setReference('[TR-159], Section 5.5.1.58')
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalValid.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm15MinIntervalValid.setDescription('A read-only object indicating whether or not this history bucket contains valid data. A valid bucket is reported as true(1) and an invalid bucket as false(2). If this history bucket is invalid, the BTU-C MUST NOT produce notifications based upon the value of the counters in this bucket. Note that an implementation may decide not to store invalid history buckets in its database. In such a case, this object is not required, as only valid history buckets are available while invalid history buckets are simply not in the database. This object partially maps to the TR-159 attribute aGroupPerf15MinIntervalValid.')
g9983SvcPm1DayTable = MibTable((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 6), )
if mibBuilder.loadTexts: g9983SvcPm1DayTable.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm1DayTable.setDescription('This table contains historical 1-day buckets of Performance Monitoring information for the services of a G.Bond/TDIM port (a multi-dimensional row for each 1-day interval, up to 7 intervals). Entries in this table MUST be maintained in a persistent manner.')
g9983SvcPm1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "G9983-MIB", "g9983SvcIdx"), (0, "G9983-MIB", "g9983SvcPm1DayIntervalIndex"))
if mibBuilder.loadTexts: g9983SvcPm1DayEntry.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm1DayEntry.setDescription('An entry in the G.Bond/TDIM Service historical 1-day PM table. Each entry represents Performance Monitoring data for a particular service, indexed by the g9983SvcIdx, defined in a G.Bond/TDIM port, indexed by the ifIndex, collected during a particular 1-day interval, indexed by the g9983SvcPm1DayIntervalIndex.')
g9983SvcPm1DayIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalIndex.setReference('[TR-159], Section 5.5.1.62')
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalIndex.setDescription('Performance data interval number. 1 is the most recent previous interval; interval 7 is 7 days ago. Intervals 2..7 are OPTIONAL. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalNumber.')
g9983SvcPm1DayIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 6, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalMoniTime.setReference('[TR-159], Section 5.5.1.64')
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalMoniTime.setDescription('A read-only count of seconds over which the performance data was actually monitored. This value will be the same as the interval duration (86400 seconds), except in a situation where performance data could not be collected for any reason. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalMoniSecs.')
g9983SvcPm1DayIntervalDowns = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 6, 1, 3), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalDowns.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalDowns.setDescription("A read-only count of seconds in the 1-day performance history interval during which a particular TDIM service was 'down', as indicated by the g9983OperSvcState object. This object is inhibited during Unavailable Seconds (UAS).")
g9983SvcPm1DayIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 210, 1, 1, 6, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalValid.setReference('[TR-159], Section 5.5.1.63')
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalValid.setStatus('current')
if mibBuilder.loadTexts: g9983SvcPm1DayIntervalValid.setDescription('A read-only object indicating whether or not this history bucket contains valid data. A valid bucket is reported as true(1) and an invalid bucket as false(2). If this history bucket is invalid, the BTU-C MUST NOT produce notifications based upon the value of the counters in this bucket. Note that an implementation may decide not to store invalid history buckets in its database. In such a case, this object is not required, as only valid history buckets are available while invalid history buckets are simply not in the database. This object partially maps to the TR-159 attribute aGroupPerf1DayIntervalValid.')
g9983Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 210, 2, 1))
g9983Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 210, 2, 2))
g9983BasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 210, 2, 1, 1)).setObjects(("G9983-MIB", "g9983PortConfAdminServices"), ("G9983-MIB", "g9983PortStatCrc4Errors"), ("G9983-MIB", "g9983PortStatCrc6Errors"), ("G9983-MIB", "g9983PortStatCrc8Errors"), ("G9983-MIB", "g9983PortCapFecSupported"), ("G9983-MIB", "g9983OperSvcIdx"), ("G9983-MIB", "g9983OperSvcState"), ("G9983-MIB", "g9983SvcIfIdx"), ("G9983-MIB", "g9983SvcType"), ("G9983-MIB", "g9983SvcSize"), ("G9983-MIB", "g9983SvcRowStatus"), ("G9983-MIB", "g9983PortStatFltStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9983BasicGroup = g9983BasicGroup.setStatus('current')
if mibBuilder.loadTexts: g9983BasicGroup.setDescription('A collection of objects representing management information for G.Bond/TDIM ports.')
g9983FecGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 210, 2, 1, 2)).setObjects(("G9983-MIB", "g9983PortCapFecSupported"), ("G9983-MIB", "g9983PortConfFecAdminState"), ("G9983-MIB", "g9983PortStatFecOperState"), ("G9983-MIB", "g9983PortConfFecWordSize"), ("G9983-MIB", "g9983PortConfFecRedundancySize"), ("G9983-MIB", "g9983PortConfFecInterleaverType"), ("G9983-MIB", "g9983PortConfFecInterleaverDepth"), ("G9983-MIB", "g9983PortCapFecMaxWordSize"), ("G9983-MIB", "g9983PortCapFecMaxRedundancySize"), ("G9983-MIB", "g9983PortCapFecInterleaverTypeSupported"), ("G9983-MIB", "g9983PortCapFecMaxInterleaverDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9983FecGroup = g9983FecGroup.setStatus('current')
if mibBuilder.loadTexts: g9983FecGroup.setDescription('A collection of objects supporting the OPTIONAL Forward Error Correction (FEC) and Interleaver function in G.Bond/TDIM ports.')
g9983AlarmConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 210, 2, 1, 3)).setObjects(("G9983-MIB", "g9983PortConfSvcUpDownEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9983AlarmConfGroup = g9983AlarmConfGroup.setStatus('current')
if mibBuilder.loadTexts: g9983AlarmConfGroup.setDescription('A collection of objects required for configuration of alarm thresholds and notifications in G.Bond/TDIM ports.')
g9983NotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 210, 2, 1, 4)).setObjects(("G9983-MIB", "g9983SvcUp"), ("G9983-MIB", "g9983SvcDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9983NotificationGroup = g9983NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: g9983NotificationGroup.setDescription('This group supports notifications of significant conditions associated with G.Bond/TDIM ports.')
g9983PerfCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 210, 2, 1, 5)).setObjects(("G9983-MIB", "g9983PortPmCur15MinValidIntervals"), ("G9983-MIB", "g9983PortPmCur15MinInvalidIntervals"), ("G9983-MIB", "g9983PortPmCur15MinTimeElapsed"), ("G9983-MIB", "g9983PortPmCur15MinCrc4s"), ("G9983-MIB", "g9983PortPmCur15MinCrc6s"), ("G9983-MIB", "g9983PortPmCur15MinCrc8s"), ("G9983-MIB", "g9983PortPmCur1DayValidIntervals"), ("G9983-MIB", "g9983PortPmCur1DayInvalidIntervals"), ("G9983-MIB", "g9983PortPmCur1DayTimeElapsed"), ("G9983-MIB", "g9983PortPmCur1DayCrc4s"), ("G9983-MIB", "g9983PortPmCur1DayCrc6s"), ("G9983-MIB", "g9983PortPmCur1DayCrc8s"), ("G9983-MIB", "g9983SvcPmCur15MinValidIntervals"), ("G9983-MIB", "g9983SvcPmCur15MinInvalidIntervals"), ("G9983-MIB", "g9983SvcPmCur15MinTimeElapsed"), ("G9983-MIB", "g9983SvcPmCur15MinDowns"), ("G9983-MIB", "g9983SvcPmCur1DayValidIntervals"), ("G9983-MIB", "g9983SvcPmCur1DayInvalidIntervals"), ("G9983-MIB", "g9983SvcPmCur1DayTimeElapsed"), ("G9983-MIB", "g9983SvcPmCur1DayDowns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9983PerfCurrGroup = g9983PerfCurrGroup.setStatus('current')
if mibBuilder.loadTexts: g9983PerfCurrGroup.setDescription('A collection of objects supporting OPTIONAL current Performance Monitoring information for G.Bond/TDIM ports.')
g9983Perf15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 210, 2, 1, 6)).setObjects(("G9983-MIB", "g9983PortPm15MinIntervalMoniTime"), ("G9983-MIB", "g9983PortPm15MinIntervalCrc4s"), ("G9983-MIB", "g9983PortPm15MinIntervalCrc6s"), ("G9983-MIB", "g9983PortPm15MinIntervalCrc8s"), ("G9983-MIB", "g9983PortPm15MinIntervalValid"), ("G9983-MIB", "g9983SvcPm15MinIntervalMoniTime"), ("G9983-MIB", "g9983SvcPm15MinIntervalDowns"), ("G9983-MIB", "g9983SvcPm15MinIntervalValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9983Perf15MinGroup = g9983Perf15MinGroup.setStatus('current')
if mibBuilder.loadTexts: g9983Perf15MinGroup.setDescription('A collection of objects supporting OPTIONAL historical Performance Monitoring information for G.Bond/TDIM ports, during previous 15-minute intervals.')
g9983Perf1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 210, 2, 1, 7)).setObjects(("G9983-MIB", "g9983PortPm1DayIntervalMoniTime"), ("G9983-MIB", "g9983PortPm1DayIntervalCrc4s"), ("G9983-MIB", "g9983PortPm1DayIntervalCrc6s"), ("G9983-MIB", "g9983PortPm1DayIntervalCrc8s"), ("G9983-MIB", "g9983PortPm1DayIntervalValid"), ("G9983-MIB", "g9983SvcPm1DayIntervalMoniTime"), ("G9983-MIB", "g9983SvcPm1DayIntervalDowns"), ("G9983-MIB", "g9983SvcPm1DayIntervalValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9983Perf1DayGroup = g9983Perf1DayGroup.setStatus('current')
if mibBuilder.loadTexts: g9983Perf1DayGroup.setDescription('A collection of objects supporting OPTIONAL historical Performance Monitoring information for G.Bond/TDIM ports, during previous 1-day intervals.')
g9983Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 210, 2, 2, 1)).setObjects(("G9983-MIB", "g9983BasicGroup"), ("G9983-MIB", "g9983AlarmConfGroup"), ("G9983-MIB", "g9983NotificationGroup"), ("G9983-MIB", "g9983FecGroup"), ("G9983-MIB", "g9983PerfCurrGroup"), ("G9983-MIB", "g9983Perf15MinGroup"), ("G9983-MIB", "g9983Perf1DayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    g9983Compliance = g9983Compliance.setStatus('current')
if mibBuilder.loadTexts: g9983Compliance.setDescription('The compliance statement for G.Bond/TDIM interfaces. Compliance with the following external compliance statements is REQUIRED: MIB Module Compliance Statement ---------- -------------------- IF-MIB ifCompliance3 GBOND-MIB gBondCompliance')
mibBuilder.exportSymbols("G9983-MIB", g9983PortStatEntry=g9983PortStatEntry, g9983Port=g9983Port, g9983PortPm1DayIntervalCrc4s=g9983PortPm1DayIntervalCrc4s, g9983PortPmCur1DayCrc6s=g9983PortPmCur1DayCrc6s, g9983PortStatCrc4Errors=g9983PortStatCrc4Errors, g9983Conformance=g9983Conformance, g9983SvcUp=g9983SvcUp, g9983PortPm15MinEntry=g9983PortPm15MinEntry, g9983SvcPmCur1DayDowns=g9983SvcPmCur1DayDowns, g9983PortPm1DayIntervalCrc6s=g9983PortPm1DayIntervalCrc6s, g9983PortPm1DayTable=g9983PortPm1DayTable, g9983NotificationGroup=g9983NotificationGroup, g9983SvcPm15MinIntervalValid=g9983SvcPm15MinIntervalValid, g9983PortPmCur15MinCrc6s=g9983PortPmCur15MinCrc6s, g9983PortPmCur15MinCrc4s=g9983PortPmCur15MinCrc4s, g9983SvcPmCur1DayInvalidIntervals=g9983SvcPmCur1DayInvalidIntervals, g9983SvcPm1DayIntervalIndex=g9983SvcPm1DayIntervalIndex, g9983SvcSize=g9983SvcSize, g9983SvcTable=g9983SvcTable, g9983SvcPm1DayTable=g9983SvcPm1DayTable, g9983PortPmCur1DayValidIntervals=g9983PortPmCur1DayValidIntervals, g9983PortPmCur1DayInvalidIntervals=g9983PortPmCur1DayInvalidIntervals, g9983PortCapFecMaxRedundancySize=g9983PortCapFecMaxRedundancySize, g9983PortConfFecInterleaverType=g9983PortConfFecInterleaverType, g9983PortStatCrc8Errors=g9983PortStatCrc8Errors, g9983OperSvcTable=g9983OperSvcTable, g9983SvcPm15MinIntervalIndex=g9983SvcPm15MinIntervalIndex, g9983PortPm15MinIntervalValid=g9983PortPm15MinIntervalValid, G9983SvcIndexList=G9983SvcIndexList, g9983PortCapEntry=g9983PortCapEntry, g9983Perf15MinGroup=g9983Perf15MinGroup, G9983SvcIndex=G9983SvcIndex, g9983PortStatFltStatus=g9983PortStatFltStatus, g9983AlarmConfGroup=g9983AlarmConfGroup, g9983PortPm1DayIntervalIndex=g9983PortPm1DayIntervalIndex, g9983SvcEntry=g9983SvcEntry, g9983PortCapFecMaxWordSize=g9983PortCapFecMaxWordSize, g9983PortConfSvcUpDownEnable=g9983PortConfSvcUpDownEnable, g9983SvcPmCur15MinValidIntervals=g9983SvcPmCur15MinValidIntervals, g9983Objects=g9983Objects, g9983SvcPmCur15MinTimeElapsed=g9983SvcPmCur15MinTimeElapsed, g9983SvcDown=g9983SvcDown, g9983SvcPmCur1DayTimeElapsed=g9983SvcPmCur1DayTimeElapsed, g9983PortPm15MinTable=g9983PortPm15MinTable, g9983PortPm15MinIntervalMoniTime=g9983PortPm15MinIntervalMoniTime, g9983SvcPm1DayEntry=g9983SvcPm1DayEntry, g9983MIB=g9983MIB, g9983PortStatCrc6Errors=g9983PortStatCrc6Errors, g9983PM=g9983PM, g9983PortStatTable=g9983PortStatTable, g9983SvcPm1DayIntervalDowns=g9983SvcPm1DayIntervalDowns, g9983OperSvcPosition=g9983OperSvcPosition, g9983PortConfTable=g9983PortConfTable, PYSNMP_MODULE_ID=g9983MIB, g9983PortCapFecMaxInterleaverDepth=g9983PortCapFecMaxInterleaverDepth, g9983PortPm1DayIntervalCrc8s=g9983PortPm1DayIntervalCrc8s, g9983SvcPm15MinIntervalDowns=g9983SvcPm15MinIntervalDowns, g9983PortPmCur15MinValidIntervals=g9983PortPmCur15MinValidIntervals, g9983PortPmCur1DayCrc8s=g9983PortPmCur1DayCrc8s, g9983PortCapFecSupported=g9983PortCapFecSupported, g9983SvcPm1DayIntervalValid=g9983SvcPm1DayIntervalValid, g9983SvcPm15MinIntervalMoniTime=g9983SvcPm15MinIntervalMoniTime, g9983PortConfEntry=g9983PortConfEntry, g9983SvcPmCur15MinInvalidIntervals=g9983SvcPmCur15MinInvalidIntervals, g9983PortPm1DayIntervalValid=g9983PortPm1DayIntervalValid, g9983OperSvcIdx=g9983OperSvcIdx, g9983PortConfFecAdminState=g9983PortConfFecAdminState, g9983PortPmCur1DayCrc4s=g9983PortPmCur1DayCrc4s, g9983PortCapTable=g9983PortCapTable, g9983PortPm15MinIntervalCrc6s=g9983PortPm15MinIntervalCrc6s, g9983Perf1DayGroup=g9983Perf1DayGroup, g9983BasicGroup=g9983BasicGroup, g9983PortPmCur15MinInvalidIntervals=g9983PortPmCur15MinInvalidIntervals, g9983Compliance=g9983Compliance, g9983SvcPmCurTable=g9983SvcPmCurTable, g9983SvcPmCur15MinDowns=g9983SvcPmCur15MinDowns, g9983PortConfFecRedundancySize=g9983PortConfFecRedundancySize, g9983SvcPmCur1DayValidIntervals=g9983SvcPmCur1DayValidIntervals, g9983PortPm15MinIntervalIndex=g9983PortPm15MinIntervalIndex, g9983PortPmCur15MinCrc8s=g9983PortPmCur15MinCrc8s, g9983OperSvcState=g9983OperSvcState, g9983PerfCurrGroup=g9983PerfCurrGroup, g9983PortStatFecOperState=g9983PortStatFecOperState, g9983PortConfAdminServices=g9983PortConfAdminServices, g9983SvcIdx=g9983SvcIdx, g9983SvcPm1DayIntervalMoniTime=g9983SvcPm1DayIntervalMoniTime, g9983PortPmCurTable=g9983PortPmCurTable, g9983Groups=g9983Groups, g9983FecGroup=g9983FecGroup, g9983PortCapFecInterleaverTypeSupported=g9983PortCapFecInterleaverTypeSupported, g9983SvcType=g9983SvcType, g9983PortConfFecWordSize=g9983PortConfFecWordSize, g9983SvcRowStatus=g9983SvcRowStatus, g9983PortConfFecInterleaverDepth=g9983PortConfFecInterleaverDepth, g9983PortPmCurEntry=g9983PortPmCurEntry, g9983PortPmCur15MinTimeElapsed=g9983PortPmCur15MinTimeElapsed, g9983PortNotifications=g9983PortNotifications, g9983OperSvcEntry=g9983OperSvcEntry, G9983SvcOrderIndex=G9983SvcOrderIndex, g9983PortPmCur1DayTimeElapsed=g9983PortPmCur1DayTimeElapsed, g9983SvcPm15MinEntry=g9983SvcPm15MinEntry, g9983PortPm1DayIntervalMoniTime=g9983PortPm1DayIntervalMoniTime, g9983SvcPmCurEntry=g9983SvcPmCurEntry, g9983SvcIfIdx=g9983SvcIfIdx, g9983PortPm1DayEntry=g9983PortPm1DayEntry, g9983SvcPm15MinTable=g9983SvcPm15MinTable, g9983PortPm15MinIntervalCrc4s=g9983PortPm15MinIntervalCrc4s, g9983PortPm15MinIntervalCrc8s=g9983PortPm15MinIntervalCrc8s, g9983Compliances=g9983Compliances)
