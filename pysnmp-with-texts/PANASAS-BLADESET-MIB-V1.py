#
# PySNMP MIB module PANASAS-BLADESET-MIB-V1 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANASAS-BLADESET-MIB-V1
# Produced by pysmi-0.3.4 at Wed May  1 14:36:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
panFs, = mibBuilder.importSymbols("PANASAS-PANFS-MIB-V1", "panFs")
PanSerialNumber, = mibBuilder.importSymbols("PANASAS-TC-MIB", "PanSerialNumber")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, Integer32, NotificationType, Counter32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, iso, Counter64, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Integer32", "NotificationType", "Counter32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "iso", "Counter64", "Gauge32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
panBSet = ModuleIdentity((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3))
panBSet.setRevisions(('2011-04-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: panBSet.setRevisionsDescriptions(('1. Changed Panasas, Inc. company contact information.',))
if mibBuilder.loadTexts: panBSet.setLastUpdated('201104070000Z')
if mibBuilder.loadTexts: panBSet.setOrganization('Panasas, Inc')
if mibBuilder.loadTexts: panBSet.setContactInfo('postal: Panasas, Inc 969 W. Maude Avenue Sunnyvale, CA 94085 phone: +1 408 215-6800 email: info@panasas.com')
if mibBuilder.loadTexts: panBSet.setDescription('This file defines the structure of the panasas system v1 mib.')
panBSetTable = MibTable((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1), )
if mibBuilder.loadTexts: panBSetTable.setStatus('current')
if mibBuilder.loadTexts: panBSetTable.setDescription("Table of bladesets in the system. Bladeset's are collections of blades (shelves actually) that form a fault domain.")
panBSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1), ).setIndexNames((0, "PANASAS-BLADESET-MIB-V1", "panBSetName"))
if mibBuilder.loadTexts: panBSetEntry.setStatus('current')
if mibBuilder.loadTexts: panBSetEntry.setDescription('An entry in panBSetTable')
panBSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetName.setStatus('current')
if mibBuilder.loadTexts: panBSetName.setDescription('Administrator assigned name of bladeset and an index into panBSetTable.')
panBSetNumBlades = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetNumBlades.setStatus('current')
if mibBuilder.loadTexts: panBSetNumBlades.setDescription('Number of blades in this bladeset.')
panBSetAvailSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetAvailSpares.setStatus('current')
if mibBuilder.loadTexts: panBSetAvailSpares.setDescription('Number of spare blades available.')
panBSetRequestedSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetRequestedSpares.setStatus('current')
if mibBuilder.loadTexts: panBSetRequestedSpares.setDescription('Number of spare blades that were requested by the administrator.')
panBSetTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetTotalCapacity.setStatus('current')
if mibBuilder.loadTexts: panBSetTotalCapacity.setDescription('Total capacity of the bladeset in Giga Bytes (GB).')
panBSetReservedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetReservedCapacity.setStatus('current')
if mibBuilder.loadTexts: panBSetReservedCapacity.setDescription('Capacity reserved for reconstruction of the bladeset in Giga Bytes (GB).')
panBSetUsedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetUsedCapacity.setStatus('current')
if mibBuilder.loadTexts: panBSetUsedCapacity.setDescription('Capacity used in the bladeset in Giga Bytes (GB).')
panBSetAvailableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetAvailableCapacity.setStatus('current')
if mibBuilder.loadTexts: panBSetAvailableCapacity.setDescription('Capacity available in the bladeset in Giga Bytes (GB).')
panBSetInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetInfo.setStatus('current')
if mibBuilder.loadTexts: panBSetInfo.setDescription('Bladeset status information.')
panBSetBladesTable = MibTable((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 2), )
if mibBuilder.loadTexts: panBSetBladesTable.setStatus('obsolete')
if mibBuilder.loadTexts: panBSetBladesTable.setDescription('NOTE: This table is obsolete.')
panBSetBladesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 2, 1), ).setIndexNames((0, "PANASAS-BLADESET-MIB-V1", "panBSetName"), (0, "PANASAS-BLADESET-MIB-V1", "panBSetBladeIndex"))
if mibBuilder.loadTexts: panBSetBladesEntry.setStatus('obsolete')
if mibBuilder.loadTexts: panBSetBladesEntry.setDescription('An entry in panBSetBladesTable.')
panBSetBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetBladeIndex.setStatus('obsolete')
if mibBuilder.loadTexts: panBSetBladeIndex.setDescription('Index into panBSetBladesTable.')
panBSetBladeHwSn = MibTableColumn((1, 3, 6, 1, 4, 1, 10159, 1, 3, 3, 2, 1, 2), PanSerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panBSetBladeHwSn.setStatus('obsolete')
if mibBuilder.loadTexts: panBSetBladeHwSn.setDescription("Blade's Hardware Serial Number and an index into panHwBladeTable.")
mibBuilder.exportSymbols("PANASAS-BLADESET-MIB-V1", panBSetTable=panBSetTable, panBSetAvailableCapacity=panBSetAvailableCapacity, panBSetInfo=panBSetInfo, panBSetBladesTable=panBSetBladesTable, panBSetTotalCapacity=panBSetTotalCapacity, panBSetNumBlades=panBSetNumBlades, panBSetBladeIndex=panBSetBladeIndex, panBSetReservedCapacity=panBSetReservedCapacity, panBSet=panBSet, panBSetEntry=panBSetEntry, panBSetName=panBSetName, panBSetRequestedSpares=panBSetRequestedSpares, panBSetBladeHwSn=panBSetBladeHwSn, PYSNMP_MODULE_ID=panBSet, panBSetAvailSpares=panBSetAvailSpares, panBSetBladesEntry=panBSetBladesEntry, panBSetUsedCapacity=panBSetUsedCapacity)
