#
# PySNMP MIB module CISCO-ALPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ALPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
X121Address, = mibBuilder.importSymbols("RFC1382-MIB", "X121Address")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, ObjectIdentity, iso, MibIdentifier, NotificationType, TimeTicks, Bits, Unsigned32, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "iso", "MibIdentifier", "NotificationType", "TimeTicks", "Bits", "Unsigned32", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Integer32")
TruthValue, TimeStamp, DisplayString, TextualConvention, TimeInterval, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "DisplayString", "TextualConvention", "TimeInterval", "RowStatus")
ciscoAlpsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 95))
ciscoAlpsMIB.setRevisions(('2008-02-14 00:00', '2000-01-28 00:00', '1999-01-07 00:00', '1998-12-31 00:00', '1998-12-08 00:00', '1998-05-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAlpsMIB.setRevisionsDescriptions(("Imported X121Adress from RFC1382 MIB & Integer32 from SNMPv2-SMI. TEXTUAL-CONVENTION AlpsCktName syntax is changed to OCTET STRING from DisplayString & AlpsAscuA1A2Value's Syntax is changed to Integer32 from INTEGER. Syntax of following objects are changed from INTEGER to Integer32: alpsPeerLocalAtpPort, alpsPeerKeepaliveMaxRetries, alpsRemPeerLocalPort, alpsRemPeerRemotePort, alpsRemPeerTCPQlen, alpsRemPeerCfgTCPQLen, alpsRemPeerCfgStatRetry, alpsRemPeerConnLocalPort, alpsRemPeerConnForeignPort, alpsRemPeerConnNumActCirc, alpsRemPeerConnTCPQLen, alpsRemPeerConnStatIntvl, alpsRemPeerConnStatRetry, alpsCktBaseNumActiveAscus, alpsCktBaseHostLinkNumber, alpsCktBaseRemHld, alpsCktBaseLocalHld, alpsCktX25LCN, alpsCktP1024Ax25LCN, alpsCktP1024WinOut, alpsCktP1024WinIn, alpsCktP1024OutPktSize, alpsCktP1024InPktSize, alpsCktP1024SvcMsgList, alpsCktAscuId, alpsIfP1024MaxErrCnt, alpsIfP1024MaxRetrans, alpsIfP1024CurrErrCnt, alpsIfP1024MinGoodPollResp, alpsIfP1024PollingRatio, alpsIfHLinkHostHld, alpsIfHLinkNumber, alpsIfHLinkActiveCkts, alpsAscuId, alpsAscuMaxMsgLength, alpsSvcMsgListNum and alpsSvcMsgNum.", 'Modification for ALC and Service Message Enhancements', 'Additional modifications to support ALPS/MATIP. NOTE: The alpsIfHLinkHostHld object has been updated to change its range. SMI (RFC2578 section 10.2 Extending an Information Module: Object Definitons) requires a new object defined and the old object obsoleted. This is also an index module which would require the old table to be obsoleted and a new one created. After review it has been decided to minimize impacts/disruptions to customer applications, we are not going to follow the SMI guidlines.', 'Modifications to support ALPS/MATIP.', 'Modifications to allow publishing.', 'Change ranges for some variables and update descriptions.',))
if mibBuilder.loadTexts: ciscoAlpsMIB.setLastUpdated('200802140000Z')
if mibBuilder.loadTexts: ciscoAlpsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAlpsMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-alps@cisco.com')
if mibBuilder.loadTexts: ciscoAlpsMIB.setDescription("The MIB module for Airline Protocol Support. ************************************************************** * Acronym Definitions * * * * ALPS : AirLine Protocol Support * * AX.25 : Airline X.25 * * EMTOX : Exchange of Mixed Traffic over X.25 * * ASCU : Agent Set Control Unit * * * ************************************************************** Overview of ALPS (AirLine Protocol Support) MIB ============================================== MIB description Document to refer: 'Configuring ALPS' section in Cisco IOS Command Reference & Configuration Guide. The ALPS MIB provides configuration and operational information for Cisco's Airline protocol support for IBM-P1024B(ALC) and Unisys-P1024C(UTS) protocols encapsulation over TCP/IP. The following entities are managed: 1. Peers 2. ALPS Circuits 3. ASCUs (Agent Set Control Units) 4. ALC interface 5. ALPS Host link interface to the host HOST(Emtox/Ax.25) <----> Central <---> IP Network <---> Remote <----> ASCU router router The router connected to the Host is called the Central router and the router connected to the ASCU is called the Remote router. We anticipate one Central router connecting to a large number of Remote routers. Each router has a local peer, which connects to its counterpart on the other router (referred to as the remote peer) via a TCP connection. ALPS circuits are set up over this TCP connection either on a permanent or on-demand basis. A logical grouping of ASCUs are connected via a single circuit - this has no connection to the physical interfaces that the ASCUs are connected to. The only restriction is that all the ASCUs should be directly connected to the same router. Multiple ASCUs can connect to a single serial interface and several terminals connect to an ASCU. However, terminals are not visible to the ALPS feature - the router talks only to the ASCUs. An ASCU can be identified by * the interface it is on and its Interface Address (IA) or * the circuit it is on, and its A1 and A2 values, which identify it within the circuit. Thus there are two ways of identifying an ASCU - or Circuit names are globally unique. The connection to the host is via one of two flavors of X.25 - either AX.25 (for PVCs) or EMTOX (for SVCs). Each X.25 VC corresponds to one ALPS circuit. There are several hostlinks between a host and the Central router and load balancing is done across these. EMTOX allows the host to dial out to a terminal. This requires the use of an X.121 to IP address translation table to connect to the appropriate remote peer.")
ciscoAlpsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 1))
class AlpsCktName(TextualConvention, OctetString):
    description = 'Specifies the ALPS Circuit Name. It is configured from the parser and is adminstratively assigned. This is globally unique.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 12)

class AlpsAscuA1A2Value(TextualConvention, Integer32):
    description = 'Specifies A1 or A2 value of an ASCU. The A1 & A2 values together specify an ASCU within an ALPS circuit.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

alpsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 1))
alpsPeerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2))
alpsCktObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3))
alpsIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4))
alpsAscuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5))
alpsGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6))
alpsPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 1))
alpsPeerLocalIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsPeerLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: alpsPeerLocalIpAddr.setDescription('The configured IP address used by the ALPS component in this router.')
alpsPeerLocalAtpPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsPeerLocalAtpPort.setStatus('current')
if mibBuilder.loadTexts: alpsPeerLocalAtpPort.setDescription('The port number used locally by the ALPS peer at this router. This is a static value but the port number used can change in later versions. This is not a configured value but is embedded into the source code. This has been provided mainly to aid in debugging so that the operator knows which TCP port to look at. ATP is the ALPS Tunnelling Protocol, a Cisco proprietary way to tunnel ALPS data across a TCP link')
alpsPeerKeepaliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 1, 3), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsPeerKeepaliveTimeout.setStatus('current')
if mibBuilder.loadTexts: alpsPeerKeepaliveTimeout.setDescription('The TCP keep alive timeout value for Local ALPS Peer. Keepalives are sent out periodically at this interval to the remote peer.')
alpsPeerKeepaliveMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsPeerKeepaliveMaxRetries.setStatus('current')
if mibBuilder.loadTexts: alpsPeerKeepaliveMaxRetries.setDescription('The number of keepalives sent with acknowledgement before declaring the remote peer dead. 0 implies that keepalives are turned off.')
alpsPeerInCallsAcceptFlag = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsPeerInCallsAcceptFlag.setStatus('current')
if mibBuilder.loadTexts: alpsPeerInCallsAcceptFlag.setDescription('If this is true, calls are accepted from any peer. If this is false, calls are accepted only from those routers which have been explicitly configured using alps remote-peer commands.')
alpsRemPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2), )
if mibBuilder.loadTexts: alpsRemPeerTable.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerTable.setDescription('A list of Remote peers that the local ALPS peer can communicate with.')
alpsRemPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-ALPS-MIB", "alpsRemPeerIpAddr"))
if mibBuilder.loadTexts: alpsRemPeerEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerEntry.setDescription('Each entry represents an Remote ALPS Peer.')
alpsRemPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: alpsRemPeerIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerIpAddr.setDescription('The remote IP address for the TCP Connection.')
alpsRemPeerConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("dynamic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerConnType.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerConnType.setDescription('Type of ALPS circuit established. Dynamic circuits are established only when there is data traffic that needs to be sent across and are closed when the alpsRemPeerIdleTimer expires. Permanent circuits stay up regardless of whether there is traffic across them or not.')
alpsRemPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerLocalPort.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerLocalPort.setDescription('The port number used locally by the tcp connection for the circuit. the initiator of a connection will dynamically assign a port number. the other end of the connection will have a well-known port number applicable to the encapsulation used by the connection - e.g. the value of alpsPeerLocalAtpPort for ATP connections.')
alpsRemPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerRemotePort.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerRemotePort.setDescription('The port number used by the remote end of the tcp connection for the circuit. the initiator of a connection will dynamically assign a port number. the other end of the connection will have a well-known port number applicable to the encapsulation used by the connection - e.g. the value of alpsPeerLocalAtpPort for ATP connections. If this connection was initiated by the local router, a port number will be dynamically selected. Otherwise the value of alpsPeerLocalAtpPort will be used (for ATP connections)')
alpsRemPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closed", 1), ("opening", 2), ("opened", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerState.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerState.setDescription('TCP Peer State. Initially the connection is in the closed state. For permanent connections, it starts opening the TCP connection immediately, but for dynamic ones, it waits till there is traffic addressed to the remote peer. It then progresses via opening into the opened state.')
alpsRemPeerUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerUptime.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerUptime.setDescription('Time elapsed since TCP connection was established.')
alpsRemPeerNumActiveCkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerNumActiveCkts.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerNumActiveCkts.setDescription('Number of active ALPS circuits in this TCP session.')
alpsRemPeerIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 8), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerIdleTimer.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerIdleTimer.setDescription('The TCP session with the peer will be closed if there is no activity for alpsInactiveTimer seconds. This is valid only for dynamic circuits')
alpsRemPeerAlarmsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerAlarmsEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerAlarmsEnabled.setDescription('Specifies whether alarms are generated for this remote Peer')
alpsRemPeerTCPQlen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerTCPQlen.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerTCPQlen.setDescription('Maximum TCP Queue size allowed for this TCP session.')
alpsRemPeerOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerOutPackets.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerOutPackets.setDescription('Number of packets transmitted to the remote peer.')
alpsRemPeerOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 12), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerOutOctets.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerOutOctets.setDescription('Number of octets transmitted to the remote peer.')
alpsRemPeerInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerInPackets.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerInPackets.setDescription('Number of packets received from the remote peer.')
alpsRemPeerInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 14), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerInOctets.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerInOctets.setDescription('Number of octets received from the remote peer.')
alpsRemPeerDropsGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerDropsGiant.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerDropsGiant.setDescription('Number of Packets dropped because they were larger than the maximum allowed packet size of 3840 bytes.')
alpsRemPeerDropsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerDropsQFull.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerDropsQFull.setDescription('Number of packets dropped because the TCP queue (of size alpsRemPeerTCPQlen) was full.')
alpsRemPeerDropsPeerUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerDropsPeerUnreach.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerDropsPeerUnreach.setDescription('Number of packets dropped because remote peer was unreachable.')
alpsRemPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alpsRemPeerRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
alpsRemPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3), )
if mibBuilder.loadTexts: alpsRemPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgTable.setDescription('Table listing of all administered ALPS remote peer configuration entries on this node. Entries in this table can be created via a CLI command or via alpsRemPeerCfgRowStatus.')
alpsRemPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-ALPS-MIB", "alpsRemPeerCfgIpAddr"), (0, "CISCO-ALPS-MIB", "alpsRemPeerCfgProtocol"))
if mibBuilder.loadTexts: alpsRemPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgEntry.setDescription('Each entry represents an ALPS remote peer configuration entry on this node.')
alpsRemPeerCfgIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: alpsRemPeerCfgIpAddr.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgIpAddr.setDescription('The configured IP address of an ALPS remote peer.')
alpsRemPeerCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atp", 1), ("matipTypeA", 2))))
if mibBuilder.loadTexts: alpsRemPeerCfgProtocol.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgProtocol.setDescription('The configured ALPS protocol encapsulation. This protocol encapsulation is at the layer above TCP.')
alpsRemPeerCfgActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("dynamic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerCfgActivation.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgActivation.setDescription('The configured type of ALPS peer activation.')
alpsRemPeerCfgTCPQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerCfgTCPQLen.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgTCPQLen.setDescription('The configured maximum TCP Queue size.')
alpsRemPeerCfgIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 5), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerCfgIdleTimer.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgIdleTimer.setDescription('The configured idle timer for a dynamic activation peer.')
alpsRemPeerCfgNoCircTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 6), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerCfgNoCircTimer.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgNoCircTimer.setDescription('The configured no-circuit timer for a dynamic activation peer.')
alpsRemPeerCfgAlarmsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerCfgAlarmsOn.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgAlarmsOn.setDescription('The configured parameter which specifies whether alarms are generated for remote peer connections to the IP address in alpsRemPeerCfgIpAddr.')
alpsRemPeerCfgStatIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 8), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerCfgStatIntvl.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgStatIntvl.setDescription('The configured status interval timer.')
alpsRemPeerCfgStatRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerCfgStatRetry.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgStatRetry.setDescription('The configured number of status retries.')
alpsRemPeerCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsRemPeerCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerCfgRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
alpsRemPeerConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4), )
if mibBuilder.loadTexts: alpsRemPeerConnTable.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnTable.setDescription('Table listing of all ALPS remote peer connections on this node.')
alpsRemPeerConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-ALPS-MIB", "alpsRemPeerConnIpAddr"), (0, "CISCO-ALPS-MIB", "alpsRemPeerConnIdString"))
if mibBuilder.loadTexts: alpsRemPeerConnEntry.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnEntry.setDescription('Each entry represents an ALPS remote peer connection on this node.')
alpsRemPeerConnIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: alpsRemPeerConnIpAddr.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnIpAddr.setDescription('The IP address of the ALPS remote peer.')
alpsRemPeerConnIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: alpsRemPeerConnIdString.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnIdString.setDescription('A descriptive ASCII string that is used to distinguish among different peer connections to the same ALPS remote peer IP address.')
alpsRemPeerConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnLocalPort.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnLocalPort.setDescription('The local TCP port number used by the underlying TCP connection to an ALPS remote peer.')
alpsRemPeerConnForeignPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnForeignPort.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnForeignPort.setDescription('The foreign (remote) TCP port number used by the underlying TCP connection to an ALPS remote peer.')
alpsRemPeerConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("opening", 2), ("opened", 3), ("busy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnState.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnState.setDescription('The state of the connection to an ALPS remote peer.')
alpsRemPeerConnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atp", 1), ("matipTypeA", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnProtocol.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnProtocol.setDescription('The ALPS protocol encapsulation used on the connection to the ALPS remote peer. This protocol encapsulation is a layer above TCP.')
alpsRemPeerConnCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("learned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnCreation.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnCreation.setDescription('The stimulus for creating the peer connection object. The peer connection object may be created solely due to configuration (admin) or due to a combination of configuration and protocol events (learned).')
alpsRemPeerConnActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnActivation.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnActivation.setDescription('Basis for activation a peer connection. A permanent activation peer connection will attempt to open immediately and stay open, regardless of the usage of the peer connection. A dynamic activation peer connection only opens when there is data to send and the peer connection will close if there are no data messages sent or received across the peer for the duration of the idle timer.')
alpsRemPeerConnUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnUptime.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnUptime.setDescription('Elapsed time since the ALPS peer connection was successfully established.')
alpsRemPeerConnNumActCirc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnNumActCirc.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnNumActCirc.setDescription('The number of ALPS virtual circuits using the connection to this ALPS remote peer.')
alpsRemPeerConnLastTxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnLastTxRx.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnLastTxRx.setDescription('The value of sysUpTime when a peer data message was last transmitted or received across this ALPS remote peer connection. This timestamp is not update if the peer message is a peer status inquiry/response message.')
alpsRemPeerConnLastRxAny = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnLastRxAny.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnLastRxAny.setDescription('The value of sysUpTime when a peer data or status message is last received across the ALPS remote peer connection.')
alpsRemPeerConnIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnIdleTimer.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnIdleTimer.setDescription('A dynamic activation ALPS peer connection will be closed if zero peer data messages are sent or received for a length of time greater than or equal to this timer.')
alpsRemPeerConnNoCircTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 14), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnNoCircTimer.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnNoCircTimer.setDescription('A dynamic activation ALPS peer connection will be closed if zero ALPS circuits are active or attempt to activate for a length of time greater than or equal to this timer.')
alpsRemPeerConnTCPQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnTCPQLen.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnTCPQLen.setDescription('The maximum number of ALPS peer messages that can be queued in a single TCP session.')
alpsRemPeerConnAlarmsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnAlarmsOn.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnAlarmsOn.setDescription('This parameter specifies whether ALPS alarms are generated for this ALPS remote peer connection.')
alpsRemPeerConnStatIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnStatIntvl.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnStatIntvl.setDescription('The time interval (in seconds) between transmission of consecutive ALPS Peer Status messages. These messages are only transmitted if zero messages are received on the peer connection for a length of time greater than or equal to this timer.')
alpsRemPeerConnStatRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnStatRetry.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnStatRetry.setDescription('The number of consecutive unanswered ALPS Peer Status messages transmitted before closing the conenction to the ALPS remote peer.')
alpsRemPeerConnDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("idle", 2), ("noCircuits", 3), ("destUnreachable", 4), ("foreignReset", 5), ("localReset", 6), ("noMemory", 7), ("openingTimeout", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnDownReason.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnDownReason.setDescription('Reason that an ALPS Peer connection failed to open sauccessfully.')
alpsRemPeerConnOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnOutPackets.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnOutPackets.setDescription('Number of packets transmitted on this ALPS remote peer connection.')
alpsRemPeerConnOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnOutOctets.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnOutOctets.setDescription('Number of octets transmitted on this ALPS remote peer connection.')
alpsRemPeerConnInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnInPackets.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnInPackets.setDescription('Number of packets received on this ALPS remote peer connection.')
alpsRemPeerConnInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnInOctets.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnInOctets.setDescription('Number of octets received on this ALPS remote peer connection.')
alpsRemPeerConnDropsGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnDropsGiant.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnDropsGiant.setDescription('Number of ALPS peer packets dropped due to exceeding the maximum allowed packet size of 3840 bytes.')
alpsRemPeerConnDropsQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 25), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnDropsQFull.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnDropsQFull.setDescription('Number of ALPS peer packets dropped because the TCP output queue is full.')
alpsRemPeerConnDropsUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 26), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnDropsUnreach.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnDropsUnreach.setDescription('Number of ALPS peer packets dropped because the ALPS remote peer is unreachable.')
alpsRemPeerConnDropsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 2, 4, 1, 27), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsRemPeerConnDropsVersion.setStatus('current')
if mibBuilder.loadTexts: alpsRemPeerConnDropsVersion.setDescription('Number of ALPS peer packets dropped because of a version mismatch in the ALPS encapsulation.')
alpsCktBaseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1), )
if mibBuilder.loadTexts: alpsCktBaseTable.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseTable.setDescription('A list of ALPS circuits. This table contains variables common to central & remote routers.')
alpsCktBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-ALPS-MIB", "alpsCktBaseName"), (0, "CISCO-ALPS-MIB", "alpsCktBaseDlcType"))
if mibBuilder.loadTexts: alpsCktBaseEntry.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseEntry.setDescription('Details of ALPS Circuits.')
alpsCktBaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 1), AlpsCktName())
if mibBuilder.loadTexts: alpsCktBaseName.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseName.setDescription('Specifies the ALPS Circuit Name. This is unique within the network.')
alpsCktBaseDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("emtox", 1), ("ax25", 2), ("alc", 3), ("uts", 4))))
if mibBuilder.loadTexts: alpsCktBaseDlcType.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseDlcType.setDescription('Specifies what type of circuit this is. The X25 circuit is set up with the same name as the P1024 circuit so we need this variable to distinguish between the two, in case local switching is done.')
alpsCktBasePriPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBasePriPeerAddr.setStatus('current')
if mibBuilder.loadTexts: alpsCktBasePriPeerAddr.setDescription('This is the IP address of the Primary Central peer. It is mandatory to configure a primary peer, but the backup peer is optional.')
alpsCktBaseAlarmsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseAlarmsEnabled.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseAlarmsEnabled.setDescription('Specifies whether alarms are generated for this ALPS circuit. Alarms can be syslog messages or SNMP traps - both are controlled using the same flags.')
alpsCktBaseConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("dynamic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseConnType.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseConnType.setDescription('Specifies the ALPS Circuit Connection Type.')
alpsCktBaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("inoperable", 2), ("opening", 3), ("opened", 4), ("cktBusy", 5), ("peerBusy", 6), ("updating", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseState.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseState.setDescription('Indicates the state of ALPS Circuit.')
alpsCktBaseNumActiveAscus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseNumActiveAscus.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseNumActiveAscus.setDescription('Reports the number of enabled ASCUs that are attached to this ALPS Circuit. Attachment of an ASCU to an ALPS circuit may occur due to configuration or due to information passed in a protocol message.')
alpsCktBaseCurrentPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseCurrentPeer.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseCurrentPeer.setDescription('Reports the IP address of the peer that this ALPS circuit is currently connected to.')
alpsCktBaseLifeTimeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 9), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseLifeTimeTimer.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseLifeTimeTimer.setDescription('A data message that has been queued within the router for longer than this interval will be dropped.')
alpsCktBaseHostLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseHostLinkNumber.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseHostLinkNumber.setDescription('Specifies host link number (on Central router) for this ALPS Circuit. The host link number is used to provide a degree of transparency to the remote router. A single host link may correspond to multiple physical links between the central router and the host, which can then load-balance VCs across them.')
alpsCktBaseHostLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ax25", 1), ("emtox", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseHostLinkType.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseHostLinkType.setDescription('Specifies host link type(on Central router) for this ALPS Circuit.')
alpsCktBaseRemHld = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32639))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseRemHld.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseRemHld.setDescription('Specifies the HLD (High-level descriptor) of the AX.25/EMTOX host for this ALPS Circuit. This serves as an identifier for the host')
alpsCktBaseLocalHld = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32639))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseLocalHld.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseLocalHld.setDescription('Specifies the local HLD for this ALPS Circuit. HLDs are required at the host for both ends of the connection.')
alpsCktBaseDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42))).clone(namedValues=NamedValues(("unknown", 1), ("noReason", 2), ("hostLinkDown", 3), ("cktDisabled", 4), ("hostLinkDisabled", 5), ("noHostLinkMatched", 6), ("noHldMatched", 7), ("cktNameInUse", 8), ("pvcLcnOutOfRange", 9), ("x25ParamInvalid", 10), ("cktOpeningTimeout", 11), ("x25ClearDteNoReason", 12), ("configMismatch", 13), ("noResourcesAvail", 14), ("incompatibleA1A2", 15), ("cktIdle", 16), ("peerDown", 17), ("noAscusConfigured", 18), ("x25ClearHostUnknown", 19), ("x25ClearHostDown", 20), ("x25ClearHostDisabled", 21), ("x25ClearHostSaturated", 22), ("x25ClearCallerUnknown", 23), ("x25ClearCallerUnauth", 24), ("x25ClearConfigRejected", 25), ("x25ClearConfigFallback", 26), ("x25ClearConfigIncompat", 27), ("x25ClearHLDUnknown", 28), ("x25ClearPIDUnknown", 29), ("x25ClearFacilRejected", 30), ("x25ClearNetNoReason", 31), ("pvcLcnInUse", 32), ("noSvcLcnAvail", 33), ("peerIdle", 34), ("presUnknown", 35), ("presMismatch", 36), ("openMsgTooShort", 37), ("mpxUnknown", 38), ("mpxHdrMismatch", 39), ("trafTypeMismatch", 40), ("codingMismatch", 41), ("ascuInSession", 42))).clone('noReason')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseDownReason.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseDownReason.setDescription('Reports the reason why this ALPS Circuit is down, if it is down.')
alpsCktBaseOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseOutPackets.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseOutPackets.setDescription('Number of packets transmitted to remote peer over this circuit.')
alpsCktBaseOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 16), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseOutOctets.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseOutOctets.setDescription('Number of octets transmitted to remote peer over this circuit.')
alpsCktBaseInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseInPackets.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseInPackets.setDescription('Number of packets received from remote peer over this circuit.')
alpsCktBaseInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 18), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseInOctets.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseInOctets.setDescription('Number of octets received from remote peer over this circuit.')
alpsCktBaseDropsCktDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseDropsCktDisabled.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseDropsCktDisabled.setDescription('Number of packets dropped because the circuit was disabled. This would typically be packets that were queueued before the circuit was disabled which are now left in the queue.')
alpsCktBaseDropsQOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseDropsQOverflow.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseDropsQOverflow.setDescription('Number of packets dropped due to TCP Congestion.')
alpsCktBaseDropsLifeTimeExpd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseDropsLifeTimeExpd.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseDropsLifeTimeExpd.setDescription('Number of packets which were queued within the router for longer than alpsCktBaseLifeTimeTimer.')
alpsCktBaseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseEnabled.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseEnabled.setDescription('This specifies if the circuit has been enabled. After a circuit has been configured, it must be explicitly enabled in order for the circuit to be set up.')
alpsCktBaseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktBaseRowStatus.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
alpsCktBaseCurrPeerConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktBaseCurrPeerConnId.setStatus('current')
if mibBuilder.loadTexts: alpsCktBaseCurrPeerConnId.setDescription('A descriptive ASCII string that is used to distinguish among different peer connections to the same ALPS remote peer IP address.')
alpsCktX25Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 2), )
if mibBuilder.loadTexts: alpsCktX25Table.setStatus('current')
if mibBuilder.loadTexts: alpsCktX25Table.setDescription('A list of ALPS X.25 circuits. These entries exist only for X.25 circuits. hence this table would probably be empty at the remote router')
alpsCktX25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-ALPS-MIB", "alpsCktBaseName"), (0, "CISCO-ALPS-MIB", "alpsCktX25DlcType"))
if mibBuilder.loadTexts: alpsCktX25Entry.setStatus('current')
if mibBuilder.loadTexts: alpsCktX25Entry.setDescription('Details of ALPS Circuits.')
alpsCktX25DlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("emtox", 1), ("ax25", 2))))
if mibBuilder.loadTexts: alpsCktX25DlcType.setStatus('current')
if mibBuilder.loadTexts: alpsCktX25DlcType.setDescription('Specifies what type of circuit this is.')
alpsCktX25IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktX25IfIndex.setStatus('current')
if mibBuilder.loadTexts: alpsCktX25IfIndex.setDescription('Reports the interface the circuit is on. This is the interface which is connected to the host')
alpsCktX25LCN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktX25LCN.setStatus('current')
if mibBuilder.loadTexts: alpsCktX25LCN.setDescription('The Logical Channel Number being used on the X.25 VC for this ALPS Circuit.')
alpsCktX25HostX121 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 2, 1, 4), X121Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktX25HostX121.setStatus('current')
if mibBuilder.loadTexts: alpsCktX25HostX121.setDescription('The X.121 address on the host side which the central router uses to connect to the host')
alpsCktX25RemoteX121 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 2, 1, 5), X121Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktX25RemoteX121.setStatus('current')
if mibBuilder.loadTexts: alpsCktX25RemoteX121.setDescription('X.121 address of the remote side. Remote here refers to the side that the ASCUS are connected to and is also referred to as the remote router.')
alpsCktX25DropsVcReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktX25DropsVcReset.setStatus('current')
if mibBuilder.loadTexts: alpsCktX25DropsVcReset.setDescription('Number of packets dropped due to the VC being reset. These are packets that were queued up for transmission on that VC when it was reset')
alpsCktP1024Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3), )
if mibBuilder.loadTexts: alpsCktP1024Table.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024Table.setDescription('A list of ALC or UTS Alps circuits.')
alpsCktP1024Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-ALPS-MIB", "alpsCktBaseName"), (0, "CISCO-ALPS-MIB", "alpsCktP1024DlcType"))
if mibBuilder.loadTexts: alpsCktP1024Entry.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024Entry.setDescription('Details of ALPS Circuits.')
alpsCktP1024DlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("alc", 3), ("uts", 4))))
if mibBuilder.loadTexts: alpsCktP1024DlcType.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024DlcType.setDescription('Specifies what type of circuit this is.')
alpsCktP1024BackupPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024BackupPeerAddr.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024BackupPeerAddr.setDescription('This is the IP address of the backup remote peer. This is optional and hence may not always exist.')
alpsCktP1024RetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 3), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024RetryTimer.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024RetryTimer.setDescription("Specifies the interval at which a permanent ALPS circuit will attempt to reestablish the circuit in case it wasn't able to come up.")
alpsCktP1024IdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 4), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024IdleTimer.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024IdleTimer.setDescription('If there is no traffic on a dynamic ALPS circuit for this interval, it will be cleared.')
alpsCktP1024EmtoxX121 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 5), X121Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024EmtoxX121.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024EmtoxX121.setDescription('Specifies the X.121 address of the SVC established with EMTOX host. This field should be set to length zero in the case of PVCs (AX.25 host).')
alpsCktP1024Ax25LCN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024Ax25LCN.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024Ax25LCN.setDescription('Specifies the Logical Channel Number being used on the PVC established with AX.25 host. This field should be set to zero in the case of SVCs (EMTOX host).')
alpsCktP1024WinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024WinOut.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024WinOut.setDescription('Specifies X.25 transmit Window size on the Logical Channel Number of this ALPS Circuit.')
alpsCktP1024WinIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024WinIn.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024WinIn.setDescription('Specifies the X.25 receive Window size on the Logical Channel Number of this ALPS Circuit.')
alpsCktP1024OutPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 4096))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024OutPktSize.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024OutPktSize.setDescription('Specifies the X.25 maxiumum output Packet size on the Logical Channel Number of this ALPS Circuit. The default output Packet size for AX.25 is 240 bytes and 128 bytes for EMTOX.')
alpsCktP1024InPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 4096))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024InPktSize.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024InPktSize.setDescription('Specifies X.25 maximum input Packet size on the Logical Channel Number of this ALPS Circuit. The default input Packet size for AX.25 is 240 bytes and 128 bytes for EMTOX.')
alpsCktP1024SvcMsgList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024SvcMsgList.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024SvcMsgList.setDescription('Specifies the Service Message List Number to use on this ALPS Circuit. This allows custom service messages to be sent for ASCUs on a particular circuit. Service messages are sent out by the router to the ASCU when abnormal conditions occur, and are displayed on the terminal. There is a default set of service messages, usually referred to as List 0. However, it is possible to configure custom sets of service messages for display, selectable on a per-circuit basis.')
alpsCktP1024SvcMsgIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 12), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024SvcMsgIntvl.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024SvcMsgIntvl.setDescription('Specifies Service Message Time Interval for the Service messages to be sent this ALPS Circuit. This controls how frequently the messages are repeated when an error condition (e.g. network being down) persists.')
alpsCktP1024DropsUnkAscu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktP1024DropsUnkAscu.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024DropsUnkAscu.setDescription('Number of packets that were found to be from an Unknown ASCU (i.e. an ASCU that had not been configured) and hence were dropped.')
alpsCktP1024RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024RowStatus.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024RowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
alpsCktP1024MatipCloseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 3, 1, 15), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsCktP1024MatipCloseDelay.setStatus('current')
if mibBuilder.loadTexts: alpsCktP1024MatipCloseDelay.setDescription('Specifies the minumum delay between transmission of a MATIP Close and the transmission of a MATIP Session Open for this ALPS circuit.')
alpsCktAscuTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4), )
if mibBuilder.loadTexts: alpsCktAscuTable.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuTable.setDescription('A list of ASCUs for each ALPS Circuit. This may not include all ASCUs which have this circuit configured as alpsAscuCktName because some ASCUs may be rejected by the host while setting up the circuit.')
alpsCktAscuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-ALPS-MIB", "alpsCktAscuCktName"), (0, "CISCO-ALPS-MIB", "alpsCktAscuCktDlcType"), (0, "CISCO-ALPS-MIB", "alpsCktAscuA1"), (0, "CISCO-ALPS-MIB", "alpsCktAscuA2"))
if mibBuilder.loadTexts: alpsCktAscuEntry.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuEntry.setDescription('Details of ASCUs on ASCU Circuits.')
alpsCktAscuCktName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4, 1, 1), AlpsCktName())
if mibBuilder.loadTexts: alpsCktAscuCktName.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuCktName.setDescription('The name of the ALPS circuit which this ASCU is on. The circuit may be always up (for permanent circuits) or get set up (dynamic circuits) when there is traffic on one of the ASCUs which are set up for that circuit.')
alpsCktAscuCktDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("emtox", 1), ("ax25", 2), ("alc", 3), ("uts", 4))))
if mibBuilder.loadTexts: alpsCktAscuCktDlcType.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuCktDlcType.setDescription('Specifies what type of circuit this is. The X.25 circuit is set up with the same name as the ALC circuit so we need this variable to distinguish between the two.')
alpsCktAscuA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4, 1, 3), AlpsAscuA1A2Value())
if mibBuilder.loadTexts: alpsCktAscuA1.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuA1.setDescription('A1 value. This is used along with the alpsCktAscuA2 value to identify the ASCU within the circuit.')
alpsCktAscuA2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4, 1, 4), AlpsAscuA1A2Value())
if mibBuilder.loadTexts: alpsCktAscuA2.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuA2.setDescription('A2 value. This is used along with the alpsCktAscuA1 value to identify the ASCU within the circuit.')
alpsCktAscuIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktAscuIfIndex.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuIfIndex.setDescription('Reports the interface the ASCU is on. This field, along with alpsCktAscuId is provided so that it is possible to correlate this information with the configured ASCU information in alpsAscuTable')
alpsCktAscuId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktAscuId.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuId.setDescription('Reports the ASCU Identifier which uniquely identifies an ASCU on a given interface. This value is the Interface Address (IA) for ALC and the Remote Identifier (RID) for UTS. A value of 0 indicates that the ASCU id is either unavailable or not applicable.')
alpsCktAscuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("reject", 3), ("new", 4), ("pending", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsCktAscuStatus.setStatus('current')
if mibBuilder.loadTexts: alpsCktAscuStatus.setDescription('Reports the ASCU status - ASCUs configured on the circuit can be rejected at the host and would then be marked REJECT. Also, ASCUs configured after the circuit has been established are not added dynamically to the circuit but are marked NEW and get added when the circuit gets established the next time. ASCUs waiting for an accept or reject response from the host are marked as PENDING. ASCUs that were accepted by the host are marked OK.')
alpsIfP1024Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1), )
if mibBuilder.loadTexts: alpsIfP1024Table.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024Table.setDescription('A list of interfaces running the P1024B or P1024C protocols')
alpsIfP1024Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alpsIfP1024Entry.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024Entry.setDescription('Interface Details')
alpsIfP1024EncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alc", 1), ("uts", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsIfP1024EncapType.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024EncapType.setDescription('Reports the encapsulation type for this Serial Interface.')
alpsIfP1024PollRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 2), TimeInterval().clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024PollRespTimeout.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024PollRespTimeout.setDescription('Specifies the Poll Response Time out value.')
alpsIfP1024GATimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 3), TimeInterval().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024GATimeout.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024GATimeout.setDescription('Specifies the time-out delay between receipt of first character of an input sequence solicited by a poll and receipt of GA sequence.')
alpsIfP1024PollPauseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 4), TimeInterval().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024PollPauseTimeout.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024PollPauseTimeout.setDescription('Specifies the minimum delay between two poll cycles. Thus the poll pause interval is counted from the instant when the first ASCU in the poll list is polled. Note that this is the delay between two traversals of the entire poll list rather than the interval between two consecutive polls. The actual delay will probably be more than the value of this variable.')
alpsIfP1024MaxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024MaxErrCnt.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024MaxErrCnt.setDescription('Specifies a maximum error count for this interface. After an ASCU link comes up, if it experiences this number of errors the ASCU link will be shutdown. The default value of 0 results in the ASCU link never being shutdown.')
alpsIfP1024MaxRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024MaxRetrans.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024MaxRetrans.setDescription('Specifies the maximum number of times an output message will be retransmitted before it is discarded. This is relevant only for P1024C (UTS). For ALC, a value of 0 will be returned. Note that legal values for UTS are 1-10')
alpsIfP1024CurrErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsIfP1024CurrErrCnt.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024CurrErrCnt.setDescription('Reports the number of errors currently existing for this ASCU link. When this equals alpsIfP1024MaxErrCnt then the ASCU link will be shut down, unless alpsIfP1024MaxErrCnt equals 0 in which case the ascu link is never shut down due to error thresholds being exceeded')
alpsIfP1024MinGoodPollResp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024MinGoodPollResp.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024MinGoodPollResp.setDescription('Specifies the number of good Poll Responses to be received from an ASCU before it can be declared up.')
alpsIfP1024PollingRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024PollingRatio.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024PollingRatio.setDescription('Specifies how many times ASCUs in UP state are polled before an ASCU in DOWN state is polled again.')
alpsIfP1024NumAscus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 10), Gauge32()).setUnits('Ascus').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsIfP1024NumAscus.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024NumAscus.setDescription('Reports the number of ASCUs configured on this Serial Port.')
alpsIfP1024ServMsgFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sita", 1), ("apollo", 2))).clone('sita')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024ServMsgFormat.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024ServMsgFormat.setDescription('Specifies the format of the service message sent to an ASCU on this interface.')
alpsIfP1024ServMsgStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024ServMsgStatusChange.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024ServMsgStatusChange.setDescription('Specifies whether service messages generated due to an ALPS circuit status change or an ASCU status change, will be forwarded to the ASCU.')
alpsIfP1024ServMsgDropTermAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("msgterm", 1), ("configterm", 2))).clone('configterm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alpsIfP1024ServMsgDropTermAddr.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024ServMsgDropTermAddr.setDescription('Specifies whether the service message will be sent to the same terminal address of the dropped message or the configured value.')
alpsIfHLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 2), )
if mibBuilder.loadTexts: alpsIfHLinkTable.setStatus('current')
if mibBuilder.loadTexts: alpsIfHLinkTable.setDescription('A list of interfaces running AX.25/EMTOX host link protocols. These are on the central router')
alpsIfHLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ALPS-MIB", "alpsIfHLinkHostHld"), (0, "CISCO-ALPS-MIB", "alpsIfHLinkNumber"))
if mibBuilder.loadTexts: alpsIfHLinkEntry.setStatus('current')
if mibBuilder.loadTexts: alpsIfHLinkEntry.setDescription('Details of AX.25/EMTOX host link protocols on an Interface.')
alpsIfHLinkHostHld = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alpsIfHLinkHostHld.setStatus('current')
if mibBuilder.loadTexts: alpsIfHLinkHostHld.setDescription('Specifies the HLD of the AX.25/EMTOX host connected on this Interface. The HLD(High-level descriptor) serves as an identifier along with the hostlink number and helps correlate the ALPS circuit to a host link. The hex range is 0x1 to 0xFFFF which corresponds to 1 ... 65535 in decimal.')
alpsIfHLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: alpsIfHLinkNumber.setStatus('current')
if mibBuilder.loadTexts: alpsIfHLinkNumber.setDescription('Specifies the configured Host Link Number on this Serial Interface.')
alpsIfHLinkX25ProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ax25", 1), ("emtox", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsIfHLinkX25ProtocolType.setStatus('current')
if mibBuilder.loadTexts: alpsIfHLinkX25ProtocolType.setDescription('Reports the encapsulation type for this Serial Interface - AX.25 or EMTOX.')
alpsIfHLinkAx25PvcDamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 2, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsIfHLinkAx25PvcDamp.setStatus('current')
if mibBuilder.loadTexts: alpsIfHLinkAx25PvcDamp.setDescription('The purpose of this object is to handle the link-damping for an AX.25 host. If the PVC goes inactive (i.e. link goes down, etc...) for PVCDampValue seconds, then PVC will be destroyed as well as the associated ALPS circuit.')
alpsIfHLinkEmtoxHostX121 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 2, 1, 5), X121Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsIfHLinkEmtoxHostX121.setStatus('current')
if mibBuilder.loadTexts: alpsIfHLinkEmtoxHostX121.setDescription('Specfies the X.121 address of this EMTOX host.')
alpsIfHLinkActiveCkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setUnits('circuits').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsIfHLinkActiveCkts.setStatus('current')
if mibBuilder.loadTexts: alpsIfHLinkActiveCkts.setDescription('Reports the number of ALPS Ckts established with this host.')
alpsAscuTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1), )
if mibBuilder.loadTexts: alpsAscuTable.setStatus('current')
if mibBuilder.loadTexts: alpsAscuTable.setDescription('A list of ALPS ASCUs on an interface. This is defined only at the remote router.')
alpsAscuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ALPS-MIB", "alpsAscuId"))
if mibBuilder.loadTexts: alpsAscuEntry.setStatus('current')
if mibBuilder.loadTexts: alpsAscuEntry.setDescription('Details of ASCU.')
alpsAscuId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)))
if mibBuilder.loadTexts: alpsAscuId.setStatus('current')
if mibBuilder.loadTexts: alpsAscuId.setDescription('Specifies the ASCU Identifier and uniquely identifies an ASCU on a given interface. This value is the Interface Address (IA) for ALC and the Remote Identifier (RID) for UTS. This uniquely identifies an ASCU on a given interface.')
alpsAscuA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 2), AlpsAscuA1A2Value()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuA1.setStatus('current')
if mibBuilder.loadTexts: alpsAscuA1.setDescription('A1 value of the ASCU.')
alpsAscuA2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 3), AlpsAscuA1A2Value()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuA2.setStatus('current')
if mibBuilder.loadTexts: alpsAscuA2.setDescription('A2 value of the ASCU.')
alpsAscuCktName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 4), AlpsCktName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuCktName.setStatus('current')
if mibBuilder.loadTexts: alpsAscuCktName.setDescription("Specifies the ALPS Circuit Name for the circuit that is to be used for this ASCU's data. Note that all ASCUs on a physical interface may not use the same ALPS circuit to connect to the central router")
alpsAscuAlarmsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuAlarmsEnabled.setStatus('current')
if mibBuilder.loadTexts: alpsAscuAlarmsEnabled.setDescription('Specifies whether alarms (syslog messages or SNMP traps) will be generated for this ASCU.')
alpsAscuRetryOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("resend", 1), ("reenter", 2), ("none", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuRetryOption.setStatus('current')
if mibBuilder.loadTexts: alpsAscuRetryOption.setDescription("Specifies the retry option for this ASCU. This specifies the error message to be sent to the terminal when a message is dropped at the router. The terminal has three choices - either retransmit the last message (if the terminal can buffer it), re-enter the last message sent or do nothing. Based on the terminal's capabilities, one of these three is configured for the ASCU. Note that this option is the same for all terminals connected to an ASCU because the ALPS feature does not handle individual terminals")
alpsAscuMaxMsgLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3840)).clone(962)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuMaxMsgLength.setStatus('current')
if mibBuilder.loadTexts: alpsAscuMaxMsgLength.setDescription('Specifies Maximum length of Input Message that can be received from this ASCU.')
alpsAscuFwdStatusOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuFwdStatusOption.setStatus('current')
if mibBuilder.loadTexts: alpsAscuFwdStatusOption.setDescription('If this flag is set, status messages received from the ASCU are forwarded to the host. Otherwise they are discarded. Note that these are relevant only for P1024C (UTS). For ALC, a value of FALSE will be returned.')
alpsAscuState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("unknown", 2), ("down", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuState.setStatus('current')
if mibBuilder.loadTexts: alpsAscuState.setDescription('Reports the current ASCU Status. ASCUs are initially in disabled state. They are enabled from the parser if the operator wants to. This takes them to an UP state from which they go to a DOWN state if there are too many errors.')
alpsAscuDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("noReason", 2), ("notDown", 3), ("ascuDisabled", 4), ("errorThresholdExceeded", 5))).clone('noReason')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuDownReason.setStatus('current')
if mibBuilder.loadTexts: alpsAscuDownReason.setDescription('Reports the Down reason for this ASCU if it is down.')
alpsAscuOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuOutPackets.setStatus('current')
if mibBuilder.loadTexts: alpsAscuOutPackets.setDescription('Number of packets transmitted to this ASCU.')
alpsAscuOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuOutOctets.setStatus('current')
if mibBuilder.loadTexts: alpsAscuOutOctets.setDescription('Number of octets transmitted to this ASCU.')
alpsAscuInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuInPackets.setStatus('current')
if mibBuilder.loadTexts: alpsAscuInPackets.setDescription('Number of packets received from this ASCU')
alpsAscuInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuInOctets.setStatus('current')
if mibBuilder.loadTexts: alpsAscuInOctets.setDescription('Number of octets received from this ASCU.')
alpsAscuDropsGarbledPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuDropsGarbledPkts.setStatus('current')
if mibBuilder.loadTexts: alpsAscuDropsGarbledPkts.setDescription('The number of packets dropped due to the inability to properly decode them. Examples of garbled packets include packets with bad CRCs or bad header information')
alpsAscuDropsAscuDown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuDropsAscuDown.setStatus('current')
if mibBuilder.loadTexts: alpsAscuDropsAscuDown.setDescription('The number of packets dropped because the ASCU had previously been declared DOWN due to error thresholds being exceeded.')
alpsAscuDropsAscuDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alpsAscuDropsAscuDisabled.setStatus('current')
if mibBuilder.loadTexts: alpsAscuDropsAscuDisabled.setDescription('The number of packets dropped because the ASCU had previously been declared to be in disabled state.')
alpsAscuEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuEnabled.setStatus('current')
if mibBuilder.loadTexts: alpsAscuEnabled.setDescription('Specifies whether the ASCU has been enabled or not. After the ASCU has been configured, it must be explicitly enabled to allow it to be polled.')
alpsAscuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuRowStatus.setStatus('current')
if mibBuilder.loadTexts: alpsAscuRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
alpsAscuAutoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 5, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsAscuAutoReset.setStatus('current')
if mibBuilder.loadTexts: alpsAscuAutoReset.setDescription('Specifies whether a reset command will be automatically issued to any non-responsive ALC ASCUs.')
alpsSvcMsgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 1), )
if mibBuilder.loadTexts: alpsSvcMsgTable.setStatus('current')
if mibBuilder.loadTexts: alpsSvcMsgTable.setDescription('A list of service messages and its associated number. There is a default list of service messages (list 0) as well as user-configurable service messages. On a per-circuit basis, the service message list to use can be selected. The user-configured service message lists are defined in this table. Note that the default service messages are not part of this table.')
alpsSvcMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-ALPS-MIB", "alpsSvcMsgListNum"), (0, "CISCO-ALPS-MIB", "alpsSvcMsgNum"))
if mibBuilder.loadTexts: alpsSvcMsgEntry.setStatus('current')
if mibBuilder.loadTexts: alpsSvcMsgEntry.setDescription('Service Messages configured along with its List number and Service Message Number in that list.')
alpsSvcMsgListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alpsSvcMsgListNum.setStatus('current')
if mibBuilder.loadTexts: alpsSvcMsgListNum.setDescription('Specifies the Service Msg Number of this Service Msg. A maximum of 8 Service Message lists can be configured not including the one for Default/System (when alpsSvcMsgListNum = 0) Service messages.')
alpsSvcMsgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alpsSvcMsgNum.setStatus('current')
if mibBuilder.loadTexts: alpsSvcMsgNum.setDescription('Specifies the Service Msg Number of this Service Msg. A Maximum of 8 messages can be present.')
alpsSvcMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsSvcMsg.setStatus('current')
if mibBuilder.loadTexts: alpsSvcMsg.setDescription('Specifies the Service Message string .')
alpsSvcMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsSvcMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: alpsSvcMsgRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
alpsX121ToIpTransTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 2), )
if mibBuilder.loadTexts: alpsX121ToIpTransTable.setStatus('current')
if mibBuilder.loadTexts: alpsX121ToIpTransTable.setDescription('A Translation table between X.121 address and IP address. This is intended to allow a connection to be established to the appropriate remote router. The X121 address in the call packet is used to look up the IP address of the remote peer')
alpsX121ToIpTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ALPS-MIB", "alpsX121"))
if mibBuilder.loadTexts: alpsX121ToIpTransEntry.setStatus('current')
if mibBuilder.loadTexts: alpsX121ToIpTransEntry.setDescription('A mapping table between X.121 address and IP address.')
alpsX121 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 2, 1, 1), X121Address())
if mibBuilder.loadTexts: alpsX121.setStatus('current')
if mibBuilder.loadTexts: alpsX121.setDescription('Specfies the X.121 address of the VC established with EMTOX host.')
alpsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsIpAddress.setStatus('current')
if mibBuilder.loadTexts: alpsIpAddress.setDescription('This is the IP address of the remote peer which maps onto the X.121 address.')
alpsX121ToIpTransRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 95, 1, 6, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alpsX121ToIpTransRowStatus.setStatus('current')
if mibBuilder.loadTexts: alpsX121ToIpTransRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
ciscoAlpsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 2))
ciscoAlpsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 2, 0))
alpsPeerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 95, 2, 0, 1)).setObjects(("CISCO-ALPS-MIB", "alpsRemPeerState"))
if mibBuilder.loadTexts: alpsPeerStatusChange.setStatus('deprecated')
if mibBuilder.loadTexts: alpsPeerStatusChange.setDescription('This Notification is generated when there is a change in state for the peer connection, provided alarms are enabled for that peer.')
alpsCktStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 95, 2, 0, 2)).setObjects(("CISCO-ALPS-MIB", "alpsCktBaseState"))
if mibBuilder.loadTexts: alpsCktStatusChange.setStatus('current')
if mibBuilder.loadTexts: alpsCktStatusChange.setDescription('This Notification has to be generated whenever there is a state change for the ALPS circuit, provided alarms are enabled for that circuit')
alpsAscuStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 95, 2, 0, 3)).setObjects(("CISCO-ALPS-MIB", "alpsAscuState"))
if mibBuilder.loadTexts: alpsAscuStatusChange.setStatus('current')
if mibBuilder.loadTexts: alpsAscuStatusChange.setDescription('This Notification has to be generated whenever there is a change in ASCU status, provided alarms are enabled for that ASCU')
alpsPeerConnStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 95, 2, 0, 4)).setObjects(("CISCO-ALPS-MIB", "alpsRemPeerConnState"))
if mibBuilder.loadTexts: alpsPeerConnStatusChange.setStatus('current')
if mibBuilder.loadTexts: alpsPeerConnStatusChange.setDescription('This Notification is generated when there is a change in state for an ALPS peer connection, provided alarms are enabled for that peer connection.')
alpsCktOpenFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 95, 2, 0, 5)).setObjects(("CISCO-ALPS-MIB", "alpsCktBaseDownReason"))
if mibBuilder.loadTexts: alpsCktOpenFailure.setStatus('current')
if mibBuilder.loadTexts: alpsCktOpenFailure.setDescription('This Notification is generated whenever there is an open failure for the ALPS circuit, provided alarms are enabled for that circuit')
alpsCktPartialReject = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 95, 2, 0, 6)).setObjects(("CISCO-ALPS-MIB", "alpsCktAscuIfIndex"), ("CISCO-ALPS-MIB", "alpsCktAscuId"))
if mibBuilder.loadTexts: alpsCktPartialReject.setStatus('current')
if mibBuilder.loadTexts: alpsCktPartialReject.setDescription('This Notification is generated whenever there is an open confirmation that contains a list of rejected ASCUs for the ALPS circuit, provided alarms are enabled for that circuit')
alpsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 3))
alpsMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 1))
alpsMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2))
alpsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 1, 1)).setObjects(("CISCO-ALPS-MIB", "alpsPeerGroup"), ("CISCO-ALPS-MIB", "alpsCktGroup"), ("CISCO-ALPS-MIB", "alpsIfP1024Group"), ("CISCO-ALPS-MIB", "alpsIfHostlinkGroup"), ("CISCO-ALPS-MIB", "alpsAscuGroup"), ("CISCO-ALPS-MIB", "alpsSvcMsgGroup"), ("CISCO-ALPS-MIB", "alpsAddrTransGroup"), ("CISCO-ALPS-MIB", "alpsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsMibCompliance = alpsMibCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: alpsMibCompliance.setDescription('The compliance statement for ALPS.')
alpsMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 1, 2)).setObjects(("CISCO-ALPS-MIB", "alpsCktGroup"), ("CISCO-ALPS-MIB", "alpsIfP1024Group"), ("CISCO-ALPS-MIB", "alpsIfHostlinkGroup"), ("CISCO-ALPS-MIB", "alpsAscuGroup"), ("CISCO-ALPS-MIB", "alpsSvcMsgGroup"), ("CISCO-ALPS-MIB", "alpsAddrTransGroup"), ("CISCO-ALPS-MIB", "alpsPeerGroupRev1"), ("CISCO-ALPS-MIB", "alpsNotificationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsMibComplianceRev1 = alpsMibComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: alpsMibComplianceRev1.setDescription('The compliance statement for ALPS.')
alpsMibComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 1, 3)).setObjects(("CISCO-ALPS-MIB", "alpsCktGroup"), ("CISCO-ALPS-MIB", "alpsIfP1024GroupRev1"), ("CISCO-ALPS-MIB", "alpsIfHostlinkGroup"), ("CISCO-ALPS-MIB", "alpsAscuGroupRev1"), ("CISCO-ALPS-MIB", "alpsSvcMsgGroup"), ("CISCO-ALPS-MIB", "alpsAddrTransGroup"), ("CISCO-ALPS-MIB", "alpsPeerGroupRev1"), ("CISCO-ALPS-MIB", "alpsNotificationGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsMibComplianceRev2 = alpsMibComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: alpsMibComplianceRev2.setDescription('The compliance statement for ALPS.')
alpsPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 1)).setObjects(("CISCO-ALPS-MIB", "alpsPeerLocalIpAddr"), ("CISCO-ALPS-MIB", "alpsPeerLocalAtpPort"), ("CISCO-ALPS-MIB", "alpsPeerKeepaliveTimeout"), ("CISCO-ALPS-MIB", "alpsPeerKeepaliveMaxRetries"), ("CISCO-ALPS-MIB", "alpsPeerInCallsAcceptFlag"), ("CISCO-ALPS-MIB", "alpsRemPeerConnType"), ("CISCO-ALPS-MIB", "alpsRemPeerLocalPort"), ("CISCO-ALPS-MIB", "alpsRemPeerRemotePort"), ("CISCO-ALPS-MIB", "alpsRemPeerState"), ("CISCO-ALPS-MIB", "alpsRemPeerUptime"), ("CISCO-ALPS-MIB", "alpsRemPeerNumActiveCkts"), ("CISCO-ALPS-MIB", "alpsRemPeerIdleTimer"), ("CISCO-ALPS-MIB", "alpsRemPeerAlarmsEnabled"), ("CISCO-ALPS-MIB", "alpsRemPeerTCPQlen"), ("CISCO-ALPS-MIB", "alpsRemPeerOutPackets"), ("CISCO-ALPS-MIB", "alpsRemPeerOutOctets"), ("CISCO-ALPS-MIB", "alpsRemPeerInPackets"), ("CISCO-ALPS-MIB", "alpsRemPeerInOctets"), ("CISCO-ALPS-MIB", "alpsRemPeerDropsGiant"), ("CISCO-ALPS-MIB", "alpsRemPeerDropsQFull"), ("CISCO-ALPS-MIB", "alpsRemPeerDropsPeerUnreach"), ("CISCO-ALPS-MIB", "alpsRemPeerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsPeerGroup = alpsPeerGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alpsPeerGroup.setDescription('A collection of objects providing Peer information')
alpsCktGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 2)).setObjects(("CISCO-ALPS-MIB", "alpsCktBasePriPeerAddr"), ("CISCO-ALPS-MIB", "alpsCktBaseAlarmsEnabled"), ("CISCO-ALPS-MIB", "alpsCktBaseConnType"), ("CISCO-ALPS-MIB", "alpsCktBaseState"), ("CISCO-ALPS-MIB", "alpsCktBaseNumActiveAscus"), ("CISCO-ALPS-MIB", "alpsCktBaseCurrentPeer"), ("CISCO-ALPS-MIB", "alpsCktBaseLifeTimeTimer"), ("CISCO-ALPS-MIB", "alpsCktBaseHostLinkNumber"), ("CISCO-ALPS-MIB", "alpsCktBaseHostLinkType"), ("CISCO-ALPS-MIB", "alpsCktBaseRemHld"), ("CISCO-ALPS-MIB", "alpsCktBaseLocalHld"), ("CISCO-ALPS-MIB", "alpsCktBaseDownReason"), ("CISCO-ALPS-MIB", "alpsCktBaseOutPackets"), ("CISCO-ALPS-MIB", "alpsCktBaseOutOctets"), ("CISCO-ALPS-MIB", "alpsCktBaseInPackets"), ("CISCO-ALPS-MIB", "alpsCktBaseInOctets"), ("CISCO-ALPS-MIB", "alpsCktBaseDropsCktDisabled"), ("CISCO-ALPS-MIB", "alpsCktBaseDropsQOverflow"), ("CISCO-ALPS-MIB", "alpsCktBaseDropsLifeTimeExpd"), ("CISCO-ALPS-MIB", "alpsCktBaseEnabled"), ("CISCO-ALPS-MIB", "alpsCktBaseRowStatus"), ("CISCO-ALPS-MIB", "alpsCktX25IfIndex"), ("CISCO-ALPS-MIB", "alpsCktX25LCN"), ("CISCO-ALPS-MIB", "alpsCktX25HostX121"), ("CISCO-ALPS-MIB", "alpsCktX25RemoteX121"), ("CISCO-ALPS-MIB", "alpsCktX25DropsVcReset"), ("CISCO-ALPS-MIB", "alpsCktP1024BackupPeerAddr"), ("CISCO-ALPS-MIB", "alpsCktP1024RetryTimer"), ("CISCO-ALPS-MIB", "alpsCktP1024IdleTimer"), ("CISCO-ALPS-MIB", "alpsCktP1024EmtoxX121"), ("CISCO-ALPS-MIB", "alpsCktP1024Ax25LCN"), ("CISCO-ALPS-MIB", "alpsCktP1024WinOut"), ("CISCO-ALPS-MIB", "alpsCktP1024WinIn"), ("CISCO-ALPS-MIB", "alpsCktP1024OutPktSize"), ("CISCO-ALPS-MIB", "alpsCktP1024InPktSize"), ("CISCO-ALPS-MIB", "alpsCktP1024SvcMsgList"), ("CISCO-ALPS-MIB", "alpsCktP1024SvcMsgIntvl"), ("CISCO-ALPS-MIB", "alpsCktP1024DropsUnkAscu"), ("CISCO-ALPS-MIB", "alpsCktP1024RowStatus"), ("CISCO-ALPS-MIB", "alpsCktAscuIfIndex"), ("CISCO-ALPS-MIB", "alpsCktAscuId"), ("CISCO-ALPS-MIB", "alpsCktAscuStatus"), ("CISCO-ALPS-MIB", "alpsCktBaseCurrPeerConnId"), ("CISCO-ALPS-MIB", "alpsCktP1024MatipCloseDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsCktGroup = alpsCktGroup.setStatus('current')
if mibBuilder.loadTexts: alpsCktGroup.setDescription('A collection of objects providing Circuit information')
alpsIfP1024Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 3)).setObjects(("CISCO-ALPS-MIB", "alpsIfP1024EncapType"), ("CISCO-ALPS-MIB", "alpsIfP1024PollRespTimeout"), ("CISCO-ALPS-MIB", "alpsIfP1024GATimeout"), ("CISCO-ALPS-MIB", "alpsIfP1024PollPauseTimeout"), ("CISCO-ALPS-MIB", "alpsIfP1024MaxErrCnt"), ("CISCO-ALPS-MIB", "alpsIfP1024MaxRetrans"), ("CISCO-ALPS-MIB", "alpsIfP1024CurrErrCnt"), ("CISCO-ALPS-MIB", "alpsIfP1024MinGoodPollResp"), ("CISCO-ALPS-MIB", "alpsIfP1024PollingRatio"), ("CISCO-ALPS-MIB", "alpsIfP1024NumAscus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsIfP1024Group = alpsIfP1024Group.setStatus('deprecated')
if mibBuilder.loadTexts: alpsIfP1024Group.setDescription('A collection of objects providing ALC interface information')
alpsIfHostlinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 4)).setObjects(("CISCO-ALPS-MIB", "alpsIfHLinkX25ProtocolType"), ("CISCO-ALPS-MIB", "alpsIfHLinkAx25PvcDamp"), ("CISCO-ALPS-MIB", "alpsIfHLinkEmtoxHostX121"), ("CISCO-ALPS-MIB", "alpsIfHLinkActiveCkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsIfHostlinkGroup = alpsIfHostlinkGroup.setStatus('current')
if mibBuilder.loadTexts: alpsIfHostlinkGroup.setDescription('A collection of objects providing Hostlink information')
alpsAscuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 5)).setObjects(("CISCO-ALPS-MIB", "alpsAscuA1"), ("CISCO-ALPS-MIB", "alpsAscuA2"), ("CISCO-ALPS-MIB", "alpsAscuCktName"), ("CISCO-ALPS-MIB", "alpsAscuAlarmsEnabled"), ("CISCO-ALPS-MIB", "alpsAscuRetryOption"), ("CISCO-ALPS-MIB", "alpsAscuMaxMsgLength"), ("CISCO-ALPS-MIB", "alpsAscuFwdStatusOption"), ("CISCO-ALPS-MIB", "alpsAscuState"), ("CISCO-ALPS-MIB", "alpsAscuDownReason"), ("CISCO-ALPS-MIB", "alpsAscuOutPackets"), ("CISCO-ALPS-MIB", "alpsAscuOutOctets"), ("CISCO-ALPS-MIB", "alpsAscuInPackets"), ("CISCO-ALPS-MIB", "alpsAscuInOctets"), ("CISCO-ALPS-MIB", "alpsAscuDropsGarbledPkts"), ("CISCO-ALPS-MIB", "alpsAscuDropsAscuDown"), ("CISCO-ALPS-MIB", "alpsAscuDropsAscuDisabled"), ("CISCO-ALPS-MIB", "alpsAscuEnabled"), ("CISCO-ALPS-MIB", "alpsAscuRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsAscuGroup = alpsAscuGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alpsAscuGroup.setDescription('A collection of objects providing ASCU information')
alpsSvcMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 6)).setObjects(("CISCO-ALPS-MIB", "alpsSvcMsg"), ("CISCO-ALPS-MIB", "alpsSvcMsgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsSvcMsgGroup = alpsSvcMsgGroup.setStatus('current')
if mibBuilder.loadTexts: alpsSvcMsgGroup.setDescription('A collection of objects providing Service Message information')
alpsAddrTransGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 7)).setObjects(("CISCO-ALPS-MIB", "alpsIpAddress"), ("CISCO-ALPS-MIB", "alpsX121ToIpTransRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsAddrTransGroup = alpsAddrTransGroup.setStatus('current')
if mibBuilder.loadTexts: alpsAddrTransGroup.setDescription('A collection of objects providing Address Translation information.')
alpsPeerGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 9)).setObjects(("CISCO-ALPS-MIB", "alpsPeerLocalIpAddr"), ("CISCO-ALPS-MIB", "alpsPeerLocalAtpPort"), ("CISCO-ALPS-MIB", "alpsPeerKeepaliveTimeout"), ("CISCO-ALPS-MIB", "alpsPeerKeepaliveMaxRetries"), ("CISCO-ALPS-MIB", "alpsPeerInCallsAcceptFlag"), ("CISCO-ALPS-MIB", "alpsRemPeerCfgActivation"), ("CISCO-ALPS-MIB", "alpsRemPeerCfgTCPQLen"), ("CISCO-ALPS-MIB", "alpsRemPeerCfgIdleTimer"), ("CISCO-ALPS-MIB", "alpsRemPeerCfgNoCircTimer"), ("CISCO-ALPS-MIB", "alpsRemPeerCfgAlarmsOn"), ("CISCO-ALPS-MIB", "alpsRemPeerCfgStatIntvl"), ("CISCO-ALPS-MIB", "alpsRemPeerCfgStatRetry"), ("CISCO-ALPS-MIB", "alpsRemPeerCfgRowStatus"), ("CISCO-ALPS-MIB", "alpsRemPeerConnLocalPort"), ("CISCO-ALPS-MIB", "alpsRemPeerConnForeignPort"), ("CISCO-ALPS-MIB", "alpsRemPeerConnState"), ("CISCO-ALPS-MIB", "alpsRemPeerConnProtocol"), ("CISCO-ALPS-MIB", "alpsRemPeerConnCreation"), ("CISCO-ALPS-MIB", "alpsRemPeerConnActivation"), ("CISCO-ALPS-MIB", "alpsRemPeerConnUptime"), ("CISCO-ALPS-MIB", "alpsRemPeerConnNumActCirc"), ("CISCO-ALPS-MIB", "alpsRemPeerConnLastTxRx"), ("CISCO-ALPS-MIB", "alpsRemPeerConnLastRxAny"), ("CISCO-ALPS-MIB", "alpsRemPeerConnIdleTimer"), ("CISCO-ALPS-MIB", "alpsRemPeerConnNoCircTimer"), ("CISCO-ALPS-MIB", "alpsRemPeerConnTCPQLen"), ("CISCO-ALPS-MIB", "alpsRemPeerConnAlarmsOn"), ("CISCO-ALPS-MIB", "alpsRemPeerConnStatIntvl"), ("CISCO-ALPS-MIB", "alpsRemPeerConnStatRetry"), ("CISCO-ALPS-MIB", "alpsRemPeerConnDownReason"), ("CISCO-ALPS-MIB", "alpsRemPeerConnOutPackets"), ("CISCO-ALPS-MIB", "alpsRemPeerConnOutOctets"), ("CISCO-ALPS-MIB", "alpsRemPeerConnInPackets"), ("CISCO-ALPS-MIB", "alpsRemPeerConnInOctets"), ("CISCO-ALPS-MIB", "alpsRemPeerConnDropsGiant"), ("CISCO-ALPS-MIB", "alpsRemPeerConnDropsQFull"), ("CISCO-ALPS-MIB", "alpsRemPeerConnDropsUnreach"), ("CISCO-ALPS-MIB", "alpsRemPeerConnDropsVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsPeerGroupRev1 = alpsPeerGroupRev1.setStatus('current')
if mibBuilder.loadTexts: alpsPeerGroupRev1.setDescription('A collection of objects providing peer information.')
alpsIfP1024GroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 11)).setObjects(("CISCO-ALPS-MIB", "alpsIfP1024EncapType"), ("CISCO-ALPS-MIB", "alpsIfP1024PollRespTimeout"), ("CISCO-ALPS-MIB", "alpsIfP1024GATimeout"), ("CISCO-ALPS-MIB", "alpsIfP1024PollPauseTimeout"), ("CISCO-ALPS-MIB", "alpsIfP1024MaxErrCnt"), ("CISCO-ALPS-MIB", "alpsIfP1024MaxRetrans"), ("CISCO-ALPS-MIB", "alpsIfP1024CurrErrCnt"), ("CISCO-ALPS-MIB", "alpsIfP1024MinGoodPollResp"), ("CISCO-ALPS-MIB", "alpsIfP1024PollingRatio"), ("CISCO-ALPS-MIB", "alpsIfP1024NumAscus"), ("CISCO-ALPS-MIB", "alpsIfP1024ServMsgFormat"), ("CISCO-ALPS-MIB", "alpsIfP1024ServMsgStatusChange"), ("CISCO-ALPS-MIB", "alpsIfP1024ServMsgDropTermAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsIfP1024GroupRev1 = alpsIfP1024GroupRev1.setStatus('current')
if mibBuilder.loadTexts: alpsIfP1024GroupRev1.setDescription('A collection of objects providing ALC interface information')
alpsAscuGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 12)).setObjects(("CISCO-ALPS-MIB", "alpsAscuA1"), ("CISCO-ALPS-MIB", "alpsAscuA2"), ("CISCO-ALPS-MIB", "alpsAscuCktName"), ("CISCO-ALPS-MIB", "alpsAscuAlarmsEnabled"), ("CISCO-ALPS-MIB", "alpsAscuRetryOption"), ("CISCO-ALPS-MIB", "alpsAscuMaxMsgLength"), ("CISCO-ALPS-MIB", "alpsAscuFwdStatusOption"), ("CISCO-ALPS-MIB", "alpsAscuState"), ("CISCO-ALPS-MIB", "alpsAscuDownReason"), ("CISCO-ALPS-MIB", "alpsAscuOutPackets"), ("CISCO-ALPS-MIB", "alpsAscuOutOctets"), ("CISCO-ALPS-MIB", "alpsAscuInPackets"), ("CISCO-ALPS-MIB", "alpsAscuInOctets"), ("CISCO-ALPS-MIB", "alpsAscuDropsGarbledPkts"), ("CISCO-ALPS-MIB", "alpsAscuDropsAscuDown"), ("CISCO-ALPS-MIB", "alpsAscuDropsAscuDisabled"), ("CISCO-ALPS-MIB", "alpsAscuEnabled"), ("CISCO-ALPS-MIB", "alpsAscuRowStatus"), ("CISCO-ALPS-MIB", "alpsAscuAutoReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsAscuGroupRev1 = alpsAscuGroupRev1.setStatus('current')
if mibBuilder.loadTexts: alpsAscuGroupRev1.setDescription('A collection of objects providing ASCU information')
alpsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 8)).setObjects(("CISCO-ALPS-MIB", "alpsPeerStatusChange"), ("CISCO-ALPS-MIB", "alpsCktStatusChange"), ("CISCO-ALPS-MIB", "alpsAscuStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsNotificationGroup = alpsNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: alpsNotificationGroup.setDescription('A collection of notifications.')
alpsNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 10)).setObjects(("CISCO-ALPS-MIB", "alpsCktStatusChange"), ("CISCO-ALPS-MIB", "alpsAscuStatusChange"), ("CISCO-ALPS-MIB", "alpsPeerConnStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsNotificationGroupRev1 = alpsNotificationGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: alpsNotificationGroupRev1.setDescription('A collection of notifications.')
alpsNotificationGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 95, 3, 2, 13)).setObjects(("CISCO-ALPS-MIB", "alpsCktStatusChange"), ("CISCO-ALPS-MIB", "alpsAscuStatusChange"), ("CISCO-ALPS-MIB", "alpsPeerConnStatusChange"), ("CISCO-ALPS-MIB", "alpsCktOpenFailure"), ("CISCO-ALPS-MIB", "alpsCktPartialReject"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alpsNotificationGroupRev2 = alpsNotificationGroupRev2.setStatus('current')
if mibBuilder.loadTexts: alpsNotificationGroupRev2.setDescription('A collection of notifications.')
mibBuilder.exportSymbols("CISCO-ALPS-MIB", alpsRemPeerConnIpAddr=alpsRemPeerConnIpAddr, alpsCktP1024RetryTimer=alpsCktP1024RetryTimer, alpsIfP1024MinGoodPollResp=alpsIfP1024MinGoodPollResp, alpsCktX25HostX121=alpsCktX25HostX121, alpsPeerKeepaliveMaxRetries=alpsPeerKeepaliveMaxRetries, alpsSvcMsgRowStatus=alpsSvcMsgRowStatus, alpsIfHLinkActiveCkts=alpsIfHLinkActiveCkts, alpsNotificationGroup=alpsNotificationGroup, alpsAscuOutOctets=alpsAscuOutOctets, alpsIfObjects=alpsIfObjects, alpsRemPeerConnDropsQFull=alpsRemPeerConnDropsQFull, alpsSvcMsgListNum=alpsSvcMsgListNum, alpsRemPeerCfgIpAddr=alpsRemPeerCfgIpAddr, alpsCktBaseDlcType=alpsCktBaseDlcType, alpsAscuOutPackets=alpsAscuOutPackets, alpsRemPeerCfgAlarmsOn=alpsRemPeerCfgAlarmsOn, alpsRemPeerConnProtocol=alpsRemPeerConnProtocol, alpsCktBaseOutPackets=alpsCktBaseOutPackets, alpsX121=alpsX121, alpsIfHLinkX25ProtocolType=alpsIfHLinkX25ProtocolType, alpsCktBaseCurrPeerConnId=alpsCktBaseCurrPeerConnId, alpsCktP1024DlcType=alpsCktP1024DlcType, alpsCktX25DlcType=alpsCktX25DlcType, alpsAddrTransGroup=alpsAddrTransGroup, alpsRemPeerCfgNoCircTimer=alpsRemPeerCfgNoCircTimer, alpsCktX25RemoteX121=alpsCktX25RemoteX121, alpsCktBaseInOctets=alpsCktBaseInOctets, alpsCktX25DropsVcReset=alpsCktX25DropsVcReset, alpsAscuFwdStatusOption=alpsAscuFwdStatusOption, alpsCktBaseDropsCktDisabled=alpsCktBaseDropsCktDisabled, alpsPeer=alpsPeer, alpsRemPeerOutPackets=alpsRemPeerOutPackets, alpsX121ToIpTransRowStatus=alpsX121ToIpTransRowStatus, alpsCktBasePriPeerAddr=alpsCktBasePriPeerAddr, alpsAscuRowStatus=alpsAscuRowStatus, alpsPeerLocalIpAddr=alpsPeerLocalIpAddr, alpsAscuDropsAscuDisabled=alpsAscuDropsAscuDisabled, alpsAscuMaxMsgLength=alpsAscuMaxMsgLength, alpsSvcMsg=alpsSvcMsg, alpsRemPeerIdleTimer=alpsRemPeerIdleTimer, alpsAscuInPackets=alpsAscuInPackets, alpsPeerConnStatusChange=alpsPeerConnStatusChange, alpsRemPeerConnStatRetry=alpsRemPeerConnStatRetry, alpsCktBaseInPackets=alpsCktBaseInPackets, alpsAscuEntry=alpsAscuEntry, alpsIfP1024MaxRetrans=alpsIfP1024MaxRetrans, alpsRemPeerCfgStatRetry=alpsRemPeerCfgStatRetry, alpsRemPeerConnCreation=alpsRemPeerConnCreation, alpsAscuA2=alpsAscuA2, alpsIfHLinkHostHld=alpsIfHLinkHostHld, alpsAscuA1=alpsAscuA1, alpsRemPeerCfgEntry=alpsRemPeerCfgEntry, alpsIfP1024CurrErrCnt=alpsIfP1024CurrErrCnt, alpsCktPartialReject=alpsCktPartialReject, alpsSvcMsgGroup=alpsSvcMsgGroup, alpsRemPeerLocalPort=alpsRemPeerLocalPort, AlpsCktName=AlpsCktName, alpsRemPeerOutOctets=alpsRemPeerOutOctets, alpsX121ToIpTransTable=alpsX121ToIpTransTable, alpsX121ToIpTransEntry=alpsX121ToIpTransEntry, alpsSvcMsgTable=alpsSvcMsgTable, alpsRemPeerConnActivation=alpsRemPeerConnActivation, alpsCktBaseRowStatus=alpsCktBaseRowStatus, alpsAscuInOctets=alpsAscuInOctets, alpsRemPeerConnAlarmsOn=alpsRemPeerConnAlarmsOn, alpsRemPeerCfgStatIntvl=alpsRemPeerCfgStatIntvl, alpsRemPeerConnOutOctets=alpsRemPeerConnOutOctets, alpsCktBaseAlarmsEnabled=alpsCktBaseAlarmsEnabled, alpsAscuObjects=alpsAscuObjects, alpsCktBaseOutOctets=alpsCktBaseOutOctets, alpsCktP1024Entry=alpsCktP1024Entry, alpsMibConformance=alpsMibConformance, alpsCktBaseDownReason=alpsCktBaseDownReason, alpsRemPeerUptime=alpsRemPeerUptime, alpsAscuAutoReset=alpsAscuAutoReset, alpsRemPeerRemotePort=alpsRemPeerRemotePort, alpsIpAddress=alpsIpAddress, alpsRemPeerConnDropsUnreach=alpsRemPeerConnDropsUnreach, alpsPeerGroup=alpsPeerGroup, alpsRemPeerConnLastRxAny=alpsRemPeerConnLastRxAny, alpsRemPeerConnDropsVersion=alpsRemPeerConnDropsVersion, alpsAscuStatusChange=alpsAscuStatusChange, alpsPeerObjects=alpsPeerObjects, alpsGlobalObjects=alpsGlobalObjects, alpsCktBaseState=alpsCktBaseState, alpsRemPeerConnLastTxRx=alpsRemPeerConnLastTxRx, alpsCktBaseEnabled=alpsCktBaseEnabled, ciscoAlpsMIB=ciscoAlpsMIB, alpsCktAscuTable=alpsCktAscuTable, alpsRemPeerConnInOctets=alpsRemPeerConnInOctets, alpsRemPeerConnNumActCirc=alpsRemPeerConnNumActCirc, alpsRemPeerConnTCPQLen=alpsRemPeerConnTCPQLen, alpsIfHLinkTable=alpsIfHLinkTable, alpsRemPeerConnDownReason=alpsRemPeerConnDownReason, alpsRemPeerTCPQlen=alpsRemPeerTCPQlen, alpsCktP1024InPktSize=alpsCktP1024InPktSize, alpsCktX25Table=alpsCktX25Table, alpsAscuEnabled=alpsAscuEnabled, alpsMibComplianceRev2=alpsMibComplianceRev2, alpsCktBaseTable=alpsCktBaseTable, alpsCktBaseEntry=alpsCktBaseEntry, alpsCktBaseLocalHld=alpsCktBaseLocalHld, alpsGroups=alpsGroups, alpsAscuGroupRev1=alpsAscuGroupRev1, alpsCktBaseHostLinkNumber=alpsCktBaseHostLinkNumber, alpsCktP1024MatipCloseDelay=alpsCktP1024MatipCloseDelay, alpsCktX25Entry=alpsCktX25Entry, alpsCktX25IfIndex=alpsCktX25IfIndex, ciscoAlpsMIBNotificationPrefix=ciscoAlpsMIBNotificationPrefix, alpsRemPeerCfgActivation=alpsRemPeerCfgActivation, alpsCktP1024SvcMsgIntvl=alpsCktP1024SvcMsgIntvl, alpsRemPeerDropsGiant=alpsRemPeerDropsGiant, alpsCktP1024Table=alpsCktP1024Table, alpsCktStatusChange=alpsCktStatusChange, alpsPeerStatusChange=alpsPeerStatusChange, ciscoAlpsMIBNotifications=ciscoAlpsMIBNotifications, alpsPeerLocalAtpPort=alpsPeerLocalAtpPort, alpsCktP1024RowStatus=alpsCktP1024RowStatus, ciscoAlpsMIBObjects=ciscoAlpsMIBObjects, alpsCktP1024IdleTimer=alpsCktP1024IdleTimer, alpsCktBaseConnType=alpsCktBaseConnType, alpsCktAscuIfIndex=alpsCktAscuIfIndex, alpsRemPeerDropsQFull=alpsRemPeerDropsQFull, alpsRemPeerCfgTable=alpsRemPeerCfgTable, alpsIfHLinkAx25PvcDamp=alpsIfHLinkAx25PvcDamp, alpsCktBaseCurrentPeer=alpsCktBaseCurrentPeer, PYSNMP_MODULE_ID=ciscoAlpsMIB, alpsAscuRetryOption=alpsAscuRetryOption, alpsRemPeerConnIdleTimer=alpsRemPeerConnIdleTimer, alpsRemPeerConnDropsGiant=alpsRemPeerConnDropsGiant, alpsCktAscuA1=alpsCktAscuA1, alpsRemPeerAlarmsEnabled=alpsRemPeerAlarmsEnabled, alpsCktP1024OutPktSize=alpsCktP1024OutPktSize, alpsIfP1024PollingRatio=alpsIfP1024PollingRatio, alpsNotificationGroupRev1=alpsNotificationGroupRev1, alpsPeerGroupRev1=alpsPeerGroupRev1, alpsPeerInCallsAcceptFlag=alpsPeerInCallsAcceptFlag, alpsRemPeerConnTable=alpsRemPeerConnTable, alpsRemPeerConnLocalPort=alpsRemPeerConnLocalPort, alpsIfP1024GATimeout=alpsIfP1024GATimeout, alpsIfP1024MaxErrCnt=alpsIfP1024MaxErrCnt, alpsIfP1024PollPauseTimeout=alpsIfP1024PollPauseTimeout, alpsCktBaseName=alpsCktBaseName, alpsAscuTable=alpsAscuTable, alpsRemPeerConnOutPackets=alpsRemPeerConnOutPackets, alpsCktBaseNumActiveAscus=alpsCktBaseNumActiveAscus, alpsCktAscuEntry=alpsCktAscuEntry, alpsCktGroup=alpsCktGroup, alpsAscuId=alpsAscuId, alpsCktP1024SvcMsgList=alpsCktP1024SvcMsgList, alpsAscuDropsGarbledPkts=alpsAscuDropsGarbledPkts, alpsCktP1024DropsUnkAscu=alpsCktP1024DropsUnkAscu, alpsIfP1024NumAscus=alpsIfP1024NumAscus, alpsIfP1024GroupRev1=alpsIfP1024GroupRev1, alpsMibCompliances=alpsMibCompliances, alpsCktP1024BackupPeerAddr=alpsCktP1024BackupPeerAddr, alpsCktP1024EmtoxX121=alpsCktP1024EmtoxX121, alpsCktAscuA2=alpsCktAscuA2, alpsRemPeerConnUptime=alpsRemPeerConnUptime, alpsIfHLinkEmtoxHostX121=alpsIfHLinkEmtoxHostX121, alpsRemPeerCfgIdleTimer=alpsRemPeerCfgIdleTimer, alpsRemPeerConnState=alpsRemPeerConnState, alpsRemPeerConnNoCircTimer=alpsRemPeerConnNoCircTimer, alpsCktBaseRemHld=alpsCktBaseRemHld, alpsIfP1024ServMsgDropTermAddr=alpsIfP1024ServMsgDropTermAddr, alpsSvcMsgEntry=alpsSvcMsgEntry, AlpsAscuA1A2Value=AlpsAscuA1A2Value, alpsCktBaseLifeTimeTimer=alpsCktBaseLifeTimeTimer, alpsMibComplianceRev1=alpsMibComplianceRev1, alpsRemPeerDropsPeerUnreach=alpsRemPeerDropsPeerUnreach, alpsRemPeerCfgRowStatus=alpsRemPeerCfgRowStatus, alpsCktOpenFailure=alpsCktOpenFailure, alpsIfP1024ServMsgStatusChange=alpsIfP1024ServMsgStatusChange, alpsCktObjects=alpsCktObjects, alpsRemPeerEntry=alpsRemPeerEntry, alpsRemPeerConnEntry=alpsRemPeerConnEntry, alpsRemPeerCfgProtocol=alpsRemPeerCfgProtocol, alpsCktP1024Ax25LCN=alpsCktP1024Ax25LCN, alpsCktAscuStatus=alpsCktAscuStatus, alpsIfP1024Entry=alpsIfP1024Entry, alpsNotificationGroupRev2=alpsNotificationGroupRev2, alpsRemPeerNumActiveCkts=alpsRemPeerNumActiveCkts, alpsPeerKeepaliveTimeout=alpsPeerKeepaliveTimeout, alpsRemPeerRowStatus=alpsRemPeerRowStatus, alpsAscuDownReason=alpsAscuDownReason, alpsIfHLinkNumber=alpsIfHLinkNumber, alpsCktBaseDropsQOverflow=alpsCktBaseDropsQOverflow, alpsCktX25LCN=alpsCktX25LCN, alpsAscuAlarmsEnabled=alpsAscuAlarmsEnabled, alpsAscuDropsAscuDown=alpsAscuDropsAscuDown, alpsRemPeerConnForeignPort=alpsRemPeerConnForeignPort, alpsAscuCktName=alpsAscuCktName, alpsCktP1024WinIn=alpsCktP1024WinIn, alpsCktAscuCktName=alpsCktAscuCktName, alpsIfP1024ServMsgFormat=alpsIfP1024ServMsgFormat, alpsRemPeerTable=alpsRemPeerTable, alpsSvcMsgNum=alpsSvcMsgNum, alpsMibGroups=alpsMibGroups, alpsCktAscuCktDlcType=alpsCktAscuCktDlcType, alpsCktP1024WinOut=alpsCktP1024WinOut, alpsCktBaseDropsLifeTimeExpd=alpsCktBaseDropsLifeTimeExpd, alpsIfP1024PollRespTimeout=alpsIfP1024PollRespTimeout, alpsRemPeerInPackets=alpsRemPeerInPackets, alpsCktAscuId=alpsCktAscuId, alpsRemPeerIpAddr=alpsRemPeerIpAddr, alpsRemPeerInOctets=alpsRemPeerInOctets, alpsRemPeerState=alpsRemPeerState, alpsMibCompliance=alpsMibCompliance, alpsIfP1024Table=alpsIfP1024Table, alpsRemPeerConnStatIntvl=alpsRemPeerConnStatIntvl, alpsIfHLinkEntry=alpsIfHLinkEntry, alpsCktBaseHostLinkType=alpsCktBaseHostLinkType, alpsAscuState=alpsAscuState, alpsIfP1024EncapType=alpsIfP1024EncapType, alpsRemPeerConnType=alpsRemPeerConnType, alpsRemPeerConnIdString=alpsRemPeerConnIdString, alpsRemPeerCfgTCPQLen=alpsRemPeerCfgTCPQLen, alpsAscuGroup=alpsAscuGroup, alpsIfP1024Group=alpsIfP1024Group, alpsIfHostlinkGroup=alpsIfHostlinkGroup, alpsRemPeerConnInPackets=alpsRemPeerConnInPackets)
