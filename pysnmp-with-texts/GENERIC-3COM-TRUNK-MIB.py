#
# PySNMP MIB module GENERIC-3COM-TRUNK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GENERIC-3COM-TRUNK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter64, NotificationType, ModuleIdentity, MibIdentifier, Integer32, TimeTicks, Counter32, Unsigned32, iso, IpAddress, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "NotificationType", "ModuleIdentity", "MibIdentifier", "Integer32", "TimeTicks", "Counter32", "Unsigned32", "iso", "IpAddress", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
generic = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10))
genExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1))
genTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1, 15))
a3ComTrunkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

a3ComTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 1), )
if mibBuilder.loadTexts: a3ComTrunkIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkIfTable.setDescription('This table lists TRUNK interfaces that exist within a device. A single entry exists in this list for each TRUNK interface in the system.')
a3ComTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 1, 1), ).setIndexNames((0, "GENERIC-3COM-TRUNK-MIB", "a3ComTrunkIfIndex"))
if mibBuilder.loadTexts: a3ComTrunkIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkIfEntry.setDescription('An individual Trunk interface entry. When an NMS wishes to create a new entry in this table, it must obtain a non-zero index from the a3ComNextAvailableVirtIfIndex which is defined in a3ComVirtualGroup. Row creation in this table will fail if the chosen index value does not match the current value returned from the a3ComNextAvailableVirtIfIndex object.')
a3ComTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: a3ComTrunkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkIfIndex.setDescription("The index value of this row and the Trunk's ifIndex in the ifTable. The NMS obtains the index value to create new row by reading the a3ComNextAvailableVirtIfIndex object which is the same as the one defined in a3ComVirtualGroup,")
a3ComTrunkIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComTrunkIfName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkIfName.setDescription('This is the name of this TRUNK interface.')
a3ComTrunkTcmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("tcmpDisable", 2), ("tcmpEnable", 3))).clone('tcmpEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComTrunkTcmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkTcmpEnable.setDescription('This object specifies if the Trunk Control Message Protocol(TCMP) is currently enabled for operation on a specific trunk. TCMP is used to dynamically control the configuration and operation of a trunk port and its constituent MACs.')
a3ComTrunkMacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("half10", 1), ("full10", 2), ("half100", 3), ("full100", 4), ("half1000", 5), ("full1000", 6))).clone('full100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComTrunkMacMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkMacMode.setDescription('This object controls the Trunk physical link speed. When a port is added to this Trunk, it is switched to the specified speed, regardless of its previous speed setting. All ports; therefore, will be running on the specified speed.')
a3ComTrunkIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComTrunkIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkIfStatus.setDescription('The status column for this TRUNK interface. This OBJECT can be set to: createAndGo(4) destroy(6) The following values may be read: active(1) notReady(3). Setting this object to createAndGo(4) causes the agent to attempt to create and commit the row based on the contents of the objects in the row. If all necessary information is present in the row and the values are acceptible to the agent, the agent will change the status to notReady(3). If any of the necessary objects are not available, the agent will reject the creation request. The state of the row transits to active(1) if and only if MAC(s) has/have been added to this entry through ifStackTable and system is ready. Setting this object to destroy(6) will remove the corresponding TRUNK interface and remove the entry in this table. In order for a set of this object to destroy(6) to succeed, all dependencies on this row must have been removed. These will include any stacking dependencies in the ifStackTable.')
a3ComTrunkMacTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 2), )
if mibBuilder.loadTexts: a3ComTrunkMacTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkMacTable.setDescription('A list of information about state of TRUNK MAC(s) in a TRUNK interface. If TCMP is not enabled, the MAC status is tied to the link status.')
a3ComTrunkMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 2, 1), ).setIndexNames((0, "GENERIC-3COM-TRUNK-MIB", "a3ComTrunkMacTrunkIfIndex"), (0, "GENERIC-3COM-TRUNK-MIB", "a3ComTrunkMacIndex"))
if mibBuilder.loadTexts: a3ComTrunkMacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkMacEntry.setDescription('An individual TRUNK group MAC entry status.')
a3ComTrunkMacTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: a3ComTrunkMacTrunkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkMacTrunkIfIndex.setDescription('This object is the same as a3ComTrunkIfIndex defined in a3ComTrunkIfTable.')
a3ComTrunkMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: a3ComTrunkMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkMacIndex.setDescription('This object identifies the ifIndex in the ifTable of a media access control (MAC) interface in the system.')
a3ComTrunkTcmpMacState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notInUse", 1), ("selected", 2), ("inUse", 3), ("undefined", 4), ("down", 5), ("up", 6), ("configured", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComTrunkTcmpMacState.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkTcmpMacState.setDescription('The state column for this MAC TRUNK entry if TCMP is enabled. The following values may be read: notInUse: corresponding MAC has not been selected for active participation in trunk. No LLC frames will be transmitted or received. selected: corresponding MAC is selected for active participation in the trunk, but it has not transited to active use. inUse: corresponding MAC is in active use on the trunk. The following values may be read if TCMP is disabled: undefined: corresponding MAC is undefined down: corresponding MAC is selected as a trunk port but is down up: corresponding MAC is selected and in use configured: corresponding MAC is configured as TRUNK MAC ')
a3ComTrunkTcmpPeersTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 3), )
if mibBuilder.loadTexts: a3ComTrunkTcmpPeersTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkTcmpPeersTable.setDescription('This table lists neighbouring information for a MAC in a Trunk interface.')
a3ComTrunkTcmpPeersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 3, 1), ).setIndexNames((0, "GENERIC-3COM-TRUNK-MIB", "a3ComTrunkPeerTrunkIfIndex"), (0, "GENERIC-3COM-TRUNK-MIB", "a3ComTrunkPeerMacIndex"), (0, "GENERIC-3COM-TRUNK-MIB", "a3ComTrunkPeersMacAddress"))
if mibBuilder.loadTexts: a3ComTrunkTcmpPeersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkTcmpPeersEntry.setDescription('Information about a particular peer of a MAC within the trunk.')
a3ComTrunkPeerTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: a3ComTrunkPeerTrunkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkPeerTrunkIfIndex.setDescription('This object is the same as a3ComTrunkIfIndex defined in a3ComTrunkIfTable.')
a3ComTrunkPeerMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: a3ComTrunkPeerMacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkPeerMacIndex.setDescription('This object identifies the ifIndex in the ifTable of a media access control (MAC) interface in the system.')
a3ComTrunkPeersMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 1, 15, 1, 3, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComTrunkPeersMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComTrunkPeersMacAddress.setDescription('The MAC address of a peer connected to the a3ComTrunkPeerMacIndex identified by this entry.')
mibBuilder.exportSymbols("GENERIC-3COM-TRUNK-MIB", a3Com=a3Com, a3ComTrunkIfEntry=a3ComTrunkIfEntry, a3ComTrunkTcmpEnable=a3ComTrunkTcmpEnable, a3ComTrunkPeersMacAddress=a3ComTrunkPeersMacAddress, a3ComTrunkIfTable=a3ComTrunkIfTable, a3ComTrunkGroup=a3ComTrunkGroup, genExperimental=genExperimental, RowStatus=RowStatus, a3ComTrunkMacTrunkIfIndex=a3ComTrunkMacTrunkIfIndex, genTrunk=genTrunk, a3ComTrunkPeerTrunkIfIndex=a3ComTrunkPeerTrunkIfIndex, a3ComTrunkPeerMacIndex=a3ComTrunkPeerMacIndex, a3ComTrunkTcmpMacState=a3ComTrunkTcmpMacState, a3ComTrunkIfName=a3ComTrunkIfName, generic=generic, a3ComTrunkMacTable=a3ComTrunkMacTable, a3ComTrunkMacIndex=a3ComTrunkMacIndex, a3ComTrunkIfIndex=a3ComTrunkIfIndex, a3ComTrunkTcmpPeersEntry=a3ComTrunkTcmpPeersEntry, a3ComTrunkMacMode=a3ComTrunkMacMode, a3ComTrunkTcmpPeersTable=a3ComTrunkTcmpPeersTable, a3ComTrunkMacEntry=a3ComTrunkMacEntry, a3ComTrunkIfStatus=a3ComTrunkIfStatus)
