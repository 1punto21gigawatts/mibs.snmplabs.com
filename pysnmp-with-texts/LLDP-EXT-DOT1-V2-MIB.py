#
# PySNMP MIB module LLDP-EXT-DOT1-V2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LLDP-EXT-DOT1-V2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:17:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
IEEE8021PriorityValue, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PriorityValue")
ifGeneralInformationGroup, = mibBuilder.importSymbols("IF-MIB", "ifGeneralInformationGroup")
lldpV2RemIndex, lldpV2PortConfigEntry, lldpV2RemLocalDestMACAddress, lldpV2RemLocalIfIndex, lldpV2Extensions, lldpV2LocPortIfIndex, lldpV2RemTimeMark = mibBuilder.importSymbols("LLDP-V2-MIB", "lldpV2RemIndex", "lldpV2PortConfigEntry", "lldpV2RemLocalDestMACAddress", "lldpV2RemLocalIfIndex", "lldpV2Extensions", "lldpV2LocPortIfIndex", "lldpV2RemTimeMark")
LldpV2LinkAggStatusMap, = mibBuilder.importSymbols("LLDP-V2-TC-MIB", "LldpV2LinkAggStatusMap")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Integer32, TimeTicks, Counter64, NotificationType, MibIdentifier, Unsigned32, ObjectIdentity, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Integer32", "TimeTicks", "Counter64", "NotificationType", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
lldpV2Xdot1MIB = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962))
lldpV2Xdot1MIB.setRevisions(('2015-02-16 00:00', '2014-12-15 00:00', '2011-03-25 00:00', '2011-03-23 00:00', '2009-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lldpV2Xdot1MIB.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Qcd revision. Adds Application VLAN TLV objects to the DCBX groups of the MIB module.', 'Published as part of IEEE Std 802.1Q-2014 revision. Cross references updated and corrected. New tables lldpV2Xdot1RemVidUsageDigestV2Table and lldpV2Xdot1RemManVidV2Table inserted; old versions deprecated. New versions add an index for lldpV2RemIndex. ', 'Published as part of IEEE Std 802.1Qaz-2011. Adds the DCBX objects to the MIB module', 'Published as part of IEEE Std 802.1Q-2011 revision. This revision contains changes associated with relocating the extension MIB from IEEE Std 802.1AB to IEEE Std 802.1Q, minor tweaks to the text of the DESCRIPTION statement above to fix references to IEEE Std 802.1Q, updating of references to refer to Annex D, and addition of object definitions for Congestion Notification TLVs and corresponding compliance statements.', 'Published as part of IEEE Std 802.1AB-2009 revision. This revision incorporated changes to the MIB to support the use of LLDP with multiple destination MAC addresses, and to import the Link Aggregation TLV from the 802.3 extension MIB',))
if mibBuilder.loadTexts: lldpV2Xdot1MIB.setLastUpdated('201502160000Z')
if mibBuilder.loadTexts: lldpV2Xdot1MIB.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: lldpV2Xdot1MIB.setContactInfo('WG-URL: http://grouper.ieee.org/groups/802/1/index.html WG-EMail: STDS-802-1-L@LISTSERV.IEEE.ORG Contact: IEEE 802.1 Working Group Chair Postal: C/O IEEE 802.1 Working Group IEEE Standards Association 445 Hoes Lane P.O. Box 1331 Piscataway NJ 08855-1331 USA E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: lldpV2Xdot1MIB.setDescription('The LLDP Management Information Base extension module for IEEE 802.1 organizationally defined discovery information. In order to ensure the uniqueness of the LLDP-V2-MIB, lldpV2Xdot1MIB is branched from lldpV2Extensions using an Organizationally Unique Identifier (OUI) value as the node. An OUI is a 24 bit globally unique number assigned by the IEEE Registration Authority - see: http://standards.ieee.org/develop/regauth/oui/index.html Unless otherwise indicated, the references in this MIB module are to IEEE Std 802.1Q-2014. Copyright (C) IEEE (2015). This version of this MIB module is published as D.5.5 of IEEE Std 802.1Q; see the standard itself for full legal notices.')
lldpV2Xdot1Objects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1))
lldpV2Xdot1Config = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1))
lldpV2Xdot1LocalData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2))
lldpV2Xdot1RemoteData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3))
lldpV2Xdot1ConfigPortVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 1), )
if mibBuilder.loadTexts: lldpV2Xdot1ConfigPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigPortVlanTable.setDescription('A table that controls selection of LLDP Port VLAN-ID TLVs to be transmitted on individual ports.')
lldpV2Xdot1ConfigPortVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 1, 1), )
lldpV2PortConfigEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigPortVlanEntry"))
lldpV2Xdot1ConfigPortVlanEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpV2Xdot1ConfigPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigPortVlanEntry.setDescription('LLDP configuration information that controls the transmission of IEEE 802.1 organizationally defined Port VLAN-ID TLV on LLDP transmission capable ports. This configuration object augments the lldpV2PortConfigEntry of the LLDP-MIB, therefore it is only present along with the port configuration defined by the associated lldpV2PortConfigEntry entry. Each active lldpConfigEntry is restored from non-volatile storage (along with the corresponding lldpV2PortConfigEntry) after a re-initialization of the management system.')
lldpV2Xdot1ConfigPortVlanTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot1ConfigPortVlanTxEnable.setReference('9.1.2.1 of IEEE Std 802.1AB')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigPortVlanTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigPortVlanTxEnable.setDescription('The lldpV2Xdot1ConfigPortVlanTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined port VLAN TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpV2Xdot1ConfigVlanNameTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 2), )
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVlanNameTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVlanNameTable.setDescription('The table that controls selection of LLDP VLAN name TLV instances to be transmitted on individual ports.')
lldpV2Xdot1ConfigVlanNameTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVlanNameTxEnable.setReference('9.1.2.1 of IEEE Std 802.1AB')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVlanNameTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVlanNameTxEnable.setDescription('The boolean value that indicates whether the corresponding Local System VLAN name instance is transmitted on the port defined by the given lldpV2Xdot1LocVlanNameEntry. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpV2Xdot1ConfigProtoVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 3), )
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtoVlanTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtoVlanTable.setDescription('The table that controls selection of LLDP Port And Protocol VLAN ID TLV instances to be transmitted on individual ports.')
lldpV2Xdot1ConfigProtoVlanTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtoVlanTxEnable.setReference('9.1.2.1 of IEEE Std 802.1AB')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtoVlanTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtoVlanTxEnable.setDescription('The boolean value that indicates whether the corresponding Local System Port and Protocol VLAN instance is transmitted on the port defined by the given lldpV2Xdot1LocProtoVlanEntry. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpV2Xdot1ConfigProtocolTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 4), )
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtocolTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtocolTable.setDescription('The table that controls selection of LLDP Protocol TLV instances to be transmitted on individual ports.')
lldpV2Xdot1ConfigProtocolTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtocolTxEnable.setReference('9.1.2.1 of IEEE Std 802.1AB')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtocolTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtocolTxEnable.setDescription('The boolean value that indicates whether the corresponding Local System Protocol Identity instance is transmitted on the port defined by the given lldpV2Xdot1LocProtocolEntry. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpV2Xdot1ConfigVidUsageDigestTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 5), )
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVidUsageDigestTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVidUsageDigestTable.setDescription('A table that controls selection of LLDP VID Usage Digest TLVs to be transmitted on individual ports.')
lldpV2Xdot1ConfigVidUsageDigestTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVidUsageDigestTxEnable.setReference('9.1.2.1 of IEEE Std 802.1AB')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVidUsageDigestTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVidUsageDigestTxEnable.setDescription('The boolean value that indicates whether the corresponding Local System VID Usage Digest instance will be transmitted on the port defined by the given lldpV2Xdot1LocVidUsageDigestEntry. The value of this object must be restored from non-volatile storage after a reinitialization of the management system.')
lldpV2Xdot1ConfigManVidTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 6), )
if mibBuilder.loadTexts: lldpV2Xdot1ConfigManVidTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigManVidTable.setDescription('A table that controls selection of LLDP Management VID TLVs to be transmitted on individual ports.')
lldpV2Xdot1ConfigManVidTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 6, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot1ConfigManVidTxEnable.setReference('9.1.2.1 of IEEE Std 802.1AB')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigManVidTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigManVidTxEnable.setDescription('The lldpV2Xdot1ConfigManVidTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined Management VID TLV transmission is allowed on a given LLDP transmission capable port. The value of this object must be restored from non-volatile storage after a re-initialization of the management system.')
lldpV2Xdot1LocTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 1), )
if mibBuilder.loadTexts: lldpV2Xdot1LocTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocTable.setDescription('This table contains one row per port for IEEE 802.1 organizationally defined LLDP extension on the local system known to this agent.')
lldpV2Xdot1LocEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1LocEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocEntry.setDescription('Information about IEEE 802.1 organizationally defined LLDP extension.')
lldpV2Xdot1LocPortVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocPortVlanId.setReference('D.2.1.1')
if mibBuilder.loadTexts: lldpV2Xdot1LocPortVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocPortVlanId.setDescription("The integer value used to identify the port's VLAN identifier associated with the local system. A value of zero shall be used if the system either does not know the PVID or does not support Port-based VLAN operation.")
lldpV2Xdot1LocProtoVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 2), )
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanTable.setDescription('This table contains one or more rows per Port and Protocol VLAN information about the local system.')
lldpV2Xdot1LocProtoVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocProtoVlanId"))
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanEntry.setDescription('Port and protocol VLAN ID Information about a particular port component. There may be multiple port and protocol VLANs, identified by a particular lldpV2Xdot1LocProtoVlanId, configured on the given port.')
lldpV2Xdot1ConfigProtoVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 3, 1), )
lldpV2Xdot1LocProtoVlanEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigProtoVlanEntry"))
lldpV2Xdot1ConfigProtoVlanEntry.setIndexNames(*lldpV2Xdot1LocProtoVlanEntry.getIndexNames())
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtoVlanEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtoVlanEntry.setDescription('LLDP configuration information that specifies the set of ports (represented as a PortList) on which the Local System Protocol VLAN instance is transmitted. This configuration object augments the lldpV2Xdot1LocVlanEntry, therefore it is only present along with the Port and Protocol VLAN ID instance contained in the associated lldpV2Xdot1LocVlanEntry entry. Each active lldpV2Xdot1ConfigProtoVlanEntry is restored from non-volatile storage (along with the corresponding lldpV2Xdot1LocProtoVlanEntry) after a re-initialization of the management system.')
lldpV2Xdot1LocProtoVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanId.setReference('D.2.2.2')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanId.setDescription('The integer value used to identify the port and protocol VLANs associated with the given port associated with the local system. A value of zero shall be used if the system either does not know the protocol VLAN ID (PPVID) or does not support port and protocol VLAN operation.')
lldpV2Xdot1LocProtoVlanSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanSupported.setReference('D.2.2.1')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanSupported.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanSupported.setDescription('The truth value used to indicate whether the given port (associated with the local system) supports port and protocol VLANs.')
lldpV2Xdot1LocProtoVlanEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanEnabled.setReference('D.2.2.1')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtoVlanEnabled.setDescription('The truth value used to indicate whether the port and protocol VLANs are enabled on the given port associated with the local system.')
lldpV2Xdot1LocVlanNameTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 3), )
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanNameTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanNameTable.setDescription('This table contains one or more rows per IEEE 802.1Q VLAN name information on the local system known to this agent.')
lldpV2Xdot1LocVlanNameEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocVlanId"))
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanNameEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanNameEntry.setDescription('VLAN name Information about a particular port component. There may be multiple VLANs, identified by a particular lldpV2Xdot1LocVlanId, configured on the given port.')
lldpV2Xdot1ConfigVlanNameEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 2, 1), )
lldpV2Xdot1LocVlanNameEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigVlanNameEntry"))
lldpV2Xdot1ConfigVlanNameEntry.setIndexNames(*lldpV2Xdot1LocVlanNameEntry.getIndexNames())
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVlanNameEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVlanNameEntry.setDescription('LLDP configuration information that specifies the set of ports (represented as a PortList) on which the Local System VLAN name instance is transmitted. This configuration object augments the lldpV2LocVlanEntry, therefore it is only present along with the VLAN Name instance contained in the associated lldpV2LocVlanNameEntry entry. Each active lldpV2Xdot1ConfigVlanNameEntry is restored from non-volatile storage (along with the corresponding lldpV2Xdot1LocVlanNameEntry) after a re-initialization of the management system.')
lldpV2Xdot1LocVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanId.setReference('D.2.3.2')
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanId.setDescription('The integer value used to identify the IEEE 802.1Q VLAN IDs with which the given port is compatible.')
lldpV2Xdot1LocVlanName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanName.setReference('D.2.3.4')
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanName.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocVlanName.setDescription('The string value used to identify VLAN name identified by the Vlan Id associated with the given port on the local system. This object should contain the value of the dot1QVLANStaticName object (defined in IETF RFC 4363) identified with the given lldpV2Xdot1LocVlanId.')
lldpV2Xdot1LocProtocolTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 4), )
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolTable.setReference('D.2.4')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolTable.setDescription('This table contains one or more rows per protocol identity information on the local system known to this agent.')
lldpV2Xdot1LocProtocolEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocProtocolIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolEntry.setReference('D.2.4')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolEntry.setDescription('Information about particular protocols that are accessible through the given port component. There may be multiple protocols, identified by particular lldpV2Xdot1ProtocolIndex, lldpV2LocPortIfIndex')
lldpV2Xdot1ConfigProtocolEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 4, 1), )
lldpV2Xdot1LocProtocolEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigProtocolEntry"))
lldpV2Xdot1ConfigProtocolEntry.setIndexNames(*lldpV2Xdot1LocProtocolEntry.getIndexNames())
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigProtocolEntry.setDescription('LLDP configuration information that specifies the set of ports (represented as a PortList) on which the Local System Protocol instance is transmitted. This configuration object augments the lldpV2Xdot1LocProtoEntry, therefore it is only present along with the Protocol instance contained in the associated lldpV2Xdot1LocProtoEntry entry. Each active lldpV2Xdot1ConfigProtocolEntry is restored from non-volatile storage (along with the corresponding lldpV2Xdot1LocProtocolEntry) after a re-initialization of the management system.')
lldpV2Xdot1LocProtocolIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolIndex.setDescription('This object represents an arbitrary local integer value used by this agent to identify a particular protocol identity.')
lldpV2Xdot1LocProtocolId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolId.setReference('D.2.4.3')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocProtocolId.setDescription('The octet string value used to identify the protocols associated with the given port of the local system.')
lldpV2Xdot1LocVidUsageDigestTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 5), )
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigestTable.setReference('D.2.5')
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigestTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigestTable.setDescription('This table contains one row per ifIndex/ destination MAC address pair for usage digest information on the local system known to this agent.')
lldpV2Xdot1LocVidUsageDigestEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 5, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigestEntry.setReference('D.2.5')
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigestEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigestEntry.setDescription('Usage digest information to be transmitted through the given port.')
lldpV2Xdot1ConfigVidUsageDigestEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 5, 1), )
lldpV2Xdot1LocVidUsageDigestEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigVidUsageDigestEntry"))
lldpV2Xdot1ConfigVidUsageDigestEntry.setIndexNames(*lldpV2Xdot1LocVidUsageDigestEntry.getIndexNames())
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVidUsageDigestEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigVidUsageDigestEntry.setDescription('LLDP configuration information that specifies the set of ports (represented as a PortList) on which the local system VID Usage Digest instance will be transmitted. This configuration object augments the lldpLocVidUsageDigestEntry, therefore it is only present along with the VID Usage Digest instance contained in the associated lldpV2Xdot1LocVidUsageDigestEntry entry. Each active lldpConfigVidUsageDigestEntry must be restored from non-volatile storage and re-created (along with the corresponding lldpV2Xdot1LocVidUsageDigestEntry) after a re-initialization of the management system.')
lldpV2Xdot1LocVidUsageDigest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigest.setReference('D.2.5.1')
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigest.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocVidUsageDigest.setDescription('The integer value obtained by applying the CRC32 function to the 128-octet VID Usage Table. A bit of the VID Usage Table contains the value PBB-TE-USAGE (binary 1) if the corresponding element of the MST Configuration Table (IEEE Std 802.1Q 8.9.1) contains the value PBB-TE MSTID (hex FFE) and otherwise contains the value NON-PBB-TE-USAGE (binary 0).')
lldpV2Xdot1LocManVidTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 6), )
if mibBuilder.loadTexts: lldpV2Xdot1LocManVidTable.setReference('D.2.6')
if mibBuilder.loadTexts: lldpV2Xdot1LocManVidTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocManVidTable.setDescription('This table contains one row per ifIndex/ destination MAC address pair for usage digest information on the local system known to this agent.')
lldpV2Xdot1LocManVidEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 6, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1LocManVidEntry.setReference('D.2.6')
if mibBuilder.loadTexts: lldpV2Xdot1LocManVidEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocManVidEntry.setDescription('Usage digest information to be transmitted through the given port.')
lldpV2Xdot1ConfigManVidEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 1, 6, 1), )
lldpV2Xdot1LocManVidEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigManVidEntry"))
lldpV2Xdot1ConfigManVidEntry.setIndexNames(*lldpV2Xdot1LocManVidEntry.getIndexNames())
if mibBuilder.loadTexts: lldpV2Xdot1ConfigManVidEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigManVidEntry.setDescription('LLDP configuration information that specifies the set of port/destination address pairs on which the Local System Management VID will be transmitted. This configuration object augments the lldpV2Xdot1LocManVidEntry, therefore it is only present along with the Management VID contained in the associated lldpV2Xdot1LocManVidEntry entry. Each active lldpV2Xdot1ConfigManVidEntry must be restored from non-volatile storage (along with the corresponding lldpV2Xdot1LocManVidEntry) after a re-initialization of the management system.')
lldpV2Xdot1LocManVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocManVid.setReference('D.2.6.1')
if mibBuilder.loadTexts: lldpV2Xdot1LocManVid.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocManVid.setDescription('The integer value configured on the Local system for the Management VID, or the value 0 if a Management VID has not been provisioned.')
lldpV2Xdot1LocLinkAggTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 7), )
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggTable.setDescription('This table contains one row per port of link aggregation information (as a part of the LLDP 802.1 organizational extension) on the local system known to this agent.')
lldpV2Xdot1LocLinkAggEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 7, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggEntry.setDescription('Link Aggregation information about a particular port component.')
lldpV2Xdot1LocLinkAggStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 7, 1, 1), LldpV2LinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggStatus.setReference('D.2.7.1')
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggStatus.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggStatus.setDescription('The bitmap value contains the link aggregation capabilities and the current aggregation status of the link.')
lldpV2Xdot1LocLinkAggPortId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 2, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggPortId.setReference('D.2.7.2')
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggPortId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocLinkAggPortId.setDescription('This object contains the IEEE 802.1 aggregated port identifier, aAggPortID (IEEE Std 802.1AX, 6.3.2.1.1), derived from the ifNumber of the ifIndex for the port component in link aggregation. If the port is not in link aggregation state and/or it does not support link aggregation, this value should be set to zero.')
lldpV2Xdot1RemTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 1), )
if mibBuilder.loadTexts: lldpV2Xdot1RemTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemTable.setDescription('This table contains one or more rows per physical network connection known to this agent. The agent may wish to ensure that only one lldpV2Xdot1RemEntry is present for each local port, or it may choose to maintain multiple lldpV2Xdot1RemEntries for the same local port.')
lldpV2Xdot1RemEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1RemEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemEntry.setDescription('Information about a particular port component.')
lldpV2Xdot1RemPortVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemPortVlanId.setReference('D.2.1.1')
if mibBuilder.loadTexts: lldpV2Xdot1RemPortVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemPortVlanId.setDescription("The integer value used to identify the port's VLAN identifier associated with the remote system. if the remote system either does not know the PVID or does not support Port-based VLAN operation, the value of lldpV2Xdot1RemPortVlanId should be zero.")
lldpV2Xdot1RemProtoVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 2), )
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanTable.setDescription('This table contains one or more rows per Port and Protocol VLAN information about the remote system, received on the given port.')
lldpV2Xdot1RemProtoVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemProtoVlanId"))
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanEntry.setDescription('Port and protocol VLAN name Information about a particular port component. There may be multiple protocol VLANs, identified by a particular lldpV2Xdot1RemProtoVlanId, configured on the remote system.')
lldpV2Xdot1RemProtoVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanId.setReference('D.2.2.2')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanId.setDescription('The integer value used to identify the port and protocol VLANs associated with the given port associated with the remote system. If port and protocol VLANs are not supported on the given port associated with the remote system, or if the port is not enabled with any port and protocol VLAN, the value of lldpV2Xdot1RemProtoVlanId should be zero.')
lldpV2Xdot1RemProtoVlanSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanSupported.setReference('D.2.2.1')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanSupported.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanSupported.setDescription('The truth value used to indicate whether the given port (associated with the remote system) is capable of supporting port and protocol VLANs.')
lldpV2Xdot1RemProtoVlanEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanEnabled.setReference('D.2.2.1')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtoVlanEnabled.setDescription('The truth value used to indicate whether the port and protocol VLANs are enabled on the given port associated with the remote system.')
lldpV2Xdot1RemVlanNameTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 3), )
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanNameTable.setReference('D.2.3')
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanNameTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanNameTable.setDescription('This table contains one or more rows per IEEE 802.1Q VLAN name information about the remote system, received on the given port.')
lldpV2Xdot1RemVlanNameEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemVlanId"))
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanNameEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanNameEntry.setDescription('VLAN name Information about a particular port component. There may be multiple VLANs, identified by a particular lldpV2Xdot1RemVlanId, received on the given port.')
lldpV2Xdot1RemVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanId.setReference('D.2.3.2')
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanId.setDescription('The integer value used to identify the IEEE 802.1Q VLAN IDs with which the given port of the remote system is compatible.')
lldpV2Xdot1RemVlanName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanName.setReference('D.2.3.4')
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanName.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemVlanName.setDescription('The string value used to identify VLAN name identified by the VLAN Id associated with the remote system.')
lldpV2Xdot1RemProtocolTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 4), )
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolTable.setDescription('This table contains one or more rows per protocol information about the remote system, received on the given port.')
lldpV2Xdot1RemProtocolEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemProtocolIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolEntry.setDescription('Protocol information about a particular port component. There may be multiple protocols, identified by a particular lldpV2Xdot1ProtocolIndex, received on the given port.')
lldpV2Xdot1RemProtocolIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolIndex.setDescription('This object represents an arbitrary local integer value used by this agent to identify a particular protocol identity.')
lldpV2Xdot1RemProtocolId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolId.setReference('D.2.4.3')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemProtocolId.setDescription('The octet string value used to identify the protocols associated with the given port of remote system.')
lldpV2Xdot1RemVidUsageDigestTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 5), )
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestTable.setReference('D.2.5')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestTable.setStatus('deprecated')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestTable.setDescription('This table contains one row per ifIndex/ destination MAC address pair for usage digest information received by the local system.')
lldpV2Xdot1RemVidUsageDigestEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 5, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"))
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestEntry.setReference('D.2.5')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestEntry.setDescription('Usage digest information received on the given port/destination address pair.')
lldpV2Xdot1RemVidUsageDigest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigest.setReference('D.2.5.1')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigest.setStatus('deprecated')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigest.setDescription('The integer value obtained by applying the CRC32 function to the 128-octet VID Usage Table. A bit of the VID Usage Table contains the value PBB-TE-USAGE (binary 1) if the corresponding element of the MST Configuration Table (IEEE Std 802.1Q 8.9.1) contains the value PBB-TE MSTID (hex FFE)and otherwise contains the value NON-PBB-TE-USAGE (binary 0).')
lldpV2Xdot1RemManVidTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 6), )
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidTable.setReference('D.2.6')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidTable.setStatus('deprecated')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidTable.setDescription('This table contains one row per ifIndex/ destination MAC address pair for management VID information received from remote systems.')
lldpV2Xdot1RemManVidEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 6, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"))
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidEntry.setReference('D.2.6')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidEntry.setDescription('Management VID information received through the given port/destination address pair.')
lldpV2Xdot1RemManVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemManVid.setReference('D.2.6.1')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVid.setStatus('deprecated')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVid.setDescription('The integer value configured on a system for the Management VID, or the value 0 if a Management VID has not been provisioned.')
lldpV2Xdot1RemVidUsageDigestV2Table = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 8), )
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2Table.setReference('D.2.5')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2Table.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2Table.setDescription('This table contains one row per ifIndex/ destination MAC address pair for usage digest information received by the local system.')
lldpV2Xdot1RemVidUsageDigestV2Entry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 8, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2Entry.setReference('D.2.5')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2Entry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2Entry.setDescription('Usage digest information received on the given port/destination address pair.')
lldpV2Xdot1RemVidUsageDigestV2 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2.setReference('D.2.5.1')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemVidUsageDigestV2.setDescription('The integer value obtained by applying the CRC32 function to the 128-octet VID Usage Table. A bit of the VID Usage Table contains the value PBB-TE-USAGE (binary 1) if the corresponding element of the MST Configuration Table (IEEE Std 802.1Q 8.9.1) contains the value PBB-TE MSTID (hex FFE)and otherwise contains the value NON-PBB-TE-USAGE (binary 0).')
lldpV2Xdot1RemManVidV2Table = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 9), )
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2Table.setReference('D.2.6')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2Table.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2Table.setDescription('This table contains one row per ifIndex/ destination MAC address pair for management VID information received from remote systems.')
lldpV2Xdot1RemManVidV2Entry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 9, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2Entry.setReference('D.2.6')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2Entry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2Entry.setDescription('Management VID information received through the given port/destination address pair.')
lldpV2Xdot1RemManVidV2 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2.setReference('D.2.6.1')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemManVidV2.setDescription('The integer value configured on a system for the Management VID, or the value 0 if a Management VID has not been provisioned.')
lldpV2Xdot1RemLinkAggTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 7), )
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggTable.setDescription('This table contains port link aggregation information (as a part of the LLDP IEEE 802.1 organizational extension) of the remote system.')
lldpV2Xdot1RemLinkAggEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 7, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggEntry.setDescription("Link Aggregation information about remote system's port component.")
lldpV2Xdot1RemLinkAggStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 7, 1, 1), LldpV2LinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggStatus.setReference('D.2.7.1')
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggStatus.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggStatus.setDescription('The bitmap value contains the link aggregation capabilities and the current aggregation status of the link.')
lldpV2Xdot1RemLinkAggPortId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 1, 3, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggPortId.setReference('D.2.7.2')
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggPortId.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemLinkAggPortId.setDescription('This object contains the IEEE 802.1 aggregated port identifier, aAggPortID (IEEE Std 802.1AX, 6.3.2.1.1), derived from the ifNumber of the ifIndex for the port component associated with the remote system. If the remote port is not in link aggregation state and/or it does not support link aggregation, this value should be zero.')
lldpV2Xdot1Conformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2))
lldpV2Xdot1Compliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 1))
lldpV2Xdot1Groups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 2))
lldpV2Xdot1TxRxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 1, 1)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigGroup"), ("LLDP-EXT-DOT1-V2-MIB", "ifGeneralInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot1TxRxCompliance = lldpV2Xdot1TxRxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1TxRxCompliance.setDescription('A compliance statement for SNMP entities that implement the IEEE 802.1 organizationally defined LLDP extension MIB. This group is mandatory for all agents that implement the LLDP 802.1 organizational extension in TX and/or RX mode for the basicSet TLV set. This version defines compliance requirements for V2 of the LLDP MIB.')
lldpV2Xdot1TxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 1, 2)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocSysGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot1TxCompliance = lldpV2Xdot1TxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1TxCompliance.setDescription('A compliance statement for SNMP entities that implement the IEEE 802.1 organizationally defined LLDP extension MIB. This group is mandatory for agents that implement the LLDP 802.1 organizational extension in the RX mode for the basicSet TLV set. This version defines compliance requirements for V2 of the LLDP MIB.')
lldpV2Xdot1RxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 1, 3)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemSysGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot1RxCompliance = lldpV2Xdot1RxCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: lldpV2Xdot1RxCompliance.setDescription('A compliance statement for SNMP entities that implement the IEEE 802.1 organizationally defined LLDP extension MIB. This group is mandatory for agents that implement the LLDP 802.1 organizational extension in the RX mode for the basicSet TLV set. This version defines compliance requirements for V2 of the LLDP MIB.')
lldpV2Xdot1RxComplianceV2 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 1, 4)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemSysV2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot1RxComplianceV2 = lldpV2Xdot1RxComplianceV2.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RxComplianceV2.setDescription('A compliance statement for SNMP entities that implement the IEEE 802.1 organizationally defined LLDP extension MIB. This group is mandatory for agents that implement the LLDP 802.1 organizational extension in the RX mode for the basicSet TLV set. This version defines compliance requirements for V2 of the LLDP MIB.')
lldpV2Xdot1ConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 2, 1)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigPortVlanTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigVlanNameTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigProtoVlanTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigProtocolTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigVidUsageDigestTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1ConfigManVidTxEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot1ConfigGroup = lldpV2Xdot1ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1ConfigGroup.setDescription('The collection of objects which are used to configure the IEEE 802.1 organizationally defined LLDP extension implementation behavior for the basicSet TLV set.')
lldpV2Xdot1LocSysGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 2, 2)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocPortVlanId"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocProtoVlanSupported"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocProtoVlanEnabled"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocVlanName"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocProtocolId"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocVidUsageDigest"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocManVid"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocLinkAggStatus"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocLinkAggPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot1LocSysGroup = lldpV2Xdot1LocSysGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocSysGroup.setDescription('The collection of objects which are used to represent IEEE 802.1 organizationally defined LLDP extension associated with the Local Device Information for the basicSet TLV set.')
lldpV2Xdot1RemSysGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 2, 3)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemPortVlanId"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemProtoVlanSupported"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemProtoVlanEnabled"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemVlanName"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemProtocolId"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemVidUsageDigest"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemManVid"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemLinkAggStatus"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemLinkAggPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot1RemSysGroup = lldpV2Xdot1RemSysGroup.setStatus('deprecated')
if mibBuilder.loadTexts: lldpV2Xdot1RemSysGroup.setDescription('The collection of objects which are used to represent LLDP 802.1 organizational extension Remote Device Information for the basicSet TLV set.')
lldpV2Xdot1RemSysV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 2, 2, 3)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemPortVlanId"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemProtoVlanSupported"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemProtoVlanEnabled"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemVlanName"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemProtocolId"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemVidUsageDigestV2"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemManVidV2"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemLinkAggStatus"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemLinkAggPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot1RemSysV2Group = lldpV2Xdot1RemSysV2Group.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemSysV2Group.setDescription('The collection of objects which are used to represent LLDP 802.1 organizational extension Remote Device Information for the basicSet TLV set.')
lldpXdot1CnMIB = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3))
lldpXdot1CnObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1))
lldpXdot1CnConfig = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 1))
lldpXdot1CnLocalData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 2))
lldpXdot1CnRemoteData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 3))
class LldpV2CnBitVector(TextualConvention, Bits):
    description = "This TC describes a bit vector used in the Congestion Notification objects. Each bit represents a Boolean status associated with a priority code point. A bit value of 0 represents FALSE, 1 represents TRUE. The bit 'pri0status(0)' indicates the status for priority 0 The bit 'pri1status(1)' indicates the status for priority 1 The bit 'pri2status(2)' indicates the status for priority 2 The bit 'pri3status(3)' indicates the status for priority 3 The bit 'pri4status(4)' indicates the status for priority 4 The bit 'pri5status(5)' indicates the status for priority 5 The bit 'pri6status(6)' indicates the status for priority 6 The bit 'pri7status(7)' indicates the status for priority 7"
    status = 'current'
    namedValues = NamedValues(("pri0status", 0), ("pri1status", 1), ("pri2status", 2), ("pri3status", 3), ("pri4status", 4), ("pri5status", 5), ("pri6status", 6), ("pri7status", 7))

lldpXdot1CnConfigCnTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1CnConfigCnTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1CnConfigCnTable.setDescription('A table that controls selection of Congestion Notification TLVs to be transmitted on individual ports.')
lldpXdot1CnConfigCnEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 1, 1, 1), )
lldpV2PortConfigEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1CnConfigCnEntry"))
lldpXdot1CnConfigCnEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1CnConfigCnEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1CnConfigCnEntry.setDescription('LLDP configuration information that controls the transmission of IEEE 802.1 organizationally defined Congestion Notification TLV on LLDP transmission capable ports. This configuration object augments the lldpV2PortConfigEntry of the LLDP-MIB, therefore it is only present along with the port configuration defined by the associated lldpV2PortConfigEntry entry. Each active lldpConfigEntry is restored from non-volatile storage (along with the corresponding lldpV2PortConfigEntry) after a re-initialization of the management system.')
lldpXdot1CnConfigCnTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1CnConfigCnTxEnable.setReference('D.2.8')
if mibBuilder.loadTexts: lldpXdot1CnConfigCnTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1CnConfigCnTxEnable.setDescription('The lldpXdot1CnConfigCnTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined Congestion Notification TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpV2Xdot1LocCnTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 2, 1), )
if mibBuilder.loadTexts: lldpV2Xdot1LocCnTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocCnTable.setDescription('This table contains one row per port of Congestion Notification information (as a part of the LLDP 802.1 organizational extension) on the local system known to this agent.')
lldpV2Xdot1LocCnEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 2, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1LocCnEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocCnEntry.setDescription('Congestion Notification information about a particular port component.')
lldpV2Xdot1LocCNPVIndicators = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 2, 1, 1, 1), LldpV2CnBitVector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocCNPVIndicators.setReference('D.2.8.3')
if mibBuilder.loadTexts: lldpV2Xdot1LocCNPVIndicators.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocCNPVIndicators.setDescription('This object contains the CNPV indicators for the Port.')
lldpV2Xdot1LocReadyIndicators = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 2, 1, 1, 2), LldpV2CnBitVector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1LocReadyIndicators.setReference('D.2.8.4')
if mibBuilder.loadTexts: lldpV2Xdot1LocReadyIndicators.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1LocReadyIndicators.setDescription('This object contains the Ready indicators for the Port.')
lldpV2Xdot1RemCnTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 3, 1), )
if mibBuilder.loadTexts: lldpV2Xdot1RemCnTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemCnTable.setDescription('This table contains Congestion Notification information (as a part of the LLDP IEEE 802.1 organizational extension) of the remote system.')
lldpV2Xdot1RemCnEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 3, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot1RemCnEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemCnEntry.setDescription('Port Extension information about remote systems port component.')
lldpV2Xdot1RemCNPVIndicators = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 3, 1, 1, 1), LldpV2CnBitVector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemCNPVIndicators.setReference('D.2.8.3')
if mibBuilder.loadTexts: lldpV2Xdot1RemCNPVIndicators.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemCNPVIndicators.setDescription('This object contains the CNPV indicators for the Port.')
lldpV2Xdot1RemReadyIndicators = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 3, 1, 3, 1, 1, 2), LldpV2CnBitVector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot1RemReadyIndicators.setReference('D.2.8.4')
if mibBuilder.loadTexts: lldpV2Xdot1RemReadyIndicators.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot1RemReadyIndicators.setDescription('This object contains the Ready indicators for the Port.')
lldpXdot1CnConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 4))
lldpXdot1CnCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 4, 1))
lldpXdot1CnGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 4, 2))
lldpXdot1CnCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 4, 1, 1)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1CnGroup"), ("LLDP-EXT-DOT1-V2-MIB", "ifGeneralInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXdot1CnCompliance = lldpXdot1CnCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1CnCompliance.setDescription('A compliance statement for SNMP entities that implement the IEEE 802.1 organizationally defined Congestion Notification LLDP extension MIB. This group is mandatory for agents that implement the Congestion Notification cnSet TLV set.')
lldpXdot1CnGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 4, 2, 1)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1CnConfigCnTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocCNPVIndicators"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1LocReadyIndicators"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemCNPVIndicators"), ("LLDP-EXT-DOT1-V2-MIB", "lldpV2Xdot1RemReadyIndicators"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXdot1CnGroup = lldpXdot1CnGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1CnGroup.setDescription('The collection of objects that support the Congestion Notification cnSet TLV set.')
lldpXdot1dcbxMIB = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5))
lldpXdot1dcbxObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1))
lldpXdot1dcbxConfig = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1))
lldpXdot1dcbxLocalData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2))
lldpXdot1dcbxRemoteData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3))
lldpXdot1dcbxAdminData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4))
class LldpXdot1dcbxTrafficClassValue(TextualConvention, Unsigned32):
    description = 'Indicates a traffic class. Values 0-7 correspond to traffic classes.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class LldpXdot1dcbxTrafficClassBandwidthValue(TextualConvention, Unsigned32):
    description = 'Indicates the bandwidth in percent assigned to a traffic class.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class LldpXdot1dcbxAppSelector(TextualConvention, Integer32):
    description = 'Indicates the contents of a protocol object 1: Ethertype 2: Well Known Port number over TCP, or SCTP 3: Well Known Port number over UDP, or DCCP 4: Well Known Port number over TCP, SCTP, UDP, and DCCP 5: Differentiated Services Code Point (DSCP) value. The 6 bit DSCP value is stored in the low order 6 bits of the protocol object. The higher order bits are set to zero. (See IETF RFC 2474 for the definition of the DSCP value.)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("asEthertype", 1), ("asTCPPortNumber", 2), ("asUDPPortNumber", 3), ("asTCPUDPPortNumber", 4), ("asDSCPValue", 5))

class LldpXdot1dcbxAppProtocol(TextualConvention, Unsigned32):
    description = 'Contains the application protocol indicator the type of which is specified by an object with the syntax of LldpXdot1dcbxAppSelector'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class LldpXdot1dcbxSupportedCapacity(TextualConvention, Unsigned32):
    description = 'Indicates the supported capacity of a given feature, for example, the number of traffic classes supported. This TC is used for features that have a maximum capacity of eight and a minimum of one.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

class LldpXdot1dcbxTrafficSelectionAlgorithm(TextualConvention, Integer32):
    description = 'Indicates the Traffic Selection Algorithm 0: Strict Priority 1: Credit-based shaper 2: Enhanced transmission selection 3-254: Reserved for furture standardization 255: Vendor specific'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))
    namedValues = NamedValues(("tsaStrictPriority", 0), ("tsaCreditBasedShaper", 1), ("tsaEnhancedTransmission", 2), ("tsaVendorSpecific", 255))

lldpXdot1dcbxConfigETSConfigurationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSConfigurationTable.setDescription('A table that controls selection of ETS Configuration TLVs to be transmitted on individual ports.')
lldpXdot1dcbxConfigETSConfigurationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 1, 1), )
lldpV2PortConfigEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigETSConfigurationEntry"))
lldpXdot1dcbxConfigETSConfigurationEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSConfigurationEntry.setDescription('LLDP configuration information that controls the transmission of IEEE 802.1 organizationally defined ETS Configuration TLV on LLDP transmission capable ports. This configuration object augments the lldpV2PortConfigEntry of the LLDP-MIB, therefore it is only present along with the port configuration defined by the associated lldpV2PortConfigEntry entry. Each active lldpConfigEntry is restored from non-volatile storage (along with the corresponding lldpV2PortConfigEntry) after a re-initialization of the management system.')
lldpXdot1dcbxConfigETSConfigurationTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSConfigurationTxEnable.setReference('D.2.9')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSConfigurationTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSConfigurationTxEnable.setDescription('The lldpXdot1dcbxConfigETSConfigurationTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined ETS Configuration TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpXdot1dcbxConfigETSRecommendationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSRecommendationTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSRecommendationTable.setDescription('A table that controls selection of ETS Recommendation TLVs to be transmitted on individual ports.')
lldpXdot1dcbxConfigETSRecommendationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 2, 1), )
lldpV2PortConfigEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigETSRecommendationEntry"))
lldpXdot1dcbxConfigETSRecommendationEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSRecommendationEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSRecommendationEntry.setDescription('LLDP configuration information that controls the transmission of IEEE 802.1 organizationally defined ETS Recommendation TLV on LLDP transmission capable ports. This configuration object augments the lldpV2PortConfigEntry of the LLDP-MIB, therefore it is only present along with the port configuration defined by the associated lldpV2PortConfigEntry entry. Each active lldpConfigEntry is restored from non-volatile storage (along with the corresponding lldpV2PortConfigEntry) after a re-initialization of the management system.')
lldpXdot1dcbxConfigETSRecommendationTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSRecommendationTxEnable.setReference('D.2.10')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSRecommendationTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigETSRecommendationTxEnable.setDescription('The lldpXdot1dcbxConfigETSRecommendationTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined ETS Recommendation TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpXdot1dcbxConfigPFCTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1dcbxConfigPFCTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigPFCTable.setDescription('A table that controls selection of Priority-based Flow Control Configuration TLVs to be transmitted on individual ports.')
lldpXdot1dcbxConfigPFCEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 3, 1), )
lldpV2PortConfigEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigPFCEntry"))
lldpXdot1dcbxConfigPFCEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1dcbxConfigPFCEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigPFCEntry.setDescription('LLDP configuration information that controls the transmission of IEEE 802.1 organizationally defined Priority-based Flow Control Configuration TLV on LLDP transmission capable ports. This configuration object augments the lldpV2PortConfigEntry of the LLDP-MIB, therefore it is only present along with the port configuration defined by the associated lldpV2PortConfigEntry entry. Each active lldpConfigEntry is restored from non-volatile storage (along with the corresponding lldpV2PortConfigEntry) after a re-initialization of the management system.')
lldpXdot1dcbxConfigPFCTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxConfigPFCTxEnable.setReference('D.2.11')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigPFCTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigPFCTxEnable.setDescription('The lldpXdot1dcbxConfigPFCTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined Priority-based Flow Control Configuration TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpXdot1dcbxConfigApplicationPriorityTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationPriorityTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationPriorityTable.setDescription('A table that controls selection of Priority-based Flow Control Configuration TLVs to be transmitted on individual ports.')
lldpXdot1dcbxConfigApplicationPriorityEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 4, 1), )
lldpV2PortConfigEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigApplicationPriorityEntry"))
lldpXdot1dcbxConfigApplicationPriorityEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationPriorityEntry.setDescription('LLDP configuration information that controls the transmission of IEEE 802.1 organizationally defined Application Priority TLV on LLDP transmission capable ports. This configuration object augments the lldpV2PortConfigEntry of the LLDP-MIB, therefore it is only present along with the port configuration defined by the associated lldpV2PortConfigEntry entry. Each active lldpConfigEntry is restored from non-volatile storage (along with the corresponding lldpV2PortConfigEntry) after a re-initialization of the management system.')
lldpXdot1dcbxConfigApplicationPriorityTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationPriorityTxEnable.setReference('D.2.12')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationPriorityTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationPriorityTxEnable.setDescription('The lldpXdot1dcbxConfigApplicationPriorityTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined Application Priority TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpXdot1dcbxConfigApplicationVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 5), )
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationVlanTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationVlanTable.setDescription('A table that controls selection of Application VLAN TLVs to be transmitted on individual ports.')
lldpXdot1dcbxConfigApplicationVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 5, 1), )
lldpV2PortConfigEntry.registerAugmentions(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigApplicationVlanEntry"))
lldpXdot1dcbxConfigApplicationVlanEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationVlanEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationVlanEntry.setDescription('LLDP configuration information that controls the transmission of IEEE 802.1 organizationally defined Application VLAN TLV on LLDP transmission capable ports. This configuration object augments the lldpV2PortConfigEntry of the LLDP-MIB, therefore it is only present along with the port configuration defined by the associated lldpV2PortConfigEntry entry. Each active lldpConfigEntry is restored from non-volatile storage (along with the corresponding lldpV2PortConfigEntry) after a re-initialization of the management system.')
lldpXdot1dcbxConfigApplicationVlanTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 1, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationVlanTxEnable.setReference('D.2.15')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationVlanTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxConfigApplicationVlanTxEnable.setDescription('The lldpXdot1dcbxConfigApplicationVlanTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined Application VLAN TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
lldpXdot1dcbxLocETSConfiguration = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1))
lldpXdot1dcbxLocETSBasicConfigurationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSBasicConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSBasicConfigurationTable.setDescription('This table contains one row per port for the IEEE 802.1 organizationally defined LLDP ETS Configuration TLV on the local system known to this agent')
lldpXdot1dcbxLocETSBasicConfigurationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSBasicConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSBasicConfigurationEntry.setDescription('Information about the IEEE 802.1 organizational defined ETS Configuration TLV LLDP extension.')
lldpXdot1dcbxLocETSConCreditBasedShaperSupport = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConCreditBasedShaperSupport.setReference('D.2.9.4')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConCreditBasedShaperSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConCreditBasedShaperSupport.setDescription('Indicates if the credit-based shaper Traffic Selection Algorithm is supported on the local system.')
lldpXdot1dcbxLocETSConTrafficClassesSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 1, 1, 2), LldpXdot1dcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassesSupported.setReference('D.2.9.5')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassesSupported.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassesSupported.setDescription('Indicates the number of traffic classes supported.')
lldpXdot1dcbxLocETSConWilling = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConWilling.setReference('D.2.9.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConWilling.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConWilling.setDescription('Indicates if the local system is willing to accept the ETS configuration recommended by the remote system.')
lldpXdot1dcbxLocETSConPriorityAssignmentTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriorityAssignmentTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriorityAssignmentTable.setDescription('This table contains one row per priority. The entry in each row indicates the traffic class to which the priority is assigned.')
lldpXdot1dcbxLocETSConPriorityAssignmentEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConPriority"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriorityAssignmentEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriorityAssignmentEntry.setDescription('Indicates a priority to traffic class assignment.')
lldpXdot1dcbxLocETSConPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 2, 1, 1), IEEE8021PriorityValue())
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriority.setReference('D.2.9.6')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriority.setDescription('Indicates the priority that is assigned to a traffic class.')
lldpXdot1dcbxLocETSConPriTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 2, 1, 2), LldpXdot1dcbxTrafficClassValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriTrafficClass.setReference('D.2.9.6')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConPriTrafficClass.setDescription('Indicates the traffic class to which this priority is to be assigned.')
lldpXdot1dcbxLocETSConTrafficClassBandwidthTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassBandwidthTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic class to which the bandwidth is assigned.')
lldpXdot1dcbxLocETSConTrafficClassBandwidthEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConTrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassBandwidthEntry.setDescription('Indicates a traffic class to Bandwidth assignment.')
lldpXdot1dcbxLocETSConTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 3, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClass.setReference('D.2.9.7')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClass.setDescription('Indicates the traffic class to which this bandwidth applies')
lldpXdot1dcbxLocETSConTrafficClassBandwidth = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 3, 1, 2), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassBandwidth.setReference('D.2.9.7')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassBandwidth.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficClassBandwidth.setDescription('Indicates the bandwidth assigned to this traffic class.')
lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic selction algorithm to be used by the traffic class.')
lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConTSATrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmEntry.setDescription('Indicates a traffic class to traffic selection algorithm assignment.')
lldpXdot1dcbxLocETSConTSATrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 4, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTSATrafficClass.setReference('D.2.9.8')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTSATrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTSATrafficClass.setDescription('Indicates the traffic class that is assigned to a traffic selection algorithm.')
lldpXdot1dcbxLocETSConTrafficSelectionAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 1, 4, 1, 2), LldpXdot1dcbxTrafficSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficSelectionAlgorithm.setReference('D.2.9.8')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficSelectionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSConTrafficSelectionAlgorithm.setDescription('Indicates the Traffic Selection Algorithm to which this traffic class is to be assigned.')
lldpXdot1dcbxLocETSReco = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2))
lldpXdot1dcbxLocETSRecoTrafficClassBandwidthTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClassBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClassBandwidthTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic class to which the bandwidth is assigned.')
lldpXdot1dcbxLocETSRecoTrafficClassBandwidthEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSRecoTrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClassBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClassBandwidthEntry.setDescription('Indicates a traffic class to Bandwidth assignment.')
lldpXdot1dcbxLocETSRecoTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2, 1, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClass.setReference('D.2.10.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClass.setDescription('Indicates the traffic class to which this bandwidth applies')
lldpXdot1dcbxLocETSRecoTrafficClassBandwidth = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2, 1, 1, 2), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClassBandwidth.setReference('D.2.10.4')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClassBandwidth.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficClassBandwidth.setDescription('Indicates the bandwidth assigned to this traffic class.')
lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmTable.setDescription('This table contains one row per priority. The entry in each row indicates the traffic selction algorithm to be used by the traffic class.')
lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSRecoTSATrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmEntry.setDescription('Indicates a priority to traffic selection algorithm assignment.')
lldpXdot1dcbxLocETSRecoTSATrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2, 2, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTSATrafficClass.setReference('D.2.10.5')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTSATrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTSATrafficClass.setDescription('Indicates the traffic class that is assigned to a traffic selection algorithm.')
lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 2, 2, 1, 2), LldpXdot1dcbxTrafficSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithm.setReference('D.2.10.5')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithm.setDescription('Indicates the Traffic Selection Algorithm to which this traffic class is to be assigned.')
lldpXdot1dcbxLocPFC = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3))
lldpXdot1dcbxLocPFCBasicTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCBasicTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCBasicTable.setDescription('This table contains one row per port for the IEEE 802.1 organizationally defined LLDP PFC TLV on the local system known to this agent')
lldpXdot1dcbxLocPFCBasicEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCBasicEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCBasicEntry.setDescription('Information about the IEEE 802.1 organizational defined PFC TLV LLDP extension.')
lldpXdot1dcbxLocPFCWilling = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCWilling.setReference('D.2.11.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCWilling.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCWilling.setDescription('Indicates if the local system is willing to accept the PFC configuration of the remote system.')
lldpXdot1dcbxLocPFCMBC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCMBC.setReference('D.2.11.4')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCMBC.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCMBC.setDescription('Indicates if the local system is capable of bypassing MACsec processing when MACsec is disabled.')
lldpXdot1dcbxLocPFCCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 1, 1, 3), LldpXdot1dcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCCap.setReference('D.2.11.5')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCCap.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCCap.setDescription('Indicates the number of traffic classes on the local device that may simultaneously have PFC enabled.')
lldpXdot1dcbxLocPFCEnableTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnableTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnableTable.setDescription('This table contains eight entries, one entry per priority, indicating if PFC is enabled on the corresponding priority.')
lldpXdot1dcbxLocPFCEnableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocPFCEnablePriority"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnableEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnableEntry.setDescription('Each entry indicates if PFC is enabled on the correponding priority')
lldpXdot1dcbxLocPFCEnablePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 2, 1, 1), IEEE8021PriorityValue())
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnablePriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnablePriority.setDescription('Prioity for which PFC is enabled / disabled')
lldpXdot1dcbxLocPFCEnableEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnableEnabled.setReference('D.2.11.6')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnableEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocPFCEnableEnabled.setDescription('Indicates if PFC is enabled on the corresponding priority')
lldpXdot1dcbxLocApplicationPriorityAppTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 4), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAppTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAppTable.setDescription('Table containing entries indicating the priorty to be used for a given application')
lldpXdot1dcbxLocApplicationPriorityAppEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocApplicationPriorityAESelector"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocApplicationPriorityAEProtocol"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAppEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAppEntry.setDescription('Entry that indicates the priority to be used for a given application.')
lldpXdot1dcbxLocApplicationPriorityAESelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 4, 1, 1), LldpXdot1dcbxAppSelector())
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAESelector.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAESelector.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAESelector.setDescription('Indicates the contents of the protocol object (lldpXdot1dcbxLocApplicationPriorityAEProtocol) 1: Ethertype 2: Well Known Port number over TCP, or SCTP 3: Well Known Port number over UDP, or DCCP 4: Well Known Port number over TCP, SCTP, UDP, and DCCP 5: Differentiated Services Code Point (DSCP) value. The 6 bit DSCP value is stored in the low order 6 bits of the protocol object. The higher order bits are set to zero. (See IETF RFC 2474 for the definition of the DSCP value.)')
lldpXdot1dcbxLocApplicationPriorityAEProtocol = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 4, 1, 2), LldpXdot1dcbxAppProtocol())
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAEProtocol.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAEProtocol.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAEProtocol.setDescription('The protocol indicator of the type indicated by lldpXdot1dcbxLocApplicationPriorityAESelector.')
lldpXdot1dcbxLocApplicationPriorityAEPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 4, 1, 3), IEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAEPriority.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAEPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationPriorityAEPriority.setDescription('The priority code point that should be used in frames transporting the protocol indicated by lldpXdot1dcbxLocApplicationPriorityAESelector and lldpXdot1dcbxLocApplicationPriorityAEProtocol')
lldpXdot1dcbxLocApplicationVlanAppTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 5), )
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAppTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAppTable.setDescription('Table containing entries indicating the VLAN to be used for a given application')
lldpXdot1dcbxLocApplicationVlanAppEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 5, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocApplicationVlanAESelector"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocApplicationVlanAEProtocol"))
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAppEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAppEntry.setDescription('Entry that indicates the VLAN to be used for a given application.')
lldpXdot1dcbxLocApplicationVlanAESelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 5, 1, 1), LldpXdot1dcbxAppSelector())
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAESelector.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAESelector.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAESelector.setDescription('Indicates the contents of the protocol object (lldpXdot1dcbxLocApplicationVlanAEProtocol) 1: Ethertype 2: Well Known Port number over TCP, or SCTP 3: Well Known Port number over UDP, or DCCP 4: Well Known Port number over TCP, SCTP, UDP, and DCCP 5: Differentiated Services Code Point (DSCP) value. The 6 bit DSCP value is stored in the low order 6 bits of the protocol object. The higher order bits are set to zero. (See IETF RFC 2474 for the definition of the DSCP value.)')
lldpXdot1dcbxLocApplicationVlanAEProtocol = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 5, 1, 2), LldpXdot1dcbxAppProtocol())
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAEProtocol.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAEProtocol.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAEProtocol.setDescription('The protocol indicator of the type indicated by lldpXdot1dcbxLocApplicationVlanAESelector.')
lldpXdot1dcbxLocApplicationVlanAEVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 2, 5, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAEVlanId.setReference('D.2.15.3')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAEVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxLocApplicationVlanAEVlanId.setDescription('The VLAN Identifier that should be used in frames transporting the protocol indicated by lldpXdot1dcbxLocApplicationVlanAESelector and lldpXdot1dcbxLocApplicationVlanAEProtocol')
lldpXdot1dcbxRemETSConfiguration = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1))
lldpXdot1dcbxRemETSBasicConfigurationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSBasicConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSBasicConfigurationTable.setDescription('This table contains one row per port for the IEEE 802.1 organizationally defined LLDP ETS Configuration TLV on the local system known to this agent')
lldpXdot1dcbxRemETSBasicConfigurationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSBasicConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSBasicConfigurationEntry.setDescription('Information about the IEEE 802.1 organizational defined ETS Configuration TLV LLDP extension.')
lldpXdot1dcbxRemETSConCreditBasedShaperSupport = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConCreditBasedShaperSupport.setReference('D.2.9.4')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConCreditBasedShaperSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConCreditBasedShaperSupport.setDescription('Indicates if the credit-based shaper Traffic Selection algorithm is supported on the remote system.')
lldpXdot1dcbxRemETSConTrafficClassesSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 1, 1, 2), LldpXdot1dcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassesSupported.setReference('D.2.9.5')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassesSupported.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassesSupported.setDescription('Indicates the number of traffic classes supported.')
lldpXdot1dcbxRemETSConWilling = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConWilling.setReference('D.2.9.3')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConWilling.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConWilling.setDescription('Indicates if the remote system is willing to accept the ETS configuration recommended by the remote system.')
lldpXdot1dcbxRemETSConPriorityAssignmentTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriorityAssignmentTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriorityAssignmentTable.setDescription('This table contains one row per priority. The entry in each row indicates the traffic class to which the priority is assigned.')
lldpXdot1dcbxRemETSConPriorityAssignmentEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConPriority"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriorityAssignmentEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriorityAssignmentEntry.setDescription('Indicates a priority to traffic class assignment.')
lldpXdot1dcbxRemETSConPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 2, 1, 1), IEEE8021PriorityValue())
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriority.setReference('D.2.9.6')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriority.setDescription('Indicates the priority that is assigned to a traffic class.')
lldpXdot1dcbxRemETSConPriTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 2, 1, 2), LldpXdot1dcbxTrafficClassValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriTrafficClass.setReference('D.2.9.6')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConPriTrafficClass.setDescription('Indicates the traffic class to which this priority is to be assigned.')
lldpXdot1dcbxRemETSConTrafficClassBandwidthTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassBandwidthTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic class to which the bandwidth is assigned.')
lldpXdot1dcbxRemETSConTrafficClassBandwidthEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConTrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassBandwidthEntry.setDescription('Indicates a traffic class to Bandwidth assignment.')
lldpXdot1dcbxRemETSConTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 3, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClass.setReference('D.2.9.7')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClass.setDescription('Indicates the traffic class to which this bandwidth applies')
lldpXdot1dcbxRemETSConTrafficClassBandwidth = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 3, 1, 2), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassBandwidth.setReference('D.2.9.7')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassBandwidth.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficClassBandwidth.setDescription('Indicates the bandwidth assigned to this traffic class.')
lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic selction algorithm to be used by the traffic class.')
lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConTSATrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmEntry.setDescription('Indicates a traffic class to traffic selection algorithm assignment.')
lldpXdot1dcbxRemETSConTSATrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 4, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTSATrafficClass.setReference('D.2.9.8')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTSATrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTSATrafficClass.setDescription('Indicates the traffic class that is assigned to a traffic selection algorithm.')
lldpXdot1dcbxRemETSConTrafficSelectionAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 1, 4, 1, 2), LldpXdot1dcbxTrafficSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficSelectionAlgorithm.setReference('D.2.9.8')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficSelectionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSConTrafficSelectionAlgorithm.setDescription('Indicates the Traffic Selection Algorithm to which this traffic class is to be assigned.')
lldpXdot1dcbxRemETSReco = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2))
lldpXdot1dcbxRemETSRecoTrafficClassBandwidthTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClassBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClassBandwidthTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic class to which the bandwidth is assigned.')
lldpXdot1dcbxRemETSRecoTrafficClassBandwidthEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSRecoTrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClassBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClassBandwidthEntry.setDescription('Indicates a traffic class to Bandwidth assignment.')
lldpXdot1dcbxRemETSRecoTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2, 1, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClass.setReference('D.2.10.4')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClass.setDescription('Indicates the traffic class to which this bandwidth applies')
lldpXdot1dcbxRemETSRecoTrafficClassBandwidth = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2, 1, 1, 2), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClassBandwidth.setReference('D.2.10.4')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClassBandwidth.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficClassBandwidth.setDescription('Indicates the bandwidth assigned to this traffic class.')
lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic selction algorithm to be used by the priority.')
lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSRecoTSATrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmEntry.setDescription('Indicates a priority to traffic selection algorithm assignment.')
lldpXdot1dcbxRemETSRecoTSATrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2, 2, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTSATrafficClass.setReference('D.2.10.5')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTSATrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTSATrafficClass.setDescription('Indicates the traffic class that is assigned to a traffic selection algorithm.')
lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 2, 2, 1, 2), LldpXdot1dcbxTrafficSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithm.setReference('D.2.10.5')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithm.setDescription('Indicates the Traffic Selection Algorithm to which this traffic class is to be assigned.')
lldpXdot1dcbxRemPFC = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3))
lldpXdot1dcbxRemPFCBasicTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCBasicTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCBasicTable.setDescription('This table contains one row per port for the IEEE 802.1 organizationally defined LLDP PFC TLV on the local system known to this agent')
lldpXdot1dcbxRemPFCBasicEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCBasicEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCBasicEntry.setDescription('Information about the IEEE 802.1 organizational defined PFC TLV LLDP extension.')
lldpXdot1dcbxRemPFCWilling = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCWilling.setReference('D.2.11.3')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCWilling.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCWilling.setDescription('Indicates if the remote system is willing to accept the PFC configuration of the local system.')
lldpXdot1dcbxRemPFCMBC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCMBC.setReference('D.2.11.4')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCMBC.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCMBC.setDescription('Indicates if the remote system is capable of bypassing MACsec processing when MACsec is disabled.')
lldpXdot1dcbxRemPFCCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 1, 1, 3), LldpXdot1dcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCCap.setReference('D.2.11.5')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCCap.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCCap.setDescription('Indicates the number of traffic classes on the remote device that may simultaneously have PFC enabled.')
lldpXdot1dcbxRemPFCEnableTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnableTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnableTable.setDescription('This table contains eight entries, one entry per priority, indicating if PFC is enabled on the corresponding priority.')
lldpXdot1dcbxRemPFCEnableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemPFCEnablePriority"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnableEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnableEntry.setDescription('Each entry indicates if PFC is enabled on the correponding priority')
lldpXdot1dcbxRemPFCEnablePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 2, 1, 1), IEEE8021PriorityValue())
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnablePriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnablePriority.setDescription('Prioity for which PFC is enabled / disabled')
lldpXdot1dcbxRemPFCEnableEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnableEnabled.setReference('D.2.11.6')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnableEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemPFCEnableEnabled.setDescription('Indicates if PFC is enabled on the corresponding priority')
lldpXdot1dcbxRemApplicationPriorityAppTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 4), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAppTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAppTable.setDescription('Table containing entries indicating the priorty to be used for a given application')
lldpXdot1dcbxRemApplicationPriorityAppEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemApplicationPriorityAESelector"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemApplicationPriorityAEProtocol"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAppEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAppEntry.setDescription('Entry that indicates the priority to be used for a given application.')
lldpXdot1dcbxRemApplicationPriorityAESelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 4, 1, 1), LldpXdot1dcbxAppSelector())
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAESelector.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAESelector.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAESelector.setDescription('Indicates the contents of the protocol object (lldpXdot1dcbxRemApplicationPriorityAEProtocol) 1: Ethertype 2: Well Known Port number over TCP, or SCTP 3: Well Known Port number over UDP, or DCCP 4: Well Known Port number over TCP, SCTP, UDP, and DCCP 5: Differentiated Services Code Point (DSCP) value. The 6 bit DSCP value is stored in the low order 6 bits of the protocol object. The higher order bits are set to zero. (See IETF RFC 2474 for the definition of the DSCP value.)')
lldpXdot1dcbxRemApplicationPriorityAEProtocol = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 4, 1, 2), LldpXdot1dcbxAppProtocol())
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAEProtocol.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAEProtocol.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAEProtocol.setDescription('The protocol indicator of the type indicated by lldpXdot1dcbxRemApplicationPriorityAESelector.')
lldpXdot1dcbxRemApplicationPriorityAEPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 4, 1, 3), IEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAEPriority.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAEPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationPriorityAEPriority.setDescription('The priority code point that should be used in frames transporting the protocol indicated by lldpXdot1dcbxRemApplicationPriorityAESelector and lldpXdot1dcbxRemApplicationPriorityAEProtocol')
lldpXdot1dcbxRemApplicationVlanAppTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 5), )
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAppTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAppTable.setDescription('Table containing entries indicating the VLAN to be used for a given application')
lldpXdot1dcbxRemApplicationVlanAppEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 5, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemApplicationVlanAESelector"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemApplicationVlanAEProtocol"))
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAppEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAppEntry.setDescription('Entry that indicates the VLAN to be used for a given application.')
lldpXdot1dcbxRemApplicationVlanAESelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 5, 1, 1), LldpXdot1dcbxAppSelector())
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAESelector.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAESelector.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAESelector.setDescription('Indicates the contents of the protocol object (lldpXdot1dcbxRemApplicationVlanAEProtocol) 1: Ethertype 2: Well Known Port number over TCP, or SCTP 3: Well Known Port number over UDP, or DCCP 4: Well Known Port number over TCP, SCTP, UDP, and DCCP 5: Differentiated Services Code Point (DSCP) value. The 6 bit DSCP value is stored in the low order 6 bits of the protocol object. The higher order bits are set to zero. (See IETF RFC 2474 for the definition of the DSCP value.)')
lldpXdot1dcbxRemApplicationVlanAEProtocol = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 5, 1, 2), LldpXdot1dcbxAppProtocol())
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAEProtocol.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAEProtocol.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAEProtocol.setDescription('The protocol indicator of the type indicated by lldpXdot1dcbxRemApplicationVlanAESelector.')
lldpXdot1dcbxRemApplicationVlanAEVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 3, 5, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAEVlanId.setReference('D.2.15.3')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAEVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxRemApplicationVlanAEVlanId.setDescription('The VLAN Identifier that should be used in frames transporting the protocol indicated by lldpXdot1dcbxRemApplicationVlanAESelector and lldpXdot1dcbxRemApplicationVlanAEProtocol')
lldpXdot1dcbxAdminETSConfiguration = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1))
lldpXdot1dcbxAdminETSBasicConfigurationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSBasicConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSBasicConfigurationTable.setDescription('This table contains one row per port for the IEEE 802.1 organizationally defined LLDP ETS Configuration TLV on the local system known to this agent')
lldpXdot1dcbxAdminETSBasicConfigurationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSBasicConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSBasicConfigurationEntry.setDescription('Information about the IEEE 802.1 organizational defined ETS Configuration TLV LLDP extension.')
lldpXdot1dcbxAdminETSConCreditBasedShaperSupport = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConCreditBasedShaperSupport.setReference('D.2.9.4')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConCreditBasedShaperSupport.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConCreditBasedShaperSupport.setDescription('Indicates support for the credit-based shaper Traffic Selection Algorithm.')
lldpXdot1dcbxAdminETSConTrafficClassesSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 1, 1, 2), LldpXdot1dcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassesSupported.setReference('D.2.9.5')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassesSupported.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassesSupported.setDescription('Indicates the number of traffic classes supported.')
lldpXdot1dcbxAdminETSConWilling = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConWilling.setReference('D.2.9.3')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConWilling.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConWilling.setDescription('Indicates if the local system is willing to accept the ETS configuration recommended by the remote system.')
lldpXdot1dcbxAdminETSConPriorityAssignmentTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriorityAssignmentTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriorityAssignmentTable.setDescription('This table contains one row per priority. The entry in each row indicates the traffic class to which the priority is assigned.')
lldpXdot1dcbxAdminETSConPriorityAssignmentEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConPriority"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriorityAssignmentEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriorityAssignmentEntry.setDescription('Indicates a priority to traffic class assignment.')
lldpXdot1dcbxAdminETSConPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 2, 1, 1), IEEE8021PriorityValue())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriority.setReference('D.2.9.6')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriority.setDescription('Indicates the priority that is assigned to a traffic class.')
lldpXdot1dcbxAdminETSConPriTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 2, 1, 2), LldpXdot1dcbxTrafficClassValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriTrafficClass.setReference('D.2.9.6')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConPriTrafficClass.setDescription('Indicates the traffic class to which this priority is to be assigned.')
lldpXdot1dcbxAdminETSConTrafficClassBandwidthTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassBandwidthTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic class to which the bandwidth is assigned.')
lldpXdot1dcbxAdminETSConTrafficClassBandwidthEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConTrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassBandwidthEntry.setDescription('Indicates a traffic class to Bandwidth assignment.')
lldpXdot1dcbxAdminETSConTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 3, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClass.setReference('D.2.9.7')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClass.setDescription('Indicates the traffic class to which this bandwidth applies')
lldpXdot1dcbxAdminETSConTrafficClassBandwidth = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 3, 1, 2), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassBandwidth.setReference('D.2.9.7')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassBandwidth.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficClassBandwidth.setDescription('Indicates the bandwidth assigned to this traffic class. The sum of the bandwidths assigned to a given port is required at all times to eqaul 100. An operation that attempts to change this table such that the bandwidth entires do not total 100 shall be rejected. An implication of this is that modification of this table requires that multiple set operations be included in a single SNMP PDU, commonly referred to as an MSET operation, to perform simultaneous set operations to keep the sum at 100. Any attempt to change a single entry in this table will result in the operation being rejected since entries in the table referring to the given port will no longer sum to 100.')
lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic selction algorithm to be used by the priority.')
lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConTSATrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmEntry.setDescription('Indicates a traffic class to traffic selection algorithm assignment.')
lldpXdot1dcbxAdminETSConTSATrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 4, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTSATrafficClass.setReference('D.2.9.8')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTSATrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTSATrafficClass.setDescription('Indicates the traffic class that is assigned to a traffic selection algorithm.')
lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 1, 4, 1, 2), LldpXdot1dcbxTrafficSelectionAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithm.setReference('D.2.9.8')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithm.setDescription('Indicates the Traffic Selection Algorithm to which this traffic class is to be assigned.')
lldpXdot1dcbxAdminETSReco = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2))
lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic class to which the bandwidth is assigned.')
lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSRecoTrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthEntry.setDescription('Indicates a traffic class to Bandwidth assignment.')
lldpXdot1dcbxAdminETSRecoTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2, 1, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClass.setReference('D.2.10.4')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClass.setDescription('Indicates the traffic class to which this bandwidth applies')
lldpXdot1dcbxAdminETSRecoTrafficClassBandwidth = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2, 1, 1, 2), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClassBandwidth.setReference('D.2.10.4')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClassBandwidth.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficClassBandwidth.setDescription('Indicates the bandwidth assigned to this traffic class. The sum of the bandwidths assigned to a given port is required at all times to eqaul 100. An operation that attempts to change this table such that the bandwidth entires do not total 100 shall be rejected. An implication of this is that modification of this table requires that multiple set operations be included in a single SNMP PDU, commonly referred to as an MSET operation, to perform simultaneous set operations to keep the sum at 100. Any attempt to change a single entry in this table will result in the operation being rejected since entries in the table referring to the given port will no longer sum to 100.')
lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmTable.setDescription('This table contains one row per traffic class. The entry in each row indicates the traffic selction algorithm to be used by the traffic class.')
lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSRecoTSATrafficClass"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmEntry.setDescription('Indicates a traffic class to traffic selection algorithm assignment.')
lldpXdot1dcbxAdminETSRecoTSATrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2, 2, 1, 1), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTSATrafficClass.setReference('D.2.10.5')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTSATrafficClass.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTSATrafficClass.setDescription('Indicates the traffic class that is assigned to a traffic selection algorithm.')
lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 2, 2, 1, 2), LldpXdot1dcbxTrafficSelectionAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithm.setReference('D.2.10.5')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithm.setDescription('Indicates the Traffic Selection Algorithm to which this traffic class is to be assigned.')
lldpXdot1dcbxAdminPFC = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3))
lldpXdot1dcbxAdminPFCBasicTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCBasicTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCBasicTable.setDescription('This table contains one row per port for the IEEE 802.1 organizationally defined LLDP PFC TLV on the local system known to this agent')
lldpXdot1dcbxAdminPFCBasicEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCBasicEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCBasicEntry.setDescription('Information about the IEEE 802.1 organizational defined PFC TLV LLDP extension.')
lldpXdot1dcbxAdminPFCWilling = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCWilling.setReference('D.2.11.3')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCWilling.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCWilling.setDescription('Indicates if the local system is willing to accept the PFC configuration of the remote system.')
lldpXdot1dcbxAdminPFCMBC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCMBC.setReference('D.2.11.4')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCMBC.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCMBC.setDescription('Indicates if the local system is capable of bypassing MACsec processing when MACsec is disabled.')
lldpXdot1dcbxAdminPFCCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 1, 1, 3), LldpXdot1dcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCCap.setReference('D.2.11.5')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCCap.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCCap.setDescription('Indicates the number of traffic classes on the local device that may simultaneously have PFC enabled. Note that this typically indicates a physical limitation of the device. However, some devices may allow this parameter to be administratively configured, in which case the MAX-ACCESS should be changed to read-write with and an appropriate DEFVAL added.')
lldpXdot1dcbxAdminPFCEnableTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnableTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnableTable.setDescription('This table contains eight entries, one entry per priority, indicating if PFC is enabled on the corresponding priority.')
lldpXdot1dcbxAdminPFCEnableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminPFCEnablePriority"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnableEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnableEntry.setDescription('Each entry indicates if PFC is enabled on the correponding priority')
lldpXdot1dcbxAdminPFCEnablePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 2, 1, 1), IEEE8021PriorityValue())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnablePriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnablePriority.setDescription('Prioity for which PFC is enabled / disabled')
lldpXdot1dcbxAdminPFCEnableEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 3, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnableEnabled.setReference('D.2.11.6')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnableEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminPFCEnableEnabled.setDescription('Indicates if PFC is enabled on the corresponding priority')
lldpXdot1dcbxAdminApplicationPriorityAppTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 4), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAppTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAppTable.setDescription('Table containing entries indicating the priorty to be used for a given application')
lldpXdot1dcbxAdminApplicationPriorityAppEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminApplicationPriorityAESelector"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminApplicationPriorityAEProtocol"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAppEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAppEntry.setDescription('Entry that indicates the priority to be used for a given application.')
lldpXdot1dcbxAdminApplicationPriorityAESelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 4, 1, 1), LldpXdot1dcbxAppSelector())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAESelector.setReference('D.2.11.6')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAESelector.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAESelector.setDescription('Indicates the contents of the protocol object (lldpXdot1dcbxAdminApplicationPriorityAEProtocol) 1: Ethertype 2: Well Known Port number over TCP, or SCTP 3: Well Known Port number over UDP, or DCCP 4: Well Known Port number over TCP, SCTP, UDP, and DCCP 5: Differentiated Services Code Point (DSCP) value. The 6 bit DSCP value is stored in the low order 6 bits of the protocol object. The higher order bits are set to zero. (See IETF RFC 2474 for the definition of the DSCP value.)')
lldpXdot1dcbxAdminApplicationPriorityAEProtocol = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 4, 1, 2), LldpXdot1dcbxAppProtocol())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAEProtocol.setReference('D.2.11.6')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAEProtocol.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAEProtocol.setDescription('The protocol indicator of the type indicated by lldpXdot1dcbxAdminApplicationPriorityAESelector.')
lldpXdot1dcbxAdminApplicationPriorityAEPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 4, 1, 3), IEEE8021PriorityValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAEPriority.setReference('D.2.11.6')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAEPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationPriorityAEPriority.setDescription('The priority code point that should be used in frames transporting the protocol indicated by lldpXdot1dcbxAdminApplicationPriorityAESelector and lldpXdot1dcbxAdminApplicationPriorityAEProtocol')
lldpXdot1dcbxAdminApplicationVlanAppTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 5), )
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAppTable.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAppTable.setDescription('Table containing entries indicating the VLAN to be used for a given application')
lldpXdot1dcbxAdminApplicationVlanAppEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 5, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminApplicationVlanAESelector"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminApplicationVlanAEProtocol"))
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAppEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAppEntry.setDescription('Entry that indicates the VLAN to be used for a given application.')
lldpXdot1dcbxAdminApplicationVlanAESelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 5, 1, 1), LldpXdot1dcbxAppSelector())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAESelector.setReference('D.2.12.3')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAESelector.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAESelector.setDescription('Indicates the contents of the protocol object (lldpXdot1dcbxAdminApplicationVlanAEProtocol) 1: Ethertype 2: Well Known Port number over TCP, or SCTP 3: Well Known Port number over UDP, or DCCP 4: Well Known Port number over TCP, SCTP, UDP, and DCCP 5: Differentiated Services Code Point (DSCP) value. The 6 bit DSCP value is stored in the low order 6 bits of the protocol object. The higher order bits are set to zero. (See IETF RFC 2474 for the definition of the DSCP value.)')
lldpXdot1dcbxAdminApplicationVlanAEProtocol = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 5, 1, 2), LldpXdot1dcbxAppProtocol())
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAEProtocol.setReference('D.2.15.3')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAEProtocol.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAEProtocol.setDescription('The protocol indicator of the type indicated by lldpXdot1dcbxAdminApplicationVlanAESelector.')
lldpXdot1dcbxAdminApplicationVlanAEVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 5, 1, 4, 5, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAEVlanId.setReference('D.2.15.3')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAEVlanId.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxAdminApplicationVlanAEVlanId.setDescription('The VLAN Identifier that should be used in frames transporting the protocol indicated by lldpXdot1dcbxAdminApplicationVlanAESelector and lldpXdot1dcbxAdminApplicationVlanAEProtocol')
lldpXdot1dcbxConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 6))
lldpXdot1dcbxCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 6, 1))
lldpXdot1dcbxGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 6, 2))
lldpXdot1dcbxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 6, 1, 1)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxETSGroup"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxPFCGroup"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxApplicationPriorityGroup"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxApplicationVlanGroup"), ("LLDP-EXT-DOT1-V2-MIB", "ifGeneralInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXdot1dcbxCompliance = lldpXdot1dcbxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxCompliance.setDescription('A compliance statement for SNMP entities that implement the IEEE 802.1 organizationally defined DCBX LLDP extension MIB. This group is mandatory for agents which implement Enhanced Transmission Selection.')
lldpXdot1dcbxETSGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 6, 2, 1)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigETSConfigurationTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigETSRecommendationTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConCreditBasedShaperSupport"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConTrafficClassesSupported"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConWilling"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConPriTrafficClass"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConTrafficClassBandwidth"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSConTrafficSelectionAlgorithm"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSRecoTrafficClassBandwidth"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithm"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConCreditBasedShaperSupport"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConTrafficClassesSupported"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConWilling"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConPriTrafficClass"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConTrafficClassBandwidth"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSConTrafficSelectionAlgorithm"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSRecoTrafficClassBandwidth"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithm"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConCreditBasedShaperSupport"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConTrafficClassesSupported"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConWilling"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConPriTrafficClass"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConTrafficClassBandwidth"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithm"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSRecoTrafficClassBandwidth"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXdot1dcbxETSGroup = lldpXdot1dcbxETSGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxETSGroup.setDescription('The collection of objects used for Enhanced Transmission Selection.')
lldpXdot1dcbxPFCGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 6, 2, 2)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigPFCTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocPFCWilling"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocPFCMBC"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocPFCCap"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocPFCEnableEnabled"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemPFCWilling"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemPFCMBC"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemPFCCap"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemPFCEnableEnabled"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminPFCWilling"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminPFCMBC"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminPFCCap"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminPFCEnableEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXdot1dcbxPFCGroup = lldpXdot1dcbxPFCGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxPFCGroup.setDescription('The collection of objects used for Priority- base Flow Control.')
lldpXdot1dcbxApplicationPriorityGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 6, 2, 3)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigApplicationPriorityTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocApplicationPriorityAEPriority"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemApplicationPriorityAEPriority"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminApplicationPriorityAEPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXdot1dcbxApplicationPriorityGroup = lldpXdot1dcbxApplicationPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxApplicationPriorityGroup.setDescription('The collection of objects used for Application priority.')
lldpXdot1dcbxApplicationVlanGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 1, 5, 32962, 6, 2, 4)).setObjects(("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxConfigApplicationVlanTxEnable"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxLocApplicationVlanAEVlanId"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxRemApplicationVlanAEVlanId"), ("LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminApplicationVlanAEVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXdot1dcbxApplicationVlanGroup = lldpXdot1dcbxApplicationVlanGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXdot1dcbxApplicationVlanGroup.setDescription('The collection of objects used for Application VLAN.')
mibBuilder.exportSymbols("LLDP-EXT-DOT1-V2-MIB", LldpXdot1dcbxAppProtocol=LldpXdot1dcbxAppProtocol, lldpXdot1dcbxRemApplicationPriorityAESelector=lldpXdot1dcbxRemApplicationPriorityAESelector, lldpXdot1dcbxConfigETSRecommendationEntry=lldpXdot1dcbxConfigETSRecommendationEntry, lldpXdot1dcbxLocApplicationPriorityAppTable=lldpXdot1dcbxLocApplicationPriorityAppTable, lldpXdot1dcbxAdminETSConPriority=lldpXdot1dcbxAdminETSConPriority, lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmEntry=lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmEntry, lldpXdot1dcbxPFCGroup=lldpXdot1dcbxPFCGroup, lldpXdot1dcbxConfigApplicationPriorityTxEnable=lldpXdot1dcbxConfigApplicationPriorityTxEnable, lldpXdot1dcbxAdminPFCBasicEntry=lldpXdot1dcbxAdminPFCBasicEntry, lldpV2Xdot1ConfigProtoVlanEntry=lldpV2Xdot1ConfigProtoVlanEntry, lldpV2Xdot1ConfigVidUsageDigestTable=lldpV2Xdot1ConfigVidUsageDigestTable, lldpXdot1dcbxConfigETSConfigurationTable=lldpXdot1dcbxConfigETSConfigurationTable, lldpV2Xdot1ConfigManVidTxEnable=lldpV2Xdot1ConfigManVidTxEnable, lldpXdot1dcbxLocPFCBasicEntry=lldpXdot1dcbxLocPFCBasicEntry, lldpXdot1dcbxAdminApplicationPriorityAppEntry=lldpXdot1dcbxAdminApplicationPriorityAppEntry, lldpV2Xdot1RemoteData=lldpV2Xdot1RemoteData, lldpXdot1dcbxRemETSRecoTrafficClassBandwidthEntry=lldpXdot1dcbxRemETSRecoTrafficClassBandwidthEntry, lldpXdot1dcbxAdminApplicationVlanAppTable=lldpXdot1dcbxAdminApplicationVlanAppTable, lldpXdot1dcbxLocETSConCreditBasedShaperSupport=lldpXdot1dcbxLocETSConCreditBasedShaperSupport, lldpXdot1dcbxLocETSConTrafficClassBandwidthTable=lldpXdot1dcbxLocETSConTrafficClassBandwidthTable, lldpXdot1dcbxConformance=lldpXdot1dcbxConformance, lldpXdot1dcbxRemPFCEnableTable=lldpXdot1dcbxRemPFCEnableTable, lldpV2Xdot1LocProtocolEntry=lldpV2Xdot1LocProtocolEntry, lldpXdot1dcbxAdminPFCEnableTable=lldpXdot1dcbxAdminPFCEnableTable, lldpXdot1dcbxAdminETSConTrafficClassBandwidth=lldpXdot1dcbxAdminETSConTrafficClassBandwidth, lldpXdot1dcbxConfigApplicationPriorityEntry=lldpXdot1dcbxConfigApplicationPriorityEntry, LldpXdot1dcbxAppSelector=LldpXdot1dcbxAppSelector, lldpXdot1dcbxLocETSConWilling=lldpXdot1dcbxLocETSConWilling, lldpXdot1dcbxRemETSReco=lldpXdot1dcbxRemETSReco, lldpV2Xdot1RemLinkAggStatus=lldpV2Xdot1RemLinkAggStatus, lldpXdot1dcbxAdminApplicationPriorityAEProtocol=lldpXdot1dcbxAdminApplicationPriorityAEProtocol, lldpXdot1dcbxLocETSRecoTrafficClass=lldpXdot1dcbxLocETSRecoTrafficClass, lldpV2Xdot1ConfigProtocolTable=lldpV2Xdot1ConfigProtocolTable, lldpV2Xdot1RemProtoVlanId=lldpV2Xdot1RemProtoVlanId, lldpXdot1dcbxRemETSConCreditBasedShaperSupport=lldpXdot1dcbxRemETSConCreditBasedShaperSupport, lldpV2Xdot1LocProtoVlanEntry=lldpV2Xdot1LocProtoVlanEntry, lldpV2Xdot1LocCnEntry=lldpV2Xdot1LocCnEntry, lldpXdot1dcbxAdminApplicationPriorityAppTable=lldpXdot1dcbxAdminApplicationPriorityAppTable, lldpV2Xdot1RemVidUsageDigestV2=lldpV2Xdot1RemVidUsageDigestV2, lldpV2Xdot1RemSysGroup=lldpV2Xdot1RemSysGroup, lldpV2Xdot1RemManVidV2Table=lldpV2Xdot1RemManVidV2Table, lldpV2Xdot1LocProtocolId=lldpV2Xdot1LocProtocolId, lldpXdot1dcbxAdminETSConPriTrafficClass=lldpXdot1dcbxAdminETSConPriTrafficClass, lldpV2Xdot1RemReadyIndicators=lldpV2Xdot1RemReadyIndicators, LldpXdot1dcbxTrafficClassBandwidthValue=LldpXdot1dcbxTrafficClassBandwidthValue, lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmEntry=lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmEntry, lldpXdot1dcbxLocETSBasicConfigurationEntry=lldpXdot1dcbxLocETSBasicConfigurationEntry, lldpXdot1CnRemoteData=lldpXdot1CnRemoteData, lldpXdot1dcbxConfig=lldpXdot1dcbxConfig, lldpXdot1dcbxLocETSConTrafficClassBandwidthEntry=lldpXdot1dcbxLocETSConTrafficClassBandwidthEntry, lldpXdot1dcbxLocETSConTrafficSelectionAlgorithm=lldpXdot1dcbxLocETSConTrafficSelectionAlgorithm, lldpXdot1dcbxLocETSRecoTrafficClassBandwidthEntry=lldpXdot1dcbxLocETSRecoTrafficClassBandwidthEntry, lldpV2Xdot1LocLinkAggPortId=lldpV2Xdot1LocLinkAggPortId, lldpXdot1dcbxConfigETSRecommendationTxEnable=lldpXdot1dcbxConfigETSRecommendationTxEnable, lldpV2Xdot1RemProtocolEntry=lldpV2Xdot1RemProtocolEntry, lldpXdot1dcbxLocPFC=lldpXdot1dcbxLocPFC, lldpXdot1dcbxAdminETSReco=lldpXdot1dcbxAdminETSReco, lldpXdot1dcbxRemETSConTrafficClassBandwidth=lldpXdot1dcbxRemETSConTrafficClassBandwidth, lldpXdot1dcbxRemApplicationVlanAppEntry=lldpXdot1dcbxRemApplicationVlanAppEntry, lldpV2Xdot1RemVlanNameTable=lldpV2Xdot1RemVlanNameTable, lldpXdot1CnLocalData=lldpXdot1CnLocalData, lldpXdot1dcbxLocETSConPriorityAssignmentEntry=lldpXdot1dcbxLocETSConPriorityAssignmentEntry, lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithm=lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithm, lldpV2Xdot1RxCompliance=lldpV2Xdot1RxCompliance, lldpXdot1dcbxLocApplicationPriorityAESelector=lldpXdot1dcbxLocApplicationPriorityAESelector, lldpXdot1dcbxRemETSConTSATrafficClass=lldpXdot1dcbxRemETSConTSATrafficClass, lldpV2Xdot1RemEntry=lldpV2Xdot1RemEntry, lldpXdot1dcbxAdminApplicationVlanAppEntry=lldpXdot1dcbxAdminApplicationVlanAppEntry, lldpXdot1dcbxAdminETSConTrafficClassBandwidthEntry=lldpXdot1dcbxAdminETSConTrafficClassBandwidthEntry, lldpV2Xdot1RemVidUsageDigest=lldpV2Xdot1RemVidUsageDigest, lldpXdot1dcbxConfigETSRecommendationTable=lldpXdot1dcbxConfigETSRecommendationTable, lldpV2Xdot1RemLinkAggPortId=lldpV2Xdot1RemLinkAggPortId, lldpXdot1dcbxLocalData=lldpXdot1dcbxLocalData, lldpXdot1dcbxLocApplicationPriorityAEPriority=lldpXdot1dcbxLocApplicationPriorityAEPriority, lldpXdot1dcbxAdminETSBasicConfigurationEntry=lldpXdot1dcbxAdminETSBasicConfigurationEntry, lldpXdot1dcbxAdminETSRecoTSATrafficClass=lldpXdot1dcbxAdminETSRecoTSATrafficClass, lldpXdot1dcbxAdminETSConTrafficClass=lldpXdot1dcbxAdminETSConTrafficClass, lldpXdot1CnConfigCnEntry=lldpXdot1CnConfigCnEntry, lldpV2Xdot1LocVidUsageDigestTable=lldpV2Xdot1LocVidUsageDigestTable, lldpXdot1dcbxAdminETSConCreditBasedShaperSupport=lldpXdot1dcbxAdminETSConCreditBasedShaperSupport, lldpV2Xdot1LocLinkAggEntry=lldpV2Xdot1LocLinkAggEntry, lldpV2Xdot1LocProtoVlanTable=lldpV2Xdot1LocProtoVlanTable, lldpV2Xdot1RemTable=lldpV2Xdot1RemTable, lldpV2Xdot1LocVidUsageDigestEntry=lldpV2Xdot1LocVidUsageDigestEntry, lldpV2Xdot1RemCNPVIndicators=lldpV2Xdot1RemCNPVIndicators, lldpXdot1dcbxLocApplicationPriorityAEProtocol=lldpXdot1dcbxLocApplicationPriorityAEProtocol, lldpXdot1dcbxRemPFCBasicTable=lldpXdot1dcbxRemPFCBasicTable, lldpXdot1dcbxAdminPFCCap=lldpXdot1dcbxAdminPFCCap, lldpXdot1dcbxLocETSConPriorityAssignmentTable=lldpXdot1dcbxLocETSConPriorityAssignmentTable, lldpXdot1dcbxRemETSBasicConfigurationTable=lldpXdot1dcbxRemETSBasicConfigurationTable, lldpV2Xdot1ConfigVlanNameTxEnable=lldpV2Xdot1ConfigVlanNameTxEnable, lldpXdot1dcbxRemoteData=lldpXdot1dcbxRemoteData, lldpXdot1dcbxLocApplicationVlanAESelector=lldpXdot1dcbxLocApplicationVlanAESelector, lldpV2Xdot1LocalData=lldpV2Xdot1LocalData, lldpV2Xdot1RemManVidTable=lldpV2Xdot1RemManVidTable, lldpV2Xdot1RemProtoVlanEntry=lldpV2Xdot1RemProtoVlanEntry, lldpXdot1dcbxLocETSConTrafficClassesSupported=lldpXdot1dcbxLocETSConTrafficClassesSupported, lldpXdot1dcbxLocApplicationVlanAEProtocol=lldpXdot1dcbxLocApplicationVlanAEProtocol, lldpXdot1CnConformance=lldpXdot1CnConformance, lldpV2Xdot1ConfigGroup=lldpV2Xdot1ConfigGroup, LldpV2CnBitVector=LldpV2CnBitVector, lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmEntry=lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmEntry, lldpXdot1dcbxLocPFCEnableEnabled=lldpXdot1dcbxLocPFCEnableEnabled, lldpXdot1dcbxLocETSConfiguration=lldpXdot1dcbxLocETSConfiguration, lldpV2Xdot1LocProtoVlanSupported=lldpV2Xdot1LocProtoVlanSupported, lldpXdot1dcbxConfigETSConfigurationEntry=lldpXdot1dcbxConfigETSConfigurationEntry, lldpXdot1dcbxObjects=lldpXdot1dcbxObjects, lldpXdot1dcbxLocETSReco=lldpXdot1dcbxLocETSReco, lldpV2Xdot1RemProtoVlanTable=lldpV2Xdot1RemProtoVlanTable, lldpV2Xdot1ConfigProtoVlanTxEnable=lldpV2Xdot1ConfigProtoVlanTxEnable, lldpXdot1dcbxRemETSConTrafficClass=lldpXdot1dcbxRemETSConTrafficClass, lldpXdot1CnGroup=lldpXdot1CnGroup, lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmTable=lldpXdot1dcbxRemETSConTrafficSelectionAlgorithmTable, lldpV2Xdot1Objects=lldpV2Xdot1Objects, lldpXdot1dcbxConfigApplicationVlanEntry=lldpXdot1dcbxConfigApplicationVlanEntry, lldpXdot1dcbxLocETSConTSATrafficClass=lldpXdot1dcbxLocETSConTSATrafficClass, lldpV2Xdot1RemVidUsageDigestV2Table=lldpV2Xdot1RemVidUsageDigestV2Table, lldpXdot1dcbxConfigPFCTxEnable=lldpXdot1dcbxConfigPFCTxEnable, lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmEntry=lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmEntry, lldpXdot1dcbxLocETSConPriority=lldpXdot1dcbxLocETSConPriority, lldpXdot1dcbxLocPFCEnablePriority=lldpXdot1dcbxLocPFCEnablePriority, lldpXdot1dcbxApplicationVlanGroup=lldpXdot1dcbxApplicationVlanGroup, lldpV2Xdot1LocManVidEntry=lldpV2Xdot1LocManVidEntry, lldpXdot1dcbxRemETSBasicConfigurationEntry=lldpXdot1dcbxRemETSBasicConfigurationEntry, lldpV2Xdot1MIB=lldpV2Xdot1MIB, lldpXdot1dcbxAdminETSConPriorityAssignmentTable=lldpXdot1dcbxAdminETSConPriorityAssignmentTable, lldpXdot1dcbxAdminApplicationPriorityAESelector=lldpXdot1dcbxAdminApplicationPriorityAESelector, lldpXdot1dcbxCompliance=lldpXdot1dcbxCompliance, lldpXdot1dcbxRemETSConPriorityAssignmentEntry=lldpXdot1dcbxRemETSConPriorityAssignmentEntry, lldpV2Xdot1LocEntry=lldpV2Xdot1LocEntry, lldpV2Xdot1RemVidUsageDigestTable=lldpV2Xdot1RemVidUsageDigestTable, lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithm=lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithm, lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmTable=lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithmTable, lldpXdot1CnObjects=lldpXdot1CnObjects, lldpV2Xdot1LocLinkAggStatus=lldpV2Xdot1LocLinkAggStatus, lldpXdot1dcbxAdminETSConTSATrafficClass=lldpXdot1dcbxAdminETSConTSATrafficClass, lldpXdot1dcbxRemETSRecoTrafficClass=lldpXdot1dcbxRemETSRecoTrafficClass, lldpXdot1dcbxConfigApplicationPriorityTable=lldpXdot1dcbxConfigApplicationPriorityTable, PYSNMP_MODULE_ID=lldpV2Xdot1MIB, lldpV2Xdot1Groups=lldpV2Xdot1Groups, lldpXdot1CnCompliances=lldpXdot1CnCompliances, lldpV2Xdot1RemVidUsageDigestEntry=lldpV2Xdot1RemVidUsageDigestEntry, lldpV2Xdot1RemManVidEntry=lldpV2Xdot1RemManVidEntry, lldpV2Xdot1RemManVidV2Entry=lldpV2Xdot1RemManVidV2Entry, lldpXdot1dcbxAdminData=lldpXdot1dcbxAdminData, lldpXdot1dcbxConfigPFCEntry=lldpXdot1dcbxConfigPFCEntry, lldpXdot1dcbxLocETSBasicConfigurationTable=lldpXdot1dcbxLocETSBasicConfigurationTable, lldpXdot1dcbxLocPFCBasicTable=lldpXdot1dcbxLocPFCBasicTable, lldpXdot1dcbxRemETSConfiguration=lldpXdot1dcbxRemETSConfiguration, lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmTable=lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmTable, lldpXdot1dcbxAdminApplicationVlanAEVlanId=lldpXdot1dcbxAdminApplicationVlanAEVlanId, lldpV2Xdot1RemLinkAggEntry=lldpV2Xdot1RemLinkAggEntry, lldpXdot1dcbxRemPFCBasicEntry=lldpXdot1dcbxRemPFCBasicEntry, lldpV2Xdot1LocVlanId=lldpV2Xdot1LocVlanId, LldpXdot1dcbxTrafficSelectionAlgorithm=LldpXdot1dcbxTrafficSelectionAlgorithm, lldpXdot1dcbxLocPFCEnableEntry=lldpXdot1dcbxLocPFCEnableEntry, lldpXdot1dcbxRemPFCMBC=lldpXdot1dcbxRemPFCMBC, lldpV2Xdot1LocManVid=lldpV2Xdot1LocManVid, lldpXdot1dcbxLocETSConPriTrafficClass=lldpXdot1dcbxLocETSConPriTrafficClass, lldpXdot1dcbxConfigApplicationVlanTable=lldpXdot1dcbxConfigApplicationVlanTable, lldpXdot1dcbxAdminPFCEnableEnabled=lldpXdot1dcbxAdminPFCEnableEnabled, lldpV2Xdot1LocVlanNameEntry=lldpV2Xdot1LocVlanNameEntry, lldpXdot1dcbxConfigPFCTable=lldpXdot1dcbxConfigPFCTable, lldpXdot1CnMIB=lldpXdot1CnMIB, lldpV2Xdot1ConfigVlanNameEntry=lldpV2Xdot1ConfigVlanNameEntry, lldpXdot1dcbxRemApplicationVlanAppTable=lldpXdot1dcbxRemApplicationVlanAppTable, lldpV2Xdot1LocVlanNameTable=lldpV2Xdot1LocVlanNameTable, lldpXdot1dcbxRemPFCEnablePriority=lldpXdot1dcbxRemPFCEnablePriority, lldpXdot1dcbxLocETSConTrafficClassBandwidth=lldpXdot1dcbxLocETSConTrafficClassBandwidth, lldpV2Xdot1Conformance=lldpV2Xdot1Conformance, lldpXdot1dcbxLocApplicationPriorityAppEntry=lldpXdot1dcbxLocApplicationPriorityAppEntry, lldpV2Xdot1LocPortVlanId=lldpV2Xdot1LocPortVlanId, lldpV2Xdot1RemVlanId=lldpV2Xdot1RemVlanId, lldpV2Xdot1Config=lldpV2Xdot1Config, lldpV2Xdot1LocProtocolIndex=lldpV2Xdot1LocProtocolIndex, lldpXdot1dcbxRemETSConTrafficSelectionAlgorithm=lldpXdot1dcbxRemETSConTrafficSelectionAlgorithm, lldpV2Xdot1ConfigPortVlanEntry=lldpV2Xdot1ConfigPortVlanEntry, lldpV2Xdot1ConfigVidUsageDigestEntry=lldpV2Xdot1ConfigVidUsageDigestEntry, lldpV2Xdot1ConfigVidUsageDigestTxEnable=lldpV2Xdot1ConfigVidUsageDigestTxEnable, lldpXdot1dcbxAdminPFCMBC=lldpXdot1dcbxAdminPFCMBC, lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmTable=lldpXdot1dcbxLocETSRecoTrafficSelectionAlgorithmTable, lldpV2Xdot1ConfigProtocolTxEnable=lldpV2Xdot1ConfigProtocolTxEnable, lldpV2Xdot1LocProtoVlanId=lldpV2Xdot1LocProtoVlanId, lldpV2Xdot1LocProtoVlanEnabled=lldpV2Xdot1LocProtoVlanEnabled, lldpXdot1dcbxRemETSConPriorityAssignmentTable=lldpXdot1dcbxRemETSConPriorityAssignmentTable, lldpXdot1dcbxRemPFCEnableEntry=lldpXdot1dcbxRemPFCEnableEntry, lldpV2Xdot1RemPortVlanId=lldpV2Xdot1RemPortVlanId, lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithm=lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithm, lldpXdot1dcbxAdminETSRecoTrafficClassBandwidth=lldpXdot1dcbxAdminETSRecoTrafficClassBandwidth, lldpXdot1dcbxRemETSConWilling=lldpXdot1dcbxRemETSConWilling, lldpXdot1dcbxRemETSRecoTSATrafficClass=lldpXdot1dcbxRemETSRecoTSATrafficClass, lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthEntry=lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthEntry, lldpXdot1dcbxLocETSRecoTrafficClassBandwidthTable=lldpXdot1dcbxLocETSRecoTrafficClassBandwidthTable, lldpXdot1dcbxLocPFCWilling=lldpXdot1dcbxLocPFCWilling, lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthTable=lldpXdot1dcbxAdminETSRecoTrafficClassBandwidthTable, lldpXdot1dcbxAdminPFCBasicTable=lldpXdot1dcbxAdminPFCBasicTable, lldpXdot1dcbxRemApplicationPriorityAEProtocol=lldpXdot1dcbxRemApplicationPriorityAEProtocol, lldpV2Xdot1RemProtocolId=lldpV2Xdot1RemProtocolId, lldpXdot1CnGroups=lldpXdot1CnGroups, lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmEntry=lldpXdot1dcbxAdminETSConTrafficSelectionAlgorithmEntry, lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmEntry=lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmEntry, lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithm=lldpXdot1dcbxAdminETSRecoTrafficSelectionAlgorithm, lldpXdot1dcbxLocETSRecoTSATrafficClass=lldpXdot1dcbxLocETSRecoTSATrafficClass, lldpXdot1dcbxRemETSConTrafficClassBandwidthEntry=lldpXdot1dcbxRemETSConTrafficClassBandwidthEntry, lldpXdot1dcbxLocETSRecoTrafficClassBandwidth=lldpXdot1dcbxLocETSRecoTrafficClassBandwidth, lldpV2Xdot1RemProtoVlanSupported=lldpV2Xdot1RemProtoVlanSupported, lldpXdot1dcbxRemPFC=lldpXdot1dcbxRemPFC, lldpXdot1dcbxRemApplicationVlanAEProtocol=lldpXdot1dcbxRemApplicationVlanAEProtocol, lldpXdot1dcbxAdminETSBasicConfigurationTable=lldpXdot1dcbxAdminETSBasicConfigurationTable, lldpXdot1CnConfig=lldpXdot1CnConfig, lldpXdot1dcbxRemPFCEnableEnabled=lldpXdot1dcbxRemPFCEnableEnabled, lldpXdot1dcbxAdminPFCEnableEntry=lldpXdot1dcbxAdminPFCEnableEntry, lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmTable=lldpXdot1dcbxLocETSConTrafficSelectionAlgorithmTable, lldpXdot1dcbxRemApplicationVlanAESelector=lldpXdot1dcbxRemApplicationVlanAESelector, lldpXdot1dcbxRemApplicationPriorityAppEntry=lldpXdot1dcbxRemApplicationPriorityAppEntry, lldpXdot1dcbxRemPFCCap=lldpXdot1dcbxRemPFCCap, lldpXdot1dcbxAdminETSConTrafficClassBandwidthTable=lldpXdot1dcbxAdminETSConTrafficClassBandwidthTable, lldpXdot1dcbxAdminPFCEnablePriority=lldpXdot1dcbxAdminPFCEnablePriority, lldpV2Xdot1RemProtoVlanEnabled=lldpV2Xdot1RemProtoVlanEnabled, lldpV2Xdot1RemProtocolTable=lldpV2Xdot1RemProtocolTable, lldpXdot1dcbxRemETSRecoTrafficClassBandwidth=lldpXdot1dcbxRemETSRecoTrafficClassBandwidth, lldpXdot1dcbxAdminETSRecoTrafficClass=lldpXdot1dcbxAdminETSRecoTrafficClass, lldpXdot1dcbxRemETSConPriority=lldpXdot1dcbxRemETSConPriority, lldpXdot1dcbxAdminApplicationPriorityAEPriority=lldpXdot1dcbxAdminApplicationPriorityAEPriority, lldpXdot1dcbxAdminApplicationVlanAEProtocol=lldpXdot1dcbxAdminApplicationVlanAEProtocol, lldpV2Xdot1RemProtocolIndex=lldpV2Xdot1RemProtocolIndex, lldpXdot1dcbxLocPFCEnableTable=lldpXdot1dcbxLocPFCEnableTable, lldpV2Xdot1ConfigManVidEntry=lldpV2Xdot1ConfigManVidEntry, lldpV2Xdot1TxRxCompliance=lldpV2Xdot1TxRxCompliance, lldpV2Xdot1RemCnTable=lldpV2Xdot1RemCnTable, lldpXdot1dcbxRemETSConPriTrafficClass=lldpXdot1dcbxRemETSConPriTrafficClass, lldpXdot1dcbxLocApplicationVlanAEVlanId=lldpXdot1dcbxLocApplicationVlanAEVlanId, lldpV2Xdot1ConfigManVidTable=lldpV2Xdot1ConfigManVidTable, lldpV2Xdot1LocManVidTable=lldpV2Xdot1LocManVidTable, lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmTable=lldpXdot1dcbxRemETSRecoTrafficSelectionAlgorithmTable, lldpXdot1dcbxLocApplicationVlanAppTable=lldpXdot1dcbxLocApplicationVlanAppTable, LldpXdot1dcbxSupportedCapacity=LldpXdot1dcbxSupportedCapacity, lldpXdot1dcbxRemPFCWilling=lldpXdot1dcbxRemPFCWilling, lldpXdot1dcbxRemApplicationPriorityAEPriority=lldpXdot1dcbxRemApplicationPriorityAEPriority, lldpXdot1dcbxAdminETSConTrafficClassesSupported=lldpXdot1dcbxAdminETSConTrafficClassesSupported, lldpV2Xdot1RemVlanNameEntry=lldpV2Xdot1RemVlanNameEntry, lldpV2Xdot1RemManVid=lldpV2Xdot1RemManVid, lldpXdot1dcbxETSGroup=lldpXdot1dcbxETSGroup, lldpXdot1dcbxGroups=lldpXdot1dcbxGroups, lldpV2Xdot1Compliances=lldpV2Xdot1Compliances, lldpV2Xdot1LocReadyIndicators=lldpV2Xdot1LocReadyIndicators, lldpXdot1dcbxApplicationPriorityGroup=lldpXdot1dcbxApplicationPriorityGroup, lldpXdot1dcbxLocETSConTrafficClass=lldpXdot1dcbxLocETSConTrafficClass, lldpXdot1dcbxAdminPFCWilling=lldpXdot1dcbxAdminPFCWilling, lldpV2Xdot1LocVlanName=lldpV2Xdot1LocVlanName, lldpXdot1dcbxAdminETSConPriorityAssignmentEntry=lldpXdot1dcbxAdminETSConPriorityAssignmentEntry, lldpV2Xdot1LocLinkAggTable=lldpV2Xdot1LocLinkAggTable, lldpV2Xdot1RemCnEntry=lldpV2Xdot1RemCnEntry, LldpXdot1dcbxTrafficClassValue=LldpXdot1dcbxTrafficClassValue)
mibBuilder.exportSymbols("LLDP-EXT-DOT1-V2-MIB", lldpV2Xdot1ConfigProtocolEntry=lldpV2Xdot1ConfigProtocolEntry, lldpXdot1dcbxConfigApplicationVlanTxEnable=lldpXdot1dcbxConfigApplicationVlanTxEnable, lldpXdot1dcbxLocPFCCap=lldpXdot1dcbxLocPFCCap, lldpV2Xdot1LocSysGroup=lldpV2Xdot1LocSysGroup, lldpV2Xdot1LocCNPVIndicators=lldpV2Xdot1LocCNPVIndicators, lldpXdot1dcbxAdminETSConfiguration=lldpXdot1dcbxAdminETSConfiguration, lldpV2Xdot1LocVidUsageDigest=lldpV2Xdot1LocVidUsageDigest, lldpV2Xdot1TxCompliance=lldpV2Xdot1TxCompliance, lldpXdot1dcbxRemETSConTrafficClassBandwidthTable=lldpXdot1dcbxRemETSConTrafficClassBandwidthTable, lldpV2Xdot1ConfigProtoVlanTable=lldpV2Xdot1ConfigProtoVlanTable, lldpXdot1dcbxLocPFCMBC=lldpXdot1dcbxLocPFCMBC, lldpXdot1dcbxLocApplicationVlanAppEntry=lldpXdot1dcbxLocApplicationVlanAppEntry, lldpXdot1dcbxConfigETSConfigurationTxEnable=lldpXdot1dcbxConfigETSConfigurationTxEnable, lldpXdot1CnConfigCnTxEnable=lldpXdot1CnConfigCnTxEnable, lldpXdot1dcbxRemETSConTrafficClassesSupported=lldpXdot1dcbxRemETSConTrafficClassesSupported, lldpV2Xdot1RemVidUsageDigestV2Entry=lldpV2Xdot1RemVidUsageDigestV2Entry, lldpV2Xdot1RxComplianceV2=lldpV2Xdot1RxComplianceV2, lldpV2Xdot1RemManVidV2=lldpV2Xdot1RemManVidV2, lldpV2Xdot1LocCnTable=lldpV2Xdot1LocCnTable, lldpXdot1dcbxRemApplicationVlanAEVlanId=lldpXdot1dcbxRemApplicationVlanAEVlanId, lldpV2Xdot1LocTable=lldpV2Xdot1LocTable, lldpV2Xdot1ConfigPortVlanTable=lldpV2Xdot1ConfigPortVlanTable, lldpV2Xdot1RemVlanName=lldpV2Xdot1RemVlanName, lldpXdot1dcbxAdminETSConWilling=lldpXdot1dcbxAdminETSConWilling, lldpV2Xdot1ConfigVlanNameTable=lldpV2Xdot1ConfigVlanNameTable, lldpXdot1dcbxMIB=lldpXdot1dcbxMIB, lldpXdot1dcbxRemETSRecoTrafficClassBandwidthTable=lldpXdot1dcbxRemETSRecoTrafficClassBandwidthTable, lldpV2Xdot1ConfigPortVlanTxEnable=lldpV2Xdot1ConfigPortVlanTxEnable, lldpXdot1dcbxAdminPFC=lldpXdot1dcbxAdminPFC, lldpXdot1CnConfigCnTable=lldpXdot1CnConfigCnTable, lldpXdot1CnCompliance=lldpXdot1CnCompliance, lldpXdot1dcbxRemApplicationPriorityAppTable=lldpXdot1dcbxRemApplicationPriorityAppTable, lldpV2Xdot1RemSysV2Group=lldpV2Xdot1RemSysV2Group, lldpXdot1dcbxAdminApplicationVlanAESelector=lldpXdot1dcbxAdminApplicationVlanAESelector, lldpXdot1dcbxCompliances=lldpXdot1dcbxCompliances, lldpV2Xdot1LocProtocolTable=lldpV2Xdot1LocProtocolTable, lldpV2Xdot1RemLinkAggTable=lldpV2Xdot1RemLinkAggTable)
