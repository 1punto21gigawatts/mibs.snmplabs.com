#
# PySNMP MIB module EquipTbl-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EquipTbl-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
chrComHwNe, = mibBuilder.importSymbols("Chromatis-MIB", "chrComHwNe")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibIdentifier, IpAddress, Counter32, Counter64, Unsigned32, ModuleIdentity, NotificationType, Gauge32, TimeTicks, ObjectIdentity, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "IpAddress", "Counter32", "Counter64", "Unsigned32", "ModuleIdentity", "NotificationType", "Gauge32", "TimeTicks", "ObjectIdentity", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, DateAndTime, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "TruthValue")
chrComHwNeId = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeId.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeId.setDescription('A unique ID of each NE, given to NE in its installation.')
chrComHwNeType = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("metropolis2000", 1), ("metropolis2500", 2), ("metropolis4000", 3), ("metropolis4500", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeType.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeType.setDescription('Metropolis2000 - Terminal Metropolis2500 - Enhanced Terminal Metropolis4000 - Standard HE Metropolis4500 - Enhanced HE.')
chrComHwNeRunningSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeRunningSwVersion.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeRunningSwVersion.setDescription('The NE running SW Version - represented by XX.YY.ZZZ ')
chrComHwNeAvailableSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeAvailableSwVersion.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeAvailableSwVersion.setDescription('List of SW versions that might be switched with the current running one - represented by list of: XX.YY.ZZZ ')
chrComHwNeNextSessionSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeNextSessionSwVersion.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeNextSessionSwVersion.setDescription('The SW Version that shall be switched with the current running one - represented by XX.YY.ZZZ ')
chrComHwNeRunningConfigurationSet = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeRunningConfigurationSet.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeRunningConfigurationSet.setDescription('The current configuration file ')
chrComHwNeAvailableConfigurationSets = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeAvailableConfigurationSets.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeAvailableConfigurationSets.setDescription('List configuration files that might be switched with the current one used by the running software.')
chrComHwNeNextSessionConfigurationSet = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeNextSessionConfigurationSet.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeNextSessionConfigurationSet.setDescription('The configuration file that shall be switched with the current one.')
chrComHwNeTimeofDay = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 9), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeTimeofDay.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeTimeofDay.setDescription('The NE Time of Day represented by - MM-DD-YYYY HH:MM:SS')
chrComHwNeDailyPMStartOfTime = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeDailyPMStartOfTime.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeDailyPMStartOfTime.setDescription('Describes the PM loging start time ')
chrComHwNeCriticalAlarmCounter = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeCriticalAlarmCounter.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeCriticalAlarmCounter.setDescription('Specifies the number of Critical Alarms for the NE. ')
chrComHwNeMajorAlarmCounter = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeMajorAlarmCounter.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeMajorAlarmCounter.setDescription('Specifies the number of Major Alarms for the NE. ')
chrComHwNeMinorAlarmCounter = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeMinorAlarmCounter.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeMinorAlarmCounter.setDescription('Specifies the number of Minor Alarms for the NE. ')
chrComHwNeDetectionFaultStabilizationTime = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeDetectionFaultStabilizationTime.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeDetectionFaultStabilizationTime.setDescription('The time the NE waits before reporting an occurrence of alarm to the NMS.')
chrComHwNeRemovalFaultStabilizationTime = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeRemovalFaultStabilizationTime.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeRemovalFaultStabilizationTime.setDescription('The time the NE waits before reporting clearing of alarm to NMS.')
chrComHwNeAlarmCutOffStatus = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeAlarmCutOffStatus.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeAlarmCutOffStatus.setDescription('Alarm Cut Off current status. ')
chrComHwNeAtmfM4NeSuppressZeroStats = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeAtmfM4NeSuppressZeroStats.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeAtmfM4NeSuppressZeroStats.setDescription('When the vaule of this type is true, no PM entry will be created in any of the historical statistics tables for intervals in which all counts are zero')
chrComHwNeResetPMCountersAction = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeResetPMCountersAction.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeResetPMCountersAction.setDescription('This action enables resetting all preformance management counters currently measured by the NE (reset all xxxCurrentTable primitives). Note that PM might be reset also per entity (e.g. per one specifc Sonet Line interface). This value is set to True for activation of the reset action. On completion the NE sets back to False.')
chrComHwNeACOActivationAction = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeACOActivationAction.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeACOActivationAction.setDescription('Alarm Cut Off activation operation. This value is set to True for activation of the ACO action. On completion the NE sets back to False.')
chrComHwNeAtmCbrRatesList = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeAtmCbrRatesList.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeAtmCbrRatesList.setDescription('This vector includes 32 CBR peak cell rates that are supported in the network.')
chrComHwNeAtmRtVbrRatesList = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeAtmRtVbrRatesList.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeAtmRtVbrRatesList.setDescription('This vector includes the 16 RT-VBR Sustainable cell rates that are supported in the network.')
chrComHwNeMaxPathPM = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeMaxPathPM.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeMaxPathPM.setDescription('The maximum number of paths for which PM might be collected.')
chrComHwNeCurrentPathPM = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComHwNeCurrentPathPM.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeCurrentPathPM.setDescription('The actual number of paths for which PM is currently collected.')
chrComHwNeGlobalSubnetID = MibScalar((1, 3, 6, 1, 4, 1, 3695, 1, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComHwNeGlobalSubnetID.setStatus('current')
if mibBuilder.loadTexts: chrComHwNeGlobalSubnetID.setDescription('Array of two entries: Subnet #1 Global ID, Subnet #2 Global ID.')
mibBuilder.exportSymbols("EquipTbl-MIB", chrComHwNeTimeofDay=chrComHwNeTimeofDay, chrComHwNeResetPMCountersAction=chrComHwNeResetPMCountersAction, chrComHwNeMinorAlarmCounter=chrComHwNeMinorAlarmCounter, chrComHwNeRunningConfigurationSet=chrComHwNeRunningConfigurationSet, chrComHwNeRunningSwVersion=chrComHwNeRunningSwVersion, chrComHwNeAlarmCutOffStatus=chrComHwNeAlarmCutOffStatus, chrComHwNeDailyPMStartOfTime=chrComHwNeDailyPMStartOfTime, chrComHwNeNextSessionConfigurationSet=chrComHwNeNextSessionConfigurationSet, chrComHwNeType=chrComHwNeType, chrComHwNeAtmCbrRatesList=chrComHwNeAtmCbrRatesList, chrComHwNeAtmRtVbrRatesList=chrComHwNeAtmRtVbrRatesList, chrComHwNeRemovalFaultStabilizationTime=chrComHwNeRemovalFaultStabilizationTime, chrComHwNeAvailableConfigurationSets=chrComHwNeAvailableConfigurationSets, chrComHwNeCurrentPathPM=chrComHwNeCurrentPathPM, chrComHwNeNextSessionSwVersion=chrComHwNeNextSessionSwVersion, chrComHwNeMajorAlarmCounter=chrComHwNeMajorAlarmCounter, chrComHwNeAtmfM4NeSuppressZeroStats=chrComHwNeAtmfM4NeSuppressZeroStats, chrComHwNeCriticalAlarmCounter=chrComHwNeCriticalAlarmCounter, chrComHwNeAvailableSwVersion=chrComHwNeAvailableSwVersion, chrComHwNeDetectionFaultStabilizationTime=chrComHwNeDetectionFaultStabilizationTime, chrComHwNeACOActivationAction=chrComHwNeACOActivationAction, chrComHwNeMaxPathPM=chrComHwNeMaxPathPM, chrComHwNeGlobalSubnetID=chrComHwNeGlobalSubnetID, chrComHwNeId=chrComHwNeId)
