#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
groups, regModule = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "groups", "regModule")
Index, Presence, PresenceLedStates, PowerLedStates, INT32withException, FaultLedStates, Power, IdromBinary16 = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "Index", "Presence", "PresenceLedStates", "PowerLedStates", "INT32withException", "FaultLedStates", "Power", "IdromBinary16")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Bits, TimeTicks, NotificationType, Integer32, MibIdentifier, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Bits", "TimeTicks", "NotificationType", "Integer32", "MibIdentifier", "Gauge32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
multiFlexServerPwrMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 17))
multiFlexServerPwrMibModule.setRevisions(('2007-08-16 13:30', '2007-07-20 15:30', '2007-06-19 11:30', '2007-06-07 20:30', '2007-06-07 13:30', '2007-05-30 19:00', '2007-05-22 14:00', '2007-04-27 16:00', '2007-04-25 14:00', '2007-04-18 19:05', '2007-04-09 10:30', '2007-04-02 11:00', '2007-03-13 10:30', '2007-03-06 10:30', '2007-02-22 17:00', '2006-11-07 07:01', '2006-09-29 15:29',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: multiFlexServerPwrMibModule.setRevisionsDescriptions(('Fixed up minor errors causing some managers grief (ommission or addition of commas in lists) Reordered Revision to reverse chronological as some browsers choke, cleaned up some other simple nit-picky errors', 'Cleaned up much of the documentation to provide more accurate usage of the individual objects. Particularly, paid attention to the double usage of the pwrSupplyTable where some columns are relevant only if the pwrSupplyType is a power supply, and others only relevant if it is a fan blank.', 'Finalized the Version information for the MIB based on information available/used by the rest of the system (e.g., the GUI/fwupdate) Dropped pwrSupplyBmcFirmwareVersion. Added pwrSupplyOpCodeVersion & pwrSupplyBootBlockVersion.', 'Added the IdromBinary16 to represent the asset tag, part number, and serial number fields within the IDROM fields.', 'Corrected maximum/nominal IDROM parameters and comments', 'Introduced the INT32withException type so that enumeration can be managed globally', "Added notApplicable and unknown states to various entries Moved Presence to first column so it's obvious in table display", 'Cleaned up the pwrSupplyTable (removed input VDC and corrected column sequencing', 'Dropped fanRpmSetting & fanCoefficient from the pwrSupplyFanTable (minor column renumbering). Dropped pwrSupplyNumOfAxis & pwrSupplyFansPerAxis from pwrSupplyTable', 'Moved the trees and chassis nodes around to accomodate the unique power supply characteristics. Added the missing numOfPwrUnknowns & pwrSupplyUnknownPresenceMask', 'Renamed pwrSupplyFirmwareVersion to pwrSupplyBmcFirmwareVersion to be consistent in naming with other subsystems', 'Updated comments to tag fields that may be either statically returned, or that may potentially be removed Added Power supply sensors/status', 'pwrSupplyTable data now complies with IDROM (DID/DSD) information. Changed maxPwrSupplies -> maxPwrSupplyFrus Added numOfPwrBlanks & pwrSupplyBlankPresenceMask Added some token information for the expected fan information Renumbered / reorganized accordingly', "Changed Mask representations from an Opaque to a DisplayString at the request of the architects such that it now is an ASCII representation of bit string reflecting the presence with the left most 'bit' being bit 1 and max* bits being represented.", 'Renamed MIB file and updated internal relevance to formal product name Multi-Flex Server', "Consolodated use of Presence datatype and changed 'chassis' to 'chassis'", "Partitioned off and created as it's own module",))
if mibBuilder.loadTexts: multiFlexServerPwrMibModule.setLastUpdated('200708161330Z')
if mibBuilder.loadTexts: multiFlexServerPwrMibModule.setOrganization('Intel Corporation')
if mibBuilder.loadTexts: multiFlexServerPwrMibModule.setContactInfo('Brian Kurle Intel Corporation JF5-2-C3 Tel: 503-712-5032 E-Mail: brianx.j.kurle@intel.com')
if mibBuilder.loadTexts: multiFlexServerPwrMibModule.setDescription('Power Supply Module of the Multi-Flex Server')
maxPwrSupplies = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxPwrSupplies.setStatus('current')
if mibBuilder.loadTexts: maxPwrSupplies.setDescription('Maximum number of Power Supply FRUs (including Power Supply Blanks and unknown) possible in this chassis.')
numOfPwrSupplies = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfPwrSupplies.setStatus('current')
if mibBuilder.loadTexts: numOfPwrSupplies.setDescription('The number of Power Supplies (excludes blanks & unknown Frus in power supply slots).')
numOfPwrBlanks = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfPwrBlanks.setStatus('current')
if mibBuilder.loadTexts: numOfPwrBlanks.setDescription('The number of Power Supply Blanks (Fan only) in the system.')
numOfPwrUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfPwrUnknowns.setStatus('current')
if mibBuilder.loadTexts: numOfPwrUnknowns.setDescription('The number of FRUs occupying power supply slots that are neither recognized as power supplies, nor blanks.')
pwrSupplyPresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyPresenceMask.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyPresenceMask.setDescription("ASCII representation of bit string reflecting the presence of a recognized power supply in the power supply slots with the left most 'bit' being bit 1 and maxPwrSupplies bits being represented. This excludes fan blanks and unrecognized FRUs. Thus, '0101' would express that power supply FRUs 2 & 4 are recognized power supplies present")
pwrSupplyBlankPresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyBlankPresenceMask.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyBlankPresenceMask.setDescription("ASCII representation of bit string reflecting the presence of a recognized fan blanks in the power supply slots with the left most 'bit' being bit 1 and maxPwrSupplies bits being represented. This excludes both recognized and unrecognized power supplies. Thus, '0010' would express that power supply FRU 3 is a recognized fan blank present")
pwrSupplyUnknownPresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyUnknownPresenceMask.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyUnknownPresenceMask.setDescription("ASCII representation of bit string reflecting the presence of a unrecognized FRUs in the power supply slots with the left most 'bit' being bit 1 and maxPwrSupplies bits being represented. This excludes recognized power supplies and fan blanks. Thus, '1000' would express that an unrecognized FRU is in the power supply slot 1 is present")
pwrSupplies = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207))
if mibBuilder.loadTexts: pwrSupplies.setStatus('current')
if mibBuilder.loadTexts: pwrSupplies.setDescription('Container for Power Supply specific information as well as all components logically contained within.')
pwrSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1), )
if mibBuilder.loadTexts: pwrSupplyTable.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyTable.setDescription('Each row describes a Power Supply FRU in the chassis')
pwrSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyIndex"))
if mibBuilder.loadTexts: pwrSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyEntry.setDescription('..')
pwrSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyIndex.setDescription('column used to identify a particular Power Supply.')
pwrSupplyPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyPresence.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyPresence.setDescription('Flag whether something is occupying the the power supply slot (being either a power supply, a power supply blank, or unknown device) pwrSupplyType within this row should be consulted to determine what is occupying the slot.')
pwrSupplyVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyVendor.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyVendor.setDescription('Device manufacturer')
pwrSupplyMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyMfgDate.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyMfgDate.setDescription('Manufacture date/time')
pwrSupplyDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyDeviceName.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyDeviceName.setDescription('Device Name')
pwrSupplyPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyPart.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyPart.setDescription('Device Part Number')
pwrSupplySerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 7), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplySerialNo.setStatus('current')
if mibBuilder.loadTexts: pwrSupplySerialNo.setDescription('Device Serial Number')
pwrSupplyMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyMaximumPower.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyMaximumPower.setDescription('Static maximum power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Maximum power generation/consumption not known or specified')
pwrSupplyNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 9), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyNominalPower.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyNominalPower.setDescription('Static Nominal power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Nominal power generation/consumption not known or specified')
pwrSupplyAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 10), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyAssetTag.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyAssetTag.setDescription('Asset Tag # of device')
pwrSupplyPowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 11), PowerLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyPowerLed.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyPowerLed.setDescription('State of the Power LED on the Power Supply')
pwrSupplyFaultLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 12), FaultLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyFaultLed.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyFaultLed.setDescription('State of the Fault LED on the Power Supply (and optionally intiate identification)')
pwrSupplyOpCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyOpCodeVersion.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyOpCodeVersion.setDescription('BMC Firmware version on the Fan Blank (only)')
pwrSupplyBootBlockVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyBootBlockVersion.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyBootBlockVersion.setDescription('BMC Firmware version on the Fan Blank (only)')
pwrSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("powerSuppy", 1), ("powerSupplyBank", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyType.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyType.setDescription('Enumeration telling what kind of power supply FRU is in the slot')
pwrSupplyNumOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 16), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyNumOfFans.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyNumOfFans.setDescription('Number of Fans contained within this FRU May be static data given the FRU')
pwrSupplyInletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 17), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyInletTemperature.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyInletTemperature.setDescription('Power supply Fan blank FRU Inlet Temperature in Degrees Celsius (not applicable to power supplies that do not have an Inlet Temperature')
pwrSupplyOutputVdc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 18), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyOutputVdc.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyOutputVdc.setDescription("Power supply's output voltage in millivolts notApplicable - if a power supply fan blank, or isn't present unknown - if device type is unknown")
pwrSupplyOutputAmp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 19), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyOutputAmp.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyOutputAmp.setDescription("Power supply's output amperage in milliamps notApplicable - if a power supply fan blank, or isn't present unknown - if device type is unknown")
pwrSupplyOutputPickAmp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 20), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyOutputPickAmp.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyOutputPickAmp.setDescription("Power supply's output pick amperage in milliiamps notApplicable - if a power supply fan blank, or isn't present unknown - if device type is unknown")
pwrSupplyHotspotTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 21), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyHotspotTemp.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyHotspotTemp.setDescription("Power supply's Hotspot Temperature in degrees Celsius degrees Celsius - when power supply is present notApplicable - if a power supply fan blank, or isn't present unknown - if device type is unknown")
pwrSupplyEmbTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 22), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyEmbTemp.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyEmbTemp.setDescription("Power supply's EMB Temperature in degrees Celsius degrees Celsius - when power supply is present notApplicable - if a power supply fan blank, or isn't present unknown - if device type is unknown")
pwrSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 1, 1, 23), Bits().clone(namedValues=NamedValues(("unused1", 0), ("unused2", 1), ("powerSupplyOn", 2), ("powerOK", 3), ("unused", 4), ("overTemp", 5), ("overCurrent", 6), ("supplyFault", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyStatus.setDescription("Power supply's status bits (power supply only) This is used to provide multiple enumerations (by bits) of the status. E.g., powerSupplyOn(2) powerOK(3). ")
pwrSupplyFanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 2), )
if mibBuilder.loadTexts: pwrSupplyFanTable.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyFanTable.setDescription('Each row describes a Fan in a Fan FRU (indexed by the Fan FRU and by individual Fan) Current, this should include the 3 Fan FRUs (the two system Fan FRUs and the I/O Fan FRU) The number of Fans is dependent upon the FRU (see pwrSupplyFanFruNumOfFans in the fanFruTable for a particular FRU)')
pwrSupplyFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 2, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyFanIndex"))
if mibBuilder.loadTexts: pwrSupplyFanEntry.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyFanEntry.setDescription('..')
pwrSupplyFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyFanIndex.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyFanIndex.setDescription("which pwrSupplyFan within a FRU we're talking about")
pwrSupplyFanRpmMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyFanRpmMinimum.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyFanRpmMinimum.setDescription('Minimum settable RPM Potentially to be removed - See Murali/Niel')
pwrSupplyFanRpmMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyFanRpmMaximum.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyFanRpmMaximum.setDescription('Maximum settable RPM Potentially to be removed - See Murali/Niel')
pwrSupplyFanRpmReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 207, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, 0))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("notspinning", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyFanRpmReading.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyFanRpmReading.setDescription("Fan's current RPM reading: 0 - Fan not spinning unknown - Indeterminate data (no communications, or unknown device present) notApplicable - Not present")
pwrSupplyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 17)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "maxPwrSupplies"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "numOfPwrSupplies"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "numOfPwrBlanks"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "numOfPwrUnknowns"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyBlankPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyUnknownPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplySerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyPowerLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyFaultLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyOpCodeVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyBootBlockVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyNumOfFans"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyInletTemperature"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyOutputVdc"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyOutputAmp"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyOutputPickAmp"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyHotspotTemp"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyEmbTemp"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyFanIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyFanRpmMinimum"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyFanRpmMaximum"), ("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", "pwrSupplyFanRpmReading"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwrSupplyGroup = pwrSupplyGroup.setStatus('current')
if mibBuilder.loadTexts: pwrSupplyGroup.setDescription('Description.')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-PWR-MIB", pwrSupplyInletTemperature=pwrSupplyInletTemperature, pwrSupplyMfgDate=pwrSupplyMfgDate, pwrSupplyBlankPresenceMask=pwrSupplyBlankPresenceMask, pwrSupplyUnknownPresenceMask=pwrSupplyUnknownPresenceMask, pwrSupplyPart=pwrSupplyPart, pwrSupplyOutputPickAmp=pwrSupplyOutputPickAmp, pwrSupplyMaximumPower=pwrSupplyMaximumPower, pwrSupplyHotspotTemp=pwrSupplyHotspotTemp, pwrSupplyBootBlockVersion=pwrSupplyBootBlockVersion, numOfPwrUnknowns=numOfPwrUnknowns, pwrSupplyAssetTag=pwrSupplyAssetTag, pwrSupplyPowerLed=pwrSupplyPowerLed, pwrSupplyIndex=pwrSupplyIndex, numOfPwrSupplies=numOfPwrSupplies, pwrSupplyFanTable=pwrSupplyFanTable, pwrSupplyDeviceName=pwrSupplyDeviceName, pwrSupplyPresenceMask=pwrSupplyPresenceMask, pwrSupplyOpCodeVersion=pwrSupplyOpCodeVersion, pwrSupplyGroup=pwrSupplyGroup, multiFlexServerPwrMibModule=multiFlexServerPwrMibModule, pwrSupplyFanEntry=pwrSupplyFanEntry, pwrSupplyTable=pwrSupplyTable, PYSNMP_MODULE_ID=multiFlexServerPwrMibModule, pwrSupplyNumOfFans=pwrSupplyNumOfFans, pwrSupplyOutputAmp=pwrSupplyOutputAmp, numOfPwrBlanks=numOfPwrBlanks, pwrSupplyOutputVdc=pwrSupplyOutputVdc, pwrSupplyType=pwrSupplyType, pwrSupplyEmbTemp=pwrSupplyEmbTemp, pwrSupplyFanRpmMaximum=pwrSupplyFanRpmMaximum, pwrSupplyStatus=pwrSupplyStatus, maxPwrSupplies=maxPwrSupplies, pwrSupplyVendor=pwrSupplyVendor, pwrSupplyFanIndex=pwrSupplyFanIndex, pwrSupplyFaultLed=pwrSupplyFaultLed, pwrSupplySerialNo=pwrSupplySerialNo, pwrSupplyFanRpmReading=pwrSupplyFanRpmReading, pwrSupplyNominalPower=pwrSupplyNominalPower, pwrSupplyPresence=pwrSupplyPresence, pwrSupplyFanRpmMinimum=pwrSupplyFanRpmMinimum, pwrSupplies=pwrSupplies, pwrSupplyEntry=pwrSupplyEntry)
