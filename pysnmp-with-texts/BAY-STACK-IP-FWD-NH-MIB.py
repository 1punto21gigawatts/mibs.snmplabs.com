#
# PySNMP MIB module BAY-STACK-IP-FWD-NH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-IP-FWD-NH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressPrefixLength, InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ModuleIdentity, Counter64, iso, Counter32, IpAddress, Unsigned32, NotificationType, MibIdentifier, Integer32, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Counter64", "iso", "Counter32", "IpAddress", "Unsigned32", "NotificationType", "MibIdentifier", "Integer32", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackIpFwdNhMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 35))
bayStackIpFwdNhMib.setRevisions(('2009-09-30 00:00', '2009-09-11 00:00', '2009-08-26 00:00', '2009-08-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackIpFwdNhMib.setRevisionsDescriptions(('v4: Added IMPLIED to INDEX clauses.', 'v3: Added bsifnPolicyInterfaceOperationalStatus and bsifnPolicyInterfaceAction.', 'v2: Changed mask object to InetAddressPrefixLength.', 'v1: Initial version.',))
if mibBuilder.loadTexts: bayStackIpFwdNhMib.setLastUpdated('200909300000Z')
if mibBuilder.loadTexts: bayStackIpFwdNhMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: bayStackIpFwdNhMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: bayStackIpFwdNhMib.setDescription("Nortel IP Forwarding Next Hop MIB Copyright 2009 Nortel Networks, Inc. All rights reserved. This Nortel Networks SNMP Management Information Base Specification embodies Nortel Networks' confidential and proprietary intellectual property. Nortel Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
bayStackIpFwdNhNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 35, 0))
bayStackIpFwdNhObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 35, 1))
bsifnScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 1))
bsifnIpForwardingNextHopAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsifnIpForwardingNextHopAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: bsifnIpForwardingNextHopAdminEnabled.setDescription('This object controls whether IP Forwarding Next-Hop is enabled.')
bsifnIpForwardingNextHopOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsifnIpForwardingNextHopOperEnabled.setStatus('current')
if mibBuilder.loadTexts: bsifnIpForwardingNextHopOperEnabled.setDescription('This object indicates whether IP Forwarding Next-Hop is enabled.')
bsifnPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2), )
if mibBuilder.loadTexts: bsifnPolicyTable.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyTable.setDescription('This table contains the schedule for activation and deactivation of the Nortel Energy Saver feature.')
bsifnPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1), ).setIndexNames((1, "BAY-STACK-IP-FWD-NH-MIB", "bsifnPolicyName"))
if mibBuilder.loadTexts: bsifnPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyEntry.setDescription('An energy saver schedule entry, indicates a time to activate or deactivate energy savings.')
bsifnPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: bsifnPolicyName.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyName.setDescription('Name of the policy.')
bsifnPolicyMatchInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddressType.setDescription('The type of address contained in the corresponding instance of bsifnPolicyMatchInetAddress. The value of bsifnPolicyMatchInetAddressMask must also be consistent with the address type specified in this object.')
bsifnPolicyMatchInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddress.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddress.setDescription('The address to be matched')
bsifnPolicyMatchInetAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 4), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddressMask.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddressMask.setDescription('Length of the mask to be used for matching.')
bsifnPolicyMatchPortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchPortMin.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyMatchPortMin.setDescription('Minimum port number to match.')
bsifnPolicyMatchPortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchPortMax.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyMatchPortMax.setDescription('Maximum port number to match.')
bsifnPolicySetNextHopInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicySetNextHopInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicySetNextHopInetAddressType.setDescription('The type of address contained in the corresponding instances of bsifnPolicySetNextHopInetAddress.')
bsifnPolicySetNextHopInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicySetNextHopInetAddress.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicySetNextHopInetAddress.setDescription('The next hop address.')
bsifnPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyRowStatus.setDescription('Used to create/delete entries.')
bsifnPolicyInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3), )
if mibBuilder.loadTexts: bsifnPolicyInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyInterfaceTable.setDescription('This table contains per-interface policy settings')
bsifnPolicyInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1), ).setIndexNames((0, "BAY-STACK-IP-FWD-NH-MIB", "bsifnPolicyInterfaceIndex"), (1, "BAY-STACK-IP-FWD-NH-MIB", "bsifnPolicyInterfacePolicyName"))
if mibBuilder.loadTexts: bsifnPolicyInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyInterfaceEntry.setDescription('Policy settings for an interface.')
bsifnPolicyInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsifnPolicyInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyInterfaceIndex.setDescription('The ifIndex value of an interface.')
bsifnPolicyInterfacePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: bsifnPolicyInterfacePolicyName.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyInterfacePolicyName.setDescription('The name of a policy associated with this interface. This value refers to an instance of bsifnPolicyName.')
bsifnPolicyInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("normalRouting", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyInterfaceMode.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyInterfaceMode.setDescription('The policy mode.')
bsifnPolicyInterfaceOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsifnPolicyInterfaceOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyInterfaceOperationalStatus.setDescription("The interface's SBR operational status.")
bsifnPolicyInterfaceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("normalRouting", 2), ("enable", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsifnPolicyInterfaceAction.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyInterfaceAction.setDescription("The interface's SBR action.")
bsifnPolicyInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsifnPolicyInterfaceRowStatus.setDescription('Used to create/delete entries in this table.')
mibBuilder.exportSymbols("BAY-STACK-IP-FWD-NH-MIB", bsifnPolicyInterfaceAction=bsifnPolicyInterfaceAction, bayStackIpFwdNhMib=bayStackIpFwdNhMib, bayStackIpFwdNhObjects=bayStackIpFwdNhObjects, bsifnIpForwardingNextHopAdminEnabled=bsifnIpForwardingNextHopAdminEnabled, bsifnPolicyMatchPortMax=bsifnPolicyMatchPortMax, bsifnPolicyEntry=bsifnPolicyEntry, PYSNMP_MODULE_ID=bayStackIpFwdNhMib, bsifnPolicyInterfaceRowStatus=bsifnPolicyInterfaceRowStatus, bsifnPolicyTable=bsifnPolicyTable, bsifnPolicyInterfaceIndex=bsifnPolicyInterfaceIndex, bsifnPolicyMatchInetAddress=bsifnPolicyMatchInetAddress, bsifnIpForwardingNextHopOperEnabled=bsifnIpForwardingNextHopOperEnabled, bsifnPolicyInterfaceEntry=bsifnPolicyInterfaceEntry, bsifnPolicyMatchInetAddressType=bsifnPolicyMatchInetAddressType, bsifnPolicySetNextHopInetAddress=bsifnPolicySetNextHopInetAddress, bayStackIpFwdNhNotifications=bayStackIpFwdNhNotifications, bsifnPolicyMatchInetAddressMask=bsifnPolicyMatchInetAddressMask, bsifnPolicyInterfacePolicyName=bsifnPolicyInterfacePolicyName, bsifnPolicyRowStatus=bsifnPolicyRowStatus, bsifnPolicyInterfaceMode=bsifnPolicyInterfaceMode, bsifnScalars=bsifnScalars, bsifnPolicyName=bsifnPolicyName, bsifnPolicyInterfaceTable=bsifnPolicyInterfaceTable, bsifnPolicyMatchPortMin=bsifnPolicyMatchPortMin, bsifnPolicyInterfaceOperationalStatus=bsifnPolicyInterfaceOperationalStatus, bsifnPolicySetNextHopInetAddressType=bsifnPolicySetNextHopInetAddressType)
