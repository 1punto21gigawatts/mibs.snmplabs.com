#
# PySNMP MIB module CISCO-FCIP-MGMT-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FCIP-MGMT-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cfmFcipLinkEntry, cfmFcipEntityInstanceEntry = mibBuilder.importSymbols("CISCO-FCIP-MGMT-MIB", "cfmFcipLinkEntry", "cfmFcipEntityInstanceEntry")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, = mibBuilder.importSymbols("CISCO-TC", "CiscoPort")
FcList, = mibBuilder.importSymbols("CISCO-ZS-MIB", "FcList")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, Counter32, ObjectIdentity, Gauge32, Bits, Counter64, iso, MibIdentifier, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Counter32", "ObjectIdentity", "Gauge32", "Bits", "Counter64", "iso", "MibIdentifier", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoFcipMgmtExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 329))
ciscoFcipMgmtExtMIB.setRevisions(('2005-10-12 00:00', '2005-06-07 00:00', '2005-05-14 00:00', '2004-09-23 00:00', '2004-03-10 00:00', '2003-11-05 00:00', '2003-09-19 00:00', '2003-05-06 00:00', '2003-03-25 00:00', '2003-01-07 00:00', '2002-12-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFcipMgmtExtMIB.setRevisionsDescriptions(('Added the following objects in cfmFcipLinkExtTable: - cfmFcipLinkExtTapeReadAccOper - cfmFcipLinkExtFiconTAVsanL2k - cfmFcipLinkExtFiconTAVsanL4k - cfmFcipLinkExtFiconTAVsanLOper2k - cfmFcipLinkExtFiconTAVsanLOper4k', 'Added the following objects in cfmFcipLinkExtTable: cfmFcipLinkExtPhyIfIndex, cfmFcipLinkExtWriteAccOper, and cfmFcipLinkExtTapeAccOper. Also added a new table cfmFcipLinkExtStatsTable with objects: cfmFcipLinkStatsRxIPCompRatio and cfmFcipLinkStatsTxIPCompRatio. ', 'Added following objects in cfmFcipLinkExtTable. cfmFcipLinkExtIPSec Added cfmFcipLinkExtGroupRev2Sup1. Added following object in cfmFcipEntityExtTable. cfmFcipEntityExtTcpLocalPort. cfmFcipEntityExtTcpMaxJitter. cfmFcipEntityExtTcpSACKEnable. Added cfmFcipEntityExtGroupSup1. Added cfmFcipExtCompliance4. ', 'Added following objects in cfmFcipLinkExtTable. cfmFcipLinkExtTapeAccelerator, cfmFcipLinkExtFlowCtrlBurstSize. Added cfmFcipLinkMapTable. ', 'Added following objects in cfmFcipEntityExtTable. cfmFcipEntityExtCWMEnable, cfmFcipEntityExtCWMBurstSize. ', 'Removed cfmFcipLinkExtIPCompAlgorithm and renamed object cfmFcipLinkExtIPCompPerf to cfmFcipLinkExtIPComp Added compliance statement for cfmFcipLinkExtTimestampTolerance.', 'Added: cfmFcipLinkExtEthIfIndex, cfmFcipLinkExtWriteAccelerator, cfmFcipLinkExtIPCompAlgorithm,cfmFcipLinkExtIPCompPerf. Updated the Compliance statement. ', 'Modified ranges and added DEFVAL clause to objects: cfmFcipEntityExtTcpSendBufSize,cfmFcipEntityExtTcpMaxBW, cfmFcipEntityExtTcpMinAvailBW, cfmFcipEntityExtTcpRndTrpTimeEst. ', 'Modified objects: cfmFcipEntityExtTcpKeepAliveTO. Replaced: cfmFcipLinkExtLocalEntityMode with cfmFcipLinkExtLocalBPortEnable. cfmFcipEntityExtTcpInitRTO with cfmFcipEntityExtTcpMinRTO. Added: cfmFcipEntityExtTcpSendBufSize, cfmFcipEntityExtTcpMaxBW,cfmFcipEntityExtTcpMinAvailBW, cfmFcipEntityExtTcpRndTrpTimeEst,cfmFcipLinkExtCntrlQOSField, cfmFcipLinkExtDataQOSField. Removed cfmFcipEntityExtWindowSize.', 'Added objects cfmFcipLinkExtSpecialFrameEnable, cfmFcipLinkExtBPortKAEnable. Modified the range values for some objects. ', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFcipMgmtExtMIB.setLastUpdated('200510120000Z')
if mibBuilder.loadTexts: ciscoFcipMgmtExtMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoFcipMgmtExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoFcipMgmtExtMIB.setDescription('A MIB module for extending the CISCO-FCIP-MGMT-MIB to add objects which provide additional information about FCIP interfaces not available in other MIBS. ')
ciscoFcipMgmtExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 329, 0))
ciscoFcipMgmtExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 329, 1))
ciscoFcipMgmtExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 329, 2))
cfmFcipMgmtExtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1))
cfmFcipMgmtExtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 2))
cfmFcipEntityExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1), )
if mibBuilder.loadTexts: cfmFcipEntityExtTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTable.setDescription('A table contains objects which provide more information of FCIP entity which is not available in CISCO-FCIP-MGMT-MIB. ')
cfmFcipEntityExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1), )
cfmFcipEntityInstanceEntry.registerAugmentions(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtEntry"))
cfmFcipEntityExtEntry.setIndexNames(*cfmFcipEntityInstanceEntry.getIndexNames())
if mibBuilder.loadTexts: cfmFcipEntityExtEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtEntry.setDescription('A entry into the cfmFcipEntityExtTable. Each entry contains attributes associated with an FCIP entity. ')
cfmFcipEntityExtTcpKeepAliveTO = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7200)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpKeepAliveTO.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpKeepAliveTO.setDescription('The TCP Keep alive timeout for all links within this entity. ')
cfmFcipEntityExtTcpMaxReTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMaxReTx.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMaxReTx.setDescription('The Maximum number of times that the same item of data will be retransmitted over a TCP connection. If delivery is not acknowledged after this number of retransmissions then the TCP connection is terminated. ')
cfmFcipEntityExtPMTUEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtPMTUEnable.setReference('RFC 1191 - Path MTU Discovery')
if mibBuilder.loadTexts: cfmFcipEntityExtPMTUEnable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtPMTUEnable.setDescription('The path MTU discovery is enabled if the value of this object is true(1), else it is disabled, and has the value false(2). ')
cfmFcipEntityExtPMTUResetTO = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtPMTUResetTO.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtPMTUResetTO.setDescription("The time interval for which the discovered pathMTU is valid, before MSS reverts back to the negotiated TCP value. This object is writeble only if cfmFcipEntityExtPMTUEnable is 'true'. ")
cfmFcipEntityExtTcpMinRTO = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(100)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMinRTO.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMinRTO.setDescription('The TCP minimum retransmit timeout for all the links on this entity. ')
cfmFcipEntityExtTcpSendBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setUnits('kilobytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpSendBufSize.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpSendBufSize.setDescription('The aggregate TCP send window for all TCP connections on all Links within this entity. This value is used for Egress Flow Control. When the aggregate of the data queued on all connections within this entity reaches this value, the sender is flow controlled. ')
cfmFcipEntityExtTcpMaxBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000)).clone(1000000)).setUnits('kilobits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMaxBW.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMaxBW.setDescription('This is an estimate of the Bandwidth of the network pipe used for the B-D product computation, which lets us derive the TCP receive window to advertise. The cfmFcipEntityExtTcpMaxBW,cfmFcipEntityExtTcpMinAvailBW, cfmFcipEntityExtTcpRndTrpTimeEst must be set in the same SNMP set request. SET operation would fail if this object is set individually.')
cfmFcipEntityExtTcpMinAvailBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000)).clone(15000)).setUnits('kilobits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMinAvailBW.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMinAvailBW.setDescription('The minimum available bandwidth for the TCP connections on the Links within this entity. The cfmFcipEntityExtTcpMaxBW,cfmFcipEntityExtTcpMinAvailBW, cfmFcipEntityExtTcpRndTrpTimeEst must be set in the same SNMP set request. SET operation would fail if this object is set individually. ')
cfmFcipEntityExtTcpRndTrpTimeEst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300000)).clone(1000)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpRndTrpTimeEst.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpRndTrpTimeEst.setDescription('This is an estimate of the round trip delay of the network pipe used for the B-D product computation, which lets us derive the TCP receive window to advertise. The cfmFcipEntityExtTcpMaxBW,cfmFcipEntityExtTcpMinAvailBW, cfmFcipEntityExtTcpRndTrpTimeEst must be set in the same SNMP set request. SET operation would fail if this object is set individually. ')
cfmFcipEntityExtCWMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtCWMEnable.setReference('Congestion Window Monitoring (Hughes, Touch, and Heidemann)')
if mibBuilder.loadTexts: cfmFcipEntityExtCWMEnable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtCWMEnable.setDescription('This object is used for enabling/disabling the congestion window monitoring. If the value of this object is true(1), it is enabled. It is disabled if the value is false(2). ')
cfmFcipEntityExtCWMBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(50)).setUnits('kilobytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtCWMBurstSize.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtCWMBurstSize.setDescription("The maximum burst sent after a tcp sender idle period. This object is writeble only if cfmFcipEntityExtCWMEnable is 'true'. ")
cfmFcipEntityExtTcpSACKEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpSACKEnable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpSACKEnable.setDescription("Setting the value to 'True', enables the Selective Acknowledgement (SACK) on this link.")
cfmFcipEntityExtTcpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 13), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpLocalPort.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpLocalPort.setDescription('The local TCP port to which the local FCIP entity will connect if and when it initiates a TCP connection setup for this link.')
cfmFcipEntityExtTcpMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMaxJitter.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtTcpMaxJitter.setDescription('The maximum delay variation that is not due to congestion that can be experienced by TCP connections for all links on this entity.')
cfmFcipLinkExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2), )
if mibBuilder.loadTexts: cfmFcipLinkExtTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtTable.setDescription('A table contains objects which provide more information of FCIP link which is not available in CISCO-FCIP-MGMT-MIB.')
cfmFcipLinkExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1), )
cfmFcipLinkEntry.registerAugmentions(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtEntry"))
cfmFcipLinkExtEntry.setIndexNames(*cfmFcipLinkEntry.getIndexNames())
if mibBuilder.loadTexts: cfmFcipLinkExtEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtEntry.setDescription('A entry into cfmFcipLinkExtTable. Each entry contains attributes associated with an FCIP Link. ')
cfmFcipLinkExtPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtPassiveMode.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtPassiveMode.setDescription("If the value is set to 'false' this link endpoint actively tries to connect to the peer. If it is set to 'true' the link endpoint waits for the peer to connect to it. ")
cfmFcipLinkExtNumTcpConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setUnits('tcp connections').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtNumTcpConn.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtNumTcpConn.setDescription('The maximum number of TCP connections allowed on this link. ')
cfmFcipLinkExtCheckTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtCheckTimestamp.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtCheckTimestamp.setDescription("The value is 'true', if the timestamp in FCIP header is to checked. If 'false' the timestamp is ignored. ")
cfmFcipLinkExtTimestampTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtTimestampTolerance.setReference('Section 29.2.1.2 E_D_TOV in FC-PH (Fibre Channel - Physical and Signaling Interface) Rev 4.3.')
if mibBuilder.loadTexts: cfmFcipLinkExtTimestampTolerance.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtTimestampTolerance.setDescription('The accepted time difference between the local time and the timestamp value received in the FCIP header. By default this value will be EDTOV/2. EDTOV is the Error_Detect_Timeout Value used for Fibre channel Ports as the timeout value for detecting an error condition.')
cfmFcipLinkExtTcpRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 5), CiscoPort().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtTcpRemPort.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtTcpRemPort.setDescription('The remote TCP port to which the local FCIP entity will connect if and when it initiates a TCP connection setup for this link. ')
cfmFcipLinkExtLocalBPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtLocalBPortEnable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtLocalBPortEnable.setDescription("If the value is set to 'true', the B port mode is enabled on the local FCIP link. If set to 'false' the B port mode is disabled. ")
cfmFcipLinkExtSpecialFrameEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtSpecialFrameEnable.setReference('Section 8 in draft-ietf-ips-fcovertcpip-12.txt.')
if mibBuilder.loadTexts: cfmFcipLinkExtSpecialFrameEnable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtSpecialFrameEnable.setDescription("If the value is set to 'true', the TCP active opener initiates FCIP special frames and the TCP passive opener responds to the FCIP special frames. If it is set to 'false', the FCIP special frames are neither generated nor responded to. ")
cfmFcipLinkExtBPortKAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtBPortKAEnable.setReference('Section 15.5.4 Echo in FC-FS (Fibre Channel - Framing and Signaling ) Rev 0.50.')
if mibBuilder.loadTexts: cfmFcipLinkExtBPortKAEnable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtBPortKAEnable.setDescription("If the value is set to 'true', a message is sent in response to a (Fibre Channel) ELS Echo frame received from the peer. Some B Port implementations use ELS Echo request/response frames as Link Keep Alive. If it is set to 'false', this response is not generated. This object is valid only if the cfmFcipLinkExtLocalBPortEnable is 'true'. ")
cfmFcipLinkExtCntrlQOSField = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtCntrlQOSField.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtCntrlQOSField.setDescription('The value to be set for the TOS field in IP header for the TCP control connection. The cfmFcipLinkExtCntrlQOSField,cfmFcipLinkExtDataQOSField must be set in the same SNMP set request. SET operation would fail if this object is set individually. ')
cfmFcipLinkExtDataQOSField = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtDataQOSField.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtDataQOSField.setDescription('The value to be set for the TOS field in IP header for the TCP Data connection. The cfmFcipLinkExtCntrlQOSField,cfmFcipLinkExtDataQOSField must be set in the same SNMP set request. SET operation would fail if this object is set individually. ')
cfmFcipLinkExtEthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 11), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkExtEthIfIndex.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtEthIfIndex.setDescription('The ifIndex of the interface on which this FCIP link was initiated. ')
cfmFcipLinkExtWriteAccelerator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtWriteAccelerator.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtWriteAccelerator.setDescription("The Write accelerator allows for enhancing SCSI write performance. If 'true', the FCIP Write accelerator is enabled on this link If 'false' it is disabled.")
cfmFcipLinkExtIPComp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("highCompressionRatio", 2), ("highThroughput", 3), ("auto", 4), ("mode1", 5), ("mode2", 6), ("mode3", 7))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtIPComp.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtIPComp.setDescription("The configuration for the IP compression. 'none' - ip compression is disabled. 'highCompressionRatio' - indicates better compression performance at the cost of lower throughput. 'highThroughput' - indicates better throughput at the cost of lower compression performance. 'auto' - indicates that an appropriate mode wll be picked based on the bandwidth and data. 'mode1' - fast compression mode for high bandwidth WAN links with bandwidth greater than 30 Mbps. 'mode2' - high compression mode for moderately low bandwidth WAN links, i.e. bandwidth between 15 and 30 Mbps. 'mode3' - high compression mode for low bandwidth WAN links, i.e. banwidth less than 15 Mbps. ")
cfmFcipLinkExtTapeAccelerator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtTapeAccelerator.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtTapeAccelerator.setDescription("The Tape accelerator allows for enhancing Tape write performance. If 'true', the FCIP Tape accelerator is enabled on this link If 'false' it is disabled.")
cfmFcipLinkExtFlowCtrlBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12288)).clone(256)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtFlowCtrlBufSize.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtFlowCtrlBufSize.setDescription('The flow control buffer size.')
cfmFcipLinkExtIPSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkExtIPSec.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtIPSec.setDescription('Indicates whether the IP Security has been turned on or off on this link.')
cfmFcipLinkExtPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 17), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkExtPhyIfIndex.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtPhyIfIndex.setDescription('The physical ifIndex of the interface on which this FCIP link is currently bound. ')
cfmFcipLinkExtWriteAccOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkExtWriteAccOper.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtWriteAccOper.setDescription("When Write Acceleration is operationally off for the FCIP link, the value of this object will be set to 'false'. When Write Acceleration is operationally on for the FCIP link, the value of this object will be set to 'true'. ")
cfmFcipLinkExtTapeAccOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkExtTapeAccOper.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtTapeAccOper.setDescription("When Tape Acceleration is operationally off for the FCIP link, the value of this object will be set to 'false'. When Tape Acceleration is operationally on for the FCIP link, the value of this object will be set to 'true'. ")
cfmFcipLinkExtTapeReadAccOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkExtTapeReadAccOper.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtTapeReadAccOper.setDescription("This object represents the state of the Tape Read Acceleration for an FCIP link. Tape Read Acceleration is automatically operational when Tape Acceleration is operational (cfmFcipLinkExtTapeAccOper) and both sides of the FCIP link support Tape Read Acceleration. When Tape Read Acceleration is operationally off for the FCIP link, the value of this object is 'false'. When Tape Read Acceleration is operationally on for the FCIP link, the value of this object is 'true'. ")
cfmFcipLinkExtFiconTAVsanL2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 21), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtFiconTAVsanL2k.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtFiconTAVsanL2k.setDescription('The list of VSANs (in the range 1 through 2047) for which Ficon Tape Acceleration is configured. Only VSANs with a cficonVsanEntry of CISCO-FICON-MIB present can be configured for Ficon Tape Acceleration.')
cfmFcipLinkExtFiconTAVsanL4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 22), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmFcipLinkExtFiconTAVsanL4k.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtFiconTAVsanL4k.setDescription('The list of VSANs (in the range 2048 through 4096) for which Ficon Tape Acceleration is configured. Only VSANs with a cficonVsanEntry of CISCO-FICON-MIB present can be configured for Ficon Tape Acceleration.')
cfmFcipLinkExtFiconTAVsanLOper2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 23), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkExtFiconTAVsanLOper2k.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtFiconTAVsanLOper2k.setDescription('The list of VSANs (in the range 1 through 2047) for which Ficon Tape Acceleration is operationally ON.')
cfmFcipLinkExtFiconTAVsanLOper4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 2, 1, 24), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkExtFiconTAVsanLOper4k.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtFiconTAVsanLOper4k.setDescription('The list of VSANs (in the range 2048 through 4096) for which Ficon Tape Acceleration is operationally ON.')
cfmFcipLinkMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 3), )
if mibBuilder.loadTexts: cfmFcipLinkMapTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkMapTable.setDescription('A table containing FCIP link index to Entity Identifier mapping for a FCIP link.')
cfmFcipLinkMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkMapIndex"))
if mibBuilder.loadTexts: cfmFcipLinkMapEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkMapEntry.setDescription('A conceptual row of the FCIP link map table mapping the fcip link index to FCIP Entity Identifier. ')
cfmFcipLinkMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfmFcipLinkMapIndex.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkMapIndex.setDescription('An arbitrary integer which uniquely identifies one FCIP link within a FCIP entity. ')
cfmFcipMapEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipMapEntityId.setStatus('current')
if mibBuilder.loadTexts: cfmFcipMapEntityId.setDescription('The FCIP entity Identifier corresponding to the instance of cfmFcipLinkMapIndex.')
cfmFcipLinkExtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 2, 1), )
if mibBuilder.loadTexts: cfmFcipLinkExtStatsTable.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtStatsTable.setDescription('A table containing objects which provide status information of the FCIP link for the cfmFcipLinkExtTable configured information. ')
cfmFcipLinkExtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 2, 1, 1), )
cfmFcipLinkEntry.registerAugmentions(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtStatsEntry"))
cfmFcipLinkExtStatsEntry.setIndexNames(*cfmFcipLinkEntry.getIndexNames())
if mibBuilder.loadTexts: cfmFcipLinkExtStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtStatsEntry.setDescription('An entry into cfmFcipLinkExtStatsTable. Each entry contains attributes associated with an FCIP Link. ')
cfmFcipLinkStatsRxIPCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 2, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkStatsRxIPCompRatio.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkStatsRxIPCompRatio.setDescription('The IP Copmression ratio for received packets on the FCIP device. The value of this object will be presented as a floating point number with two digits after the decimal point. ')
cfmFcipLinkStatsTxIPCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 329, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFcipLinkStatsTxIPCompRatio.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkStatsTxIPCompRatio.setDescription('The IP Copmression ratio for transmitted packets on the FCIP device. The value of this object will be presented as a floating point number with two digits after the decimal point. ')
cfmFcipExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 1))
cfmFcipExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2))
cfmFcipExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 1, 1)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipExtCompliance = cfmFcipExtCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cfmFcipExtCompliance.setDescription('Compliance statement for FCIP Extension MIB. ')
cfmFcipExtCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 1, 2)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipExtCompliance1 = cfmFcipExtCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: cfmFcipExtCompliance1.setDescription('Compliance statement for FCIP Extension MIB. ')
cfmFcipExtCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 1, 3)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtCWMGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipExtCompliance2 = cfmFcipExtCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cfmFcipExtCompliance2.setDescription('Compliance statement for FCIP Extension MIB. ')
cfmFcipExtCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 1, 4)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtCWMGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipExtCompliance3 = cfmFcipExtCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: cfmFcipExtCompliance3.setDescription('Compliance statement for FCIP Extension MIB. ')
cfmFcipExtCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 1, 5)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtGroupSup1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtCWMGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2Sup1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipExtCompliance4 = cfmFcipExtCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: cfmFcipExtCompliance4.setDescription('Compliance statement for FCIP Extension MIB. ')
cfmFcipExtCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 1, 6)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtCWMGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2Sup1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2Sup2"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipExtCompliance5 = cfmFcipExtCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: cfmFcipExtCompliance5.setDescription('Compliance statement for FCIP Extension MIB. ')
cfmFcipExtCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 1, 7)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtCWMGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2Sup1"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2Sup2"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtStatsGroup"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtGroupRev2Sup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipExtCompliance6 = cfmFcipExtCompliance6.setStatus('current')
if mibBuilder.loadTexts: cfmFcipExtCompliance6.setDescription('Compliance statement for FCIP Extension MIB. ')
cfmFcipEntityExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 1)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpKeepAliveTO"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpMaxReTx"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtPMTUEnable"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtPMTUResetTO"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpMinRTO"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpSendBufSize"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpMaxBW"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpMinAvailBW"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpRndTrpTimeEst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipEntityExtGroup = cfmFcipEntityExtGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtGroup.setDescription('A collection of objects providing information about FCIP Entity. ')
cfmFcipLinkExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 2)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtPassiveMode"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtNumTcpConn"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtCheckTimestamp"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtTimestampTolerance"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtTcpRemPort"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtLocalBPortEnable"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtSpecialFrameEnable"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtBPortKAEnable"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtCntrlQOSField"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtDataQOSField"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkExtGroup = cfmFcipLinkExtGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtGroup.setDescription('A collection of objects providing information about FCIP Links. ')
cfmFcipLinkExtGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 3)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtEthIfIndex"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtWriteAccelerator"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtIPComp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkExtGroupRev1 = cfmFcipLinkExtGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtGroupRev1.setDescription('A collection of objects providing information about FCIP Links. ')
cfmFcipEntityExtCWMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 4)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtCWMEnable"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtCWMBurstSize"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpSACKEnable"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpLocalPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipEntityExtCWMGroup = cfmFcipEntityExtCWMGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtCWMGroup.setDescription('A collection of objects providing information on Congestion Window Monitoring of a FCIP Entity. ')
cfmFcipLinkExtGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 5)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtTapeAccelerator"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtFlowCtrlBufSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkExtGroupRev2 = cfmFcipLinkExtGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtGroupRev2.setDescription('A collection of objects providing information about FCIP Links, especially about the tape acceleration. ')
cfmFcipLinkExtMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 6)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipMapEntityId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkExtMapGroup = cfmFcipLinkExtMapGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtMapGroup.setDescription('A collection of objects providing mapping between FCIP Links and their enrity Identifiers ')
cfmFcipEntityExtGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 7)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipEntityExtTcpMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipEntityExtGroupSup1 = cfmFcipEntityExtGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cfmFcipEntityExtGroupSup1.setDescription('A collection of objects providing information about FCIP Entity. ')
cfmFcipLinkExtGroupRev2Sup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 8)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtIPSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkExtGroupRev2Sup1 = cfmFcipLinkExtGroupRev2Sup1.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtGroupRev2Sup1.setDescription('A collection of objects providing information about FCIP Links, especially about the tape acceleration and IP Security. ')
cfmFcipLinkExtGroupRev2Sup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 9)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtPhyIfIndex"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtWriteAccOper"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtTapeAccOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkExtGroupRev2Sup2 = cfmFcipLinkExtGroupRev2Sup2.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtGroupRev2Sup2.setDescription('A collection of objects providing information about FCIP Link Operational state.')
cfmFcipLinkExtStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 10)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkStatsRxIPCompRatio"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkStatsTxIPCompRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkExtStatsGroup = cfmFcipLinkExtStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtStatsGroup.setDescription('A collection of objects providing information about FCIP statistics. ')
cfmFcipLinkExtGroupRev2Sup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 329, 2, 2, 11)).setObjects(("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtTapeReadAccOper"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtFiconTAVsanL2k"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtFiconTAVsanL4k"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtFiconTAVsanLOper2k"), ("CISCO-FCIP-MGMT-EXT-MIB", "cfmFcipLinkExtFiconTAVsanLOper4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFcipLinkExtGroupRev2Sup3 = cfmFcipLinkExtGroupRev2Sup3.setStatus('current')
if mibBuilder.loadTexts: cfmFcipLinkExtGroupRev2Sup3.setDescription('A collection of objects providing information about FCIP Link Tape Read and Ficon Tape Acceleration Configuration and Operational status. ')
mibBuilder.exportSymbols("CISCO-FCIP-MGMT-EXT-MIB", ciscoFcipMgmtExtMIBConform=ciscoFcipMgmtExtMIBConform, cfmFcipEntityExtCWMBurstSize=cfmFcipEntityExtCWMBurstSize, cfmFcipEntityExtTable=cfmFcipEntityExtTable, cfmFcipLinkStatsTxIPCompRatio=cfmFcipLinkStatsTxIPCompRatio, cfmFcipEntityExtEntry=cfmFcipEntityExtEntry, cfmFcipLinkExtFiconTAVsanL4k=cfmFcipLinkExtFiconTAVsanL4k, cfmFcipLinkExtWriteAccOper=cfmFcipLinkExtWriteAccOper, cfmFcipLinkStatsRxIPCompRatio=cfmFcipLinkStatsRxIPCompRatio, cfmFcipLinkExtTimestampTolerance=cfmFcipLinkExtTimestampTolerance, cfmFcipLinkExtTapeReadAccOper=cfmFcipLinkExtTapeReadAccOper, cfmFcipExtCompliance1=cfmFcipExtCompliance1, cfmFcipLinkExtPhyIfIndex=cfmFcipLinkExtPhyIfIndex, cfmFcipLinkExtTcpRemPort=cfmFcipLinkExtTcpRemPort, cfmFcipLinkExtEthIfIndex=cfmFcipLinkExtEthIfIndex, cfmFcipLinkExtGroupRev2Sup1=cfmFcipLinkExtGroupRev2Sup1, cfmFcipMgmtExtStats=cfmFcipMgmtExtStats, cfmFcipLinkExtStatsGroup=cfmFcipLinkExtStatsGroup, cfmFcipEntityExtTcpRndTrpTimeEst=cfmFcipEntityExtTcpRndTrpTimeEst, cfmFcipEntityExtTcpMinRTO=cfmFcipEntityExtTcpMinRTO, cfmFcipLinkExtGroupRev2=cfmFcipLinkExtGroupRev2, cfmFcipLinkExtBPortKAEnable=cfmFcipLinkExtBPortKAEnable, cfmFcipEntityExtGroupSup1=cfmFcipEntityExtGroupSup1, cfmFcipLinkMapIndex=cfmFcipLinkMapIndex, cfmFcipLinkExtDataQOSField=cfmFcipLinkExtDataQOSField, cfmFcipLinkExtTapeAccOper=cfmFcipLinkExtTapeAccOper, cfmFcipMapEntityId=cfmFcipMapEntityId, cfmFcipLinkExtTapeAccelerator=cfmFcipLinkExtTapeAccelerator, cfmFcipEntityExtTcpMaxJitter=cfmFcipEntityExtTcpMaxJitter, cfmFcipLinkExtIPComp=cfmFcipLinkExtIPComp, cfmFcipEntityExtPMTUResetTO=cfmFcipEntityExtPMTUResetTO, ciscoFcipMgmtExtMIBNotifs=ciscoFcipMgmtExtMIBNotifs, cfmFcipLinkExtSpecialFrameEnable=cfmFcipLinkExtSpecialFrameEnable, cfmFcipExtGroups=cfmFcipExtGroups, cfmFcipLinkExtTable=cfmFcipLinkExtTable, cfmFcipLinkExtStatsTable=cfmFcipLinkExtStatsTable, cfmFcipLinkExtStatsEntry=cfmFcipLinkExtStatsEntry, cfmFcipEntityExtTcpMaxBW=cfmFcipEntityExtTcpMaxBW, cfmFcipLinkExtGroup=cfmFcipLinkExtGroup, cfmFcipEntityExtCWMEnable=cfmFcipEntityExtCWMEnable, cfmFcipEntityExtGroup=cfmFcipEntityExtGroup, cfmFcipLinkExtFlowCtrlBufSize=cfmFcipLinkExtFlowCtrlBufSize, cfmFcipLinkExtFiconTAVsanL2k=cfmFcipLinkExtFiconTAVsanL2k, cfmFcipLinkExtFiconTAVsanLOper4k=cfmFcipLinkExtFiconTAVsanLOper4k, cfmFcipLinkExtMapGroup=cfmFcipLinkExtMapGroup, cfmFcipExtCompliance6=cfmFcipExtCompliance6, ciscoFcipMgmtExtMIB=ciscoFcipMgmtExtMIB, cfmFcipEntityExtTcpKeepAliveTO=cfmFcipEntityExtTcpKeepAliveTO, cfmFcipEntityExtTcpMaxReTx=cfmFcipEntityExtTcpMaxReTx, cfmFcipLinkExtCheckTimestamp=cfmFcipLinkExtCheckTimestamp, cfmFcipExtCompliance4=cfmFcipExtCompliance4, cfmFcipExtCompliance=cfmFcipExtCompliance, cfmFcipLinkExtCntrlQOSField=cfmFcipLinkExtCntrlQOSField, cfmFcipLinkExtGroupRev2Sup3=cfmFcipLinkExtGroupRev2Sup3, ciscoFcipMgmtExtMIBObjects=ciscoFcipMgmtExtMIBObjects, cfmFcipLinkExtWriteAccelerator=cfmFcipLinkExtWriteAccelerator, cfmFcipLinkExtLocalBPortEnable=cfmFcipLinkExtLocalBPortEnable, PYSNMP_MODULE_ID=ciscoFcipMgmtExtMIB, cfmFcipEntityExtTcpSendBufSize=cfmFcipEntityExtTcpSendBufSize, cfmFcipEntityExtTcpMinAvailBW=cfmFcipEntityExtTcpMinAvailBW, cfmFcipExtCompliance5=cfmFcipExtCompliance5, cfmFcipMgmtExtConfig=cfmFcipMgmtExtConfig, cfmFcipExtCompliance2=cfmFcipExtCompliance2, cfmFcipLinkExtFiconTAVsanLOper2k=cfmFcipLinkExtFiconTAVsanLOper2k, cfmFcipEntityExtPMTUEnable=cfmFcipEntityExtPMTUEnable, cfmFcipLinkExtNumTcpConn=cfmFcipLinkExtNumTcpConn, cfmFcipLinkMapEntry=cfmFcipLinkMapEntry, cfmFcipLinkExtEntry=cfmFcipLinkExtEntry, cfmFcipLinkExtGroupRev2Sup2=cfmFcipLinkExtGroupRev2Sup2, cfmFcipEntityExtTcpLocalPort=cfmFcipEntityExtTcpLocalPort, cfmFcipLinkExtGroupRev1=cfmFcipLinkExtGroupRev1, cfmFcipExtCompliances=cfmFcipExtCompliances, cfmFcipEntityExtTcpSACKEnable=cfmFcipEntityExtTcpSACKEnable, cfmFcipLinkExtIPSec=cfmFcipLinkExtIPSec, cfmFcipLinkMapTable=cfmFcipLinkMapTable, cfmFcipExtCompliance3=cfmFcipExtCompliance3, cfmFcipLinkExtPassiveMode=cfmFcipLinkExtPassiveMode, cfmFcipEntityExtCWMGroup=cfmFcipEntityExtCWMGroup)
