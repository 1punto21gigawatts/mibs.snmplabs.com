#
# PySNMP MIB module IEEE8021-SRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-SRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:52:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
ieee8021BridgeBaseEntry, ieee8021BridgeBaseComponentId, ieee8021BridgeBasePort, ieee8021BridgeBasePortEntry = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseEntry", "ieee8021BridgeBaseComponentId", "ieee8021BridgeBasePort", "ieee8021BridgeBasePortEntry")
IEEE8021FqtssTrafficClassValue, = mibBuilder.importSymbols("IEEE8021-FQTSS-MIB", "IEEE8021FqtssTrafficClassValue")
IEEE8021VlanIndex, ieee802dot1mibs, IEEE8021PriorityCodePoint = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021VlanIndex", "ieee802dot1mibs", "IEEE8021PriorityCodePoint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, NotificationType, IpAddress, MibIdentifier, Unsigned32, Counter32, Counter64, Bits, Integer32, iso, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "NotificationType", "IpAddress", "MibIdentifier", "Unsigned32", "Counter32", "Counter64", "Bits", "Integer32", "iso", "TimeTicks", "ModuleIdentity")
TruthValue, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "DisplayString")
ieee8021SrpMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 19))
ieee8021SrpMib.setRevisions(('2014-12-15 00:00', '2011-02-27 00:00', '2010-04-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021SrpMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q 2014 revision. Cross references updated and corrected.', 'Minor edits to contact information etc. as part of 2011 revision of Std 802.1Q.', 'Initial revision, included in IEEE 802.1Qat',))
if mibBuilder.loadTexts: ieee8021SrpMib.setLastUpdated('201412150000Z')
if mibBuilder.loadTexts: ieee8021SrpMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021SrpMib.setContactInfo('WG-URL: http://grouper.ieee.org/groups/802/1/index.html WG-EMail: stds-802-1@ieee.org Contact: IEEE 802.1 Working Group Chair Postal: C/O IEEE 802.1 Working Group IEEE Standards Association 445 Hoes Lane P.O. Box 1331 Piscataway NJ 08855-1331 USA E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021SrpMib.setDescription('The Bridge MIB module for managing devices that support the IEEE Std 802.1Q Stream Reservation Protocol. Unless otherwise indicated, the references in this MIB module are to IEEE Std 802.1Q-2014. Copyright (C) IEEE (2014). This version of this MIB module is part of IEEE802.1Q; see the draft itself for full legal notices.')
class IEEE8021SrpStreamRankValue(TextualConvention, Integer32):
    reference = '35.2.2.8.5b'
    description = 'An 802.1 SRP Stream Rank value. This is an integer, with the following interpretation placed on the value: 0: Emergency, high-rank stream, 1: Non-emergency stream.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("emergency", 0), ("nonEmergency", 1))

class IEEE8021SrpStreamIdValue(TextualConvention, OctetString):
    description = 'Represents an SRP Stream ID, which is often defined as a MAC Address followed by a unique 16-bit ID.'
    status = 'current'
    displayHint = '1x:1x:1x:1x:1x:1x.1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class IEEE8021SrpReservationDirectionValue(TextualConvention, Integer32):
    reference = '35.2.1.2'
    description = 'An 802.1 SRP Stream Reservation Direction value. This is an integer, with the following interpretation placed on the value: 0: Talker registrations, 1: Listener registrations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("talkerRegistrations", 0), ("listenerRegistrations", 1))

class IEEE8021SrpReservationDeclarationTypeValue(TextualConvention, Integer32):
    reference = '35.2.1.3'
    description = 'An 802.1 SRP Stream Reservation Declaration Type value. This is an integer, with the following interpretation placed on the value: 0: Talker Advertise, 1: Talker Failed, 2: Listener Asking Failed, 3: Listener Ready, 4: Listener Ready Failed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("talkerAdvertise", 0), ("talkerFailed", 1), ("listenerAskingFailed", 2), ("listenerReady", 3), ("listenerReadyFailed", 4))

class IEEE8021SrpReservationFailureCodeValue(TextualConvention, Integer32):
    reference = '35.2.2.8.7'
    description = 'An 802.1 SRP Stream Reservation Failure Code value. This is an integer, with the following interpretation placed on the value: 0: No failure, 1: Insufficient bandwidth, 2: Insufficient Bridge resources, 3: Insufficient bandwidth for Traffic Class, 4: StreamID in use by another Talker, 5: Stream destination address already in use, 6: Stream pre-empted by higher rank, 7: Reported latency has changed, 8: Egress port is not AVBCapable, 9: Use a different destination_address, 10: Out of MSRP resources, 11: Out of MMRP resources, 12: Cannot store destination_address, 13: Requested priority is not an SR Class priority, 14: MaxFrameSize is too large for media, 15: maxFanInPorts limit has been reached, 16: Changes in FirstValue for a registered StreamID, 17: VLAN is blocked on this egress port (Registration Forbidden), 18: VLAN tagging is disabled on this egress port (untagged set), 19: SR class priority mismatch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("noFailure", 0), ("insufficientBandwidth", 1), ("insufficientResources", 2), ("insufficientTrafficClassBandwidth", 3), ("streamIDInUse", 4), ("streamDestinationAddressInUse", 5), ("streamPreemptedByHigherRank", 6), ("latencyHasChanged", 7), ("egressPortNotAVBCapable", 8), ("useDifferentDestinationAddress", 9), ("outOfMSRPResources", 10), ("outOfMMRPResources", 11), ("cannotStoreDestinationAddress", 12), ("priorityIsNoAnSRCLass", 13), ("maxFrameSizeTooLarge", 14), ("maxFanInPortsLimitReached", 15), ("firstValueChangedForStreamID", 16), ("vlanBlockedOnEgress", 17), ("vlanTaggingDisabledOnEgress", 18), ("srClassPriorityMismatch", 19))

ieee8021SrpNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 0))
ieee8021SrpObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 1))
ieee8021SrpConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 2))
ieee8021SrpConfiguration = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 1, 1))
ieee8021SrpLatency = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 1, 2))
ieee8021SrpStreams = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 1, 3))
ieee8021SrpReservations = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 1, 4))
ieee8021SrpBridgeBaseTable = MibTable((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 1), )
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseTable.setDescription('A table for SRP main control and status information. All writeable objects in this table must be persistent over power up restart/reboot. These objects augment the ieee8021BridgeBasePortTable.')
ieee8021SrpBridgeBaseEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 1, 1), )
ieee8021BridgeBaseEntry.registerAugmentions(("IEEE8021-SRP-MIB", "ieee8021SrpBridgeBaseEntry"))
ieee8021SrpBridgeBaseEntry.setIndexNames(*ieee8021BridgeBaseEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseEntry.setDescription('SRP control and status information for a Bridge.')
ieee8021SrpBridgeBaseMsrpEnabledStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpEnabledStatus.setReference('35.2.1.4d')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpEnabledStatus.setDescription('The administrative status requested by management for MSRP. The value true(1) indicates that MSRP should be enabled on this device, in all VLANs, on all ports for which it has not been specifically disabled. When false(2), MSRP is disabled, in all VLANs and on all ports, and all MSRP frames will be forwarded transparently. This objects affects both Applicant and Registrar state machines. A transition from false(2) to true(1) will cause a reset of all MSRP state machines on all ports. This object may be modified while the corresponding instance of ieee8021BridgeBaseRowStatus is active(1). The value of this object MUST be retained across reinitializations of the management system.')
ieee8021SrpBridgeBaseMsrpTalkerPruning = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpTalkerPruning.setReference('12.22.1, 35.2.1.4b, 35.2.4.3.1')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpTalkerPruning.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpTalkerPruning.setDescription('The value of the talkerPruning parameter which controls the propagation of Talker declarations. The value true(1) indicates that Talker attributes are only declared on ports that have the Stream destination_address registered in the MMRP MAC Address Registration Entries. When false(2), Talker attribute are declared on all egress ports in the active topology. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021SrpBridgeBaseMsrpMaxFanInPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpMaxFanInPorts.setReference('12.22.1, 35.2.1.4f')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpMaxFanInPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpMaxFanInPorts.setDescription('The value of the msrpMaxFanInPorts parameter which limits the total number of ports on a Bridge that are allowed to establish reservations for inbound Streams. A value of zero (0) indicates no fan-in limit is being specified and calculations involving fan-in will only be limited by the number of MSRP enabled ports. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021SrpBridgeBaseMsrpLatencyMaxFrameSize = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 1, 1, 4), Unsigned32().clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpLatencyMaxFrameSize.setReference('12.22.1, 35.2.1.4g')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpLatencyMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgeBaseMsrpLatencyMaxFrameSize.setDescription('The value of msrpLatencyMaxFrameSize parameter which is used in the calculation of the maximum latency through a Bridge. The maximum size is defined to be 2000 octets by default, but may be set to a smaller or larger value dependent on the particular Bridge configuration. This parameter does not imply any type of policing of frame size, it is only used in the latency calculations. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021SrpBridgePortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 2), )
if mibBuilder.loadTexts: ieee8021SrpBridgePortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgePortTable.setDescription('A table for SRP control and status information about every Bridge Port. Augments the ieee8021BridgeBasePortTable.')
ieee8021SrpBridgePortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 2, 1), )
ieee8021BridgeBasePortEntry.registerAugmentions(("IEEE8021-SRP-MIB", "ieee8021SrpBridgePortEntry"))
ieee8021SrpBridgePortEntry.setIndexNames(*ieee8021BridgeBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021SrpBridgePortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgePortEntry.setDescription('SRP control and status information for a Bridge Port.')
ieee8021SrpBridgePortMsrpEnabledStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpEnabledStatus.setReference('35.2.1.4e')
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpEnabledStatus.setDescription('The administrative state of MSRP operation on this port. The value true(1) indicates that MSRP is enabled on this port in all VLANs as long as ieee8021BridgeMsrpEnabledStatus is also true(1). A value of false(2) indicates that MSRP is disabled on this port in all VLANs: any MSRP frames received will be silently discarded, and no MSRP registrations will be propagated from other ports. Setting this to a value of true(1) will be stored by the agent but will only take effect on the MSRP protocol operation if ieee8021BridgeMsrpEnabledStatus also indicates the value true(1). This object affects all MSRP Applicant and Registrar state machines on this port. A transition from false(2) to true(1) will cause a reset of all MSRP state machines on this port. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021SrpBridgePortMsrpFailedRegistrations = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 2, 1, 2), Counter64()).setUnits('failed MSRP registrations').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpFailedRegistrations.setReference('10.7.12.1')
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpFailedRegistrations.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpFailedRegistrations.setDescription('The total number of failed MSRP registrations, for any reason, in all VLANs, on this port. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
ieee8021SrpBridgePortMsrpLastPduOrigin = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpLastPduOrigin.setReference('10.7.12.2')
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpLastPduOrigin.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgePortMsrpLastPduOrigin.setDescription('The Source MAC Address of the last MSRP message received on this port.')
ieee8021SrpBridgePortSrPvid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 1, 2, 1, 4), IEEE8021VlanIndex().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SrpBridgePortSrPvid.setReference('35.2.2.8.3b')
if mibBuilder.loadTexts: ieee8021SrpBridgePortSrPvid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpBridgePortSrPvid.setDescription('The default VLAN ID that Streams are assigned to. Talkers learn this VID from the SRP Domain attribute and tag Streams accordingly. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021SrpLatencyTable = MibTable((1, 3, 111, 2, 802, 1, 1, 19, 1, 2, 1), )
if mibBuilder.loadTexts: ieee8021SrpLatencyTable.setReference('35.2.2.8.6')
if mibBuilder.loadTexts: ieee8021SrpLatencyTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpLatencyTable.setDescription('A table containing a set of latency measurement parameters for each traffic class.')
ieee8021SrpLatencyEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 19, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-SRP-MIB", "ieee8021SrpTrafficClass"))
if mibBuilder.loadTexts: ieee8021SrpLatencyEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpLatencyEntry.setDescription('A list of objects containing latency information for each traffic class. Rows in the table are automatically created for ports that are not an SRP domain boundary port (i.e. SRPdomainBoundaryPort is FALSE). See 35.1.4, 8.8.2, 12.22.3.')
ieee8021SrpTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 2, 1, 1, 1), IEEE8021FqtssTrafficClassValue())
if mibBuilder.loadTexts: ieee8021SrpTrafficClass.setReference('35.1.4, 8.8.2, 12.22.3')
if mibBuilder.loadTexts: ieee8021SrpTrafficClass.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpTrafficClass.setDescription('The traffic class number associated with the row of the table. Rows in the table are automatically created for ports that are not an SRP domain boundary port (i.e. SRPdomainBoundaryPort is FALSE).')
ieee8021SrpPortTcLatency = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 2, 1, 1, 2), Unsigned32()).setUnits('nano-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpPortTcLatency.setReference('35.2.1.4, 35.2.2.8.6')
if mibBuilder.loadTexts: ieee8021SrpPortTcLatency.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpPortTcLatency.setDescription('The value of the portTcMaxLatency parameter for the traffic class. This value is expressed in nano-seconds.')
ieee8021SrpStreamTable = MibTable((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1), )
if mibBuilder.loadTexts: ieee8021SrpStreamTable.setReference('35.2.2.8')
if mibBuilder.loadTexts: ieee8021SrpStreamTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamTable.setDescription('A table containing a set of characteristics for each registered Stream.')
ieee8021SrpStreamEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-SRP-MIB", "ieee8021SrpStreamId"))
if mibBuilder.loadTexts: ieee8021SrpStreamEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamEntry.setDescription('A list of objects containing characteristics for each registered Stream. Rows in the table are automatically created for Streams registered on any port of a Bridge.')
ieee8021SrpStreamId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1, 1, 1), IEEE8021SrpStreamIdValue())
if mibBuilder.loadTexts: ieee8021SrpStreamId.setReference('35.2.2.8.2')
if mibBuilder.loadTexts: ieee8021SrpStreamId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamId.setDescription('The Stream ID associated with the row of the table. Rows in the table are automatically created when Streams are registered via MSRP.')
ieee8021SrpStreamDestinationAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpStreamDestinationAddress.setReference('35.2.2.8.3a')
if mibBuilder.loadTexts: ieee8021SrpStreamDestinationAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamDestinationAddress.setDescription('The MAC destination address for the Stream described by this reservation.')
ieee8021SrpStreamVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1, 1, 3), IEEE8021VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpStreamVlanId.setReference('35.2.2.8.3b')
if mibBuilder.loadTexts: ieee8021SrpStreamVlanId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamVlanId.setDescription('The VLAN ID associated with the MSRP registration for this Stream.')
ieee8021SrpStreamTspecMaxFrameSize = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpStreamTspecMaxFrameSize.setReference('35.2.2.8.4a')
if mibBuilder.loadTexts: ieee8021SrpStreamTspecMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamTspecMaxFrameSize.setDescription('The maximum size frame that will be sent by a Talker for this Stream. This value is part of the Traffic Specification for the Stream.')
ieee8021SrpStreamTspecMaxIntervalFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpStreamTspecMaxIntervalFrames.setReference('35.2.2.8.4b, L.2')
if mibBuilder.loadTexts: ieee8021SrpStreamTspecMaxIntervalFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamTspecMaxIntervalFrames.setDescription('The maximum number of frame that will be sent during a class measurement interval (L.2). This value is part of the Traffic Specification for the Stream.')
ieee8021SrpStreamDataFramePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1, 1, 6), IEEE8021PriorityCodePoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpStreamDataFramePriority.setReference('35.2.2.8.5a')
if mibBuilder.loadTexts: ieee8021SrpStreamDataFramePriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamDataFramePriority.setDescription('The Priority Code Point (PCP) value that the referenced Stream will be tagged with. This value is used to distinguish Class A and Class B traffic.')
ieee8021SrpStreamRank = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 3, 1, 1, 7), IEEE8021SrpStreamRankValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpStreamRank.setReference('35.2.2.8.5b')
if mibBuilder.loadTexts: ieee8021SrpStreamRank.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamRank.setDescription('SRP supports emergency and non-emergency. Emergency traffic will interrupt non-emergency traffic if there is insufficient bandwidth or resources available for the emergency traffic.')
ieee8021SrpReservationsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1), )
if mibBuilder.loadTexts: ieee8021SrpReservationsTable.setReference('35.2.4')
if mibBuilder.loadTexts: ieee8021SrpReservationsTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationsTable.setDescription('A table containing Stream attribute registrations per port.')
ieee8021SrpReservationsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1), ).setIndexNames((0, "IEEE8021-SRP-MIB", "ieee8021SrpReservationStreamId"), (0, "IEEE8021-SRP-MIB", "ieee8021SrpReservationDirection"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021SrpReservationsEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationsEntry.setDescription('A list of objects containing Stream attribute registrations per port. Rows in the table are automatically created for Streams registered on any port of a Bridge.')
ieee8021SrpReservationStreamId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1, 1), IEEE8021SrpStreamIdValue())
if mibBuilder.loadTexts: ieee8021SrpReservationStreamId.setReference('35.2.2.8.2')
if mibBuilder.loadTexts: ieee8021SrpReservationStreamId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationStreamId.setDescription('The Stream ID associated with the row of the table. Rows in the table are automatically created when Streams are registered via MSRP.')
ieee8021SrpReservationDirection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1, 2), IEEE8021SrpReservationDirectionValue())
if mibBuilder.loadTexts: ieee8021SrpReservationDirection.setReference('35.2.1.2')
if mibBuilder.loadTexts: ieee8021SrpReservationDirection.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationDirection.setDescription('The source of this Stream registration, either Talker or Listener.')
ieee8021SrpReservationDeclarationType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1, 3), IEEE8021SrpReservationDeclarationTypeValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpReservationDeclarationType.setReference('35.2.1.3')
if mibBuilder.loadTexts: ieee8021SrpReservationDeclarationType.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationDeclarationType.setDescription('The type of Talker or Listener registration.')
ieee8021SrpReservationAccumulatedLatency = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1, 4), Unsigned32()).setUnits('nano-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpReservationAccumulatedLatency.setReference('35.2.2.8.6')
if mibBuilder.loadTexts: ieee8021SrpReservationAccumulatedLatency.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationAccumulatedLatency.setDescription('The Accumulated Latency associated with the current registration. For Talker registrations this represents the accumulated latency from the Talker to the ingress port of this Bridge. For Listener registrations this represents the accumulated latency to the ingress port of the neighbor Bridge or end stations. This include the latency of the media attached to this egress port.')
ieee8021SrpReservationFailureBridgeId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpReservationFailureBridgeId.setReference('35.2.2.8.7a')
if mibBuilder.loadTexts: ieee8021SrpReservationFailureBridgeId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationFailureBridgeId.setDescription('The first Bridge that changes a Talker Advertise to a Talker Failed registration will report its Bridge Identification in this field. That single Bridge Identification is then propagated from Bridge to Bridge.')
ieee8021SrpReservationFailureCode = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1, 6), IEEE8021SrpReservationFailureCodeValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpReservationFailureCode.setReference('35.2.2.8.7b')
if mibBuilder.loadTexts: ieee8021SrpReservationFailureCode.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationFailureCode.setDescription('The first Bridge that changes a Talker Advertise to a Talker Failed registration will report the Failure Code in this field. That single Failure Code is then propagated from Bridge to Bridge.')
ieee8021SrpReservationDroppedStreamFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1, 7), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpReservationDroppedStreamFrames.setReference('35.2.5.1')
if mibBuilder.loadTexts: ieee8021SrpReservationDroppedStreamFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationDroppedStreamFrames.setDescription('A count of the number of data stream frames that have been dropped for whatever reason. These are not MSRP frames, but the stream data frames that are carried by the MSRP Reservation. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
ieee8021SrpReservationStreamAge = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 19, 1, 4, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SrpReservationStreamAge.setReference('35.2.1.4c')
if mibBuilder.loadTexts: ieee8021SrpReservationStreamAge.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationStreamAge.setDescription('The number of seconds since the reservation was established on this port.')
ieee8021SrpCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 2, 1))
ieee8021SrpGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 19, 2, 2))
ieee8021SrpConfigurationGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 19, 2, 2, 1)).setObjects(("IEEE8021-SRP-MIB", "ieee8021SrpBridgeBaseMsrpEnabledStatus"), ("IEEE8021-SRP-MIB", "ieee8021SrpBridgeBaseMsrpTalkerPruning"), ("IEEE8021-SRP-MIB", "ieee8021SrpBridgeBaseMsrpMaxFanInPorts"), ("IEEE8021-SRP-MIB", "ieee8021SrpBridgeBaseMsrpLatencyMaxFrameSize"), ("IEEE8021-SRP-MIB", "ieee8021SrpBridgePortMsrpEnabledStatus"), ("IEEE8021-SRP-MIB", "ieee8021SrpBridgePortMsrpFailedRegistrations"), ("IEEE8021-SRP-MIB", "ieee8021SrpBridgePortMsrpLastPduOrigin"), ("IEEE8021-SRP-MIB", "ieee8021SrpBridgePortSrPvid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SrpConfigurationGroup = ieee8021SrpConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpConfigurationGroup.setDescription('Objects that define configuration of SRP.')
ieee8021SrpLatencyGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 19, 2, 2, 2)).setObjects(("IEEE8021-SRP-MIB", "ieee8021SrpPortTcLatency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SrpLatencyGroup = ieee8021SrpLatencyGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpLatencyGroup.setDescription('Objects that define latency for SRP.')
ieee8021SrpStreamsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 19, 2, 2, 3)).setObjects(("IEEE8021-SRP-MIB", "ieee8021SrpStreamDestinationAddress"), ("IEEE8021-SRP-MIB", "ieee8021SrpStreamVlanId"), ("IEEE8021-SRP-MIB", "ieee8021SrpStreamTspecMaxFrameSize"), ("IEEE8021-SRP-MIB", "ieee8021SrpStreamTspecMaxIntervalFrames"), ("IEEE8021-SRP-MIB", "ieee8021SrpStreamDataFramePriority"), ("IEEE8021-SRP-MIB", "ieee8021SrpStreamRank"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SrpStreamsGroup = ieee8021SrpStreamsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpStreamsGroup.setDescription('Objects that define Streams for SRP.')
ieee8021SrpReservationsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 19, 2, 2, 4)).setObjects(("IEEE8021-SRP-MIB", "ieee8021SrpReservationDeclarationType"), ("IEEE8021-SRP-MIB", "ieee8021SrpReservationAccumulatedLatency"), ("IEEE8021-SRP-MIB", "ieee8021SrpReservationFailureBridgeId"), ("IEEE8021-SRP-MIB", "ieee8021SrpReservationFailureCode"), ("IEEE8021-SRP-MIB", "ieee8021SrpReservationDroppedStreamFrames"), ("IEEE8021-SRP-MIB", "ieee8021SrpReservationStreamAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SrpReservationsGroup = ieee8021SrpReservationsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpReservationsGroup.setDescription('Objects that define Stream Reservations for SRP.')
ieee8021SrpCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 19, 2, 1, 1)).setObjects(("IEEE8021-SRP-MIB", "ieee8021SrpConfigurationGroup"), ("IEEE8021-SRP-MIB", "ieee8021SrpLatencyGroup"), ("IEEE8021-SRP-MIB", "ieee8021SrpStreamsGroup"), ("IEEE8021-SRP-MIB", "ieee8021SrpReservationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SrpCompliance = ieee8021SrpCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021SrpCompliance.setDescription('The compliance statement for devices supporting Stream Reservation Protocol. Support of the objects defined in the IEEE8021-SRP MIB also requires support of the IEEE8021-BRIDGE-MIB; the provisions of 17.3.2 apply to implementations claiming support of the IEEE8021-SRP MIB.')
mibBuilder.exportSymbols("IEEE8021-SRP-MIB", PYSNMP_MODULE_ID=ieee8021SrpMib, ieee8021SrpNotifications=ieee8021SrpNotifications, ieee8021SrpBridgePortMsrpFailedRegistrations=ieee8021SrpBridgePortMsrpFailedRegistrations, ieee8021SrpReservationsEntry=ieee8021SrpReservationsEntry, ieee8021SrpBridgePortMsrpLastPduOrigin=ieee8021SrpBridgePortMsrpLastPduOrigin, ieee8021SrpStreamRank=ieee8021SrpStreamRank, ieee8021SrpObjects=ieee8021SrpObjects, ieee8021SrpStreamsGroup=ieee8021SrpStreamsGroup, ieee8021SrpMib=ieee8021SrpMib, ieee8021SrpLatencyEntry=ieee8021SrpLatencyEntry, ieee8021SrpBridgePortSrPvid=ieee8021SrpBridgePortSrPvid, ieee8021SrpReservations=ieee8021SrpReservations, ieee8021SrpReservationDroppedStreamFrames=ieee8021SrpReservationDroppedStreamFrames, ieee8021SrpConformance=ieee8021SrpConformance, ieee8021SrpReservationAccumulatedLatency=ieee8021SrpReservationAccumulatedLatency, ieee8021SrpBridgeBaseTable=ieee8021SrpBridgeBaseTable, ieee8021SrpLatency=ieee8021SrpLatency, ieee8021SrpStreamTspecMaxIntervalFrames=ieee8021SrpStreamTspecMaxIntervalFrames, IEEE8021SrpStreamRankValue=IEEE8021SrpStreamRankValue, ieee8021SrpPortTcLatency=ieee8021SrpPortTcLatency, ieee8021SrpLatencyGroup=ieee8021SrpLatencyGroup, ieee8021SrpConfigurationGroup=ieee8021SrpConfigurationGroup, ieee8021SrpBridgeBaseMsrpEnabledStatus=ieee8021SrpBridgeBaseMsrpEnabledStatus, ieee8021SrpStreamEntry=ieee8021SrpStreamEntry, ieee8021SrpStreamDestinationAddress=ieee8021SrpStreamDestinationAddress, ieee8021SrpCompliances=ieee8021SrpCompliances, IEEE8021SrpReservationDeclarationTypeValue=IEEE8021SrpReservationDeclarationTypeValue, ieee8021SrpLatencyTable=ieee8021SrpLatencyTable, ieee8021SrpBridgeBaseEntry=ieee8021SrpBridgeBaseEntry, IEEE8021SrpStreamIdValue=IEEE8021SrpStreamIdValue, ieee8021SrpBridgePortEntry=ieee8021SrpBridgePortEntry, ieee8021SrpReservationFailureBridgeId=ieee8021SrpReservationFailureBridgeId, ieee8021SrpBridgePortMsrpEnabledStatus=ieee8021SrpBridgePortMsrpEnabledStatus, ieee8021SrpConfiguration=ieee8021SrpConfiguration, ieee8021SrpStreamId=ieee8021SrpStreamId, ieee8021SrpCompliance=ieee8021SrpCompliance, ieee8021SrpBridgeBaseMsrpTalkerPruning=ieee8021SrpBridgeBaseMsrpTalkerPruning, ieee8021SrpReservationsGroup=ieee8021SrpReservationsGroup, ieee8021SrpReservationDeclarationType=ieee8021SrpReservationDeclarationType, ieee8021SrpGroups=ieee8021SrpGroups, ieee8021SrpStreamTable=ieee8021SrpStreamTable, ieee8021SrpReservationStreamAge=ieee8021SrpReservationStreamAge, ieee8021SrpBridgeBaseMsrpLatencyMaxFrameSize=ieee8021SrpBridgeBaseMsrpLatencyMaxFrameSize, IEEE8021SrpReservationFailureCodeValue=IEEE8021SrpReservationFailureCodeValue, ieee8021SrpStreams=ieee8021SrpStreams, ieee8021SrpTrafficClass=ieee8021SrpTrafficClass, ieee8021SrpReservationsTable=ieee8021SrpReservationsTable, ieee8021SrpReservationFailureCode=ieee8021SrpReservationFailureCode, ieee8021SrpStreamTspecMaxFrameSize=ieee8021SrpStreamTspecMaxFrameSize, ieee8021SrpStreamDataFramePriority=ieee8021SrpStreamDataFramePriority, ieee8021SrpReservationDirection=ieee8021SrpReservationDirection, ieee8021SrpBridgeBaseMsrpMaxFanInPorts=ieee8021SrpBridgeBaseMsrpMaxFanInPorts, IEEE8021SrpReservationDirectionValue=IEEE8021SrpReservationDirectionValue, ieee8021SrpStreamVlanId=ieee8021SrpStreamVlanId, ieee8021SrpReservationStreamId=ieee8021SrpReservationStreamId, ieee8021SrpBridgePortTable=ieee8021SrpBridgePortTable)
