#
# PySNMP MIB module NETSTAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSTAR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, ifOutOctets, ifInOctets, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifOutOctets", "ifInOctets", "ifDescr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
snmp, = mibBuilder.importSymbols("SNMPv2-MIB", "snmp")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Unsigned32, Counter64, iso, MibIdentifier, enterprises, TimeTicks, IpAddress, Bits, Gauge32, Integer32, ObjectIdentity, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Unsigned32", "Counter64", "iso", "MibIdentifier", "enterprises", "TimeTicks", "IpAddress", "Bits", "Gauge32", "Integer32", "ObjectIdentity", "NotificationType", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netstar = MibIdentifier((1, 3, 6, 1, 4, 1, 1080))
netstar_products = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1)).setLabel("netstar-products")
netstar_daemons = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 2)).setLabel("netstar-daemons")
gigarouter = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1))
clusterswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 2))
gr2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 3))
grf = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 4))
grf400 = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 4, 1))
grf1600 = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 4, 2))
mib2Daemon = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 2, 1))
frameRelayDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 2, 2))
dynamicRoutingDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 2, 3))
mibmgrDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 2, 4))
atmpDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 2, 5))
grChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1))
grHIPPI = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 2))
grFDDI4 = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 3))
grAtmV1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4))
grAtmUNI = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 5))
grThreshPoll = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 6))
grPingLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 7))
grAtmp = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8))
grPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: grPowerSupplyStatus.setDescription('A sum of bits: 1 = Power supply A is operational 2 = Power supply B is operational 3 = Power supplies A and B are operational')
grTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("over-temp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: grTempStatus.setDescription('The temperature sensed by the Routing Manager Board. Over-temp status means that the temperature has exceeded the maximum temperature threshold.')
grFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: grFanStatus.setDescription('A sum of bits: 1 = Fan tray installed 2 = Fan 1 operational 4 = Fan 2 operational 8 = Fan 3 operational 16 = Fan 4 operational 32 = Fan 5 operational 64 = Fan 6 operational The expected value is based upon the actual number of fans installed and varies from chassis to chassis as shown below: GR-2 = 127 (six fans) GRF400 = 15 (three fans) GRF1600 = 7 (two fans) A value of zero indicates that the fan tray has been removed.')
grPortCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPortCardNumber.setReference('netgrit/grime.h: CARD_NUMBER')
if mibBuilder.loadTexts: grPortCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: grPortCardNumber.setDescription('The number of portcards installed in the system.')
grPortCardTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 5), )
if mibBuilder.loadTexts: grPortCardTable.setStatus('mandatory')
if mibBuilder.loadTexts: grPortCardTable.setDescription('A list of PortCard entries. The number of entries shall not exceed the value of grPortCardNumber.')
grPortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 5, 1), ).setIndexNames((0, "NETSTAR-MIB", "grPortCardSlot"))
if mibBuilder.loadTexts: grPortCardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: grPortCardEntry.setDescription('A PortCard entry containing information common to a given port card.')
grPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPortCardSlot.setStatus('mandatory')
if mibBuilder.loadTexts: grPortCardSlot.setDescription('The port card slot number, starting at zero.')
grPortCardHWtype = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("hippi", 3), ("fddi", 4), ("rmb", 6), ("atm", 7), ("hssi", 8), ("ibmSP", 9), ("atmq-oc3", 10), ("fddiq", 11), ("atm-oc12", 12), ("ethernet", 13), ("sonet-oc3", 14), ("cddi", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPortCardHWtype.setStatus('mandatory')
if mibBuilder.loadTexts: grPortCardHWtype.setDescription('GigaRouter Port Card hardware type.')
grPortCardCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99))).clone(namedValues=NamedValues(("empty", 1), ("power-up", 2), ("boot-requested", 3), ("dumping", 4), ("loading", 5), ("configuring", 6), ("running", 7), ("not-responding", 8), ("panic", 9), ("held-reset", 10), ("other", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPortCardCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: grPortCardCurrentState.setDescription('The instantaneous state of port card operation.')
grGatedStatus = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("not-running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grGatedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: grGatedStatus.setDescription('The instantaneous state of gated: running or not running.')
grTransportMethod = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ftp", 0), ("tftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grTransportMethod.setStatus('mandatory')
if mibBuilder.loadTexts: grTransportMethod.setDescription('This defines the transport method used to transfer configuration files between the GRF and a ftp/tftp server')
grFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: grFTPUserName.setDescription('This defines the user login name. This user login name will be used to log into the ftp server to transfer the configuration files.')
grFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: grFTPPassword.setDescription('This defines the password for the ftp user. This password will be used to log into the ftp server to transfer the configuration files.')
grServerName = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grServerName.setStatus('mandatory')
if mibBuilder.loadTexts: grServerName.setDescription('This defines the ftp/tftp server name to be used for a Backup/Compare/Restore operation.')
grFileName = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grFileName.setStatus('mandatory')
if mibBuilder.loadTexts: grFileName.setDescription('This defines the file name to be used for a Backup/Compare/Restore operation.')
grLastOperation = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grLastOperation.setStatus('mandatory')
if mibBuilder.loadTexts: grLastOperation.setDescription('This describes the last Backup/Compare/Restore operation that was executed on the system.')
grStatusMsg = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grStatusMsg.setStatus('mandatory')
if mibBuilder.loadTexts: grStatusMsg.setDescription('This message contains the status information associated with the last Backup/Compare/Restore operation.')
grBackup = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grBackup.setStatus('mandatory')
if mibBuilder.loadTexts: grBackup.setDescription('The setting of this to yes starts the configuration Backup operation.')
grCompare = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grCompare.setStatus('mandatory')
if mibBuilder.loadTexts: grCompare.setDescription('The setting of this to yes starts the configuration Compare operation.')
grRestore = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grRestore.setStatus('mandatory')
if mibBuilder.loadTexts: grRestore.setDescription('The setting of this to yes starts the configuration Restore operation.')
grAtmV1VcTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1), )
if mibBuilder.loadTexts: grAtmV1VcTable.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_TABLE')
if mibBuilder.loadTexts: grAtmV1VcTable.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcTable.setDescription('A list of PortCard ATM Interface entries.')
grAtmV1VcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1), ).setIndexNames((0, "NETSTAR-MIB", "grAtmV1VcIfIndex"), (0, "NETSTAR-MIB", "grAtmV1VcVpi"), (0, "NETSTAR-MIB", "grAtmV1VcVci"))
if mibBuilder.loadTexts: grAtmV1VcEntry.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_ENTRY')
if mibBuilder.loadTexts: grAtmV1VcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcEntry.setDescription('A grAtmV1Vc entry containing attributes of an ATM virtual connection.')
grAtmV1VcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcIfIndex.setDescription("The interface on which this entry's PVC exists. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
grAtmV1VcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcVpi.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_VPI')
if mibBuilder.loadTexts: grAtmV1VcVpi.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcVpi.setDescription('The Virtual Path Identifier (VPI) value of this virtual connection.')
grAtmV1VcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcVci.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_VCI')
if mibBuilder.loadTexts: grAtmV1VcVci.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcVci.setDescription('The Virtual Connection Identifier (VCI) value of this virtual connection.')
grAtmV1VcAal = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal3", 1), ("aal5", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcAal.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_AAL')
if mibBuilder.loadTexts: grAtmV1VcAal.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcAal.setDescription('The ATM Adaptation Layer (AAL) protocol to be used on this virtual connection.')
grAtmV1VcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ip-llc", 1), ("ip-null", 2), ("uni", 3), ("diag0", 4), ("diag1", 5), ("raw", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcProtocol.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_PRO')
if mibBuilder.loadTexts: grAtmV1VcProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcProtocol.setDescription('The upper-layer protocol to be used on this virtual connection.')
grAtmV1VcDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcDestIfIndex.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_D_INF')
if mibBuilder.loadTexts: grAtmV1VcDestIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcDestIfIndex.setDescription('The IfIndex value for the interface to which this virtual connection is attached, if any. This object is meaningful only when the grAtmV1VcProtocol value is diag0(4), diag1(5) or raw(6).')
grAtmV1VcDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcDestVpi.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_D_VPI')
if mibBuilder.loadTexts: grAtmV1VcDestVpi.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcDestVpi.setDescription('The VPI value for the Destination virtual connection to which this VC is attached, if any. This object is meaningful only when the grAtmV1VcProtocol value is diag0(4), diag1(5) or raw(6).')
grAtmV1VcDestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcDestVci.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_D_VCI')
if mibBuilder.loadTexts: grAtmV1VcDestVci.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcDestVci.setDescription('The VCI value for the Destination virtual connection to which this VC is attached, if any. This object is meaningful only when the grAtmV1VcProtocol value is diag0(4), diag1(5) or raw(6).')
grAtmV1VcRateq = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcRateq.setReference('netgrit/grime.h: CARD_IF_ATM_OUT_PVC_RQ')
if mibBuilder.loadTexts: grAtmV1VcRateq.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcRateq.setDescription('The number of the rate queue to which this virtual connection is assigned.')
grAtmV1VcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("switched", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1VcType.setReference('netgrit/grime.h: CARD_IF_ATM_IN_PVC_STATE')
if mibBuilder.loadTexts: grAtmV1VcType.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1VcType.setDescription('The type of virtual connection.')
grAtmV1RateqTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 3), )
if mibBuilder.loadTexts: grAtmV1RateqTable.setReference('netgrit/grime.h: CARD_IF_ATM_RATEQ_TABLE')
if mibBuilder.loadTexts: grAtmV1RateqTable.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1RateqTable.setDescription('A list of PortCard ATM Interface entries.')
grAtmV1RateqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 3, 1), ).setIndexNames((0, "NETSTAR-MIB", "grAtmV1RateqIfIndex"), (0, "NETSTAR-MIB", "grAtmV1RateqIndex"))
if mibBuilder.loadTexts: grAtmV1RateqEntry.setReference('netgrit/grime.h: CARD_IF_ATM_RATEQ_ENTRY')
if mibBuilder.loadTexts: grAtmV1RateqEntry.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1RateqEntry.setDescription('A grAtmV1Rateq entry containing attributes of an ATM interface.')
grAtmV1RateqIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1RateqIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1RateqIfIndex.setDescription("The interface on which this entry's rate queue exists. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
grAtmV1RateqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1RateqIndex.setReference('netgrit/grime.h: CARD_IF_ATM_RATEQ_Q')
if mibBuilder.loadTexts: grAtmV1RateqIndex.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1RateqIndex.setDescription('A number identifying the rate queue within the Interface.')
grAtmV1RateqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1RateqRate.setReference('netgrit/grime.h: CARD_IF_ATM_RATEQ_RATE')
if mibBuilder.loadTexts: grAtmV1RateqRate.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1RateqRate.setDescription('The maximum data rate allocated to this rate queue, in decimal thousands of bits per second.')
grAtmV1RateqState = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1RateqState.setReference('netgrit/grime.h: CARD_IF_ATM_RATEQ_STATE')
if mibBuilder.loadTexts: grAtmV1RateqState.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1RateqState.setDescription('The operational state of the rate queue.')
grAtmV1NetToVcTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 4), )
if mibBuilder.loadTexts: grAtmV1NetToVcTable.setReference('netgrit/grime.h: CARD_IF_ATM_ARP_TABLE')
if mibBuilder.loadTexts: grAtmV1NetToVcTable.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1NetToVcTable.setDescription('A list of PortCard ATM IP address to virtual channel entries.')
grAtmV1NetToVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 4, 1), ).setIndexNames((0, "NETSTAR-MIB", "grAtmV1NetToVcIfIndex"), (0, "NETSTAR-MIB", "grAtmV1NetToVcNetAddress"))
if mibBuilder.loadTexts: grAtmV1NetToVcEntry.setReference('netgrit/grime.h: CARD_IF_ATM_ARP_ENTRY')
if mibBuilder.loadTexts: grAtmV1NetToVcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1NetToVcEntry.setDescription('A grAtmV1NetToVc entry representing a mapping from an IP address to an ATM virtual channel.')
grAtmV1NetToVcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1NetToVcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1NetToVcIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
grAtmV1NetToVcNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1NetToVcNetAddress.setReference('netgrit/grime.h: CARD_IF_ATM_ARP_IP')
if mibBuilder.loadTexts: grAtmV1NetToVcNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1NetToVcNetAddress.setDescription('The IpAddress corresponding to the virtual channel.')
grAtmV1NetToVcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1NetToVcVpi.setReference('netgrit/grime.h: CARD_IF_ATM_ARP_VPI')
if mibBuilder.loadTexts: grAtmV1NetToVcVpi.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1NetToVcVpi.setDescription('The Virtual Path Identifier (VCI) of this virtual channel.')
grAtmV1NetToVcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1NetToVcVci.setReference('netgrit/grime.h: CARD_IF_ATM_ARP_VCI')
if mibBuilder.loadTexts: grAtmV1NetToVcVci.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1NetToVcVci.setDescription('The Virtual Channel Identifier (VCI) of this virtual channel.')
grAtmV1NetToVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: grAtmV1NetToVcState.setReference('netgrit/grime.h: CARD_IF_ATM_ARP_STATE')
if mibBuilder.loadTexts: grAtmV1NetToVcState.setStatus('mandatory')
if mibBuilder.loadTexts: grAtmV1NetToVcState.setDescription('The operational state of this entry.')
grThreshPollTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 6, 3), )
if mibBuilder.loadTexts: grThreshPollTable.setStatus('mandatory')
if mibBuilder.loadTexts: grThreshPollTable.setDescription('A list of current and previous threshpoll counter entries.')
grThreshPollEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grThreshPollEntry.setStatus('mandatory')
if mibBuilder.loadTexts: grThreshPollEntry.setDescription('A grThreshpoll entry containing current and previous threshold counters.')
grTPCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 6, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grTPCurrentCount.setStatus('mandatory')
if mibBuilder.loadTexts: grTPCurrentCount.setDescription('The current value of a counter being polled by the threshold poller.')
grTPPreviousCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grTPPreviousCount.setStatus('mandatory')
if mibBuilder.loadTexts: grTPPreviousCount.setDescription('The previous value of a counter being polled by the threshold poller.')
grTPCurrentCountUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grTPCurrentCountUpper.setStatus('mandatory')
if mibBuilder.loadTexts: grTPCurrentCountUpper.setDescription('The upper 32 bits of the current value of a 64 bit counter being polled by the threshold poller.')
grTPPreviousCountUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grTPPreviousCountUpper.setStatus('mandatory')
if mibBuilder.loadTexts: grTPPreviousCountUpper.setDescription('The upper 32 bits of the previous value of a 64 bit counter being polled by the threshold poller.')
grPingLogTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 7, 1), )
if mibBuilder.loadTexts: grPingLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: grPingLogTable.setDescription('A list of current and previous threshpoll counter entries.')
grPingLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grPingLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: grPingLogEntry.setDescription('A grThreshpoll entry containing current and previous threshold counters.')
grPLDevDownMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grPLDevDownMsg.setStatus('mandatory')
if mibBuilder.loadTexts: grPLDevDownMsg.setDescription('The message sent when pinglog detects a device down.')
coldStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,0))
if mibBuilder.loadTexts: coldStart.setDescription("A coldStart trap signifies that the sending protocol entity is reinitializing itself such that the agent's configuration or the protocol entity implementation may be altered.")
warmStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,1))
if mibBuilder.loadTexts: warmStart.setDescription('A warmStart trap signifies that the sending protocol entity is reinitializing itself such that neither the agent configuration nor the protocol entity implementation is altered.')
linkDown = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: linkDown.setDescription("A linkDown trap signifies that the sending protocol entity recognizes a failure in one of the communication links represented in the agent's configuration.")
linkUp = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: linkUp.setDescription("A linkUp trap signifies that the sending protocol entity recognizes that one of the communication links represented in the agent's configuration has come up.")
authenticationFailure = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,4))
if mibBuilder.loadTexts: authenticationFailure.setDescription('An authenticationFailure trap signifies that the sending protocol entity is the addressee of a protocol message that is not properly authenticated. While implementations of the SNMP must be capable of generating this trap, they must also be capable of suppressing the emission of such traps via an implementation- specific mechanism.')
grPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,1)).setObjects(("NETSTAR-MIB", "grPowerSupplyStatus"))
if mibBuilder.loadTexts: grPowerSupplyFailure.setDescription('The trap that is issued when one of the power supplies is removed from the system or fails in in some way.')
grOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,2)).setObjects(("NETSTAR-MIB", "grTempStatus"))
if mibBuilder.loadTexts: grOverTemp.setDescription('The trap that is issued when the system temperature exceeds the maximum temperature threshold.')
grFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,3)).setObjects(("NETSTAR-MIB", "grFanStatus"))
if mibBuilder.loadTexts: grFanFailure.setDescription("The trap that is issued when any fan's speed falls below the minimum threshold value or the fan tray is removed from the system.")
grCardDown = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,4)).setObjects(("NETSTAR-MIB", "grPortCardSlot"), ("NETSTAR-MIB", "grPortCardCurrentState"))
if mibBuilder.loadTexts: grCardDown.setDescription("The trap that is issued when the Port Card's state changes from running(7) to any other state.")
grCardUp = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,5)).setObjects(("NETSTAR-MIB", "grPortCardSlot"))
if mibBuilder.loadTexts: grCardUp.setDescription("The trap that is issued when the Port Card's state changes to running(7) to any other state.")
grSONETLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,6)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETLossOfFrame.setDescription('The trap issued when the SONET receive hardware detects a Loss Of Frame Failure (LOF).')
grSONETLossOfSignal = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,7)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETLossOfSignal.setDescription('The trap issued when the SONET receive hardware detects Loss of Signal (LOS).')
grSONETSTSPathLossOfPointer = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,8)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETSTSPathLossOfPointer.setDescription('The trap issued when the SONET receive hardware detects STS-Path Lossof Pointer (LOP).')
grSONETVTLossOfPointer = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,9)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETVTLossOfPointer.setDescription('The trap issued when the SONET receive hardware detects VT Loss of Pointer (VT LOP).')
grSONETLineAlarmIndicationSignal = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,10)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETLineAlarmIndicationSignal.setDescription('The trap issued when the SONET receive hardware detects a Line Alarm Indication Signal (L-AIS).')
grSONETSTSPathAlarmIndicationSignal = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,11)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETSTSPathAlarmIndicationSignal.setDescription('The trap issued when the SONET receive hardware detects an STS-Path Alarm Indication Signal (AIS).')
grSONETVTPathAlarmIndicationSignal = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,12)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETVTPathAlarmIndicationSignal.setDescription('The trap issued when the SONET receive hardware detects a VT-Path Alarm Indication Signal (VT-Path AIS).')
grSONETLineRemoteDefectIndication = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,13)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETLineRemoteDefectIndication.setDescription('The trap issued when the SONET receive hardware detects a Line Remote Defect Indication (RDI, also known as Line FERF).')
grSONETVTPathRemoteDefectIndication = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,14)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETVTPathRemoteDefectIndication.setDescription('The trap issued when the SONET receive hardware detects a VT-Path Remote Defect Indication (VT Path RDI, also known as VT Path FERF).')
grSONETTCLossOfCellDelineation = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,15)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: grSONETTCLossOfCellDelineation.setDescription('The trap issued when the SONET receive hardware detects Loss of Cell Delineation.')
grAtmPVCUp = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,16)).setObjects(("IF-MIB", "ifIndex"), ("NETSTAR-MIB", "grAtmV1VcVpi"), ("NETSTAR-MIB", "grAtmV1VcVci"))
if mibBuilder.loadTexts: grAtmPVCUp.setDescription('The trap issued when an ATM Permanent Virtual circuit is enabled')
grAtmPVCDown = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,17)).setObjects(("IF-MIB", "ifIndex"), ("NETSTAR-MIB", "grAtmV1VcVpi"), ("NETSTAR-MIB", "grAtmV1VcVci"))
if mibBuilder.loadTexts: grAtmPVCDown.setDescription('The trap issued when an ATM Permanent Virtual circuit is disabled')
grInterfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,18)).setObjects(("NETSTAR-MIB", "grPLDevDownMsg"))
if mibBuilder.loadTexts: grInterfaceDown.setDescription('The trap issued when an interface is not responding to pings.')
grIfInOctetsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,19)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfInOctetsHigh.setDescription('The trap issued when ifInOctets is greater than the configured threshold for that interface.')
grIfInOctetsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,20)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfInOctetsLow.setDescription('The trap issued when ifInOctets is less than the configured threshold for that interface.')
grIfOutOctetsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,21)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfOutOctetsHigh.setDescription('The trap issued when ifOutOctets is greater than the configured threshold for that interface.')
grIfOutOctetsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,22)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfOutOctetsLow.setDescription('The trap issued when ifOutOctets is less than the configured threshold for that interface.')
grIfInUcastPktsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,23)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfInUcastPktsHigh.setDescription('The trap issued when ifInUcastPkts is greater than the configured threshold for that interface.')
grIfInUcastPktsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,24)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfInUcastPktsLow.setDescription('The trap issued when ifInUcastPkts is less than the configured threshold for that interface.')
grIfOutUcastPktsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,25)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfOutUcastPktsHigh.setDescription('The trap issued when ifOutUcastPkts is greater than the configured threshold for that interface.')
grIfOutUcastPktsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,26)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfOutUcastPktsLow.setDescription('The trap issued when ifOutUcastPkts is less than the configured threshold for that interface.')
grIfInErrorsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,27)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfInErrorsHigh.setDescription('The trap issued when ifInErrors is greater than the configured threshold for that interface.')
grIfInErrorsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,28)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfInErrorsLow.setDescription('The trap issued when ifInErrors is less than the configured threshold for that interface.')
grIfOutErrorsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,29)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfOutErrorsHigh.setDescription('The trap issued when ifOutErrors is greater than the configured threshold for that interface.')
grIfOutErrorsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,30)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfOutErrorsLow.setDescription('The trap issued when ifOutErrors is less than the configured threshold for that interface.')
grIfInDiscardsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,31)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfInDiscardsHigh.setDescription('The trap issued when ifInDiscards is greater than the configured threshold for that interface.')
grIfInDiscardsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,32)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfInDiscardsLow.setDescription('The trap issued when ifInDiscards is less than the configured threshold for that interface.')
grIfOutDiscardsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,33)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfOutDiscardsHigh.setDescription('The trap issued when ifOutDiscards is greater than the configured threshold for that interface.')
grIfOutDiscardsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,34)).setObjects(("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfOutDiscardsLow.setDescription('The trap issued when ifOutDiscards is less than the configured threshold for that interface.')
grGatedDown = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,35))
if mibBuilder.loadTexts: grGatedDown.setDescription('The trap issued when the threshold poller detects that gated is not running.')
grSnmpReset = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,36))
if mibBuilder.loadTexts: grSnmpReset.setDescription('The trap issued when threshpoll detects that the snmp agent has restarted.')
grIfHCInOctetsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,37)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCInOctetsHigh.setDescription('The trap issued when ifHCInOctets is greater than the configured threshold for that interface.')
grIfHCInOctetsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,38)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCInOctetsLow.setDescription('The trap issued when ifHCInOctets is less than the configured threshold for that interface.')
grIfHCInUcastPktsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,39)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCInUcastPktsHigh.setDescription('The trap issued when ifHCInUcastPkts is greater than the configured threshold for that interface.')
grIfHCInUcastPktsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,40)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCInUcastPktsLow.setDescription('The trap issued when ifHCInUcastPkts is less than the configured threshold for that interface.')
grIfHCInMulticastPktsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,41)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCInMulticastPktsHigh.setDescription('The trap issued when ifHCInMulticastPkts is greater than the configured threshold for that interface.')
grIfHCInMulticastPktsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,42)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCInMulticastPktsLow.setDescription('The trap issued when ifHCInMulticastPkts is less than the configured threshold for that interface.')
grIfHCInBroadcastPktsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,43)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCInBroadcastPktsHigh.setDescription('The trap issued when ifHCInBroadcastPkts is greater than the configured threshold for that interface.')
grIfHCInBroadcastPktsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,44)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCInBroadcastPktsLow.setDescription('The trap issued when ifHCInBroadcastPkts is less than the configured threshold for that interface.')
grIfHCOutOctetsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,45)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCOutOctetsHigh.setDescription('The trap issued when ifHCOutOctets is greater than the configured threshold for that interface.')
grIfHCOutOctetsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,46)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCOutOctetsLow.setDescription('The trap issued when ifHCOutOctets is less than the configured threshold for that interface.')
grIfHCOutUcastPktsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,47)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCOutUcastPktsHigh.setDescription('The trap issued when ifHCOutUcastPkts is greater than the configured threshold for that interface.')
grIfHCOutUcastPktsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,48)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCOutUcastPktsLow.setDescription('The trap issued when ifHCOutUcastPkts is less than the configured threshold for that interface.')
grIfHCOutMulticastPktsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,49)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCOutMulticastPktsHigh.setDescription('The trap issued when ifHCOutMulticastPkts is greater than the configured threshold for that interface.')
grIfHCOutMulticastPktsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,50)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCOutMulticastPktsLow.setDescription('The trap issued when ifHCOutMulticastPkts is less than the configured threshold for that interface.')
grIfHCOutBroadcastPktsHigh = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,51)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCOutBroadcastPktsHigh.setDescription('The trap issued when ifHCOutBroadcastPkts is greater than the configured threshold for that interface.')
grIfHCOutBroadcastPktsLow = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,52)).setObjects(("NETSTAR-MIB", "grTPPreviousCountUpper"), ("NETSTAR-MIB", "grTPPreviousCount"), ("NETSTAR-MIB", "grTPCurrentCountUpper"), ("NETSTAR-MIB", "grTPCurrentCount"))
if mibBuilder.loadTexts: grIfHCOutBroadcastPktsLow.setDescription('The trap issued when ifHCOutBroadcastPkts is less than the configured threshold for that interface.')
grBackupRestoreMessages = NotificationType((1, 3, 6, 1, 4, 1, 1080, 1, 1) + (0,53)).setObjects(("NETSTAR-MIB", "grStatusMsg"))
if mibBuilder.loadTexts: grBackupRestoreMessages.setDescription('This trap is issued after a Backup/Compare/Restore operation has completed.')
mibBuilder.exportSymbols("NETSTAR-MIB", grIfOutUcastPktsHigh=grIfOutUcastPktsHigh, grAtmV1VcVpi=grAtmV1VcVpi, dynamicRoutingDaemon=dynamicRoutingDaemon, grAtmV1RateqTable=grAtmV1RateqTable, grIfHCInOctetsHigh=grIfHCInOctetsHigh, grPLDevDownMsg=grPLDevDownMsg, grChassis=grChassis, grIfOutDiscardsHigh=grIfOutDiscardsHigh, grAtmV1RateqIndex=grAtmV1RateqIndex, grSONETVTPathAlarmIndicationSignal=grSONETVTPathAlarmIndicationSignal, frameRelayDaemon=frameRelayDaemon, grLastOperation=grLastOperation, gigarouter=gigarouter, netstar_daemons=netstar_daemons, authenticationFailure=authenticationFailure, grIfOutErrorsLow=grIfOutErrorsLow, grBackupRestoreMessages=grBackupRestoreMessages, grIfHCOutUcastPktsHigh=grIfHCOutUcastPktsHigh, grIfInOctetsHigh=grIfInOctetsHigh, grIfHCOutBroadcastPktsLow=grIfHCOutBroadcastPktsLow, atmpDaemon=atmpDaemon, grSONETLineRemoteDefectIndication=grSONETLineRemoteDefectIndication, warmStart=warmStart, grGatedStatus=grGatedStatus, grIfOutErrorsHigh=grIfOutErrorsHigh, grAtmV1VcVci=grAtmV1VcVci, grOverTemp=grOverTemp, grBackup=grBackup, grAtmV1=grAtmV1, grSONETSTSPathAlarmIndicationSignal=grSONETSTSPathAlarmIndicationSignal, grIfHCInMulticastPktsHigh=grIfHCInMulticastPktsHigh, grFileName=grFileName, grThreshPollTable=grThreshPollTable, grPortCardEntry=grPortCardEntry, grAtmV1VcDestVpi=grAtmV1VcDestVpi, grAtmV1VcType=grAtmV1VcType, grSONETVTLossOfPointer=grSONETVTLossOfPointer, grAtmV1RateqRate=grAtmV1RateqRate, grSONETLossOfSignal=grSONETLossOfSignal, grAtmV1NetToVcVci=grAtmV1NetToVcVci, grAtmV1VcIfIndex=grAtmV1VcIfIndex, grIfInErrorsLow=grIfInErrorsLow, grFTPPassword=grFTPPassword, netstar=netstar, grAtmV1VcDestIfIndex=grAtmV1VcDestIfIndex, grSONETSTSPathLossOfPointer=grSONETSTSPathLossOfPointer, grAtmPVCUp=grAtmPVCUp, grIfInDiscardsLow=grIfInDiscardsLow, grServerName=grServerName, mib2Daemon=mib2Daemon, grPortCardCurrentState=grPortCardCurrentState, mibmgrDaemon=mibmgrDaemon, grSnmpReset=grSnmpReset, grf=grf, grIfHCOutMulticastPktsHigh=grIfHCOutMulticastPktsHigh, grAtmV1NetToVcState=grAtmV1NetToVcState, grAtmV1VcRateq=grAtmV1VcRateq, grFanFailure=grFanFailure, linkUp=linkUp, grIfHCOutOctetsHigh=grIfHCOutOctetsHigh, grRestore=grRestore, grPingLog=grPingLog, grCompare=grCompare, grPingLogTable=grPingLogTable, coldStart=coldStart, grAtmUNI=grAtmUNI, grAtmV1NetToVcVpi=grAtmV1NetToVcVpi, grThreshPollEntry=grThreshPollEntry, grSONETVTPathRemoteDefectIndication=grSONETVTPathRemoteDefectIndication, grFTPUserName=grFTPUserName, grAtmp=grAtmp, grAtmV1VcAal=grAtmV1VcAal, grTransportMethod=grTransportMethod, grIfInOctetsLow=grIfInOctetsLow, grTPCurrentCount=grTPCurrentCount, grPowerSupplyFailure=grPowerSupplyFailure, grPortCardSlot=grPortCardSlot, grCardUp=grCardUp, grIfInUcastPktsLow=grIfInUcastPktsLow, grIfHCInBroadcastPktsLow=grIfHCInBroadcastPktsLow, grAtmV1NetToVcIfIndex=grAtmV1NetToVcIfIndex, grAtmPVCDown=grAtmPVCDown, grf1600=grf1600, grAtmV1NetToVcTable=grAtmV1NetToVcTable, grIfHCOutUcastPktsLow=grIfHCOutUcastPktsLow, grThreshPoll=grThreshPoll, grPortCardTable=grPortCardTable, grTPPreviousCountUpper=grTPPreviousCountUpper, grIfHCOutMulticastPktsLow=grIfHCOutMulticastPktsLow, grCardDown=grCardDown, grTPCurrentCountUpper=grTPCurrentCountUpper, grTPPreviousCount=grTPPreviousCount, grAtmV1RateqEntry=grAtmV1RateqEntry, grIfHCInMulticastPktsLow=grIfHCInMulticastPktsLow, grIfHCInUcastPktsHigh=grIfHCInUcastPktsHigh, grSONETLineAlarmIndicationSignal=grSONETLineAlarmIndicationSignal, grAtmV1VcEntry=grAtmV1VcEntry, grAtmV1RateqState=grAtmV1RateqState, grFDDI4=grFDDI4, grPortCardHWtype=grPortCardHWtype, grStatusMsg=grStatusMsg, grIfHCInUcastPktsLow=grIfHCInUcastPktsLow, grAtmV1NetToVcNetAddress=grAtmV1NetToVcNetAddress, gr2=gr2, grIfOutUcastPktsLow=grIfOutUcastPktsLow, grHIPPI=grHIPPI, grIfHCOutBroadcastPktsHigh=grIfHCOutBroadcastPktsHigh, grGatedDown=grGatedDown, grIfOutOctetsHigh=grIfOutOctetsHigh, grPingLogEntry=grPingLogEntry, grAtmV1RateqIfIndex=grAtmV1RateqIfIndex, grf400=grf400, grAtmV1NetToVcEntry=grAtmV1NetToVcEntry, grAtmV1VcTable=grAtmV1VcTable, grIfOutDiscardsLow=grIfOutDiscardsLow, linkDown=linkDown, grTempStatus=grTempStatus, grIfHCOutOctetsLow=grIfHCOutOctetsLow, grIfHCInOctetsLow=grIfHCInOctetsLow, grIfInDiscardsHigh=grIfInDiscardsHigh, netstar_products=netstar_products, grFanStatus=grFanStatus, grIfHCInBroadcastPktsHigh=grIfHCInBroadcastPktsHigh, grAtmV1VcDestVci=grAtmV1VcDestVci, grPowerSupplyStatus=grPowerSupplyStatus, clusterswitch=clusterswitch, grIfOutOctetsLow=grIfOutOctetsLow, grIfInErrorsHigh=grIfInErrorsHigh, grIfInUcastPktsHigh=grIfInUcastPktsHigh, grAtmV1VcProtocol=grAtmV1VcProtocol, grSONETLossOfFrame=grSONETLossOfFrame, grSONETTCLossOfCellDelineation=grSONETTCLossOfCellDelineation, grPortCardNumber=grPortCardNumber, grInterfaceDown=grInterfaceDown)
