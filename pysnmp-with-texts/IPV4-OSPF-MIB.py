#
# PySNMP MIB module IPV4-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPV4-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:56:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
apIpv4Ospf, = mibBuilder.importSymbols("APENT-MIB", "apIpv4Ospf")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, MibIdentifier, IpAddress, Bits, Counter32, Gauge32, ObjectIdentity, Counter64, Unsigned32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "MibIdentifier", "IpAddress", "Bits", "Counter32", "Gauge32", "ObjectIdentity", "Counter64", "Unsigned32", "NotificationType", "iso")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
apIpv4OspfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 1))
if mibBuilder.loadTexts: apIpv4OspfMib.setLastUpdated('9805112000Z')
if mibBuilder.loadTexts: apIpv4OspfMib.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: apIpv4OspfMib.setContactInfo('Postal: ArrowPoint Communications Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978-206-3000 option 1 E-Mail: support@arrowpoint.com')
if mibBuilder.loadTexts: apIpv4OspfMib.setDescription('This MIB module describes the ArrowPoint enterprise MIB support for the Routing Information Protocol')
apIpv4OspfRedistributeLocal = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfRedistributeLocal.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfRedistributeLocal.setDescription('If enabled, local (direct) routes will be advertised by OSPF.')
apIpv4OspfLocalType = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aseType1", 1), ("aseType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfLocalType.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfLocalType.setDescription('If local routes are advertised by OSPF, this is the ASE type to use when advertising the routes.')
apIpv4OspfLocalMetric = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfLocalMetric.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfLocalMetric.setDescription('If local routes are advertised by OSPF, this is the metric to use when advertising the routes.')
apIpv4OspfLocalTag = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfLocalTag.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfLocalTag.setDescription('If local routes are advertised by OSPF, this is the tag value to use when advertising the routes.')
apIpv4OspfRedistributeStatic = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfRedistributeStatic.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfRedistributeStatic.setDescription('If enabled, static routes will be advertised by OSPF.')
apIpv4OspfStaticType = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aseType1", 1), ("aseType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfStaticType.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfStaticType.setDescription('If static routes are advertised by OSPF, this is the ASE type to use when advertising the routes.')
apIpv4OspfStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfStaticMetric.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfStaticMetric.setDescription('If static routes are advertised by OSPF, this is the metric to use when advertising the routes.')
apIpv4OspfStaticTag = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfStaticTag.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfStaticTag.setDescription('If static routes are advertised by OSPF, this is the tag value to use when advertising the routes.')
apIpv4OspfRedistributeRip = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfRedistributeRip.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfRedistributeRip.setDescription('If enabled, RIP routes will be advertised by OSPF.')
apIpv4OspfRipType = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aseType1", 1), ("aseType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfRipType.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfRipType.setDescription('If RIP routes are advertised by OSPF, this is the ASE type to use when advertising the routes.')
apIpv4OspfRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfRipMetric.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfRipMetric.setDescription('If RIP routes are advertised by OSPF, this is the metric to use when advertising the routes. If zero is specified, the RIP metric will be used.')
apIpv4OspfRipTag = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfRipTag.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfRipTag.setDescription('If RIP routes are advertised by OSPF, this is the tag value to use when advertising the routes.')
apIpv4OspfOriginateDefault = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfOriginateDefault.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfOriginateDefault.setDescription('If enabled, an ASE will be generated for the default route.')
apIpv4OspfDefaultType = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aseType1", 1), ("aseType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfDefaultType.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfDefaultType.setDescription('If a default ASE is originated by OSPF, this is the ASE type to use when advertising the route.')
apIpv4OspfDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfDefaultMetric.setDescription('If a default ASE is originated by OSPF, this is the metric to use when advertising the route.')
apIpv4OspfDefaultTag = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfDefaultTag.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfDefaultTag.setDescription('If a default ASE is originated by OSPF, this is the tag value to use when advertising the route.')
apIpv4OspfRedistributeFirewall = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfRedistributeFirewall.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfRedistributeFirewall.setDescription('If enabled, firewall routes will be advertised by OSPF.')
apIpv4OspfFirewallType = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aseType1", 1), ("aseType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfFirewallType.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfFirewallType.setDescription('If firewall routes are advertised by OSPF, this is the ASE type to use when advertising the routes.')
apIpv4OspfFirewallMetric = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfFirewallMetric.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfFirewallMetric.setDescription('If firewall routes are advertised by OSPF, this is the metric to use when advertising the routes.')
apIpv4OspfFirewallTag = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfFirewallTag.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfFirewallTag.setDescription('If firewall routes are advertised by OSPF, this is the tag value to use when advertising the routes.')
apIpv4OspfAdvRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 22), )
if mibBuilder.loadTexts: apIpv4OspfAdvRouteTable.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfAdvRouteTable.setDescription('A list of routes that are advertised via all OSPF interfaces.')
apIpv4OspfAdvRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 22, 1), ).setIndexNames((0, "IPV4-OSPF-MIB", "apIpv4OspfAdvRoutePrefix"), (0, "IPV4-OSPF-MIB", "apIpv4OspfAdvRoutePrefixLen"))
if mibBuilder.loadTexts: apIpv4OspfAdvRouteEntry.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfAdvRouteEntry.setDescription('A single route to advertise via all OSPF interfaces.')
apIpv4OspfAdvRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 22, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4OspfAdvRoutePrefix.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfAdvRoutePrefix.setDescription('The route prefix to be advertised.')
apIpv4OspfAdvRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4OspfAdvRoutePrefixLen.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfAdvRoutePrefixLen.setDescription('The network prefix length associated with this route.')
apIpv4OspfAdvRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aseType1", 1), ("aseType2", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4OspfAdvRouteType.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfAdvRouteType.setDescription('this is the ASE type to use when advertising this route.')
apIpv4OspfAdvRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4OspfAdvRouteMetric.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfAdvRouteMetric.setDescription('The metric to use when advertising this route.')
apIpv4OspfAdvRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 22, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4OspfAdvRouteTag.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfAdvRouteTag.setDescription('this is the tag value to use when advertising this route.')
apIpv4OspfAdvRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 22, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4OspfAdvRouteStatus.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfAdvRouteStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
apIpv4OspfIfAdvRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23), )
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteTable.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteTable.setDescription('A list of routes that are advertised via a specific OSPF interface.')
apIpv4OspfIfAdvRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23, 1), ).setIndexNames((0, "IPV4-OSPF-MIB", "apIpv4OspfIfAdvRouteAddress"), (0, "IPV4-OSPF-MIB", "apIpv4OspfIfAdvRoutePrefix"), (0, "IPV4-OSPF-MIB", "apIpv4OspfIfAdvRoutePrefixLen"))
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteEntry.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteEntry.setDescription('A single route to advertise via a specific OSPF interface.')
apIpv4OspfIfAdvRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteAddress.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteAddress.setDescription('The address of the OSPF interface. If this is a valid unicast IP address, the interface is numbered. Otherwise, it indicates the ifIndex of an unnumbered interface.')
apIpv4OspfIfAdvRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4OspfIfAdvRoutePrefix.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRoutePrefix.setDescription('The route prefix to be advertised.')
apIpv4OspfIfAdvRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpv4OspfIfAdvRoutePrefixLen.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRoutePrefixLen.setDescription('The network prefix length associated with this route.')
apIpv4OspfIfAdvRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aseType1", 1), ("aseType2", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteType.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteType.setDescription('this is the ASE type to use when advertising this route.')
apIpv4OspfIfAdvRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteMetric.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteMetric.setDescription('The metric to use when advertising this route.')
apIpv4OspfIfAdvRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteTag.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteTag.setDescription('this is the tag value to use when advertising this route.')
apIpv4OspfIfAdvRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 23, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteStatus.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfIfAdvRouteStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
apIpv4OspfEqualCostRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 9, 3, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpv4OspfEqualCostRoutes.setStatus('current')
if mibBuilder.loadTexts: apIpv4OspfEqualCostRoutes.setDescription('The maximum number of equal-cost routes OSPF can use.')
mibBuilder.exportSymbols("IPV4-OSPF-MIB", apIpv4OspfStaticMetric=apIpv4OspfStaticMetric, apIpv4OspfRedistributeFirewall=apIpv4OspfRedistributeFirewall, apIpv4OspfAdvRouteType=apIpv4OspfAdvRouteType, apIpv4OspfLocalTag=apIpv4OspfLocalTag, apIpv4OspfRedistributeStatic=apIpv4OspfRedistributeStatic, apIpv4OspfIfAdvRouteType=apIpv4OspfIfAdvRouteType, PYSNMP_MODULE_ID=apIpv4OspfMib, apIpv4OspfDefaultMetric=apIpv4OspfDefaultMetric, apIpv4OspfFirewallType=apIpv4OspfFirewallType, apIpv4OspfIfAdvRouteEntry=apIpv4OspfIfAdvRouteEntry, apIpv4OspfRipTag=apIpv4OspfRipTag, apIpv4OspfLocalMetric=apIpv4OspfLocalMetric, apIpv4OspfAdvRouteEntry=apIpv4OspfAdvRouteEntry, apIpv4OspfAdvRouteMetric=apIpv4OspfAdvRouteMetric, apIpv4OspfIfAdvRouteAddress=apIpv4OspfIfAdvRouteAddress, apIpv4OspfStaticTag=apIpv4OspfStaticTag, apIpv4OspfIfAdvRouteMetric=apIpv4OspfIfAdvRouteMetric, apIpv4OspfIfAdvRoutePrefix=apIpv4OspfIfAdvRoutePrefix, apIpv4OspfIfAdvRouteStatus=apIpv4OspfIfAdvRouteStatus, apIpv4OspfRipMetric=apIpv4OspfRipMetric, apIpv4OspfAdvRouteTable=apIpv4OspfAdvRouteTable, apIpv4OspfRedistributeRip=apIpv4OspfRedistributeRip, apIpv4OspfIfAdvRoutePrefixLen=apIpv4OspfIfAdvRoutePrefixLen, apIpv4OspfIfAdvRouteTag=apIpv4OspfIfAdvRouteTag, apIpv4OspfLocalType=apIpv4OspfLocalType, apIpv4OspfMib=apIpv4OspfMib, apIpv4OspfStaticType=apIpv4OspfStaticType, apIpv4OspfOriginateDefault=apIpv4OspfOriginateDefault, apIpv4OspfDefaultType=apIpv4OspfDefaultType, apIpv4OspfFirewallTag=apIpv4OspfFirewallTag, apIpv4OspfAdvRoutePrefix=apIpv4OspfAdvRoutePrefix, apIpv4OspfRipType=apIpv4OspfRipType, apIpv4OspfIfAdvRouteTable=apIpv4OspfIfAdvRouteTable, apIpv4OspfDefaultTag=apIpv4OspfDefaultTag, apIpv4OspfEqualCostRoutes=apIpv4OspfEqualCostRoutes, apIpv4OspfAdvRouteTag=apIpv4OspfAdvRouteTag, apIpv4OspfFirewallMetric=apIpv4OspfFirewallMetric, apIpv4OspfAdvRoutePrefixLen=apIpv4OspfAdvRoutePrefixLen, apIpv4OspfRedistributeLocal=apIpv4OspfRedistributeLocal, apIpv4OspfAdvRouteStatus=apIpv4OspfAdvRouteStatus)
