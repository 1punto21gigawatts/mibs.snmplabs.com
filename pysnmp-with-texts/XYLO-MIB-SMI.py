#
# PySNMP MIB module XYLO-MIB-SMI (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLO-MIB-SMI
# Produced by pysmi-0.3.4 at Wed May  1 15:45:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, MibIdentifier, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Integer32, Bits, Counter32, Counter64, NotificationType, Unsigned32, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "MibIdentifier", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Integer32", "Bits", "Counter32", "Counter64", "NotificationType", "Unsigned32", "TimeTicks", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylogics = MibIdentifier((1, 3, 6, 1, 4, 1, 15))
prod = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1))
prodannex = MibScalar((1, 3, 6, 1, 4, 1, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodannex.setStatus('mandatory')
if mibBuilder.loadTexts: prodannex.setDescription('Product name.')
mibversion = MibScalar((1, 3, 6, 1, 4, 1, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibversion.setStatus('mandatory')
if mibBuilder.loadTexts: mibversion.setDescription('The current version of this private MIB. Currently, the returned value is the same as the software revision of the executing image.')
prodoid = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 1))
annexII = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 2))
annex3 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 3))
microanx = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 4))
microels = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 5))
csmim1 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 6))
ods = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 7))
bay5390 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 8))
csmim2 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 9))
annex2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 10))
microcs = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 11))
annex4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 12))
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 13))
csmim_t1 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 14)).setLabel("csmim-t1")
ra6100 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 15))
ra6300 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 16))
bay5391 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 17))
bay5393 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 18))
bay5399 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1, 3, 19))
annex = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2))
anxexperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 3))
racTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 100))
hw = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 1))
sw = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 2))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 3))
parallelport = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 4))
annexconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 5))
anxigmpconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 5, 105))
annexcmds = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 6))
annexlatstats = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 7))
interfacerip = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 8))
anxsyncports = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 9))
anxTrapHostInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 10))
anxt1 = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 11))
anxpri = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 12))
anxinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 13))
anxtunnelport = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 14))
anxgrestats = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 15))
callmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 16))
anxModem = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 100))
anxchascommon = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 101))
anxchas = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 102))
radiusClient = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 103))
anxgsystats = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 104))
anxccpstats = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 105))
radiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 103, 1))
radiusStats = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 103, 2))
racTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 100, 1))
wanTrapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 100, 1, 1))
modemTrapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 100, 1, 2))
callmgmtTrapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 100, 1, 3))
genericTrapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 100, 1, 4))
mibBuilder.exportSymbols("XYLO-MIB-SMI", xylogics=xylogics, anxigmpconfig=anxigmpconfig, a3Com=a3Com, modemTrapObj=modemTrapObj, microels=microels, genericTrapObj=genericTrapObj, anxccpstats=anxccpstats, anxsyncports=anxsyncports, prodannex=prodannex, racTraps=racTraps, interfacerip=interfacerip, csmim1=csmim1, anxinterface=anxinterface, anxTrapHostInfo=anxTrapHostInfo, csmim2=csmim2, callmgmt=callmgmt, anxpri=anxpri, mibversion=mibversion, bay5399=bay5399, anxchascommon=anxchascommon, annexlatstats=annexlatstats, radiusClient=radiusClient, csmim_t1=csmim_t1, ods=ods, racTrapObjects=racTrapObjects, parallelport=parallelport, microcs=microcs, anxtunnelport=anxtunnelport, microanx=microanx, wanTrapObj=wanTrapObj, bay5390=bay5390, ra6100=ra6100, bay5393=bay5393, annex2000=annex2000, bay5391=bay5391, callmgmtTrapObj=callmgmtTrapObj, prod=prod, anxchas=anxchas, anxgrestats=anxgrestats, annexconfig=annexconfig, prodoid=prodoid, sw=sw, annexII=annexII, unknown=unknown, radiusStats=radiusStats, ports=ports, annex4000=annex4000, anxgsystats=anxgsystats, annexcmds=annexcmds, anxModem=anxModem, anxt1=anxt1, annex=annex, radiusConfig=radiusConfig, annex3=annex3, ra6300=ra6300, hw=hw, anxexperimental=anxexperimental)
