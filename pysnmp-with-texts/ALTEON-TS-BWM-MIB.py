#
# PySNMP MIB module ALTEON-TS-BWM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-TS-BWM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "switch")
operCmds, stats, information = mibBuilder.importSymbols("ALTEON-TIGON-SWITCH-MIB", "operCmds", "stats", "information")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ModuleIdentity, NotificationType, Unsigned32, MibIdentifier, Counter32, ObjectIdentity, iso, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ModuleIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "Counter32", "ObjectIdentity", "iso", "TimeTicks", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bwm = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17))
bwmGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1))
bwmPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2))
bwmContractConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3))
bwmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15))
bwmCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgGenState.setDescription('The state of BWM in the current configuration block.')
bwmNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgGenState.setDescription('The state of BWM in the new configuration block.')
bwmCurCfgGenEnforcePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenEnforcePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgGenEnforcePolicy.setDescription('The state of BWM enforce policy in the current configuration block.')
bwmNewCfgGenEnforcePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenEnforcePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgGenEnforcePolicy.setDescription('The state of BWM enforce policy in the new configuration block.')
bwmCurCfgGenSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenSmtpUser.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgGenSmtpUser.setDescription('The SMTP user name for BWM in the current configuration block.')
bwmNewCfgGenSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenSmtpUser.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgGenSmtpUser.setDescription('The SMTP user name for BWM in the new configuration block.')
bwmPolicyTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmPolicyTableMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: bwmPolicyTableMaxEnt.setDescription('The maximum number of rows in the BWM policy configuration table.')
bwmCurCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2), )
if mibBuilder.loadTexts: bwmCurCfgPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyTable.setDescription('The table of BWM traffic policy configuration.')
bwmCurCfgPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-BWM-MIB", "bwmCurCfgPolicyIndx"))
if mibBuilder.loadTexts: bwmCurCfgPolicyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyTableEntry.setDescription('A row in the BWM traffic policy configuration table.')
bwmCurCfgPolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyIndx.setDescription('The index of the row in BWM traffic policy configurations table.')
bwmCurCfgPolicyTosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyTosIn.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyTosIn.setDescription('This is IP TOS in the profile state of the traffic policy')
bwmCurCfgPolicyTosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyTosOut.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyTosOut.setDescription('This is IP TOS out of profile state of the traffic policy')
bwmCurCfgPolicyHard = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyHard.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyHard.setDescription('The hard speed limit for the traffic policy.')
bwmCurCfgPolicySoft = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicySoft.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicySoft.setDescription('The soft speed limit for the traffic policy.')
bwmCurCfgPolicyResv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyResv.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyResv.setDescription('The reservation speed limit for the traffic policy.')
bwmCurCfgPolicyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyBuffer.setDescription('The buffer limit for the traffic policy.')
bwmNewCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3), )
if mibBuilder.loadTexts: bwmNewCfgPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyTable.setDescription('The table of BWM traffi policy configuration.')
bwmNewCfgPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1), ).setIndexNames((0, "ALTEON-TS-BWM-MIB", "bwmNewCfgPolicyIndx"))
if mibBuilder.loadTexts: bwmNewCfgPolicyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyTableEntry.setDescription('A row in the BWM traffic policy configuration table.')
bwmNewCfgPolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgPolicyIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyIndx.setDescription('The index of the row in BWM traffic policy configurations table.')
bwmNewCfgPolicyTosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyTosIn.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyTosIn.setDescription('This is IP TOS in the profile state of the traffic policy')
bwmNewCfgPolicyTosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyTosOut.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyTosOut.setDescription('This is IP TOS out of profile state of the traffic policy')
bwmNewCfgPolicyHard = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyHard.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyHard.setDescription('The hard speed limit for the traffic policy.')
bwmNewCfgPolicySoft = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicySoft.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicySoft.setDescription('The soft speed limit for the traffic policy.')
bwmNewCfgPolicyResv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyResv.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyResv.setDescription('The reservation speed limit for the traffic policy.')
bwmNewCfgPolicyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyBuffer.setDescription('The buffer limit for the traffic policy.')
bwmNewCfgPolicyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyDelete.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
bwmContractTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContractTableMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: bwmContractTableMaxEnt.setDescription('The maximum number of rows in the BWM contract configuration table.')
bwmCurCfgContractTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2), )
if mibBuilder.loadTexts: bwmCurCfgContractTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractTable.setDescription('The table of BWM traffic contract configuration.')
bwmCurCfgContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-BWM-MIB", "bwmCurCfgContractIndx"))
if mibBuilder.loadTexts: bwmCurCfgContractTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractTableEntry.setDescription('A row in the BWM traffic contract configuration table.')
bwmCurCfgContractIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractIndx.setDescription('The index of the row in BWM traffic contract configurations table.')
bwmCurCfgContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractName.setDescription('The traffic contract name.')
bwmCurCfgContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractState.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractState.setDescription('This is the state of the traffic contract.')
bwmCurCfgContractPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractPolicy.setDescription('This is policy number of the traffic contract')
bwmCurCfgContractPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractPrec.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractPrec.setDescription('The precedence value of the traffic contract')
bwmCurCfgContractUseTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractUseTos.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractUseTos.setDescription('Enable/disable the TOS overwrite of the traffic contract.')
bwmCurCfgContractHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractHistory.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractHistory.setDescription('Enable/disable save contract statistics on the TFTP server of the traffic contract.')
bwmNewCfgContractTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3), )
if mibBuilder.loadTexts: bwmNewCfgContractTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractTable.setDescription('The table of BWM traffic contract configuration.')
bwmNewCfgContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-BWM-MIB", "bwmNewCfgContractIndx"))
if mibBuilder.loadTexts: bwmNewCfgContractTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractTableEntry.setDescription('A row in the BWM traffic contract configuration table.')
bwmNewCfgContractIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContractIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractIndx.setDescription('The index of the row in BWM traffic contract configuration table.')
bwmNewCfgContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractName.setDescription('The traffic contract name.')
bwmNewCfgContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractState.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractState.setDescription('This is the state of the traffic contract.')
bwmNewCfgContractPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractPolicy.setDescription('This is policy number of the traffic contract')
bwmNewCfgContractDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractDelete.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
bwmNewCfgContractPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractPrec.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractPrec.setDescription('The precedence value of the traffic contract')
bwmNewCfgContractUseTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractUseTos.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractUseTos.setDescription('Enable/disable the TOS overwrite of the traffic contract.')
bwmNewCfgContractHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractHistory.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractHistory.setDescription('Enable/disable save contract statistics on the TFTP server of the traffic contract.')
bwmStatTcTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1), )
if mibBuilder.loadTexts: bwmStatTcTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcTable.setDescription('The table of Bandwidth Management Traffic Contract statistics.')
bwmStatTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1), ).setIndexNames((0, "ALTEON-TS-BWM-MIB", "bwmStatTcContractIndex"))
if mibBuilder.loadTexts: bwmStatTcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcEntry.setDescription('A row in the BWM traffic contract table.')
bwmStatTcContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatTcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcName.setDescription('The name of the traffic contract queue.')
bwmStatTcOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcOutoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcOutoct.setDescription('The total number of octets sent out from the traffic contract queue.')
bwmStatTcOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcOutdisoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatTcBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcBufferUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatTcBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatTcrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2), )
if mibBuilder.loadTexts: bwmStatTcrTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrTable.setDescription('The table of Bandwidth Management Traffic Contract Rate statistics.')
bwmStatTcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1), ).setIndexNames((0, "ALTEON-TS-BWM-MIB", "bwmStatTcrContractIndex"))
if mibBuilder.loadTexts: bwmStatTcrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrEntry.setDescription('A row in the BWM traffic contract rate table.')
bwmStatTcrContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatTcrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrName.setDescription('The name of the traffic contract queue.')
bwmStatTcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrRate.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrRate.setDescription('The rate of octets sent out from the traffic contract queue.')
bwmStatTcrOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrOutoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrOutoct.setDescription('The of octets sent out from the traffic contract queue.')
bwmStatTcrOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrOutdisoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatTcrBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrBufferUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatTcrBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatSpTcTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3), )
if mibBuilder.loadTexts: bwmStatSpTcTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcTable.setDescription('The table of BWM Switch Port Traffic Contract statistics.')
bwmStatSpTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1), ).setIndexNames((0, "ALTEON-TS-BWM-MIB", "bwmStatSpTcPortIndex"), (0, "ALTEON-TS-BWM-MIB", "bwmStatSpTcContractIndex"))
if mibBuilder.loadTexts: bwmStatSpTcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcEntry.setDescription('A row in the BWM SP traffic contract table.')
bwmStatSpTcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcPortIndex.setDescription('The Switch Port number for which the statistics apply.')
bwmStatSpTcContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatSpTcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcName.setDescription('The name of the traffic contract queue.')
bwmStatSpTcOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcOutoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcOutoct.setDescription('The total number of octets sent out from the traffic contract queue.')
bwmStatSpTcOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcOutdisoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatSpTcBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcBufferUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatSpTcBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatSpTcrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4), )
if mibBuilder.loadTexts: bwmStatSpTcrTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrTable.setDescription('The table of Bandwidth Management Switch Port Traffic Contract Rate statistics.')
bwmStatSpTcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1), ).setIndexNames((0, "ALTEON-TS-BWM-MIB", "bwmStatSpTcrPortIndex"), (0, "ALTEON-TS-BWM-MIB", "bwmStatSpTcrContractIndex"))
if mibBuilder.loadTexts: bwmStatSpTcrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrEntry.setDescription('A row in the BWM traffic contract rate table.')
bwmStatSpTcrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrPortIndex.setDescription('The switch port number for which the statistics apply.')
bwmStatSpTcrContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatSpTcrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrName.setDescription('The name of the traffic contract queue.')
bwmStatSpTcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrRate.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrRate.setDescription('The rate of octets sent out from the traffic contract queue.')
bwmStatSpTcrOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrOutoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrOutoct.setDescription('The of octets sent out from the traffic contract queue.')
bwmStatSpTcrOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrOutdisoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatSpTcrBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrBufferUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatSpTcrBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 2))
bwmOperSendSMTP = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("send", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmOperSendSMTP.setStatus('mandatory')
if mibBuilder.loadTexts: bwmOperSendSMTP.setDescription('This is an action object to send BWM history to SMTP server. other(1) is returned when read.')
mibBuilder.exportSymbols("ALTEON-TS-BWM-MIB", bwmCurCfgPolicyTableEntry=bwmCurCfgPolicyTableEntry, bwmCurCfgPolicyResv=bwmCurCfgPolicyResv, bwmContractTableMaxEnt=bwmContractTableMaxEnt, bwmCurCfgPolicySoft=bwmCurCfgPolicySoft, bwmStatTcrRate=bwmStatTcrRate, bwmStatTcOutoct=bwmStatTcOutoct, bwmStatTcTable=bwmStatTcTable, bwmNewCfgPolicyTosIn=bwmNewCfgPolicyTosIn, bwmNewCfgGenEnforcePolicy=bwmNewCfgGenEnforcePolicy, bwmCurCfgGenSmtpUser=bwmCurCfgGenSmtpUser, bwmCurCfgPolicyIndx=bwmCurCfgPolicyIndx, bwmOperSendSMTP=bwmOperSendSMTP, bwmNewCfgPolicySoft=bwmNewCfgPolicySoft, bwmNewCfgContractTableEntry=bwmNewCfgContractTableEntry, bwmStatTcrContractIndex=bwmStatTcrContractIndex, bwmStatTcContractIndex=bwmStatTcContractIndex, bwmStatSpTcEntry=bwmStatSpTcEntry, bwmContractConfig=bwmContractConfig, bwmStatTcrName=bwmStatTcrName, bwmCurCfgContractUseTos=bwmCurCfgContractUseTos, bwmCurCfgContractState=bwmCurCfgContractState, bwmStatTcrEntry=bwmStatTcrEntry, bwmNewCfgPolicyIndx=bwmNewCfgPolicyIndx, bwmNewCfgContractUseTos=bwmNewCfgContractUseTos, bwmCurCfgContractTableEntry=bwmCurCfgContractTableEntry, bwmStatSpTcrName=bwmStatSpTcrName, bwmStatTcrTable=bwmStatTcrTable, bwmCurCfgContractPrec=bwmCurCfgContractPrec, bwmNewCfgContractState=bwmNewCfgContractState, bwmNewCfgPolicyTableEntry=bwmNewCfgPolicyTableEntry, bwmNewCfgGenSmtpUser=bwmNewCfgGenSmtpUser, bwmStatSpTcrOutoct=bwmStatSpTcrOutoct, bwmCurCfgContractPolicy=bwmCurCfgContractPolicy, bwmStatTcBufferUsed=bwmStatTcBufferUsed, bwmStatSpTcBufferUsed=bwmStatSpTcBufferUsed, bwmPolicyConfig=bwmPolicyConfig, bwmStatTcOutdisoct=bwmStatTcOutdisoct, bwmNewCfgGenState=bwmNewCfgGenState, bwmStatSpTcOutoct=bwmStatSpTcOutoct, bwmStatSpTcrOutdisoct=bwmStatSpTcrOutdisoct, bwmStatSpTcrTable=bwmStatSpTcrTable, bwmStatTcName=bwmStatTcName, bwm=bwm, bwmStatSpTcrBufferUsed=bwmStatSpTcrBufferUsed, bwmNewCfgContractName=bwmNewCfgContractName, bwmNewCfgContractTable=bwmNewCfgContractTable, bwmNewCfgContractHistory=bwmNewCfgContractHistory, bwmStatTcrOutdisoct=bwmStatTcrOutdisoct, bwmStatSpTcOutdisoct=bwmStatSpTcOutdisoct, bwmCurCfgPolicyTosOut=bwmCurCfgPolicyTosOut, bwmCurCfgGenEnforcePolicy=bwmCurCfgGenEnforcePolicy, bwmGeneralConfig=bwmGeneralConfig, bwmNewCfgPolicyTable=bwmNewCfgPolicyTable, bwmNewCfgPolicyDelete=bwmNewCfgPolicyDelete, bwmCurCfgContractName=bwmCurCfgContractName, bwmStatTcEntry=bwmStatTcEntry, bwmStatSpTcrPortIndex=bwmStatSpTcrPortIndex, bwmStatSpTcrRate=bwmStatSpTcrRate, bwmStatSpTcrContractIndex=bwmStatSpTcrContractIndex, bwmStatTcBufferMax=bwmStatTcBufferMax, bwmStats=bwmStats, bwmNewCfgContractIndx=bwmNewCfgContractIndx, bwmCurCfgPolicyTosIn=bwmCurCfgPolicyTosIn, bwmStatSpTcBufferMax=bwmStatSpTcBufferMax, bwmOper=bwmOper, bwmCurCfgContractTable=bwmCurCfgContractTable, bwmStatSpTcName=bwmStatSpTcName, bwmNewCfgContractDelete=bwmNewCfgContractDelete, bwmStatSpTcPortIndex=bwmStatSpTcPortIndex, bwmCurCfgContractHistory=bwmCurCfgContractHistory, bwmCurCfgPolicyHard=bwmCurCfgPolicyHard, bwmCurCfgPolicyBuffer=bwmCurCfgPolicyBuffer, bwmCurCfgContractIndx=bwmCurCfgContractIndx, bwmStatSpTcContractIndex=bwmStatSpTcContractIndex, bwmNewCfgContractPolicy=bwmNewCfgContractPolicy, bwmCurCfgPolicyTable=bwmCurCfgPolicyTable, bwmStatTcrOutoct=bwmStatTcrOutoct, bwmNewCfgPolicyHard=bwmNewCfgPolicyHard, bwmStatTcrBufferMax=bwmStatTcrBufferMax, bwmStatSpTcTable=bwmStatSpTcTable, bwmNewCfgContractPrec=bwmNewCfgContractPrec, bwmStatSpTcrBufferMax=bwmStatSpTcrBufferMax, bwmNewCfgPolicyTosOut=bwmNewCfgPolicyTosOut, bwmPolicyTableMaxEnt=bwmPolicyTableMaxEnt, bwmStatSpTcrEntry=bwmStatSpTcrEntry, bwmCurCfgGenState=bwmCurCfgGenState, bwmNewCfgPolicyResv=bwmNewCfgPolicyResv, bwmNewCfgPolicyBuffer=bwmNewCfgPolicyBuffer, bwmStatTcrBufferUsed=bwmStatTcrBufferUsed)
