#
# PySNMP MIB module CISCO-SIBU-MANAGERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SIBU-MANAGERS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Unsigned32, Integer32, Gauge32, Counter32, MibIdentifier, TimeTicks, IpAddress, Bits, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "TimeTicks", "IpAddress", "Bits", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
ciscoSibuManagersMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 46))
ciscoSibuManagersMIB.setRevisions(('1998-10-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSibuManagersMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSibuManagersMIB.setLastUpdated('9810230000Z')
if mibBuilder.loadTexts: ciscoSibuManagersMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoSibuManagersMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-sibu@cisco.com')
if mibBuilder.loadTexts: ciscoSibuManagersMIB.setDescription('The MIB module that provides a simple configuration of management interfaces on managed devices.')
ciscoSibuManagersMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 1))
cmIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 1))
cmConsoleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 2))
cmSnmpSetManager = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 3))
cmSnmpTrapManager = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 4))
cmIpConfigMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("bootp", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpConfigMethod.setStatus('current')
if mibBuilder.loadTexts: cmIpConfigMethod.setDescription('Indicates the management IP address is got from user configuration or from Bootp. The default value is 1. This value of this object determines how the device obtains its IP address. If set to manual(1), the ip address is the value configured by the user by setting the value of ipConfigIpAddress. If set to bootp(2), the IP address is obtained via the BootStrap Protocol (BOOTP).')
cmIpConfigAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpConfigAddress.setStatus('current')
if mibBuilder.loadTexts: cmIpConfigAddress.setDescription("The device's administrative IP address. The device may automatically discover a value for this object using the BootStrap protocol (BOOTP). The object value is also duplicated in the MIB-II ipAddrTable. This object is writable only if the value of ipConfigMethod is set to manual(1). A write to this object will take effect immediately, replacing the previous address, if any. The default is 0.0.0.0, or no address.")
cmIpConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: cmIpConfigSubnetMask.setDescription("The device's administrative IP subnet mask. The device may automatically discover a value for this object using the BootStrap protocol (BOOTP). The object value is also duplicated in the MIB-II ipAddrTable. This object is writable only if the value of ipConfigMethod is set to manual(1). A write to this value will take effect immediately. The default value is 0.0.0.0, or no subnet mask.")
cmIpConfigDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIpConfigDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: cmIpConfigDefaultGateway.setDescription('The default gateway IP address is the address of the next hop router the switch uses to reach a non-local IP host when the switch does not know the return route. During a normal management protocol exchange with an IP client host, the switch simply sends its response onto the same route from which the request was received. The default gateway route is only used when the switch itself initiates an exchange, e.g., a TFTP upgrade, with the client. This object is writable only if the value of ipConfigMethod is set to manual(1). A write to this object will take effect immediately, replacing the previous address, if any. The default is 0.0.0.0, or no address.')
cmConsoleCLIInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 65500), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmConsoleCLIInactiveTimeout.setStatus('current')
if mibBuilder.loadTexts: cmConsoleCLIInactiveTimeout.setDescription('The number of seconds of command line console session inactivity to wait before ending the session. Once a session has ended, the user must resupply the cli console password to regain access. A value of 0 indicates no timeout, and is the default value.')
cmConsoleCLIPasswordMaxAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500)).clone(3)).setUnits('attempts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmConsoleCLIPasswordMaxAttempts.setStatus('current')
if mibBuilder.loadTexts: cmConsoleCLIPasswordMaxAttempts.setDescription('The number of consecutive invalid password attempts allowed before the command line console is shut down (kept silent) for a configured duration. A zero value permits unlimited attempts. The default value is 3.')
cmConsoleCLISilentTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmConsoleCLISilentTime.setStatus('current')
if mibBuilder.loadTexts: cmConsoleCLISilentTime.setDescription('The number of minutes during which the command line console will be unavailable after repeated failed attempts to logon. A zero value specifies no silent time, and is the default value.')
cmConsoleWebAdminState = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmConsoleWebAdminState.setStatus('current')
if mibBuilder.loadTexts: cmConsoleWebAdminState.setDescription('This variable enables or disables the Web console interface. The default value is enabled(1). Enabling the console provides access to management via the web console.')
cmConsoleWebHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmConsoleWebHttpPort.setStatus('current')
if mibBuilder.loadTexts: cmConsoleWebHttpPort.setDescription('This variable allows the user to configure a specific port on which the HTTP server for the web console will listen for TCP connections. Port number 23 is prohibitted for preventing from disturbing telnet port.')
cmSnmpSetManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 3, 1), )
if mibBuilder.loadTexts: cmSnmpSetManagerTable.setStatus('current')
if mibBuilder.loadTexts: cmSnmpSetManagerTable.setDescription('Table containing a list of IP addresses of workstations permitted to issue SNMP SET requests. Such a workstation is called a Set Manager. If this table is empty then any SET request with a matching SET community string is allowed. If at least one Set manager is specified, then an incoming SET request must have its source IP address matched against an entry in this table before the SET is allowed. An entry can be created and deleted via SNMP, command line interface, or web console.')
cmSnmpSetManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SIBU-MANAGERS-MIB", "cmSnmpSetManagerAddr"))
if mibBuilder.loadTexts: cmSnmpSetManagerEntry.setStatus('current')
if mibBuilder.loadTexts: cmSnmpSetManagerEntry.setDescription('An IP address of a manager station allowed to issue SET requests to this management agent.')
cmSnmpSetManagerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: cmSnmpSetManagerAddr.setStatus('current')
if mibBuilder.loadTexts: cmSnmpSetManagerAddr.setDescription("The SET Manager is assumed to be Internet UDP/IP based. And this is the manager's IP address.")
cmSnmpSetManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSnmpSetManagerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmSnmpSetManagerRowStatus.setDescription('The status of this conceptual row. The row can be set to active, createAndGo, and destroy. On creation, all objects in an entry must be created in the same request.')
cmSnmpTrapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 4, 1), )
if mibBuilder.loadTexts: cmSnmpTrapManagerTable.setStatus('current')
if mibBuilder.loadTexts: cmSnmpTrapManagerTable.setDescription('Table containing a list of Network Management Stations that are to receive traps generated by this Network Management Agent. Such an NMS is called a Trap Manager. An entry can be created and deleted via SNMP, command line interface or web console.')
cmSnmpTrapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-SIBU-MANAGERS-MIB", "cmSnmpTrapManagerAddr"))
if mibBuilder.loadTexts: cmSnmpTrapManagerEntry.setStatus('current')
if mibBuilder.loadTexts: cmSnmpTrapManagerEntry.setDescription('A destination address and community string to a particular trap manager.')
cmSnmpTrapManagerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 4, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: cmSnmpTrapManagerAddr.setStatus('current')
if mibBuilder.loadTexts: cmSnmpTrapManagerAddr.setDescription("The trap manager is assumed to be Internet UDP/IP based. And this is the manager's IP address.")
cmSnmpTrapManagerCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSnmpTrapManagerCommunity.setStatus('current')
if mibBuilder.loadTexts: cmSnmpTrapManagerCommunity.setDescription('Community string used for traps sent to this trap manager.')
cmSnmpTrapManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 46, 1, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSnmpTrapManagerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmSnmpTrapManagerRowStatus.setDescription('The status of this conceptual row. The row can be set to active, createAndGo, and destroy. On creation, all objects in an entry must be created in the same request.')
ciscoSibuManagersNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 2))
ciscoSibuManagersNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 2, 0))
ciscoSibuManagersConsoleLogonIntruder = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 46, 2, 0, 1))
if mibBuilder.loadTexts: ciscoSibuManagersConsoleLogonIntruder.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuManagersConsoleLogonIntruder.setDescription('A user is repeatedly trying to logon using an invalid password. The number of attempts exceeds the preset limit given in consolePasswordMaxAttempts. Depending on how the object cmConsoleSilentTime is configured, the switch may shut down the command line interface console following the generation of this trap.')
ciscoSibuManagersMIBComformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 3))
ciscoSibuManagersMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 3, 1))
ciscoSibuManagersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 46, 3, 2))
ciscoSibuManagersCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 46, 3, 1, 1)).setObjects(("CISCO-SIBU-MANAGERS-MIB", "ciscoSibuManagersIpConfigGroup"), ("CISCO-SIBU-MANAGERS-MIB", "ciscoSibuManagersCLIConsoleGroup"), ("CISCO-SIBU-MANAGERS-MIB", "ciscoSibuManagersWebConsoleGroup"), ("CISCO-SIBU-MANAGERS-MIB", "ciscoSibuManagersSnmpSetManagerGroup"), ("CISCO-SIBU-MANAGERS-MIB", "ciscoSibuManagersSnmpTrapManagerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuManagersCompliance = ciscoSibuManagersCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuManagersCompliance.setDescription('The compliance statement for the Cisco Managers MIB.')
ciscoSibuManagersIpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 46, 3, 2, 1)).setObjects(("CISCO-SIBU-MANAGERS-MIB", "cmIpConfigMethod"), ("CISCO-SIBU-MANAGERS-MIB", "cmIpConfigAddress"), ("CISCO-SIBU-MANAGERS-MIB", "cmIpConfigSubnetMask"), ("CISCO-SIBU-MANAGERS-MIB", "cmIpConfigDefaultGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuManagersIpConfigGroup = ciscoSibuManagersIpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuManagersIpConfigGroup.setDescription('A collection of objects to configure IP address for remote management.')
ciscoSibuManagersCLIConsoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 46, 3, 2, 2)).setObjects(("CISCO-SIBU-MANAGERS-MIB", "cmConsoleCLIInactiveTimeout"), ("CISCO-SIBU-MANAGERS-MIB", "cmConsoleCLIPasswordMaxAttempts"), ("CISCO-SIBU-MANAGERS-MIB", "cmConsoleCLISilentTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuManagersCLIConsoleGroup = ciscoSibuManagersCLIConsoleGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuManagersCLIConsoleGroup.setDescription('A collection of objects to configure command line interface console access.')
ciscoSibuManagersWebConsoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 46, 3, 2, 3)).setObjects(("CISCO-SIBU-MANAGERS-MIB", "cmConsoleWebAdminState"), ("CISCO-SIBU-MANAGERS-MIB", "cmConsoleWebHttpPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuManagersWebConsoleGroup = ciscoSibuManagersWebConsoleGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuManagersWebConsoleGroup.setDescription('A collection of objects to configure web console access.')
ciscoSibuManagersSnmpSetManagerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 46, 3, 2, 4)).setObjects(("CISCO-SIBU-MANAGERS-MIB", "cmSnmpSetManagerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuManagersSnmpSetManagerGroup = ciscoSibuManagersSnmpSetManagerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuManagersSnmpSetManagerGroup.setDescription('A collection of objects to configure SNMP set manager restrictions.')
ciscoSibuManagersSnmpTrapManagerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 46, 3, 2, 5)).setObjects(("CISCO-SIBU-MANAGERS-MIB", "cmSnmpTrapManagerCommunity"), ("CISCO-SIBU-MANAGERS-MIB", "cmSnmpTrapManagerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuManagersSnmpTrapManagerGroup = ciscoSibuManagersSnmpTrapManagerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuManagersSnmpTrapManagerGroup.setDescription('A collection of objects to configure trap managers.')
mibBuilder.exportSymbols("CISCO-SIBU-MANAGERS-MIB", ciscoSibuManagersMIBCompliances=ciscoSibuManagersMIBCompliances, ciscoSibuManagersMIB=ciscoSibuManagersMIB, cmIpConfigMethod=cmIpConfigMethod, cmSnmpTrapManagerEntry=cmSnmpTrapManagerEntry, cmSnmpTrapManagerTable=cmSnmpTrapManagerTable, ciscoSibuManagersCompliance=ciscoSibuManagersCompliance, ciscoSibuManagersSnmpTrapManagerGroup=ciscoSibuManagersSnmpTrapManagerGroup, cmSnmpTrapManager=cmSnmpTrapManager, ciscoSibuManagersMIBGroups=ciscoSibuManagersMIBGroups, cmConsoleWebAdminState=cmConsoleWebAdminState, cmIpConfigAddress=cmIpConfigAddress, cmSnmpTrapManagerRowStatus=cmSnmpTrapManagerRowStatus, ciscoSibuManagersNotificationsPrefix=ciscoSibuManagersNotificationsPrefix, PYSNMP_MODULE_ID=ciscoSibuManagersMIB, cmSnmpSetManagerEntry=cmSnmpSetManagerEntry, cmSnmpTrapManagerCommunity=cmSnmpTrapManagerCommunity, ciscoSibuManagersMIBObjects=ciscoSibuManagersMIBObjects, cmConsoleConfig=cmConsoleConfig, cmSnmpSetManagerRowStatus=cmSnmpSetManagerRowStatus, ciscoSibuManagersWebConsoleGroup=ciscoSibuManagersWebConsoleGroup, cmSnmpSetManager=cmSnmpSetManager, cmIpConfigSubnetMask=cmIpConfigSubnetMask, ciscoSibuManagersMIBComformance=ciscoSibuManagersMIBComformance, cmConsoleCLIPasswordMaxAttempts=cmConsoleCLIPasswordMaxAttempts, ciscoSibuManagersNotifications=ciscoSibuManagersNotifications, ciscoSibuManagersConsoleLogonIntruder=ciscoSibuManagersConsoleLogonIntruder, cmIpConfig=cmIpConfig, ciscoSibuManagersCLIConsoleGroup=ciscoSibuManagersCLIConsoleGroup, ciscoSibuManagersIpConfigGroup=ciscoSibuManagersIpConfigGroup, cmSnmpSetManagerAddr=cmSnmpSetManagerAddr, cmConsoleCLISilentTime=cmConsoleCLISilentTime, cmSnmpTrapManagerAddr=cmSnmpTrapManagerAddr, cmConsoleCLIInactiveTimeout=cmConsoleCLIInactiveTimeout, ciscoSibuManagersSnmpSetManagerGroup=ciscoSibuManagersSnmpSetManagerGroup, cmConsoleWebHttpPort=cmConsoleWebHttpPort, cmSnmpSetManagerTable=cmSnmpSetManagerTable, cmIpConfigDefaultGateway=cmIpConfigDefaultGateway)
