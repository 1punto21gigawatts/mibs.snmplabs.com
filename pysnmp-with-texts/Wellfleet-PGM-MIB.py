#
# PySNMP MIB module Wellfleet-PGM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-PGM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, IpAddress, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Counter64, ObjectIdentity, Gauge32, ModuleIdentity, Unsigned32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Counter64", "ObjectIdentity", "Gauge32", "ModuleIdentity", "Unsigned32", "TimeTicks", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfPgmGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfPgmGroup")
wfPgm = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1))
wfPgmCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmCreate.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete PGM.')
wfPgmEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmEnable.setDescription('Enable/Disable Parameter indicates whether this PGM record is enabled or disabled.')
wfPgmState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmState.setDescription('The current state of the entire PGM.')
wfPgmDebug = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmDebug.setDescription('This is a debug field for PGM. Setting bits cause pgm to gernerate certain log messages. This field will NOT restart PGM. The follow bits maybe set in any combination (LS stands for least significant): 0x00000001 for no display 0x00000002 for interface to MTM 0x00000004 for session addition 0x00000008 for session deletion 0x00000010 for retransmit state addition 0x00000020 for retransmit state deletion 0x00000040 for retransmit state timeout 0x00000080 for cache env 0x00000100 for ')
wfPgmSessionLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmSessionLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionLifeTime.setDescription('The length of the idle time (seconds) for which a PGM session will be aged out. An idle PGM session means there is no SPM message received from the upstream.')
wfPgmNnakGenerate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmNnakGenerate.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmNnakGenerate.setDescription('Router will send NNAK when received the redirect NCF if this parameter is set to enabled.')
wfPgmMaxReXmitStates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmMaxReXmitStates.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmMaxReXmitStates.setDescription('The Maxium number of retransmit state entries per slot. If no value is set means network element has no limitation on this mib.')
wfPgmTotalReXmitStates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmTotalReXmitStates.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmTotalReXmitStates.setDescription('The total number of retransmit state entries in retransmit state table.')
wfPgmMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmMaxSessions.setDescription('The Maxium number of source path state sessions per slot. If no value is set means network element has no limitation on this mib.')
wfPgmTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmTotalSessions.setDescription('The total number of source path session entries currently in PGM session table')
wfPgmTotalReXmitStatesTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmTotalReXmitStatesTimedOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmTotalReXmitStatesTimedOut.setDescription('The total number of retransmit state entries got removed becuase of timed-out (no correspondent RDATA received).')
wfPgmTotalUniqueNaks = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmTotalUniqueNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmTotalUniqueNaks.setDescription('The total number of unique Naks received.')
wfPgmTotalUniqueParityNaks = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmTotalUniqueParityNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmTotalUniqueParityNaks.setDescription('The total number of unique Parity Naks received.')
wfPgmMaxNakRate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmMaxNakRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmMaxNakRate.setDescription('The maximum number allowed of Nak per second.')
wfPgmIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2), )
if mibBuilder.loadTexts: wfPgmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfTable.setDescription('Table of PGM Interface Statistics')
wfPgmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1), ).setIndexNames((0, "Wellfleet-PGM-MIB", "wfPgmIfCct"))
if mibBuilder.loadTexts: wfPgmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfEntry.setDescription('A PGM Interface Statistics entry')
wfPgmIfCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmIfCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfCreate.setDescription('Create or delete')
wfPgmIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmIfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfEnable.setDescription('not used. enabled/Disabled parameter.')
wfPgmIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfState.setDescription('The current state of the PGM interface.')
wfPgmIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfCct.setDescription('The PGM circuit number')
wfPgmIfNakReXmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2147483647)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmIfNakReXmitInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfNakReXmitInterval.setDescription('The length of time (milliseconds) for which a network element will retransmit a NAK while waiting for a corresponding NCF. This interval is counted down from the transmission of a NAK')
wfPgmIfMaxNakReXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmIfMaxNakReXmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfMaxNakReXmitRate.setDescription('The maximum retries of NAK restransmission per second is allowed. ')
wfPgmIfNakRdataInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmIfNakRdataInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfNakRdataInterval.setDescription('The length of time (seconds) for which a network element will wait for the corresponding RDATA. This interval is counted down from the time a matching NCF is received.')
wfPgmIfNakEliminateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPgmIfNakEliminateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfNakEliminateInterval.setDescription('The length of time (seconds) for which a network element will suspend NAK elimanation for the specific TSI/SQN. .This interval is counted down from the time the first NAK is establish. This value must be smaller than wfPgmNakRdataInterval. If the value of this parameter is set to 1 then all the duplicate NAKs will be elimanated.')
wfPgmIfTotalReXmitStates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfTotalReXmitStates.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfTotalReXmitStates.setDescription('The total retransmit state entries for this interface.')
wfPgmIfTotalReXmitTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfTotalReXmitTimedOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfTotalReXmitTimedOut.setDescription('The total time-outed retransmit state entries for this interface.')
wfPgmIfInSpms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInSpms.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInSpms.setDescription('The total number of SPM received on the PGM interface.')
wfPgmIfOutSpms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutSpms.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutSpms.setDescription('The total number of SPM sent out from the PGM interface.')
wfPgmIfInParitySpms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInParitySpms.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInParitySpms.setDescription('The total number of parity SPM received on the PGM interface')
wfPgmIfOutParitySpms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutParitySpms.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutParitySpms.setDescription('The total number of parity SPM sent out from the PGM interface')
wfPgmIfInSpmPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInSpmPortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInSpmPortErrors.setDescription('The number of received SPM discarded on the PGM interface for the wrong inbound')
wfPgmIfInRdata = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInRdata.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInRdata.setDescription('The total number of RDATA received on the PGM interface')
wfPgmIfOutRdata = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutRdata.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutRdata.setDescription('The total number of RDATA sent out from the PGM interface')
wfPgmIfInParityRdata = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInParityRdata.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInParityRdata.setDescription('The total number of Parity RDATA received on the PGM interface')
wfPgmIfOutParityRdata = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutParityRdata.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutParityRdata.setDescription('The total number of parity RDATA sent out from the PGM interface')
wfPgmIfInRdataPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInRdataPortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInRdataPortErrors.setDescription('The number of received RDATA discarded because of wrong inbound')
wfPgmIfInRdataNoSessionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInRdataNoSessionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInRdataNoSessionErrors.setDescription('The number of received RDATA discarded because of no session')
wfPgmIfUniqueNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfUniqueNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfUniqueNaks.setDescription('The total number of unique NAKs received for this interface.')
wfPgmIfInNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNaks.setDescription('The total number of NAK received on the PGM interface')
wfPgmIfOutNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutNaks.setDescription('The total number of NAK sent out from the PGM interface')
wfPgmIfUniqueParityNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfUniqueParityNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfUniqueParityNaks.setDescription('The total number of unique parity NAKs received for this interface.')
wfPgmIfInParityNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInParityNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInParityNaks.setDescription('The total number of parity NAK received on the PGM interface')
wfPgmIfOutParityNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutParityNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutParityNaks.setDescription('The total number of parity NAK sent out from the PGM interface')
wfPgmIfInNakPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNakPortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNakPortErrors.setDescription('The number of received NAK discarded because of wrong outbound')
wfPgmIfInNakNoSessionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNakNoSessionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNakNoSessionErrors.setDescription('The number of received NAK Discarded because of no session')
wfPgmIfInNakSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNakSeqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNakSeqErrors.setDescription('The number of received NAK Discarded because of out of sequence (out of retransmit window).')
wfPgmIfInParityNakTgErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInParityNakTgErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInParityNakTgErrors.setDescription('The number of received parity NAK Discarded because of out of parity TG window.')
wfPgmIfInNnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNnaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNnaks.setDescription('The total number of NNAK received on the PGM interface')
wfPgmIfOutNnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutNnaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutNnaks.setDescription('The total number of NNAK sent out from the PGM interface')
wfPgmIfInParityNnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInParityNnaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInParityNnaks.setDescription('The total number of parity NNAK received on the PGM interface')
wfPgmIfOutParityNnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutParityNnaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutParityNnaks.setDescription('The total number of parity NNAK sent out from the PGM interface')
wfPgmIfInNnakPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNnakPortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNnakPortErrors.setDescription('The number of received NNAK discarded because of wrong mcast outbound')
wfPgmIfInNnakNoSessionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNnakNoSessionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNnakNoSessionErrors.setDescription('The number of received NNAK discarded because of no session')
wfPgmIfInNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNcfs.setDescription('The total number of NCF received on the PGM interface')
wfPgmIfOutNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutNcfs.setDescription('The total number of NCF sent out from the PGM interface')
wfPgmIfInParityNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInParityNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInParityNcfs.setDescription('The total number of parity NCF received on the PGM interface')
wfPgmIfOutParityNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfOutParityNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfOutParityNcfs.setDescription('The total number of parity NCF sent out from the PGM interface')
wfPgmIfInNcfPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNcfPortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNcfPortErrors.setDescription('The number of received NCF discarded because of the wrong inbound')
wfPgmIfInNcfNoSessionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInNcfNoSessionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInNcfNoSessionErrors.setDescription('The number of received NCF discarded because of no session')
wfPgmIfInRedirectNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmIfInRedirectNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmIfInRedirectNcfs.setDescription('The number of redirected NCF received on the PGM interface')
wfPgmSessionTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3), )
if mibBuilder.loadTexts: wfPgmSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionTable.setDescription('Table of PGM flow for each (port,global id)')
wfPgmSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1), ).setIndexNames((0, "Wellfleet-PGM-MIB", "wfPgmSessionSource"), (0, "Wellfleet-PGM-MIB", "wfPgmSessionGroup"), (0, "Wellfleet-PGM-MIB", "wfPgmSessionSourcePort"), (0, "Wellfleet-PGM-MIB", "wfPgmSessionGlobalId"))
if mibBuilder.loadTexts: wfPgmSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionEntry.setDescription('A PGM Session entry')
wfPgmSessionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionSource.setDescription('The source IP address of this entry.')
wfPgmSessionGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionGroup.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionGroup.setDescription('The destination group address of this entry')
wfPgmSessionSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionSourcePort.setDescription('The source port of this pgm session')
wfPgmSessionGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionGlobalId.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionGlobalId.setDescription('The Global ID this entry')
wfPgmSessionUpstreamAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionUpstreamAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionUpstreamAddress.setDescription('The IP address of the upstream interface for the entry.')
wfPgmSessionUpstreamIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionUpstreamIfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionUpstreamIfCct.setDescription('The circuit number of the upstream intf for the entry.')
wfPgmSessionTrailEdgeSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionTrailEdgeSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionTrailEdgeSeq.setDescription('The trailing edge sequence of the transfer window.')
wfPgmSessionIncrSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionIncrSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionIncrSeq.setDescription('The increase sequnce number in the transfer window.')
wfPgmSessionLeadEdgeSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionLeadEdgeSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionLeadEdgeSeq.setDescription('The leading edge sequence of the transfer window.')
wfPgmSessionInSpms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInSpms.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInSpms.setDescription('The total number of SPMs received for this session.')
wfPgmSessionOutSpms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutSpms.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutSpms.setDescription('The total number of SPMs sent out for this session.')
wfPgmSessionInParitySpms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInParitySpms.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInParitySpms.setDescription('The total number of ParityS PMs received for this session.')
wfPgmSessionOutParitySpms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutParitySpms.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutParitySpms.setDescription('The total number of Parity SPMs sent out for this session.')
wfPgmSessionTotalReXmitStates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionTotalReXmitStates.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionTotalReXmitStates.setDescription('The total retransmit state entries for this session.')
wfPgmSessionTotalReXmitTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionTotalReXmitTimedOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionTotalReXmitTimedOut.setDescription('The total time-outed retransmit state entries for this session.')
wfPgmSessionInRdata = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInRdata.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInRdata.setDescription('The total number of RDATAs received for this session.')
wfPgmSessionOutRdata = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutRdata.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutRdata.setDescription('The total number of RDATAs sent out from this session.')
wfPgmSessionInParityRdata = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInParityRdata.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInParityRdata.setDescription('The total number of parity RDATAs received for this session.')
wfPgmSessionOutParityRdata = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutParityRdata.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutParityRdata.setDescription('The total number of parity RDATAs sent out from this session.')
wfPgmSessionInRdataNoStateErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInRdataNoStateErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInRdataNoStateErrors.setDescription('The total number of received RDATA discarded for no Retransmit state.')
wfPgmSessionUniqueNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionUniqueNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionUniqueNaks.setDescription('The total number of unique NAKs received for this session.')
wfPgmSessionInNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInNaks.setDescription('The total number of NAKs received for this session.')
wfPgmSessionOutNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutNaks.setDescription('The total number of NAKs sent out from this session.')
wfPgmSessionUniqueParityNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionUniqueParityNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionUniqueParityNaks.setDescription('The total number of unique parity NAKs received for this session.')
wfPgmSessionInParityNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInParityNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInParityNaks.setDescription('The total number of parity NAKs received for this session.')
wfPgmSessionOutParityNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutParityNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutParityNaks.setDescription('The total number of parity NAKs sent out from this session.')
wfPgmSessionInNakSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInNakSeqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInNakSeqErrors.setDescription('The total number of received NAKs discarded because of out of sequence (out of retransmit window).')
wfPgmSessionInNnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInNnaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInNnaks.setDescription('The total number of NNAKs received for this session.')
wfPgmSessionOutNnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutNnaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutNnaks.setDescription('The total number of NNAKs sent out from this session.')
wfPgmSessionInParityNnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInParityNnaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInParityNnaks.setDescription('The total number of parity NNAKs received for this session.')
wfPgmSessionOutParityNnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutParityNnaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutParityNnaks.setDescription('The total number of Parity NNAKs sent out from this session.')
wfPgmSessionInNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInNcfs.setDescription('The total number of Ncfs received for this session.')
wfPgmSessionOutNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutNcfs.setDescription('The total number of Ncfs sent out from this session.')
wfPgmSessionInParityNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInParityNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInParityNcfs.setDescription('The total number of Parity Ncfs received for this session.')
wfPgmSessionOutParityNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionOutParityNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionOutParityNcfs.setDescription('The total number of Parity Ncfs sent out from this session.')
wfPgmSessionInRedirectNcfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmSessionInRedirectNcfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmSessionInRedirectNcfs.setDescription('The total number of redirect Ncfs received for this session.')
wfPgmReXmitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4), )
if mibBuilder.loadTexts: wfPgmReXmitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitTable.setDescription('Table of PGM Retransmit state')
wfPgmReXmitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1), ).setIndexNames((0, "Wellfleet-PGM-MIB", "wfPgmReXmitSource"), (0, "Wellfleet-PGM-MIB", "wfPgmReXmitGroup"), (0, "Wellfleet-PGM-MIB", "wfPgmReXmitSourcePort"), (0, "Wellfleet-PGM-MIB", "wfPgmReXmitGlobalId"), (0, "Wellfleet-PGM-MIB", "wfPgmReXmitSelectiveSeqNum"), (0, "Wellfleet-PGM-MIB", "wfPgmReXmitParityTgSeqNum"))
if mibBuilder.loadTexts: wfPgmReXmitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitEntry.setDescription('A PGM ReXmit entry')
wfPgmReXmitSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitSource.setDescription('The source IP address of this entry.')
wfPgmReXmitGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitGroup.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitGroup.setDescription('The destination group address of this entry')
wfPgmReXmitSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitSourcePort.setDescription('The source port of this pgm retransmit state')
wfPgmReXmitGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitGlobalId.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitGlobalId.setDescription('The Global ID this entry')
wfPgmReXmitSelectiveSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitSelectiveSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitSelectiveSeqNum.setDescription('The Selected Sequence number for this entry.')
wfPgmReXmitParityTgSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitParityTgSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitParityTgSeqNum.setDescription('The Requested Parity Tg sequence number for this entry. this value will be the same as wfPgmSessionParityTgSeq.')
wfPgmReXmitReqParityTgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitReqParityTgCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitReqParityTgCount.setDescription('The Requested number of missing Parity packets of specific Tg. The largest counter of the received NAK will be stored in this mib.')
wfPgmReXmitUpStreamCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitUpStreamCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitUpStreamCct.setDescription('The upstream interface circuit number.')
wfPgmReXmitDownStream = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 28, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPgmReXmitDownStream.setStatus('mandatory')
if mibBuilder.loadTexts: wfPgmReXmitDownStream.setDescription('list of downstream intfs for this entry. Each one is in the format of (intf_addr(u_int32) and intf_cct(u_int16)')
mibBuilder.exportSymbols("Wellfleet-PGM-MIB", wfPgmIfInRdataNoSessionErrors=wfPgmIfInRdataNoSessionErrors, wfPgmSessionSource=wfPgmSessionSource, wfPgmIfInNnakNoSessionErrors=wfPgmIfInNnakNoSessionErrors, wfPgmTotalSessions=wfPgmTotalSessions, wfPgmMaxReXmitStates=wfPgmMaxReXmitStates, wfPgmIfInNaks=wfPgmIfInNaks, wfPgmIfInRdata=wfPgmIfInRdata, wfPgmSessionUniqueParityNaks=wfPgmSessionUniqueParityNaks, wfPgmSessionInParitySpms=wfPgmSessionInParitySpms, wfPgmTotalUniqueParityNaks=wfPgmTotalUniqueParityNaks, wfPgmIfNakReXmitInterval=wfPgmIfNakReXmitInterval, wfPgmSessionOutParitySpms=wfPgmSessionOutParitySpms, wfPgmIfInParityNaks=wfPgmIfInParityNaks, wfPgmIfInNnaks=wfPgmIfInNnaks, wfPgmSessionInRdataNoStateErrors=wfPgmSessionInRdataNoStateErrors, wfPgmIfInSpms=wfPgmIfInSpms, wfPgmIfTotalReXmitStates=wfPgmIfTotalReXmitStates, wfPgmSessionInNnaks=wfPgmSessionInNnaks, wfPgmState=wfPgmState, wfPgmIfInRedirectNcfs=wfPgmIfInRedirectNcfs, wfPgmSessionInNcfs=wfPgmSessionInNcfs, wfPgmIfInNnakPortErrors=wfPgmIfInNnakPortErrors, wfPgmSessionInRedirectNcfs=wfPgmSessionInRedirectNcfs, wfPgmMaxNakRate=wfPgmMaxNakRate, wfPgmSessionOutNaks=wfPgmSessionOutNaks, wfPgmSessionTotalReXmitStates=wfPgmSessionTotalReXmitStates, wfPgmIfState=wfPgmIfState, wfPgmSessionUpstreamIfCct=wfPgmSessionUpstreamIfCct, wfPgmMaxSessions=wfPgmMaxSessions, wfPgmIfTable=wfPgmIfTable, wfPgmSessionOutParityNaks=wfPgmSessionOutParityNaks, wfPgmSessionTrailEdgeSeq=wfPgmSessionTrailEdgeSeq, wfPgm=wfPgm, wfPgmIfOutSpms=wfPgmIfOutSpms, wfPgmNnakGenerate=wfPgmNnakGenerate, wfPgmTotalUniqueNaks=wfPgmTotalUniqueNaks, wfPgmSessionUniqueNaks=wfPgmSessionUniqueNaks, wfPgmIfMaxNakReXmitRate=wfPgmIfMaxNakReXmitRate, wfPgmEnable=wfPgmEnable, wfPgmIfInSpmPortErrors=wfPgmIfInSpmPortErrors, wfPgmSessionTable=wfPgmSessionTable, wfPgmSessionTotalReXmitTimedOut=wfPgmSessionTotalReXmitTimedOut, wfPgmIfEnable=wfPgmIfEnable, wfPgmSessionSourcePort=wfPgmSessionSourcePort, wfPgmSessionInNaks=wfPgmSessionInNaks, wfPgmReXmitParityTgSeqNum=wfPgmReXmitParityTgSeqNum, wfPgmIfNakRdataInterval=wfPgmIfNakRdataInterval, wfPgmIfOutParitySpms=wfPgmIfOutParitySpms, wfPgmReXmitSource=wfPgmReXmitSource, wfPgmSessionInParityRdata=wfPgmSessionInParityRdata, wfPgmCreate=wfPgmCreate, wfPgmIfInNcfPortErrors=wfPgmIfInNcfPortErrors, wfPgmReXmitEntry=wfPgmReXmitEntry, wfPgmSessionOutParityNcfs=wfPgmSessionOutParityNcfs, wfPgmIfInParityNnaks=wfPgmIfInParityNnaks, wfPgmIfOutNnaks=wfPgmIfOutNnaks, wfPgmIfOutParityRdata=wfPgmIfOutParityRdata, wfPgmIfOutNcfs=wfPgmIfOutNcfs, wfPgmIfInNcfNoSessionErrors=wfPgmIfInNcfNoSessionErrors, wfPgmSessionOutNcfs=wfPgmSessionOutNcfs, wfPgmSessionLifeTime=wfPgmSessionLifeTime, wfPgmIfInNakNoSessionErrors=wfPgmIfInNakNoSessionErrors, wfPgmSessionIncrSeq=wfPgmSessionIncrSeq, wfPgmIfInNakSeqErrors=wfPgmIfInNakSeqErrors, wfPgmReXmitGroup=wfPgmReXmitGroup, wfPgmReXmitReqParityTgCount=wfPgmReXmitReqParityTgCount, wfPgmIfEntry=wfPgmIfEntry, wfPgmIfTotalReXmitTimedOut=wfPgmIfTotalReXmitTimedOut, wfPgmIfOutRdata=wfPgmIfOutRdata, wfPgmIfCct=wfPgmIfCct, wfPgmIfInParitySpms=wfPgmIfInParitySpms, wfPgmSessionOutParityRdata=wfPgmSessionOutParityRdata, wfPgmReXmitTable=wfPgmReXmitTable, wfPgmSessionInRdata=wfPgmSessionInRdata, wfPgmSessionOutNnaks=wfPgmSessionOutNnaks, wfPgmSessionInParityNcfs=wfPgmSessionInParityNcfs, wfPgmSessionGlobalId=wfPgmSessionGlobalId, wfPgmSessionInParityNaks=wfPgmSessionInParityNaks, wfPgmReXmitUpStreamCct=wfPgmReXmitUpStreamCct, wfPgmIfOutNaks=wfPgmIfOutNaks, wfPgmSessionOutParityNnaks=wfPgmSessionOutParityNnaks, wfPgmSessionInSpms=wfPgmSessionInSpms, wfPgmIfOutParityNaks=wfPgmIfOutParityNaks, wfPgmIfNakEliminateInterval=wfPgmIfNakEliminateInterval, wfPgmIfInNcfs=wfPgmIfInNcfs, wfPgmIfInParityNcfs=wfPgmIfInParityNcfs, wfPgmSessionEntry=wfPgmSessionEntry, wfPgmIfOutParityNcfs=wfPgmIfOutParityNcfs, wfPgmSessionOutSpms=wfPgmSessionOutSpms, wfPgmSessionOutRdata=wfPgmSessionOutRdata, wfPgmDebug=wfPgmDebug, wfPgmIfInParityNakTgErrors=wfPgmIfInParityNakTgErrors, wfPgmReXmitSourcePort=wfPgmReXmitSourcePort, wfPgmReXmitSelectiveSeqNum=wfPgmReXmitSelectiveSeqNum, wfPgmReXmitGlobalId=wfPgmReXmitGlobalId, wfPgmTotalReXmitStatesTimedOut=wfPgmTotalReXmitStatesTimedOut, wfPgmSessionGroup=wfPgmSessionGroup, wfPgmIfCreate=wfPgmIfCreate, wfPgmIfUniqueParityNaks=wfPgmIfUniqueParityNaks, wfPgmSessionLeadEdgeSeq=wfPgmSessionLeadEdgeSeq, wfPgmReXmitDownStream=wfPgmReXmitDownStream, wfPgmIfUniqueNaks=wfPgmIfUniqueNaks, wfPgmSessionUpstreamAddress=wfPgmSessionUpstreamAddress, wfPgmIfOutParityNnaks=wfPgmIfOutParityNnaks, wfPgmSessionInNakSeqErrors=wfPgmSessionInNakSeqErrors, wfPgmIfInNakPortErrors=wfPgmIfInNakPortErrors, wfPgmSessionInParityNnaks=wfPgmSessionInParityNnaks, wfPgmIfInParityRdata=wfPgmIfInParityRdata, wfPgmTotalReXmitStates=wfPgmTotalReXmitStates, wfPgmIfInRdataPortErrors=wfPgmIfInRdataPortErrors)
