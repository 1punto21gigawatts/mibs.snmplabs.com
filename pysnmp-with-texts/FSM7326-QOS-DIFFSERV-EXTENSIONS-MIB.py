#
# PySNMP MIB module FSM7326-QOS-DIFFSERV-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FSM7326-QOS-DIFFSERV-EXTENSIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
IndexIntegerNextFree, IndexInteger, IfDirection = mibBuilder.importSymbols("DIFFSERV-MIB", "IndexIntegerNextFree", "IndexInteger", "IfDirection")
fsm7326QOS, = mibBuilder.importSymbols("FSM7326-QOS-MIB", "fsm7326QOS")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibIdentifier, Counter32, iso, Gauge32, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, NotificationType, TimeTicks, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "Counter32", "iso", "Gauge32", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "NotificationType", "TimeTicks", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention, MacAddress, StorageType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "StorageType", "RowStatus")
fsm7326QOSDiffServExtensions = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3))
fsm7326QOSDiffServExtensions.setRevisions(('2003-11-10 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fsm7326QOSDiffServExtensions.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: fsm7326QOSDiffServExtensions.setLastUpdated('200311101200Z')
if mibBuilder.loadTexts: fsm7326QOSDiffServExtensions.setOrganization('Netgear')
if mibBuilder.loadTexts: fsm7326QOSDiffServExtensions.setContactInfo('')
if mibBuilder.loadTexts: fsm7326QOSDiffServExtensions.setDescription('')
class IpPrecedence(TextualConvention, Integer32):
    description = 'An IP Precedence value that may be used for marking a traffic stream.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class Cos(TextualConvention, Integer32):
    description = 'The 802.1p header Class of Service field that may be used for marking a traffic streams. Also known as the Ethernet frame priority.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class CosOrAny(TextualConvention, Integer32):
    description = 'The 802.1p header Class of Service field that may be used for discriminating among traffic streams. Also known as the Ethernet frame priority. The value -1 is used to indicate a wild card i.e. any value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )
class VlanIdOrAny(TextualConvention, Integer32):
    description = 'The virtual LAN identifier (VLAN ID) that may be used to differentiate among traffic streams. The value -1 is used to indicate a wild card i.e. any value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4094), )
agentDiffServMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1))
agentDiffServClassifier = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1))
agentDiffServAuxMfClfrNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 1), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrNextFree.setDescription('This object contains an unused value for agentDiffServAuxMfClfrId , or a zero to indicate that none exist.')
agentDiffServAuxMfClfrTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2), )
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTable.setDescription('A table of Auxiliary Multi-field Classifier filter entries that a system may use to identify IP traffic.')
agentDiffServAuxMfClfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1), ).setIndexNames((0, "FSM7326-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServAuxMfClfrId"))
if mibBuilder.loadTexts: agentDiffServAuxMfClfrEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrEntry.setDescription('An IP Multi-field Classifier entry describes a single filter.')
agentDiffServAuxMfClfrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: agentDiffServAuxMfClfrId.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrId.setDescription('An index that enumerates the Auxiliary MultiField Classifier filter entries. Managers obtain new values for row creation in this table by reading agentDiffServAuxMfClfrNextFree.')
agentDiffServAuxMfClfrDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstAddr.setDescription("The IP address to match against the packet's destination IP address.")
agentDiffServAuxMfClfrDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMask.setDescription('This mask value identifies the portion of agentDiffServAuxMfClfrDstAddr that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any address.')
agentDiffServAuxMfClfrSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcAddr.setDescription("The IP address to match against the packet's source IP address.")
agentDiffServAuxMfClfrSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMask.setDescription('This mask value identifies the portion of agentDiffServAuxMfClfrSrcAddr that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any address.')
agentDiffServAuxMfClfrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrProtocol.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrProtocol.setDescription('The IP protocol to match against the IPv4 protocol number. A value of 255 means match all. ')
agentDiffServAuxMfClfrDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstL4PortMin.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstL4PortMin.setDescription('The minimum value that the layer-4 destination port number in the packet must have in order to match this classifier entry. ')
agentDiffServAuxMfClfrDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 8), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstL4PortMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstL4PortMax.setDescription('The maximum value that the layer-4 destination port number in the packet must have in order to match this classifier entry. This value must be equal to or greater than the value specified for this entry in agentDiffServAuxMfClfrDstL4PortMin. ')
agentDiffServAuxMfClfrSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcL4PortMin.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcL4PortMin.setDescription('The minimum value that the layer-4 source port number in the packet must have in order to match this classifier entry. ')
agentDiffServAuxMfClfrSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 10), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcL4PortMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcL4PortMax.setDescription('The maximum value that the layer-4 source port number in the packet must have in order to match this classifier entry. This value must be equal to or greater than the value specified for this entry in diffServMultiFieldClfrSrcL4PortMin. ')
agentDiffServAuxMfClfrCos = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 11), CosOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrCos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrCos.setDescription('Three-bit 802.1p priority field in the Ethernet frame used as a class-match parameter. A value of -1 indicates that a specific COS value has not been defined and thus all COS values are considered a match.')
agentDiffServAuxMfClfrTos = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTos.setDescription('IP TOS bits value, defined as all eight bits of the Service Type octet in the IPv4 header. There are multiple, overlapping, meanings of the TOS octet in use today: Precedence (bits 7-5): IP Precedence, values 0-7 DSCP (bits 7-2): IP DiffServ Code Point, values 0-63 TOS (bits 7-0): IP Type of Service, by bits, values 0-255 Each of these definitions can be produced using the appropriate agentDiffServAuxMfClfrTosMask mask value. These definitions are mutually-exclusive, so only one is allowed for any given classifier element.')
agentDiffServAuxMfClfrTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTosMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTosMask.setDescription("IP TOS bits mask value. It identifies the portion of agentDiffServAuxMfClfrTos that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any TOS value. There are multiple, overlapping meanings of the TOS octet in use today. These are represented by the following specific mask values: Precedence (bits 7-5): 224 (bit mask '11100000') DSCP (bits 7-2): 252 (bit mask '11111100') TOS (bits 7-0): 255 (bit mask '11111111') Other mask values are also permitted.")
agentDiffServAuxMfClfrDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 14), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMac.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMac.setDescription('Destination MAC address. ')
agentDiffServAuxMfClfrDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 15), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMacMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMacMask.setDescription('Destination MAC address mask value. This mask value identifies the portion of agentDiffServAuxMfClfrDstMac that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any MAC address.')
agentDiffServAuxMfClfrSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 16), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMac.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMac.setDescription('Source MAC address. ')
agentDiffServAuxMfClfrSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 17), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMacMask.setDescription('Source MAC address mask value. This mask value identifies the portion of agentDiffServAuxMfClfrSrcMac that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any MAC address.')
agentDiffServAuxMfClfrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 18), VlanIdOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanId.setDescription('VLAN ID value for the classifier. A value of -1 indicates that a specific VLAN ID value has not been defined and thus all VLAN ID values are considered a match.')
agentDiffServAuxMfClfrStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 19), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrStorage.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrStorage.setDescription('The storage type for this conceptual row. ')
agentDiffServAuxMfClfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 1, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrStatus.setDescription('The status of this conceptual row.')
agentDiffServAction = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 2))
agentDiffServIpPrecMarkActTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 2, 4), )
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActTable.setDescription('This table enumerates specific IP Precedence values used for marking or remarking the Precedence field of IP packets. The entries of this table may be referenced by a diffServActionSpecific attribute.')
agentDiffServIpPrecMarkActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 2, 4, 1), ).setIndexNames((0, "FSM7326-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServIpPrecMarkActPrecedence"))
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActEntry.setDescription('An entry in the IP Precedence mark action table that describes a single IP Precedence value used for marking.')
agentDiffServIpPrecMarkActPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 2, 4, 1, 1), IpPrecedence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActPrecedence.setStatus('current')
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActPrecedence.setDescription('The IP Precedence that this Action will store into the Precedence field of the IP packet. It is quite possible that the only packets subject to this Action are already marked with this IP Precedence. Note also that Differentiated Services processing may result in a packet being marked on both ingress to a network and on egress from it, and that ingress and egress can occur in the same router.')
agentDiffServCosMarkActTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 2, 2), )
if mibBuilder.loadTexts: agentDiffServCosMarkActTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCosMarkActTable.setDescription('This table enumerates specific Class of Service values used for marking or remarking the priority bits in the 802.1p header. The entries of this table may be referenced by a diffServActionSpecific attribute.')
agentDiffServCosMarkActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 2, 2, 1), ).setIndexNames((0, "FSM7326-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServCosMarkActCos"))
if mibBuilder.loadTexts: agentDiffServCosMarkActEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCosMarkActEntry.setDescription('An entry in the COS mark action table that describes a single Class of Service value used for marking.')
agentDiffServCosMarkActCos = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 3, 3, 1, 2, 2, 1, 1), Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServCosMarkActCos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCosMarkActCos.setDescription('The Class of Service value that this Action will store into the priority bits of the 802.1p header. It is quite possible that the only packets subject to this Action are already marked with this COS value. COS packet marking occurs upon egress from the network node.')
mibBuilder.exportSymbols("FSM7326-QOS-DIFFSERV-EXTENSIONS-MIB", agentDiffServAuxMfClfrDstMask=agentDiffServAuxMfClfrDstMask, PYSNMP_MODULE_ID=fsm7326QOSDiffServExtensions, agentDiffServAuxMfClfrEntry=agentDiffServAuxMfClfrEntry, agentDiffServAuxMfClfrId=agentDiffServAuxMfClfrId, agentDiffServIpPrecMarkActTable=agentDiffServIpPrecMarkActTable, agentDiffServAuxMfClfrDstAddr=agentDiffServAuxMfClfrDstAddr, agentDiffServAuxMfClfrSrcMacMask=agentDiffServAuxMfClfrSrcMacMask, agentDiffServAuxMfClfrSrcL4PortMax=agentDiffServAuxMfClfrSrcL4PortMax, agentDiffServAuxMfClfrDstL4PortMin=agentDiffServAuxMfClfrDstL4PortMin, agentDiffServMIBObjects=agentDiffServMIBObjects, fsm7326QOSDiffServExtensions=fsm7326QOSDiffServExtensions, agentDiffServIpPrecMarkActPrecedence=agentDiffServIpPrecMarkActPrecedence, agentDiffServCosMarkActCos=agentDiffServCosMarkActCos, agentDiffServAuxMfClfrCos=agentDiffServAuxMfClfrCos, Cos=Cos, agentDiffServIpPrecMarkActEntry=agentDiffServIpPrecMarkActEntry, agentDiffServAction=agentDiffServAction, agentDiffServCosMarkActTable=agentDiffServCosMarkActTable, CosOrAny=CosOrAny, agentDiffServAuxMfClfrTable=agentDiffServAuxMfClfrTable, agentDiffServAuxMfClfrDstL4PortMax=agentDiffServAuxMfClfrDstL4PortMax, agentDiffServAuxMfClfrTos=agentDiffServAuxMfClfrTos, agentDiffServAuxMfClfrVlanId=agentDiffServAuxMfClfrVlanId, agentDiffServAuxMfClfrStorage=agentDiffServAuxMfClfrStorage, agentDiffServAuxMfClfrStatus=agentDiffServAuxMfClfrStatus, agentDiffServAuxMfClfrSrcMask=agentDiffServAuxMfClfrSrcMask, agentDiffServAuxMfClfrProtocol=agentDiffServAuxMfClfrProtocol, agentDiffServAuxMfClfrDstMac=agentDiffServAuxMfClfrDstMac, agentDiffServAuxMfClfrSrcMac=agentDiffServAuxMfClfrSrcMac, agentDiffServAuxMfClfrNextFree=agentDiffServAuxMfClfrNextFree, agentDiffServCosMarkActEntry=agentDiffServCosMarkActEntry, VlanIdOrAny=VlanIdOrAny, agentDiffServClassifier=agentDiffServClassifier, agentDiffServAuxMfClfrSrcL4PortMin=agentDiffServAuxMfClfrSrcL4PortMin, agentDiffServAuxMfClfrTosMask=agentDiffServAuxMfClfrTosMask, agentDiffServAuxMfClfrDstMacMask=agentDiffServAuxMfClfrDstMacMask, IpPrecedence=IpPrecedence, agentDiffServAuxMfClfrSrcAddr=agentDiffServAuxMfClfrSrcAddr)
