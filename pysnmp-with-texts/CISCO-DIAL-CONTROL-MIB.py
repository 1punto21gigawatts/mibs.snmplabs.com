#
# PySNMP MIB module CISCO-DIAL-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DIAL-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
AbsoluteCounter32, = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "AbsoluteCounter32")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, TimeTicks, MibIdentifier, Integer32, Bits, Unsigned32, ObjectIdentity, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "MibIdentifier", "Integer32", "Bits", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "IpAddress", "iso")
DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp")
ciscoDialControlMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 25))
ciscoDialControlMib.setRevisions(('2005-05-26 00:00', '2003-07-10 00:01', '2002-08-21 00:01', '2002-05-24 00:01', '2002-02-20 15:46', '2001-12-13 15:46', '1998-01-16 15:46',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDialControlMib.setRevisionsDescriptions(('Modified DESCRIPTION of cPeerSearchType object. ', '1) Changed the SYNTAX of cCallHistoryLogicalIfIndex to be InterfaceIndexOrZero instead of InterfaceIndex. 2) Modified the DESCRIPTION of cCallHistoryLogicalIfIndex.', '1) Deprecated ciscoDialControlMibComplianceRev3 2) Added a new table cCallHistoryIecTable 3) Added a new module-compliance ciscoDialControlMibComplianceRev4 4) Added gatekeeper and externalGKTMPServer enum labels to cCallHistoryReleaseSrc 5) Added cCallHistoryIecGroup OBJECT-GROUP.', '1) Deprecated ciscoDialControlMibComplianceRev2 2) Added a new object subtree (OID) cPeerGlobalConfiguration 3) Added a new object cPeerSearchType 4) Added a new object-group cPeerGlobalConfigurationGroup 5) Added a new module-compliance ciscoDialControlMibComplianceRev3.', '1) Deprecated cCallHistoryReleaseSource 2) Deprecated cCallHistoryGroupRev1 3) Deprecated ciscoDialControlMibComplianceRev1 3) Added a new object cCallHistoryReleaseSrc 4) Added a new object cCallHistoryGroupRev2 6) Added a new object ciscoDialControlMibComplianceRev2.', 'Added a new object cCallHistoryReleaseSource in CallHistory table.', 'The initial version of the mib.',))
if mibBuilder.loadTexts: ciscoDialControlMib.setLastUpdated('200505260000Z')
if mibBuilder.loadTexts: ciscoDialControlMib.setOrganization('Cisco systems, Inc.')
if mibBuilder.loadTexts: ciscoDialControlMib.setContactInfo(' Bibek Das Postal: cisco Systems 170 West Tasman Drive San Jose, CA 95134 U.S.A. Phone: +1 408 526 5225 E-mail: cs-isdn@cisco.com')
if mibBuilder.loadTexts: ciscoDialControlMib.setDescription('The MIB module to describe call history information for demand access and possibly other kinds of interfaces.')
ciscoDialControlMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 25, 1))
cCallHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4))
cCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3), )
if mibBuilder.loadTexts: cCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryTable.setDescription('A table containing information about specific calls to a specific destination.')
cCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryEntry.setDescription('The information regarding a single Connection.')
cCallHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cCallHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing call disconnection events. When it reaches the maximum value, an extremely unlikely event, the agent wraps the value back to 1 and may flush existing entries.')
cCallHistorySetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistorySetupTime.setStatus('current')
if mibBuilder.loadTexts: cCallHistorySetupTime.setDescription('The value of sysUpTime when the call setup was started. This will be useful for an NMS to sort the call history entry with call setup time. Also, this object can be useful in finding large delays between the time the call was started and the time the call was connected. For ISDN media, this will be the time when the setup message was received from or sent to the network. The value of this object is the same as callActiveSetupTime in the callActiveTable')
cCallHistoryPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryPeerAddress.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryPeerAddress.setDescription('The number this call was connected to. If the number is not available, then it will have a length of zero.')
cCallHistoryPeerSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryPeerSubAddress.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryPeerSubAddress.setDescription('The subaddress this call was connected to. If the subaddress is undefined or not available, this will be a zero length string.')
cCallHistoryPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryPeerId.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryPeerId.setDescription('This is the Id value of the peer table entry to which this call was made. If a peer table entry for this call does not exist, the value of this object will be zero.')
cCallHistoryPeerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryPeerIfIndex.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryPeerIfIndex.setDescription('This is the ifIndex value of the peer table entry to which this call was made. If a peer table entry for this call does not exist, the value of this object will be zero.')
cCallHistoryLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryLogicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryLogicalIfIndex.setDescription('This is the ifIndex value of the logical interface through which this call was made. For ISDN media, this would be the ifIndex of the B channel which was used for this call. If the ifIndex value is unknown, the value of this object will be zero. For an IP call, the value will be zero.')
cCallHistoryDisconnectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryDisconnectCause.setReference('- Bellcore SR-NWT-001953, Generic Guidelines for ISDN Terminal Equipment On Basic Access Interfaces, chapter 5.2.5.8. - Bellcore SR-NWT-002343, ISDN Primary Rate Interface Generic Guidelines for Customer Premises Equipment, chapter 8.2.5.8. - ITU-T Q.931, Appendix I. - ITU-T X.25, CAUSE and DIAGNOSTIC field values. - German Telekom FTZ 1TR6, chapter 3.2.3.4.4.4.')
if mibBuilder.loadTexts: cCallHistoryDisconnectCause.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryDisconnectCause.setDescription('The encoded network cause value associated with this call. The value of this object will depend on the interface type as well as on the protocol and protocol version being used on this interface. Some references for possible cause values are given below.')
cCallHistoryDisconnectText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryDisconnectText.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryDisconnectText.setDescription('ASCII text describing the reason for call termination. This object exists because it would be impossible for a management station to store all possible cause values for all types of interfaces. It should be used only if a management station is unable to decode the value of dialCtlPeerStatsLastDisconnectCause.')
cCallHistoryConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryConnectTime.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryConnectTime.setDescription('The value of sysUpTime when the call was connected.')
cCallHistoryDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryDisconnectTime.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryDisconnectTime.setDescription('The value of sysUpTime when the call was disconnected.')
cCallHistoryCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("callback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryCallOrigin.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryCallOrigin.setDescription('The call origin.')
cCallHistoryChargedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 13), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryChargedUnits.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryChargedUnits.setDescription('The number of charged units for this connection. For incoming calls or if charging information is not supplied by the switch, the value of this object will be zero.')
cCallHistoryInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9), ("fax", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryInfoType.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryInfoType.setDescription('The information type for this call.')
cCallHistoryTransmitPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 15), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryTransmitPackets.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryTransmitPackets.setDescription('The number of packets which were transmitted while this call was active.')
cCallHistoryTransmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 16), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryTransmitBytes.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryTransmitBytes.setDescription('The number of bytes which were transmitted while this call was active.')
cCallHistoryReceivePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 17), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryReceivePackets.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryReceivePackets.setDescription('The number of packets which were received while this call was active.')
cCallHistoryReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 18), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryReceiveBytes.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryReceiveBytes.setDescription('The number of bytes which were received while this call was active.')
cCallHistoryReleaseSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("callingPartyInPstn", 1), ("callingPartyInVoip", 2), ("calledPartyInPstn", 3), ("calledPartyInVoip", 4), ("internalRelease", 5), ("internalCallControlApp", 6), ("consoleCommand", 7), ("externalRadiusServer", 8), ("externalNmsApp", 9), ("externalCallControlAgent", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryReleaseSource.setStatus('deprecated')
if mibBuilder.loadTexts: cCallHistoryReleaseSource.setDescription('Originator of the call release.')
cCallHistoryReleaseSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("callingPartyInPstn", 1), ("callingPartyInVoip", 2), ("calledPartyInPstn", 3), ("calledPartyInVoip", 4), ("internalReleaseInPotsLeg", 5), ("internalReleaseInVoipLeg", 6), ("internalCallControlApp", 7), ("internalReleaseInVoipAAA", 8), ("consoleCommand", 9), ("externalRadiusServer", 10), ("externalNmsApp", 11), ("externalCallControlAgent", 12), ("gatekeeper", 13), ("externalGKTMPServer", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryReleaseSrc.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryReleaseSrc.setDescription('Originator of the call release. Indicates the source of the call release as follows : 1) callingPartyInPstn : Calling party in PSTN. 2) callingPartyInVoip : Calling party in VoIP. 3) calledPartyInPstn : Called party in PSTN. 4) calledPartyInVoip : Called party in VoIP. 5) internalReleaseInPotsLeg : Due to an internal error in Telephony call leg. 6) internalReleaseInVoipLeg : Due to an internal error in VoIP call leg. 7) internalCallControlApp : Due to an internal error in Session Application or Tcl or VXML script originated release. 8) internalReleaseInVoipAAA : Due to an internal error in VoIP AAA module. 9) consoleCommand : Due to CLI or MML. 10) externalRadiusServer : Call failed during authorization , authentication or due to receipt of POD from the RADIUS server. 11) externalNmsApp : Due to SNMP request to clear the call. 12) externalCallControlAgent : External Call Control Agent initiated clear. 13) gatekeeper : Gatekeeper initiated clear due to receipt of Admission Reject, Disengage Request message. 14) externalGKTMPServer : External GKTMP server initiated clear due to receipt of Admission Reject message from the gatekeeper, triggered by RESPONSE.ARJ message from the GKTMP server.')
cCallHistoryIecTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 4), )
if mibBuilder.loadTexts: cCallHistoryIecTable.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryIecTable.setDescription('This table contains information about Internal Error Code(s) (IEC) which caused the call to fail.')
cCallHistoryIecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"), (0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIecIndex"))
if mibBuilder.loadTexts: cCallHistoryIecEntry.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryIecEntry.setDescription('The IEC information regarding a single call.')
cCallHistoryIecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: cCallHistoryIecIndex.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryIecIndex.setDescription('This object is used to index one or more IECs in the context of a single call. In most cases there will only be one IEC when a call fails. However, it is possible for the software processing the call to generate multiple IECs before the call ultimately fails. In that scenario, there will be multiple entries in this table related to a single call (cCallHistoryIndex) and this object will serve to uniquely identify each IEC.')
cCallHistoryIec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 4, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCallHistoryIec.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryIec.setDescription('This object reflects the Internal Error Code. The format is a string of dotted decimal numbers composed of the following components: Version.Entity.Category.Subsystem.Errorcode.Diagnostic Each component is defined as follows: Version : The version of IEC software. Entity : The network entity that originated the error. Category : The category of the error (eg, software error, hardware resource unavailable, ...) Subsystem : The subsystem in which the error occurred. Errorcode : A subsytem-specific error code. Diagnostic : An implementation-specific diagnostic code.')
cPeerGlobalConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 5))
cPeerSearchType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 25, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("datavoice", 2), ("voicedata", 3))).clone('datavoice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cPeerSearchType.setStatus('current')
if mibBuilder.loadTexts: cPeerSearchType.setDescription('Specifies the peer search preference based on the type of peers in an universal/integrated port platform. none - both voice and data peers are searched in same preference. datavoice - search data peers first. If no data peers are found, the voice peers are searched. voicedata - search voice peers first. If no voice peers are found, the data peers are searched.')
ciscoDialControlMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 25, 3))
ciscoDialControlMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 1))
ciscoDialControlMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 2))
ciscoDialControlMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 1, 1)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDialControlMibCompliance = ciscoDialControlMibCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDialControlMibCompliance.setDescription('The compliance statement for entities which implement the DIAL CONTROL MIB')
ciscoDialControlMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 1, 2)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistoryGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDialControlMibComplianceRev1 = ciscoDialControlMibComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDialControlMibComplianceRev1.setDescription('The compliance statement for entities which implement the DIAL CONTROL MIB')
ciscoDialControlMibComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 1, 3)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistoryGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDialControlMibComplianceRev2 = ciscoDialControlMibComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDialControlMibComplianceRev2.setDescription('The compliance statement for entities which implement the DIAL CONTROL MIB')
ciscoDialControlMibComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 1, 4)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistoryGroupRev2"), ("CISCO-DIAL-CONTROL-MIB", "cPeerGlobalConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDialControlMibComplianceRev3 = ciscoDialControlMibComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDialControlMibComplianceRev3.setDescription('The compliance statement for entities which implement the DIAL CONTROL MIB')
ciscoDialControlMibComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 1, 5)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistoryGroupRev2"), ("CISCO-DIAL-CONTROL-MIB", "cPeerGlobalConfigurationGroup"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryIecGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDialControlMibComplianceRev4 = ciscoDialControlMibComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoDialControlMibComplianceRev4.setDescription('The compliance statement for entities which implement the DIAL CONTROL MIB')
cCallHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 2, 1)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistorySetupTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerAddress"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerSubAddress"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerId"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerIfIndex"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryLogicalIfIndex"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectCause"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectText"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryConnectTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryChargedUnits"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryInfoType"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryTransmitPackets"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryTransmitBytes"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryReceivePackets"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryReceiveBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCallHistoryGroup = cCallHistoryGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cCallHistoryGroup.setDescription('A collection of objects providing the Call History capability.')
cCallHistoryGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 2, 2)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistorySetupTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerAddress"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerSubAddress"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerId"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerIfIndex"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryLogicalIfIndex"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectCause"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectText"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryConnectTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryChargedUnits"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryInfoType"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryTransmitPackets"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryTransmitBytes"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryReceivePackets"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryReceiveBytes"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryReleaseSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCallHistoryGroupRev1 = cCallHistoryGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cCallHistoryGroupRev1.setDescription('A collection of objects providing the Call History capability.')
cCallHistoryGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 2, 3)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistorySetupTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerAddress"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerSubAddress"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerId"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryPeerIfIndex"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryLogicalIfIndex"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectCause"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectText"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryConnectTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryDisconnectTime"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryChargedUnits"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryInfoType"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryTransmitPackets"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryTransmitBytes"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryReceivePackets"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryReceiveBytes"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryReleaseSrc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCallHistoryGroupRev2 = cCallHistoryGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryGroupRev2.setDescription('A collection of objects providing the Call History capability.')
cPeerGlobalConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 2, 4)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cPeerSearchType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPeerGlobalConfigurationGroup = cPeerGlobalConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: cPeerGlobalConfigurationGroup.setDescription('A collection of objects providing the Peer global configuration.')
cCallHistoryIecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 25, 3, 2, 5)).setObjects(("CISCO-DIAL-CONTROL-MIB", "cCallHistoryIec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCallHistoryIecGroup = cCallHistoryIecGroup.setStatus('current')
if mibBuilder.loadTexts: cCallHistoryIecGroup.setDescription('A collection of objects providing information about Internal Error Code.')
mibBuilder.exportSymbols("CISCO-DIAL-CONTROL-MIB", ciscoDialControlMib=ciscoDialControlMib, cCallHistoryTransmitBytes=cCallHistoryTransmitBytes, cCallHistoryIec=cCallHistoryIec, cCallHistoryReleaseSrc=cCallHistoryReleaseSrc, cCallHistoryDisconnectTime=cCallHistoryDisconnectTime, ciscoDialControlMibComplianceRev2=ciscoDialControlMibComplianceRev2, ciscoDialControlMibConformance=ciscoDialControlMibConformance, ciscoDialControlMibComplianceRev3=ciscoDialControlMibComplianceRev3, cCallHistoryGroup=cCallHistoryGroup, PYSNMP_MODULE_ID=ciscoDialControlMib, cCallHistoryReceivePackets=cCallHistoryReceivePackets, cCallHistoryGroupRev1=cCallHistoryGroupRev1, cPeerGlobalConfiguration=cPeerGlobalConfiguration, cCallHistorySetupTime=cCallHistorySetupTime, cCallHistoryReleaseSource=cCallHistoryReleaseSource, cCallHistoryIecEntry=cCallHistoryIecEntry, ciscoDialControlMibCompliance=ciscoDialControlMibCompliance, cCallHistoryIecTable=cCallHistoryIecTable, cCallHistoryTransmitPackets=cCallHistoryTransmitPackets, ciscoDialControlMibComplianceRev1=ciscoDialControlMibComplianceRev1, cCallHistoryCallOrigin=cCallHistoryCallOrigin, ciscoDialControlMibComplianceRev4=ciscoDialControlMibComplianceRev4, ciscoDialControlMibGroups=ciscoDialControlMibGroups, cCallHistoryPeerIfIndex=cCallHistoryPeerIfIndex, cPeerGlobalConfigurationGroup=cPeerGlobalConfigurationGroup, cCallHistory=cCallHistory, cCallHistoryIndex=cCallHistoryIndex, cCallHistoryReceiveBytes=cCallHistoryReceiveBytes, cCallHistoryGroupRev2=cCallHistoryGroupRev2, cCallHistoryPeerSubAddress=cCallHistoryPeerSubAddress, cCallHistoryIecIndex=cCallHistoryIecIndex, cCallHistoryDisconnectText=cCallHistoryDisconnectText, ciscoDialControlMibObjects=ciscoDialControlMibObjects, cPeerSearchType=cPeerSearchType, ciscoDialControlMibCompliances=ciscoDialControlMibCompliances, cCallHistoryIecGroup=cCallHistoryIecGroup, cCallHistoryConnectTime=cCallHistoryConnectTime, cCallHistoryInfoType=cCallHistoryInfoType, cCallHistoryChargedUnits=cCallHistoryChargedUnits, cCallHistoryDisconnectCause=cCallHistoryDisconnectCause, cCallHistoryEntry=cCallHistoryEntry, cCallHistoryPeerId=cCallHistoryPeerId, cCallHistoryTable=cCallHistoryTable, cCallHistoryLogicalIfIndex=cCallHistoryLogicalIfIndex, cCallHistoryPeerAddress=cCallHistoryPeerAddress)
