#
# PySNMP MIB module GUDEADS-PDU8310-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GUDEADS-PDU8310-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, Unsigned32, ModuleIdentity, enterprises, MibIdentifier, Bits, Counter32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Unsigned32", "ModuleIdentity", "enterprises", "MibIdentifier", "Bits", "Counter32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "iso", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gudeads = ModuleIdentity((1, 3, 6, 1, 4, 1, 28507))
gudeads.setRevisions(('2007-03-05 13:56',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gudeads.setRevisionsDescriptions(('$Id:$',))
if mibBuilder.loadTexts: gudeads.setLastUpdated('200703051356Z')
if mibBuilder.loadTexts: gudeads.setOrganization('Gude Analog- und Digitalsysteme GmbH')
if mibBuilder.loadTexts: gudeads.setContactInfo('http://www.gudeads.com/')
if mibBuilder.loadTexts: gudeads.setDescription('')
pdu8310AmperageEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 27, 0, 1)).setObjects(("GUDEADS-PDU8310-MIB", "pdu8310PowerActive"), ("GUDEADS-PDU8310-MIB", "pdu8310Current"), ("GUDEADS-PDU8310-MIB", "pdu8310Voltage"), ("GUDEADS-PDU8310-MIB", "pdu8310Frequency"), ("GUDEADS-PDU8310-MIB", "pdu8310PowerApparent"), ("GUDEADS-PDU8310-MIB", "pdu8310PowerReactive"))
if mibBuilder.loadTexts: pdu8310AmperageEvt1.setStatus('current')
if mibBuilder.loadTexts: pdu8310AmperageEvt1.setDescription('Event is triggered when a measured current is crossing the entered limits')
pdu8310NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 28507, 27, 2, 1, 2)).setObjects(("GUDEADS-PDU8310-MIB", "pdu8310AmperageEvt1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdu8310NotificationGroup = pdu8310NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pdu8310NotificationGroup.setDescription('')
events = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 0))
pdu8310PowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: pdu8310PowerIndex.setStatus('current')
if mibBuilder.loadTexts: pdu8310PowerIndex.setDescription('Index of Power Channel entries')
pdu8310TrapIPTable = MibTable((1, 3, 6, 1, 4, 1, 28507, 27, 1, 1, 1, 2), )
if mibBuilder.loadTexts: pdu8310TrapIPTable.setStatus('current')
if mibBuilder.loadTexts: pdu8310TrapIPTable.setDescription('list of all Trap receiver')
pdu8310Current = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 5), Unsigned32()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310Current.setStatus('current')
if mibBuilder.loadTexts: pdu8310Current.setDescription('Actual Curent on Power Channel.')
gadsPDU8310 = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27))
pdu8310Voltage = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 6), Unsigned32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310Voltage.setStatus('current')
if mibBuilder.loadTexts: pdu8310Voltage.setDescription('Actual Voltage on Power Channel')
pdu8310TrapIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28507, 27, 1, 1, 1, 2, 1), ).setIndexNames((0, "GUDEADS-PDU8310-MIB", "pdu8310TrapIPIndex"))
if mibBuilder.loadTexts: pdu8310TrapIPEntry.setStatus('current')
if mibBuilder.loadTexts: pdu8310TrapIPEntry.setDescription('an entry containing management informations regarding the list of trap receivers')
pdu8310PowerTable = MibTable((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2), )
if mibBuilder.loadTexts: pdu8310PowerTable.setStatus('current')
if mibBuilder.loadTexts: pdu8310PowerTable.setDescription('All available Channel Interfaces.')
pdu8310PowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1), ).setIndexNames((0, "GUDEADS-PDU8310-MIB", "pdu8310PowerIndex"))
if mibBuilder.loadTexts: pdu8310PowerEntry.setStatus('current')
if mibBuilder.loadTexts: pdu8310PowerEntry.setDescription('An entry containing management information applicable to a particular Power Channel.')
pdu8310TrapIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: pdu8310TrapIPIndex.setStatus('current')
if mibBuilder.loadTexts: pdu8310TrapIPIndex.setDescription('A unique value, greater than zero, for each receiver slot.')
pdu8310DeviceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1, 2))
pdu8310ExtActors = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1, 4))
pdu8310ExtSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1, 6))
pdu8310SNMPaccess = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1, 1, 1))
pdu8310TrapCtrl = MibScalar((1, 3, 6, 1, 4, 1, 28507, 27, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdu8310TrapCtrl.setStatus('current')
if mibBuilder.loadTexts: pdu8310TrapCtrl.setDescription('0 = off 1 = Ver. 1 2 = Ver. 2c')
pdu8310Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1))
pdu8310CommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1, 1))
pdu8310PowerChan = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1))
pdu8310IntActors = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1, 3))
pdu8310ChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310ChanStatus.setStatus('current')
if mibBuilder.loadTexts: pdu8310ChanStatus.setDescription('0 = data not active, 1 = data valid')
pdu8310ActivePowerChan = MibScalar((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310ActivePowerChan.setStatus('current')
if mibBuilder.loadTexts: pdu8310ActivePowerChan.setDescription('Number of suppported Power Channels.')
pdu8310EnergyActive = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 3), Unsigned32()).setUnits('Wh').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310EnergyActive.setStatus('current')
if mibBuilder.loadTexts: pdu8310EnergyActive.setDescription('Total accumulated Active Energy of Power Channel.')
pdu8310TrapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdu8310TrapAddr.setStatus('current')
if mibBuilder.loadTexts: pdu8310TrapAddr.setDescription("DNS name or IP address specifying one Trap receiver slot. A port can optionally be specified: 'name:port' An empty string disables this slot.")
pdu8310PowerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 4), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310PowerActive.setStatus('current')
if mibBuilder.loadTexts: pdu8310PowerActive.setDescription('Active Power')
pdu8310IntSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5))
pdu8310PowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 8), Integer32()).setUnits('0.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310PowerFactor.setStatus('current')
if mibBuilder.loadTexts: pdu8310PowerFactor.setDescription('Power Factor of Channel between -1.0 and 1.00')
pdu8310Conf = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 2))
pdu8310Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 2, 1))
pdu8310Compls = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 27, 2, 2))
pdu8310BasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 28507, 27, 2, 1, 1)).setObjects(("GUDEADS-PDU8310-MIB", "pdu8310TrapCtrl"), ("GUDEADS-PDU8310-MIB", "pdu8310TrapAddr"), ("GUDEADS-PDU8310-MIB", "pdu8310ActivePowerChan"), ("GUDEADS-PDU8310-MIB", "pdu8310ChanStatus"), ("GUDEADS-PDU8310-MIB", "pdu8310EnergyActive"), ("GUDEADS-PDU8310-MIB", "pdu8310PowerActive"), ("GUDEADS-PDU8310-MIB", "pdu8310Current"), ("GUDEADS-PDU8310-MIB", "pdu8310Voltage"), ("GUDEADS-PDU8310-MIB", "pdu8310Frequency"), ("GUDEADS-PDU8310-MIB", "pdu8310PowerFactor"), ("GUDEADS-PDU8310-MIB", "pdu8310Pangle"), ("GUDEADS-PDU8310-MIB", "pdu8310PowerApparent"), ("GUDEADS-PDU8310-MIB", "pdu8310PowerReactive"), ("GUDEADS-PDU8310-MIB", "pdu8310EnergyReactive"), ("GUDEADS-PDU8310-MIB", "pdu8310EnergyActiveResettable"), ("GUDEADS-PDU8310-MIB", "pdu8310EnergyReactiveResettable"), ("GUDEADS-PDU8310-MIB", "pdu8310ResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdu8310BasicGroup = pdu8310BasicGroup.setStatus('current')
if mibBuilder.loadTexts: pdu8310BasicGroup.setDescription('Basic objects.')
pdu8310Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 7), Unsigned32()).setUnits('0.01 hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310Frequency.setStatus('current')
if mibBuilder.loadTexts: pdu8310Frequency.setDescription('Freqency of Power Channel')
pdu8310Pangle = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 9), Integer32()).setUnits('0.1 degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310Pangle.setStatus('current')
if mibBuilder.loadTexts: pdu8310Pangle.setDescription('Phase Angle between Voltage and L Line Current between -180.0 and 180.0')
pdu8310PowerApparent = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 10), Unsigned32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310PowerApparent.setStatus('current')
if mibBuilder.loadTexts: pdu8310PowerApparent.setDescription('L Line Mean Apparent Power')
pdu8310PowerReactive = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 11), Unsigned32()).setUnits('VAR').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310PowerReactive.setStatus('current')
if mibBuilder.loadTexts: pdu8310PowerReactive.setDescription('L Line Mean Reactive Power')
pdu8310EnergyReactive = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 12), Unsigned32()).setUnits('VARh').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310EnergyReactive.setStatus('current')
if mibBuilder.loadTexts: pdu8310EnergyReactive.setDescription('Total accumulated Reactive Energy of Power Channel.')
pdu8310EnergyActiveResettable = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 13), Unsigned32()).setUnits('Wh').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310EnergyActiveResettable.setStatus('current')
if mibBuilder.loadTexts: pdu8310EnergyActiveResettable.setDescription('Resettable accumulated Active Energy of Power Channel.')
pdu8310EnergyReactiveResettable = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 14), Unsigned32()).setUnits('VARh').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310EnergyReactiveResettable.setStatus('current')
if mibBuilder.loadTexts: pdu8310EnergyReactiveResettable.setDescription('Resettable accumulated Reactive Energy of Power Channel.')
pdu8310ResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 27, 1, 5, 1, 2, 1, 15), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdu8310ResetTime.setStatus('current')
if mibBuilder.loadTexts: pdu8310ResetTime.setDescription('Time in seconds since last Energy Counter reset.')
mibBuilder.exportSymbols("GUDEADS-PDU8310-MIB", events=events, gadsPDU8310=gadsPDU8310, pdu8310PowerIndex=pdu8310PowerIndex, pdu8310Objects=pdu8310Objects, pdu8310TrapCtrl=pdu8310TrapCtrl, pdu8310Conf=pdu8310Conf, pdu8310Frequency=pdu8310Frequency, pdu8310NotificationGroup=pdu8310NotificationGroup, pdu8310EnergyActiveResettable=pdu8310EnergyActiveResettable, pdu8310Voltage=pdu8310Voltage, pdu8310ActivePowerChan=pdu8310ActivePowerChan, pdu8310ChanStatus=pdu8310ChanStatus, pdu8310EnergyReactive=pdu8310EnergyReactive, pdu8310PowerTable=pdu8310PowerTable, PYSNMP_MODULE_ID=gudeads, pdu8310PowerEntry=pdu8310PowerEntry, pdu8310BasicGroup=pdu8310BasicGroup, pdu8310ExtSensors=pdu8310ExtSensors, pdu8310SNMPaccess=pdu8310SNMPaccess, pdu8310PowerActive=pdu8310PowerActive, pdu8310Pangle=pdu8310Pangle, pdu8310TrapIPEntry=pdu8310TrapIPEntry, pdu8310PowerReactive=pdu8310PowerReactive, pdu8310EnergyActive=pdu8310EnergyActive, pdu8310EnergyReactiveResettable=pdu8310EnergyReactiveResettable, pdu8310TrapIPIndex=pdu8310TrapIPIndex, pdu8310ResetTime=pdu8310ResetTime, pdu8310PowerFactor=pdu8310PowerFactor, pdu8310DeviceConfig=pdu8310DeviceConfig, pdu8310AmperageEvt1=pdu8310AmperageEvt1, pdu8310Compls=pdu8310Compls, pdu8310PowerChan=pdu8310PowerChan, pdu8310PowerApparent=pdu8310PowerApparent, pdu8310TrapAddr=pdu8310TrapAddr, pdu8310IntSensors=pdu8310IntSensors, pdu8310ExtActors=pdu8310ExtActors, pdu8310IntActors=pdu8310IntActors, gudeads=gudeads, pdu8310CommonConfig=pdu8310CommonConfig, pdu8310Current=pdu8310Current, pdu8310Groups=pdu8310Groups, pdu8310TrapIPTable=pdu8310TrapIPTable)
