#
# PySNMP MIB module CISCO-FLEX-LINKS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FLEX-LINKS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Cisco2KVlanList, = mibBuilder.importSymbols("CISCO-TC", "Cisco2KVlanList")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
VlanIdOrNone, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Integer32, TimeTicks, Gauge32, ModuleIdentity, Counter32, Bits, Counter64, Unsigned32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "TimeTicks", "Gauge32", "ModuleIdentity", "Counter32", "Bits", "Counter64", "Unsigned32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier")
TruthValue, TextualConvention, StorageType, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "StorageType", "RowStatus", "DisplayString")
ciscoFlexLinksMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 471))
ciscoFlexLinksMIB.setRevisions(('2010-02-04 00:00', '2005-04-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFlexLinksMIB.setRevisionsDescriptions(("Added the followings groups: ciscoFlexLinksMmuPrimaryVlanGroup, ciscoFlexLinksPreemptionGroup, ciscoFlexLinksPreferVlanGroup. Added enumeration 'vlbAll', 'vlbConfig' and 'vlbPreempt' to cflIfStatus.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFlexLinksMIB.setLastUpdated('201002040000Z')
if mibBuilder.loadTexts: ciscoFlexLinksMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFlexLinksMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoFlexLinksMIB.setDescription('This MIB module is for configuration and status query of Flex Links feature on the Cisco device. Flex Links are a pair of Layer 2 interfaces, where one interface is configured to act as a backup to the other. The feature provides an alternative solution to the Spanning Tree Protocol (STP), allowing users to turn off STP and still provide basic link redundancy. Flex Links are typically configured in service provider or enterprise networks where users do not want to run STP on the device.')
ciscoFlexLinksMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 471, 0))
ciscoFlexLinksMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 471, 1))
ciscoFlexLinksMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 471, 2))
cflConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1))
cflStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 2))
cflIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 1), )
if mibBuilder.loadTexts: cflIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigTable.setDescription('This table allows user to configure Flex Links. The Flex Links feature requires interface pairs to be setup. This table allows user to specify such interface pairs. An interface can become part of only one such interface pair at any given time.')
cflIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-FLEX-LINKS-MIB", "cflIfConfigPrimary"))
if mibBuilder.loadTexts: cflIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigEntry.setDescription('An entry containing information about Flex Links configuration. Each entry configures a pair of interfaces for a Flex Links. Only those Layer 2 interfaces which are capable of performing Flex Links operation may be configured in this table. Once an interface is configured as part of a Flex Links pair, such an interface, can not be configured as a part of other Flex Links pairs.')
cflIfConfigPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cflIfConfigPrimary.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigPrimary.setDescription('The object indicates the primary interface in this Flex Links pair.')
cflIfConfigBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cflIfConfigBackUp.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigBackUp.setDescription("The object indicates the back up interface in this Flex Links pair. The value of this object is changed to 0 (zero) if this interface is removed from the ifTable. The SNMP agent is responsible for updating this object's value once the interface is added to the ifTable. The value of 0 (zero) cannot be set.")
cflIfConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cflIfConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigStorageType.setDescription('The storage type for this conceptual row.')
cflIfConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cflIfConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigStatus.setDescription("The object to manage this RowStatus entry. This object must be set to 'creatAndGo' to create an entry and set to 'destroy' to delete an entry. The other objects in this conceptual row can be modified any time, even when the value of this entry RowStatus object is 'active'.")
cflEnableStatusChangeNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cflEnableStatusChangeNotif.setStatus('current')
if mibBuilder.loadTexts: cflEnableStatusChangeNotif.setDescription("This variable indicates whether the system produces the cflIfStatusChangeNotif. A value of 'false' will prevent cflIfStatusChangeNotif.")
cflIfConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 3), )
if mibBuilder.loadTexts: cflIfConfigExtTable.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigExtTable.setDescription('This table contains management information, such as of MAC address-table Move Update(MMU), preemption mechanism, VLAN load balancing of Flex Links pair, of interfaces which are capable of supporting these features.')
cflIfConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-FLEX-LINKS-MIB", "cflIfConfigPrimary"))
if mibBuilder.loadTexts: cflIfConfigExtEntry.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigExtEntry.setDescription('An entry containing Flex Links management information for a particular interface.')
cflIfConfigMmuPrimaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 3, 1, 1), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cflIfConfigMmuPrimaryVlan.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigMmuPrimaryVlan.setDescription('The object specifies the MAC address-table Move Update primary VLAN for the Flex Links interface pair. A value of zero indicates that no primary VLAN has been configured for MAC address-table Move Update.')
cflIfConfigPreemptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("forced", 2), ("bandwidth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cflIfConfigPreemptionMode.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigPreemptionMode.setDescription('The object specifies the preemption mechanism for a Flex Link interface pair. off - No preemption happens from active interface to backup interface. forced - The active interface always preempts the backup interface. The preemption occurs after the time specified in cflIfConfigPreemptionDelay. bandwidth - The interface with higher bandwidth always acts as the active interface.')
cflIfConfigPreemptionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 3, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cflIfConfigPreemptionDelay.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigPreemptionDelay.setDescription('The object specifies the delay time until an interface preempts another interface for a Flex Link interface pair.')
cflIfConfigPrefer2kVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 3, 1, 4), Cisco2KVlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cflIfConfigPrefer2kVlan.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigPrefer2kVlan.setDescription('A string of octets containing one bit per perferred VLAN of VLANs with VlanId values of 0 through 2047 for VLAN load balancing.')
cflIfConfigPrefer4kVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 1, 3, 1, 5), Cisco2KVlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cflIfConfigPrefer4kVlan.setStatus('current')
if mibBuilder.loadTexts: cflIfConfigPrefer4kVlan.setDescription('A string of octets containing one bit per perferred VLAN of VLANs with VlanId values of 2048 through 4095 for VLAN load balancing.')
cflIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 2, 1), )
if mibBuilder.loadTexts: cflIfStatusTable.setStatus('current')
if mibBuilder.loadTexts: cflIfStatusTable.setDescription('A list of interfaces which are members of Flex Links.')
cflIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-FLEX-LINKS-MIB", "cflIfIndex"))
if mibBuilder.loadTexts: cflIfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cflIfStatusEntry.setDescription('An entry, containing status information about a Flex Links interface. Entry is created when an interface is configured as a member of a Flex Links. When an entry is created in the cflIfConfigTable, entries corresponding to cflIfConfigPrimary and cflIfConfigBackUp are created in this table. Entry is deleted when an interface is removed from a Flex Links. When an entry is removed from the cflIfConfigTable, entries corresponding to cflIfConfigPrimary and cflIfConfigBackUp are deleted from this table.')
cflIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cflIfIndex.setStatus('current')
if mibBuilder.loadTexts: cflIfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. cflIfIndex is the same as the ifIndex of the interface associated with a Flex Links.')
cflIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 471, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("forwarding", 1), ("blocking", 2), ("down", 3), ("waitingToSync", 4), ("waitingForPeerStrate", 5), ("unknown", 6), ("vlbAll", 7), ("vlbConfig", 8), ("vlbPreempt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cflIfStatus.setStatus('current')
if mibBuilder.loadTexts: cflIfStatus.setDescription("The status of an interface which is participating in Flex Links operation. A value of 'forwarding' indicates that, the interface is participating in Flex Links operation and is actively forwarding traffic. A value of 'blocking' indicates that, interface is participating in Flex Links operation and is ready to forward traffic if the interface it backs up in Flex Links operation goes down. A value of 'down' indicates that, the interface participating in Flex Links operation has gone down. A value of 'waitingToSync' indicates that, the interface is participating in Flex Links operation and is waiting to sync with its peer interface. A value of 'waitingForPeerState' indicates that, the interface is participating in Flex Links operation and is waiting for its peer's state. A value of 'unknown' indicates that, the interface is participating Flex Links operation and has entered an unknown state. A value of 'vlbAll' indicates that, the interface is linkup and VLANs preferred on the peer interface are moved to this interface of the Flex Link pair. This means that this interface carries all preferred VLANs of the Flex Link pair. A value of 'vlbConfig' indicates that, the interface is linkup and VLANs preferred on this interface have moved to forwarding state on the interface. A value of 'vlbPreempt' indicates that, the interface is linkup and waiting for the timer to expire to move into 'vlbConfig' state.")
cflIfStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 471, 0, 1)).setObjects(("CISCO-FLEX-LINKS-MIB", "cflIfStatus"))
if mibBuilder.loadTexts: cflIfStatusChangeNotif.setStatus('current')
if mibBuilder.loadTexts: cflIfStatusChangeNotif.setDescription('A cflIfStatusChangeNotif is generated when the value of cflIfStatus changes.')
ciscoFlexLinksMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 1))
ciscoFlexLinksMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 2))
ciscoFlexLinksMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 1, 1)).setObjects(("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksIfConfigGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksIfStatusGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksEnableNotifGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksMIBCompliance = ciscoFlexLinksMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoFlexLinksMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-FLEX-LINKS-MIB. This compliance is deprecated and replaced by ciscoFlexLinksMIBCompliance2.')
ciscoFlexLinksMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 1, 2)).setObjects(("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksIfConfigGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksIfStatusGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksEnableNotifGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksNotifGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksMmuPrimaryVlanGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksPreemptionGroup"), ("CISCO-FLEX-LINKS-MIB", "ciscoFlexLinksPreferVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksMIBCompliance2 = ciscoFlexLinksMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: ciscoFlexLinksMIBCompliance2.setDescription('The compliance statement for entities which implement the CISCO-FLEX-LINKS-MIB.')
ciscoFlexLinksIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 2, 1)).setObjects(("CISCO-FLEX-LINKS-MIB", "cflIfConfigBackUp"), ("CISCO-FLEX-LINKS-MIB", "cflIfConfigStorageType"), ("CISCO-FLEX-LINKS-MIB", "cflIfConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksIfConfigGroup = ciscoFlexLinksIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFlexLinksIfConfigGroup.setDescription('A collection of objects providing interface configuration information for Flex Links.')
ciscoFlexLinksIfStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 2, 2)).setObjects(("CISCO-FLEX-LINKS-MIB", "cflIfStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksIfStatusGroup = ciscoFlexLinksIfStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFlexLinksIfStatusGroup.setDescription('A collection of objects providing interface status information for Flex Links.')
ciscoFlexLinksEnableNotifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 2, 3)).setObjects(("CISCO-FLEX-LINKS-MIB", "cflEnableStatusChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksEnableNotifGroup = ciscoFlexLinksEnableNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFlexLinksEnableNotifGroup.setDescription('A collection of objects providing enabling/disabling of the status change notifications for Flex Links.')
ciscoFlexLinksNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 2, 4)).setObjects(("CISCO-FLEX-LINKS-MIB", "cflIfStatusChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksNotifGroup = ciscoFlexLinksNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFlexLinksNotifGroup.setDescription('A collection of notifications providing the status change for Flex Links.')
ciscoFlexLinksMmuPrimaryVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 2, 5)).setObjects(("CISCO-FLEX-LINKS-MIB", "cflIfConfigMmuPrimaryVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksMmuPrimaryVlanGroup = ciscoFlexLinksMmuPrimaryVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFlexLinksMmuPrimaryVlanGroup.setDescription('A collection of objects providing interface MMU primary VLAN information of Flex Links.')
ciscoFlexLinksPreemptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 2, 6)).setObjects(("CISCO-FLEX-LINKS-MIB", "cflIfConfigPreemptionMode"), ("CISCO-FLEX-LINKS-MIB", "cflIfConfigPreemptionDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksPreemptionGroup = ciscoFlexLinksPreemptionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFlexLinksPreemptionGroup.setDescription('A collection of objects providing interface preemption information of Flex Links.')
ciscoFlexLinksPreferVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 471, 2, 2, 7)).setObjects(("CISCO-FLEX-LINKS-MIB", "cflIfConfigPrefer2kVlan"), ("CISCO-FLEX-LINKS-MIB", "cflIfConfigPrefer4kVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlexLinksPreferVlanGroup = ciscoFlexLinksPreferVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFlexLinksPreferVlanGroup.setDescription('A collection of objects providing interface preferred VLANs of vlan load balancing information of Flex Links.')
mibBuilder.exportSymbols("CISCO-FLEX-LINKS-MIB", cflIfConfigStorageType=cflIfConfigStorageType, cflIfStatus=cflIfStatus, cflIfStatusChangeNotif=cflIfStatusChangeNotif, cflIfIndex=cflIfIndex, cflIfConfigPreemptionMode=cflIfConfigPreemptionMode, ciscoFlexLinksMIBCompliances=ciscoFlexLinksMIBCompliances, ciscoFlexLinksEnableNotifGroup=ciscoFlexLinksEnableNotifGroup, ciscoFlexLinksMmuPrimaryVlanGroup=ciscoFlexLinksMmuPrimaryVlanGroup, cflStatus=cflStatus, cflIfConfigPrefer4kVlan=cflIfConfigPrefer4kVlan, ciscoFlexLinksMIBConformance=ciscoFlexLinksMIBConformance, cflIfStatusTable=cflIfStatusTable, cflEnableStatusChangeNotif=cflEnableStatusChangeNotif, cflIfConfigExtTable=cflIfConfigExtTable, ciscoFlexLinksPreferVlanGroup=ciscoFlexLinksPreferVlanGroup, ciscoFlexLinksMIB=ciscoFlexLinksMIB, ciscoFlexLinksMIBNotifs=ciscoFlexLinksMIBNotifs, ciscoFlexLinksMIBCompliance2=ciscoFlexLinksMIBCompliance2, cflIfConfigExtEntry=cflIfConfigExtEntry, ciscoFlexLinksNotifGroup=ciscoFlexLinksNotifGroup, cflIfConfigPrefer2kVlan=cflIfConfigPrefer2kVlan, PYSNMP_MODULE_ID=ciscoFlexLinksMIB, cflIfStatusEntry=cflIfStatusEntry, cflIfConfigPreemptionDelay=cflIfConfigPreemptionDelay, ciscoFlexLinksPreemptionGroup=ciscoFlexLinksPreemptionGroup, cflIfConfigStatus=cflIfConfigStatus, cflIfConfigTable=cflIfConfigTable, ciscoFlexLinksIfConfigGroup=ciscoFlexLinksIfConfigGroup, cflIfConfigMmuPrimaryVlan=cflIfConfigMmuPrimaryVlan, ciscoFlexLinksMIBObjects=ciscoFlexLinksMIBObjects, cflIfConfigEntry=cflIfConfigEntry, cflIfConfigPrimary=cflIfConfigPrimary, ciscoFlexLinksMIBCompliance=ciscoFlexLinksMIBCompliance, ciscoFlexLinksIfStatusGroup=ciscoFlexLinksIfStatusGroup, ciscoFlexLinksMIBGroups=ciscoFlexLinksMIBGroups, cflConfig=cflConfig, cflIfConfigBackUp=cflIfConfigBackUp)
