#
# PySNMP MIB module ES-1000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES-1000-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, Gauge32, iso, Counter32, Counter64, enterprises, Bits, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, NotificationType, IpAddress, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Gauge32", "iso", "Counter32", "Counter64", "enterprises", "Bits", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "NotificationType", "IpAddress", "Unsigned32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mcData = MibIdentifier((1, 3, 6, 1, 4, 1, 289))
commDev = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2))
fibreChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1))
fcSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1))
es_1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3)).setLabel("es-1000")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("yes", 1), ("no", 2))

class Es1000SysOperStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operational", 1), ("redundant-failure", 2), ("minor-failure", 3), ("major-failure", 4), ("not-operational", 5))

class Es1000SysState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("coming-online", 2), ("offline", 3), ("going-offline", 4))

class Es1000CompCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 5, 6, 13, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("comp-ctp", 2), ("comp-fan", 5), ("comp-power", 6), ("comp-thermal", 13), ("comp-gbic-none", 16), ("comp-gbic-cu-db9", 17), ("comp-gbic-cu-hssdc", 18), ("comp-gbic-opt-lw-1g", 19), ("comp-gbic-serial-id", 20), ("comp-gbic-opt-sw-1g", 21), ("comp-gbic-opt-lw-2g", 22), ("comp-gbic-opt-sw-2g", 23))

class Es1000CompPosition(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 9)

class Es1000CompStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("update-busy", 2), ("failed", 3))

class Es1000PortCount(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 9)

class Es1000PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 9)

class Es1000PortNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8)

class Es1000PortPhyState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("psNotInstalled", 1), ("psAvailable", 2), ("psBlocked", 3), ("psUnavailable", 4), ("psLinkFailure", 5), ("psLinkFailLOL", 6), ("psIntDiags", 7), ("psExtLoop", 8), ("psPortFail", 9), ("psSR", 10), ("psLR", 11), ("psPortBypassedLipF7", 12), ("psPortBypassedLipF8", 13), ("psPortBypassedOSError", 14), ("psPortBypassedCRCError", 15), ("psLinkFailLOSync", 16), ("psLinkFailLOSignal", 17), ("psTxFault", 18), ("psTimeout", 19), ("psProtocolError", 20), ("psRxOLS", 21), ("psRxNOS", 22), ("psRxLR", 23), ("psBBCredit", 24), ("psFatalError", 25))

class Es1000PortStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4))

class Es1000PortAdmStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3))

class Es1000LoopStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("loop-DOWN", 1), ("loop-LIP", 2), ("loop-LISM", 3), ("loop-LIFA", 4), ("loop-LIPA", 5), ("loop-LIHA", 6), ("loop-LISA", 7), ("loop-LIRP", 8), ("loop-LILP", 9), ("loop-FAN", 10), ("loop-ACTIVE", 11), ("loop-READY", 12))

class Es1000LoopMasterWWN(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Es1000LoopPortALPA(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 126)

es1000Sys = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1))
es1000Comp = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2))
es1000Port = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3))
es1000Loop = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4))
es1000Acct = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5))
es1000SysCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysCurrentDate.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysCurrentDate.setDescription('The current date information.')
es1000SysBootDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysBootDate.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysBootDate.setDescription('The date and time of the last IPL.')
es1000SysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysFirmwareVersion.setDescription('The current version of the firmware.')
es1000SysTypeNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysTypeNum.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysTypeNum.setDescription('This object identifies ASCII type number for the unit (ex. 001000).')
es1000SysModelNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysModelNum.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysModelNum.setDescription('This object identifies ASCII model number for the unit (ex. 001).')
es1000SysMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysMfg.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysMfg.setDescription('This object identifies ASCII manufacturer for the unit (ex. MCD).')
es1000SysPlantOfMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysPlantOfMfg.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysPlantOfMfg.setDescription('This object identifies ASCII plant of manufacturer for the unit (ex. 01).')
es1000SysSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysSeqNum.setDescription('This object identifies ASCII sequence number for the unit (ex. 000000000001).')
es1000SysEcLevel = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysEcLevel.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysEcLevel.setDescription('This object identifies ASCII EC level ID for the unit (format: xyymmdd, x=millennium).')
es1000SysOemSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysOemSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysOemSerialNum.setDescription('This object identifies ASCII OEM serial number for the unit (format: xyymmdd, x=millennium).')
es1000SysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 11), Es1000SysOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysOperStatus.setDescription('The current operational status of the switch. The values are defined as follows: operational(1), redundant-failure(2), minor-failure(3), major-failure(4), and not-operational(5).')
es1000SysState = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 12), Es1000SysState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysState.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysState.setDescription('If the edOperStatus of the switch is operational, the switch will be in one of the four states: online(1), coming-online(2), offline(3), and going-offline(4).')
es1000SysAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000SysAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es1000SysAdmStatus.setDescription('The desired administrative status of the switch. A management station may place the switch in a desired state by setting this object accordingly. The desired administrative status are online(1) and offline(2). Online means setting the switch to be accessible by an external Fibre Channel port, and offline means setting the switch to be inaccessible.')
es1000CompTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: es1000CompTable.setStatus('mandatory')
if mibBuilder.loadTexts: es1000CompTable.setDescription('A table that contains one entry for each component.')
es1000CompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000CompCode"), (0, "ES-1000-MIB", "es1000CompPosition"))
if mibBuilder.loadTexts: es1000CompEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es1000CompEntry.setDescription('An entry containing the service parameters of the component.')
es1000CompCode = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1, 1, 1), Es1000CompCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000CompCode.setStatus('mandatory')
if mibBuilder.loadTexts: es1000CompCode.setDescription('Component. A hardware unit of the product. Each component defined in this MIB has a fixed COMPONENT code, except for port components which vary based on the installed GBIC. The values are defined as follows: comp-ctp(2), comp-fan(5), comp-power(6), comp-thermal(13), comp-gbic-none(16), comp-gbic-cu-db9(17), comp-gbic-cu-hssdc(18), comp-gbic-opt-lw-1g(19), comp-gbic-serial(20), comp-gbic-opt-sw-1g(21), comp-gbic-opt-lw-2g(22), comp-gbic-opt-sw-2g(23)')
es1000CompPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1, 1, 2), Es1000CompPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000CompPosition.setStatus('mandatory')
if mibBuilder.loadTexts: es1000CompPosition.setDescription('This object identifies the position of the component. CTP components start from 1 to 1, fans from 1 to 6, power supplies from 1 to 2, thermal sensors from 1 to 1, port GBICs from 1 to 9.')
es1000CompStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1, 1, 3), Es1000CompStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000CompStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es1000CompStatus.setDescription('This object identifies the operational status of the component. The active(1) state indicates that the current component is active. The update-busy(2) state indicates that the component is in the updating process. The failed(3) state indicates the current component is failed.')
es1000PortBportCount = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 1), Es1000PortCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportCount.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportCount.setDescription('The number of physical B_Ports available.')
es1000PortHportCount = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 2), Es1000PortCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportCount.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportCount.setDescription('The number of physical H_Ports available.')
es1000PortBportTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3), )
if mibBuilder.loadTexts: es1000PortBportTable.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportTable.setDescription('A table that contains one entry for each B_Port.')
es1000PortBportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000PortBportIndex"))
if mibBuilder.loadTexts: es1000PortBportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportEntry.setDescription('An entry containing the information for the B_Port.')
es1000PortBportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportIndex.setDescription('This object identifies the B_Port.')
es1000PortBportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportNumber.setDescription('This object identifies the B_Port number.')
es1000PortBportPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 3), Es1000PortPhyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportPhyState.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportPhyState.setDescription('This object identifies the physical state of the B_Port.')
es1000PortBportOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 4), Es1000PortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportOpStatus.setDescription('This object identifies the operational status of the B_Port. The online(1) state indicates that user frames can be passed.')
es1000PortBportAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 5), Es1000PortAdmStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortBportAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportAdmStatus.setDescription('The desired state of the B_Port. A management station may place the B_Port in a desired state by setting this object accordingly. The testing(3) state indicates that no user frames can be passed. As the result of either explicit management action or per configuration information accessible by the B_Port, the es1000PortBportAdmStatus is changed to either the online(1) or testing(3) states, or remains in the offline(2) state.')
es1000PortBportName = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortBportName.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportName.setDescription('The desired name of the B_Port.')
es1000PortBportBlockedState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortBportBlockedState.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortBportBlockedState.setDescription('The desired blocked state of the B_Port. Blocking a B_Port prevents it from communicating with its attached E_Port. A blocked B_Port will continuously transmit the Off-Line Sequence (OLS).')
es1000PortHportTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4), )
if mibBuilder.loadTexts: es1000PortHportTable.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportTable.setDescription('A table that contains one entry for each H_Port.')
es1000PortHportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000PortHportIndex"))
if mibBuilder.loadTexts: es1000PortHportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportEntry.setDescription('An entry containing the information for the H_Port.')
es1000PortHportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportIndex.setDescription('This object identifies the H_Port.')
es1000PortHportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportNumber.setDescription('This object identifies the H_Port number.')
es1000PortHportPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 3), Es1000PortPhyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportPhyState.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportPhyState.setDescription('This object identifies the physical state of the H_Port.')
es1000PortHportOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 4), Es1000PortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportOpStatus.setDescription('This object identifies the operational status of the H_Port. The online(1) state indicates that user frames can be passed.')
es1000PortHportAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 5), Es1000PortAdmStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportAdmStatus.setDescription('The desired state of the H_Port. A management station may place the H_Port in a desired state by setting this object accordingly. The testing(3) state indicates that no user frames can be passed. As the result of either explicit management action or per configuration information accessible by the switch, the es1000PortHportAdmStatus is changed to either the online(1) or testing(3) states, or remains in the offline(2) state.')
es1000PortHportName = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportName.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportName.setDescription('The desired name of the H_Port.')
es1000PortHportBypassedState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportBypassedState.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportBypassedState.setDescription('The desired bypassed state of the H_Port. Bypassing an H_Port prevents an attached device from communicating with the switch or communicating with any other device attached to the switch. Bypassing a port causes the incoming signal from an attached device to not placed on the Loop.')
es1000PortHportValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportValidation.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportValidation.setDescription('The desired port validation state of the H_Port. If enabled, then a more rigorous process of validating the attached device is performed before insertion into the Loop.')
es1000PortHportLipOnInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportLipOnInsertion.setStatus('mandatory')
if mibBuilder.loadTexts: es1000PortHportLipOnInsertion.setDescription('The desired LIP on Insertion state of the H_Port. If enabled, a LIP will be automatically sent after any port insertion, port bypass, or manual GBIC installation or removal.')
es1000LoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 1), Es1000LoopStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopStatus.setDescription('The current loop status of the switch. The values are defined as follows: DOWN(1), LIP(2), LISM(3), LIFA(4), LIPA(5), LIHA(6), LISA(7), LIRP(8), LILP(9), FAN(10), ACTIVE(11), and READY(12).')
es1000LoopMasterWWN = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 2), Es1000LoopMasterWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopMasterWWN.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopMasterWWN.setDescription('The loop master worldwide name. If the loop master is unknown, then the worldwide name will be all zeros.')
es1000LoopSwitched = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopSwitched.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopSwitched.setDescription('Indicates whether switching mode is enabled. If enabled, each pair of communicating H_Ports may share the 100 Mbyte bandwidth. If not enabled, all devices on the loop share the 100 Mbyte bandwidth available on the loop.')
es1000LoopPrincipal = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopPrincipal.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopPrincipal.setDescription('Indicates whether the switch is operating as the principal ES-1000 on the loop.')
es1000LoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5), )
if mibBuilder.loadTexts: es1000LoopPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopPortTable.setDescription('A table that contains the port-to-ALPA mapping for each H_Port on the loop.')
es1000LoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000LoopPortIndex"))
if mibBuilder.loadTexts: es1000LoopPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopPortEntry.setDescription('An entry containing the ALPA information for the H_Port.')
es1000LoopPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopPortIndex.setDescription('This object identifies the Loop port entry.')
es1000LoopPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopPortNumber.setDescription('This object identifies the H_Port number.')
es1000LoopPortALPA = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5, 1, 3), Es1000LoopPortALPA()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopPortALPA.setStatus('mandatory')
if mibBuilder.loadTexts: es1000LoopPortALPA.setDescription("This object identifies the ALPA's associated with the H_Port.")
es1000AcctBportTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1), )
if mibBuilder.loadTexts: es1000AcctBportTable.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportTable.setDescription("A table that contains B_Port accounting information recorded since the switch IPL'd.")
es1000AcctBportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000AcctBportIndex"))
if mibBuilder.loadTexts: es1000AcctBportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportEntry.setDescription('An entry containing accounting information for each B_Port.')
es1000AcctBportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportIndex.setDescription('This object identifies the B_Port.')
es1000AcctBportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportNumber.setDescription('This object identifies the B_Port number.')
es1000AcctBportLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportLinkFailures.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportLinkFailures.setDescription('This object counts the number of Link Failures detected by this B_Port.')
es1000AcctBportSyncLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportSyncLosses.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportSyncLosses.setDescription('This object counts the number of loss of synchronization detected by this B_Port.')
es1000AcctBportSigLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportSigLosses.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportSigLosses.setDescription('This object counts the number of loss of signal detected by this B_Port.')
es1000AcctBportPrimSeqProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportPrimSeqProtoErrors.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportPrimSeqProtoErrors.setDescription('This object counts the number of primitive sequence protocol errors detected by this B_Port.')
es1000AcctBportInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportInvalidTxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportInvalidTxWords.setDescription('This object counts the number of invalid transmission words detected by this B_Port.')
es1000AcctBportInvalidCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportInvalidCrcs.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportInvalidCrcs.setDescription('This object counts the number of invalid CRC detected by this B_Port for frames received.')
es1000AcctBportLinkResetIns = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportLinkResetIns.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportLinkResetIns.setDescription('This object counts the number of Link Reset Protocol received by this B_Port from the attached E_Port.')
es1000AcctBportLinkResetOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportLinkResetOuts.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportLinkResetOuts.setDescription('This object counts the number of Link Reset Protocol issued by this B_Port to the attached E_Port.')
es1000AcctBportOlsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportOlsIns.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportOlsIns.setDescription('This object counts the number of Offline Sequence (OLS) received by this B_Port.')
es1000AcctBportOlsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportOlsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportOlsOuts.setDescription('This object counts the number of Offline Sequence (OLS) issued by this B_Port.')
es1000AcctBportC2InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2InFrames.setDescription('This object counts the number of Class 2 frames received by this B_Port from its attached E_Port.')
es1000AcctBportC2OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2OutFrames.setDescription('This object counts the number of Class 2 frames delivered through this B_Port to its attached E_Port.')
es1000AcctBportC2Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2Discards.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2Discards.setDescription('This object counts the number of Class 2 frames discarded by this B_Port.')
es1000AcctBportC2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2InOctets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2InOctets.setDescription('This object counts the number of Class 2 frame octets (bytes), including the frame delimeters, received by this B_Port from its attached E_Port.')
es1000AcctBportC2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2OutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2OutOctets.setDescription('This object counts the number of Class 2 frame octets (bytes), including the frame delimeters, delivered through this B_Port to its attached E_Port.')
es1000AcctBportC3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC3InFrames.setDescription('This object counts the number of Class 3 frames received by this B_Port from its attached E_Port.')
es1000AcctBportC3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC3OutFrames.setDescription('This object counts the number of Class 3 frames delivered through this B_Port to its attached E_Port.')
es1000AcctBportC3InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3InOctets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC3InOctets.setDescription('This object counts the number of Class 3 frame octets (bytes), including the frame delimeters, received by this B_Port from its attached E_Port.')
es1000AcctBportC3OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3OutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC3OutOctets.setDescription('This object counts the number of Class 3 frame octets (bytes), including the frame delimeters, delivered through this B_Port to its attached E_Port.')
es1000AcctBportC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3Discards.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC3Discards.setDescription('This object counts the number of Class 3 frames discarded by this B_Port.')
es1000AcctBportRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportRxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportRxWords.setDescription('This object counts the number of Fibre Channel words, including the frame delimeters, received by this B_Port from its attached E_Port.')
es1000AcctBportTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportTxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportTxWords.setDescription('This object counts the number of Fibre Channel words, including the frame delimeters, delivered through this B_Port to its attached E_Port.')
es1000AcctBportRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportRxFrames.setDescription('This object counts the number of Fibre Channel frames received by this B_Port from its attached E_Port.')
es1000AcctBportTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportTxFrames.setDescription('This object counts the number of Fibre Channel frames delivered through this B_Port to its attached E_Port.')
es1000AcctBportInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportInvalidOrderedSets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportInvalidOrderedSets.setDescription('This object counts the number of invalid Ordered Sets received by this B_Port from its attached E_Port.')
es1000AcctBportFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportFramesTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportFramesTooLong.setDescription('This object counts the number of Fibre Channel over length frames received by this B_Port from its attached E_Port.')
es1000AcctBportFramesTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportFramesTooShort.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportFramesTooShort.setDescription('This object counts the number of Fibre Channel truncated frames received by this B_Port from its attached E_Port.')
es1000AcctBportTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportTxThroughput.setDescription('This object presents the Bps transmission rate for this B_Port.')
es1000AcctBportRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportRxThroughput.setDescription('This object presents the Bps reception rate for this B_Port.')
es1000AcctBportAddressErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportAddressErrors.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportAddressErrors.setDescription('This object counts the number of Address errors detected by this B_Port.')
es1000AcctBportC2FbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2FbsyFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2FbsyFrames.setDescription('This object counts the number of F_BSY frames generated by this B_Port against Class 2 frames.')
es1000AcctBportC2FrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2FrjtFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2FrjtFrames.setDescription('This object counts the number of F_RJT frames generated by this B_Port against Class 2 frames.')
es1000AcctBportCFInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportCFInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportCFInFrames.setDescription('This object counts the number of Class F frames received by this B_Port from its attached E_Port.')
es1000AcctBportFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportFramesDiscarded.setDescription('This object counts the number of Fibre Channel frames that this B_Port has discarded.')
es1000AcctBportInvalidClassofFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportInvalidClassofFrame.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportInvalidClassofFrame.setDescription('This object counts the number of Invalid Class of frame detected by this B_Port.')
es1000AcctBportC2RxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2RxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2RxWords.setDescription('This object counts the number of Class 2 frame words, including the frame delimeters, received by this B_Port from its attached E_Port.')
es1000AcctBportC2TxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2TxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC2TxWords.setDescription('This object counts the number of Class 2 words, including the frame delimeters, delivered through this B_Port to its attached E_Port.')
es1000AcctBportC3RxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3RxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC3RxWords.setDescription('This object counts the number of Class 3 frame words, including the frame delimeters, received by this B_Port from its attached E_Port.')
es1000AcctBportC3TxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3TxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportC3TxWords.setDescription('This object counts the number of Class 3 words, including the frame delimeters, delivered through this B_Port to its attached E_Port.')
es1000AcctBportTxThroughputPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportTxThroughputPercent.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportTxThroughputPercent.setDescription('This object presents the percentage of transmission bandwidth used by this B_Port.')
es1000AcctBportRxThroughputPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportRxThroughputPercent.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportRxThroughputPercent.setDescription('This object presents the percentage of reception bandwidth used by this B_Port.')
es1000AcctBportLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportLinkDown.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctBportLinkDown.setDescription('This object counts the number of times the B_Port has detected a link down condition.')
es1000AcctHportTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: es1000AcctHportTable.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportTable.setDescription("A table that contains H_Port accounting information recorded since the switch IPL'd.")
es1000AcctHportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000AcctHportIndex"))
if mibBuilder.loadTexts: es1000AcctHportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportEntry.setDescription('An entry containing accounting information for each H_Port.')
es1000AcctHportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportIndex.setDescription('This object identifies the H_Port.')
es1000AcctHportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportNumber.setDescription('This object identifies the H_Port number.')
es1000AcctHportLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportLinkFailures.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportLinkFailures.setDescription('This object counts the number of Link Failures detected by this H_Port.')
es1000AcctHportSyncLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportSyncLosses.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportSyncLosses.setDescription('This object counts the number of loss of synchronization detected by this H_Port.')
es1000AcctHportSigLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportSigLosses.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportSigLosses.setDescription('This object counts the number of loss of signal detected by this H_Port.')
es1000AcctHportInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportInvalidTxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportInvalidTxWords.setDescription('This object counts the number of invalid transmission words detected by this H_Port.')
es1000AcctHportInvalidCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportInvalidCrcs.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportInvalidCrcs.setDescription('This object counts the number of invalid CRC detected by this H_Port for frames received.')
es1000AcctHportC2InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC2InFrames.setDescription('This object counts the number of Class 2 frames received by this H_Port.')
es1000AcctHportC2OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC2OutFrames.setDescription('This object counts the number of Class 2 frames delivered through this H_Port.')
es1000AcctHportC2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2InOctets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC2InOctets.setDescription('This object counts the number of Class 2 frame octets (bytes), including the frame delimeters, received by this H_Port.')
es1000AcctHportC2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2OutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC2OutOctets.setDescription('This object counts the number of Class 2 frame octets (bytes), including the frame delimeters, delivered through this H_Port.')
es1000AcctHportC3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC3InFrames.setDescription('This object counts the number of Class 3 frames received by this H_Port.')
es1000AcctHportC3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC3OutFrames.setDescription('This object counts the number of Class 3 frames delivered through this H_Port.')
es1000AcctHportC3InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3InOctets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC3InOctets.setDescription('This object counts the number of Class 3 frame octets (bytes), including the frame delimeters, received by this H_Port.')
es1000AcctHportC3OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3OutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC3OutOctets.setDescription('This object counts the number of Class 3 frame octets (bytes), including the frame delimeters, delivered through this H_Port.')
es1000AcctHportRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportRxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportRxWords.setDescription('This object counts the number of Fibre Channel words, including the frame delimeters, received by this H_Port.')
es1000AcctHportTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportTxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportTxWords.setDescription('This object counts the number of Fibre Channel words, including the frame delimeters, delivered through this H_Port.')
es1000AcctHportRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportRxFrames.setDescription('This object counts the number of Fibre Channel frames received by this H_Port.')
es1000AcctHportTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportTxFrames.setDescription('This object counts the number of Fibre Channel frames delivered through this H_Port.')
es1000AcctHportTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportTxThroughput.setDescription('This object presents the Bps transmission rate for this H_Port.')
es1000AcctHportRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportRxThroughput.setDescription('This object presents the Bps reception rate for this H_Port.')
es1000AcctHportC2RxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2RxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC2RxWords.setDescription('This object counts the number of Class 2 frame words, including the frame delimeters, received by this H_Port.')
es1000AcctHportC2TxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2TxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC2TxWords.setDescription('This object counts the number of Class 2 words, including the frame delimeters, delivered through this H_Port.')
es1000AcctHportC3RxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3RxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC3RxWords.setDescription('This object counts the number of Class 3 frame words, including the frame delimeters, received by this H_Port.')
es1000AcctHportC3TxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3TxWords.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportC3TxWords.setDescription('This object counts the number of Class 3 words, including the frame delimeters, delivered through this H_Port.')
es1000AcctHportTxThroughputPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportTxThroughputPercent.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportTxThroughputPercent.setDescription('This object presents the percentage of transmission bandwidth used by this H_Port.')
es1000AcctHportRxThroughputPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportRxThroughputPercent.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportRxThroughputPercent.setDescription('This object presents the percentage of reception bandwidth used by this H_Port.')
es1000AcctHportLIPCount = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportLIPCount.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportLIPCount.setDescription('This object counts the number of LIPs detected by this H_Port.')
es1000AcctHportConnectionsMade = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportConnectionsMade.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportConnectionsMade.setDescription('This object counts the number of connections made by this H_Port.')
es1000AcctHportConnectionsStalled = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportConnectionsStalled.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportConnectionsStalled.setDescription('This object counts the number of connections stalled by this H_Port.')
es1000AcctHportConnectionsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportConnectionsAborted.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportConnectionsAborted.setDescription('This object counts the number of connections aborted by this H_Port.')
es1000AcctHportConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportConnectionsAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: es1000AcctHportConnectionsAccepted.setDescription('This object counts the number of connections accepted by this H_Port.')
es1000PortBportScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,1)).setObjects(("ES-1000-MIB", "es1000PortBportOpStatus"))
if mibBuilder.loadTexts: es1000PortBportScn.setDescription('A es1000PortBportScn is generated whenever a B_Port changes its operational state. For instance, the B_Port goes from online to offline.')
es1000PortHportScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,2)).setObjects(("ES-1000-MIB", "es1000PortHportOpStatus"))
if mibBuilder.loadTexts: es1000PortHportScn.setDescription('A es1000PortHportScn is generated whenever a H_Port changes its operational state. For instance, the H_Port goes from online to offline.')
es1000CompScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,3)).setObjects(("ES-1000-MIB", "es1000CompStatus"))
if mibBuilder.loadTexts: es1000CompScn.setDescription('A es1000CompScn is generated whenever a COMPONENT status changes its operational state.')
mibBuilder.exportSymbols("ES-1000-MIB", es1000AcctBportPrimSeqProtoErrors=es1000AcctBportPrimSeqProtoErrors, es1000AcctBportRxFrames=es1000AcctBportRxFrames, es1000AcctHportConnectionsAccepted=es1000AcctHportConnectionsAccepted, es1000AcctHportRxFrames=es1000AcctHportRxFrames, es1000AcctHportTxFrames=es1000AcctHportTxFrames, Es1000SysOperStatus=Es1000SysOperStatus, es1000AcctBportC2FrjtFrames=es1000AcctBportC2FrjtFrames, es1000PortHportTable=es1000PortHportTable, es1000AcctHportC3InFrames=es1000AcctHportC3InFrames, es1000AcctHportC2OutOctets=es1000AcctHportC2OutOctets, es1000PortHportIndex=es1000PortHportIndex, es1000AcctBportRxThroughput=es1000AcctBportRxThroughput, es1000Sys=es1000Sys, es1000AcctHportSigLosses=es1000AcctHportSigLosses, es1000AcctHportC2TxWords=es1000AcctHportC2TxWords, es1000PortBportAdmStatus=es1000PortBportAdmStatus, es1000AcctBportC2OutOctets=es1000AcctBportC2OutOctets, Es1000PortPhyState=Es1000PortPhyState, es1000AcctBportTxFrames=es1000AcctBportTxFrames, es1000AcctBportTable=es1000AcctBportTable, es1000PortHportValidation=es1000PortHportValidation, es1000AcctBportC2OutFrames=es1000AcctBportC2OutFrames, es1000PortHportOpStatus=es1000PortHportOpStatus, es1000AcctHportInvalidCrcs=es1000AcctHportInvalidCrcs, es1000AcctHportRxWords=es1000AcctHportRxWords, Es1000LoopPortALPA=Es1000LoopPortALPA, Es1000SysState=Es1000SysState, es1000AcctBportIndex=es1000AcctBportIndex, es1000AcctBportC2TxWords=es1000AcctBportC2TxWords, es1000AcctHportSyncLosses=es1000AcctHportSyncLosses, es1000AcctBportTxThroughput=es1000AcctBportTxThroughput, TruthValue=TruthValue, es1000AcctBportInvalidClassofFrame=es1000AcctBportInvalidClassofFrame, es1000PortBportName=es1000PortBportName, es1000CompCode=es1000CompCode, es1000AcctBportLinkFailures=es1000AcctBportLinkFailures, es1000AcctBportRxWords=es1000AcctBportRxWords, Es1000LoopStatus=Es1000LoopStatus, es1000AcctBportLinkResetOuts=es1000AcctBportLinkResetOuts, es1000AcctBportC2Discards=es1000AcctBportC2Discards, es1000AcctBportOlsOuts=es1000AcctBportOlsOuts, es1000AcctHportRxThroughputPercent=es1000AcctHportRxThroughputPercent, es1000PortHportCount=es1000PortHportCount, es1000SysEcLevel=es1000SysEcLevel, fcSwitch=fcSwitch, es1000Comp=es1000Comp, es1000CompTable=es1000CompTable, es1000LoopPortIndex=es1000LoopPortIndex, es1000LoopPrincipal=es1000LoopPrincipal, es1000AcctHportLIPCount=es1000AcctHportLIPCount, es1000PortBportNumber=es1000PortBportNumber, es1000AcctHportConnectionsMade=es1000AcctHportConnectionsMade, es1000AcctBportLinkDown=es1000AcctBportLinkDown, es1000CompScn=es1000CompScn, es1000SysMfg=es1000SysMfg, Es1000PortStatus=Es1000PortStatus, Es1000PortNumber=Es1000PortNumber, es1000AcctHportC3InOctets=es1000AcctHportC3InOctets, es1000AcctHportC3OutFrames=es1000AcctHportC3OutFrames, es1000Port=es1000Port, es1000AcctBportSigLosses=es1000AcctBportSigLosses, es1000AcctBportC2InFrames=es1000AcctBportC2InFrames, es1000PortHportEntry=es1000PortHportEntry, es1000SysModelNum=es1000SysModelNum, es1000AcctBportEntry=es1000AcctBportEntry, es_1000=es_1000, es1000PortHportBypassedState=es1000PortHportBypassedState, es1000LoopSwitched=es1000LoopSwitched, es1000AcctBportCFInFrames=es1000AcctBportCFInFrames, es1000AcctHportNumber=es1000AcctHportNumber, es1000SysState=es1000SysState, es1000LoopPortEntry=es1000LoopPortEntry, es1000LoopPortNumber=es1000LoopPortNumber, es1000AcctHportLinkFailures=es1000AcctHportLinkFailures, es1000PortHportName=es1000PortHportName, es1000PortHportScn=es1000PortHportScn, es1000AcctBportC3TxWords=es1000AcctBportC3TxWords, es1000AcctBportInvalidTxWords=es1000AcctBportInvalidTxWords, es1000Loop=es1000Loop, es1000AcctBportC3OutOctets=es1000AcctBportC3OutOctets, es1000AcctHportInvalidTxWords=es1000AcctHportInvalidTxWords, es1000AcctHportTxWords=es1000AcctHportTxWords, es1000PortBportIndex=es1000PortBportIndex, es1000PortHportAdmStatus=es1000PortHportAdmStatus, es1000AcctHportIndex=es1000AcctHportIndex, Es1000CompStatus=Es1000CompStatus, es1000AcctHportC2OutFrames=es1000AcctHportC2OutFrames, es1000AcctHportEntry=es1000AcctHportEntry, mcData=mcData, es1000PortBportBlockedState=es1000PortBportBlockedState, es1000AcctBportC2InOctets=es1000AcctBportC2InOctets, es1000SysOperStatus=es1000SysOperStatus, es1000AcctHportC3RxWords=es1000AcctHportC3RxWords, es1000AcctHportTable=es1000AcctHportTable, Es1000PortIndex=Es1000PortIndex, Es1000PortCount=Es1000PortCount, es1000AcctHportTxThroughputPercent=es1000AcctHportTxThroughputPercent, es1000AcctHportConnectionsAborted=es1000AcctHportConnectionsAborted, es1000CompPosition=es1000CompPosition, es1000SysCurrentDate=es1000SysCurrentDate, es1000Acct=es1000Acct, es1000SysOemSerialNum=es1000SysOemSerialNum, es1000AcctBportC3InOctets=es1000AcctBportC3InOctets, es1000AcctBportC3OutFrames=es1000AcctBportC3OutFrames, es1000PortHportPhyState=es1000PortHportPhyState, es1000AcctHportC3OutOctets=es1000AcctHportC3OutOctets, es1000SysTypeNum=es1000SysTypeNum, es1000AcctBportC2RxWords=es1000AcctBportC2RxWords, es1000AcctBportFramesTooLong=es1000AcctBportFramesTooLong, es1000LoopStatus=es1000LoopStatus, es1000PortBportTable=es1000PortBportTable, es1000AcctHportC2RxWords=es1000AcctHportC2RxWords, Es1000CompPosition=Es1000CompPosition, es1000SysBootDate=es1000SysBootDate, es1000AcctBportInvalidOrderedSets=es1000AcctBportInvalidOrderedSets, es1000LoopPortTable=es1000LoopPortTable, es1000AcctBportSyncLosses=es1000AcctBportSyncLosses, es1000AcctBportAddressErrors=es1000AcctBportAddressErrors, commDev=commDev, es1000CompEntry=es1000CompEntry, Es1000PortAdmStatus=Es1000PortAdmStatus, es1000SysAdmStatus=es1000SysAdmStatus, es1000AcctBportC2FbsyFrames=es1000AcctBportC2FbsyFrames, es1000AcctHportTxThroughput=es1000AcctHportTxThroughput, fibreChannel=fibreChannel, es1000AcctHportC2InOctets=es1000AcctHportC2InOctets, es1000AcctHportC2InFrames=es1000AcctHportC2InFrames, es1000AcctBportC3Discards=es1000AcctBportC3Discards, es1000AcctBportInvalidCrcs=es1000AcctBportInvalidCrcs, es1000PortBportOpStatus=es1000PortBportOpStatus, Es1000CompCode=Es1000CompCode, es1000AcctHportC3TxWords=es1000AcctHportC3TxWords, es1000PortHportNumber=es1000PortHportNumber, es1000PortBportCount=es1000PortBportCount, es1000SysPlantOfMfg=es1000SysPlantOfMfg, es1000AcctBportC3RxWords=es1000AcctBportC3RxWords, es1000AcctHportConnectionsStalled=es1000AcctHportConnectionsStalled, es1000PortBportScn=es1000PortBportScn, es1000AcctBportLinkResetIns=es1000AcctBportLinkResetIns, es1000AcctBportC3InFrames=es1000AcctBportC3InFrames, es1000AcctBportFramesDiscarded=es1000AcctBportFramesDiscarded, es1000AcctHportRxThroughput=es1000AcctHportRxThroughput, es1000AcctBportRxThroughputPercent=es1000AcctBportRxThroughputPercent, es1000PortBportPhyState=es1000PortBportPhyState, es1000CompStatus=es1000CompStatus, es1000AcctBportNumber=es1000AcctBportNumber, es1000PortBportEntry=es1000PortBportEntry, es1000SysFirmwareVersion=es1000SysFirmwareVersion, es1000AcctBportOlsIns=es1000AcctBportOlsIns, es1000AcctBportFramesTooShort=es1000AcctBportFramesTooShort, es1000PortHportLipOnInsertion=es1000PortHportLipOnInsertion, es1000AcctBportTxWords=es1000AcctBportTxWords, es1000SysSeqNum=es1000SysSeqNum, es1000AcctBportTxThroughputPercent=es1000AcctBportTxThroughputPercent, es1000LoopPortALPA=es1000LoopPortALPA, Es1000LoopMasterWWN=Es1000LoopMasterWWN, es1000LoopMasterWWN=es1000LoopMasterWWN)
