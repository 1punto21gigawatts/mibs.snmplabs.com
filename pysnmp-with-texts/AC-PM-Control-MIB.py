#
# PySNMP MIB module AC-PM-Control-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PM-Control-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
acBoardMibs, audioCodes, acPerformance, acGeneric, acRegistrations, acProducts = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acBoardMibs", "audioCodes", "acPerformance", "acGeneric", "acRegistrations", "acProducts")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, Unsigned32, enterprises, Counter32, iso, MibIdentifier, Counter64, Bits, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Unsigned32", "enterprises", "Counter32", "iso", "MibIdentifier", "Counter64", "Bits", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "ObjectIdentity")
DisplayString, DateAndTime, TAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TAddress", "TextualConvention")
acPMControl = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 10, 8))
if mibBuilder.loadTexts: acPMControl.setLastUpdated('200908250451Z')
if mibBuilder.loadTexts: acPMControl.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acPMControl.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acPMControl.setDescription("The AC-PM-Control MIB offers performance monitoring For the Control related elements in Audiocodes' devices. The Configuration sub-tree is for configuring the interval Period length for the entire AC-PM-Control MIB, and the different tables' thresholds. The Data sub-tree presents the tables of monitored elements. Note - for the entire MIB the value (-1) means the value Asked for is either not supported or currently not relevant (this is for when values asked for are for intervals not yet recorded.")
acPMControlConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1))
acPMControlConfigurationPeriodLength = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 894780))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMControlConfigurationPeriodLength.setStatus('current')
if mibBuilder.loadTexts: acPMControlConfigurationPeriodLength.setDescription('Length of monitoring intervals for entire MIB. Time is in minutes. Access: Instant.')
acPMControlConfigurationResetTotalCounters = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCountersDone", 1), ("resetTotalCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMControlConfigurationResetTotalCounters.setStatus('current')
if mibBuilder.loadTexts: acPMControlConfigurationResetTotalCounters.setDescription('Total-Counters Reset. To reset the total counters, set the value of this object to resetTotalCounters(2). Access: Instant.')
acPMCPConnectionAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32))
acPMCPConnectionAttributesLifetimeHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesLifetimeHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesLifetimeHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesLifetimeLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesLifetimeLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesLifetimeLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMCPConnectionAttributesStateHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesStateHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesStateHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesStateLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesStateLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesStateLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMCPConnectionAttributesCommandCounterHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandCounterHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandCounterHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesCommandCounterLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandCounterLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandCounterLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMCPConnectionAttributesRetransmissionCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesRetransmissionCountHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesRetransmissionCountHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesRetransmissionCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesRetransmissionCountLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesRetransmissionCountLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMCPConnectionAttributesActiveContextCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesActiveContextCountHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesActiveContextCountHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesActiveContextCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesActiveContextCountLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesActiveContextCountLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMCPConnectionAttributesCommandSuccessCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandSuccessCountHighThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandSuccessCountHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesCommandSuccessCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandSuccessCountLowThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandSuccessCountLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMCPConnectionAttributesCommandFailureCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandFailureCountHighThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandFailureCountHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesCommandFailureCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandFailureCountLowThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandFailureCountLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMCPConnectionAttributesCommandProcessTimeHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandProcessTimeHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandProcessTimeHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesCommandProcessTimeLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandProcessTimeLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesCommandProcessTimeLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMCPConnectionAttributesTransactionProcessTimerHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesTransactionProcessTimerHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesTransactionProcessTimerHighThreshold.setDescription('High threshold. Access: Instant.')
acPMCPConnectionAttributesTransactionProcessTimerLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 32, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCPConnectionAttributesTransactionProcessTimerLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionAttributesTransactionProcessTimerLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMMegacoAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33))
acPMMegacoAttributesServiceChangeCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesServiceChangeCountHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoAttributesServiceChangeCountHighThreshold.setDescription('High threshold. Access: Instant.')
acPMMegacoAttributesServiceChangeCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesServiceChangeCountLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoAttributesServiceChangeCountLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMMegacoAttributesCmdSuccessCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesCmdSuccessCountHighThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: acPMMegacoAttributesCmdSuccessCountHighThreshold.setDescription('High threshold. Access: Instant.')
acPMMegacoAttributesCmdSuccessCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesCmdSuccessCountLowThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: acPMMegacoAttributesCmdSuccessCountLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMMegacoAttributesCmdFailureCountHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesCmdFailureCountHighThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: acPMMegacoAttributesCmdFailureCountHighThreshold.setDescription('High threshold. Access: Instant.')
acPMMegacoAttributesCmdFailureCountLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 33, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMegacoAttributesCmdFailureCountLowThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: acPMMegacoAttributesCmdFailureCountLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMSipAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 34))
acPMSipAttributesCallDurationHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 34, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMSipAttributesCallDurationHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMSipAttributesCallDurationHighThreshold.setDescription('Low threshold. Access: Instant.')
acPMSipAttributesCallDurationLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 1, 34, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMSipAttributesCallDurationLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMSipAttributesCallDurationLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMControlData = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2))
acPMControlDataAcPMControlTimeFromStartOfInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMControlDataAcPMControlTimeFromStartOfInterval.setStatus('current')
if mibBuilder.loadTexts: acPMControlDataAcPMControlTimeFromStartOfInterval.setDescription('The time in seconds since the start of the current interval. MIB specific.')
acPMCPConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31))
acPMCPConnectionLifetimeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1), )
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTable.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTable.setDescription('Connection lifetime in seconds.')
acPMCPConnectionLifetimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPConnectionLifetimeInterval"))
if mibBuilder.loadTexts: acPMCPConnectionLifetimeEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeEntry.setDescription('')
acPMCPConnectionLifetimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: acPMCPConnectionLifetimeInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last 3 - Two before last 4 - Three before last.')
acPMCPConnectionLifetimeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeVal.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeVal.setDescription('Value of gauge or counter.')
acPMCPConnectionLifetimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeAverage.setDescription('Average value with in the period time.')
acPMCPConnectionLifetimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeMax.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeMax.setDescription('Maximum value with in the period time.')
acPMCPConnectionLifetimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeMin.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeMin.setDescription('Minimum value with in the period time.')
acPMCPConnectionLifetimeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeVolume.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeVolume.setDescription('Activity volume.')
acPMCPConnectionLifetimeTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMCPConnectionLifetimeTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMCPConnectionLifetimeTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMCPConnectionLifetimeFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeFullDayAverage.setDescription('The average of full 24 hours.')
acPMCPConnectionLifetimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTotal.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionLifetimeTotal.setDescription('Total since last reset.')
acPMCPConnectionStateTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2), )
if mibBuilder.loadTexts: acPMCPConnectionStateTable.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionStateTable.setDescription('MGC connection activity indicator.')
acPMCPConnectionStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPConnectionStateInterval"))
if mibBuilder.loadTexts: acPMCPConnectionStateEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionStateEntry.setDescription('')
acPMCPConnectionStateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPConnectionStateInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionStateInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCPConnectionStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionStateChanges.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionStateChanges.setDescription('Activity volume.')
acPMCPConnectionStateActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPConnectionStateActiveTime.setStatus('current')
if mibBuilder.loadTexts: acPMCPConnectionStateActiveTime.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMCPCommandCounterTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3), )
if mibBuilder.loadTexts: acPMCPCommandCounterTable.setStatus('current')
if mibBuilder.loadTexts: acPMCPCommandCounterTable.setDescription('MGC command/response counters. Index: 0=sent commands, 1=received commands')
acPMCPCommandCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCommandCounterDirection"), (0, "AC-PM-Control-MIB", "acPMCPCommandCounterInterval"))
if mibBuilder.loadTexts: acPMCPCommandCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCPCommandCounterEntry.setDescription('')
acPMCPCommandCounterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tx", 0), ("rx", 1))))
if mibBuilder.loadTexts: acPMCPCommandCounterDirection.setStatus('current')
if mibBuilder.loadTexts: acPMCPCommandCounterDirection.setDescription('Direction index. 0 - transmit 1 - receive.')
acPMCPCommandCounterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCommandCounterInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCPCommandCounterInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCPCommandCounterVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandCounterVal.setStatus('current')
if mibBuilder.loadTexts: acPMCPCommandCounterVal.setDescription('Value of gauge or counter.')
acPMCPCommandCounterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandCounterTotal.setStatus('current')
if mibBuilder.loadTexts: acPMCPCommandCounterTotal.setDescription('Total since last reset.')
acPMCPRetransmissionCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4), )
if mibBuilder.loadTexts: acPMCPRetransmissionCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMCPRetransmissionCountTable.setDescription('Number of transaction retransmissions. The first direction (tx(0)) counts the transactions sent from the board, while the second direction (rx(1)) counts the incoming retransmissions.')
acPMCPRetransmissionCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPRetransmissionCountDirection"), (0, "AC-PM-Control-MIB", "acPMCPRetransmissionCountInterval"))
if mibBuilder.loadTexts: acPMCPRetransmissionCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCPRetransmissionCountEntry.setDescription('')
acPMCPRetransmissionCountDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tx", 0), ("rx", 1))))
if mibBuilder.loadTexts: acPMCPRetransmissionCountDirection.setStatus('current')
if mibBuilder.loadTexts: acPMCPRetransmissionCountDirection.setDescription('Direction index. 0 - transmit 1 - receive.')
acPMCPRetransmissionCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPRetransmissionCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCPRetransmissionCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCPRetransmissionCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPRetransmissionCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMCPRetransmissionCountVal.setDescription('Value of gauge or counter.')
acPMCPRetransmissionCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPRetransmissionCountTotal.setStatus('current')
if mibBuilder.loadTexts: acPMCPRetransmissionCountTotal.setDescription('Total since last reset.')
acPMActiveContextCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5), )
if mibBuilder.loadTexts: acPMActiveContextCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountTable.setDescription('Number of active contexts')
acPMActiveContextCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMActiveContextCountInterval"))
if mibBuilder.loadTexts: acPMActiveContextCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountEntry.setDescription('')
acPMActiveContextCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMActiveContextCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMActiveContextCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountVal.setDescription('Value of gauge or counter.')
acPMActiveContextCountAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountAverage.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountAverage.setDescription('Average value with in the period time.')
acPMActiveContextCountMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountMax.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountMax.setDescription('Maximum value with in the period time.')
acPMActiveContextCountMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountMin.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountMin.setDescription('Minimum value with in the period time.')
acPMActiveContextCountVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountVolume.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountVolume.setDescription('Activity volume.')
acPMActiveContextCountTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMActiveContextCountTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMActiveContextCountTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMActiveContextCountFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountFullDayAverage.setDescription('The average of full 24 hours.')
acPMActiveContextCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMActiveContextCountTotal.setStatus('current')
if mibBuilder.loadTexts: acPMActiveContextCountTotal.setDescription('Total since last reset.')
acPMCPCommandSuccessCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6), )
if mibBuilder.loadTexts: acPMCPCommandSuccessCountTable.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandSuccessCountTable.setDescription('Number of successful commands, per command type. Index: 0=add, 1=move, 2=modify, 3=subtract, 4=SC, 5=AuditValue, 6=AuditCapabilities, 7=Notify')
acPMCPCommandSuccessCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCommandSuccessCountCommandType"), (0, "AC-PM-Control-MIB", "acPMCPCommandSuccessCountInterval"))
if mibBuilder.loadTexts: acPMCPCommandSuccessCountEntry.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandSuccessCountEntry.setDescription('')
acPMCPCommandSuccessCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMCPCommandSuccessCountCommandType.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandSuccessCountCommandType.setDescription('Command type: 0=add, 1=move, 2=modify, 3=subtract, 4=SC, 5=AuditValue, 6=AuditCapabilities, 7=Notify.')
acPMCPCommandSuccessCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCommandSuccessCountInterval.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandSuccessCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCPCommandSuccessCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandSuccessCountVal.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandSuccessCountVal.setDescription('Value of gauge or counter.')
acPMCPCommandSuccessCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandSuccessCountTotal.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandSuccessCountTotal.setDescription('Total since last reset.')
acPMCPCommandFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7), )
if mibBuilder.loadTexts: acPMCPCommandFailureCountTable.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandFailureCountTable.setDescription('Number of failing commands, per command type. Index: 0=add, 1=move, 2=modify, 3=subtract, 4=SC, 5=AuditValue, 6=AuditCapabilities, 7=Notify')
acPMCPCommandFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCommandFailureCountCommandType"), (0, "AC-PM-Control-MIB", "acPMCPCommandFailureCountInterval"))
if mibBuilder.loadTexts: acPMCPCommandFailureCountEntry.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandFailureCountEntry.setDescription('')
acPMCPCommandFailureCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMCPCommandFailureCountCommandType.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandFailureCountCommandType.setDescription('Command type: 0=add, 1=move, 2=modify, 3=subtract, 4=SC, 5=AuditValue, 6=AuditCapabilities, 7=Notify.')
acPMCPCommandFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCommandFailureCountInterval.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandFailureCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCPCommandFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandFailureCountVal.setStatus('obsolete')
if mibBuilder.loadTexts: acPMCPCommandFailureCountVal.setDescription('Value of gauge or counter.')
acPMCPCommandFailureCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCommandFailureCountTotal.setStatus('current')
if mibBuilder.loadTexts: acPMCPCommandFailureCountTotal.setDescription('Total since last reset.')
acPMcpCmdProcessTimeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8), )
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTable.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTable.setDescription('Processing time (in Microseconds), per command type.')
acPMcpCmdProcessTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMcpCmdProcessTimeInterval"))
if mibBuilder.loadTexts: acPMcpCmdProcessTimeEntry.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeEntry.setDescription('')
acPMcpCmdProcessTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMcpCmdProcessTimeInterval.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMcpCmdProcessTimeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeVal.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeVal.setDescription('Value of gauge or counter.')
acPMcpCmdProcessTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeAverage.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeAverage.setDescription('Average value with in the period time.')
acPMcpCmdProcessTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeMax.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeMax.setDescription('Maximum value with in the period time.')
acPMcpCmdProcessTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeMin.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeMin.setDescription('Minimum value with in the period time.')
acPMcpCmdProcessTimeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeVolume.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeVolume.setDescription('Activity volume.')
acPMcpCmdProcessTimeTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMcpCmdProcessTimeTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMcpCmdProcessTimeTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMcpCmdProcessTimeFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeFullDayAverage.setDescription('The average of full 24 hours.')
acPMcpCmdProcessTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTotal.setStatus('current')
if mibBuilder.loadTexts: acPMcpCmdProcessTimeTotal.setDescription('Total since last reset.')
acPMcpTransactionProcessTimerTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9), )
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTable.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTable.setDescription('Processing time (in Microseconds), For transaction request.')
acPMcpTransactionProcessTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMcpTransactionProcessTimerInterval"))
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerEntry.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerEntry.setDescription('')
acPMcpTransactionProcessTimerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerInterval.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMcpTransactionProcessTimerVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerVal.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerVal.setDescription('Value of gauge or counter.')
acPMcpTransactionProcessTimerAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerAverage.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerAverage.setDescription('Average value with in the period time.')
acPMcpTransactionProcessTimerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerMax.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerMax.setDescription('Maximum value with in the period time.')
acPMcpTransactionProcessTimerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerMin.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerMin.setDescription('Minimum value with in the period time.')
acPMcpTransactionProcessTimerVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerVolume.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerVolume.setDescription('Activity volume.')
acPMcpTransactionProcessTimerTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMcpTransactionProcessTimerTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMcpTransactionProcessTimerTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMcpTransactionProcessTimerFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerFullDayAverage.setDescription('The average of full 24 hours.')
acPMcpTransactionProcessTimerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTotal.setStatus('current')
if mibBuilder.loadTexts: acPMcpTransactionProcessTimerTotal.setDescription('Total since last reset.')
acPMCPCallAttemptsPerSecTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10), )
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecTable.setStatus('current')
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecTable.setDescription('Number of Call attempts (successful and unsuccessful) for second')
acPMCPCallAttemptsPerSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCallAttemptsPerSecInterval"))
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecEntry.setDescription('')
acPMCPCallAttemptsPerSecInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCPCallAttemptsPerSecVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecVal.setStatus('current')
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecVal.setDescription('Value of gauge or counter.')
acPMCPCallAttemptsPerSecAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecAverage.setDescription('Average value with in the period time.')
acPMCPCallAttemptsPerSecMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecMax.setStatus('current')
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecMax.setDescription('Maximum value with in the period time.')
acPMCPCallAttemptsPerSecMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecMin.setStatus('current')
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecMin.setDescription('Minimum value with in the period time.')
acPMCPCallAttemptsPerSecVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 31, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecVolume.setStatus('current')
if mibBuilder.loadTexts: acPMCPCallAttemptsPerSecVolume.setDescription('Activity volume.')
acPMMegaco = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41))
acPMMegacoServiceChangeCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1), )
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountTable.setDescription('Number of service changes, per method. Index: 0=FailOver, 1=Forced, 2=Graceful, 3=Restart, 4=Disconnected, 5=Handoff')
acPMMegacoServiceChangeCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoServiceChangeCountMethod"), (0, "AC-PM-Control-MIB", "acPMMegacoServiceChangeCountInterval"))
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountEntry.setDescription('')
acPMMegacoServiceChangeCountMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("failOver", 0), ("forced", 1), ("graceful", 2), ("restart", 3), ("disconnected", 4), ("handoff", 5))))
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountMethod.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountMethod.setDescription('Method: 0=FailOver, 1=Forced, 2=Graceful, 3=Restart, 4=Disconnected, 5=Handoff.')
acPMMegacoServiceChangeCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMegacoServiceChangeCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoServiceChangeCountVal.setDescription('Value of gauge or counter.')
acPMCPCmdSuccessCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2), )
if mibBuilder.loadTexts: acPMCPCmdSuccessCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdSuccessCountTable.setDescription('Number of successful commands, per command type. Index: 0=add, 1=move, 2=modify, 3=subtract, 4=SC, 5=AuditValue, 6=AuditCapabilities, 7=Notify')
acPMCPCmdSuccessCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCmdSuccessCountCommandType"), (0, "AC-PM-Control-MIB", "acPMCPCmdSuccessCountInterval"))
if mibBuilder.loadTexts: acPMCPCmdSuccessCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdSuccessCountEntry.setDescription('')
acPMCPCmdSuccessCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMCPCmdSuccessCountCommandType.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdSuccessCountCommandType.setDescription('Command type: 0=add, 1=move, 2=modify, 3=subtract, 4=SC, 5=AuditValue, 6=AuditCapabilities, 7=Notify.')
acPMCPCmdSuccessCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCmdSuccessCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdSuccessCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCPCmdSuccessCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCmdSuccessCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdSuccessCountVal.setDescription('Value of gauge or counter.')
acPMCPCmdSuccessCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCmdSuccessCountTotal.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdSuccessCountTotal.setDescription('Total since last reset.')
acPMCPCmdFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3), )
if mibBuilder.loadTexts: acPMCPCmdFailureCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdFailureCountTable.setDescription('Number of failing commands, per command type. Index: 0=add, 1=move, 2=modify, 3=subtract, 4=SC, 5=AuditValue, 6=AuditCapabilities, 7=Notify')
acPMCPCmdFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMCPCmdFailureCountCommandType"), (0, "AC-PM-Control-MIB", "acPMCPCmdFailureCountInterval"))
if mibBuilder.loadTexts: acPMCPCmdFailureCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdFailureCountEntry.setDescription('')
acPMCPCmdFailureCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMCPCmdFailureCountCommandType.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdFailureCountCommandType.setDescription('Command type: 0=add, 1=move, 2=modify, 3=subtract, 4=SC, 5=AuditValue, 6=AuditCapabilities, 7=Notify.')
acPMCPCmdFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCPCmdFailureCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdFailureCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCPCmdFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCmdFailureCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdFailureCountVal.setDescription('Value of gauge or counter.')
acPMCPCmdFailureCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCPCmdFailureCountTotal.setStatus('current')
if mibBuilder.loadTexts: acPMCPCmdFailureCountTotal.setDescription('Total since last reset.')
acPMcpUMTSHandOverCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 4), )
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountTable.setDescription('Number of active channels per trunk (index: trunk number).')
acPMcpUMTSHandOverCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 4, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMcpUMTSHandOverCountInterval"))
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountEntry.setDescription('')
acPMcpUMTSHandOverCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMcpUMTSHandOverCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMcpUMTSHandOverCountVal.setDescription('Value of gauge or counter.')
acPMMegacoAddFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 5), )
if mibBuilder.loadTexts: acPMMegacoAddFailureCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoAddFailureCountTable.setDescription('Number of Megaco failures for Add')
acPMMegacoAddFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 5, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoAddFailureCountInterval"))
if mibBuilder.loadTexts: acPMMegacoAddFailureCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoAddFailureCountEntry.setDescription('')
acPMMegacoAddFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoAddFailureCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoAddFailureCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMegacoAddFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoAddFailureCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoAddFailureCountVal.setDescription('Value of gauge or counter.')
acPMMegacoModifyFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 6), )
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountTable.setDescription('Number of Megaco failures for Modify ')
acPMMegacoModifyFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 6, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoModifyFailureCountInterval"))
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountEntry.setDescription('')
acPMMegacoModifyFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMegacoModifyFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoModifyFailureCountVal.setDescription('Value of gauge or counter.')
acPMMegacoSuccessfulAddWithLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 7), )
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackTable.setDescription('Number of successful Megaco Add commands with loopback.')
acPMMegacoSuccessfulAddWithLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 7, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoSuccessfulAddWithLoopbackInterval"))
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackEntry.setDescription('')
acPMMegacoSuccessfulAddWithLoopbackInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMegacoSuccessfulAddWithLoopbackVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackVal.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoSuccessfulAddWithLoopbackVal.setDescription('Value of gauge or counter.')
acPMMegacoFailedAddWithLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 8), )
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackTable.setDescription('Number of failed Megaco Add commands with loopback.')
acPMMegacoFailedAddWithLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 8, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoFailedAddWithLoopbackInterval"))
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackEntry.setDescription('')
acPMMegacoFailedAddWithLoopbackInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMegacoFailedAddWithLoopbackVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackVal.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoFailedAddWithLoopbackVal.setDescription('Value of gauge or counter.')
acPMMegacoOutgoingCommandSuccessCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 9), )
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountTable.setDescription('Number of successful Megaco outgoing commands.')
acPMMegacoOutgoingCommandSuccessCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 9, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoOutgoingCommandSuccessCountInterval"))
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountEntry.setDescription('')
acPMMegacoOutgoingCommandSuccessCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMegacoOutgoingCommandSuccessCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandSuccessCountVal.setDescription('Value of gauge or counter.')
acPMMegacoOutgoingCommandFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 10), )
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountTable.setDescription('Number of failed Megaco outgoing commands .')
acPMMegacoOutgoingCommandFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 10, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMegacoOutgoingCommandFailureCountInterval"))
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountEntry.setDescription('')
acPMMegacoOutgoingCommandFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMegacoOutgoingCommandFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 41, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMMegacoOutgoingCommandFailureCountVal.setDescription('Value of gauge or counter.')
acPMMGCP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51))
acPMMGCPRsipReasonCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1), )
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountTable.setDescription('Number of RSIPs, per reason code.')
acPMMGCPRsipReasonCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPRsipReasonCountReasonCode"), (0, "AC-PM-Control-MIB", "acPMMGCPRsipReasonCountInterval"))
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountEntry.setDescription('')
acPMMGCPRsipReasonCountReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("restart", 0), ("forced", 1), ("disconnected", 2), ("keepAlive", 3), ("graceful", 4), ("cancelGraceful", 5), ("resetBoard", 6), ("nonVoice", 7))))
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountReasonCode.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountReasonCode.setDescription('Reason code. Index: 0=Restart, 1=Forced, 2=Disconnected, 3=KeepAlive, 4=Graceful, 5=CancelGraceful, 6=ResetBoard, 7=NonVoice.')
acPMMGCPRsipReasonCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPRsipReasonCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPRsipReasonCountVal.setDescription('Value of gauge or counter.')
acPMMGCPGeneratedDLCXTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 2), )
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXTable.setDescription('This parameter counts the number of gateway-generated DLCX commands (as opposed to DLCX commands received from the call-agent).')
acPMMGCPGeneratedDLCXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 2, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPGeneratedDLCXInterval"))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXEntry.setDescription('')
acPMMGCPGeneratedDLCXInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPGeneratedDLCXVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXVal.setDescription('Value of gauge or counter.')
acPMMGCPCommandSuccessCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3), )
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountTable.setDescription('Number of successful commands, per command type. Index: EPCF (0),CRCX (1),MDCX (2),DLCX (3),RQNT (4),NTFY (5),AUEP(6),AUCX (7),RSIP(8).')
acPMMGCPCommandSuccessCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPCommandSuccessCountCommandType"), (0, "AC-PM-Control-MIB", "acPMMGCPCommandSuccessCountInterval"))
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountEntry.setDescription('')
acPMMGCPCommandSuccessCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountCommandType.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountCommandType.setDescription('Command type:EPCF (0),CRCX (1),MDCX (2),DLCX (3),RQNT (4),NTFY (5),AUEP(6),AUCX (7),RSIP(8).')
acPMMGCPCommandSuccessCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPCommandSuccessCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountVal.setDescription('Value of gauge or counter.')
acPMMGCPCommandSuccessCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountTotal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandSuccessCountTotal.setDescription('Total since last reset.')
acPMMGCPCommandFailureCountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4), )
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountTable.setDescription('Number of failing commands, per command type. Index: EPCF (0),CRCX (1),MDCX (2),DLCX (3),RQNT (4),NTFY (5),AUEP(6),AUCX (7),RSIP(8).')
acPMMGCPCommandFailureCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPCommandFailureCountCommandType"), (0, "AC-PM-Control-MIB", "acPMMGCPCommandFailureCountInterval"))
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountEntry.setDescription('')
acPMMGCPCommandFailureCountCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("add", 0), ("move", 1), ("modify", 2), ("subtract", 3), ("sc", 4), ("auditValue", 5), ("auditCapabilities", 6), ("notify", 7))))
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountCommandType.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountCommandType.setDescription('Command type:EPCF (0),CRCX (1),MDCX (2),DLCX (3),RQNT (4),NTFY (5),AUEP(6),AUCX (7),RSIP(8).')
acPMMGCPCommandFailureCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPCommandFailureCountVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountVal.setDescription('Value of gauge or counter.')
acPMMGCPCommandFailureCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountTotal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPCommandFailureCountTotal.setDescription('Total since last reset.')
acPMMGCPLoopbackCRCXTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 5), )
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXTable.setDescription('')
acPMMGCPLoopbackCRCXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 5, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPLoopbackCRCXInterval"))
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXEntry.setDescription('')
acPMMGCPLoopbackCRCXInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPLoopbackCRCXVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPLoopbackCRCXVal.setDescription('Value of gauge or counter.')
acPMMGCPFailedLoopbackCRCXTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 6), )
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXTable.setDescription('')
acPMMGCPFailedLoopbackCRCXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 6, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedLoopbackCRCXInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXEntry.setDescription('')
acPMMGCPFailedLoopbackCRCXInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPFailedLoopbackCRCXVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedLoopbackCRCXVal.setDescription('Value of gauge or counter.')
acPMMGCPGeneratedNTFYTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 7), )
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYTable.setDescription('')
acPMMGCPGeneratedNTFYEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 7, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPGeneratedNTFYInterval"))
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYEntry.setDescription('')
acPMMGCPGeneratedNTFYInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPGeneratedNTFYVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedNTFYVal.setDescription('Value of gauge or counter.')
acPMMGCPFailedNTFYResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 8), )
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesTable.setDescription('')
acPMMGCPFailedNTFYResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 8, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedNTFYResponsesInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesEntry.setDescription('')
acPMMGCPFailedNTFYResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPFailedNTFYResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedNTFYResponsesVal.setDescription('Value of gauge or counter.')
acPMMGCPFailedRSIPResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 9), )
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesTable.setDescription('')
acPMMGCPFailedRSIPResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 9, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedRSIPResponsesInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesEntry.setDescription('')
acPMMGCPFailedRSIPResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPFailedRSIPResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedRSIPResponsesVal.setDescription('Value of gauge or counter.')
acPMMGCPFailedCRCXResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10), )
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesTable.setDescription('Number of failed responses to CRCX commands, per reason code.')
acPMMGCPFailedCRCXResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedCRCXResponsesReasonCode"), (0, "AC-PM-Control-MIB", "acPMMGCPFailedCRCXResponsesInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesEntry.setDescription('')
acPMMGCPFailedCRCXResponsesReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51))).clone(namedValues=NamedValues(("reasoncode-400", 0), ("reasoncode-401", 1), ("reasoncode-402", 2), ("reasoncode-403", 3), ("reasoncode-404", 4), ("reasoncode-405", 5), ("reasoncode-406", 6), ("reasoncode-407", 7), ("reasoncode-409", 8), ("reasoncode-410", 9), ("reasoncode-500", 10), ("reasoncode-501", 11), ("reasoncode-502", 12), ("reasoncode-503", 13), ("reasoncode-504", 14), ("reasoncode-505", 15), ("reasoncode-506", 16), ("reasoncode-507", 17), ("reasoncode-508", 18), ("reasoncode-509", 19), ("reasoncode-510", 20), ("reasoncode-511", 21), ("reasoncode-512", 22), ("reasoncode-513", 23), ("reasoncode-514", 24), ("reasoncode-515", 25), ("reasoncode-516", 26), ("reasoncode-517", 27), ("reasoncode-518", 28), ("reasoncode-519", 29), ("reasoncode-520", 30), ("reasoncode-521", 31), ("reasoncode-522", 32), ("reasoncode-523", 33), ("reasoncode-524", 34), ("reasoncode-525", 35), ("reasoncode-526", 36), ("reasoncode-527", 37), ("reasoncode-528", 38), ("reasoncode-529", 39), ("reasoncode-530", 40), ("reasoncode-531", 41), ("reasoncode-532", 42), ("reasoncode-533", 43), ("reasoncode-534", 44), ("reasoncode-535", 45), ("reasoncode-536", 46), ("reasoncode-537", 47), ("reasoncode-538", 48), ("reasoncode-539", 49), ("reasoncode-540", 50), ("reasoncode-541", 51))))
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesReasonCode.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesReasonCode.setDescription('Reason code Index. The Numbers at the values are as in the RFC.')
acPMMGCPFailedCRCXResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPFailedCRCXResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedCRCXResponsesVal.setDescription('Value of gauge or counter.')
acPMMGCPFailedMDCXResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11), )
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesTable.setDescription('Number of failed responses to CRCX commands, per reason code.')
acPMMGCPFailedMDCXResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPFailedMDCXResponsesReasonCode"), (0, "AC-PM-Control-MIB", "acPMMGCPFailedMDCXResponsesInterval"))
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesEntry.setDescription('')
acPMMGCPFailedMDCXResponsesReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51))).clone(namedValues=NamedValues(("reasoncode-400", 0), ("reasoncode-401", 1), ("reasoncode-402", 2), ("reasoncode-403", 3), ("reasoncode-404", 4), ("reasoncode-405", 5), ("reasoncode-406", 6), ("reasoncode-407", 7), ("reasoncode-409", 8), ("reasoncode-410", 9), ("reasoncode-500", 10), ("reasoncode-501", 11), ("reasoncode-502", 12), ("reasoncode-503", 13), ("reasoncode-504", 14), ("reasoncode-505", 15), ("reasoncode-506", 16), ("reasoncode-507", 17), ("reasoncode-508", 18), ("reasoncode-509", 19), ("reasoncode-510", 20), ("reasoncode-511", 21), ("reasoncode-512", 22), ("reasoncode-513", 23), ("reasoncode-514", 24), ("reasoncode-515", 25), ("reasoncode-516", 26), ("reasoncode-517", 27), ("reasoncode-518", 28), ("reasoncode-519", 29), ("reasoncode-520", 30), ("reasoncode-521", 31), ("reasoncode-522", 32), ("reasoncode-523", 33), ("reasoncode-524", 34), ("reasoncode-525", 35), ("reasoncode-526", 36), ("reasoncode-527", 37), ("reasoncode-528", 38), ("reasoncode-529", 39), ("reasoncode-530", 40), ("reasoncode-531", 41), ("reasoncode-532", 42), ("reasoncode-533", 43), ("reasoncode-534", 44), ("reasoncode-535", 45), ("reasoncode-536", 46), ("reasoncode-537", 47), ("reasoncode-538", 48), ("reasoncode-539", 49), ("reasoncode-540", 50), ("reasoncode-541", 51))))
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesReasonCode.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesReasonCode.setDescription('Reason code Index. The Numbers at the values are as in the RFC.')
acPMMGCPFailedMDCXResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPFailedMDCXResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPFailedMDCXResponsesVal.setDescription('Value of gauge or counter.')
acPMMGCPGeneratedDLCXPerReasonCodeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12), )
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeTable.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeTable.setDescription('Number of gateway-generated DLCX commands per reason code. when you choose 0 its 900(ENDPOINT_MALFUNCTIONING) and so on.')
acPMMGCPGeneratedDLCXPerReasonCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMMGCPGeneratedDLCXPerReasonCodeReasonCode"), (0, "AC-PM-Control-MIB", "acPMMGCPGeneratedDLCXPerReasonCodeInterval"))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeEntry.setDescription('')
acPMMGCPGeneratedDLCXPerReasonCodeReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("eNDPOINT-MALFUNCTIONING-900", 0), ("eNDPOINT-TAKEN-OUT-OF-SERVICE-901", 1), ("lOSS-OF-LOWER-LAYER-CONNECTIVITY-902", 2), ("qOS-RESOURCE-RESERVATION-WAS-LOST-903", 3), ("mANUAL-INTERVENTION-904", 4), ("fACILITY-FAILURE-905", 5))))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeReasonCode.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeReasonCode.setDescription('Reason code Index. The Numbers at the values are as in the RFC.')
acPMMGCPGeneratedDLCXPerReasonCodeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMGCPGeneratedDLCXPerReasonCodeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 51, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeVal.setStatus('current')
if mibBuilder.loadTexts: acPMMGCPGeneratedDLCXPerReasonCodeVal.setDescription('Value of gauge or counter.')
acPMSIP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52))
acPMSIPAttemptedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1), )
if mibBuilder.loadTexts: acPMSIPAttemptedCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPAttemptedCallsTable.setDescription('Number of attempted calls (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPAttemptedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPAttemptedCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPAttemptedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPAttemptedCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPAttemptedCallsEntry.setDescription('')
acPMSIPAttemptedCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPAttemptedCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPAttemptedCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPAttemptedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPAttemptedCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPAttemptedCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPAttemptedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPAttemptedCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPAttemptedCallsVal.setDescription('Value of gauge or counter.')
acPMSIPCallDurationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2), )
if mibBuilder.loadTexts: acPMSIPCallDurationTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationTable.setDescription('Call Duration (Index 0 for Tel2IP and Index 1 for IP2Tel);The Total preprty gives the sum of all calls duration, while the Value property is for the last call only')
acPMSIPCallDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPCallDurationDirection"), (0, "AC-PM-Control-MIB", "acPMSIPCallDurationInterval"))
if mibBuilder.loadTexts: acPMSIPCallDurationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationEntry.setDescription('')
acPMSIPCallDurationDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPCallDurationDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPCallDurationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPCallDurationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPCallDurationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationVal.setDescription('Value of gauge or counter.')
acPMSIPCallDurationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationAverage.setDescription('Average value with in the period time.')
acPMSIPCallDurationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationMax.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationMax.setDescription('Maximum value with in the period time.')
acPMSIPCallDurationMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationMin.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationMin.setDescription('Minimum value with in the period time.')
acPMSIPCallDurationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationVolume.setDescription('Activity volume.')
acPMSIPCallDurationTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMSIPCallDurationTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMSIPCallDurationTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMSIPCallDurationFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationFullDayAverage.setDescription('The average of full 24 hours.')
acPMSIPCallDurationTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPCallDurationTotal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPCallDurationTotal.setDescription('Total since last reset.')
acPMSIPNoMatchCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3), )
if mibBuilder.loadTexts: acPMSIPNoMatchCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoMatchCallsTable.setDescription('Number of no match calls (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPNoMatchCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPNoMatchCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPNoMatchCallsInterval"))
if mibBuilder.loadTexts: acPMSIPNoMatchCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoMatchCallsEntry.setDescription('')
acPMSIPNoMatchCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPNoMatchCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoMatchCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPNoMatchCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPNoMatchCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoMatchCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPNoMatchCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPNoMatchCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoMatchCallsVal.setDescription('Value of gauge or counter.')
acPMSIPBusyCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4), )
if mibBuilder.loadTexts: acPMSIPBusyCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPBusyCallsTable.setDescription('Number of busy calls (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPBusyCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPBusyCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPBusyCallsInterval"))
if mibBuilder.loadTexts: acPMSIPBusyCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPBusyCallsEntry.setDescription('')
acPMSIPBusyCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPBusyCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPBusyCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPBusyCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPBusyCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPBusyCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPBusyCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPBusyCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPBusyCallsVal.setDescription('Value of gauge or counter.')
acPMSIPNoAnswerCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5), )
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsTable.setDescription('Number of no answer calls (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPNoAnswerCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPNoAnswerCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPNoAnswerCallsInterval"))
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsEntry.setDescription('')
acPMSIPNoAnswerCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPNoAnswerCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPNoAnswerCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoAnswerCallsVal.setDescription('Value of gauge or counter.')
acPMSIPNoRouteCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6), )
if mibBuilder.loadTexts: acPMSIPNoRouteCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoRouteCallsTable.setDescription('Number of no route calls (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPNoRouteCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPNoRouteCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPNoRouteCallsInterval"))
if mibBuilder.loadTexts: acPMSIPNoRouteCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoRouteCallsEntry.setDescription('')
acPMSIPNoRouteCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPNoRouteCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoRouteCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPNoRouteCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPNoRouteCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoRouteCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPNoRouteCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPNoRouteCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoRouteCallsVal.setDescription('Value of gauge or counter.')
acPMSIPFailCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7), )
if mibBuilder.loadTexts: acPMSIPFailCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFailCallsTable.setDescription('Number of calls that failed because of other reasons (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPFailCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPFailCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPFailCallsInterval"))
if mibBuilder.loadTexts: acPMSIPFailCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFailCallsEntry.setDescription('')
acPMSIPFailCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPFailCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFailCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPFailCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPFailCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFailCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPFailCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPFailCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFailCallsVal.setDescription('Value of gauge or counter.')
acPMSIPEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8), )
if mibBuilder.loadTexts: acPMSIPEstablishedCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPEstablishedCallsTable.setDescription('Number of established calls (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPEstablishedCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPEstablishedCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPEstablishedCallsEntry.setDescription('')
acPMSIPEstablishedCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPEstablishedCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPEstablishedCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPEstablishedCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPEstablishedCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPEstablishedCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPEstablishedCallsVal.setDescription('Value of gauge or counter.')
acPMSIPFaxAttemptedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9), )
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsTable.setDescription('Number of attempted fax calls (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPFaxAttemptedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPFaxAttemptedCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPFaxAttemptedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsEntry.setDescription('')
acPMSIPFaxAttemptedCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPFaxAttemptedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPFaxAttemptedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxAttemptedCallsVal.setDescription('Value of gauge or counter.')
acPMSIPFaxSuccessCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10), )
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsTable.setDescription('Number of success fax calls (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPFaxSuccessCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPFaxSuccessCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPFaxSuccessCallsInterval"))
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsEntry.setDescription('')
acPMSIPFaxSuccessCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPFaxSuccessCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPFaxSuccessCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPFaxSuccessCallsVal.setDescription('Value of gauge or counter.')
acPMSIPForwardedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11), )
if mibBuilder.loadTexts: acPMSIPForwardedCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPForwardedCallsTable.setDescription('Number of calls released due to forwarding (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPForwardedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPForwardedCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPForwardedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPForwardedCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPForwardedCallsEntry.setDescription('')
acPMSIPForwardedCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPForwardedCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPForwardedCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPForwardedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPForwardedCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPForwardedCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPForwardedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPForwardedCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPForwardedCallsVal.setDescription('Value of gauge or counter.')
acPMSIPNoResourcesCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12), )
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsTable.setDescription('Number of calls released because of no resources (Index 0 for TEL2IP and Index 1 for IP2TEL)')
acPMSIPNoResourcesCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPNoResourcesCallsDirection"), (0, "AC-PM-Control-MIB", "acPMSIPNoResourcesCallsInterval"))
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsEntry.setDescription('')
acPMSIPNoResourcesCallsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel2IP", 0), ("iP2Tel", 1))))
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsDirection.setDescription('Direction index - TEL2IP(0), IP2TEL(1).')
acPMSIPNoResourcesCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPNoResourcesCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPNoResourcesCallsVal.setDescription('Value of gauge or counter.')
acPMSIPTel2IPTrunkEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13), )
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsTable.setDescription('Number of Tel2IP established calls per trunk.')
acPMSIPTel2IPTrunkEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPTel2IPTrunkEstablishedCallsTrunkNum"), (0, "AC-PM-Control-MIB", "acPMSIPTel2IPTrunkEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsEntry.setDescription('')
acPMSIPTel2IPTrunkEstablishedCallsTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsTrunkNum.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsTrunkNum.setDescription('Trunk number. 0 is the first trunk.')
acPMSIPTel2IPTrunkEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPTel2IPTrunkEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkEstablishedCallsVal.setDescription('Value of gauge or counter.')
acPMSIPIP2TelTrunkEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14), )
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsTable.setDescription('Number of IP2Tel established calls per trunk.')
acPMSIPIP2TelTrunkEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPIP2TelTrunkEstablishedCallsTrunkNum"), (0, "AC-PM-Control-MIB", "acPMSIPIP2TelTrunkEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsEntry.setDescription('')
acPMSIPIP2TelTrunkEstablishedCallsTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsTrunkNum.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsTrunkNum.setDescription('Trunk number. 0 is the first trunk.')
acPMSIPIP2TelTrunkEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPIP2TelTrunkEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkEstablishedCallsVal.setDescription('Value of gauge or counter.')
acPMSIPTel2IPTrunkGroupEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15), )
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsTable.setDescription('Number of Tel2IP established calls per trunk group.')
acPMSIPTel2IPTrunkGroupEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum"), (0, "AC-PM-Control-MIB", "acPMSIPTel2IPTrunkGroupEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsEntry.setDescription('')
acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum.setDescription('Trunk Group number. 0 is the first trunk group.')
acPMSIPTel2IPTrunkGroupEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPTel2IPTrunkGroupEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPTel2IPTrunkGroupEstablishedCallsVal.setDescription('Value of gauge or counter.')
acPMSIPIP2TelTrunkGroupEstablishedCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16), )
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsTable.setDescription('Number of IP2Tel established calls per trunk group.')
acPMSIPIP2TelTrunkGroupEstablishedCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16, 1), ).setIndexNames((0, "AC-PM-Control-MIB", "acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum"), (0, "AC-PM-Control-MIB", "acPMSIPIP2TelTrunkGroupEstablishedCallsInterval"))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsEntry.setDescription('')
acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum.setDescription('Trunk Group number. 0 is the first trunk group.')
acPMSIPIP2TelTrunkGroupEstablishedCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSIPIP2TelTrunkGroupEstablishedCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 8, 2, 52, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSIPIP2TelTrunkGroupEstablishedCallsVal.setDescription('Value of gauge or counter.')
mibBuilder.exportSymbols("AC-PM-Control-MIB", acPMCPConnectionLifetimeMin=acPMCPConnectionLifetimeMin, acPMMGCPFailedCRCXResponsesEntry=acPMMGCPFailedCRCXResponsesEntry, acPMcpTransactionProcessTimerInterval=acPMcpTransactionProcessTimerInterval, acPMCPCommandCounterEntry=acPMCPCommandCounterEntry, acPMCPRetransmissionCountTotal=acPMCPRetransmissionCountTotal, acPMSIPNoResourcesCallsVal=acPMSIPNoResourcesCallsVal, acPMMGCPFailedMDCXResponsesInterval=acPMMGCPFailedMDCXResponsesInterval, acPMSIPFaxAttemptedCallsTable=acPMSIPFaxAttemptedCallsTable, acPMcpCmdProcessTimeEntry=acPMcpCmdProcessTimeEntry, acPMSIPNoRouteCallsInterval=acPMSIPNoRouteCallsInterval, acPMSIPTel2IPTrunkEstablishedCallsVal=acPMSIPTel2IPTrunkEstablishedCallsVal, acPMSIPEstablishedCallsTable=acPMSIPEstablishedCallsTable, acPMMGCPFailedLoopbackCRCXEntry=acPMMGCPFailedLoopbackCRCXEntry, acPMCPConnectionLifetimeMax=acPMCPConnectionLifetimeMax, acPMMGCPCommandFailureCountEntry=acPMMGCPCommandFailureCountEntry, acPMCPConnectionAttributes=acPMCPConnectionAttributes, acPMSIPNoMatchCallsVal=acPMSIPNoMatchCallsVal, acPMSIPForwardedCallsInterval=acPMSIPForwardedCallsInterval, acPMMGCPCommandSuccessCountInterval=acPMMGCPCommandSuccessCountInterval, acPMMegacoModifyFailureCountEntry=acPMMegacoModifyFailureCountEntry, acPMSIPNoAnswerCallsVal=acPMSIPNoAnswerCallsVal, acPMcpTransactionProcessTimerTimeBelowLowThreshold=acPMcpTransactionProcessTimerTimeBelowLowThreshold, acPMMegacoAttributesCmdSuccessCountLowThreshold=acPMMegacoAttributesCmdSuccessCountLowThreshold, PYSNMP_MODULE_ID=acPMControl, acPMCPConnectionStateChanges=acPMCPConnectionStateChanges, acPMSIPForwardedCallsEntry=acPMSIPForwardedCallsEntry, acPMCPConnectionAttributesCommandSuccessCountHighThreshold=acPMCPConnectionAttributesCommandSuccessCountHighThreshold, acPMMegaco=acPMMegaco, acPMcpTransactionProcessTimerTable=acPMcpTransactionProcessTimerTable, acPMSIPNoRouteCallsVal=acPMSIPNoRouteCallsVal, acPMMegacoAttributesServiceChangeCountHighThreshold=acPMMegacoAttributesServiceChangeCountHighThreshold, acPMMGCPGeneratedDLCXPerReasonCodeReasonCode=acPMMGCPGeneratedDLCXPerReasonCodeReasonCode, acPMSIPTel2IPTrunkGroupEstablishedCallsEntry=acPMSIPTel2IPTrunkGroupEstablishedCallsEntry, acPMSIPBusyCallsTable=acPMSIPBusyCallsTable, acPMMGCPGeneratedDLCXPerReasonCodeTable=acPMMGCPGeneratedDLCXPerReasonCodeTable, acPMCPCommandFailureCountTotal=acPMCPCommandFailureCountTotal, acPMMGCPFailedMDCXResponsesReasonCode=acPMMGCPFailedMDCXResponsesReasonCode, acPMSIPNoMatchCallsInterval=acPMSIPNoMatchCallsInterval, acPMCPCommandCounterTable=acPMCPCommandCounterTable, acPMSIPIP2TelTrunkEstablishedCallsInterval=acPMSIPIP2TelTrunkEstablishedCallsInterval, acPMMGCPGeneratedDLCXPerReasonCodeInterval=acPMMGCPGeneratedDLCXPerReasonCodeInterval, acPMMegacoSuccessfulAddWithLoopbackVal=acPMMegacoSuccessfulAddWithLoopbackVal, acPMCPCmdSuccessCountTable=acPMCPCmdSuccessCountTable, acPMCPConnectionAttributesRetransmissionCountLowThreshold=acPMCPConnectionAttributesRetransmissionCountLowThreshold, acPMSIPFaxAttemptedCallsDirection=acPMSIPFaxAttemptedCallsDirection, acPMSIPAttemptedCallsEntry=acPMSIPAttemptedCallsEntry, acPMMegacoFailedAddWithLoopbackVal=acPMMegacoFailedAddWithLoopbackVal, acPMMGCPCommandSuccessCountCommandType=acPMMGCPCommandSuccessCountCommandType, acPMMGCPCommandFailureCountTotal=acPMMGCPCommandFailureCountTotal, acPMCPConnectionAttributesCommandFailureCountLowThreshold=acPMCPConnectionAttributesCommandFailureCountLowThreshold, acPMMegacoAttributesCmdFailureCountHighThreshold=acPMMegacoAttributesCmdFailureCountHighThreshold, acPMSIPBusyCallsEntry=acPMSIPBusyCallsEntry, acPMSIPEstablishedCallsVal=acPMSIPEstablishedCallsVal, acPMMegacoOutgoingCommandSuccessCountTable=acPMMegacoOutgoingCommandSuccessCountTable, acPMcpCmdProcessTimeVolume=acPMcpCmdProcessTimeVolume, acPMCPConnectionLifetimeTimeBelowLowThreshold=acPMCPConnectionLifetimeTimeBelowLowThreshold, acPMSIPCallDurationTimeBetweenThresholds=acPMSIPCallDurationTimeBetweenThresholds, acPMSIPFailCallsDirection=acPMSIPFailCallsDirection, acPMMGCPRsipReasonCountVal=acPMMGCPRsipReasonCountVal, acPMMGCPFailedRSIPResponsesEntry=acPMMGCPFailedRSIPResponsesEntry, acPMSipAttributes=acPMSipAttributes, acPMCPConnectionAttributesActiveContextCountHighThreshold=acPMCPConnectionAttributesActiveContextCountHighThreshold, acPMCPCommandSuccessCountTable=acPMCPCommandSuccessCountTable, acPMSIPCallDurationTimeAboveHighThreshold=acPMSIPCallDurationTimeAboveHighThreshold, acPMCPConnectionLifetimeVal=acPMCPConnectionLifetimeVal, acPMMegacoOutgoingCommandFailureCountInterval=acPMMegacoOutgoingCommandFailureCountInterval, acPMSIPCallDurationInterval=acPMSIPCallDurationInterval, acPMCPCommandSuccessCountEntry=acPMCPCommandSuccessCountEntry, acPMSIPBusyCallsInterval=acPMSIPBusyCallsInterval, acPMSIPIP2TelTrunkEstablishedCallsTrunkNum=acPMSIPIP2TelTrunkEstablishedCallsTrunkNum, acPMCPRetransmissionCountDirection=acPMCPRetransmissionCountDirection, acPMcpTransactionProcessTimerAverage=acPMcpTransactionProcessTimerAverage, acPMMGCPFailedLoopbackCRCXInterval=acPMMGCPFailedLoopbackCRCXInterval, acPMMegacoOutgoingCommandSuccessCountInterval=acPMMegacoOutgoingCommandSuccessCountInterval, acPMSIPNoResourcesCallsInterval=acPMSIPNoResourcesCallsInterval, acPMcpCmdProcessTimeTotal=acPMcpCmdProcessTimeTotal, acPMMGCPCommandFailureCountVal=acPMMGCPCommandFailureCountVal, acPMCPRetransmissionCountInterval=acPMCPRetransmissionCountInterval, acPMCPConnectionAttributesTransactionProcessTimerLowThreshold=acPMCPConnectionAttributesTransactionProcessTimerLowThreshold, acPMCPCallAttemptsPerSecMin=acPMCPCallAttemptsPerSecMin, acPMcpTransactionProcessTimerMin=acPMcpTransactionProcessTimerMin, acPMSIPCallDurationTotal=acPMSIPCallDurationTotal, acPMMegacoOutgoingCommandFailureCountVal=acPMMegacoOutgoingCommandFailureCountVal, acPMActiveContextCountEntry=acPMActiveContextCountEntry, acPMCPCommandFailureCountEntry=acPMCPCommandFailureCountEntry, acPMMGCPGeneratedNTFYVal=acPMMGCPGeneratedNTFYVal, acPMMegacoFailedAddWithLoopbackEntry=acPMMegacoFailedAddWithLoopbackEntry, acPMCPCommandSuccessCountInterval=acPMCPCommandSuccessCountInterval, acPMcpCmdProcessTimeAverage=acPMcpCmdProcessTimeAverage, acPMMGCPFailedCRCXResponsesVal=acPMMGCPFailedCRCXResponsesVal, acPMSIPFaxSuccessCallsInterval=acPMSIPFaxSuccessCallsInterval, acPMSIPAttemptedCallsDirection=acPMSIPAttemptedCallsDirection, acPMCPConnectionLifetimeTimeBetweenThresholds=acPMCPConnectionLifetimeTimeBetweenThresholds, acPMMGCPGeneratedNTFYTable=acPMMGCPGeneratedNTFYTable, acPMSIPEstablishedCallsDirection=acPMSIPEstablishedCallsDirection, acPMCPConnectionAttributesCommandCounterLowThreshold=acPMCPConnectionAttributesCommandCounterLowThreshold, acPMSIPNoRouteCallsDirection=acPMSIPNoRouteCallsDirection, acPMSIPTel2IPTrunkEstablishedCallsTable=acPMSIPTel2IPTrunkEstablishedCallsTable, acPMMegacoOutgoingCommandSuccessCountVal=acPMMegacoOutgoingCommandSuccessCountVal, acPMMegacoAttributes=acPMMegacoAttributes, acPMControlDataAcPMControlTimeFromStartOfInterval=acPMControlDataAcPMControlTimeFromStartOfInterval, acPMSIPNoAnswerCallsInterval=acPMSIPNoAnswerCallsInterval, acPMSipAttributesCallDurationHighThreshold=acPMSipAttributesCallDurationHighThreshold, acPMCPConnectionLifetimeFullDayAverage=acPMCPConnectionLifetimeFullDayAverage, acPMcpUMTSHandOverCountTable=acPMcpUMTSHandOverCountTable, acPMSIPNoMatchCallsDirection=acPMSIPNoMatchCallsDirection, acPMCPRetransmissionCountVal=acPMCPRetransmissionCountVal, acPMSIP=acPMSIP, acPMMGCPFailedLoopbackCRCXVal=acPMMGCPFailedLoopbackCRCXVal, acPMActiveContextCountMax=acPMActiveContextCountMax, acPMMGCPRsipReasonCountTable=acPMMGCPRsipReasonCountTable, acPMSIPCallDurationFullDayAverage=acPMSIPCallDurationFullDayAverage, acPMMGCPCommandSuccessCountTable=acPMMGCPCommandSuccessCountTable, acPMMGCPRsipReasonCountEntry=acPMMGCPRsipReasonCountEntry, acPMMGCPFailedNTFYResponsesVal=acPMMGCPFailedNTFYResponsesVal, acPMSIPFaxSuccessCallsTable=acPMSIPFaxSuccessCallsTable, acPMActiveContextCountTimeBetweenThresholds=acPMActiveContextCountTimeBetweenThresholds, acPMSIPFailCallsInterval=acPMSIPFailCallsInterval, acPMCPConnectionAttributesRetransmissionCountHighThreshold=acPMCPConnectionAttributesRetransmissionCountHighThreshold, acPMActiveContextCountVal=acPMActiveContextCountVal, acPMcpCmdProcessTimeTimeBetweenThresholds=acPMcpCmdProcessTimeTimeBetweenThresholds, acPMSIPFaxAttemptedCallsVal=acPMSIPFaxAttemptedCallsVal, acPMCPConnectionLifetimeVolume=acPMCPConnectionLifetimeVolume, acPMMegacoServiceChangeCountVal=acPMMegacoServiceChangeCountVal, acPMCPConnectionLifetimeTotal=acPMCPConnectionLifetimeTotal, acPMCPCommandFailureCountInterval=acPMCPCommandFailureCountInterval, acPMCPConnectionAttributesCommandProcessTimeLowThreshold=acPMCPConnectionAttributesCommandProcessTimeLowThreshold, acPMMegacoAddFailureCountInterval=acPMMegacoAddFailureCountInterval, acPMMGCPGeneratedDLCXTable=acPMMGCPGeneratedDLCXTable, acPMCPCmdSuccessCountEntry=acPMCPCmdSuccessCountEntry, acPMSIPFailCallsTable=acPMSIPFailCallsTable, acPMSIPForwardedCallsDirection=acPMSIPForwardedCallsDirection, acPMcpTransactionProcessTimerMax=acPMcpTransactionProcessTimerMax, acPMMGCPFailedCRCXResponsesReasonCode=acPMMGCPFailedCRCXResponsesReasonCode, acPMSIPCallDurationDirection=acPMSIPCallDurationDirection, acPMCPCommandFailureCountCommandType=acPMCPCommandFailureCountCommandType, acPMSIPAttemptedCallsInterval=acPMSIPAttemptedCallsInterval, acPMMGCPFailedNTFYResponsesEntry=acPMMGCPFailedNTFYResponsesEntry, acPMMegacoOutgoingCommandFailureCountTable=acPMMegacoOutgoingCommandFailureCountTable, acPMMegacoAttributesServiceChangeCountLowThreshold=acPMMegacoAttributesServiceChangeCountLowThreshold, acPMcpTransactionProcessTimerTimeBetweenThresholds=acPMcpTransactionProcessTimerTimeBetweenThresholds, acPMSIPIP2TelTrunkEstablishedCallsEntry=acPMSIPIP2TelTrunkEstablishedCallsEntry, acPMMGCPCommandSuccessCountVal=acPMMGCPCommandSuccessCountVal, acPMControl=acPMControl, acPMSIPNoMatchCallsEntry=acPMSIPNoMatchCallsEntry, acPMCPCommandFailureCountVal=acPMCPCommandFailureCountVal, acPMMegacoAttributesCmdFailureCountLowThreshold=acPMMegacoAttributesCmdFailureCountLowThreshold, acPMActiveContextCountAverage=acPMActiveContextCountAverage, acPMCPCommandSuccessCountVal=acPMCPCommandSuccessCountVal, acPMMGCPFailedRSIPResponsesVal=acPMMGCPFailedRSIPResponsesVal, acPMCPRetransmissionCountTable=acPMCPRetransmissionCountTable, acPMMGCPRsipReasonCountReasonCode=acPMMGCPRsipReasonCountReasonCode, acPMcpCmdProcessTimeTimeAboveHighThreshold=acPMcpCmdProcessTimeTimeAboveHighThreshold, acPMSIPCallDurationVal=acPMSIPCallDurationVal, acPMSIPTel2IPTrunkEstablishedCallsInterval=acPMSIPTel2IPTrunkEstablishedCallsInterval, acPMActiveContextCountFullDayAverage=acPMActiveContextCountFullDayAverage, acPMSIPFaxSuccessCallsEntry=acPMSIPFaxSuccessCallsEntry, acPMMGCPFailedCRCXResponsesInterval=acPMMGCPFailedCRCXResponsesInterval, acPMCPCallAttemptsPerSecEntry=acPMCPCallAttemptsPerSecEntry, acPMCPConnectionAttributesStateHighThreshold=acPMCPConnectionAttributesStateHighThreshold, acPMMGCPFailedLoopbackCRCXTable=acPMMGCPFailedLoopbackCRCXTable, acPMSIPAttemptedCallsVal=acPMSIPAttemptedCallsVal, acPMMGCPGeneratedNTFYInterval=acPMMGCPGeneratedNTFYInterval, acPMCPConnectionAttributesCommandCounterHighThreshold=acPMCPConnectionAttributesCommandCounterHighThreshold, acPMMegacoServiceChangeCountEntry=acPMMegacoServiceChangeCountEntry, acPMcpTransactionProcessTimerFullDayAverage=acPMcpTransactionProcessTimerFullDayAverage, acPMMegacoServiceChangeCountTable=acPMMegacoServiceChangeCountTable, acPMSIPNoResourcesCallsDirection=acPMSIPNoResourcesCallsDirection, acPMSIPFaxAttemptedCallsInterval=acPMSIPFaxAttemptedCallsInterval, acPMMGCPFailedCRCXResponsesTable=acPMMGCPFailedCRCXResponsesTable, acPMCPCmdFailureCountCommandType=acPMCPCmdFailureCountCommandType, acPMcpCmdProcessTimeVal=acPMcpCmdProcessTimeVal, acPMSIPTel2IPTrunkGroupEstablishedCallsTable=acPMSIPTel2IPTrunkGroupEstablishedCallsTable, acPMMGCPGeneratedDLCXVal=acPMMGCPGeneratedDLCXVal, acPMMGCPGeneratedNTFYEntry=acPMMGCPGeneratedNTFYEntry, acPMCPCallAttemptsPerSecMax=acPMCPCallAttemptsPerSecMax, acPMMGCPFailedNTFYResponsesInterval=acPMMGCPFailedNTFYResponsesInterval, acPMCPConnectionAttributesCommandProcessTimeHighThreshold=acPMCPConnectionAttributesCommandProcessTimeHighThreshold, acPMCPCmdFailureCountTotal=acPMCPCmdFailureCountTotal, acPMCPConnectionLifetimeEntry=acPMCPConnectionLifetimeEntry, acPMCPCallAttemptsPerSecInterval=acPMCPCallAttemptsPerSecInterval, acPMCPCmdSuccessCountCommandType=acPMCPCmdSuccessCountCommandType, acPMSIPCallDurationVolume=acPMSIPCallDurationVolume, acPMSIPFaxSuccessCallsDirection=acPMSIPFaxSuccessCallsDirection, acPMSIPNoAnswerCallsEntry=acPMSIPNoAnswerCallsEntry, acPMMGCPLoopbackCRCXVal=acPMMGCPLoopbackCRCXVal, acPMSipAttributesCallDurationLowThreshold=acPMSipAttributesCallDurationLowThreshold, acPMControlConfigurationResetTotalCounters=acPMControlConfigurationResetTotalCounters, acPMMGCPGeneratedDLCXInterval=acPMMGCPGeneratedDLCXInterval, acPMMegacoOutgoingCommandSuccessCountEntry=acPMMegacoOutgoingCommandSuccessCountEntry, acPMMegacoServiceChangeCountInterval=acPMMegacoServiceChangeCountInterval, acPMcpCmdProcessTimeTable=acPMcpCmdProcessTimeTable, acPMActiveContextCountInterval=acPMActiveContextCountInterval, acPMSIPIP2TelTrunkGroupEstablishedCallsVal=acPMSIPIP2TelTrunkGroupEstablishedCallsVal, acPMMGCPFailedRSIPResponsesInterval=acPMMGCPFailedRSIPResponsesInterval, acPMMGCPGeneratedDLCXEntry=acPMMGCPGeneratedDLCXEntry, acPMSIPCallDurationMin=acPMSIPCallDurationMin, acPMMGCPFailedMDCXResponsesTable=acPMMGCPFailedMDCXResponsesTable, acPMSIPNoResourcesCallsEntry=acPMSIPNoResourcesCallsEntry, acPMCPCmdFailureCountVal=acPMCPCmdFailureCountVal, acPMCPConnectionAttributesLifetimeHighThreshold=acPMCPConnectionAttributesLifetimeHighThreshold, acPMCPConnectionLifetimeTable=acPMCPConnectionLifetimeTable, acPMSIPNoResourcesCallsTable=acPMSIPNoResourcesCallsTable, acPMSIPEstablishedCallsEntry=acPMSIPEstablishedCallsEntry, acPMActiveContextCountTable=acPMActiveContextCountTable, acPMMegacoFailedAddWithLoopbackInterval=acPMMegacoFailedAddWithLoopbackInterval, acPMSIPNoRouteCallsEntry=acPMSIPNoRouteCallsEntry, acPMMegacoModifyFailureCountVal=acPMMegacoModifyFailureCountVal, acPMCPConnectionAttributesStateLowThreshold=acPMCPConnectionAttributesStateLowThreshold, acPMcpTransactionProcessTimerEntry=acPMcpTransactionProcessTimerEntry, acPMcpUMTSHandOverCountVal=acPMcpUMTSHandOverCountVal, acPMMGCPCommandFailureCountCommandType=acPMMGCPCommandFailureCountCommandType, acPMSIPForwardedCallsVal=acPMSIPForwardedCallsVal, acPMSIPAttemptedCallsTable=acPMSIPAttemptedCallsTable, acPMMegacoAttributesCmdSuccessCountHighThreshold=acPMMegacoAttributesCmdSuccessCountHighThreshold, acPMCPCmdFailureCountInterval=acPMCPCmdFailureCountInterval, acPMMGCP=acPMMGCP, acPMCPConnectionStateActiveTime=acPMCPConnectionStateActiveTime, acPMCPCommandCounterVal=acPMCPCommandCounterVal, acPMCPCallAttemptsPerSecVal=acPMCPCallAttemptsPerSecVal, acPMCPConnectionAttributesTransactionProcessTimerHighThreshold=acPMCPConnectionAttributesTransactionProcessTimerHighThreshold, acPMSIPTel2IPTrunkGroupEstablishedCallsInterval=acPMSIPTel2IPTrunkGroupEstablishedCallsInterval, acPMCPCmdSuccessCountVal=acPMCPCmdSuccessCountVal, acPMMGCPFailedMDCXResponsesEntry=acPMMGCPFailedMDCXResponsesEntry, acPMMGCPLoopbackCRCXEntry=acPMMGCPLoopbackCRCXEntry, acPMCPConnectionLifetimeInterval=acPMCPConnectionLifetimeInterval, acPMMegacoModifyFailureCountTable=acPMMegacoModifyFailureCountTable, acPMMegacoAddFailureCountTable=acPMMegacoAddFailureCountTable, acPMMGCPFailedRSIPResponsesTable=acPMMGCPFailedRSIPResponsesTable, acPMMegacoAddFailureCountVal=acPMMegacoAddFailureCountVal, acPMMegacoAddFailureCountEntry=acPMMegacoAddFailureCountEntry, acPMCPConnectionAttributesLifetimeLowThreshold=acPMCPConnectionAttributesLifetimeLowThreshold, acPMActiveContextCountMin=acPMActiveContextCountMin, acPMSIPFaxAttemptedCallsEntry=acPMSIPFaxAttemptedCallsEntry, acPMSIPIP2TelTrunkEstablishedCallsVal=acPMSIPIP2TelTrunkEstablishedCallsVal, acPMCPCommandSuccessCountTotal=acPMCPCommandSuccessCountTotal, acPMCPCallAttemptsPerSecTable=acPMCPCallAttemptsPerSecTable, acPMcpCmdProcessTimeFullDayAverage=acPMcpCmdProcessTimeFullDayAverage, acPMActiveContextCountTotal=acPMActiveContextCountTotal, acPMMegacoSuccessfulAddWithLoopbackTable=acPMMegacoSuccessfulAddWithLoopbackTable, acPMCPConnection=acPMCPConnection, acPMSIPBusyCallsDirection=acPMSIPBusyCallsDirection, acPMCPRetransmissionCountEntry=acPMCPRetransmissionCountEntry, acPMSIPCallDurationAverage=acPMSIPCallDurationAverage, acPMSIPFailCallsEntry=acPMSIPFailCallsEntry, acPMcpTransactionProcessTimerTotal=acPMcpTransactionProcessTimerTotal, acPMCPCommandCounterDirection=acPMCPCommandCounterDirection, acPMcpTransactionProcessTimerTimeAboveHighThreshold=acPMcpTransactionProcessTimerTimeAboveHighThreshold, acPMCPCmdSuccessCountTotal=acPMCPCmdSuccessCountTotal, acPMSIPCallDurationEntry=acPMSIPCallDurationEntry, acPMcpUMTSHandOverCountInterval=acPMcpUMTSHandOverCountInterval, acPMActiveContextCountTimeBelowLowThreshold=acPMActiveContextCountTimeBelowLowThreshold, acPMcpCmdProcessTimeMax=acPMcpCmdProcessTimeMax, acPMMegacoOutgoingCommandFailureCountEntry=acPMMegacoOutgoingCommandFailureCountEntry)
mibBuilder.exportSymbols("AC-PM-Control-MIB", acPMSIPIP2TelTrunkGroupEstablishedCallsEntry=acPMSIPIP2TelTrunkGroupEstablishedCallsEntry, acPMCPCommandCounterTotal=acPMCPCommandCounterTotal, acPMControlConfigurationPeriodLength=acPMControlConfigurationPeriodLength, acPMMGCPLoopbackCRCXTable=acPMMGCPLoopbackCRCXTable, acPMCPCommandCounterInterval=acPMCPCommandCounterInterval, acPMcpCmdProcessTimeInterval=acPMcpCmdProcessTimeInterval, acPMcpTransactionProcessTimerVolume=acPMcpTransactionProcessTimerVolume, acPMCPConnectionAttributesCommandFailureCountHighThreshold=acPMCPConnectionAttributesCommandFailureCountHighThreshold, acPMCPCmdSuccessCountInterval=acPMCPCmdSuccessCountInterval, acPMSIPForwardedCallsTable=acPMSIPForwardedCallsTable, acPMControlConfiguration=acPMControlConfiguration, acPMControlData=acPMControlData, acPMMegacoFailedAddWithLoopbackTable=acPMMegacoFailedAddWithLoopbackTable, acPMcpCmdProcessTimeTimeBelowLowThreshold=acPMcpCmdProcessTimeTimeBelowLowThreshold, acPMCPConnectionStateTable=acPMCPConnectionStateTable, acPMMGCPGeneratedDLCXPerReasonCodeEntry=acPMMGCPGeneratedDLCXPerReasonCodeEntry, acPMMGCPCommandFailureCountTable=acPMMGCPCommandFailureCountTable, acPMCPCmdFailureCountTable=acPMCPCmdFailureCountTable, acPMSIPNoAnswerCallsTable=acPMSIPNoAnswerCallsTable, acPMCPCallAttemptsPerSecVolume=acPMCPCallAttemptsPerSecVolume, acPMMGCPLoopbackCRCXInterval=acPMMGCPLoopbackCRCXInterval, acPMCPConnectionAttributesCommandSuccessCountLowThreshold=acPMCPConnectionAttributesCommandSuccessCountLowThreshold, acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum=acPMSIPTel2IPTrunkGroupEstablishedCallsGroupNum, acPMCPConnectionLifetimeTimeAboveHighThreshold=acPMCPConnectionLifetimeTimeAboveHighThreshold, acPMcpUMTSHandOverCountEntry=acPMcpUMTSHandOverCountEntry, acPMCPConnectionAttributesActiveContextCountLowThreshold=acPMCPConnectionAttributesActiveContextCountLowThreshold, acPMCPConnectionStateInterval=acPMCPConnectionStateInterval, acPMCPCommandSuccessCountCommandType=acPMCPCommandSuccessCountCommandType, acPMMGCPFailedNTFYResponsesTable=acPMMGCPFailedNTFYResponsesTable, acPMCPConnectionStateEntry=acPMCPConnectionStateEntry, acPMSIPCallDurationTable=acPMSIPCallDurationTable, acPMSIPTel2IPTrunkGroupEstablishedCallsVal=acPMSIPTel2IPTrunkGroupEstablishedCallsVal, acPMcpTransactionProcessTimerVal=acPMcpTransactionProcessTimerVal, acPMCPCmdFailureCountEntry=acPMCPCmdFailureCountEntry, acPMSIPFailCallsVal=acPMSIPFailCallsVal, acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum=acPMSIPIP2TelTrunkGroupEstablishedCallsGroupNum, acPMMGCPCommandFailureCountInterval=acPMMGCPCommandFailureCountInterval, acPMSIPCallDurationTimeBelowLowThreshold=acPMSIPCallDurationTimeBelowLowThreshold, acPMMegacoServiceChangeCountMethod=acPMMegacoServiceChangeCountMethod, acPMCPCommandFailureCountTable=acPMCPCommandFailureCountTable, acPMMGCPCommandSuccessCountEntry=acPMMGCPCommandSuccessCountEntry, acPMSIPTel2IPTrunkEstablishedCallsEntry=acPMSIPTel2IPTrunkEstablishedCallsEntry, acPMMegacoModifyFailureCountInterval=acPMMegacoModifyFailureCountInterval, acPMCPCallAttemptsPerSecAverage=acPMCPCallAttemptsPerSecAverage, acPMSIPTel2IPTrunkEstablishedCallsTrunkNum=acPMSIPTel2IPTrunkEstablishedCallsTrunkNum, acPMSIPFaxSuccessCallsVal=acPMSIPFaxSuccessCallsVal, acPMSIPIP2TelTrunkEstablishedCallsTable=acPMSIPIP2TelTrunkEstablishedCallsTable, acPMSIPIP2TelTrunkGroupEstablishedCallsTable=acPMSIPIP2TelTrunkGroupEstablishedCallsTable, acPMActiveContextCountVolume=acPMActiveContextCountVolume, acPMSIPIP2TelTrunkGroupEstablishedCallsInterval=acPMSIPIP2TelTrunkGroupEstablishedCallsInterval, acPMCPConnectionLifetimeAverage=acPMCPConnectionLifetimeAverage, acPMMegacoSuccessfulAddWithLoopbackEntry=acPMMegacoSuccessfulAddWithLoopbackEntry, acPMSIPNoMatchCallsTable=acPMSIPNoMatchCallsTable, acPMcpCmdProcessTimeMin=acPMcpCmdProcessTimeMin, acPMSIPNoAnswerCallsDirection=acPMSIPNoAnswerCallsDirection, acPMMGCPRsipReasonCountInterval=acPMMGCPRsipReasonCountInterval, acPMMGCPFailedMDCXResponsesVal=acPMMGCPFailedMDCXResponsesVal, acPMSIPBusyCallsVal=acPMSIPBusyCallsVal, acPMMegacoSuccessfulAddWithLoopbackInterval=acPMMegacoSuccessfulAddWithLoopbackInterval, acPMSIPCallDurationMax=acPMSIPCallDurationMax, acPMMGCPGeneratedDLCXPerReasonCodeVal=acPMMGCPGeneratedDLCXPerReasonCodeVal, acPMActiveContextCountTimeAboveHighThreshold=acPMActiveContextCountTimeAboveHighThreshold, acPMMGCPCommandSuccessCountTotal=acPMMGCPCommandSuccessCountTotal, acPMSIPEstablishedCallsInterval=acPMSIPEstablishedCallsInterval, acPMSIPNoRouteCallsTable=acPMSIPNoRouteCallsTable)
