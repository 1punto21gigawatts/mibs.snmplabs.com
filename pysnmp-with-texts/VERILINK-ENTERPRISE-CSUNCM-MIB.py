#
# PySNMP MIB module VERILINK-ENTERPRISE-CSUNCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-CSUNCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Counter32, Bits, ModuleIdentity, IpAddress, NotificationType, Gauge32, Integer32, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Counter32", "Bits", "ModuleIdentity", "IpAddress", "NotificationType", "Gauge32", "Integer32", "MibIdentifier", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_csu, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-csu")
ncmcsuMainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000), )
if mibBuilder.loadTexts: ncmcsuMainConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuMainConfigTable.setDescription(' The ncm csu main configuration table.')
ncmcsuMainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDMainConfigIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuMainLineIndex"))
if mibBuilder.loadTexts: ncmcsuMainConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuMainConfigEntry.setDescription('An entry in the ncm csu main configuration table.')
ncmcsuNIDMainConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDMainConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDMainConfigIndex.setDescription('This variable specifies the node id.')
ncmcsuMainLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuMainLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuMainLineIndex.setDescription('This variable specifies the line index value.')
ncmcsuFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unframed", 1), ("sf", 2), ("esf", 3), ("zbtsi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuFormat.setDescription('The ncmcsu Net/Eq format.')
ncmcsuLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuLineCode.setDescription('The ncmcsu Net/Eq Line Code.')
ncmcsuEQCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ft-0-133", 1), ("fT-133-266", 2), ("fT-266-399", 3), ("fT-399-533", 4), ("fT-533-655", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuEQCableLength.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEQCableLength.setDescription('The ncmcsu EQ Cable Length.')
ncmcsuTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("through", 1), ("internal", 2), ("external-422", 3), ("ext-ttl", 4), ("net", 5), ("eq", 6), ("tiu", 7), ("dsu", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTiming.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTiming.setDescription('The ncmcsu timing.')
ncmdsudatabus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("bus-a", 2), ("bus-b", 3), ("bus-c", 4), ("drop-uses-bus-b", 5), ("insert-uses-bus-a", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsudatabus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsudatabus.setDescription('The dsu data bus reserved for future.')
ncmcsuNetLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db-Zero", 1), ("db-Seven-point-five", 2), ("db-Fifteen", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetLineBuildOut.setDescription('The ncmcsu net line build out.')
ncmcsuValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuValidIntervals.setDescription('The ncmcsu valid intervals.')
ncmcsuCurrentIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentIntervalSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentIntervalSec.setDescription('The ncmcsu seconds in current 15 minutes interval. ')
ncmcsuJitterBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eq-Net-16-16", 1), ("eq-Net-40-16", 2), ("eq-Net-16-40", 3), ("eq-Net-40-40", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuJitterBuf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuJitterBuf.setDescription('The ncmcsu Net/Eq Jitter buffer in bits.')
ncmcsuTestSigCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestSigCfgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTestSigCfgEnable.setDescription('bit 1 of MSGOUT+47 for read or of MSGIN+47 for write is test signal enable in this test signal configuration message.')
ncmcsuTestSigCfgFrameSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestSigCfgFrameSignal.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTestSigCfgFrameSignal.setDescription('bit 7 of MSGOUT+47 for read or of MSGIN+47 for write is frame test signal in this test signal configuration message.')
ncmcsuRLBTimeoutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuRLBTimeoutIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuRLBTimeoutIndex.setDescription('The rlb timeout index.')
ncmcsuCfgRptSendPRM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptSendPRM.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgRptSendPRM.setDescription('bit 0 of MSGOUT+52 for read or MSGIN+52 for write is send prm in this configure report message.')
ncmcsuCfgRptPollFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptPollFarEnd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgRptPollFarEnd.setDescription('bit 1 of MSGOUT+52 for read or MSGIN+52 for write is poll far end in this configure report message.')
ncmcsuCfgRptDataLinkUnsolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptDataLinkUnsolicit.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgRptDataLinkUnsolicit.setDescription('bit 2 of MSGOUT+52 for read or MSGIN+52 for write is data link unsolicited report in this configure report message.')
ncmcsuCfgRptAlmReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptAlmReporting.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgRptAlmReporting.setDescription('bit 3 of MSGOUT+52 for read or MSGIN+52 for write is alarm reporting in this configure report message.')
ncmcsuCfgRptPRMType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nO-PRM", 1), ("uSER", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptPRMType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgRptPRMType.setDescription('bit 4,5 of MSGOUT+52 for read or of MSGIN+52 for write is PRM type in this configure report message.')
ncmcsuCfgCodeRegenCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("net-to-Eq", 2), ("eq-to-Net", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeRegenCRC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgCodeRegenCRC.setDescription('bit 0,1 of MSGOUT+53 for read or MSGIN+53 for write is regenerate crc from net to dte or eq to net in this configure coding message. ')
ncmcsuCfgCodeXYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("net-to-Eq", 2), ("eq-to-Net", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeXYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgCodeXYellowAlarm.setDescription('bit 2,3 of MSGOUT+53 for read or MSGIN+53 for write is transcode yellow alarm from net to dte or eq to net in this configure coding message. ')
ncmcsuCfgCodeEQFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifteen-bits", 1), ("forty-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeEQFIFO.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgCodeEQFIFO.setDescription('bit 4 of MSGOUT+53 for read or MSGIN+53 for write is eq fifo in this configure coding message. ')
ncmcsuCfgCodeNETFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifteen-bits", 1), ("forty-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeNETFIFO.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgCodeNETFIFO.setDescription('bit 5 of MSGOUT+53 for read or MSGIN+53 for write is net fifo in this configure coding message. ')
ncmcsuCfgCodeTranMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeTranMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgCodeTranMode.setDescription('bit 6 of MSGOUT+53 for read or MSGIN+53 for write is transparent mode in this configure report message.')
ncmcsuCfgCodeSend1sLnkIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeSend1sLnkIdle.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgCodeSend1sLnkIdle.setDescription('bit 7 of MSGOUT+53 for read or MSGIN+53 for write is send ones data link idle code in this configure report message.')
ncmcsuCfgAlmSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmSelfTest.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgAlmSelfTest.setDescription('bit 0 of MSGOUT+54 for read or MSGIN+54 for write is enable power up self test in this configure alarm message.')
ncmcsuCfgAlmEnableTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmEnableTestState.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgAlmEnableTestState.setDescription('bit 1 of MSGOUT+54 for read or MSGIN+54 for write is enable alarms in test state in this configure alarm message.')
ncmcsuCfgAlmUnframedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmUnframedMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgAlmUnframedMode.setDescription('bit 2 of MSGOUT+54 for read or MSGIN+54 for write is alarms in unframe mode in this configure alarm message.')
ncmcsuCfgAlmOnEqLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmOnEqLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgAlmOnEqLoop.setDescription('bit 3 of MSGOUT+54 for read or MSGIN+54 for write is alarm on eq loop loop in this configure alarm message.')
ncmcsuCfgAlmOnNetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmOnNetLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgAlmOnNetLoop.setDescription('bit 4 of MSGOUT+54 for read or MSGIN+54 for write is alarm on net loop in this configure alarm message.')
ncmcsuCfgAlmOnPowerUpLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmOnPowerUpLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgAlmOnPowerUpLoop.setDescription('bit 5 of MSGOUT+54 for read or MSGIN+54 for write is alarm power up loop in this configure alarm message.')
ncmcsuCfgLoopRespLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespLLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgLoopRespLLB.setDescription('bit 0 of MSGOUT+55 for read or MSGIN+55 for respond to LLB in this configure Loop Response Message.')
ncmcsuCfgLoopRespPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespPLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgLoopRespPLB.setDescription('bit 1 of MSGOUT+55 for read or MSGIN+55 for respond to PLB in this configure Loop Response Message.')
ncmcsuCfgLoopRespELB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespELB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgLoopRespELB.setDescription('bit 2 of MSGOUT+55 for read or MSGIN+55 for respond to ELB in this configure Loop Response Message.')
ncmcsuCfgLoopRespRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespRLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgLoopRespRLB.setDescription('bit 3 of MSGOUT+55 for read or MSGIN+55 for respond to RLB in this configure Loop Response Message.')
ncmcsuCfgLoopRespLLBTONE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespLLBTONE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgLoopRespLLBTONE.setDescription('bit 4 of MSGOUT+55 for read or MSGIN+55 for respond to LLB (T1.403) in this configure Loop Response Message.')
ncmcsuCfgLoopRespPLBTONE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespPLBTONE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgLoopRespPLBTONE.setDescription('bit 5 of MSGOUT+55 for read or MSGIN+55 for respond to PLB (T1.403) in this configure Loop Response Message.')
ncmcsuCfgSendReceiveInBandCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgSendReceiveInBandCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCfgSendReceiveInBandCode.setDescription('bit 6 of MSGOUT+55 for read or MSGIN+55 for enable to Send/Receive of in-band code.')
ncmcsuEnhanceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001), )
if mibBuilder.loadTexts: ncmcsuEnhanceConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhanceConfigTable.setDescription('The ncmcsu enhance configuration table.')
ncmcsuEnhanceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDEnhanceIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhanceLineIndex"))
if mibBuilder.loadTexts: ncmcsuEnhanceConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhanceConfigEntry.setDescription('An entry in the ncmcsu enhance configuration table.')
ncmcsuNIDEnhanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDEnhanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDEnhanceIndex.setDescription('This variable specifies the nid index.')
ncmcsuEnhanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhanceLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhanceLineIndex.setDescription('This variable specifies the line index.')
ncmcsuNetworkKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop", 2), ("aIS", 3), ("framed-all-ones", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetworkKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetworkKeepAlive.setDescription('The ncmcsu network keep alive varaible .')
ncmcsuAlarmSetDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAlarmSetDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuAlarmSetDelay.setDescription('The ncmcsu alarm set delay.')
ncmcsuAlarmClearDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAlarmClearDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuAlarmClearDelay.setDescription('The ncmcsu alarm clear delay.')
ncmcsuAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuAlarmEnable.setDescription('The ncmcsu alarm reporting.')
ncmcsuNetDensityEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("fcc-part-68", 2), ("pub-62411", 3), ("eighty-zeroes", 4), ("fifteen-zeroes", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetDensityEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetDensityEnforcement.setDescription('The ncmcsu net density enforcement.')
ncmcsuLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10))).clone(namedValues=NamedValues(("csu-Payload-Loop-Back", 1), ("csu-Line-Loop-Back", 2), ("repeater-Loop-Back", 3), ("csu-Equip-Loop-Back", 4), ("csu-No-Loop-Back", 5), ("deactivate-LLB-and-PLB", 6), ("deactivate-ELB-and-RLB", 7), ("send-Inband-Loop-Up", 9), ("send-Inband-Loop-Down", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuLoopback.setDescription(' The ncmcsu loop back config. ')
ncmcsuTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("no-test", 1), ("qrss-to-net", 2), ("one-in-eight-to-net", 3), ("three-in-twenty-four-to-net", 4), ("all-ones-to-net", 5), ("qrss-to-eq", 6), ("one-in-eight-to-eq", 7), ("three-in-twenty-four-to-eq", 8), ("all-ones-to-eq", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTestPattern.setDescription(' The ncmcsu test pattern config. ')
ncmcsuResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuResetPerfReg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuResetPerfReg.setDescription(' The ncmcsu reset performance monitoring register ')
ncmcsuTestErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTestErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTestErrorCounter.setDescription(' The ncmcsu test error counter in the test status ')
ncmcsuTestSecondsRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTestSecondsRemain.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTestSecondsRemain.setDescription(' The ncmcsu test seconds remaining in the test status ')
ncmcsuTestTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestTimeSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTestTimeSeconds.setDescription(' The csu test time duration. Enter Value (0-142, 255) 0 corresponds to 0 Sec (Default) 1 - 59 corresponds to 1-59 Seconds 60 - 118 corresponds to 1-59 Min 119 - 142 corresponds to 1-24 HR 255 corresponds to (Forever) option ')
ncmcsuNetLOFCIndexTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetLOFCIndexTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetLOFCIndexTime.setDescription(' The csu net lofc index time ')
ncmcsuChannelMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuChannelMask.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuChannelMask.setDescription(' The csu channel mask for the 24 channels ')
ncmcsuApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("csu", 2), ("smds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuApplication.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuApplication.setDescription(' The csu application mode ')
ncmcsuTestIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTestIntervalIndex.setDescription(' The csu Test Inteval Index value used for test pattern (0 - config default) ')
ncmcsuElementStatusOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002), )
if mibBuilder.loadTexts: ncmcsuElementStatusOneTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuElementStatusOneTable.setDescription(' the ncmcsu element status table.')
ncmcsuElementStatusOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDElementStatusIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuElementStatusIndex1"))
if mibBuilder.loadTexts: ncmcsuElementStatusOneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuElementStatusOneEntry.setDescription('An entry in the ncmcsu element status table.')
ncmcsuNIDElementStatusIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDElementStatusIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDElementStatusIndex1.setDescription('This variable specifies the node id of the node.')
ncmcsuElementStatusIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuElementStatusIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuElementStatusIndex1.setDescription('This variable specifies the interface index .')
ncmcsuExcessiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuExcessiveError.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuExcessiveError.setDescription('The Net/Eq has excessive errors.')
ncmcsuOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuOutOfFrame.setDescription('The ncmcsu Eq is out of frame (OOF).')
ncmcsuNetLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetLossOfSignal.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetLossOfSignal.setDescription('The ncmcsu Net/Eq uas interval.')
ncmcsuElementStatusTwoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003), )
if mibBuilder.loadTexts: ncmcsuElementStatusTwoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuElementStatusTwoTable.setDescription('The ncmcsu element status table2.')
ncmcsuElementStatusTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDElementStatusIndex2"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuElementStatusIndex2"))
if mibBuilder.loadTexts: ncmcsuElementStatusTwoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuElementStatusTwoEntry.setDescription('An entry in the ncmcsu element status table2.')
ncmcsuNIDElementStatusIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDElementStatusIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDElementStatusIndex2.setDescription('This variable specifies the node id for the node.')
ncmcsuElementStatusIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuElementStatusIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuElementStatusIndex2.setDescription('This variable specifies the interface index value.')
ncmcsuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuStatus.setDescription('The ncmcsu test status. The bit position are described as follows: BIT NAME 0 pulses 1 frame loss 2 crc error 3 bpv 4 looped 5 yellow alarm 6 sending test signal 7 alarm.')
ncmcsuAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuAddress1.setDescription('The ncmcsu address1.')
ncmcsuAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuAddress2.setDescription('The ncmcsu address2.')
ncmcsuLLBELBPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuLLBELBPLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuLLBELBPLB.setDescription('The ncmcsu Net/Eq uas threshold.')
ncmcsuThresholdIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004), )
if mibBuilder.loadTexts: ncmcsuThresholdIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuThresholdIntervalTable.setDescription('The ncmcsu ThresholdInterval table.')
ncmcsuThresholdIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDThresholdIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuThresholdIntervalIndex"))
if mibBuilder.loadTexts: ncmcsuThresholdIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuThresholdIntervalEntry.setDescription('An entry in the ncmcsu ThresholdInterval table.')
ncmcsuNIDThresholdIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDThresholdIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDThresholdIntervalIndex.setDescription('This variable specifies the node id of the node.')
ncmcsuThresholdIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuThresholdIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuThresholdIntervalIndex.setDescription('This variable specifies the interface index.')
ncmcsuBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 1), ("ten-to-Four", 2), ("ten-to-Five", 3), ("ten-to-Six", 4), ("ten-to-Seven", 5), ("ten-to-Eight", 6), ("ten-to-Nine", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuBERThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuBERThreshold.setDescription('The ncmcsu Net/Eq ber threshold.')
ncmcsubpvSecThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsubpvSecThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsubpvSecThreshold.setDescription('The ncmcsu Net/Eq bpv sec threshold.')
ncmcsubpvSecInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsubpvSecInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsubpvSecInterval.setDescription('The ncmcsu Net/Eq bpv sec interval.')
ncmcsuESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuESThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuESThreshold.setDescription('The ncmcsu Net/Eq es threshold.')
ncmcsuESInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuESInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuESInterval.setDescription('The ncmcsu Net/Eq es interval.')
ncmcsuUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuUASThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuUASThreshold.setDescription('The ncmcsu Net/Eq uas threshold.')
ncmcsuUASInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuUASInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuUASInterval.setDescription('The ncmcsu Net/Eq uas interval.')
ncmcsuCurrentOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005), )
if mibBuilder.loadTexts: ncmcsuCurrentOneTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentOneTable.setDescription('The ncmcsu Current table1.')
ncmcsuCurrentOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDCurrentIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuCurrentIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuCurrentEndType1"))
if mibBuilder.loadTexts: ncmcsuCurrentOneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentOneEntry.setDescription('An entry in the ncmcsu Current table1.')
ncmcsuNIDCurrentIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDCurrentIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDCurrentIndex1.setDescription('This variable specifies the node id of the node')
ncmcsuCurrentIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentIndex1.setDescription('The index value which uniquely identifies the ncmcsu interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmcsuLineIndex object instance.')
ncmcsuCurrentEndType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEndType1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEndType1.setDescription('The variable specifies the End Type .')
ncmcsuCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentESs.setDescription('The number of Errored Seconds, encountered by a ncmcsu interface in the current 15 minute inter- val.')
ncmcsuCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentUASs.setDescription('The number of Unavailable Seconds encountered by a ncmcsu interface in the current 15 minute in- terval.')
ncmcsuCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentPCVs.setDescription('The number of Path Coding Violations encoun- tered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentLESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentLESs.setDescription('The number of Line Errored Seconds encountered by a ncmcsu interface in the current 15 minute in- terval.')
ncmcsuCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentDMs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentDMs.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuIntervalOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006), )
if mibBuilder.loadTexts: ncmcsuIntervalOneTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalOneTable.setDescription('The ncmcsu Interval table1.')
ncmcsuIntervalOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDIntervalIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalEndType1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalNumber1"))
if mibBuilder.loadTexts: ncmcsuIntervalOneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalOneEntry.setDescription('An entry in the ncmcsu Interval table1.')
ncmcsuNIDIntervalIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDIntervalIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDIntervalIndex1.setDescription('This variable specifies the node id of the node')
ncmcsuIntervalIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalIndex1.setDescription('The index value which uniquely identifies the ncmcsu interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmcsuLineIndex object instance.')
ncmcsuIntervalEndType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEndType1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEndType1.setDescription('The variable specifies the End Type .')
ncmcsuIntervalNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNumber1.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
ncmcsuIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalESs.setDescription('The number of Errored Seconds encountered by a ncmcsu interface in one of the previous 96, indi- vidual 15 minute, intervals.')
ncmcsuIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalPCVs.setDescription('The number of Path Coding Violations encoun- tered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalLESs.setDescription('The number of Line Errored Seconds encountered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalDMs.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuTotalOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007), )
if mibBuilder.loadTexts: ncmcsuTotalOneTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalOneTable.setDescription('The ncmcsu Total table. 24 hour interval.')
ncmcsuTotalOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDTotalIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuTotalIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuTotalEndType1"))
if mibBuilder.loadTexts: ncmcsuTotalOneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalOneEntry.setDescription('An entry in the ncmcsu Total table.')
ncmcsuNIDTotalIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDTotalIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDTotalIndex1.setDescription('This variable specifies the node id of the node')
ncmcsuTotalIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalIndex1.setDescription('The index value which uniquely identifies the ncmcsu interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmcsuLineIndex object instance.')
ncmcsuTotalEndType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEndType1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEndType1.setDescription('The variable specifies the End Type .')
ncmcsuTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalESs.setDescription('The number of Errored Seconds encountered by a ncmcsu interface in the previous 24 hour interval')
ncmcsuTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalUASs.setDescription('The number of Unavailable Seconds encountered by a ncmcsu interface in the previous 24 hour in- terval.')
ncmcsuTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalPCVs.setDescription('The number of Path Coding Violations encoun- tered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalLESs.setDescription('The number of Line Errored Seconds encountered by a ncmcsu interface in the previous 24 hour in- terval.')
ncmcsuTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalDMs.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuEnhancedCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008), )
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentTable.setDescription('The ncm csu enhanced Current table.')
ncmcsuEnhancedCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDEnhancedCurrentIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedCurrentIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedCurrentEndType"))
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentEntry.setDescription('An entry in the ncmcsu Enhanced Current table.')
ncmcsuNIDEnhancedCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDEnhancedCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDEnhancedCurrentIndex.setDescription('This variable specifies the node id of the node')
ncmcsuEnhancedCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentIndex.setDescription('The index value which uniquely identifies the ncmcsu interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmcsuLineIndex object instance.')
ncmcsuEnhancedCurrentEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentEndType.setDescription('The variable specifies the End Type .')
ncmcsuEnhancedCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentESs.setDescription('The number of Errored Seconds, encountered by a ncmcsu interface in the current 15 minute inter- val.')
ncmcsuEnhancedCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuEnhancedCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentUASs.setDescription('The number of Unavailable Seconds encountered by a ncmcsu interface in the current 15 minute in- terval.')
ncmcsuEnhancedCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a ncmcsu interface in the current 15 minute intervals.')
ncmcsuEnhancedCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a ncmcsu interface in the current 15 minute interval.')
ncmcsuEnhancedCurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentLOFC.setDescription('The number of LOFC encountered by a ncmcsu interface in the current 15 minute intervals.')
ncmcsuEnhancedIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009), )
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalTable.setDescription('The ncmcsu Interval table1.')
ncmcsuEnhancedIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDEnhancedIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedIntervalEndType"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedIntervalNumber"))
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalEntry.setDescription('An entry in the ncmcsu Enhanced Interval table.')
ncmcsuNIDEnhancedIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDEnhancedIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDEnhancedIntervalIndex.setDescription('This variable specifies the node id of the node')
ncmcsuEnhancedIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalIndex.setDescription('The index value which uniquely identifies the ncmcsu interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmcsuLineIndex object instance.')
ncmcsuEnhancedIntervalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalEndType.setDescription('The variable specifies the End Type .')
ncmcsuEnhancedIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
ncmcsuEnhancedIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalESs.setDescription('The number of Errored Seconds encountered by a ncmcsu interface in one of the previous 96, indi- vidual 15 minute, intervals.')
ncmcsuEnhancedIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuEnhancedIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuEnhancedIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuEnhancedIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuEnhancedIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalLOFC.setDescription('The number of LOFC encountered by a ncmcsu interface in one of the previous 96, individual 15 minute, intervals.')
ncmcsuEnhancedTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010), )
if mibBuilder.loadTexts: ncmcsuEnhancedTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalTable.setDescription('The ncmcsu Enhanced Total table. 24 hour interval.')
ncmcsuEnhancedTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDEnhancedTotalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedTotalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedTotalEndType"))
if mibBuilder.loadTexts: ncmcsuEnhancedTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalEntry.setDescription('An entry in the ncmcsu Total table.')
ncmcsuNIDEnhancedTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDEnhancedTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDEnhancedTotalIndex.setDescription('This variable specifies the node id of the node')
ncmcsuEnhancedTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalIndex.setDescription('The index value which uniquely identifies the ncmcsu interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a ncmcsuLineIndex object instance.')
ncmcsuEnhancedTotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalEndType.setDescription('The variable specifies the End Type .')
ncmcsuEnhancedTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalESs.setDescription('The number of Errored Seconds encountered by a ncmcsu interface in the previous 24 hour interval')
ncmcsuEnhancedTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuEnhancedTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalUASs.setDescription('The number of Unavailable Seconds encountered by a ncmcsu interface in the previous 24 hour in- terval.')
ncmcsuEnhancedTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuEnhancedTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuEnhancedTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEnhancedTotalLOFC.setDescription('The number of LOFC encountered by a ncmcsu interface in the previous 24 hour interval.')
ncmcsuCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011), )
if mibBuilder.loadTexts: ncmcsuCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentTable.setDescription('The Current Entry table.')
ncmcsuCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDCurrentIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuCurrentIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuCurrentEndType"))
if mibBuilder.loadTexts: ncmcsuCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEntry.setDescription('An entry in the Current Entry table.')
ncmcsuNIDCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDCurrentIndex.setDescription('This variable specifies the node id of the node.')
ncmcsuCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentIndex.setDescription('This variable specifies the interface index.')
ncmcsuCurrentEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEndType.setDescription('The variable specifies the End Type .')
ncmcsuCurrentNETOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETOOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentNETOOFS.setDescription('The ncmcsu Current OOFS of Net/Eq.')
ncmcsuCurrentNETLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETLOSS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentNETLOSS.setDescription('The ncmcsu Current LOSS of Net/Eq.')
ncmcsuCurrentNETAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentNETAISS.setDescription('The ncmcsu Current AISS of Net.')
ncmcsuCurrentNETBERS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETBERS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentNETBERS.setDescription('The ncmcsu Current BERS of Net.')
ncmcsuCurrentNETYELS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETYELS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentNETYELS.setDescription('The ncmcsu Current YELS of Net.')
ncmcsuCurrentNETLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETLOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentNETLOFS.setDescription('The ncmcsu Current LOFS of Net.')
ncmcsuCurrentNETESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETESL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentNETESL.setDescription('The ncmcsu Current ESL of Net.')
ncmcsuCurrentNETSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentNETSEFS.setDescription('The ncmcsu Current SEFS of Net.')
ncmcsuCurrentEQOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQOOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEQOOFS.setDescription('The ncmcsu Current oofs of Eq.')
ncmcsuCurrentEQDTED = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQDTED.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEQDTED.setDescription('The ncmcsu Current dted of Eq.')
ncmcsuCurrentEQDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQDBER.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEQDBER.setDescription('The ncmcsu Current dber of Eq.')
ncmcsuCurrentEQES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEQES.setDescription('The ncmcsu Current ES of Eq.')
ncmcsuCurrentEQUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEQUAS.setDescription('The ncmcsu Current UAS of Eq.')
ncmcsuCurrentEQESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQESL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuCurrentEQESL.setDescription('The ncmcsu Current ESL of Eq.')
ncmcsuTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012), )
if mibBuilder.loadTexts: ncmcsuTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalTable.setDescription('The total Entry table.')
ncmcsuTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDTotalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuTotalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuTotalEndType"))
if mibBuilder.loadTexts: ncmcsuTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEntry.setDescription('An entry in the total Entry table.')
ncmcsuNIDTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDTotalIndex.setDescription('This variable specifies the node id of the node .')
ncmcsuTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalIndex.setDescription('this variable specifies the interface index.')
ncmcsuTotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEndType.setDescription('The variable specifies the End Type .')
ncmcsuTotalNETOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETOOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalNETOOFS.setDescription('The ncmcsu Total OOFS of Net.')
ncmcsuTotalNETLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETLOSS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalNETLOSS.setDescription('The ncmcsu Total LOSS of Net.')
ncmcsuTotalNETAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalNETAISS.setDescription('The ncmcsu Total AISS of Net.')
ncmcsuTotalNETBERS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETBERS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalNETBERS.setDescription('The ncmcsu Total BERS of Net.')
ncmcsuTotalNETYELS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETYELS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalNETYELS.setDescription('The ncmcsu Total YELS of Net.')
ncmcsuTotalNETLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETLOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalNETLOFS.setDescription('The ncmcsu Total LOFS of Net.')
ncmcsuTotalNETESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETESL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalNETESL.setDescription('The ncmcsu Total ESL of Net.')
ncmcsuTotalNETSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalNETSEFS.setDescription('The ncmcsu Total SEFS of Net.')
ncmcsuTotalEQOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQOOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEQOOFS.setDescription('The ncmcsu Total oofs of Eq.')
ncmcsuTotalEQDTED = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQDTED.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEQDTED.setDescription('The ncmcsu Total dted of Eq.')
ncmcsuTotalEQDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQDBER.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEQDBER.setDescription('The ncmcsu Total dber of Eq.')
ncmcsuTotalEQES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEQES.setDescription('The ncmcsu Total ES of Eq.')
ncmcsuTotalEQUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEQUAS.setDescription('The ncmcsu Total UAS of Eq.')
ncmcsuTotalEQESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQESL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTotalEQESL.setDescription('The ncmcsu Total ESL of Eq.')
ncmcsuIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013), )
if mibBuilder.loadTexts: ncmcsuIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalTable.setDescription('The Interval Entry table.')
ncmcsuIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalEndType"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalNumber"))
if mibBuilder.loadTexts: ncmcsuIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEntry.setDescription('An entry in the Interval Entry table.')
ncmcsuNIDIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDIntervalIndex.setDescription('This variable specifies the node id of the node.')
ncmcsuIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalIndex.setDescription('This variable specifies the interface index value.')
ncmcsuIntervalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEndType.setDescription('The variable specifies the End Type .')
ncmcsuIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
ncmcsuIntervalNETOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETOOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNETOOFS.setDescription('The ncmcsu interval OOFS of Net.')
ncmcsuIntervalNETLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETLOSS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNETLOSS.setDescription('The ncmcsu interval LOSS of Net.')
ncmcsuIntervalNETAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNETAISS.setDescription('The ncmcsu interval AISS of Net.')
ncmcsuIntervalNETBERS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETBERS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNETBERS.setDescription('The ncmcsu interval BERS of Net.')
ncmcsuIntervalNETYELS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETYELS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNETYELS.setDescription('The ncmcsu interval YELS of Net.')
ncmcsuIntervalNETLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETLOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNETLOFS.setDescription('The ncmcsu interval LOFS of Net.')
ncmcsuIntervalNETESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETESL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNETESL.setDescription('The ncmcsu interval ESL of Net.')
ncmcsuIntervalNETSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalNETSEFS.setDescription('The ncmcsu interval SEFS of Net.')
ncmcsuIntervalEQOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQOOFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEQOOFS.setDescription('The ncmcsu interval OOFS of Eq.')
ncmcsuIntervalEQDTED = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQDTED.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEQDTED.setDescription('The ncmcsu interval DTED of Eq.')
ncmcsuIntervalEQDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQDBER.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEQDBER.setDescription('The ncmcsu interval DBER of Eq.')
ncmcsuIntervalEQES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEQES.setDescription('The ncmcsu Interval ES of Eq.')
ncmcsuIntervalEQUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEQUAS.setDescription('The ncmcsu Interval UAS of Eq.')
ncmcsuIntervalEQESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQESL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuIntervalEQESL.setDescription('The ncmcsu Interval ESL of Eq.')
ncmcsucommonTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014), )
if mibBuilder.loadTexts: ncmcsucommonTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsucommonTable.setDescription('The csu common table.')
ncmcsucommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDcommonIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsucommonIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsucommonEndType"))
if mibBuilder.loadTexts: ncmcsucommonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsucommonEntry.setDescription('An entry in the ncmcsu main configuration table.')
ncmcsuNIDcommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDcommonIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDcommonIndex.setDescription('This variable specifies the node id.')
ncmcsucommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsucommonIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsucommonIndex.setDescription('This variable specifies the line index value.')
ncmcsucommonEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsucommonEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsucommonEndType.setDescription('The variable specifies the End Type .')
ncmValidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmValidInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmValidInterval.setDescription('The ncmcsu/idncmcsu valid intervals.')
ncmCurrentIntervalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrentIntervalSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCurrentIntervalSeconds.setDescription('The ncmcsu seconds in current 15 minutes interval. ')
ncmResetPerformanceReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmResetPerformanceReg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmResetPerformanceReg.setDescription(' The ncmcsu reset performance monitoring register ')
ncmcsuRetrievalStatusOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015), )
if mibBuilder.loadTexts: ncmcsuRetrievalStatusOneTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuRetrievalStatusOneTable.setDescription('The ncmcsu retrieval status table.')
ncmcsuRetrievalStatusOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDRetrievalStatusIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuRetrievalStatusIndex1"))
if mibBuilder.loadTexts: ncmcsuRetrievalStatusOneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuRetrievalStatusOneEntry.setDescription('An entry in the ncmcsu element status table.')
ncmcsuNIDRetrievalStatusIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDRetrievalStatusIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDRetrievalStatusIndex1.setDescription('This variable specifies the node id of the node.')
ncmcsuRetrievalStatusIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuRetrievalStatusIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuRetrievalStatusIndex1.setDescription('This variable specifies the interface index .')
ncmcsuNearAlmBERthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNearAlmBERthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNearAlmBERthresexcd.setDescription('The ncmcsu retrieval status 1 ber threshold exceeded which is bit# 0 in near alarm status.')
ncmcsuNearAlmESthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNearAlmESthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNearAlmESthresexcd.setDescription('The ncmcsu retrieval status 1 es threshold exceeded which is bit# 1 in near alarm status.')
ncmcsuNearAlmUASthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNearAlmUASthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNearAlmUASthresexcd.setDescription('The ncmcsu retrieval status 1 uas threshold exceeded which is bit# 2 in near alarm status.')
ncmcsuNearAlmLLBPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNearAlmLLBPLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNearAlmLLBPLB.setDescription('The ncmcsu retrieval status 1 llb or plb which is bit# 3 in near alarm status.')
ncmcsuFarAlmBERthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarAlmBERthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuFarAlmBERthresexcd.setDescription('The ncmcsu retrieval status 1 ber threshold exceeded which is bit# 0 in far alarm status.')
ncmcsuFarAlmESthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarAlmESthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuFarAlmESthresexcd.setDescription('The ncmcsu retrieval status 1 es threshold exceeded which is bit# 1 in far alarm status.')
ncmcsuFarAlmUASthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarAlmUASthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuFarAlmUASthresexcd.setDescription('The ncmcsu retrieval status 1 uas threshold exceeded which is bit# 2 in far alarm status.')
ncmcsuFarAlmLLBDLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarAlmLLBDLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuFarAlmLLBDLB.setDescription('The ncmcsu retrieval status 1 llb or dlb which is bit# 3 in far alarm status.')
ncmcsuFarCsuAbsent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarCsuAbsent.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuFarCsuAbsent.setDescription('The ncmcsu retrieval status 1 ncmcsu absent which is bit# 6 in far alarm status.')
ncmcsuEqStatusLowDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusLowDensity.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEqStatusLowDensity.setDescription('The ncmcsu retrieval status 1 low density which is bit# 0 in eq status.')
ncmcsuEqStatusOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusOOF.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEqStatusOOF.setDescription('The ncmcsu retrieval status 1 oof which is bit# 1 in eq status.')
ncmcsuEqStatusCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusCRCError.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEqStatusCRCError.setDescription('The ncmcsu retrieval status 1 crc error which is bit# 2 in eq status.')
ncmcsuEqStatusBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusBPV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEqStatusBPV.setDescription('The ncmcsu retrieval status 1 bpv which is bit# 3 in eq status.')
ncmcsuEqStatusPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusPLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEqStatusPLB.setDescription('The ncmcsu retrieval status 1 plb which is bit# 4 in eq status.')
ncmcsuEqStatusELBRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-Loop", 1), ("elb", 2), ("rlb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusELBRLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuEqStatusELBRLB.setDescription('The ncmcsu retrieval status 1 elb or rlb which is bit# 6 in eq status.')
ncmcsuNetStatusPulses = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusPulses.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetStatusPulses.setDescription('The ncmcsu retrieval status 1 low density which is bit# 0 in net status.')
ncmcsuNetStatusOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusOOF.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetStatusOOF.setDescription('The ncmcsu retrieval status 1 oof which is bit# 1 in net status.')
ncmcsuNetStatusCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusCRCError.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetStatusCRCError.setDescription('The ncmcsu retrieval status 1 crc error which is bit# 2 in net status.')
ncmcsuNetStatusBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusBPV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetStatusBPV.setDescription('The ncmcsu retrieval status 1 bpv which is bit# 3 in net status.')
ncmcsuNetStatusLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusLLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNetStatusLLB.setDescription('The ncmcsu retrieval status 1 llb which is bit# 4 in net status.')
ncmcsuXNetStatus1BERthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1BERthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus1BERthresexcd.setDescription('The ncmcsu retrieval status 1 ber threshold exceeded which is bit# 0 in extended net status 1.')
ncmcsuXNetStatus1ES1thresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1ES1thresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus1ES1thresexcd.setDescription('The ncmcsu retrieval status 1 es1 threshold exceeded which is bit# 1 in extended net status 1.')
ncmcsuXNetStatus1ESthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1ESthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus1ESthresexcd.setDescription('The ncmcsu retrieval status 1 es threshold exceeded which is bit# 2 in extended net status 1.')
ncmcsuXNetStatus1UASthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1UASthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus1UASthresexcd.setDescription('The ncmcsu retrieval status 1 uas threshold exceeded which is bit# 3 in extended net status 1.')
ncmcsuXNetStatus1LLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1LLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus1LLB.setDescription('The ncmcsu retrieval status 1 llb which is bit# 4 in extended net status 1.')
ncmcsuXNetStatus1PLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1PLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus1PLB.setDescription('The ncmcsu retrieval status 1 plb which is bit# 5 in extended net status 1.')
ncmcsuXNetStatus1LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1LOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus1LOS.setDescription('The ncmcsu retrieval status 1 los which is bit# 6 in extended net status 1.')
ncmcsuXNetStatus1YEL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1YEL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus1YEL.setDescription('The ncmcsu retrieval status 1 yel which is bit# 7 in extended net status 1.')
ncmcsuXNetStatus2LOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2LOF.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus2LOF.setDescription('The ncmcsu retrieval status 1 lof which is bit# 0 in extended net status 2.')
ncmcsuXNetStatus2AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2AIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus2AIS.setDescription('The ncmcsu retrieval status 1 ais which is bit# 1 in extended net status 2.')
ncmcsuXNetStatus2TSTProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2TSTProgress.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus2TSTProgress.setDescription('The ncmcsu retrieval status 1 test in progress which is bit# 2 in extended net status 2.')
ncmcsuXNetStatus2PowerAFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2PowerAFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus2PowerAFail.setDescription('The ncmcsu retrieval status 1 power supply a failure which is bit# 3 in extended net status 2.')
ncmcsuXNetStatus2PowerBFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2PowerBFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXNetStatus2PowerBFail.setDescription('The ncmcsu retrieval status 1 power supply b failure which is bit# 4 in extended net status 2.')
ncmcsuXEqStatus1BERthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1BERthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus1BERthresexcd.setDescription('The ncmcsu retrieval status 1 ber threshold exceeded which is bit# 0 in extended eq status 1.')
ncmcsuXEqStatus1ES1thresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1ES1thresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus1ES1thresexcd.setDescription('The ncmcsu retrieval status 1 es1 threshold exceeded which is bit# 1 in extended eq status 1.')
ncmcsuXEqStatus1ESthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1ESthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus1ESthresexcd.setDescription('The ncmcsu retrieval status 1 es threshold exceeded which is bit# 2 in extended eq status 1.')
ncmcsuXEqStatus1UASthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1UASthresexcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus1UASthresexcd.setDescription('The ncmcsu retrieval status 1 uas threshold exceeded which is bit# 3 in extended eq status 1.')
ncmcsuXEqStatus1ELB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1ELB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus1ELB.setDescription('The ncmcsu retrieval status 1 elb which is bit# 4 in extended eq status 1.')
ncmcsuXEqStatus1RLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1RLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus1RLB.setDescription('The ncmcsu retrieval status 1 rlb which is bit# 5 in extended eq status 1.')
ncmcsuXEqStatus1LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1LOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus1LOS.setDescription('The ncmcsu retrieval status 1 los which is bit# 6 in extended eq status 1.')
ncmcsuXEqStatus1YEL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1YEL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus1YEL.setDescription('The ncmcsu retrieval status 1 yel which is bit# 7 in extended eq status 1.')
ncmcsuXEqStatus2LOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus2LOF.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus2LOF.setDescription('The ncmcsu retrieval status 1 lof which is bit# 0 in extended eq status 2.')
ncmcsuXEqStatus2AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus2AIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus2AIS.setDescription('The ncmcsu retrieval status 1 ais which is bit# 1 in extended eq status 2.')
ncmcsuXEqStatus2TSTSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus2TSTSignal.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuXEqStatus2TSTSignal.setDescription('The ncmcsu retrieval status 1 test signal which is bit# 2 in extended eq status 2.')
ncmcsuTstRstNearRLBTstFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTstRstNearRLBTstFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTstRstNearRLBTstFail.setDescription('The ncmcsu retrieval status 1 near rlb test failed which is bit# 0 in test result.')
ncmcsuTstRstNearPLBTstFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTstRstNearPLBTstFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuTstRstNearPLBTstFail.setDescription('The ncmcsu retrieval status 1 near plb test failed which is bit# 1 in test result.')
ncmcsuMiscellaneousTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016), )
if mibBuilder.loadTexts: ncmcsuMiscellaneousTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuMiscellaneousTable.setDescription('The ncmcsu miscellaneous table.')
ncmcsuMiscellaneousEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDMiscellaneousIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuMiscellaneousIndex"))
if mibBuilder.loadTexts: ncmcsuMiscellaneousEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuMiscellaneousEntry.setDescription('An entry in the ncmcsu miscellaneous table.')
ncmcsuNIDMiscellaneousIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDMiscellaneousIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuNIDMiscellaneousIndex.setDescription('This variable specifies the node id of the node.')
ncmcsuMiscellaneousIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuMiscellaneousIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuMiscellaneousIndex.setDescription('This variable specifies the interface index .')
ncmcsuResetESFErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuResetESFErrCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuResetESFErrCounter.setDescription('The ncmcsu reset esf error counter message(44).')
ncmcsuRetrieveNetESFErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuRetrieveNetESFErrCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuRetrieveNetESFErrCounter.setDescription('The ncmcsu retrieval net esf error counter from the Retrieve Event Counters message(18 01 0F).')
ncmcsuRetrieveEqESFErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuRetrieveEqESFErrCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuRetrieveEqESFErrCounter.setDescription('The ncmcsu retrieval eq esf error counter from the Retrieve Event Counters message(18 01 0F).')
ncmcsuSendBOPmessage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("plb-activate", 1), ("plb-deactivate", 2), ("llb-activate", 3), ("llb-deactivate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuSendBOPmessage.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuSendBOPmessage.setDescription('The ncmcsu send messages(18 01 38,39,3A,3B) to activate or deactivate the plb or llb respectively.')
ncmcsuResetNetEqBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuResetNetEqBERAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuResetNetEqBERAlarm.setDescription('The ncmcsu reset Net and Eq BER Alarms message(18 01 3D).')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-CSUNCM-MIB", ncmcsuCfgAlmSelfTest=ncmcsuCfgAlmSelfTest, ncmcsuIntervalEndType=ncmcsuIntervalEndType, ncmcsuTotalESs=ncmcsuTotalESs, ncmcsuCurrentEQDBER=ncmcsuCurrentEQDBER, ncmcsuAlarmClearDelay=ncmcsuAlarmClearDelay, ncmcsuCurrentPCVs=ncmcsuCurrentPCVs, ncmcsubpvSecThreshold=ncmcsubpvSecThreshold, ncmcsuEnhancedTotalCSSs=ncmcsuEnhancedTotalCSSs, ncmcsuTotalIndex=ncmcsuTotalIndex, ncmcsuTotalNETOOFS=ncmcsuTotalNETOOFS, ncmcsuResetNetEqBERAlarm=ncmcsuResetNetEqBERAlarm, ncmcsuTestTimeSeconds=ncmcsuTestTimeSeconds, ncmcsuCfgRptDataLinkUnsolicit=ncmcsuCfgRptDataLinkUnsolicit, ncmcsuEnhancedCurrentBESs=ncmcsuEnhancedCurrentBESs, ncmcsuCfgAlmUnframedMode=ncmcsuCfgAlmUnframedMode, ncmcsuXEqStatus2TSTSignal=ncmcsuXEqStatus2TSTSignal, ncmcsuESThreshold=ncmcsuESThreshold, ncmcsuCfgAlmEnableTestState=ncmcsuCfgAlmEnableTestState, ncmcsuIntervalNETBERS=ncmcsuIntervalNETBERS, ncmcsuCfgRptPRMType=ncmcsuCfgRptPRMType, ncmcsuMiscellaneousIndex=ncmcsuMiscellaneousIndex, ncmcsuEnhanceConfigTable=ncmcsuEnhanceConfigTable, ncmcsuExcessiveError=ncmcsuExcessiveError, ncmcsuTotalNETESL=ncmcsuTotalNETESL, ncmcsuFarAlmBERthresexcd=ncmcsuFarAlmBERthresexcd, ncmcsuEqStatusPLB=ncmcsuEqStatusPLB, ncmcsuEnhancedTotalSESs=ncmcsuEnhancedTotalSESs, ncmcsuEnhancedCurrentEndType=ncmcsuEnhancedCurrentEndType, ncmcsuNIDElementStatusIndex2=ncmcsuNIDElementStatusIndex2, ncmcsuCurrentNETSEFS=ncmcsuCurrentNETSEFS, ncmcsuXNetStatus2PowerBFail=ncmcsuXNetStatus2PowerBFail, ncmcsuEnhancedIntervalLOFC=ncmcsuEnhancedIntervalLOFC, ncmcsuCurrentBESs=ncmcsuCurrentBESs, ncmcsuNIDIntervalIndex=ncmcsuNIDIntervalIndex, ncmcsuNetLossOfSignal=ncmcsuNetLossOfSignal, ncmcsuCurrentNETOOFS=ncmcsuCurrentNETOOFS, ncmcsuNIDTotalIndex=ncmcsuNIDTotalIndex, ncmcsuIntervalNumber=ncmcsuIntervalNumber, ncmCurrentIntervalSeconds=ncmCurrentIntervalSeconds, ncmcsuXEqStatus1YEL=ncmcsuXEqStatus1YEL, ncmcsuJitterBuf=ncmcsuJitterBuf, ncmcsuEnhancedCurrentIndex=ncmcsuEnhancedCurrentIndex, ncmcsuEnhancedCurrentLOFC=ncmcsuEnhancedCurrentLOFC, ncmcsuMainConfigTable=ncmcsuMainConfigTable, ncmcsuEqStatusBPV=ncmcsuEqStatusBPV, ncmcsuAddress2=ncmcsuAddress2, ncmcsuTotalNETLOFS=ncmcsuTotalNETLOFS, ncmcsuCfgCodeRegenCRC=ncmcsuCfgCodeRegenCRC, ncmcsuIntervalESs=ncmcsuIntervalESs, ncmcsuUASInterval=ncmcsuUASInterval, ncmcsuIntervalLESs=ncmcsuIntervalLESs, ncmcsuIntervalEQESL=ncmcsuIntervalEQESL, ncmcsuNetLOFCIndexTime=ncmcsuNetLOFCIndexTime, ncmcsuXNetStatus1YEL=ncmcsuXNetStatus1YEL, ncmcsuXEqStatus1BERthresexcd=ncmcsuXEqStatus1BERthresexcd, ncmcsuCfgCodeTranMode=ncmcsuCfgCodeTranMode, ncmcsuElementStatusTwoEntry=ncmcsuElementStatusTwoEntry, ncmcsuXEqStatus1ELB=ncmcsuXEqStatus1ELB, ncmcsuNIDElementStatusIndex1=ncmcsuNIDElementStatusIndex1, ncmcsuNIDEnhancedIntervalIndex=ncmcsuNIDEnhancedIntervalIndex, ncmcsuXNetStatus2PowerAFail=ncmcsuXNetStatus2PowerAFail, ncmcsuIntervalIndex1=ncmcsuIntervalIndex1, ncmcsuCfgRptAlmReporting=ncmcsuCfgRptAlmReporting, ncmcsuEnhancedTotalUASs=ncmcsuEnhancedTotalUASs, ncmcsuCurrentNETLOSS=ncmcsuCurrentNETLOSS, ncmcsuXNetStatus1ES1thresexcd=ncmcsuXNetStatus1ES1thresexcd, ncmcsuIntervalEndType1=ncmcsuIntervalEndType1, ncmcsuCurrentTable=ncmcsuCurrentTable, ncmcsuIntervalNETAISS=ncmcsuIntervalNETAISS, ncmcsuCurrentNETBERS=ncmcsuCurrentNETBERS, ncmcsuCurrentOneTable=ncmcsuCurrentOneTable, ncmcsuIntervalLCVs=ncmcsuIntervalLCVs, ncmcsuNearAlmBERthresexcd=ncmcsuNearAlmBERthresexcd, ncmcsuEnhanceConfigEntry=ncmcsuEnhanceConfigEntry, ncmcsuIntervalEQDBER=ncmcsuIntervalEQDBER, ncmcsuIntervalNETLOSS=ncmcsuIntervalNETLOSS, ncmcsuBERThreshold=ncmcsuBERThreshold, ncmcsuEnhancedTotalEntry=ncmcsuEnhancedTotalEntry, ncmcsuTotalEQESL=ncmcsuTotalEQESL, ncmcsuXNetStatus1ESthresexcd=ncmcsuXNetStatus1ESthresexcd, ncmcsuIntervalBESs=ncmcsuIntervalBESs, ncmcsuXNetStatus1LLB=ncmcsuXNetStatus1LLB, ncmcsuCurrentEntry=ncmcsuCurrentEntry, ncmcsuTstRstNearPLBTstFail=ncmcsuTstRstNearPLBTstFail, ncmcsuCfgAlmOnNetLoop=ncmcsuCfgAlmOnNetLoop, ncmcsuAlarmSetDelay=ncmcsuAlarmSetDelay, ncmcsubpvSecInterval=ncmcsubpvSecInterval, ncmcsuNetStatusLLB=ncmcsuNetStatusLLB, ncmcsuEQCableLength=ncmcsuEQCableLength, ncmcsuTotalNETAISS=ncmcsuTotalNETAISS, ncmcsuFarCsuAbsent=ncmcsuFarCsuAbsent, ncmcsuXEqStatus1LOS=ncmcsuXEqStatus1LOS, ncmcsuNIDcommonIndex=ncmcsuNIDcommonIndex, ncmcsucommonIndex=ncmcsucommonIndex, ncmcsuTotalEQUAS=ncmcsuTotalEQUAS, ncmcsuEqStatusLowDensity=ncmcsuEqStatusLowDensity, ncmcsuNetStatusBPV=ncmcsuNetStatusBPV, ncmcsuCfgLoopRespPLBTONE=ncmcsuCfgLoopRespPLBTONE, ncmcsuFarAlmUASthresexcd=ncmcsuFarAlmUASthresexcd, ncmcsuTotalUASs=ncmcsuTotalUASs, ncmResetPerformanceReg=ncmResetPerformanceReg, ncmcsuIntervalOneEntry=ncmcsuIntervalOneEntry, ncmcsuValidIntervals=ncmcsuValidIntervals, ncmcsuStatus=ncmcsuStatus, ncmcsuIntervalCSSs=ncmcsuIntervalCSSs, ncmcsuNearAlmLLBPLB=ncmcsuNearAlmLLBPLB, ncmcsuCurrentOneEntry=ncmcsuCurrentOneEntry, ncmcsuLoopback=ncmcsuLoopback, ncmcsuCurrentSEFSs=ncmcsuCurrentSEFSs, ncmcsuTestSigCfgEnable=ncmcsuTestSigCfgEnable, ncmcsuEnhancedTotalIndex=ncmcsuEnhancedTotalIndex, ncmcsuNIDRetrievalStatusIndex1=ncmcsuNIDRetrievalStatusIndex1, ncmcsuCfgAlmOnPowerUpLoop=ncmcsuCfgAlmOnPowerUpLoop, ncmcsuTestErrorCounter=ncmcsuTestErrorCounter, ncmcsuTestSecondsRemain=ncmcsuTestSecondsRemain, ncmcsuIntervalDMs=ncmcsuIntervalDMs, ncmcsuTotalTable=ncmcsuTotalTable, ncmcsuTotalOneTable=ncmcsuTotalOneTable, ncmcsuCurrentUASs=ncmcsuCurrentUASs, ncmcsuCfgRptPollFarEnd=ncmcsuCfgRptPollFarEnd, ncmcsuTotalEQES=ncmcsuTotalEQES, ncmcsuCurrentIntervalSec=ncmcsuCurrentIntervalSec, ncmcsuCurrentESs=ncmcsuCurrentESs, ncmcsuXNetStatus2LOF=ncmcsuXNetStatus2LOF, ncmcsuXEqStatus2AIS=ncmcsuXEqStatus2AIS, ncmcsuCfgLoopRespPLB=ncmcsuCfgLoopRespPLB, ncmcsuTstRstNearRLBTstFail=ncmcsuTstRstNearRLBTstFail, ncmcsuCurrentEQOOFS=ncmcsuCurrentEQOOFS, ncmcsuCfgRptSendPRM=ncmcsuCfgRptSendPRM, ncmcsuCurrentIndex1=ncmcsuCurrentIndex1, ncmcsuCurrentCSSs=ncmcsuCurrentCSSs, ncmcsuCurrentLCVs=ncmcsuCurrentLCVs, ncmcsuResetESFErrCounter=ncmcsuResetESFErrCounter, ncmcsuLineCode=ncmcsuLineCode, ncmcsuNetStatusCRCError=ncmcsuNetStatusCRCError, ncmcsuXNetStatus1UASthresexcd=ncmcsuXNetStatus1UASthresexcd, ncmcsuNIDMiscellaneousIndex=ncmcsuNIDMiscellaneousIndex, ncmcsuCfgLoopRespLLBTONE=ncmcsuCfgLoopRespLLBTONE, ncmcsuNetStatusPulses=ncmcsuNetStatusPulses, ncmcsuResetPerfReg=ncmcsuResetPerfReg, ncmcsuUASThreshold=ncmcsuUASThreshold, ncmcsuEnhancedCurrentESs=ncmcsuEnhancedCurrentESs, ncmcsuTotalLCVs=ncmcsuTotalLCVs, ncmcsuTotalEntry=ncmcsuTotalEntry, ncmcsuIntervalEQOOFS=ncmcsuIntervalEQOOFS, ncmcsuRetrieveNetESFErrCounter=ncmcsuRetrieveNetESFErrCounter, ncmcsuTotalNETYELS=ncmcsuTotalNETYELS, ncmcsuThresholdIntervalEntry=ncmcsuThresholdIntervalEntry, ncmcsuTotalEQOOFS=ncmcsuTotalEQOOFS, ncmcsuCfgCodeSend1sLnkIdle=ncmcsuCfgCodeSend1sLnkIdle, ncmcsuTotalBESs=ncmcsuTotalBESs, ncmcsuNIDThresholdIntervalIndex=ncmcsuNIDThresholdIntervalIndex, ncmcsuTotalCSSs=ncmcsuTotalCSSs, ncmcsuApplication=ncmcsuApplication, ncmcsuTotalNETBERS=ncmcsuTotalNETBERS, ncmcsuTotalLESs=ncmcsuTotalLESs, ncmcsuTotalNETSEFS=ncmcsuTotalNETSEFS, ncmcsucommonEndType=ncmcsucommonEndType, ncmcsuEqStatusELBRLB=ncmcsuEqStatusELBRLB, ncmcsuCurrentEQES=ncmcsuCurrentEQES, ncmcsuCurrentNETLOFS=ncmcsuCurrentNETLOFS, ncmcsuXNetStatus1BERthresexcd=ncmcsuXNetStatus1BERthresexcd, ncmcsuMiscellaneousEntry=ncmcsuMiscellaneousEntry, ncmcsuNetStatusOOF=ncmcsuNetStatusOOF, ncmcsuXNetStatus1PLB=ncmcsuXNetStatus1PLB, ncmcsuEnhancedIntervalIndex=ncmcsuEnhancedIntervalIndex, ncmcsuSendBOPmessage=ncmcsuSendBOPmessage, ncmcsuMainLineIndex=ncmcsuMainLineIndex, ncmcsuEqStatusOOF=ncmcsuEqStatusOOF, ncmcsuIntervalNETESL=ncmcsuIntervalNETESL, ncmcsucommonEntry=ncmcsucommonEntry, ncmcsuEnhancedTotalESs=ncmcsuEnhancedTotalESs, ncmcsuCfgCodeNETFIFO=ncmcsuCfgCodeNETFIFO, ncmcsuEnhancedIntervalTable=ncmcsuEnhancedIntervalTable, ncmcsuIntervalPCVs=ncmcsuIntervalPCVs, ncmcsuNIDEnhancedTotalIndex=ncmcsuNIDEnhancedTotalIndex, ncmdsudatabus=ncmdsudatabus, ncmcsuEnhancedIntervalUASs=ncmcsuEnhancedIntervalUASs, ncmcsuEnhancedTotalEndType=ncmcsuEnhancedTotalEndType, ncmcsuIntervalEQDTED=ncmcsuIntervalEQDTED, ncmcsuXEqStatus2LOF=ncmcsuXEqStatus2LOF, ncmcsuNIDEnhancedCurrentIndex=ncmcsuNIDEnhancedCurrentIndex, ncmcsuEnhancedCurrentCSSs=ncmcsuEnhancedCurrentCSSs, ncmcsuChannelMask=ncmcsuChannelMask, ncmcsuIntervalNETLOFS=ncmcsuIntervalNETLOFS, ncmcsuXEqStatus1ES1thresexcd=ncmcsuXEqStatus1ES1thresexcd, ncmcsuNIDMainConfigIndex=ncmcsuNIDMainConfigIndex, ncmcsuNetDensityEnforcement=ncmcsuNetDensityEnforcement, ncmcsuIntervalUASs=ncmcsuIntervalUASs, ncmcsuRetrievalStatusOneEntry=ncmcsuRetrievalStatusOneEntry, ncmcsuAlarmEnable=ncmcsuAlarmEnable, ncmcsuTotalSESs=ncmcsuTotalSESs, ncmcsuNIDCurrentIndex=ncmcsuNIDCurrentIndex, ncmcsuCurrentDMs=ncmcsuCurrentDMs, ncmcsuTotalEndType1=ncmcsuTotalEndType1, ncmcsuMiscellaneousTable=ncmcsuMiscellaneousTable, ncmcsuTotalSEFSs=ncmcsuTotalSEFSs, ncmcsuCfgSendReceiveInBandCode=ncmcsuCfgSendReceiveInBandCode, ncmcsuNIDEnhanceIndex=ncmcsuNIDEnhanceIndex, ncmcsuTotalEQDTED=ncmcsuTotalEQDTED, ncmcsuIntervalEQES=ncmcsuIntervalEQES, ncmcsuCurrentEndType=ncmcsuCurrentEndType, ncmcsuIntervalEQUAS=ncmcsuIntervalEQUAS, ncmcsuEnhancedCurrentEntry=ncmcsuEnhancedCurrentEntry, ncmcsuCfgLoopRespELB=ncmcsuCfgLoopRespELB, ncmcsuCfgLoopRespRLB=ncmcsuCfgLoopRespRLB, ncmcsuTotalIndex1=ncmcsuTotalIndex1, ncmcsuIntervalEntry=ncmcsuIntervalEntry, ncmcsuNearAlmUASthresexcd=ncmcsuNearAlmUASthresexcd, ncmcsuTotalPCVs=ncmcsuTotalPCVs, ncmcsucommonTable=ncmcsucommonTable, ncmcsuIntervalIndex=ncmcsuIntervalIndex, ncmcsuFarAlmESthresexcd=ncmcsuFarAlmESthresexcd, ncmcsuXNetStatus1LOS=ncmcsuXNetStatus1LOS, ncmcsuEqStatusCRCError=ncmcsuEqStatusCRCError, ncmcsuCurrentEQDTED=ncmcsuCurrentEQDTED, ncmcsuTotalEndType=ncmcsuTotalEndType, ncmcsuEnhancedCurrentTable=ncmcsuEnhancedCurrentTable, ncmcsuIntervalNumber1=ncmcsuIntervalNumber1, ncmcsuNIDTotalIndex1=ncmcsuNIDTotalIndex1, ncmcsuCurrentEQUAS=ncmcsuCurrentEQUAS, ncmcsuCurrentLESs=ncmcsuCurrentLESs, ncmcsuRetrievalStatusIndex1=ncmcsuRetrievalStatusIndex1, ncmcsuIntervalSEFSs=ncmcsuIntervalSEFSs, ncmcsuRLBTimeoutIndex=ncmcsuRLBTimeoutIndex, ncmcsuFormat=ncmcsuFormat, ncmcsuCfgAlmOnEqLoop=ncmcsuCfgAlmOnEqLoop, ncmcsuRetrievalStatusOneTable=ncmcsuRetrievalStatusOneTable, ncmcsuCurrentNETYELS=ncmcsuCurrentNETYELS, ncmcsuLLBELBPLB=ncmcsuLLBELBPLB, ncmcsuXEqStatus1RLB=ncmcsuXEqStatus1RLB, ncmcsuTestPattern=ncmcsuTestPattern, ncmcsuNetLineBuildOut=ncmcsuNetLineBuildOut, ncmcsuNIDCurrentIndex1=ncmcsuNIDCurrentIndex1, ncmcsuIntervalOneTable=ncmcsuIntervalOneTable, ncmcsuEnhancedIntervalESs=ncmcsuEnhancedIntervalESs, ncmcsuCurrentNETAISS=ncmcsuCurrentNETAISS, ncmcsuCurrentEQESL=ncmcsuCurrentEQESL, ncmcsuEnhancedIntervalBESs=ncmcsuEnhancedIntervalBESs, ncmcsuIntervalNETSEFS=ncmcsuIntervalNETSEFS, ncmcsuTotalNETLOSS=ncmcsuTotalNETLOSS, ncmValidInterval=ncmValidInterval, ncmcsuESInterval=ncmcsuESInterval, ncmcsuEnhancedCurrentUASs=ncmcsuEnhancedCurrentUASs, ncmcsuElementStatusOneEntry=ncmcsuElementStatusOneEntry, ncmcsuCurrentEndType1=ncmcsuCurrentEndType1, ncmcsuTotalOneEntry=ncmcsuTotalOneEntry, ncmcsuEnhancedIntervalEntry=ncmcsuEnhancedIntervalEntry, ncmcsuEnhancedIntervalNumber=ncmcsuEnhancedIntervalNumber, ncmcsuEnhancedCurrentSESs=ncmcsuEnhancedCurrentSESs, ncmcsuIntervalTable=ncmcsuIntervalTable, ncmcsuElementStatusIndex2=ncmcsuElementStatusIndex2, ncmcsuEnhanceLineIndex=ncmcsuEnhanceLineIndex, ncmcsuTotalDMs=ncmcsuTotalDMs)
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-CSUNCM-MIB", ncmcsuEnhancedTotalTable=ncmcsuEnhancedTotalTable, ncmcsuIntervalNETOOFS=ncmcsuIntervalNETOOFS, ncmcsuFarAlmLLBDLB=ncmcsuFarAlmLLBDLB, ncmcsuXEqStatus1ESthresexcd=ncmcsuXEqStatus1ESthresexcd, ncmcsuMainConfigEntry=ncmcsuMainConfigEntry, ncmcsuTestIntervalIndex=ncmcsuTestIntervalIndex, ncmcsuTotalEQDBER=ncmcsuTotalEQDBER, ncmcsuEnhancedIntervalEndType=ncmcsuEnhancedIntervalEndType, ncmcsuXEqStatus1UASthresexcd=ncmcsuXEqStatus1UASthresexcd, ncmcsuCurrentSESs=ncmcsuCurrentSESs, ncmcsuEnhancedIntervalCSSs=ncmcsuEnhancedIntervalCSSs, ncmcsuElementStatusTwoTable=ncmcsuElementStatusTwoTable, ncmcsuXNetStatus2TSTProgress=ncmcsuXNetStatus2TSTProgress, ncmcsuTiming=ncmcsuTiming, ncmcsuElementStatusOneTable=ncmcsuElementStatusOneTable, ncmcsuIntervalSESs=ncmcsuIntervalSESs, ncmcsuCfgCodeXYellowAlarm=ncmcsuCfgCodeXYellowAlarm, ncmcsuNetworkKeepAlive=ncmcsuNetworkKeepAlive, ncmcsuAddress1=ncmcsuAddress1, ncmcsuEnhancedTotalLOFC=ncmcsuEnhancedTotalLOFC, ncmcsuNearAlmESthresexcd=ncmcsuNearAlmESthresexcd, ncmcsuOutOfFrame=ncmcsuOutOfFrame, ncmcsuTestSigCfgFrameSignal=ncmcsuTestSigCfgFrameSignal, ncmcsuEnhancedTotalBESs=ncmcsuEnhancedTotalBESs, ncmcsuXNetStatus2AIS=ncmcsuXNetStatus2AIS, ncmcsuIntervalNETYELS=ncmcsuIntervalNETYELS, ncmcsuCfgLoopRespLLB=ncmcsuCfgLoopRespLLB, ncmcsuThresholdIntervalIndex=ncmcsuThresholdIntervalIndex, ncmcsuCurrentNETESL=ncmcsuCurrentNETESL, ncmcsuThresholdIntervalTable=ncmcsuThresholdIntervalTable, ncmcsuRetrieveEqESFErrCounter=ncmcsuRetrieveEqESFErrCounter, ncmcsuNIDIntervalIndex1=ncmcsuNIDIntervalIndex1, ncmcsuCfgCodeEQFIFO=ncmcsuCfgCodeEQFIFO, ncmcsuCurrentIndex=ncmcsuCurrentIndex, ncmcsuElementStatusIndex1=ncmcsuElementStatusIndex1, ncmcsuEnhancedIntervalSESs=ncmcsuEnhancedIntervalSESs)
