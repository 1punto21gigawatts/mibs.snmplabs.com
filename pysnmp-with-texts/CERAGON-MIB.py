#
# PySNMP MIB module CERAGON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CERAGON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, Counter32, Unsigned32, ModuleIdentity, NotificationType, IpAddress, enterprises, Counter64, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Counter32", "Unsigned32", "ModuleIdentity", "NotificationType", "IpAddress", "enterprises", "Counter64", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "MibIdentifier", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ceragon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281))
gnOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 1))
gnFirstOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 1, 1))
gnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2))
gnGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1))
gnGenStandardOrg = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("etsi", 2), ("fcc", 3), ("japan", 4), ("lmds", 5), ("cmds", 6), ("australia", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStandardOrg.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStandardOrg.setDescription('This parameter specifies which international standard is used.')
gnGenTxFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("from37000to37350", 2), ("from37350to37700", 3), ("from37700to38050", 4), ("from38050to38400", 5), ("from38600to38950", 6), ("from38950to39300", 7), ("from39300to39650", 8), ("from39650to40000", 9), ("from37058to37618", 10), ("from37618to38178", 11), ("from38318to38878", 12), ("from38878to39438", 13), ("notUsed", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenTxFreqRange.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenTxFreqRange.setDescription('This parameter specifies frequency ranges in Hertz. Value 1 to 13 are used when the link is working with channels. The notUsed value is used when the link is working with frequency.')
gnGenRemoteConnection = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenRemoteConnection.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenRemoteConnection.setDescription('Is the connection between the local manager and the remote manager.')
gnGenRemoteDistance = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenRemoteDistance.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenRemoteDistance.setDescription('This field is the distance between the local and remote ODU, in meters. This attribute does not auto-detect the distance. It is used as part of the unfaded RSL calculation feature in the element manager.')
gnGenInterLenLocalRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenInterLenLocalRemote.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenInterLenLocalRemote.setDescription('This field is the FEC interleaver length - DONT CHANGE THIS FIELD !!!. WRITE will change both local and remote sides.')
gnGenTxFreqLocalRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenTxFreqLocalRemote.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenTxFreqLocalRemote.setDescription('This parameter indicates the radio TX channel number. WRITE will change both LOCAL and REMOTE sides. Not all radios will support TX frequency change via channel numbers.')
gnGenRealTimeandDate = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenRealTimeandDate.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenRealTimeandDate.setDescription("This parameter specifies the real time and date Format 'YYYY-MM-DD,HH:MM:SS' (Hexadecimal). A date-time specification. field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 07 c8 05 1a 0d 1e 0f 00 ( 1992 -5 -26,13:30:15 ) Note that if only local time is known, then timezone information (fields 8-10) is not present.")
gnGenCfgDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8), )
if mibBuilder.loadTexts: gnGenCfgDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgDeviceTable.setDescription('This table contains general configuration info per device, local and remote.')
gnGenCfgDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenCfgDeviceId"))
if mibBuilder.loadTexts: gnGenCfgDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgDeviceEntry.setDescription('Entry containing general configuration information, for both local and remote sides.')
gnGenCfgDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgDeviceId.setDescription('This value indicates the device table entry (local or Remote).')
gnGenCfgDeviceResetPerfMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("reset", 2), ("noAction", 3), ("clearFastEthernetStatistics", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgDeviceResetPerfMon.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgDeviceResetPerfMon.setDescription('Reset performance monitoring. ')
gnGenCfgDeviceOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noOperation", 2), ("softwareReset", 3), ("setDefaultConf", 4), ("clearMainManagerSoftware", 5), ("resetODU", 6), ("resetMUX", 7), ("resetSwOdu", 8))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgDeviceOperation.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgDeviceOperation.setDescription('This parameter allows the NMS to perform operations. (3) will implement software RESET (4) will SET all factory default configurations, including IP address! (5) will CLEAR IDU software NOTE: CLEARING IDU software will cause the IDU to use the factory BOOT software version. 4 and 5 will take place only after reset of the IDU')
gnGenCfgActivateLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 10))).clone(namedValues=NamedValues(("noOperation", 2), ("loopbackSPI", 3), ("loopbackMDM", 5), ("loopbackOuterSPI", 6), ("localODUloopback", 10))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgActivateLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgActivateLoopback.setDescription('This parameter controls the loop back diagnostics operations. For remote units, only SPI, MUX and MDM loopbacks are allowed. ')
gnGenCfgF1DataChanConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noInterface", 1), ("rs232db25", 2), ("v35", 3), ("rs422db25", 4), ("rj45CoDirect", 5), ("rj45bridge", 6), ("x21db15", 7), ("rs232db9", 8))).clone('rs232db25')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgF1DataChanConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgF1DataChanConnector.setDescription('This is the physical interface of the F1 line data channel (USER CHANNEL connection). ')
gnGenCfgWaySideConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noInterface", 1), ("rs232db25", 2), ("v35", 3), ("rs422db25", 4), ("connectorE1", 5), ("rj45bridge", 6), ("x21db15", 7), ("connectorT1", 8), ("lineSTM4", 9), ("clockUnit2M", 10), ("clockUnit1dot5M", 11))).clone('noInterface')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgWaySideConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgWaySideConnector.setDescription('This is the physical interface of the radio E1 way side channel (WAYSIDE CHANNEL connection).')
gnGenCfgActivateChanLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("loopbackDataChan", 3), ("loopbackWaySide", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgActivateChanLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgActivateChanLoopback.setDescription('This parameter controls the USER CHANNEL and WAYSIDE channel loopback diagnostic operations. (3) will activate the 64k data channel loopback (USER CHANNEL) (4) will activate the WAYSIDE CHANNEL loopback.')
gnGenCfgInterLenLocalOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgInterLenLocalOnly.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgInterLenLocalOnly.setDescription('This field is the FEC interleaver length .DONT CAHNGE THIS FIELD !!! . WRITE will change the local side only.')
gnGenCfgSlipIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgSlipIp.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgSlipIp.setDescription('This is the SERIAL interface IP address. Included for future development, not currently supported.')
gnGenCfgSlipModemConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgSlipModemConnection.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgSlipModemConnection.setDescription('The telephone number to which the modem will initialize a call, upon generation of a TRAP. The number must be entered numerically (for example 18001234567).')
gnGenCfgSlipSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud9600", 1), ("baud19200", 2), ("baud38400", 3), ("baud57600", 4), ("baud115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgSlipSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgSlipSpeed.setDescription('The SERIAL interface baud rate.')
gnGenCfgAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgAlarmSeverity.setDescription('This field is used only by the element management application Every Trap severity 4 bits. 15 (MAJOR), 7 (MINOR), 3 (WARNING) and 1 (EVENT) options. The first 4 bits ODU Power supply severity, then the Synthesizer severity ,then Tx level then RX level ODU temperature, ODU loopback , IDU power supply , Cable, Modem, IDU temperature, IDU loopbacks, External Alarm 1, External Alarm 2 ,External Alarm 3, External Alarm 4, External Alarm 5, External Alarm 6, External Alarm 7, External Alarm 8, Remote connectivity, LOF, LOS, EXC, SD J0 mismatch and system fault.')
gnGenCfgODUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgODUSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgODUSerialNumber.setDescription('This is the ODU serial number - up to 20 characters ')
gnGenCfgIDUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgIDUSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgIDUSerialNumber.setDescription('This is the IDU serial number - up to 20 characters ')
gnGenCfgAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgAlarmText.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgAlarmText.setDescription('The private trap text, describing the last generated trap text.')
gnGenCfgTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("clear", 0), ("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgTrapSeverity.setDescription('The current Trap severity, describing the last generated trap severity')
gnGenCfgProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("accessMux", 2), ("sdhRegenerator", 3), ("narrowBandPdhRepeater", 4), ("accessMuxStm0", 5), ("plex6200", 6), ("adm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgProductType.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgProductType.setDescription('The product type.')
gnGenCfgLeftMediumConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noInterface", 1), ("twoDS3", 2), ("oneDS3", 3), ("twoE3", 4), ("oneE3", 5), ("oneFastEthernet", 6), ("fiberSTM1", 7), ("electricalSTM1", 8), ("utpSTM1", 9), ("stpSTM1", 10), ("twoSTM1", 11), ("eightE1", 12), ("eightT1", 13), ("hitLess", 14), ("fiberSTM1Trib", 15), ("electricalSTM1Trib", 16), ("hitLessWithBridge", 17), ("opticalFastEthernet", 18))).clone('twoDS3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgLeftMediumConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgLeftMediumConnector.setDescription('For ACCESS hardware, this indicates the first (left) interface connector.')
gnGenCfgMiddleMediumConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noInterface", 1), ("twoDS3", 2), ("oneDS3", 3), ("twoE3", 4), ("oneE3", 5), ("oneFastEthernet", 6), ("fiberSTM1", 7), ("electricalSTM1", 8), ("utpSTM1", 9), ("stpSTM1", 10), ("twoSTM1", 11), ("eightE1", 12), ("eightT1", 13), ("hitLess", 14), ("fiberSTM1Trib", 15), ("electricalSTM1Trib", 16), ("hitLessWithBridge", 17), ("opticalFastEthernet", 18))).clone('oneDS3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgMiddleMediumConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgMiddleMediumConnector.setDescription('For ACCESS hardware, this indicates the second (right)interface connector.')
gnGenCfgPrimaryClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("internalClock", 2), ("external2MB", 3), ("radioClock", 4), ("fiberClock", 5), ("external2MHz", 6), ("external1AndHalfMB", 7), ("tributaryClock1", 8), ("tributaryClock2", 9), ("tributaryClock3", 10), ("tributaryClock4", 11), ("tributaryClock5", 12), ("tributaryClock6", 13), ("tributaryClock7", 14), ("tributaryClock8", 15), ("tributaryClock9", 16), ("tributaryClock10", 17), ("tributaryClock11", 18), ("tributaryClock12", 19), ("tributaryClock13", 20), ("tributaryClock14", 21), ("tributaryClock15", 22), ("tributaryClock16", 23), ("tribSTM1", 24))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgPrimaryClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgPrimaryClockSource.setDescription('The primary clock source, configurable for ACCESS radios only.')
gnGenCfgSecondaryClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("internalClock", 2), ("external2MB", 3), ("radioClock", 4), ("fiberClock", 5), ("external2MHz", 6), ("external1AndHalfMB", 7), ("tributaryClock1", 8), ("tributaryClock2", 9), ("tributaryClock3", 10), ("tributaryClock4", 11), ("tributaryClock5", 12), ("tributaryClock6", 13), ("tributaryClock7", 14), ("tributaryClock8", 15), ("tributaryClock9", 16), ("tributaryClock10", 17), ("tributaryClock11", 18), ("tributaryClock12", 19), ("tributaryClock13", 20), ("tributaryClock14", 21), ("tributaryClock15", 22), ("tributaryClock16", 23), ("tribSTM1", 24))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgSecondaryClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgSecondaryClockSource.setDescription('The secondary clock source, configurable for ACCESS radios only.')
gnGenCfgTrapOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgTrapOption.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgTrapOption.setDescription(" This item defines various trap options (0-31): 0 - SNSN (STANDARD TRAPS DO NOT INCLUDE SERIAL NUMBER) 1 - ASN (ALL TRAPS INCLUDE SERIAL NUMBER) 2 - SNSN, DNLR (DO NOT REPORT LOCAL TRAPS FROM REMOTE IDU) 3 - ASN, DNLR 4 - SNSN, EVT (USE DIFFERENT TRAP ID FOR EACH ALARM TYPE) 5 - ASN, EVT 6 - SNSN, DNLR, EVT 7 - ASN, DNLR, EVT * - Add 8 to your choice for excluding traps with id >= 128. Example: for SNSN, DNLR with this filter write 10 (=8+2). ** - Add another 16 to your choice in order to send 'clear' traps with zero severity.")
gnGenCfgCLLI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgCLLI.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgCLLI.setDescription(' Common Language Location Identifier (maximum length: 30)')
gnGenCfgHeartbeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgHeartbeatPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgHeartbeatPeriod.setDescription(' This item defines the number of minutes between each trap')
gnGenCfgGetRemoteData = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgGetRemoteData.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgGetRemoteData.setDescription('.')
gnGenCfgClearLoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCfgClearLoopTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgClearLoopTimeout.setDescription(' This item defines the clear loopbacks timeout in minutes. possible values: 0..1440. 0 means disable. ')
gnGenCfgSubProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 8, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCfgSubProductType.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCfgSubProductType.setDescription('lsb bit: 1 if 1500i or 1528i 0 otherwise.')
gnGenStatDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9), )
if mibBuilder.loadTexts: gnGenStatDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceTable.setDescription('This table contains general configuration info per device; local and remote.')
gnGenStatDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenStatDeviceId"))
if mibBuilder.loadTexts: gnGenStatDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceEntry.setDescription('Entry containing general configuration information per device, both local and remote sides.')
gnGenStatDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceId.setDescription('This value indicates which device is involved in the specific row.')
gnGenStatDeviceCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceCelsiusTemp.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceCelsiusTemp.setDescription('This is the temperature of the modem of the IDU in degrees of Celsius.')
gnGenStatDeviceFahrenheitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(14, 158))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceFahrenheitTemp.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceFahrenheitTemp.setDescription('This is the temperature of the modem of the IDU in degrees of Fahrenheit.')
gnGenStatDevicePowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDevicePowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDevicePowerSupply.setDescription('This octet represents the status of the power supplies of the IDU: bit 1 on = 3.3V faulty bit 2 on = -5V faulty bit 3 on = 5V faulty. bit 4 on = +8V faulty ')
gnGenStatDeviceCable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("ok", 2), ("short", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceCable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceCable.setDescription('Status of the cable to the ODU.')
gnGenStatDeviceDryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceDryContact.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceDryContact.setDescription('The status of the dry contacts, Each input status is represented by a bit. When the input is on, the bit value is 0.When the input is off, the bit value is 1. The MSB represents external alarm 8. For example when only external alarm 1 is on the status value will be 0xFE00')
gnGenStatDeviceLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceLeds.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceLeds.setDescription('The status of the IDU front panel LEDs. For the management station use. ')
gnGenStatInternalCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatInternalCommunication.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatInternalCommunication.setDescription('The status of internal communication problem bit 1 = 1: between main CPU and ODU CPU. bit 2 = 1: between main CPU and MUX CPU. bit 3 = 1: between master main CPU and slave main CPU.')
gnGenStatDeviceFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceFanStatus.setDescription('The status of the IDU fans 1-2 or 1-4. bit 1 = IDU Fan1 is faulty. bit 2 = IDU Fan2 is faulty. bit 3 = IDU Fan2 is faulty. bit 4 = IDU Fan2 is faulty.')
gnGenStatDeviceODUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceODUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceODUStatus.setDescription('ODU status reported with this parameter. Bit1 is MSB. The bit is set when a fault occurs. The bit is cleared when the fault clears. bit 1 = Power Supply status bit 2 = Synthesizer lock status bit 3 = Tx level status bit 4 = ATPC status bit 5 = Rx level status bit 6 = Not currently used. bit 7 = Temperature status bit 8 = Not currently used. bit 9 = ODU loopback status. bit 10 = Internal use (by application). bit 11 = Tx is in Mute. ')
gnGenStatDeviceIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceIDUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceIDUStatus.setDescription('IDU status reported with this parameter. Bit1 is MSB. The bit is set when a fault occurs. The bit is cleared when the fault clears. bit 1 = Power status bit 2 = Cable open status bit 3 = Cable short status bit 4 = Modem Lock status bit 5 = Temperature status bit 6 = No signal from ODU (Phos only) bit 7 = loopback status bit 8 = External alarm 1 status bit 9 = External alarm 2 status bit 10 = External alarm 3 status bit 11 = External alarm 4 status bit 12 = External alarm 5 status bit 13 = External alarm 6 status bit 14 = External alarm 7 status bit 15 = External alarm 8 status bit 16 = Remote connectivity status. bit 17 = Inner communication status. bit 18 = Link ID mismatch status. bit 19 = Configuration mismatch status. bit 20 = Shelf Id mismatch status (Phos only). bit 21 = General HW failure. bit 22 = No power to MUX board. bit 23 = No power to MODEM board. bit 24 = IDC disk firmware cinfiguration mismatch. bit 25 = Modem configuration file. bit 26 = Wayside channel E1/T1 LOS bit 27 = loopback on Wayside channel ')
gnGenStatDeviceRSTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 9, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenStatDeviceRSTStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenStatDeviceRSTStatus.setDescription('The bit is set when a fault occurs. The bit is cleared when the fault clears. bit 1 = Line loss of frame status bit 2 = Radio loss of frame status bit 3 = Line EXC status bit 4 = Radio EXC status bit 5 = Line SD status bit 6 = Radio SD status bit 7 = loss of signal status bit 8 = J0 mismatch. bit 9 = Line UNE status. ')
gnGenChannelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenChannelBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenChannelBandwidth.setDescription('The TX channel bandwidth, displayed in 1/100 MHz. For example: An STM-1 ETSI TX channel bandwidth of 56MHz is displayed as the value 5600.')
gnGenTxFreqNumLocalRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenTxFreqNumLocalRemote.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenTxFreqNumLocalRemote.setDescription('Indicates the radio transmit frequency, displayed in 1/100 MHz. WRITE changes the local and remote sides. Only for systems that support frequency configuration (Not channel).')
gnGenProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("gnSDH", 2), ("gnSONET", 3), ("gnSONET-C", 4), ("gnSDH-C", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenProtocolType.setDescription("This is the radio mapping protocol. -C represents 'concatenated'. ")
gnGenLinkId = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenLinkId.setDescription("0 for 'old' system that doesn't support the link ID. the user can enter values from 1 to 65535")
gnGenMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenMibVersion.setDescription('The current software version supports this MIB version (and the previous MIB versions).')
gnGenModemType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gn16QAM", 2), ("gn32QAM", 3), ("gn128QAM", 4), ("gn256QAM", 5), ("gn64QAM", 6), ("gn4QAM", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenModemType.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenModemType.setDescription('The system modem type.')
gnGenRadioSide = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenRadioSide.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenRadioSide.setDescription('')
gnGenSystemWorkTime = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenSystemWorkTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenSystemWorkTime.setDescription('The System Work Time (hours).')
gnGenRxFreqNumLocalRemote = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenRxFreqNumLocalRemote.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenRxFreqNumLocalRemote.setDescription('Indicates the radio receive frequency, displayed in 1/100 MHz. WRITE changes the local and remote sides. Only for systems that support frequency configuration (Not channel).')
gnGenLastCfgTimeandDate = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenLastCfgTimeandDate.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenLastCfgTimeandDate.setDescription("This parameter specifies the last configuration change time and date Format 'YYYY-MM-DD,HH:MM:SS' (Hexadecimal). A date-time specification. field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 07 c8 05 1a 0d 1e 0f 00 ( 1992 -5 -26,13:30:15 ) Note that if only local time is known, then timezone information (fields 8-10) is not present.")
gnGenMostSevereAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("clear", 0), ("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMostSevereAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenMostSevereAlarm.setDescription('This parameter specifies the current moset severe alarm in the system.')
gnGenIdcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21), )
if mibBuilder.loadTexts: gnGenIdcCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgTable.setDescription('')
gnGenIdcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenIdcCfgId"))
if mibBuilder.loadTexts: gnGenIdcCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgEntry.setDescription('')
gnGenIdcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgId.setDescription(' ')
gnGenIdcCfgXpicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgXpicMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgXpicMode.setDescription(' ')
gnGenIdcCfgResetPerfMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("reset", 2), ("noAction", 3), ("clearFastEthernetStatistics", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgResetPerfMon.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgResetPerfMon.setDescription('Reset performance monitoring. ')
gnGenIdcCfgOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noOperation", 2), ("softwareReset", 3), ("setDefaultConf", 4), ("setIDCDefaultConf", 5), ("hardwareColdReset", 6), ("hardwareSoftReset", 7))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgOperation.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgOperation.setDescription('.')
gnGenIdcCfgWaySideConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noInterface", 1), ("connectorE1", 2), ("connectorT1", 3), ("connectorDualE1", 4), ("connectorDualT1", 5), ("connectorDual10baseT", 6))).clone('noInterface')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcCfgWaySideConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgWaySideConnector.setDescription('This is the physical interface of the radio E1 way side channel (WAYSIDE CHANNEL connection).')
gnGenIdcCfgHeartbeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgHeartbeatPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgHeartbeatPeriod.setDescription(' This item defines the number of minutes between each trap')
gnGenIdcCfgClearLoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgClearLoopTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgClearLoopTimeout.setDescription(' This item defines the clear loopbacks timeout in minutes. possible values: 0..1440. 0 means disable. ')
gnGenIdcCfgSlipIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgSlipIp.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgSlipIp.setDescription('This is the SERIAL interface IP address.')
gnGenIdcCfgSlipModemConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgSlipModemConnection.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgSlipModemConnection.setDescription('The telephone number to which the modem will initialize a call, upon generation of a TRAP. The number must be entered numerically (for example 18001234567).')
gnGenIdcCfgSlipSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud9600", 1), ("baud19200", 2), ("baud38400", 3), ("baud57600", 4), ("baud115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgSlipSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgSlipSpeed.setDescription('The SERIAL interface baud rate.')
gnGenIdcCfgAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgAlarmSeverity.setDescription('This field is used only by the element management application.')
gnGenIdcCfgIDUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcCfgIDUSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgIDUSerialNumber.setDescription('This is the IDU serial number - up to 20 characters ')
gnGenIdcCfgTrapOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgTrapOption.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgTrapOption.setDescription(" This item defines various trap options (0-15): 0 - SNSN (STANDARD TRAPS DO NOT INCLUDE SERIAL NUMBER) 1 - ASN (ALL TRAPS INCLUDE SERIAL NUMBER) 2 - SNSN, DNLR (DO NOT REPORT LOCAL TRAPS FROM REMOTE IDU) 3 - ASN, DNLR 4 - SNSN, EVT (EVENTS ARE REPORTED AS TRAPS) 5 - ASN, EVT 6 - SNSN, DNLR, EVT 7 - ASN, DNLR, EVT * - Add 8 to your choice for excluding traps with id >= 128. Example: for SNSN, DNLR with this filter write 10 (=8+2). ** - Add another 16 to your choice in order to send 'clear' traps with zero severity.")
gnGenIdcCfgCLLI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgCLLI.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgCLLI.setDescription(' Common Language Location Identifier (maximum length: 30)')
gnGenIdcCfgEowCascadeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgEowCascadeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgEowCascadeStatus.setDescription(' Not used!!.')
gnGenIdcCfgSerialPPPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenIdcCfgSerialPPPAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcCfgSerialPPPAdminStatus.setDescription('Enable\\Disable PPP over serial interface.')
gnGenIdcStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22), )
if mibBuilder.loadTexts: gnGenIdcStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatTable.setDescription('')
gnGenIdcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenIdcStatId"))
if mibBuilder.loadTexts: gnGenIdcStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatEntry.setDescription('')
gnGenIdcStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatId.setDescription(' ')
gnGenIdcStatXpicSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatXpicSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatXpicSupport.setDescription(' ')
gnGenIdcStatLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatLeds.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatLeds.setDescription(' ')
gnGenIdcStatIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatIDUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatIDUStatus.setDescription('IDU status reported with this parameter. Bit1 is MSB. The bit is set when a fault occurs. The bit is cleared when the fault clears. bit 1 = Fans status bit 2 = configuration mismatch bit 3 = Internal use bit 4 = Internal use bit 5 = XPIC cable swap bit 6 = External alarm 1 status bit 7 = External alarm 2 status bit 8 = External alarm 3 status bit 9 = External alarm 4 status bit 10 = External alarm 5 status bit 12 = External alarm 6 status bit 13 = External alarm 7 status bit 14 = External alarm 8 status bit 15 = Auxiliary interface card is down ')
gnGenIdcStatMMCCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatMMCCardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatMMCCardStatus.setDescription('Bit1 is MSB. bit 1 = 0=MMC card exist, 1=MMC card not exist bit 2 = MMC card status: 0=ok, 1=fault ')
gnGenIdcStatDryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatDryContact.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatDryContact.setDescription('The status of the dry contacts, Each input status is represented by a bit.')
gnGenIdcStatFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatFanStatus.setDescription('The status of the IDU fans 1-2 or 1-4. bit 1 = IDU Fan1 is faulty. bit 2 = IDU Fan2 is faulty. bit 3 = IDU Fan2 is faulty. bit 4 = IDU Fan2 is faulty.')
gnGenIdcStatLeftDrawerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noDrawer", 2), ("drawerDown", 3), ("drawerUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatLeftDrawerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatLeftDrawerStatus.setDescription(' ')
gnGenIdcStatRightDrawerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noDrawer", 2), ("drawerDown", 3), ("drawerUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatRightDrawerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatRightDrawerStatus.setDescription(' ')
gnGenIdcStatHitlessSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatHitlessSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatHitlessSupport.setDescription('Indication for hitless support.')
gnGenIdcStatEowExistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("exist", 2), ("notExist", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatEowExistence.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatEowExistence.setDescription('This parameter sight physical existence of the EOW connector.')
gnGenIdcStatEowSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatEowSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatEowSupport.setDescription('Indication for EOW (cascade) support.')
gnGenIdcStatIduPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("upper", 2), ("lower", 3), ("single", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatIduPosition.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatIduPosition.setDescription('Indication for idu position.')
gnGenIdcStatBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatBoardType.setDescription('Indication for the board type.')
gnGenIdcStatAgentIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatAgentIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatAgentIPAddress.setDescription('Indication for the Agent IP address.')
gnGenIdcStatInterfaceConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("notExist", 2), ("oneFEplus64E1", 3), ("twoFEplus64E1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatInterfaceConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatInterfaceConnector.setDescription('Indication for the interface connector type.')
gnGenIdcStatIfTableCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 22, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenIdcStatIfTableCounter.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenIdcStatIfTableCounter.setDescription('This counter is initialize to a random number and increment on every change of the IfTable (This is for NMS use).')
gnGeneralXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23), )
if mibBuilder.loadTexts: gnGeneralXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGeneralXTable.setDescription('')
gnGeneralXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenXId"))
if mibBuilder.loadTexts: gnGeneralXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGeneralXEntry.setDescription('')
gnGenXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXId.setDescription(' ')
gnGenXStandardOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("etsi", 2), ("fcc", 3), ("japan", 4), ("lmds", 5), ("cmds", 6), ("australia", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXStandardOrg.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXStandardOrg.setDescription('This parameter specifies which international standard is used.')
gnGenXRemoteConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXRemoteConnection.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXRemoteConnection.setDescription('Is the connection between the local manager and the remote manager.')
gnGenXLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXLinkId.setDescription("0 for 'old' system that doesn't support the link ID. the user can enter values from 1 to 65535")
gnGenXModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gn16QAM", 2), ("gn32QAM", 3), ("gn128QAM", 4), ("gn256QAM", 5), ("gn64QAM", 6), ("gn4QAM", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXModemType.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXModemType.setDescription('The system modem type.')
gnGenXRadioSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXRadioSide.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXRadioSide.setDescription('')
gnGenXSystemWorkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXSystemWorkTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXSystemWorkTime.setDescription('The System Work Time (hours).')
gnGenXOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noOperation", 2), ("setMuxDefaultConf", 3), ("hardwareColdReset", 4), ("hardwareWarmReset", 5), ("softwareODCReset", 6), ("hardwareODCReset", 7), ("resetAllDrawers", 8))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXOperation.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXOperation.setDescription('.')
gnGenXResetPerfMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("reset", 2), ("noAction", 3), ("clearFastEthernetStatistics", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXResetPerfMon.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXResetPerfMon.setDescription('Reset performance monitoring. ')
gnGenXAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXAlarmSeverity.setDescription('This field is used only by the element management application Every Trap severity 4 bits. 15 (MAJOR), 7 (MINOR), 3 (WARNING) and 1 (EVENT) options. The first 4 bits ODU Power supply severity, then the Synthesizer severity ,then Tx level then RX level ODU temperature, ODU loopback , IDU power supply , Cable, Modem, IDU temperature, IDU loopbacks, External Alarm 1, External Alarm 2 ,External Alarm 3, External Alarm 4, External Alarm 5, External Alarm 6, External Alarm 7, External Alarm 8, Remote connectivity, LOF, LOS, EXC, SD J0 mismatch and system fault.')
gnGenXCarrierSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXCarrierSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXCarrierSerialNumber.setDescription('This is the carrier serial number - up to 20 characters ')
gnGenXMUXSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXMUXSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXMUXSerialNumber.setDescription('This is the MUX serial number - up to 20 characters ')
gnGenXProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("accessMux", 2), ("sdhRegenerator", 3), ("narrowBandPdhRepeater", 4), ("accessMuxStm0", 5), ("plex6200", 6), ("adm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXProductType.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXProductType.setDescription('The product type.')
gnGenXCarrierConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("noInterface", 2), ("oneElectricalSTM1", 3), ("oneFiberSTM1SingleMode", 4), ("oneFiberSTM1MultiMode", 5), ("twoElectricalSTM1", 6), ("twoFiberSTM1SingleMode", 7), ("twoFiberSTM1MultiMode", 8), ("oneFEOnly", 9), ("oneFEplus4E1", 10), ("oneFEplus8E1", 11), ("oneFEplus4T1", 12), ("oneFEplus8T1", 13), ("twoFEOnly", 14), ("twoFEplus4E1", 15), ("twoFEplus8E1", 16), ("twoFEplus4T1", 17), ("twoFEplus8T1", 18), ("oneDS3", 19), ("threeDS3", 20), ("oneE3", 21), ("threeE3", 22), ("oneOpticalGBEOnly", 23), ("oneOpticalGBEPlus8E1", 24), ("oneOpticalGBEPlus8T1", 25), ("oneElectricalGBEOnly", 26), ("oneElectricalGBEPlus8E1", 27), ("oneElectricalGBEPlus8T1", 28), ("oneFEplus64E1", 29), ("oneFEplus64T1", 30), ("eightE1Only", 31), ("eightT1Only", 32), ("oneStm1XC", 33), ("twoStm1XC", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXCarrierConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXCarrierConnector.setDescription('For ACCESS hardware, this indicates the first (left) interface connector.')
gnGenXInterfacesLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXInterfacesLeds.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXInterfacesLeds.setDescription('The status of the Interface LEDs. For the management station use. Each two bits represents one led as follows: 00 - Gray, 01 - Green, 10 - Orange, 11 - Red. The led order: Led1 is msb 2 bits , after it led2, till led 16 - 2 lsb bits.')
gnGenXMultiRateMultiConsConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 24, 25, 26))).clone(namedValues=NamedValues(("mrmc1528", 1), ("mrmc1550", 2), ("mrmc3156", 3), ("mrmc3150", 4), ("mrmc1228", 5), ("mrmc1540", 6), ("mrmc4410", 7), ("mrmc4420", 8), ("mrmc4440", 9), ("mrmc1125", 10), ("mrmc2050", 11), ("mrmc2030", 12), ("mrmc1340", 13), ("mrmc3756", 18), ("acm56", 24), ("acm50", 25), ("acm28", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXMultiRateMultiConsConf.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXMultiRateMultiConsConf.setDescription('The Link data capacity')
gnGenXMultiRateMultiConsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXMultiRateMultiConsSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXMultiRateMultiConsSupport.setDescription('')
gnGenXWaysideChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXWaysideChannel.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXWaysideChannel.setDescription(' Enable Disable drawer wayside channel ')
gnGenXWaySideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noloopback", 2), ("waySideLoop", 3))).clone('noloopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXWaySideLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXWaySideLoopback.setDescription('This parameter controls the WAYSIDE channel loopback diagnostic operations.')
gnGenXSyncIdcDataBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("idcToDrawer", 3), ("drawerToIdc", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXSyncIdcDataBase.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXSyncIdcDataBase.setDescription('.')
gnGenXAesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3), ("notSupport", 4), ("systemFailure", 5))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXAesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXAesEnable.setDescription('This parameter defines encryption admin mode.')
gnGenXAesMkeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("auto", 2), ("manual", 3))).clone('auto')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXAesMkeyMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXAesMkeyMode.setDescription('This parameter is not used.')
gnGenXActNumOfInterfaceOnClass1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass1.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass1.setDescription('This value indicates the actual number of interfaces on class 1.')
gnGenXActNumOfInterfaceOnClass2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass2.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass2.setDescription('This value indicates the actual number of interfaces on class 2.')
gnGenXActNumOfInterfaceOnClass3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass3.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXActNumOfInterfaceOnClass3.setDescription('This value indicates the actual number of interfaces on class 3.')
gnGenXEowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXEowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXEowStatus.setDescription('Not used.')
gnGenXTempLicenseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3), ("notSupported", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXTempLicenseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXTempLicenseEnable.setDescription('Set temporary license enable or disable.')
gnGenXTempLicenseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXTempLicenseTimer.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXTempLicenseTimer.setDescription('This value indicates the temporary license timer.')
gnGenXDefectBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXDefectBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXDefectBlocks.setDescription('The number of defected blocks that could not be corrected by the FEC ')
gnGenXBytesCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXBytesCorrected.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXBytesCorrected.setDescription(' Number of bytes corrected by the FEC')
gnGenXPrbsTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notActive", 2), ("active", 3))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXPrbsTest.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXPrbsTest.setDescription(' This parameter enable the user to activate the PRBS test.')
gnGenXClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clearCounters", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenXClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXClearCounters.setDescription(' This parameter enable the user to clear the PRBS counters.')
gnGenXMuxLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 23, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenXMuxLicense.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenXMuxLicense.setDescription(' Inidcation for license features. Bit #0-#4 - Ethernet througput limit.')
gnGenAddAlarmExtToTraps = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenAddAlarmExtToTraps.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenAddAlarmExtToTraps.setDescription("If chose 'yes', the Alarm Id, Origin and Unit from gnAgnCurrentAlarmTable will be bind to the end of each private trap.")
gnGenFeatureSupport = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenFeatureSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenFeatureSupport.setDescription('Inidcation for feature support. msb is for bit #1. The bit is set when a specific feature is support. Bit #1 - Tftp server support. Bit #2 - Cold reset support. Bit #3 - Severity critical for external alarm. Bit #4 - MRMC filter table. Bit #5 - NeighborIP Support Fast and DS3. Bit #6 - Auxiliary channel drawer routing support. Bit #7 - Single drawer external protection support. Bit #8 - dual drawer external protection not support. Bit #9 - Left Drawer XPIC hardware support (0 - support, 1 - not support). Bit #10 - Right Drawer XPIC hardware support (0 - support, 1 - not support). Bit #11 - Internal Protection Not Supported (0 - support, 1 - not support). Bit #12 - One Ws Channel Only (0 - FALSE, 1 - TRUE). Bit #13 - Protect option not support (0 - support, 1 - not support). Bit #14 - UC ethernet support (0 - not support, 1 - support). Bit #15 - WSC only disable (0 - enable & disable, 1 - only disable). Bit #16 - UC only disable (0 - enable & disable, 1 - only disable). Bit #17 - EOW only disable (0 - enable & disable, 1 - only disable). Bit #18 - Left Drawer modem latency Not support (0 - support, 1 - not support). Bit #19 - Right Drawer modem latency Not support (0 - support, 1 - not support). Bit #20 - Clear PM for drawer (0 - support, 1 - not support). Bit #21 - Allow Sync mode in UC#2 (0 - not allow, 1 - allow). Bit #22 - External Alarm Switch not support (0 - support, 1 - not support). Bit #23 - Is Hitless config [Divesity Type,Revertive Mode and Revertive Time] are disable (0 - enable, 1 - disable). Bit #24 - QoS left carrier support (1 - support, 0 - not support). Bit #25 - QoS right carrier support (1 - support, 0 - not support). Bit #26 - ACM left carrier support (1 - support, 0 - not support). Bit #27 - ACM right carrier support (1 - support, 0 - not support). Bit #28 - ACM adaptive left carrier support (1 - support, 0 - not support). Bit #29 - ACM adaptive right carrier support (1 - support, 0 - not support). Bit #30 - Single left board reset not support (0 - support, 1 - not support). Bit #31 - Single right board reset not support (0 - support, 1 - not support). Bit #32 - Left drawer reset not support (0 - support,1 - not support). Bit #33 - Right drawer reset not support (0 - support,1 - not support). Bit #34 - All drawers reset support (0 - not support,1 - support). Bit #35 - License manager not support (0 - support,1 - not support). Bit #36 - Multi radio protection support (1 - support,0 - not support). Bit #37 - Copy IDC to left drawer not support (0 - support,1 - not support). Bit #38 - Copy IDC to right drawer not support (0 - support,1 - not support). Bit #39 - Copy IDC to all drawers support (0 - not support,1 - support). Bit #40 - Gigabit flow control support on left carrier(1 - support,0 - not support). Bit #41 - Gigabit flow control support on right carrier(1 - support,0 - not support). Bit #42 - Gigabit PM and statistics support on left carrier(1 - support,0 - not support). Bit #42 - Gigabit PM and statistics support on right carrier(1 - support,0 - not support).')
gnGeneralMrmcXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26), )
if mibBuilder.loadTexts: gnGeneralMrmcXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGeneralMrmcXTable.setDescription('')
gnGeneralMrmcXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenMrmcXId"), (0, "CERAGON-MIB", "gnGenMrmcXMrmcVal"))
if mibBuilder.loadTexts: gnGeneralMrmcXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGeneralMrmcXEntry.setDescription('This table indicates the supported modem configuration script for each drawer.')
gnGenMrmcXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenMrmcXId.setDescription('Drawer number.')
gnGenMrmcXMrmcVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXMrmcVal.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenMrmcXMrmcVal.setDescription('This parameter specifies MRMC value.')
gnGenMrmcXBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenMrmcXBitRate.setDescription('This parameter specifies transfer bit rate.')
gnGenMrmcXBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenMrmcXBandWidth.setDescription('This parameter specifies channel band width.')
gnGenMrmcXQam = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXQam.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenMrmcXQam.setDescription('This parameter specifies modem qam.')
gnGenMrmcXScriptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenMrmcXScriptType.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenMrmcXScriptType.setDescription('This parameter specifies the type of the script. v1 - Regular MRMC script. v2 - ACM MRMC script.')
gnGenDrawerXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27), )
if mibBuilder.loadTexts: gnGenDrawerXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXTable.setDescription('This table indicates drawer x.')
gnGenDrawerXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenDrawerXId"))
if mibBuilder.loadTexts: gnGenDrawerXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXEntry.setDescription('Entry containing drawer x namd and id.')
gnGenDrawerXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXId.setDescription("This value indicates the drawer's id")
gnGenDrawerXName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenDrawerXName.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXName.setDescription("This value indicates the drawer's name")
gnGenDrawerXSlot1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("notExist", 2), ("powerOff", 3), ("powerOn", 4), ("dbReady", 5))).clone('notExist')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXSlot1Status.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXSlot1Status.setDescription('notExist - board not exist. powerOff - board inserted and power off. powerOn - board inserted and power on. dbReady - board is power on and DB ready.')
gnGenDrawerXSlot2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("notExist", 2), ("powerOff", 3), ("powerOn", 4), ("dbReady", 5))).clone('notExist')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXSlot2Status.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXSlot2Status.setDescription('notExist - board not exist. powerOff - board inserted and power off. powerOn - board inserted and power on. dbReady - board is power on and DB ready.')
gnGenDrawerXDeviceLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXDeviceLeds.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXDeviceLeds.setDescription('The status of the IDU front panel LEDs. For the management station use. ')
gnGenDrawerXInternalCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXInternalCommunication.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXInternalCommunication.setDescription('The status of internal communication problem bit 1 = 1: between main CPU and ODU CPU. bit 2 = 1: between main CPU and MUX CPU. bit 3 = 1: between master main CPU and slave main CPU.')
gnGenDrawerXDeviceIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 27, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenDrawerXDeviceIDUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenDrawerXDeviceIDUStatus.setDescription('IDU status reported with this parameter. Bit1 is MSB. The bit is set when a fault occurs. The bit is cleared when the fault clears. bit 1 = Power status bit 2 = Cable open status bit 3 = Cable short status bit 4 = Modem Lock status bit 5 = Temperature status bit 6 = No signal from ODU (Phos only) bit 7 = loopback status bit 8 = External alarm 1 status bit 9 = External alarm 2 status bit 10 = External alarm 3 status bit 11 = External alarm 4 status bit 12 = External alarm 5 status bit 13 = External alarm 6 status bit 14 = External alarm 7 status bit 15 = External alarm 8 status bit 16 = Remote connectivity status. bit 17 = Inner communication status. bit 18 = Link ID mismatch status. bit 19 = Configuration mismatch status. bit 20 = Shelf Id mismatch status (Phos only). bit 21 = General HW failure. bit 22 = No power to MUX board. bit 23 = No power to MODEM board. bit 24 = IDC disk firmware cinfiguration mismatch. bit 25 = Modem configuration file. bit 26 = Wayside channel E1/T1 LOS bit 27 = loopback on Wayside channel ')
gnCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28))
cluster = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1))
clusterSystemType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("unknown", 2), ("p1500", 3), ("t3200", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: clusterSystemType.setDescription('This value indicates the system type: Phophorus, Avalon or Unknown Backplane')
clusterNumOfSubRacks = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNumOfSubRacks.setStatus('mandatory')
if mibBuilder.loadTexts: clusterNumOfSubRacks.setDescription('This value indicates the number of subrack, 1st phase supporsts only 1')
clusterSubRackNum = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterSubRackNum.setStatus('mandatory')
if mibBuilder.loadTexts: clusterSubRackNum.setDescription("This value indicates the subrack's number")
clusterFloorNum = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterFloorNum.setStatus('mandatory')
if mibBuilder.loadTexts: clusterFloorNum.setDescription("This value indicates the subrack's number")
clusterIPBase = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIPBase.setStatus('mandatory')
if mibBuilder.loadTexts: clusterIPBase.setDescription('This value indicates the Cluster IP base ')
clusterIDCRole = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("clusterPrime", 2), ("member", 3), ("subrackManager", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIDCRole.setStatus('mandatory')
if mibBuilder.loadTexts: clusterIDCRole.setDescription('This value indicates - ClusterPrime - 2nd floor of 1st rack, SubRackManager - 2nd floor of other racks.')
clusterPrimeIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPrimeIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: clusterPrimeIPAddress.setDescription('This value enable CV/PV to know the server IP even if it is not connected')
clusterPeerIPLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPeerIPLastChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: clusterPeerIPLastChangeTime.setDescription('This value indicates The last time when the Peer IP Table changed')
addressesTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 2), )
if mibBuilder.loadTexts: addressesTable.setStatus('mandatory')
if mibBuilder.loadTexts: addressesTable.setDescription("This table indicates the cluster's IP Addresses.")
addressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "addressesPeerIPId"))
if mibBuilder.loadTexts: addressesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: addressesEntry.setDescription("Entry containing the cluster's IP Addresses.")
addressesPeerIPId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressesPeerIPId.setStatus('mandatory')
if mibBuilder.loadTexts: addressesPeerIPId.setDescription('This value indicates the peer IP id')
addressesPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressesPeerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: addressesPeerIPAddress.setDescription('This value indicates the IP address of a Server/Client. ')
primeIDC = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 3))
primeIDCAutoInternalClockDistribution = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primeIDCAutoInternalClockDistribution.setStatus('mandatory')
if mibBuilder.loadTexts: primeIDCAutoInternalClockDistribution.setDescription('This value indicates whether the internal clock distribution is enabled or disabled. ')
primeIDCSynchronizeClockInCluster = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noaction", 2), ("synchronize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primeIDCSynchronizeClockInCluster.setStatus('mandatory')
if mibBuilder.loadTexts: primeIDCSynchronizeClockInCluster.setDescription('This value indicates whether to synchronize the clock in the cluster. ')
backplaneSlotMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4), )
if mibBuilder.loadTexts: backplaneSlotMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingTable.setDescription("This table indicates the cluster's IP Addresses.")
backplaneSlotMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "backplaneSlotMappingSubrackId"), (0, "CERAGON-MIB", "backplaneSlotMappingFloorId"), (0, "CERAGON-MIB", "backplaneSlotMappingDrawerId"), (0, "CERAGON-MIB", "backplaneSlotMappingSubDrawerId"))
if mibBuilder.loadTexts: backplaneSlotMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingEntry.setDescription("Entry containing the cluster's IP Addresses.")
backplaneSlotMappingSubrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingSubrackId.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingSubrackId.setDescription('This value indicates the subrack index. ')
backplaneSlotMappingFloorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingFloorId.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingFloorId.setDescription('This value indicates the floor id The 4U floor index (upper) will be 99. ')
backplaneSlotMappingDrawerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingDrawerId.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingDrawerId.setDescription('For floors 1-3: IDC=1, Drawer 1=2, Drwaer2 =3. For 4U floor (floor #99), Aux=1, Power=2. ')
backplaneSlotMappingSubDrawerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingSubDrawerId.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingSubDrawerId.setDescription('This value indicates the sub drawer id IDC, Drawer 1 & 2 will be only 1. XC main (up) will be 1 and XC backup (lower) will be 2. ')
backplaneSlotMappingUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("idc", 2), ("odu", 3), ("mux", 4), ("modem", 5), ("drawer", 6), ("unknown", 7), ("none", 8), ("xc", 9), ("auxInterface", 10), ("power", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingUnitType.setDescription('The values are the same as in gnAgnCurrentAlarm Unit. ')
backplaneSlotMappingUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingUnitNumber.setDescription('This value indicates the unit number. ')
backplaneSlotMappingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 28, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backplaneSlotMappingUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: backplaneSlotMappingUnitIndex.setDescription('This value indicates the unit number. ')
gnSubrack = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29))
powerInputTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1), )
if mibBuilder.loadTexts: powerInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerInputTable.setDescription('This table indicates the Power Input.')
powerInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "powerInputId"))
if mibBuilder.loadTexts: powerInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerInputEntry.setDescription('Entry containing the Power Input.')
powerInputId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerInputId.setStatus('mandatory')
if mibBuilder.loadTexts: powerInputId.setDescription('This value indicates the power input Id. ')
powerInputAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerInputAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: powerInputAdmin.setDescription('This value indicates whether the power input Admin is enables or disabled. ')
powerInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("notexist", 2), ("unknown", 3), ("down", 4), ("up", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerInputStatus.setDescription('This value indicates whether the power input is up or down, Notexist when power input card not exist. unknown when no A-Aux.')
powerInputLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerInputLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerInputLedStatus.setDescription('This value, Led1 is MSB 2 bits. Each two bits represents one led:00 - Gray,01 - Blue. ')
auxiliaryDrawer = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2))
auxiliaryDrawerAuxCardType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("na", 2), ("v1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerAuxCardType.setStatus('mandatory')
if mibBuilder.loadTexts: auxiliaryDrawerAuxCardType.setDescription('This value indicates whether the Auxiliary Card type.')
auxiliaryDrawerLedsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerLedsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: auxiliaryDrawerLedsStatus.setDescription('This value, Led16 is MSB 2 bits, Led1 is LSB 2 bits. Each two bits represents one led:00 - Gray,01 - Green, 10 - Orange, 11 - Red. Led 1: Status of WSC/UC Ethernet (upper connector, left side). Led 2: Status of WSC/UC Ethernet (upper connector, right side). Led 3: Status of WSC/UC Ethernet (lower connector, left side). Led 4: Status of WSC/UC Ethernet (lower connector, right side). Led 5: Reserved - Status of managment link (upper connector). Led 6: Reserved - Status of managment activity (upper connector). Led 7: Reserved - Status of managment link (lower connector). Led 8: Reserved - Status of managment activity (lower connector). Led 9: Status of WSC E1/T1 (upper connector, left side). Led 10: Status of WSC E1/T1 (upper connector, right side). Led 11: Status of WSC E1/T1 (lower connector, left side). Led 12: Status of WSC E1/T1 (lower connector, right side). Led 13: Status of EOW Cascading (upper connector, left side). Led 14: Status of EOW Cascading (upper connector, right side). Led 15: Reserved - Status of external fans (lower connector, left side). Led 16: Reserved - Status of external fans (lower connector, right side).')
auxiliaryDrawerBoardHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerBoardHWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: auxiliaryDrawerBoardHWVersion.setDescription('This value indicates the EEPROM value.')
auxiliaryDrawerBoardFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerBoardFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: auxiliaryDrawerBoardFWVersion.setDescription('This value indicates the Register value .')
auxiliaryDrawerBoardPostResetFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerBoardPostResetFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: auxiliaryDrawerBoardPostResetFWVersion.setDescription('This value indicates the Register value .')
auxiliaryDrawerSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxiliaryDrawerSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: auxiliaryDrawerSerialNumber.setDescription('This value indicates the EEPROM value.')
auxiliaryDrawerBoardReset = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noaction", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxiliaryDrawerBoardReset.setStatus('mandatory')
if mibBuilder.loadTexts: auxiliaryDrawerBoardReset.setDescription('This value indicates whether to reset board.')
auxiliaryDrawerOrderWireCascading = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxiliaryDrawerOrderWireCascading.setStatus('mandatory')
if mibBuilder.loadTexts: auxiliaryDrawerOrderWireCascading.setDescription('This value indicates whether the Order Wire Cascading is enables or disabled. ')
xcDrawerTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3), )
if mibBuilder.loadTexts: xcDrawerTable.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerTable.setDescription('This table indicates the XC Drawer.')
xcDrawerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "xcDrawerXCId"))
if mibBuilder.loadTexts: xcDrawerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerEntry.setDescription('Entry containing the XC Drawer.')
xcDrawerXCId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerXCId.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerXCId.setDescription('This value, 1-2 for 1st rack, 3-4 for 2nd, 5-6 for 3rdy. ')
xcDrawerLedsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerLedsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerLedsStatus.setDescription('This value, Led1 is MSB 2 bits, Led4 is LSB . Each two bits represents one led:00 - Gray,01 - Green, 10 - Orange, 11 - Red. ')
xcDrawerBoardHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerBoardHWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerBoardHWVersion.setDescription('This value indicates the EEPROM value.')
xcDrawerBoardFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerBoardFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerBoardFWVersion.setDescription('This value indicates the Register value .')
xcDrawerBoardPostResetFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerBoardPostResetFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerBoardPostResetFWVersion.setDescription('This value indicates the Register value .')
xcDrawerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerSerialNumber.setDescription('This value indicates the EEPROM value.')
xcDrawerResetXCBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noaction", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcDrawerResetXCBoard.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerResetXCBoard.setDescription('This value indicates whether to reset XC.')
xcDrawerXCSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("passed", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerXCSelfTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerXCSelfTestResult.setDescription('This value indicates the XC self test result.')
xcDrawerXCActivityRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerXCActivityRole.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerXCActivityRole.setDescription('This value indicates the XC activity role.')
xcDrawerSyncIdcDataBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("idcToXC", 3), ("xcToIdc", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcDrawerSyncIdcDataBase.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerSyncIdcDataBase.setDescription('.')
xcDrawerXCConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 29, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("oneStm1XC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcDrawerXCConnector.setStatus('mandatory')
if mibBuilder.loadTexts: xcDrawerXCConnector.setDescription('This value indicates the XC activity role.')
gnGenCarrierXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30), )
if mibBuilder.loadTexts: gnGenCarrierXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCarrierXTable.setDescription('This table indicates carrier x.')
gnGenCarrierXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30, 1), ).setIndexNames((0, "CERAGON-MIB", "gnGenCarrierXId"))
if mibBuilder.loadTexts: gnGenCarrierXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCarrierXEntry.setDescription('Entry of carrier x.')
gnGenCarrierXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("carrier1", 3), ("carrier2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGenCarrierXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCarrierXId.setDescription('This value indicates the carrier id')
gnGenCarrierXResetPerfMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("reset", 2), ("noAction", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCarrierXResetPerfMon.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCarrierXResetPerfMon.setDescription('Reset performance monitoring.')
gnGenCarrierXSyncIdcDataBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noOperation", 2), ("idcToDrawer", 3), ("drawerToIdc", 4), ("idcToAllDrawers", 5))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGenCarrierXSyncIdcDataBase.setStatus('mandatory')
if mibBuilder.loadTexts: gnGenCarrierXSyncIdcDataBase.setDescription("idcToDrawer - copy configuration from the IDC disk to the HW (this operation istraffic effected). drawerToIdc - copy configuration from HW to IDC disk. this operation used to clear User Configuration Mismatch alarm. idcToAllDrawers - copy configuration from the IDC disk to the all Drawer's HW (this operation istraffic effected).")
gnAgn = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2))
gnAgnMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1), )
if mibBuilder.loadTexts: gnAgnMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnMgrTable.setDescription('This table indicates the managers list that will receive traps.')
gnAgnMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnMgrId"))
if mibBuilder.loadTexts: gnAgnMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnMgrEntry.setDescription('Entry containing the managers IP addresses and the trap filter options.')
gnAgnMgrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnMgrId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnMgrId.setDescription('This value indicates an index of a specific manager')
gnAgnMgrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnMgrIP.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnMgrIP.setDescription('This value indicates the managers IP address. WRITE an IP address of all zeroes (0.0.0.0) will remove the entry. ')
gnAgnMgrAlarmGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnMgrAlarmGroupMask.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnMgrAlarmGroupMask.setDescription("bit mask .1 is 'send a trap' 0 is 'dont send a trap'. The list of alarms from MSB to LSB is: bit 1 = Power Supply Alarm bit 2 = Cable Alarm bit 3 = Temperature Alarm bit 4 = External Alarm bit 5 = Radio Alarm bit 6 = Modem Alarm bit 7 = Line Alarm bit 8 = SDH Alarm bit 9 = BER Alarm bit 10 = System fault Alarm bit 11 = Maintenance Alarm If this field is 0, only standard traps will be sent to the manager")
gnAgnMgrSeverityFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnMgrSeverityFilter.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnMgrSeverityFilter.setDescription("This is a bit mask value for masking traps according to its severity. There is a bit for each severity. If the relevant bit is on (1), then the Agent will send traps with this severity, and it won't send if the bit is off (0). The list of bits from LSB to MSB: bit 1 (LSB) = Event. bit 2 = Warning. bit 3 = Minor. bit 4 = Major. bit 5 (MSB) = Critical.")
gnAgnMgrTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnMgrTrapPort.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnMgrTrapPort.setDescription('The Port for sending the trap for each manager (possible values: 70-65535)')
gnAgnLogFileData = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2))
gnAgnLogFileMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileMaxEntries.setDescription('The maximum number of entries. ')
gnAgnLogFileValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileValidEntries.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileValidEntries.setDescription('This is the number of valid entries in the current logfile. When this value exceeds 70% of capacity (100 entries), the management station should store the file in its hard disk. If the management station is not active, the MIB will display up to 100 recent logfile events')
gnAgnLogFileAction = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("clear", 2), ("save", 3), ("saveAndClear", 4), ("noAction", 5))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnLogFileAction.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileAction.setDescription('This attribute allows for logfile actions, CLEARing the logfile and/or SAVING the logfile.')
gnAgnLogFileTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4), )
if mibBuilder.loadTexts: gnAgnLogFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileTable.setDescription('This table is the agents alarm and event log file.')
gnAgnLogFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnLogFileId"))
if mibBuilder.loadTexts: gnAgnLogFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileEntry.setDescription('Entry containing the agents alarm and event log file.')
gnAgnLogFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileId.setDescription('This value indicates the index of an alarm logfile entry. Entry 1 is the most recent logfile event')
gnAgnLogFileValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("valid", 2), ("notvalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileValid.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileValid.setDescription('This value indicates the validity of the indexed alarm logfile entry. a VALID log entry is (2) and an INVALID entry is (3).')
gnAgnLogFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDate.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileDate.setDescription('This field is the date the alarm occurred, formatted as YYYY-MM-DD. YYYY represents the year, MM the month and DD -the day. ')
gnAgnLogFileTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileTime.setDescription('This field is the hour the alarm occurred - format HH:MM. HH - Hour, MM - minute')
gnAgnLogFileSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileSeverity.setDescription('This value indicates the severity of the alarm, 31 for CRITICAL, 15 for MAJOR, 7 for MINOR, 3 for WARNING and 1 for EVENT. ')
gnAgnLogFileText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileText.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileText.setDescription('This field describes the alarm that occurred. Max length 40 characters.')
gnAgnLogFileDeviceCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDeviceCelsiusTemp.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileDeviceCelsiusTemp.setDescription('This is the temperature of the IDU in degrees Celsius, during the alarm acceptance. ')
gnAgnLogFileDevicePowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDevicePowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileDevicePowerSupply.setDescription('This is the Power supply status of the IDU, during the alarm acceptance bit 1 on = 3.3V faulty bit 2 on = -5V faulty bit 3 on = 5V faulty. bit 4 on = +8V faulty ')
gnAgnLogFileInternalCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileInternalCommunication.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileInternalCommunication.setDescription('This is the internal communication status of the IDU, during the alarm acceptance bit 1 = 1: between main CPU and ODU CPU. bit 2 = 1: between main CPU and MUX CPU. bit 3 = 1: between master main CPU and slave main CPU.')
gnAgnLogFileDeviceFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDeviceFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileDeviceFanStatus.setDescription('This is the Fan status of the IDU, during the alarm acceptance bit 1 = Fan1 is faulty. bit 2 = Fan 2 is faulty.')
gnAgnLogFileDeviceODUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDeviceODUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileDeviceODUStatus.setDescription('This is the ODU status during the alarm acceptance bit 1 MSB bit 1 = Power Supply status bit 2 = Synthesizer lock status bit 3 = Tx level status bit 4 = ATPC status bit 5 = Rx level status bit 6 = Not currently used bit 7 = Temperature status bit 8 = Not currently used. bit 9 = Not currently used')
gnAgnLogFileDeviceIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDeviceIDUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileDeviceIDUStatus.setDescription('This is the IDU status during the alarm acceptance bit 1 MSB bit 1 = Power status - bit 2 = Cable open status - bit 3 = Cable short status - bit 4 = Modem Lock status bit 5 = Temperature status bit 6 = Not currently used. bit 7 = loopback status bit 8 = External alarm 1 status bit 9 = External alarm 2 status bit 10 = External alarm 3 status bit 11 = External alarm 4 status bit 12 = External alarm 5 status bit 13 = External alarm 6 status bit 14 = External alarm 7 status bit 15 = External alarm 8 status bit 16 = Remote connectivity status. bit 17 = Inner communication status. ')
gnAgnLogFileOduCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileOduCelsiusTemp.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileOduCelsiusTemp.setDescription('This is the temperature of the ODU in degrees Celsius, during the alarm acceptance.')
gnAgnLogFileOduReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileOduReceiveLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileOduReceiveLevel.setDescription('This is the received signal level in DBM, during the alarm acceptance ')
gnAgnLogFileOduSynthesizerVCOLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileOduSynthesizerVCOLock.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileOduSynthesizerVCOLock.setDescription('This is the Synthesizer status, during the alarm acceptance bit 1 on = TX IF synthesizer fault bit 2 on = RX IF synthesizer fault bit 3 on = Xband synthesizer fault bit 4 on = History TX IF synthesizer fault bit 5 on = History RX IF synthesizer fault bit 6 on = History Xband synthesizer fault ')
gnAgnLogFileOduPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileOduPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileOduPowerSupply.setDescription('This is the ODU power supply status, during the alarm acceptance bit 1 on = +5V faulty bit 2 on = +8V faulty bit 3 on = +12V faulty bit 4 on = -12V faulty.')
gnAgnLogFileLineBERCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileLineBERCur.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileLineBERCur.setDescription('This is the Line BER (Bit Error Rate), during the alarm acceptance. Included for future development, not currently supported.')
gnAgnLogFileRadioBERCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileRadioBERCur.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileRadioBERCur.setDescription('This is the Radio BER (Bit Error Rate), during the alarm acceptance. Included for future development, not currently supported.')
gnAgnLogFileModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileModStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileModStatus.setDescription('This is the Modulator status, during the alarm acceptance ok(2), modulatorFault(3)')
gnAgnLogFileDemodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileDemodStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileDemodStatus.setDescription('This is the Demodulator status, during the alarm acceptance . This field is for internal use internal debugging ')
gnAgnLogFileLastDemodDefectBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileLastDemodDefectBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileLastDemodDefectBlocks.setDescription("This is the number of the Defected blocks (blocks that couldn't be corrected) by the FEC, during the alarm acceptance last second.")
gnAgnLogFileLastDemodBytesCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileLastDemodBytesCorrected.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileLastDemodBytesCorrected.setDescription('This is the number of the bytes that were corrected by the FEC, during the alarm acceptance last second.')
gnAgnLogFileLastDemodBlocksCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileLastDemodBlocksCorrected.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileLastDemodBlocksCorrected.setDescription('This is the number of the blocks that were corrected by the FEC , during the alarm acceptance last second.')
gnAgnLogFileUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileUniqueId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileUniqueId.setDescription('Unique Id for each log from 1 to 2,147,483,647 ( = 0x7FFFFFFF).')
gnAgnLogFileSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 257, 258, 259, 260, 261, 262, 263, 264, 265, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 769, 770, 771, 772, 773, 774))).clone(namedValues=NamedValues(("interfaces", 1), ("idc", 2), ("drawer1", 3), ("drawer2", 4), ("tIdc1", 257), ("tIdc2", 258), ("tIdc3", 259), ("tIdc4", 260), ("tIdc5", 261), ("tIdc6", 262), ("tIdc7", 263), ("tIdc8", 264), ("tIdc9", 265), ("tDrawer1", 513), ("tDrawer2", 514), ("tDrawer3", 515), ("tDrawer4", 516), ("tDrawer5", 517), ("tDrawer6", 518), ("tDrawer7", 519), ("tDrawer8", 520), ("tDrawer9", 521), ("tDrawer10", 522), ("tDrawer11", 523), ("tDrawer12", 524), ("tDrawer13", 525), ("tDrawer14", 526), ("tDrawer15", 527), ("tXC1", 769), ("tXC2", 770), ("tXC3", 771), ("tXC4", 772), ("tXC5", 773), ("tXC6", 774)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileSource.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileSource.setDescription('The soure drawer of the alarm.')
gnAgnLogFileTimeT = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnLogFileTimeT.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileTimeT.setDescription('The time of the alarm represented by the number of seconds from 1.1.1970.')
gnAgnLogFileHitlessSwitchLogAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnLogFileHitlessSwitchLogAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileHitlessSwitchLogAdmin.setDescription('This attribute allows for hitless logfile actions.')
gnAgnLogFileXCSwitchLogAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnLogFileXCSwitchLogAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnLogFileXCSwitchLogAdmin.setDescription('This attribute allows for XC logfile actions.')
gnAgnExternAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3))
gnAgnInExternAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1), )
if mibBuilder.loadTexts: gnAgnInExternAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInExternAlarmTable.setDescription('This table is the input external alarm table. ')
gnAgnInExternAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnInExternAlarmDevId"), (0, "CERAGON-MIB", "gnAgnInExternAlarmIndex"))
if mibBuilder.loadTexts: gnAgnInExternAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInExternAlarmEntry.setDescription('Entry containing the external alarm inputs.')
gnAgnInExternAlarmDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInExternAlarmDevId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInExternAlarmDevId.setDescription('This value indicates device to which the external alarm is connected - 1 Local, 2 Remote')
gnAgnInExternAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInExternAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInExternAlarmIndex.setDescription('This value indicates the index of the input external alarm 1 to 8')
gnAgnInExternAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInExternAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInExternAlarmEnable.setDescription('This value indicates if this Input alarm is enabled.')
gnAgnInExternAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone('Alarm Description')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInExternAlarmText.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInExternAlarmText.setDescription('This field describes the external alarm. Max string 20 characters')
gnAgnInExternAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInExternAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInExternAlarmSeverity.setDescription('This value indicates the severity of the external alarm 31 CRITICAL ,15 MAJOR, 7 MINOR, 3 WARNING and 1 EVENT. ')
gnAgnOutRelayAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2), )
if mibBuilder.loadTexts: gnAgnOutRelayAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnOutRelayAlarmTable.setDescription('This table is the output relay alarm table. ')
gnAgnOutRelayAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnOutRelayAlarmDevId"), (0, "CERAGON-MIB", "gnAgnOutRelayAlarmIndex"))
if mibBuilder.loadTexts: gnAgnOutRelayAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnOutRelayAlarmEntry.setDescription('Entry containing the output relay alarms.')
gnAgnOutRelayAlarmDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnOutRelayAlarmDevId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnOutRelayAlarmDevId.setDescription('This value indicates device from which the relay is sent from - 1 Local, 2 Remote')
gnAgnOutRelayAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnOutRelayAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnOutRelayAlarmIndex.setDescription('This value indicates the index of the Output Relay alarm 1 to 5')
gnAgnOutRelayAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("major", 2), ("minor", 3), ("warning", 4), ("external", 5), ("power", 6), ("ber", 7), ("line", 8), ("loopback", 9), ("lof", 10), ("idu", 11), ("odu", 12), ("cable", 13), ("remote", 14), ("critical", 15), ("testOn", 16), ("off", 17), ("xc", 18))).clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnOutRelayAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnOutRelayAlarmType.setDescription('This value indicates the alarm/led that causes the relay to change its state')
gnAgnFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4))
gnAgnFileTransferDestination = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("gnLocal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferDestination.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferDestination.setDescription('The file destination. The file transfer destination will always be set to 1, LOCAL. ')
gnAgnFileTransferServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferServerIP.setDescription('The IP address of the server from which the file is loaded ')
gnAgnFileTransferFileName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferFileName.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferFileName.setDescription('The name of the file to be loaded, format 8.3. ')
gnAgnFileTransferTftpTotalTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferTftpTotalTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferTftpTotalTimeOut.setDescription('Receiving time-out value (seconds).')
gnAgnFileTransferTransCmd = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("gnStartMUXSoftwareDownLoad", 1), ("gnStartODUSoftwareDownLoad", 2), ("gnStartMainManagerSoftwareDownLoad", 3), ("gnCancel", 4), ("gnNoOperation", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferTransCmd.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferTransCmd.setDescription('The command to be executed on fileName at fileServerIP.')
gnAgnFileTransfertFtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("gnTftpSessionPreStartSession", 1), ("gnTftpSessionFileError", 2), ("gnTftpSessionRcvBlock", 3), ("gnTftpSessionRcvtimeout", 4), ("gnTftpSessionRcvError", 5), ("gnTftpSessionDone", 6), ("gnNoTftpSession", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnFileTransfertFtpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransfertFtpStatus.setDescription('Tftp session status ')
gnAgnFileTransfertftpBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnFileTransfertftpBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransfertftpBlockCount.setDescription('The total number of blocks received in the current tFtp session ')
gnAgnFileTransferProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tftp", 2), ("ftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferProtocol.setDescription('File transfer protocol: tftp or ftp.')
gnAgnFileTransferUserName = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferUserName.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferUserName.setDescription('User name - only for ftp protocol.')
gnAgnFileTransferPassword = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnFileTransferPassword.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferPassword.setDescription('Password - only for ftp protocol.')
gnAgnFileTransferIDCVersionControl = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnFileTransferIDCVersionControl.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferIDCVersionControl.setDescription('Points to the IDC software version to be downloaded')
gnAgnFileTransferODCVersionControl = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnFileTransferODCVersionControl.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnFileTransferODCVersionControl.setDescription('Points to the ODC software version to be downloaded')
gnAgnInternalDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5), )
if mibBuilder.loadTexts: gnAgnInternalDownloadTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadTable.setDescription('This table controls the Internal Download process from manager to MUX and ODU (local and remote).')
gnAgnInternalDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnInternalDownloadId"))
if mibBuilder.loadTexts: gnAgnInternalDownloadEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadEntry.setDescription('Entry containing the internal download process controls, for local and remote.')
gnAgnInternalDownloadId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadId.setDescription('This value indicates an index of a specific Internal Download operation.')
gnAgnInternalDownloadOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("localMUX", 2), ("localODU", 3), ("remoteMUX", 4), ("remoteODU", 5), ("leftShelfODU", 6), ("rightShelfODU", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadOperation.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadOperation.setDescription('The Operation Description')
gnAgnInternalDownloadAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start", 2), ("cancel", 3), ("clear", 4), ("noAction", 5), ("upLoadFpga", 6))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInternalDownloadAction.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadAction.setDescription('This parameter controls the download action operation. ')
gnAgnInternalDownloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("gnInternalDownloadSessionError", 1), ("gnInternalDownloadSessionClearing", 2), ("gnInternalDownloadSessionSendBlock", 3), ("gnInternalDownloadSessiontimeout", 4), ("gnInternalDownloadSessionDone", 5), ("gnInternalDownloadSessionWaitForRetransmit", 6), ("gnNoInternalDownloadSession", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadStatus.setDescription(' Internal download session status ')
gnAgnInternalDownloadBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadBlockCount.setDescription('The total number of blocks sent in the current session.')
gnAgnInternalDownloadVersionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInternalDownloadVersionControl.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadVersionControl.setDescription('Points to the software version to be uploaded')
gnAgnInternalDownloadFileSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadFileSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadFileSizeInBytes.setDescription('The total number of blocks in the current file')
gnAgnInternalDownloadBytesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInternalDownloadBytesCount.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInternalDownloadBytesCount.setDescription('The number of bytes sent in the current session')
gnAgnInterLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6), )
if mibBuilder.loadTexts: gnAgnInterLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkTable.setDescription('This table controls the Inter Link Download process between local and remote masters and between master and slave (local or remote). Each session transfers MUX, ODU or manager (IDC) software.')
gnAgnInterLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnInterLinkId"))
if mibBuilder.loadTexts: gnAgnInterLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkEntry.setDescription('Entry containing the process controls for the interlink download process, for local and remote.')
gnAgnInterLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInterLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkId.setDescription('This value indicates the index of a specific InterLink operation.')
gnAgnInterLinkSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInterLinkSide.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkSide.setDescription('The Link Side ')
gnAgnInterLinkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("me", 2), ("mate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInterLinkSource.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkSource.setDescription('The source distribution center.')
gnAgnInterLinkDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("me", 2), ("mate", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInterLinkDestination.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkDestination.setDescription('The destination distribution center. The destination may be selected as the local IDU being contacted (me), the collocated local IDU, in a protected configuration (mate) or it may be selected to be the remote IDU.')
gnAgnInterLinkSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("manager", 2), ("mux", 3), ("odu", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInterLinkSoftware.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkSoftware.setDescription('The software type to be transferred. MUX, ODU or IDU (referred to as manager).')
gnAgnInterLinkAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("start", 2), ("cancel", 3), ("noAction", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInterLinkAction.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkAction.setDescription('This parameter controls the interlink action operation. ')
gnAgnInterLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("gnInterLinkSessionError", 1), ("gnInterLinkSessionClearing", 2), ("gnInterLinkSessionSendBlock", 3), ("gnInterLinkSessiontimeout", 4), ("gnInterLinkSessionDone", 5), ("gnNoInterLinkSession", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInterLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkStatus.setDescription(' Inter-link session status ')
gnAgnInterLinkBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInterLinkBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInterLinkBlockCount.setDescription('The total number of blocks sent in the current session.')
gnSoftwareVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7), )
if mibBuilder.loadTexts: gnSoftwareVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionTable.setDescription('This table contains the IDU, MUX, ODU & WS software versions; local and remote.')
gnSoftwareVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1), ).setIndexNames((0, "CERAGON-MIB", "gnSoftwareVersionId"))
if mibBuilder.loadTexts: gnSoftwareVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionEntry.setDescription('Entry containing the currently operating IDU, ODU and MUX software versions.')
gnSoftwareVersionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionId.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionId.setDescription('The ID indicates which device is involved in the specific row. The software table includes two rows, one for the local radio and one for the remote radio.')
gnSoftwareVersionIDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionIDU.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionIDU.setDescription('This is the IDU software version.')
gnSoftwareVersionMUX = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMUX.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionMUX.setDescription('This is the MUX software version.')
gnSoftwareVersionODU = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionODU.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionODU.setDescription('This is the ODU software version.')
gnSoftwareVersionIDUPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionIDUPostResetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionIDUPostResetVersion.setDescription('This is the IDU post reset software version.')
gnSoftwareVersionMUXPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMUXPostResetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionMUXPostResetVersion.setDescription('This is the MUX post reset software version.')
gnSoftwareVersionODUPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionODUPostResetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionODUPostResetVersion.setDescription('This is the ODU post reset software version.')
gnSoftwareVersionMuxAlteraVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMuxAlteraVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionMuxAlteraVer.setDescription('This string contains the MUX altera versions')
gnSoftwareIDCVersionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSoftwareIDCVersionControl.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareIDCVersionControl.setDescription('Points to the software version that will run on the next reset')
gnSoftwareVersionWSAlteraVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionWSAlteraVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionWSAlteraVer.setDescription('This is the WS software version')
gnSoftwareVersionWSPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionWSPostResetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionWSPostResetVersion.setDescription('This is the WS post reset software version')
gnSoftwareVersionMrmcVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMrmcVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionMrmcVer.setDescription('This is the MRMC filter table software version')
gnSoftwareVersionMrmcPostResetVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionMrmcPostResetVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionMrmcPostResetVer.setDescription('This is the MRMC filter table post reset software version')
gnSoftwareVersionBootSoftVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionBootSoftVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionBootSoftVer.setDescription('This is the BOOT software version')
gnSoftwareVersionBootFlashVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionBootFlashVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionBootFlashVer.setDescription('This is the BOOT FLASH version')
gnSoftwareVersionAcmLutVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionAcmLutVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionAcmLutVer.setDescription('This is the ACM LUT software version')
gnSoftwareVersionAcmLutVerPostResetVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionAcmLutVerPostResetVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionAcmLutVerPostResetVer.setDescription('This is the ACM LUT post reset software version')
gnSoftwareVersionSfdVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareVersionSfdVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareVersionSfdVer.setDescription('This is the SFD software version')
gnAgnNTPCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8))
gnAgnNTPCfgServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgServerIP.setDescription(' The IP address of the server from which the current time is loaded.')
gnAgnNTPCfgOffsetFromUTC = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1439, 1439))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgOffsetFromUTC.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgOffsetFromUTC.setDescription(' The offset from Coordinated Universal Time (minutes). Possible values: -1439..1439. ')
gnAgnNTPCfgSummerAdjOffset = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1439, 1439))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjOffset.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjOffset.setDescription(' The summer adjustment offset (minutes). Possible values: -1439..1439. ')
gnAgnNTPCfgSummerAdjStart = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjStart.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjStart.setDescription(' The summertime adjustment start. In order to set this value: 1.Turn every parameter (month, day, hour, minute) to hexadecimal. 2.Write them all together - from left to right. 3.Turn the accepted number to decimal basis. For example: in order to set 11:27:1:55 --> 11 = 0x0b, 27 = 0x1b, 1 = 0x01, 55 = 0x37 --> the 4 parameters together: 0x0b1b0137 = 186319159 (the last number is the one to set).')
gnAgnNTPCfgSummerAdjEnd = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjEnd.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgSummerAdjEnd.setDescription(' The summertime adjustment end. In order to set this value: 1.Turn every parameter (month, day, hour, minute) to hexadecimal. 2.Write them all together - from left to right. 3.Turn the accepted number to decimal basis. For example: in order to set 11:27:1:55 --> 11 = 0x0b, 27 = 0x1b, 1 = 0x01, 55 = 0x37 --> the 4 parameters together: 0x0b1b0137 = 186319159 (the last number is the one to set).')
gnAgnNTPCfgEnableAuth = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("des", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgEnableAuth.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgEnableAuth.setDescription(' This value indicates if the Authentication is enabled. ')
gnAgnNTPCfgAuthSecretKey = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgAuthSecretKey.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgAuthSecretKey.setDescription(' The authentication secret key (HEX). Not relevant when authentication is disable. ')
gnAgnNTPCfgAuthPublicKey = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgAuthPublicKey.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgAuthPublicKey.setDescription(' The authentication public key is an integer number. The valid values: 1-4294967295. Not relevant when authentication is disable. ')
gnAgnNTPCfgUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgUpdateInterval.setDescription(' The time interval between sending NTP requests to the NTP server (minutes). Possible values: 1-65535. ')
gnAgnNTPCfgProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ntp", 2), ("sntp", 3))).clone('ntp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnNTPCfgProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnNTPCfgProtocolType.setDescription(' ')
gnAgnInBandMng = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9))
gnAgnInBandMngEthernetIp = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInBandMngEthernetIp.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngEthernetIp.setDescription(' The ethernet IP of the gateway network element.')
gnAgnInBandMngEthernetMask = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngEthernetMask.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngEthernetMask.setDescription(' The IP mask of the gateway network element.')
gnAgnInBandMngPppIp = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInBandMngPppIp.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngPppIp.setDescription(' The PPP IP address of the gateway network element.')
gnAgnInBandMngPppMask = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngPppMask.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngPppMask.setDescription(' The PPP IP mask of the gateway network element.')
gnAgnInBandMngDefRoute = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngDefRoute.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngDefRoute.setDescription(' The IP address of the default gateway/router to the internet. ')
gnAgnInBandMngEnable = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngEnable.setDescription(' Enable/Disable in-band management.')
gnAgnInBandMngNetworkElementType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("networkElement", 2), ("gateway", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngNetworkElementType.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngNetworkElementType.setDescription(' The element type of a single unit on the inband network (Gateway or Network Element). ')
gnAgnInBandMngRadioChannel = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dccr", 2), ("dccm", 3), ("mediaSpecific128k", 4), ("proprietary", 5), ("userChannel", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngRadioChannel.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngRadioChannel.setDescription(' The channel the in-band-management goes over (DCCR\\DCCM\\etc.). ')
gnAgnInBandMngUnknownPackets = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("transparent", 2), ("discard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngUnknownPackets.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngUnknownPackets.setDescription(' Select if unknown packets will be transparently transmitted over the RING or discarded and dropped.')
gnAgnInBandMngTTL = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngTTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngTTL.setDescription(' Time To Live.')
gnAgnInBandMngRingIpSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngRingIpSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngRingIpSubnet.setDescription(' The IP subnet address of the ring.')
gnAgnInBandMngRingIpMask = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngRingIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngRingIpMask.setDescription(' The IP mask of the ring subnet address.')
gnAgnInBandMngNetworkId = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngNetworkId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngNetworkId.setDescription(' Identification for single link path of PPPoE over cross-networks. ')
gnAgnInBandMngLineMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("inbandFiber", 2), ("forcePPPoE", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngLineMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngLineMode.setDescription(' Enable the user to force PPPoE mode instead of DCCR line communication. ')
gnAgnInBandMngFiberChannel = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("dccr", 2), ("dccm", 3), ("userChannel", 5))).clone('dccr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngFiberChannel.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngFiberChannel.setDescription(' ')
gnAgnInBandMngTribChannel = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("disable", 2), ("dccr", 3), ("dccm", 4))).clone('dccr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngTribChannel.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngTribChannel.setDescription(' ')
gnAgnInBandMngXChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17), )
if mibBuilder.loadTexts: gnAgnInBandMngXChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXChannelTable.setDescription('This table defines the inband channels mapping.')
gnAgnInBandMngXChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnInBandMngXChannelId"))
if mibBuilder.loadTexts: gnAgnInBandMngXChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXChannelEntry.setDescription('This is an entry in the inband channel table. This table contains a row for every channel (1..4). First 3 physical channels are available in the 8 possible mapping options (on both carrier drawers). An additional channel (4) is available on the IDC (PPPoE)).')
gnAgnInBandMngXChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXChannelId.setDescription('The channel Id')
gnAgnInBandMngXChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXChannelIfIndex.setDescription('The ifIndex of the interface that is mapped to this channel')
gnAgnInBandMngXChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("proprietary", 2), ("dccr", 3), ("dccm", 4), ("mediaspecific", 5), ("pppoe", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXChannelType.setDescription('The type of channel the in-band-management goes over. Default value for channels 1 and 3 in the carrier drawers is Proprietary. Channel 2 not allowed to be Proprietary. In protection the ch_type of ch#3 can not be modified Channel 4 must be PPPoE')
gnAgnInBandMngXChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelState.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXChannelState.setDescription('Enable/Disable the in band channel')
gnAgnInBandMngXChannelNeighborIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelNeighborIP.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXChannelNeighborIP.setDescription(' The PPP IP address of the gateway network element.')
gnAgnInBandMngXChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("up", 2), ("down", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnInBandMngXChannelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXChannelStatus.setDescription(' This MIB parameter defines the In-band PPP connection status. If the MIB value is up the PPP connection is up and running If the MIB value is down the PPP connection is down and is in initialization state. (Trying to establish a connection) If the MIB value is closed the PPP connection is down and is not trying open a connection.')
gnAgnInBandMngXEnableInbandChannels = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngXEnableInbandChannels.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngXEnableInbandChannels.setDescription("This configuration enables/disables the in-band channels: 1-4. The LSB represent channel 1, the 2nd bit channel 2, etc. If a bit is on (1) it's channel is enabled. Example: if channels 2 & 4 are enabled and channels 1 & 3 are disabled, then the binary value is 1010, so the MIB value (decimal integer) will be 10.")
gnAgnInBandMngMainGNEInterface = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("default", 2), ("channel1", 3), ("channel2", 4), ("channel3", 5), ("channel4", 6))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnInBandMngMainGNEInterface.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnInBandMngMainGNEInterface.setDescription('determines the primary GNE channel. Default means fixed channel prioritizing, in the following order (from first to last): Right Carrier Radio interface, [STM-1] Line interface on either Left or Right Carrier, Left Carrier Radio interface and PPPoE interface.')
gnNeighborIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10))
gnNeighborInBandTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 1), )
if mibBuilder.loadTexts: gnNeighborInBandTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborInBandTable.setDescription('This table defines the IP addresses of the units that are connected Inband.')
gnNeighborInBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnNeighborInBandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborInBandEntry.setDescription('This is an entry in the IP addresses of the units that are connected Inband. This table contains a row for every interface which type is logically connected. for example regenerator which is connected in band has two neighbors: the first (index 1) the remote radio unit and the second the remote fiber neighbor (index 2).')
gnNeighborInBandIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborInBandIP.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborInBandIP.setDescription(' The PPP IP address of the gateway network element.')
gnNeighborInBandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("up", 2), ("down", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnNeighborInBandStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborInBandStatus.setDescription(' This MIB parameter defines the In-band PPP connection status. If the MIB value is up the PPP connection is up and running If the MIB value is down the PPP connection is down and is in initialization state. (Trying to establish a connection) If the MIB value is closed the PPP connection is down and is not trying open a connection.')
gnNeighborMateIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnNeighborMateIP.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborMateIP.setDescription(' The Protection Mate IP address.')
gnNeighborRemoteRadioIP = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnNeighborRemoteRadioIP.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborRemoteRadioIP.setDescription(' The IP address of the Radio Remote IDU.')
gnNeighborInBandXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 4), )
if mibBuilder.loadTexts: gnNeighborInBandXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborInBandXTable.setDescription('This table defines the IP addresses of the units that are connected Inband.')
gnNeighborInBandXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnNeighborInBandXId"))
if mibBuilder.loadTexts: gnNeighborInBandXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborInBandXEntry.setDescription('This is an entry in the IP addresses of the units that are connected Inband. This table contains a row for every interface which type is logically connected. for example regenerator which is connected in band has two neighbors: the first (index 1) the remote radio unit and the second the remote fiber neighbor (index 2).')
gnNeighborInBandXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnNeighborInBandXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborInBandXId.setDescription(' ')
gnNeighborInBandXIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborInBandXIP.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborInBandXIP.setDescription(' The PPP IP address of the gateway network element.')
gnNeighborIpTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5), )
if mibBuilder.loadTexts: gnNeighborIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborIpTable.setDescription('This table shows the Neighbor IP for each STM connection.')
gnNeighborIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnNeighborIpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborIpEntry.setDescription('.')
gnNeighborIpDetectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("disable", 2), ("manual", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborIpDetectMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborIpDetectMode.setDescription('The Neighbor detect can be done automatically or to be manually insreted. Disable marks that the IP Detect is not used.')
gnNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborIpAddress.setDescription('The neighbor IP address.')
gnNeighborIpRemoteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborIpRemoteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborIpRemoteIfIndex.setDescription('The If index of the neighbor IP address connected to the current If Index.')
gnNeighborIpRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("regenerator", 1), ("access", 2), ("adm", 3), ("unit1500p", 4), ("admline2line", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnNeighborIpRemoteType.setStatus('mandatory')
if mibBuilder.loadTexts: gnNeighborIpRemoteType.setDescription('The Type of the neighbor.')
gnAgnSNMPCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 11))
gnAgnSNMPCfgTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnSNMPCfgTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnSNMPCfgTrapCommunity.setDescription(' ')
gnAgnSNMPCfgReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 11, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnSNMPCfgReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnSNMPCfgReadCommunity.setDescription(' ')
gnAgnSNMPCfgWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnSNMPCfgWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnSNMPCfgWriteCommunity.setDescription(' ')
gnAgnPrvt = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 12))
gnAgnPrvtCmd = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("cNV", 3), ("cNVBtr", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAgnPrvtCmd.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnPrvtCmd.setDescription(' .')
gnAgnPrvtCmdStat = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 2), ("cNVPass", 3), ("cNVFail", 4), ("cNVBtrPass", 5), ("cNVBtrFail", 6))).clone('ready')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnPrvtCmdStat.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnPrvtCmdStat.setDescription(' .')
gnSoftwareDrawerVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13), )
if mibBuilder.loadTexts: gnSoftwareDrawerVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionTable.setDescription('This table contains the IDU, MUX & ODU software versions; local and remote.')
gnSoftwareDrawerVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1), ).setIndexNames((0, "CERAGON-MIB", "gnSoftwareDrawerId"))
if mibBuilder.loadTexts: gnSoftwareDrawerVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionEntry.setDescription('Entry containing the currently operating IDU, ODU and MUX software versions.')
gnSoftwareDrawerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerId.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerId.setDescription('The ID indicates which Drawer is involved in the specific row. ')
gnSoftwareDrawerVersionMUX = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionMUX.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionMUX.setDescription('This is the MUX software version.')
gnSoftwareDrawerVersionMUXPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionMUXPostResetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionMUXPostResetVersion.setDescription('This is the ODU software version.')
gnSoftwareDrawerVersionODU = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionODU.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionODU.setDescription('This is the MUX post reset software version.')
gnSoftwareDrawerVersionODUPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionODUPostResetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionODUPostResetVersion.setDescription('This is the MUX post reset software version.')
gnSoftwareDrawerVersionModemFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemFile.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemFile.setDescription('This is the Modem software version.')
gnSoftwareDrawerVersionModemFilePostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemFilePostResetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemFilePostResetVersion.setDescription('This is the Modem post reset software version.')
gnSoftwareDrawerVersionModemScript = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemScript.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemScript.setDescription('This is the Modem software version.')
gnSoftwareDrawerVersionModemScriptPostResetVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemScriptPostResetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionModemScriptPostResetVersion.setDescription('This is the Modem post reset software version.')
gnSoftwareDrawerVersionRfuFpgaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 13, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSoftwareDrawerVersionRfuFpgaVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnSoftwareDrawerVersionRfuFpgaVersion.setDescription('This is the Rfu Fpga software version.')
gnAgnCurrentAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14))
gnAgnCurrentAlarmLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmLastChange.setDescription('This counter initialized with random number after resest, and incremented on each change in the gnAgnCurrentAlarmTable (either add or remove of an entery).')
gnAgnCurrentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2), )
if mibBuilder.loadTexts: gnAgnCurrentAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmTable.setDescription('This table includes the currently open alarm (when a RAISED trap is sent, an alarm is added to the table, when a CLEAR trap is sent, the alarm is removed.')
gnAgnCurrentAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAgnCurrentAlarmCounter"))
if mibBuilder.loadTexts: gnAgnCurrentAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmEntry.setDescription('Entry containing the info of a currently RAISED trap.')
gnAgnCurrentAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmCounter.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmCounter.setDescription('A running counter of open alarm, the counter is incremented on every new RAISED trap. It is cleared after reset. This counter is (optionaly) attached to each trap.')
gnAgnCurrentAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 15, 31))).clone(namedValues=NamedValues(("event", 1), ("warning", 3), ("minor", 7), ("major", 15), ("critical", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmSeverity.setDescription('The current Alarm severity')
gnAgnCurrentAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmId.setDescription('Alarm Identifier (contains alarm type and interface). Same AlarmId for rasie and clear alarms.')
gnAgnCurrentAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmIfIndex.setDescription("Interface Index where the alarm occurred, alarms that are not associated with specific interface will have the following value: For IDC related alarms the value is: 65001 For drawer1 related alarms the value is: 65003 For drawer2 related alarms the value is: 65004 If Alarm's origin is bigger than 256, it will be 65000 + the origin")
gnAgnCurrentAlarmOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 257, 258, 259, 260, 261, 262, 263, 264, 265, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 769, 770, 771, 772, 773, 774))).clone(namedValues=NamedValues(("interfaces", 1), ("idc", 2), ("drawer1", 3), ("drawer2", 4), ("unKnown", 5), ("tIdc1", 257), ("tIdc2", 258), ("tIdc3", 259), ("tIdc4", 260), ("tIdc5", 261), ("tIdc6", 262), ("tIdc7", 263), ("tIdc8", 264), ("tIdc9", 265), ("tDrawer1", 513), ("tDrawer2", 514), ("tDrawer3", 515), ("tDrawer4", 516), ("tDrawer5", 517), ("tDrawer6", 518), ("tDrawer7", 519), ("tDrawer8", 520), ("tDrawer9", 521), ("tDrawer10", 522), ("tDrawer11", 523), ("tDrawer12", 524), ("tDrawer13", 525), ("tDrawer14", 526), ("tDrawer15", 527), ("tXC1", 769), ("tXC2", 770), ("tXC3", 771), ("tXC4", 772), ("tXC5", 773), ("tXC6", 774)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmOrigin.setDescription('The origin drawer of the alarm (if applicable, otherwise it will be idc(2)).')
gnAgnCurrentAlarmUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("idc", 2), ("odu", 3), ("mux", 4), ("modem", 5), ("drawer", 6), ("unKnown", 7), ("xc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmUnit.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmUnit.setDescription('The unit of the alarm.')
gnAgnCurrentAlarmTrapID = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmTrapID.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmTrapID.setDescription('The ID of the RAISED trap that was sent when this alarm was raised.')
gnAgnCurrentAlarmTimeT = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmTimeT.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmTimeT.setDescription('Timestamp of this alarm, this number is the seconds from midnight 1.1.1970.')
gnAgnCurrentAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 14, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAgnCurrentAlarmText.setStatus('mandatory')
if mibBuilder.loadTexts: gnAgnCurrentAlarmText.setDescription('The alarm display text (same as the text in the sent trap).')
gnNMS = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 15))
gnApplicFileTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16), )
if mibBuilder.loadTexts: gnApplicFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileTable.setDescription('This table contains the application file list.')
gnApplicFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1), ).setIndexNames((0, "CERAGON-MIB", "gnApplicFileId"))
if mibBuilder.loadTexts: gnApplicFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileEntry.setDescription('Entry containing the application file list.')
gnApplicFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileId.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileId.setDescription('The ID indicates which device is involved in the specific row. The application file table includes two rows, one for the local radio and one for the remote radio.')
gnApplicFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileName.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileName.setDescription('This is the application file name.')
gnApplicFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileVersion.setDescription('This is the application file version.')
gnApplicFileCreateDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileCreateDate.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileCreateDate.setDescription("This parameter specifies the application file download date Format 'YYYY-MM-DD,HH:MM:SS' (Hexadecimal). A date-time specification. field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 07 c8 05 1a 0d 1e 0f 00 ( 1992 -5 -26,13:30:15 ) Note that if only local time is known, then timezone information (fields 8-10) is not present.")
gnApplicFileDownloadDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileDownloadDate.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileDownloadDate.setDescription("This parameter specifies the application file download date Format 'YYYY-MM-DD,HH:MM:SS' (Hexadecimal). A date-time specification. field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 07 c8 05 1a 0d 1e 0f 00 ( 1992 -5 -26,13:30:15 ) Note that if only local time is known, then timezone information (fields 8-10) is not present.")
gnApplicFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("idc", 1), ("mux", 2), ("odu", 3), ("modem", 4), ("boot", 5), ("modemConfig", 6), ("wayside", 7), ("bootRom", 8), ("rfuFpga", 9), ("rfuConfig", 10), ("mrmcTable", 11), ("xc", 12), ("xcErrorgen", 13), ("aAux", 14), ("license", 15), ("frameConfigTable", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileType.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileType.setDescription('This is the application file type.')
gnApplicFileSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileSubType.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileSubType.setDescription('This is the application file sub type.')
gnApplicFileFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileFirmware.setDescription('This is the application file firmware.')
gnApplicFileGeneralPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileGeneralPurpose.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileGeneralPurpose.setDescription('This is the application file General Purpose.')
gnApplicFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileSize.setDescription('This is the application file size in bytes.')
gnApplicFileCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileCompressed.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileCompressed.setDescription('This is indicate the application file compress status.')
gnApplicFileDssSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileDssSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileDssSupport.setDescription('This is indicate the application file DSS support.')
gnApplicFileCrcSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 2, 2, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnApplicFileCrcSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnApplicFileCrcSupport.setDescription('This is indicate the application file CRC support.')
gnDiskCapacityData = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 2, 2, 17))
gnDiskUsedspace = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnDiskUsedspace.setStatus('mandatory')
if mibBuilder.loadTexts: gnDiskUsedspace.setDescription('The ID indicates Disk Used space.')
gnDiskFreespace = MibScalar((1, 3, 6, 1, 4, 1, 2281, 2, 2, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnDiskFreespace.setStatus('mandatory')
if mibBuilder.loadTexts: gnDiskFreespace.setDescription('The ID indicates Disk Free space.')
gnUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3))
gnODU = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 1))
gnOduCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1), )
if mibBuilder.loadTexts: gnOduCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgTable.setDescription('This table defines the configuration of the Outdoor part of the system.')
gnOduCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnOduCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgEntry.setDescription('This is an entry in the ODU Configuration Table. This table contains two rows, indexed by ifIndex= 1 for local ODU and ifIndex = 101 for remote ODU.')
gnOduCfgTransmitterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgTransmitterFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgTransmitterFrequency.setDescription('This parameter indicates the radio TX channel number. WRITE will change the LOCAL side only. Not all radios will support TX frequency change via channel numbers.')
gnOduCfgRLPerfMonThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-75, -15)).clone(-50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRLPerfMonThresh1.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgRLPerfMonThresh1.setDescription('When the Received Level (RL) exceeds this threshold a performance monitoring RL1 counter increments.')
gnOduCfgRLPerfMonThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-75, -15)).clone(-70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRLPerfMonThresh2.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgRLPerfMonThresh2.setDescription('When the Received Level (RL) exceeds this threshold a performance monitoring RL2 counter increments.')
gnOduCfgATPCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgATPCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgATPCStatus.setDescription('This parameter indicates if the ATPC option is enabled or disabled.')
gnOduCfgMUTEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgMUTEStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgMUTEStatus.setDescription("This parameter indicates if transmitter will be in mute state. (Mute on -> don't transmit) ")
gnOduCfgAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oneFoot", 2), ("twoFeet", 3), ("threeFeet", 4), ("fourFeet", 5), ("sixFeet", 6))).clone('oneFoot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgAntennaType.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgAntennaType.setDescription('This parameter indicates the size of the antenna used in the ODU. This attribute will not auto-detect the antenna size. It is used for the unfaded RSL calculation feature included in the element manager.')
gnOduCfgTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgTransmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgTransmitLevel.setDescription('This is the transmitter output power level of the signal transmitted by the radios, displayed in DBM. ')
gnOduCfgRealTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRealTxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgRealTxFreqNumber.setDescription('Identifies the RF Tx frequency. For 6, 7 and 8 bands the Tx frequency resolution is in kHz, for other bands the resolution is in 10kHz. If the Tx frequency value is over 4000000 than the band is identified as 6, 7 or 8G band.')
gnOduCfgRealRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRealRxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgRealRxFreqNumber.setDescription('Identifies the RF Rx frequency. For 6, 7 and 8 bands the Rx frequency resolution is in kHz, for other bands the resolution is in 10kHz. If the Rx frequency value is over 4000000 than the band is identified as 6, 7 or 8G band.')
gnOduCfgMinTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMinTxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgMinTxFreqNumber.setDescription('This the Minimum TX frequency that the ODU can receive - Used by the management station.')
gnOduCfgMaxTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMaxTxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgMaxTxFreqNumber.setDescription('This the Maximum TX frequency that the ODU can receive - Used by the management station.')
gnOduCfgMaxTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMaxTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgMaxTxLevel.setDescription('This is the theoretical maximum level that this ODU unit can transmit.')
gnOduCfgRefRsl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgRefRsl.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgRefRsl.setDescription('This is the received level reference, applicable when utilizing ATPC mode; displayed in dBm.')
gnOduCfgForceRmtMuteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgForceRmtMuteTx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgForceRmtMuteTx.setDescription("When on, this parameter force the transmitter to be in mute state. (Mute on -> don't transmit) ")
gnOduCfgForceRmtMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgForceRmtMaxTx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgForceRmtMaxTx.setDescription('This parameter force the transmitter output power level of the signal transmitted by the radio. ')
gnOduCfgTLPerfMonThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 25)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgTLPerfMonThresh1.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgTLPerfMonThresh1.setDescription('When the Transmitted Level (TL) exceeds this threshold a performance monitoring TL1 counter increments.')
gnOduCfgMinRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMinRxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgMinRxFreqNumber.setDescription('This the Minimum RX frequency that the ODU can receive - Used by the management station.')
gnOduCfgMaxRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgMaxRxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgMaxRxFreqNumber.setDescription('This the Maximum RX frequency that the ODU can receive - Used by the management station.')
gnOduCfgOduLoopSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgOduLoopSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgOduLoopSupport.setDescription('Indication for loopback support by the connected ODU.')
gnOduCfgOduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("unknown", 2), ("v2", 3), ("v1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgOduModel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgOduModel.setDescription('.')
gnOduCfgFreqPlanStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgFreqPlanStandard.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgFreqPlanStandard.setDescription('For the NMS use.')
gnOduCfgFreqDevider = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgFreqDevider.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgFreqDevider.setDescription('Indicates the number with which we should divide the MIB Freq value to get to the actual Freq (100 or 1000) ')
gnOduStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2), )
if mibBuilder.loadTexts: gnOduStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusTable.setDescription('This table defines the status of the Outdoor unit of the system.')
gnOduStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnOduStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusEntry.setDescription('This is an entry in the ODU Status Table. This table contains two rows, indexed by ifIndex= 1 for local ODU and ifIndex = 101 for remote ODU.')
gnOduStatusCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusCelsiusTemp.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusCelsiusTemp.setDescription('This is the temperature of the ODU in degrees Celsius.')
gnOduStatusFahrenheitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 176))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusFahrenheitTemp.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusFahrenheitTemp.setDescription('This is the temperature of the ODU in degrees Fahrenheit.')
gnOduStatusTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusTransmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusTransmitLevel.setDescription('This is the transmit level of the signal transmitted by the radios transmitter, displayed in DBM.')
gnOduStatusReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusReceiveLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusReceiveLevel.setDescription('This is the receive level of the signal transmitted by the radios transmitter, displayed in DBM.')
gnOduStatusSynthesizerVCOLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusSynthesizerVCOLock.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusSynthesizerVCOLock.setDescription('This octet represents the ODU status as follows (bit 1, LSB): bit 1 on = TX IF synthesizer bit 2 on = RX IF synthesizer bit 3 on = Xband synthesizer bit 4 on = History TX IF synthesizer bit 5 on = History RX IF synthesizer bit 6 on = History Xband synthesizer ')
gnOduStatusPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusPowerSupply.setDescription('This octet represents the status of the power supplies of the ODU: bit 1 on = +5V faulty bit 2 on = +8V faulty bit 3 on = +12V faulty bit 4 on = -12V faulty.')
gnOduStatusClearLoopTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusClearLoopTimer.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusClearLoopTimer.setDescription('This variable indicates the remaining time (in minutes) till the relevant odu loopback timer will be expired. when starting a loopback and the value of gnGenCfgClearLoopTimeout is x, the gnOduStatusClearLoopTimer will be also x, after one minute it will be x-1, etc.')
gnOduMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3))
gnOduMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1), )
if mibBuilder.loadTexts: gnOduMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrTable.setDescription('This table defines/keeps the counters of the current 15 min interval.')
gnOduMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnOduMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrEntry.setDescription('This is an entry in the Current Interval Table. This table contains two rows, indexed by ifIndex= 1 for local ODU and ifIndex = 101 for remote ODU.')
gnOduMonCurrMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrMinRL.setDescription('The minimum received signal level (RL) in the current 15 minute interval. (in DBM) ')
gnOduMonCurrMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrMaxRL.setDescription('The maximum received signal level (RL) in the current 15 minute interval. (in DBM). ')
gnOduMonCurrTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrTLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrTLThresh1Exceed.setDescription(' The number of seconds TL exceeded the TL1 threshold in the last 15 minutes.')
gnOduMonCurrRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in the last 15 minutes.')
gnOduMonCurrRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in the last 15 minutes.')
gnOduMonCurrDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDayMinRL.setDescription(' The minimum Receive Level (in DBM). in the last 24 hours.')
gnOduMonCurrDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDayMaxRL.setDescription(' The maximum Receive Level (in DBM). in the last 24 hours.')
gnOduMonCurrDayTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayTLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDayTLThresh1Exceed.setDescription(' The number of seconds TL exceeded the TL1 threshold in the last 24 hours.')
gnOduMonCurrDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDayRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in the last 24 hours.')
gnOduMonCurrDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDayRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in the last 24 hours.')
gnOduMonCurrMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrMinTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrMinTL.setDescription('The minimum transmitted signal level (TL) in the current 15 minute interval. (in DBM) ')
gnOduMonCurrMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrMaxTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrMaxTL.setDescription('The maximum transmitted signal level (TL) in the current 15 minute interval. (in DBM). ')
gnOduMonCurrDayMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayMinTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDayMinTL.setDescription(' The minimum Transmitted Level (in DBM). in the last 24 hours.')
gnOduMonCurrDayMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDayMaxTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDayMaxTL.setDescription(' The maximum Transmitted Level (in DBM). in the last 24 hours.')
gnOduMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2), )
if mibBuilder.loadTexts: gnOduMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalTable.setDescription('This table defines/keeps the counters of the 96 last intervals of 15 min.')
gnOduMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnOduMonIntervalIdx"))
if mibBuilder.loadTexts: gnOduMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalEntry.setDescription('This is an entry in the Interval Table. This table is indexed by ifIndex= 1 for local ODU and ifIndex = 101 for remote ODU and by interval idx')
gnOduMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalIdx.setDescription(' The interval number to which this row is related. ')
gnOduMonIntervalMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalMinRL.setDescription(' The minimum RL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalMaxRL.setDescription(' The maximum RL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalTLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalTLThresh1Exceed.setDescription(' The number of seconds TL exceeded the TL1 threshold in a 15 minutes interval.')
gnOduMonIntervalEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalEvent.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalEvent.setDescription(' Events bit 1 = CommDisc. bit 2 = CommCon bit 3 = ATPC2Max. bit 4 = ATPC2Norm. Included for future development, not currently supported.')
gnOduMonIntervalRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in a 15 minutes interval.')
gnOduMonIntervalRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in a 15 minutes interval.')
gnOduMonIntervalMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalMinTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalMinTL.setDescription(' The minimum TL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalMaxTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalMaxTL.setDescription(' The maximum TL in a 15 minutes interval. (in DBM). ')
gnOduMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3), )
if mibBuilder.loadTexts: gnOduMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayTable.setDescription('This table defines/keeps the counters of 96 intervals of 15 min.')
gnOduMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnOduMonDayIdx"))
if mibBuilder.loadTexts: gnOduMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayEntry.setDescription('This is an entry in the Days Table. This table is indexed by ifIndex= 1 for local ODU and ifIndex = 101 for remote ODU and by day idx. gnOduMonDayIdx = 1 is one day from now, gnOduMonDayIdx = 2 is two days from now, and so on...')
gnOduMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayIdx.setDescription(' The interval number to which this row is related. ')
gnOduMonDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayMinRL.setDescription(' The minimum Receive Level (in DBM). in a 24 hour interval.')
gnOduMonDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayMaxRL.setDescription(' The maximum Receive Level (in DBM). in a 24 hour interval.')
gnOduMonDayTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayTLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayTLThresh1Exceed.setDescription(' The number of seconds TL exceeded the TL1 threshold in a 24 hour interval.')
gnOduMonDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in a 24 hour interval.')
gnOduMonDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in a 24 hour interval.')
gnOduMonDayMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayMinTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayMinTL.setDescription(' The minimum Transmit Level (in DBM). in a 24 hour interval.')
gnOduMonDayMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayMaxTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayMaxTL.setDescription(' The maximum Transmit Level (in DBM). in a 24 hour interval.')
gnOduCfgXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4), )
if mibBuilder.loadTexts: gnOduCfgXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXTable.setDescription('This table defines the configuration of the Outdoor part of the system.')
gnOduCfgXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduCfgXId"))
if mibBuilder.loadTexts: gnOduCfgXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXEntry.setDescription('This is an entry in the ODU Configuration Table. This table contains two rows, indexed by gnOduCfgXId= 3 for drawer1 ODU and gnOduCfgXId = 4 for drawer2 ODU.')
gnOduCfgXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXId.setDescription(' ')
gnOduCfgXTxFreqNumLocalRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXTxFreqNumLocalRemote.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXTxFreqNumLocalRemote.setDescription('Indicates the radio transmit frequency, displayed in 1/100 MHz. WRITE changes the local and remote sides. Only for systems that support frequency configuration (Not channel).')
gnOduCfgXRLPerfMonThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-75, -15)).clone(-50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRLPerfMonThresh1.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXRLPerfMonThresh1.setDescription('When the Received Level (RL) exceeds this threshold a performance monitoring RL1 counter increments.')
gnOduCfgXRLPerfMonThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-75, -15)).clone(-70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRLPerfMonThresh2.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXRLPerfMonThresh2.setDescription('When the Received Level (RL) exceeds this threshold a performance monitoring RL2 counter increments.')
gnOduCfgXATPCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXATPCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXATPCStatus.setDescription('This parameter indicates if the ATPC option is enabled or disabled.')
gnOduCfgXMUTEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXMUTEStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXMUTEStatus.setDescription("This parameter indicates if transmitter will be in mute state. (Mute on -> don't transmit) ")
gnOduCfgXAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oneFoot", 2), ("twoFeet", 3), ("threeFeet", 4), ("fourFeet", 5), ("sixFeet", 6))).clone('oneFoot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXAntennaType.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXAntennaType.setDescription('This parameter indicates the size of the antenna used in the ODU. This attribute will not auto-detect the antenna size. It is used for the unfaded RSL calculation feature included in the element manager.')
gnOduCfgXTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXTransmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXTransmitLevel.setDescription('This is the transmitter output power level of the signal transmitted by the radios, displayed in DBM. ')
gnOduCfgXRealTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRealTxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXRealTxFreqNumber.setDescription('Identifies the RF Tx frequency. For 6, 7 and 8 bands the Tx frequency resolution is in kHz, for other bands the resolution is in 10kHz. If the Tx frequency value is over 4000000 than the band is identified as 6, 7 or 8G band.')
gnOduCfgXRealRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRealRxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXRealRxFreqNumber.setDescription('Identifies the RF Rx frequency. For 6, 7 and 8 bands the Rx frequency resolution is in kHz, for other bands the resolution is in 10kHz. If the Rx frequency value is over 4000000 than the band is identified as 6, 7 or 8G band.')
gnOduCfgXMinTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMinTxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXMinTxFreqNumber.setDescription('This the Minimum TX frequency that the ODU can receive - Used by the management station.')
gnOduCfgXMaxTxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMaxTxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXMaxTxFreqNumber.setDescription('This the Maximum TX frequency that the ODU can receive - Used by the management station.')
gnOduCfgXMaxTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMaxTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXMaxTxLevel.setDescription('This is the theoretical maximum level that this ODU unit can transmit.')
gnOduCfgXRefRsl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRefRsl.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXRefRsl.setDescription('This is the received level reference, applicable when utilizing ATPC mode; displayed in dBm.')
gnOduCfgXForceRmtMuteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXForceRmtMuteTx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXForceRmtMuteTx.setDescription("When on, this parameter force the transmitter to be in mute state. (Mute on -> don't transmit) ")
gnOduCfgXForceRmtMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXForceRmtMaxTx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXForceRmtMaxTx.setDescription('This parameter force the transmitter output power level of the signal transmitted by the radio. ')
gnOduCfgXTLPerfMonThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 25)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXTLPerfMonThresh1.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXTLPerfMonThresh1.setDescription('When the Transmitted Level (TL) exceeds this threshold a performance monitoring TL1 counter increments.')
gnOduCfgXOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noOperation", 2), ("setOduDefaultConf", 3), ("resetODU", 4), ("swResetODU", 5))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXOperation.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXOperation.setDescription('This parameter allows to perform ODU operations. (3) will SET all ODU default configurations. (4) will implement ODU reset.')
gnOduCfgXODUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXODUSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXODUSerialNumber.setDescription('This is the ODU serial number - up to 20 characters ')
gnOduCfgXChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXChannelBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXChannelBandwidth.setDescription('The TX channel bandwidth, displayed in 1/100 MHz. For example: An STM-1 ETSI TX channel bandwidth of 56MHz is displayed as the value 5600.')
gnOduCfgXMinRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMinRxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXMinRxFreqNumber.setDescription('This the Minimum RX frequency that the ODU can receive - Used by the management station.')
gnOduCfgXMaxRxFreqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXMaxRxFreqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXMaxRxFreqNumber.setDescription('This the Maximum RX frequency that the ODU can receive - Used by the management station.')
gnOduCfgXRxFreqNumLocalRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRxFreqNumLocalRemote.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXRxFreqNumLocalRemote.setDescription('Indicates the radio transmit frequency, displayed in 1/100 MHz. WRITE changes the local and remote sides. Only for systems that support frequency configuration (Not channel).')
gnOduCfgXOduLoopSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXOduLoopSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXOduLoopSupport.setDescription('Inidcation for loopback support by the connected ODU.')
gnOduCfgXOduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 2), ("v2", 3), ("v1", 4), ("v3", 5), ("v4", 6), ("v5", 7), ("v6", 8), ("v7", 9), ("v8", 10), ("v9", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXOduModel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXOduModel.setDescription('.')
gnOduCfgXFreqPlanStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXFreqPlanStandard.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXFreqPlanStandard.setDescription('For the NMS use.')
gnOduCfgXFreqDevider = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXFreqDevider.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXFreqDevider.setDescription('Indicates the number with which we should divide the MIB Freq value to get to the actual Freq (100 or 1000) ')
gnOduCfgXLoopbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noloopback", 2), ("interfaceInterLoop", 3))).clone('noloopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXLoopbackOption.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXLoopbackOption.setDescription(' This parameter enable the user to activate an ODU loopback .')
gnOduCfgXxpicClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("standAlone", 2), ("masterClock", 3), ("slaveClock", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduCfgXxpicClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXxpicClockMode.setDescription('This is the status of the xpic clock mode.')
gnOduCfgXUnfadedReferenceRsl = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -15)).clone(-70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXUnfadedReferenceRsl.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXUnfadedReferenceRsl.setDescription('This is used for the unfaded RSL calculation feature included in the element manager.')
gnOduCfgXRfuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("main", 2), ("diversity", 3), ("combined", 4))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRfuMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXRfuMode.setDescription('The RX mode of operation.')
gnOduCfgXRslRouteToConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("main", 2), ("diversity", 3))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXRslRouteToConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXRslRouteToConnector.setDescription('Choose the receive level signal for the RSL connector.')
gnOduCfgXDelayCalibrationOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noAction", 2), ("activate", 3), ("error", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationOperation.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationOperation.setDescription('This parameter enables launching a delay calibration parameters calculation.')
gnOduCfgXDelayCalibrationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationValue.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationValue.setDescription('This parameter indicates the delay calibration result and delay calibration override value. values are between -130 to 130.')
gnOduCfgXDelayCalibrationWgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationWgType.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXDelayCalibrationWgType.setDescription('Delay Calibration WG Type For the NMS use.')
gnOduCfgXOduLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXOduLog.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXOduLog.setDescription('This parameter enable the user to activate ODU log.')
gnOduCfgXOduLogPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXOduLogPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXOduLogPeriod.setDescription('This parameter enable the user to chose the log peroid (in sec).')
gnOduCfgXXpiPerfMonThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnOduCfgXXpiPerfMonThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduCfgXXpiPerfMonThresh.setDescription('When the Received XPI beneath this threshold a performance monitoring XPI counter increments (future develope).')
gnOduStatusXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5), )
if mibBuilder.loadTexts: gnOduStatusXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXTable.setDescription('This table defines the status of the Outdoor unit of the system.')
gnOduStatusXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduStatusXId"))
if mibBuilder.loadTexts: gnOduStatusXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXEntry.setDescription('This is an entry in the ODU Status Table. This table contains two rows, indexed by gnOduStatusXId= 3 for drawer1 ODU and gnOduStatusXId = 4 for drawer2 ODU.')
gnOduStatusXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXId.setDescription(' ')
gnOduStatusXCelsiusTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXCelsiusTemp.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXCelsiusTemp.setDescription('This is the temperature of the ODU in degrees Celsius.')
gnOduStatusXFahrenheitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 176))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXFahrenheitTemp.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXFahrenheitTemp.setDescription('This is the temperature of the ODU in degrees Fahrenheit.')
gnOduStatusXTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXTransmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXTransmitLevel.setDescription('This is the transmit level of the signal transmitted by the radios transmitter, displayed in DBM.')
gnOduStatusXReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXReceiveLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXReceiveLevel.setDescription('This is the receive level of the signal transmitted by the radios transmitter, displayed in DBM.')
gnOduStatusXSynthesizerVCOLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXSynthesizerVCOLock.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXSynthesizerVCOLock.setDescription('This octet represents the ODU status as follows (bit 1, LSB): bit 1 on = TX IF synthesizer bit 2 on = RX IF synthesizer bit 3 on = Xband synthesizer bit 4 on = History TX IF synthesizer bit 5 on = History RX IF synthesizer bit 6 on = History Xband synthesizer ')
gnOduStatusXPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXPowerSupply.setDescription('This octet represents the status of the power supplies of the ODU: bit 1 on = +5V faulty bit 2 on = +8V faulty bit 3 on = +12V faulty bit 4 on = -12V faulty.')
gnOduStatusXIfcSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXIfcSupported.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXIfcSupported.setDescription('Indication for IFC support.')
gnOduStatusXRslDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXRslDiversity.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXRslDiversity.setDescription('This is the receive level of the space diversity signal, displayed in DBM.')
gnOduStatusXRslCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXRslCombined.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXRslCombined.setDescription('This is the receive level of the combined signal, displayed in DBM.')
gnOduStatusXRfuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXRfuAddress.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXRfuAddress.setDescription('The RFU Address.')
gnOduStatusXMinTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXMinTransmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXMinTransmitLevel.setDescription('This is the minimum transmit level of the signal transmitted by the radios transmitter, displayed in DBM.. (for RFU unit only)')
gnOduStatusXOduSWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXOduSWVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXOduSWVer.setDescription('This is the ODU software version.')
gnOduStatusXOduSWPostVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXOduSWPostVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXOduSWPostVer.setDescription('This is the ODU post reset software version.')
gnOduStatusXRfuFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXRfuFwVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXRfuFwVer.setDescription('This is the RFU FW version.')
gnOduStatusXValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduStatusXValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduStatusXValidIntervals.setDescription('The number of previous valid intervals for which valid data has been stored for the specific ODU.')
gnOduMonitorX = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6))
gnOduMonCurrXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1), )
if mibBuilder.loadTexts: gnOduMonCurrXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXTable.setDescription('This table defines/keeps the counters of the current 15 min interval.')
gnOduMonCurrXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonCurrXId"))
if mibBuilder.loadTexts: gnOduMonCurrXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXEntry.setDescription('This is an entry in the Current Interval Table. This table contains two rows, indexed by gnOduMonCurrXId= 3 for drawer1 ODU and gnOduMonCurrXId = 4 for drawer2 ODU.')
gnOduMonCurrXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXId.setDescription(' ')
gnOduMonCurrXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXMinRL.setDescription('The minimum received signal level (RL) in the current 15 minute interval. (in DBM) ')
gnOduMonCurrXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXMaxRL.setDescription('The maximum received signal level (RL) in the current 15 minute interval. (in DBM). ')
gnOduMonCurrXTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXTLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXTLThresh1Exceed.setDescription(' The number of seconds TL exceeded the TL1 threshold in the last 15 minutes.')
gnOduMonCurrXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in the last 15 minutes.')
gnOduMonCurrXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in the last 15 minutes.')
gnOduMonCurrXDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayMinRL.setDescription(' The minimum Receive Level (in DBM). in the last 24 hours.')
gnOduMonCurrXDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxRL.setDescription(' The maximum Receive Level (in DBM). in the last 24 hours.')
gnOduMonCurrXDayTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayTLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayTLThresh1Exceed.setDescription(' The number of seconds TL exceeded the TL1 threshold in the last 24 hours.')
gnOduMonCurrXDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in the last 24 hours.')
gnOduMonCurrXDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in the last 24 hours.')
gnOduMonCurrXMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMinTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXMinTL.setDescription('The minimum transmitted signal level (TL) in the current 15 minute interval. (in DBM) ')
gnOduMonCurrXMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMaxTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXMaxTL.setDescription('The maximum transmitted signal level (TL) in the current 15 minute interval. (in DBM). ')
gnOduMonCurrXDayMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMinTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayMinTL.setDescription(' The minimum Transmitted Level (in DBM). in the last 24 hours.')
gnOduMonCurrXDayMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxTL.setDescription(' The maximum Transmitted Level (in DBM). in the last 24 hours.')
gnOduMonCurrXXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXXpi.setDescription('The Current XPI level (in [DBM/100]). For [DBM] level divide by 100.')
gnOduMonCurrXMinXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMinXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXMinXpi.setDescription(' The minimum XPI Level (in [DBM/100]). in the last 15 minute (future develope). For [DBM] level divide by 100.')
gnOduMonCurrXMaxXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMaxXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXMaxXpi.setDescription(' The maximum XPI Level (in [DBM/100]). in the last 15 minute (future develope). For [DBM] level divide by 100.')
gnOduMonCurrXDayMinXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMinXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayMinXpi.setDescription(' The minimum XPI Level (in [DBM/100]). in the last 24 hours (future develope). For [DBM] level divide by 100.')
gnOduMonCurrXDayMaxXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayMaxXpi.setDescription(' The maximum XPI Level (in [DBM/100]). in the last 24 hours (future develope). For [DBM] level divide by 100.')
gnOduMonCurrXXpiThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXXpiThreshExceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXXpiThreshExceed.setDescription(' The number of seconds XPI beneath the XPI threshold in the last 15 minutes (future develope).')
gnOduMonCurrXDayXpiThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXDayXpiThreshExceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXDayXpiThreshExceed.setDescription(' The number of seconds XPI beneath the XPI threshold in the last 24 hours (future develope).')
gnOduMonCurrXMse = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXMse.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXMse.setDescription('The Current MSE level (in [DBM/100]). For [DBM] level divide by 100.')
gnOduMonCurrXLastDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrXLastDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrXLastDayIDF.setDescription('IDF = Invalid Data Flag.')
gnOduMonIntervalXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2), )
if mibBuilder.loadTexts: gnOduMonIntervalXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXTable.setDescription('This table defines/keeps the counters of the 96 last intervals of 15 min.')
gnOduMonIntervalXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonIntervalXId"), (0, "CERAGON-MIB", "gnOduMonIntervalXIdx"))
if mibBuilder.loadTexts: gnOduMonIntervalXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXEntry.setDescription('This is an entry in the Interval Table. This table is indexed by gnOduMonIntervalXId= 3 for drawer1 ODU and gnOduMonIntervalXId = 4 for drawer2 ODU and by interval idx')
gnOduMonIntervalXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXId.setDescription(' ')
gnOduMonIntervalXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXIdx.setDescription(' The interval number to which this row is related. ')
gnOduMonIntervalXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXMinRL.setDescription(' The minimum RL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXMaxRL.setDescription(' The maximum RL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalXTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXTLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXTLThresh1Exceed.setDescription(' The number of seconds TL exceeded the TL1 threshold in a 15 minutes interval.')
gnOduMonIntervalXEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXEvent.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXEvent.setDescription(' Events bit 1 = CommDisc. bit 2 = CommCon bit 3 = ATPC2Max. bit 4 = ATPC2Norm. Included for future development, not currently supported.')
gnOduMonIntervalXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in a 15 minutes interval.')
gnOduMonIntervalXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in a 15 minutes interval.')
gnOduMonIntervalXMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMinTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXMinTL.setDescription(' The minimum TL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalXMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMaxTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXMaxTL.setDescription(' The maximum TL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalXMinXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMinXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXMinXpi.setDescription(' The minimum XPI level (in [DBM/100]) in a 15 minutes intervalin (future develope). For [DBM] level divide by 100.')
gnOduMonIntervalXMaxXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXMaxXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXMaxXpi.setDescription(' The maximum XPI level (in [DBM/100]) in a 15 minutes interval (future develope). For [DBM] level divide by 100.')
gnOduMonIntervalXXpiThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXXpiThreshExceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXXpiThreshExceed.setDescription(' The number of seconds XPI exceeded the XPI threshold in a 15 minutes interval (future develope).')
gnOduMonIntervalXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalXIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalXIDF.setDescription('IDF = Invalid Data Flag.')
gnOduMonDayXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3), )
if mibBuilder.loadTexts: gnOduMonDayXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXTable.setDescription('This table defines/keeps the counters of 96 intervals of 15 min.')
gnOduMonDayXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonDayXId"), (0, "CERAGON-MIB", "gnOduMonDayXIdx"))
if mibBuilder.loadTexts: gnOduMonDayXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXEntry.setDescription('This is an entry in the Days Table. This table is indexed by gnOduMonDayXId= 3 for drawer1 ODU and gnOduMonDayXId = 4 for drawer2 ODU and by day idx. gnOduMonDayIdx = 1 is one day from now, gnOduMonDayIdx = 2 is two days from now, and so on...')
gnOduMonDayXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXId.setDescription(' ')
gnOduMonDayXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXIdx.setDescription(' The interval number to which this row is related. ')
gnOduMonDayXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXMinRL.setDescription(' The minimum Receive Level (in DBM). in a 24 hour interval.')
gnOduMonDayXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXMaxRL.setDescription(' The maximum Receive Level (in DBM). in a 24 hour interval.')
gnOduMonDayXTLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXTLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXTLThresh1Exceed.setDescription(' The number of seconds TL exceeded the TL1 threshold in a 24 hour interval.')
gnOduMonDayXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in a 24 hour interval.')
gnOduMonDayXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in a 24 hour interval.')
gnOduMonDayXMinTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMinTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXMinTL.setDescription(' The minimum Transmit Level (in DBM). in a 24 hour interval.')
gnOduMonDayXMaxTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMaxTL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXMaxTL.setDescription(' The maximum Transmit Level (in DBM). in a 24 hour interval.')
gnOduMonDayXMinXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMinXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXMinXpi.setDescription(' The minimum XPI Level (in [DBM/100]) in a 24 hour interval (future develope). For [DBM] level divide by 100.')
gnOduMonDayXMaxXpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXMaxXpi.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXMaxXpi.setDescription(' The maximum XPI Level (in [DBM/100]) in a 24 hour interval (future develope). For [DBM] level divide by 100.')
gnOduMonDayXXpiThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXXpiThreshExceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXXpiThreshExceed.setDescription(' The number of seconds XPI exceeded the XPI threshold in a 24 hour interval (future develope).')
gnOduMonDayXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayXIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayXIDF.setDescription('IDF = Invalid Data Flag.')
gnOduMonCurrDiversityXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4), )
if mibBuilder.loadTexts: gnOduMonCurrDiversityXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXTable.setDescription('This table defines/keeps the counters of the current 15 min interval.')
gnOduMonCurrDiversityXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonCurrDiversityXId"))
if mibBuilder.loadTexts: gnOduMonCurrDiversityXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXEntry.setDescription('This is an entry in the Current Interval Table. This table contains two rows, indexed by gnOduMonCurrCombinedXId= 3 for drawer1 ODU and gnOduMonCurrDiversityXId = 4 for drawer2 ODU.')
gnOduMonCurrDiversityXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXId.setDescription(' ')
gnOduMonCurrDiversityXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXMinRL.setDescription('The minimum received signal level (RL) in the current 15 minute interval. (in DBM) ')
gnOduMonCurrDiversityXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXMaxRL.setDescription('The maximum received signal level (RL) in the current 15 minute interval. (in DBM). ')
gnOduMonCurrDiversityXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in the last 15 minutes.')
gnOduMonCurrDiversityXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in the last 15 minutes.')
gnOduMonCurrDiversityXDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayMinRL.setDescription(' The minimum Receive Level (in DBM). in the last 24 hours.')
gnOduMonCurrDiversityXDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayMaxRL.setDescription(' The maximum Receive Level (in DBM). in the last 24 hours.')
gnOduMonCurrDiversityXDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayRLThresh1Exceed.setDescription('The number of seconds Diversity RL exceeded the RL1 threshold in the last 24 hours.')
gnOduMonCurrDiversityXDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrDiversityXDayRLThresh2Exceed.setDescription('The number of seconds Diversity RL exceeded the RL2 threshold in the last 24 hours.')
gnOduMonIntervalDiversityXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5), )
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXTable.setDescription('This table defines/keeps the counters of the 96 last intervals of 15 min.')
gnOduMonIntervalDiversityXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonIntervalDiversityXId"), (0, "CERAGON-MIB", "gnOduMonIntervalDiversityXIdx"))
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXEntry.setDescription('This is an entry in the Interval Table. This table is indexed by gnOduMonIntervalDiversityXId= 3 for drawer1 ODU and gnOduMonIntervalDiversityXId = 4 for drawer2 ODU and by interval idx')
gnOduMonIntervalDiversityXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXId.setDescription(' ')
gnOduMonIntervalDiversityXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXIdx.setDescription(' The interval number to which this row is related. ')
gnOduMonIntervalDiversityXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXMinRL.setDescription(' The minimum RL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalDiversityXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXMaxRL.setDescription(' The maximum RL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalDiversityXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in a 15 minutes interval.')
gnOduMonIntervalDiversityXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalDiversityXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in a 15 minutes interval.')
gnOduMonDayDiversityXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6), )
if mibBuilder.loadTexts: gnOduMonDayDiversityXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayDiversityXTable.setDescription('This table defines/keeps the counters of 96 intervals of 15 min.')
gnOduMonDayDiversityXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonDayDiversityXId"), (0, "CERAGON-MIB", "gnOduMonDayDiversityXIdx"))
if mibBuilder.loadTexts: gnOduMonDayDiversityXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayDiversityXEntry.setDescription('This is an entry in the Days Table. This table is indexed by gnOduMonDayDiversityXId= 3 for drawer1 ODU and gnOduMonDayDiversityXId = 4 for drawer2 ODU and by day idx. gnOduMonDayDiversityXIdx = 1 is one day from now, gnOduMonDayDiversityXIdx = 2 is two days from now, and so on...')
gnOduMonDayDiversityXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayDiversityXId.setDescription(' ')
gnOduMonDayDiversityXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayDiversityXIdx.setDescription(' The interval number to which this row is related. ')
gnOduMonDayDiversityXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayDiversityXMinRL.setDescription(' The minimum Receive Level (in DBM). in a 24 hour interval.')
gnOduMonDayDiversityXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayDiversityXMaxRL.setDescription(' The maximum Receive Level (in DBM). in a 24 hour interval.')
gnOduMonDayDiversityXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayDiversityXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in a 24 hour interval.')
gnOduMonDayDiversityXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayDiversityXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayDiversityXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in a 24 hour interval.')
gnOduMonCurrCombinedXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7), )
if mibBuilder.loadTexts: gnOduMonCurrCombinedXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXTable.setDescription('This table defines/keeps the counters of the current 15 min interval.')
gnOduMonCurrCombinedXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonCurrCombinedXId"))
if mibBuilder.loadTexts: gnOduMonCurrCombinedXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXEntry.setDescription('This is an entry in the Current Interval Table. This table contains two rows, indexed by gnOduMonCurrCombinedXId= 3 for drawer1 ODU and gnOduMonCurrCombinedXId = 4 for drawer2 ODU.')
gnOduMonCurrCombinedXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXId.setDescription(' ')
gnOduMonCurrCombinedXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXMinRL.setDescription('The minimum received signal level (RL) in the current 15 minute interval. (in DBM) ')
gnOduMonCurrCombinedXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXMaxRL.setDescription('The maximum received signal level (RL) in the current 15 minute interval. (in DBM). ')
gnOduMonCurrCombinedXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in the last 15 minutes.')
gnOduMonCurrCombinedXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in the last 15 minutes.')
gnOduMonCurrCombinedXDayMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayMinRL.setDescription(' The minimum Receive Level (in DBM). in the last 24 hours.')
gnOduMonCurrCombinedXDayMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayMaxRL.setDescription(' The maximum Receive Level (in DBM). in the last 24 hours.')
gnOduMonCurrCombinedXDayRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayRLThresh1Exceed.setDescription('The number of seconds Combined RL exceeded the RL1 threshold in the last 24 hours.')
gnOduMonCurrCombinedXDayRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonCurrCombinedXDayRLThresh2Exceed.setDescription('The number of seconds Combined RL exceeded the RL2 threshold in the last 24 hours.')
gnOduMonIntervalCombinedXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8), )
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXTable.setDescription('This table defines/keeps the counters of the 96 last intervals of 15 min.')
gnOduMonIntervalCombinedXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonIntervalCombinedXId"), (0, "CERAGON-MIB", "gnOduMonIntervalCombinedXIdx"))
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXEntry.setDescription('This is an entry in the Interval Table. This table is indexed by gnOduMonIntervalCombinedXId= 3 for drawer1 ODU and gnOduMonIntervalCombinedXId = 4 for drawer2 ODU and by interval idx')
gnOduMonIntervalCombinedXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXId.setDescription(' ')
gnOduMonIntervalCombinedXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXIdx.setDescription(' The interval number to which this row is related. ')
gnOduMonIntervalCombinedXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXMinRL.setDescription(' The minimum RL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalCombinedXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXMaxRL.setDescription(' The maximum RL in a 15 minutes interval. (in DBM). ')
gnOduMonIntervalCombinedXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in a 15 minutes interval.')
gnOduMonIntervalCombinedXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonIntervalCombinedXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in a 15 minutes interval.')
gnOduMonDayCombinedXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9), )
if mibBuilder.loadTexts: gnOduMonDayCombinedXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayCombinedXTable.setDescription('This table defines/keeps the counters of 96 intervals of 15 min.')
gnOduMonDayCombinedXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1), ).setIndexNames((0, "CERAGON-MIB", "gnOduMonDayCombinedXId"), (0, "CERAGON-MIB", "gnOduMonDayCombinedXIdx"))
if mibBuilder.loadTexts: gnOduMonDayCombinedXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayCombinedXEntry.setDescription('This is an entry in the Days Table. This table is indexed by gnOduMonDayDiversityXId= 3 for drawer1 ODU and gnOduMonDayCombinedXId = 4 for drawer2 ODU and by day idx. gnOduMonDayCombinedXIdx = 1 is one day from now, gnOduMonDayCombinedXIdx = 2 is two days from now, and so on...')
gnOduMonDayCombinedXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayCombinedXId.setDescription('.')
gnOduMonDayCombinedXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayCombinedXIdx.setDescription(' The interval number to which this row is related. ')
gnOduMonDayCombinedXMinRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXMinRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayCombinedXMinRL.setDescription(' The minimum Receive Level (in DBM). in a 24 hour interval.')
gnOduMonDayCombinedXMaxRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXMaxRL.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayCombinedXMaxRL.setDescription(' The maximum Receive Level (in DBM). in a 24 hour interval.')
gnOduMonDayCombinedXRLThresh1Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXRLThresh1Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayCombinedXRLThresh1Exceed.setDescription(' The number of seconds RL exceeded the RL1 threshold in a 24 hour interval.')
gnOduMonDayCombinedXRLThresh2Exceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 1, 6, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnOduMonDayCombinedXRLThresh2Exceed.setStatus('mandatory')
if mibBuilder.loadTexts: gnOduMonDayCombinedXRLThresh2Exceed.setDescription(' The number of seconds RL exceeded the RL2 threshold in a 24 hour interval.')
gnIDU = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2))
gnMdm = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1))
gnMdmStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2), )
if mibBuilder.loadTexts: gnMdmStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatTable.setDescription('This table maintains the status of the Indoor part of the system.')
gnMdmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMdmStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatEntry.setDescription('This is an entry in the IDU Modem Configuration Table. This table contains two rows, indexed by ifIndex= 1 for local modem and ifIndex = 101 for remote modem.')
gnMdmModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ok", 2), ("modulatorFault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmModStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmModStatus.setDescription('This parameters indicates a modem fault. ')
gnMdmDemodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmDemodStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmDemodStatus.setDescription('This parameters indicates a demodem fault - For internal use.')
gnMdmDefectBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmDefectBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmDefectBlocks.setDescription('The number of defected blocks that could not be corrected by the FEC ')
gnMdmBytesCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmBytesCorrected.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmBytesCorrected.setDescription(' Number of bytes corrected by the FEC')
gnMdmClearBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmClearBC.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmClearBC.setDescription(' clears Defected Blocks, Defected Bytes and Blocks Corrected.')
gnMdmStatXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3), )
if mibBuilder.loadTexts: gnMdmStatXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXTable.setDescription('This table maintains the status of the Indoor part of the system.')
gnMdmStatXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmStatXId"))
if mibBuilder.loadTexts: gnMdmStatXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXEntry.setDescription('This is an entry in the IDU Modem Configuration Table.')
gnMdmStatXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXId.setDescription(' ')
gnMdmStatXStandardOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("etsi", 2), ("fcc", 3), ("japan", 4), ("lmds", 5), ("cmds", 6), ("australia", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXStandardOrg.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXStandardOrg.setDescription('This parameter specifies which international standard is used.')
gnMdmStatXRemoteConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXRemoteConnection.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXRemoteConnection.setDescription('Is the connection between the local manager and the remote manager.')
gnMdmStatXModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemType.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXModemType.setDescription('This parameter specifies the modem qam.')
gnMdmStatXModemWorkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemWorkTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXModemWorkTime.setDescription('The modem Work Time (hours).')
gnMdmStatXModemSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXModemSerialNumber.setDescription('This is the modem serial number - up to 20 characters ')
gnMdmStatXModemFWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemFWVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXModemFWVer.setDescription('This is the Modem firmware version.')
gnMdmStatXModemFWPostVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemFWPostVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXModemFWPostVer.setDescription('This is the Modem post reset firmware version.')
gnMdmStatXModemScriptVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemScriptVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXModemScriptVer.setDescription('This is the Modem script version.')
gnMdmStatXModemScriptPostVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXModemScriptPostVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXModemScriptPostVer.setDescription('This is the Modem post reset script version.')
gnMdmStatXIfLoopbackTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXIfLoopbackTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXIfLoopbackTimeOut.setDescription('This variable indicates the remaining time (in minutes) till the relevant loopback timer will be expired. when starting a loopback and the value of gnMdmStatXIfLoopbackTimeOut is x, the gnMdmStatXIfLoopbackTimeOut will be also x, after one minute it will be x-1, etc.')
gnMdmStatXBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3), ("v3", 4))).clone('v1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXBoardType.setDescription('This parameter defines the type of the modem for NMS use.')
gnMdmStatXDefectedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXDefectedBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXDefectedBlocks.setDescription('The number of defected blocks. ')
gnMdmStatXScriptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXScriptType.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXScriptType.setDescription('This parameter specifies the type of the script. v1 - Regular MRMC script. v2 - ACM MRMC script.')
gnMdmStatXAcmValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXAcmValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXAcmValidIntervals.setDescription('This value indicates the number of valid intervals.')
gnMdmStatXAcmSignalValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("valid", 2), ("notValid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXAcmSignalValid.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXAcmSignalValid.setDescription('This value indicates whether the modem is lock in ACM.')
gnMdmStatXTxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXTxConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXTxConstellation.setDescription('This value indicates the current Tx modem constellation.')
gnMdmStatXRxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmStatXRxConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmStatXRxConstellation.setDescription('This value indicates the current Rx modem constellation.')
gnMdmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 4), )
if mibBuilder.loadTexts: gnMdmCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgTable.setDescription('')
gnMdmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmCfgId"))
if mibBuilder.loadTexts: gnMdmCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgEntry.setDescription('')
gnMdmCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgId.setDescription(' ')
gnMdmCfgDiversityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgDiversityMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgDiversityMode.setDescription(' ')
gnMdmCfgXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5), )
if mibBuilder.loadTexts: gnMdmCfgXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXTable.setDescription('This table defines the configuration of modem.')
gnMdmCfgXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmCfgXId"))
if mibBuilder.loadTexts: gnMdmCfgXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXEntry.setDescription('This is an entry in the modem configuration table.')
gnMdmCfgXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmCfgXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXId.setDescription('This value indicates which device is involved in the specific row.')
gnMdmCfgXLatencyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("low", 2), ("high", 3))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXLatencyType.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXLatencyType.setDescription(' ')
gnMdmCfgXLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXLinkId.setDescription("0 for 'old' system that doesn't support the link ID. the user can enter values from 1 to 65535")
gnMdmCfgXRadioSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXRadioSide.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXRadioSide.setDescription('')
gnMdmCfgXMrmcConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 24, 25, 26))).clone(namedValues=NamedValues(("mrmc1528", 1), ("mrmc1550", 2), ("mrmc3156", 3), ("mrmc3150", 4), ("mrmc1228", 5), ("mrmc1540", 6), ("mrmc4410", 7), ("mrmc4420", 8), ("mrmc4440", 9), ("mrmc1125", 10), ("mrmc2050", 11), ("mrmc2030", 12), ("mrmc1340", 13), ("mrmc3756", 18), ("acm56", 24), ("acm50", 25), ("acm28", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXMrmcConf.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXMrmcConf.setDescription('The Link data capacity')
gnMdmCfgXIfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("none", 2), ("active", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXIfLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXIfLoopback.setDescription(' This parameter enable the user to activate a loopback.')
gnMdmCfgXHwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noOperation", 2), ("hwReset", 3))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXHwReset.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXHwReset.setDescription('hwReset - Hardware reset for modem board.')
gnMdmCfgXPrbsTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notActive", 2), ("active", 3))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXPrbsTest.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXPrbsTest.setDescription(' This parameter enable the user to activate the PRBS test.')
gnMdmCfgXClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clearCounters", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXClearCounters.setDescription(' This parameter enable the user to clear the PRBS counters.')
gnMdmCfgXAcmOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("adaptive", 1), ("acm4QAM", 2), ("acm8QAM", 3), ("acm16QAM", 4), ("acm32QAM", 5), ("acm64QAM", 6), ("acm128QAM", 7), ("acm256QAM", 8))).clone('acm4QAM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXAcmOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXAcmOperationMode.setDescription('This parameter set the administrative status of the ACM operational mode, this mode is valid on ACM script only.')
gnMdmCfgXAcmMaximumConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("acm4QAM", 2), ("acm8QAM", 3), ("acm16QAM", 4), ("acm32QAM", 5), ("acm64QAM", 6), ("acm128QAM", 7), ("acm256QAM", 8))).clone('acm4QAM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMdmCfgXAcmMaximumConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmCfgXAcmMaximumConstellation.setDescription('This parameter set the maximum constellation of the ACM.')
gnMdmAcmStatXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6), )
if mibBuilder.loadTexts: gnMdmAcmStatXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmStatXTable.setDescription('This table defines the ACM status.')
gnMdmAcmStatXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmAcmStatXId"), (0, "CERAGON-MIB", "gnMdmAcmStatXQamId"))
if mibBuilder.loadTexts: gnMdmAcmStatXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmStatXEntry.setDescription('This is an entry in the modem ACM status table.')
gnMdmAcmStatXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmStatXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmStatXId.setDescription('This value indicates which device is involved in the specific row.')
gnMdmAcmStatXQamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("acm4QAM", 2), ("acm8QAM", 3), ("acm16QAM", 4), ("acm32QAM", 5), ("acm64QAM", 6), ("acm128QAM", 7), ("acm256QAM", 8))).clone('acm4QAM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmStatXQamId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmStatXQamId.setDescription('This value indicates which QAM is involved in a specific row.')
gnMdmAcmStatXRoundedThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(155)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmStatXRoundedThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmStatXRoundedThroughput.setDescription('This value indicates on the rounded throuphput of a specific constellation.')
gnMdmAcmStatXSupportedThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notSupport", 2), ("support", 3))).clone('notSupport')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmStatXSupportedThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmStatXSupportedThroughput.setDescription('This value indicates whether the specific constellation is supported.')
gnMdmMonitorX = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7))
gnMdmAcmMonitorX = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1))
gnMdmAcmMonCurrXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1), )
if mibBuilder.loadTexts: gnMdmAcmMonCurrXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXTable.setDescription('This table defines/keeps the counters of the current 15 min interval.')
gnMdmAcmMonCurrXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmAcmMonCurrXId"))
if mibBuilder.loadTexts: gnMdmAcmMonCurrXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXEntry.setDescription('This is an entry in the Current Interval Table. This table contains two rows, indexed by gnMdmAcmMonCurrXId= 3 for drawer1 modem and gnMdmAcmMonCurrXId = 4 for drawer2 modem.')
gnMdmAcmMonCurrXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXId.setDescription(' ')
gnMdmAcmMonCurrXMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXMinConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXMinConstellation.setDescription('The minimum modem constellation in the current 15 minute interval.')
gnMdmAcmMonCurrXMaxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXMaxConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXMaxConstellation.setDescription('The maximum modem constellation in the current 15 minute interval.')
gnMdmAcmMonCurrXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXIDF.setDescription('IDF = Invalid Data Flag in current 15 minute interval.')
gnMdmAcmMonCurrXDayMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayMinConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayMinConstellation.setDescription('The minimum modem constellation in the last 24 hours.')
gnMdmAcmMonCurrXDayMaxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayMaxConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayMaxConstellation.setDescription('The maximum modem constellation in the last 24 hours.')
gnMdmAcmMonCurrXDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonCurrXDayIDF.setDescription('IDF = Invalid Data Flag in in the last 24 hours.')
gnMdmAcmMonIntervalXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2), )
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXTable.setDescription('This table defines/keeps the counters of the 96 last intervals of 15 min.')
gnMdmAcmMonIntervalXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmAcmMonIntervalXId"), (0, "CERAGON-MIB", "gnMdmAcmMonIntervalXIdx"))
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXEntry.setDescription('This is an entry in the Interval Table. This table is indexed by gnMdmAcmMonIntervalXId= 3 for drawer1 modem and gnMdmAcmMonIntervalXId = 4 for drawer2 modem and by interval idx')
gnMdmAcmMonIntervalXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXId.setDescription(' ')
gnMdmAcmMonIntervalXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXIdx.setDescription(' The interval number to which this row is related. ')
gnMdmAcmMonIntervalXMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXMinConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXMinConstellation.setDescription(' The minimum constellation in a 15 minutes interval')
gnMdmAcmMonIntervalXMaxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXMaxConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXMaxConstellation.setDescription(' The maximum constellation in a 15 minutes interval')
gnMdmAcmMonIntervalXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonIntervalXIDF.setDescription('IDF = Invalid Data Flag.')
gnMdmAcmMonDayXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3), )
if mibBuilder.loadTexts: gnMdmAcmMonDayXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonDayXTable.setDescription('This table defines/keeps the counters of 30 intervals of 24 hours.')
gnMdmAcmMonDayXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMdmAcmMonDayXId"), (0, "CERAGON-MIB", "gnMdmAcmMonDayXIdx"))
if mibBuilder.loadTexts: gnMdmAcmMonDayXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonDayXEntry.setDescription('This is an entry in the Days Table. This table is indexed by gnMdmAcmMonDayXId= 3 for drawer1 modem and gnMdmAcmMonDayXId = 4 for drawer2 modem and by day idx. gnMdmAcmMonDayIdx = 1 is one day from now, gnMdmAcmMonDayIdx = 2 is two days from now, and so on...')
gnMdmAcmMonDayXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("modem1", 3), ("modem2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonDayXId.setDescription(' ')
gnMdmAcmMonDayXIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonDayXIdx.setDescription(' The interval number to which this row is related. ')
gnMdmAcmMonDayXMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXMinConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonDayXMinConstellation.setDescription(' The minimum modem constellation in a 24 hour interval.')
gnMdmAcmMonDayXMaxConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXMaxConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonDayXMaxConstellation.setDescription(' The maximum modem constellation in a 24 hour interval.')
gnMdmAcmMonDayXIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 1, 7, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMdmAcmMonDayXIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnMdmAcmMonDayXIDF.setDescription('IDF = Invalid Data Flag.')
gnSpi = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 2))
gnSpiCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 2, 1), )
if mibBuilder.loadTexts: gnSpiCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnSpiCfgTable.setDescription('This table defines the configuration of the SPI part of the system.')
gnSpiCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnSpiCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnSpiCfgEntry.setDescription('This is an entry in the SPI Configuration Table. This table contains two rows, indexed by ifIndex= 2 for local SPI and ifIndex = 102 for remote SPI.')
gnSpiCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nointerface", 1), ("fiber", 2), ("electrical", 3), ("utp", 4), ("stp", 5))).clone('fiber')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSpiCfgConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnSpiCfgConnector.setDescription(' The physical connector of the SPI - Used only in old regenerators ')
gnMux = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3))
gnRstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1), )
if mibBuilder.loadTexts: gnRstCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTable.setDescription('This table defines the configuration of the regenerator part of the MUX.')
gnRstCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnRstCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgEntry.setDescription('This is an entry in the Regenerator part of the MUX Configuration Table. This table contains a row for every interface which type is SONET(39). for example regenerator on local and remote sides will have four entries 1,2 for local IDU and 101 and 102 for remote IDU.')
gnRstCfgTransmittedJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('J0 J0 J0 J0 J0 ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransmittedJ0.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTransmittedJ0.setDescription('This is the J0 string that would be sent. This string must be 15 characters in length.')
gnRstCfgExpectedJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('J0 J0 J0 J0 J0 ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgExpectedJ0.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgExpectedJ0.setDescription('This is the J0 string that is expected to be received. This string must be 15 characters in length.')
gnRstCfgTransparencyJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3), ("notActive", 4))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyJ0.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTransparencyJ0.setDescription(' Send the received J0 string transparently or send the Transmitted J0 configured string.')
gnRstCfgRSTAISMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sendAIS", 2), ("doNotSendAIS", 3))).clone('doNotSendAIS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgRSTAISMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgRSTAISMode.setDescription(" In the case of a J0 mismatch error, send or don't send AIS.")
gnRstCfgRstEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgRstEXCThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgRstEXCThresh.setDescription(' If the bit error rate is higher than this threshold an EXC alarm would be generated. EXC is for excessive.')
gnRstCfgRstSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgRstSDThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgRstSDThresh.setDescription(' If the bit error rate is higher than this threshold a SD alarm would be generated. SD is for Signal Degrade.')
gnRstCfgTransparencyE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3), ("disable", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyE1.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTransparencyE1.setDescription('Transmit the order wire data received or terminate the E1 data received.')
gnRstCfgTransparencyF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3), ("disable", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyF1.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTransparencyF1.setDescription('Transmit the F1/User channel data received or terminate the F1/User channel data received. set the TransparencyF1 to disable when the User channel used by In-Band management.')
gnRstCfgTransparencyUnscrambled = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyUnscrambled.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTransparencyUnscrambled.setDescription('Transmit the unscrambled national bytes data received or terminate the unscrambled national bytes data received.')
gnRstCfgMngByteLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("mediaSpecificBytes", 2), ("spareA1A0Bytes", 3), ("e1Byets", 4), ("noMngBytes", 5), ("dccr", 6), ("dccm", 7), ("userChannel", 8), ("waysideChannel", 9))).clone('mediaSpecificBytes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgMngByteLocation.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgMngByteLocation.setDescription('This parameter indicates which media specific bytes are in use and which are transparent. not currently supported')
gnRstCfgE1waysideChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgE1waysideChannel.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgE1waysideChannel.setDescription('If this parameter is enabled, an E1 wayside channel will be sent through the network using the unused bytes in the SDH header.')
gnRstCfgTransparencyDCCR = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyDCCR.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTransparencyDCCR.setDescription('Transmit on the DCCR channel or terminate the DCCR channel.')
gnRstCfgTransparencyB1Chan = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTransparencyB1Chan.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTransparencyB1Chan.setDescription('Correct B1 byte or send transmit it transparently .')
gnRstCfgTestActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgTestActivate.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgTestActivate.setDescription('This field allows the NMS to activate the following tests: bit 1 = 1 Force AIS bit 2 = 1 Force RDI.')
gnRstCfgLoopbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noloopback", 2), ("interfaceInterLoop", 3), ("interfaceExterLoop", 4))).clone('noloopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnRstCfgLoopbackOption.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstCfgLoopbackOption.setDescription(' This parameter enable the user to activate a loopback .')
gnRstStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2), )
if mibBuilder.loadTexts: gnRstStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstStatTable.setDescription('This table defines the status of the regenerator part of the MUX.')
gnRstStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnRstStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstStatEntry.setDescription('This is an entry in the Regenerator part of the MUX Status Table. This table contains a row for every interface which type is SONET(39).')
gnRstStatReceivedJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstStatReceivedJ0.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstStatReceivedJ0.setDescription('This is the J0 string received.')
gnRstStatBERCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstStatBERCur.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstStatBERCur.setDescription(' Current Bit Error Rate. ')
gnRstStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstStatStatus.setDescription(' bit 2 = LOS bit 3 = LOF bit 7 = TIM bit 9 = SD bit 10 = EXC bit 11 = UNEXP')
gnRstStatClearLoopTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstStatClearLoopTimer.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstStatClearLoopTimer.setDescription('This variable indicates the remaining time (in minutes) till the relevant loopback timer will be expired. when starting a loopback and the value of gnGenCfgClearLoopTimeout is x, the gnRstStatClearLoopTimer will be also x, after one minute it will be x-1, etc. gnRstStatClearLoopTimer.1 is for the radio aggregate loopbacks, gnRstStatClearLoopTimer.2 is for the line aggregate loopbacks')
gnRstMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3))
gnRstMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1), )
if mibBuilder.loadTexts: gnRstMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrTable.setDescription('This table maintains the counters of the regenerator part of the MUX.')
gnRstMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnRstMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrEntry.setDescription('This is an entry in the Regenerator part of the MUX Counters Table. This table contains a row for every interface which type is SONET(39).')
gnRstMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrBBE.setDescription(' The current number of Background Block Errors starting from the present 15 minutes period.')
gnRstMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrUAS.setDescription(' The current number of Unavailable Seconds starting from the present 15 minutes period.')
gnRstMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrLastDayES.setDescription(' The current number of Errored Seconds starting from the present 24 hours period.')
gnRstMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrLastDaySES.setDescription(' The current number of Severely Errored Seconds starting from the present 24 hours period.')
gnRstMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrLastDayBBE.setDescription(' The current number of Background Block Errors starting from the present 24 hours period.')
gnRstMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrLastDayUAS.setDescription(' The current number of Unavailable Seconds starting from the present 24 hours period.')
gnRstMonCurrLastDayOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayOFS.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrLastDayOFS.setDescription(' The current number of Out Of Frame Seconds starting from the present 24 hours period.')
gnRstMonCurrLastDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonCurrLastDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonCurrLastDayIDF.setDescription('IDF = Invalid Data Flag.')
gnRstMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2), )
if mibBuilder.loadTexts: gnRstMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonIntervalTable.setDescription('This table maintains the counters of the regenerator part of the MUX per interval.')
gnRstMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnRstMonIntervalIdx"))
if mibBuilder.loadTexts: gnRstMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonIntervalEntry.setDescription('This is an entry in the Regenerator part of the MUX Counters Table. This table contains an interface index for every interface which type is SONET(39). This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnRstMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnRstMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonIntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonIntervalBBE.setDescription(' The number of Background Block Errors per interval.')
gnRstMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonIntervalUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonIntervalUAS.setDescription(' The number of Unavailable Seconds per interval.')
gnRstMonIntervalIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonIntervalIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonIntervalIDF.setDescription('IDF = Invalid Data Flag.')
gnRstMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3), )
if mibBuilder.loadTexts: gnRstMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDayTable.setDescription('This table maintains the counters of the regenerator part of the MUX per 24 hours interval.')
gnRstMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnRstMonDayIdx"))
if mibBuilder.loadTexts: gnRstMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDayEntry.setDescription('This is an entry in the Regenerator part of the MUX Counters Table. This table contains an interface index for every interface which type is SONET(39). This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnRstMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnRstMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDayES.setDescription(' The number of Errored Seconds per interval of 24 hours.')
gnRstMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDaySES.setDescription(' The number of Severely Errored Seconds per interval of 24 hours.')
gnRstMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDayBBE.setDescription(' The number of Background Block Errors per interval of 24 hours.')
gnRstMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDayUAS.setDescription(' The number of Unavailable Seconds per interval of 24 hours.')
gnRstMonDayOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayOFS.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDayOFS.setDescription(' The number of Out Of Frame Seconds per interval of 24 hours.')
gnRstMonDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnRstMonDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnRstMonDayIDF.setDescription('IDF = Invalid Data Flag.')
gnMstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 4), )
if mibBuilder.loadTexts: gnMstCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstCfgTable.setDescription('This table maintains the counters of the MST part of the MUX.')
gnMstCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMstCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstCfgEntry.setDescription('This is an entry in the MST part of the MUX Configuration Table. This table contains a row for every interface which type is SONET(39).')
gnMstCfgEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMstCfgEXCThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstCfgEXCThresh.setDescription(' If the bit error rate is higher than this threshold an EXC alarm would be generated. EXC is for excessive.')
gnMstCfgSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMstCfgSDThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstCfgSDThresh.setDescription(' If the bit error rate is higher than this threshold a SD alarm would be generated. SD is for Signal Degrade.')
gnMstStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5), )
if mibBuilder.loadTexts: gnMstStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatTable.setDescription('This table defines the status of the MST part of the MUX.')
gnMstStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMstStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatEntry.setDescription('This is an entry in the MST part of the MUX Status Table. This table contains a row for every interface which type is SONET(39).')
gnMstStatReceivedS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatReceivedS1.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatReceivedS1.setDescription(' Received Synchronization status byte.')
gnMstStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatStatus.setDescription(' Alarm status. Bit 1 is MSB, bit=1 when alarm active. bit 5 = RDI bit 6 = AIS bit 9 = SD bit 10 = EXC bit 16 = PAM (MSP) bit 17 = SCM (MSP) bit 18 = INV (MSP) ')
gnMstStatTransmitS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatTransmitS1.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatTransmitS1.setDescription(' Transmitted Synchronization status byte.')
gnMstStatCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatCurrentBer.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatCurrentBer.setDescription(' ')
gnMstStatReceivedK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatReceivedK1.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatReceivedK1.setDescription('Received K1 byte (Automatic Protection Switch message).')
gnMstStatReceivedK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatReceivedK2.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatReceivedK2.setDescription('Received K2 byte (Automatic Protection Switch message).')
gnMstStatTransmitK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatTransmitK1.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatTransmitK1.setDescription('Transmitted K1 byte (Automatic Protection Switch message).')
gnMstStatTransmitK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstStatTransmitK2.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstStatTransmitK2.setDescription('Transmitted K2 byte (Automatic Protection Switch message).')
gnMstMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6))
gnMstMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1), )
if mibBuilder.loadTexts: gnMstMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonCurrTable.setDescription('This table maintains the counters of the MST part of the MUX.')
gnMstMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMstMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonCurrEntry.setDescription('This is an entry in the MST part of the MUX Counters Table. This table contains a row for every interface which type is SONET(39).')
gnMstMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonCurrBBE.setDescription(' The current number of Background Block Errors starting from the present 15 minutes period.')
gnMstMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonCurrUAS.setDescription(' The current number of Unavailable Seconds starting from the present 15 minutes period.')
gnMstMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrLastDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonCurrLastDayES.setDescription(' The current number of Errored Seconds starting from the present 24 hours period.')
gnMstMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrLastDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonCurrLastDaySES.setDescription(' The current number of Severely Errored Seconds starting from the present 24 hours period.')
gnMstMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrLastDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonCurrLastDayBBE.setDescription(' The current number of Background Block Errors starting from the present 24 hours period.')
gnMstMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonCurrLastDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonCurrLastDayUAS.setDescription(' The current number of Unavailable Seconds starting from the present 24 hours period.')
gnMstMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2), )
if mibBuilder.loadTexts: gnMstMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonIntervalTable.setDescription('This table maintains the counters of the MST part of the MUX per interval.')
gnMstMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnMstMonIntervalIdx"))
if mibBuilder.loadTexts: gnMstMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonIntervalEntry.setDescription('This is an entry in the MST part of the MUX Counters Table. This table contains an interface index for every interface which type is SONET(39). This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnMstMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnMstMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonIntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonIntervalBBE.setDescription(' The number of Background Block Errors per interval.')
gnMstMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonIntervalUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonIntervalUAS.setDescription(' The number of Unavailable Seconds per interval.')
gnMstMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3), )
if mibBuilder.loadTexts: gnMstMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonDayTable.setDescription('This table maintains the counters of the MST part of the MUX per 24 hours interval.')
gnMstMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnMstMonDayIdx"))
if mibBuilder.loadTexts: gnMstMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonDayEntry.setDescription('This is an entry in the MST part of the MUX Counters Table. This table contains an interface index for every interface which type is SONET(39). This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnMstMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnMstMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonDayES.setDescription(' The number of Errored Seconds per interval of 24 hours.')
gnMstMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonDaySES.setDescription(' The number of Severely Errored Seconds per interval of 24 hours.')
gnMstMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonDayBBE.setDescription(' The number of Background Block Errors per interval of 24 hours.')
gnMstMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstMonDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstMonDayUAS.setDescription(' The number of Unavailable Seconds per interval of 24 hours.')
gnMstFarEndMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4), )
if mibBuilder.loadTexts: gnMstFarEndMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonCurrTable.setDescription('This table maintains the counters of the far end MST part of the MUX. This Table is not supported.')
gnMstFarEndMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnMstFarEndMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonCurrEntry.setDescription('This is an entry in the far end MST part of the MUX Counters Table. This table contains an interface index for every interface which type is SONET(39).')
gnMstFarEndMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonCurrBBE.setDescription(' The current number of Background Block Errors starting from the present 15 minutes period.')
gnMstFarEndMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonCurrUAS.setDescription(' The current number of Unavailable Seconds starting from the present 15 minutes period.')
gnMstFarEndMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayES.setDescription(' The current number of Errored Seconds starting from the present 24 hours period.')
gnMstFarEndMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDaySES.setDescription(' The current number of Severely Errored Seconds starting from the present 24 hours period.')
gnMstFarEndMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayBBE.setDescription(' The current number of Background Block Errors starting from the present 24 hours period.')
gnMstFarEndMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonCurrLastDayUAS.setDescription(' The current number of Unavailable Seconds starting from the present 24 hours period.')
gnMstFarEndMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5), )
if mibBuilder.loadTexts: gnMstFarEndMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonIntervalTable.setDescription('This table maintains the counters of the far end MST part of the MUX per interval. This Table is not supported.')
gnMstFarEndMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnMstFarEndMonIntervalIdx"))
if mibBuilder.loadTexts: gnMstFarEndMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonIntervalEntry.setDescription('This is an entry in the far end MST part of the MUX Counters Table. This table contains an interface index for every interface which type is SONET(39) This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnMstFarEndMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnMstFarEndMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonIntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonIntervalBBE.setDescription(' The number of Background Block Errors per interval.')
gnMstFarEndMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonIntervalUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonIntervalUAS.setDescription(' The number of Unavailable Seconds per interval.')
gnMstFarEndMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6), )
if mibBuilder.loadTexts: gnMstFarEndMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonDayTable.setDescription('This table maintains the counters of the far end MST part of the MUX per 24 hours interval. This Table is not supported.')
gnMstFarEndMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnMstFarEndMonDayIdx"))
if mibBuilder.loadTexts: gnMstFarEndMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonDayEntry.setDescription('This is an entry in the far end MST part of the MUX Counters Table. This table contains an interface index for every interface which type is SONET(39). This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnMstFarEndMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnMstFarEndMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonDayES.setDescription(' The number of Errored Seconds per interval of 24 hours.')
gnMstFarEndMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonDaySES.setDescription(' The number of Severely Errored Seconds per interval of 24 hours.')
gnMstFarEndMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonDayBBE.setDescription(' The number of Background Block Errors per interval of 24 hours.')
gnMstFarEndMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 6, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMstFarEndMonDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnMstFarEndMonDayUAS.setDescription(' The number of Unavailable Seconds per interval of 24 hours.')
gnHptCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7), )
if mibBuilder.loadTexts: gnHptCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTable.setDescription('This table maintains the counters of the HPT part of the MUX.')
gnHptCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnHptCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgEntry.setDescription('This is an entry in the HPT part of the MUX Configuration Table. This table contains an interface index for every interface which type is PATH(50, according to RFC1573).')
gnHptCfgTransmittedJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('  ACCESS MUX   ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTransmittedJ1.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTransmittedJ1.setDescription(' This is the J1 string that would be sent.')
gnHptCfgExpectedJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('  ACCESS MUX   ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgExpectedJ1.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgExpectedJ1.setDescription(' This is the J1 string that is expected to be received.')
gnHptCfgMismatchJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAIS", 3))).clone('sendAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgMismatchJ1.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgMismatchJ1.setDescription(" In case of a J1 mismatch error, send or don't send AIS.")
gnHptCfgTransparencyJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("passthrough", 3), ("notActive", 4))).clone('passthrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTransparencyJ1.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTransparencyJ1.setDescription(' Send the received J1 string transparently or send the Transmitted J1 configured string.')
gnHptCfgEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgEXCThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgEXCThresh.setDescription(' If the bit error rate is higher than this threshold an EXC alarm would be generated. EXC is for excessive.')
gnHptCfgSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgSDThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgSDThresh.setDescription(' If the bit error rate is higher than this threshold a SD alarm would be generated. SD is for Signal Degrade.')
gnHptCfgTug3Structure1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTug3Structure1.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTug3Structure1.setDescription('This field set the TUG-3 #1 structure: (hexadecimal number) the lsb 4 bits set VC12=0 or VC3=1 structure to the TUG3 #1. (the K of the KLM index is 1) for VC12 structure the next 21 bits (for SDH) or 28 bits (for SONET) set each of the VC12 to be blocked (bit is 0) or unblocked (bit is 1). if it is VC3 only one more bit indicates if it is blocked (0) or unblocked (1). if a VC12 is set to blocked (this is the default) the system will send TU-AIS in that VC12. it it is unblocked it will be path-through or mapped to a E1/T1 port (according to the gnAccessCfgLowPathIndex). the 21 or 28 bits order is as folwed (from lsb to msb direction): first 7 bits for M=1 (from KLM index), the next 7 bits for M=2, the next for M=3, and the last (only for SONET) for M=4. Example : SDH, VC12 strcture, blocked VCs: KLM=111,121 (M=1), 112,122 (M=2), 163,173 (M=3), unblocked VCs: all the other. the value in bits will be: 0011111 1111100 1111100 0000, and in Hexadecimal: 0x7FE7C0. (so enter: 00 7F E7 C0).')
gnHptCfgTug3Structure2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTug3Structure2.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTug3Structure2.setDescription('This field set the TUG-3 #2 structure: (hexadecimal number) the lsb 4 bits set VC12=0 or VC3=1 structure to the TUG-3 #2. (the K of the KLM index is 2) for VC12 structure the next 21 bits (for SDH) or 28 bits (for SONET) set each of the VC12 to be blocked (bit is 0) or unblocked (bit is 1). if it is VC3 only one more bit indicates if it is blocked (0) or unblocked (1). if a VC12 is set to blocked (this is the default) the system will send TU-AIS in that VC12. it it is unblocked it will be path-through or mapped to a E1/T1 port (according to the gnAccessCfgLowPathIndex). the 21 or 28 bits order is as folwed (from lsb to msb direction): first 7 bits for M=1 (from KLM index), the next 7 bits for M=2, the next for M=3, and the last (only for SONET) for M=4. Example : SDH, VC12 strcture, blocked VCs: KLM=211,221 (M=1), 212,222 (M=2), 263,273 (M=3), unblocked VCs: all the other. the value in bits will be: 0011111 1111100 1111100 0000, and in Hexadecimal: 0x7FE7C0. (so enter: 00 7F E7 C0).')
gnHptCfgTug3Structure3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTug3Structure3.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTug3Structure3.setDescription('This field set the TUG-3 #3 structure: (hexadecimal number) the lsb 4 bits set VC12=0 or VC3=1 structure to the TUG-3 #3. (the K of the KLM index is 3) for VC12 structure the next 21 bits (for SDH) or 28 bits (for SONET) set each of the VC12 to be blocked (bit is 0) or unblocked (bit is 1). if it is VC3 only one more bit indicates if it is blocked (0) or unblocked (1). if a VC12 is set to blocked (this is the default) the system will send TU-AIS in that VC12. it it is unblocked it will be path-through or mapped to a E1/T1 port (according to the gnAccessCfgLowPathIndex). the 21 or 28 bits order is as folwed (from lsb to msb direction): first 7 bits for M=1 (from KLM index), the next 7 bits for M=2, the next for M=3, and the last (only for SONET) for M=4. Example : SDH, VC12 strcture, blocked VCs: KLM=311,321 (M=1), 312,322 (M=2), 363,373 (M=3), unblocked VCs: all the other. the value in bits will be: 0011111 1111100 1111100 0000, and in Hexadecimal: 0x7FE7C0. (so enter: 00 7F E7 C0).')
gnHptCfgSignalLabelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAIS", 3))).clone('sendAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgSignalLabelMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgSignalLabelMismatch.setDescription(" In case of a C2 mismatch error, send or don't send AIS.")
gnHptCfgTrailPT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTrailPT1.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTrailPT1.setDescription("This field set the TUG-3 #1 Trails Pass Through (hexadecimal number) It used by the NMS to indicate that a trail is not 'ended' on this ADM, but it is the last in the configuration chain. the lsb 4 bits set VC12=0 or VC3=1 structure to the TUG-3 #1. for VC12 structure the next 21 bits (for SDH) or 28 bits (for SONET) set each of the VC12 to be blocked (bit is 0) or unblocked (bit is 1). if it is VC3 only one more bit indicates if it is Pass-Through disabled (0, default) or Pass-Through enabled (1). if it is VC12, the 21 or 28 bits order is as folwed (from lsb to msb direction): first 7 bits for M=1 (from KLM index), the next 7 bits for M=2, the next for M=3, and the last (only for SONET) for M=4.")
gnHptCfgTrailPT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTrailPT2.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTrailPT2.setDescription("This field set the TUG-3 #2 Trails Pass Through (hexadecimal number). It used by the NMS to indicate that a trail is not 'ended' on this ADM, but it is the last in the configuration chain. the lsb 4 bits set VC12=0 or VC3=1 structure to the TUG-3 #2. for VC12 structure the next 21 bits (for SDH) or 28 bits (for SONET) set each of the VC12 to be blocked (bit is 0) or unblocked (bit is 1). if it is VC3 only one more bit indicates if it is Pass-Through disabled (0, default) or Pass-Through enabled (1). if it is VC12, the 21 or 28 bits order is as folwed (from lsb to msb direction): first 7 bits for M=1 (from KLM index), the next 7 bits for M=2, the next for M=3, and the last (only for SONET) for M=4.")
gnHptCfgTrailPT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHptCfgTrailPT3.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptCfgTrailPT3.setDescription("This field set the TUG-3 #3 Trails Pass Through (hexadecimal number) It used by the NMS to indicate that a trail is not 'ended' on this ADM, but it is the last in the configuration chain. the lsb 4 bits set VC12=0 or VC3=1 structure to the TUG-3 #3. for VC12 structure the next 21 bits (for SDH) or 28 bits (for SONET) set each of the VC12 to be blocked (bit is 0) or unblocked (bit is 1). if it is VC3 only one more bit indicates if it is Pass-Through disabled (0, default) or Pass-Through enabled (1). if it is VC12, the 21 or 28 bits order is as folwed (from lsb to msb direction): first 7 bits for M=1 (from KLM index), the next 7 bits for M=2, the next for M=3, and the last (only for SONET) for M=4.")
gnHptStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8), )
if mibBuilder.loadTexts: gnHptStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptStatTable.setDescription('This table defines the status of the HPT part of the MUX.')
gnHptStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnHptStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptStatEntry.setDescription('This is an entry in the HPT part of the MUX Status Table. This table contains an interface index for every interface which type is PATH(50, according to RFC1573).')
gnHptStatReceivedJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatReceivedJ1.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptStatReceivedJ1.setDescription('This is the J1 string that was received.')
gnHptStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptStatStatus.setDescription('Alarm status byte. Bit 1 is MSB, bit=1 when alarm active. bit 4 = LOP bit 5 = RDI bit 6 = AIS bit 7 = TIM bit 8 = SLM/PLM bit 9 = SD bit 10 = EXC bit 12 = UNEQ bit 15 = LOM')
gnHptStatCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatCurrentBer.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptStatCurrentBer.setDescription(' ')
gnHptStatFarEndCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatFarEndCurrentBer.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptStatFarEndCurrentBer.setDescription(' ')
gnHptStatReceivedSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptStatReceivedSignalLabel.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptStatReceivedSignalLabel.setDescription('This is the C2 string that was received.')
gnHptMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9))
gnHptMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1), )
if mibBuilder.loadTexts: gnHptMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonCurrTable.setDescription('This table maintains the counters of the HPT part of the MUX.')
gnHptMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnHptMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonCurrEntry.setDescription('This is an entry in the HPT part of the MUX Counters Table. This table contains an interface index for every interface which type is PATH(50, according to RFC1573).')
gnHptMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonCurrBBE.setDescription(' The current number of Background Block Errors starting from the present 15 minutes period.')
gnHptMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonCurrUAS.setDescription(' The current number of Unavailable Seconds starting from the present 15 minutes period.')
gnHptMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrLastDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonCurrLastDayES.setDescription(' The current number of Errored Seconds starting from the present 24 hours period.')
gnHptMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrLastDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonCurrLastDaySES.setDescription(' The current number of Severely Errored Seconds starting from the present 24 hours period.')
gnHptMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrLastDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonCurrLastDayBBE.setDescription(' The current number of Background Block Errors starting from the present 24 hours period.')
gnHptMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonCurrLastDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonCurrLastDayUAS.setDescription(' The current number of Unavailable Seconds starting from the present 24 hours period.')
gnHptMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2), )
if mibBuilder.loadTexts: gnHptMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonIntervalTable.setDescription('This table maintains the counters of the HPT part of the MUX per interval.')
gnHptMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnHptMonIntervalIdx"))
if mibBuilder.loadTexts: gnHptMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonIntervalEntry.setDescription('This is an entry in the HPT part of the MUX Counters Table. This table contains an interface index for every interface which type is PATH(50, according to RFC1573). This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnHptMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnHptMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonIntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonIntervalBBE.setDescription(' The number of Background Block Errors per interval.')
gnHptMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonIntervalUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonIntervalUAS.setDescription(' The number of Unavailable Seconds per interval.')
gnHptMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3), )
if mibBuilder.loadTexts: gnHptMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonDayTable.setDescription('This table maintains the counters of the HPT part of the MUX per 24 hours interval.')
gnHptMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnHptMonDayIdx"))
if mibBuilder.loadTexts: gnHptMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonDayEntry.setDescription('This is an entry in the HPT part of the MUX Counters Table. This table contains an interface index for every interface which type is PATH(50, according to RFC1573). This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnHptMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnHptMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonDayES.setDescription(' The number of Errored Seconds per interval of 24 hours.')
gnHptMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonDaySES.setDescription(' The number of Severely Errored Seconds per interval of 24 hours.')
gnHptMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonDayBBE.setDescription(' The number of Background Block Errors per interval of 24 hours.')
gnHptMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptMonDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptMonDayUAS.setDescription(' The number of Unavailable Seconds per interval of 24 hours.')
gnHptFarEndMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4), )
if mibBuilder.loadTexts: gnHptFarEndMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonCurrTable.setDescription('This table maintains the counters of the far end HPT part of the MUX.')
gnHptFarEndMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnHptFarEndMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonCurrEntry.setDescription('This is an entry in the far end HPT part of the MUX Counters Table. This table contains an interface index for every interface which type is PATH(50, according to RFC1573).')
gnHptFarEndMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonCurrBBE.setDescription(' The current number of Background Block Errors starting from the present 15 minutes period.')
gnHptFarEndMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonCurrUAS.setDescription(' The current number of Unavailable Seconds starting from the present 15 minutes period.')
gnHptFarEndMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayES.setDescription(' The current number of Errored Seconds starting from the present 24 hours period.')
gnHptFarEndMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDaySES.setDescription(' The current number of Severely Errored Seconds starting from the present 24 hours period.')
gnHptFarEndMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayBBE.setDescription(' The current number of Background Block Errors starting from the present 24 hours period.')
gnHptFarEndMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonCurrLastDayUAS.setDescription(' The current number of Unavailable Seconds starting from the present 24 hours period.')
gnHptFarEndMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5), )
if mibBuilder.loadTexts: gnHptFarEndMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonIntervalTable.setDescription('This table maintains the counters of the far end HPT part of the MUX per interval.')
gnHptFarEndMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnHptFarEndMonIntervalIdx"))
if mibBuilder.loadTexts: gnHptFarEndMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonIntervalEntry.setDescription('This is an entry in the far end HPT part of the MUX Counters Table. This table contains an interface index for every interface which type is PATH(50, according to RFC1573). This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnHptFarEndMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnHptFarEndMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonIntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonIntervalBBE.setDescription(' The number of Background Block Errors per interval.')
gnHptFarEndMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonIntervalUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonIntervalUAS.setDescription(' The number of Unavailable Seconds per interval.')
gnHptFarEndMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6), )
if mibBuilder.loadTexts: gnHptFarEndMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonDayTable.setDescription('This table maintains the counters of the far end HPT part of the MUX per 24 hours interval.')
gnHptFarEndMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnHptFarEndMonDayIdx"))
if mibBuilder.loadTexts: gnHptFarEndMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonDayEntry.setDescription('This is an entry in the far end HPT part of the MUX Counters Table. This table contains an interface index for every interface which type is PATH(50, according to RFC1573). This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnHptFarEndMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnHptFarEndMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonDayES.setDescription(' The number of Errored Seconds per interval of 24 hours.')
gnHptFarEndMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonDaySES.setDescription(' The number of Severely Errored Seconds per interval of 24 hours.')
gnHptFarEndMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonDayBBE.setDescription(' The number of Background Block Errors per interval of 24 hours.')
gnHptFarEndMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 9, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHptFarEndMonDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnHptFarEndMonDayUAS.setDescription(' The number of Unavailable Seconds per interval of 24 hours.')
gnLptCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 10), )
if mibBuilder.loadTexts: gnLptCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptCfgTable.setDescription('This table maintains the counters of the LPT part of the MUX.')
gnLptCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnLptCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptCfgEntry.setDescription('This is an entry in the LPT part of the MUX Configuration Table. This table contains an interface index for every interface which type is VT(51, according to RFC1573).')
gnLptCfgEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnLptCfgEXCThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptCfgEXCThresh.setDescription(' If the bit error rate is higher than this threshold an alarm would be generated. EXC is for excessive.')
gnLptCfgSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 15))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6), ("notActive", 15))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnLptCfgSDThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptCfgSDThresh.setDescription(' If the bit error rate is higher than this threshold an alarm would be generated. SD is for Signal Degrade.')
gnLptStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11), )
if mibBuilder.loadTexts: gnLptStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatTable.setDescription('This table defines the status of the LPT part of the MUX.')
gnLptStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnLptStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatEntry.setDescription('This is an entry in the LPT part of the MUX Status Table. This table contains an interface index for every interface which type is VT(51, according to RFC1573).')
gnLptStatReceivedJ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatReceivedJ2.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatReceivedJ2.setDescription('This is the J2 string that was received.')
gnLptStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatStatus.setDescription('Alarm status byte. Bit 1 is MSB, bit=1 when alarm active. bit 4 = LOP bit 5 = RDI bit 6 = AIS bit 7 = TIM bit 8 = SLM/PLM bit 9 = SD bit 10 = EXC bit 12 = UNEQ')
gnLptStatProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("working", 2), ("protect", 3), ("passthrough", 4), ("notActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatProtectionMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatProtectionMode.setDescription(' ')
gnLptStatCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatCurrentBer.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatCurrentBer.setDescription(' ')
gnLptStatFarEndCurrentBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatFarEndCurrentBer.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatFarEndCurrentBer.setDescription(' ')
gnLptStatReceivedSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatReceivedSignalLabel.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatReceivedSignalLabel.setDescription('These are bits 1..3 of the V5 string that was received (bit 0 is the lsb).')
gnLptStatKLM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptStatKLM.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptStatKLM.setDescription(' ')
gnLptMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12))
gnLptMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1), )
if mibBuilder.loadTexts: gnLptMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonCurrTable.setDescription('This table maintains the counters of the LPT part of the MUX.')
gnLptMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnLptMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonCurrEntry.setDescription('This is an entry in the LPT part of the MUX Counters Table. This table contains an interface index for every interface which type is VT(51, according to RFC1573).')
gnLptMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonCurrBBE.setDescription(' The current number of Background Block Errors starting from the present 15 minutes period.')
gnLptMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonCurrUAS.setDescription(' The current number of Unavailable Seconds starting from the present 15 minutes period.')
gnLptMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrLastDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonCurrLastDayES.setDescription(' The current number of Errored Seconds starting from the present 24 hours period.')
gnLptMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrLastDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonCurrLastDaySES.setDescription(' The current number of Severely Errored Seconds starting from the present 24 hours period.')
gnLptMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrLastDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonCurrLastDayBBE.setDescription(' The current number of Background Block Errors starting from the present 24 hours period.')
gnLptMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonCurrLastDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonCurrLastDayUAS.setDescription(' The current number of Unavailable Seconds starting from the present 24 hours period.')
gnLptMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2), )
if mibBuilder.loadTexts: gnLptMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonIntervalTable.setDescription('This table maintains the counters of the LPT part of the MUX per interval.')
gnLptMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnLptMonIntervalIdx"))
if mibBuilder.loadTexts: gnLptMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonIntervalEntry.setDescription('This is an entry in the LPT part of the MUX Counters Table. This table contains an interface index for every interface which type is VT(51, according to RFC1573). This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnLptMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnLptMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonIntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonIntervalBBE.setDescription(' The number of Background Block Errors per interval.')
gnLptMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonIntervalUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonIntervalUAS.setDescription(' The number of Unavailable Seconds per interval.')
gnLptMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3), )
if mibBuilder.loadTexts: gnLptMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonDayTable.setDescription('This table maintains the counters of the LPT part of the MUX per 24 hours interval.')
gnLptMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnLptMonDayIdx"))
if mibBuilder.loadTexts: gnLptMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonDayEntry.setDescription('This is an entry in the LPT part of the MUX Counters Table. This table contains four groups of rows, indexed by ifIndex= 1,2 for local IDU and ifIndex = 101 and 102 for remote IDU. This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnLptMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnLptMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonDayES.setDescription(' The number of Errored Seconds per interval of 24 hours.')
gnLptMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonDaySES.setDescription(' The number of Severely Errored Seconds per interval of 24 hours.')
gnLptMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonDayBBE.setDescription(' The number of Background Block Errors per interval of 24 hours.')
gnLptMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptMonDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptMonDayUAS.setDescription(' The number of Unavailable Seconds per interval of 24 hours.')
gnLptFarEndMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4), )
if mibBuilder.loadTexts: gnLptFarEndMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonCurrTable.setDescription('This table maintains the counters of the far end LPT part of the MUX.')
gnLptFarEndMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnLptFarEndMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonCurrEntry.setDescription('This is an entry in the far end LPT part of the MUX Counters Table. This table contains an interface index for every interface which type is VT(51, according to RFC1573).')
gnLptFarEndMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonCurrBBE.setDescription(' The current number of Background Block Errors starting from the present 15 minutes period.')
gnLptFarEndMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonCurrUAS.setDescription(' The current number of Unavailable Seconds starting from the present 15 minutes period.')
gnLptFarEndMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayES.setDescription(' The current number of Errored Seconds starting from the present 24 hours period.')
gnLptFarEndMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDaySES.setDescription(' The current number of Severely Errored Seconds starting from the present 24 hours period.')
gnLptFarEndMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayBBE.setDescription(' The current number of Background Block Errors starting from the present 24 hours period.')
gnLptFarEndMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonCurrLastDayUAS.setDescription(' The current number of Unavailable Seconds starting from the present 24 hours period.')
gnLptFarEndMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5), )
if mibBuilder.loadTexts: gnLptFarEndMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonIntervalTable.setDescription('This table maintains the counters of the far end LPT part of the MUX per interval.')
gnLptFarEndMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnLptFarEndMonIntervalIdx"))
if mibBuilder.loadTexts: gnLptFarEndMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonIntervalEntry.setDescription('This is an entry in the far end LPT part of the MUX Counters Table. This table contains an interface index for every interface which type is VT(51, according to RFC1573). This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnLptFarEndMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnLptFarEndMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonIntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonIntervalBBE.setDescription(' The number of Background Block Errors per interval.')
gnLptFarEndMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonIntervalUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonIntervalUAS.setDescription(' The number of Unavailable Seconds per interval.')
gnLptFarEndMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6), )
if mibBuilder.loadTexts: gnLptFarEndMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonDayTable.setDescription('This table maintains the counters of the far end LPT part of the MUX per 24 hours interval.')
gnLptFarEndMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnLptFarEndMonDayIdx"))
if mibBuilder.loadTexts: gnLptFarEndMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonDayEntry.setDescription('This is an entry in the far end LPT part of the MUX Counters Table. This table contains an interface index for every interface which type is VT(51, according to RFC1573). This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnLptFarEndMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnLptFarEndMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonDayES.setDescription(' The number of Errored Seconds per interval of 24 hours.')
gnLptFarEndMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonDaySES.setDescription(' The number of Severely Errored Seconds per interval of 24 hours.')
gnLptFarEndMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonDayBBE.setDescription(' The number of Background Block Errors per interval of 24 hours.')
gnLptFarEndMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 12, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLptFarEndMonDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnLptFarEndMonDayUAS.setDescription(' The number of Unavailable Seconds per interval of 24 hours.')
gnMuxCfgXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13), )
if mibBuilder.loadTexts: gnMuxCfgXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxCfgXTable.setDescription('This table defines the configuration of the mux board.')
gnMuxCfgXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMuxCfgXId"))
if mibBuilder.loadTexts: gnMuxCfgXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxCfgXEntry.setDescription('This is an entry in the mux configuration table.')
gnMuxCfgXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("mux1", 3), ("mux2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxCfgXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxCfgXId.setDescription('This value indicates which device is involved in the specific row.')
gnMuxCfgXWsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMuxCfgXWsAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxCfgXWsAdmin.setDescription(' Enable Disable drawer wayside channel ')
gnMuxCfgXWsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noloopback", 2), ("waySideLoop", 3))).clone('noloopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMuxCfgXWsLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxCfgXWsLoopback.setDescription('This parameter controls the WAYSIDE channel loopback diagnostic operations.')
gnMuxCfgXHwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noOperation", 2), ("hwReset", 3))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMuxCfgXHwReset.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxCfgXHwReset.setDescription('hwReset - Hardware reset for mux board.')
gnMUXCfgXTempLicenseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3), ("notSupported", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnMUXCfgXTempLicenseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMUXCfgXTempLicenseEnable.setDescription('Set temporary license enable or disable')
gnMUXCfgXTempLicenseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMUXCfgXTempLicenseTimer.setStatus('mandatory')
if mibBuilder.loadTexts: gnMUXCfgXTempLicenseTimer.setDescription('This value indicates the temporary license timer')
gnMuxStatXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14), )
if mibBuilder.loadTexts: gnMuxStatXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXTable.setDescription('This table defines the status of the mux board.')
gnMuxStatXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1), ).setIndexNames((0, "CERAGON-MIB", "gnMuxStatXId"))
if mibBuilder.loadTexts: gnMuxStatXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXEntry.setDescription('This is an entry in the mux configuration table.')
gnMuxStatXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("mux1", 3), ("mux2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXId.setDescription('This value indicates which device is involved in the specific row.')
gnMuxStatXMuxSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXMuxSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXMuxSerialNumber.setDescription('This is the MUX serial number - up to 20 characters ')
gnMuxStatXIfLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXIfLeds.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXIfLeds.setDescription('The status of the Interface LEDs. For the management station use. Each two bits represents one led as follows: 00 - Gray, 01 - Green, 10 - Orange, 11 - Red. The led order: Led1 is msb 2 bits , after it led2, till led 16 - 2 lsb bits.')
gnMuxStatXNumOfIfOnClass1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass1.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass1.setDescription('This value indicates the actual number of interfaces on class 1.')
gnMuxStatXNumOfIfOnClass2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass2.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass2.setDescription('This value indicates the actual number of interfaces on class 2.')
gnMuxStatXNumOfIfOnClass3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass3.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXNumOfIfOnClass3.setDescription('This value indicates the actual number of interfaces on class 3.')
gnMuxStatXAesAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3), ("notSupport", 4), ("systemFailure", 5))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXAesAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXAesAdmin.setDescription('This parameter defines encryption admin mode.')
gnMuxStatXMuxFWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXMuxFWVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXMuxFWVer.setDescription('This is the Mux firmware version.')
gnMuxStatXMuxFWPostVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXMuxFWPostVer.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXMuxFWPostVer.setDescription('This is the Mux post reset firmware version.')
gnMuxStatXBoardConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("noInterface", 2), ("oneElectricalSTM1", 3), ("oneFiberSTM1SingleMode", 4), ("oneFiberSTM1MultiMode", 5), ("twoElectricalSTM1", 6), ("twoFiberSTM1SingleMode", 7), ("twoFiberSTM1MultiMode", 8), ("oneFEOnly", 9), ("oneFEplus4E1", 10), ("oneFEplus8E1", 11), ("oneFEplus4T1", 12), ("oneFEplus8T1", 13), ("twoFEOnly", 14), ("twoFEplus4E1", 15), ("twoFEplus8E1", 16), ("twoFEplus4T1", 17), ("twoFEplus8T1", 18), ("oneDS3", 19), ("threeDS3", 20), ("oneE3", 21), ("threeE3", 22), ("oneOpticalGBEOnly", 23), ("oneOpticalGBEPlus8E1", 24), ("oneOpticalGBEPlus8T1", 25), ("oneElectricalGBEOnly", 26), ("oneElectricalGBEPlus8E1", 27), ("oneElectricalGBEPlus8T1", 28), ("oneFEplus64E1", 29), ("oneFEplus64T1", 30), ("eightE1Only", 31), ("eightT1Only", 32), ("oneStm1XC", 33), ("twoStm1XC", 34))).clone('noInterface')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXBoardConnector.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXBoardConnector.setDescription('This parameter defines the connector of the mux board, for NMS use.')
gnMuxStatXBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 3, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("v1", 2), ("v2", 3), ("v3", 4), ("v4", 5), ("v5", 6), ("v6", 7))).clone('v1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnMuxStatXBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: gnMuxStatXBoardType.setDescription('This parameter defines the type of the mux.')
gnAux = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4))
gnAuxGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1))
gnAuxGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1, 1), )
if mibBuilder.loadTexts: gnAuxGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAuxGeneralTable.setDescription('This table defines the commands of the Auxiliary channel.')
gnAuxGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnAuxGeneralId"))
if mibBuilder.loadTexts: gnAuxGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAuxGeneralEntry.setDescription('This is an entry in the Auxiliary channel command Table.')
gnAuxGeneralId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAuxGeneralId.setStatus('mandatory')
if mibBuilder.loadTexts: gnAuxGeneralId.setDescription(' ')
gnAuxGeneralSyncIdcDataBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 2), ("auxToIdc", 3), ("idcToAux", 4))).clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAuxGeneralSyncIdcDataBase.setStatus('mandatory')
if mibBuilder.loadTexts: gnAuxGeneralSyncIdcDataBase.setDescription('This parameter synchronize between hardware and data base of auxiliary channel.')
gnWsc = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2))
gnWscCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1), )
if mibBuilder.loadTexts: gnWscCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscCfgTable.setDescription('This table defines the configuration of the Wayside channel.')
gnWscCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnWscCfgId"), (0, "CERAGON-MIB", "gnWscCfgChNumber"))
if mibBuilder.loadTexts: gnWscCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscCfgEntry.setDescription('This is an entry in the Wayside channel part of the AUX Configuration Table.')
gnWscCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscCfgId.setDescription(' ')
gnWscCfgChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscCfgChNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscCfgChNumber.setDescription('Wayside channel number.')
gnWscCfgRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("drawer1", 2), ("drawer2", 3))).clone('drawer1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnWscCfgRouting.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscCfgRouting.setDescription('Wayside channel routing.')
gnWscCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnWscCfgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscCfgEnable.setDescription('Wayside channel enable\\disable.')
gnWscCfgBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("low", 2), ("high", 3))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnWscCfgBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscCfgBitRate.setDescription('Wayside channel bit rate.')
gnWscCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("e1", 2), ("t1", 3), ("fastEthernet", 4))).clone('e1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnWscCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscCfgType.setDescription('Wayside channel bit rate.')
gnWscStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2), )
if mibBuilder.loadTexts: gnWscStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscStatTable.setDescription('This table defines the status of the Wayside channel.')
gnWscStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnWscStatId"), (0, "CERAGON-MIB", "gnWscStatChNumber"))
if mibBuilder.loadTexts: gnWscStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscStatEntry.setDescription('This is an entry in the Wayside channel part of the AUX Status Table.')
gnWscStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscStatId.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscStatId.setDescription(' ')
gnWscStatChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscStatChNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscStatChNumber.setDescription('Wayside channel number.')
gnWscStatBitRateSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3))).clone('notSupported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnWscStatBitRateSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnWscStatBitRateSupport.setDescription('Indication for Wayside channel bit rate support.')
gnEow = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3))
gnEowCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1), )
if mibBuilder.loadTexts: gnEowCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowCfgTable.setDescription('This table defines the configuration of the EOW.')
gnEowCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnEowCfgId"))
if mibBuilder.loadTexts: gnEowCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowCfgEntry.setDescription('This is an entry in the EOW configuration Table.')
gnEowCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEowCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowCfgId.setDescription(' ')
gnEowCfgEowLeftEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnEowCfgEowLeftEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowCfgEowLeftEnable.setDescription('EOW enable\\disable.')
gnEowCfgEowRightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnEowCfgEowRightEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowCfgEowRightEnable.setDescription('EOW enable\\disable.')
gnEowCfgEowCascadeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnEowCfgEowCascadeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowCfgEowCascadeEnable.setDescription('EOW cascade enable\\disable.')
gnEowStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2), )
if mibBuilder.loadTexts: gnEowStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowStatTable.setDescription('This table defines the status of the EOW.')
gnEowStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnEowStatId"))
if mibBuilder.loadTexts: gnEowStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowStatEntry.setDescription('This is an entry in the EOW status Table.')
gnEowStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEowStatId.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowStatId.setDescription(' ')
gnEowStatEowLeftSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3))).clone('supported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEowStatEowLeftSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowStatEowLeftSupport.setDescription('Indication for EOW support.')
gnEowStatEowRightSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("supported", 2), ("notSupported", 3))).clone('supported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEowStatEowRightSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnEowStatEowRightSupport.setDescription('Indication for EOW support.')
gnUc = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4))
gnUcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1), )
if mibBuilder.loadTexts: gnUcCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcCfgTable.setDescription('This table defines the configuration of the User channel.')
gnUcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnUcCfgId"), (0, "CERAGON-MIB", "gnUcCfgChNumber"))
if mibBuilder.loadTexts: gnUcCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcCfgEntry.setDescription('This is an entry in the User channel part of the AUX Configuration Table.')
gnUcCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcCfgId.setDescription(' ')
gnUcCfgChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcCfgChNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcCfgChNumber.setDescription('User channel number.')
gnUcCfgRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("drawer1", 2), ("drawer2", 3))).clone('drawer1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnUcCfgRouting.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcCfgRouting.setDescription('User channel routing.')
gnUcCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnUcCfgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcCfgEnable.setDescription('User channel enable\\disable.')
gnUcCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("v11Asyn", 2), ("rs232", 3), ("v11SynCoDirectional", 4), ("v11SynContraDirectional", 5), ("ethernet", 6))).clone('v11Asyn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnUcCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcCfgType.setDescription('User channel protocol type.')
gnUcCfgLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("none", 2), ("line", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnUcCfgLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcCfgLoopback.setDescription('User channel loopback activation.')
gnUcStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2), )
if mibBuilder.loadTexts: gnUcStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcStatTable.setDescription('This table defines the status of the user channel.')
gnUcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "gnUcStatId"))
if mibBuilder.loadTexts: gnUcStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcStatEntry.setDescription('This is an entry in the user channel status Table.')
gnUcStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcStatId.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcStatId.setDescription(' ')
gnUcStatLeftMaxRouteChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcStatLeftMaxRouteChannel.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcStatLeftMaxRouteChannel.setDescription('Indication for NMS on the number of channels the right radio can passthrough.')
gnUcStatRightMaxRouteChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 2, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnUcStatRightMaxRouteChannel.setStatus('mandatory')
if mibBuilder.loadTexts: gnUcStatRightMaxRouteChannel.setDescription('Indication for NMS on the number of channels the right radio can passthrough.')
gnProtect = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 3))
gnProtectCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1), )
if mibBuilder.loadTexts: gnProtectCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgTable.setDescription('This table contains protection switch configuration per device; local and remote.')
gnProtectCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnProtectCfgId"))
if mibBuilder.loadTexts: gnProtectCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgEntry.setDescription('')
gnProtectCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgId.setDescription(' This value indicates which device is involved in the specific row.')
gnProtectCfgSwitchRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noAction", 2), ("userSwitchRequest", 3), ("userForceSwitch", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgSwitchRequest.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgSwitchRequest.setDescription(' Protection user switch request. ')
gnProtectCfgBERSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgBERSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgBERSwitch.setDescription(' Enable or disable automatic switch as a result of BER condition. ')
gnProtectCfgExtInSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgExtInSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgExtInSwitch.setDescription(' Enable or disable automatic switch as a result of alarm on External Input No. 8. ')
gnProtectCfgOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgOption.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgOption.setDescription(' bit 8 (lsb) = dual fiber input. bit 7 = protection disable bit 4 = 0 (default) for External protection ; 1 for Internal protection (between the drawers) bit 3 = 0 (default) for Full protection ; 1 for Radio protection. ')
gnProtectCfgUserCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 2), ("copyConfToMate", 3), ("copyLeftConfToRight", 4), ("copyRightConfToLeft", 5))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgUserCommand.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgUserCommand.setDescription(" Copy All the configuration that should be equal in master and slave. The copy is made from the current unit to it's mate/Left drawer to right drawer or right drawer to left drawer.")
gnProtectCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 2), ("internal", 3), ("external", 4), ("externalInternal", 5), ("multiRadioWithoutLineProtection", 6), ("multiRadioWithLineProtection", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgType.setDescription(' .')
gnProtectCfgProtectionLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgProtectionLockout.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgProtectionLockout.setDescription(' .')
gnProtectCfgSdBERSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgSdBERSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgSdBERSwitch.setDescription(' Enable or disable automatic switch as a result of signal degrade BER condition. ')
gnProtectCfgMultiRadioBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("unblock", 2), ("blockLeft", 3), ("blockRight", 4), ("blockBoth", 5))).clone('unblock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnProtectCfgMultiRadioBlock.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectCfgMultiRadioBlock.setDescription('Block\\un block radio in multi radio protection configuration only.')
gnProtectUnitMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("slave", 2), ("master", 3))).clone('slave')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectUnitMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectUnitMode.setDescription(' This parameter indicates the unit mode: Master of Slave.')
gnHitLessCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3), )
if mibBuilder.loadTexts: gnHitLessCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgTable.setDescription('This table contains hitless configuration per device; local and remote.')
gnHitLessCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "gnHitLessCfgId"))
if mibBuilder.loadTexts: gnHitLessCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgEntry.setDescription('')
gnHitLessCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgId.setDescription(' This value indicates which device is involved in the specific row.')
gnHitLessCfgSwitchEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgSwitchEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgSwitchEnable.setDescription(' Enable or disable the Hitless feature.')
gnHitLessCfgDiversityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("space", 2), ("frequency", 3), ("none", 4))).clone('space')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgDiversityType.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgDiversityType.setDescription(' Is the hitless feature working in space diversity mode or in frequency diversity mode.')
gnHitLessCfgSwitchingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("revertive", 2), ("nonRevertive", 3))).clone('revertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgSwitchingMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgSwitchingMode.setDescription(' ')
gnHitLessCfgRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgRevertTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgRevertTime.setDescription(' This parameter indicates the revert time in seconds. Possible values: 0..15.')
gnHitLessCfgManualSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("activate", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgManualSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgManualSwitch.setDescription(' Force manually switch between the hitless modems.')
gnHitLessCfgEventCounterCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clearCounter", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgEventCounterCommand.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgEventCounterCommand.setDescription(' Clears the gnHitLessStatEventCounter.')
gnHitLessCfgSwitchLock = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 2), ("left", 3), ("right", 4), ("self", 5), ("mate", 6))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnHitLessCfgSwitchLock.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessCfgSwitchLock.setDescription(' .')
gnHitLessStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4), )
if mibBuilder.loadTexts: gnHitLessStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessStatTable.setDescription('This table contains hitless status per device; local and remote.')
gnHitLessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "gnHitLessStatId"))
if mibBuilder.loadTexts: gnHitLessStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessStatEntry.setDescription('')
gnHitLessStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatId.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessStatId.setDescription(' This value indicates which device is involved in the specific row.')
gnHitLessStatReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 2), ("mate", 3), ("leftRadio", 4), ("rightRadio", 5))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatReceiverStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessStatReceiverStatus.setDescription(' This parameter indicates which Modem is active: the Local or the mate.')
gnHitLessStatModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("hitlessOK", 2), ("hitlessFailure", 3))).clone('hitlessFailure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatModeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessStatModeStatus.setDescription(' This parameter indicates if the Hitless system is working properly.')
gnHitLessStatEventCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatEventCounter.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessStatEventCounter.setDescription(' This counter counts the number of hitless switch events.')
gnHitLessStatAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnHitLessStatAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnHitLessStatAlarmStatus.setDescription(' bit 1 represent the MSB bits 1-7 are not in use bit 8 : Switch lock to right. bit 9 : Switch lock to left. bit 10: Protection config mismatch. bit 11: Diversity config mismatch. bit 12: Unused radio LOF. bit 13: Hitless Functionality Failure. bit 14: Hitless Cable Disconnect. bit 15: Hitless Mate LOF. bit 16: Hitless Primary Radio LOF. ')
gnTribStmProtectCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5))
gnTribStmProtectType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("none", 2), ("msp", 3), ("sncp", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmProtectType.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmProtectType.setDescription('.')
gnTribStmMspConnect = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dualTribConnect", 2), ("singleTribConnect", 3))).clone('dualTribConnect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspConnect.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmMspConnect.setDescription('.')
gnTribStmMspType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("uniDirectional", 2), ("biDirectional", 3))).clone('uniDirectional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspType.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmMspType.setDescription('.')
gnTribStmMspRevertiveMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("nonRevertive", 2), ("revertive", 3))).clone('nonRevertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspRevertiveMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmMspRevertiveMode.setDescription('.')
gnTribStmMspProtectRole = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("main", 2), ("standBy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspProtectRole.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmMspProtectRole.setDescription('.')
gnTribStmMspWaitToRestoreTime = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspWaitToRestoreTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmMspWaitToRestoreTime.setDescription('This is the wait-to-restore time in minutes. Possible values: 5..12. ')
gnTribStmMspUserCommand = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clear", 2), ("lockOut", 3), ("forceSwitch", 4), ("manualSwitch", 5), ("exercise", 6))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribStmMspUserCommand.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmMspUserCommand.setDescription('.')
gnTribStmProtectStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 3, 6))
gnTribStmProtectCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("working", 2), ("protecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnTribStmProtectCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmProtectCurrentState.setDescription('.')
gnTribStmProtectCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ok", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnTribStmProtectCableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribStmProtectCableStatus.setDescription('.')
gnProtectXTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7), )
if mibBuilder.loadTexts: gnProtectXTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectXTable.setDescription('')
gnProtectXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7, 1), ).setIndexNames((0, "CERAGON-MIB", "gnProtectXId"))
if mibBuilder.loadTexts: gnProtectXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectXEntry.setDescription('')
gnProtectXId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectXId.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectXId.setDescription(' ')
gnProtectXProtectUnitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("slave", 2), ("master", 3))).clone('slave')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectXProtectUnitMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectXProtectUnitMode.setDescription(' This parameter indicates the unit mode: Master of Slave.')
gnProtectXMultiRadioOhRadioSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("drawer1", 3), ("drawer2", 4))).clone('drawer1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnProtectXMultiRadioOhRadioSource.setStatus('mandatory')
if mibBuilder.loadTexts: gnProtectXMultiRadioOhRadioSource.setDescription('This parameter indicates the radio source of the OH in multi radio configuration merely.')
gnLinkGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8))
topologiesOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1), )
if mibBuilder.loadTexts: topologiesOptionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: topologiesOptionsTable.setDescription('This table indicates the Topologies options.')
topologiesOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "topologiesOptionsGroupTopology"))
if mibBuilder.loadTexts: topologiesOptionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: topologiesOptionsEntry.setDescription('Entry containing the Topologies options.')
topologiesOptionsGroupTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologiesOptionsGroupTopology.setStatus('mandatory')
if mibBuilder.loadTexts: topologiesOptionsGroupTopology.setDescription('This value indicates a bitmap : ---------------------------------------- | 15..12 | 11...........8 | 7........0 | | Set Id | Group Topology | Group Size | ---------------------------------------')
topologiesOptionsMembersCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologiesOptionsMembersCarriers.setStatus('mandatory')
if mibBuilder.loadTexts: topologiesOptionsMembersCarriers.setDescription('This value indicates a bitmap, LSB = carrier #1, #2..... ')
topologiesOptionsProtectingCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologiesOptionsProtectingCarriers.setStatus('mandatory')
if mibBuilder.loadTexts: topologiesOptionsProtectingCarriers.setDescription('This value indicates a bitmap, LSB = carrier #1, #2..... ')
topologiesOptionsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologiesOptionsName.setStatus('mandatory')
if mibBuilder.loadTexts: topologiesOptionsName.setDescription('This value indicates the name of the topology, HSB 1:1, Stand Alone, 2+1.... ')
linkGroupingTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2), )
if mibBuilder.loadTexts: linkGroupingTable.setStatus('mandatory')
if mibBuilder.loadTexts: linkGroupingTable.setDescription('This table indicates the link grouping.')
linkGroupingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1), ).setIndexNames((0, "CERAGON-MIB", "linkGroupingGroupId"))
if mibBuilder.loadTexts: linkGroupingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linkGroupingEntry.setDescription('Entry containing the link grouping.')
linkGroupingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: linkGroupingGroupId.setDescription('This value indicates the group id ')
linkGroupingGroupAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingGroupAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: linkGroupingGroupAdmin.setDescription('This value indicates the groups admin ')
linkGroupingGroupTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 256, 513, 514, 515, 516, 517, 518, 519, 520, 521))).clone(namedValues=NamedValues(("topologyhsb1-1", 1), ("topologystandalone", 256), ("topology1plus1", 513), ("topology2plus1", 514), ("topology3plus1", 515), ("topology4plus1", 516), ("topology5plus1", 517), ("topology6plus1", 518), ("topology7plus1", 519), ("topology8plus1", 520), ("topology9plus1", 521)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingGroupTopology.setStatus('mandatory')
if mibBuilder.loadTexts: linkGroupingGroupTopology.setDescription('This value indicates a bitmap : ---------------------------------------- | 15..12 | 11...........8 | 7........0 | | Set Id | Group Topology | Group Size | ---------------------------------------')
linkGroupingExtraTrafficAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingExtraTrafficAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: linkGroupingExtraTrafficAdmin.setDescription('This value indicates the ET admin ')
linkGroupingGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupingGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: linkGroupingGroupName.setDescription('This value indicates the groups name. ')
protectionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3), )
if mibBuilder.loadTexts: protectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: protectionTable.setDescription('This table indicates the link grouping protection.')
protectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1), ).setIndexNames((0, "CERAGON-MIB", "protectionGroupId"))
if mibBuilder.loadTexts: protectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: protectionEntry.setDescription('Entry containing the link grouping protection.')
protectionGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: protectionGroupId.setDescription('This value indicates the group id. ')
protectionGroupsProtectionAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectionGroupsProtectionAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: protectionGroupsProtectionAdmin.setDescription('This value indicates the groups protection admin. ')
protectionNplus1ProtectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("standard", 2), ("advanced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectionNplus1ProtectionMethod.setStatus('mandatory')
if mibBuilder.loadTexts: protectionNplus1ProtectionMethod.setDescription('This value indicates the N+1 protection method. ')
protectionProtectingCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionProtectingCarrierId.setStatus('mandatory')
if mibBuilder.loadTexts: protectionProtectingCarrierId.setDescription('This value indicates the carrier id. ')
standardProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4), )
if mibBuilder.loadTexts: standardProtectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: standardProtectionTable.setDescription('This table indicates the link grouping standard protection.')
standardProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1), ).setIndexNames((0, "CERAGON-MIB", "standardProtectionGroupId"))
if mibBuilder.loadTexts: standardProtectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: standardProtectionEntry.setDescription('Entry containing the link grouping standard protection.')
standardProtectionGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: standardProtectionGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: standardProtectionGroupId.setDescription('This value indicates the group id. ')
standardProtectionSwitchOnEarlyWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardProtectionSwitchOnEarlyWarning.setStatus('mandatory')
if mibBuilder.loadTexts: standardProtectionSwitchOnEarlyWarning.setDescription('This value indicates switch on early warning. ')
standardProtectionHighPrioProtectionTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7))).clone(namedValues=NamedValues(("bblof", 4), ("bbexb", 5), ("bbsd", 6), ("ew", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardProtectionHighPrioProtectionTh.setStatus('mandatory')
if mibBuilder.loadTexts: standardProtectionHighPrioProtectionTh.setDescription('This value indicates the high priority protection. ')
standardProtectionRevertiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 256, 257))).clone(namedValues=NamedValues(("carrier1", 1), ("carrier2", 2), ("carrier3", 3), ("carrier4", 4), ("carrier5", 5), ("carrier6", 6), ("carrier7", 7), ("carrier8", 8), ("carrier9", 9), ("carrier10", 10), ("carrier11", 11), ("carrier12", 12), ("carrier13", 13), ("carrier14", 14), ("carrier15", 15), ("extraTraffic", 256), ("none", 257)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardProtectionRevertiveLink.setStatus('mandatory')
if mibBuilder.loadTexts: standardProtectionRevertiveLink.setDescription('This value indicates the revertive link. ')
standardProtectionRevertiveSwitchTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardProtectionRevertiveSwitchTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: standardProtectionRevertiveSwitchTimeOut.setDescription('This value indicates the revertive switch time out. ')
membersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5), )
if mibBuilder.loadTexts: membersTable.setStatus('mandatory')
if mibBuilder.loadTexts: membersTable.setDescription('This table indicates the link groups members.')
membersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5, 1), ).setIndexNames((0, "CERAGON-MIB", "membersGroupId"), (0, "CERAGON-MIB", "membersCarrierId"))
if mibBuilder.loadTexts: membersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: membersEntry.setDescription('Entry containing the link groups members.')
membersGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: membersGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: membersGroupId.setDescription('This value indicates the group id. ')
membersCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: membersCarrierId.setStatus('mandatory')
if mibBuilder.loadTexts: membersCarrierId.setDescription('This value indicates the carrier id. ')
membersProtectionPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("void", 2), ("normal", 3), ("high", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: membersProtectionPriorityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: membersProtectionPriorityLevel.setDescription('This value indicates the protection priority level. ')
nplus1ProtectingTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6), )
if mibBuilder.loadTexts: nplus1ProtectingTable.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingTable.setDescription('This table indicates the link group N+1 protecting.')
nplus1ProtectingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1), ).setIndexNames((0, "CERAGON-MIB", "nplus1ProtectingGroupId"))
if mibBuilder.loadTexts: nplus1ProtectingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingEntry.setDescription('Entry containing the link group N+1 protecting.')
nplus1ProtectingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingGroupId.setDescription('This value indicates the group id. ')
nplus1ProtectingXCProtectionFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("na", 2), ("lof", 3), ("noPeer", 4), ("clear", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingXCProtectionFraming.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingXCProtectionFraming.setDescription('This value indicates the XC protecting framing. ')
nplus1ProtectingProtectedLinkTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingProtectedLinkTx.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingProtectedLinkTx.setDescription('This value indicates the last known carrier num. 0 means no carrier.')
nplus1ProtectingProtectedLinkRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingProtectedLinkRx.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingProtectedLinkRx.setDescription('This value indicates the last known carrier num. 0 means no carrier.')
nplus1ProtectingRequestedLinkTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingRequestedLinkTx.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingRequestedLinkTx.setDescription('This value indicates the last known carrier num. 0 means no carrier.')
nplus1ProtectingRequestedLinkRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1ProtectingRequestedLinkRx.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingRequestedLinkRx.setDescription('This value indicates the last known carrier num. 0 means no carrier.')
nplus1ProtectingSwitchToProtectingCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039))).clone(namedValues=NamedValues(("noaction", 256), ("lockout", 512), ("force1", 769), ("force2", 770), ("force3", 771), ("force4", 772), ("force5", 773), ("force6", 774), ("force7", 775), ("force8", 776), ("force9", 777), ("force10", 778), ("force11", 779), ("force12", 780), ("force13", 781), ("force14", 782), ("force15", 783), ("request1", 1025), ("request2", 1026), ("request3", 1027), ("request4", 1028), ("request5", 1029), ("request6", 1030), ("request7", 1031), ("request8", 1032), ("request9", 1033), ("request10", 1034), ("request11", 1035), ("request12", 1036), ("request13", 1037), ("request14", 1038), ("request15", 1039)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nplus1ProtectingSwitchToProtectingCommand.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1ProtectingSwitchToProtectingCommand.setDescription('This value indicates the switch to protecting command. The force switch command is Bi-directional.')
carrierProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7), )
if mibBuilder.loadTexts: carrierProtectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionTable.setDescription('This table indicates the carrier protection.')
carrierProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1), ).setIndexNames((0, "CERAGON-MIB", "carrierProtectionXCId"), (0, "CERAGON-MIB", "carrierProtectionCarrierId"))
if mibBuilder.loadTexts: carrierProtectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionEntry.setDescription('Entry containing the carrier protection.')
carrierProtectionXCId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionXCId.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionXCId.setDescription('This value indicates the XC id. ')
carrierProtectionCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionCarrierId.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionCarrierId.setDescription('This value indicates the carrier id. ')
carrierProtectionLinkGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standalone", 2), ("group1", 3), ("group2", 4), ("group3", 5), ("group4", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionLinkGroupNum.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionLinkGroupNum.setDescription('This value indicates the link group number. ')
carrierProtectionServedByRemoteXC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("na", 2), ("yes", 3), ("no", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionServedByRemoteXC.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionServedByRemoteXC.setDescription('This value indicates whether served by remote XC. ')
carrierProtectionRadioStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("na", 2), ("off", 3), ("bblof", 4), ("bbexb", 5), ("bbsd", 6), ("ew", 7), ("clear", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionRadioStatus.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionRadioStatus.setDescription('This value indicates the radio status. ')
carrierProtectionLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("na", 2), ("lof", 3), ("clear", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionLineFraming.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionLineFraming.setDescription('This value indicates the line framing. ')
carrierProtectionLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("none", 3), ("external", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: carrierProtectionLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionLoopback.setDescription('This value indicates the loopback. ')
carrierProtectionLoopbackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierProtectionLoopbackTimer.setStatus('mandatory')
if mibBuilder.loadTexts: carrierProtectionLoopbackTimer.setDescription('This variable indicates the remaining time (in minutes) till the loopback timer will be expired. ')
nplus1StandardPMCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8), )
if mibBuilder.loadTexts: nplus1StandardPMCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrTable.setDescription('This table indicates the standard PM current.')
nplus1StandardPMCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1), ).setIndexNames((0, "CERAGON-MIB", "nplus1StandardPMCurrCarrierId"))
if mibBuilder.loadTexts: nplus1StandardPMCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrEntry.setDescription('Entry containing the standard PM current.')
nplus1StandardPMCurrCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrCarrierId.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrCarrierId.setDescription('This value indicates the carrier id. ')
nplus1StandardPMCurrTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrTimeElapsed.setDescription('This value indicates the time that elapsed. ')
nplus1StandardPMCurrValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrValidIntervals.setDescription('This value indicates the valid intervals. ')
nplus1StandardPMCurrLastDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayIDF.setDescription('This value indicates the carrier id. ')
nplus1StandardPMCurrLastDayGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayGroupNum.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayGroupNum.setDescription("This value indicates the group's number. ")
nplus1StandardPMCurrPSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrPSAC.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrPSAC.setDescription('This value indicates the PSAC value. ')
nplus1StandardPMCurrFSRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrFSRC.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrFSRC.setDescription('This value indicates the FSRC value. ')
nplus1StandardPMCurrPSAD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrPSAD.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrPSAD.setDescription('This value indicates the PSAD value. ')
nplus1StandardPMCurrFSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrFSRD.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrFSRD.setDescription('This value indicates the FSRD value. ')
nplus1StandardPMCurrLastDayPSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayPSAC.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayPSAC.setDescription('This value indicates the last Day PSAC value. ')
nplus1StandardPMCurrLastDayFSRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayFSRC.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayFSRC.setDescription('This value indicates the last Day FSRC value. ')
nplus1StandardPMCurrLastDayPSAD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayPSAD.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayPSAD.setDescription('This value indicates the last Day PSAD value. ')
nplus1StandardPMCurrLastDayFSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 8, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayFSRD.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMCurrLastDayFSRD.setDescription('This value indicates the last Day FSRD value. ')
nplus1StandardPMIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9), )
if mibBuilder.loadTexts: nplus1StandardPMIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalTable.setDescription('This table indicates the standard PM interval. ')
nplus1StandardPMIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1), ).setIndexNames((0, "CERAGON-MIB", "nplus1StandardPMIntervalCarrierId"), (0, "CERAGON-MIB", "nplus1StandardPMIntervalIdx"))
if mibBuilder.loadTexts: nplus1StandardPMIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalEntry.setDescription('Entry containing the standard PM interval. ')
nplus1StandardPMIntervalCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalCarrierId.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalCarrierId.setDescription('This value indicates the carrier id. ')
nplus1StandardPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalIdx.setDescription('This value indicates the index. ')
nplus1StandardPMIntervalIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalIDF.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalIDF.setDescription('This value is an invalid data flag. ')
nplus1StandardPMIntervalGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalGroupNum.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalGroupNum.setDescription("This value indicates the group's number. ")
nplus1StandardPMIntervalPSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalPSAC.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalPSAC.setDescription('This value indicates the PSAC value. ')
nplus1StandardPMIntervalFSRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalFSRC.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalFSRC.setDescription('This value indicates the FSRC value. ')
nplus1StandardPMIntervalPSAD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalPSAD.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalPSAD.setDescription('This value indicates the PSAD value. ')
nplus1StandardPMIntervalFSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMIntervalFSRD.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMIntervalFSRD.setDescription('This value indicates the FSRD value. ')
nplus1StandardPMDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10), )
if mibBuilder.loadTexts: nplus1StandardPMDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayTable.setDescription('This table indicates the standard PM day table. ')
nplus1StandardPMDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1), ).setIndexNames((0, "CERAGON-MIB", "nplus1StandardPMDayCarrierId"), (0, "CERAGON-MIB", "nplus1StandardPMDayIdx"))
if mibBuilder.loadTexts: nplus1StandardPMDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayEntry.setDescription('Entry containing the standard PM day table. ')
nplus1StandardPMDayCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayCarrierId.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayCarrierId.setDescription('This value indicates the carrier id. ')
nplus1StandardPMDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayIdx.setDescription('This value indicates the index. ')
nplus1StandardPMDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayIDF.setDescription('This value is an invalid data flag. ')
nplus1StandardPMDayGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayGroupNum.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayGroupNum.setDescription("This value indicates the group's number. ")
nplus1StandardPMDayPSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayPSAC.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayPSAC.setDescription('This value indicates the PSAC value. ')
nplus1StandardPMDayFSRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayFSRC.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayFSRC.setDescription('This value indicates the FSRC value. ')
nplus1StandardPMDayPSAD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayPSAD.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayPSAD.setDescription('This value indicates the PSAD value. ')
nplus1StandardPMDayFSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 3, 3, 8, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nplus1StandardPMDayFSRD.setStatus('mandatory')
if mibBuilder.loadTexts: nplus1StandardPMDayFSRD.setDescription('This value indicates the FSRD value. ')
gnSSM = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 4))
gnSSMCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1))
gnSSMCfgSSMMode = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgSSMMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMCfgSSMMode.setDescription(' ')
gnSSMCfgPrimaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("internalClock", 2), ("external2MB", 3), ("radioClock", 4), ("fiberClock", 5), ("external2MHz", 6), ("external1AndHalfMB", 7), ("tributaryClock1", 8), ("tributaryClock2", 9), ("tributaryClock3", 10), ("tributaryClock4", 11), ("tributaryClock5", 12), ("tributaryClock6", 13), ("tributaryClock7", 14), ("tributaryClock8", 15), ("tributaryClock9", 16), ("tributaryClock10", 17), ("tributaryClock11", 18), ("tributaryClock12", 19), ("tributaryClock13", 20), ("tributaryClock14", 21), ("tributaryClock15", 22), ("tributaryClock16", 23), ("tribSTM1", 24))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgPrimaryClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMCfgPrimaryClockSource.setDescription('The primary clock source, configurable for ACCESS radios only.')
gnSSMCfgPrimaryClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgPrimaryClockQuality.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMCfgPrimaryClockQuality.setDescription(' This parameter indicates the primary clock quality. Possible values for SDH: PRC(1), SSUT(2), SSUL(3), SEC(4), STU(5). Possible values for Sonet: PRS(1), STU(2), ST2(3), ST3(4), SMC(5), ST4(6). ')
gnSSMCfgSecondaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("internalClock", 2), ("external2MB", 3), ("radioClock", 4), ("fiberClock", 5), ("external2MHz", 6), ("external1AndHalfMB", 7), ("tributaryClock1", 8), ("tributaryClock2", 9), ("tributaryClock3", 10), ("tributaryClock4", 11), ("tributaryClock5", 12), ("tributaryClock6", 13), ("tributaryClock7", 14), ("tributaryClock8", 15), ("tributaryClock9", 16), ("tributaryClock10", 17), ("tributaryClock11", 18), ("tributaryClock12", 19), ("tributaryClock13", 20), ("tributaryClock14", 21), ("tributaryClock15", 22), ("tributaryClock16", 23), ("tribSTM1", 24))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgSecondaryClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMCfgSecondaryClockSource.setDescription('The secondary clock source, configurable for ACCESS radios only.')
gnSSMCfgSecondaryClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgSecondaryClockQuality.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMCfgSecondaryClockQuality.setDescription(' This parameter indicates the secondary clock quality. Possible values for SDH: PRC(1), SSUT(2), SSUL(3), SEC(4), STU(5). Possible values for Sonet: PRS(1), STU(2), ST2(3), ST3(4), SMC(5), ST4(6). ')
gnSSMCfgClockUserCommand = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 2), ("switchToPrimaryClock", 3), ("switchToSecondaryClock", 4), ("switchToInternalClock", 5))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgClockUserCommand.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMCfgClockUserCommand.setDescription('The clock user command. Switch is possible only when the SSM mode is disable.')
gnSSMCfgClockOutputMute = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnSSMCfgClockOutputMute.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMCfgClockOutputMute.setDescription("This parameter indicates if clock output will be in mute state. (Mute on -> don't transmit) ")
gnSSMStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2))
gnSSMStatStatus = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMStatStatus.setDescription(' Alarm status of SSM. Bit 1 is MSB, bit=1 when alarm active. bit 1 = Unlock bit 2 = Out Of Range bit 3 = Primary Clock Source Failure bit 4 = Secondary Clock Source Failure ')
gnSSMStatCurrentClock = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("primary", 2), ("secondary", 3), ("internal", 4), ("holdOver", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatCurrentClock.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMStatCurrentClock.setDescription(' ')
gnSSMStatCurrentClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatCurrentClockQuality.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMStatCurrentClockQuality.setDescription(' This parameter indicates the current clock quality. SDH values: PRC(1), SSUT(2), SSUL(3), SEC(4), STU(5), DNU(6). Sonet values: PRS(1), STU(2), ST2(3), ST3(4), SMC(5), ST4(6), DUS(7).')
gnSSMStatClockUnitType = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noClockUnit", 2), ("smc", 3), ("sec", 4), ("st3", 5), ("st3e", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatClockUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMStatClockUnitType.setDescription(' ')
gnSSMStatHoldoverPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2281, 3, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2880))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnSSMStatHoldoverPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: gnSSMStatHoldoverPeriod.setDescription('This parameter indicates the minutes time period in holdover state. ')
gnAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4))
gnAccessCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 1))
gnAccessCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1), )
if mibBuilder.loadTexts: gnAccessCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgTable.setDescription('This table defines the configuration and status of the access ports.')
gnAccessCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnAccessCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgEntry.setDescription('Entry for the table containing an interface index for every interface which type is DS3 (30, according to RFC1573).')
gnAccessCfgLongCableOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ds3ShortCable", 2), ("ds3LongCable", 3), ("t1From0to133ft", 4), ("t1From133to266ft", 5), ("t1From266to399ft", 6), ("t1From399to533ft", 7), ("t1From533to655ft", 8), ("anyLength", 9), ("t1FA640From0to110ft", 10), ("t1FA640From110to220ft", 11), ("t1FA640From220to330ft", 12), ("t1FA640From330to440ft", 13), ("t1FA640From440to550ft", 14))).clone('t1From0to133ft')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgLongCableOption.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgLongCableOption.setDescription(' This parameter defines the line build-out option. Possible values: For DS3: ds3ShortCable, ds3LongCable. For T1: t1From0to133ft..t1From533to655ft. For E1/E3: anyLength. For T1 in 640 systems: t1FA640From0to110ft..t1FA640From440to550ft.')
gnAccessCfgLoopbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noloopback", 2), ("interfaceInterLoop", 3), ("interfaceExterLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgLoopbackOption.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgLoopbackOption.setDescription(' This parameter enable the user to launch a loopback.')
gnAccessCfgRunPrbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("noOperation", 2), ("lineOnRadioOnRcvLine", 3), ("lineOnRadioOnRcvRadio", 4), ("lineOnRadioOffRcvLine", 5), ("lineOnRadioOffRcvRadio", 6), ("lineOffRadioOnRcvLine", 7), ("lineOffRadioOnRcvRadio", 8), ("lineOffRadioOffRcvLine", 9), ("lineOffRadioOffRcvRadio", 10), ("lineOnRadioOnRcvOff", 11), ("lineOffRadioOnRcvOff", 12), ("lineOnRadioOffRcvOff", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgRunPrbs.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgRunPrbs.setDescription('This parameter enables launching a PRBS test.')
gnAccessCfgEXCThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4))).clone('tenExpMinus3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgEXCThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgEXCThresh.setDescription(' If the bit error rate is higher than this threshold an EXC alarm would be generated. EXC is for excessive.')
gnAccessCfgSDThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("tenExpMinus6", 3), ("tenExpMinus7", 4), ("tenExpMinus8", 5), ("tenExpMinus9", 6))).clone('tenExpMinus6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgSDThresh.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgSDThresh.setDescription(' If the bit error rate is higher than this threshold a SD alarm would be generated. SD is for Signal Degrade.')
gnAccessCfgTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("sendAIS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgTest.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgTest.setDescription('This parameter controls the action to send AIS or not.')
gnAccessCfgLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("ami", 2), ("b8zs", 3), ("hdb3", 4), ("b3zs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnAccessCfgLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessCfgLineCoding.setDescription('The line coding possible values: For T1: B7ZS(ami), B8ZS. For E1 & E3: HDB3. For DS3: B3ZS')
gnAccessStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 2))
gnAccessStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1), )
if mibBuilder.loadTexts: gnAccessStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessStatTable.setDescription('This table defines the status of the access ports.')
gnAccessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnAccessStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessStatEntry.setDescription('Entry for the table containing an interface index for every interface which type is DS3 (30, according to RFC1573).')
gnAccessStatInterfaceBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAccessStatInterfaceBer.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessStatInterfaceBer.setDescription(' Current Bit Error Rate. ')
gnAccessStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAccessStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessStatStatus.setDescription(' Alarm status of an ACCESS radio. Bit 1 is MSB, bit=1 when alarm active. bit 2 = LOS bit 6 = AIS bit 9 = SD bit 10 = EXC bit 11 = Unexpected signal -- when disabled, will rise if detect data. bit 14 = Out Of Lock ')
gnAccessStatPrbsBer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tenExpMinus3", 2), ("tenExpMinus4", 3), ("tenExpMinus5", 4), ("tenExpMinus6", 5), ("tenExpMinus7", 6), ("tenExpMinus8", 7), ("tenExpMinus9", 8), ("tenExpMinus10", 9), ("tenExpMinus11", 10), ("tenExpMinus12", 11), ("tenExpMinus13", 12), ("tenExpMinus14", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAccessStatPrbsBer.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessStatPrbsBer.setDescription('Current PRBS Errors of the operation set in the mib variable gnAccessCfgRunPrbs, use this variable to clear the error counter.')
gnAccessStatValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnAccessStatValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: gnAccessStatValidIntervals.setDescription('The number of previous valid intervals for which valid data has been stored for the specific interface.')
gnFastEthernetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 3))
gnFastEthernetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1), )
if mibBuilder.loadTexts: gnFastEthernetCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetCfgTable.setDescription('This table defines the configuration of the Fast Ethernet ports.')
gnFastEthernetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnFastEthernetCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetCfgEntry.setDescription('This is an entry in the Fast Ethernet configuration table.')
gnFastEthernetCfgAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgAutoNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetCfgAutoNegotiation.setDescription(' This parameter defines if auto negotiations protocol is active.')
gnFastEthernetCfgForceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tenBased", 2), ("hundredBased", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgForceSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetCfgForceSpeed.setDescription('This parameter force speed when auto negotiation is off.')
gnFastEthernetCfgDynamicBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notActive", 2), ("dynamic", 3), ("leftPreferred", 4), ("vlanPriority", 5), ("ipPriority", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgDynamicBand.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetCfgDynamicBand.setDescription('Dynamic bandwidth allocation: dynamic means that the two Fast Ethernet ports have the same priority. LeftPreferred indicates that left Fast Ethernet card priority is higher.')
gnFastEthernetCfgGigabitEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgGigabitEthernet.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetCfgGigabitEthernet.setDescription(' Gigabit Ethernet option. This parameter will be changed after reset. ')
gnFastEthernetCfgDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("halfDuplex", 2), ("fullDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgDuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetCfgDuplexMode.setDescription('This parameter force duplex mode when auto negotiation is off.')
gnFastEthernetCfgQueuingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("fixedPriority", 2), ("weightedFair", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnFastEthernetCfgQueuingScheme.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetCfgQueuingScheme.setDescription('This parameter set the Queuing algorithm.')
gnFastEthernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 4))
gnFastEthernetStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 4, 1), )
if mibBuilder.loadTexts: gnFastEthernetStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetStatTable.setDescription('The Fast Ethernet status table.')
gnFastEthernetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnFastEthernetStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetStatEntry.setDescription('This is an entry in the Fast Ethernet status table.')
gnFastEthernetStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetStatStatus.setDescription(' Alarm status of an FE radio. Bit 1 is MSB, bit=1 when alarm active. bit 2 = Loss of Carrier')
gnPdhMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 5))
gnPdhMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1), )
if mibBuilder.loadTexts: gnPdhMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrTable.setDescription('This table maintains the counters for the PDH table. ')
gnPdhMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnPdhMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrEntry.setDescription('This is an entry in the PDH Counters Table. This table contains an interface index for every interface which type is DS3(30, according to RFC1573).')
gnPdhMonCurrES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrES.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrES.setDescription('The current number of errored seconds starting from the present 15 minute period. .')
gnPdhMonCurrSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrSES.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrSES.setDescription('The current number of severely errored seconds, starting from the present 15 minute period.')
gnPdhMonCurrBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrBBE.setDescription(' The current number of Background Block Errors starting from the present 15 minutes period.')
gnPdhMonCurrUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrUAS.setDescription(' The current number of Unavailable Seconds starting from the present 15 minutes period.')
gnPdhMonCurrCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrCV.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrCV.setDescription(' The current number of CV starting from the present 15 minutes period.')
gnPdhMonCurrLastDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrLastDayES.setDescription(' The current number of Errored Seconds starting from the present 24 hours period.')
gnPdhMonCurrLastDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrLastDaySES.setDescription(' The current number of Severely Errored Seconds starting from the present 24 hours period.')
gnPdhMonCurrLastDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrLastDayBBE.setDescription(' The current number of Background Block Errors starting from the present 24 hours period.')
gnPdhMonCurrLastDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrLastDayUAS.setDescription(' The current number of Unavailable Seconds starting from the present 24 hours period.')
gnPdhMonCurrLastDayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayCV.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrLastDayCV.setDescription('The current number of CV, starting from the present 24-hour period.')
gnPdhMonCurrLastDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonCurrLastDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonCurrLastDayIDF.setDescription('IDF = Invalid Data Flag.')
gnPdhMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2), )
if mibBuilder.loadTexts: gnPdhMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalTable.setDescription('This table maintains the counters of the PDH per interval.')
gnPdhMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnPdhMonIntervalIdx"))
if mibBuilder.loadTexts: gnPdhMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalEntry.setDescription('This is an entry in the PDH Counters Table. This table contains an interface index for every interface which type is DS3(30, according to RFC1573). This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnPdhMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnPdhMonIntervalES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalES.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalES.setDescription('The number of errored seconds per interval.')
gnPdhMonIntervalSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalSES.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalSES.setDescription('The number of severely errored seconds per interval.')
gnPdhMonIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalBBE.setDescription(' The number of Background Block Errors per interval.')
gnPdhMonIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalUAS.setDescription(' The number of Unavailable Seconds per interval.')
gnPdhMonIntervalCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalCV.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalCV.setDescription('The number of CV per interval.')
gnPdhMonIntervalIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonIntervalIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonIntervalIDF.setDescription('IDF = Invalid Data Flag.')
gnPdhMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3), )
if mibBuilder.loadTexts: gnPdhMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDayTable.setDescription('This table maintains the counters of the PDH per 24 hours interval.')
gnPdhMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnPdhMonDayIdx"))
if mibBuilder.loadTexts: gnPdhMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDayEntry.setDescription('This is an entry in the PDH Counters Table. This table contains an interface index for every interface which type is DS3(30, according to RFC1573). This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnPdhMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnPdhMonDayES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayES.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDayES.setDescription(' The number of Errored Seconds per interval of 24 hours.')
gnPdhMonDaySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDaySES.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDaySES.setDescription(' The number of Severely Errored Seconds per interval of 24 hours.')
gnPdhMonDayBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayBBE.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDayBBE.setDescription(' The number of Background Block Errors per interval of 24 hours.')
gnPdhMonDayUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayUAS.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDayUAS.setDescription(' The number of Unavailable Seconds per interval of 24 hours.')
gnPdhMonDayCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayCV.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDayCV.setDescription(' The number of Code Violation Seconds per interval of 24 hours.')
gnPdhMonDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnPdhMonDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnPdhMonDayIDF.setDescription('IDF = Invalid Data Flag.')
gnFastEthernetMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 6))
gnFastEthernetMonPrivateTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1), )
if mibBuilder.loadTexts: gnFastEthernetMonPrivateTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonPrivateTable.setDescription('The Fast Ethernet Private Statistics Table.')
gnFastEthernetMonPrivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnFastEthernetMonPrivateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonPrivateEntry.setDescription('This is an entry in the Fast Ethernet private statistics table.')
gnFastEthernetMonPrivateAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonPrivateAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonPrivateAlignmentErrors.setDescription(' The number of received packets with an alignment error (Received frame length is not a multiple of 8 bits, and an FCS error had occurred). ')
gnFastEthernetMonPrivateFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonPrivateFcsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonPrivateFcsErrors.setDescription(' Total number of received packets with a frame check sequence (FCS) or Cycle Redundancy Check (CRC) error. ')
gnFastEthernetMonPrivateFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonPrivateFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonPrivateFrameTooLongs.setDescription(' Total number of received frames with an illegal packet length (>1518 bytes). ')
gnFastEthernetMonStdHiTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2), )
if mibBuilder.loadTexts: gnFastEthernetMonStdHiTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonStdHiTable.setDescription('This table contains the 32 high bits (MSB) of RFC1213 statistics for Fast Ethernet.')
gnFastEthernetMonStdHiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnFastEthernetMonStdHiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonStdHiEntry.setDescription('This is an entry in the Fast Ethernet Standard Statistics Table.')
gnFastEthernetMonStdHiInOctetsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInOctetsHC.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInOctetsHC.setDescription('The 32 MSB of The total number of octets received on the interface, including framing characters.')
gnFastEthernetMonStdHiInUcastPktsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInUcastPktsHC.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInUcastPktsHC.setDescription('The 32 MSB of The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
gnFastEthernetMonStdHiInNUcastPktsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInNUcastPktsHC.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonStdHiInNUcastPktsHC.setDescription('The 32 MSB of The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
gnFastEthernetMonStdHiOutOctetsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutOctetsHC.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutOctetsHC.setDescription('The 32 MSB of The total number of octets transmitted out of the interface, including framing characters.')
gnFastEthernetMonStdHiOutUcastPktsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutUcastPktsHC.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutUcastPktsHC.setDescription('The 32 MSB of The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
gnFastEthernetMonStdHiOutNUcastPktsHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutNUcastPktsHC.setStatus('mandatory')
if mibBuilder.loadTexts: gnFastEthernetMonStdHiOutNUcastPktsHC.setDescription('The 32 MSB of The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
gnTrailCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 7))
gnTrailCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1), )
if mibBuilder.loadTexts: gnTrailCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgTable.setDescription('This table defines the configuration of the trail ports.')
gnTrailCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnTrailCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgEntry.setDescription('')
gnTrailCfgTrailName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgTrailName.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgTrailName.setDescription('')
gnTrailCfgProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("protected", 2), ("unprotected", 3))).clone('protected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgProtection.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgProtection.setDescription('')
gnTrailCfgLowPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgLowPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgLowPathIndex.setDescription('This parameter indicates the K.L.M index. It includes 3 digits: K - most significant digit, L - next digit, M - last significant digit. For E1 ports (SDH): K=1..3 ; L=1..7 ; M=1..3. For T1 ports (Sonet): K=1..3 ; L=1..7 ; M=1..4. For DS3/E3: K=1..3 ; L=M=0. If there is no K.L.M index: K=L=M=0. Example: for mapping an E1 port to K.L.M = 2.5.3, write 253.')
gnTrailCfgLowPathSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgLowPathSide.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgLowPathSide.setDescription('')
gnTrailCfgProtectionOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("inhibit", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgProtectionOptions.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgProtectionOptions.setDescription('')
gnTrailCfgMismatchJ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAIS", 3), ("ignoreAlarm", 4))).clone('sendAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgMismatchJ2.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgMismatchJ2.setDescription('In case of J2 mismatch error, send alarm or send AIS.')
gnTrailCfgTransmittedJ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('J2 J2 J2 J2 J2 ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgTransmittedJ2.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgTransmittedJ2.setDescription('This is the J2 string that would be sent.')
gnTrailCfgExpectedJ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('J2 J2 J2 J2 J2 ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgExpectedJ2.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgExpectedJ2.setDescription('This is the J2 string that is expected to be received.')
gnTrailCfgReversionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("revertive", 2), ("nonRevertive", 3))).clone('nonRevertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgReversionMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgReversionMode.setDescription('')
gnTrailCfgProtectionUserCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noAction", 2), ("switchToProtection", 3), ("switchToWorking", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgProtectionUserCommand.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgProtectionUserCommand.setDescription('')
gnTrailCfgHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgHoldOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgHoldOffTime.setDescription('This is the hold-off time in milliseconds. Possible values: 0..20000, 100 mSec steps. ')
gnTrailCfgOscillationGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgOscillationGuardTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgOscillationGuardTime.setDescription('This is the oscillation guard time in seconds. Possible values: 0..60. ')
gnTrailCfgWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgWaitToRestoreTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgWaitToRestoreTime.setDescription('This is the wait-to-restore time in minutes. Possible values: 5..12. ')
gnTrailCfgSignalLabelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAIS", 3))).clone('sendAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgSignalLabelMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgSignalLabelMismatch.setDescription(" In case of a V5 mismatch error, send or don't send AIS.")
gnTrailCfgBERConsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("sendAlarm", 2), ("sendAISDoPathProtection", 3), ("doPathProtection", 4))).clone('doPathProtection')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailCfgBERConsAction.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailCfgBERConsAction.setDescription(' ')
gnTribCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 8))
gnTribCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1), )
if mibBuilder.loadTexts: gnTribCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgTable.setDescription('This table defines the configuration of the virtual trails in the Trib STM-1.')
gnTribCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnTribCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgEntry.setDescription('')
gnTribCfgLowPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgLowPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgLowPathIndex.setDescription('This parameter indicates the K.L.M index. It includes 3 digits: K - most significant digit, L - next digit, M - last significant digit. For E1 ports (SDH): K=1..3 ; L=1..7 ; M=1..3. For T1 ports (Sonet): K=1..3 ; L=1..7 ; M=1..4. For DS3/E3: K=1..3 ; L=M=0. If there is no K.L.M index: K=L=M=0. Example: for mapping an E1 port to K.L.M = 2.5.3, write 253.')
gnTribCfgLowPathSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("east", 2), ("west", 3))).clone('east')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgLowPathSide.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgLowPathSide.setDescription('')
gnTribCfgProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("protected", 2), ("unprotected", 3))).clone('protected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgProtection.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgProtection.setDescription('')
gnTribCfgProtectionOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("inhibit", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgProtectionOptions.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgProtectionOptions.setDescription('')
gnTribCfgReversionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("revertive", 2), ("nonRevertive", 3))).clone('nonRevertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgReversionMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgReversionMode.setDescription('')
gnTribCfgProtectionUserCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("noAction", 2), ("switchToProtection", 3), ("switchToWorking", 4))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgProtectionUserCommand.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgProtectionUserCommand.setDescription('')
gnTribCfgHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgHoldOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgHoldOffTime.setDescription('This is the hold-off time in milliseconds. Possible values: 0..20000, 100 mSec steps. ')
gnTribCfgOscillationGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgOscillationGuardTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgOscillationGuardTime.setDescription('This is the oscillation guard time in seconds. Possible values: 0..60. ')
gnTribCfgWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgWaitToRestoreTime.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgWaitToRestoreTime.setDescription('This is the wait-to-restore time in minutes. Possible values: 5..12. ')
gnTribCfgKLM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 8, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTribCfgKLM.setStatus('mandatory')
if mibBuilder.loadTexts: gnTribCfgKLM.setDescription(' ')
gnTrailPassThrough = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 9))
gnTrailPassThroughTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 9, 1), )
if mibBuilder.loadTexts: gnTrailPassThroughTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailPassThroughTable.setDescription('This table defines the configuration of the virtual trails in the Trib STM-1. It is applicable for ADM')
gnTrailPassThroughEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 9, 1, 1), ).setIndexNames((0, "CERAGON-MIB", "gnTrailPassThroughIndex"))
if mibBuilder.loadTexts: gnTrailPassThroughEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailPassThroughEntry.setDescription('')
gnTrailPassThroughIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnTrailPassThroughIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailPassThroughIndex.setDescription('This is the index of Trail Pass-Through Table. SDH(1-63), Sonet (1-84).')
gnTrailPassThroughName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnTrailPassThroughName.setStatus('mandatory')
if mibBuilder.loadTexts: gnTrailPassThroughName.setDescription('for NMS use')
gnGigabitEthernetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 10))
gnGigabitEthernetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1), )
if mibBuilder.loadTexts: gnGigabitEthernetCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgTable.setDescription('This table defines the configuration of the Gigabit Ethernet port.')
gnGigabitEthernetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnGigabitEthernetCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgEntry.setDescription('This is an entry in the Gigabit Ethernet configuration table.')
gnGigabitEthernetCfgPauseFrameGenerating = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgPauseFrameGenerating.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgPauseFrameGenerating.setDescription(' This parameter defines the option to generate pause frames when the Tx FIFO reaches his threshold level (enable) or to (when disabled) stop generate pause frame.')
gnGigabitEthernetCfgMuteOnExcError = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnExcError.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnExcError.setDescription(' This parameter defines whether to mute GBE Tx on excessive BER.')
gnGigabitEthernetCfgMuteOnSd = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnSd.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnSd.setDescription(' This parameter defines whether to mute GBE Tx port on signal degrade.')
gnGigabitEthernetCfgMuteOnRemoteRadioFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnRemoteRadioFault.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgMuteOnRemoteRadioFault.setDescription(' This parameter defines whether to mute GBE Tx port on exe error.')
gnGigabitEthernetCfgSpeedAndDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("autoNegotiation", 2), ("thousandBasedFullDuplex", 3), ("thousandBasedHalfDuplex", 4), ("hundredBasedFullDuplex", 5), ("hundredBasedHalfDuplex", 6), ("tenBasedFullDuplex", 7), ("tenBasedHalfDuplex", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSpeedAndDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgSpeedAndDuplex.setDescription(' This parameter defines the speed and duplex of the gigabit port, this parameter is not relevant when using an electric SFP giga line interface.')
gnGigabitEthernetCfgSchedulerPriorityOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("strict", 2), ("hrr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerPriorityOption.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerPriorityOption.setDescription('This parameter defines the algorithm, which the Ethernet packets are taken from the 4 queues. Strict - The Packets are taken according to strict order (from queue #1 till queue #4). HRR - Hierarchal Round Robin - the Ethernet packets are taken according to the configure weight.')
gnGigabitEthernetCfgSchedulerQueue1Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17))).clone(namedValues=NamedValues(("strict", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue1Weight.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue1Weight.setDescription('This parameter set the weight of the queue.')
gnGigabitEthernetCfgSchedulerQueue2Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue2Weight.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue2Weight.setDescription('This parameter set the weight of the queue.')
gnGigabitEthernetCfgSchedulerQueue3Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue3Weight.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue3Weight.setDescription('This parameter set the weight of the queue.')
gnGigabitEthernetCfgSchedulerQueue4Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue4Weight.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgSchedulerQueue4Weight.setDescription('This parameter set the weight of the queue.')
gnGigabitEthernetCfgClassifierFirstPrioUDP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierFirstPrioUDP.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierFirstPrioUDP.setDescription('This parameter set the administrative status for priority override to UDP packets.')
gnGigabitEthernetCfgClassifierPrioBitSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 2), ("externalOverhead", 3), ("vlan", 4), ("ip", 5), ("mpls", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierPrioBitSource.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierPrioBitSource.setDescription('This parameter set the administrative status for priority bits source.')
gnGigabitEthernetCfgClassifierGroupMinVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupMinVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupMinVlanId.setDescription('This parameter set the minimum VLAN Id for the current group.')
gnGigabitEthernetCfgClassifierGroupMaxVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupMaxVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupMaxVlanId.setDescription('This parameter set the maximum VLAN Id for the current group.')
gnGigabitEthernetCfgClassifierGroupVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 0), ("queue1", 1), ("queue2", 2), ("queue3", 3), ("queue4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupVlanPriority.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupVlanPriority.setDescription('This parameter set the VLAN priority for the current group.')
gnGigabitEthernetCfgClassifierGroupVlanSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupVlanSet.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgClassifierGroupVlanSet.setDescription('This parameter release the agent to configure the current group.')
gnGigabitEthernetCfgAcmMuteOnMinConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("acm4QAM", 2), ("acm8QAM", 3), ("acm16QAM", 4), ("acm32QAM", 5), ("acm64QAM", 6), ("acm128QAM", 7), ("acm256QAM", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgAcmMuteOnMinConstellation.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgAcmMuteOnMinConstellation.setDescription('This parameter defines on which constellation to mute the GBE Tx port.')
gnGigabitEthernetCfgEnableAutomaticTxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgEnableAutomaticTxMute.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgEnableAutomaticTxMute.setDescription('This parameter enable\\disable automatic Tx mute by system.')
gnGigabitEthernetCfgTrafficBISTAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgTrafficBISTAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgTrafficBISTAdmin.setDescription('This parameter activate\\deactivate GBE traffic test.')
gnGigabitEthernetCfgClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noAction", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgClearStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgClearStatistics.setDescription('This parameter clear the gigabit ethernet statistics.')
gnGigabitEthernetCfgPauseFrameForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgPauseFrameForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgPauseFrameForwarding.setDescription('This parameter define if pause frame are forward. if enable pause frame are forward to the user application. if disable pause frame are terminated.')
gnGigabitEthernetCfgPhyLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 10, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("noloopback", 2), ("interfaceInterLoop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gnGigabitEthernetCfgPhyLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetCfgPhyLoopback.setDescription('This parameter enable disable PHY internal loopback.')
gnVlanEthernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 11))
gnVlanEthernetStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1), )
if mibBuilder.loadTexts: gnVlanEthernetStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnVlanEthernetStatTable.setDescription('This table illustrate the VLAN configuration.')
gnVlanEthernetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnVlanEthernetStatGroupId"))
if mibBuilder.loadTexts: gnVlanEthernetStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnVlanEthernetStatEntry.setDescription('This is an entry in the Vlan configuration status table.')
gnVlanEthernetStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnVlanEthernetStatGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: gnVlanEthernetStatGroupId.setDescription('This parameter illustrate the VLAN group #.')
gnVlanEthernetStatMinVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnVlanEthernetStatMinVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: gnVlanEthernetStatMinVlanId.setDescription('This parameter illustrate the minimum VLAN id # of a specific group.')
gnVlanEthernetStatMaxVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnVlanEthernetStatMaxVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: gnVlanEthernetStatMaxVlanId.setDescription('This parameter illustrate the maximum VLAN id # of a specific group.')
gnVlanEthernetStatVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("queue1", 1), ("queue2", 2), ("queue3", 3), ("queue4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnVlanEthernetStatVlanPriority.setStatus('mandatory')
if mibBuilder.loadTexts: gnVlanEthernetStatVlanPriority.setDescription('This parameter illustrate the priority of a specific VLAN group.')
gnGigabitEthernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 12))
gnGigabitEthernetStatTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1), )
if mibBuilder.loadTexts: gnGigabitEthernetStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetStatTable.setDescription('The Gigabit Ethernet status table.')
gnGigabitEthernetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnGigabitEthernetStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetStatEntry.setDescription('This is an entry in the Gigabit Ethernet status table.')
gnGigabitEthernetStatBistErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetStatBistErrorSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetStatBistErrorSeconds.setDescription(' Traffic BIST results (error seconds)')
gnGigabitEthernetStatSpeedAndDuplexSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetStatSpeedAndDuplexSupport.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetStatSpeedAndDuplexSupport.setDescription('This field is used only by the element management application. bit #7 - 1 auto negotiation is supported 0 otherwise (MSB). bit #6 - 1 1000 full is supported 0 otherwise. bit #5 - 1 1000 half is supported 0 otherwise. bit #4 - 1 100 full is supported 0 otherwise. bit #3 - 1 100 half is supported 0 otherwise. bit #2 - 1 10 full is supported 0 otherwise. bit #1 - 1 10 half is supported 0 otherwise. bit #0 - not used (LSB).')
gnGigabitEthernetStatValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetStatValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetStatValidIntervals.setDescription('The number of previous valid intervals for which valid data has been stored for the specific GBE interface.')
gnGigabitEthernetStatSpeedAndDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("thousandBasedFullDuplex", 3), ("thousandBasedHalfDuplex", 4), ("hundredBasedFullDuplex", 5), ("hundredBasedHalfDuplex", 6), ("tenBasedFullDuplex", 7), ("tenBasedHalfDuplex", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetStatSpeedAndDuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetStatSpeedAndDuplexMode.setDescription('Current speed and duplex mode of the giga port.')
gnGigabitEthernetMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 13))
gnGigabitEthernetMonCurrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1), )
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrTable.setDescription('This table maintains the PM for the gigabit ethernet table. ')
gnGigabitEthernetMonCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrEntry.setDescription('This is an entry in the PDH Counters Table. This table contains an interface index for every interface which type is GBE(VAL_ifType_ethernetCsmacd-6, according to RFC1573).')
gnGigabitEthernetMonCurrPacketErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrPacketErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrPacketErrorRate.setDescription('The packet error rate ( 100*RadioReceivedCrcFrame/(RadioReceivedFrame) ) starting from the present 15 minute period, the calculation is in percent.')
gnGigabitEthernetMonCurrIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrIDF.setDescription('IDF = Invalid Data Flag in current 15 minutes interval.')
gnGigabitEthernetMonCurrDayPacketErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrDayPacketErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrDayPacketErrorRate.setDescription('The packet error rate ( 100*RadioReceivedCrcFrame/(RadioReceivedFrame) ) starting from the present 24 hour period, the calculation is in percent.')
gnGigabitEthernetMonCurrDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonCurrDayIDF.setDescription('IDF = Invalid Data Flag in current 24 hour interval.')
gnGigabitEthernetMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2), )
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalTable.setDescription('This table maintains the PM of the GBE per interval.')
gnGigabitEthernetMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnGigabitEthernetMonIntervalIdx"))
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalEntry.setDescription('This is an entry in the GBE PM Table. This table contains an interface index for every interface which type is GBE(VAL_ifType_ethernetCsmacd-6, according to RFC1573). This table is indexed by an interval index, between 1 to 96 and representing each one 15 minutes. The oldest is 96.')
gnGigabitEthernetMonIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalIdx.setDescription('This table is indexed per interval number. Each interval is of 15 minutes and the oldest is 96.')
gnGigabitEthernetMonIntervalPacketErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalPacketErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalPacketErrorRate.setDescription('The packet error rate per interval( 100*RadioReceivedCrcFrame/(RadioReceivedFrame) ) per 15 minutes interval, the calculation is in percent.')
gnGigabitEthernetMonIntervalIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonIntervalIDF.setDescription('IDF = Invalid Data Flag.')
gnGigabitEthernetMonDayTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3), )
if mibBuilder.loadTexts: gnGigabitEthernetMonDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonDayTable.setDescription('This table maintains the PM of the GBE per 24 hours interval.')
gnGigabitEthernetMonDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERAGON-MIB", "gnGigabitEthernetMonDayIdx"))
if mibBuilder.loadTexts: gnGigabitEthernetMonDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonDayEntry.setDescription('This is an entry in the GBE PM Table. This table contains an interface index for every interface which type is GBE(VAL_ifType_ethernetCsmacd-6, according to RFC1573). This table is indexed by an interval index, between 1 to 30 and representing each one 24 hours. The oldest is 30.')
gnGigabitEthernetMonDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonDayIdx.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonDayIdx.setDescription('This table is indexed per interval number. Each interval is of 24 hours and the oldest is 30.')
gnGigabitEthernetMonDayPacketErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonDayPacketErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonDayPacketErrorRate.setDescription('The packet error rate per interval( 100*RadioReceivedCrcFrame/(RadioReceivedFrame) ) per 24 hour interval, the calculation is in percent.')
gnGigabitEthernetMonDayIDF = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnGigabitEthernetMonDayIDF.setStatus('mandatory')
if mibBuilder.loadTexts: gnGigabitEthernetMonDayIDF.setDescription('IDF = Invalid Data Flag.')
gnEthStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 4, 14))
gnEthStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1), )
if mibBuilder.loadTexts: gnEthStatisticTable.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticTable.setDescription('This table illustrate the gigabit ethernet statistics.')
gnEthStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gnEthStatisticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticEntry.setDescription('This is an entry in the gigabit ethernet statistics table. This table illustrate the MSB value of the RMON II statistics.')
gnEthStatisticIfInOctetsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticIfInOctetsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticIfInOctetsMsb.setDescription('The total number of octets received on the interface, including framing characters (MSB).')
gnEthStatisticAFrameReceivedOkLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticAFrameReceivedOkLsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticAFrameReceivedOkLsb.setDescription('Sum of frames received without error (LSB).')
gnEthStatisticAFrameReceivedOkMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticAFrameReceivedOkMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticAFrameReceivedOkMsb.setDescription('Sum of frames received without error (MSB).')
gnEthStatisticCRCAlignErrorsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticCRCAlignErrorsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticCRCAlignErrorsMsb.setDescription('The total number of packets received that had a length (excluding framing bits, but including FCS octets) of between 64 and 1518 octets, inclusive, but had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error), (MSB).')
gnEthStatisticIfInUcastPktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticIfInUcastPktsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticIfInUcastPktsMsb.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol (MSB).')
gnEthStatisticBroadcastPktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticBroadcastPktsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticBroadcastPktsMsb.setDescription('The total number of good packets received that were directed to the broadcast address. Note that this does not include multicast packets (MSB).')
gnEthStatisticMulticastPktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticMulticastPktsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticMulticastPktsMsb.setDescription('The total number of good packets received that were directed to a multicast address. Note that this number does not include packets directed to the broadcast address (MSB).')
gnEthStatisticUndersizePktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticUndersizePktsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticUndersizePktsMsb.setDescription('The total number of packets received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed (MSB).')
gnEthStatisticOversizePktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticOversizePktsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticOversizePktsMsb.setDescription('The total number of packets received that were longer than 12000 octets (excluding framing bits, but including FCS octets) and were otherwise well formed. (MSB)')
gnEthStatisticPkts64OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts64OctetMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticPkts64OctetMsb.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets), (MSB).')
gnEthStatisticPkts65to127OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts65to127OctetMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticPkts65to127OctetMsb.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets), (MSB).')
gnEthStatisticPkts128to255OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts128to255OctetMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticPkts128to255OctetMsb.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets), (MSB).')
gnEthStatisticPkts256to511OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts256to511OctetMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticPkts256to511OctetMsb.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets), (MSB).')
gnEthStatisticPkts512to1023OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts512to1023OctetMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticPkts512to1023OctetMsb.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets), (MSB).')
gnEthStatisticPkts1024to1518OctetMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticPkts1024to1518OctetMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticPkts1024to1518OctetMsb.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets), (MSB).')
gnEthStatisticRadioTransmitFramesLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioTransmitFramesLsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticRadioTransmitFramesLsb.setDescription('Sum of frame transmitted to radio (LSB)')
gnEthStatisticRadioTransmitFramesMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioTransmitFramesMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticRadioTransmitFramesMsb.setDescription('Sum of frame transmitted to radio (MSB)')
gnEthStatisticDroppedPacketsLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticDroppedPacketsLsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticDroppedPacketsLsb.setDescription('number of frames dropped (LSB)')
gnEthStatisticDroppedPacketsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticDroppedPacketsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticDroppedPacketsMsb.setDescription('number of frames dropped (MSB)')
gnEthStatisticRadioReceivedFramesLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedFramesLsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedFramesLsb.setDescription('Sum of frames received by radio (LSB)')
gnEthStatisticRadioReceivedFramesMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedFramesMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedFramesMsb.setDescription('Sum of frames received by radio (MSB)')
gnEthStatisticRadioReceivedCrcFramesLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedCrcFramesLsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedCrcFramesLsb.setDescription('sum of frames received with error (LSB)')
gnEthStatisticRadioReceivedCrcFramesMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedCrcFramesMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticRadioReceivedCrcFramesMsb.setDescription('sum of frames received with error (MSB)')
gnEthStatisticRadioSyncUnlockEventsLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioSyncUnlockEventsLsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticRadioSyncUnlockEventsLsb.setDescription('sum of GFP not locked events (LSB)')
gnEthStatisticRadioSyncUnlockEventsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticRadioSyncUnlockEventsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticRadioSyncUnlockEventsMsb.setDescription('sum of GFP not locked events (MSB)')
gnEthStatisticAFrameTransmittedOkLsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticAFrameTransmittedOkLsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticAFrameTransmittedOkLsb.setDescription('Sum of valid frames transmitted to line (LSB).')
gnEthStatisticAFrameTransmittedOkMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticAFrameTransmittedOkMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticAFrameTransmittedOkMsb.setDescription('Sum of valid frames transmitted to line (MSB).')
gnEthStatisticIfOutOctetsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticIfOutOctetsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticIfOutOctetsMsb.setDescription('The total number of octets transmitted out of the interface, including framing characters (MSB).')
gnEthStatisticEtherStatsPktsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticEtherStatsPktsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticEtherStatsPktsMsb.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received (MSB).')
gnEthStatisticEtherStatsOctetsMsb = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 4, 14, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnEthStatisticEtherStatsOctetsMsb.setStatus('mandatory')
if mibBuilder.loadTexts: gnEthStatisticEtherStatsOctetsMsb.setDescription('The total number of octets of data (including those in bad packets) received on the network (excluding framing bits but including FCS octets).')
gnLastDummy = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 9))
gnLastDummyParam = MibScalar((1, 3, 6, 1, 4, 1, 2281, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gnLastDummyParam.setStatus('mandatory')
if mibBuilder.loadTexts: gnLastDummyParam.setDescription(' This parameter specifies the end of MIB.')
gnODUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,1)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceODUStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
if mibBuilder.loadTexts: gnODUTrap.setDescription('The trap is sent every time an alarm occurs in the ODU.')
gnIDUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,2)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenDrawerXDeviceIDUStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
if mibBuilder.loadTexts: gnIDUTrap.setDescription('The trap is sent every time an alarm occurs in the IDU.')
gnSDHTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,3)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceRSTStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
if mibBuilder.loadTexts: gnSDHTrap.setDescription('The trap is sent every time an alarm occurs in the Regenerator section in the SONET/SDH.')
gnACCESSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,4)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
if mibBuilder.loadTexts: gnACCESSTrap.setDescription('The trap is sent every time an alarm occurs in an Access line.')
gnODUTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,5)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceODUStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
if mibBuilder.loadTexts: gnODUTrapCleared.setDescription('The trap is sent every time an alarm occurs in the ODU.')
gnIDUTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,6)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenDrawerXDeviceIDUStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
if mibBuilder.loadTexts: gnIDUTrapCleared.setDescription('The trap is sent every time an alarm occurs in the IDU.')
gnSDHTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,7)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceRSTStatus"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
if mibBuilder.loadTexts: gnSDHTrapCleared.setDescription('The trap is sent every time an alarm occurs in the Regenerator section in the SONET/SDH.')
gnAccessTrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,8)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgIDUSerialNumber"))
if mibBuilder.loadTexts: gnAccessTrapCleared.setDescription('The trap is sent every time an alarm occurs in an Access line.')
gnLODUPowerFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,10)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusPowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODUPowerFailTrap.setDescription('This Trap is sent every time a Local ODU Power fault occurs. ')
gnLODUSynthUnLockTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,11)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusSynthesizerVCOLock"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODUSynthUnLockTrap.setDescription('This Trap is sent every time a Local ODU Hardware fault occurs .')
gnLODUTxLevelOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,12)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusTransmitLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODUTxLevelOutOfRangeTrap.setDescription('This Trap is sent every time a Local ODU TX signal is out of range. ')
gnLODURxLevelOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,13)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusReceiveLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODURxLevelOutOfRangeTrap.setDescription('This Trap is sent every time a Local ODU RX signal is out of range. ')
gnLODUExtremeTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,14)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODUExtremeTempTrap.setDescription('This Trap is sent every time a Local ODU extreme temperature event occurs. ')
gnLIDUPowerFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,15)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDevicePowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLIDUPowerFailTrap.setDescription('This Trap is sent every time a Local IDU Power fault occurs. ')
gnLCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,16)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceCable"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLCableFaultTrap.setDescription('This Trap is sent every time a Local IDU-ODU cable fault occurs.')
gnLModemFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,17)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLModemFailTrap.setDescription('This Trap is sent every time a Local Modem faults occurs.')
gnLIDUExtremeTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,18)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLIDUExtremeTempTrap.setDescription('This Trap is sent every time a Local IDU extreme temperature event occurs. ')
gnLLoopbackOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,19)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLLoopbackOnTrap.setDescription('This Trap is sent every time a Local Loopback is activated.')
gnLRemoteCommFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,20)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLRemoteCommFaultTrap.setDescription('This Trap is sent every time the remote communication is disconnected. ')
gnLTestRunningTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,21)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstCfgTestActivate"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLTestRunningTrap.setDescription('This Trap is sent every time a Local SDH/SONET test is activated. ')
gnLLOFTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,22)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLLOFTrap.setDescription('This Trap is sent every time a Local Loss of Frame alarm occurs.')
gnLLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,23)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLLOSTrap.setDescription('This Trap is sent every time a Local Loss of signal alarm occurs.')
gnLTIMTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,24)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLTIMTrap.setDescription('This Trap is sent every time a Local Trace Identifier Mismatch alarm occurs.')
gnLEXCTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,25)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLEXCTrap.setDescription('This Trap is sent every time a Local Excessive BER alarm is raised. ')
gnLSDTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,26)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLSDTrap.setDescription('This Trap is sent every time a Local Signal Degrade alarm is raised.')
gnLRcvAisTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,27)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLRcvAisTrap.setDescription('This Trap is sent every time the local terminal receives an Alarm Indication Signal (AIS).')
gnLUnExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,28)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLUnExpTrap.setDescription('This Trap is sent every time a Local terminal receives an unexpected signal.')
gnLLocTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,29)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLLocTrap.setDescription('This Trap is sent every time a Local Loss of Clock alarm occurs.')
gnLLopTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,30)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLLopTrap.setDescription('This Trap is sent every time a Local Loss of pointer alarm occurs.')
gnLRdiTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,31)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLRdiTrap.setDescription('This Trap is sent every time the local terminal receives a Remote Defect Identifier signal (RDI). ')
gnLSlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,32)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLSlmTrap.setDescription('This Trap is sent every time a Local Signal (Payload) Label Mismatch alarm occurs.')
gnLUnqTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,33)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLUnqTrap.setDescription('This Trap is sent every time a Local unequipped signal is received. ')
gnLExternalAlarm1OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,34)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm1OnTrap.setDescription('This Trap is sent every time a Local External alarm 1 is raised. ')
gnLExternalAlarm2OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,35)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm2OnTrap.setDescription('This Trap is sent every time a Local External alarm 2 is raised. ')
gnLExternalAlarm3OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,36)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm3OnTrap.setDescription('This Trap is sent every time a Local External alarm 3 is raised. ')
gnLExternalAlarm4OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,37)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm4OnTrap.setDescription('This Trap is sent every time a Local External alarm 4 is raised. ')
gnLExternalAlarm5OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,38)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm5OnTrap.setDescription('This Trap is sent every time a Local External alarm 5 is raised. ')
gnLExternalAlarm6OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,39)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm6OnTrap.setDescription('This Trap is sent every time a Local External alarm 6 is raised. ')
gnLExternalAlarm7OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,40)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm7OnTrap.setDescription('This Trap is sent every time a Local External alarm 7 is raised. ')
gnLExternalAlarm8OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,41)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm8OnTrap.setDescription('This Trap is sent every time a Local External alarm 8 is raised. ')
gnLSystemFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,42)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenDrawerXInternalCommunication"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLSystemFaultTrap.setDescription('This Trap is sent every time a Local System fault occurs.')
gnLTftpFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,43)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLTftpFaultTrap.setDescription('This Trap is sent every time a Local TFTP Download fails.')
gnLInternalDownloadFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,44)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLInternalDownloadFaultTrap.setDescription('This Trap is sent every time a Local internal Download fails.')
gnLIntralinkFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,45)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLIntralinkFaultTrap.setDescription('This Trap is sent every time a Local intra-link download fails.')
gnLConfMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,46)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLConfMismatchTrap.setDescription('This Trap is sent every time a Local configuration mismatch fault occurs.')
gnLProtectSwitchFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,47)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLProtectSwitchFaultTrap.setDescription('This Trap is sent every time a Local Protection fault is raised.')
gnLProtectCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,48)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLProtectCableFaultTrap.setDescription('This Trap is sent every time a Local protection cable fault is raised.')
gnLHeartBeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,49)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLHeartBeatTrap.setDescription('This Trap is a periodic heart beat trap.')
gnLLomTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,50)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLLomTrap.setDescription('This Trap is sent every time a Local Loss of Multi-frame alarm occurs.')
gnLHitlessProblemTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,51)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLHitlessProblemTrap.setDescription('This Trap is sent every time a Local Hitless fault occurs.')
gnLHitlessRadioLofTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,52)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLHitlessRadioLofTrap.setDescription('This Trap is sent every time a Local Hitless RadioLOF fault occurs.')
gnLHitlessCableDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,53)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLHitlessCableDisconnectTrap.setDescription('This Trap is sent every time a Local Hitless cable fault is raised. ')
gnLPamTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,54)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLPamTrap.setDescription('This Trap is sent when system in MSP Protection Architecture Mismatch.')
gnLScmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,55)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLScmTrap.setDescription('This Trap is sent when there is a MSP Selector Channel Mismatch (K1,K2).')
gnLInvTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,56)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLInvTrap.setDescription('This Trap indicates that the received K1 byte is invalid (MSP).')
gnLInbandTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,57)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLInbandTrap.setDescription('This Trap is sent when the Inband PPP link goes down.')
gnWSLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,58)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnWSLOSTrap.setDescription('This Trap is sent when the Wayside channel is in LOS state.')
gnODUtoODUCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,59)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnODUtoODUCableFaultTrap.setDescription('This Trap is sent when there is a problem with the ODU to ODU cable - for XPIC topology only.')
gnNoSignalReceivedFromODUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,60)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnNoSignalReceivedFromODUTrap.setDescription('This Trap is sent when no signal is received from the ODU.')
gnProtectionLockoutConfiguredTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,61)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnProtectionLockoutConfiguredTrap.setDescription('This Trap is sent when Protection lockout is configured.')
gnRFUPowerFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,62)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUPowerFailureTrap.setDescription('This Trap is sent in case of 12V/-5V/1.5V/6V/Vdrain power supply failure .')
gnRFURxLevelPathOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,63)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFURxLevelPathOutOfRangeTrap.setDescription('This Trap is sent in case of RSL of Main/Diversity channel is very low(typically below -80dBm) .')
gnRFUExtremeTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,64)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUExtremeTemperatureTrap.setDescription('This Trap is sent in case of RFU temperature is too high/low .')
gnRFUFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,65)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUFanFailureTrap.setDescription('This Trap is sent in case of fan failure detection by RFU .')
gnLowSignalToRFUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,66)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLowSignalToRFUTrap.setDescription('This Trap is sent in case of low IDM signal reception (350MHz) .')
gnRFUXPICClockFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,67)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUXPICClockFailureTrap.setDescription('This Trap is sent in case of XPIC clock failure .')
gnRFUDelayCalibrationFailure1Trap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,68)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUDelayCalibrationFailure1Trap.setDescription('This Trap is sent if RX AGC is not locked (-10dBm) .')
gnRFUDelayCalibrationFailure2Trap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,69)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUDelayCalibrationFailure2Trap.setDescription('This Trap is sent if calibration cannot be done since the notch is too wide/deep .')
gnLSFPFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,70)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLSFPFaultTrap.setDescription('This Trap is sent every time a Gigabit ethernet SFP fault occurs.')
gnEncryptionFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,71)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionFaultTrap.setDescription('This Trap is sent every time a Encryption fault occurs.')
gnEncryptionSyncLosTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,72)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionSyncLosTrap.setDescription('This Trap is sent every time a Encryption synchhronization loss occurs.')
gnEncryptionKepTimout = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,73)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionKepTimout.setDescription('This Trap is sent every time a Encryption KEP Timout fault occurs.')
gnEncryptionSkTimerElapsed = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,74)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionSkTimerElapsed.setDescription('This Trap is sent every time a Encryption Session Key Timer elapsed.')
gnEncryptionPowerUpSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,75)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionPowerUpSelfTestFail.setDescription('This Trap is sent every time a Encryption Power Up Self Test fault occurs.')
gnEncryptionConditionalTestFail = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,76)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionConditionalTestFail.setDescription('This Trap is sent every time a Encryption Conditional Test fault occurs.')
gnEncryptionWillTurnOffOnNextRest = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,77)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionWillTurnOffOnNextRest.setDescription('This Trap is sent every time a Encryption will be turned off on the next reset occurs.')
gnEncryptionEventReport = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,78)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionEventReport.setDescription('This Trap is sent every time a Encryption event report occurs.')
gnEncryptionTechCardWasDetected = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,79)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionTechCardWasDetected.setDescription('This Trap is sent every time Encryption Technician card is detected.')
gnAdminPasswordInDefaultState = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,80)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnAdminPasswordInDefaultState.setDescription('This Trap is sent every time a admin password is in default state.')
gnLinkGroupingProtectionFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,81)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLinkGroupingProtectionFaultTrap.setDescription('This Trap is sent in case of Link Grouping Protection Fault.')
gnLossOfProtectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,82)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLossOfProtectionTrap.setDescription('This Trap is sent in case of Loss of Protection.')
gnTempLicenseTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,83)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnTempLicenseTrap.setDescription('This Trap is sent in case of Temp License is Enable.')
gnMultiRadioProblemTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,84)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnMultiRadioProblemTrap.setDescription('This Trap is sent every time a multi radio fault occurs.')
gnLODUPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,110)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusPowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODUPowerOkTrap.setDescription('This Trap is sent every time a Local ODU Power fault cleared.')
gnLODUSynthLockTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,111)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusSynthesizerVCOLock"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODUSynthLockTrap.setDescription('This Trap is sent every time a Local ODU Hardware fault is cleared.')
gnLODUTxLevelInRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,112)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusTransmitLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODUTxLevelInRangeTrap.setDescription('This Trap is sent every time a Local ODU TX signal is in range. ')
gnLODURxLevelInRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,113)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusReceiveLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODURxLevelInRangeTrap.setDescription('This Trap is sent every time a Local ODU RX signal is in range. ')
gnLODUNormalTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,114)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLODUNormalTempTrap.setDescription('This Trap is sent every time a Local ODU returns to normal temperature.')
gnLIDUPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,115)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDevicePowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLIDUPowerOkTrap.setDescription('This Trap is sent every time a Local IDU Power fault is cleared.')
gnLCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,116)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceCable"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLCableOkTrap.setDescription('This Trap is sent every time a Local IDU-ODU cable fault is cleared.')
gnLModemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,117)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLModemOkTrap.setDescription('This Trap is sent every time a Local Modem faults is cleared. ')
gnLIDUNormalTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,118)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLIDUNormalTempTrap.setDescription('This Trap is sent every time a Local IDU returns to normal temperature.')
gnLLoopbackOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,119)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLLoopbackOffTrap.setDescription('This Trap is sent every time a Local Loopback is cleared.')
gnLRemoteCommOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,120)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLRemoteCommOkTrap.setDescription('This Trap is sent every time the remote communication is re-connected.')
gnLNoTestRunningTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,121)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstCfgTestActivate"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoTestRunningTrap.setDescription('This Trap is sent every time a Local SDH/SONET test is cleared.')
gnLNoLOFTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,122)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoLOFTrap.setDescription('This Trap is sent every time a Local Loss of Frame alarm is cleared.')
gnLNoLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,123)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoLOSTrap.setDescription('This Trap is sent every time a Local Loss of Signal alarm is cleared.')
gnLNoTIMTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,124)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoTIMTrap.setDescription('This Trap is sent every time a Local Trace Identifier Mismatch alarm is cleared.')
gnLNoEXCTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,125)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoEXCTrap.setDescription('This Trap is sent every time a Local Excessive BER alarm is cleared. ')
gnLNoSDTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,126)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoSDTrap.setDescription('This Trap is sent every time a Local Signal Degrade alarm is cleared.')
gnLNoAisTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,127)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoAisTrap.setDescription('This Trap is sent every time the local terminal stops receiving an Alarm Indication Signal (AIS).')
gnLNoUnExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,128)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoUnExpTrap.setDescription('This Trap is sent every time a Local terminal stops receiving an unexpected signal.')
gnLNoLocTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,129)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoLocTrap.setDescription('This Trap is sent every time a Local Loss of Carrier (On the FE interfaces) alarm is cleared.')
gnLNoLopTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,130)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoLopTrap.setDescription('This Trap is sent every time a Local Loss of pointer alarm is cleared.')
gnLNoRdiTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,131)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoRdiTrap.setDescription('This Trap is sent every time the local terminal stops receiving a Remote Defect Identifier signal (RDI).')
gnLNoSlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,132)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoSlmTrap.setDescription('This Trap is sent every time a Local Signal (Payload) Label Mismatch alarm is cleared. ')
gnLNoUnqTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,133)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoUnqTrap.setDescription('This Trap is sent every time a Local terminal start receiving an equipped signal. ')
gnLExternalAlarm1OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,134)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm1OffTrap.setDescription('This Trap is sent every time a Local External alarm 1 is cleared. ')
gnLExternalAlarm2OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,135)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm2OffTrap.setDescription('This Trap is sent every time a Local External alarm 2 is cleared. ')
gnLExternalAlarm3OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,136)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm3OffTrap.setDescription('This Trap is sent every time a Local External alarm 3 is cleared. ')
gnLExternalAlarm4OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,137)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm4OffTrap.setDescription('This Trap is sent every time a Local External alarm 4 is cleared. ')
gnLExternalAlarm5OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,138)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm5OffTrap.setDescription('This Trap is sent every time a Local External alarm 5 is cleared. ')
gnLExternalAlarm6OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,139)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm6OffTrap.setDescription('This Trap is sent every time a Local External alarm 6 is cleared. ')
gnLExternalAlarm7OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,140)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm7OffTrap.setDescription('This Trap is sent every time a Local External alarm 7 is cleared. ')
gnLExternalAlarm8OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,141)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLExternalAlarm8OffTrap.setDescription('This Trap is sent every time a Local External alarm 8 is cleared.')
gnLSystemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,142)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenDrawerXInternalCommunication"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLSystemOkTrap.setDescription('This Trap is sent every time a Local System fault is cleared.')
gnLTftpOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,143)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLTftpOkTrap.setDescription('This Trap is sent every time a Local TFTP Download succeeded.')
gnLInternalDownloadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,144)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLInternalDownloadOkTrap.setDescription('This Trap is sent every time a Local internal Download succeeded.')
gnLIntralinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,145)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLIntralinkOkTrap.setDescription('This Trap is sent every time a Local intra-link download succeeded.')
gnLNoConfMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,146)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLNoConfMismatchTrap.setDescription('This Trap is sent every time a Local configuration mismatch fault is cleared.')
gnLProtectSwitchOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,147)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLProtectSwitchOkTrap.setDescription('Never sent. ')
gnLProtectCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,148)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLProtectCableOkTrap.setDescription('This Trap is sent every time a Local protection cable fault is cleared.')
gnLLomOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,150)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLLomOkTrap.setDescription('This Trap is sent every time a Local Loss of Multi-frame alarm is cleared.')
gnLHitlessProblemOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,151)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLHitlessProblemOKTrap.setDescription('This Trap is sent every time a Local Hitless fault is cleared.')
gnLHitlessRadioLofOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,152)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLHitlessRadioLofOKTrap.setDescription('This Trap is sent every time a Local Hitless RadioLOF fault is cleared.')
gnLHitlessCableDisconnectOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,153)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLHitlessCableDisconnectOKTrap.setDescription('This Trap is sent every time a Local Hitless cable fault is cleared.')
gnLPamOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,154)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLPamOkTrap.setDescription('This Trap is sent when system in MSP Protection Architecture Mismatch.')
gnLScmOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,155)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLScmOkTrap.setDescription('This Trap is sent when there is a MSP Selector Channel Mismatch (K1,K2).')
gnLInvOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,156)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLInvOkTrap.setDescription('This Trap indicates that the received K1 byte is invalid (MSP).')
gnLInbandOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,157)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLInbandOkTrap.setDescription('This Trap is sent when the Inband PPP link goes up.')
gnWSNoLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,158)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnWSNoLOSTrap.setDescription('This Trap is sent when the Wayside channel is in LOS state.')
gnODUtoODUCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,159)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnODUtoODUCableOkTrap.setDescription('This Trap is sent when there is a problem with the ODU to ODU cable - for XPIC topology only.')
gnSignalReceivedFromODUTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,160)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnSignalReceivedFromODUTrap.setDescription('This Trap is sent when a signal is received from the ODU.')
gnProtectionLockoutClearededTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,161)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnProtectionLockoutClearededTrap.setDescription(' This Trap is sent when Protection lockout is cleared.')
gnRFUPowerFailureClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,162)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUPowerFailureClearedTrap.setDescription('This Trap is sent in case of 12V/-5V/1.5V/6V/Vdrain power supply failure is cleared.')
gnRFURxLevelPathOutOfRangeClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,163)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFURxLevelPathOutOfRangeClearedTrap.setDescription('This Trap is sent in case of RSL of Main/Diversity channel is not very low .')
gnRFUExtremeTemperatureClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,164)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUExtremeTemperatureClearedTrap.setDescription('This Trap is sent in case of RFU temperature is not too high/low .')
gnRFUFanFailureClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,165)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUFanFailureClearedTrap.setDescription('This Trap is sent when fan failure is cleared .')
gnLowSignalToRFUClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,166)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLowSignalToRFUClearedTrap.setDescription('This Trap is sent in case of not low IDM signal reception .')
gnRFUXPICClockFailureClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,167)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUXPICClockFailureClearedTrap.setDescription('This Trap is sent in case of XPIC clock failure is cleared .')
gnRFUDelayCalibrationFailure1ClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,168)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUDelayCalibrationFailure1ClearedTrap.setDescription('This Trap is sent if RX AGC is locked .')
gnRFUDelayCalibrationFailure2ClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,169)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRFUDelayCalibrationFailure2ClearedTrap.setDescription('This Trap is sent if calibration can be done .')
gnLSFPOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,170)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLSFPOkTrap.setDescription('This Trap is sent every time a Gigabit ethernet SFP fault clears.')
gnEncryptionFaultClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,171)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionFaultClearedTrap.setDescription('This Trap is sent every time a Encryption fault clears.')
gnEncryptionSyncLosClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,172)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionSyncLosClearedTrap.setDescription('This Trap is sent every time a Encryption synchronization loss fault clears.')
gnEncryptionKepTimoutCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,173)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionKepTimoutCleared.setDescription('This Trap is sent every time a Encryption KEP timout fault clears.')
gnEncryptionSkTimerElapsedCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,174)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionSkTimerElapsedCleared.setDescription('This Trap is sent every time a encryption Encryption Session Key Timer elapsed fault clears.')
gnEncryptionPowerUpSelfTestFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,175)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionPowerUpSelfTestFailCleared.setDescription('This Trap is sent every time a Encryption Power Up Self Test fault clears.')
gnEncryptionConditionalTestFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,176)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionConditionalTestFailCleared.setDescription('This Trap is sent every time a Encryption Conditional Test fault clears.')
gnEncryptionWillTurnOffOnNextRestCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,177)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionWillTurnOffOnNextRestCleared.setDescription('This Trap is sent every time a Encryption will be turned off on the next reset clears.')
gnEncryptionEventReportCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,178)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionEventReportCleared.setDescription('This Trap is sent every time a Encryption event report fault clears.')
gnEncryptionTechCardWasDetectedCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,179)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnEncryptionTechCardWasDetectedCleared.setDescription('This Trap is sent every time a Encryption Technician card is detected clears.')
gnAdminPasswordInDefaultStateCleared = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,180)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnAdminPasswordInDefaultStateCleared.setDescription('This Trap is sent every time a admin password is in default state clears.')
gnLinkGroupingProtectionFaultClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,181)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLinkGroupingProtectionFaultClearedTrap.setDescription('This Trap is sent in case the Link Grouping Protection Fault clears.')
gnLossOfProtectionClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,182)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnLossOfProtectionClearedTrap.setDescription('This Trap is sent in case the Loss of Protection clears.')
gnTempLicenseClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,183)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnTempLicenseClearedTrap.setDescription('This Trap is sent in case the Temp License Enable clears.')
gnMultiRadioProblemOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,184)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnMultiRadioProblemOKTrap.setDescription('This Trap is sent every time a multi radio fault is cleared.')
gnRODUPowerFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,210)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusPowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODUPowerFailTrap.setDescription('This Trap is sent every time a Remote ODU Power fault occurs.')
gnRODUSynthUnLockTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,211)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusSynthesizerVCOLock"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODUSynthUnLockTrap.setDescription('This Trap is sent every time a Remote ODU Hardware fault occurs .')
gnRODUTxLevelOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,212)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusTransmitLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODUTxLevelOutOfRangeTrap.setDescription('This Trap is sent every time a Remote ODU TX signal is out of range.')
gnRODURxLevelOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,213)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusReceiveLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODURxLevelOutOfRangeTrap.setDescription('This Trap is sent every time a Remote ODU RX signal is out of range.')
gnRODUExtremeTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,214)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODUExtremeTempTrap.setDescription('This Trap is sent every time a Remote ODU extreme temperature event occurs.')
gnRIDUPowerFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,215)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDevicePowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRIDUPowerFailTrap.setDescription('This Trap is sent every time a Remote IDU Power fault occurs.')
gnRCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,216)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceCable"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRCableFaultTrap.setDescription('This Trap is sent every time a Remote IDU-ODU cable fault occurs.')
gnRModemFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,217)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRModemFailTrap.setDescription('This Trap is sent every time a Remote Modem faults occurs.')
gnRIDUExtremeTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,218)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRIDUExtremeTempTrap.setDescription('This Trap is sent every time a Remote IDU extreme temperature event occurs.')
gnRLoopbackOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,219)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRLoopbackOnTrap.setDescription('This Trap is sent every time a Remote Loopback is activated.')
gnRRemoteCommFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,220)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRRemoteCommFaultTrap.setDescription('This Trap is sent every time the remote communication is disconnected.')
gnRTestRunningTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,221)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstCfgTestActivate"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRTestRunningTrap.setDescription('This Trap is sent every time a Remote SDH/SONET test is activated.')
gnRLOFTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,222)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRLOFTrap.setDescription('This Trap is sent every time a Remote Loss of Frame alarm occurs.')
gnRLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,223)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRLOSTrap.setDescription('This Trap is sent every time a Remote Loss of signal alarm occurs.')
gnRTIMTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,224)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRTIMTrap.setDescription('This Trap is sent every time a Remote Trace Identifier Mismatch alarm occurs.')
gnREXCTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,225)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnREXCTrap.setDescription('This Trap is sent every time a Remote Excessive BER alarm is raised.')
gnRSDTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,226)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRSDTrap.setDescription('This Trap is sent every time a Remote Signal Degrade alarm is raised.')
gnRAisTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,227)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRAisTrap.setDescription('This Trap is sent every time the Remote terminal receives an Alarm Indication Signal (AIS).')
gnRUnExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,228)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRUnExpTrap.setDescription('This Trap is sent every time a Remote terminal receives an unexpected signal.')
gnRLocTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,229)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRLocTrap.setDescription('This Trap is sent every time a Remote Loss of Carrier (On the FE interfaces) alarm occurs.')
gnRLopTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,230)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRLopTrap.setDescription('This Trap is sent every time a Remote Loss of pointer alarm occurs.')
gnRRdiTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,231)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRRdiTrap.setDescription('This Trap is sent every time the Remote terminal receives a Remote Defect Identifier signal (RDI).')
gnRSlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,232)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRSlmTrap.setDescription('This Trap is sent every time a Remote Signal (Payload) Label Mismatch alarm occurs.')
gnRUnqTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,233)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRUnqTrap.setDescription('This Trap is sent every time a Remote unequipped signal is received.')
gnRExternalAlarm1OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,234)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm1OnTrap.setDescription('This Trap is sent every time a Remote External alarm 1 is raised.')
gnRExternalAlarm2OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,235)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm2OnTrap.setDescription('This Trap is sent every time a Remote External alarm 2 is raised.')
gnRExternalAlarm3OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,236)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm3OnTrap.setDescription('This Trap is sent every time a Remote External alarm 3 is raised.')
gnRExternalAlarm4OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,237)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm4OnTrap.setDescription('This Trap is sent every time a Remote External alarm 4 is raised.')
gnRExternalAlarm5OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,238)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm5OnTrap.setDescription('This Trap is sent every time a Remote External alarm 5 is raised.')
gnRExternalAlarm6OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,239)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm6OnTrap.setDescription('This Trap is sent every time a Remote External alarm 6 is raised.')
gnRExternalAlarm7OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,240)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm7OnTrap.setDescription('This Trap is sent every time a Remote External alarm 7 is raised.')
gnRExternalAlarm8OnTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,241)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm8OnTrap.setDescription('This Trap is sent every time a Remote External alarm 8 is raised.')
gnRSystemFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,242)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatInternalCommunication"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRSystemFaultTrap.setDescription('This Trap is sent every time a Remote System fault occurs.')
gnRTftpFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,243)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRTftpFaultTrap.setDescription('This Trap is sent every time a Remote TFTP Download fails.')
gnRInternalDownloadFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,244)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRInternalDownloadFaultTrap.setDescription('This Trap is sent every time a Remote internal Download fails.')
gnRIntralinkFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,245)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRIntralinkFaultTrap.setDescription('This Trap is sent every time a Remote intra-link download fails.')
gnRConfMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,246)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRConfMismatchTrap.setDescription('This Trap is sent every time a Remote configuration mismatch fault occurs.')
gnRProtectSwitchFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,247)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRProtectSwitchFaultTrap.setDescription('This Trap is sent every time a Remote Protection fault is raised.')
gnRProtectCableFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,248)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRProtectCableFaultTrap.setDescription('This Trap is sent every time a Remote protection cable fault is raised.')
gnRHeartBeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,249)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRHeartBeatTrap.setDescription('This Trap is a periodic heart beat trap.')
gnRLomTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,250)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRLomTrap.setDescription('This Trap is sent every time a Remote Loss of Multi-frame alarm occurs.')
gnRHitlessRadioLofTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,252)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRHitlessRadioLofTrap.setDescription('This Trap is sent every time a Remote Hitless RadioLOF fault occurs.')
gnRHitlessCableDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,253)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRHitlessCableDisconnectTrap.setDescription('This Trap is sent every time a Remote Hitless cable fault is raised.')
gnRODUPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,310)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusPowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODUPowerOkTrap.setDescription('This Trap is sent every time a Remote ODU Power fault cleared.')
gnRODUSynthLockTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,311)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusSynthesizerVCOLock"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODUSynthLockTrap.setDescription('This Trap is sent every time a Remote ODU Hardware fault is cleared.')
gnRODUTxLevelInRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,312)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusTransmitLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODUTxLevelInRangeTrap.setDescription('This Trap is sent every time a Remote ODU TX signal is in range.')
gnRODURxLevelInRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,313)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusReceiveLevel"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODURxLevelInRangeTrap.setDescription('This Trap is sent every time a Remote ODU RX signal is in range.')
gnRODUNormalTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,314)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnOduStatusFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRODUNormalTempTrap.setDescription('This Trap is sent every time a Remote ODU returns to normal temperature.')
gnRIDUPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,315)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDevicePowerSupply"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRIDUPowerOkTrap.setDescription('This Trap is sent every time a Remote IDU Power fault is cleared.')
gnRCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,316)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceCable"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRCableOkTrap.setDescription('This Trap is sent every time a Remote IDU-ODU cable fault is cleared.')
gnRModemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,317)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRModemOkTrap.setDescription('This Trap is sent every time a Remote Modem faults is cleared.')
gnRIDUNormalTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,318)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceFahrenheitTemp"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRIDUNormalTempTrap.setDescription('This Trap is sent every time a Remote IDU returns to normal temperature.')
gnRLoopbackOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,319)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRLoopbackOffTrap.setDescription('This Trap is sent every time a Remote Loopback is cleared.')
gnRRemoteCommOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,320)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRRemoteCommOkTrap.setDescription('This Trap is sent every time the remote communication is re-connected.')
gnRNoTestRunningTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,321)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstCfgTestActivate"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoTestRunningTrap.setDescription('This Trap is sent every time a Remote SDH/SONET test is cleared.')
gnRNoLOFTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,322)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoLOFTrap.setDescription('This Trap is sent every time a Remote Loss of Frame alarm is cleared.')
gnRNoLOSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,323)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoLOSTrap.setDescription('This Trap is sent every time a Remote Loss of Signal alarm is cleared.')
gnRNoTIMTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,324)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoTIMTrap.setDescription('This Trap is sent every time a Remote Trace Identifier Mismatch alarm is cleared.')
gnRNoEXCTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,325)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoEXCTrap.setDescription('This Trap is sent every time a Remote Excessive BER alarm is cleared.')
gnRNoSDTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,326)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnRstStatBERCur"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoSDTrap.setDescription('This Trap is sent every time a Remote Signal Degrade alarm is cleared.')
gnRNoAisTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,327)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoAisTrap.setDescription('This Trap is sent every time the Remote terminal stops receiving an Alarm Indication Signal (AIS).')
gnRNoUnExpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,328)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoUnExpTrap.setDescription('This Trap is sent every time a Remote terminal stops receiving an unexpected signal.')
gnRNoLocTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,329)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoLocTrap.setDescription('This Trap is sent every time a Remote Loss of Carrier (on the FE interfaces) alarm is cleared.')
gnRNoLopTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,330)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoLopTrap.setDescription('This Trap is sent every time a Remote Loss of pointer alarm is cleared.')
gnRNoRdiTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,331)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoRdiTrap.setDescription('This Trap is sent every time the Remote terminal stops receiving a Remote Defect Identifier signal (RDI).')
gnRNoSlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,332)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoSlmTrap.setDescription('This Trap is sent every time a Remote Signal (Payload) Label Mismatch alarm is cleared.')
gnRNoUnqTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,333)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoUnqTrap.setDescription('This Trap is sent every time a Remote terminal start receiving an equipped signal.')
gnRExternalAlarm1OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,334)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm1OffTrap.setDescription('This Trap is sent every time a Remote External alarm 1 is cleared.')
gnRExternalAlarm2OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,335)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm2OffTrap.setDescription('This Trap is sent every time a Remote External alarm 2 is cleared.')
gnRExternalAlarm3OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,336)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm3OffTrap.setDescription('This Trap is sent every time a Remote External alarm 3 is cleared.')
gnRExternalAlarm4OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,337)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm4OffTrap.setDescription('This Trap is sent every time a Remote External alarm 4 is cleared.')
gnRExternalAlarm5OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,338)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm5OffTrap.setDescription('This Trap is sent every time a Remote External alarm 5 is cleared.')
gnRExternalAlarm6OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,339)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm6OffTrap.setDescription('This Trap is sent every time a Remote External alarm 6 is cleared.')
gnRExternalAlarm7OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,340)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm7OffTrap.setDescription('This Trap is sent every time a Remote External alarm 7 is cleared.')
gnRExternalAlarm8OffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,341)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatDeviceDryContact"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRExternalAlarm8OffTrap.setDescription('This Trap is sent every time a Remote External alarm 8 is cleared.')
gnRSystemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,342)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenStatInternalCommunication"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRSystemOkTrap.setDescription('This Trap is sent every time a Remote System fault is cleared.')
gnRTftpOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,343)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRTftpOkTrap.setDescription('This Trap is sent every time a Remote TFTP Download succeeded.')
gnRInternalDownloadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,344)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRInternalDownloadOkTrap.setDescription('This Trap is sent every time a Remoteinternal Download succeeded.')
gnRIntralinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,345)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRIntralinkOkTrap.setDescription('This Trap is sent every time a Remote intra-link download succeeded.')
gnRNoConfMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,346)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRNoConfMismatchTrap.setDescription('This Trap is sent every time a Remote configuration mismatch fault is cleared.')
gnRProtectCableOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,348)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRProtectCableOkTrap.setDescription('This Trap is sent every time a Remote protection cable fault is cleared.')
gnRLomOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,350)).setObjects(("IF-MIB", "ifIndex"), ("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRLomOkTrap.setDescription('This Trap is sent every time a Remote Loss of Multi-frame alarm is cleared.')
gnRHitlessRadioLofOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,352)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRHitlessRadioLofOKTrap.setDescription('This Trap is sent every time a Remote Hitless RadioLOF fault is cleared.')
gnRHitlessCableDisconnectOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 2281) + (0,353)).setObjects(("CERAGON-MIB", "gnGenCfgTrapSeverity"), ("CERAGON-MIB", "gnGenCfgAlarmText"), ("CERAGON-MIB", "gnGenCfgCLLI"))
if mibBuilder.loadTexts: gnRHitlessCableDisconnectOKTrap.setDescription('This Trap is sent every time a Remote Hitless cable fault is cleared.')
mibBuilder.exportSymbols("CERAGON-MIB", gnOduMonIntervalMaxTL=gnOduMonIntervalMaxTL, gnOduCfgXMinTxFreqNumber=gnOduCfgXMinTxFreqNumber, gnRFUDelayCalibrationFailure2Trap=gnRFUDelayCalibrationFailure2Trap, gnGenModemType=gnGenModemType, gnRExternalAlarm5OnTrap=gnRExternalAlarm5OnTrap, gnApplicFileType=gnApplicFileType, gnRstMonCurrTable=gnRstMonCurrTable, gnLptMonCurrEntry=gnLptMonCurrEntry, gnAgnLogFileLastDemodDefectBlocks=gnAgnLogFileLastDemodDefectBlocks, gnFirstOID=gnFirstOID, gnAgnInBandMngXChannelType=gnAgnInBandMngXChannelType, gnHitLessCfgEntry=gnHitLessCfgEntry, standardProtectionSwitchOnEarlyWarning=standardProtectionSwitchOnEarlyWarning, gnMstMon=gnMstMon, gnSoftwareVersionBootSoftVer=gnSoftwareVersionBootSoftVer, gnEncryptionKepTimoutCleared=gnEncryptionKepTimoutCleared, gnTribCfgWaitToRestoreTime=gnTribCfgWaitToRestoreTime, nplus1StandardPMIntervalFSRC=nplus1StandardPMIntervalFSRC, gnAgnLogFileSeverity=gnAgnLogFileSeverity, gnEncryptionConditionalTestFailCleared=gnEncryptionConditionalTestFailCleared, gnMstFarEndMonCurrLastDaySES=gnMstFarEndMonCurrLastDaySES, gnGenXOperation=gnGenXOperation, gnOduStatusXCelsiusTemp=gnOduStatusXCelsiusTemp, gnGenIdcStatIfTableCounter=gnGenIdcStatIfTableCounter, gnEthStatisticPkts256to511OctetMsb=gnEthStatisticPkts256to511OctetMsb, gnEthStatisticAFrameReceivedOkMsb=gnEthStatisticAFrameReceivedOkMsb, gnMuxCfgXWsAdmin=gnMuxCfgXWsAdmin, gnOduCfgMinTxFreqNumber=gnOduCfgMinTxFreqNumber, gnPdhMonIntervalIDF=gnPdhMonIntervalIDF, gnLossOfProtectionClearedTrap=gnLossOfProtectionClearedTrap, gnHitLessStatId=gnHitLessStatId, gnLNoConfMismatchTrap=gnLNoConfMismatchTrap, gnProtectCfgUserCommand=gnProtectCfgUserCommand, gnLptMonDayES=gnLptMonDayES, gnTribStmProtectCurrentState=gnTribStmProtectCurrentState, gnFastEthernetMonStdHiEntry=gnFastEthernetMonStdHiEntry, gnGenIdcStatHitlessSupport=gnGenIdcStatHitlessSupport, gnMdmAcmMonIntervalXMaxConstellation=gnMdmAcmMonIntervalXMaxConstellation, gnAgnLogFileOduSynthesizerVCOLock=gnAgnLogFileOduSynthesizerVCOLock, nplus1ProtectingEntry=nplus1ProtectingEntry, gnGigabitEthernetStatSpeedAndDuplexMode=gnGigabitEthernetStatSpeedAndDuplexMode, gnMdmAcmMonDayXIdx=gnMdmAcmMonDayXIdx, gnOduMonCurrXTable=gnOduMonCurrXTable, gnOduMonIntervalDiversityXRLThresh2Exceed=gnOduMonIntervalDiversityXRLThresh2Exceed, gnGigabitEthernetCfgSchedulerQueue4Weight=gnGigabitEthernetCfgSchedulerQueue4Weight, gnHitLessStatEntry=gnHitLessStatEntry, primeIDCSynchronizeClockInCluster=primeIDCSynchronizeClockInCluster, gnGenStatDeviceId=gnGenStatDeviceId, gnGenIdcStatFanStatus=gnGenIdcStatFanStatus, gnHitLessStatModeStatus=gnHitLessStatModeStatus, gnGenCfgMiddleMediumConnector=gnGenCfgMiddleMediumConnector, gnTrailPassThroughTable=gnTrailPassThroughTable, gnMstFarEndMonIntervalIdx=gnMstFarEndMonIntervalIdx, gnFastEthernetCfgAutoNegotiation=gnFastEthernetCfgAutoNegotiation, gnWSLOSTrap=gnWSLOSTrap, gnGenStatDeviceIDUStatus=gnGenStatDeviceIDUStatus, gnOduCfgMaxTxFreqNumber=gnOduCfgMaxTxFreqNumber, gnAgnLogFileInternalCommunication=gnAgnLogFileInternalCommunication, gnOduMonIntervalTLThresh1Exceed=gnOduMonIntervalTLThresh1Exceed, gnWscCfgRouting=gnWscCfgRouting, gnApplicFileFirmware=gnApplicFileFirmware, gnTrailCfgProtectionUserCommand=gnTrailCfgProtectionUserCommand, gnMstFarEndMonIntervalUAS=gnMstFarEndMonIntervalUAS, gnOduMonDayMinRL=gnOduMonDayMinRL, gnRExternalAlarm1OffTrap=gnRExternalAlarm1OffTrap, gnAgnInterLinkDestination=gnAgnInterLinkDestination, gnOduStatusTable=gnOduStatusTable, gnGenIdcCfgOperation=gnGenIdcCfgOperation, gnOduMonDayTLThresh1Exceed=gnOduMonDayTLThresh1Exceed, gnEowCfgTable=gnEowCfgTable, gnLIDUExtremeTempTrap=gnLIDUExtremeTempTrap, gnRstCfgLoopbackOption=gnRstCfgLoopbackOption, gnHptMon=gnHptMon, clusterNumOfSubRacks=clusterNumOfSubRacks, gnOduCfgXOduModel=gnOduCfgXOduModel, gnOduStatusXIfcSupported=gnOduStatusXIfcSupported, gnODUTrapCleared=gnODUTrapCleared, gnOduStatusXSynthesizerVCOLock=gnOduStatusXSynthesizerVCOLock, gnRLOSTrap=gnRLOSTrap, gnTribStmProtectCfg=gnTribStmProtectCfg, gnProtectCfgType=gnProtectCfgType, gnAccessCfg=gnAccessCfg, gnGenStatDeviceCelsiusTemp=gnGenStatDeviceCelsiusTemp, gnLHitlessRadioLofOKTrap=gnLHitlessRadioLofOKTrap, gnGigabitEthernetCfgAcmMuteOnMinConstellation=gnGigabitEthernetCfgAcmMuteOnMinConstellation, gnAgnLogFileEntry=gnAgnLogFileEntry, gnRstCfgRstEXCThresh=gnRstCfgRstEXCThresh, gnAgnFileTransferIDCVersionControl=gnAgnFileTransferIDCVersionControl, gnTrailPassThroughName=gnTrailPassThroughName, gnAgnOutRelayAlarmTable=gnAgnOutRelayAlarmTable, gnMstMonCurrUAS=gnMstMonCurrUAS, gnOduCfgXRxFreqNumLocalRemote=gnOduCfgXRxFreqNumLocalRemote, gnAgnLogFileTimeT=gnAgnLogFileTimeT, gnNeighborIpTable=gnNeighborIpTable, gnODU=gnODU, gnGenTxFreqRange=gnGenTxFreqRange, gnOduCfgOduModel=gnOduCfgOduModel, gnHptMonDayUAS=gnHptMonDayUAS, gnGigabitEthernetCfgPhyLoopback=gnGigabitEthernetCfgPhyLoopback, gnOduStatusXRslCombined=gnOduStatusXRslCombined, gnHptCfgTrailPT3=gnHptCfgTrailPT3, gnSoftwareDrawerVersionTable=gnSoftwareDrawerVersionTable, gnLptFarEndMonCurrLastDayUAS=gnLptFarEndMonCurrLastDayUAS, gnRProtectSwitchFaultTrap=gnRProtectSwitchFaultTrap, gnGenIdcCfgXpicMode=gnGenIdcCfgXpicMode, gnGenIdcCfgAlarmSeverity=gnGenIdcCfgAlarmSeverity, gnRstStatClearLoopTimer=gnRstStatClearLoopTimer, gnFastEthernetMonPrivateAlignmentErrors=gnFastEthernetMonPrivateAlignmentErrors, gnLUnExpTrap=gnLUnExpTrap, powerInputEntry=powerInputEntry, gnTribCfgProtection=gnTribCfgProtection, gnGenRealTimeandDate=gnGenRealTimeandDate, gnAgnFileTransferProtocol=gnAgnFileTransferProtocol, gnSoftwareDrawerVersionODUPostResetVersion=gnSoftwareDrawerVersionODUPostResetVersion, gnWscCfgTable=gnWscCfgTable, linkGroupingGroupTopology=linkGroupingGroupTopology, gnTribStmMspWaitToRestoreTime=gnTribStmMspWaitToRestoreTime, gnLptStatKLM=gnLptStatKLM, gnUcCfgEnable=gnUcCfgEnable, gnOduMonIntervalCombinedXRLThresh1Exceed=gnOduMonIntervalCombinedXRLThresh1Exceed, nplus1ProtectingSwitchToProtectingCommand=nplus1ProtectingSwitchToProtectingCommand, gnLLocTrap=gnLLocTrap, clusterPrimeIPAddress=clusterPrimeIPAddress, gnTribStmProtectStat=gnTribStmProtectStat, gnFastEthernetMonStdHiInNUcastPktsHC=gnFastEthernetMonStdHiInNUcastPktsHC, gnRExternalAlarm2OffTrap=gnRExternalAlarm2OffTrap, carrierProtectionLinkGroupNum=carrierProtectionLinkGroupNum, gnGigabitEthernetStatTable=gnGigabitEthernetStatTable, gnMuxStatXNumOfIfOnClass3=gnMuxStatXNumOfIfOnClass3, gnAgnSNMPCfgReadCommunity=gnAgnSNMPCfgReadCommunity, gnLptMonCurrLastDayES=gnLptMonCurrLastDayES, gnProtectCfgId=gnProtectCfgId, gnRODURxLevelInRangeTrap=gnRODURxLevelInRangeTrap, gnTrailCfgOscillationGuardTime=gnTrailCfgOscillationGuardTime, gnProtectUnitMode=gnProtectUnitMode, gnMstMonDayTable=gnMstMonDayTable, gnRstMonDayIdx=gnRstMonDayIdx, gnRstStatEntry=gnRstStatEntry, gnMdmAcmMonIntervalXIDF=gnMdmAcmMonIntervalXIDF, linkGroupingEntry=linkGroupingEntry, gnGenIdcCfgEowCascadeStatus=gnGenIdcCfgEowCascadeStatus, xcDrawerResetXCBoard=xcDrawerResetXCBoard, gnAgnInBandMngEthernetMask=gnAgnInBandMngEthernetMask, gnRFUExtremeTemperatureTrap=gnRFUExtremeTemperatureTrap, gnLInvTrap=gnLInvTrap, gnGenMrmcXMrmcVal=gnGenMrmcXMrmcVal, gnEthStatisticIfOutOctetsMsb=gnEthStatisticIfOutOctetsMsb, gnMstFarEndMonCurrEntry=gnMstFarEndMonCurrEntry, gnGenXSystemWorkTime=gnGenXSystemWorkTime, gnAgnInBandMngEnable=gnAgnInBandMngEnable, gnAgnInBandMngXChannelEntry=gnAgnInBandMngXChannelEntry, gnHptCfgTug3Structure3=gnHptCfgTug3Structure3, gnODUTrap=gnODUTrap, gnMstFarEndMonDaySES=gnMstFarEndMonDaySES, gnEncryptionSyncLosTrap=gnEncryptionSyncLosTrap, gnMdmStatTable=gnMdmStatTable, gnRExternalAlarm6OffTrap=gnRExternalAlarm6OffTrap, gnHptFarEndMonDayUAS=gnHptFarEndMonDayUAS, gnRstCfgTransparencyDCCR=gnRstCfgTransparencyDCCR, gnOduMonDayCombinedXRLThresh1Exceed=gnOduMonDayCombinedXRLThresh1Exceed, protectionEntry=protectionEntry, gnOduStatusXOduSWVer=gnOduStatusXOduSWVer, gnRModemOkTrap=gnRModemOkTrap, gnLLoopbackOffTrap=gnLLoopbackOffTrap, gnAgnNTPCfgAuthPublicKey=gnAgnNTPCfgAuthPublicKey, gnMstMonDaySES=gnMstMonDaySES, membersTable=membersTable, gnOduMonDayCombinedXTable=gnOduMonDayCombinedXTable, gnHptMonIntervalEntry=gnHptMonIntervalEntry, gnHptFarEndMonIntervalIdx=gnHptFarEndMonIntervalIdx, gnHptFarEndMonDayES=gnHptFarEndMonDayES, gnEncryptionPowerUpSelfTestFailCleared=gnEncryptionPowerUpSelfTestFailCleared, gnDiskCapacityData=gnDiskCapacityData, gnAgnLogFileDevicePowerSupply=gnAgnLogFileDevicePowerSupply, gnLNoTestRunningTrap=gnLNoTestRunningTrap, gnOduMonDayIdx=gnOduMonDayIdx, gnRIntralinkFaultTrap=gnRIntralinkFaultTrap, nplus1ProtectingRequestedLinkRx=nplus1ProtectingRequestedLinkRx, gnHitLessCfgEventCounterCommand=gnHitLessCfgEventCounterCommand, gnRExternalAlarm3OnTrap=gnRExternalAlarm3OnTrap, gnAgnInterLinkStatus=gnAgnInterLinkStatus, gnGenCfgInterLenLocalOnly=gnGenCfgInterLenLocalOnly, gnAgnPrvtCmd=gnAgnPrvtCmd, gnLossOfProtectionTrap=gnLossOfProtectionTrap, gnLConfMismatchTrap=gnLConfMismatchTrap, gnVlanEthernetStatVlanPriority=gnVlanEthernetStatVlanPriority, gnLExternalAlarm8OffTrap=gnLExternalAlarm8OffTrap, gnApplicFileTable=gnApplicFileTable, gnSignalReceivedFromODUTrap=gnSignalReceivedFromODUTrap, gnMdmCfgXId=gnMdmCfgXId, gnGenAddAlarmExtToTraps=gnGenAddAlarmExtToTraps, gnOduMonCurrDayRLThresh1Exceed=gnOduMonCurrDayRLThresh1Exceed, gnGenLinkId=gnGenLinkId, gnSoftwareVersionSfdVer=gnSoftwareVersionSfdVer, gnApplicFileCreateDate=gnApplicFileCreateDate, gnHptMonCurrLastDaySES=gnHptMonCurrLastDaySES, gnOduMonCurrXXpi=gnOduMonCurrXXpi, gnNeighborInBandTable=gnNeighborInBandTable, gnAgnInBandMngRingIpSubnet=gnAgnInBandMngRingIpSubnet, gnEncryptionPowerUpSelfTestFail=gnEncryptionPowerUpSelfTestFail, gnGenCfgSubProductType=gnGenCfgSubProductType, gnAgnInternalDownloadBlockCount=gnAgnInternalDownloadBlockCount, gnEthStatisticDroppedPacketsLsb=gnEthStatisticDroppedPacketsLsb, gnGenXAesEnable=gnGenXAesEnable, gnLNoSlmTrap=gnLNoSlmTrap, topologiesOptionsProtectingCarriers=topologiesOptionsProtectingCarriers, gnSSMCfgSecondaryClockQuality=gnSSMCfgSecondaryClockQuality, gnRFUFanFailureClearedTrap=gnRFUFanFailureClearedTrap, gnMuxStatXMuxFWVer=gnMuxStatXMuxFWVer, gnUcCfgChNumber=gnUcCfgChNumber, gnHitLessStatReceiverStatus=gnHitLessStatReceiverStatus, gnMstCfgTable=gnMstCfgTable, gnLLomTrap=gnLLomTrap, gnWscCfgBitRate=gnWscCfgBitRate, gnOduMonIntervalXIDF=gnOduMonIntervalXIDF, gnMdmAcmMonDayXTable=gnMdmAcmMonDayXTable, gnAccessCfgEntry=gnAccessCfgEntry, nplus1StandardPMCurrLastDayFSRD=nplus1StandardPMCurrLastDayFSRD, gnOduCfgRealTxFreqNumber=gnOduCfgRealTxFreqNumber, carrierProtectionCarrierId=carrierProtectionCarrierId, gnMstMonDayES=gnMstMonDayES, gnRCableFaultTrap=gnRCableFaultTrap, gnAgnLogFileTable=gnAgnLogFileTable, gnOduStatusXEntry=gnOduStatusXEntry, gnOduMonIntervalRLThresh2Exceed=gnOduMonIntervalRLThresh2Exceed, gnMdmDefectBlocks=gnMdmDefectBlocks, gnMdmAcmMonDayXIDF=gnMdmAcmMonDayXIDF, gnGigabitEthernetStat=gnGigabitEthernetStat, gnEncryptionEventReportCleared=gnEncryptionEventReportCleared, gnHptCfgSignalLabelMismatch=gnHptCfgSignalLabelMismatch, gnOduMonCurrMinRL=gnOduMonCurrMinRL, gnIDUTrapCleared=gnIDUTrapCleared, gnOduMonCurrDayTLThresh1Exceed=gnOduMonCurrDayTLThresh1Exceed, gnGenIdcStatMMCCardStatus=gnGenIdcStatMMCCardStatus, gnGenIdcCfgEntry=gnGenIdcCfgEntry, gnSSMStatCurrentClockQuality=gnSSMStatCurrentClockQuality, gnHptMonCurrTable=gnHptMonCurrTable, gnAgnInExternAlarmEnable=gnAgnInExternAlarmEnable, gnLptMonDaySES=gnLptMonDaySES, xcDrawerLedsStatus=xcDrawerLedsStatus, gnOduStatusXRslDiversity=gnOduStatusXRslDiversity, gnAgnInterLinkTable=gnAgnInterLinkTable, gnGenMostSevereAlarm=gnGenMostSevereAlarm, gnOduMonDayXMinXpi=gnOduMonDayXMinXpi, gnAgnInBandMngNetworkElementType=gnAgnInBandMngNetworkElementType, gnOduMonIntervalXXpiThreshExceed=gnOduMonIntervalXXpiThreshExceed, gnOduMonitorX=gnOduMonitorX, xcDrawerXCSelfTestResult=xcDrawerXCSelfTestResult, gnGenCarrierXEntry=gnGenCarrierXEntry, gnHptMonIntervalBBE=gnHptMonIntervalBBE, gnAgnNTPCfgServerIP=gnAgnNTPCfgServerIP, gnOduCfgRefRsl=gnOduCfgRefRsl, gnAgnFileTransferTransCmd=gnAgnFileTransferTransCmd, gnLLoopbackOnTrap=gnLLoopbackOnTrap)
mibBuilder.exportSymbols("CERAGON-MIB", gnLTIMTrap=gnLTIMTrap, gnOduMonDayCombinedXEntry=gnOduMonDayCombinedXEntry, gnSoftwareVersionId=gnSoftwareVersionId, gnMstFarEndMonCurrLastDayUAS=gnMstFarEndMonCurrLastDayUAS, gnMstFarEndMonCurrLastDayBBE=gnMstFarEndMonCurrLastDayBBE, gnGenStatDeviceDryContact=gnGenStatDeviceDryContact, gnEthStatisticEtherStatsPktsMsb=gnEthStatisticEtherStatsPktsMsb, gnRstMonCurrLastDayUAS=gnRstMonCurrLastDayUAS, gnRHitlessRadioLofTrap=gnRHitlessRadioLofTrap, gnSoftwareVersionMUXPostResetVersion=gnSoftwareVersionMUXPostResetVersion, gnTribStmMspUserCommand=gnTribStmMspUserCommand, gnLIDUPowerFailTrap=gnLIDUPowerFailTrap, gnHptMonDayTable=gnHptMonDayTable, gnOduStatusXValidIntervals=gnOduStatusXValidIntervals, gnMdmStatXBoardType=gnMdmStatXBoardType, gnOduMonIntervalXMinXpi=gnOduMonIntervalXMinXpi, gnOduCfgXTransmitLevel=gnOduCfgXTransmitLevel, gnMdmAcmMonDayXEntry=gnMdmAcmMonDayXEntry, gnMstStatTable=gnMstStatTable, gnLODUSynthUnLockTrap=gnLODUSynthUnLockTrap, gnOduMonIntervalDiversityXMaxRL=gnOduMonIntervalDiversityXMaxRL, gnMdmAcmMonitorX=gnMdmAcmMonitorX, gnLptMonCurrUAS=gnLptMonCurrUAS, gnWsc=gnWsc, nplus1StandardPMCurrValidIntervals=nplus1StandardPMCurrValidIntervals, gnOduMonDayXEntry=gnOduMonDayXEntry, gnRHitlessRadioLofOKTrap=gnRHitlessRadioLofOKTrap, gnAgnOutRelayAlarmType=gnAgnOutRelayAlarmType, gnOduMonCurrMaxTL=gnOduMonCurrMaxTL, gnGenStatDeviceEntry=gnGenStatDeviceEntry, gnGigabitEthernetCfgClassifierGroupVlanSet=gnGigabitEthernetCfgClassifierGroupVlanSet, gnHptCfgTrailPT1=gnHptCfgTrailPT1, gnSoftwareVersionAcmLutVer=gnSoftwareVersionAcmLutVer, gnOduStatusXRfuFwVer=gnOduStatusXRfuFwVer, gnFastEthernetStatEntry=gnFastEthernetStatEntry, gnMstStatStatus=gnMstStatStatus, gnAgnCurrentAlarmEntry=gnAgnCurrentAlarmEntry, addressesTable=addressesTable, gnNeighborInBandStatus=gnNeighborInBandStatus, gnSpiCfgEntry=gnSpiCfgEntry, gnRFUPowerFailureTrap=gnRFUPowerFailureTrap, gnAccessCfgLineCoding=gnAccessCfgLineCoding, gnAccessStatTable=gnAccessStatTable, gnEthStatisticEntry=gnEthStatisticEntry, gnMdmStatXTable=gnMdmStatXTable, gnMdmAcmMonCurrXTable=gnMdmAcmMonCurrXTable, gnLptFarEndMonIntervalEntry=gnLptFarEndMonIntervalEntry, gnOduMonDayXMaxRL=gnOduMonDayXMaxRL, gnGenXEowStatus=gnGenXEowStatus, nplus1ProtectingXCProtectionFraming=nplus1ProtectingXCProtectionFraming, gnAgnLogFileDeviceFanStatus=gnAgnLogFileDeviceFanStatus, gnOduMonDayCombinedXMinRL=gnOduMonDayCombinedXMinRL, gnOduMonCurrXDayTLThresh1Exceed=gnOduMonCurrXDayTLThresh1Exceed, gnRLoopbackOnTrap=gnRLoopbackOnTrap, gnMux=gnMux, gnHptMonDayEntry=gnHptMonDayEntry, gnAgnLogFileHitlessSwitchLogAdmin=gnAgnLogFileHitlessSwitchLogAdmin, gnHptMonCurrLastDayES=gnHptMonCurrLastDayES, clusterIDCRole=clusterIDCRole, gnLSFPFaultTrap=gnLSFPFaultTrap, gnGenIdcCfgSlipIp=gnGenIdcCfgSlipIp, gnNeighborIpRemoteIfIndex=gnNeighborIpRemoteIfIndex, gnGigabitEthernetStatValidIntervals=gnGigabitEthernetStatValidIntervals, gnAgnInternalDownloadAction=gnAgnInternalDownloadAction, gnMdmCfgXRadioSide=gnMdmCfgXRadioSide, gnHptMonCurrUAS=gnHptMonCurrUAS, gnRNoLocTrap=gnRNoLocTrap, gnGenCfgWaySideConnector=gnGenCfgWaySideConnector, gnMdmStatXIfLoopbackTimeOut=gnMdmStatXIfLoopbackTimeOut, gnHptFarEndMonCurrUAS=gnHptFarEndMonCurrUAS, gnMstMonCurrBBE=gnMstMonCurrBBE, gnMdmStatXTxConstellation=gnMdmStatXTxConstellation, gnGenXClearCounters=gnGenXClearCounters, gnMdmAcmMonCurrXMaxConstellation=gnMdmAcmMonCurrXMaxConstellation, gnEncryptionFaultTrap=gnEncryptionFaultTrap, gnLSlmTrap=gnLSlmTrap, gnLODUPowerFailTrap=gnLODUPowerFailTrap, gnGenCfgPrimaryClockSource=gnGenCfgPrimaryClockSource, gnGenIdcStatRightDrawerStatus=gnGenIdcStatRightDrawerStatus, gnGenXModemType=gnGenXModemType, clusterFloorNum=clusterFloorNum, gnGenCfgSecondaryClockSource=gnGenCfgSecondaryClockSource, gnRExternalAlarm6OnTrap=gnRExternalAlarm6OnTrap, gnAgnCurrentAlarmOrigin=gnAgnCurrentAlarmOrigin, gnOduMonIntervalMinTL=gnOduMonIntervalMinTL, gnRTIMTrap=gnRTIMTrap, gnOduMonCurrXId=gnOduMonCurrXId, gnODUtoODUCableFaultTrap=gnODUtoODUCableFaultTrap, gnPdhMonIntervalBBE=gnPdhMonIntervalBBE, gnAgnOutRelayAlarmDevId=gnAgnOutRelayAlarmDevId, gnGenCfgSlipIp=gnGenCfgSlipIp, gnMstStatTransmitS1=gnMstStatTransmitS1, gnMdmCfgId=gnMdmCfgId, gnSSMCfgPrimaryClockQuality=gnSSMCfgPrimaryClockQuality, gnPdhMonCurrTable=gnPdhMonCurrTable, topologiesOptionsMembersCarriers=topologiesOptionsMembersCarriers, gnAgnSNMPCfgWriteCommunity=gnAgnSNMPCfgWriteCommunity, gnOduMonDayCombinedXRLThresh2Exceed=gnOduMonDayCombinedXRLThresh2Exceed, gnOduMonIntervalDiversityXIdx=gnOduMonIntervalDiversityXIdx, gnOduCfgXId=gnOduCfgXId, gnGenXActNumOfInterfaceOnClass2=gnGenXActNumOfInterfaceOnClass2, nplus1StandardPMIntervalPSAD=nplus1StandardPMIntervalPSAD, gnEthStatisticCRCAlignErrorsMsb=gnEthStatisticCRCAlignErrorsMsb, gnApplicFileVersion=gnApplicFileVersion, gnGenXCarrierSerialNumber=gnGenXCarrierSerialNumber, gnGenXActNumOfInterfaceOnClass1=gnGenXActNumOfInterfaceOnClass1, gnMdmStatXEntry=gnMdmStatXEntry, gnRstCfgTransmittedJ0=gnRstCfgTransmittedJ0, gnOduMonCurrDiversityXMinRL=gnOduMonCurrDiversityXMinRL, gnTrailCfgEntry=gnTrailCfgEntry, gnLptMonCurrLastDaySES=gnLptMonCurrLastDaySES, gnMstMonCurrLastDaySES=gnMstMonCurrLastDaySES, gnGenXBytesCorrected=gnGenXBytesCorrected, gnRstMonCurrLastDayES=gnRstMonCurrLastDayES, gnGigabitEthernetCfgClassifierFirstPrioUDP=gnGigabitEthernetCfgClassifierFirstPrioUDP, gnAgnLogFileOduPowerSupply=gnAgnLogFileOduPowerSupply, backplaneSlotMappingUnitIndex=backplaneSlotMappingUnitIndex, gnGenXMultiRateMultiConsSupport=gnGenXMultiRateMultiConsSupport, gnGenMrmcXBitRate=gnGenMrmcXBitRate, gnOduMonCurrCombinedXId=gnOduMonCurrCombinedXId, gnAgnInBandMngDefRoute=gnAgnInBandMngDefRoute, gnHptMonDayIdx=gnHptMonDayIdx, gnOduMonDayXIdx=gnOduMonDayXIdx, gnGigabitEthernetMonIntervalIdx=gnGigabitEthernetMonIntervalIdx, gnGenXCarrierConnector=gnGenXCarrierConnector, gnAgnFileTransferPassword=gnAgnFileTransferPassword, gnOduCfgOduLoopSupport=gnOduCfgOduLoopSupport, gnMdmBytesCorrected=gnMdmBytesCorrected, gnLSFPOkTrap=gnLSFPOkTrap, gnLptFarEndMonIntervalBBE=gnLptFarEndMonIntervalBBE, gnGigabitEthernetCfgClassifierPrioBitSource=gnGigabitEthernetCfgClassifierPrioBitSource, gnEncryptionTechCardWasDetected=gnEncryptionTechCardWasDetected, gnOduMonDayDiversityXMaxRL=gnOduMonDayDiversityXMaxRL, carrierProtectionEntry=carrierProtectionEntry, gnRODUExtremeTempTrap=gnRODUExtremeTempTrap, gnNeighborIpAddress=gnNeighborIpAddress, gnRNoLOFTrap=gnRNoLOFTrap, gnHitLessStatTable=gnHitLessStatTable, gnHptFarEndMonDaySES=gnHptFarEndMonDaySES, gnRstMon=gnRstMon, gnGenIdcCfgClearLoopTimeout=gnGenIdcCfgClearLoopTimeout, gnHptMonIntervalIdx=gnHptMonIntervalIdx, gnOduMonCurrXDayMinTL=gnOduMonCurrXDayMinTL, gnAgnInterLinkSoftware=gnAgnInterLinkSoftware, gnGenMibVersion=gnGenMibVersion, gnLNoLOSTrap=gnLNoLOSTrap, addressesEntry=addressesEntry, gnProtectXProtectUnitMode=gnProtectXProtectUnitMode, gnAgnLogFileId=gnAgnLogFileId, gnMuxStatXMuxFWPostVer=gnMuxStatXMuxFWPostVer, gnOduStatusPowerSupply=gnOduStatusPowerSupply, gnOduMonCurrTable=gnOduMonCurrTable, gnGenMrmcXScriptType=gnGenMrmcXScriptType, gnSoftwareIDCVersionControl=gnSoftwareIDCVersionControl, gnAdminPasswordInDefaultState=gnAdminPasswordInDefaultState, gnHptFarEndMonCurrBBE=gnHptFarEndMonCurrBBE, auxiliaryDrawerBoardHWVersion=auxiliaryDrawerBoardHWVersion, gnMdmAcmStatXId=gnMdmAcmStatXId, gnGigabitEthernetMonCurrTable=gnGigabitEthernetMonCurrTable, gnUcCfgEntry=gnUcCfgEntry, xcDrawerXCConnector=xcDrawerXCConnector, gnRProtectCableOkTrap=gnRProtectCableOkTrap, linkGroupingExtraTrafficAdmin=linkGroupingExtraTrafficAdmin, gnRExternalAlarm8OffTrap=gnRExternalAlarm8OffTrap, gnOduCfgXRealTxFreqNumber=gnOduCfgXRealTxFreqNumber, gnRstMonIntervalEntry=gnRstMonIntervalEntry, gnGigabitEthernetCfgSchedulerPriorityOption=gnGigabitEthernetCfgSchedulerPriorityOption, gnAgnInBandMngEthernetIp=gnAgnInBandMngEthernetIp, gnHptFarEndMonIntervalUAS=gnHptFarEndMonIntervalUAS, xcDrawerSyncIdcDataBase=xcDrawerSyncIdcDataBase, carrierProtectionLineFraming=carrierProtectionLineFraming, gnAgnLogFileAction=gnAgnLogFileAction, gnHptFarEndMonDayIdx=gnHptFarEndMonDayIdx, gnGenCarrierXResetPerfMon=gnGenCarrierXResetPerfMon, gnLptFarEndMonDayBBE=gnLptFarEndMonDayBBE, gnProtectCfgSwitchRequest=gnProtectCfgSwitchRequest, gnGenCfgAlarmSeverity=gnGenCfgAlarmSeverity, gnHptFarEndMonDayEntry=gnHptFarEndMonDayEntry, gnSSM=gnSSM, gnTrailCfg=gnTrailCfg, gnMdmStatXModemFWVer=gnMdmStatXModemFWVer, gnMdmStatXAcmSignalValid=gnMdmStatXAcmSignalValid, gnOduCfgXTLPerfMonThresh1=gnOduCfgXTLPerfMonThresh1, gnRODUTxLevelOutOfRangeTrap=gnRODUTxLevelOutOfRangeTrap, gnAgnLogFileUniqueId=gnAgnLogFileUniqueId, gnLastDummyParam=gnLastDummyParam, gnOduCfgRLPerfMonThresh1=gnOduCfgRLPerfMonThresh1, gnHptCfgTransparencyJ1=gnHptCfgTransparencyJ1, gnRstMonCurrLastDayOFS=gnRstMonCurrLastDayOFS, gnOduCfgXODUSerialNumber=gnOduCfgXODUSerialNumber, gnRUnqTrap=gnRUnqTrap, nplus1StandardPMCurrLastDayGroupNum=nplus1StandardPMCurrLastDayGroupNum, gnLptFarEndMonDayTable=gnLptFarEndMonDayTable, gnLCableFaultTrap=gnLCableFaultTrap, gnEow=gnEow, gnEthStatisticAFrameTransmittedOkMsb=gnEthStatisticAFrameTransmittedOkMsb, gnLNoLocTrap=gnLNoLocTrap, gnGigabitEthernetCfgClearStatistics=gnGigabitEthernetCfgClearStatistics, carrierProtectionRadioStatus=carrierProtectionRadioStatus, carrierProtectionServedByRemoteXC=carrierProtectionServedByRemoteXC, gnMuxCfgXWsLoopback=gnMuxCfgXWsLoopback, gnProtectCfgOption=gnProtectCfgOption, linkGroupingGroupAdmin=linkGroupingGroupAdmin, gnGenIdcStatEowExistence=gnGenIdcStatEowExistence, gnGenMrmcXQam=gnGenMrmcXQam, gnOduMonIntervalDiversityXMinRL=gnOduMonIntervalDiversityXMinRL, gnLSystemOkTrap=gnLSystemOkTrap, gnLptFarEndMonCurrLastDaySES=gnLptFarEndMonCurrLastDaySES, gnMdmAcmMonCurrXId=gnMdmAcmMonCurrXId, gnAgnInBandMng=gnAgnInBandMng, backplaneSlotMappingUnitType=backplaneSlotMappingUnitType, gnRstMonCurrEntry=gnRstMonCurrEntry, gnAgnInExternAlarmIndex=gnAgnInExternAlarmIndex, gnLExternalAlarm7OffTrap=gnLExternalAlarm7OffTrap, gnGenCfgODUSerialNumber=gnGenCfgODUSerialNumber, gnMdmCfgXPrbsTest=gnMdmCfgXPrbsTest, gnOduMonCurrXDayMaxTL=gnOduMonCurrXDayMaxTL, gnMdmAcmMonIntervalXTable=gnMdmAcmMonIntervalXTable, gnSoftwareDrawerVersionModemFile=gnSoftwareDrawerVersionModemFile, gnLNoUnqTrap=gnLNoUnqTrap, nplus1StandardPMDayIdx=nplus1StandardPMDayIdx, gnOduMonIntervalDiversityXRLThresh1Exceed=gnOduMonIntervalDiversityXRLThresh1Exceed, gnAgnInBandMngFiberChannel=gnAgnInBandMngFiberChannel, gnAgnInternalDownloadFileSizeInBytes=gnAgnInternalDownloadFileSizeInBytes, gnOduMonCurrXRLThresh2Exceed=gnOduMonCurrXRLThresh2Exceed, gnGenCfgActivateLoopback=gnGenCfgActivateLoopback, backplaneSlotMappingEntry=backplaneSlotMappingEntry, gnTribStmProtectCableStatus=gnTribStmProtectCableStatus, gnTribStmMspProtectRole=gnTribStmMspProtectRole, gnGenXResetPerfMon=gnGenXResetPerfMon, gnGenXDefectBlocks=gnGenXDefectBlocks, gnSubrack=gnSubrack, gnOduMonCurrDiversityXDayMaxRL=gnOduMonCurrDiversityXDayMaxRL, gnOduMonCurrXDayMinRL=gnOduMonCurrXDayMinRL, gnGigabitEthernetCfgSchedulerQueue3Weight=gnGigabitEthernetCfgSchedulerQueue3Weight, gnTrailCfgWaitToRestoreTime=gnTrailCfgWaitToRestoreTime, gnLRdiTrap=gnLRdiTrap, gnMstStatEntry=gnMstStatEntry, gnOduMonCurrCombinedXMinRL=gnOduMonCurrCombinedXMinRL, gnOduMonIntervalXTLThresh1Exceed=gnOduMonIntervalXTLThresh1Exceed, gnLptFarEndMonDayIdx=gnLptFarEndMonDayIdx, gnGenIdcStatEowSupport=gnGenIdcStatEowSupport, gnEowStatEowLeftSupport=gnEowStatEowLeftSupport, gnFastEthernetCfgForceSpeed=gnFastEthernetCfgForceSpeed, gnRstCfgTable=gnRstCfgTable, gnTrailCfgTable=gnTrailCfgTable, gnGenRadioSide=gnGenRadioSide, gnGenIdcCfgResetPerfMon=gnGenIdcCfgResetPerfMon, gnAgnInternalDownloadOperation=gnAgnInternalDownloadOperation, gnAgnNTPCfgProtocolType=gnAgnNTPCfgProtocolType, gnGigabitEthernetMonCurrPacketErrorRate=gnGigabitEthernetMonCurrPacketErrorRate, gnSoftwareVersionTable=gnSoftwareVersionTable, gnHptMonCurrEntry=gnHptMonCurrEntry, gnOduMonDayCombinedXId=gnOduMonDayCombinedXId)
mibBuilder.exportSymbols("CERAGON-MIB", gnOduMonIntervalCombinedXTable=gnOduMonIntervalCombinedXTable, gnAgnInBandMngLineMode=gnAgnInBandMngLineMode, gnOduCfgXDelayCalibrationValue=gnOduCfgXDelayCalibrationValue, gnEncryptionConditionalTestFail=gnEncryptionConditionalTestFail, gnLLOSTrap=gnLLOSTrap, xcDrawerXCId=xcDrawerXCId, gnRstMonCurrUAS=gnRstMonCurrUAS, gnOduMonDayXXpiThreshExceed=gnOduMonDayXXpiThreshExceed, gnMdmAcmMonCurrXMinConstellation=gnMdmAcmMonCurrXMinConstellation, gnWscStatId=gnWscStatId, gnIDUTrap=gnIDUTrap, gnLSystemFaultTrap=gnLSystemFaultTrap, gnMdmStatXScriptType=gnMdmStatXScriptType, gnOduMonCurrXDayXpiThreshExceed=gnOduMonCurrXDayXpiThreshExceed, gnTrailCfgExpectedJ2=gnTrailCfgExpectedJ2, gnAgnMgrTrapPort=gnAgnMgrTrapPort, gnAccessCfgLongCableOption=gnAccessCfgLongCableOption, gnLIntralinkOkTrap=gnLIntralinkOkTrap, gnRNoSDTrap=gnRNoSDTrap, gnPdhMonIntervalES=gnPdhMonIntervalES, gnAgnInBandMngTTL=gnAgnInBandMngTTL, gnRstCfgMngByteLocation=gnRstCfgMngByteLocation, gnOduCfgFreqDevider=gnOduCfgFreqDevider, gnRSlmTrap=gnRSlmTrap, gnRFUDelayCalibrationFailure2ClearedTrap=gnRFUDelayCalibrationFailure2ClearedTrap, gnLptCfgTable=gnLptCfgTable, gnAgnInBandMngPppMask=gnAgnInBandMngPppMask, gnRstCfgTransparencyB1Chan=gnRstCfgTransparencyB1Chan, gnAgnLogFileLineBERCur=gnAgnLogFileLineBERCur, gnRExternalAlarm4OffTrap=gnRExternalAlarm4OffTrap, gnLEXCTrap=gnLEXCTrap, gnOduCfgAntennaType=gnOduCfgAntennaType, gnAgnMgrAlarmGroupMask=gnAgnMgrAlarmGroupMask, gnPdhMonDayTable=gnPdhMonDayTable, gnAccessStatEntry=gnAccessStatEntry, gnHptMonDayES=gnHptMonDayES, gnRLomOkTrap=gnRLomOkTrap, gnAccessStatPrbsBer=gnAccessStatPrbsBer, gnLHitlessProblemTrap=gnLHitlessProblemTrap, nplus1StandardPMCurrLastDayFSRC=nplus1StandardPMCurrLastDayFSRC, gnMstFarEndMonCurrTable=gnMstFarEndMonCurrTable, gnFastEthernetMonStdHiOutNUcastPktsHC=gnFastEthernetMonStdHiOutNUcastPktsHC, gnGenIdcStatLeds=gnGenIdcStatLeds, gnMstFarEndMonCurrUAS=gnMstFarEndMonCurrUAS, gnLptCfgEXCThresh=gnLptCfgEXCThresh, gnHitLessCfgRevertTime=gnHitLessCfgRevertTime, gnLptFarEndMonCurrLastDayBBE=gnLptFarEndMonCurrLastDayBBE, gnAgnNTPCfg=gnAgnNTPCfg, gnMdmStatXModemScriptPostVer=gnMdmStatXModemScriptPostVer, gnGigabitEthernetMonCurrDayPacketErrorRate=gnGigabitEthernetMonCurrDayPacketErrorRate, gnFastEthernetStatTable=gnFastEthernetStatTable, gnNeighborInBandXId=gnNeighborInBandXId, gnPdhMonCurrLastDayIDF=gnPdhMonCurrLastDayIDF, gnMuxStatXMuxSerialNumber=gnMuxStatXMuxSerialNumber, gnTribCfgOscillationGuardTime=gnTribCfgOscillationGuardTime, gnHptFarEndMonCurrTable=gnHptFarEndMonCurrTable, gnAgnOutRelayAlarmIndex=gnAgnOutRelayAlarmIndex, gnGenXActNumOfInterfaceOnClass3=gnGenXActNumOfInterfaceOnClass3, gnAccessCfgEXCThresh=gnAccessCfgEXCThresh, gnLNoTIMTrap=gnLNoTIMTrap, gnRHitlessCableDisconnectOKTrap=gnRHitlessCableDisconnectOKTrap, gnOduMonCurrDayMinRL=gnOduMonCurrDayMinRL, nplus1StandardPMCurrLastDayIDF=nplus1StandardPMCurrLastDayIDF, gnTribCfg=gnTribCfg, gnAgnLogFileDeviceIDUStatus=gnAgnLogFileDeviceIDUStatus, gnEncryptionSkTimerElapsedCleared=gnEncryptionSkTimerElapsedCleared, gnGenMrmcXBandWidth=gnGenMrmcXBandWidth, gnAgnLogFileText=gnAgnLogFileText, gnEowCfgEowCascadeEnable=gnEowCfgEowCascadeEnable, gnTrailPassThrough=gnTrailPassThrough, gnOduCfgATPCStatus=gnOduCfgATPCStatus, gnUcStatTable=gnUcStatTable, powerInputTable=powerInputTable, gnLRcvAisTrap=gnLRcvAisTrap, gnTribStmMspRevertiveMode=gnTribStmMspRevertiveMode, gnGenIdcCfgId=gnGenIdcCfgId, gnOduMonIntervalXMaxTL=gnOduMonIntervalXMaxTL, gnMdmStatXRxConstellation=gnMdmStatXRxConstellation, gnLNoLOFTrap=gnLNoLOFTrap, gnMuxStatXNumOfIfOnClass1=gnMuxStatXNumOfIfOnClass1, gnOduStatusCelsiusTemp=gnOduStatusCelsiusTemp, gnFastEthernetCfgQueuingScheme=gnFastEthernetCfgQueuingScheme, gnAgnInBandMngTribChannel=gnAgnInBandMngTribChannel, gnGenIdcCfgTable=gnGenIdcCfgTable, gnGenIdcStatIduPosition=gnGenIdcStatIduPosition, gnRFURxLevelPathOutOfRangeTrap=gnRFURxLevelPathOutOfRangeTrap, gnGenDrawerXSlot2Status=gnGenDrawerXSlot2Status, gnPdhMonIntervalSES=gnPdhMonIntervalSES, gnEthStatisticPkts512to1023OctetMsb=gnEthStatisticPkts512to1023OctetMsb, gnLowSignalToRFUClearedTrap=gnLowSignalToRFUClearedTrap, gnAgnFileTransferODCVersionControl=gnAgnFileTransferODCVersionControl, gnAgnNTPCfgOffsetFromUTC=gnAgnNTPCfgOffsetFromUTC, gnMdmAcmStatXRoundedThroughput=gnMdmAcmStatXRoundedThroughput, nplus1StandardPMDayEntry=nplus1StandardPMDayEntry, gnAccessCfgTest=gnAccessCfgTest, gnSSMCfgSecondaryClockSource=gnSSMCfgSecondaryClockSource, gnAgnNTPCfgSummerAdjOffset=gnAgnNTPCfgSummerAdjOffset, gnGenCfgDeviceId=gnGenCfgDeviceId, gnLScmTrap=gnLScmTrap, gnRExternalAlarm1OnTrap=gnRExternalAlarm1OnTrap, gnAgnFileTransferUserName=gnAgnFileTransferUserName, gnGenTxFreqNumLocalRemote=gnGenTxFreqNumLocalRemote, gnApplicFileCompressed=gnApplicFileCompressed, gnAgnSNMPCfgTrapCommunity=gnAgnSNMPCfgTrapCommunity, gnVlanEthernetStat=gnVlanEthernetStat, gnOduCfgXDelayCalibrationWgType=gnOduCfgXDelayCalibrationWgType, auxiliaryDrawerBoardPostResetFWVersion=auxiliaryDrawerBoardPostResetFWVersion, gnEncryptionWillTurnOffOnNextRest=gnEncryptionWillTurnOffOnNextRest, gnTribCfgProtectionUserCommand=gnTribCfgProtectionUserCommand, gnOduMonCurrRLThresh2Exceed=gnOduMonCurrRLThresh2Exceed, gnTrailCfgBERConsAction=gnTrailCfgBERConsAction, gnRExternalAlarm2OnTrap=gnRExternalAlarm2OnTrap, gnMdmStatXStandardOrg=gnMdmStatXStandardOrg, gnProtectXMultiRadioOhRadioSource=gnProtectXMultiRadioOhRadioSource, gnAgnInBandMngXChannelIfIndex=gnAgnInBandMngXChannelIfIndex, gnRstCfgRSTAISMode=gnRstCfgRSTAISMode, gnPdhMonIntervalEntry=gnPdhMonIntervalEntry, linkGroupingTable=linkGroupingTable, gnRstMonCurrLastDayBBE=gnRstMonCurrLastDayBBE, gnRIDUExtremeTempTrap=gnRIDUExtremeTempTrap, gnCluster=gnCluster, gnRstMonCurrLastDayIDF=gnRstMonCurrLastDayIDF, gnOduCfgXFreqPlanStandard=gnOduCfgXFreqPlanStandard, gnAgnCurrentAlarmText=gnAgnCurrentAlarmText, gnGenDrawerXInternalCommunication=gnGenDrawerXInternalCommunication, gnOduCfgXMaxRxFreqNumber=gnOduCfgXMaxRxFreqNumber, gnMuxStatXAesAdmin=gnMuxStatXAesAdmin, gnPdhMonDayBBE=gnPdhMonDayBBE, standardProtectionRevertiveSwitchTimeOut=standardProtectionRevertiveSwitchTimeOut, gnMdmStatXId=gnMdmStatXId, gnMstMonDayUAS=gnMstMonDayUAS, gnMstMonCurrEntry=gnMstMonCurrEntry, gnSoftwareDrawerVersionRfuFpgaVersion=gnSoftwareDrawerVersionRfuFpgaVersion, gnOduMonCurrDayMaxRL=gnOduMonCurrDayMaxRL, gnOduCfgTLPerfMonThresh1=gnOduCfgTLPerfMonThresh1, gnMstMonCurrLastDayBBE=gnMstMonCurrLastDayBBE, gnRODUTxLevelInRangeTrap=gnRODUTxLevelInRangeTrap, powerInputLedStatus=powerInputLedStatus, gnLptMonIntervalUAS=gnLptMonIntervalUAS, gnAuxGeneralTable=gnAuxGeneralTable, nplus1StandardPMCurrCarrierId=nplus1StandardPMCurrCarrierId, gnTrailPassThroughIndex=gnTrailPassThroughIndex, gnUcStatId=gnUcStatId, gnLExternalAlarm8OnTrap=gnLExternalAlarm8OnTrap, gnOduMonCurrXMaxXpi=gnOduMonCurrXMaxXpi, nplus1StandardPMDayPSAD=nplus1StandardPMDayPSAD, gnAgnNTPCfgSummerAdjStart=gnAgnNTPCfgSummerAdjStart, gnEthStatisticRadioReceivedFramesMsb=gnEthStatisticRadioReceivedFramesMsb, gnOduMonDayCombinedXMaxRL=gnOduMonDayCombinedXMaxRL, gnOduCfgTable=gnOduCfgTable, gnMstFarEndMonCurrLastDayES=gnMstFarEndMonCurrLastDayES, gnHptFarEndMonCurrEntry=gnHptFarEndMonCurrEntry, gnRHeartBeatTrap=gnRHeartBeatTrap, gnEowCfgEntry=gnEowCfgEntry, gnProtectXTable=gnProtectXTable, gnOduCfgXUnfadedReferenceRsl=gnOduCfgXUnfadedReferenceRsl, gnGenIdcStatLeftDrawerStatus=gnGenIdcStatLeftDrawerStatus, linkGroupingGroupName=linkGroupingGroupName, gnAgnCurrentAlarmTable=gnAgnCurrentAlarmTable, powerInputAdmin=powerInputAdmin, gnVlanEthernetStatGroupId=gnVlanEthernetStatGroupId, gnRTftpFaultTrap=gnRTftpFaultTrap, gnLProtectCableOkTrap=gnLProtectCableOkTrap, gnOduCfgMinRxFreqNumber=gnOduCfgMinRxFreqNumber, gnMdmDemodStatus=gnMdmDemodStatus, gnLNoSDTrap=gnLNoSDTrap, gnOduMonDayTable=gnOduMonDayTable, gnRNoEXCTrap=gnRNoEXCTrap, gnOduStatusEntry=gnOduStatusEntry, gnSoftwareDrawerVersionModemScriptPostResetVersion=gnSoftwareDrawerVersionModemScriptPostResetVersion, gnAgnFileTransfertftpBlockCount=gnAgnFileTransfertftpBlockCount, gnGenStatDeviceFanStatus=gnGenStatDeviceFanStatus, gnAgnCurrentAlarmUnit=gnAgnCurrentAlarmUnit, gnOduCfgXForceRmtMuteTx=gnOduCfgXForceRmtMuteTx, gnSSMStatStatus=gnSSMStatStatus, gnMdmAcmMonDayXId=gnMdmAcmMonDayXId, gnOduMonDayDiversityXIdx=gnOduMonDayDiversityXIdx, gnOduMonIntervalXMaxXpi=gnOduMonIntervalXMaxXpi, gnOduMonCurrCombinedXDayMaxRL=gnOduMonCurrCombinedXDayMaxRL, gnLptFarEndMonCurrEntry=gnLptFarEndMonCurrEntry, gnPdhMonIntervalTable=gnPdhMonIntervalTable, gnOduStatusXId=gnOduStatusXId, gnSoftwareVersionIDUPostResetVersion=gnSoftwareVersionIDUPostResetVersion, gnOduMonCurrXLastDayIDF=gnOduMonCurrXLastDayIDF, gnLExternalAlarm3OnTrap=gnLExternalAlarm3OnTrap, gnMultiRadioProblemTrap=gnMultiRadioProblemTrap, gnOduMonIntervalEntry=gnOduMonIntervalEntry, gnGenDrawerXSlot1Status=gnGenDrawerXSlot1Status, gnRInternalDownloadFaultTrap=gnRInternalDownloadFaultTrap, gnAgnLogFileOduCelsiusTemp=gnAgnLogFileOduCelsiusTemp, nplus1StandardPMCurrPSAD=nplus1StandardPMCurrPSAD, gnRstStatBERCur=gnRstStatBERCur, gnGenRxFreqNumLocalRemote=gnGenRxFreqNumLocalRemote, gnMstMonDayEntry=gnMstMonDayEntry, gnMstMonCurrLastDayES=gnMstMonCurrLastDayES, gnMdmClearBC=gnMdmClearBC, gnOduCfgXOduLog=gnOduCfgXOduLog, gnAgnMgrId=gnAgnMgrId, gnOduMonCurrDiversityXId=gnOduMonCurrDiversityXId, gnRNoLopTrap=gnRNoLopTrap, gnHptCfgTrailPT2=gnHptCfgTrailPT2, gnHptStatReceivedJ1=gnHptStatReceivedJ1, gnRODUSynthLockTrap=gnRODUSynthLockTrap, gnMstMonIntervalUAS=gnMstMonIntervalUAS, gnAgnInternalDownloadVersionControl=gnAgnInternalDownloadVersionControl, gnOduCfgMaxTxLevel=gnOduCfgMaxTxLevel, gnGigabitEthernetCfgEnableAutomaticTxMute=gnGigabitEthernetCfgEnableAutomaticTxMute, gnAgnLogFileRadioBERCur=gnAgnLogFileRadioBERCur, gnGenIdcStatAgentIPAddress=gnGenIdcStatAgentIPAddress, gnAgnLogFileValid=gnAgnLogFileValid, gnOduMonCurrRLThresh1Exceed=gnOduMonCurrRLThresh1Exceed, gnAuxGeneral=gnAuxGeneral, gnAgnInternalDownloadId=gnAgnInternalDownloadId, gnMdmCfgXLatencyType=gnMdmCfgXLatencyType, gnRFUXPICClockFailureTrap=gnRFUXPICClockFailureTrap, gnOduMonCurrXXpiThreshExceed=gnOduMonCurrXXpiThreshExceed, gnPdhMonDayIDF=gnPdhMonDayIDF, gnGigabitEthernetCfgPauseFrameForwarding=gnGigabitEthernetCfgPauseFrameForwarding, gnGigabitEthernetCfgPauseFrameGenerating=gnGigabitEthernetCfgPauseFrameGenerating, gnMstStatCurrentBer=gnMstStatCurrentBer, gnHptMonCurrBBE=gnHptMonCurrBBE, nplus1StandardPMIntervalGroupNum=nplus1StandardPMIntervalGroupNum, gnRstMonDaySES=gnRstMonDaySES, carrierProtectionTable=carrierProtectionTable, gnRExternalAlarm7OffTrap=gnRExternalAlarm7OffTrap, gnOduMonIntervalTable=gnOduMonIntervalTable, gnOduCfgXForceRmtMaxTx=gnOduCfgXForceRmtMaxTx, gnRRemoteCommOkTrap=gnRRemoteCommOkTrap, gnSSMCfgSSMMode=gnSSMCfgSSMMode, gnGigabitEthernetCfgSpeedAndDuplex=gnGigabitEthernetCfgSpeedAndDuplex, gnGenXSyncIdcDataBase=gnGenXSyncIdcDataBase, gnProtectCfgExtInSwitch=gnProtectCfgExtInSwitch, gnOduMonCurrCombinedXDayRLThresh1Exceed=gnOduMonCurrCombinedXDayRLThresh1Exceed, gnMdmStatXModemSerialNumber=gnMdmStatXModemSerialNumber, xcDrawerSerialNumber=xcDrawerSerialNumber, gnMstStatReceivedS1=gnMstStatReceivedS1, gnUcCfgRouting=gnUcCfgRouting, gnHptCfgSDThresh=gnHptCfgSDThresh, gnGigabitEthernetCfgClassifierGroupMinVlanId=gnGigabitEthernetCfgClassifierGroupMinVlanId, gnOduMonDayXMinRL=gnOduMonDayXMinRL, gnApplicFileDownloadDate=gnApplicFileDownloadDate, gnAgnInterLinkAction=gnAgnInterLinkAction, gnMdmAcmMonIntervalXEntry=gnMdmAcmMonIntervalXEntry, gnWscCfgEntry=gnWscCfgEntry, topologiesOptionsEntry=topologiesOptionsEntry, gnRIDUPowerOkTrap=gnRIDUPowerOkTrap, gnMdmAcmMonCurrXDayMaxConstellation=gnMdmAcmMonCurrXDayMaxConstellation, gnLExternalAlarm1OnTrap=gnLExternalAlarm1OnTrap, gnGenXPrbsTest=gnGenXPrbsTest, gnRRdiTrap=gnRRdiTrap, gnLptStatReceivedSignalLabel=gnLptStatReceivedSignalLabel, gnGenIdcStatEntry=gnGenIdcStatEntry, gnOduMonCurrXMinXpi=gnOduMonCurrXMinXpi, gnGenXWaysideChannel=gnGenXWaysideChannel)
mibBuilder.exportSymbols("CERAGON-MIB", gnOduCfgXAntennaType=gnOduCfgXAntennaType, gnEthStatisticEtherStatsOctetsMsb=gnEthStatisticEtherStatsOctetsMsb, gnGigabitEthernetCfgMuteOnRemoteRadioFault=gnGigabitEthernetCfgMuteOnRemoteRadioFault, nplus1StandardPMIntervalTable=nplus1StandardPMIntervalTable, gnRIntralinkOkTrap=gnRIntralinkOkTrap, gnEthStatisticIfInUcastPktsMsb=gnEthStatisticIfInUcastPktsMsb, gnTrailCfgProtection=gnTrailCfgProtection, gnLExternalAlarm4OffTrap=gnLExternalAlarm4OffTrap, gnGenStatDeviceLeds=gnGenStatDeviceLeds, gnGenDrawerXTable=gnGenDrawerXTable, gnAgnInBandMngUnknownPackets=gnAgnInBandMngUnknownPackets, gnEowCfgId=gnEowCfgId, gnAgnPrvt=gnAgnPrvt, gnProtectCfgBERSwitch=gnProtectCfgBERSwitch, gnAgnLogFileDeviceCelsiusTemp=gnAgnLogFileDeviceCelsiusTemp, gnMdmAcmStatXQamId=gnMdmAcmStatXQamId, gnMstMonDayIdx=gnMstMonDayIdx, nplus1StandardPMCurrEntry=nplus1StandardPMCurrEntry, gnGenIdcStatBoardType=gnGenIdcStatBoardType, membersGroupId=membersGroupId, gnRstStatStatus=gnRstStatStatus, gnMdmAcmMonIntervalXIdx=gnMdmAcmMonIntervalXIdx, gnEthStatistic=gnEthStatistic, gnAgnCurrentAlarm=gnAgnCurrentAlarm, gnLptMonDayIdx=gnLptMonDayIdx, gnGigabitEthernetCfgSchedulerQueue1Weight=gnGigabitEthernetCfgSchedulerQueue1Weight, gnOduMonDayMaxTL=gnOduMonDayMaxTL, gnEowStatEntry=gnEowStatEntry, gnOduCfgXXpiPerfMonThresh=gnOduCfgXXpiPerfMonThresh, gnLExternalAlarm6OffTrap=gnLExternalAlarm6OffTrap, gnMdmAcmMonCurrXEntry=gnMdmAcmMonCurrXEntry, gnPdhMonCurrUAS=gnPdhMonCurrUAS, gnOduMonIntervalXMaxRL=gnOduMonIntervalXMaxRL, gnAgnInBandMngXChannelTable=gnAgnInBandMngXChannelTable, gnSSMCfgClockUserCommand=gnSSMCfgClockUserCommand, cluster=cluster, gnTribCfgEntry=gnTribCfgEntry, gnLTftpFaultTrap=gnLTftpFaultTrap, gnSystem=gnSystem, gnLptMonCurrBBE=gnLptMonCurrBBE, gnGeneralMrmcXEntry=gnGeneralMrmcXEntry, gnAgnLogFileXCSwitchLogAdmin=gnAgnLogFileXCSwitchLogAdmin, gnGeneralMrmcXTable=gnGeneralMrmcXTable, gnOduMonCurrDiversityXDayMinRL=gnOduMonCurrDiversityXDayMinRL, gnRLoopbackOffTrap=gnRLoopbackOffTrap, nplus1StandardPMDayGroupNum=nplus1StandardPMDayGroupNum, gnOduCfgXxpicClockMode=gnOduCfgXxpicClockMode, gnLptStatProtectionMode=gnLptStatProtectionMode, gnGenXWaySideLoopback=gnGenXWaySideLoopback, nplus1ProtectingProtectedLinkRx=nplus1ProtectingProtectedLinkRx, gnAccessCfgTable=gnAccessCfgTable, gnAgnInBandMngRingIpMask=gnAgnInBandMngRingIpMask, gnOduCfgMUTEStatus=gnOduCfgMUTEStatus, gnGenIdcCfgIDUSerialNumber=gnGenIdcCfgIDUSerialNumber, gnLPamOkTrap=gnLPamOkTrap, gnGeneralXEntry=gnGeneralXEntry, gnProtectXId=gnProtectXId, gnGigabitEthernetCfgEntry=gnGigabitEthernetCfgEntry, gnGigabitEthernetMonIntervalPacketErrorRate=gnGigabitEthernetMonIntervalPacketErrorRate, gnMstFarEndMonCurrBBE=gnMstFarEndMonCurrBBE, gnREXCTrap=gnREXCTrap, gnWscCfgEnable=gnWscCfgEnable, gnGigabitEthernetCfg=gnGigabitEthernetCfg, gnSSMStat=gnSSMStat, gnRProtectCableFaultTrap=gnRProtectCableFaultTrap, gnRCableOkTrap=gnRCableOkTrap, gnEncryptionTechCardWasDetectedCleared=gnEncryptionTechCardWasDetectedCleared, gnLptFarEndMonIntervalUAS=gnLptFarEndMonIntervalUAS, gnFastEthernetStat=gnFastEthernetStat, gnOduMonIntervalXIdx=gnOduMonIntervalXIdx, gnOduStatusXTransmitLevel=gnOduStatusXTransmitLevel, gnGenXRemoteConnection=gnGenXRemoteConnection, gnMdmModStatus=gnMdmModStatus, gnOduMonCurrDiversityXRLThresh1Exceed=gnOduMonCurrDiversityXRLThresh1Exceed, gnMdmAcmStatXTable=gnMdmAcmStatXTable, gnGenDrawerXEntry=gnGenDrawerXEntry, gnMdmCfgXMrmcConf=gnMdmCfgXMrmcConf, gnFastEthernetMonStdHiInOctetsHC=gnFastEthernetMonStdHiInOctetsHC, gnMstFarEndMonDayUAS=gnMstFarEndMonDayUAS, gnPdhMonCurrES=gnPdhMonCurrES, gnOduCfgXMaxTxLevel=gnOduCfgXMaxTxLevel, gnMstStatReceivedK2=gnMstStatReceivedK2, gnOduCfgRLPerfMonThresh2=gnOduCfgRLPerfMonThresh2, gnHptMonIntervalUAS=gnHptMonIntervalUAS, gnLODUNormalTempTrap=gnLODUNormalTempTrap, gnMdmAcmMonCurrXDayMinConstellation=gnMdmAcmMonCurrXDayMinConstellation, gnFastEthernetMonStdHiInUcastPktsHC=gnFastEthernetMonStdHiInUcastPktsHC, gnTrailCfgReversionMode=gnTrailCfgReversionMode, nplus1StandardPMCurrLastDayPSAD=nplus1StandardPMCurrLastDayPSAD, gnLExternalAlarm2OnTrap=gnLExternalAlarm2OnTrap, topologiesOptionsName=topologiesOptionsName, gnGigabitEthernetStatEntry=gnGigabitEthernetStatEntry, gnGenXLinkId=gnGenXLinkId, gnMdmAcmMonCurrXDayIDF=gnMdmAcmMonCurrXDayIDF, gnGenCarrierXTable=gnGenCarrierXTable, gnRAisTrap=gnRAisTrap, gnVlanEthernetStatTable=gnVlanEthernetStatTable, standardProtectionRevertiveLink=standardProtectionRevertiveLink, gnHptFarEndMonCurrLastDaySES=gnHptFarEndMonCurrLastDaySES, gnAccessStatInterfaceBer=gnAccessStatInterfaceBer, gnGigabitEthernetStatBistErrorSeconds=gnGigabitEthernetStatBistErrorSeconds, gnAgnCurrentAlarmSeverity=gnAgnCurrentAlarmSeverity, gnOduStatusTransmitLevel=gnOduStatusTransmitLevel, nplus1StandardPMDayFSRD=nplus1StandardPMDayFSRD, gnTribStmMspConnect=gnTribStmMspConnect, gnRNoUnqTrap=gnRNoUnqTrap, gnLptMonDayUAS=gnLptMonDayUAS, gnGenCfgDeviceTable=gnGenCfgDeviceTable, gnOduCfgXRLPerfMonThresh1=gnOduCfgXRLPerfMonThresh1, gnLptMonCurrTable=gnLptMonCurrTable, gnRstMonDayBBE=gnRstMonDayBBE, gnLNoUnExpTrap=gnLNoUnExpTrap, gnRNoTIMTrap=gnRNoTIMTrap, gnRFUPowerFailureClearedTrap=gnRFUPowerFailureClearedTrap, gnRNoRdiTrap=gnRNoRdiTrap, gnRFUDelayCalibrationFailure1ClearedTrap=gnRFUDelayCalibrationFailure1ClearedTrap, gnProtectCfgMultiRadioBlock=gnProtectCfgMultiRadioBlock, gnTempLicenseTrap=gnTempLicenseTrap, gnProtectCfgEntry=gnProtectCfgEntry, gnLptCfgSDThresh=gnLptCfgSDThresh, gnOduStatusFahrenheitTemp=gnOduStatusFahrenheitTemp, gnTrailPassThroughEntry=gnTrailPassThroughEntry, gnNeighborIpEntry=gnNeighborIpEntry, gnMdmAcmMonIntervalXId=gnMdmAcmMonIntervalXId, gnLODUSynthLockTrap=gnLODUSynthLockTrap, gnHptFarEndMonCurrLastDayBBE=gnHptFarEndMonCurrLastDayBBE, gnLinkGroupingProtectionFaultTrap=gnLinkGroupingProtectionFaultTrap, gnAgnMgrIP=gnAgnMgrIP, gnAgnInternalDownloadBytesCount=gnAgnInternalDownloadBytesCount, gnAccess=gnAccess, gnMdmCfgXLinkId=gnMdmCfgXLinkId, gnMstFarEndMonIntervalTable=gnMstFarEndMonIntervalTable, gnOduCfgXATPCStatus=gnOduCfgXATPCStatus, gnNeighborInBandXEntry=gnNeighborInBandXEntry, clusterPeerIPLastChangeTime=clusterPeerIPLastChangeTime, gnRstCfgTransparencyE1=gnRstCfgTransparencyE1, gnOduMonIntervalXEntry=gnOduMonIntervalXEntry, gnOduMonDayXRLThresh2Exceed=gnOduMonDayXRLThresh2Exceed, gnOduStatusReceiveLevel=gnOduStatusReceiveLevel, gnOduMonIntervalCombinedXIdx=gnOduMonIntervalCombinedXIdx, gnRHitlessCableDisconnectTrap=gnRHitlessCableDisconnectTrap, gnOduCfgXRealRxFreqNumber=gnOduCfgXRealRxFreqNumber, gnLHitlessProblemOKTrap=gnLHitlessProblemOKTrap, gnPdhMonDayEntry=gnPdhMonDayEntry, gnOduMonCurrXDayRLThresh1Exceed=gnOduMonCurrXDayRLThresh1Exceed, gnLptFarEndMonIntervalTable=gnLptFarEndMonIntervalTable, gnAgnInBandMngPppIp=gnAgnInBandMngPppIp, gnAuxGeneralId=gnAuxGeneralId, gnMdmAcmStatXSupportedThroughput=gnMdmAcmStatXSupportedThroughput, gnMdmCfgXEntry=gnMdmCfgXEntry, gnEthStatisticAFrameReceivedOkLsb=gnEthStatisticAFrameReceivedOkLsb, gnHptStatCurrentBer=gnHptStatCurrentBer, gnAgnInBandMngXChannelNeighborIP=gnAgnInBandMngXChannelNeighborIP, gnOduMonDayXMaxXpi=gnOduMonDayXMaxXpi, gnGigabitEthernetMonIntervalEntry=gnGigabitEthernetMonIntervalEntry, gnMdmStatXModemType=gnMdmStatXModemType, gnMuxCfgXEntry=gnMuxCfgXEntry, gnRstMonDayES=gnRstMonDayES, auxiliaryDrawerAuxCardType=auxiliaryDrawerAuxCardType, gnAgnMgrEntry=gnAgnMgrEntry, gnRLOFTrap=gnRLOFTrap, gnHitLessCfgSwitchLock=gnHitLessCfgSwitchLock, gnRIDUNormalTempTrap=gnRIDUNormalTempTrap, gnOduMonCurrXTLThresh1Exceed=gnOduMonCurrXTLThresh1Exceed, gnFastEthernetCfgDuplexMode=gnFastEthernetCfgDuplexMode, gnEthStatisticOversizePktsMsb=gnEthStatisticOversizePktsMsb, gnWscCfgChNumber=gnWscCfgChNumber, nplus1StandardPMIntervalEntry=nplus1StandardPMIntervalEntry, gnPdhMonCurrSES=gnPdhMonCurrSES, gnOduMonitor=gnOduMonitor, gnUcCfgId=gnUcCfgId, gnAgnCurrentAlarmTrapID=gnAgnCurrentAlarmTrapID, gnGigabitEthernetCfgTrafficBISTAdmin=gnGigabitEthernetCfgTrafficBISTAdmin, gnOduMonIntervalRLThresh1Exceed=gnOduMonIntervalRLThresh1Exceed, gnHptFarEndMonIntervalTable=gnHptFarEndMonIntervalTable, gnPdhMonDayIdx=gnPdhMonDayIdx, gnGenSystemWorkTime=gnGenSystemWorkTime, gnAgnInBandMngRadioChannel=gnAgnInBandMngRadioChannel, gnOduMonDayXId=gnOduMonDayXId, gnMuxStatXTable=gnMuxStatXTable, auxiliaryDrawerOrderWireCascading=auxiliaryDrawerOrderWireCascading, clusterSystemType=clusterSystemType, gnHptMonCurrLastDayBBE=gnHptMonCurrLastDayBBE, gnRIDUPowerFailTrap=gnRIDUPowerFailTrap, gnGigabitEthernetMonDayIdx=gnGigabitEthernetMonDayIdx, backplaneSlotMappingTable=backplaneSlotMappingTable, gnSpi=gnSpi, gnGenCarrierXSyncIdcDataBase=gnGenCarrierXSyncIdcDataBase, nplus1StandardPMDayFSRC=nplus1StandardPMDayFSRC, gnFastEthernetCfgGigabitEthernet=gnFastEthernetCfgGigabitEthernet, gnLNoEXCTrap=gnLNoEXCTrap, gnGenXMUXSerialNumber=gnGenXMUXSerialNumber, gnAgnPrvtCmdStat=gnAgnPrvtCmdStat, gnOduCfgXDelayCalibrationOperation=gnOduCfgXDelayCalibrationOperation, carrierProtectionLoopbackTimer=carrierProtectionLoopbackTimer, gnAgnInternalDownloadTable=gnAgnInternalDownloadTable, gnOduMonIntervalDiversityXId=gnOduMonIntervalDiversityXId, nplus1StandardPMCurrTable=nplus1StandardPMCurrTable, gnTribCfgReversionMode=gnTribCfgReversionMode, gnAgnInterLinkSource=gnAgnInterLinkSource, gnAgnInExternAlarmDevId=gnAgnInExternAlarmDevId, gnMstMonDayBBE=gnMstMonDayBBE, nplus1StandardPMDayTable=nplus1StandardPMDayTable, gnOduMonCurrXMinTL=gnOduMonCurrXMinTL, gnOduCfgTransmitterFrequency=gnOduCfgTransmitterFrequency, auxiliaryDrawerLedsStatus=auxiliaryDrawerLedsStatus, gnEthStatisticTable=gnEthStatisticTable, gnLExternalAlarm4OnTrap=gnLExternalAlarm4OnTrap, gnEncryptionEventReport=gnEncryptionEventReport, gnRSDTrap=gnRSDTrap, gnAccessTrapCleared=gnAccessTrapCleared, gnOduCfgXOduLoopSupport=gnOduCfgXOduLoopSupport, gnLowSignalToRFUTrap=gnLowSignalToRFUTrap, gnAgnLogFileLastDemodBlocksCorrected=gnAgnLogFileLastDemodBlocksCorrected, gnRstCfgExpectedJ0=gnRstCfgExpectedJ0, gnGenCfgIDUSerialNumber=gnGenCfgIDUSerialNumber, gnPdhMonDayES=gnPdhMonDayES, gnOduCfgEntry=gnOduCfgEntry, gnTribCfgHoldOffTime=gnTribCfgHoldOffTime, gnLptMonCurrLastDayUAS=gnLptMonCurrLastDayUAS, gnLNoRdiTrap=gnLNoRdiTrap, gnVlanEthernetStatEntry=gnVlanEthernetStatEntry, gnLPamTrap=gnLPamTrap, gnSoftwareDrawerVersionModemFilePostResetVersion=gnSoftwareDrawerVersionModemFilePostResetVersion, nplus1ProtectingGroupId=nplus1ProtectingGroupId, gnProtectCfgSdBERSwitch=gnProtectCfgSdBERSwitch, gnRSystemFaultTrap=gnRSystemFaultTrap, gnMdmCfgDiversityMode=gnMdmCfgDiversityMode, gnAgnLogFileDate=gnAgnLogFileDate, gnRNoTestRunningTrap=gnRNoTestRunningTrap, carrierProtectionLoopback=carrierProtectionLoopback, gnGenTxFreqLocalRemote=gnGenTxFreqLocalRemote, gnMuxStatXBoardType=gnMuxStatXBoardType, gnOduMonCurrXDayMaxXpi=gnOduMonCurrXDayMaxXpi, gnOduMonCurrDayMaxTL=gnOduMonCurrDayMaxTL, standardProtectionHighPrioProtectionTh=standardProtectionHighPrioProtectionTh, gnGenCfgDeviceEntry=gnGenCfgDeviceEntry, gnSoftwareVersionWSPostResetVersion=gnSoftwareVersionWSPostResetVersion, gnLInbandTrap=gnLInbandTrap, gnMdmStatXRemoteConnection=gnMdmStatXRemoteConnection, gnEowStatTable=gnEowStatTable, gnAgnInterLinkSide=gnAgnInterLinkSide, gnMstFarEndMonIntervalBBE=gnMstFarEndMonIntervalBBE, gnPdhMonDaySES=gnPdhMonDaySES, gnOduMonCurrEntry=gnOduMonCurrEntry, gnRstMonIntervalBBE=gnRstMonIntervalBBE, gnRNoSlmTrap=gnRNoSlmTrap, powerInputStatus=powerInputStatus, gnOduMonIntervalXMinTL=gnOduMonIntervalXMinTL, gnOduMonDayXTLThresh1Exceed=gnOduMonDayXTLThresh1Exceed, addressesPeerIPAddress=addressesPeerIPAddress, gnOduMonCurrDiversityXDayRLThresh1Exceed=gnOduMonCurrDiversityXDayRLThresh1Exceed, gnLODUTxLevelOutOfRangeTrap=gnLODUTxLevelOutOfRangeTrap, gnAux=gnAux)
mibBuilder.exportSymbols("CERAGON-MIB", gnGenRemoteDistance=gnGenRemoteDistance, gnGenIdcCfgWaySideConnector=gnGenIdcCfgWaySideConnector, nplus1StandardPMIntervalPSAC=nplus1StandardPMIntervalPSAC, gnLInbandOkTrap=gnLInbandOkTrap, gnGenXProductType=gnGenXProductType, nplus1StandardPMCurrFSRD=nplus1StandardPMCurrFSRD, gnGenStatDeviceRSTStatus=gnGenStatDeviceRSTStatus, linkGroupingGroupId=linkGroupingGroupId, gnGenXMultiRateMultiConsConf=gnGenXMultiRateMultiConsConf, gnLSDTrap=gnLSDTrap, gnOduMonIntervalXRLThresh2Exceed=gnOduMonIntervalXRLThresh2Exceed, gnLIDUPowerOkTrap=gnLIDUPowerOkTrap, gnApplicFileSize=gnApplicFileSize, gnRUnExpTrap=gnRUnExpTrap, gnOduMonIntervalXEvent=gnOduMonIntervalXEvent, gnAgnFileTransfertFtpStatus=gnAgnFileTransfertFtpStatus, gnHptFarEndMonDayTable=gnHptFarEndMonDayTable, gnLptFarEndMonDayES=gnLptFarEndMonDayES, nplus1StandardPMDayIDF=nplus1StandardPMDayIDF, gnWscStatTable=gnWscStatTable, gnLLOFTrap=gnLLOFTrap, gnHptFarEndMonCurrLastDayUAS=gnHptFarEndMonCurrLastDayUAS, gnMdmStatXAcmValidIntervals=gnMdmStatXAcmValidIntervals, gnMstFarEndMonDayES=gnMstFarEndMonDayES, gnAccessCfgRunPrbs=gnAccessCfgRunPrbs, gnOduMonDayRLThresh2Exceed=gnOduMonDayRLThresh2Exceed, gnGenXTempLicenseEnable=gnGenXTempLicenseEnable, gnTribStmProtectType=gnTribStmProtectType, gnSDHTrapCleared=gnSDHTrapCleared, gnGenDrawerXId=gnGenDrawerXId, nplus1ProtectingProtectedLinkTx=nplus1ProtectingProtectedLinkTx, gnHptCfgEXCThresh=gnHptCfgEXCThresh, gnOduMonCurrDiversityXRLThresh2Exceed=gnOduMonCurrDiversityXRLThresh2Exceed, gnHptStatEntry=gnHptStatEntry, gnLHitlessCableDisconnectTrap=gnLHitlessCableDisconnectTrap, gnOduMonCurrDiversityXMaxRL=gnOduMonCurrDiversityXMaxRL, gnRstCfgTransparencyF1=gnRstCfgTransparencyF1, gnAgnLogFileLastDemodBytesCorrected=gnAgnLogFileLastDemodBytesCorrected, gnHitLessCfgDiversityType=gnHitLessCfgDiversityType, gnAgnOutRelayAlarmEntry=gnAgnOutRelayAlarmEntry, gnLUnqTrap=gnLUnqTrap, gnProtectCfgTable=gnProtectCfgTable, gnUcCfgType=gnUcCfgType, gnGenIdcStatTable=gnGenIdcStatTable, gnMstStatReceivedK1=gnMstStatReceivedK1, gnApplicFileCrcSupport=gnApplicFileCrcSupport, gnEthStatisticRadioReceivedCrcFramesLsb=gnEthStatisticRadioReceivedCrcFramesLsb, gnAgnFileTransferFileName=gnAgnFileTransferFileName, gnOduMonCurrXMse=gnOduMonCurrXMse, gnOduMonCurrDayMinTL=gnOduMonCurrDayMinTL, gnGenStatDeviceFahrenheitTemp=gnGenStatDeviceFahrenheitTemp, gnOduMonIntervalCombinedXRLThresh2Exceed=gnOduMonIntervalCombinedXRLThresh2Exceed, gnEthStatisticMulticastPktsMsb=gnEthStatisticMulticastPktsMsb, gnHptFarEndMonIntervalBBE=gnHptFarEndMonIntervalBBE, gnMdmStatXModemScriptVer=gnMdmStatXModemScriptVer, gnGenLastCfgTimeandDate=gnGenLastCfgTimeandDate, gnHptStatTable=gnHptStatTable, gnRstStatReceivedJ0=gnRstStatReceivedJ0, gnOduMonCurrCombinedXTable=gnOduMonCurrCombinedXTable, gnFastEthernetStatStatus=gnFastEthernetStatStatus, gnOduCfgMaxRxFreqNumber=gnOduCfgMaxRxFreqNumber, backplaneSlotMappingSubDrawerId=backplaneSlotMappingSubDrawerId, gnTrailCfgTrailName=gnTrailCfgTrailName, gnOduMonIntervalXTable=gnOduMonIntervalXTable, gnLptMonCurrLastDayBBE=gnLptMonCurrLastDayBBE, gnGenCfgClearLoopTimeout=gnGenCfgClearLoopTimeout, gnOduMonCurrMinTL=gnOduMonCurrMinTL, gnGigabitEthernetStatSpeedAndDuplexSupport=gnGigabitEthernetStatSpeedAndDuplexSupport, gnWscStatEntry=gnWscStatEntry, gnSoftwareDrawerVersionODU=gnSoftwareDrawerVersionODU, gnEthStatisticRadioSyncUnlockEventsLsb=gnEthStatisticRadioSyncUnlockEventsLsb, gnSoftwareVersionBootFlashVer=gnSoftwareVersionBootFlashVer, gnEncryptionSkTimerElapsed=gnEncryptionSkTimerElapsed, gnLLopTrap=gnLLopTrap, gnAgnNTPCfgAuthSecretKey=gnAgnNTPCfgAuthSecretKey, gnOduStatusXTable=gnOduStatusXTable, gnMuxStatXNumOfIfOnClass2=gnMuxStatXNumOfIfOnClass2, gnOduMonCurrXDayMaxRL=gnOduMonCurrXDayMaxRL, gnApplicFileSubType=gnApplicFileSubType, xcDrawerTable=xcDrawerTable, gnSoftwareDrawerId=gnSoftwareDrawerId, gnGenDrawerXDeviceLeds=gnGenDrawerXDeviceLeds, gnLptCfgEntry=gnLptCfgEntry, backplaneSlotMappingUnitNumber=backplaneSlotMappingUnitNumber, gnOduMonIntervalCombinedXMinRL=gnOduMonIntervalCombinedXMinRL, gnAgnInBandMngXEnableInbandChannels=gnAgnInBandMngXEnableInbandChannels, gnHptCfgEntry=gnHptCfgEntry, gnApplicFileName=gnApplicFileName, gnRFUFanFailureTrap=gnRFUFanFailureTrap, gnRNoAisTrap=gnRNoAisTrap, gnMstFarEndMonIntervalEntry=gnMstFarEndMonIntervalEntry, gnOduCfgFreqPlanStandard=gnOduCfgFreqPlanStandard, gnTrailCfgProtectionOptions=gnTrailCfgProtectionOptions, gnEowCfgEowRightEnable=gnEowCfgEowRightEnable, gnMstStatTransmitK1=gnMstStatTransmitK1, gnGenCfgLeftMediumConnector=gnGenCfgLeftMediumConnector, gnGenInterLenLocalRemote=gnGenInterLenLocalRemote, gnApplicFileDssSupport=gnApplicFileDssSupport, gnMdmAcmMonCurrXIDF=gnMdmAcmMonCurrXIDF, gnGenXAesMkeyMode=gnGenXAesMkeyMode, gnOduMonDayDiversityXMinRL=gnOduMonDayDiversityXMinRL, gnOduStatusXReceiveLevel=gnOduStatusXReceiveLevel, gnLIDUNormalTempTrap=gnLIDUNormalTempTrap, gnEncryptionFaultClearedTrap=gnEncryptionFaultClearedTrap, gnLptMon=gnLptMon, gnMdmAcmMonDayXMinConstellation=gnMdmAcmMonDayXMinConstellation, gnRODURxLevelOutOfRangeTrap=gnRODURxLevelOutOfRangeTrap, gnLptFarEndMonDaySES=gnLptFarEndMonDaySES, gnSoftwareVersionIDU=gnSoftwareVersionIDU, gnEncryptionKepTimout=gnEncryptionKepTimout, gnProtect=gnProtect, gnTrailCfgSignalLabelMismatch=gnTrailCfgSignalLabelMismatch, topologiesOptionsGroupTopology=topologiesOptionsGroupTopology, gnEthStatisticIfInOctetsMsb=gnEthStatisticIfInOctetsMsb, gnRLopTrap=gnRLopTrap, gnUcStatEntry=gnUcStatEntry, gnOduCfgXTable=gnOduCfgXTable, gnPdhMonCurrLastDayUAS=gnPdhMonCurrLastDayUAS, gnOduMonIntervalXId=gnOduMonIntervalXId, gnOduMonCurrCombinedXRLThresh2Exceed=gnOduMonCurrCombinedXRLThresh2Exceed, gnOduCfgXChannelBandwidth=gnOduCfgXChannelBandwidth, gnOduMonCurrDiversityXEntry=gnOduMonCurrDiversityXEntry, gnHptStatReceivedSignalLabel=gnHptStatReceivedSignalLabel, gnLptMonIntervalBBE=gnLptMonIntervalBBE, gnAccessCfgLoopbackOption=gnAccessCfgLoopbackOption, gnLptStatCurrentBer=gnLptStatCurrentBer, gnGenCfgF1DataChanConnector=gnGenCfgF1DataChanConnector, auxiliaryDrawerSerialNumber=auxiliaryDrawerSerialNumber, xcDrawerBoardHWVersion=xcDrawerBoardHWVersion, gnMdmAcmMonDayXMaxConstellation=gnMdmAcmMonDayXMaxConstellation, gnLODURxLevelInRangeTrap=gnLODURxLevelInRangeTrap, gnFastEthernetMonStdHiOutOctetsHC=gnFastEthernetMonStdHiOutOctetsHC, gnOduMonIntervalCombinedXId=gnOduMonIntervalCombinedXId, gnAgnFileTransferServerIP=gnAgnFileTransferServerIP, gnLptMonDayEntry=gnLptMonDayEntry, gnOduMonIntervalMinRL=gnOduMonIntervalMinRL, gnEthStatisticRadioTransmitFramesLsb=gnEthStatisticRadioTransmitFramesLsb, gnGenDrawerXDeviceIDUStatus=gnGenDrawerXDeviceIDUStatus, gnAgnLogFileData=gnAgnLogFileData, gnLExternalAlarm7OnTrap=gnLExternalAlarm7OnTrap, gnOduMonDayDiversityXRLThresh1Exceed=gnOduMonDayDiversityXRLThresh1Exceed, gnLptMonIntervalEntry=gnLptMonIntervalEntry, gnGenCfgTrapSeverity=gnGenCfgTrapSeverity, gnLExternalAlarm5OffTrap=gnLExternalAlarm5OffTrap, gnRstMonDayUAS=gnRstMonDayUAS, gnGenXRadioSide=gnGenXRadioSide, gnGenCfgSlipModemConnection=gnGenCfgSlipModemConnection, gnAgnCurrentAlarmId=gnAgnCurrentAlarmId, gnRFUXPICClockFailureClearedTrap=gnRFUXPICClockFailureClearedTrap, gnLExternalAlarm2OffTrap=gnLExternalAlarm2OffTrap, gnMuxStatXBoardConnector=gnMuxStatXBoardConnector, gnLODUExtremeTempTrap=gnLODUExtremeTempTrap, gnOduMonDayMinTL=gnOduMonDayMinTL, gnAgnCurrentAlarmIfIndex=gnAgnCurrentAlarmIfIndex, gnApplicFileEntry=gnApplicFileEntry, gnNeighborIP=gnNeighborIP, gnGenCfgAlarmText=gnGenCfgAlarmText, gnMdmStatXModemFWPostVer=gnMdmStatXModemFWPostVer, gnMstMonIntervalEntry=gnMstMonIntervalEntry, gnEthStatisticRadioReceivedCrcFramesMsb=gnEthStatisticRadioReceivedCrcFramesMsb, gnPdhMonIntervalCV=gnPdhMonIntervalCV, gnLInternalDownloadFaultTrap=gnLInternalDownloadFaultTrap, xcDrawerXCActivityRole=xcDrawerXCActivityRole, gnGenIdcCfgSerialPPPAdminStatus=gnGenIdcCfgSerialPPPAdminStatus, gnRstMonCurrLastDaySES=gnRstMonCurrLastDaySES, gnNeighborInBandXIP=gnNeighborInBandXIP, gnLptFarEndMonCurrTable=gnLptFarEndMonCurrTable, gnRRemoteCommFaultTrap=gnRRemoteCommFaultTrap, gnNeighborIpRemoteType=gnNeighborIpRemoteType, auxiliaryDrawer=auxiliaryDrawer, gnMdmAcmMonIntervalXMinConstellation=gnMdmAcmMonIntervalXMinConstellation, gnSoftwareVersionWSAlteraVer=gnSoftwareVersionWSAlteraVer, gnAuxGeneralSyncIdcDataBase=gnAuxGeneralSyncIdcDataBase, gnAgnLogFileSource=gnAgnLogFileSource, gnMstFarEndMonDayTable=gnMstFarEndMonDayTable, gnPdhMonDayUAS=gnPdhMonDayUAS, gnLinkGroupingProtectionFaultClearedTrap=gnLinkGroupingProtectionFaultClearedTrap, nplus1StandardPMCurrFSRC=nplus1StandardPMCurrFSRC, protectionGroupsProtectionAdmin=protectionGroupsProtectionAdmin, gnOduCfgForceRmtMaxTx=gnOduCfgForceRmtMaxTx, gnFastEthernetMonPrivateTable=gnFastEthernetMonPrivateTable, gnMUXCfgXTempLicenseEnable=gnMUXCfgXTempLicenseEnable, gnMdmAcmStatXEntry=gnMdmAcmStatXEntry, standardProtectionTable=standardProtectionTable, gnOduMonCurrXEntry=gnOduMonCurrXEntry, gnLHitlessCableDisconnectOKTrap=gnLHitlessCableDisconnectOKTrap, clusterSubRackNum=clusterSubRackNum, gnLTftpOkTrap=gnLTftpOkTrap, membersCarrierId=membersCarrierId, gnGigabitEthernetMonIntervalIDF=gnGigabitEthernetMonIntervalIDF, gnMdmCfgXAcmOperationMode=gnMdmCfgXAcmOperationMode, gnAgnLogFileTime=gnAgnLogFileTime, gnGenCfgGetRemoteData=gnGenCfgGetRemoteData, gnHptCfgTug3Structure1=gnHptCfgTug3Structure1, nplus1StandardPMCurrLastDayPSAC=nplus1StandardPMCurrLastDayPSAC, gnTrailCfgTransmittedJ2=gnTrailCfgTransmittedJ2, gnSSMCfgPrimaryClockSource=gnSSMCfgPrimaryClockSource, gnRODUPowerOkTrap=gnRODUPowerOkTrap, gnVlanEthernetStatMinVlanId=gnVlanEthernetStatMinVlanId, nplus1ProtectingRequestedLinkTx=nplus1ProtectingRequestedLinkTx, gnMdmCfgXAcmMaximumConstellation=gnMdmCfgXAcmMaximumConstellation, gnMstFarEndMonDayBBE=gnMstFarEndMonDayBBE, gnPdhMonCurrBBE=gnPdhMonCurrBBE, gnOduStatusClearLoopTimer=gnOduStatusClearLoopTimer, gnLProtectSwitchFaultTrap=gnLProtectSwitchFaultTrap, gnLIntralinkFaultTrap=gnLIntralinkFaultTrap, gnRExternalAlarm5OffTrap=gnRExternalAlarm5OffTrap, gnOduMonDayXIDF=gnOduMonDayXIDF, gnHptFarEndMonDayBBE=gnHptFarEndMonDayBBE, gnOduMonDayRLThresh1Exceed=gnOduMonDayRLThresh1Exceed, gnSoftwareVersionMUX=gnSoftwareVersionMUX, gnRODUNormalTempTrap=gnRODUNormalTempTrap, gnSoftwareDrawerVersionEntry=gnSoftwareDrawerVersionEntry, gnMdmStatXDefectedBlocks=gnMdmStatXDefectedBlocks, gnMstFarEndMonDayEntry=gnMstFarEndMonDayEntry, gnMstMonIntervalBBE=gnMstMonIntervalBBE, gnRNoConfMismatchTrap=gnRNoConfMismatchTrap, gnOduCfgXRLPerfMonThresh2=gnOduCfgXRLPerfMonThresh2, gnHptFarEndMonIntervalEntry=gnHptFarEndMonIntervalEntry, gnAgnInBandMngXChannelState=gnAgnInBandMngXChannelState, gnOduMonDayXRLThresh1Exceed=gnOduMonDayXRLThresh1Exceed, gnSpiCfgTable=gnSpiCfgTable, gnGenStatDeviceCable=gnGenStatDeviceCable, gnNoSignalReceivedFromODUTrap=gnNoSignalReceivedFromODUTrap, gnHptCfgTug3Structure2=gnHptCfgTug3Structure2, gnGenIdcCfgCLLI=gnGenIdcCfgCLLI, gnGenXMuxLicense=gnGenXMuxLicense, gnRModemFailTrap=gnRModemFailTrap, gnApplicFileId=gnApplicFileId, gnProtectCfgProtectionLockout=gnProtectCfgProtectionLockout, gnTempLicenseClearedTrap=gnTempLicenseClearedTrap, gnAccessStatValidIntervals=gnAccessStatValidIntervals, gnGenCarrierXId=gnGenCarrierXId, gnEthStatisticPkts64OctetMsb=gnEthStatisticPkts64OctetMsb, gnAgnLogFileModStatus=gnAgnLogFileModStatus, gnPdhMonCurrCV=gnPdhMonCurrCV, gnOduStatusXRfuAddress=gnOduStatusXRfuAddress, gnEthStatisticAFrameTransmittedOkLsb=gnEthStatisticAFrameTransmittedOkLsb, gnUcCfgLoopback=gnUcCfgLoopback, gnGenRemoteConnection=gnGenRemoteConnection, topologiesOptionsTable=topologiesOptionsTable, gnRstCfgTransparencyUnscrambled=gnRstCfgTransparencyUnscrambled, gnPdhMonCurrEntry=gnPdhMonCurrEntry, gnAgnLogFileValidEntries=gnAgnLogFileValidEntries, gnRSystemOkTrap=gnRSystemOkTrap, gnRstMonDayTable=gnRstMonDayTable, gnUcCfgTable=gnUcCfgTable, gnOduMonDayEntry=gnOduMonDayEntry, gnOduMonIntervalIdx=gnOduMonIntervalIdx, standardProtectionGroupId=standardProtectionGroupId, gnRFUDelayCalibrationFailure1Trap=gnRFUDelayCalibrationFailure1Trap, gnApplicFileGeneralPurpose=gnApplicFileGeneralPurpose, gnOduCfgRealRxFreqNumber=gnOduCfgRealRxFreqNumber, gnMstCfgEXCThresh=gnMstCfgEXCThresh)
mibBuilder.exportSymbols("CERAGON-MIB", gnVlanEthernetStatMaxVlanId=gnVlanEthernetStatMaxVlanId, gnGenFeatureSupport=gnGenFeatureSupport, gnLProtectSwitchOkTrap=gnLProtectSwitchOkTrap, gnOduMonCurrCombinedXRLThresh1Exceed=gnOduMonCurrCombinedXRLThresh1Exceed, gnLptFarEndMonDayUAS=gnLptFarEndMonDayUAS, gnGigabitEthernetCfgClassifierGroupVlanPriority=gnGigabitEthernetCfgClassifierGroupVlanPriority, gnEthStatisticUndersizePktsMsb=gnEthStatisticUndersizePktsMsb, gnLptStatReceivedJ2=gnLptStatReceivedJ2, protectionTable=protectionTable, gnAgnInExternAlarmEntry=gnAgnInExternAlarmEntry, gnNeighborRemoteRadioIP=gnNeighborRemoteRadioIP, gnOduMonCurrXDayMinXpi=gnOduMonCurrXDayMinXpi, gnOduMonIntervalXMinRL=gnOduMonIntervalXMinRL, gnOduMonIntervalDiversityXEntry=gnOduMonIntervalDiversityXEntry, gnOduCfgXFreqDevider=gnOduCfgXFreqDevider, gnRExternalAlarm7OnTrap=gnRExternalAlarm7OnTrap, gnMdm=gnMdm, gnOduMonCurrCombinedXDayMinRL=gnOduMonCurrCombinedXDayMinRL, gnEowCfgEowLeftEnable=gnEowCfgEowLeftEnable, gnHptCfgMismatchJ1=gnHptCfgMismatchJ1, gnMstCfgSDThresh=gnMstCfgSDThresh, gnGenXAlarmSeverity=gnGenXAlarmSeverity, membersProtectionPriorityLevel=membersProtectionPriorityLevel, gnLinkGroups=gnLinkGroups, gnGenStatInternalCommunication=gnGenStatInternalCommunication, gnSSMCfgClockOutputMute=gnSSMCfgClockOutputMute, gnAgnInternalDownloadEntry=gnAgnInternalDownloadEntry, gnLRemoteCommFaultTrap=gnLRemoteCommFaultTrap, gnHitLessCfgId=gnHitLessCfgId, gnAdminPasswordInDefaultStateCleared=gnAdminPasswordInDefaultStateCleared, gnLExternalAlarm5OnTrap=gnLExternalAlarm5OnTrap, gnTribCfgKLM=gnTribCfgKLM, gnNeighborIpDetectMode=gnNeighborIpDetectMode, gnGenCfgDeviceResetPerfMon=gnGenCfgDeviceResetPerfMon, gnGigabitEthernetMonDayPacketErrorRate=gnGigabitEthernetMonDayPacketErrorRate, gnLHitlessRadioLofTrap=gnLHitlessRadioLofTrap, gnOduStatusXPowerSupply=gnOduStatusXPowerSupply, gnGenXInterfacesLeds=gnGenXInterfacesLeds, gnLptStatEntry=gnLptStatEntry, gnAgnInBandMngMainGNEInterface=gnAgnInBandMngMainGNEInterface, gnGenCfgProductType=gnGenCfgProductType, gnEthStatisticPkts1024to1518OctetMsb=gnEthStatisticPkts1024to1518OctetMsb, gnRLomTrap=gnRLomTrap, gnEthStatisticBroadcastPktsMsb=gnEthStatisticBroadcastPktsMsb, gnAgnNTPCfgUpdateInterval=gnAgnNTPCfgUpdateInterval, nplus1StandardPMIntervalIDF=nplus1StandardPMIntervalIDF, gnEthStatisticPkts128to255OctetMsb=gnEthStatisticPkts128to255OctetMsb, gnRstMonDayOFS=gnRstMonDayOFS, gnUcStatLeftMaxRouteChannel=gnUcStatLeftMaxRouteChannel, gnAgnLogFileDemodStatus=gnAgnLogFileDemodStatus, gnEncryptionSyncLosClearedTrap=gnEncryptionSyncLosClearedTrap, gnRstMonIntervalIDF=gnRstMonIntervalIDF, gnGenIdcStatInterfaceConnector=gnGenIdcStatInterfaceConnector, gnGenXTempLicenseTimer=gnGenXTempLicenseTimer, gnGenXStandardOrg=gnGenXStandardOrg, gnHitLessCfgSwitchingMode=gnHitLessCfgSwitchingMode, gnEthStatisticDroppedPacketsMsb=gnEthStatisticDroppedPacketsMsb, gnGenIdcStatXpicSupport=gnGenIdcStatXpicSupport, gnProtectionLockoutConfiguredTrap=gnProtectionLockoutConfiguredTrap, gnLptMonDayBBE=gnLptMonDayBBE, backplaneSlotMappingFloorId=backplaneSlotMappingFloorId, gnGigabitEthernetMonDayIDF=gnGigabitEthernetMonDayIDF, gnAgnMgrTable=gnAgnMgrTable, gnPdhMonCurrLastDayBBE=gnPdhMonCurrLastDayBBE, gnRstCfgE1waysideChannel=gnRstCfgE1waysideChannel, gnEthStatisticRadioTransmitFramesMsb=gnEthStatisticRadioTransmitFramesMsb, gnTrailCfgLowPathSide=gnTrailCfgLowPathSide, gnLODUPowerOkTrap=gnLODUPowerOkTrap, gnSoftwareVersionODUPostResetVersion=gnSoftwareVersionODUPostResetVersion, gnGenCfgDeviceOperation=gnGenCfgDeviceOperation, powerInputId=powerInputId, gnAgnInternalDownloadStatus=gnAgnInternalDownloadStatus, membersEntry=membersEntry, gnAgnNTPCfgSummerAdjEnd=gnAgnNTPCfgSummerAdjEnd, gnPdhMonCurrLastDayCV=gnPdhMonCurrLastDayCV, gnGenMrmcXId=gnGenMrmcXId, gnGigabitEthernetCfgMuteOnExcError=gnGigabitEthernetCfgMuteOnExcError, gnEthStatisticRadioReceivedFramesLsb=gnEthStatisticRadioReceivedFramesLsb, gnUcStatRightMaxRouteChannel=gnUcStatRightMaxRouteChannel, gnEthStatisticRadioSyncUnlockEventsMsb=gnEthStatisticRadioSyncUnlockEventsMsb, gnTribStmMspType=gnTribStmMspType, gnOduCfgXOduLogPeriod=gnOduCfgXOduLogPeriod, gnOduMonCurrXRLThresh1Exceed=gnOduMonCurrXRLThresh1Exceed, gnRLocTrap=gnRLocTrap, gnGigabitEthernetMonCurrEntry=gnGigabitEthernetMonCurrEntry, gnDiskFreespace=gnDiskFreespace, gnGenChannelBandwidth=gnGenChannelBandwidth, gnLptMonDayTable=gnLptMonDayTable, gnMdmCfgTable=gnMdmCfgTable, gnOduMonDayDiversityXEntry=gnOduMonDayDiversityXEntry, gnRstMonDayEntry=gnRstMonDayEntry, gnMuxCfgXId=gnMuxCfgXId, gnHitLessCfgTable=gnHitLessCfgTable, gnLExternalAlarm1OffTrap=gnLExternalAlarm1OffTrap, gnLODURxLevelOutOfRangeTrap=gnLODURxLevelOutOfRangeTrap, gnLODUTxLevelInRangeTrap=gnLODUTxLevelInRangeTrap, gnNeighborInBandEntry=gnNeighborInBandEntry, gnMuxStatXEntry=gnMuxStatXEntry, gnLInvOkTrap=gnLInvOkTrap, gnAgnInExternAlarmTable=gnAgnInExternAlarmTable, gnOduMonDayDiversityXId=gnOduMonDayDiversityXId, gnOduCfgXEntry=gnOduCfgXEntry, gnRstCfgTestActivate=gnRstCfgTestActivate, gnOduMonCurrMaxRL=gnOduMonCurrMaxRL, gnOduStatusXOduSWPostVer=gnOduStatusXOduSWPostVer, nplus1StandardPMDayCarrierId=nplus1StandardPMDayCarrierId, gnSoftwareVersionAcmLutVerPostResetVer=gnSoftwareVersionAcmLutVerPostResetVer, gnLModemFailTrap=gnLModemFailTrap, gnFastEthernetCfgEntry=gnFastEthernetCfgEntry, gnProtectionLockoutClearededTrap=gnProtectionLockoutClearededTrap, nplus1StandardPMCurrTimeElapsed=nplus1StandardPMCurrTimeElapsed, gnHptMonCurrLastDayUAS=gnHptMonCurrLastDayUAS, gnRTestRunningTrap=gnRTestRunningTrap, gnMstMonCurrLastDayUAS=gnMstMonCurrLastDayUAS, gnGenIdcStatIDUStatus=gnGenIdcStatIDUStatus, gnTrailCfgHoldOffTime=gnTrailCfgHoldOffTime, gnGenIdcCfgSlipModemConnection=gnGenIdcCfgSlipModemConnection, nplus1StandardPMIntervalCarrierId=nplus1StandardPMIntervalCarrierId, gnOduMonCurrDayRLThresh2Exceed=gnOduMonCurrDayRLThresh2Exceed, gnMuxCfgXHwReset=gnMuxCfgXHwReset, nplus1StandardPMDayPSAC=nplus1StandardPMDayPSAC, gnOduMonIntervalXRLThresh1Exceed=gnOduMonIntervalXRLThresh1Exceed, gnHptMonDayBBE=gnHptMonDayBBE, gnAgnLogFileMaxEntries=gnAgnLogFileMaxEntries, xcDrawerEntry=xcDrawerEntry, gnPdhMonDayCV=gnPdhMonDayCV, gnLptMonIntervalIdx=gnLptMonIntervalIdx, gnPdhMonCurrLastDayES=gnPdhMonCurrLastDayES, gnOduMonDayXTable=gnOduMonDayXTable, gnOduStatusXMinTransmitLevel=gnOduStatusXMinTransmitLevel, gnTribCfgProtectionOptions=gnTribCfgProtectionOptions, gnRstMonIntervalTable=gnRstMonIntervalTable, gnGigabitEthernetMonDayTable=gnGigabitEthernetMonDayTable, backplaneSlotMappingDrawerId=backplaneSlotMappingDrawerId, gnAgn=gnAgn, gnOduStatusXFahrenheitTemp=gnOduStatusXFahrenheitTemp, gnSoftwareVersionMrmcVer=gnSoftwareVersionMrmcVer, gnMuxStatXId=gnMuxStatXId, gnMstFarEndMonDayIdx=gnMstFarEndMonDayIdx, gnOID=gnOID, xcDrawerBoardFWVersion=xcDrawerBoardFWVersion, gnRODUPowerFailTrap=gnRODUPowerFailTrap, gnOduMonIntervalCombinedXMaxRL=gnOduMonIntervalCombinedXMaxRL, gnRstMonDayIDF=gnRstMonDayIDF, gnOduCfgXLoopbackOption=gnOduCfgXLoopbackOption, backplaneSlotMappingSubrackId=backplaneSlotMappingSubrackId, gnAgnInterLinkBlockCount=gnAgnInterLinkBlockCount, gnGenStandardOrg=gnGenStandardOrg, gnFastEthernetMonPrivateFrameTooLongs=gnFastEthernetMonPrivateFrameTooLongs, gnWscCfgId=gnWscCfgId, gnOduMonIntervalMaxRL=gnOduMonIntervalMaxRL, protectionGroupId=protectionGroupId, gnHptStatFarEndCurrentBer=gnHptStatFarEndCurrentBer, gnOduMonDayXMinTL=gnOduMonDayXMinTL, gnGigabitEthernetMonIntervalTable=gnGigabitEthernetMonIntervalTable, gnEthStatisticPkts65to127OctetMsb=gnEthStatisticPkts65to127OctetMsb, gnRstCfgEntry=gnRstCfgEntry, addressesPeerIPId=addressesPeerIPId, gnAgnLogFileOduReceiveLevel=gnAgnLogFileOduReceiveLevel, gnGenCfgHeartbeatPeriod=gnGenCfgHeartbeatPeriod, gnRstStatTable=gnRstStatTable, gnTribCfgTable=gnTribCfgTable, protectionNplus1ProtectionMethod=protectionNplus1ProtectionMethod, gnOduCfgXOperation=gnOduCfgXOperation, gnGenXId=gnGenXId, gnRstCfgRstSDThresh=gnRstCfgRstSDThresh, gnFastEthernetMon=gnFastEthernetMon, gnGenIdcCfgHeartbeatPeriod=gnGenIdcCfgHeartbeatPeriod, gnFastEthernetCfg=gnFastEthernetCfg, clusterIPBase=clusterIPBase, gnEncryptionWillTurnOffOnNextRestCleared=gnEncryptionWillTurnOffOnNextRestCleared, gnFastEthernetMonPrivateEntry=gnFastEthernetMonPrivateEntry, gnAgnSNMPCfg=gnAgnSNMPCfg, gnHitLessStatEventCounter=gnHitLessStatEventCounter, gnLInternalDownloadOkTrap=gnLInternalDownloadOkTrap, gnSoftwareVersionEntry=gnSoftwareVersionEntry, gnPdhMonIntervalUAS=gnPdhMonIntervalUAS, gnLptFarEndMonCurrBBE=gnLptFarEndMonCurrBBE, gnRODUSynthUnLockTrap=gnRODUSynthUnLockTrap, gnWscCfgType=gnWscCfgType, gnAccessStatStatus=gnAccessStatStatus, gnGigabitEthernetMonDayEntry=gnGigabitEthernetMonDayEntry, gnAccessStat=gnAccessStat, gnMdmMonitorX=gnMdmMonitorX, gnHitLessCfgManualSwitch=gnHitLessCfgManualSwitch, gnOduCfgXMUTEStatus=gnOduCfgXMUTEStatus, nplus1ProtectingTable=nplus1ProtectingTable, gnAuxGeneralEntry=gnAuxGeneralEntry, gnGenDrawerXName=gnGenDrawerXName, gnGeneral=gnGeneral, gnMstMonIntervalTable=gnMstMonIntervalTable, gnLTestRunningTrap=gnLTestRunningTrap, gnHptCfgTransmittedJ1=gnHptCfgTransmittedJ1, gnSoftwareVersionODU=gnSoftwareVersionODU, gnOduMonDayCombinedXIdx=gnOduMonDayCombinedXIdx, gnMdmCfgXTable=gnMdmCfgXTable, gnAgnExternAlarm=gnAgnExternAlarm, gnRExternalAlarm4OnTrap=gnRExternalAlarm4OnTrap, gnOduMonCurrXMaxTL=gnOduMonCurrXMaxTL, gnLHeartBeatTrap=gnLHeartBeatTrap, gnNMS=gnNMS, gnOduCfgXTxFreqNumLocalRemote=gnOduCfgXTxFreqNumLocalRemote, gnWSNoLOSTrap=gnWSNoLOSTrap, gnMstCfgEntry=gnMstCfgEntry, gnAccessCfgSDThresh=gnAccessCfgSDThresh, nplus1StandardPMCurrPSAC=nplus1StandardPMCurrPSAC, carrierProtectionXCId=carrierProtectionXCId, gnOduMonCurrDiversityXDayRLThresh2Exceed=gnOduMonCurrDiversityXDayRLThresh2Exceed, gnTribCfgLowPathSide=gnTribCfgLowPathSide, gnMdmCfgXHwReset=gnMdmCfgXHwReset, gnLNoLopTrap=gnLNoLopTrap, gnSDHTrap=gnSDHTrap, gnPdhMonCurrLastDaySES=gnPdhMonCurrLastDaySES, gnFastEthernetCfgDynamicBand=gnFastEthernetCfgDynamicBand, gnRstMonIntervalIdx=gnRstMonIntervalIdx, gnLExternalAlarm6OnTrap=gnLExternalAlarm6OnTrap, gnHptMonDaySES=gnHptMonDaySES, gnWscStatBitRateSupport=gnWscStatBitRateSupport, gnLptFarEndMonCurrLastDayES=gnLptFarEndMonCurrLastDayES, gnLastDummy=gnLastDummy, gnHptStatStatus=gnHptStatStatus, gnGenStatDeviceODUStatus=gnGenStatDeviceODUStatus, gnOduCfgXMaxTxFreqNumber=gnOduCfgXMaxTxFreqNumber, gnAgnInterLinkId=gnAgnInterLinkId, gnHptCfgTable=gnHptCfgTable, gnLptStatStatus=gnLptStatStatus, gnAgnFileTransferTftpTotalTimeOut=gnAgnFileTransferTftpTotalTimeOut, gnGenStatDeviceTable=gnGenStatDeviceTable, gnGenIdcStatDryContact=gnGenIdcStatDryContact, gnDiskUsedspace=gnDiskUsedspace, gnRTftpOkTrap=gnRTftpOkTrap, gnAgnInExternAlarmText=gnAgnInExternAlarmText, gnMultiRadioProblemOKTrap=gnMultiRadioProblemOKTrap, gnLScmOkTrap=gnLScmOkTrap, gnSoftwareDrawerVersionModemScript=gnSoftwareDrawerVersionModemScript, gnMdmCfgEntry=gnMdmCfgEntry, gnOduMonIntervalEvent=gnOduMonIntervalEvent, gnOduCfgXRslRouteToConnector=gnOduCfgXRslRouteToConnector, gnGigabitEthernetMonCurrIDF=gnGigabitEthernetMonCurrIDF, gnGeneralXTable=gnGeneralXTable, gnOduMonCurrXMinRL=gnOduMonCurrXMinRL, gnLCableOkTrap=gnLCableOkTrap, gnGenProtocolType=gnGenProtocolType, gnLModemOkTrap=gnLModemOkTrap, protectionProtectingCarrierId=protectionProtectingCarrierId, gnGenStatDevicePowerSupply=gnGenStatDevicePowerSupply, gnLptStatTable=gnLptStatTable, gnRNoUnExpTrap=gnRNoUnExpTrap, xcDrawerBoardPostResetFWVersion=xcDrawerBoardPostResetFWVersion, gnODUtoODUCableOkTrap=gnODUtoODUCableOkTrap, gnLptMonIntervalTable=gnLptMonIntervalTable, gnGenCfgSlipSpeed=gnGenCfgSlipSpeed, gnSSMStatClockUnitType=gnSSMStatClockUnitType, gnOduCfgTransmitLevel=gnOduCfgTransmitLevel)
mibBuilder.exportSymbols("CERAGON-MIB", gnNeighborInBandIP=gnNeighborInBandIP, nplus1StandardPMIntervalIdx=nplus1StandardPMIntervalIdx, gnRInternalDownloadOkTrap=gnRInternalDownloadOkTrap, gnSSMStatCurrentClock=gnSSMStatCurrentClock, gnGenCfgActivateChanLoopback=gnGenCfgActivateChanLoopback, gnACCESSTrap=gnACCESSTrap, gnRstCfgTransparencyJ0=gnRstCfgTransparencyJ0, gnAgnNTPCfgEnableAuth=gnAgnNTPCfgEnableAuth, gnOduMonCurrXMaxRL=gnOduMonCurrXMaxRL, gnOduCfgXRefRsl=gnOduCfgXRefRsl, gnOduMonCurrCombinedXDayRLThresh2Exceed=gnOduMonCurrCombinedXDayRLThresh2Exceed, gnOduMonDayDiversityXRLThresh2Exceed=gnOduMonDayDiversityXRLThresh2Exceed, gnNeighborMateIP=gnNeighborMateIP, gnSoftwareDrawerVersionMUX=gnSoftwareDrawerVersionMUX, gnOduMonCurrCombinedXEntry=gnOduMonCurrCombinedXEntry, gnMstMonIntervalIdx=gnMstMonIntervalIdx, gnProtectXEntry=gnProtectXEntry, gnSoftwareDrawerVersionMUXPostResetVersion=gnSoftwareDrawerVersionMUXPostResetVersion, gnOduMonDayXMaxTL=gnOduMonDayXMaxTL, gnFastEthernetCfgTable=gnFastEthernetCfgTable, gnGenIdcStatId=gnGenIdcStatId, gnAgnInExternAlarmSeverity=gnAgnInExternAlarmSeverity, gnAgnFileTransferDestination=gnAgnFileTransferDestination, gnFastEthernetMonStdHiOutUcastPktsHC=gnFastEthernetMonStdHiOutUcastPktsHC, ceragon=ceragon, gnLProtectCableFaultTrap=gnLProtectCableFaultTrap, gnSSMStatHoldoverPeriod=gnSSMStatHoldoverPeriod, gnTrailCfgLowPathIndex=gnTrailCfgLowPathIndex, gnOduMonIntervalDiversityXTable=gnOduMonIntervalDiversityXTable, gnSSMCfg=gnSSMCfg, gnOduMonCurrXDayRLThresh2Exceed=gnOduMonCurrXDayRLThresh2Exceed, gnAgnLogFileDeviceODUStatus=gnAgnLogFileDeviceODUStatus, gnOduMonIntervalCombinedXEntry=gnOduMonIntervalCombinedXEntry, gnGigabitEthernetCfgSchedulerQueue2Weight=gnGigabitEthernetCfgSchedulerQueue2Weight, gnAgnCurrentAlarmLastChange=gnAgnCurrentAlarmLastChange, gnMdmCfgXClearCounters=gnMdmCfgXClearCounters, gnRFURxLevelPathOutOfRangeClearedTrap=gnRFURxLevelPathOutOfRangeClearedTrap, auxiliaryDrawerBoardReset=auxiliaryDrawerBoardReset, gnAgnCurrentAlarmTimeT=gnAgnCurrentAlarmTimeT, nplus1StandardPMIntervalFSRD=nplus1StandardPMIntervalFSRD, gnLptFarEndMonDayEntry=gnLptFarEndMonDayEntry, gnGigabitEthernetMonCurrDayIDF=gnGigabitEthernetMonCurrDayIDF, gnRFUExtremeTemperatureClearedTrap=gnRFUExtremeTemperatureClearedTrap, gnSpiCfgConnector=gnSpiCfgConnector, gnLptFarEndMonIntervalIdx=gnLptFarEndMonIntervalIdx, gnLptFarEndMonCurrUAS=gnLptFarEndMonCurrUAS, gnOduMonCurrDiversityXTable=gnOduMonCurrDiversityXTable, gnAgnInBandMngXChannelId=gnAgnInBandMngXChannelId, gnOduCfgXRfuMode=gnOduCfgXRfuMode, gnMUXCfgXTempLicenseTimer=gnMUXCfgXTempLicenseTimer, gnEowStatEowRightSupport=gnEowStatEowRightSupport, gnRExternalAlarm3OffTrap=gnRExternalAlarm3OffTrap, gnMdmCfgXIfLoopback=gnMdmCfgXIfLoopback, gnPdhMonIntervalIdx=gnPdhMonIntervalIdx, gnMstMonCurrTable=gnMstMonCurrTable, gnFastEthernetMonPrivateFcsErrors=gnFastEthernetMonPrivateFcsErrors, primeIDCAutoInternalClockDistribution=primeIDCAutoInternalClockDistribution, gnAgnFileTransfer=gnAgnFileTransfer, gnOduStatusSynthesizerVCOLock=gnOduStatusSynthesizerVCOLock, gnMdmStatEntry=gnMdmStatEntry, gnMuxCfgXTable=gnMuxCfgXTable, gnOduMonDayMaxRL=gnOduMonDayMaxRL, gnOduCfgXMinRxFreqNumber=gnOduCfgXMinRxFreqNumber, gnRNoLOSTrap=gnRNoLOSTrap, gnIDU=gnIDU, gnGenIdcCfgSlipSpeed=gnGenIdcCfgSlipSpeed, gnMdmStatXModemWorkTime=gnMdmStatXModemWorkTime, gnHptFarEndMonCurrLastDayES=gnHptFarEndMonCurrLastDayES, gnLptStatFarEndCurrentBer=gnLptStatFarEndCurrentBer, gnGigabitEthernetCfgMuteOnSd=gnGigabitEthernetCfgMuteOnSd, gnSoftwareVersionMrmcPostResetVer=gnSoftwareVersionMrmcPostResetVer, gnFastEthernetMonStdHiTable=gnFastEthernetMonStdHiTable, gnAgnCurrentAlarmCounter=gnAgnCurrentAlarmCounter, gnMstStatTransmitK2=gnMstStatTransmitK2, gnLNoAisTrap=gnLNoAisTrap, gnGenCfgTrapOption=gnGenCfgTrapOption, standardProtectionEntry=standardProtectionEntry, gnAgnMgrSeverityFilter=gnAgnMgrSeverityFilter, gnSoftwareVersionMuxAlteraVer=gnSoftwareVersionMuxAlteraVer, gnNeighborInBandXTable=gnNeighborInBandXTable, gnLRemoteCommOkTrap=gnLRemoteCommOkTrap, gnMuxStatXIfLeds=gnMuxStatXIfLeds, gnAgnInterLinkEntry=gnAgnInterLinkEntry, gnRConfMismatchTrap=gnRConfMismatchTrap, gnUnits=gnUnits, gnHitLessStatAlarmStatus=gnHitLessStatAlarmStatus, gnGigabitEthernetMon=gnGigabitEthernetMon, gnRExternalAlarm8OnTrap=gnRExternalAlarm8OnTrap, gnTrailCfgMismatchJ2=gnTrailCfgMismatchJ2, gnOduMonDayDiversityXTable=gnOduMonDayDiversityXTable, gnRstMonCurrBBE=gnRstMonCurrBBE, auxiliaryDrawerBoardFWVersion=auxiliaryDrawerBoardFWVersion, gnGigabitEthernetCfgClassifierGroupMaxVlanId=gnGigabitEthernetCfgClassifierGroupMaxVlanId, gnHitLessCfgSwitchEnable=gnHitLessCfgSwitchEnable, gnRstMonIntervalUAS=gnRstMonIntervalUAS, gnEowStatId=gnEowStatId, gnAgnInBandMngNetworkId=gnAgnInBandMngNetworkId, gnOduMonCurrTLThresh1Exceed=gnOduMonCurrTLThresh1Exceed, gnGenIdcCfgTrapOption=gnGenIdcCfgTrapOption, gnWscStatChNumber=gnWscStatChNumber, gnOduMonCurrCombinedXMaxRL=gnOduMonCurrCombinedXMaxRL, gnGigabitEthernetCfgTable=gnGigabitEthernetCfgTable, gnUc=gnUc, gnHptMonIntervalTable=gnHptMonIntervalTable, gnPdhMon=gnPdhMon, gnTribCfgLowPathIndex=gnTribCfgLowPathIndex, gnHptCfgExpectedJ1=gnHptCfgExpectedJ1, gnOduCfgForceRmtMuteTx=gnOduCfgForceRmtMuteTx, gnGenCfgCLLI=gnGenCfgCLLI, gnLLomOkTrap=gnLLomOkTrap, primeIDC=primeIDC, gnAgnInBandMngXChannelStatus=gnAgnInBandMngXChannelStatus, gnLExternalAlarm3OffTrap=gnLExternalAlarm3OffTrap)
