#
# PySNMP MIB module TPLINK-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:25:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, TimeTicks, Counter64, NotificationType, Gauge32, Integer32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "TimeTicks", "Counter64", "NotificationType", "Gauge32", "Integer32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Bits", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
tplinkQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 22))
tplinkQosMIB.setRevisions(('2012-12-13 09:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkQosMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkQosMIB.setLastUpdated('201212130930Z')
if mibBuilder.loadTexts: tplinkQosMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkQosMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkQosMIB.setDescription('Private MIB for system time configuration.')
tplinkQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1))
tplinkQosNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 22, 2))
tplinkQosBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 1))
tplinkQosScheduler = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 2))
tplinkQos8021p = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 3))
tplinkQosDSCP = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 4))
tpQosBasicConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 1, 1), )
if mibBuilder.loadTexts: tpQosBasicConfigTable.setStatus('current')
if mibBuilder.loadTexts: tpQosBasicConfigTable.setDescription('A list of qos basic config entries. Here you can configure the port priority.')
tpQosBasicConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpQosBasicConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpQosBasicConfigEntry.setDescription('An entry contains of the information of qos basic config.')
tpQosBasicConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpQosBasicConfigPort.setStatus('current')
if mibBuilder.loadTexts: tpQosBasicConfigPort.setDescription('The physical port number of the switch. ')
tpQosBasicConfigPri = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cos0", 0), ("cos1", 1), ("cos2", 2), ("cos3", 3), ("cos4", 4), ("cos5", 5), ("cos6", 6), ("cos7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpQosBasicConfigPri.setStatus('current')
if mibBuilder.loadTexts: tpQosBasicConfigPri.setDescription('0. Cos0 1. Cos1 2. Cos2 3. Cos3 4. Cos4 5. Cos5 6. Cos6 7. Cos7 Specify the priority for the port.')
tpQosBasicConfigLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpQosBasicConfigLag.setStatus('current')
if mibBuilder.loadTexts: tpQosBasicConfigLag.setDescription('The LAG number which the port belongs to. ')
tpQosSchedulerConfig = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sp-mode", 0), ("wrr-mode", 1), ("sp-wrr-mode", 2), ("equ-mode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpQosSchedulerConfig.setStatus('current')
if mibBuilder.loadTexts: tpQosSchedulerConfig.setDescription("Here you can select the schedule mode for the switch. 0. SP-Mode: Strict-Priority Mode. In this mode, the queue with higher priority will occupy the whole bandwidth. Packets in the queue with lower priority are sent only when the queue with higher priority is empty. 1. WRR-Mode: Weight Round Robin Mode. In this mode, packets in all the queues are sent in order based on the weight value for each queue. You can also config the TC queues' weight with values 1-127. 2. SP+WRR-Mode: Strict-Priority + Weight Round Robin Mode. In this mode, this switch provides two scheduling groups, SP group and WRR group. Queues in SP group and WRR group are scheduled strictly based on strict-priority mode while the queues inside WRR group follow the WRR mode. In SP+WRR mode, the largest TC queue is in the SP group and the others belong to the WRR group and You can also config the TC queues' weight with values 0-127, value 0 means this TC queue is in SP group. In this way, when scheduling queues, the switch allows TC queues in SP group to occupy the whole bandwidth following the SP mode and the other TC queues in the WRR group will take up the bandwidth according to their ratio. 3. Equ-Mode: Equal-Mode. In this mode, all the queues occupy the bandwidth equally.")
tpQosSchedulerWeightTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 2, 2), )
if mibBuilder.loadTexts: tpQosSchedulerWeightTable.setStatus('current')
if mibBuilder.loadTexts: tpQosSchedulerWeightTable.setDescription('A table of the information of qos scheduler queue weight.')
tpQosSchedulerWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 2, 2, 1), ).setIndexNames((0, "TPLINK-QOS-MIB", "tpQosSchedulerTc"))
if mibBuilder.loadTexts: tpQosSchedulerWeightEntry.setStatus('current')
if mibBuilder.loadTexts: tpQosSchedulerWeightEntry.setDescription('An entry contains of the information of qos scheduler queue weight config.')
tpQosSchedulerTc = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tc0", 0), ("tc1", 1), ("tc2", 2), ("tc3", 3), ("tc4", 4), ("tc5", 5), ("tc6", 6), ("tc7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpQosSchedulerTc.setStatus('current')
if mibBuilder.loadTexts: tpQosSchedulerTc.setDescription('Indicates the priority level the packets go egress. The priority levels are labeled as TC.')
tpQosSchedulerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpQosSchedulerWeight.setStatus('current')
if mibBuilder.loadTexts: tpQosSchedulerWeight.setDescription('Indecates the egress queue weight value. The value ranges from 0 to 127.')
tpQos8021pTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 3, 2), )
if mibBuilder.loadTexts: tpQos8021pTable.setStatus('current')
if mibBuilder.loadTexts: tpQos8021pTable.setDescription('A list of qos 8021p entries. Here you can configure 802.1P Priority.')
tpQos8021pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 3, 2, 1), ).setIndexNames((0, "TPLINK-QOS-MIB", "tpQos8021pPriTag"))
if mibBuilder.loadTexts: tpQos8021pEntry.setStatus('current')
if mibBuilder.loadTexts: tpQos8021pEntry.setDescription('An entry contains of the information of qos 8021p.')
tpQos8021pPriTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpQos8021pPriTag.setStatus('current')
if mibBuilder.loadTexts: tpQos8021pPriTag.setDescription('Indicates the precedence level defined by IEEE802.1P. ')
tpQos8021pPriLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tc0", 0), ("tc1", 1), ("tc2", 2), ("tc3", 3), ("tc4", 4), ("tc5", 5), ("tc6", 6), ("tc7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpQos8021pPriLevel.setStatus('current')
if mibBuilder.loadTexts: tpQos8021pPriLevel.setDescription('Indicates the priority level the packets with tag are mapped to. The priority levels are labeled as TC.')
tpQosDSCPEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpQosDSCPEnable.setStatus('current')
if mibBuilder.loadTexts: tpQosDSCPEnable.setDescription('0. disable 1. enable Here you can enable or disable DSCP Priority.')
tpQosDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 4, 2), )
if mibBuilder.loadTexts: tpQosDSCPTable.setStatus('current')
if mibBuilder.loadTexts: tpQosDSCPTable.setDescription('A list of qos DSCP entries. Here you can configure DSCP Priority.')
tpQosDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 4, 2, 1), ).setIndexNames((0, "TPLINK-QOS-MIB", "tpQosDSCPPriTag"))
if mibBuilder.loadTexts: tpQosDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: tpQosDSCPEntry.setDescription('An entry contains of the information of qos DSCP.')
tpQosDSCPPriTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpQosDSCPPriTag.setStatus('current')
if mibBuilder.loadTexts: tpQosDSCPPriTag.setDescription('Indicates the priority determined by the DS region of IP datagram. It ranges from 0 to 63. ')
tpQosDSCPPriLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 22, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cos0", 0), ("cos1", 1), ("cos2", 2), ("cos3", 3), ("cos4", 4), ("cos5", 5), ("cos6", 6), ("cos7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpQosDSCPPriLevel.setStatus('current')
if mibBuilder.loadTexts: tpQosDSCPPriLevel.setDescription('Indicates the priority level the packets with tag are mapped to. The priority levels are labeled as cos0 - cos7.')
mibBuilder.exportSymbols("TPLINK-QOS-MIB", tplinkQosNotifications=tplinkQosNotifications, tpQosDSCPTable=tpQosDSCPTable, tplinkQosScheduler=tplinkQosScheduler, tpQosSchedulerWeightTable=tpQosSchedulerWeightTable, tpQos8021pEntry=tpQos8021pEntry, tplinkQosMIBObjects=tplinkQosMIBObjects, tpQos8021pPriTag=tpQos8021pPriTag, tplinkQosDSCP=tplinkQosDSCP, tpQosSchedulerWeightEntry=tpQosSchedulerWeightEntry, tpQosSchedulerTc=tpQosSchedulerTc, PYSNMP_MODULE_ID=tplinkQosMIB, tplinkQosBasicConfig=tplinkQosBasicConfig, tpQosBasicConfigLag=tpQosBasicConfigLag, tplinkQosMIB=tplinkQosMIB, tpQosDSCPEnable=tpQosDSCPEnable, tpQosDSCPPriTag=tpQosDSCPPriTag, tpQos8021pPriLevel=tpQos8021pPriLevel, tpQosBasicConfigPort=tpQosBasicConfigPort, tpQos8021pTable=tpQos8021pTable, tpQosBasicConfigEntry=tpQosBasicConfigEntry, tplinkQos8021p=tplinkQos8021p, tpQosBasicConfigTable=tpQosBasicConfigTable, tpQosBasicConfigPri=tpQosBasicConfigPri, tpQosSchedulerConfig=tpQosSchedulerConfig, tpQosDSCPPriLevel=tpQosDSCPPriLevel, tpQosSchedulerWeight=tpQosSchedulerWeight, tpQosDSCPEntry=tpQosDSCPEntry)
