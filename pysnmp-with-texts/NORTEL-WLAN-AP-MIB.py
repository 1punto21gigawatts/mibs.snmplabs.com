#
# PySNMP MIB module NORTEL-WLAN-AP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NORTEL-WLAN-AP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:24:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifPhysAddress, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifPhysAddress", "InterfaceIndex", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Bits, iso, Gauge32, Integer32, TimeTicks, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Bits", "iso", "Gauge32", "Integer32", "TimeTicks", "ModuleIdentity", "ObjectIdentity")
MacAddress, TextualConvention, TruthValue, RowStatus, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue", "RowStatus", "PhysAddress", "DisplayString")
wlan2200, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "wlan2200")
nortelWlanApMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 1, 11, 1))
nortelWlanApMib.setRevisions(('2003-07-16 00:00', '2003-09-11 00:00', '2004-04-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nortelWlanApMib.setRevisionsDescriptions(('v001: Conversion to SMIv2', 'v005: Added ntWlanDot11TrapTable. Added ntWlanApMuAssocTrap. Added ntWlanApMuDisAssocTrap.', 'v005: Updates for AP version 1.3.: - Added ntWlanApDot1xAuthenticationFail, ntWlanApMuWEPAuthFail, and ntWlanApMuWPAAuthFail NOTIFICATION-TYPEs. - Added ntWlanApMuAssocTrapEnabled and ntWlanApMuDisAssocTrapEnabled NOTIFICATION-TYPEs. - Added ntWlanApLID, ntWlanApRateSupport, ntWlanApSecurity, ntWlanApQoS, ntWlanApVlan, ntWlanApStats groups. - Added NtWlanApDataRate, NtWlanApWEPKey TEXTUAL-CONVENTIONS. - Added ntWlanSwNNDataFileVer. - Changed enumerations of ntWlanTransferType to ftpDownload(1), tftpDownload(2), ftpUpload(3), and tftpUpload(4). - Added ntWlanFileTransferStatus. - Added ntWlanDot11dWorldModeEnabled and ntWlanDot11ClosedSystem. - Added ntWlanDot118021xBcastKeyRefresh, ntWlanDot118021xSessKeyRefresh, and ntWlanDot118021xReAuthRefresh. - Added ntWlanDot11SecondaryAuthServer, ntWlanDot11SecondaryAuthPort, ntWlanDot11SecondaryAuthKey, ntWlanDot11SecondaryAuthRetransmit, and ntWlanDot11SecondaryAuthTimeout.',))
if mibBuilder.loadTexts: nortelWlanApMib.setLastUpdated('200404120000Z')
if mibBuilder.loadTexts: nortelWlanApMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: nortelWlanApMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: nortelWlanApMib.setDescription("Nortel Wireless LAN AP MIB Copyright 2003-2004 Nortel Networks, Inc. All rights reserved. This Nortel Networks SNMP Management Information Base Specification (Specification) embodies Nortel Networks' confidential and proprietary intellectual property. Nortel Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
ntWlanApSys = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1))
ntWlanApLineMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2))
ntWlanApPortMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3))
ntWlanApFileTransferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4))
ntWlanApResetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 5))
ntWlanApIpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6))
ntWlanApDot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7))
ntWlanApTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8))
ntWlanApLID = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 9))
ntWlanApRateSupport = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10))
ntWlanApSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11))
ntWlanApQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12))
ntWlanApVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13))
ntWlanApStats = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14))
class NtWlanApDataRate(TextualConvention, Integer32):
    description = 'A data rate, measured in increments of 500Kb/s from 1 Mb/s to 63.5 Mb/s. For example, a value of 2 means a data rate of 1 Mb/s, while a value of 5 means a data rate of 2.5 Mb/s.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(2, 127)

class NtWlanApWEPKey(TextualConvention, OctetString):
    description = 'A WEP key. Valid sizes are 5, 13, and 16 octets, corresponding to WEP key lengths of 64, 128, and 152 bits, respectively. A length of 0 is also allowed, so that retrieval of objects containing a valid key value can return an empty string so as to avoid key disclosure.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), )
ntWlanSwHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanSwHardwareVer.setStatus('current')
if mibBuilder.loadTexts: ntWlanSwHardwareVer.setDescription('Hardware version of the main board.')
ntWlanSwBootRomVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanSwBootRomVer.setStatus('current')
if mibBuilder.loadTexts: ntWlanSwBootRomVer.setDescription('Boot ROM code version of the main board.')
ntWlanSwOpCodeVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanSwOpCodeVer.setStatus('current')
if mibBuilder.loadTexts: ntWlanSwOpCodeVer.setDescription('Operation code version of the main board.')
ntWlanSwCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanSwCountryCode.setStatus('current')
if mibBuilder.loadTexts: ntWlanSwCountryCode.setDescription('Country code of the AP. AL-ALBANIA, DZ-ALGERIA, AR-ARGENTINA, AM-ARMENIA, AU-AUSTRALIA, AT-AUSTRIA, AZ-AZERBAIJAN, BH-BAHRAIN, BY-BELARUS, BE-BELGIUM, BZ-BELIZE, BO-BOLVIA, BR-BRAZIL, BN-BRUNEI_DARUSSALAM, BG-BULGARIA, CA-CANADA, CL-CHILE, CN-CHINA, CO-COLOMBIA, CR-COSTA_RICA, HR-CROATIA, CY-CYPRUS, CZ-CZECH_REPUBLIC, DK-DENMARK, DO-DOMINICAN_REPUBLIC, EC-ECUADOR, EG-EGYPT, EE-ESTONIA, FI-FINLAND, FR-FRANCE, GE-GEORGIA, DE-GERMANY, GR-GREECE, GT-GUATEMALA, HK-HONG_KONG, HU-HUNGARY, IS-ICELAND, IN-INDIA, ID-INDONESIA, IR-IRAN, IE-IRELAND, IL-ISRAEL, IT-ITALY, JP-JAPAN, JO-JORDAN, KZ-KAZAKHSTAN, KP-NORTH_KOREA, KR-KOREA_REPUBLIC, KW-KUWAIT, LV-LATVIA, LB-LEBANON, LI-LIECHTENSTEIN, LT-LITHUANIA, LU-LUXEMBOURG, MO-MACAU, MK-MACEDONIA, MY-MALAYSIA, MX-MEXICO, MC-MONACO, MA-MOROCCO, NL-NETHERLANDS, NZ-NEW_ZEALAND, NO-NORWAY, OM-OMAN, PK-PAKISTAN, PA-PANAMA, PE-PERU, PH-PHILIPPINES, PL-POLAND, PT-PORTUGAL, PR-PUERTO_RICO, QA-QATAR, RO-ROMANIA, RU-RUSSIA, SA-SAUDI_ARABIA, SG-SINGAPORE, SK-SLOVAK_REPUBLIC, SI-SLOVENIA, ZA-SOUTH_AFRICA, ES-SPAIN, SE-SWEDEN, CH-SWITZERLAND, SY-SYRIA, TW-TAIWAN, TH-THAILAND, TR-TURKEY, UA-UKRAINE, AE-UNITED_ARAB_EMIRATES, GB-UNITED_KINGDOM, US-UNITED_STATES, UY-URUGUAY, VE-VENEZUELA, VN-VIETNAM')
ntWlanSwNNDataFileVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanSwNNDataFileVer.setStatus('current')
if mibBuilder.loadTexts: ntWlanSwNNDataFileVer.setDescription('Nortel Networks Customization Data File Version.')
ntWlanLineTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1), )
if mibBuilder.loadTexts: ntWlanLineTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanLineTable.setDescription('Table of descriptive and status information about configuration of each RS-232 line in this system')
ntWlanLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanLineIndex"))
if mibBuilder.loadTexts: ntWlanLineEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanLineEntry.setDescription('An entry in the table, containing information about configuration in one RS232 line of the Access Point.')
ntWlanLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanLineIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanLineIndex.setDescription('This is defined as RS-232 index.')
ntWlanLineDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanLineDataBits.setStatus('current')
if mibBuilder.loadTexts: ntWlanLineDataBits.setDescription('This is defined as number of data bits for the RS232 interface.')
ntWlanLineParity = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("none", 99), ("odd", 1), ("even", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanLineParity.setStatus('current')
if mibBuilder.loadTexts: ntWlanLineParity.setDescription('This is defined as parity of the RS232 interface.')
ntWlanLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanLineSpeed.setStatus('current')
if mibBuilder.loadTexts: ntWlanLineSpeed.setDescription('This is defined as the speed of the RS-232 interface.')
ntWlanLineStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanLineStopBits.setStatus('current')
if mibBuilder.loadTexts: ntWlanLineStopBits.setDescription('This is defined as the number of stop bits for the RS-232 interface.')
ntWlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1), )
if mibBuilder.loadTexts: ntWlanPortTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortTable.setDescription("Table of descriptive and status information about configuration of each switch port (including expansion slot) in this system. This table also contains information about each trunk (similar to Cisco's EtherChannel).")
ntWlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanPortIndex"))
if mibBuilder.loadTexts: ntWlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
ntWlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntWlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
ntWlanPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortName.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortName.setDescription('Indicates the port name. This is same as ifAlias in the IF-MIB (RFC2863 or later).')
ntWlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseMiniGBIC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortType.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortType.setDescription('Indicates the port type.')
ntWlanPortSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortSpeedDpxCfg.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortSpeedDpxCfg.setDescription('Set the port speed and duplex mode as follows: halfDuplex10(2) - 10Mbps and half duplex mode fullDuplex10(3) - 10Mbps and full duplex mode halfDuplex100(4) - 100Mbps and half duplex mode fullDuplex100(5) - 100Mbps and full duplex mode halfDuplex1000(6) - 1000Mbps and half duplex mode fullDuplex1000(7) - 1000Mbps and full duplex mode hundredBaseTX port can be set as halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) hundredBaseFX port can be set as halfDuplex100(4) fullDuplex100(5) thousandBaseSX port can be set as halfDuplex1000(6) fullDuplex1000(7) The actual operating speed and duplex of the port is given by portSpeedDpxStatus.')
ntWlanPortFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortFlowCtrlCfg.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortFlowCtrlCfg.setDescription('(1) Flow control mechanism is enabled. If the port type is hundredBaseTX or thousandBaseSX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, the port uses IEEE 802.3x flow control mechanism. If the port type is hundredBaseFX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, Flow control mechanism will not function. (2) Flow control mechanism is disabled. (3) Flow control mechanism is backPressure. when the port is in fullDuplex mode.This flow control mechanism will not function. (4) Flow control mechanism is IEEE 802.3x flow control. when the port is in halfDuplex mode.This flow control mechanism will not function. hundredBaseTX and thousandBaseSX port can be set as: enabled(1), disabled(2), backPressure(3), dot3xFlowControl(4). hundredBaseFX port can be set as: enabled(1), disabled(2), backPressure(3). The actual flow control mechanism is used given by portFlowCtrlStatus.')
ntWlanPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("portCap10half", 99), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortCapabilities.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortCapabilities.setDescription('Port capabilities.')
ntWlanPortAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortAutonegotiation.setDescription('Whether autonegotiation is enabled.')
ntWlanPortSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortSpeedDpxStatus.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortSpeedDpxStatus.setDescription('The operating speed and duplex mode of the switched port. If this index is a trunk, the speed is the speed of its individual members. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
ntWlanPortFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanPortFlowCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: ntWlanPortFlowCtrlStatus.setDescription('(2) BackPressure flow control machanism is used. (3) IEEE 802.3 flow control machanism is used. (4) Flow control mechanism is disabled. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
ntWlanTransferStart = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("go", 1), ("nogo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanTransferStart.setStatus('current')
if mibBuilder.loadTexts: ntWlanTransferStart.setDescription('Set to go(1) to start a transfer.')
ntWlanTransferType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ftpDownload", 1), ("tftpDownload", 2), ("ftpUpload", 3), ("tftpUpload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanTransferType.setStatus('current')
if mibBuilder.loadTexts: ntWlanTransferType.setDescription('Type of file to transfer.')
ntWlanFileType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firmware", 1), ("config", 2), ("nortelConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanFileType.setStatus('current')
if mibBuilder.loadTexts: ntWlanFileType.setDescription('Type of file to transfer.')
ntWlanSrcFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanSrcFile.setStatus('current')
if mibBuilder.loadTexts: ntWlanSrcFile.setDescription('The source file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
ntWlanDestFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDestFile.setStatus('current')
if mibBuilder.loadTexts: ntWlanDestFile.setDescription('The destination file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
ntWlanFileServer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanFileServer.setStatus('current')
if mibBuilder.loadTexts: ntWlanFileServer.setDescription("The IP address of the TFTP server for transfer when a download is next requested via this MIB. This value is set to `0.0.0.0' when no IP address has been specified.")
ntWlanUserName = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanUserName.setStatus('current')
if mibBuilder.loadTexts: ntWlanUserName.setDescription('The username specified for an FTP Transfer.')
ntWlanPassword = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanPassword.setStatus('current')
if mibBuilder.loadTexts: ntWlanPassword.setDescription('The password specified for an FTP Transfer.')
ntWlanFileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("fail", 4), ("invalidSource", 5), ("invalidDestination", 6), ("outOfMemory", 7), ("outOfSpace", 8), ("fileNotFound", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanFileTransferStatus.setStatus('current')
if mibBuilder.loadTexts: ntWlanFileTransferStatus.setDescription('The status of the current FTP Transfer process.')
ntWlanRestartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanRestartOpCodeFile.setStatus('current')
if mibBuilder.loadTexts: ntWlanRestartOpCodeFile.setDescription('Name of op-code file for start-up.')
ntWlanRestartControl = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanRestartControl.setStatus('current')
if mibBuilder.loadTexts: ntWlanRestartControl.setDescription('Setting this object to warmBoot(2) causes the device to restart the application software with current configuration parameters saved in non-volatile memory. Setting this object to coldBoot(3) causes the device to reinitialize configuration parameters in non-volatile memory to default values and restart the application software. When the device is running normally, this variable has a value of running(1).')
ntWlanNetConfigIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanNetConfigIPAddress.setStatus('current')
if mibBuilder.loadTexts: ntWlanNetConfigIPAddress.setDescription('The IP address of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use DHCP to try to figure out what these values should be. If DHCP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
ntWlanNetConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanNetConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: ntWlanNetConfigSubnetMask.setDescription('The subnet mask of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use DHCP to try to figure out what these values should be. If DHCP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
ntWlanNetDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanNetDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: ntWlanNetDefaultGateway.setDescription('The IP Address of the default gateway. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
ntWlanIpHttpState = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanIpHttpState.setStatus('current')
if mibBuilder.loadTexts: ntWlanIpHttpState.setDescription('Whether HTTP is enabled.')
ntWlanIpHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanIpHttpPort.setStatus('current')
if mibBuilder.loadTexts: ntWlanIpHttpPort.setDescription('The port number for HTTP.')
ntWlanDot11Phy = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4))
ntWlanDot11PhyOperationTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1), )
if mibBuilder.loadTexts: ntWlanDot11PhyOperationTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11PhyOperationTable.setDescription('Table of descriptive and status information about configuration of each radio of the AP.')
ntWlanDot11PhyOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanDot11Index"))
if mibBuilder.loadTexts: ntWlanDot11PhyOperationEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11PhyOperationEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
ntWlanDot11Index = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanDot11Index.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11Index.setDescription('Radio index of the AP.')
ntWlanDot11TurboModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("none", 99), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanDot11TurboModeEnabled.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11TurboModeEnabled.setDescription("This attribute, when true, shall indicate that the nortel's propietory turbo mode option is enabled. The default value of this attribute shall be false.")
ntWlanDot11PreambleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("twelveSymbols", 99), ("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11PreambleLength.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11PreambleLength.setDescription('This attribute determines whether or not a short or a long preamble is used to delineate 802.11 frames.')
ntWlanDot11dWorldModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11dWorldModeEnabled.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11dWorldModeEnabled.setDescription('This attribute determines whether 802.11d world mode is enabled for this radio.')
ntWlanDot11ClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11ClosedSystem.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11ClosedSystem.setDescription('This attribute determines whether the radio operates as a closed system. When configured as a closed system, the SSID is not included when broadcasting periodic beacon frames.')
ntWlanDot11AuthenticationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5))
ntWlanDot118021xSupport = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xSupport.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot118021xSupport.setDescription('This attribute, when true(1), indicates that the Enterprise Access Point supports the 802.1x authentication algorithm.')
ntWlanDot118021xRequired = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xRequired.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot118021xRequired.setDescription('This attribute, when true(1), indicates that the Enterprise Access Point requires successful 802.1x authentication for any clients accessing the network.')
ntWlanDot118021xBcastKeyRefresh = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xBcastKeyRefresh.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot118021xBcastKeyRefresh.setDescription('The broadcast key refresh rate.')
ntWlanDot118021xSessKeyRefresh = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xSessKeyRefresh.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot118021xSessKeyRefresh.setDescription('The session key refresh rate.')
ntWlanDot118021xReAuthRefresh = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot118021xReAuthRefresh.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot118021xReAuthRefresh.setDescription('The re-authentication refresh rate.')
ntWlanDot11AuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6), )
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServerTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServerTable.setDescription('Table of descriptive and status information about configuration of each authentication server.')
ntWlanDot11AuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanDot11ServerIndex"))
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServerEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServerEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
ntWlanDot11ServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanDot11ServerIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11ServerIndex.setDescription('Radio index of the AP.')
ntWlanDot11AuthenticationServer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServer.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AuthenticationServer.setDescription('This values indicates the IP address of the authentication server.')
ntWlanDot11AuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationPort.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AuthenticationPort.setDescription('This values indicates the UDP Port used by the primary authentication server.')
ntWlanDot11AuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationKey.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AuthenticationKey.setDescription('This values indicates the shared key used by the authentication server.')
ntWlanDot11AuthenticationRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationRetransmit.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AuthenticationRetransmit.setDescription('This values indicates the retransmit timer length used by the authentication server.')
ntWlanDot11AuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11AuthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AuthenticationTimeout.setDescription('This values indicates the Timeout value(sec) used by the authentication server.')
ntWlanDot11SecondaryAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthServer.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthServer.setDescription('This values indicates the IP address of the secondary authentication server.')
ntWlanDot11SecondaryAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthPort.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthPort.setDescription('This values indicates the UDP Port used by the primary secondary authentication server.')
ntWlanDot11SecondaryAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthKey.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthKey.setDescription('This values indicates the shared key used by the secondary authentication server.')
ntWlanDot11SecondaryAuthRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthRetransmit.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthRetransmit.setDescription('This values indicates the retransmit timer length used by the secondary authentication server.')
ntWlanDot11SecondaryAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11SecondaryAuthTimeout.setDescription('This values indicates the Timeout value(sec) used by the secondary authentication server.')
ntWlanDot11FilterTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7), )
if mibBuilder.loadTexts: ntWlanDot11FilterTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11FilterTable.setDescription('Table of status information about each configured MAC Address Filtering Entry.')
ntWlanDot11FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanDot11FilterIndex"))
if mibBuilder.loadTexts: ntWlanDot11FilterEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11FilterEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
ntWlanDot11FilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanDot11FilterIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11FilterIndex.setDescription('Filter index.')
ntWlanDot11FilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11FilterAddress.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11FilterAddress.setDescription('This values indicates the MAC address of the filter entry.')
ntWlanDot11FilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 31))).clone(namedValues=NamedValues(("allowed", 30), ("denied", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanDot11FilterStatus.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11FilterStatus.setDescription('This values indicates the Status of the filter entry. Ifallowed, the client is allowed access to the network. If disallowed, the no frames will be forwarded to the network from the client.')
ntWlanDot11TrapTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9), )
if mibBuilder.loadTexts: ntWlanDot11TrapTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11TrapTable.setDescription('Table of status information for Association and Disassociation Trap')
ntWlanDot11TrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanDot11InterfaceIndex"))
if mibBuilder.loadTexts: ntWlanDot11TrapEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11TrapEntry.setDescription('An entry in the table, containing information for the association and disassociation trap.')
ntWlanDot11InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ntWlanDot11InterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11InterfaceIndex.setDescription('Interface index.')
ntWlanDot11AssociationStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanDot11AssociationStationAddress.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AssociationStationAddress.setDescription('This values indicates the MAC address of the Mobile Unit associating with this Access Point.')
ntWlanDot11DisassociationStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanDot11DisassociationStationAddress.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11DisassociationStationAddress.setDescription('This values indicates the MAC address of the Mobile Unit no longer associated with this Access Point.')
ntWlanDot11AssociationMU = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 7, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanDot11AssociationMU.setStatus('current')
if mibBuilder.loadTexts: ntWlanDot11AssociationMU.setDescription('This values indicates the number of Mobile Units associated on the Interface')
ntWlanApTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0))
ntWlanApDot1xAuthenticationFail = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 101)).setObjects(("IF-MIB", "ifPhysAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationStationAddress"))
if mibBuilder.loadTexts: ntWlanApDot1xAuthenticationFail.setStatus('current')
if mibBuilder.loadTexts: ntWlanApDot1xAuthenticationFail.setDescription('Indicates that a Mobile Unit failed 802.1x authentication. - ifPhysAddress is the MAC address of the Access Point sending this trap message. - ntWlanDot11AssociationStationAddress is the MAC address of the Mobile Unit.')
ntWlanApMuAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 111)).setObjects(("IF-MIB", "ifPhysAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationStationAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationMU"))
if mibBuilder.loadTexts: ntWlanApMuAssocTrap.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMuAssocTrap.setDescription('Indicates that there is a Mobile Unit associating with this Access Point. - ifPhysAddress is the MAC address of the Access Point sending this trap message. - ntWlanDot11AssociationStationAddress is the MAC address of the Mobile Unit. Note: If two or more Mobile Units associate with the Access Point at the same time, ntWlanDot11AssociationStationAddress belongs to the last Mobile Unit. - ntWlanDot11AssociationMU is the number of Mobile Units currently associating with this Access Point.')
ntWlanApMuDisAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 112)).setObjects(("IF-MIB", "ifPhysAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11DisassociationStationAddress"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationMU"))
if mibBuilder.loadTexts: ntWlanApMuDisAssocTrap.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMuDisAssocTrap.setDescription('Indicates that there is one Mobile Unit no longer associating with this Access Point anymore. - ifPhysAddress is the MAC address of the Access Point sending this trap message. - ntWlanDot11DisassociationStationAddress is the MAC address of the Mobile Unit. Note: If two or more Mobile Units un-associate with the Access Point at the same time, ntWlanDot11DisassociationStationAddress belongs to the last Mobile Unit. - ntWlanDot11AssociationMU is the number of Mobile Units currently associating with this Access Point.')
ntWlanApMuWEPAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 113)).setObjects(("IF-MIB", "ifIndex"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationStationAddress"))
if mibBuilder.loadTexts: ntWlanApMuWEPAuthFail.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMuWEPAuthFail.setDescription('Indicates that WEP authentication of a Mobile Unit failed. - ifIndex identifies the radio to which the MU attempted to connect. - ntWlanDot11AssociationStationAddress is the MAC address of the Mobile Unit that attempted to connect.')
ntWlanApMuWPAAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 0, 114)).setObjects(("IF-MIB", "ifIndex"), ("NORTEL-WLAN-AP-MIB", "ntWlanDot11AssociationStationAddress"))
if mibBuilder.loadTexts: ntWlanApMuWPAAuthFail.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMuWPAAuthFail.setDescription('Indicates that WPA authentication of a Mobile Unit failed. - ifIndex identifies the radio to which the MU attempted to connect. - ntWlanDot11AssociationStationAddress is the MAC address of the Mobile Unit that attempted to connect.')
ntWlanApMuAssocTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApMuAssocTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMuAssocTrapEnabled.setDescription('This object controls whether ntWlanApMuAssocTrap notifications will be generated when an MU associates with the AP. If this object is true(1), then the notification will be generated. If it is false, the notification will not be generated.')
ntWlanApMuDisAssocTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 8, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApMuDisAssocTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMuDisAssocTrapEnabled.setDescription('This object controls whether ntWlanApMuDisAssocTrap notifications will be generated when an MU disassociates from the AP. If this object is true(1), then the notification will be generated. If it is false, the notification will not be generated.')
ntWlanApLIDCheckEtherLinkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApLIDCheckEtherLinkEnabled.setStatus('current')
if mibBuilder.loadTexts: ntWlanApLIDCheckEtherLinkEnabled.setDescription('Indicates whether checks for ethernet link integrity are enabled.')
ntWlanApLIDCheckIPLinkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApLIDCheckIPLinkEnabled.setStatus('current')
if mibBuilder.loadTexts: ntWlanApLIDCheckIPLinkEnabled.setDescription('Indicates whether checks for IP link integrity are enabled.')
ntWlanApLIDCheckIpLinkAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApLIDCheckIpLinkAddress.setStatus('current')
if mibBuilder.loadTexts: ntWlanApLIDCheckIpLinkAddress.setDescription('The IP address to ping to check IP link integrity.')
ntWlanApRateSupportTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1), )
if mibBuilder.loadTexts: ntWlanApRateSupportTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanApRateSupportTable.setDescription('Table to configure which hardware-supported rates are actively supported, and which are basic rates required for an MU to connect to an AP. Entries must exist in this table for every hardware-supported rate for each appropriate ifIndex value.')
ntWlanApRateSupportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApRateSupportIfIndex"), (0, "NORTEL-WLAN-AP-MIB", "ntWlanApRateSupportSpeed"))
if mibBuilder.loadTexts: ntWlanApRateSupportEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanApRateSupportEntry.setDescription('An entry in the ntWlanApRateSupportTable.')
ntWlanApRateSupportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntWlanApRateSupportIfIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanApRateSupportIfIndex.setDescription('The ifIndex value of the radio.')
ntWlanApRateSupportSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1, 1, 2), NtWlanApDataRate())
if mibBuilder.loadTexts: ntWlanApRateSupportSpeed.setStatus('current')
if mibBuilder.loadTexts: ntWlanApRateSupportSpeed.setDescription('A supported data rate.')
ntWlanApRateSupportLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("supported", 1), ("supportedBasic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApRateSupportLevel.setStatus('current')
if mibBuilder.loadTexts: ntWlanApRateSupportLevel.setDescription('This object indicates whether a specific rate is currently supported, and if so, whether it is a basic rate. off - indicates that this rate is not currently supported. supported - indicates that this rate is currently supported, but is not required to be supported by an MU in order to connect to this radio. supportedBasic - indicates that this rate is currently supported as a basic rate, and an MU must also support this rate in order to connect to this radio.')
ntWlanApSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1), )
if mibBuilder.loadTexts: ntWlanApSecurityTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityTable.setDescription('Table to configure WEP and WPA security parameters. Entries are per-radio.')
ntWlanApSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApSecurityIfIndex"))
if mibBuilder.loadTexts: ntWlanApSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityEntry.setDescription('An entry in the ntWlanApSecurityTable.')
ntWlanApSecurityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntWlanApSecurityIfIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityIfIndex.setDescription('The ifIndex value of the radio.')
ntWlanApSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityEnabled.setDescription('Indicates whether security is enabled for a radio.')
ntWlanApSecurityWEPAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("openSystem", 0), ("sharedKey", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPAuthType.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWEPAuthType.setDescription('The WEP authentication type.')
ntWlanApSecurityWEPKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wepKey64", 0), ("wepKey128", 1), ("wepKey152", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKeyLength.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWEPKeyLength.setDescription('Indicates the WEP key length being used.')
ntWlanApSecurityWEPActiveKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPActiveKey.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWEPActiveKey.setDescription('Indicates which WEP key is currently in use.')
ntWlanApSecurityWEPKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 6), NtWlanApWEPKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey1.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey1.setDescription('The first WEP key. Retrieval of this object will always return an empty string.')
ntWlanApSecurityWEPKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 7), NtWlanApWEPKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey2.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey2.setDescription('The second WEP key. Retrieval of this object will always return an empty string.')
ntWlanApSecurityWEPKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 8), NtWlanApWEPKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey3.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey3.setDescription('The third WEP key. Retrieval of this object will always return an empty string.')
ntWlanApSecurityWEPKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 9), NtWlanApWEPKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey4.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWEPKey4.setDescription('The fourth WEP key. Retrieval of this object will always return an empty string.')
ntWlanApSecurityWPASupport = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("supported", 1), ("required", 2), ("wepOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWPASupport.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWPASupport.setDescription('Indicates whether WPA security is supported.')
ntWlanApSecurityWPAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamic", 0), ("preSharedKey", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWPAMode.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWPAMode.setDescription('The WPA mode.')
ntWlanApSecurityWPAPreSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(63, 63)).setFixedLength(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWPAPreSharedKey.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWPAPreSharedKey.setDescription('The WPA pre-shared key.')
ntWlanApSecurityWPAMcastCypherMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wep", 0), ("tkip", 1), ("aes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApSecurityWPAMcastCypherMode.setStatus('current')
if mibBuilder.loadTexts: ntWlanApSecurityWPAMcastCypherMode.setDescription('The multicast cypher mode.')
ntWlanApQoSMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("etherSrc", 1), ("etherDst", 2), ("ethertype", 3), ("directPriorityMap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSMode.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSMode.setDescription('This object indicates the QoS mode being used. off - indicates QoS features are disabled. etherSrc - indicates that the ethernet source MAC address of received packets is mapped to an egress queue. etherDst - indicates that the ethernet destination MAC address of received packets is mapped to an egress queue. etherType - indicates that the ethernet type of of received packets is mapped to an egress queue. directPriorityMap - indicates that the priority value of received packets is used to map directly to an egress queue.')
ntWlanApQoSEtherTypeToQueueTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2), )
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueTable.setDescription('Table to configure mappings from ethernet type to queue number.')
ntWlanApQoSEtherTypeToQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApQoSEtherTypeToQueueIndex"))
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueEntry.setDescription('An entry in the ntWlanApQoSTable.')
ntWlanApQoSEtherTypeToQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueIndex.setDescription('An ethernet type, to be mapped to a queue.')
ntWlanApQoSEtherTypeToQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueNumber.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueNumber.setDescription('The queue number to which the ether type is mapped.')
ntWlanApQoSEtherTypeToQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSEtherTypeToQueueRowStatus.setDescription('This object is used to create and destroy entries in this table.')
ntWlanApQoSMACToQueueTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3), )
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueTable.setDescription('Table to configure mappings from ethernet MAC address to queue number.')
ntWlanApQoSMACToQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApQoSMACToQueueAddress"))
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueEntry.setDescription('An entry in the ntWlanApQoSTable.')
ntWlanApQoSMACToQueueAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueAddress.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueAddress.setDescription('An ethernet MAC address, to be mapped to a queue.')
ntWlanApQoSMACToQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueNumber.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueNumber.setDescription('The queue number to which the MAC address is mapped.')
ntWlanApQoSMACToQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 12, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: ntWlanApQoSMACToQueueRowStatus.setDescription('This object is used to create and destroy entries in this table.')
ntWlanApVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanEnabled.setDescription('This object indicates whether Vlan support is enabled.')
ntWlanApVlanTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 2), )
if mibBuilder.loadTexts: ntWlanApVlanTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanTable.setDescription('Table to configure the default VID per-radio.')
ntWlanApVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 2, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApVlanIfIndex"))
if mibBuilder.loadTexts: ntWlanApVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanEntry.setDescription('An entry in the ntWlanApVlanTable.')
ntWlanApVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntWlanApVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanIfIndex.setDescription('The ifIndex value of the radio.')
ntWlanApVlanDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApVlanDefaultVid.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanDefaultVid.setDescription('The default VID of the radio.')
ntWlanApVlanMUMACToVidTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 3), )
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidTable.setDescription('Table containing mappings from Mobile Unit MAC addresses to VLAN ID values.')
ntWlanApVlanMUMACToVidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 3, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApVlanMUMACToVidAddress"))
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidEntry.setDescription('An entry in the ntWlanApVlanMUMACToVidTable.')
ntWlanApVlanMUMACToVidAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidAddress.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidAddress.setDescription('The ethernet MAC address of a Mobile Unit.')
ntWlanApVlanMUMACToVidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidNumber.setStatus('current')
if mibBuilder.loadTexts: ntWlanApVlanMUMACToVidNumber.setDescription("The VID to which this Mobile Unit's MAC is mapped.")
ntWlanApMUStatsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1), )
if mibBuilder.loadTexts: ntWlanApMUStatsTable.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMUStatsTable.setDescription('Table of per-Mobile Unit statistics.')
ntWlanApMUStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1), ).setIndexNames((0, "NORTEL-WLAN-AP-MIB", "ntWlanApMUStatsMUAddress"))
if mibBuilder.loadTexts: ntWlanApMUStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMUStatsEntry.setDescription('An entry in the ntWlanApMUStatsTable.')
ntWlanApMUStatsMUAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntWlanApMUStatsMUAddress.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMUStatsMUAddress.setDescription('The ethernet MAC address of the Mobile Unit.')
ntWlanApMUStatsPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanApMUStatsPacketsIn.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMUStatsPacketsIn.setDescription('A count of the packets received from this MU.')
ntWlanApMUStatsPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanApMUStatsPacketsOut.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMUStatsPacketsOut.setDescription('A count of the packets sent to this MU.')
ntWlanApMUStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanApMUStatsOctetsIn.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMUStatsOctetsIn.setDescription('A count of the octets received from this MU.')
ntWlanApMUStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 11, 1, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWlanApMUStatsOctetsOut.setStatus('current')
if mibBuilder.loadTexts: ntWlanApMUStatsOctetsOut.setDescription('A count of the octets sent to this MU.')
mibBuilder.exportSymbols("NORTEL-WLAN-AP-MIB", ntWlanApRateSupportTable=ntWlanApRateSupportTable, ntWlanApRateSupport=ntWlanApRateSupport, ntWlanDot11Index=ntWlanDot11Index, ntWlanDot11AuthenticationEntry=ntWlanDot11AuthenticationEntry, ntWlanDot11ClosedSystem=ntWlanDot11ClosedSystem, ntWlanRestartControl=ntWlanRestartControl, ntWlanPortFlowCtrlStatus=ntWlanPortFlowCtrlStatus, ntWlanTransferType=ntWlanTransferType, ntWlanLineParity=ntWlanLineParity, ntWlanDot118021xRequired=ntWlanDot118021xRequired, ntWlanDot11ServerIndex=ntWlanDot11ServerIndex, ntWlanApMUStatsEntry=ntWlanApMUStatsEntry, ntWlanDot11InterfaceIndex=ntWlanDot11InterfaceIndex, ntWlanApQoSMACToQueueRowStatus=ntWlanApQoSMACToQueueRowStatus, ntWlanApRateSupportLevel=ntWlanApRateSupportLevel, ntWlanLineStopBits=ntWlanLineStopBits, ntWlanDot11FilterEntry=ntWlanDot11FilterEntry, ntWlanDot11SecondaryAuthPort=ntWlanDot11SecondaryAuthPort, ntWlanSwBootRomVer=ntWlanSwBootRomVer, ntWlanDot11TrapEntry=ntWlanDot11TrapEntry, ntWlanApVlanMUMACToVidNumber=ntWlanApVlanMUMACToVidNumber, ntWlanDot11FilterAddress=ntWlanDot11FilterAddress, ntWlanApQoSMACToQueueNumber=ntWlanApQoSMACToQueueNumber, ntWlanApSecurityEnabled=ntWlanApSecurityEnabled, ntWlanApQoSEtherTypeToQueueNumber=ntWlanApQoSEtherTypeToQueueNumber, ntWlanApMuAssocTrapEnabled=ntWlanApMuAssocTrapEnabled, ntWlanPassword=ntWlanPassword, ntWlanDot11AuthenticationServerEntry=ntWlanDot11AuthenticationServerEntry, ntWlanApPortMgnt=ntWlanApPortMgnt, ntWlanApTraps0=ntWlanApTraps0, ntWlanApRateSupportIfIndex=ntWlanApRateSupportIfIndex, NtWlanApWEPKey=NtWlanApWEPKey, ntWlanPortSpeedDpxCfg=ntWlanPortSpeedDpxCfg, ntWlanPortAutonegotiation=ntWlanPortAutonegotiation, ntWlanApQoSMACToQueueEntry=ntWlanApQoSMACToQueueEntry, ntWlanFileServer=ntWlanFileServer, ntWlanApLineMgnt=ntWlanApLineMgnt, ntWlanNetConfigSubnetMask=ntWlanNetConfigSubnetMask, ntWlanApSecurityWPAMode=ntWlanApSecurityWPAMode, ntWlanDot11FilterStatus=ntWlanDot11FilterStatus, ntWlanLineSpeed=ntWlanLineSpeed, ntWlanApSecurityWEPKeyLength=ntWlanApSecurityWEPKeyLength, ntWlanLineDataBits=ntWlanLineDataBits, ntWlanApTraps=ntWlanApTraps, ntWlanApRateSupportSpeed=ntWlanApRateSupportSpeed, ntWlanApMUStatsOctetsOut=ntWlanApMUStatsOctetsOut, ntWlanApSecurityWEPAuthType=ntWlanApSecurityWEPAuthType, ntWlanPortFlowCtrlCfg=ntWlanPortFlowCtrlCfg, ntWlanApMuWEPAuthFail=ntWlanApMuWEPAuthFail, ntWlanDot118021xSessKeyRefresh=ntWlanDot118021xSessKeyRefresh, ntWlanApMUStatsTable=ntWlanApMUStatsTable, ntWlanIpHttpPort=ntWlanIpHttpPort, ntWlanTransferStart=ntWlanTransferStart, ntWlanApDot1xAuthenticationFail=ntWlanApDot1xAuthenticationFail, ntWlanApVlanMUMACToVidTable=ntWlanApVlanMUMACToVidTable, ntWlanApSecurityIfIndex=ntWlanApSecurityIfIndex, ntWlanApQoS=ntWlanApQoS, ntWlanDot11PhyOperationTable=ntWlanDot11PhyOperationTable, ntWlanFileTransferStatus=ntWlanFileTransferStatus, ntWlanDot118021xSupport=ntWlanDot118021xSupport, ntWlanApMuDisAssocTrap=ntWlanApMuDisAssocTrap, ntWlanDestFile=ntWlanDestFile, ntWlanDot11FilterIndex=ntWlanDot11FilterIndex, ntWlanLineTable=ntWlanLineTable, ntWlanApSecurityWEPActiveKey=ntWlanApSecurityWEPActiveKey, ntWlanSwOpCodeVer=ntWlanSwOpCodeVer, ntWlanApVlanEntry=ntWlanApVlanEntry, ntWlanApVlanEnabled=ntWlanApVlanEnabled, ntWlanSwNNDataFileVer=ntWlanSwNNDataFileVer, ntWlanSwHardwareVer=ntWlanSwHardwareVer, ntWlanDot11TrapTable=ntWlanDot11TrapTable, ntWlanNetConfigIPAddress=ntWlanNetConfigIPAddress, ntWlanFileType=ntWlanFileType, ntWlanDot11SecondaryAuthRetransmit=ntWlanDot11SecondaryAuthRetransmit, ntWlanPortCapabilities=ntWlanPortCapabilities, ntWlanDot11AuthenticationServerTable=ntWlanDot11AuthenticationServerTable, ntWlanApQoSEtherTypeToQueueTable=ntWlanApQoSEtherTypeToQueueTable, ntWlanNetDefaultGateway=ntWlanNetDefaultGateway, ntWlanApMuAssocTrap=ntWlanApMuAssocTrap, ntWlanApQoSMACToQueueTable=ntWlanApQoSMACToQueueTable, NtWlanApDataRate=NtWlanApDataRate, ntWlanApQoSEtherTypeToQueueRowStatus=ntWlanApQoSEtherTypeToQueueRowStatus, ntWlanApMUStatsPacketsIn=ntWlanApMUStatsPacketsIn, nortelWlanApMib=nortelWlanApMib, ntWlanApVlanIfIndex=ntWlanApVlanIfIndex, ntWlanPortType=ntWlanPortType, ntWlanDot11AuthenticationServer=ntWlanDot11AuthenticationServer, ntWlanApSecurityWEPKey4=ntWlanApSecurityWEPKey4, ntWlanApSys=ntWlanApSys, ntWlanApDot11=ntWlanApDot11, ntWlanDot11AssociationMU=ntWlanDot11AssociationMU, ntWlanApVlanTable=ntWlanApVlanTable, ntWlanApSecurityWEPKey1=ntWlanApSecurityWEPKey1, ntWlanApQoSMACToQueueAddress=ntWlanApQoSMACToQueueAddress, ntWlanApQoSMode=ntWlanApQoSMode, ntWlanLineEntry=ntWlanLineEntry, ntWlanSrcFile=ntWlanSrcFile, ntWlanApVlan=ntWlanApVlan, ntWlanApMUStatsPacketsOut=ntWlanApMUStatsPacketsOut, ntWlanApLID=ntWlanApLID, ntWlanDot11AuthenticationTimeout=ntWlanDot11AuthenticationTimeout, ntWlanPortName=ntWlanPortName, ntWlanDot11Phy=ntWlanDot11Phy, ntWlanDot11FilterTable=ntWlanDot11FilterTable, ntWlanDot11PhyOperationEntry=ntWlanDot11PhyOperationEntry, ntWlanDot118021xBcastKeyRefresh=ntWlanDot118021xBcastKeyRefresh, ntWlanDot11SecondaryAuthServer=ntWlanDot11SecondaryAuthServer, ntWlanDot11PreambleLength=ntWlanDot11PreambleLength, ntWlanApFileTransferMgt=ntWlanApFileTransferMgt, ntWlanApQoSEtherTypeToQueueEntry=ntWlanApQoSEtherTypeToQueueEntry, ntWlanApLIDCheckIpLinkAddress=ntWlanApLIDCheckIpLinkAddress, ntWlanApRateSupportEntry=ntWlanApRateSupportEntry, ntWlanApSecurityTable=ntWlanApSecurityTable, ntWlanPortSpeedDpxStatus=ntWlanPortSpeedDpxStatus, ntWlanApMuDisAssocTrapEnabled=ntWlanApMuDisAssocTrapEnabled, ntWlanRestartOpCodeFile=ntWlanRestartOpCodeFile, ntWlanPortEntry=ntWlanPortEntry, ntWlanApVlanMUMACToVidAddress=ntWlanApVlanMUMACToVidAddress, ntWlanApMUStatsMUAddress=ntWlanApMUStatsMUAddress, ntWlanDot11AssociationStationAddress=ntWlanDot11AssociationStationAddress, ntWlanApStats=ntWlanApStats, ntWlanDot11AuthenticationPort=ntWlanDot11AuthenticationPort, ntWlanApSecurityWPAMcastCypherMode=ntWlanApSecurityWPAMcastCypherMode, ntWlanApSecurityWPAPreSharedKey=ntWlanApSecurityWPAPreSharedKey, ntWlanDot11SecondaryAuthKey=ntWlanDot11SecondaryAuthKey, ntWlanDot11DisassociationStationAddress=ntWlanDot11DisassociationStationAddress, ntWlanApLIDCheckEtherLinkEnabled=ntWlanApLIDCheckEtherLinkEnabled, ntWlanDot11TurboModeEnabled=ntWlanDot11TurboModeEnabled, ntWlanApQoSEtherTypeToQueueIndex=ntWlanApQoSEtherTypeToQueueIndex, ntWlanDot11dWorldModeEnabled=ntWlanDot11dWorldModeEnabled, ntWlanApIpMgt=ntWlanApIpMgt, ntWlanApVlanDefaultVid=ntWlanApVlanDefaultVid, ntWlanIpHttpState=ntWlanIpHttpState, ntWlanSwCountryCode=ntWlanSwCountryCode, ntWlanDot11AuthenticationKey=ntWlanDot11AuthenticationKey, ntWlanApSecurity=ntWlanApSecurity, ntWlanDot11AuthenticationRetransmit=ntWlanDot11AuthenticationRetransmit, ntWlanApResetMgt=ntWlanApResetMgt, ntWlanUserName=ntWlanUserName, ntWlanApSecurityWEPKey3=ntWlanApSecurityWEPKey3, ntWlanApSecurityEntry=ntWlanApSecurityEntry, ntWlanApLIDCheckIPLinkEnabled=ntWlanApLIDCheckIPLinkEnabled, ntWlanDot11SecondaryAuthTimeout=ntWlanDot11SecondaryAuthTimeout, ntWlanApSecurityWPASupport=ntWlanApSecurityWPASupport, ntWlanApMUStatsOctetsIn=ntWlanApMUStatsOctetsIn, ntWlanPortTable=ntWlanPortTable, ntWlanApVlanMUMACToVidEntry=ntWlanApVlanMUMACToVidEntry, ntWlanApSecurityWEPKey2=ntWlanApSecurityWEPKey2, ntWlanDot118021xReAuthRefresh=ntWlanDot118021xReAuthRefresh, ntWlanLineIndex=ntWlanLineIndex, ntWlanApMuWPAAuthFail=ntWlanApMuWPAAuthFail, ntWlanPortIndex=ntWlanPortIndex, PYSNMP_MODULE_ID=nortelWlanApMib)
