#
# PySNMP MIB module RUCKUS-ZD-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-ZD-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ruckusZDSystemModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusZDSystemModule")
RuckusAdminStatus, RuckusSSID, RuckusdB, RuckusNameString, RuckusCountryCode, RuckusRadioMode = mibBuilder.importSymbols("RUCKUS-TC-MIB", "RuckusAdminStatus", "RuckusSSID", "RuckusdB", "RuckusNameString", "RuckusCountryCode", "RuckusRadioMode")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, ObjectIdentity, Gauge32, Unsigned32, iso, Integer32, ModuleIdentity, TimeTicks, Bits, NotificationType, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Gauge32", "Unsigned32", "iso", "Integer32", "ModuleIdentity", "TimeTicks", "Bits", "NotificationType", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
MacAddress, DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
ruckusZDSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1))
if mibBuilder.loadTexts: ruckusZDSystemMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusZDSystemMIB.setOrganization('Ruckus Wireless, Inc.')
if mibBuilder.loadTexts: ruckusZDSystemMIB.setContactInfo('Ruckus Wireless, Inc. Postal: 880 W Maude Ave Sunnyvale, CA 94085 USA EMail: support@ruckuswireless.com Phone: +1-650-265-4200')
if mibBuilder.loadTexts: ruckusZDSystemMIB.setDescription('Ruckus ZD System mib')
ruckusZDSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1))
ruckusZDSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1))
ruckusZDSystemName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemName.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemName.setDescription('System name')
ruckusZDSystemIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPAddr.setDescription('IP Address')
ruckusZDSystemMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemMacAddr.setDescription('MAC Address')
ruckusZDSystemUptime = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemUptime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemUptime.setDescription('Up time')
ruckusZDSystemModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemModel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemModel.setDescription('Model')
ruckusZDSystemLicensedAPs = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemLicensedAPs.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemLicensedAPs.setDescription('Licensed APs')
ruckusZDSystemMaxSta = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMaxSta.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemMaxSta.setDescription('Number of max stations allowed.')
ruckusZDSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSerialNumber.setDescription('Serial number')
ruckusZDSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemVersion.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemVersion.setDescription('Software version')
ruckusZDSystemCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 20), RuckusCountryCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemCountryCode.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemCountryCode.setDescription('Country code')
ruckusZDSystemAdminName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 25), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ruckusZDSystemAdminName.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemAdminName.setDescription('Administrator account name.')
ruckusZDSystemAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 26), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ruckusZDSystemAdminPassword.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemAdminPassword.setDescription('Administrator account password.')
ruckusZDSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("standby", 2), ("noredundancy", 3))).clone('noredundancy')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatus.setDescription('current zd system status: if enable smart redundancy, the status is master or standby, if disable smart redundancy,the status is noredundancy')
ruckusZDSystemPeerConnectedStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2))).clone('disconnected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemPeerConnectedStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemPeerConnectedStatus.setDescription('peer zd connected status')
ruckusZDSystemExpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5))
ruckusZDSystemNEId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemNEId.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemNEId.setDescription('NE Id.')
ruckusZDSystemManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemManufacturer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemManufacturer.setDescription('Manufacturer.')
ruckusZDSystemSoftwareName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemSoftwareName.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSoftwareName.setDescription('Software name.')
ruckusZDSystemCPUUtil = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemCPUUtil.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemCPUUtil.setDescription('CPU utilization')
ruckusZDSystemMemoryUtil = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMemoryUtil.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemMemoryUtil.setDescription('Memory utilization')
ruckusZDSystemMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 60), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMemorySize.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemMemorySize.setDescription('Memory size')
ruckusZDSystemFlashFreeSize = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 65), Unsigned32()).setUnits('KByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemFlashFreeSize.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemFlashFreeSize.setDescription('Flash free size')
ruckusZDSystemMgmtVlanID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMgmtVlanID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemMgmtVlanID.setDescription('Management Vlan ID')
ruckusZDSystemtCPUSpeed = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 71), Unsigned32()).setUnits('BogoMIPS').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemtCPUSpeed.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemtCPUSpeed.setDescription('CPU Speed')
ruckusZDSystemtFlashModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemtFlashModel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemtFlashModel.setDescription('Flash Model')
ruckusZDSystemtMemModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemtMemModel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemtMemModel.setDescription('Memory Model')
ruckusZDSystemStartTime = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 74), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStartTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStartTime.setDescription('System Startup Time')
ruckusZDSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemCurrentTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemCurrentTime.setDescription('System current time.')
ruckusZDSystemAPFirmwareServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 81), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemAPFirmwareServer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemAPFirmwareServer.setDescription('AP firmware download server.')
ruckusZDSystemAPConfigServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 82), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemAPConfigServer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemAPConfigServer.setDescription('AP configuration server.')
ruckusZDSystemIDSAllowedESSID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 85), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowedESSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowedESSID.setDescription('List of allowed ESSID, separated by semiclon.')
ruckusZDSystemIDSAllowBSSID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 86), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowBSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowBSSID.setDescription('List of allowed BSSID, separated by semicolon.')
ruckusZDSystemIDSAllowOUI = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 87), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowOUI.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowOUI.setDescription('List of allowed OUI, separated by semicolon.')
ruckusZDSystemBandwidthUtilValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 90), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemBandwidthUtilValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemBandwidthUtilValve.setDescription('Number of system bandwidth utilization percent.')
ruckusZDSystemDropPacketRateValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemDropPacketRateValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemDropPacketRateValve.setDescription('Number of system drop packets rate percent.')
ruckusZDSystemCPUUtilValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 92), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemCPUUtilValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemCPUUtilValve.setDescription('Number of system CPU utilization percent.')
ruckusZDSystemMemUtilValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 95), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemMemUtilValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemMemUtilValve.setDescription('Number of system memory utilization percent.')
ruckusZDSystemOnlineStaValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 96), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemOnlineStaValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemOnlineStaValve.setDescription('Number of system online STA.')
ruckusZDSystemACLocationLongitude = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 97), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemACLocationLongitude.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemACLocationLongitude.setDescription('AC longitude.')
ruckusZDSystemACLocationLatitude = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemACLocationLatitude.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemACLocationLatitude.setDescription('AC latitude.')
ruckusZDSystemDHCPServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemDHCPServer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemDHCPServer.setDescription('System DHCP server enable or disable')
ruckusZDAPCPUvalve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 120), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAPCPUvalve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAPCPUvalve.setDescription("AP's CPU utilization valve for sending trap")
ruckusZDAPMemoryvalve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 121), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAPMemoryvalve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAPMemoryvalve.setDescription("AP'S Memory utilization valve for sending trap")
ruckusZDHeartBeatStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 122), TruthValue().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDHeartBeatStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDHeartBeatStatus.setDescription('Current heartbeat on-off status.')
ruckusZDHeartBeatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 123), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDHeartBeatPeriod.setStatus('current')
if mibBuilder.loadTexts: ruckusZDHeartBeatPeriod.setDescription('Heartbeat interval between ZD and NMS(unit:second).')
ruckusZDSystemIPTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8), )
if mibBuilder.loadTexts: ruckusZDSystemIPTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPTable.setDescription('ZD System IP table.')
ruckusZDSystemIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusZDSystemIPEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPEntry.setDescription('Specifies IP configuration entry. ifIndex always be 1')
ruckusZDSystemIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("dualstack", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPVersion.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPVersion.setDescription('current ip version ')
ruckusZDSystemIPAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPAddrMode.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPAddrMode.setDescription('IP address mode, static ip or by dhcp.')
ruckusZDSystemIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPAddress.setDescription('IP address.')
ruckusZDSystemIPAddrNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPAddrNetmask.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPAddrNetmask.setDescription('IP address netmask.')
ruckusZDSystemIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPGateway.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPGateway.setDescription('Gateway IP address.')
ruckusZDSystemIPPrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPPrimaryDNS.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPPrimaryDNS.setDescription('Primary DNS IP address.')
ruckusZDSystemIPSecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPSecondaryDNS.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPSecondaryDNS.setDescription('Secondary DNS IP address.')
ruckusZDSystemIPV6AddressModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto-configuration", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6AddressModel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPV6AddressModel.setDescription('current ipv6 address model ')
ruckusZDSystemIPV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6Address.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPV6Address.setDescription('IPV6 Address')
ruckusZDSystemIPV6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPV6PrefixLen.setDescription('Specifies the ip v6 address prefix length if the ruckusZDSystemIPV6AddrModel is set to static(2).')
ruckusZDSystemIPV6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6Gateway.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPV6Gateway.setDescription('Specifies the gateway ipv6 address if the ruckusZDSystemIPV6AddrModel is set to static(2).')
ruckusZDSystemIPV6PrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6PrimaryDNS.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPV6PrimaryDNS.setDescription('Specifies primary DNS IPV6 address.')
ruckusZDSystemIPV6SecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6SecondaryDNS.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemIPV6SecondaryDNS.setDescription('Specifies secondary DNS IPV6 address.')
ruckusZDSystemServices = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12))
ruckusZDSystemNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 3))
ruckusZDSystemTimeWithNTP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemTimeWithNTP.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemTimeWithNTP.setDescription('Enable the Zone Director system to synchronize its system time with NTP.')
ruckusZDSystemTimeNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemTimeNTPServer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemTimeNTPServer.setDescription('The NTP Server (URL) the Zone Director system to synchronize it system time with.')
ruckusZDSystemSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5))
ruckusZDSystemEmailTriggerEnable = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemEmailTriggerEnable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemEmailTriggerEnable.setDescription('Send an email message when an alarm is triggered for the Zone Director system. Make sure the ruckusZDSystemEmailAddress and ruckusZDSystemSMTPServerPort are not empty before enable it.')
ruckusZDSystemEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemEmailAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemEmailAddress.setDescription('The Email Address receive the alarm message from the Zone Director system.')
ruckusZDSystemSMTPServerName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPServerName.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSMTPServerName.setDescription('The SMTP Server Name.')
ruckusZDSystemSMTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPServerPort.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSMTPServerPort.setDescription('The SMTP Server Port.')
ruckusZDSystemSMTPAuthUsername = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPAuthUsername.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSMTPAuthUsername.setDescription('SMTP Authentication Username.')
ruckusZDSystemSMTPAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPAuthPassword.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSMTPAuthPassword.setDescription('MTP Authentication Password.')
ruckusZDSystemFromEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemFromEmailAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemFromEmailAddress.setDescription('The From Email Address .')
ruckusZDSystemSMTPEncryptionOptions = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tls", 2), ("starttls", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPEncryptionOptions.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSMTPEncryptionOptions.setDescription('SMTP Encryption Options .')
ruckusZDSystemSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 8))
ruckusZDSystemLogWithSysLog = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLogWithSysLog.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemLogWithSysLog.setDescription('Enable the Zone Director system to log its system events with sysLog facility.')
ruckusZDSystemSysLogServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 8, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSysLogServer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSysLogServer.setDescription("The sysLog Server IP or IPV6 address ,the Zone Director system reports its' system events to it.")
ruckusZDSystemFlexMaster = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 9))
ruckusZDSystemFlexMasterEnable = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterEnable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterEnable.setDescription('Enable FlexMaster Network Management for the Zone Director system.')
ruckusZDSystemFlexMasterServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterServer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterServer.setDescription('The FlexMaster Server URL to connect the Zone Director system .')
ruckusZDSystemFlexMasterInterval = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterInterval.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterInterval.setDescription('The FlexMaster Interval to connect the Zone Director (Minutes).')
ruckusZDSystemStpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 12))
ruckusZDSystemStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 12, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemStpStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStpStatus.setDescription('Enable/disable spanning tree.')
ruckusZDSystemSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15))
ruckusZDSystemSNMPTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3))
ruckusZDSystemSNMPTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPTrapEnable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPTrapEnable.setDescription('Enable the SNMP Trap facility for the Zone Director system.')
ruckusZDSystemSNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv2", 1), ("snmpv3", 2))).clone('snmpv2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPTrapVersion.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPTrapVersion.setDescription('Config the SNMP Trap version for the Zone Director system.')
ruckusZDSystemSNMPV2TrapSvrTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35), )
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrTable.setDescription('ZD SNMPV2 trap server table.')
ruckusZDSystemSNMPV2TrapSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35, 1), ).setIndexNames((0, "RUCKUS-ZD-SYSTEM-MIB", "ruckusZDSystemSNMPV2TrapSvrIndex"))
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrEntry.setDescription('Specifies SNMPV2 Trap server configuration entry.index be 1-4.')
ruckusZDSystemSNMPV2TrapSvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrIndex.setDescription('Config the SNMPV2 Trap server index.')
ruckusZDSystemSNMPV2TrapServer = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapServer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapServer.setDescription('The SNMP V2 Trap Server4 IP (V4 or V6) address for the Zone Director system.')
ruckusZDSystemSNMPV2TrapSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrRowStatus.setDescription('Create, Delete snmp V2 trap server table. 1,ACTIVE state,only for read; 4,CREATEANDGO, create a new table; 6,DESTROY, delete a existing table.')
ruckusZDSystemSNMPV3TrapSvrTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36), )
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrTable.setDescription('ZD SNMPV3 trap server table.')
ruckusZDSystemSNMPV3TrapSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1), ).setIndexNames((0, "RUCKUS-ZD-SYSTEM-MIB", "ruckusZDSystemSNMPV3TrapSvrIndex"))
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrEntry.setDescription('Specifies SNMPV3 Trap server configuration entry.index be 1-4.')
ruckusZDSystemSNMPV3TrapSvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrIndex.setDescription('Config the SNMPV3 Trap server index.')
ruckusZDSystemSNMPV3TrapServer = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapServer.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapServer.setDescription('The SNMP V2 Trap Server4 IP (V4 or V6) address for the Zone Director system.')
ruckusZDSystemSNMPV3TrapUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapUser.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapUser.setDescription('The SNMP V3 Trap Username .')
ruckusZDSystemSNMPV3TrapAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapAuth.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapAuth.setDescription('Config the SNMP V3 Trap Authentication type.')
ruckusZDSystemSNMPV3TrapAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapAuthKey.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapAuthKey.setDescription('The SNMP V3 Trap Authentication Pass Phrase .the read value is ********.')
ruckusZDSystemSNMPV3TrapPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("des", 1), ("aes", 2), ("none", 3))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapPrivacy.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapPrivacy.setDescription('Config the SNMP V3 Trap Privacy type.')
ruckusZDSystemSNMPV3TrapPrivacyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapPrivacyKey.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapPrivacyKey.setDescription('The SNMP V3 Trap Privacy Phrase .the read value is ********.')
ruckusZDSystemSNMPV3TrapSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrRowStatus.setDescription('Create, Delete snmp trap server table. 1,ACTIVE state,only for read; 4,CREATEANDGO, create a new table; 6,DESTROY, delete a existing table.')
ruckusZDSystemSNMPV2Table = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5), )
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2Table.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2Table.setDescription('ZD SNMPV2 table.')
ruckusZDSystemSNMPV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2Entry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2Entry.setDescription('Specifies SNMP V2 configuration entry.ifIndex always be 1.')
ruckusZDSystemSNMPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPEnable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPEnable.setDescription('Enable/disable SNMP.')
ruckusZDSystemSNMPROCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPROCommunity.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPROCommunity.setDescription('SNMP read-only community.the read value is ********.')
ruckusZDSystemSNMPRWCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPRWCommunity.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPRWCommunity.setDescription('SNMP read-write community.the read value is ********.')
ruckusZDSystemSNMPSysContact = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPSysContact.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPSysContact.setDescription('SNMP read-write community.')
ruckusZDSystemSNMPSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPSysLocation.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPSysLocation.setDescription('SNMP read-write community.')
ruckusZDSystemSNMPV3Table = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8), )
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Table.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Table.setDescription('ZD SNMPV3 table.')
ruckusZDSystemSNMPV3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Entry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Entry.setDescription('Specifies SNMP V3 configuration entry.ifIndex always be 1')
ruckusZDSystemSNMPV3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Enable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Enable.setDescription('Enable/disable SNMPV3.')
ruckusZDSystemSNMPV3RoUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoUser.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoUser.setDescription('The SNMP V3 Ro Username .')
ruckusZDSystemSNMPV3RoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoAuth.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoAuth.setDescription('Config the SNMP V3 Ro Authentication type.')
ruckusZDSystemSNMPV3RoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoAuthKey.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoAuthKey.setDescription('The SNMP V3 Ro Authentication Pass Phrase .the read value is ********.')
ruckusZDSystemSNMPV3RoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("des", 1), ("aes", 2), ("none", 3))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoPrivacy.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoPrivacy.setDescription('Config the SNMP V3 Ro Privacy type.')
ruckusZDSystemSNMPV3RoPrivacyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoPrivacyKey.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoPrivacyKey.setDescription('The SNMP V3 Ro Privacy Phrase .the read value is ********.')
ruckusZDSystemSNMPV3RwUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwUser.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwUser.setDescription('The SNMP V3 Rw Username .')
ruckusZDSystemSNMPV3RwAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwAuth.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwAuth.setDescription('Config the SNMP V3 Ro Authentication type.')
ruckusZDSystemSNMPV3RwAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwAuthKey.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwAuthKey.setDescription('The SNMP V3 Rw Authentication Pass Phrase .the read value is ********.')
ruckusZDSystemSNMPV3RwPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("des", 1), ("aes", 2), ("none", 3))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwPrivacy.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwPrivacy.setDescription('Config the SNMP V3 Rw Privacy type.')
ruckusZDSystemSNMPV3RwPrivacyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwPrivacyKey.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwPrivacyKey.setDescription('The SNMP V3 Rw Privacy Phrase .the read value is ********.')
ruckusZDSystemLoadBalanceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20))
ruckusZDSystemLoadBalanceStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceStatus.setDescription('Enable/disable load balance service.')
ruckusZDSystemLoadBalanceUserThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceUserThreshold.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceUserThreshold.setDescription('Load balance user threshold.')
ruckusZDSystemLoadBalanceUserDifference = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceUserDifference.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceUserDifference.setDescription('Load balance user difference.')
ruckusZDSystemLoadBalanceTrafficThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceTrafficThreshold.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceTrafficThreshold.setDescription('Load balance traffic threshold.')
ruckusZDSystemLoadBalanceTrafficDifference = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 5), Unsigned32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceTrafficDifference.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceTrafficDifference.setDescription('Load balance traffic difference.')
ruckusZDSystemLoadBalanceType = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("traffic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceType.setDescription('Load balance type.')
ruckusZDSystemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15))
ruckusZDSystemStatsNumAP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumAP.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsNumAP.setDescription('Number of AP')
ruckusZDSystemStatsNumSta = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumSta.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsNumSta.setDescription('Number of authorized client devices')
ruckusZDSystemStatsNumRogue = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRogue.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRogue.setDescription('Number of rogue devices')
ruckusZDSystemStatsNumRogueKnown = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRogueKnown.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRogueKnown.setDescription('Number of known rogue devices')
ruckusZDSystemStatsWLANTotalRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxPkts.setDescription('Total received packets of wireless interfaces')
ruckusZDSystemStatsWLANTotalRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxBytes.setDescription('Total received bytes of wireless interfaces')
ruckusZDSystemStatsWLANTotalRxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxMulticast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxMulticast.setDescription('Total received multicast packets of wireless interfaces')
ruckusZDSystemStatsWLANTotalTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxPkts.setDescription('Total transmitted packets of wireless interfaces')
ruckusZDSystemStatsWLANTotalTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxBytes.setDescription('Total transmitted bytes of wireless interfaces')
ruckusZDSystemStatsWLANTotalTxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxMulticast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxMulticast.setDescription('Total transmitted multicast packets of wireless interfaces')
ruckusZDSystemStatsWLANTotalTxFail = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxFail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxFail.setDescription('Total transmitted fail packets of wireless interfaces')
ruckusZDSystemStatsWLANTotalTxRetry = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxRetry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxRetry.setDescription('Total transmitted retry packets of wireless interfaces')
ruckusZDSystemStatsCPUUtil = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsCPUUtil.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsCPUUtil.setDescription('CPU utilization')
ruckusZDSystemStatsMemoryUtil = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsMemoryUtil.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsMemoryUtil.setDescription('Memory utilization')
ruckusZDSystemStatsNumRegisteredAP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRegisteredAP.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRegisteredAP.setDescription('Number of registered AP')
ruckusZDSystemStatsWLANTotalAssocFail = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalAssocFail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalAssocFail.setDescription('Total number of failed station associations.')
ruckusZDSystemStatsWLANTotalRxErrFrm = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxErrFrm.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxErrFrm.setDescription('Total number of errornous downlink frames.')
ruckusZDSystemStatsWLANTotalTxDroppedPkt = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxDroppedPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxDroppedPkt.setDescription('Total number of dropped downlink packets.')
ruckusZDSystemStatsWLANTotalTxErrFrm = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxErrFrm.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxErrFrm.setDescription('Total number of errornous downlink frames.')
ruckusZDSystemStatsWLANTotalTxDroppedFrm = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxDroppedFrm.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxDroppedFrm.setDescription('Total number of dropped downlink frames.')
ruckusZDSystemStatsLanTxRate = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsLanTxRate.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsLanTxRate.setDescription('Lan transmit rate kbyte/s in last 5 minutes .')
ruckusZDSystemStatsLanRxRate = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsLanRxRate.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsLanRxRate.setDescription('Lan received rate kbyte/s in last 5 minutes .')
ruckusZDSystemStatsAllNumSta = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsAllNumSta.setStatus('current')
if mibBuilder.loadTexts: ruckusZDSystemStatsAllNumSta.setDescription('Number of All client devices')
ruckusZDEthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18))
ruckusZDEthNum = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthNum.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthNum.setDescription('Number of ethernet devices.')
ruckusZDEthTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2), )
if mibBuilder.loadTexts: ruckusZDEthTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthTable.setDescription('ZD Ethernet device table.')
ruckusZDEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1), ).setIndexNames((0, "RUCKUS-ZD-SYSTEM-MIB", "ruckusZDEthIfIndex"))
if mibBuilder.loadTexts: ruckusZDEthEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthEntry.setDescription('Specifies each ZD Ethernet device entry.')
ruckusZDEthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthIfIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthIfIndex.setDescription('Ethernet device interface index.')
ruckusZDEthName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDEthName.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthName.setDescription('Ethernet device name.')
ruckusZDEthDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthDesc.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthDesc.setDescription('Ethernet device description.')
ruckusZDEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("ethernet-csmacd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthType.setDescription('Ethernet device type.')
ruckusZDEthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthStatus.setDescription('Ethernet device status.')
ruckusZDEthPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthPhysAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthPhysAddr.setDescription('Ethernet device MAC address.')
ruckusZDEthMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDEthMtu.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthMtu.setDescription('Ethernet device mtu size.')
ruckusZDEthIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 8), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthIfSpeed.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthIfSpeed.setDescription('Ethernet device interface speed.')
ruckusZDEthUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthUtil.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthUtil.setDescription('Ethernet device utilization.')
ruckusZDEthTxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthTxBcastPkts.setDescription('Ethernet device transmitted broadcast packets number .')
ruckusZDEthTxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthTxMcastPkts.setDescription('Ethernet device transmitted multicast packets number .')
ruckusZDEthRxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxBcastPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthRxBcastPkts.setDescription('Ethernet device received broadcast packets number .')
ruckusZDEthRxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxMcastPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthRxMcastPkts.setDescription('Ethernet device received mutilcast packets number .')
ruckusZDEthTxUniPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxUniPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthTxUniPkts.setDescription('Ethernet device transmitted unicast packets number .')
ruckusZDEthRxUniPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxUniPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthRxUniPkts.setDescription('Ethernet device received unicast packets number .')
ruckusZDEthTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthTxPkts.setDescription('Ethernet device transmitted packets number .')
ruckusZDEthRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthRxPkts.setDescription('Ethernet device received packets number .')
ruckusZDEthDropTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthDropTxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthDropTxPkts.setDescription('Ethernet device transmitted drop packets number .')
ruckusZDEthDropRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthDropRxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthDropRxPkts.setDescription('Ethernet device received drop packets number .')
ruckusZDEthTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthTxBytes.setDescription('Ethernet device transmitted bytes number .')
ruckusZDEthRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEthRxBytes.setDescription('Ethernet device received bytes number .')
mibBuilder.exportSymbols("RUCKUS-ZD-SYSTEM-MIB", ruckusZDSystemLoadBalanceUserThreshold=ruckusZDSystemLoadBalanceUserThreshold, ruckusZDSystemFlexMasterServer=ruckusZDSystemFlexMasterServer, ruckusZDSystemtCPUSpeed=ruckusZDSystemtCPUSpeed, ruckusZDSystemSyslog=ruckusZDSystemSyslog, ruckusZDSystemDropPacketRateValve=ruckusZDSystemDropPacketRateValve, ruckusZDSystemSNMPV3TrapAuthKey=ruckusZDSystemSNMPV3TrapAuthKey, ruckusZDSystemIPSecondaryDNS=ruckusZDSystemIPSecondaryDNS, ruckusZDSystemSNMPV3TrapPrivacyKey=ruckusZDSystemSNMPV3TrapPrivacyKey, ruckusZDSystemPeerConnectedStatus=ruckusZDSystemPeerConnectedStatus, ruckusZDSystemSMTPEncryptionOptions=ruckusZDSystemSMTPEncryptionOptions, ruckusZDSystemAdminName=ruckusZDSystemAdminName, ruckusZDSystemSNMPRWCommunity=ruckusZDSystemSNMPRWCommunity, ruckusZDSystemSNMPV3TrapSvrRowStatus=ruckusZDSystemSNMPV3TrapSvrRowStatus, ruckusZDSystemSoftwareName=ruckusZDSystemSoftwareName, ruckusZDSystemIPTable=ruckusZDSystemIPTable, ruckusZDSystemServices=ruckusZDSystemServices, ruckusZDSystemSNMPV3TrapAuth=ruckusZDSystemSNMPV3TrapAuth, ruckusZDSystemStartTime=ruckusZDSystemStartTime, ruckusZDSystemSNMPV3TrapSvrTable=ruckusZDSystemSNMPV3TrapSvrTable, ruckusZDSystemStpInfo=ruckusZDSystemStpInfo, ruckusZDSystemLoadBalanceInfo=ruckusZDSystemLoadBalanceInfo, ruckusZDSystemSNMPV3Table=ruckusZDSystemSNMPV3Table, ruckusZDSystemIPPrimaryDNS=ruckusZDSystemIPPrimaryDNS, ruckusZDEthDesc=ruckusZDEthDesc, ruckusZDSystemIPVersion=ruckusZDSystemIPVersion, ruckusZDSystemTimeWithNTP=ruckusZDSystemTimeWithNTP, ruckusZDSystemACLocationLatitude=ruckusZDSystemACLocationLatitude, ruckusZDSystemIPAddr=ruckusZDSystemIPAddr, ruckusZDEthRxBytes=ruckusZDEthRxBytes, ruckusZDSystemEmailTriggerEnable=ruckusZDSystemEmailTriggerEnable, ruckusZDSystemSMTPServerPort=ruckusZDSystemSMTPServerPort, ruckusZDSystemSNMPV3TrapPrivacy=ruckusZDSystemSNMPV3TrapPrivacy, ruckusZDSystemSNMPV2Entry=ruckusZDSystemSNMPV2Entry, ruckusZDSystemSerialNumber=ruckusZDSystemSerialNumber, ruckusZDSystemCurrentTime=ruckusZDSystemCurrentTime, ruckusZDSystemSMTP=ruckusZDSystemSMTP, ruckusZDSystemMIB=ruckusZDSystemMIB, ruckusZDSystemTimeNTPServer=ruckusZDSystemTimeNTPServer, ruckusZDSystemMemUtilValve=ruckusZDSystemMemUtilValve, ruckusZDSystemIPV6AddressModel=ruckusZDSystemIPV6AddressModel, ruckusZDSystemSNMPEnable=ruckusZDSystemSNMPEnable, ruckusZDSystemLoadBalanceStatus=ruckusZDSystemLoadBalanceStatus, ruckusZDSystemStatsWLANTotalTxBytes=ruckusZDSystemStatsWLANTotalTxBytes, ruckusZDSystemEmailAddress=ruckusZDSystemEmailAddress, ruckusZDSystemSNMP=ruckusZDSystemSNMP, ruckusZDSystemStatsWLANTotalTxMulticast=ruckusZDSystemStatsWLANTotalTxMulticast, ruckusZDSystemMemorySize=ruckusZDSystemMemorySize, ruckusZDSystemStatsLanRxRate=ruckusZDSystemStatsLanRxRate, ruckusZDEthTable=ruckusZDEthTable, ruckusZDSystemStatsWLANTotalTxDroppedPkt=ruckusZDSystemStatsWLANTotalTxDroppedPkt, ruckusZDSystemSMTPAuthUsername=ruckusZDSystemSMTPAuthUsername, ruckusZDSystemStatsWLANTotalRxMulticast=ruckusZDSystemStatsWLANTotalRxMulticast, ruckusZDEthName=ruckusZDEthName, ruckusZDEthDropRxPkts=ruckusZDEthDropRxPkts, ruckusZDSystemNTP=ruckusZDSystemNTP, ruckusZDEthEntry=ruckusZDEthEntry, ruckusZDSystemOnlineStaValve=ruckusZDSystemOnlineStaValve, ruckusZDSystemStatsCPUUtil=ruckusZDSystemStatsCPUUtil, ruckusZDSystemModel=ruckusZDSystemModel, ruckusZDSystemIPEntry=ruckusZDSystemIPEntry, ruckusZDEthRxMcastPkts=ruckusZDEthRxMcastPkts, ruckusZDSystemSNMPTrapEnable=ruckusZDSystemSNMPTrapEnable, ruckusZDSystemIPAddrNetmask=ruckusZDSystemIPAddrNetmask, ruckusZDSystemStatsWLANTotalTxPkts=ruckusZDSystemStatsWLANTotalTxPkts, ruckusZDSystemCountryCode=ruckusZDSystemCountryCode, ruckusZDSystemAPFirmwareServer=ruckusZDSystemAPFirmwareServer, ruckusZDSystemFlexMasterEnable=ruckusZDSystemFlexMasterEnable, ruckusZDSystemSNMPV2TrapServer=ruckusZDSystemSNMPV2TrapServer, ruckusZDSystemIPV6Gateway=ruckusZDSystemIPV6Gateway, ruckusZDSystemStatsNumRegisteredAP=ruckusZDSystemStatsNumRegisteredAP, ruckusZDSystemIPAddress=ruckusZDSystemIPAddress, ruckusZDSystemSNMPV3Enable=ruckusZDSystemSNMPV3Enable, ruckusZDSystemSNMPTrapVersion=ruckusZDSystemSNMPTrapVersion, ruckusZDEthRxBcastPkts=ruckusZDEthRxBcastPkts, ruckusZDSystemFlexMaster=ruckusZDSystemFlexMaster, ruckusZDEthInfo=ruckusZDEthInfo, ruckusZDEthPhysAddr=ruckusZDEthPhysAddr, ruckusZDSystemObjects=ruckusZDSystemObjects, ruckusZDSystemExpInfo=ruckusZDSystemExpInfo, ruckusZDSystemMgmtVlanID=ruckusZDSystemMgmtVlanID, ruckusZDSystemCPUUtilValve=ruckusZDSystemCPUUtilValve, ruckusZDAPMemoryvalve=ruckusZDAPMemoryvalve, ruckusZDSystemIPV6PrefixLen=ruckusZDSystemIPV6PrefixLen, ruckusZDSystemSNMPV3RwUser=ruckusZDSystemSNMPV3RwUser, ruckusZDSystemSMTPAuthPassword=ruckusZDSystemSMTPAuthPassword, ruckusZDSystemSNMPTrapInfo=ruckusZDSystemSNMPTrapInfo, ruckusZDSystemSNMPV3Entry=ruckusZDSystemSNMPV3Entry, ruckusZDSystemSNMPV3RoPrivacyKey=ruckusZDSystemSNMPV3RoPrivacyKey, ruckusZDSystemLoadBalanceType=ruckusZDSystemLoadBalanceType, ruckusZDSystemFlashFreeSize=ruckusZDSystemFlashFreeSize, ruckusZDSystemSNMPV3RwAuth=ruckusZDSystemSNMPV3RwAuth, ruckusZDSystemMaxSta=ruckusZDSystemMaxSta, ruckusZDSystemIPAddrMode=ruckusZDSystemIPAddrMode, ruckusZDSystemStats=ruckusZDSystemStats, ruckusZDSystemStatsWLANTotalRxPkts=ruckusZDSystemStatsWLANTotalRxPkts, ruckusZDSystemSNMPV3RwAuthKey=ruckusZDSystemSNMPV3RwAuthKey, ruckusZDEthTxPkts=ruckusZDEthTxPkts, ruckusZDEthIfSpeed=ruckusZDEthIfSpeed, ruckusZDSystemSNMPROCommunity=ruckusZDSystemSNMPROCommunity, ruckusZDEthTxMcastPkts=ruckusZDEthTxMcastPkts, ruckusZDEthTxBcastPkts=ruckusZDEthTxBcastPkts, ruckusZDSystemFlexMasterInterval=ruckusZDSystemFlexMasterInterval, ruckusZDSystemMemoryUtil=ruckusZDSystemMemoryUtil, ruckusZDEthType=ruckusZDEthType, ruckusZDSystemStatsNumRogueKnown=ruckusZDSystemStatsNumRogueKnown, ruckusZDSystemCPUUtil=ruckusZDSystemCPUUtil, ruckusZDEthIfIndex=ruckusZDEthIfIndex, ruckusZDSystemSNMPV3RoAuth=ruckusZDSystemSNMPV3RoAuth, ruckusZDSystemLoadBalanceTrafficThreshold=ruckusZDSystemLoadBalanceTrafficThreshold, ruckusZDEthTxBytes=ruckusZDEthTxBytes, ruckusZDSystemSNMPV3TrapUser=ruckusZDSystemSNMPV3TrapUser, ruckusZDSystemNEId=ruckusZDSystemNEId, ruckusZDSystemIDSAllowOUI=ruckusZDSystemIDSAllowOUI, ruckusZDSystemIPGateway=ruckusZDSystemIPGateway, ruckusZDSystemManufacturer=ruckusZDSystemManufacturer, ruckusZDEthUtil=ruckusZDEthUtil, ruckusZDSystemSNMPSysLocation=ruckusZDSystemSNMPSysLocation, ruckusZDHeartBeatPeriod=ruckusZDHeartBeatPeriod, ruckusZDEthRxPkts=ruckusZDEthRxPkts, ruckusZDAPCPUvalve=ruckusZDAPCPUvalve, ruckusZDSystemACLocationLongitude=ruckusZDSystemACLocationLongitude, ruckusZDEthDropTxPkts=ruckusZDEthDropTxPkts, ruckusZDEthRxUniPkts=ruckusZDEthRxUniPkts, ruckusZDSystemStatsWLANTotalTxErrFrm=ruckusZDSystemStatsWLANTotalTxErrFrm, ruckusZDSystemStatus=ruckusZDSystemStatus, ruckusZDSystemSysLogServer=ruckusZDSystemSysLogServer, ruckusZDSystemName=ruckusZDSystemName, ruckusZDSystemSNMPV2TrapSvrTable=ruckusZDSystemSNMPV2TrapSvrTable, ruckusZDEthTxUniPkts=ruckusZDEthTxUniPkts, ruckusZDSystemStatsWLANTotalTxRetry=ruckusZDSystemStatsWLANTotalTxRetry, ruckusZDSystemVersion=ruckusZDSystemVersion, ruckusZDSystemSNMPV3RoUser=ruckusZDSystemSNMPV3RoUser, ruckusZDSystemStatsMemoryUtil=ruckusZDSystemStatsMemoryUtil, ruckusZDSystemStatsNumSta=ruckusZDSystemStatsNumSta, ruckusZDSystemSNMPV3TrapServer=ruckusZDSystemSNMPV3TrapServer, ruckusZDSystemStatsWLANTotalAssocFail=ruckusZDSystemStatsWLANTotalAssocFail, ruckusZDSystemStpStatus=ruckusZDSystemStpStatus, ruckusZDSystemStatsLanTxRate=ruckusZDSystemStatsLanTxRate, ruckusZDSystemStatsNumAP=ruckusZDSystemStatsNumAP, ruckusZDHeartBeatStatus=ruckusZDHeartBeatStatus, ruckusZDSystemInfo=ruckusZDSystemInfo, ruckusZDSystemUptime=ruckusZDSystemUptime, ruckusZDSystemSNMPV3RwPrivacyKey=ruckusZDSystemSNMPV3RwPrivacyKey, ruckusZDSystemFromEmailAddress=ruckusZDSystemFromEmailAddress, ruckusZDEthStatus=ruckusZDEthStatus, ruckusZDSystemLoadBalanceUserDifference=ruckusZDSystemLoadBalanceUserDifference, ruckusZDSystemLicensedAPs=ruckusZDSystemLicensedAPs, ruckusZDSystemLogWithSysLog=ruckusZDSystemLogWithSysLog, ruckusZDSystemStatsWLANTotalRxErrFrm=ruckusZDSystemStatsWLANTotalRxErrFrm, ruckusZDSystemSNMPV3RoAuthKey=ruckusZDSystemSNMPV3RoAuthKey, ruckusZDSystemDHCPServer=ruckusZDSystemDHCPServer, ruckusZDSystemSNMPV3RoPrivacy=ruckusZDSystemSNMPV3RoPrivacy, ruckusZDSystemtFlashModel=ruckusZDSystemtFlashModel, ruckusZDSystemStatsAllNumSta=ruckusZDSystemStatsAllNumSta, ruckusZDSystemSNMPV3TrapSvrEntry=ruckusZDSystemSNMPV3TrapSvrEntry, ruckusZDSystemIPV6SecondaryDNS=ruckusZDSystemIPV6SecondaryDNS, ruckusZDSystemtMemModel=ruckusZDSystemtMemModel, ruckusZDSystemAPConfigServer=ruckusZDSystemAPConfigServer, PYSNMP_MODULE_ID=ruckusZDSystemMIB, ruckusZDSystemIPV6PrimaryDNS=ruckusZDSystemIPV6PrimaryDNS, ruckusZDSystemStatsNumRogue=ruckusZDSystemStatsNumRogue, ruckusZDSystemSNMPV2TrapSvrRowStatus=ruckusZDSystemSNMPV2TrapSvrRowStatus, ruckusZDSystemSNMPV2Table=ruckusZDSystemSNMPV2Table, ruckusZDSystemSNMPV3TrapSvrIndex=ruckusZDSystemSNMPV3TrapSvrIndex, ruckusZDSystemSNMPSysContact=ruckusZDSystemSNMPSysContact, ruckusZDSystemMacAddr=ruckusZDSystemMacAddr, ruckusZDSystemSNMPV2TrapSvrIndex=ruckusZDSystemSNMPV2TrapSvrIndex, ruckusZDSystemStatsWLANTotalRxBytes=ruckusZDSystemStatsWLANTotalRxBytes, ruckusZDEthMtu=ruckusZDEthMtu, ruckusZDSystemSMTPServerName=ruckusZDSystemSMTPServerName, ruckusZDSystemBandwidthUtilValve=ruckusZDSystemBandwidthUtilValve, ruckusZDSystemAdminPassword=ruckusZDSystemAdminPassword, ruckusZDSystemIDSAllowedESSID=ruckusZDSystemIDSAllowedESSID, ruckusZDSystemIDSAllowBSSID=ruckusZDSystemIDSAllowBSSID, ruckusZDSystemIPV6Address=ruckusZDSystemIPV6Address, ruckusZDSystemSNMPV2TrapSvrEntry=ruckusZDSystemSNMPV2TrapSvrEntry, ruckusZDEthNum=ruckusZDEthNum, ruckusZDSystemStatsWLANTotalTxFail=ruckusZDSystemStatsWLANTotalTxFail, ruckusZDSystemSNMPV3RwPrivacy=ruckusZDSystemSNMPV3RwPrivacy, ruckusZDSystemStatsWLANTotalTxDroppedFrm=ruckusZDSystemStatsWLANTotalTxDroppedFrm, ruckusZDSystemLoadBalanceTrafficDifference=ruckusZDSystemLoadBalanceTrafficDifference)
