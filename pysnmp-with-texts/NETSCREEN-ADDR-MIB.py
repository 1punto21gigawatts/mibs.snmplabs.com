#
# PySNMP MIB module NETSCREEN-ADDR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-ADDR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
netscreenAddr, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenAddr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, TimeTicks, ModuleIdentity, MibIdentifier, NotificationType, Counter64, ObjectIdentity, Integer32, Bits, Counter32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "NotificationType", "Counter64", "ObjectIdentity", "Integer32", "Bits", "Counter32", "IpAddress", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenAddrMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 12, 0))
netscreenAddrMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-10 00:00', '2001-09-28 00:00', '2001-05-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenAddrMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No Comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenAddrMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenAddrMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenAddrMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenAddrMibModule.setDescription('This module defines the object that are used to monitor all the entries in the Address Book')
nsAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 12, 1), )
if mibBuilder.loadTexts: nsAddrTable.setStatus('current')
if mibBuilder.loadTexts: nsAddrTable.setDescription('The NetScreen ScreenOS classifies the addresses of all other devices by location and netmask. For example trusted addresses are located behind the trusted interface. This table collects all address items that exist in ScreenOS')
nsAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 12, 1, 1), ).setIndexNames((0, "NETSCREEN-ADDR-MIB", "nsAddrIndex"))
if mibBuilder.loadTexts: nsAddrEntry.setStatus('current')
if mibBuilder.loadTexts: nsAddrEntry.setDescription('Address entry collects some attributes of the address item.')
nsAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAddrIndex.setStatus('current')
if mibBuilder.loadTexts: nsAddrIndex.setDescription('A unique value for each address. Its value ranges between 0 and 65535 and may not be contiguous.')
nsAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAddrName.setStatus('current')
if mibBuilder.loadTexts: nsAddrName.setDescription('Address item name.')
nsAddrVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAddrVsys.setStatus('current')
if mibBuilder.loadTexts: nsAddrVsys.setDescription('Virtual system name this address belongs to.')
nsAddrZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAddrZone.setStatus('current')
if mibBuilder.loadTexts: nsAddrZone.setDescription('Security zone name this address belongs to.')
nsAddrIpOrDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 12, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAddrIpOrDomain.setStatus('current')
if mibBuilder.loadTexts: nsAddrIpOrDomain.setDescription("Address item's ip address or domain name.")
nsAddrNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 12, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAddrNetmask.setStatus('current')
if mibBuilder.loadTexts: nsAddrNetmask.setDescription('Subnet mask address use.')
nsAddrComment = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 12, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAddrComment.setStatus('current')
if mibBuilder.loadTexts: nsAddrComment.setDescription('Comments on this address.')
mibBuilder.exportSymbols("NETSCREEN-ADDR-MIB", netscreenAddrMibModule=netscreenAddrMibModule, nsAddrComment=nsAddrComment, nsAddrIndex=nsAddrIndex, nsAddrZone=nsAddrZone, PYSNMP_MODULE_ID=netscreenAddrMibModule, nsAddrNetmask=nsAddrNetmask, nsAddrIpOrDomain=nsAddrIpOrDomain, nsAddrEntry=nsAddrEntry, nsAddrName=nsAddrName, nsAddrTable=nsAddrTable, nsAddrVsys=nsAddrVsys)
