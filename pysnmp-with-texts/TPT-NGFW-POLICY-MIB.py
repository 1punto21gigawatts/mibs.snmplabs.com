#
# PySNMP MIB module TPT-NGFW-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPT-NGFW-POLICY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, Bits, ObjectIdentity, Integer32, ModuleIdentity, MibIdentifier, Counter32, IpAddress, Gauge32, TimeTicks, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "Bits", "ObjectIdentity", "Integer32", "ModuleIdentity", "MibIdentifier", "Counter32", "IpAddress", "Gauge32", "TimeTicks", "NotificationType", "iso")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
tpt_ngfw_compls, tpt_ngfw_groups, tpt_ngfw_eventsV2, tpt_ngfw_params, tpt_ngfw_objs = mibBuilder.importSymbols("TPT-NGFW-REG-MIB", "tpt-ngfw-compls", "tpt-ngfw-groups", "tpt-ngfw-eventsV2", "tpt-ngfw-params", "tpt-ngfw-objs")
tptNgfwSystemSerial, = mibBuilder.importSymbols("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial")
tptNgfwPolicy = ModuleIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 4))
tptNgfwPolicy.setRevisions(('2016-05-25 18:54', '2013-03-13 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tptNgfwPolicy.setRevisionsDescriptions(('Updated copyright information. Minor MIB syntax fixes.', 'Initial version of NGFW Policy MIB.',))
if mibBuilder.loadTexts: tptNgfwPolicy.setLastUpdated('201605251854Z')
if mibBuilder.loadTexts: tptNgfwPolicy.setOrganization('Trend Micro, Inc.')
if mibBuilder.loadTexts: tptNgfwPolicy.setContactInfo('www.trendmicro.com')
if mibBuilder.loadTexts: tptNgfwPolicy.setDescription(" Policy information and notifications for TippingPoint Next-Generation Firewall products. This includes Firewall rules, IPS, Reputation profiles, Quarantine. Copyright (C) 2016 Trend Micro Incorporated. All Rights Reserved. Trend Micro makes no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. Trend Micro shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material. This document contains proprietary information, which is protected by copyright. No part of this document may be photocopied, reproduced, or translated into another language without the prior written consent of Trend Micro. The information is provided 'as is' without warranty of any kind and is subject to change without notice. The only warranties for Trend Micro products and services are set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed as constituting an additional warranty. Trend Micro shall not be liable for technical or editorial errors or omissions contained herein. TippingPoint(R), the TippingPoint logo, and Digital Vaccine(R) are registered trademarks of Trend Micro. All other company and product names may be trademarks of their respective holders. All rights reserved. This document contains confidential information, trade secrets or both, which are the property of Trend Micro. No part of this documentation may be reproduced in any form or by any means or used to make any derivative work (such as translation, transformation, or adaptation) without written permission from Trend Micro or one of its subsidiaries. All other company and product names may be trademarks of their respective holders. ")
class EventSource(TextualConvention, Integer32):
    description = 'The firewall rule or inspection profile that triggered a policy notification. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("firewall", 1), ("ips", 2), ("reputation", 3), ("quarantine", 4))

class FirewallEventType(TextualConvention, Integer32):
    description = 'The type of firewall event detected: a session start or end, an application detection, or network traffic was blocked. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("sessionStart", 1), ("applicationDetect", 2), ("sessionEnd", 3), ("blockedByFirewall", 4))

class EventSeverity(TextualConvention, Integer32):
    description = 'The severity of a network event. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("info", 1), ("low", 2), ("minor", 3), ("major", 4), ("critical", 5))

class ActionType(TextualConvention, Integer32):
    description = 'The action taken by a policy to either block, permit, trust, rate-limit, or quarantine network traffic. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("permit", 1), ("rateLimit", 2), ("trust", 3), ("block", 4), ("quarantine", 5))

class PacketTraceVersion(TextualConvention, Integer32):
    description = 'The version of a packet trace collected and saved or none. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("packetTraceV1", 1), ("packetTraceV2", 2), ("none", 3))

tptNgfwPolicyNotifyTime = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 20), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyTime.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyTime.setDescription('The time when the firewall detected a network event and generated this policy notification. ')
tptNgfwPolicyNotifyEventSource = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 21), EventSource()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyEventSource.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyEventSource.setDescription('The policy component (Firewall, IPS, Reputation, Quarantine) that detected a network event and generated this notification. ')
tptNgfwPolicyNotifyEventType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 22), FirewallEventType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyEventType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyEventType.setDescription('If the notify event was generated by the firewall, this object indicates what type of event was detected. ')
tptNgfwPolicyNotifyEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 23), EventSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyEventSeverity.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyEventSeverity.setDescription('The severity of the detected network event. ')
tptNgfwPolicyNotifyCorrelationId = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyCorrelationId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyCorrelationId.setDescription('A 128-bit identifier in decimal format. This ID is used to correlate firewall events. For example, a firewall session started and ended notification will have the same correlation ID. ')
tptNgfwPolicyNotifyActionType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 25), ActionType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyActionType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyActionType.setDescription('The type of action taken on network traffic matching a firewall rule or inspection profile. ')
tptNgfwPolicyNotifyAction = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyAction.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyAction.setDescription('This object provides additional description of a firewall action. For example, when a quarantine action occurs, this object details if the action was to place traffic in or out of quarantine. ')
tptNgfwPolicyNotifyActionSetName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 27), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyActionSetName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyActionSetName.setDescription('The action set name associated with the firewall rule that detected an event. ')
tptNgfwPolicyNotifyRuleName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyRuleName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyRuleName.setDescription('The firewall rule name that has generated the notification. ')
tptNgfwPolicyNotifyInInterface = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyInInterface.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyInInterface.setDescription('The interface name that is receiving the traffic that triggered a firewall action. ')
tptNgfwPolicyNotifyOutInterface = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 30), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyOutInterface.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyOutInterface.setDescription('The interface name sending the suspect traffic. ')
tptNgfwPolicyNotifySrcIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 31), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcIpAddrType.setDescription('The IP address type of the network traffic source. ')
tptNgfwPolicyNotifySrcIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 32), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcIpAddr.setDescription('The source IP address generating the network traffic that has triggered a firewall action. ')
tptNgfwPolicyNotifySrcPort = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 33), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcPort.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcPort.setDescription('The source port generating the network traffic. ')
tptNgfwPolicyNotifySrcTransIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 34), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcTransIpAddr.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcTransIpAddr.setDescription('The translated (NAT) source IP address. ')
tptNgfwPolicyNotifySrcTransPort = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 35), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcTransPort.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifySrcTransPort.setDescription('The translated (NAT) source port. ')
tptNgfwPolicyNotifyDestIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 36), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestIpAddrType.setDescription('The destination IP address type. ')
tptNgfwPolicyNotifyDestIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 37), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestIpAddr.setDescription('The source IP address receiving network traffic that triggered a firewall action. ')
tptNgfwPolicyNotifyDestPort = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 38), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestPort.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestPort.setDescription('The source port receiving the network traffic. ')
tptNgfwPolicyNotifyDestTransIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 39), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestTransIpAddr.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestTransIpAddr.setDescription('The translated (NAT) destination IP address. ')
tptNgfwPolicyNotifyDestTransPort = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 40), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestTransPort.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyDestTransPort.setDescription('The translated (NAT) destination port. ')
tptNgfwPolicyNotifyProtocol = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 41), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyProtocol.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyProtocol.setDescription('The transport protocol of the suspect traffic. ')
tptNgfwPolicyNotifyApplicationName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 42), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyApplicationName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyApplicationName.setDescription('The application name generating network traffic that has triggered a firewall rule. ')
tptNgfwPolicyNotifyUserName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 43), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyUserName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyUserName.setDescription('The user name, if available, that is responsible for generating network traffic triggering a firewall action. ')
tptNgfwPolicyNotifyBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 44), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyBytesIn.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyBytesIn.setDescription('Source to destination bytes. ')
tptNgfwPolicyNotifyBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 45), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyBytesOut.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyBytesOut.setDescription('Destination to source bytes. ')
tptNgfwPolicyNotifyStartTimeSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 46), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyStartTimeSec.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyStartTimeSec.setDescription('The time, in seconds, from EPOC (January 1, 1970 00:00:00) when the event was detected. ')
tptNgfwPolicyNotifyStartTimeNano = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 47), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyStartTimeNano.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyStartTimeNano.setDescription('The fractional time, in nanoseconds, when the event was detected. ')
tptNgfwPolicyNotifyRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 48), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyRateLimit.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyRateLimit.setDescription('The rate-limit, in kbps, of the action set associated with this notification. ')
tptNgfwPolicyNotifyPktTraceVer = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 49), PacketTraceVersion()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPktTraceVer.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPktTraceVer.setDescription('The packet trace version. ')
tptNgfwPolicyNotifyPktTraceId = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 50), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPktTraceId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPktTraceId.setDescription('The bucket identifier for a packet trace. ')
tptNgfwPolicyNotifyPktTraceBegin = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 51), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPktTraceBegin.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPktTraceBegin.setDescription('The starting sequence number for a packet trace. ')
tptNgfwPolicyNotifyPktTraceEnd = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 52), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPktTraceEnd.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPktTraceEnd.setDescription('The ending sequence number for a packet trace. ')
tptNgfwPolicyNotifyFilterName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 53), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyFilterName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyFilterName.setDescription('The descriptive name of the filter maching the data stream. ')
tptNgfwPolicyNotifyProfileName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 54), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyProfileName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyProfileName.setDescription('Profile name. ')
tptNgfwPolicyNotifyPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 55), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPolicyName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPolicyName.setDescription('The firewall policy name that matched network traffic and caused the firewall to take an action. ')
tptNgfwPolicyNotifyVlanId = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 56), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyVlanId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyVlanId.setDescription('The VLAN tag that the network traffic occured on. ')
tptNgfwPolicyNotifyHitCount = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 57), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyHitCount.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyHitCount.setDescription('Hit count. The number of times, the firewall detected a particulare event as defined by a rule or inspection profile. ')
tptNgfwPolicyNotifyMsgParams = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 58), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyMsgParams.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyMsgParams.setDescription('A string containing parameters (separated by vertical bars) matching the Message in the Digital Vaccine (the XML tag is Message). ')
tptNgfwPolicyNotifyPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 59), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPeriod.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotifyPeriod.setDescription('The aggregation period, in minutes, when the condition is frist detected and this notification sent. ')
tptNgfwPolicyNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 10)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyTime"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyEventSource"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyEventType"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyEventSeverity"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyCorrelationId"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyActionType"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyAction"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyRuleName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyInInterface"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyOutInterface"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcIpAddrType"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcIpAddr"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcPort"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcTransIpAddr"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcTransPort"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestIpAddrType"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestIpAddr"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestPort"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestTransIpAddr"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestTransPort"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyProtocol"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyApplicationName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyUserName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyBytesIn"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyBytesOut"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyStartTimeSec"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyStartTimeNano"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyRateLimit"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPktTraceVer"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPktTraceId"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPktTraceBegin"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPktTraceEnd"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyFilterName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyProfileName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPolicyName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyVlanId"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyHitCount"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyMsgParams"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPeriod"))
if mibBuilder.loadTexts: tptNgfwPolicyNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotify.setDescription('A notification sent when a firewall rule, IPS, Reputation, or Quarantine profile detects a network event of interest. ')
tptNgfwPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10734, 3, 9, 1, 1, 7)).setObjects(("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyTime"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyEventSource"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyEventType"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyEventSeverity"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyCorrelationId"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyActionType"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyActionSetName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyAction"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyRuleName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyInInterface"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyOutInterface"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcIpAddrType"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcIpAddr"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcPort"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcTransIpAddr"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifySrcTransPort"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestIpAddrType"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestIpAddr"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestPort"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestTransIpAddr"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyDestTransPort"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyProtocol"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyApplicationName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyUserName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyBytesIn"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyBytesOut"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyStartTimeSec"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyStartTimeNano"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyRateLimit"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPktTraceVer"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPktTraceId"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPktTraceBegin"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPktTraceEnd"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyFilterName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyProfileName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPolicyName"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyVlanId"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyHitCount"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyMsgParams"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotifyPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tptNgfwPolicyGroup = tptNgfwPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyGroup.setDescription('Policy group consisting of firewall, IPS, Reputation, and Quarantine information. ')
tptNgfwPolicyNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 10734, 3, 9, 1, 1, 8)).setObjects(("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tptNgfwPolicyNotificationGroup = tptNgfwPolicyNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyNotificationGroup.setDescription('Notification sent from TippingPoint Next-generation Firewall rules and inspection profiles. ')
tptNgfwPolicyCompl = ModuleCompliance((1, 3, 6, 1, 4, 1, 10734, 3, 9, 1, 2, 4)).setObjects(("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyGroup"), ("TPT-NGFW-POLICY-MIB", "tptNgfwPolicyNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tptNgfwPolicyCompl = tptNgfwPolicyCompl.setStatus('current')
if mibBuilder.loadTexts: tptNgfwPolicyCompl.setDescription('Compliance for TippingPoint Next-generation Firewall policies. ')
mibBuilder.exportSymbols("TPT-NGFW-POLICY-MIB", tptNgfwPolicyNotifySrcIpAddr=tptNgfwPolicyNotifySrcIpAddr, tptNgfwPolicyNotifyUserName=tptNgfwPolicyNotifyUserName, tptNgfwPolicyCompl=tptNgfwPolicyCompl, tptNgfwPolicyGroup=tptNgfwPolicyGroup, tptNgfwPolicyNotifyBytesOut=tptNgfwPolicyNotifyBytesOut, tptNgfwPolicyNotifySrcIpAddrType=tptNgfwPolicyNotifySrcIpAddrType, PacketTraceVersion=PacketTraceVersion, tptNgfwPolicyNotifyAction=tptNgfwPolicyNotifyAction, tptNgfwPolicyNotifyInInterface=tptNgfwPolicyNotifyInInterface, tptNgfwPolicyNotifyPktTraceVer=tptNgfwPolicyNotifyPktTraceVer, tptNgfwPolicyNotifyPktTraceId=tptNgfwPolicyNotifyPktTraceId, tptNgfwPolicyNotifyVlanId=tptNgfwPolicyNotifyVlanId, tptNgfwPolicyNotifyPktTraceEnd=tptNgfwPolicyNotifyPktTraceEnd, tptNgfwPolicyNotificationGroup=tptNgfwPolicyNotificationGroup, tptNgfwPolicyNotifyStartTimeSec=tptNgfwPolicyNotifyStartTimeSec, tptNgfwPolicyNotifyProfileName=tptNgfwPolicyNotifyProfileName, tptNgfwPolicyNotifyProtocol=tptNgfwPolicyNotifyProtocol, tptNgfwPolicyNotifySrcTransIpAddr=tptNgfwPolicyNotifySrcTransIpAddr, tptNgfwPolicyNotifyHitCount=tptNgfwPolicyNotifyHitCount, tptNgfwPolicyNotifyDestPort=tptNgfwPolicyNotifyDestPort, tptNgfwPolicyNotifyBytesIn=tptNgfwPolicyNotifyBytesIn, tptNgfwPolicyNotifyRateLimit=tptNgfwPolicyNotifyRateLimit, tptNgfwPolicyNotifyRuleName=tptNgfwPolicyNotifyRuleName, tptNgfwPolicyNotifyDestTransIpAddr=tptNgfwPolicyNotifyDestTransIpAddr, tptNgfwPolicyNotifyPeriod=tptNgfwPolicyNotifyPeriod, tptNgfwPolicyNotifyActionSetName=tptNgfwPolicyNotifyActionSetName, tptNgfwPolicyNotifyPktTraceBegin=tptNgfwPolicyNotifyPktTraceBegin, PYSNMP_MODULE_ID=tptNgfwPolicy, tptNgfwPolicyNotifyDestIpAddr=tptNgfwPolicyNotifyDestIpAddr, tptNgfwPolicyNotify=tptNgfwPolicyNotify, tptNgfwPolicyNotifyTime=tptNgfwPolicyNotifyTime, tptNgfwPolicyNotifyCorrelationId=tptNgfwPolicyNotifyCorrelationId, ActionType=ActionType, tptNgfwPolicyNotifyStartTimeNano=tptNgfwPolicyNotifyStartTimeNano, tptNgfwPolicyNotifyMsgParams=tptNgfwPolicyNotifyMsgParams, tptNgfwPolicyNotifyEventSeverity=tptNgfwPolicyNotifyEventSeverity, tptNgfwPolicyNotifyEventType=tptNgfwPolicyNotifyEventType, FirewallEventType=FirewallEventType, tptNgfwPolicyNotifyDestIpAddrType=tptNgfwPolicyNotifyDestIpAddrType, tptNgfwPolicyNotifySrcPort=tptNgfwPolicyNotifySrcPort, tptNgfwPolicy=tptNgfwPolicy, tptNgfwPolicyNotifyApplicationName=tptNgfwPolicyNotifyApplicationName, tptNgfwPolicyNotifyDestTransPort=tptNgfwPolicyNotifyDestTransPort, EventSeverity=EventSeverity, tptNgfwPolicyNotifyOutInterface=tptNgfwPolicyNotifyOutInterface, EventSource=EventSource, tptNgfwPolicyNotifyActionType=tptNgfwPolicyNotifyActionType, tptNgfwPolicyNotifyPolicyName=tptNgfwPolicyNotifyPolicyName, tptNgfwPolicyNotifySrcTransPort=tptNgfwPolicyNotifySrcTransPort, tptNgfwPolicyNotifyEventSource=tptNgfwPolicyNotifyEventSource, tptNgfwPolicyNotifyFilterName=tptNgfwPolicyNotifyFilterName)
