#
# PySNMP MIB module HUAWEI-SZONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SZONE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
mplsVpnVrfName, = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, ObjectIdentity, MibIdentifier, Counter32, IpAddress, Bits, Unsigned32, iso, ModuleIdentity, TimeTicks, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "ObjectIdentity", "MibIdentifier", "Counter32", "IpAddress", "Bits", "Unsigned32", "iso", "ModuleIdentity", "TimeTicks", "Integer32", "Counter64")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
hwSZONE = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15))
if mibBuilder.loadTexts: hwSZONE.setLastUpdated('200304080900Z')
if mibBuilder.loadTexts: hwSZONE.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwSZONE.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwSZONE.setDescription(' V1.00 The HUAWEI-SZONE-MIB contains objects to manage the security zone for firewall product. ')
hwSZoneZoneCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1))
hwSZoneZoneTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 1), )
if mibBuilder.loadTexts: hwSZoneZoneTable.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneTable.setDescription('This table contains all the security zones defined in the system.')
hwSZoneZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-SZONE-MIB", "hwSZoneZoneID"))
if mibBuilder.loadTexts: hwSZoneZoneEntry.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneEntry.setDescription('Define the parameters of security zone.')
hwSZoneZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSZoneZoneID.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneID.setDescription(' An internal number to distinguish security zone. Different zone has different number. ')
hwSZoneZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSZoneZoneName.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneName.setDescription(' The name of security zone. Different zone has different name.')
hwSZoneSecPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSZoneSecPriority.setStatus('current')
if mibBuilder.loadTexts: hwSZoneSecPriority.setDescription(' The priority of security zone. Different zone has different priority. ')
hwSZoneZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSZoneZoneStatus.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneStatus.setDescription('Row status, can be CreateAndGo or Destroy.')
hwSZoneZoneIFTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 2), )
if mibBuilder.loadTexts: hwSZoneZoneIFTable.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneIFTable.setDescription(' This table define the interfaces belong to which security zone. An interface can only belong to one security zone.')
hwSZoneZoneIFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 2, 1), ).setIndexNames((0, "HUAWEI-SZONE-MIB", "hwSZoneIFZoneID"), (0, "HUAWEI-SZONE-MIB", "hwSZoneZoneIFIndex"))
if mibBuilder.loadTexts: hwSZoneZoneIFEntry.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneIFEntry.setDescription(' ')
hwSZoneIFZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSZoneIFZoneID.setStatus('current')
if mibBuilder.loadTexts: hwSZoneIFZoneID.setDescription('The ID of security zone.')
hwSZoneZoneIFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSZoneZoneIFIndex.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneIFIndex.setDescription('The index of interface.')
hwSZoneZoneIFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSZoneZoneIFStatus.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneIFStatus.setDescription('Row status, can be CreateAndGo or Destroy.')
hwSZoneInterZoneCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 2))
hwSZoneInterZoneTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 2, 1), )
if mibBuilder.loadTexts: hwSZoneInterZoneTable.setStatus('current')
if mibBuilder.loadTexts: hwSZoneInterZoneTable.setDescription(" This table define all inter zone of system. The inter zone can't be create directly, when a security zone is created, the related inter zones are created automatically, and when deleting a zone, the related inter zones are deleted. ")
hwSZoneInterZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 2, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-SZONE-MIB", "hwSZoneInterZoneZoneID1"), (0, "HUAWEI-SZONE-MIB", "hwSZoneInterZoneZoneID2"))
if mibBuilder.loadTexts: hwSZoneInterZoneEntry.setStatus('current')
if mibBuilder.loadTexts: hwSZoneInterZoneEntry.setDescription(' ')
hwSZoneInterZoneZoneID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSZoneInterZoneZoneID1.setStatus('current')
if mibBuilder.loadTexts: hwSZoneInterZoneZoneID1.setDescription('The ID of first zone that compose the inter-zone.')
hwSZoneInterZoneZoneID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSZoneInterZoneZoneID2.setStatus('current')
if mibBuilder.loadTexts: hwSZoneInterZoneZoneID2.setDescription('The ID of second zone that compose the inter-zone.')
hwSZoneInterZoneEnableFW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSZoneInterZoneEnableFW.setStatus('current')
if mibBuilder.loadTexts: hwSZoneInterZoneEnableFW.setDescription('The switch indicates whether the interzone enables firewall.')
hwSZoneInterZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSZoneInterZoneStatus.setStatus('current')
if mibBuilder.loadTexts: hwSZoneInterZoneStatus.setDescription('Row status, can be CreateAndGo.')
hwSZoneConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 3))
hwSZoneCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 3, 1))
hwSZoneMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 3, 2))
hwSZoneZoneCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 3, 2, 1)).setObjects(("HUAWEI-SZONE-MIB", "hwSZoneZoneName"), ("HUAWEI-SZONE-MIB", "hwSZoneSecPriority"), ("HUAWEI-SZONE-MIB", "hwSZoneZoneStatus"), ("HUAWEI-SZONE-MIB", "hwSZoneZoneIFIndex"), ("HUAWEI-SZONE-MIB", "hwSZoneZoneIFStatus"), ("HUAWEI-SZONE-MIB", "hwSZoneZoneID"), ("HUAWEI-SZONE-MIB", "hwSZoneIFZoneID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSZoneZoneCfgGroup = hwSZoneZoneCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwSZoneZoneCfgGroup.setDescription('Description.')
hwSZoneInterZoneCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 15, 3, 2, 2)).setObjects(("HUAWEI-SZONE-MIB", "hwSZoneInterZoneZoneID1"), ("HUAWEI-SZONE-MIB", "hwSZoneInterZoneZoneID2"), ("HUAWEI-SZONE-MIB", "hwSZoneInterZoneEnableFW"), ("HUAWEI-SZONE-MIB", "hwSZoneInterZoneStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSZoneInterZoneCfgGroup = hwSZoneInterZoneCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwSZoneInterZoneCfgGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-SZONE-MIB", hwSZoneZoneTable=hwSZoneZoneTable, hwSZoneCompliance=hwSZoneCompliance, hwSZONE=hwSZONE, hwSZoneZoneIFIndex=hwSZoneZoneIFIndex, hwSZoneZoneEntry=hwSZoneZoneEntry, hwSZoneSecPriority=hwSZoneSecPriority, hwSZoneInterZoneStatus=hwSZoneInterZoneStatus, hwSZoneZoneIFStatus=hwSZoneZoneIFStatus, hwSZoneInterZoneCfgGroup=hwSZoneInterZoneCfgGroup, hwSZoneInterZoneEnableFW=hwSZoneInterZoneEnableFW, hwSZoneConformance=hwSZoneConformance, hwSZoneInterZoneEntry=hwSZoneInterZoneEntry, hwSZoneZoneCfg=hwSZoneZoneCfg, hwSZoneZoneIFTable=hwSZoneZoneIFTable, hwSZoneZoneStatus=hwSZoneZoneStatus, hwSZoneZoneIFEntry=hwSZoneZoneIFEntry, hwSZoneZoneCfgGroup=hwSZoneZoneCfgGroup, hwSZoneIFZoneID=hwSZoneIFZoneID, hwSZoneZoneID=hwSZoneZoneID, hwSZoneInterZoneCfg=hwSZoneInterZoneCfg, PYSNMP_MODULE_ID=hwSZONE, hwSZoneInterZoneZoneID2=hwSZoneInterZoneZoneID2, hwSZoneInterZoneTable=hwSZoneInterZoneTable, hwSZoneZoneName=hwSZoneZoneName, hwSZoneMibGroups=hwSZoneMibGroups, hwSZoneInterZoneZoneID1=hwSZoneInterZoneZoneID1)
