#
# PySNMP MIB module ENGENIUS-MESH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENGENIUS-MESH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:02:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, ModuleIdentity, Counter32, TimeTicks, Unsigned32, iso, Counter64, MibIdentifier, ObjectIdentity, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, enterprises, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Counter32", "TimeTicks", "Unsigned32", "iso", "Counter64", "MibIdentifier", "ObjectIdentity", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "enterprises", "Integer32")
MacAddress, DateAndTime, TextualConvention, RowStatus, TimeStamp, DisplayString, TruthValue, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DateAndTime", "TextualConvention", "RowStatus", "TimeStamp", "DisplayString", "TruthValue", "TimeInterval")
engeniusmesh = ModuleIdentity((1, 3, 6, 1, 4, 1, 14125, 1))
engeniusmesh.setRevisions(('2008-03-07 10:00', '2008-03-04 10:00', '2008-02-28 16:00', '2008-02-26 17:00', '2008-01-21 16:00', '2007-11-29 15:00', '2007-11-23 17:00', '2007-10-05 10:00', '2007-10-02 10:30', '2007-09-26 19:00', '2007-09-20 13:00', '2007-09-13 12:00', '2007-08-29 17:00', '2007-08-21 17:00', '2007-08-03 11:00', '2007-07-18 17:00', '2007-07-11 17:00', '2007-07-10 14:00', '2007-06-20 17:00', '2007-06-08 16:00', '2007-06-01 15:00', '2007-05-08 17:00', '2007-04-25 16:00', '2007-04-10 10:00', '2007-04-02 10:00', '2007-02-09 17:00', '2007-02-08 18:00', '2007-02-08 10:00', '2007-01-15 10:00', '2007-01-11 10:00', '2007-01-08 10:00', '2006-12-14 10:00', '2006-12-01 10:00', '2006-11-29 10:00', '2006-11-28 10:00', '2006-11-23 10:00', '2006-11-10 10:00', '2006-11-08 10:00', '2006-11-06 10:00', '2006-11-02 10:00', '2006-10-30 10:00', '2006-10-27 10:00', '2006-10-18 10:00', '2006-10-05 10:00', '2006-10-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: engeniusmesh.setRevisionsDescriptions(('added operating mode, added hardwarename', 'added multicast, ospfd, ebtables', 'added option in ipaddress.tbl, system mode, added prmt in pppoe', 'Updated Interface list', 'Added prmt in routedog, added mlrdrelay, added system mode options', 'Added vlan in tmipd', 'Added option in operational mode', 'Added static key configuration', 'Added LocalUser and UserGroup table', 'Added system memory status and reset snmp cmd', 'Added user group in firewall table', 'Added script to call when system mode changed', 'Added option in system mode', 'Added nms address table', 'Added option in wireless-security', 'Added tm75.opts', 'Edited input range in trafficshaping, routewatchdog, advtuning,dhcpd, added wireless seperation, interchange macaccess index 3 and 4', 'Edit logout_n_block command type to ipaddress, added active_mac_list and dhcp_client_list', 'Added type in macaccess table, and blockuser command', 'Added scalar parameters in captive and advancedTunning', 'Added wme table and a scalar item in captive', 'Added max row for tables', 'Added SSHD', 'Added option for system mode (clientrelay)', 'Added Tx Power and Current Tx Power in Wireless Table', 'Added Advanced Tunning and upload command', 'Added Linux Dog', 'Added Route Dog', 'Added Client Statistic Table', 'Added MLDR', 'Added item into trap table', 'Added autoip and interface list', 'Added client info, wireless table entry & traps entry', 'Added L2tpc', 'Added AP1_channel_list, edit ath0 and ath1 to Mesh and AP0, added DHCP_active, added IPSec', 'Added reboot and reset command', 'Refer to configuration file v0.14, and remove flash and commands, and added signal level table', 'Added wireless frequency channel for ath0 and ath1, and refer to configuration file v0.13', 'Refer to configuration file v0.12', 'Refer to configuration file v0.10', 'Refer to configuration file v0.8', 'Refer to configuration file v0.7', 'Minor changes, add Trap', 'Added Topology Table', 'New Version',))
if mibBuilder.loadTexts: engeniusmesh.setLastUpdated('200803071000Z')
if mibBuilder.loadTexts: engeniusmesh.setOrganization('Senao Networks, Inc.')
if mibBuilder.loadTexts: engeniusmesh.setContactInfo('Senao Networks, Inc. No. 500, Fusing 3rd Road, Hwa-Ya Technology Park Kuei-Shan Hsiang, Taoyuan County 333, Taiwan. Tel: 886-3-328-9289 Fax: 886-3-396-2222 Email: sales@senao.com Website: http://www.engeniustech.com/corporate/')
if mibBuilder.loadTexts: engeniusmesh.setDescription('MIB Definition used in the Engenius Mesh Product Line: iso(1).org(3).dod(6).internet(1).private(4).enterprises(1). engenius(14125).engeniusmesh(1)')
engenius = MibIdentifier((1, 3, 6, 1, 4, 1, 14125))
nodeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 1))
nodeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2))
nodeCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 3))
nodeStatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 1, 1))
nodeStatusTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2))
nodeConfigurationSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1))
nodeConfigurationEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2))
nodeConfigurationWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3))
nodeConfigurationVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4))
nodeConfigurationBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5))
nodeConfigurationIpaddress = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6))
nodeConfigurationNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 7))
nodeConfigurationSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 8))
nodeConfigurationOlsr = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9))
nodeConfigurationRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10))
nodeConfigurationNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11))
nodeConfigurationDhcpd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12))
nodeConfigurationDns = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13))
nodeConfigurationTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 14))
nodeConfigurationFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15))
nodeConfigurationMacaccess = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16))
nodeConfigurationNat = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17))
nodeConfigurationOlsrGW = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18))
nodeConfigurationShaping = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19))
nodeConfigurationPppoe = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 20))
nodeConfigurationPptp = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21))
nodeConfigurationTmipd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 22))
nodeConfigurationCaptive = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23))
nodeConfigurationRadiusClient = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24))
nodeConfigurationHttpd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25))
nodeConfigurationSnmpd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26))
nodeConfigurationTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27))
nodeConfigurationDdns = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 28))
nodeConfigurationZeroconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 29))
nodeConfigurationSignallevel = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30))
nodeConfigurationIpsec = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31))
nodeConfigurationL2tpc = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 32))
nodeConfigurationAutoip = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 33))
nodeConfigurationInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 34))
nodeConfigurationMlrd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35))
nodeConfigurationRoutedog = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 36))
nodeConfigurationLinuxdog = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 37))
nodeConfigurationAdvTunning = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38))
nodeConfigurationSshd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 39))
nodeConfigutationWme = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40))
nodeConfigurationTm75 = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 41))
nodeConfigurationNmsAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42))
nodeConfigurationUserDb = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43))
nodeConfigurationUserGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44))
nodeConfigurationStatickey = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45))
nodeConfigurationDhcrelay = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46))
nodeConfigurationMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 47))
nodeConfigurationOspfd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 48))
nodeConfigurationEbtables = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49))
nodeCommandReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 3, 1))
nodeCommandReset = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 3, 2))
nodeCommandUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 3, 3))
nodeCommandLogoutBlock = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 3, 4))
nodeCommandRestartSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 3, 5))
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
if mibBuilder.loadTexts: systemUptime.setDescription('This object represents the value of sysUpTime from the time the station entered its current operational state.')
systemMemory = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMemory.setStatus('current')
if mibBuilder.loadTexts: systemMemory.setDescription('This object represent the percentage of the system free memory.')
systemDevicename = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDevicename.setStatus('current')
if mibBuilder.loadTexts: systemDevicename.setDescription('This object represents the name of the system device.')
systemCheckingState = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCheckingState.setStatus('current')
if mibBuilder.loadTexts: systemCheckingState.setDescription('Check is dorado system')
trapVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1))
genericTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericTrapVariable.setStatus('current')
if mibBuilder.loadTexts: genericTrapVariable.setDescription('This object is used to provide additional information on traps.')
genericTrapVarMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericTrapVarMACAddress.setStatus('current')
if mibBuilder.loadTexts: genericTrapVarMACAddress.setDescription('This object is used to store the MAC address of the device that has sent a trap.')
genericTrapVarHostIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericTrapVarHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: genericTrapVarHostIPAddress.setDescription('This object is used to store the IP Address of the Host.')
genericTrapVarHostname = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericTrapVarHostname.setStatus('current')
if mibBuilder.loadTexts: genericTrapVarHostname.setDescription('This object is used to store the hostname of the system.')
genericTrapVarInterface = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericTrapVarInterface.setStatus('current')
if mibBuilder.loadTexts: genericTrapVarInterface.setDescription('This object is used to store the interface number.')
genericTrapVarWirelessCard = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cardA", 1), ("cardB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericTrapVarWirelessCard.setStatus('current')
if mibBuilder.loadTexts: genericTrapVarWirelessCard.setDescription('This object is used to determine on which Wireless Card, Card A or Card B, a wireless TRAP has occured on.')
genericTrapVarEthernetPort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethPortA", 1), ("ethPortB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericTrapVarEthernetPort.setStatus('current')
if mibBuilder.loadTexts: genericTrapVarEthernetPort.setDescription('This object is used to determine on which ethernet port, port A or port B, a TRAP has occured on.')
genericTrapVarCount = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericTrapVarCount.setStatus('current')
if mibBuilder.loadTexts: genericTrapVarCount.setDescription('This object is used to store the number of occurance of certain events.')
adminTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 2))
if mibBuilder.loadTexts: adminTraps.setStatus('current')
if mibBuilder.loadTexts: adminTraps.setDescription('This is the administrator related trap group.')
adminTrapsAdminConf = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 2, 1)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: adminTrapsAdminConf.setStatus('current')
if mibBuilder.loadTexts: adminTrapsAdminConf.setDescription('This traps is generated when the administrator configures any of the web configuration page. Trap Severity Level: Informative.')
adminTrapsAdminCmd = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 2, 2)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: adminTrapsAdminCmd.setStatus('current')
if mibBuilder.loadTexts: adminTrapsAdminCmd.setDescription('This traps is generated when the administrator initiate an command. Trap Severity Level: Informative.')
userTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 3))
if mibBuilder.loadTexts: userTraps.setStatus('current')
if mibBuilder.loadTexts: userTraps.setDescription('This is the user related trap group.')
userTrapsUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 3, 1)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: userTrapsUserLogin.setStatus('current')
if mibBuilder.loadTexts: userTrapsUserLogin.setDescription('This traps is generated when a user login to the network. Trap Severity Level: Informative.')
userTrapsUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 3, 2)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: userTrapsUserLogout.setStatus('current')
if mibBuilder.loadTexts: userTrapsUserLogout.setDescription('This trap is generated when a user logout from the network. Trap Severity Level: Informative.')
systemTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 4))
if mibBuilder.loadTexts: systemTraps.setStatus('current')
if mibBuilder.loadTexts: systemTraps.setDescription('This is the system related trap/notification group.')
systemTrapsSystemReboot = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 4, 1)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: systemTrapsSystemReboot.setStatus('current')
if mibBuilder.loadTexts: systemTrapsSystemReboot.setDescription('This trap is generated when the system is down to reboot. Trap Severity Level: Major.')
systemTrapsSystemRestore = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 4, 2)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: systemTrapsSystemRestore.setStatus('current')
if mibBuilder.loadTexts: systemTrapsSystemRestore.setDescription('This trap is generated the default configuration of the system is restored. Trap Severity Level: Major.')
systemTrapsSystemUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 4, 3)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: systemTrapsSystemUpgrade.setStatus('current')
if mibBuilder.loadTexts: systemTrapsSystemUpgrade.setDescription('This trap is generated when the firmware of the system is upgraded. Trap Severity Level: Major.')
systemTrapsSystemConf = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 4, 4)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: systemTrapsSystemConf.setStatus('current')
if mibBuilder.loadTexts: systemTrapsSystemConf.setDescription('This trap is generated when the configuration of the system is upgraded. Trap Severity Level: Major.')
systemTrapsSystemStatus = NotificationType((1, 3, 6, 1, 4, 1, 14125, 1, 1, 2, 4, 5)).setObjects(("ENGENIUS-MESH-MIB", "genericTrapVarHostIPAddress"), ("ENGENIUS-MESH-MIB", "genericTrapVariable"))
if mibBuilder.loadTexts: systemTrapsSystemStatus.setStatus('current')
if mibBuilder.loadTexts: systemTrapsSystemStatus.setDescription('This trap is generated when any changes occur to the system, like memory, firmware, etc. Trap Severity Level: Minor.')
systemName = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemName.setStatus('current')
if mibBuilder.loadTexts: systemName.setDescription('The name of the managed device')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('current')
if mibBuilder.loadTexts: systemLocation.setDescription('The location name of the managed device')
systemContactName = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContactName.setStatus('current')
if mibBuilder.loadTexts: systemContactName.setDescription('The name of the contact person who manages the device')
systemContactMail = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContactMail.setStatus('current')
if mibBuilder.loadTexts: systemContactMail.setDescription('The Email Address of the contact person who manages the device')
systemContactPhone = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContactPhone.setStatus('current')
if mibBuilder.loadTexts: systemContactPhone.setDescription('The contact number of the contact person who manages the device')
systemDescription = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDescription.setStatus('current')
if mibBuilder.loadTexts: systemDescription.setDescription('A short description regarding the managed device')
systemObjectid = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemObjectid.setStatus('current')
if mibBuilder.loadTexts: systemObjectid.setDescription('The object id of the system')
systemOperatemode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("gateway", 1), ("relay", 2), ("clientrelay", 3), ("layer2gw", 4), ("layer2", 5), ("bridge", 6), ("router", 7), ("dualradiogw", 8), ("dualradiorelay", 9), ("dualradiocrelay", 10), ("mlrd", 11), ("slavebridge", 12), ("masterbridge", 13), ("wdsbridge", 14), ("repeater", 15), ("client", 16), ("clientrouter", 17), ("wdsrouter", 18))).clone('gateway')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOperatemode.setStatus('current')
if mibBuilder.loadTexts: systemOperatemode.setDescription('Define the mode of the system/device')
systemUpdateMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemUpdateMode.setStatus('current')
if mibBuilder.loadTexts: systemUpdateMode.setDescription('SnmpSet to update the system firmware when mode is changed.')
ethernetInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1), )
if mibBuilder.loadTexts: ethernetInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ethernetInterfaceTable.setDescription('This table contains the information of the ethernet interfaces.')
ethernetInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "ethInterfaceTableIndex"))
if mibBuilder.loadTexts: ethernetInterfaceTableEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetInterfaceTableEntry.setDescription('Represent the entry in the Ethernet Interface table.')
ethInterfaceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: ethInterfaceTableIndex.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableIndex.setDescription('Specify the index of the Ethernet interface table.')
ethInterfaceTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableName.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableName.setDescription('The name of the ethernet interface.')
ethInterfaceTableBase = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableBase.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableBase.setDescription('The base name of the ethernet interface.')
ethInterfaceTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 4), MacAddress().clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableMac.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableMac.setDescription('The hardware address of the interface.')
ethInterfaceTableBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableBridge.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableBridge.setDescription('The bridge interface that the current ethernet interface is attached to.')
ethInterfaceTableBridgeCost = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableBridgeCost.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableBridgeCost.setDescription('The cost of the bridge interface that the current ethernet interface is attached to.')
ethInterfaceTableBridgePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableBridgePrio.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableBridgePrio.setDescription('The priority of the bridge interface that the current ethernet interface is attached to.')
ethInterfaceTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableComments.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableComments.setDescription('An optional comment associated to entry of the ethernet interface table.')
ethInterfaceTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableActive.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableActive.setDescription('The status of the Ethernet interface table entry.')
ethInterfaceTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethInterfaceTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethInterfaceTableRowStatus.setDescription('The row status in the Ethernet interface table entry')
wirelessInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1), )
if mibBuilder.loadTexts: wirelessInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTable.setDescription('This table contains the information of the Wireless interfaces.')
wirelessInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "wlanInterfaceTableIndex"))
if mibBuilder.loadTexts: wirelessInterfaceTableEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTableEntry.setDescription('Represent the entry in the Wireless interface table.')
wlanInterfaceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52)))
if mibBuilder.loadTexts: wlanInterfaceTableIndex.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableIndex.setDescription('Specify the index of the Wireless interface table.')
wlanInterfaceTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableName.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableName.setDescription('The name of the Wireless interface.')
wlanInterfaceTableBase = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableBase.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableBase.setDescription('The base name of the Wireless interface.')
wlanInterfaceTableBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableBridge.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableBridge.setDescription('The bridge interface that the current wireless interface is attached to.')
wlanInterfaceTableBridgeCost = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableBridgeCost.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableBridgeCost.setDescription('The cost of the bridge interface that the current wireless interface is attached to.')
wlanInterfaceTableBridgePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableBridgePrio.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableBridgePrio.setDescription('The priority of the bridge interface that the current wireless interface is attached to.')
wlanInterfaceTableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ap", 1), ("sta", 2), ("adhoc", 3), ("wds", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableMode.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableMode.setDescription('The operating mode of the wireless interface.')
wlanInterfaceTableBand = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableBand.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableBand.setDescription('The Operating band of the wireless interface.')
wlanInterfaceTableEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableEssid.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableEssid.setDescription('The Essid of the wireless interface table entry.')
wlanInterfaceTableFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableFreq.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableFreq.setDescription('The operating frequency of the wireless interface.')
wlanInterfaceTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 11), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableMac.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableMac.setDescription('The hardware address of the interface.')
wlanInterfaceTableSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("open", 1), ("wep", 2), ("wpa1", 3), ("aes", 4), ("wpa2", 5), ("wpa1n2", 6))).clone('open')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableSecurity.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableSecurity.setDescription('The security mode of the wireless interface entry.')
wlanInterfaceTableWpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tkip", 1), ("aes", 2))).clone('tkip')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableWpaType.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableWpaType.setDescription('The WPA Type of the wireless interface using.')
wlanInterfaceTableDot1x = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableDot1x.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableDot1x.setDescription('Enable the radius server as authenticator for the current wireless interface entry.')
wlanInterfaceTableEncryptionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableEncryptionKey.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableEncryptionKey.setDescription('The key used with WEP encryption.')
wlanInterfaceTableBroadcastSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableBroadcastSsid.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableBroadcastSsid.setDescription('Enable or disable broadcast ESSID.')
wlanInterfaceTableBeaconInt = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableBeaconInt.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableBeaconInt.setDescription('The beacon interval in mili seconds.')
wlanInterfaceTableRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346)).clone(2346)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableRtsThreshold.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableRtsThreshold.setDescription('The RTS Threshold.')
wlanInterfaceTableFragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 2346)).clone(2346)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableFragThreshold.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableFragThreshold.setDescription('The Fragment Threshold (Even Number only).')
wlanInterfaceTableDtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableDtimInterval.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableDtimInterval.setDescription('The DTIM interval.')
wlanInterfaceTableDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableDatarate.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableDatarate.setDescription('The Data rate, available choice are auto(0), 1, 2, 5, 6, 9, 11, 12, 18, 24, 36, 48 and 54.')
wlanInterfaceTableDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("carddefault", 3))).clone('carddefault')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableDiversity.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableDiversity.setDescription('Select to enable or disable the diversity of the antenna.')
wlanInterfaceTableTxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("diversity", 0), ("port1", 1), ("port2", 2), ("carddefault", 3))).clone('carddefault')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableTxAntenna.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableTxAntenna.setDescription('Select the type of the transmission antenna.')
wlanInterfaceTableRxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("diversity", 0), ("port1", 1), ("port2", 2), ("carddefault", 3))).clone('carddefault')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableRxAntenna.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableRxAntenna.setDescription('Select the type of the receiving antenna.')
wlanInterfaceTableCrntTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableCrntTxPower.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableCrntTxPower.setDescription('The current Transmit Power level in dBm of the device wireless card.')
wlanInterfaceTableTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(9999)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableTxPower.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableTxPower.setDescription('The Transmit Power level in dBm (0-27) of the wireless card, where 9999 indicates MAX value of the card.')
wlanInterfaceTableSeperation = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableSeperation.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableSeperation.setDescription('Enable or disable wireless seperation.')
wlanInterfaceTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableComments.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableComments.setDescription('An optional comment associated to entry of the wireless interface table.')
wlanInterfaceTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableActive.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableActive.setDescription('The status of the Wireless interface table entry.')
wlanInterfaceTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 1, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanInterfaceTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTableRowStatus.setDescription('The row status in the Wireless interface table entry')
wirelessFrequencyMeshTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 2), )
if mibBuilder.loadTexts: wirelessFrequencyMeshTable.setStatus('current')
if mibBuilder.loadTexts: wirelessFrequencyMeshTable.setDescription('This table display the available frequency channel of the Wireless Mesh interface.')
wirelessFrequencyMeshTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 2, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "wlanFrequencyMeshTableIndex"))
if mibBuilder.loadTexts: wirelessFrequencyMeshTableEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessFrequencyMeshTableEntry.setDescription('Represent the entry in the Wireless Mesh frequency table.')
wlanFrequencyMeshTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: wlanFrequencyMeshTableIndex.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyMeshTableIndex.setDescription('Specify the index of the Wireless Mesh interface table.')
wlanFrequencyMeshTableChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyMeshTableChannel.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyMeshTableChannel.setDescription('The channel number of the frequency.')
wlanFrequencyMeshTableFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyMeshTableFrequency.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyMeshTableFrequency.setDescription('The frequency level in Giga Hertz.')
wlanFrequencyMeshTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 2, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyMeshTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyMeshTableRowStatus.setDescription('The row status in the Wireless Mesh frequency table entry')
wirelessFrequencyAp0Table = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 3), )
if mibBuilder.loadTexts: wirelessFrequencyAp0Table.setStatus('current')
if mibBuilder.loadTexts: wirelessFrequencyAp0Table.setDescription('This table display the available frequency channel of the wireless access point radio 1 card.')
wirelessFrequencyAp0TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 3, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "wlanFrequencyAp0TableIndex"))
if mibBuilder.loadTexts: wirelessFrequencyAp0TableEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessFrequencyAp0TableEntry.setDescription('Represent the entry in the Wireless radio 1 frequency table.')
wlanFrequencyAp0TableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: wlanFrequencyAp0TableIndex.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyAp0TableIndex.setDescription('Specify the index of the Wireless radio 1 interface table.')
wlanFrequencyAp0TableChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyAp0TableChannel.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyAp0TableChannel.setDescription('The channel number of the frequency.')
wlanFrequencyAp0TableFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyAp0TableFrequency.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyAp0TableFrequency.setDescription('The frequency level in Giga Hertz.')
wlanFrequencyAp0TableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 3, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyAp0TableRowStatus.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyAp0TableRowStatus.setDescription('The row status in the Wireless radio 1 frequency table entry')
wirelessFrequencyAp1Table = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 4), )
if mibBuilder.loadTexts: wirelessFrequencyAp1Table.setStatus('current')
if mibBuilder.loadTexts: wirelessFrequencyAp1Table.setDescription('This table display the available frequency channel of the wireless access point radio 2 (if exist).')
wirelessFrequencyAp1TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 4, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "wlanFrequencyAp1TableIndex"))
if mibBuilder.loadTexts: wirelessFrequencyAp1TableEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessFrequencyAp1TableEntry.setDescription('Represent the entry in the Wireless radio 2 frequency table.')
wlanFrequencyAp1TableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: wlanFrequencyAp1TableIndex.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyAp1TableIndex.setDescription('Specify the index of the Wireless radio 2 interface table.')
wlanFrequencyAp1TableChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyAp1TableChannel.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyAp1TableChannel.setDescription('The channel number of the frequency.')
wlanFrequencyAp1TableFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyAp1TableFrequency.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyAp1TableFrequency.setDescription('The frequency level in Giga Hertz.')
wlanFrequencyAp1TableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 3, 4, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanFrequencyAp1TableRowStatus.setStatus('current')
if mibBuilder.loadTexts: wlanFrequencyAp1TableRowStatus.setDescription('The row status in the Wireless radio 2 frequency table entry')
vlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1), )
if mibBuilder.loadTexts: vlanInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTable.setDescription('This table contains the information of the VLAN interfaces.')
vlanInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "vlanInterfaceTableIndex"))
if mibBuilder.loadTexts: vlanInterfaceTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableEntry.setDescription('Represent the entry in the VLAN interface table.')
vlanInterfaceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: vlanInterfaceTableIndex.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableIndex.setDescription('Specify the index of the VLAN interface table.')
vlanInterfaceTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableName.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableName.setDescription('The name of the VLAN interface.')
vlanInterfaceTableBase = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableBase.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableBase.setDescription('The base name of the VLAN interface.')
vlanInterfaceTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableMac.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableMac.setDescription('The hardware address of the interface.')
vlanInterfaceTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableId.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableId.setDescription('The VLAN ID for the table entry.')
vlanInterfaceTableBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableBridge.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableBridge.setDescription('The bridge interface that the current VLAN interface is attached to.')
vlanInterfaceTableBridgeCost = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableBridgeCost.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableBridgeCost.setDescription('The cost of the bridge interface that the current VLAN interface is attached to.')
vlanInterfaceTableBridgePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableBridgePrio.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableBridgePrio.setDescription('The priority of the bridge interface that the current VLAN interface is attached to.')
vlanInterfaceTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableComments.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableComments.setDescription('An optional comment associated to entry of the VLAN interface table.')
vlanInterfaceTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableActive.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableActive.setDescription('The status of the VLAN interface table entry.')
vlanInterfaceTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 4, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInterfaceTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTableRowStatus.setDescription('The row status in the VLAN interface table entry')
bridgeInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1), )
if mibBuilder.loadTexts: bridgeInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTable.setDescription('This table contains the information of the bridge interfaces.')
bridgeInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "bridgeInterfaceTableIndex"))
if mibBuilder.loadTexts: bridgeInterfaceTableEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableEntry.setDescription('Represent the entry in the Bridge Interface table.')
bridgeInterfaceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: bridgeInterfaceTableIndex.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableIndex.setDescription('Specify the index of the Bridge interface table.')
bridgeInterfaceTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableName.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableName.setDescription('The name of the Bridge interface.')
bridgeInterfaceTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableMac.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableMac.setDescription('The hardware address of the interface.')
bridgeInterfaceTableAge = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableAge.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableAge.setDescription('The bridge ageing time.')
bridgeInterfaceTablePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTablePrio.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTablePrio.setDescription('The priority of the bridge interface.')
bridgeInterfaceTableFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableFwdDelay.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableFwdDelay.setDescription('The bridge forwarding delay.')
bridgeInterfaceTableHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableHelloInt.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableHelloInt.setDescription('The Hello Interval of the bridge interface.')
bridgeInterfaceTableMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableMaxAge.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableMaxAge.setDescription('The bridge maximum message age.')
bridgeInterfaceTableStp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableStp.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableStp.setDescription('Turn on or off the Spanning Tree Protocol.')
bridgeInterfaceTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableComments.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableComments.setDescription('An optional comment associated to entry of the bridge interface table.')
bridgeInterfaceTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableActive.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableActive.setDescription('The status of the bridge interface table entry.')
bridgeInterfaceTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 5, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeInterfaceTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: bridgeInterfaceTableRowStatus.setDescription('The row status in the Bridge interface table entry.')
ipAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1), )
if mibBuilder.loadTexts: ipAddressesTable.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTable.setDescription('This table contains the information of the IP Addresses.')
ipAddressesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "ipAddressesTableIndex"))
if mibBuilder.loadTexts: ipAddressesTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableEntry.setDescription('Represent the entry in the IP Address Table.')
ipAddressesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: ipAddressesTableIndex.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableIndex.setDescription('Specify the index of the IP Address table.')
ipAddressesTableIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableIface.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableIface.setDescription('The name of the interface.')
ipAddressesTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("pppoe", 3), ("ipalias", 4))).clone('dhcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableType.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableType.setDescription('The type of IP Address: Static or DHCP.')
ipAddressesTableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableIp.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableIp.setDescription('The IP Address.')
ipAddressesTableNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableNetmask.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableNetmask.setDescription('The Netmask for IP Address.')
ipAddressesTableBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableBroadcast.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableBroadcast.setDescription('The Broadcast IP for the IP Address.')
ipAddressesTableGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableGateway.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableGateway.setDescription('The Gateway IP for the IP Address.')
ipAddressesTableRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routable", 1), ("nat", 2))).clone('routable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableRouted.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableRouted.setDescription('The type of the IP Address table entry.')
ipAddressesTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableComments.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableComments.setDescription('An optional comment associated to entry of the IP Address table.')
ipAddressesTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableActive.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableActive.setDescription('The status of the IP Address table entry.')
ipAddressesTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 6, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressesTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipAddressesTableRowStatus.setDescription('The row status in the IP Address table entry.')
networkPrimaryDns = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPrimaryDns.setStatus('current')
if mibBuilder.loadTexts: networkPrimaryDns.setDescription('The primary DNS Server IP address')
networkSecondaryDns = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkSecondaryDns.setStatus('current')
if mibBuilder.loadTexts: networkSecondaryDns.setDescription('The secondary DNS Server IP address')
networkDomain = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkDomain.setStatus('current')
if mibBuilder.loadTexts: networkDomain.setDescription('The DNS Server Domain name')
syslogActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogActive.setStatus('current')
if mibBuilder.loadTexts: syslogActive.setDescription('Enable/Disable the syslog service.')
syslogKlog = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogKlog.setStatus('current')
if mibBuilder.loadTexts: syslogKlog.setDescription('Enable/Disable the Klog service.')
syslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLevel.setStatus('current')
if mibBuilder.loadTexts: syslogLevel.setDescription('Define the level of the syslog service.')
syslogRemoteActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogRemoteActive.setStatus('current')
if mibBuilder.loadTexts: syslogRemoteActive.setDescription('Enable/Disable the remote syslog server.')
syslogRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 8, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: syslogRemoteAddress.setDescription('The remote syslog server name/address')
olsrActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrActive.setStatus('current')
if mibBuilder.loadTexts: olsrActive.setDescription('Enable/Disable the OLSR service.')
olsrTosValue = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrTosValue.setStatus('current')
if mibBuilder.loadTexts: olsrTosValue.setDescription('Display the value for the IP header of control traffic.')
olsrWillingnessActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrWillingnessActive.setStatus('current')
if mibBuilder.loadTexts: olsrWillingnessActive.setDescription('Display the option of automatic willingness calculation.')
olsrWillingness = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrWillingness.setStatus('current')
if mibBuilder.loadTexts: olsrWillingness.setDescription('Display the willingness value.')
olsrHysteresisActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrHysteresisActive.setStatus('current')
if mibBuilder.loadTexts: olsrHysteresisActive.setDescription('Display the option of hysteresis.')
olsrHysteresisScaling = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0.50')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrHysteresisScaling.setStatus('current')
if mibBuilder.loadTexts: olsrHysteresisScaling.setDescription('Display the scale of hysteresis parameter (range: 0 to 1).')
olsrHysteresisThrHigh = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0.80')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrHysteresisThrHigh.setStatus('current')
if mibBuilder.loadTexts: olsrHysteresisThrHigh.setDescription('Display the value of high threshold (range: 0 to 1).')
olsrHysteresisThrLow = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0.30')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrHysteresisThrLow.setStatus('current')
if mibBuilder.loadTexts: olsrHysteresisThrLow.setDescription('Display the value of low threshold (range: 0 to 1).')
olsrLinkQualityType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("useformpr", 1), ("useformprandrouting", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrLinkQualityType.setStatus('current')
if mibBuilder.loadTexts: olsrLinkQualityType.setDescription('Display the option of link quality type.')
olsrLinkQualitySize = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 128)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrLinkQualitySize.setStatus('current')
if mibBuilder.loadTexts: olsrLinkQualitySize.setDescription('Display the link quality window size.')
olsrPollRate = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0.05')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrPollRate.setStatus('current')
if mibBuilder.loadTexts: olsrPollRate.setDescription('Display the polling rate in milliseconds.')
olsrTcType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sendonlymprselectors", 0), ("sendonlymprselectorsandmprs", 1), ("sendallneighbors", 2))).clone('sendonlymprselectors')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrTcType.setStatus('current')
if mibBuilder.loadTexts: olsrTcType.setDescription('Display the option of TC type.')
olsrMpr = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrMpr.setStatus('current')
if mibBuilder.loadTexts: olsrMpr.setDescription('Display the value of how many MPRs a node should try to select to reach every 2 hop neighbour.')
olsrSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrSharedKey.setStatus('current')
if mibBuilder.loadTexts: olsrSharedKey.setDescription('The shared key for OLSR')
olsrInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15), )
if mibBuilder.loadTexts: olsrInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTable.setDescription('This table contains the information of the OLSR interfaces.')
olsrInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "olsrInterfaceTableIndex"))
if mibBuilder.loadTexts: olsrInterfaceTableEntry.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableEntry.setDescription('Represent the entry in the OLSR Interface table.')
olsrInterfaceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: olsrInterfaceTableIndex.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableIndex.setDescription('Specify the index of the OLSR interface table.')
olsrInterfaceTableIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableIface.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableIface.setDescription('The name of the OLSR interface.')
olsrInterfaceTableHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('2.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableHelloInterval.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableHelloInterval.setDescription('The hello interval of the OLSR interface.')
olsrInterfaceTableHelloValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('30.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableHelloValidity.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableHelloValidity.setDescription('The hello validity of the OLSR interface.')
olsrInterfaceTableTcInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('5.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableTcInterval.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableTcInterval.setDescription('The TC interval of the OLSR interface.')
olsrInterfaceTableTcValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('60.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableTcValidity.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableTcValidity.setDescription('The TC validity of the OLSR interface.')
olsrInterfaceTableMidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('5.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableMidInterval.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableMidInterval.setDescription('The MID interval of the OLSR interface.')
olsrInterfaceTableMidValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('60.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableMidValidity.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableMidValidity.setDescription('The MID validity of the OLSR interface.')
olsrInterfaceTableHnaInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('5.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableHnaInterval.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableHnaInterval.setDescription('The HNA interval of the OLSR interface.')
olsrInterfaceTableHnaValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('60.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableHnaValidity.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableHnaValidity.setDescription('The HNA validity of the OLSR interface.')
olsrInterfaceTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableComments.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableComments.setDescription('An optional description regarding the entry of the Olsr Interface table.')
olsrInterfaceTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableActive.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableActive.setDescription('The status of the OLSR Interface table entry.')
olsrInterfaceTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 9, 15, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrInterfaceTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: olsrInterfaceTableRowStatus.setDescription('The row status in the OLSR Interface table entry.')
olsrGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18, 1), )
if mibBuilder.loadTexts: olsrGatewayTable.setStatus('current')
if mibBuilder.loadTexts: olsrGatewayTable.setDescription('This table contains the OLSR local network gateway.')
olsrGatewayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "olsrGatewayTableIndex"))
if mibBuilder.loadTexts: olsrGatewayTableEntry.setStatus('current')
if mibBuilder.loadTexts: olsrGatewayTableEntry.setDescription('Represent the entry in the OLSR Gateway table.')
olsrGatewayTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: olsrGatewayTableIndex.setStatus('current')
if mibBuilder.loadTexts: olsrGatewayTableIndex.setDescription('Specify the index of the OLSR gateway table.')
olsrGatewayTableSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrGatewayTableSubnet.setStatus('current')
if mibBuilder.loadTexts: olsrGatewayTableSubnet.setDescription('The Subnet Address of the OLSR gateway entry.')
olsrGatewayTableNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrGatewayTableNetmask.setStatus('current')
if mibBuilder.loadTexts: olsrGatewayTableNetmask.setDescription('The netmask for the subnet above.')
olsrGatewayTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrGatewayTableComments.setStatus('current')
if mibBuilder.loadTexts: olsrGatewayTableComments.setDescription('An optional description regarding the entry of the Olsr Gateway table.')
olsrGatewayTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrGatewayTableActive.setStatus('current')
if mibBuilder.loadTexts: olsrGatewayTableActive.setDescription('The status of the OLSR Gateway table entry.')
olsrGatewayTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 18, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrGatewayTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: olsrGatewayTableRowStatus.setDescription('The row status in the OLSR Gateway table entry.')
routeTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1), )
if mibBuilder.loadTexts: routeTable.setStatus('current')
if mibBuilder.loadTexts: routeTable.setDescription('This table contains the information of the Route settings.')
routeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "routeTableIndex"))
if mibBuilder.loadTexts: routeTableEntry.setStatus('current')
if mibBuilder.loadTexts: routeTableEntry.setDescription('Represent the entry in the Route table.')
routeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: routeTableIndex.setStatus('current')
if mibBuilder.loadTexts: routeTableIndex.setDescription('Specify the index of the routing table.')
routeTableSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeTableSubnet.setStatus('current')
if mibBuilder.loadTexts: routeTableSubnet.setDescription('The destination Subnet of the routing rule.')
routeTableNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeTableNetmask.setStatus('current')
if mibBuilder.loadTexts: routeTableNetmask.setDescription('The Netmask for the destination subnet of the routing rule.')
routeTableGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeTableGateway.setStatus('current')
if mibBuilder.loadTexts: routeTableGateway.setDescription('The next hop gateway IP Address.')
routeTableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeTableDevice.setStatus('current')
if mibBuilder.loadTexts: routeTableDevice.setDescription('The Device Interface Name.')
routeTableDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("indirect", 2))).clone('direct')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeTableDirect.setStatus('current')
if mibBuilder.loadTexts: routeTableDirect.setDescription('The type of routing: direct or indirect.')
routeTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeTableComments.setStatus('current')
if mibBuilder.loadTexts: routeTableComments.setDescription('An optional description regarding the entry of the Routing table.')
routeTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeTableActive.setStatus('current')
if mibBuilder.loadTexts: routeTableActive.setDescription('The status of the Routing table entry.')
routeTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 10, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: routeTableRowStatus.setDescription('The row status in the Routing table entry.')
ntpActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpActive.setStatus('current')
if mibBuilder.loadTexts: ntpActive.setDescription('Enable/Disable the NTP service of the device.')
ntpTimezone = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 2), DisplayString().clone('337')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimezone.setStatus('current')
if mibBuilder.loadTexts: ntpTimezone.setDescription('NTP Timezone.')
ntpTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3), )
if mibBuilder.loadTexts: ntpTable.setStatus('current')
if mibBuilder.loadTexts: ntpTable.setDescription('This is the Network Time Protocol servers table.')
ntpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "ntpTableIndex"))
if mibBuilder.loadTexts: ntpTableEntry.setStatus('current')
if mibBuilder.loadTexts: ntpTableEntry.setDescription('Represent the entry in the NTP table.')
ntpTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: ntpTableIndex.setStatus('current')
if mibBuilder.loadTexts: ntpTableIndex.setDescription('Specify the index of the NTP table.')
ntpTableServer = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpTableServer.setStatus('current')
if mibBuilder.loadTexts: ntpTableServer.setDescription('The name of the NTP Server.')
ntpTableMinPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpTableMinPoll.setStatus('current')
if mibBuilder.loadTexts: ntpTableMinPoll.setDescription('The minimum poll time in seconds.')
ntpTableMaxPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpTableMaxPoll.setStatus('current')
if mibBuilder.loadTexts: ntpTableMaxPoll.setDescription('The maximum poll time in seconds.')
ntpTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpTableComments.setStatus('current')
if mibBuilder.loadTexts: ntpTableComments.setDescription('An optional description regarding the entry of the NTP table.')
ntpTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpTableActive.setStatus('current')
if mibBuilder.loadTexts: ntpTableActive.setDescription('The status of the NTP table entry.')
ntpTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 11, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: ntpTableRowStatus.setDescription('The row status in the NTP table entry.')
dhcpdTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1), )
if mibBuilder.loadTexts: dhcpdTable.setStatus('current')
if mibBuilder.loadTexts: dhcpdTable.setDescription('This is the DHCP server table.')
dhcpdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "dhcpdTableIndex"))
if mibBuilder.loadTexts: dhcpdTableEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableEntry.setDescription('Represent the entry in the DHCP server table.')
dhcpdTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: dhcpdTableIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableIndex.setDescription('Specify the index of the DHCP server table.')
dhcpdTableIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableIface.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableIface.setDescription('Specify the interface name of the DHCP server table entry.')
dhcpdTableSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableSubnet.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableSubnet.setDescription('Specify the Subnet Address for the DHCP server table entry.')
dhcpdTableNetstart = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableNetstart.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableNetstart.setDescription('Specify the Starting IP Address for the DHCP server table entry.')
dhcpdTableNetend = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableNetend.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableNetend.setDescription('Specify the Ending IP Address for the DHCP server table entry.')
dhcpdTableNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableNetmask.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableNetmask.setDescription('Specify the Netmask for the subnet Address for the DHCP server table entry.')
dhcpdTableMaxLease = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 864000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableMaxLease.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableMaxLease.setDescription('Specify the maximum lease time for the DHCP server table entry.')
dhcpdTableLease = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 864000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableLease.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableLease.setDescription('Specify the default lease time for the DHCP server table entry.')
dhcpdTableDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableDomain.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableDomain.setDescription("The domain name of the DHCP server table's entry.")
dhcpdTableDns = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableDns.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableDns.setDescription('Specify the DNS IP Address for the DHCP server table entry.')
dhcpdTableRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableRouter.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableRouter.setDescription('Specify the Router IP Address for the DHCP server table entry.')
dhcpdTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableComments.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableComments.setDescription('An optional description regarding the entry of the DHCP server table.')
dhcpdTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableActive.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableActive.setDescription('The status of the DHCP server table entry.')
dhcpdTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpdTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpdTableRowStatus.setDescription('The row status in the DHCP server table entry.')
dhcpdActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpdActive.setStatus('current')
if mibBuilder.loadTexts: dhcpdActive.setDescription('Enable/Disable the DHCPD Service of the device.')
dhcpClientExecute = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientExecute.setStatus('current')
if mibBuilder.loadTexts: dhcpClientExecute.setDescription('A command to execute the DHCP Client list')
dhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 4), )
if mibBuilder.loadTexts: dhcpClientTable.setStatus('current')
if mibBuilder.loadTexts: dhcpClientTable.setDescription('This is the read-only DHCP client table.')
dhcpClientTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 4, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "dhcpClientTableIndex"))
if mibBuilder.loadTexts: dhcpClientTableEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpClientTableEntry.setDescription('Represent the entry in the DHCP client table.')
dhcpClientTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254)))
if mibBuilder.loadTexts: dhcpClientTableIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpClientTableIndex.setDescription('Specify the index of the DHCP client table.')
dhcpClientTableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientTableIp.setStatus('current')
if mibBuilder.loadTexts: dhcpClientTableIp.setDescription('Specify the IP address of the client in the DHCP server.')
dhcpClientTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientTableMac.setStatus('current')
if mibBuilder.loadTexts: dhcpClientTableMac.setDescription('Specify the MAC address of the client in the DHCP server.')
dhcpClientTableHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 12, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientTableHostname.setStatus('current')
if mibBuilder.loadTexts: dhcpClientTableHostname.setDescription('Specify the Host name of the client in the DHCP server.')
dnsActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsActive.setStatus('current')
if mibBuilder.loadTexts: dnsActive.setDescription('Enable/Disable the DNS Service of the device.')
dnsDomainNeeded = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsDomainNeeded.setStatus('current')
if mibBuilder.loadTexts: dnsDomainNeeded.setDescription('Enable/Disable the strict domain checking of the DNS Service.')
dnsBogusPriv = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsBogusPriv.setStatus('current')
if mibBuilder.loadTexts: dnsBogusPriv.setDescription('Enable/Disable the feature.')
dnsFilterWin2k = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsFilterWin2k.setStatus('current')
if mibBuilder.loadTexts: dnsFilterWin2k.setDescription('Enable/Disable the filter for Windows 2k.')
dnsStrictOrder = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStrictOrder.setStatus('current')
if mibBuilder.loadTexts: dnsStrictOrder.setDescription('Enable/Disable the strict DNS lookup order feature .')
dnsTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 6), )
if mibBuilder.loadTexts: dnsTable.setStatus('current')
if mibBuilder.loadTexts: dnsTable.setDescription('This table contains the information of the DNS.')
dnsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 6, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "dnsTableIndex"))
if mibBuilder.loadTexts: dnsTableEntry.setStatus('current')
if mibBuilder.loadTexts: dnsTableEntry.setDescription('Represent the entry in the DNS table.')
dnsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: dnsTableIndex.setStatus('current')
if mibBuilder.loadTexts: dnsTableIndex.setDescription('Specify the index of the DNS service table.')
dnsTableDns = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsTableDns.setStatus('current')
if mibBuilder.loadTexts: dnsTableDns.setDescription('Specify the Hostname/Domain name of the DNS Service table entry.')
dnsTableIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsTableIpaddress.setStatus('current')
if mibBuilder.loadTexts: dnsTableIpaddress.setDescription('Specify the reply IP Address of the table entry.')
dnsTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsTableComments.setStatus('current')
if mibBuilder.loadTexts: dnsTableComments.setDescription('An optional comment associated to entry of the DNS service table.')
dnsTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsTableActive.setStatus('current')
if mibBuilder.loadTexts: dnsTableActive.setDescription('The status of the DNS table entry.')
dnsTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 13, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: dnsTableRowStatus.setDescription('The row status in the DNS table entry')
topologyTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 14, 1), )
if mibBuilder.loadTexts: topologyTable.setStatus('current')
if mibBuilder.loadTexts: topologyTable.setDescription('This table contains the list of topology of the node, displaying the relationship between this node and other.')
topologyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 14, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "topologyTableIndex"))
if mibBuilder.loadTexts: topologyTableEntry.setStatus('current')
if mibBuilder.loadTexts: topologyTableEntry.setDescription('Represent the entry in the Topology table.')
topologyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)))
if mibBuilder.loadTexts: topologyTableIndex.setStatus('current')
if mibBuilder.loadTexts: topologyTableIndex.setDescription('Specify the index of the node Topology table.')
topologyTableSource = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyTableSource.setStatus('current')
if mibBuilder.loadTexts: topologyTableSource.setDescription("The source node's IP Address")
topologyTableDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 14, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyTableDestination.setStatus('current')
if mibBuilder.loadTexts: topologyTableDestination.setDescription("The destination node's IP Address")
topologyTableLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 14, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyTableLabel.setStatus('current')
if mibBuilder.loadTexts: topologyTableLabel.setDescription('The label of the link between the source node and destination node.')
topologyTableStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 14, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyTableStyle.setStatus('current')
if mibBuilder.loadTexts: topologyTableStyle.setDescription('The style of the link between the source node and destination node.')
firewallActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firewallActive.setStatus('current')
if mibBuilder.loadTexts: firewallActive.setDescription('Enable/Disable the Firewall feature of the node.')
firewallTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2), )
if mibBuilder.loadTexts: firewallTable.setStatus('current')
if mibBuilder.loadTexts: firewallTable.setDescription('This table contains rules of the firewall of the system.')
firewallTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "firewallTableIndex"))
if mibBuilder.loadTexts: firewallTableEntry.setStatus('current')
if mibBuilder.loadTexts: firewallTableEntry.setDescription('Represent the entry in the Firewall table.')
firewallTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: firewallTableIndex.setStatus('current')
if mibBuilder.loadTexts: firewallTableIndex.setDescription('Specify the index of the firewall table.')
firewallTableTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2))).clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableTarget.setStatus('current')
if mibBuilder.loadTexts: firewallTableTarget.setDescription('Allow or deny the Target.')
firewallTableSrcIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableSrcIface.setStatus('current')
if mibBuilder.loadTexts: firewallTableSrcIface.setDescription('The source interface name')
firewallTableDstIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableDstIface.setStatus('current')
if mibBuilder.loadTexts: firewallTableDstIface.setDescription('The destination interface name')
firewallTableSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableSrcIp.setStatus('current')
if mibBuilder.loadTexts: firewallTableSrcIp.setDescription('The source IP Address')
firewallTableSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableSrcMask.setStatus('current')
if mibBuilder.loadTexts: firewallTableSrcMask.setDescription('The net mask for the source IP Address')
firewallTableDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableDstIp.setStatus('current')
if mibBuilder.loadTexts: firewallTableDstIp.setDescription('The destination IP Address')
firewallTableDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableDstMask.setStatus('current')
if mibBuilder.loadTexts: firewallTableDstMask.setDescription('The net mask for the destination IP Address')
firewallTableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableProtocol.setStatus('current')
if mibBuilder.loadTexts: firewallTableProtocol.setDescription('The protocol in number')
firewallTableStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableStartPort.setStatus('current')
if mibBuilder.loadTexts: firewallTableStartPort.setDescription('The start port number')
firewallTableEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableEndPort.setStatus('current')
if mibBuilder.loadTexts: firewallTableEndPort.setDescription('The end port number')
firewallTableUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 999999)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableUserGroup.setStatus('current')
if mibBuilder.loadTexts: firewallTableUserGroup.setDescription('User group associated with this rule')
firewallTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableComment.setStatus('current')
if mibBuilder.loadTexts: firewallTableComment.setDescription('The name for the specified rules')
firewallTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableActive.setStatus('current')
if mibBuilder.loadTexts: firewallTableActive.setDescription('The status of the firewall table entry.')
firewallTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 15, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: firewallTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: firewallTableRowStatus.setDescription('The row status in the firewall table entry')
macaccessActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macaccessActive.setStatus('current')
if mibBuilder.loadTexts: macaccessActive.setDescription('Enable/Disable the MAC ACCESS feature of the node.')
macaccessType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macaccessType.setStatus('current')
if mibBuilder.loadTexts: macaccessType.setDescription('Choose the default type of the access, either Allow or Deny.')
macaccessTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 4), )
if mibBuilder.loadTexts: macaccessTable.setStatus('current')
if mibBuilder.loadTexts: macaccessTable.setDescription('This table display the Mac Access Table.')
macaccessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 4, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "macaccessTableIndex"))
if mibBuilder.loadTexts: macaccessTableEntry.setStatus('current')
if mibBuilder.loadTexts: macaccessTableEntry.setDescription('Represent the entry in the Mac Access table.')
macaccessTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: macaccessTableIndex.setStatus('current')
if mibBuilder.loadTexts: macaccessTableIndex.setDescription('Specify the index of the MAC Access table.')
macaccessTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macaccessTableMac.setStatus('current')
if mibBuilder.loadTexts: macaccessTableMac.setDescription('The MAC address to be filtered.')
macaccessTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macaccessTableType.setStatus('current')
if mibBuilder.loadTexts: macaccessTableType.setDescription('The type of the access for the MAC access table entry.')
macaccessTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macaccessTableComment.setStatus('current')
if mibBuilder.loadTexts: macaccessTableComment.setDescription('An optional comment associated to entry of the MAC Access table.')
macaccessTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macaccessTableActive.setStatus('current')
if mibBuilder.loadTexts: macaccessTableActive.setDescription('The status of the MAC access table entry.')
macaccessTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macaccessTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: macaccessTableRowStatus.setDescription('The row status in the MAC Access table entry')
macActiveListExecute = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macActiveListExecute.setStatus('current')
if mibBuilder.loadTexts: macActiveListExecute.setDescription('A command to execute the Active MAC list')
macActiveTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 5), )
if mibBuilder.loadTexts: macActiveTable.setStatus('current')
if mibBuilder.loadTexts: macActiveTable.setDescription('This is the read-only Active MAC table.')
macActiveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 5, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "macActiveTableIndex"))
if mibBuilder.loadTexts: macActiveTableEntry.setStatus('current')
if mibBuilder.loadTexts: macActiveTableEntry.setDescription('Represent the entry in the Active MAC table.')
macActiveTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: macActiveTableIndex.setStatus('current')
if mibBuilder.loadTexts: macActiveTableIndex.setDescription('Specify the index of the Active MAC table.')
macActiveTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macActiveTableMac.setStatus('current')
if mibBuilder.loadTexts: macActiveTableMac.setDescription('Specify the MAC address of the active user Active MAC table.')
macActiveTableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 16, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macActiveTableIp.setStatus('current')
if mibBuilder.loadTexts: macActiveTableIp.setDescription('Specify the MAC address of the active user Active MAC table.')
natActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natActive.setStatus('current')
if mibBuilder.loadTexts: natActive.setDescription('Enable/Disable the NAT Table of the node.')
natTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2), )
if mibBuilder.loadTexts: natTable.setStatus('current')
if mibBuilder.loadTexts: natTable.setDescription('This table display the NAT Table.')
natTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "natTableIndex"))
if mibBuilder.loadTexts: natTableEntry.setStatus('current')
if mibBuilder.loadTexts: natTableEntry.setDescription('Represent the entry in the NAT table.')
natTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: natTableIndex.setStatus('current')
if mibBuilder.loadTexts: natTableIndex.setDescription('Specify the index of the NAT table.')
natTableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("both", 3))).clone('tcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natTableProtocol.setStatus('current')
if mibBuilder.loadTexts: natTableProtocol.setDescription('Define the type of protocol of the NAT Table entry')
natTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natTablePort.setStatus('current')
if mibBuilder.loadTexts: natTablePort.setDescription('Define the port number of the NAT Table entry')
natTableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natTableIp.setStatus('current')
if mibBuilder.loadTexts: natTableIp.setDescription('Define the IP Address of the NAT Table entry')
natTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natTableComment.setStatus('current')
if mibBuilder.loadTexts: natTableComment.setDescription('An optional comment associated to entry of the NAT table.')
natTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natTableActive.setStatus('current')
if mibBuilder.loadTexts: natTableActive.setDescription('The status of the NAT table entry.')
natTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 17, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: natTableRowStatus.setDescription('The row status in the NAT table entry')
shapingActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingActive.setStatus('current')
if mibBuilder.loadTexts: shapingActive.setDescription('Enable/disable the traffic shaping service of the device')
shapingWanRateup = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingWanRateup.setStatus('current')
if mibBuilder.loadTexts: shapingWanRateup.setDescription('WAN port uplink speed in Mbps.')
shapingWanRatedown = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingWanRatedown.setStatus('current')
if mibBuilder.loadTexts: shapingWanRatedown.setDescription('WAN port downlink speed in Mbps.')
shapingMeshRateup = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingMeshRateup.setStatus('current')
if mibBuilder.loadTexts: shapingMeshRateup.setDescription('Mesh port uplink speed in Mbps.')
shapingMeshRatedown = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingMeshRatedown.setStatus('current')
if mibBuilder.loadTexts: shapingMeshRatedown.setDescription('Mesh port downlink speed in Mbps.')
shapingVlanRateup = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingVlanRateup.setStatus('current')
if mibBuilder.loadTexts: shapingVlanRateup.setDescription('VLAN port uplink speed in Mbps.')
shapingVlanRatedown = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingVlanRatedown.setStatus('current')
if mibBuilder.loadTexts: shapingVlanRatedown.setDescription('VLAN port downlink speed in Mbps.')
shapingDefaultup = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingDefaultup.setStatus('current')
if mibBuilder.loadTexts: shapingDefaultup.setDescription('User default uplink speed in kbps.')
shapingDefaultdown = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shapingDefaultdown.setStatus('current')
if mibBuilder.loadTexts: shapingDefaultdown.setDescription('User default downlink speed in kbps.')
shapingTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10), )
if mibBuilder.loadTexts: shapingTable.setStatus('current')
if mibBuilder.loadTexts: shapingTable.setDescription('This table display the traffic shaping table.')
shapingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "shapingTableIndex"))
if mibBuilder.loadTexts: shapingTableEntry.setStatus('current')
if mibBuilder.loadTexts: shapingTableEntry.setDescription('Represent the entry in the traffic shaping table.')
shapingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: shapingTableIndex.setStatus('current')
if mibBuilder.loadTexts: shapingTableIndex.setDescription('Specify the index of the traffic shaping table.')
shapingTableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("both", 3))).clone('tcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shapingTableProtocol.setStatus('current')
if mibBuilder.loadTexts: shapingTableProtocol.setDescription('Define the type of protocol of the traffic shaping Table entry')
shapingTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shapingTablePort.setStatus('current')
if mibBuilder.loadTexts: shapingTablePort.setDescription('Define the port number of the traffic shaping Table entry')
shapingTableMinsize = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shapingTableMinsize.setStatus('current')
if mibBuilder.loadTexts: shapingTableMinsize.setDescription('Define the minimum packet size of the traffic shaping Table entry')
shapingTableMaxsize = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shapingTableMaxsize.setStatus('current')
if mibBuilder.loadTexts: shapingTableMaxsize.setDescription('Define the maximum packet size of the traffic shaping Table entry')
shapingTablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("background", 1), ("video", 2), ("voice", 3), ("besteffort", 4))).clone('background')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shapingTablePriority.setStatus('current')
if mibBuilder.loadTexts: shapingTablePriority.setDescription('Define the type of priority of the traffic shaping Table entry')
shapingTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shapingTableComment.setStatus('current')
if mibBuilder.loadTexts: shapingTableComment.setDescription('An optional comment associated to entry of the traffiic shaping table.')
shapingTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shapingTableActive.setStatus('current')
if mibBuilder.loadTexts: shapingTableActive.setDescription('The status of the traffic shaping table entry.')
shapingTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 19, 10, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shapingTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: shapingTableRowStatus.setDescription('The row status in the traffic shaping table entry')
pppoeActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeActive.setStatus('current')
if mibBuilder.loadTexts: pppoeActive.setDescription('Enable/disable the PPPoE service of the system')
pppoeUsername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeUsername.setStatus('current')
if mibBuilder.loadTexts: pppoeUsername.setDescription('The username of the PPPoE service')
pppoePassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePassword.setStatus('current')
if mibBuilder.loadTexts: pppoePassword.setDescription('The password correspond to the username of the PPPoE service')
pppoeAuthType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2))).clone('pap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeAuthType.setStatus('current')
if mibBuilder.loadTexts: pppoeAuthType.setDescription('The type of authentication')
pppoeUseChap = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeUseChap.setStatus('current')
if mibBuilder.loadTexts: pppoeUseChap.setDescription('Enable/disable server side authentication')
pppoeChapUsername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 20, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeChapUsername.setStatus('current')
if mibBuilder.loadTexts: pppoeChapUsername.setDescription('The username at the server side')
pppoeChapPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 20, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeChapPassword.setStatus('current')
if mibBuilder.loadTexts: pppoeChapPassword.setDescription('The password correspond to the username at the server side')
pptpActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpActive.setStatus('current')
if mibBuilder.loadTexts: pptpActive.setDescription('Enable/disable the PPTP server service of the system')
pptpTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2), )
if mibBuilder.loadTexts: pptpTable.setStatus('current')
if mibBuilder.loadTexts: pptpTable.setDescription('This table display the PPTP server Table.')
pptpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "pptpTableIndex"))
if mibBuilder.loadTexts: pptpTableEntry.setStatus('current')
if mibBuilder.loadTexts: pptpTableEntry.setDescription('Represent the entry in the PPTP server table.')
pptpTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: pptpTableIndex.setStatus('current')
if mibBuilder.loadTexts: pptpTableIndex.setDescription('Specify the index of the PPTP server table.')
pptpTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptpTableUsername.setStatus('current')
if mibBuilder.loadTexts: pptpTableUsername.setDescription('The username of the PPTP server user.')
pptpTablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptpTablePassword.setStatus('current')
if mibBuilder.loadTexts: pptpTablePassword.setDescription('The password for the username of the PPTP server user.')
pptpTableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptpTableIp.setStatus('current')
if mibBuilder.loadTexts: pptpTableIp.setDescription('Define the IP Address of the PPTP server Table entry')
pptpTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptpTableComment.setStatus('current')
if mibBuilder.loadTexts: pptpTableComment.setDescription('An optional comment associated to entry of the PPTP Server users table.')
pptpTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptpTableActive.setStatus('current')
if mibBuilder.loadTexts: pptpTableActive.setDescription('The status of the PPTP Server users table entry.')
pptpTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pptpTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: pptpTableRowStatus.setDescription('The row status in the PPTP Server users table entry')
pptpServerip = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpServerip.setStatus('current')
if mibBuilder.loadTexts: pptpServerip.setDescription('Define the PPTP Server IP Address')
pptpStartip = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpStartip.setStatus('current')
if mibBuilder.loadTexts: pptpStartip.setDescription('Define the PPTP Client Start Address')
pptpEndip = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 21, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpEndip.setStatus('current')
if mibBuilder.loadTexts: pptpEndip.setDescription('Define the PPTP Client End Address')
tmipdActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmipdActive.setStatus('current')
if mibBuilder.loadTexts: tmipdActive.setDescription('Enable/disable the transparent mobile IP Agent service')
tmipdNetname = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 22, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmipdNetname.setStatus('current')
if mibBuilder.loadTexts: tmipdNetname.setDescription('The Mobile IP network name')
tmipdMlrdip = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 22, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmipdMlrdip.setStatus('current')
if mibBuilder.loadTexts: tmipdMlrdip.setDescription('The IP Address of the Mobile Location Register server.')
tmipdVlan = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 22, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('vlan0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmipdVlan.setStatus('current')
if mibBuilder.loadTexts: tmipdVlan.setDescription('The Mobile IP network name')
captiveActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveActive.setStatus('current')
if mibBuilder.loadTexts: captiveActive.setDescription('Enable/disable the webbased authentication')
captiveRedirect = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveRedirect.setStatus('current')
if mibBuilder.loadTexts: captiveRedirect.setDescription('Redirect users to this URL on success authentication')
captivePop3push = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captivePop3push.setStatus('current')
if mibBuilder.loadTexts: captivePop3push.setDescription('Push email to not authenticated users')
captiveExternalActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveExternalActive.setStatus('current')
if mibBuilder.loadTexts: captiveExternalActive.setDescription('Enable/disable external login server')
captiveExternalServer = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveExternalServer.setStatus('current')
if mibBuilder.loadTexts: captiveExternalServer.setDescription('External login server URL')
captiveDefaultIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveDefaultIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: captiveDefaultIdleTimeout.setDescription('Default Idle Timeout.')
captiveDefaultSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveDefaultSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: captiveDefaultSessionTimeout.setDescription('Default Session Timeout.')
captiveHttpActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveHttpActive.setStatus('current')
if mibBuilder.loadTexts: captiveHttpActive.setDescription('Enable/disable login with HTTP')
captiveHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveHttpPort.setStatus('current')
if mibBuilder.loadTexts: captiveHttpPort.setDescription('Port used in captive login.')
captiveHttpsActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveHttpsActive.setStatus('current')
if mibBuilder.loadTexts: captiveHttpsActive.setDescription('Enable/disable login with HTTPS')
captiveHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(3001)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveHttpsPort.setStatus('current')
if mibBuilder.loadTexts: captiveHttpsPort.setDescription('Port used in captive login.')
captiveWebspaceActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveWebspaceActive.setStatus('current')
if mibBuilder.loadTexts: captiveWebspaceActive.setDescription('Enable/disable login with HTTPS')
captiveWebspacePort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(3002)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveWebspacePort.setStatus('current')
if mibBuilder.loadTexts: captiveWebspacePort.setDescription('Port used in captive login.')
captiveDefaultLanguage = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('english')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveDefaultLanguage.setStatus('current')
if mibBuilder.loadTexts: captiveDefaultLanguage.setDescription('The name of the managed device')
captiveMultipleUsername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captiveMultipleUsername.setStatus('current')
if mibBuilder.loadTexts: captiveMultipleUsername.setDescription('Enable/disable multiple login with same username')
captive1xLogin = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 23, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captive1xLogin.setStatus('current')
if mibBuilder.loadTexts: captive1xLogin.setDescription('Enable/disable to use 1x login when available')
radiusclientActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusclientActive.setStatus('current')
if mibBuilder.loadTexts: radiusclientActive.setDescription('Enable/disable RADIUS client service')
radiusclientNasid = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusclientNasid.setStatus('current')
if mibBuilder.loadTexts: radiusclientNasid.setDescription('RADIUS attribute')
radiusclientCalledstationid = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusclientCalledstationid.setStatus('current')
if mibBuilder.loadTexts: radiusclientCalledstationid.setDescription('RADIUS attribute')
radiusclientNasport = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusclientNasport.setStatus('current')
if mibBuilder.loadTexts: radiusclientNasport.setDescription('RADIUS attribute.')
radiusclientNasporttype = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusclientNasporttype.setStatus('current')
if mibBuilder.loadTexts: radiusclientNasporttype.setDescription('RADIUS attribute.')
radiusclientInterimupdate = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusclientInterimupdate.setStatus('current')
if mibBuilder.loadTexts: radiusclientInterimupdate.setDescription('Interim update interval.')
radiusclientTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7), )
if mibBuilder.loadTexts: radiusclientTable.setStatus('current')
if mibBuilder.loadTexts: radiusclientTable.setDescription('This table display the Servers entry of the RADIUS client.')
radiusclientTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "radiusclientTableIndex"))
if mibBuilder.loadTexts: radiusclientTableEntry.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableEntry.setDescription('Represent the entry in the RADIUS client table.')
radiusclientTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: radiusclientTableIndex.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableIndex.setDescription('Specify the index of the RADIUS client table.')
radiusclientTableServername = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusclientTableServername.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableServername.setDescription('The server name of the RADIUS client.')
radiusclientTableServertype = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticate", 1), ("accounting", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusclientTableServertype.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableServertype.setDescription('The server type: authenticate or accounting.')
radiusclientTableServerport = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusclientTableServerport.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableServerport.setDescription('The server port of the RADIUS client.')
radiusclientTableServersecret = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusclientTableServersecret.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableServersecret.setDescription('Share secret of the radius client.')
radiusclientTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusclientTableComment.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableComment.setDescription('An optional comment associated to entry of the RADIUS client table.')
radiusclientTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusclientTableActive.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableActive.setDescription('The status of the RADIUS client table entry.')
radiusclientTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 24, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusclientTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: radiusclientTableRowStatus.setDescription('The row status in the RADIUS client table entry')
httpdActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpdActive.setStatus('current')
if mibBuilder.loadTexts: httpdActive.setDescription('Enable/disable the webbased management')
httpdPort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpdPort.setStatus('current')
if mibBuilder.loadTexts: httpdPort.setDescription('The HTTPD port number.')
httpdUsername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('admin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpdUsername.setStatus('current')
if mibBuilder.loadTexts: httpdUsername.setDescription('The admin username')
httpdPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('admin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpdPassword.setStatus('current')
if mibBuilder.loadTexts: httpdPassword.setDescription('The admin password')
httpdAccessctrl = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpdAccessctrl.setStatus('current')
if mibBuilder.loadTexts: httpdAccessctrl.setDescription('Enable/disable the Access Control')
httpdTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6), )
if mibBuilder.loadTexts: httpdTable.setStatus('current')
if mibBuilder.loadTexts: httpdTable.setDescription('This table display the access control of the HTTPD Table.')
httpdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "httpdTableIndex"))
if mibBuilder.loadTexts: httpdTableEntry.setStatus('current')
if mibBuilder.loadTexts: httpdTableEntry.setDescription('Represent the entry in the HTTPD table.')
httpdTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: httpdTableIndex.setStatus('current')
if mibBuilder.loadTexts: httpdTableIndex.setDescription('Specify the index of the HTTPD table.')
httpdTableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: httpdTableDevice.setStatus('current')
if mibBuilder.loadTexts: httpdTableDevice.setDescription('Allow access from device.')
httpdTableSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: httpdTableSubnet.setStatus('current')
if mibBuilder.loadTexts: httpdTableSubnet.setDescription('Allow access from network')
httpdTableNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: httpdTableNetmask.setStatus('current')
if mibBuilder.loadTexts: httpdTableNetmask.setDescription('Netmask for the subnet')
httpdTableDevnet = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("device", 1), ("network", 2))).clone('device')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: httpdTableDevnet.setStatus('current')
if mibBuilder.loadTexts: httpdTableDevnet.setDescription('Define the type HTTPD Table entry: Use device or network')
httpdTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: httpdTableComment.setStatus('current')
if mibBuilder.loadTexts: httpdTableComment.setDescription('An optional comment associated to entry of the HTTPD table.')
httpdTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: httpdTableActive.setStatus('current')
if mibBuilder.loadTexts: httpdTableActive.setDescription('The status of the HTTPD table entry.')
httpdTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: httpdTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: httpdTableRowStatus.setDescription('The row status in the HTTPD table entry')
httpdCertPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 25, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('httpconf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpdCertPassword.setStatus('current')
if mibBuilder.loadTexts: httpdCertPassword.setDescription('The certificate password')
snmpdActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdActive.setStatus('current')
if mibBuilder.loadTexts: snmpdActive.setDescription('Enable/disable the SNMPD management')
snmpdVersion = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1o2c", 1), ("v3", 2), ("all", 3))).clone('v1o2c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdVersion.setStatus('current')
if mibBuilder.loadTexts: snmpdVersion.setDescription('The SNMP Version')
snmpdPort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(161)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdPort.setStatus('current')
if mibBuilder.loadTexts: snmpdPort.setDescription('SNMPD Port.')
snmpdReadcommunity = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 32)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdReadcommunity.setStatus('current')
if mibBuilder.loadTexts: snmpdReadcommunity.setDescription('The read-only Community for SNMP v1 or v2c user')
snmpdWritecommunity = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 32)).clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdWritecommunity.setStatus('current')
if mibBuilder.loadTexts: snmpdWritecommunity.setDescription('The read-write Community for SNMP v1 or v2c user')
snmpdReadusername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 50)).clone('snmpv3rouser')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdReadusername.setStatus('current')
if mibBuilder.loadTexts: snmpdReadusername.setDescription('The read-only Username for SNMP v3 user')
snmpdWriteusername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 50)).clone('snmpv3rwuser')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdWriteusername.setStatus('current')
if mibBuilder.loadTexts: snmpdWriteusername.setDescription('The read-write Username for SNMP v3 user')
snmpdPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 50)).clone('snmpv3password')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdPassword.setStatus('current')
if mibBuilder.loadTexts: snmpdPassword.setDescription('The authentication password for SNMP v3 user')
snmpdPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 50)).clone('snmpv3passphrase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdPassphrase.setStatus('current')
if mibBuilder.loadTexts: snmpdPassphrase.setDescription('The private passphrase for SNMP v3 user')
snmpdAccessctrl = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdAccessctrl.setStatus('current')
if mibBuilder.loadTexts: snmpdAccessctrl.setDescription('Enable/disable the SNMPD access control')
snmpdTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11), )
if mibBuilder.loadTexts: snmpdTable.setStatus('current')
if mibBuilder.loadTexts: snmpdTable.setDescription('This table display the access control of the SNMPD Table.')
snmpdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "snmpdTableIndex"))
if mibBuilder.loadTexts: snmpdTableEntry.setStatus('current')
if mibBuilder.loadTexts: snmpdTableEntry.setDescription('Represent the entry in the SNMPD table.')
snmpdTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: snmpdTableIndex.setStatus('current')
if mibBuilder.loadTexts: snmpdTableIndex.setDescription('Specify the index of the SNMPD table.')
snmpdTableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpdTableDevice.setStatus('current')
if mibBuilder.loadTexts: snmpdTableDevice.setDescription('Allow access from device.')
snmpdTableSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpdTableSubnet.setStatus('current')
if mibBuilder.loadTexts: snmpdTableSubnet.setDescription('Allow access from network')
snmpdTableNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpdTableNetmask.setStatus('current')
if mibBuilder.loadTexts: snmpdTableNetmask.setDescription('Netmask for the subnet')
snmpdTableDevnet = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("device", 1), ("network", 2))).clone('device')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpdTableDevnet.setStatus('current')
if mibBuilder.loadTexts: snmpdTableDevnet.setDescription('Define the type SNMPD Table entry: Use device or network')
snmpdTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpdTableComment.setStatus('current')
if mibBuilder.loadTexts: snmpdTableComment.setDescription('An optional comment associated to entry of the SNMPD table.')
snmpdTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpdTableActive.setStatus('current')
if mibBuilder.loadTexts: snmpdTableActive.setDescription('The status of the SNMPD table entry.')
snmpdTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 26, 11, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpdTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpdTableRowStatus.setDescription('The row status in the SNMPD table entry')
trapActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapActive.setStatus('current')
if mibBuilder.loadTexts: trapActive.setDescription('Enable/disable Trap management of the device')
trapConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapConfiguration.setStatus('current')
if mibBuilder.loadTexts: trapConfiguration.setDescription('Enable/disable the trap on Configuration')
trapSecurity = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSecurity.setStatus('current')
if mibBuilder.loadTexts: trapSecurity.setDescription('Enable/disable the trap on Security')
trapWireless = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapWireless.setStatus('current')
if mibBuilder.loadTexts: trapWireless.setDescription('Enable/disable the trap on Wireless')
trapOperational = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapOperational.setStatus('current')
if mibBuilder.loadTexts: trapOperational.setDescription('Enable/disable the trap on operational')
trapFlash = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapFlash.setStatus('current')
if mibBuilder.loadTexts: trapFlash.setDescription('Enable/disable the trap on flash')
trapTftp = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapTftp.setStatus('current')
if mibBuilder.loadTexts: trapTftp.setDescription('Enable/disable the trap on TFTP')
trapImage = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapImage.setStatus('current')
if mibBuilder.loadTexts: trapImage.setDescription('Enable/disable the trap on Image')
trapAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAuthentication.setStatus('current')
if mibBuilder.loadTexts: trapAuthentication.setDescription('Enable/disable the trap on authentication failure')
trapTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10), )
if mibBuilder.loadTexts: trapTable.setStatus('current')
if mibBuilder.loadTexts: trapTable.setDescription('This table display the SNMP Trap Host Table.')
trapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "trapTableIndex"))
if mibBuilder.loadTexts: trapTableEntry.setStatus('current')
if mibBuilder.loadTexts: trapTableEntry.setDescription('Represent the entry in the SNMP Trap Host table.')
trapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: trapTableIndex.setStatus('current')
if mibBuilder.loadTexts: trapTableIndex.setDescription('Specify the index of the SNMP Trap Host Table.')
trapTableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTableIp.setStatus('current')
if mibBuilder.loadTexts: trapTableIp.setDescription('The destination IP Address of the SNMP Trap Host Table entry')
trapTableCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 32), )).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTableCommunity.setStatus('current')
if mibBuilder.loadTexts: trapTableCommunity.setDescription('The community of the remote SNMP Host.')
trapTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 50), )).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTableUsername.setStatus('current')
if mibBuilder.loadTexts: trapTableUsername.setDescription('The username of the SNMP v3 trap manager.')
trapTableAuthpasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 50), )).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTableAuthpasswd.setStatus('current')
if mibBuilder.loadTexts: trapTableAuthpasswd.setDescription('The authentication password of the SNMP v3 trap manager.')
trapTablePrivpasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 6), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 50), )).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTablePrivpasswd.setStatus('current')
if mibBuilder.loadTexts: trapTablePrivpasswd.setDescription('The privacy password of the SNMP v3 trap manager.')
trapTableVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version2c", 1), ("version3", 2))).clone('version2c')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTableVersion.setStatus('current')
if mibBuilder.loadTexts: trapTableVersion.setDescription('The SNMP version used by the remote trap manager.')
trapTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTableComment.setStatus('current')
if mibBuilder.loadTexts: trapTableComment.setDescription('An optional comment associated to entry of the SNMP Trap Host table.')
trapTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTableActive.setStatus('current')
if mibBuilder.loadTexts: trapTableActive.setDescription('The status of the SNMP Trap Host table entry.')
trapTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 27, 10, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: trapTableRowStatus.setDescription('The row status in the SNMP Trap Host table entry')
ddnsActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsActive.setStatus('current')
if mibBuilder.loadTexts: ddnsActive.setDescription('Enable/disable Dynamic DNS service of the device')
ddnsServer = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 28, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dyndns", 1), ("easydns", 2), ("no-ip", 3), ("zoneedit", 4), ("tzo", 5))).clone('dyndns')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsServer.setStatus('current')
if mibBuilder.loadTexts: ddnsServer.setDescription('Select the Dynamic DNS provider')
ddnsHostname = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 28, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsHostname.setStatus('current')
if mibBuilder.loadTexts: ddnsHostname.setDescription('The hostname associated with the service provider')
ddnsUsername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 28, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsUsername.setStatus('current')
if mibBuilder.loadTexts: ddnsUsername.setDescription('The username')
ddnsPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 28, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsPassword.setStatus('current')
if mibBuilder.loadTexts: ddnsPassword.setDescription('The password')
zeroconfigActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zeroconfigActive.setStatus('current')
if mibBuilder.loadTexts: zeroconfigActive.setDescription('Enable/disable Zero Config service of the device')
zeroconfigProxyActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zeroconfigProxyActive.setStatus('current')
if mibBuilder.loadTexts: zeroconfigProxyActive.setDescription('Handle Client proxy')
zeroconfigProxyport = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 29, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(8080)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zeroconfigProxyport.setStatus('current')
if mibBuilder.loadTexts: zeroconfigProxyport.setDescription('Port used in proxy login')
zeroconfigStaticipActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 29, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zeroconfigStaticipActive.setStatus('current')
if mibBuilder.loadTexts: zeroconfigStaticipActive.setDescription('Handle static ip client')
signallevelExecute = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: signallevelExecute.setStatus('current')
if mibBuilder.loadTexts: signallevelExecute.setDescription('A command to execute the RSSI update')
signallevelTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 2), )
if mibBuilder.loadTexts: signallevelTable.setStatus('current')
if mibBuilder.loadTexts: signallevelTable.setDescription('This table contains the list of signal level between the node and its neighbour nodes.')
signallevelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 2, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "signallevelTableIndex"))
if mibBuilder.loadTexts: signallevelTableEntry.setStatus('current')
if mibBuilder.loadTexts: signallevelTableEntry.setDescription('Represent the entry in the Signal Level table.')
signallevelTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: signallevelTableIndex.setStatus('current')
if mibBuilder.loadTexts: signallevelTableIndex.setDescription('Specify the index of the node Signal Level table.')
signallevelTableSource = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signallevelTableSource.setStatus('current')
if mibBuilder.loadTexts: signallevelTableSource.setDescription("The source node's IP Address")
signallevelTableDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signallevelTableDestination.setStatus('current')
if mibBuilder.loadTexts: signallevelTableDestination.setDescription("The destination node's IP Address")
signallevelTableRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signallevelTableRssi.setStatus('current')
if mibBuilder.loadTexts: signallevelTableRssi.setDescription('The singal level between the source node and destination node in RSSI.')
clientInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3), )
if mibBuilder.loadTexts: clientInfoTable.setStatus('current')
if mibBuilder.loadTexts: clientInfoTable.setDescription('This table contains the list of clients info of the nodes.')
clientInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "clientInfoTableIndex"))
if mibBuilder.loadTexts: clientInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: clientInfoTableEntry.setDescription('Represent the entry in the Client Info table.')
clientInfoTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)))
if mibBuilder.loadTexts: clientInfoTableIndex.setStatus('current')
if mibBuilder.loadTexts: clientInfoTableIndex.setDescription('Specify the index of the node Client Info table.')
clientInfoTableEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientInfoTableEssid.setStatus('current')
if mibBuilder.loadTexts: clientInfoTableEssid.setDescription('The ESSID of the AP')
clientInfoTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientInfoTableMac.setStatus('current')
if mibBuilder.loadTexts: clientInfoTableMac.setDescription('The MAC Address of the client')
clientInfoTableChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientInfoTableChannel.setStatus('current')
if mibBuilder.loadTexts: clientInfoTableChannel.setDescription('The channel of the Client')
clientInfoTableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientInfoTableRate.setStatus('current')
if mibBuilder.loadTexts: clientInfoTableRate.setDescription('The speed rate of the client in kbps')
clientInfoTableRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientInfoTableRssi.setStatus('current')
if mibBuilder.loadTexts: clientInfoTableRssi.setDescription('The singal level between the client and node in RSSI.')
clientInfoTableIdletime = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientInfoTableIdletime.setStatus('current')
if mibBuilder.loadTexts: clientInfoTableIdletime.setDescription('The idle timeout in second of the client.')
clientStatTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4), )
if mibBuilder.loadTexts: clientStatTable.setStatus('current')
if mibBuilder.loadTexts: clientStatTable.setDescription("This table contains the details of the clients' statistic.")
clientStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "clientStatTableIndex"))
if mibBuilder.loadTexts: clientStatTableEntry.setStatus('current')
if mibBuilder.loadTexts: clientStatTableEntry.setDescription('Represent the entry in the Client Stat table.')
clientStatTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512)))
if mibBuilder.loadTexts: clientStatTableIndex.setStatus('current')
if mibBuilder.loadTexts: clientStatTableIndex.setDescription('Specify the index of the node Client Statistic table.')
clientStatTableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatTableIp.setStatus('current')
if mibBuilder.loadTexts: clientStatTableIp.setDescription('The IP Address of the clinet')
clientStatTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatTableMac.setStatus('current')
if mibBuilder.loadTexts: clientStatTableMac.setDescription('The MAC Address of the client')
clientStatTableTx = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatTableTx.setStatus('current')
if mibBuilder.loadTexts: clientStatTableTx.setDescription('The trasmit of the client in bytes count')
clientStatTableRx = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatTableRx.setStatus('current')
if mibBuilder.loadTexts: clientStatTableRx.setDescription('The receive of the client in bytes count')
clientStatTableTxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatTableTxPkt.setStatus('current')
if mibBuilder.loadTexts: clientStatTableTxPkt.setDescription('The transmit of the client in packets count..')
clientStatTableRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatTableRxPkt.setStatus('current')
if mibBuilder.loadTexts: clientStatTableRxPkt.setDescription('The receive of the client in packets count..')
clientStatTableOnlinetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 30, 4, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatTableOnlinetime.setStatus('current')
if mibBuilder.loadTexts: clientStatTableOnlinetime.setDescription("The Online time of the client in 'HH:MM:SS'.")
ipsecActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecActive.setStatus('current')
if mibBuilder.loadTexts: ipsecActive.setDescription('Enable the IP Sec service of the device')
ipsecType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x509", 1), ("rsa", 2), ("psk", 3))).clone('x509')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecType.setStatus('current')
if mibBuilder.loadTexts: ipsecType.setDescription('Select the type of the IP Sec ')
ipsecLocalId = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalId.setStatus('current')
if mibBuilder.loadTexts: ipsecLocalId.setDescription('Define the local identity.')
ipsecRemoteId = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteId.setStatus('current')
if mibBuilder.loadTexts: ipsecRemoteId.setDescription('Define the remote identity.')
ipsecRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteIp.setStatus('current')
if mibBuilder.loadTexts: ipsecRemoteIp.setDescription('Define the remote IP Address.')
ipsecRemoteSubnet = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteSubnet.setStatus('current')
if mibBuilder.loadTexts: ipsecRemoteSubnet.setDescription('Define the remote Subnet.')
ipsecRemoteNetmask = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteNetmask.setStatus('current')
if mibBuilder.loadTexts: ipsecRemoteNetmask.setDescription('Define the remote netmask for the subnet.')
ipsecLocalCertpass = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalCertpass.setStatus('current')
if mibBuilder.loadTexts: ipsecLocalCertpass.setDescription('Define the x.509 certificate pem passphrase.')
ipsecLocalRsa = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecLocalRsa.setStatus('current')
if mibBuilder.loadTexts: ipsecLocalRsa.setDescription('Define the RSA Key.')
ipsecRemoteRsa = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecRemoteRsa.setStatus('current')
if mibBuilder.loadTexts: ipsecRemoteRsa.setDescription('Define the remote RSA Key.')
ipsecPsk = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 31, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecPsk.setStatus('current')
if mibBuilder.loadTexts: ipsecPsk.setDescription('Define the PSK Key.')
l2tpcActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpcActive.setStatus('current')
if mibBuilder.loadTexts: l2tpcActive.setDescription('Enable the L2TP Client feature of the device')
l2tpcLns = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 32, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpcLns.setStatus('current')
if mibBuilder.loadTexts: l2tpcLns.setDescription('Define the L2TP LNS address (Type: DNS String)')
l2tpcUsername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 32, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpcUsername.setStatus('current')
if mibBuilder.loadTexts: l2tpcUsername.setDescription('The username of the L2TP Client')
l2tpcSecret = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 32, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpcSecret.setStatus('current')
if mibBuilder.loadTexts: l2tpcSecret.setDescription('The secret key of the L2TP Client')
autoipActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoipActive.setStatus('current')
if mibBuilder.loadTexts: autoipActive.setDescription('Enable the auto IP service of the device')
autoipMeship = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 33, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoipMeship.setStatus('current')
if mibBuilder.loadTexts: autoipMeship.setDescription('The prefix of the mesh IP Address.')
autoipVlanip = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 33, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(172)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoipVlanip.setStatus('current')
if mibBuilder.loadTexts: autoipVlanip.setDescription('The prefix of the vlan IP Address')
interfacesTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 34, 1), )
if mibBuilder.loadTexts: interfacesTable.setStatus('current')
if mibBuilder.loadTexts: interfacesTable.setDescription('This table contains the list of interfaces name of the system.')
interfacesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 34, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "interfacesTableIndex"))
if mibBuilder.loadTexts: interfacesTableEntry.setStatus('current')
if mibBuilder.loadTexts: interfacesTableEntry.setDescription('Represent the entry in the Interfaces table.')
interfacesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 34, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: interfacesTableIndex.setStatus('current')
if mibBuilder.loadTexts: interfacesTableIndex.setDescription('Specify the index of the interfaces table.')
interfacesTableDev = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 34, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacesTableDev.setStatus('current')
if mibBuilder.loadTexts: interfacesTableDev.setDescription('The name of the interfaces ')
interfacesTableLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 34, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacesTableLabel.setStatus('current')
if mibBuilder.loadTexts: interfacesTableLabel.setDescription('The label of the interfaces ')
mlrdActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlrdActive.setStatus('current')
if mibBuilder.loadTexts: mlrdActive.setDescription('Enable the MLRD service of the device')
mlrdNetname = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlrdNetname.setStatus('current')
if mibBuilder.loadTexts: mlrdNetname.setDescription('The Mobile IP Network name')
mlrdBackupActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlrdBackupActive.setStatus('current')
if mibBuilder.loadTexts: mlrdBackupActive.setDescription('Enable the MLRD backup server')
mlrdRole = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlrdRole.setStatus('current')
if mibBuilder.loadTexts: mlrdRole.setDescription('The role of the server')
mlrdPeer = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('Nil')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlrdPeer.setStatus('current')
if mibBuilder.loadTexts: mlrdPeer.setDescription('Primary/Secondary Server address depends on current role ')
mlrdBackupInterval = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9999)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlrdBackupInterval.setStatus('current')
if mibBuilder.loadTexts: mlrdBackupInterval.setDescription('The backup interval, in minute.')
mlrdStaticActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlrdStaticActive.setStatus('current')
if mibBuilder.loadTexts: mlrdStaticActive.setDescription('Enable or disable the static entry')
mlrdTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8), )
if mibBuilder.loadTexts: mlrdTable.setStatus('current')
if mibBuilder.loadTexts: mlrdTable.setDescription('The MLRD Static entry table.')
mlrdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "mlrdTableIndex"))
if mibBuilder.loadTexts: mlrdTableEntry.setStatus('current')
if mibBuilder.loadTexts: mlrdTableEntry.setDescription('Represent the entry in the MLRD static entry table.')
mlrdTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: mlrdTableIndex.setStatus('current')
if mibBuilder.loadTexts: mlrdTableIndex.setDescription('Specify the index of the MLRD static entry Table.')
mlrdTableMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mlrdTableMac.setStatus('current')
if mibBuilder.loadTexts: mlrdTableMac.setDescription('The static station Mac Address.')
mlrdTableIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mlrdTableIp.setStatus('current')
if mibBuilder.loadTexts: mlrdTableIp.setDescription('The station assigned IP Address.')
mlrdTableParent = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mlrdTableParent.setStatus('current')
if mibBuilder.loadTexts: mlrdTableParent.setDescription('The station assigned parent.')
mlrdTableDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mlrdTableDefaultRoute.setStatus('current')
if mibBuilder.loadTexts: mlrdTableDefaultRoute.setDescription("The station's default route.")
mlrdTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mlrdTableComment.setStatus('current')
if mibBuilder.loadTexts: mlrdTableComment.setDescription('An optional comment associated to entry of the MLRD static entry table.')
mlrdTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mlrdTableActive.setStatus('current')
if mibBuilder.loadTexts: mlrdTableActive.setDescription('The status of the MLRD static table entry.')
mlrdTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 35, 8, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mlrdTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: mlrdTableRowStatus.setDescription('The row status in the MLRD static entry table row')
routedogActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 36, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routedogActive.setStatus('current')
if mibBuilder.loadTexts: routedogActive.setDescription('Enable the route watch dog service of the device')
routedogSsid = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 36, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('ServiceDown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routedogSsid.setStatus('current')
if mibBuilder.loadTexts: routedogSsid.setDescription('The SSID used when no default routes')
routedogInterval = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 36, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routedogInterval.setStatus('current')
if mibBuilder.loadTexts: routedogInterval.setDescription('Checking interval')
routedogReboot = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 36, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routedogReboot.setStatus('current')
if mibBuilder.loadTexts: routedogReboot.setDescription('Enable the system to reboot when interval count is reached')
routedogIntervaCount = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 36, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routedogIntervaCount.setStatus('current')
if mibBuilder.loadTexts: routedogIntervaCount.setDescription('Number of interval before perform system reboot')
linuxdogActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 37, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linuxdogActive.setStatus('current')
if mibBuilder.loadTexts: linuxdogActive.setDescription('Enable the Linux Kernel watch dog service of the device')
linuxdogInterval = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 37, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linuxdogInterval.setStatus('current')
if mibBuilder.loadTexts: linuxdogInterval.setDescription('Checking interval')
advTunningConntrackMax = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4096, 212368)).clone(212368)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackMax.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackMax.setDescription('Max Connection Tracking')
advTunningConntrackGenericTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1200)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackGenericTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackGenericTimeout.setDescription('Connection Tracking generic timeout')
advTunningConntrackIcmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackIcmpTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackIcmpTimeout.setDescription('Connection Tracking icmp timeout')
advTunningConntrackTcpcloseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackTcpcloseTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackTcpcloseTimeout.setDescription('Connection Tracking TCP close timeout')
advTunningConntrackTcpclosewaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackTcpclosewaitTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackTcpclosewaitTimeout.setDescription('Connection Tracking TCP close wait timeout')
advTunningConntrackTcpestablishTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 864000)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackTcpestablishTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackTcpestablishTimeout.setDescription('Connection Tracking TCP established timeout')
advTunningConntrackTcpfinwaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackTcpfinwaitTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackTcpfinwaitTimeout.setDescription('Connection Tracking TCP finished wait timeout')
advTunningConntrackTcplastackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackTcplastackTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackTcplastackTimeout.setDescription('Connection Tracking TCP last ack timeout')
advTunningConntrackTcpsynrecvTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackTcpsynrecvTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackTcpsynrecvTimeout.setDescription('Connection Tracking TCP syn receive timeout')
advTunningConntrackTcpsynsentTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 240)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackTcpsynsentTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackTcpsynsentTimeout.setDescription('Connection Tracking TCP syn sent timeout')
advTunningConntrackTcptimewaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 240)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackTcptimewaitTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackTcptimewaitTimeout.setDescription('Connection Tracking TCP time wait timeout')
advTunningConntrackUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackUdpTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackUdpTimeout.setDescription('Connection Tracking UDP timeout')
advTunningConntrackUdpstreamTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 360)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningConntrackUdpstreamTimeout.setStatus('current')
if mibBuilder.loadTexts: advTunningConntrackUdpstreamTimeout.setDescription('Connection Tracking UDP stream timeout')
advTunningWirelessRadio0Distance = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningWirelessRadio0Distance.setStatus('current')
if mibBuilder.loadTexts: advTunningWirelessRadio0Distance.setDescription('Estimate operating distance (meter) 0 - card default')
advTunningWirelessRadio1Distance = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningWirelessRadio1Distance.setStatus('current')
if mibBuilder.loadTexts: advTunningWirelessRadio1Distance.setDescription('Estimate operating distance (meter) 0 - card default')
advTunningWirelessRadio2Distance = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningWirelessRadio2Distance.setStatus('current')
if mibBuilder.loadTexts: advTunningWirelessRadio2Distance.setDescription('Estimate operating distance (meter) 0 - card default')
advTunningWirelessRadio3Distance = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningWirelessRadio3Distance.setStatus('current')
if mibBuilder.loadTexts: advTunningWirelessRadio3Distance.setDescription('Estimate operating distance (meter) 0 - card default')
advTunningWirelessRegionDomain = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: advTunningWirelessRegionDomain.setStatus('current')
if mibBuilder.loadTexts: advTunningWirelessRegionDomain.setDescription('The wireless regulatory domain')
advTunningWirelessCountry = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(840)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningWirelessCountry.setStatus('current')
if mibBuilder.loadTexts: advTunningWirelessCountry.setDescription('Wireless Country settings')
advTunningWirelessOutdoor = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningWirelessOutdoor.setStatus('current')
if mibBuilder.loadTexts: advTunningWirelessOutdoor.setDescription('Operating in Outdoor')
advTunningWirelessXChannel = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 38, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: advTunningWirelessXChannel.setStatus('current')
if mibBuilder.loadTexts: advTunningWirelessXChannel.setDescription('Enable extended channel mode')
sshdActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 39, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshdActive.setStatus('current')
if mibBuilder.loadTexts: sshdActive.setDescription('Enable the SSH service of the device')
sshdPort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 39, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshdPort.setStatus('current')
if mibBuilder.loadTexts: sshdPort.setDescription('The port number of the device use for SSH purpose.')
wmeTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1), )
if mibBuilder.loadTexts: wmeTable.setStatus('current')
if mibBuilder.loadTexts: wmeTable.setDescription('The Wireless Multimedia Extension table.')
wmeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "wmeTableIndex"))
if mibBuilder.loadTexts: wmeTableEntry.setStatus('current')
if mibBuilder.loadTexts: wmeTableEntry.setDescription('Represent the entry in the WME table.')
wmeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: wmeTableIndex.setStatus('current')
if mibBuilder.loadTexts: wmeTableIndex.setDescription('Specify the index of the WME Table.')
wmeTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableName.setStatus('current')
if mibBuilder.loadTexts: wmeTableName.setDescription('The interface name.')
wmeTableCwminBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableCwminBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableCwminBe.setDescription('CWMIN parameter for Best effort class')
wmeTableCwminBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableCwminBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableCwminBk.setDescription('CWMIN parameter for background class')
wmeTableCwminVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableCwminVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableCwminVi.setDescription('CWMIN parameter for Video class')
wmeTableCwminVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableCwminVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableCwminVo.setDescription('CWMIN parameter for Voice class')
wmeTableBssCwminBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssCwminBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssCwminBe.setDescription('BSS_CWMIN parameter for Best effort class')
wmeTableBssCwminBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssCwminBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssCwminBk.setDescription('BSS_CWMIN parameter for background class')
wmeTableBssCwminVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssCwminVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssCwminVi.setDescription('BSS_CWMIN parameter for Video class')
wmeTableBssCwminVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssCwminVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssCwminVo.setDescription('BSS_CWMIN parameter for Voice class')
wmeTableCwmaxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableCwmaxBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableCwmaxBe.setDescription('CWMAX parameter for Best effort class')
wmeTableCwmaxBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableCwmaxBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableCwmaxBk.setDescription('CWMAX parameter for background class')
wmeTableCwmaxVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableCwmaxVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableCwmaxVi.setDescription('CWMAX parameter for Video class')
wmeTableCwmaxVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableCwmaxVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableCwmaxVo.setDescription('CWMAX parameter for Voice class')
wmeTableBssCwmaxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssCwmaxBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssCwmaxBe.setDescription('BSS_CWMAX parameter for Best effort class')
wmeTableBssCwmaxBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssCwmaxBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssCwmaxBk.setDescription('BSS_CWMAX parameter for background class')
wmeTableBssCwmaxVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssCwmaxVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssCwmaxVi.setDescription('BSS_CWMAX parameter for Video class')
wmeTableBssCwmaxVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssCwmaxVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssCwmaxVo.setDescription('BSS_CWMAX parameter for Voice class')
wmeTableAifsnBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableAifsnBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableAifsnBe.setDescription('AIFSN parameter for Best effort class')
wmeTableAifsnBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableAifsnBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableAifsnBk.setDescription('AIFSN parameter for background class')
wmeTableAifsnVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableAifsnVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableAifsnVi.setDescription('AIFSN parameter for Video class')
wmeTableAifsnVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableAifsnVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableAifsnVo.setDescription('AIFSN parameter for Voice class')
wmeTableBssAifsnBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssAifsnBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssAifsnBe.setDescription('BSS_AIFSN parameter for Best effort class')
wmeTableBssAifsnBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssAifsnBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssAifsnBk.setDescription('BSS_AIFSN parameter for background class')
wmeTableBssAifsnVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssAifsnVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssAifsnVi.setDescription('BSS_AIFSN parameter for Video class')
wmeTableBssAifsnVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssAifsnVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssAifsnVo.setDescription('BSS_AIFSN parameter for Voice class')
wmeTableTxoplimitBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableTxoplimitBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableTxoplimitBe.setDescription('TXOPLIMIT parameter for Best effort class (in miliseconds)')
wmeTableTxoplimitBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableTxoplimitBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableTxoplimitBk.setDescription('TXOPLIMIT parameter for Background class (in miliseconds)')
wmeTableTxoplimitVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3008)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableTxoplimitVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableTxoplimitVi.setDescription('TXOPLIMIT parameter for Video class (in miliseconds)')
wmeTableTxoplimitVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1504)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableTxoplimitVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableTxoplimitVo.setDescription('TXOPLIMIT parameter for Voice class (in miliseconds)')
wmeTableBssTxoplimitBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssTxoplimitBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssTxoplimitBe.setDescription('BSS_TXOPLIMIT parameter for Best effort class (in miliseconds)')
wmeTableBssTxoplimitBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssTxoplimitBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssTxoplimitBk.setDescription('BSS_TXOPLIMIT parameter for Background class (in miliseconds)')
wmeTableBssTxoplimitVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3008)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssTxoplimitVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssTxoplimitVi.setDescription('BSS_TXOPLIMIT parameter for Video class (in miliseconds)')
wmeTableBssTxoplimitVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1504)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableBssTxoplimitVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableBssTxoplimitVo.setDescription('BSS_TXOPLIMIT parameter for Voice class (in miliseconds)')
wmeTableAcmBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableAcmBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableAcmBe.setDescription('Enable / Disable Admission Control for Best effort class.')
wmeTableAcmBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableAcmBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableAcmBk.setDescription('Enable / Disable Admission Control for Background class.')
wmeTableAcmVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableAcmVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableAcmVi.setDescription('Enable / Disable Admission Control for Video class.')
wmeTableAcmVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableAcmVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableAcmVo.setDescription('Enable / Disable Admission Control for Voice class.')
wmeTableNoackpolicyBe = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableNoackpolicyBe.setStatus('current')
if mibBuilder.loadTexts: wmeTableNoackpolicyBe.setDescription('Enable / Disable support for No-ack for Best effort class.')
wmeTableNoackpolicyBk = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableNoackpolicyBk.setStatus('current')
if mibBuilder.loadTexts: wmeTableNoackpolicyBk.setDescription('Enable / Disable support for No-ack for Background class.')
wmeTableNoackpolicyVi = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableNoackpolicyVi.setStatus('current')
if mibBuilder.loadTexts: wmeTableNoackpolicyVi.setDescription('Enable / Disable support for No-ack for Video class.')
wmeTableNoackpolicyVo = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableNoackpolicyVo.setStatus('current')
if mibBuilder.loadTexts: wmeTableNoackpolicyVo.setDescription('Enable / Disable support for No-ack for Voice class.')
wmeTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableComment.setStatus('current')
if mibBuilder.loadTexts: wmeTableComment.setDescription('An optional comment associated to the WME table.')
wmeTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableActive.setStatus('current')
if mibBuilder.loadTexts: wmeTableActive.setDescription('The status of the WME table entry.')
wmeTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 40, 1, 1, 45), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wmeTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: wmeTableRowStatus.setDescription('The row status in the WME table row')
tm75Active = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 41, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tm75Active.setStatus('current')
if mibBuilder.loadTexts: tm75Active.setDescription('Enable the TM75 temperature sensor')
tm75Resolution = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 41, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pt5c", 0), ("pt25c", 1), ("pt125c", 2), ("pt0625c", 3))).clone('pt5c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tm75Resolution.setStatus('current')
if mibBuilder.loadTexts: tm75Resolution.setDescription('Select the temperature conversion resolution')
tm75Temperature = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 41, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone('X')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tm75Temperature.setStatus('current')
if mibBuilder.loadTexts: tm75Temperature.setDescription('Current Temperature, with 4 digits floating point (-55..128)')
nmsAddressTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1), )
if mibBuilder.loadTexts: nmsAddressTable.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTable.setDescription('This is the list of NMS servers that will be updated by the AP periodically.')
nmsAddressTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "nmsAddressTableIndex"))
if mibBuilder.loadTexts: nmsAddressTableEntry.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTableEntry.setDescription('Represent the entry in the NMS Address table.')
nmsAddressTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: nmsAddressTableIndex.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTableIndex.setDescription('Specify the index of the NMS Address table.')
nmsAddressTableAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsAddressTableAddress.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTableAddress.setDescription('The DNS/IP Address of the NMS server.')
nmsAddressTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsAddressTablePort.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTablePort.setDescription('The NMS server port.')
nmsAddressTableInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsAddressTableInterval.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTableInterval.setDescription('The AP update interval of that particular NMS server.')
nmsAddressTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsAddressTableComment.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTableComment.setDescription('An optional description regarding the entry of the NMS Address table.')
nmsAddressTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsAddressTableActive.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTableActive.setDescription('The status of the NMS Address table entry.')
nmsAddressTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 42, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsAddressTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: nmsAddressTableRowStatus.setDescription('The row status in the NMS Address table entry.')
userDbUsername = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDbUsername.setStatus('current')
if mibBuilder.loadTexts: userDbUsername.setDescription('The username of the user entry.')
userDbPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDbPassword.setStatus('current')
if mibBuilder.loadTexts: userDbPassword.setDescription('The login password for the username in the User database.')
userDbGroupid = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDbGroupid.setStatus('current')
if mibBuilder.loadTexts: userDbGroupid.setDescription('The User Group id assign for the user in the database.')
userDbAddCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDbAddCmd.setStatus('current')
if mibBuilder.loadTexts: userDbAddCmd.setDescription('SnmpSet this item to add the entry to the group, with the parameters stored in the temp folder')
userDbEditCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDbEditCmd.setStatus('current')
if mibBuilder.loadTexts: userDbEditCmd.setDescription('SnmpSet this item to edit the entry in the group, with the parameters stored in the temp folder')
userDbDelCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDbDelCmd.setStatus('current')
if mibBuilder.loadTexts: userDbDelCmd.setDescription('SnmpSet the id to delete the entry from the table')
userDbTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 7), )
if mibBuilder.loadTexts: userDbTable.setStatus('current')
if mibBuilder.loadTexts: userDbTable.setDescription('This table contains the local user database.')
userDbTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 7, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "userDbTableIndex"))
if mibBuilder.loadTexts: userDbTableEntry.setStatus('current')
if mibBuilder.loadTexts: userDbTableEntry.setDescription('Represent the entry in the local user database table.')
userDbTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: userDbTableIndex.setStatus('current')
if mibBuilder.loadTexts: userDbTableIndex.setDescription('Specify the index of the user group table.')
userDbTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userDbTableName.setStatus('current')
if mibBuilder.loadTexts: userDbTableName.setDescription('The name of the user')
userDbTablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userDbTablePassword.setStatus('current')
if mibBuilder.loadTexts: userDbTablePassword.setDescription('The login password for the username')
userDbTableGid = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userDbTableGid.setStatus('current')
if mibBuilder.loadTexts: userDbTableGid.setDescription('The group id used for the username')
userDbTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 43, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("loggedin", 2), ("idle", 3), ("expired", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userDbTableStatus.setStatus('current')
if mibBuilder.loadTexts: userDbTableStatus.setDescription('The default download bandwidth of the entry')
userGroupId = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupId.setStatus('current')
if mibBuilder.loadTexts: userGroupId.setDescription('The ID number of the User Group.')
userGroupName = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupName.setStatus('current')
if mibBuilder.loadTexts: userGroupName.setDescription('The Name of the User Group.')
userGroupLanguage = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupLanguage.setStatus('current')
if mibBuilder.loadTexts: userGroupLanguage.setDescription('The default language of the User Group.')
userGroupUpload = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupUpload.setStatus('current')
if mibBuilder.loadTexts: userGroupUpload.setDescription('The upload bandwidth of the User Group.')
userGroupDownload = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupDownload.setStatus('current')
if mibBuilder.loadTexts: userGroupDownload.setDescription('The download bandwidth of the User Group.')
userGroupIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: userGroupIdleTimeout.setDescription('The default idle timeout of the User Group.')
userGroupSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: userGroupSessionTimeout.setDescription('The default session timeout of the User Group.')
userGroupUrl = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupUrl.setStatus('current')
if mibBuilder.loadTexts: userGroupUrl.setDescription('The default URL to direct to for the user in this User Group.')
userGroupComment = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupComment.setStatus('current')
if mibBuilder.loadTexts: userGroupComment.setDescription('The optional comment for the User Group.')
userGroupAddCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupAddCmd.setStatus('current')
if mibBuilder.loadTexts: userGroupAddCmd.setDescription('SnmpSet this item to add the entry to the group, with the parameters stored in the temp folder')
userGroupEditCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupEditCmd.setStatus('current')
if mibBuilder.loadTexts: userGroupEditCmd.setDescription('SnmpSet this item to edit the entry in the group, with the parameters stored in the temp folder')
userGroupDelCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupDelCmd.setStatus('current')
if mibBuilder.loadTexts: userGroupDelCmd.setDescription('SnmpSet the id to delete the entry from the group')
userGroupTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13), )
if mibBuilder.loadTexts: userGroupTable.setStatus('current')
if mibBuilder.loadTexts: userGroupTable.setDescription('This table contains the local user group.')
userGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "userGroupTableIndex"))
if mibBuilder.loadTexts: userGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: userGroupTableEntry.setDescription('Represent the entry in the user group table.')
userGroupTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: userGroupTableIndex.setStatus('current')
if mibBuilder.loadTexts: userGroupTableIndex.setDescription('Specify the index of the user group table.')
userGroupTableGid = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableGid.setStatus('current')
if mibBuilder.loadTexts: userGroupTableGid.setDescription('The group id of the entry')
userGroupTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableName.setStatus('current')
if mibBuilder.loadTexts: userGroupTableName.setDescription('The group name of the entry')
userGroupTableLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableLanguage.setStatus('current')
if mibBuilder.loadTexts: userGroupTableLanguage.setDescription("The group's default language of the entry")
userGroupTableUpload = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 300000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableUpload.setStatus('current')
if mibBuilder.loadTexts: userGroupTableUpload.setDescription('The default upload bandwidth of the entry')
userGroupTableDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 300000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableDownload.setStatus('current')
if mibBuilder.loadTexts: userGroupTableDownload.setDescription('The default download bandwidth of the entry')
userGroupTableIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: userGroupTableIdleTimeout.setDescription('The default idle timeout of the entry')
userGroupTableSessTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableSessTimeout.setStatus('current')
if mibBuilder.loadTexts: userGroupTableSessTimeout.setDescription('The default session timeout of the entry')
userGroupTableUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableUrl.setStatus('current')
if mibBuilder.loadTexts: userGroupTableUrl.setDescription('The redirect URL for the entry')
userGroupTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 44, 13, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGroupTableComment.setStatus('current')
if mibBuilder.loadTexts: userGroupTableComment.setDescription("The group's optional comment")
statickeyWifi0Key0 = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statickeyWifi0Key0.setStatus('current')
if mibBuilder.loadTexts: statickeyWifi0Key0.setDescription('Static Key 0 for Wifi0')
statickeyWifi0Key1 = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statickeyWifi0Key1.setStatus('current')
if mibBuilder.loadTexts: statickeyWifi0Key1.setDescription('Static Key 1 for Wifi0')
statickeyWifi0Key2 = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statickeyWifi0Key2.setStatus('current')
if mibBuilder.loadTexts: statickeyWifi0Key2.setDescription('Static Key 2 for Wifi0')
statickeyWifi0Key3 = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statickeyWifi0Key3.setStatus('current')
if mibBuilder.loadTexts: statickeyWifi0Key3.setDescription('Static Key 3 for Wifi0')
statickeyWifi1Key0 = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statickeyWifi1Key0.setStatus('current')
if mibBuilder.loadTexts: statickeyWifi1Key0.setDescription('Static Key 0 for Wifi1')
statickeyWifi1Key1 = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statickeyWifi1Key1.setStatus('current')
if mibBuilder.loadTexts: statickeyWifi1Key1.setDescription('Static Key 1 for Wifi1')
statickeyWifi1Key2 = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statickeyWifi1Key2.setStatus('current')
if mibBuilder.loadTexts: statickeyWifi1Key2.setDescription('Static Key 2 for Wifi1')
statickeyWifi1Key3 = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 45, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statickeyWifi1Key3.setStatus('current')
if mibBuilder.loadTexts: statickeyWifi1Key3.setDescription('Static Key 3 for Wifi1')
dhcrelayActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcrelayActive.setStatus('current')
if mibBuilder.loadTexts: dhcrelayActive.setDescription('Enable/Disable the DHCP Relay.')
dhcrelayPort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(67)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcrelayPort.setStatus('current')
if mibBuilder.loadTexts: dhcrelayPort.setDescription('DHCP Relay Port.')
dhcrelayHopcount = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcrelayHopcount.setStatus('current')
if mibBuilder.loadTexts: dhcrelayHopcount.setDescription('Maximum hop count before the packet is dropped.')
dhcrelayPktsize = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 1400)).clone(1400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcrelayPktsize.setStatus('current')
if mibBuilder.loadTexts: dhcrelayPktsize.setDescription('Maximum Packet size for the DHCP discover.')
dhcrelayTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 5), )
if mibBuilder.loadTexts: dhcrelayTable.setStatus('current')
if mibBuilder.loadTexts: dhcrelayTable.setDescription('This is the DHCP Relay table.')
dhcrelayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 5, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "dhcrelayTableIndex"))
if mibBuilder.loadTexts: dhcrelayTableEntry.setStatus('current')
if mibBuilder.loadTexts: dhcrelayTableEntry.setDescription('Represent the entry in the DHCP Relay table.')
dhcrelayTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: dhcrelayTableIndex.setStatus('current')
if mibBuilder.loadTexts: dhcrelayTableIndex.setDescription('Specify the index of the DHCP Relay table.')
dhcrelayTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("server", 1), ("interface", 2))).clone('interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcrelayTableType.setStatus('current')
if mibBuilder.loadTexts: dhcrelayTableType.setDescription('The type of this DHCP Relay table entry.')
dhcrelayTableExtra = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcrelayTableExtra.setStatus('current')
if mibBuilder.loadTexts: dhcrelayTableExtra.setDescription('Extra information for the type, eg for server(1)-ip address, or interface(2)-interface name.')
dhcrelayTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcrelayTableComments.setStatus('current')
if mibBuilder.loadTexts: dhcrelayTableComments.setDescription('An optional description regarding the entry of the DHCP Relay table.')
dhcrelayTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcrelayTableActive.setStatus('current')
if mibBuilder.loadTexts: dhcrelayTableActive.setDescription('The status of the DHCP Relay table entry.')
dhcrelayTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 46, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcrelayTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcrelayTableRowStatus.setDescription('The row status in the DHCP Relay table entry.')
multicastActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 47, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastActive.setStatus('current')
if mibBuilder.loadTexts: multicastActive.setDescription('Enable/Disable the Multicast.')
ospfdActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 48, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfdActive.setStatus('current')
if mibBuilder.loadTexts: ospfdActive.setDescription('Enable/Disable the OSPF.')
ebtablesActive = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ebtablesActive.setStatus('current')
if mibBuilder.loadTexts: ebtablesActive.setDescription('Enable/Disable the ebtables.')
ebTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2), )
if mibBuilder.loadTexts: ebTable.setStatus('current')
if mibBuilder.loadTexts: ebTable.setDescription('This is the Ebtable rules.')
ebTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1), ).setIndexNames((0, "ENGENIUS-MESH-MIB", "ebTableIndex"))
if mibBuilder.loadTexts: ebTableEntry.setStatus('current')
if mibBuilder.loadTexts: ebTableEntry.setDescription('Represent the entry in the ebtables.')
ebTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: ebTableIndex.setStatus('current')
if mibBuilder.loadTexts: ebTableIndex.setDescription('Specify the index of the ebtables.')
ebTableTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2))).clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableTarget.setStatus('current')
if mibBuilder.loadTexts: ebTableTarget.setDescription('Select the type of this rule: allow or deny .')
ebTableSrcIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableSrcIface.setStatus('current')
if mibBuilder.loadTexts: ebTableSrcIface.setDescription('Source Interface')
ebTableDstIface = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Nil')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableDstIface.setStatus('current')
if mibBuilder.loadTexts: ebTableDstIface.setDescription('Destination Interface')
ebTableMatchMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableMatchMac.setStatus('current')
if mibBuilder.loadTexts: ebTableMatchMac.setDescription('Enable or disable the MAC matching.')
ebTableSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableSrcMac.setStatus('current')
if mibBuilder.loadTexts: ebTableSrcMac.setDescription('Source MAC Address')
ebTableDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableDstMac.setStatus('current')
if mibBuilder.loadTexts: ebTableDstMac.setDescription('Destination MAC Address')
ebTableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4", 1), ("arp", 2), ("e802dot1q", 3), ("ppp", 4))).clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableProtocol.setStatus('current')
if mibBuilder.loadTexts: ebTableProtocol.setDescription('The protocol type.')
ebTableSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableSrcIp.setStatus('current')
if mibBuilder.loadTexts: ebTableSrcIp.setDescription('Source IP Address')
ebTableSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableSrcMask.setStatus('current')
if mibBuilder.loadTexts: ebTableSrcMask.setDescription('Source netmask')
ebTableDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableDstIp.setStatus('current')
if mibBuilder.loadTexts: ebTableDstIp.setDescription('Destination IP Address')
ebTableDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableDstMask.setStatus('current')
if mibBuilder.loadTexts: ebTableDstMask.setDescription('Destination netmask')
ebTableIpProt = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17))).clone('icmp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableIpProt.setStatus('current')
if mibBuilder.loadTexts: ebTableIpProt.setDescription('The protocol type.')
ebTableSrcPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65536)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableSrcPortStart.setStatus('current')
if mibBuilder.loadTexts: ebTableSrcPortStart.setDescription('Start of Source port')
ebTableSrcPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65536)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableSrcPortEnd.setStatus('current')
if mibBuilder.loadTexts: ebTableSrcPortEnd.setDescription('End of Source port')
ebTableDstPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65536)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableDstPortStart.setStatus('current')
if mibBuilder.loadTexts: ebTableDstPortStart.setDescription('Start of Destination port')
ebTableDstPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65536)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableDstPortEnd.setStatus('current')
if mibBuilder.loadTexts: ebTableDstPortEnd.setDescription('End of Destination port')
ebTableVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableVlanid.setStatus('current')
if mibBuilder.loadTexts: ebTableVlanid.setDescription('VLAN ID')
ebTableComments = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableComments.setStatus('current')
if mibBuilder.loadTexts: ebTableComments.setDescription('Optional comment')
ebTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableActive.setStatus('current')
if mibBuilder.loadTexts: ebTableActive.setDescription('The status of the ebtables entry.')
ebTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 1, 2, 49, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ebTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: ebTableRowStatus.setDescription('The row status in the ebtable entry.')
rebootTime = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootTime.setStatus('current')
if mibBuilder.loadTexts: rebootTime.setDescription('Set a value of timeout (1~300, in seconds) and reboot the device.')
resetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetToDefault.setStatus('current')
if mibBuilder.loadTexts: resetToDefault.setDescription('SnmpSet this command to reset the device back to factory default value.')
uploadDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uploadDownloadFilename.setStatus('current')
if mibBuilder.loadTexts: uploadDownloadFilename.setDescription('The name of the file that wished to be upload/download through TFTP')
uploadDownloadFiletype = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("config", 1), ("firmware", 2), ("ipx509local", 3), ("ipx509remote", 4), ("iprsa", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uploadDownloadFiletype.setStatus('current')
if mibBuilder.loadTexts: uploadDownloadFiletype.setDescription('The type of the file')
uploadDownloadIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uploadDownloadIpaddress.setStatus('current')
if mibBuilder.loadTexts: uploadDownloadIpaddress.setDescription('The TFTP IP Address')
uploadDownloadPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uploadDownloadPassword.setStatus('current')
if mibBuilder.loadTexts: uploadDownloadPassword.setDescription('The password used for extract the certificate file')
uploadDownloadOperationtype = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("uploadandreboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uploadDownloadOperationtype.setStatus('current')
if mibBuilder.loadTexts: uploadDownloadOperationtype.setDescription('The type of TFTP operation to be done')
uploadDownloadExecutetftp = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uploadDownloadExecutetftp.setStatus('current')
if mibBuilder.loadTexts: uploadDownloadExecutetftp.setDescription('Execute the TFTP operation by setting this command to value 1')
logoutAndBlockAction = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logoutAndBlockAction.setStatus('current')
if mibBuilder.loadTexts: logoutAndBlockAction.setDescription('SnmpSet to logout and block the user with the IP address.')
restartSnmpService = MibScalar((1, 3, 6, 1, 4, 1, 14125, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartSnmpService.setStatus('current')
if mibBuilder.loadTexts: restartSnmpService.setDescription('SnmpSet to restart the SNMP Service.')
mibBuilder.exportSymbols("ENGENIUS-MESH-MIB", routedogReboot=routedogReboot, ddnsUsername=ddnsUsername, dhcrelayHopcount=dhcrelayHopcount, routeTable=routeTable, dhcpdTableComments=dhcpdTableComments, clientInfoTable=clientInfoTable, ebTableIpProt=ebTableIpProt, macaccessActive=macaccessActive, wlanInterfaceTableTxPower=wlanInterfaceTableTxPower, captiveHttpsActive=captiveHttpsActive, routedogActive=routedogActive, mlrdStaticActive=mlrdStaticActive, wmeTableAifsnBk=wmeTableAifsnBk, ethInterfaceTableIndex=ethInterfaceTableIndex, networkDomain=networkDomain, httpdCertPassword=httpdCertPassword, ebtablesActive=ebtablesActive, signallevelTable=signallevelTable, ebTableSrcIface=ebTableSrcIface, userGroupDelCmd=userGroupDelCmd, ipAddressesTableIface=ipAddressesTableIface, olsrInterfaceTableHnaValidity=olsrInterfaceTableHnaValidity, ebTableTarget=ebTableTarget, firewallTableProtocol=firewallTableProtocol, nodeConfigurationRadiusClient=nodeConfigurationRadiusClient, vlanInterfaceTableRowStatus=vlanInterfaceTableRowStatus, natTablePort=natTablePort, pptpStartip=pptpStartip, snmpdReadusername=snmpdReadusername, mlrdTableDefaultRoute=mlrdTableDefaultRoute, dnsTableEntry=dnsTableEntry, signallevelExecute=signallevelExecute, shapingMeshRatedown=shapingMeshRatedown, httpdTable=httpdTable, advTunningWirelessRadio3Distance=advTunningWirelessRadio3Distance, radiusclientCalledstationid=radiusclientCalledstationid, vlanInterfaceTable=vlanInterfaceTable, topologyTableLabel=topologyTableLabel, clientStatTableTx=clientStatTableTx, mlrdTableIndex=mlrdTableIndex, ipsecLocalCertpass=ipsecLocalCertpass, nmsAddressTableInterval=nmsAddressTableInterval, olsrInterfaceTableIface=olsrInterfaceTableIface, snmpdPassword=snmpdPassword, olsrPollRate=olsrPollRate, pptpTableComment=pptpTableComment, wmeTableAcmVo=wmeTableAcmVo, userDbTableGid=userDbTableGid, wlanFrequencyAp0TableFrequency=wlanFrequencyAp0TableFrequency, clientStatTableRxPkt=clientStatTableRxPkt, statickeyWifi1Key3=statickeyWifi1Key3, userGroupAddCmd=userGroupAddCmd, olsrInterfaceTableTcValidity=olsrInterfaceTableTcValidity, clientInfoTableChannel=clientInfoTableChannel, olsrGatewayTableComments=olsrGatewayTableComments, systemOperatemode=systemOperatemode, pptpTableUsername=pptpTableUsername, captiveExternalServer=captiveExternalServer, natTableEntry=natTableEntry, radiusclientTableComment=radiusclientTableComment, shapingTable=shapingTable, routeTableEntry=routeTableEntry, nodeConfigurationShaping=nodeConfigurationShaping, dhcrelayTableEntry=dhcrelayTableEntry, ebTableActive=ebTableActive, shapingMeshRateup=shapingMeshRateup, ntpTableIndex=ntpTableIndex, trapTftp=trapTftp, wmeTableAcmVi=wmeTableAcmVi, nodeConfigurationOlsr=nodeConfigurationOlsr, snmpdTableEntry=snmpdTableEntry, wmeTableTxoplimitVi=wmeTableTxoplimitVi, userGroupSessionTimeout=userGroupSessionTimeout, nodeConfigurationSshd=nodeConfigurationSshd, statickeyWifi0Key1=statickeyWifi0Key1, macaccessTableComment=macaccessTableComment, ntpTimezone=ntpTimezone, radiusclientTableServersecret=radiusclientTableServersecret, wlanInterfaceTableSecurity=wlanInterfaceTableSecurity, snmpdTableSubnet=snmpdTableSubnet, wmeTableCwmaxVi=wmeTableCwmaxVi, ebTableSrcPortStart=ebTableSrcPortStart, tmipdMlrdip=tmipdMlrdip, dnsTableIndex=dnsTableIndex, nodeConfigurationSystem=nodeConfigurationSystem, olsrInterfaceTableTcInterval=olsrInterfaceTableTcInterval, nodeCommandReset=nodeCommandReset, natTableRowStatus=natTableRowStatus, macaccessTableType=macaccessTableType, statickeyWifi1Key0=statickeyWifi1Key0, wlanInterfaceTableSeperation=wlanInterfaceTableSeperation, trapOperational=trapOperational, firewallTableStartPort=firewallTableStartPort, ebTableIndex=ebTableIndex, uploadDownloadFilename=uploadDownloadFilename, ebTableEntry=ebTableEntry, userGroupUpload=userGroupUpload, radiusclientTable=radiusclientTable, advTunningConntrackTcpestablishTimeout=advTunningConntrackTcpestablishTimeout, rebootTime=rebootTime, dhcpdTableMaxLease=dhcpdTableMaxLease, clientInfoTableIdletime=clientInfoTableIdletime, nodeConfigurationMlrd=nodeConfigurationMlrd, dhcpClientExecute=dhcpClientExecute, signallevelTableEntry=signallevelTableEntry, trapActive=trapActive, wlanInterfaceTableTxAntenna=wlanInterfaceTableTxAntenna, dhcpClientTableEntry=dhcpClientTableEntry, wlanInterfaceTableDatarate=wlanInterfaceTableDatarate, wlanFrequencyMeshTableRowStatus=wlanFrequencyMeshTableRowStatus, dhcpdTableActive=dhcpdTableActive, dhcpdTableNetstart=dhcpdTableNetstart, pptpServerip=pptpServerip, wlanFrequencyAp1TableRowStatus=wlanFrequencyAp1TableRowStatus, vlanInterfaceTableMac=vlanInterfaceTableMac, linuxdogActive=linuxdogActive, wmeTableNoackpolicyVi=wmeTableNoackpolicyVi, nmsAddressTableComment=nmsAddressTableComment, wmeTableComment=wmeTableComment, interfacesTableEntry=interfacesTableEntry, wlanFrequencyAp1TableIndex=wlanFrequencyAp1TableIndex, shapingTablePort=shapingTablePort, shapingTableMaxsize=shapingTableMaxsize, wmeTableCwminVo=wmeTableCwminVo, natTableComment=natTableComment, PYSNMP_MODULE_ID=engeniusmesh, wlanInterfaceTableBridgePrio=wlanInterfaceTableBridgePrio, mlrdTableParent=mlrdTableParent, clientInfoTableRssi=clientInfoTableRssi, advTunningWirelessRadio0Distance=advTunningWirelessRadio0Distance, natTableIndex=natTableIndex, userGroupUrl=userGroupUrl, olsrGatewayTableEntry=olsrGatewayTableEntry, advTunningConntrackTcpcloseTimeout=advTunningConntrackTcpcloseTimeout, nodeCommandRestartSnmp=nodeCommandRestartSnmp, systemMemory=systemMemory, olsrHysteresisThrHigh=olsrHysteresisThrHigh, statickeyWifi0Key0=statickeyWifi0Key0, nodeStatusSystem=nodeStatusSystem, httpdTableSubnet=httpdTableSubnet, pptpTableActive=pptpTableActive, radiusclientActive=radiusclientActive, olsrWillingnessActive=olsrWillingnessActive, wlanInterfaceTableFreq=wlanInterfaceTableFreq, userGroupEditCmd=userGroupEditCmd, nodeConfigurationHttpd=nodeConfigurationHttpd, sshdPort=sshdPort, wlanFrequencyMeshTableChannel=wlanFrequencyMeshTableChannel, wlanInterfaceTableFragThreshold=wlanInterfaceTableFragThreshold, wmeTableNoackpolicyBe=wmeTableNoackpolicyBe, ebTableDstIface=ebTableDstIface, trapTableActive=trapTableActive, natTableActive=natTableActive, snmpdTableDevnet=snmpdTableDevnet, pptpTableRowStatus=pptpTableRowStatus, olsrInterfaceTableRowStatus=olsrInterfaceTableRowStatus, dhcrelayPort=dhcrelayPort, ebTableSrcIp=ebTableSrcIp, wmeTableBssCwmaxVi=wmeTableBssCwmaxVi, dhcpdTableDns=dhcpdTableDns, ethInterfaceTableComments=ethInterfaceTableComments, wlanInterfaceTableEncryptionKey=wlanInterfaceTableEncryptionKey, httpdTableIndex=httpdTableIndex, httpdTableDevice=httpdTableDevice, radiusclientTableServertype=radiusclientTableServertype, httpdPassword=httpdPassword, advTunningWirelessRadio1Distance=advTunningWirelessRadio1Distance, logoutAndBlockAction=logoutAndBlockAction, systemTrapsSystemStatus=systemTrapsSystemStatus, engeniusmesh=engeniusmesh, olsrGatewayTable=olsrGatewayTable, pppoeChapPassword=pppoeChapPassword, firewallTableSrcIface=firewallTableSrcIface, ebTable=ebTable, natTableProtocol=natTableProtocol, nodeConfigurationTopology=nodeConfigurationTopology, captiveActive=captiveActive, ipsecLocalId=ipsecLocalId, nmsAddressTableActive=nmsAddressTableActive, bridgeInterfaceTableAge=bridgeInterfaceTableAge, systemTrapsSystemConf=systemTrapsSystemConf, mlrdTableActive=mlrdTableActive, routeTableIndex=routeTableIndex, wlanInterfaceTableRtsThreshold=wlanInterfaceTableRtsThreshold, userGroupComment=userGroupComment, wmeTable=wmeTable, wmeTableAifsnBe=wmeTableAifsnBe, routeTableActive=routeTableActive, snmpdReadcommunity=snmpdReadcommunity, snmpdTableNetmask=snmpdTableNetmask, nodeCommandReboot=nodeCommandReboot, firewallActive=firewallActive, mlrdTable=mlrdTable, dhcpdTableLease=dhcpdTableLease, autoipMeship=autoipMeship, routeTableNetmask=routeTableNetmask, mlrdPeer=mlrdPeer, userTrapsUserLogin=userTrapsUserLogin, systemContactPhone=systemContactPhone, ntpTableMinPoll=ntpTableMinPoll, macaccessTableMac=macaccessTableMac, captiveDefaultSessionTimeout=captiveDefaultSessionTimeout, wmeTableCwminVi=wmeTableCwminVi, uploadDownloadFiletype=uploadDownloadFiletype, snmpdTableActive=snmpdTableActive, tmipdVlan=tmipdVlan, ipsecActive=ipsecActive, snmpdTable=snmpdTable, nodeConfigurationDns=nodeConfigurationDns, wirelessInterfaceTableEntry=wirelessInterfaceTableEntry, trapSecurity=trapSecurity, signallevelTableDestination=signallevelTableDestination, bridgeInterfaceTableIndex=bridgeInterfaceTableIndex, trapTableAuthpasswd=trapTableAuthpasswd, interfacesTableLabel=interfacesTableLabel, httpdTableEntry=httpdTableEntry, ebTableSrcPortEnd=ebTableSrcPortEnd, ipAddressesTableEntry=ipAddressesTableEntry, nodeConfigurationLinuxdog=nodeConfigurationLinuxdog, systemDescription=systemDescription, syslogRemoteActive=syslogRemoteActive, snmpdTableDevice=snmpdTableDevice, olsrHysteresisScaling=olsrHysteresisScaling, userGroupTableIdleTimeout=userGroupTableIdleTimeout, pppoeAuthType=pppoeAuthType, userDbTableName=userDbTableName, vlanInterfaceTableActive=vlanInterfaceTableActive, radiusclientTableRowStatus=radiusclientTableRowStatus, userGroupIdleTimeout=userGroupIdleTimeout, radiusclientTableServername=radiusclientTableServername, clientInfoTableEntry=clientInfoTableEntry, networkPrimaryDns=networkPrimaryDns, captiveHttpActive=captiveHttpActive, snmpdPassphrase=snmpdPassphrase, pptpTableIp=pptpTableIp, wmeTableBssAifsnVo=wmeTableBssAifsnVo, dhcpdTableNetend=dhcpdTableNetend, macActiveTableIndex=macActiveTableIndex, nodeConfigurationDhcpd=nodeConfigurationDhcpd, wlanInterfaceTableMode=wlanInterfaceTableMode, ebTableDstPortStart=ebTableDstPortStart, dnsFilterWin2k=dnsFilterWin2k, trapFlash=trapFlash, ntpTableActive=ntpTableActive, firewallTableComment=firewallTableComment, ipsecRemoteNetmask=ipsecRemoteNetmask, ebTableComments=ebTableComments, multicastActive=multicastActive, ddnsActive=ddnsActive, tm75Active=tm75Active, wlanFrequencyAp0TableRowStatus=wlanFrequencyAp0TableRowStatus, wmeTableTxoplimitBk=wmeTableTxoplimitBk, dhcrelayTableIndex=dhcrelayTableIndex, vlanInterfaceTableEntry=vlanInterfaceTableEntry)
mibBuilder.exportSymbols("ENGENIUS-MESH-MIB", clientStatTableRx=clientStatTableRx, topologyTableSource=topologyTableSource, advTunningConntrackTcpclosewaitTimeout=advTunningConntrackTcpclosewaitTimeout, wlanFrequencyAp1TableChannel=wlanFrequencyAp1TableChannel, olsrInterfaceTableEntry=olsrInterfaceTableEntry, ebTableSrcMask=ebTableSrcMask, radiusclientTableEntry=radiusclientTableEntry, bridgeInterfaceTableName=bridgeInterfaceTableName, dnsBogusPriv=dnsBogusPriv, captiveMultipleUsername=captiveMultipleUsername, nodeConfigurationNat=nodeConfigurationNat, uploadDownloadPassword=uploadDownloadPassword, bridgeInterfaceTableFwdDelay=bridgeInterfaceTableFwdDelay, ipsecPsk=ipsecPsk, linuxdogInterval=linuxdogInterval, nodeConfigurationTrap=nodeConfigurationTrap, topologyTableIndex=topologyTableIndex, httpdTableComment=httpdTableComment, wirelessFrequencyMeshTable=wirelessFrequencyMeshTable, advTunningConntrackTcpfinwaitTimeout=advTunningConntrackTcpfinwaitTimeout, routedogInterval=routedogInterval, captiveExternalActive=captiveExternalActive, nodeConfigurationDdns=nodeConfigurationDdns, bridgeInterfaceTableMaxAge=bridgeInterfaceTableMaxAge, wlanFrequencyMeshTableFrequency=wlanFrequencyMeshTableFrequency, dnsTableIpaddress=dnsTableIpaddress, signallevelTableIndex=signallevelTableIndex, wmeTableCwminBe=wmeTableCwminBe, userDbTable=userDbTable, ipAddressesTableRowStatus=ipAddressesTableRowStatus, advTunningConntrackUdpstreamTimeout=advTunningConntrackUdpstreamTimeout, dhcpdTableIndex=dhcpdTableIndex, snmpdTableIndex=snmpdTableIndex, userDbUsername=userDbUsername, nodeConfigurationMulticast=nodeConfigurationMulticast, ntpTableComments=ntpTableComments, macaccessTableRowStatus=macaccessTableRowStatus, userDbTableStatus=userDbTableStatus, wlanFrequencyAp0TableChannel=wlanFrequencyAp0TableChannel, olsrWillingness=olsrWillingness, ipAddressesTableIp=ipAddressesTableIp, ntpTable=ntpTable, nodeConfigurationBridge=nodeConfigurationBridge, snmpdTableRowStatus=snmpdTableRowStatus, signallevelTableSource=signallevelTableSource, nodeConfigurationTmipd=nodeConfigurationTmipd, userGroupLanguage=userGroupLanguage, nmsAddressTableAddress=nmsAddressTableAddress, trapTablePrivpasswd=trapTablePrivpasswd, pptpEndip=pptpEndip, nodeConfigurationMacaccess=nodeConfigurationMacaccess, wmeTableBssAifsnBk=wmeTableBssAifsnBk, nodeConfigurationRoute=nodeConfigurationRoute, macaccessTableActive=macaccessTableActive, shapingTableComment=shapingTableComment, httpdActive=httpdActive, nmsAddressTableRowStatus=nmsAddressTableRowStatus, genericTrapVarMACAddress=genericTrapVarMACAddress, firewallTable=firewallTable, ospfdActive=ospfdActive, statickeyWifi0Key3=statickeyWifi0Key3, syslogActive=syslogActive, wmeTableBssCwminVo=wmeTableBssCwminVo, topologyTable=topologyTable, pptpTablePassword=pptpTablePassword, ipAddressesTableGateway=ipAddressesTableGateway, systemTraps=systemTraps, advTunningWirelessXChannel=advTunningWirelessXChannel, ebTableDstMask=ebTableDstMask, wmeTableBssTxoplimitBk=wmeTableBssTxoplimitBk, zeroconfigProxyport=zeroconfigProxyport, bridgeInterfaceTableHelloInt=bridgeInterfaceTableHelloInt, macaccessTableEntry=macaccessTableEntry, userGroupId=userGroupId, wlanInterfaceTableWpaType=wlanInterfaceTableWpaType, nodeConfigurationL2tpc=nodeConfigurationL2tpc, userTrapsUserLogout=userTrapsUserLogout, ethernetInterfaceTable=ethernetInterfaceTable, clientInfoTableIndex=clientInfoTableIndex, olsrMpr=olsrMpr, advTunningConntrackUdpTimeout=advTunningConntrackUdpTimeout, userDbDelCmd=userDbDelCmd, nodeConfigurationFirewall=nodeConfigurationFirewall, wmeTableAcmBe=wmeTableAcmBe, userGroupTableGid=userGroupTableGid, wirelessFrequencyAp0TableEntry=wirelessFrequencyAp0TableEntry, pptpActive=pptpActive, wmeTableBssAifsnBe=wmeTableBssAifsnBe, nodeConfigurationZeroconfig=nodeConfigurationZeroconfig, firewallTableSrcMask=firewallTableSrcMask, wlanInterfaceTableMac=wlanInterfaceTableMac, dhcpdTableSubnet=dhcpdTableSubnet, nodeConfigurationPptp=nodeConfigurationPptp, olsrLinkQualityType=olsrLinkQualityType, wmeTableNoackpolicyVo=wmeTableNoackpolicyVo, natActive=natActive, nodeConfigurationDhcrelay=nodeConfigurationDhcrelay, advTunningWirelessCountry=advTunningWirelessCountry, ethInterfaceTableBase=ethInterfaceTableBase, dnsTable=dnsTable, wmeTableBssCwmaxBe=wmeTableBssCwmaxBe, networkSecondaryDns=networkSecondaryDns, wmeTableBssCwmaxBk=wmeTableBssCwmaxBk, nodeConfigurationUserDb=nodeConfigurationUserDb, dhcpdActive=dhcpdActive, httpdTableDevnet=httpdTableDevnet, routedogSsid=routedogSsid, l2tpcLns=l2tpcLns, bridgeInterfaceTablePrio=bridgeInterfaceTablePrio, nodeConfigurationVlan=nodeConfigurationVlan, wmeTableTxoplimitVo=wmeTableTxoplimitVo, genericTrapVarHostname=genericTrapVarHostname, dhcrelayActive=dhcrelayActive, systemObjectid=systemObjectid, routeTableDevice=routeTableDevice, ebTableVlanid=ebTableVlanid, zeroconfigActive=zeroconfigActive, pppoeChapUsername=pppoeChapUsername, radiusclientTableActive=radiusclientTableActive, captiveHttpsPort=captiveHttpsPort, advTunningWirelessOutdoor=advTunningWirelessOutdoor, trapConfiguration=trapConfiguration, nodeConfigurationEthernet=nodeConfigurationEthernet, dnsStrictOrder=dnsStrictOrder, advTunningConntrackGenericTimeout=advTunningConntrackGenericTimeout, nodeConfigurationNtp=nodeConfigurationNtp, wlanInterfaceTableBroadcastSsid=wlanInterfaceTableBroadcastSsid, radiusclientNasport=radiusclientNasport, tmipdNetname=tmipdNetname, wlanInterfaceTableActive=wlanInterfaceTableActive, wmeTableCwmaxBe=wmeTableCwmaxBe, pptpTableEntry=pptpTableEntry, httpdUsername=httpdUsername, ddnsPassword=ddnsPassword, shapingDefaultdown=shapingDefaultdown, statickeyWifi0Key2=statickeyWifi0Key2, nodeConfiguration=nodeConfiguration, captiveDefaultIdleTimeout=captiveDefaultIdleTimeout, systemContactName=systemContactName, systemUpdateMode=systemUpdateMode, wirelessInterfaceTable=wirelessInterfaceTable, tm75Resolution=tm75Resolution, captiveHttpPort=captiveHttpPort, olsrInterfaceTableMidInterval=olsrInterfaceTableMidInterval, dhcpClientTableMac=dhcpClientTableMac, wlanInterfaceTableBase=wlanInterfaceTableBase, firewallTableDstMask=firewallTableDstMask, systemTrapsSystemUpgrade=systemTrapsSystemUpgrade, shapingTableProtocol=shapingTableProtocol, wmeTableTxoplimitBe=wmeTableTxoplimitBe, captiveDefaultLanguage=captiveDefaultLanguage, syslogKlog=syslogKlog, userDbPassword=userDbPassword, dhcpdTable=dhcpdTable, dhcpdTableRouter=dhcpdTableRouter, dnsTableRowStatus=dnsTableRowStatus, userDbTableIndex=userDbTableIndex, restartSnmpService=restartSnmpService, snmpdActive=snmpdActive, ipsecRemoteSubnet=ipsecRemoteSubnet, captiveWebspacePort=captiveWebspacePort, routeTableGateway=routeTableGateway, trapTableUsername=trapTableUsername, wmeTableCwmaxVo=wmeTableCwmaxVo, olsrInterfaceTableComments=olsrInterfaceTableComments, olsrInterfaceTableHelloInterval=olsrInterfaceTableHelloInterval, mlrdTableMac=mlrdTableMac, clientStatTableOnlinetime=clientStatTableOnlinetime, olsrInterfaceTableActive=olsrInterfaceTableActive, radiusclientInterimupdate=radiusclientInterimupdate, trapTableEntry=trapTableEntry, ebTableSrcMac=ebTableSrcMac, firewallTableRowStatus=firewallTableRowStatus, wlanFrequencyAp0TableIndex=wlanFrequencyAp0TableIndex, firewallTableEndPort=firewallTableEndPort, l2tpcSecret=l2tpcSecret, wmeTableRowStatus=wmeTableRowStatus, systemTrapsSystemRestore=systemTrapsSystemRestore, userGroupTableUpload=userGroupTableUpload, wmeTableBssCwminBk=wmeTableBssCwminBk, resetToDefault=resetToDefault, bridgeInterfaceTableMac=bridgeInterfaceTableMac, olsrLinkQualitySize=olsrLinkQualitySize, vlanInterfaceTableComments=vlanInterfaceTableComments, clientInfoTableRate=clientInfoTableRate, ipsecRemoteIp=ipsecRemoteIp, interfacesTableDev=interfacesTableDev, nodeConfigurationEbtables=nodeConfigurationEbtables, ebTableMatchMac=ebTableMatchMac, genericTrapVarHostIPAddress=genericTrapVarHostIPAddress, dnsDomainNeeded=dnsDomainNeeded, mlrdTableIp=mlrdTableIp, ipAddressesTableActive=ipAddressesTableActive, snmpdWriteusername=snmpdWriteusername, advTunningConntrackTcptimewaitTimeout=advTunningConntrackTcptimewaitTimeout, ebTableProtocol=ebTableProtocol, adminTrapsAdminConf=adminTrapsAdminConf, routeTableSubnet=routeTableSubnet, captive1xLogin=captive1xLogin, nodeConfigurationOspfd=nodeConfigurationOspfd, dhcrelayTableRowStatus=dhcrelayTableRowStatus, nodeConfigutationWme=nodeConfigutationWme, dnsTableComments=dnsTableComments, nodeConfigurationAutoip=nodeConfigurationAutoip, olsrGatewayTableIndex=olsrGatewayTableIndex, wmeTableAcmBk=wmeTableAcmBk, wlanInterfaceTableDot1x=wlanInterfaceTableDot1x, uploadDownloadIpaddress=uploadDownloadIpaddress, wlanInterfaceTableName=wlanInterfaceTableName, wlanFrequencyMeshTableIndex=wlanFrequencyMeshTableIndex, l2tpcUsername=l2tpcUsername, macaccessTable=macaccessTable, nodeConfigurationNetwork=nodeConfigurationNetwork, firewallTableEntry=firewallTableEntry, nodeConfigurationStatickey=nodeConfigurationStatickey, ethInterfaceTableBridgeCost=ethInterfaceTableBridgeCost, olsrSharedKey=olsrSharedKey, radiusclientNasporttype=radiusclientNasporttype, trapTableRowStatus=trapTableRowStatus, autoipActive=autoipActive, adminTrapsAdminCmd=adminTrapsAdminCmd, shapingTableActive=shapingTableActive, userGroupTableName=userGroupTableName, engenius=engenius, dhcpClientTableHostname=dhcpClientTableHostname, ipAddressesTableType=ipAddressesTableType, dhcpClientTableIndex=dhcpClientTableIndex, httpdTableActive=httpdTableActive, wmeTableBssCwminVi=wmeTableBssCwminVi, shapingVlanRatedown=shapingVlanRatedown, routeTableRowStatus=routeTableRowStatus, bridgeInterfaceTable=bridgeInterfaceTable, shapingTableIndex=shapingTableIndex, dhcrelayPktsize=dhcrelayPktsize, shapingWanRateup=shapingWanRateup, interfacesTable=interfacesTable, clientStatTableIndex=clientStatTableIndex, firewallTableDstIp=firewallTableDstIp, nodeConfigurationUserGroup=nodeConfigurationUserGroup, olsrInterfaceTableMidValidity=olsrInterfaceTableMidValidity, userGroupTable=userGroupTable, captiveWebspaceActive=captiveWebspaceActive, genericTrapVarWirelessCard=genericTrapVarWirelessCard, snmpdPort=snmpdPort, mlrdNetname=mlrdNetname, wmeTableBssTxoplimitVo=wmeTableBssTxoplimitVo, httpdPort=httpdPort, ipsecRemoteRsa=ipsecRemoteRsa, nodeConfigurationPppoe=nodeConfigurationPppoe, systemUptime=systemUptime, userGroupDownload=userGroupDownload, advTunningWirelessRadio2Distance=advTunningWirelessRadio2Distance, nodeConfigurationOlsrGW=nodeConfigurationOlsrGW, macActiveTable=macActiveTable)
mibBuilder.exportSymbols("ENGENIUS-MESH-MIB", wmeTableBssTxoplimitVi=wmeTableBssTxoplimitVi, firewallTableActive=firewallTableActive, dnsTableDns=dnsTableDns, dhcrelayTableType=dhcrelayTableType, mlrdActive=mlrdActive, ntpTableMaxPoll=ntpTableMaxPoll, wlanInterfaceTableIndex=wlanInterfaceTableIndex, shapingTableEntry=shapingTableEntry, nodeConfigurationRoutedog=nodeConfigurationRoutedog, ethInterfaceTableRowStatus=ethInterfaceTableRowStatus, advTunningConntrackIcmpTimeout=advTunningConntrackIcmpTimeout, userDbEditCmd=userDbEditCmd, userGroupName=userGroupName, olsrGatewayTableNetmask=olsrGatewayTableNetmask, mlrdTableRowStatus=mlrdTableRowStatus, ethInterfaceTableBridge=ethInterfaceTableBridge, systemName=systemName, advTunningConntrackTcpsynsentTimeout=advTunningConntrackTcpsynsentTimeout, bridgeInterfaceTableEntry=bridgeInterfaceTableEntry, ebTableRowStatus=ebTableRowStatus, ntpActive=ntpActive, nodeStatus=nodeStatus, mlrdRole=mlrdRole, nodeConfigurationSignallevel=nodeConfigurationSignallevel, clientInfoTableMac=clientInfoTableMac, clientStatTableMac=clientStatTableMac, macActiveTableMac=macActiveTableMac, wirelessFrequencyAp1TableEntry=wirelessFrequencyAp1TableEntry, olsrGatewayTableRowStatus=olsrGatewayTableRowStatus, httpdTableRowStatus=httpdTableRowStatus, systemDevicename=systemDevicename, olsrHysteresisThrLow=olsrHysteresisThrLow, natTable=natTable, macActiveTableIp=macActiveTableIp, nodeConfigurationInterfaces=nodeConfigurationInterfaces, userGroupTableLanguage=userGroupTableLanguage, pptpTableIndex=pptpTableIndex, ethernetInterfaceTableEntry=ethernetInterfaceTableEntry, topologyTableEntry=topologyTableEntry, ethInterfaceTableBridgePrio=ethInterfaceTableBridgePrio, clientStatTable=clientStatTable, dhcpdTableIface=dhcpdTableIface, tm75Temperature=tm75Temperature, olsrTcType=olsrTcType, olsrInterfaceTableHelloValidity=olsrInterfaceTableHelloValidity, ipAddressesTableIndex=ipAddressesTableIndex, systemTrapsSystemReboot=systemTrapsSystemReboot, wlanInterfaceTableCrntTxPower=wlanInterfaceTableCrntTxPower, ebTableDstPortEnd=ebTableDstPortEnd, natTableIp=natTableIp, mlrdBackupActive=mlrdBackupActive, wlanInterfaceTableDtimInterval=wlanInterfaceTableDtimInterval, clientStatTableEntry=clientStatTableEntry, shapingTableMinsize=shapingTableMinsize, snmpdWritecommunity=snmpdWritecommunity, routedogIntervaCount=routedogIntervaCount, nmsAddressTableIndex=nmsAddressTableIndex, userDbTableEntry=userDbTableEntry, ipAddressesTableNetmask=ipAddressesTableNetmask, wlanInterfaceTableDiversity=wlanInterfaceTableDiversity, statickeyWifi1Key2=statickeyWifi1Key2, trapTableVersion=trapTableVersion, vlanInterfaceTableBridgeCost=vlanInterfaceTableBridgeCost, nodeConfigurationSyslog=nodeConfigurationSyslog, clientStatTableTxPkt=clientStatTableTxPkt, nodeConfigurationSnmpd=nodeConfigurationSnmpd, dhcpdTableNetmask=dhcpdTableNetmask, advTunningConntrackTcplastackTimeout=advTunningConntrackTcplastackTimeout, snmpdAccessctrl=snmpdAccessctrl, olsrActive=olsrActive, trapImage=trapImage, olsrInterfaceTableHnaInterval=olsrInterfaceTableHnaInterval, nmsAddressTable=nmsAddressTable, wlanInterfaceTableComments=wlanInterfaceTableComments, userGroupTableUrl=userGroupTableUrl, radiusclientTableServerport=radiusclientTableServerport, wmeTableBssCwminBe=wmeTableBssCwminBe, nodeCommand=nodeCommand, shapingVlanRateup=shapingVlanRateup, httpdTableNetmask=httpdTableNetmask, ipAddressesTableComments=ipAddressesTableComments, dhcpdTableDomain=dhcpdTableDomain, vlanInterfaceTableId=vlanInterfaceTableId, advTunningWirelessRegionDomain=advTunningWirelessRegionDomain, httpdAccessctrl=httpdAccessctrl, userGroupTableSessTimeout=userGroupTableSessTimeout, nodeConfigurationTm75=nodeConfigurationTm75, wlanFrequencyAp1TableFrequency=wlanFrequencyAp1TableFrequency, macaccessType=macaccessType, radiusclientTableIndex=radiusclientTableIndex, nmsAddressTableEntry=nmsAddressTableEntry, wmeTableName=wmeTableName, interfacesTableIndex=interfacesTableIndex, nodeConfigurationWireless=nodeConfigurationWireless, pppoeUseChap=pppoeUseChap, nodeCommandUpload=nodeCommandUpload, nodeCommandLogoutBlock=nodeCommandLogoutBlock, adminTraps=adminTraps, dhcpClientTableIp=dhcpClientTableIp, nodeStatusTrap=nodeStatusTrap, shapingWanRatedown=shapingWanRatedown, trapWireless=trapWireless, wmeTableIndex=wmeTableIndex, mlrdTableComment=mlrdTableComment, snmpdTableComment=snmpdTableComment, nmsAddressTablePort=nmsAddressTablePort, wmeTableAifsnVo=wmeTableAifsnVo, dhcrelayTable=dhcrelayTable, wmeTableCwminBk=wmeTableCwminBk, bridgeInterfaceTableComments=bridgeInterfaceTableComments, userGroupTableDownload=userGroupTableDownload, pppoePassword=pppoePassword, ipAddressesTable=ipAddressesTable, shapingTablePriority=shapingTablePriority, wmeTableBssTxoplimitBe=wmeTableBssTxoplimitBe, wlanInterfaceTableRowStatus=wlanInterfaceTableRowStatus, olsrInterfaceTable=olsrInterfaceTable, ddnsServer=ddnsServer, wmeTableActive=wmeTableActive, genericTrapVarInterface=genericTrapVarInterface, vlanInterfaceTableBase=vlanInterfaceTableBase, dhcpClientTable=dhcpClientTable, signallevelTableRssi=signallevelTableRssi, trapAuthentication=trapAuthentication, vlanInterfaceTableBridge=vlanInterfaceTableBridge, userDbAddCmd=userDbAddCmd, zeroconfigStaticipActive=zeroconfigStaticipActive, ebTableDstIp=ebTableDstIp, dhcrelayTableActive=dhcrelayTableActive, advTunningConntrackTcpsynrecvTimeout=advTunningConntrackTcpsynrecvTimeout, wmeTableEntry=wmeTableEntry, nodeConfigurationCaptive=nodeConfigurationCaptive, bridgeInterfaceTableStp=bridgeInterfaceTableStp, ethInterfaceTableActive=ethInterfaceTableActive, firewallTableSrcIp=firewallTableSrcIp, autoipVlanip=autoipVlanip, wmeTableBssAifsnVi=wmeTableBssAifsnVi, advTunningConntrackMax=advTunningConntrackMax, dhcrelayTableComments=dhcrelayTableComments, topologyTableStyle=topologyTableStyle, zeroconfigProxyActive=zeroconfigProxyActive, shapingDefaultup=shapingDefaultup, pptpTable=pptpTable, systemCheckingState=systemCheckingState, wlanInterfaceTableBridge=wlanInterfaceTableBridge, clientStatTableIp=clientStatTableIp, routeTableComments=routeTableComments, clientInfoTableEssid=clientInfoTableEssid, bridgeInterfaceTableActive=bridgeInterfaceTableActive, ethInterfaceTableName=ethInterfaceTableName, firewallTableUserGroup=firewallTableUserGroup, systemLocation=systemLocation, wmeTableCwmaxBk=wmeTableCwmaxBk, userTraps=userTraps, sshdActive=sshdActive, olsrHysteresisActive=olsrHysteresisActive, dnsTableActive=dnsTableActive, vlanInterfaceTableIndex=vlanInterfaceTableIndex, captivePop3push=captivePop3push, topologyTableDestination=topologyTableDestination, ntpTableEntry=ntpTableEntry, dhcpdTableEntry=dhcpdTableEntry, wlanInterfaceTableBridgeCost=wlanInterfaceTableBridgeCost, olsrInterfaceTableIndex=olsrInterfaceTableIndex, radiusclientNasid=radiusclientNasid, userDbTablePassword=userDbTablePassword, wmeTableBssCwmaxVo=wmeTableBssCwmaxVo, mlrdBackupInterval=mlrdBackupInterval, ipAddressesTableRouted=ipAddressesTableRouted, olsrTosValue=olsrTosValue, syslogLevel=syslogLevel, macActiveTableEntry=macActiveTableEntry, trapTableIndex=trapTableIndex, nodeConfigurationNmsAddress=nodeConfigurationNmsAddress, wirelessFrequencyAp0Table=wirelessFrequencyAp0Table, firewallTableDstIface=firewallTableDstIface, systemContactMail=systemContactMail, genericTrapVarCount=genericTrapVarCount, wlanInterfaceTableEssid=wlanInterfaceTableEssid, firewallTableTarget=firewallTableTarget, nodeConfigurationAdvTunning=nodeConfigurationAdvTunning, syslogRemoteAddress=syslogRemoteAddress, wirelessFrequencyAp1Table=wirelessFrequencyAp1Table, olsrGatewayTableSubnet=olsrGatewayTableSubnet, nodeConfigurationIpsec=nodeConfigurationIpsec, captiveRedirect=captiveRedirect, wmeTableAifsnVi=wmeTableAifsnVi, dhcrelayTableExtra=dhcrelayTableExtra, trapVariable=trapVariable, wmeTableNoackpolicyBk=wmeTableNoackpolicyBk, statickeyWifi1Key1=statickeyWifi1Key1, ddnsHostname=ddnsHostname, ntpTableRowStatus=ntpTableRowStatus, wlanInterfaceTableBeaconInt=wlanInterfaceTableBeaconInt, trapTableComment=trapTableComment, ipsecLocalRsa=ipsecLocalRsa, shapingActive=shapingActive, wlanInterfaceTableBand=wlanInterfaceTableBand, trapTable=trapTable, ebTableDstMac=ebTableDstMac, ipsecRemoteId=ipsecRemoteId, ipsecType=ipsecType, dhcpdTableRowStatus=dhcpdTableRowStatus, ethInterfaceTableMac=ethInterfaceTableMac, ipAddressesTableBroadcast=ipAddressesTableBroadcast, userGroupTableIndex=userGroupTableIndex, genericTrapVariable=genericTrapVariable, macaccessTableIndex=macaccessTableIndex, macActiveListExecute=macActiveListExecute, tmipdActive=tmipdActive, trapTableCommunity=trapTableCommunity, trapTableIp=trapTableIp, nodeConfigurationIpaddress=nodeConfigurationIpaddress, shapingTableRowStatus=shapingTableRowStatus, pppoeActive=pppoeActive, vlanInterfaceTableBridgePrio=vlanInterfaceTableBridgePrio, vlanInterfaceTableName=vlanInterfaceTableName, ntpTableServer=ntpTableServer, firewallTableIndex=firewallTableIndex, dnsActive=dnsActive, userGroupTableEntry=userGroupTableEntry, userGroupTableComment=userGroupTableComment, routeTableDirect=routeTableDirect, wirelessFrequencyMeshTableEntry=wirelessFrequencyMeshTableEntry, uploadDownloadExecutetftp=uploadDownloadExecutetftp, mlrdTableEntry=mlrdTableEntry, genericTrapVarEthernetPort=genericTrapVarEthernetPort, bridgeInterfaceTableRowStatus=bridgeInterfaceTableRowStatus, wlanInterfaceTableRxAntenna=wlanInterfaceTableRxAntenna, userDbGroupid=userDbGroupid, olsrGatewayTableActive=olsrGatewayTableActive, l2tpcActive=l2tpcActive, uploadDownloadOperationtype=uploadDownloadOperationtype, snmpdVersion=snmpdVersion, pppoeUsername=pppoeUsername)
