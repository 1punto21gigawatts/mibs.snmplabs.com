#
# PySNMP MIB module NTPv4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTPv4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Integer32, Counter64, MibIdentifier, NotificationType, Gauge32, mib_2, Counter32, ObjectIdentity, IpAddress, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Integer32", "Counter64", "MibIdentifier", "NotificationType", "Gauge32", "mib-2", "Counter32", "ObjectIdentity", "IpAddress", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
Utf8String, = mibBuilder.importSymbols("SYSAPPL-MIB", "Utf8String")
ntpSnmpMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 197))
ntpSnmpMIB.setRevisions(('2010-05-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ntpSnmpMIB.setRevisionsDescriptions(('This revision of the MIB module is published as RFC 5907.',))
if mibBuilder.loadTexts: ntpSnmpMIB.setLastUpdated('201005170000Z')
if mibBuilder.loadTexts: ntpSnmpMIB.setOrganization('The IETF NTP Working Group (ntpwg)')
if mibBuilder.loadTexts: ntpSnmpMIB.setContactInfo(' WG Email: ntpwg@lists.ntp.isc.org Subscribe: https://lists.ntp.isc.org/mailman/listinfo/ntpwg Heiko Gerstung Meinberg Funkuhren Gmbh & Co. KG Lange Wand 9 Bad Pyrmont 31812 Germany Phone: +49 5281 9309 25 Email: heiko.gerstung@meinberg.de Chris Elliott 1516 Kent St. Durham, NC 27707 USA Phone: +1-919-308-1216 Email: chelliot@pobox.com Brian Haberman 11100 Johns Hopkins Road Laurel, MD 20723 USA Phone: +1-443-778-1319 Email: brian@innovationslab.net')
if mibBuilder.loadTexts: ntpSnmpMIB.setDescription("The Management Information Base for NTP time entities. Copyright (c) 2010 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).")
ntpSnmpMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 1))
ntpEntInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 1, 1))
ntpEntStatus = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 1, 2))
ntpAssociation = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 1, 3))
ntpEntControl = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 1, 4))
ntpEntNotifObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 1, 5))
class NtpStratum(TextualConvention, Unsigned32):
    description = 'The NTP stratum, with 16 representing no stratum.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 16)

class NtpDateTime(TextualConvention, OctetString):
    reference = 'RFC 5905, section 6'
    description = 'NTP date/time on the device, in 128-bit NTP date format. If time is not syncronized, this field shall be a zero-length string. This trusted certificate (TC) is not to be used for objects that are used to set the time of the node querying this object. NTP should be used for this -- or at least SNTP.'
    status = 'current'
    displayHint = '4d:4d:4d.4d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), )
ntpEntSoftwareName = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 1, 1), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareName.setStatus('current')
if mibBuilder.loadTexts: ntpEntSoftwareName.setDescription("The product name of the running NTP version, e.g., 'ntpd'.")
ntpEntSoftwareVersion = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 1, 2), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: ntpEntSoftwareVersion.setDescription("The software version of the installed NTP implementation as a full version string, e.g., 'ntpd-4.2.0b@1.1433 ...'")
ntpEntSoftwareVendor = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 1, 3), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSoftwareVendor.setStatus('current')
if mibBuilder.loadTexts: ntpEntSoftwareVendor.setDescription('The vendor/author of the installed NTP version.')
ntpEntSystemType = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 1, 4), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntSystemType.setStatus('current')
if mibBuilder.loadTexts: ntpEntSystemType.setDescription("General hardware/os platform information, e.g., 'Linux 2.6.12 / x86'.")
ntpEntTimeResolution = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntTimeResolution.setStatus('current')
if mibBuilder.loadTexts: ntpEntTimeResolution.setDescription('The time resolution in integer format, where the resolution is represented as divisions of a second, e.g., a value of 1000 translates to 1.0 ms.')
ntpEntTimePrecision = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntTimePrecision.setStatus('current')
if mibBuilder.loadTexts: ntpEntTimePrecision.setDescription("The entity's precision in integer format, shows the precision. A value of -5 would mean 2^-5 = 31.25 ms.")
ntpEntTimeDistance = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntTimeDistance.setStatus('current')
if mibBuilder.loadTexts: ntpEntTimeDistance.setDescription("The distance from this NTP entity to the root time reference (stratum 0) source including the unit, e.g., '13.243 ms'.")
ntpEntStatusCurrentMode = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("notRunning", 1), ("notSynchronized", 2), ("noneConfigured", 3), ("syncToLocal", 4), ("syncToRefclock", 5), ("syncToRemoteServer", 6), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusCurrentMode.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusCurrentMode.setDescription("The current mode of the NTP. The definition of each possible value is: notRunning(1) - NTP is not running. notSynchronized(2) - NTP is not synchronized to any time source (stratum = 16). noneConfigured(3) - NTP is not synchronized and does not have a reference configured (stratum = 16). syncToLocal(4) - NTP is distributing time based on its local clock (degraded accuracy and/or reliability). syncToRefclock(5) - NTP is synchronized to a local hardware refclock (e.g., GPS). syncToRemoteServer(6) - NTP is synchronized to a remote NTP server ('upstream' server). unknown(99) - The state of NTP is unknown.")
ntpEntStatusStratum = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 2), NtpStratum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusStratum.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusStratum.setDescription("The NTP entity's own stratum value. Should be a stratum of syspeer + 1 (or 16 if no syspeer).")
ntpEntStatusActiveRefSourceId = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceId.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceId.setDescription('The association ID of the current syspeer.')
ntpEntStatusActiveRefSourceName = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 4), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceName.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusActiveRefSourceName.setDescription("The hostname/descriptive name of the current reference source selected as syspeer, e.g., 'ntp1.ptb.de' or 'GPS' or 'DCFi', ...")
ntpEntStatusActiveOffset = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusActiveOffset.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusActiveOffset.setDescription("The time offset to the current selected reference time source as a string including unit, e.g., '0.032 ms' or '1.232 s'.")
ntpEntStatusNumberOfRefSources = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusNumberOfRefSources.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusNumberOfRefSources.setDescription('The number of reference sources configured for NTP.')
ntpEntStatusDispersion = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusDispersion.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusDispersion.setDescription("The root dispersion of the running NTP entity, e.g., '6.927'.")
ntpEntStatusEntityUptime = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusEntityUptime.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusEntityUptime.setDescription('The uptime of the NTP entity, (i.e., the time since ntpd was (re-)initialized not sysUptime!). The time is represented in hundreds of seconds since Jan 1, 1970 (00:00:00.000) UTC.')
ntpEntStatusDateTime = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 9), NtpDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusDateTime.setReference('RFC 5905, section 6')
if mibBuilder.loadTexts: ntpEntStatusDateTime.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusDateTime.setDescription('The current NTP date/time on the device, in 128-bit NTP date format. If time is not syncronized, this field shall be a zero-length string. This object can be used to timestamp events on this node and allow a management station to correlate different time objects. For example, a management station could query this object and sysUpTime in the same operation to be able to relate sysUpTime to NTP time. This object is not to be used to set the time of the node querying this object. NTP should be used for this -- or at least SNTP.')
ntpEntStatusLeapSecond = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 10), NtpDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusLeapSecond.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusLeapSecond.setDescription('Date the next known leap second will occur. If there is no leap second announced, then this object should be 0.')
ntpEntStatusLeapSecDirection = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusLeapSecDirection.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusLeapSecDirection.setDescription('Direction of next known leap second. If there is no leap second announced, then this object should be 0.')
ntpEntStatusInPkts = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusInPkts.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusInPkts.setDescription('The total number of NTP messages delivered to the NTP entity from the transport service. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpEntStatusOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusOutPkts.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusOutPkts.setDescription('The total number of NTP messages delivered to the transport service by this NTP entity. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpEntStatusBadVersion = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusBadVersion.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusBadVersion.setDescription('The total number of NTP messages that were delivered to this NTP entity and were for an unsupported NTP version. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpEntStatusProtocolError = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusProtocolError.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusProtocolError.setDescription('The total number of NTP messages that were delivered to this NTP entity and this entity was not able to process due to an NTP protocol error. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpEntStatusNotifications = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 2, 16), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatusNotifications.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatusNotifications.setDescription('The total number of SNMP notifications that this NTP entity has generated. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpEntStatPktModeTable = MibTable((1, 3, 6, 1, 2, 1, 197, 1, 2, 17), )
if mibBuilder.loadTexts: ntpEntStatPktModeTable.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatPktModeTable.setDescription('The number of packets sent and received by packet mode. One entry per packet mode.')
ntpEntStatPktModeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 197, 1, 2, 17, 1), ).setIndexNames((0, "NTPv4-MIB", "ntpEntStatPktMode"))
if mibBuilder.loadTexts: ntpEntStatPktModeEntry.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatPktModeEntry.setDescription('A statistical record of the number of packets sent and received for each packet mode.')
ntpEntStatPktMode = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("symetricactive", 1), ("symetricpassive", 2), ("client", 3), ("server", 4), ("broadcastserver", 5), ("broadcastclient", 6))))
if mibBuilder.loadTexts: ntpEntStatPktMode.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatPktMode.setDescription('The NTP packet mode.')
ntpEntStatPktSent = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 2, 17, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatPktSent.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatPktSent.setDescription('The number of NTP packets sent with this packet mode. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpEntStatPktReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 2, 17, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpEntStatPktReceived.setStatus('current')
if mibBuilder.loadTexts: ntpEntStatPktReceived.setDescription('The number of NTP packets received with this packet mode. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpAssociationTable = MibTable((1, 3, 6, 1, 2, 1, 197, 1, 3, 1), )
if mibBuilder.loadTexts: ntpAssociationTable.setStatus('current')
if mibBuilder.loadTexts: ntpAssociationTable.setDescription('The table of currently mobilized associations.')
ntpAssociationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1), ).setIndexNames((0, "NTPv4-MIB", "ntpAssocId"))
if mibBuilder.loadTexts: ntpAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: ntpAssociationEntry.setDescription('The table entry of currently mobilized associations.')
ntpAssocId = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)))
if mibBuilder.loadTexts: ntpAssocId.setStatus('current')
if mibBuilder.loadTexts: ntpAssocId.setDescription('The association ID. This is an internal, unique ID.')
ntpAssocName = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 2), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocName.setStatus('current')
if mibBuilder.loadTexts: ntpAssocName.setDescription('The hostname or other descriptive name for the association.')
ntpAssocRefId = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocRefId.setStatus('current')
if mibBuilder.loadTexts: ntpAssocRefId.setDescription('The refclock driver ID, if available.')
ntpAssocAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocAddressType.setStatus('current')
if mibBuilder.loadTexts: ntpAssocAddressType.setDescription('The type of address of the association. Can be either IPv4 or IPv6 (both with or without zone index) and contains the type of address for unicast, multicast, and broadcast associations.')
ntpAssocAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocAddress.setStatus('current')
if mibBuilder.loadTexts: ntpAssocAddress.setDescription('The IP address (IPv4 or IPv6, with or without zone index) of the association. The type and size depends on the ntpAssocAddressType object. Represents the IP address of a uni/multi/broadcast association.')
ntpAssocOffset = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocOffset.setStatus('current')
if mibBuilder.loadTexts: ntpAssocOffset.setDescription('The time offset to the association as a string.')
ntpAssocStratum = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 7), NtpStratum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocStratum.setStatus('current')
if mibBuilder.loadTexts: ntpAssocStratum.setDescription('The association stratum value.')
ntpAssocStatusJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocStatusJitter.setStatus('current')
if mibBuilder.loadTexts: ntpAssocStatusJitter.setDescription('The jitter in milliseconds as a string.')
ntpAssocStatusDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocStatusDelay.setStatus('current')
if mibBuilder.loadTexts: ntpAssocStatusDelay.setDescription('The network delay in milliseconds as a string.')
ntpAssocStatusDispersion = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocStatusDispersion.setStatus('current')
if mibBuilder.loadTexts: ntpAssocStatusDispersion.setDescription('The root dispersion of the association.')
ntpAssociationStatisticsTable = MibTable((1, 3, 6, 1, 2, 1, 197, 1, 3, 2), )
if mibBuilder.loadTexts: ntpAssociationStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ntpAssociationStatisticsTable.setDescription('The table of statistics for current associations.')
ntpAssociationStatisticsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 197, 1, 3, 2, 1), ).setIndexNames((0, "NTPv4-MIB", "ntpAssocId"))
if mibBuilder.loadTexts: ntpAssociationStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ntpAssociationStatisticsEntry.setDescription('The table entry of statistics for current associations.')
ntpAssocStatInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 2, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocStatInPkts.setStatus('current')
if mibBuilder.loadTexts: ntpAssocStatInPkts.setDescription('The total number of NTP messages delivered to the NTP entity from this association. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpAssocStatOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 2, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocStatOutPkts.setStatus('current')
if mibBuilder.loadTexts: ntpAssocStatOutPkts.setDescription('The total number of NTP messages delivered to the transport service by this NTP entity for this association. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpAssocStatProtocolError = MibTableColumn((1, 3, 6, 1, 2, 1, 197, 1, 3, 2, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAssocStatProtocolError.setStatus('current')
if mibBuilder.loadTexts: ntpAssocStatProtocolError.setDescription('The total number of NTP messages that were delivered to this NTP entity from this association and this entity was not able to process due to an NTP protocol error. Discountinuities in the value of this counter can occur upon cold start or reinitialization of the NTP entity, the management system and at other times as indicated by discontinuities in the value of sysUpTime.')
ntpEntHeartbeatInterval = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 4, 1), Unsigned32().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpEntHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: ntpEntHeartbeatInterval.setDescription('The interval at which the ntpEntNotifHeartbeat notification should be sent, in seconds. If set to 0 and the entNotifHeartbeat bit in ntpEntNotifBits is 1, then ntpEntNotifHeartbeat is sent once. This value is stored persistently and will be restored to its last set value upon cold start or restart.')
ntpEntNotifBits = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 4, 2), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("entNotifModeChange", 1), ("entNotifStratumChange", 2), ("entNotifSyspeerChanged", 3), ("entNotifAddAssociation", 4), ("entNotifRemoveAssociation", 5), ("entNotifConfigChanged", 6), ("entNotifLeapSecondAnnounced", 7), ("entNotifHeartbeat", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpEntNotifBits.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifBits.setDescription('A bit for each notification. A 1 for a particular bit enables that particular notification, a 0 disables it. This value is stored persistently and will be restored to its last set value upon cold start or restart.')
ntpEntNotifMessage = MibScalar((1, 3, 6, 1, 2, 1, 197, 1, 5, 1), Utf8String().clone('no event')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpEntNotifMessage.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifMessage.setDescription('Used as a payload object for all notifications. Holds a cleartext event message.')
ntpEntNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 0))
ntpEntNotifModeChange = NotificationType((1, 3, 6, 1, 2, 1, 197, 0, 1)).setObjects(("NTPv4-MIB", "ntpEntStatusCurrentMode"))
if mibBuilder.loadTexts: ntpEntNotifModeChange.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifModeChange.setDescription('The notification to be sent when the NTP entity changes mode, including starting and stopping (if possible).')
ntpEntNotifStratumChange = NotificationType((1, 3, 6, 1, 2, 1, 197, 0, 2)).setObjects(("NTPv4-MIB", "ntpEntStatusDateTime"), ("NTPv4-MIB", "ntpEntStatusStratum"), ("NTPv4-MIB", "ntpEntNotifMessage"))
if mibBuilder.loadTexts: ntpEntNotifStratumChange.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifStratumChange.setDescription('The notification to be sent when stratum level of NTP changes.')
ntpEntNotifSyspeerChanged = NotificationType((1, 3, 6, 1, 2, 1, 197, 0, 3)).setObjects(("NTPv4-MIB", "ntpEntStatusDateTime"), ("NTPv4-MIB", "ntpEntStatusActiveRefSourceId"), ("NTPv4-MIB", "ntpEntNotifMessage"))
if mibBuilder.loadTexts: ntpEntNotifSyspeerChanged.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifSyspeerChanged.setDescription('The notification to be sent when a (new) syspeer has been selected.')
ntpEntNotifAddAssociation = NotificationType((1, 3, 6, 1, 2, 1, 197, 0, 4)).setObjects(("NTPv4-MIB", "ntpEntStatusDateTime"), ("NTPv4-MIB", "ntpAssocName"), ("NTPv4-MIB", "ntpEntNotifMessage"))
if mibBuilder.loadTexts: ntpEntNotifAddAssociation.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifAddAssociation.setDescription('The notification to be sent when a new association is mobilized.')
ntpEntNotifRemoveAssociation = NotificationType((1, 3, 6, 1, 2, 1, 197, 0, 5)).setObjects(("NTPv4-MIB", "ntpEntStatusDateTime"), ("NTPv4-MIB", "ntpAssocName"), ("NTPv4-MIB", "ntpEntNotifMessage"))
if mibBuilder.loadTexts: ntpEntNotifRemoveAssociation.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifRemoveAssociation.setDescription('The notification to be sent when an association is demobilized.')
ntpEntNotifConfigChanged = NotificationType((1, 3, 6, 1, 2, 1, 197, 0, 6)).setObjects(("NTPv4-MIB", "ntpEntStatusDateTime"), ("NTPv4-MIB", "ntpEntNotifMessage"))
if mibBuilder.loadTexts: ntpEntNotifConfigChanged.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifConfigChanged.setDescription('The notification to be sent when the NTP configuration has changed, e.g., when the system connected to the Internet and was assigned a new IP address by the ISPs DHCP server.')
ntpEntNotifLeapSecondAnnounced = NotificationType((1, 3, 6, 1, 2, 1, 197, 0, 7)).setObjects(("NTPv4-MIB", "ntpEntStatusDateTime"), ("NTPv4-MIB", "ntpEntNotifMessage"))
if mibBuilder.loadTexts: ntpEntNotifLeapSecondAnnounced.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifLeapSecondAnnounced.setDescription('The notification to be sent when a leap second has been announced.')
ntpEntNotifHeartbeat = NotificationType((1, 3, 6, 1, 2, 1, 197, 0, 8)).setObjects(("NTPv4-MIB", "ntpEntStatusDateTime"), ("NTPv4-MIB", "ntpEntStatusCurrentMode"), ("NTPv4-MIB", "ntpEntHeartbeatInterval"), ("NTPv4-MIB", "ntpEntNotifMessage"))
if mibBuilder.loadTexts: ntpEntNotifHeartbeat.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifHeartbeat.setDescription('The notification to be sent periodically (as defined by ntpEntHeartbeatInterval) to indicate that the NTP entity is still alive.')
ntpEntConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 2))
ntpEntCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 2, 1))
ntpEntGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 197, 2, 2))
ntpEntNTPCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 197, 2, 1, 1)).setObjects(("NTPv4-MIB", "ntpEntObjectsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntNTPCompliance = ntpEntNTPCompliance.setStatus('current')
if mibBuilder.loadTexts: ntpEntNTPCompliance.setDescription('The compliance statement for SNMP entities that use NTP and implement the NTP MIB.')
ntpEntSNTPCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 197, 2, 1, 2)).setObjects(("NTPv4-MIB", "ntpEntObjectsGroup1"), ("NTPv4-MIB", "ntpEntObjectsGroup2"), ("NTPv4-MIB", "ntpEntNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntSNTPCompliance = ntpEntSNTPCompliance.setStatus('current')
if mibBuilder.loadTexts: ntpEntSNTPCompliance.setDescription('The compliance statement for SNMP entities that use SNTP and implement the NTP MIB.')
ntpEntObjectsGroup1 = ObjectGroup((1, 3, 6, 1, 2, 1, 197, 2, 2, 1)).setObjects(("NTPv4-MIB", "ntpEntSoftwareName"), ("NTPv4-MIB", "ntpEntSoftwareVersion"), ("NTPv4-MIB", "ntpEntSoftwareVendor"), ("NTPv4-MIB", "ntpEntSystemType"), ("NTPv4-MIB", "ntpEntStatusEntityUptime"), ("NTPv4-MIB", "ntpEntStatusDateTime"), ("NTPv4-MIB", "ntpAssocName"), ("NTPv4-MIB", "ntpAssocRefId"), ("NTPv4-MIB", "ntpAssocAddressType"), ("NTPv4-MIB", "ntpAssocAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntObjectsGroup1 = ntpEntObjectsGroup1.setStatus('current')
if mibBuilder.loadTexts: ntpEntObjectsGroup1.setDescription('A collection of objects for the NTP MIB.')
ntpEntObjectsGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 197, 2, 2, 2)).setObjects(("NTPv4-MIB", "ntpEntTimeResolution"), ("NTPv4-MIB", "ntpEntTimePrecision"), ("NTPv4-MIB", "ntpEntTimeDistance"), ("NTPv4-MIB", "ntpEntStatusCurrentMode"), ("NTPv4-MIB", "ntpEntStatusStratum"), ("NTPv4-MIB", "ntpEntStatusActiveRefSourceId"), ("NTPv4-MIB", "ntpEntStatusActiveRefSourceName"), ("NTPv4-MIB", "ntpEntStatusActiveOffset"), ("NTPv4-MIB", "ntpEntStatusNumberOfRefSources"), ("NTPv4-MIB", "ntpEntStatusDispersion"), ("NTPv4-MIB", "ntpEntStatusLeapSecond"), ("NTPv4-MIB", "ntpEntStatusLeapSecDirection"), ("NTPv4-MIB", "ntpEntStatusInPkts"), ("NTPv4-MIB", "ntpEntStatusOutPkts"), ("NTPv4-MIB", "ntpEntStatusBadVersion"), ("NTPv4-MIB", "ntpEntStatusProtocolError"), ("NTPv4-MIB", "ntpEntStatusNotifications"), ("NTPv4-MIB", "ntpEntStatPktSent"), ("NTPv4-MIB", "ntpEntStatPktReceived"), ("NTPv4-MIB", "ntpAssocOffset"), ("NTPv4-MIB", "ntpAssocStratum"), ("NTPv4-MIB", "ntpAssocStatusJitter"), ("NTPv4-MIB", "ntpAssocStatusDelay"), ("NTPv4-MIB", "ntpAssocStatusDispersion"), ("NTPv4-MIB", "ntpAssocStatInPkts"), ("NTPv4-MIB", "ntpAssocStatOutPkts"), ("NTPv4-MIB", "ntpAssocStatProtocolError"), ("NTPv4-MIB", "ntpEntHeartbeatInterval"), ("NTPv4-MIB", "ntpEntNotifBits"), ("NTPv4-MIB", "ntpEntNotifMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntObjectsGroup2 = ntpEntObjectsGroup2.setStatus('current')
if mibBuilder.loadTexts: ntpEntObjectsGroup2.setDescription('A collection of objects for the NTP MIB.')
ntpEntNotifGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 197, 2, 2, 3)).setObjects(("NTPv4-MIB", "ntpEntNotifModeChange"), ("NTPv4-MIB", "ntpEntNotifStratumChange"), ("NTPv4-MIB", "ntpEntNotifSyspeerChanged"), ("NTPv4-MIB", "ntpEntNotifAddAssociation"), ("NTPv4-MIB", "ntpEntNotifRemoveAssociation"), ("NTPv4-MIB", "ntpEntNotifConfigChanged"), ("NTPv4-MIB", "ntpEntNotifLeapSecondAnnounced"), ("NTPv4-MIB", "ntpEntNotifHeartbeat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpEntNotifGroup = ntpEntNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ntpEntNotifGroup.setDescription('A collection of notifications for the NTP MIB')
mibBuilder.exportSymbols("NTPv4-MIB", ntpEntSoftwareVersion=ntpEntSoftwareVersion, ntpEntTimeDistance=ntpEntTimeDistance, ntpEntStatusInPkts=ntpEntStatusInPkts, ntpAssocName=ntpAssocName, ntpEntObjectsGroup1=ntpEntObjectsGroup1, ntpEntTimePrecision=ntpEntTimePrecision, ntpEntStatusProtocolError=ntpEntStatusProtocolError, ntpEntNotifLeapSecondAnnounced=ntpEntNotifLeapSecondAnnounced, ntpAssocOffset=ntpAssocOffset, ntpAssocStatInPkts=ntpAssocStatInPkts, ntpEntNotifications=ntpEntNotifications, ntpAssocStatusDelay=ntpAssocStatusDelay, ntpEntControl=ntpEntControl, ntpEntStatusLeapSecond=ntpEntStatusLeapSecond, ntpEntInfo=ntpEntInfo, ntpEntStatus=ntpEntStatus, ntpEntStatusActiveRefSourceName=ntpEntStatusActiveRefSourceName, ntpAssociationStatisticsEntry=ntpAssociationStatisticsEntry, ntpAssocAddress=ntpAssocAddress, ntpEntSystemType=ntpEntSystemType, ntpAssocStatOutPkts=ntpAssocStatOutPkts, ntpSnmpMIBObjects=ntpSnmpMIBObjects, ntpEntSoftwareName=ntpEntSoftwareName, ntpAssociationEntry=ntpAssociationEntry, ntpEntNotifBits=ntpEntNotifBits, ntpEntStatPktModeEntry=ntpEntStatPktModeEntry, ntpEntTimeResolution=ntpEntTimeResolution, ntpEntNotifGroup=ntpEntNotifGroup, ntpEntStatusStratum=ntpEntStatusStratum, ntpEntStatusBadVersion=ntpEntStatusBadVersion, NtpDateTime=NtpDateTime, ntpAssociationTable=ntpAssociationTable, ntpEntNotifModeChange=ntpEntNotifModeChange, ntpEntNotifStratumChange=ntpEntNotifStratumChange, ntpEntSNTPCompliance=ntpEntSNTPCompliance, ntpEntStatusActiveOffset=ntpEntStatusActiveOffset, ntpAssociation=ntpAssociation, ntpEntStatusDateTime=ntpEntStatusDateTime, ntpEntStatusCurrentMode=ntpEntStatusCurrentMode, NtpStratum=NtpStratum, ntpEntStatusLeapSecDirection=ntpEntStatusLeapSecDirection, ntpAssociationStatisticsTable=ntpAssociationStatisticsTable, ntpSnmpMIB=ntpSnmpMIB, ntpAssocStatusJitter=ntpAssocStatusJitter, ntpEntStatPktMode=ntpEntStatPktMode, ntpEntNotifHeartbeat=ntpEntNotifHeartbeat, ntpEntStatPktReceived=ntpEntStatPktReceived, ntpEntGroups=ntpEntGroups, ntpEntHeartbeatInterval=ntpEntHeartbeatInterval, ntpAssocStratum=ntpAssocStratum, ntpEntNotifSyspeerChanged=ntpEntNotifSyspeerChanged, PYSNMP_MODULE_ID=ntpSnmpMIB, ntpEntNTPCompliance=ntpEntNTPCompliance, ntpAssocStatusDispersion=ntpAssocStatusDispersion, ntpEntNotifConfigChanged=ntpEntNotifConfigChanged, ntpEntStatusEntityUptime=ntpEntStatusEntityUptime, ntpAssocAddressType=ntpAssocAddressType, ntpEntStatusNotifications=ntpEntStatusNotifications, ntpEntNotifRemoveAssociation=ntpEntNotifRemoveAssociation, ntpEntConformance=ntpEntConformance, ntpEntCompliances=ntpEntCompliances, ntpEntStatusNumberOfRefSources=ntpEntStatusNumberOfRefSources, ntpEntSoftwareVendor=ntpEntSoftwareVendor, ntpEntNotifObjects=ntpEntNotifObjects, ntpEntStatPktSent=ntpEntStatPktSent, ntpEntStatusActiveRefSourceId=ntpEntStatusActiveRefSourceId, ntpAssocId=ntpAssocId, ntpEntNotifMessage=ntpEntNotifMessage, ntpAssocRefId=ntpAssocRefId, ntpEntNotifAddAssociation=ntpEntNotifAddAssociation, ntpEntObjectsGroup2=ntpEntObjectsGroup2, ntpEntStatPktModeTable=ntpEntStatPktModeTable, ntpEntStatusDispersion=ntpEntStatusDispersion, ntpAssocStatProtocolError=ntpAssocStatProtocolError, ntpEntStatusOutPkts=ntpEntStatusOutPkts)
