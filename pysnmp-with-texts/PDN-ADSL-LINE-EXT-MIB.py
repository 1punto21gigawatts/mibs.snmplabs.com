#
# PySNMP MIB module PDN-ADSL-LINE-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-ADSL-LINE-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_interfaces, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-interfaces")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, ObjectIdentity, Integer32, MibIdentifier, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, TimeTicks, IpAddress, Gauge32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Integer32", "MibIdentifier", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "TimeTicks", "IpAddress", "Gauge32", "Bits", "NotificationType")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
pdnAdslLineExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24))
pdnAdslLineExtMIB.setRevisions(('2005-03-29 00:00', '2005-01-06 00:00', '2004-10-15 00:00', '2004-09-10 00:00', '2004-04-21 00:00', '2004-04-20 00:00', '2004-03-01 00:00', '2003-12-08 00:00', '2003-12-03 00:00', '2003-11-19 15:00', '2003-11-11 15:00', '2003-11-06 15:00', '2003-10-31 15:00', '2003-10-23 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnAdslLineExtMIB.setRevisionsDescriptions(("The `special' value was missing in the syntax for pdnAdslLineStatusAtucActAtp and pdnAdslLineStatusAtucActAtp. Added a note in the pdnAdslLineSubCarStatusTable indicating that some objects may not be valid if a loop diagnostic has not completed execution. pdnAdslLineSubCarAtucHlogMt and pdnAdslLineSubCarAturHlogMt were incorrectly represented. These object had the syntax and description of HLOGpsds and HLOGpsus from G.997.1. Corrected the syntax and description for the HlogMt objects and added pdnAdslLineSubCarAtucHlogPs and pdnAdslLineSubCarAturHlogPs objects.", "Changed the identifiers for the objects in the pdnAdslLineStatusTable and the pdnAdslLineSubCarStatusTable from `Ds' to `Atuc' and from `Us' to `Atur'. When these tables were first created, it was not absolutely clear how `Ds' and `Us' mapped to `Atuc' and `Atur'. However in December 2004, the DSL Forum released TR-090, `Protocol Independent Object Model for Managing Next Generation ADSL Technologies' which notes in Section 5.4.4, `ATU Channel Thresholds' and in Section 5.5.1, `ATU Sub-Carrier Status' that the object instances associated with the ATU-C use the xxxds version of the parameter while those associated with the ATU-R use the xxxus version of the parameter. Paradyne's Compliance Engineering requested a change to the ranges for Maximum Nominal Transmit PSD objects per the Telenor Networks Specification [OA 305], Section 7.2.2, `Downstream transmit spectral mask'. The objects effected were: pdnAdslPsdConfAtucMaxNomPsd from (-600..-400) to (-800..-400) pdnAdslPsdConfAturMaxNomPsd from (-600..-380) to (-650..-380).", 'Fix transposed characters for PdnAdslTransmissionModeType bits 38 and 39. Added Line Status Table and Line Subcarrier Status Table. Added missing range limits for pdnAdslLineL2Atpr.', 'Added new objects that were required for G.997.1 Amendment 1. The additions include bit definitions for PdnAdslTransmissionModeType and the pdnAdslLineL2Atprt object.', 'The value for pdnAdslPsdConfAtucMaxNomPsd did not match the range in G.997.1 (05/2003), Section 7.3.1.2.1. The correct range is -60 to -40.', 'Change the pdnAdslLineExtTable from augments to be indexed. Some SNMP agents do a read-modify-write on a table row. As a result, the instrumentation code may not be able to determine which object the manager actually wants to set. For example, consider the case where a manager wants to set the transmission mode to allow ADSL2Plus modes. The instrumentation code, in the case of a read-modify-write cycle, could result in receiving a row where the adslLineTransAtucConf is is set one way while the pdnAdslLineTransAtucConfig is set another way. This could result in unpredictable results. This change will prevent the objects in the ExtTables from existing in the same row as the objects in the standard tables and prevent the unpredictable case from occurring.', 'Correct OID enumerations for objects in the pdnAdslPsdConfTable. The OID 6 was skipped. That is pdnAdslPsdConfAturmaxNomAtp and following objects were renumbered. The pdnAdslLineLdsf object referred to the pdnAdslLinePmsf object which was removed. pdnAdslLineLdsf was updated to remove the reference.', 'Updated per MIBwg review. Change special case value for pdnAdslPsdConfAtucMaxRxPwr from 9999 to 2048 to make it easier for an NMS application to detect the special case. Collapse the two Carrier Mask tables, one for upstream and one for downstream, into a single table. The profile name can be used to distinguish between an upstream and a downstream direction if needed.', 'Added objects to support MAXRXPWRus, CARMASKds, and CARMASKus per new requirements.', 'Modified description text to clarify issues pertaining to default profile names. General changes requested by middleware and client implementors.', 'Changed the order of the indices for the pdnAdslModeSpecificPsdTable to ease implementation in the device.', 'Clean up, typo corrections, and clarifications.', 'Added pdnAdslLinePowerManagementStatus to provide a mechanism to enable or disable power management functionality.', 'Initial release.',))
if mibBuilder.loadTexts: pdnAdslLineExtMIB.setLastUpdated('200503290000Z')
if mibBuilder.loadTexts: pdnAdslLineExtMIB.setOrganization('Paradyne Networks MIB Working Group Other information about group editing the MIB')
if mibBuilder.loadTexts: pdnAdslLineExtMIB.setContactInfo('Paradyne Networks, Inc. 8545 126th Avenue North Largo, FL 33733 www.paradyne.com General Comments to: mibwg_team@paradyne.com Editor Clay Sikes')
if mibBuilder.loadTexts: pdnAdslLineExtMIB.setDescription("This MIB module is a supplement to the ADSL-LINE-MIB and to the ADSL-LINE-EXT-MIB, the `standard` MIBs, where additional objects are needed to support ADSL modes or flavors not covered in the `standard` MIBs. At the time this MIB was defined, the IETF ADSL MIB Working does not have any work on the 'standard' MIBs planned and/or has not produced a schedule to address ADSL2/ADSL2plus needs. As a result, these objects may be a `temporary' solution until MIBs/Objects are defined or extended to meet the needs of ADSL2/ADSL2plus. The following documents that should be referenced with respect to this MIB: [G.997.1] ITU-T G997.1 `Physical layer management for Digital Subscriber Line (DSL) transceivers', May 2003. [G.991.1 Am 1] ITU-T-G997.1 Amendment 1 `Physical layer management for Digital Subscriber Line (DSL) transceivers Amendment 1', December 2003. [OA 305] Telenor Networks Specification, Specification Number OA 305, `Requirements for equipment to be connected to the local sub-loop in the access network of Telenor. Equipment providing ADSL and PSTN or ISDN Basic Access Services, full unbundled access (service type EDF)', TN-NL-U-T/OA305/0101 2005, Edition 4.1, January 1, 2005. [WT-090] DSL Forum Working Text WT-090 `Protocol Independent Object Model for Managing Next Generation ADSL Technologies', Revision-1, September 2003. [WT-090-4] DSL Forum Working Text WT-090 `Protocol Independent Object Model for Managing Next Generation ADSL Technologies', Revision-4, June 2004. [RFC 2662] Bathrick, G., Ly, F. `ADSL-LINE-MIB', August 1999. [RFC 3440] Ly, F., Bathrick, G. `ADSL-LINE-EXT-MIB', December 2002. Generally the MIB objects are defined using G.997.1 and the MIB objects are arranged using WT-090. ===================================================================== == == == Copyright (C) 2004 Paradyne Corporation. == == == =====================================================================")
pdnAdslLineExtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 0))
pdnAdslLineExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1))
pdnAdslLineExtAFNs = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 2))
pdnAdslLineExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3))
class PdnAdslTransmissionModeType(TextualConvention, Bits):
    reference = 'G.997.1, Section 7.3.1.1.1, ATU Transmission System Enabling (ATSE).'
    description = 'A set of ADSL line transmission modes, with one bit per mode.'
    status = 'current'
    namedValues = NamedValues(("ansit1413", 0), ("etsi", 1), ("q9921PotsNonOverlapped", 2), ("q9921PotsOverlapped", 3), ("q9921IsdnNonOverlapped", 4), ("q9921isdnOverlapped", 5), ("q9921tcmIsdnNonOverlapped", 6), ("q9921tcmIsdnOverlapped", 7), ("q9922potsNonOverlapeed", 8), ("q9922potsOverlapped", 9), ("q9922tcmIsdnNonOverlapped", 10), ("q9922tcmIsdnOverlapped", 11), ("q9921tcmIsdnSymmetric", 12), ("reservedBit13", 13), ("reservedBit14", 14), ("reservedBit15", 15), ("reservedBit16", 16), ("reservedBit17", 17), ("q9923potsNonOverlapped", 18), ("q9923potsOverlapped", 19), ("q9923isdnNonOverlapped", 20), ("q9923isdnOverlapped", 21), ("reservedBit22", 22), ("reservedBit23", 23), ("q9924potsNonOverlapped", 24), ("q9924potsOverlapped", 25), ("reservedBit26", 26), ("reservedBit27", 27), ("q9923DigitalNonOverlappedI", 28), ("q9923DigitalOverlappedI", 29), ("q9923DigitalNonOverlappedJ", 30), ("q9923DigitalOverlappedJ", 31), ("q9924DigitalNonOverlappedI", 32), ("q9924DigitalOverlappedI", 33), ("q9923ReachExtOverPotsMode1L", 34), ("q9923ReachExtOverPotsMode2L", 35), ("q9923ReachExtOverPotsMode3L", 36), ("q9923ReachExtOverPotsMode4L", 37), ("q9923ExtUpOverPotsNonOverlappedM", 38), ("q9923ExtUpOverPotsOverlappedM", 39), ("q9925potsNonOverlapped", 40), ("q9925potsOverlapped", 41), ("q9925isdnNonOverlapped", 42), ("q9925isdnOverlapped", 43), ("reserved44", 44), ("reserved45", 45), ("q9925DigitalNonOverlappedI", 46), ("q9925DigitalOverlappedI", 47), ("q9925DigitalNonOverlappedJ", 48), ("q9925OverlappedJ", 49), ("q9925ExtUpOverPotsNonOverlappedM", 50), ("q9925ExtUpOverPotsOverlappedM", 51), ("reservedBit52", 52), ("reservedBit53", 53), ("reservedBit54", 54), ("reservedBit55", 55))

pdnAdslLineExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1), )
if mibBuilder.loadTexts: pdnAdslLineExtTable.setReference('WT-090, Section 5.1.1, ADSL Line.')
if mibBuilder.loadTexts: pdnAdslLineExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineExtTable.setDescription('This table extends the adslLineTable in support of an ADSL Line object. The objects pdnAdslLineTransAtucCap, pdnAdslLineTrans- AtucConfig, and pdnAdslLineTransAtucActual exist along with their PdnAdslTransmissionModeType TC because the AdslTransmissionModeType defined in the ADSL-LINE-EXT-MIB does not include the ADSL2/ADSL2plus bits defined in ITU G.997.1 (05/2003) ATU Transmission System Enabling (ATSE) section. When using the objects defined in this MIB with a syntax of type PdnAdslTransmissionModeType, the interworking relationship between these objects and the objects defined in the ADSL-LINE- EXT-MIB defined with a syntax of type AdslTransmissionModeType must be considered and explained in an implementation-specific document such as an Operational Specification. Note that the PdnAdslTransmissionModeType is a super set of the AdslTransmis- sionModeType. One possible implementation could be as follows: 1. Both objects of syntax AdslTransmissionModeType defined in the ADSL-LINE-EXT-MIB and objects of syntax PdnAdsl- TransmissionModeType defined in this MIB are supported. By supporting both, a manager with the ADSL-LINE-EXT-MIB loaded could manage the device with the restriction of not being able to utilize ADSL2/ADSL2plus modes. 2. When the ADSL2/ADSL2plus capabilities are desired, a manager would have to use the objects defined in this MIB to configure the transmission modes, read capability, or read the actual transmission mode of the ATU-C. 3. The transmission mode that the ATU-C is currently configured for is based on the last object, adslLineTrans- AtucConfig or pdnAdslLineTransAtucConfig, that was written.')
pdnAdslLineExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAdslLineExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineExtEntry.setDescription('An extended entry in the adslLineTable.')
pdnAdslLineTransAtucCap = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 1), PdnAdslTransmissionModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineTransAtucCap.setReference('G.997.1, Section 7.3.1.1.1, ATU Transmission System Enabling (ATSE). RFC 3440, adslLineTransAtucCap.')
if mibBuilder.loadTexts: pdnAdslLineTransAtucCap.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineTransAtucCap.setDescription('The transmission modes, represented by a bitmask that the ATU-C is capable of supporting. The modes available are limited by the design of the equipment.')
pdnAdslLineTransAtucConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 2), PdnAdslTransmissionModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLineTransAtucConfig.setReference('G.997.1, Section 7.3.1.1.1, ATU Transmission System Enabling (ATSE). RFC 3440 adslLineTransAtucConfig.')
if mibBuilder.loadTexts: pdnAdslLineTransAtucConfig.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineTransAtucConfig.setDescription("The transmission modes, represented by a bitmask, currently enabled by the ATU-C. The manager can only set those modes that are supported by the ATU-C. An ATU-C's supported modes are provided by pdnAdslLineTransAtucCap.")
pdnAdslLineTransAtucActual = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 3), PdnAdslTransmissionModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineTransAtucActual.setReference('G.997.1, Section 7.3.1.1.1, ATU Transmission System Enabling (ATSE). RFC 3440 adslLineTransAtucActual.')
if mibBuilder.loadTexts: pdnAdslLineTransAtucActual.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineTransAtucActual.setDescription("The actual transmission mode of the ATU-C. During ADSL line initialization, the ADSL Transceiver Unit Remote terminal end (ATU-R) will determine the mode used for the link. This value will be limited a single transmission mode that is a subset of those modes enabled by the ATU-C and denoted by pdnAdslLineTransAtucConfig. After an initialization has occurred, its mode is saved as the `Current' mode and is persistent should the link go down. This object returns 0 (i.e. BITS with no mode bit set) if the mode is not known.")
pdnAdslLinePowerManagementConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLinePowerManagementConfig.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLinePowerManagementConfig.setDescription('This object enables or disables power management functionality.')
pdnAdslLineSpectrumProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 32), )).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfile.setReference('WT-090, Section 5.1.1, ADSL Line.')
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfile.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfile.setDescription("The value of this object identifies the row in the ADSL Line Spectrum Profile Table, pdnAdslLineSpectrumProfileTable, which applies for this ADSL line. If this object is not a zero-length string, it should default to the default profile whose name is `DEFVAL'.")
pdnAdslLinePmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 6), Bits().clone(namedValues=NamedValues(("idleStateL3", 0), ("lowPwrStateL1L2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLinePmMode.setReference('G.997.1, Section 7.3.1.1.4, Power Management State Enabling (PMMode).')
if mibBuilder.loadTexts: pdnAdslLinePmMode.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLinePmMode.setDescription('The line states the ATU-C or ATU-R may autonomously transition to on this line. It is coded in a bit-map representation (0 if not allowed, 1 if allowed) as follows: idleStateL3(0) - Bit 0 L3 state (Idle state) lowPwrStateL1L2(1) - Bit 1 L1/L2 state (Low power state)')
pdnAdslLineL0Time = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLineL0Time.setReference('G.997.1, Section 7.3.1.1.5, Minimum L0 Time interval,between L2 exit and next L2 entry (L0-TIME).')
if mibBuilder.loadTexts: pdnAdslLineL0Time.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineL0Time.setDescription('The minimum time, in seconds, between and Exit from the L2 state and the next Entry into the L2 state.')
pdnAdslLineL2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLineL2Time.setReference('G.997.1, Section 7.3.1.1.6, Minimum L2 Time interval between L2 entry and first L2 trim (L2-TIME).')
if mibBuilder.loadTexts: pdnAdslLineL2Time.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineL2Time.setDescription('The minimum time, in seconds, between an Entry into the L2 state and the first Power Trim in the L2 state and between two con- secutive Power Trims in the L2 State.')
pdnAdslLineL2Atpr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLineL2Atpr.setReference('G.997.1, Section 7.3.1.1.7, Maximum Aggregate Transmit Power reduction per L2 trim (L2-ATPR).')
if mibBuilder.loadTexts: pdnAdslLineL2Atpr.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineL2Atpr.setDescription('The maximum aggregate transmit power reduction, in dB, that can be performed through a single Power Trim in the L2 state. At the time this MIB was produced, the upper limit for this object was not updated in the G.997.1 with respect to ADSL2plus. As such, the upper limit of this object should be defined in an implementation- specific document such as an Operational Specification.')
pdnAdslLineLdsf = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ldsfMode0", 1), ("ldsfMode1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLineLdsf.setReference('G.997.1, Section 7.3.1.1.8, Loop Diagnostics Mode forced (LDSF).')
if mibBuilder.loadTexts: pdnAdslLineLdsf.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineLdsf.setDescription("Defines whether the line should be forced into the loop diagnostics mode by the near-end ATU on this line. ldsfMode0(1) - 0: Inhibits the near-end ATU from performing loop diagnostics mode procedures on the line. Loop diagnostic mode procedures may still be initiated by the far-end ATU. ldsModef1(2) - 1: Forces the near-end ATU to perform the loop diagnostics procedures. The line needs to be forced to the L3 state (idle state) before it can be forced to the loop diagnostics mode. Only while the line power management state is the L3 state, the line can be forced into the loop diagnostics mode procedures. The following are ways to force the line to the L3 state: (1) Set the ifAdminStatus to down. When the loop diagnostics mode procedures are completed successfully, this object shall reset to ldsf0 and the line shall return to and remain in the L3 idle state. The loop diagnostics data shall be available at least until the line is forced to the L0 state. If the loop diagnostics procedures can't be completed successfully, then an Initialization Failure occurs. As long as loop diagnostics procedures are not completed successfully, attempts shall be made to do so, until the loop diagnostics mode is no longer forced on the line through this configuration parameter.")
pdnAdslLineL2Atprt = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAdslLineL2Atprt.setReference('G.997.1 Am 1 , Section 7.3.1.1.9, Total maximum aggregate transmit power reduction in L2 (L2-ATPRT).')
if mibBuilder.loadTexts: pdnAdslLineL2Atprt.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineL2Atprt.setDescription('This parameter represents the total maximum aggregate transmit power reduction (in dB) that can be performed in an L2 state. This is the sum of all reductions of L2 Request (i.e., at transition of L0 to L2 state) and Power Trims.')
pdnAdslLineSpectrumProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 2), )
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileTable.setReference('WT-090, Section 5.1.6, ADSL Line Spectrum Profile.')
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileTable.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileTable.setDescription('This table contains specific configuration of transmission spectrum and power spectral density related parameters that can be mapped to one of the ADSL lines.')
pdnAdslLineSpectrumProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 2, 1), ).setIndexNames((1, "PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSpectrumProfileName"))
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileEntry.setDescription("Each entry contains a specific profile for transmission spectrum and power spectral density related parameters. A default profile with an index of `DEFVAL', will always exist and its parameters will be set to vendor or product specific values, unless otherwise specified in this document.")
pdnAdslLineSpectrumProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileName.setReference('G.997.1, Section 7.3.1.1.1 ATU Transmission System Enabling (ATSE).')
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileName.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileName.setDescription("This object identifies a row in the pdnAdslLineSpectrumProfile- Table. The system will always provide a default profile whose name is `DEFVAL'.")
pdnAdslLineSpectrumProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `valid'. Before a profile can be deleted or taken out of service, by setting this object to `destroy' or `outOfService', the profile must be first unreferenced from all entries that referred to it (entries in the pdnAdslLineExtTable).")
pdnAdslLineSpectrumModeSpecificPsdProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslLineSpectrumModeSpecificPsdProfile.setReference('WT-090, Section 5.1.6 ADSL LIne Spectrum Profile and Section 5.1.7 ADSL Mode-Specific PSD Configuration.')
if mibBuilder.loadTexts: pdnAdslLineSpectrumModeSpecificPsdProfile.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumModeSpecificPsdProfile.setDescription("The value of this object identifies the row(s) in the ADSL Mode-Specific PSD Configuration Table, pdnAdslModeSpecific- PsdConfTable, which applies for this Line Spectrum Profile. A particular ADSL line may need to support multiple mode- specific power spectral density related settings. For example, a ADSL line may need to support one set of settings for ADSL2 and another set of settings for ADSL2plus. See the pdnAdslMode- SpecificPsdConfTable for additional detail. The system will always provide a default profile whose name is `DEFVAL'")
pdnAdslLineSpectrumAtucCarMaskProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslLineSpectrumAtucCarMaskProfile.setReference('WT-090, Section 5.1.6, ADSL Line Spectrum Profile. G.997.1, Section 7.3.1.2.6, Downstream subcarrier masking (CARMASKds).')
if mibBuilder.loadTexts: pdnAdslLineSpectrumAtucCarMaskProfile.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumAtucCarMaskProfile.setDescription('This object identifies one or more rows in the pdnAdslCarMaskTable. The pdnAdslCarMaskTable is a table containing a list of subcarriers to be masked in the downstream or upstream direction; the profile in the pdAdslCarMaskTable that this object identifies will apply the masks in the downstream direction. This object defaults to an empty string meaning that no subcarriers are masked by an administrator.')
pdnAdslLineSpectrumAturCarMaskProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslLineSpectrumAturCarMaskProfile.setReference('WT-090, Section 5.1.6, ADSL Line Spectrum Profile. G.997.1, Section 7.3.1.2.7, Upstream subcarrier masking (CARMASKus).')
if mibBuilder.loadTexts: pdnAdslLineSpectrumAturCarMaskProfile.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumAturCarMaskProfile.setDescription('This object identifies one or more rows in the pdnAdslCarMaskTable. The pdnAdslCarMaskTable is a table containing a list of subcarriers to be masked in the downstream or upstream direction; the profile in the pdAdslCarMaskTable that this object identifies will apply the masks in the upstream direction. This object defaults to an empty string meaning that no subcarriers are masked by an administrator.')
pdnAdslModeSpecificPsdConfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 3), )
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfTable.setReference('WT-090, Section 5.1, Configuration Management, and Section 5.1.6, ADSL Line Spectrum Profile.')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfTable.setStatus('current')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfTable.setDescription('This table binds an entry indexed by a specific ADSL type or flavor (e.g. ADSL2 or ADSL2+) and indexed by a profile name to a specific DSL PSD Configuration Profile.')
pdnAdslModeSpecificPsdConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 3, 1), ).setIndexNames((0, "PDN-ADSL-LINE-EXT-MIB", "pdnAdslModeSpecificPsdConfProfileName"), (0, "PDN-ADSL-LINE-EXT-MIB", "pdnAdslModeSpecificPsdConfAdslMode"))
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfEntry.setDescription("An entry in the table. For each particular ADSL mode or flavor supported (pdnAdslMOdeSpecificPsdConfAdslMode), there will be an entry that points to an entry in the ADSL PSD Configuration Table (pdnAdslPsdConfTable). For example, if ADSL2 and ADSL2plus ADSL modes are supported, this table will have the following two default entries: 1. An entry indexed by pdnAdslModeSpecificPsd- ConfProfileName = 'DEFVAL' and pdnAdslModeSpecific- PsdConfAdslMode = adsl2(1) and has pdnAdslModeSpecific- PsdConfAdslPsdConfProfile = DEFVAL_ADSL2 2. An entry indexed by pdnAdslModeSpecificPsd- ConfProfileName = 'DEFVAL' and pdnAdslModeSpecific- PsdConfAdslMode = adsl2plus(3) and has pdnAdslModeSpecific- PsdConfAdslPsdConfProfile = DEFVAL_ADSL2PLUS DEFVAL entries may be modified but not deleted.")
pdnAdslModeSpecificPsdConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfProfileName.setReference('WT-090, Section 5.1.7, ADSL Mode-Specific PSD Configuration.')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfProfileName.setStatus('current')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfProfileName.setDescription("This object identifies a row in the pdnAdslModeSpecificPsdConfTable. The system will always provide a default profile whose name is 'DEFVAL'.")
pdnAdslModeSpecificPsdConfAdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("adsl2", 1), ("adsl2NoSplitter", 2), ("adsl2plus", 3))))
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfAdslMode.setReference('WT-090, Section 5.1.7, ADSL Mode-Specific PSD Configuration.')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfAdslMode.setStatus('current')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfAdslMode.setDescription('This object identifies a row in the pdnAdslModeSpecificPsdConfTable containing parameters specific to a particular ADSL mode or flavor identified by this object.')
pdnAdslModeSpecificPsdConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `valid'. Before a profile can be deleted or taken out of service, by setting this object to `destroy' or `outOfService', the profile must be first unreferenced from all entries that referred to it (entries in the pdnAdslLineSpectrumProfileTable).")
pdnAdslModeSpecificPsdConfAdslPsdConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfAdslPsdConfProfile.setReference('WT-090, Section 5.1, Configuration Management, and Section 5.1.7, ADSL Mode-Specific PSD Configuration. G.997.1, Section 7.3.1.2, Power/PSD configuration parameters.')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfAdslPsdConfProfile.setStatus('current')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdConfAdslPsdConfProfile.setDescription('This object identifies a row in the ADSL PSD Configuration Table, pdnAdslPsdConfTable.')
pdnAdslPsdConfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4), )
if mibBuilder.loadTexts: pdnAdslPsdConfTable.setReference('WT-090, Section 5.1.7, ADSL Mode-Specific PSD Configuration. G.997.1, Section 7.3.1.2, Power/PSD configuration parameters.')
if mibBuilder.loadTexts: pdnAdslPsdConfTable.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfTable.setDescription('This table contains power spectral density settings.')
pdnAdslPsdConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4, 1), ).setIndexNames((1, "PDN-ADSL-LINE-EXT-MIB", "pdnAdslPsdConfProfileName"))
if mibBuilder.loadTexts: pdnAdslPsdConfEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfEntry.setDescription("Each entry contains specific power spectral density settings for a particular profile. A default profile for each particular ADSL mode or flavor supporting PSD configuration will exist (See the pdnAdslModeSpecificPsdConfAdslMode object the the range of possible ADSL modes or flavors that are possible). For example, if only ADSL2 and ADSL2plus modes are supported, the indices would be 'DEFVAL_ADSL2' and 'DEFVAL_ADSL2PLUS'. The DEFVAL rows may be modified but not deleted. The DEFVAL rows will always exist and its parameters will be set to vendor or product specific values, unless otherwise specified in this document.")
pdnAdslPsdConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pdnAdslPsdConfProfileName.setReference('WT-090, Section 5.1.7, ADSL Mode-Specific PSD Configuration.')
if mibBuilder.loadTexts: pdnAdslPsdConfProfileName.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfProfileName.setDescription('This object identifies a row in the pdnAdslPsdConfTable.')
pdnAdslPsdConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslPsdConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `valid'. Before a profile can be deleted or taken out of service, by setting this object to `destroy' or `outOfService', the profile must be first unreferenced from all entries that referred to it such as pdnAdslModeSpecificPsdConfAdslPsdConfProfile.")
pdnAdslPsdConfAtucMaxNomPsd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-800, -400))).setUnits('tenth dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxNomPsd.setReference('G.997.1, Section 7.3.1.2.1, Downstream Maximum Nominal Power Spectral Density (MAXNOMPSDds), and Section 7.3.1.2.2, Upstream Maximum Nominal Power Spectral Density (MAXNOMPSDus). OA 305, Section 7.2.2, Downstream transmit spectral mask.')
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxNomPsd.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxNomPsd.setDescription('Represents the Maximum nominal transmit PSD for the ATU-C. The values range from -80 to -40 dBm/Hz in 0.1 dB steps.')
pdnAdslPsdConfAturMaxNomPsd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-650, -380))).setUnits('tenth dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslPsdConfAturMaxNomPsd.setReference('G.997.1, Section 7.3.1.2.1, Downstream Maximum Nominal Power Spectral Density (MAXNOMPSDds), and Section 7.3.1.2.2, Upstream Maximum Nominal Power Spectral Density (MAXNOMPSDus).')
if mibBuilder.loadTexts: pdnAdslPsdConfAturMaxNomPsd.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfAturMaxNomPsd.setDescription('Represents the Maximum nominal transmit PSD for the ATU-R. The values range from -65 to -38 dBm/Hz in 0.1 dB steps.')
pdnAdslPsdConfAtucMaxNomAtp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('tenth dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxNomAtp.setReference('G.997.1, Section 7.3.1.2.3, Downstream Maximum Nominal Aggregate Transmit Power (MAXNOMATPds), and Section 7.3.1.2.4, Upstream Maximum Nominal Aggregate Transmit Power (MAXNOMATPus).')
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxNomAtp.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxNomAtp.setDescription('Represents the Maximum nominal aggregate transmit power for the ATU-C. The values range from 0 to 25.5 dBm in 0.1 dB steps.')
pdnAdslPsdConfAturMaxNomAtp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('tenth dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslPsdConfAturMaxNomAtp.setReference('G.997.1, Section 7.3.1.2.3, Downstream Maximum Nominal Aggregate Transmit Power (MAXNOMATPds), and Section 7.3.1.2.4, Upstream Maximum Nominal Aggregate Transmit Power (MAXNOMATPus).')
if mibBuilder.loadTexts: pdnAdslPsdConfAturMaxNomAtp.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfAturMaxNomAtp.setDescription('Represents the Maximum nominal aggregate transmit power for the ATU-R. The values range from 0 to 25.5 dBm in 0.1 dB steps.')
pdnAdslPsdConfAtucMaxRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-255, 255), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxRxPwr.setReference('G.997.1, Section 7.3.1.2.5, Upstream Maximum Aggregate Receive Power (MAXRXPWRus).')
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxRxPwr.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdConfAtucMaxRxPwr.setDescription('Represents the maximum upstream aggregate receive power over a set of subcarriers (in dBm). The ATU-C shall request an upstream power cutback such that the upstream aggregate receive power over that set of subcarriers is at or below the configured maximum value. It ranges from -25.5 to 25.5 dBm, with 0.1 dB steps. The value 2048 is a special value and indicates that no Upstream Maximum Aggregate Receive Power limit is to be applied (i.e., the maximum value is infinite).')
pdnAdslCarMaskTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 5), )
if mibBuilder.loadTexts: pdnAdslCarMaskTable.setReference('WT-090, Section 5.1.6, ADSL Line Spectrum Profile. G.997.1, Section 7.3.1.2.6, Downstream subcarrier masking (CARMASKds). G.997.1, Section 7.3.1.2.7, Upstream subcarrier masking (CARMASKus).')
if mibBuilder.loadTexts: pdnAdslCarMaskTable.setStatus('current')
if mibBuilder.loadTexts: pdnAdslCarMaskTable.setDescription('This table contains a list of subcarriers that are to be masked (i.e. not transmitted). Subcarriers that are not entries in this table are not masked.')
pdnAdslCarMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 5, 1), ).setIndexNames((0, "PDN-ADSL-LINE-EXT-MIB", "pdnAdslCarMaskProfileName"), (0, "PDN-ADSL-LINE-EXT-MIB", "pdnAdslCarMaskSubCarrierIndex"))
if mibBuilder.loadTexts: pdnAdslCarMaskEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAdslCarMaskEntry.setDescription('Each entry represents a specific subcarrier that is masked for a particular profile.')
pdnAdslCarMaskProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pdnAdslCarMaskProfileName.setStatus('current')
if mibBuilder.loadTexts: pdnAdslCarMaskProfileName.setDescription('This object identifies a row in the pdnAdslCarMaskTable based on a profile name.')
pdnAdslCarMaskSubCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: pdnAdslCarMaskSubCarrierIndex.setStatus('current')
if mibBuilder.loadTexts: pdnAdslCarMaskSubCarrierIndex.setDescription("This object identifies a row in the pdnAdslCarMaskTable based on subcarrier that is being masked. The subcarrier index ranges from 0 to (NSCds-1 or NSCus-1 (NSC is Number of Subcarriers) as specified in G.997.1 where NSCds is the higher subcarrier that can be transmitted in the downstream direction and NSCus is the higher subcarrier that can be transmitted in the upstream direction. Please refer to the corresponding ITU recommendation for specific values of NSCds and NSCus. The `ADSL Values for NSC' comment above lists those recommendations.")
pdnAdslCarMaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAdslCarMaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnAdslCarMaskRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table. A row is activated by setting this object to active(1).')
pdnAdslCarMaskSubCarrierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("masked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslCarMaskSubCarrierStatus.setStatus('current')
if mibBuilder.loadTexts: pdnAdslCarMaskSubCarrierStatus.setDescription('This object provides a clear indication that the subcarrier is masked.')
pdnAdslLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6), )
if mibBuilder.loadTexts: pdnAdslLineStatusTable.setReference('WT-090-4, Section 5.2.1, ADSL Line Status. G.997.1, Section 7.5.1, Line test, diagnostics and status parameters.')
if mibBuilder.loadTexts: pdnAdslLineStatusTable.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusTable.setDescription('This table contains current line status measurements.')
pdnAdslLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAdslLineStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusEntry.setDescription('Each entry represents an interface. i.e. a row in the ifTable.')
pdnAdslLineStatusAtucLineAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAtucLineAtn.setReference('G.997.1, Section 7.5.1.6, Downstream Line Attenuation (LATNds).')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucLineAtn.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucLineAtn.setDescription('The measured difference in the total power transmitted by the ATU-C and the total power received by the ATU-R over all subcarriers during diagnostics mode and initialization. The value 2048 is a special value and indicates the line attenuation is out of the range to be represented.')
pdnAdslLineStatusAturLineAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAturLineAtn.setReference('G.997.1, Section 7.5.1.7, Upstream Line Attenuation (LATNus).')
if mibBuilder.loadTexts: pdnAdslLineStatusAturLineAtn.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAturLineAtn.setDescription('The measured difference in the total power transmitted by the ATU-R and the total power received by the ATU-C over all subcarriers during diagnostics mode and initialization. The value 2048 is a special value and indicates the line attenuation is out of the range to be represented.')
pdnAdslLineStatusAtucSignalAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAtucSignalAtn.setReference('G.997.1, Section 7.5.1.8, Downstream Signal Attenuation (SATNds).')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucSignalAtn.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucSignalAtn.setDescription('The measured difference in the total power transmitted by the ATU-C and the total power received by the ATU-R over all subcarriers during showtime. The value 2048 is a special value and indicates the line attenuation is out of the range to be represented.')
pdnAdslLineStatusAturSignalAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAturSignalAtn.setReference('G.997.1, Section 7.5.1.9, Upstream Signal Attenuation (SATNus).')
if mibBuilder.loadTexts: pdnAdslLineStatusAturSignalAtn.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAturSignalAtn.setDescription('The measured difference in the total power transmitted by the ATU-R and the total power received by the ATU-C over all subcarriers during showtime. The value 2048 is a special value and indicates the line attenuation is out of the range to be represented.')
pdnAdslLineStatusAtucSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640, 630), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAtucSnrMgn.setReference('G.997.1, Section 7.5.1.10, Downstream Signal-to-Noise Ratio Margin (SNRMds).')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucSnrMgn.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucSnrMgn.setDescription('The upstream signal-to-noise ratio margin is the increase in dB of the noise power received at the ATU-R, such that the BER requirements are met for all upstream bearer channels. The value 2048 is a special value and indicates the parameter is out of range to be represented.')
pdnAdslLineStatusAturSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640, 630), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAturSnrMgn.setReference('G.997.1, Section 7.5.1.11, Upstream Signal-to-Noise Ratio Margin (SNRMus).')
if mibBuilder.loadTexts: pdnAdslLineStatusAturSnrMgn.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAturSnrMgn.setDescription('The downstream signal-to-noise ratio margin is the increase in dB of the noise power received at the ATU-C, such that the BER requirements are met for all upstream bearer channels. The value 2048 is a special value and indicates the parameter is out of range to be represented.')
pdnAdslLineStatusAtucMaxAttainableLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 7), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAtucMaxAttainableLineRate.setReference('G.997.1, Section 7.5.1.12, Downstream Maximum Attainable Data Rate (ATTNDRds).')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucMaxAttainableLineRate.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucMaxAttainableLineRate.setDescription('The maximum downstream net data rate currently attainable by the ATU-C transmitter and the ATU-R receiver.')
pdnAdslLineStatusAturMaxAttainableLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 8), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAturMaxAttainableLineRate.setReference('G.997.1, Section 7.5.1.13, Upstream Maximum Attainable Data Rate (ATTNDRus).')
if mibBuilder.loadTexts: pdnAdslLineStatusAturMaxAttainableLineRate.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAturMaxAttainableLineRate.setDescription('The maximum upstream net data rate currently attainable by the ATU-R transmitter and the ATU-C receiver.')
pdnAdslLineStatusAtucActAtp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-310, 310), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAtucActAtp.setReference('G.997.1, Section 7.5.1.16, Downstream Actual Aggregate Transmit Power (ACTATPus).')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucActAtp.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAtucActAtp.setDescription('The total amount of transmit power delivered by the ATU-C at the U-R reference point, at the instant of the measurement. The value 2048 is a special value and indicates the parameter is out of range to be represented.')
pdnAdslLineStatusAturActAtp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-310, 310), ValueRangeConstraint(2048, 2048), ))).setUnits('tenth dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineStatusAturActAtp.setReference('G.997.1, Section 7.5.1.17, Upstream Actual Aggregate Transmit Power (ACTATPds).')
if mibBuilder.loadTexts: pdnAdslLineStatusAturActAtp.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusAturActAtp.setDescription('The total amount of transmit power delivered by the ATU-R at the U-R reference point, at the instant of the measurement. The value 2048 is a special value and indicates the parameter is out of range to be represented.')
pdnAdslLineSubCarStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7), )
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusTable.setReference('WT-090-4, Section 5.2.1, ADSL Line Status. G.997.1, Section 7.5.1, Line test, diagnostics and status parameters.')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusTable.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusTable.setDescription('This table contains current line status measurements.')
pdnAdslLineSubCarStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineCarrierIndex"))
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusEntry.setDescription('Each entry represents an interface. i.e. a row in the ifTable. Some objects in this table are only valid if a loop diagnostic has successfully completed. Those objects will return a noSuchName for a Get or Get Next operation if no loop diagnostic has completed.')
pdnAdslLineCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pdnAdslLineCarrierIndex.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineCarrierIndex.setDescription("Identifies a row in the table based on a subcarrier. The subcarrier index ranges from 0 to (NSCds-1 or NSCus-1 (NSC is Number of Subcarriers) as specified in G.997.1 where NSCds is the higher subcarrier that can be transmitted in the downstream direction and NSCus is the higher subcarrier that can be transmitted in the upstream direction. Please refer to the corresponding ITU recommendation for specific values of NSCds and NSCus. The `ADSL Values for NSC' comment above lists those recommendations.")
pdnAdslLineSubCarAtucHlinPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-32768, -32768), ValueRangeConstraint(-32767, 32767), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlinPs.setReference('G.997.1, Section 7.5.1.18.2, Downstream H(f) Linear Representation (HLINpsds).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlinPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlinPs.setDescription('The downstream linear representation, Hlin(f), of the Channel Characteristics Function, H(f). This value is only available after a loop diagnostic procedure. The special value -32768 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the attenuation is out of the range to be represented.')
pdnAdslLineSubCarAturHlinPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-32768, -32768), ValueRangeConstraint(-32767, 32767), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlinPs.setReference('G.997.1, Section 7.5.1.18.6, Upstream H(f) Linear Representation (HLINpsus).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlinPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlinPs.setDescription('The upstream linear representation, Hlin(f), of the Channel Characteristics Function, H(f). This value is only available after a loop diagnostic procedure. The special value -32768 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the attenuation is out of the range to be represented.')
pdnAdslLineSubCarAtucHlogMt = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlogMt.setReference('G.997.1, Section 7.5.1.18.3, Downstream H(f) Logarithmic Measurement Time (HLOGMTds).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlogMt.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlogMt.setDescription('The number of symbols used to measure downstream H(f) logarithmic measurement values. After a loop diagnostic procedure, this parameter shall contain the number of symbols used to generate the associate parameter. It should correspond to the value specified in the recommendation (e.g. the number of symbols in 1 s. time interval for G.992.3).')
pdnAdslLineSubCarAturHlogMt = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlogMt.setReference('G.997.1, Section 7.5.1.18.7, Upstream H(f) Logarithmic Measurement Time (HLOGMTus).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlogMt.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlogMt.setDescription('The number of symbols used to measure downstream H(f) logarithmic measurement values. After a loop diagnostic procedure, this parameter shall contain the number of symbols used to generate the associate parameter. It should correspond to the value specified in the recommendation (e.g. the number of symbols in 1 s. time interval for G.992.3).')
pdnAdslLineSubCarAtucQlnPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 254), ValueRangeConstraint(255, 255), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucQlnPs.setReference('G.997.1, Section 7.5.1.19.2, Downstream QLN(f) (QLNpsds).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucQlnPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucQlnPs.setDescription('Downstream Quiet Line Noise. The special value 255 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the noise power Spectral Density (PSD) is out of the range to be represented.')
pdnAdslLineSubCarAturQlnPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 254), ValueRangeConstraint(255, 255), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAturQlnPs.setReference('G.997.1, Section 7.5.1.19.4, Upstream QLN(f) (QLNpsus).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturQlnPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturQlnPs.setDescription('Upstream Quiet Line Noise. The special value 255 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the noise power spectral density (PSD) is out of the range to be represented.')
pdnAdslLineSubCarAtucSnrPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 254), ValueRangeConstraint(255, 255), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucSnrPs.setReference('G.997.1, Section 7.5.1.20.2, Downstream SNR(f) (SNRpsds).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucSnrPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucSnrPs.setDescription('Downstream Signal-to-Noise Ratio. The special value 255 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the noise power spectral density (PSD) is out of the range to be represented.')
pdnAdslLineSubCarAturSnrPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 254), ValueRangeConstraint(255, 255), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAturSnrPs.setReference('G.997.1, Section 7.5.1.20.4, Upstream SNR(f) (SNRpsus).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturSnrPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturSnrPs.setDescription('Upstream Signal-to-Noise Ratio. The special value 255 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the noise power spectral density (PSD) is out of the range to be represented.')
pdnAdslLineSubCarAtucBitsPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('Bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucBitsPs.setReference('G.997.1, Section 7.5.1.21.1, Downstream Bits Allocation (BITSpsds).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucBitsPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucBitsPs.setDescription('Downstream bits allocation.')
pdnAdslLineSubCarAturBitsPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('Bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAturBitsPs.setReference('G.997.1, Section 7.5.1.21.2, Upstream Bits Allocation (BITSpsus).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturBitsPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturBitsPs.setDescription('Upstream bits allocation.')
pdnAdslLineSubCarAtucHlogPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1022), ValueRangeConstraint(1023, 1023), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlogPs.setReference('G.997.1, Section 7.5.1.18.4, Downstream H(f) Logarithmic Representation (HLOGpsds).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlogPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAtucHlogPs.setDescription('The downstream logarithmic representation, Hlog(f), of the Channel Characteristics function, H(f), providing magnitude values. The special value 1023 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the attenuation is out of the range to be represented.')
pdnAdslLineSubCarAturHlogPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 1, 7, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1022), ValueRangeConstraint(1023, 1023), ))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlogPs.setReference('G.997.1, Section 7.5.1.18.8, Upstream H(f) Logarithmic Representation (HLOGpsus).')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlogPs.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarAturHlogPs.setDescription('The upstream logarithmic representation, Hlog(f), of the Channel Characteristics function, H(f), providing magnitude values. The special value 1023 indicates that no measurement could be done for the subcarrier because it is out of the passband or that the attenuation is out of the range to be represented.')
pdnAdslLineExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 1))
pdnAdslLineExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2))
pdnAdslLineExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 1, 1)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineExtGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSpectrumGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslModeSpecificPsdGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslPsdGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslCarMaskGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineL2AtprtGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusLineAtnGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusSignalAtnGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusSnrMgnGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusMaxattainableLineRateGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusActAtpGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarStatusHlinGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarStatusHlogMtGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarStatusQlnGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarStatusSnrGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarStatusBitsGroup"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarStatusHlogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineExtMIBCompliance = pdnAdslLineExtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineExtMIBCompliance.setDescription('The compliance statement for pdnAdslLineMIB entities which implement the pdnAdslLineMIB.')
pdnAdslLineExtObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1))
pdnAdslLineExtAfnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 2))
pdnAdslLineExtNtfyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 3))
pdnAdslLineExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 1)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineTransAtucCap"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineTransAtucConfig"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineTransAtucActual"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLinePowerManagementConfig"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSpectrumProfile"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLinePmMode"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineL0Time"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineL2Time"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineL2Atpr"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineLdsf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineExtGroup = pdnAdslLineExtGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineExtGroup.setDescription('A collection of objects providing extended configuration information about an ADSL Line.')
pdnAdslLineSpectrumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 2)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSpectrumProfileRowStatus"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSpectrumModeSpecificPsdProfile"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSpectrumAtucCarMaskProfile"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSpectrumAturCarMaskProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineSpectrumGroup = pdnAdslLineSpectrumGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSpectrumGroup.setDescription('A collection of objects providing transmission spectrum and power spectral density related profiles.')
pdnAdslModeSpecificPsdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 3)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslModeSpecificPsdConfAdslPsdConfProfile"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslModeSpecificPsdConfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslModeSpecificPsdGroup = pdnAdslModeSpecificPsdGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslModeSpecificPsdGroup.setDescription('A collection of objects providing a mapping from an entry into the ADSL Line Spectrum Table to a profile defining a specific set of power spectral density settings.')
pdnAdslPsdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 4)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslPsdConfRowStatus"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslPsdConfAtucMaxNomPsd"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslPsdConfAturMaxNomPsd"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslPsdConfAtucMaxNomAtp"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslPsdConfAturMaxNomAtp"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslPsdConfAtucMaxRxPwr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslPsdGroup = pdnAdslPsdGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslPsdGroup.setDescription('A collection of objects providing specific power spectral density settings based on a named profile.')
pdnAdslCarMaskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 5)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslCarMaskRowStatus"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslCarMaskSubCarrierStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslCarMaskGroup = pdnAdslCarMaskGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslCarMaskGroup.setDescription('A collection of objects providing the ability for an administrator to mask out specific subcarriers in the downstream or the upstream direction.')
pdnAdslLineL2AtprtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 6)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineL2Atprt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineL2AtprtGroup = pdnAdslLineL2AtprtGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineL2AtprtGroup.setDescription('Total maximum aggregate transmit power reduction in L2.')
pdnAdslLineStatusLineAtnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 7)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAtucLineAtn"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAturLineAtn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineStatusLineAtnGroup = pdnAdslLineStatusLineAtnGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusLineAtnGroup.setDescription('Line attenuation during diagnostic mode and initialization.')
pdnAdslLineStatusSignalAtnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 8)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAtucSignalAtn"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAturSignalAtn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineStatusSignalAtnGroup = pdnAdslLineStatusSignalAtnGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusSignalAtnGroup.setDescription('Line attenuation during showtime.')
pdnAdslLineStatusSnrMgnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 9)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAtucSnrMgn"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAturSnrMgn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineStatusSnrMgnGroup = pdnAdslLineStatusSnrMgnGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusSnrMgnGroup.setDescription('SNR margin ratio.')
pdnAdslLineStatusMaxattainableLineRateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 10)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAtucMaxAttainableLineRate"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAturMaxAttainableLineRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineStatusMaxattainableLineRateGroup = pdnAdslLineStatusMaxattainableLineRateGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusMaxattainableLineRateGroup.setDescription('Current maximum attainable net data rate.')
pdnAdslLineStatusActAtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 11)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAtucActAtp"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineStatusAturActAtp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineStatusActAtpGroup = pdnAdslLineStatusActAtpGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineStatusActAtpGroup.setDescription('Actual aggregate transmit power.')
pdnAdslLineSubCarStatusHlinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 12)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAtucHlinPs"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAturHlinPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineSubCarStatusHlinGroup = pdnAdslLineSubCarStatusHlinGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusHlinGroup.setDescription('Linear representation of the Channel Characteristics function for a subcarrier on a line.')
pdnAdslLineSubCarStatusHlogMtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 13)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAtucHlogMt"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAturHlogMt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineSubCarStatusHlogMtGroup = pdnAdslLineSubCarStatusHlogMtGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusHlogMtGroup.setDescription('Logarithmic measurement time of the Channel Characteristics function for a subcarrier on a line.')
pdnAdslLineSubCarStatusQlnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 14)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAtucQlnPs"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAturQlnPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineSubCarStatusQlnGroup = pdnAdslLineSubCarStatusQlnGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusQlnGroup.setDescription('Quiet Line Noise for a subcarrier on a line.')
pdnAdslLineSubCarStatusSnrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 15)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAtucSnrPs"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAturSnrPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineSubCarStatusSnrGroup = pdnAdslLineSubCarStatusSnrGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusSnrGroup.setDescription('Signal-to-Noise Ratio for a subcarrier on a line.')
pdnAdslLineSubCarStatusBitsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 16)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAtucBitsPs"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAturBitsPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineSubCarStatusBitsGroup = pdnAdslLineSubCarStatusBitsGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusBitsGroup.setDescription('Bits allocation for a subcarrier on a line.')
pdnAdslLineSubCarStatusHlogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 24, 3, 2, 1, 17)).setObjects(("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAtucHlogPs"), ("PDN-ADSL-LINE-EXT-MIB", "pdnAdslLineSubCarAturHlogPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAdslLineSubCarStatusHlogGroup = pdnAdslLineSubCarStatusHlogGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAdslLineSubCarStatusHlogGroup.setDescription('Logarithmic representation of the Channel Characteristics function for a subcarrier on a line.')
mibBuilder.exportSymbols("PDN-ADSL-LINE-EXT-MIB", pdnAdslPsdConfEntry=pdnAdslPsdConfEntry, pdnAdslLineTransAtucCap=pdnAdslLineTransAtucCap, pdnAdslLineSpectrumAturCarMaskProfile=pdnAdslLineSpectrumAturCarMaskProfile, pdnAdslPsdConfProfileName=pdnAdslPsdConfProfileName, pdnAdslLineCarrierIndex=pdnAdslLineCarrierIndex, pdnAdslLineExtCompliances=pdnAdslLineExtCompliances, pdnAdslLineExtNotifications=pdnAdslLineExtNotifications, pdnAdslLineL2Atprt=pdnAdslLineL2Atprt, pdnAdslLineSubCarAturHlinPs=pdnAdslLineSubCarAturHlinPs, pdnAdslLineStatusActAtpGroup=pdnAdslLineStatusActAtpGroup, pdnAdslLineSubCarStatusHlogMtGroup=pdnAdslLineSubCarStatusHlogMtGroup, pdnAdslLineStatusTable=pdnAdslLineStatusTable, pdnAdslLineStatusSnrMgnGroup=pdnAdslLineStatusSnrMgnGroup, pdnAdslLineTransAtucConfig=pdnAdslLineTransAtucConfig, pdnAdslLineStatusLineAtnGroup=pdnAdslLineStatusLineAtnGroup, pdnAdslLineSubCarAtucSnrPs=pdnAdslLineSubCarAtucSnrPs, pdnAdslLineExtGroups=pdnAdslLineExtGroups, pdnAdslModeSpecificPsdConfRowStatus=pdnAdslModeSpecificPsdConfRowStatus, pdnAdslLinePowerManagementConfig=pdnAdslLinePowerManagementConfig, pdnAdslLineStatusAturMaxAttainableLineRate=pdnAdslLineStatusAturMaxAttainableLineRate, pdnAdslCarMaskGroup=pdnAdslCarMaskGroup, pdnAdslLineExtMIB=pdnAdslLineExtMIB, pdnAdslLineSubCarStatusTable=pdnAdslLineSubCarStatusTable, pdnAdslLineSpectrumProfileTable=pdnAdslLineSpectrumProfileTable, pdnAdslLineSubCarAtucQlnPs=pdnAdslLineSubCarAtucQlnPs, pdnAdslModeSpecificPsdGroup=pdnAdslModeSpecificPsdGroup, pdnAdslLineSubCarAtucHlogMt=pdnAdslLineSubCarAtucHlogMt, pdnAdslPsdConfAtucMaxNomAtp=pdnAdslPsdConfAtucMaxNomAtp, pdnAdslLineL0Time=pdnAdslLineL0Time, pdnAdslLineStatusAtucSignalAtn=pdnAdslLineStatusAtucSignalAtn, pdnAdslLineStatusAtucSnrMgn=pdnAdslLineStatusAtucSnrMgn, pdnAdslLineSpectrumAtucCarMaskProfile=pdnAdslLineSpectrumAtucCarMaskProfile, pdnAdslLineStatusAtucActAtp=pdnAdslLineStatusAtucActAtp, pdnAdslModeSpecificPsdConfAdslPsdConfProfile=pdnAdslModeSpecificPsdConfAdslPsdConfProfile, pdnAdslLineSubCarAtucHlinPs=pdnAdslLineSubCarAtucHlinPs, pdnAdslLineSubCarStatusBitsGroup=pdnAdslLineSubCarStatusBitsGroup, pdnAdslLineSpectrumProfile=pdnAdslLineSpectrumProfile, pdnAdslModeSpecificPsdConfEntry=pdnAdslModeSpecificPsdConfEntry, pdnAdslPsdConfAtucMaxNomPsd=pdnAdslPsdConfAtucMaxNomPsd, pdnAdslLineSubCarAturSnrPs=pdnAdslLineSubCarAturSnrPs, pdnAdslLineExtGroup=pdnAdslLineExtGroup, pdnAdslLineSubCarAturHlogMt=pdnAdslLineSubCarAturHlogMt, pdnAdslLineSubCarStatusHlinGroup=pdnAdslLineSubCarStatusHlinGroup, pdnAdslLineExtMIBCompliance=pdnAdslLineExtMIBCompliance, pdnAdslLineSubCarAturHlogPs=pdnAdslLineSubCarAturHlogPs, pdnAdslLineSubCarStatusEntry=pdnAdslLineSubCarStatusEntry, pdnAdslLineL2Time=pdnAdslLineL2Time, pdnAdslLineStatusAturSignalAtn=pdnAdslLineStatusAturSignalAtn, PYSNMP_MODULE_ID=pdnAdslLineExtMIB, pdnAdslLineStatusAtucMaxAttainableLineRate=pdnAdslLineStatusAtucMaxAttainableLineRate, pdnAdslLineSpectrumProfileRowStatus=pdnAdslLineSpectrumProfileRowStatus, pdnAdslLineSpectrumGroup=pdnAdslLineSpectrumGroup, pdnAdslLineSubCarStatusQlnGroup=pdnAdslLineSubCarStatusQlnGroup, pdnAdslCarMaskProfileName=pdnAdslCarMaskProfileName, pdnAdslLineExtTable=pdnAdslLineExtTable, pdnAdslLineSubCarStatusHlogGroup=pdnAdslLineSubCarStatusHlogGroup, pdnAdslLineExtObjects=pdnAdslLineExtObjects, pdnAdslModeSpecificPsdConfProfileName=pdnAdslModeSpecificPsdConfProfileName, pdnAdslLineStatusMaxattainableLineRateGroup=pdnAdslLineStatusMaxattainableLineRateGroup, pdnAdslLineExtNtfyGroups=pdnAdslLineExtNtfyGroups, pdnAdslLineExtAFNs=pdnAdslLineExtAFNs, pdnAdslLinePmMode=pdnAdslLinePmMode, pdnAdslLineL2Atpr=pdnAdslLineL2Atpr, pdnAdslModeSpecificPsdConfTable=pdnAdslModeSpecificPsdConfTable, pdnAdslLineSubCarAtucBitsPs=pdnAdslLineSubCarAtucBitsPs, pdnAdslModeSpecificPsdConfAdslMode=pdnAdslModeSpecificPsdConfAdslMode, pdnAdslLineExtObjGroups=pdnAdslLineExtObjGroups, pdnAdslPsdConfTable=pdnAdslPsdConfTable, pdnAdslPsdConfAtucMaxRxPwr=pdnAdslPsdConfAtucMaxRxPwr, pdnAdslPsdGroup=pdnAdslPsdGroup, pdnAdslLineL2AtprtGroup=pdnAdslLineL2AtprtGroup, pdnAdslLineStatusAturLineAtn=pdnAdslLineStatusAturLineAtn, pdnAdslCarMaskTable=pdnAdslCarMaskTable, pdnAdslLineStatusEntry=pdnAdslLineStatusEntry, pdnAdslCarMaskEntry=pdnAdslCarMaskEntry, pdnAdslCarMaskRowStatus=pdnAdslCarMaskRowStatus, pdnAdslPsdConfRowStatus=pdnAdslPsdConfRowStatus, pdnAdslLineExtConformance=pdnAdslLineExtConformance, pdnAdslLineSubCarAtucHlogPs=pdnAdslLineSubCarAtucHlogPs, pdnAdslCarMaskSubCarrierIndex=pdnAdslCarMaskSubCarrierIndex, pdnAdslLineSpectrumModeSpecificPsdProfile=pdnAdslLineSpectrumModeSpecificPsdProfile, pdnAdslPsdConfAturMaxNomAtp=pdnAdslPsdConfAturMaxNomAtp, pdnAdslLineSubCarStatusSnrGroup=pdnAdslLineSubCarStatusSnrGroup, pdnAdslLineStatusAtucLineAtn=pdnAdslLineStatusAtucLineAtn, pdnAdslLineSubCarAturQlnPs=pdnAdslLineSubCarAturQlnPs, pdnAdslLineStatusAturActAtp=pdnAdslLineStatusAturActAtp, pdnAdslLineSpectrumProfileName=pdnAdslLineSpectrumProfileName, pdnAdslLineSpectrumProfileEntry=pdnAdslLineSpectrumProfileEntry, pdnAdslCarMaskSubCarrierStatus=pdnAdslCarMaskSubCarrierStatus, pdnAdslLineSubCarAturBitsPs=pdnAdslLineSubCarAturBitsPs, pdnAdslLineExtAfnGroups=pdnAdslLineExtAfnGroups, pdnAdslLineStatusSignalAtnGroup=pdnAdslLineStatusSignalAtnGroup, pdnAdslPsdConfAturMaxNomPsd=pdnAdslPsdConfAturMaxNomPsd, pdnAdslLineExtEntry=pdnAdslLineExtEntry, pdnAdslLineStatusAturSnrMgn=pdnAdslLineStatusAturSnrMgn, pdnAdslLineLdsf=pdnAdslLineLdsf, pdnAdslLineTransAtucActual=pdnAdslLineTransAtucActual, PdnAdslTransmissionModeType=PdnAdslTransmissionModeType)
