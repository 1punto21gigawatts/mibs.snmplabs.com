#
# PySNMP MIB module HH3C-FC-FLOGIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-FC-FLOGIN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
Hh3cFcClassOfServices, Hh3cFcNameId, Hh3cFcRxMTU, Hh3cFcAddressId, Hh3cFcBbCredit = mibBuilder.importSymbols("HH3C-FC-TC-MIB", "Hh3cFcClassOfServices", "Hh3cFcNameId", "Hh3cFcRxMTU", "Hh3cFcAddressId", "Hh3cFcBbCredit")
hh3cSan, hh3cVsanIndex = mibBuilder.importSymbols("HH3C-VSAN-MIB", "hh3cSan", "hh3cVsanIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, Integer32, Counter64, IpAddress, TimeTicks, iso, ModuleIdentity, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "Integer32", "Counter64", "IpAddress", "TimeTicks", "iso", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "MibIdentifier")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
hh3cFcFLogin = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3))
hh3cFcFLogin.setRevisions(('2013-02-27 11:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cFcFLogin.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hh3cFcFLogin.setLastUpdated('201302271100Z')
if mibBuilder.loadTexts: hh3cFcFLogin.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cFcFLogin.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cFcFLogin.setDescription('This MIB module is for representing fabric login information.')
hh3cFcFLoginMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1))
hh3cFcFLoginTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1), )
if mibBuilder.loadTexts: hh3cFcFLoginTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginTable.setDescription('A table of Fibre Channel related service parameters used to represent the fabric login information in accord with each Nx_Port attached to a particular Fibre Channel port in a particular VSAN (Virtual Storage Area Network). Each entry is created by a fabric switch when an Nx_Port successfully logged in to it explicitly or implicitly, and is deleted when the port logged out.')
hh3cFcFLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VSAN-MIB", "hh3cVsanIndex"), (0, "HH3C-FC-FLOGIN-MIB", "hh3cFcFLoginIndex"))
if mibBuilder.loadTexts: hh3cFcFLoginEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginEntry.setDescription('A group of Fibre Channel related service parameters used to represent fabric login information of a specific Nx_Port.')
hh3cFcFLoginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 1), Hh3cFcAddressId())
if mibBuilder.loadTexts: hh3cFcFLoginIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginIndex.setDescription('The index of current fabric login entry. The Fibre Channel address identifier is used to identify the associated Nx_Port of this entry.')
hh3cFcFLoginPortNodeWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 2), Hh3cFcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginPortNodeWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginPortNodeWWN.setDescription('The world wide name of the Remote Node to which the logged-in Nx_Port belongs.')
hh3cFcFLoginPortWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 3), Hh3cFcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginPortWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginPortWWN.setDescription('The world wide name of the logged-in Nx_Port.')
hh3cFcFLoginPortFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 4), Hh3cFcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginPortFcId.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginPortFcId.setDescription('The Fibre Channel address identifier that has been assigned by the fabric to the logged-in Nx_Port.')
hh3cFcFLoginRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 5), Hh3cFcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginRxBbCredit.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginRxBbCredit.setDescription('The maximum number of buffers available for a recipient to receive frames from the logged-in Nx_Port in Class2, Class3. The object is used in the buffer-to-buffer flow control from the logged-in Nx_Port to Fx_Port.')
hh3cFcFLoginTxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 6), Hh3cFcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginTxBbCredit.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginTxBbCredit.setDescription('The total number of buffers available for a sender to transmit frames to the logged-in Nx_Port in Class2, Class3. The object is used in the buffer-to-buffer flow control from Fx_Port to the logged-in Nx_Port.')
hh3cFcFLoginClass2RxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 7), Hh3cFcRxMTU()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginClass2RxMTU.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginClass2RxMTU.setDescription('The object specifies the Maximum Transmission Unit of an Fibre Channel frame that can be received by the logged-in Nx_Port in Class 2 service.')
hh3cFcFLoginClass3RxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 8), Hh3cFcRxMTU()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginClass3RxMTU.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginClass3RxMTU.setDescription('The object specifies the Maximum Transmission Unit of an Fibre Channel frame that can be received by the logged-in Nx_Port in Class 3 service.')
hh3cFcFLoginSuppClassRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 9), Hh3cFcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginSuppClassRequested.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginSuppClassRequested.setDescription('The object indicating the supported Classes that the logged-in Nx_Port has requested.')
hh3cFcFLoginClass2ReqAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginClass2ReqAgreed.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginClass2ReqAgreed.setDescription("The object indicating whether the Fx_Port has agreed to support Class 2 delivery that the logged-in Nx_Port requested. It's meaningful only when the Class 2 delivery has been requested.")
hh3cFcFLoginClass3ReqAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 127, 3, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcFLoginClass3ReqAgreed.setStatus('current')
if mibBuilder.loadTexts: hh3cFcFLoginClass3ReqAgreed.setDescription("The object indicating whether the Fx_Port has agreed to support Class 3 delivery that the logged-in Nx_Port requested. It's meaningful only when the Class 3 delivery has been requested.")
mibBuilder.exportSymbols("HH3C-FC-FLOGIN-MIB", hh3cFcFLoginTable=hh3cFcFLoginTable, hh3cFcFLoginClass2ReqAgreed=hh3cFcFLoginClass2ReqAgreed, hh3cFcFLogin=hh3cFcFLogin, hh3cFcFLoginEntry=hh3cFcFLoginEntry, hh3cFcFLoginClass2RxMTU=hh3cFcFLoginClass2RxMTU, hh3cFcFLoginPortWWN=hh3cFcFLoginPortWWN, hh3cFcFLoginRxBbCredit=hh3cFcFLoginRxBbCredit, hh3cFcFLoginClass3RxMTU=hh3cFcFLoginClass3RxMTU, hh3cFcFLoginIndex=hh3cFcFLoginIndex, hh3cFcFLoginSuppClassRequested=hh3cFcFLoginSuppClassRequested, hh3cFcFLoginClass3ReqAgreed=hh3cFcFLoginClass3ReqAgreed, hh3cFcFLoginPortFcId=hh3cFcFLoginPortFcId, hh3cFcFLoginPortNodeWWN=hh3cFcFLoginPortNodeWWN, hh3cFcFLoginTxBbCredit=hh3cFcFLoginTxBbCredit, PYSNMP_MODULE_ID=hh3cFcFLogin, hh3cFcFLoginMibObjects=hh3cFcFLoginMibObjects)
