#
# PySNMP MIB module MIB-Dell-10892 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MIB-DELL-10892
# Produced by pysmi-0.3.4 at Wed May  1 14:11:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ObjectIdentity, ModuleIdentity, MibIdentifier, NotificationType, enterprises, Gauge32, Unsigned32, IpAddress, Bits, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "NotificationType", "enterprises", "Gauge32", "Unsigned32", "IpAddress", "Bits", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server3 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892))
baseboardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1))
mIBVersionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1))
systemManagementSoftwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100))
systemStateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200))
chassisInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300))
operatingSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400))
systemResourceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500))
powerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600))
thermalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700))
userSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 800))
remoteFlashBIOSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000))
deviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100))
slotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200))
memoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300))
biosSetUpControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400))
lraGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500))
cooGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600))
clusterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800))
bmcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900))
alertGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000))
class DellString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 64)

class DellSecurityString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 255)

class DellCostofOwnershipString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 64)

class DellMACAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DellObjectRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class DellUnsigned8BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class DellUnsigned16BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DellUnsigned32BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class DellSigned32BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483647, 2147483647)

class DellBoolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1)

class DellUnsigned64BitRange(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class DellDateName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(25, 25)
    fixedLength = 25

class DellStateCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("enableAndNotReadyCapable", 6))

class DellStateSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("enabledAndNotReady", 6))

class DellProbeCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("upperNonCriticalThresholdSetCapable", 1), ("lowerNonCriticalThresholdSetCapable", 2), ("upperNonCriticalThresholdDefaultCapable", 4), ("lowerNonCriticalThresholdDefaultCapable", 8))

class DellStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6))

class DellStatusRedundancy(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("full", 3), ("degraded", 4), ("lost", 5), ("notRedundant", 6), ("redundancyOffline", 7))

class DellStatusProbe(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCriticalUpper", 4), ("criticalUpper", 5), ("nonRecoverableUpper", 6), ("nonCriticalLower", 7), ("criticalLower", 8), ("nonRecoverableLower", 9), ("failed", 10))

mIBMajorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1, 1), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMajorVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mIBMajorVersionNumber.setDescription('0001.0001 This attribute defines the major version number for the version of this MIB supported by the systems management software.')
mIBMinorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1, 2), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMinorVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mIBMinorVersionNumber.setDescription('0001.0002 This attribute defines the minor version number for the version of this MIB supported by the systems management software.')
mIBMaintenanceVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1, 3), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMaintenanceVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mIBMaintenanceVersionNumber.setDescription('0001.0003 This attribute defines the maintenance version number for the version of this MIB supported by the systems management software.')
class SMSSupportedTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))
    namedValues = NamedValues(("supportsSNMP", 1), ("supportsDMI", 2), ("supportsSNMPandDMI", 3), ("supportsCIMOM", 4), ("supportsSNMPandCIMOM", 5), ("supportsSNMPandDMIandCIMOM", 7))

class SMSFeatureFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("webOneToOneManagementPreferred", 1))

class SMSSNMPAgentFeatureFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("supportsSparseTables", 1))

systemManagementSoftwareName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 1), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareName.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareName.setDescription('0100.0001 This attribute defines the product name of the systems management software.')
systemManagementSoftwareVersionNumberName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 2), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareVersionNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareVersionNumberName.setDescription('0100.0002 This attribute defines the version number of the instrumentation component of the systems management software.')
systemManagementSoftwareBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 3), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareBuildNumber.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareBuildNumber.setDescription('0100.0003 This attribute defines the build number of the instrumentation component of the systems management software.')
systemManagementSoftwareDescriptionName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 4), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareDescriptionName.setDescription('0100.0004 This attribute defines the description of the systems management software.')
systemManagementSoftwareSupportedProtocol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 5), SMSSupportedTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareSupportedProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareSupportedProtocol.setDescription('0100.0005 This attribute defines the protocols supported by the instrumentation component of the systems management software.')
systemManagementSoftwarePreferredProtocol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 6), SMSSupportedTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwarePreferredProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwarePreferredProtocol.setDescription('0100.0006 This attribute defines the protocol preferred by the instrumentation component of the systems management software.')
systemManagementSoftwareUpdateLevelName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareUpdateLevelName.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareUpdateLevelName.setDescription('0100.0007 This attribute defines the update level of the instrumentation component of the systems management software.')
systemManagementSoftwareURLName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareURLName.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareURLName.setDescription('0100.0008 This attribute defines the Universal Resource Locator (URL) of the systems management software.')
systemManagementSoftwareLanguageName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareLanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareLanguageName.setDescription('0100.0009 This attribute defines the language of the systems management software.')
systemManagementSoftwareGlobalVersionName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 10), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareGlobalVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareGlobalVersionName.setDescription('0100.0010 This attribute defines the global version of the systems management software.')
systemManagementSoftwareFeatureFlags = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 11), SMSFeatureFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareFeatureFlags.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareFeatureFlags.setDescription('0100.0011 This attribute defines the features of the systems management software. If the value is zero, none of the features are enabled. Note: This attribute is a bit field, so the value returned may be a combination of the bit masks defined in SMSFeatureFlags.')
systemManagementSoftwareSNMPAgentFeatureFlags = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 12), SMSSNMPAgentFeatureFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareSNMPAgentFeatureFlags.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareSNMPAgentFeatureFlags.setDescription('0100.0012 This attribute defines the features of the SNMP agent software provided by the operating system. If the value is zero, none of the features are enabled. Note: This attribute is a bit field, so the value returned may be a combination of the bit masks defined in SMSSNMPAgentFeatureFlags.')
systemManagementSoftwareManufacturerName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 100, 13), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemManagementSoftwareManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: systemManagementSoftwareManufacturerName.setDescription('0100.0013 This attribute defines the manufacturer of the systems management software.')
systemStateTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10), )
if mibBuilder.loadTexts: systemStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTable.setDescription('0200.0010 This object defines the System State Table.')
systemStateTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemStatechassisIndex"))
if mibBuilder.loadTexts: systemStateTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTableEntry.setDescription('0200.0010.0001 This object defines the System State Table Entry.')
systemStatechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatechassisIndex.setDescription('0200.0010.0001.0001 This attribute defines the index (one based) of this chassis.')
systemStateGlobalSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 2), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateGlobalSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateGlobalSystemStatus.setDescription('0200.0010.0001.0002 This attribute defines the global system status of all chassis being monitored by the systems management software.')
systemStateChassisState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisState.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisState.setDescription('0200.0010.0001.0003 This attribute defines the state settings of this chassis.')
systemStateChassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 4), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisStatus.setDescription('0200.0010.0001.0004 This attribute defines the status of this chassis.')
systemStatePowerUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStateDetails.setDescription('0200.0010.0001.0005 This attribute lists the state settings of each power unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of a power unit. The first byte returned represents the state settings of the first power unit, etc. The bytes have the same definition type as DellStateSettings.')
systemStatePowerUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 6), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStatusRedundancy.setDescription('0200.0010.0001.0006 This attribute defines the combined redundancy status of all power units of this chassis.')
systemStatePowerUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStatusDetails.setDescription('0200.0010.0001.0007 This attribute lists the redundancy status of each power unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the redundancy status of a power unit. The first byte returned represents the redundancy status of the first power unit, etc. The bytes have the same definition type as DellStatusRedundancy.')
systemStatePowerSupplyStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerSupplyStateDetails.setDescription('0200.0010.0001.0008 This attribute lists the state settings of each power supply of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of a power supply. The first byte returned represents the state settings of the first power supply, etc. The bytes have the same definition type as DellStateSettings.')
systemStatePowerSupplyStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 9), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerSupplyStatusCombined.setDescription('0200.0010.0001.0009 This attribute defines the combined status of all power supplies of this chassis.')
systemStatePowerSupplyStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerSupplyStatusDetails.setDescription('0200.0010.0001.0010 This attribute lists the status of each power supply of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a power supply. The first byte returned represents the status of the first power supply, etc. The bytes have the same definition type as DellStatus.')
systemStateVoltageStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateVoltageStateDetails.setDescription('0200.0010.0001.0011 This attribute lists the state settings of each voltage probe of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of a voltage probe. The first byte returned represents the state settings of the first voltage probe, etc. The bytes have the same definition type as DellStateSettings.')
systemStateVoltageStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 12), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateVoltageStatusCombined.setDescription('0200.0010.0001.0012 This attribute defines the combined status of all voltage probes of this chassis.')
systemStateVoltageStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateVoltageStatusDetails.setDescription('0200.0010.0001.0013 This attribute lists the status of each voltage probe of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a voltage probe. The first byte returned represents the status of the first voltage probe, etc. The bytes have the same definition type as DellStatus.')
systemStateAmperageStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateAmperageStateDetails.setDescription('0200.0010.0001.0014 This attribute lists the state settings of each amperage probe of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of an amperage probe. The first byte returned represents the state settings of the first amperage probe, etc. The bytes have the same definition type as DellStateSettings.')
systemStateAmperageStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 15), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateAmperageStatusCombined.setDescription('0200.0010.0001.0015 This attribute defines the combined status of all amperage probes of this chassis.')
systemStateAmperageStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateAmperageStatusDetails.setDescription('0200.0010.0001.0016 This attribute lists the status of each amperage probe of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of an amperage probe. The first byte returned represents the status of the first amperage probe, etc. The bytes have the same definition type as DellStatus.')
systemStateCoolingUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStateDetails.setDescription('0200.0010.0001.0017 This attribute lists the state settings of each cooling unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of a cooling unit. The first byte returned represents the state settings of the first cooling unit, etc. The bytes have the same definition type as DellStateSettings.')
systemStateCoolingUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 18), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStatusRedundancy.setDescription('0200.0010.0001.0018 This attribute defines the combined redundancy status of all cooling units of this chassis.')
systemStateCoolingUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStatusDetails.setDescription('0200.0010.0001.0019 This attribute lists the redundancy status of each cooling unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the redundancy status of a cooling unit. The first byte returned represents the redundancy status of the first cooling unit, etc. The bytes have the same definition type as DellStatusRedundancy.')
systemStateCoolingDeviceStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingDeviceStateDetails.setDescription('0200.0010.0001.0020 This attribute lists the state settings of each cooling device of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of a cooling device. The first byte returned represents the state settings of the first cooling device, etc. The bytes have the same definition type as DellStateSettings.')
systemStateCoolingDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 21), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusCombined.setDescription('0200.0010.0001.0021 This attribute defines the combined status of all cooling devices of this chassis.')
systemStateCoolingDeviceStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusDetails.setDescription('0200.0010.0001.0022 This attribute lists the status of each cooling device of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a cooling device. The first byte returned represents the status of the first cooling device, etc. The bytes have the same definition type as DellStatus.')
systemStateTemperatureStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStateDetails.setDescription('0200.0010.0001.0023 This attribute lists the state settings of each temperature probe of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of a temperature probe. The first byte returned represents the state settings of the first temperature probe, etc. The bytes have the same definition type as DellStateSettings.')
systemStateTemperatureStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 24), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStatusCombined.setDescription('0200.0010.0001.0024 This attribute defines the combined status of all temperature probes of this chassis.')
systemStateTemperatureStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStatusDetails.setDescription('0200.0010.0001.0025 This attribute lists the status of each temperature probe of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a temperature probe. The first byte returned represents the status of the first temperature probe, etc. The bytes have the same definition type as DellStatus.')
systemStateMemoryDeviceStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateMemoryDeviceStateDetails.setDescription('0200.0010.0001.0026 This attribute lists the state settings of each memory device of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of a memory device. The first byte returned represents the state settings of the first memory device, etc. The bytes have the same definition type as DellStateSettings.')
systemStateMemoryDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 27), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusCombined.setDescription('0200.0010.0001.0027 This attribute defines the combined status of all memory devices of this chassis.')
systemStateMemoryDeviceStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusDetails.setDescription('0200.0010.0001.0028 This attribute lists the status of each memory device of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a memory device. The first byte returned represents the status of the first memory device, etc. The bytes have the same definition type as DellStatus.')
systemStateChassisIntrusionStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisIntrusionStateDetails.setDescription('0200.0010.0001.0029 This attribute lists the state settings of each intrusion detection device of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of an intrusion detection device. The first byte returned represents the state settings of the first intrusion detection device, etc. The bytes have the same definition type as DellStateSettings.')
systemStateChassisIntrusionStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 30), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusCombined.setDescription('0200.0010.0001.0030 This attribute defines the combined status of all intrusion detection devices of this chassis.')
systemStateChassisIntrusionStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusDetails.setDescription('0200.0010.0001.0031 This attribute lists the status of each intrusion detection device of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of an intrusion detection device. The first byte returned represents the status of the first intrusion detection device, etc. The bytes have the same definition type as DellStatus.')
systemStateACPowerSwitchStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateACPowerSwitchStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateACPowerSwitchStateDetails.setDescription('0200.0010.0001.0032 This attribute lists the state settings of each AC power switch of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of an AC power switch. The first byte returned represents the state settings of the first AC power switch, etc. The bytes have the same definition type as DellStateSettings.')
systemStateACPowerSwitchStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 33), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateACPowerSwitchStatusRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateACPowerSwitchStatusRedundancy.setDescription('0200.0010.0001.0033 This attribute defines the combined redundancy status of all AC power switches of this chassis.')
systemStateACPowerSwitchStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateACPowerSwitchStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateACPowerSwitchStatusDetails.setDescription('0200.0010.0001.0034 This attribute lists the redundancy status of each AC power switch of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the redundancy status of an AC power switch. The first byte returned represents the redundancy status of the first AC power switch, etc. The bytes have the same definition type as DellStatusRedundancy.')
systemStateACPowerCordStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateACPowerCordStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateACPowerCordStateDetails.setDescription('0200.0010.0001.0035 This attribute lists the state settings of each AC power cord associated with an AC power switch of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of an AC power cord. The first byte returned represents the state settings of the first AC power cord, etc. The bytes have the same definition type as DellStateSettings.')
systemStateACPowerCordStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 36), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateACPowerCordStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateACPowerCordStatusCombined.setDescription('0200.0010.0001.0036 This attribute defines the combined status of all AC power cords for any AC power switches of this chassis.')
systemStateACPowerCordStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateACPowerCordStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateACPowerCordStatusDetails.setDescription('0200.0010.0001.0037 This attribute lists the status of each AC power cord associated with an AC power switch of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of an AC power cord. The first byte returned represents the status of the first AC power cord, etc. The bytes have the same definition type as DellStatus.')
systemStateRedundantMemoryUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStateDetails.setDescription('0200.0010.0001.0038 This attribute lists the state settings of each redundant memory unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the state settings of a redundant memory unit. The first byte returned represents the state settings of the first redundant memory unit, etc. The bytes have the same definition type as DellStateSettings.')
systemStateRedundantMemoryUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 39), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStatusRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStatusRedundancy.setDescription('0200.0010.0001.0039 This attribute defines the combined redundancy status of all redundant memory units of this chassis.')
systemStateRedundantMemoryUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStatusDetails.setDescription('0200.0010.0001.0040 This attribute lists the redundancy status of each redundant memory unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the redundancy status of a redundant memory unit. The first byte returned represents the redundancy status of the first redundant memory unit, etc. The bytes have the same definition type as DellStatusRedundancy.')
systemStateEventLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 41), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateEventLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateEventLogStatus.setDescription('0200.0010.0001.0041 This attribute defines the overall status of the (ESM) event log of this chassis.')
systemStatePowerUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 42), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStatusCombined.setDescription('0200.0010.0001.0042 This attribute defines the combined status of all power units of this chassis.')
systemStatePowerUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStatusList.setDescription('0200.0010.0001.0043 This attribute lists the status of each power unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a power unit. The first byte returned represents the status of the first power unit, etc. The bytes have the same definition type as DellStatus.')
systemStateCoolingUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 44), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStatusCombined.setDescription('0200.0010.0001.0044 This attribute defines the combined status of all cooling units of this chassis.')
systemStateCoolingUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStatusList.setDescription('0200.0010.0001.0045 This attribute lists the status of each cooling unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a cooling unit. The first byte returned represents the status of the first cooling unit, etc. The bytes have the same definition type as DellStatus.')
systemStateACPowerSwitchStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 46), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateACPowerSwitchStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateACPowerSwitchStatusCombined.setDescription('0200.0010.0001.0046 This attribute defines the combined status of all AC power switches of this chassis.')
systemStateACPowerSwitchStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateACPowerSwitchStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateACPowerSwitchStatusList.setDescription('0200.0010.0001.0047 This attribute lists the status of each AC power switch of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of an AC power switch. The first byte returned represents the status of the first AC power switch, etc. The bytes have the same definition type as DellStatus.')
systemStateRedundantMemoryUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 48), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStatusCombined.setDescription('0200.0010.0001.0048 This attribute defines the combined status of all redundant memory units of this chassis.')
systemStateRedundantMemoryUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 49), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateRedundantMemoryUnitStatusList.setDescription('0200.0010.0001.0049 This attribute lists the status of each redundant memory unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a redundant memory unit. The first byte returned represents the status of the first redundant memory unit, etc. The bytes have the same definition type as DellStatus.')
systemStateProcessorDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 50), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusCombined.setDescription('0200.0010.0001.0050 This attribute defines the combined status of all processor devices of this chassis.')
systemStateProcessorDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusList.setDescription('0200.0010.0001.0051 This attribute lists the status of each processor device of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a processor device. The first byte returned represents the status of the first processor device, etc. The bytes have the same definition type as DellStatus.')
systemStateBatteryStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 52), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateBatteryStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateBatteryStatusCombined.setDescription('0200.0010.0001.0052 This attribute defines the combined status of all batteries of this chassis.')
systemStateBatteryStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateBatteryStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateBatteryStatusList.setDescription('0200.0010.0001.0053 This attribute lists the status of each battery of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a battery. The first byte returned represents the status of the first battery, etc. The bytes have the same definition type as DellStatus.')
systemStateSDCardUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 54), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardUnitStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateSDCardUnitStatusCombined.setDescription('0200.0010.0001.0054 This attribute defines the combined status of all SD Card units of this chassis.')
systemStateSDCardUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardUnitStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateSDCardUnitStatusList.setDescription('0200.0010.0001.0055 This attribute lists the status of each SD Card unit of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a SD Card unit. The first byte returned represents the status of the first SD Card unit, etc. The bytes have the same definition type as DellStatus.')
systemStateSDCardDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 56), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusCombined.setDescription('0200.0010.0001.0056 This attribute defines the combined status of all SD Card devices of this chassis.')
systemStateSDCardDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 200, 10, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusList.setDescription('0200.0010.0001.0057 This attribute lists the status of each SD Card device of this chassis. The results are returned as a binary octet string where each byte of the octet string represents the status of a SD Card device. The first byte returned represents the status of the first SD Card device, etc. The bytes have the same definition type as DellStatus.')
class DellStateCapabilitiesLogUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknown", 1), ("onlineCapable", 2), ("notReadyCapable", 4), ("resetCapable", 8))

class DellStateSettingsLogUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknown", 1), ("online", 2), ("notReady", 4), ("reset", 8))

class DellLogFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("raw", 1), ("ascii", 2), ("uniCode", 3))

class DellChassisType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("desktop", 3), ("lowProfileDesktop", 4), ("pizzaBox", 5), ("miniTower", 6), ("tower", 7), ("portable", 8), ("lapTop", 9), ("noteBook", 10), ("handHeld", 11), ("dockingStation", 12), ("allInOne", 13), ("subNoteBook", 14), ("spaceSaving", 15), ("lunchBox", 16), ("mainSystemChassis", 17), ("expansionChassis", 18), ("subChassis", 19), ("busExpansionChassis", 20), ("peripheralChassis", 21), ("raidChassis", 22), ("rackMountChassis", 23), ("sealedCasePC", 24), ("multiSystemChassis", 25))

class DellChassisSystemClass(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("workstationClass", 3), ("serverClass", 4), ("desktopClass", 5), ("portableClass", 6), ("netPCClass", 7), ("storageClass", 8))

class DellConnectionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4))
    namedValues = NamedValues(("unknown", 2), ("ok", 3), ("failure", 4))

class DellFanControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("lowSpeedCapable", 2), ("highSpeedCapable", 4), ("lowOrHighSpeedCapable", 6))

class DellFanControlSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("lowSpeed", 2), ("highSpeed", 4))

class DellLEDControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("alertOnErrorCapable", 2), ("alertOnWarningAndErrorCapable", 4), ("alertOnWarningOrErrorCapable", 6))

class DellLEDControlSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("alertOnError", 2), ("alertOnWarningAndError", 4))

class DellHDFaultLEDControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("resetCapable", 8))

class DellHDFaultLEDControlSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("reset", 8), ("resetAndEnable", 10))

class DellChassisIdentifyControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("identifyCapable", 8))

class DellChassisIdentifyControlSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("identifyChassis", 8), ("identifyChassisAndEnable", 10))

class DellHostControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7, 8, 15, 16, 32, 64, 128, 256, 512))
    namedValues = NamedValues(("manualRebootCapable", 1), ("manualPowerOFFCapable", 2), ("manualPowerCycleCapable", 4), ("manualAllExceptOperatingSystemShutdownCapable", 7), ("manualOperatingSystemShutdownCapable", 8), ("manualFullyCapable", 15), ("manualRebootWithOSShutdownCapable", 16), ("manualRebootWithoutOSShutdownCapable", 32), ("manualPowerOffWithOSShutdownCapable", 64), ("manualPowerOffWithoutOSShutdownCapable", 128), ("manualPowerCycleWithOSShutdownCapable", 256), ("manualPowerCycleWithoutOSShutdownCapable", 512))

class DellHostControlSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 9, 10, 12))
    namedValues = NamedValues(("manualReboot", 1), ("manualPowerOFF", 2), ("manualPowerCycle", 4), ("manualOperatingSystemShutdown", 8), ("manualOperatingSystemShutdownThenReboot", 9), ("manualOperatingSystemShutdownThenPowerOFF", 10), ("manualOperatingSystemShutdownThenPowerCycle", 12))

class DellWatchDogControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 27, 31))
    namedValues = NamedValues(("automaticRebootCapable", 1), ("automaticPowerCycleCapable", 2), ("automaticNotificationCapable", 4), ("automaticWatchDogTimerCapable", 8), ("automaticPowerOffCapable", 16), ("automaticAllExceptNotificationCapable", 27), ("automaticFullyCapable", 31))

class DellWatchControlSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("automaticRebootEnabled", 1), ("automaticPowerCycleEnabled", 2), ("automaticNotificationEnabled", 4), ("automaticPowerOffEnabled", 8))

class DellWatchDogTimerCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("type1Capable", 1), ("type2Capable", 2), ("type3Capable", 4))

class DellPowerButtonControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class DellPowerButtonControlSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 4))

class DellNMIButtonControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class DellNMIButtonControlSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 4))

class DellSystemProperties(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("energySmart", 1))

chassisInformationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10), )
if mibBuilder.loadTexts: chassisInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: chassisInformationTable.setDescription('0300.0010 This object defines the Chassis Information Table.')
chassisInformationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "chassisIndexChassisInformation"))
if mibBuilder.loadTexts: chassisInformationTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chassisInformationTableEntry.setDescription('0300.0010.0001 This object defines the Chassis Information Table Entry.')
chassisIndexChassisInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIndexChassisInformation.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIndexChassisInformation.setDescription('0300.0010.0001.0001 This attribute defines the index (one based) of the chassis.')
chassisStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 2), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: chassisStateCapabilities.setDescription('0300.0010.0001.0002 This attribute defines the state capabilities of the chassis.')
chassisStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: chassisStateSettings.setDescription('0300.0010.0001.0003 This attribute defines the state settings of the chassis.')
chassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 4), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chassisStatus.setDescription('0300.0010.0001.0004 This attribute defines the status of the chassis.')
chassisparentIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 5), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisparentIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: chassisparentIndexReference.setDescription('0300.0010.0001.0005 This attribute defines the index (one based) to the parent chassis of this chassis, if any.')
chassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 6), DellChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
if mibBuilder.loadTexts: chassisType.setDescription('0300.0010.0001.0006 This attribute defines the chassis type of the chassis.')
chassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisName.setDescription('0300.0010.0001.0007 This attribute defines the user-assigned name of the chassis.')
chassisManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisManufacturerName.setDescription('0300.0010.0001.0008 This attribute defines the name of the manufacturer of the chassis.')
chassisModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 9), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisModelName.setDescription('0300.0010.0001.0009 This attribute defines the system model type of the chassis.')
chassisAssetTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisAssetTagName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisAssetTagName.setDescription('0300.0010.0001.0010 This attribute defines the asset tag name of the chassis.')
chassisServiceTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisServiceTagName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisServiceTagName.setDescription('0300.0010.0001.0011 This attribute defines the service tag name of the chassis.')
chassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 12), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisID.setStatus('mandatory')
if mibBuilder.loadTexts: chassisID.setDescription('0300.0010.0001.0012 This attribute defines the system ID. If the value is 254 (0xFE), the attribute chassisIDExtension provides the system ID.')
chassisIDExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 13), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIDExtension.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIDExtension.setDescription('0300.0010.0001.0013 This attribute defines the system ID extension.')
chassisSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 14), DellChassisSystemClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemClass.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemClass.setDescription('0300.0010.0001.0014 This attribute defines the system class.')
chassisSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 15), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemName.setDescription('0300.0010.0001.0015 This attribute defines the host name of the system.')
chassisSystemBootDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 16), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemBootDateName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemBootDateName.setDescription('0300.0010.0001.0016 This attribute defines boot time of the system. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes and ss are the seconds. uuuuuu is the number of microseconds, and +fff or -fff is the offset from UTC in minutes.')
chassisSystemDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 17), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemDateName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemDateName.setDescription('0300.0010.0001.0017 This attribute defines the current time of the system. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes and ss are the seconds. uuuuuu is the number of microseconds, and +fff or -fff is the offset from UTC in minutes.')
chassisSystemLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 18), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemLocationName.setDescription('0300.0010.0001.0018 This attribute defines the location of the system.')
chassisSystemPrimaryUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 19), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemPrimaryUserName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemPrimaryUserName.setDescription('0300.0010.0001.0019 This attribute defines the name of the primary user of the system.')
chassisSystemUserPhoneNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 20), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemUserPhoneNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemUserPhoneNumberName.setDescription('0300.0010.0001.0020 This attribute defines the phone number of the primary user of the system.')
chassisConnectionStatusUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 21), DellConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisConnectionStatusUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisConnectionStatusUnique.setDescription('0300.0010.0001.0021 This attribute defines the status of the connection of the chassis.')
chassisFanControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 22), DellFanControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisFanControlCapabilitiesUnique.setDescription('0300.0010.0001.0022 This attribute defines the capabilities of the fan control hardware in the chassis.')
chassisFanControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 23), DellFanControlSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisFanControlSettingsUnique.setDescription('0300.0010.0001.0023 This attribute defines the reading and setting of the fan control hardware in the chassis.')
chassisLEDControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 24), DellLEDControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLEDControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisLEDControlCapabilitiesUnique.setDescription('0300.0010.0001.0024 This attribute defines the capabilities of the LED control hardware in the chassis.')
chassisLEDControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 25), DellLEDControlSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLEDControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisLEDControlSettingsUnique.setDescription('0300.0010.0001.0025 This attribute defines the reading and setting of the LED control hardware in the chassis.')
chassisHDFaultClearControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 26), DellHDFaultLEDControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisHDFaultClearControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: chassisHDFaultClearControlCapabilities.setDescription('0300.0010.0001.0026 This attribute defines if the chassis allows reset of the chassis hard disk drive fault LED.')
chassisHDFaultClearControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 27), DellHDFaultLEDControlSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisHDFaultClearControlSettings.setStatus('mandatory')
if mibBuilder.loadTexts: chassisHDFaultClearControlSettings.setDescription('0300.0010.0001.0027 This attribute allows reset of a chassis hard disk drive fault LED.')
chassisIdentifyFlashControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 28), DellChassisIdentifyControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIdentifyFlashControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIdentifyFlashControlCapabilities.setDescription('0300.0010.0001.0028 This attribute defines if the chassis allows setting of the chassis front panel LED to flash.')
chassisIdentifyFlashControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 29), DellChassisIdentifyControlSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIdentifyFlashControlSettings.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIdentifyFlashControlSettings.setDescription('0300.0010.0001.0029 This attribute setting causes the chassis front panel LED to flash.')
chassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 30), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLockPresent.setStatus('mandatory')
if mibBuilder.loadTexts: chassisLockPresent.setDescription('0300.0010.0001.0030 If true, a chassis lock is present on the chassis.')
chassishostControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 31), DellHostControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassishostControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassishostControlCapabilitiesUnique.setDescription('0300.0010.0001.031 This attribute defines the capabilities of the host control function.')
chassishostControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 32), DellHostControlSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassishostControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassishostControlSettingsUnique.setDescription('0300.0010.0001.0032 This attribute defines the settings of the host control function.')
chassiswatchDogControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 33), DellWatchDogControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassiswatchDogControlCapabilitiesUnique.setDescription('0300.0010.0001.0033 This attribute defines the capabilities of the watchdog control function.')
chassiswatchDogControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 34), DellWatchControlSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassiswatchDogControlSettingsUnique.setDescription('0300.0010.0001.0034 This attribute defines the settings of the watchdog control function.')
chassiswatchDogControlExpiryTimeCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 35), DellWatchDogTimerCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTimeCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTimeCapabilitiesUnique.setDescription('0300.0010.0001.0035 This attribute defines the capabilities of the watchdog control expiry timer function.')
chassiswatchDogControlExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 36), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTime.setStatus('mandatory')
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTime.setDescription('0300.0010.0001.0036 This attribute defines the current watchdog timer value in seconds.')
chassisallowSETCommandsfromSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 37), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisallowSETCommandsfromSNMP.setStatus('mandatory')
if mibBuilder.loadTexts: chassisallowSETCommandsfromSNMP.setDescription('0300.0010.0001.0037 This attribute defines if SNMP SET type commands are allowed or not.')
chassisPowerButtonControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 38), DellPowerButtonControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerButtonControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisPowerButtonControlCapabilitiesUnique.setDescription('0300.0010.0001.0038 This attribute defines the capabilities of the power button control hardware in the chassis.')
chassisPowerButtonControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 39), DellPowerButtonControlSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerButtonControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisPowerButtonControlSettingsUnique.setDescription('0300.0010.0001.0039 This attribute defines the reading and setting of the power button control hardware in the chassis.')
chassisResellerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisResellerName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisResellerName.setDescription('0300.0010.0001.0040 This attribute defines the name of the system reseller.')
chassisResellerContactInformationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisResellerContactInformationName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisResellerContactInformationName.setDescription('0300.0010.0001.0041 This attribute defines the contact information for the system reseller.')
chassisResellerProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisResellerProductName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisResellerProductName.setDescription("0300.0010.0001.0042 This attribute defines the reseller's product name for the system.")
chassisResellerSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 43), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisResellerSystemID.setStatus('mandatory')
if mibBuilder.loadTexts: chassisResellerSystemID.setDescription("0300.0010.0001.0043 This attribute defines the reseller's system ID for the system.")
chassisNMIButtonControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 44), DellNMIButtonControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNMIButtonControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisNMIButtonControlCapabilitiesUnique.setDescription('0300.0010.0001.0044 This attribute defines the capabilities of the NMI button control hardware in the chassis.')
chassisNMIButtonControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 45), DellNMIButtonControlSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNMIButtonControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisNMIButtonControlSettingsUnique.setDescription('0300.0010.0001.0045 This attribute defines the reading and setting of the NMI button control hardware in the chassis.')
chassisSystemProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 46), DellSystemProperties()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemProperties.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemProperties.setDescription('0300.0010.0001.0046 This attribute defines the properties of the system.')
chassisSystemRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 47), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemRevisionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemRevisionNumber.setDescription('0300.0010.0001.0047 This attribute defines the revision number of the system where zero indicates the original version of the system. The revision number is not available on all systems.')
chassisSystemRevisionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 48), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemRevisionName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemRevisionName.setDescription('0300.0010.0001.0048 This attribute defines the revision name of the system, if applicable.')
chassisExpressServiceCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 49), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisExpressServiceCodeName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisExpressServiceCodeName.setDescription('0300.0010.0001.0049 This attribute defines the Express Service Code of the chassis.')
chassisNodeIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 10, 1, 50), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNodeIDName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisNodeIDName.setDescription('0300.0010.0001.0050 This attribute defines the NodeID Code of the chassis,if applicable')
class DellUUIDType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("motherBoard", 3), ("systemBackPlane", 4), ("powerSupplyParallelingBoard", 5), ("peripheralBayBackPlane", 6), ("secondaryBackPlane", 7))

uUIDTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 20), )
if mibBuilder.loadTexts: uUIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: uUIDTable.setDescription('0300.0020 This object defines the Universal Unique ID (UUID) Table.')
uUIDTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "uUIDchassisIndex"), (0, "MIB-Dell-10892", "uUIDIndex"))
if mibBuilder.loadTexts: uUIDTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uUIDTableEntry.setDescription('0300.0020.0001 This object defines the UUID Table Entry.')
uUIDchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uUIDchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uUIDchassisIndex.setDescription('0300.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
uUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uUIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uUIDIndex.setDescription('0300.0020.0001.0002 This attribute defines the index (one based) of the UUID.')
uUIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 20, 1, 3), DellUUIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uUIDType.setStatus('mandatory')
if mibBuilder.loadTexts: uUIDType.setDescription('0300.0020.0001.0003 This attribute defines the type of the UUID.')
uUIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 20, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uUIDValue.setStatus('mandatory')
if mibBuilder.loadTexts: uUIDValue.setDescription('0300.0020.0001.0004 This attribute defines the value of the UUID.')
postLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 30), )
if mibBuilder.loadTexts: postLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: postLogTable.setDescription('0300.0030 This object defines the Power On Self Test (POST) Log Table.')
postLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "postLogchassisIndex"), (0, "MIB-Dell-10892", "postLogRecordIndex"))
if mibBuilder.loadTexts: postLogTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: postLogTableEntry.setDescription('0300.0030.0001 This object defines the POST Log Table Entry.')
postLogchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: postLogchassisIndex.setDescription('0300.0030.0001.0001 This attribute defines the index (one based) of the associated chassis.')
postLogRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 30, 1, 2), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogRecordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: postLogRecordIndex.setDescription('0300.0030.0001.0002 This attribute defines the index (one based) of the POST log record.')
postLogStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 30, 1, 3), DellStateCapabilitiesLogUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogStateCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: postLogStateCapabilitiesUnique.setDescription('0300.0030.0001.0003 This attribute defines the state capabilities of the object that is writing the POST log.')
postLogStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 30, 1, 4), DellStateSettingsLogUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: postLogStateSettingsUnique.setDescription('0300.0030.0001.0004 This attribute defines the state settings of the object that is writing the POST log.')
postLogRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 30, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogRecord.setStatus('mandatory')
if mibBuilder.loadTexts: postLogRecord.setDescription('0300.0030.0001.0005 This attribute defines the data of the POST log record.')
postLogFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 30, 1, 6), DellLogFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogFormat.setStatus('mandatory')
if mibBuilder.loadTexts: postLogFormat.setDescription('0300.0030.0001.0006 This attribute defines the format of the POST log record.')
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40), )
if mibBuilder.loadTexts: eventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogTable.setDescription('0300.0040 This object defines the Event (ESM) Log Table.')
eventLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1), ).setIndexNames((0, "MIB-Dell-10892", "eventLogchassisIndex"), (0, "MIB-Dell-10892", "eventLogRecordIndex"))
if mibBuilder.loadTexts: eventLogTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogTableEntry.setDescription('0300.0040.0001 This object defines the Event (ESM) Log Table Entry.')
eventLogchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogchassisIndex.setDescription('0300.0040.0001.0001 This attribute defines the index (one based) of the associated chassis.')
eventLogRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1, 2), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRecordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogRecordIndex.setDescription('0300.0040.0001.0002 This attribute defines the index (one based) of the event log record.')
eventLogStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1, 3), DellStateCapabilitiesLogUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogStateCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogStateCapabilitiesUnique.setDescription('0300.0040.0001.0003 This attribute defines the state capabilities of the object that is writing the event log.')
eventLogStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1, 4), DellStateSettingsLogUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogStateSettingsUnique.setDescription('0300.0040.0001.0004 This attribute defines the state settings of the object that is writing the event log.')
eventLogRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRecord.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogRecord.setDescription('0300.0040.0001.0005 This attribute defines the data of the event log record.')
eventLogFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1, 6), DellLogFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogFormat.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogFormat.setDescription('0300.0040.0001.0006 This attribute defines the format of the event log record.')
eventLogSeverityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1, 7), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSeverityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogSeverityStatus.setDescription('0300.0040.0001.0007 This attribute defines the severity of the event log record.')
eventLogDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 40, 1, 8), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDateName.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogDateName.setDescription('0300.0040.0001.0008 This attribute defines the date and time of the event log record.')
systemBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50), )
if mibBuilder.loadTexts: systemBIOSTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSTable.setDescription('0300.0050 This object defines the System BIOS Table.')
systemBIOSTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemBIOSchassisIndex"), (0, "MIB-Dell-10892", "systemBIOSIndex"))
if mibBuilder.loadTexts: systemBIOSTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSTableEntry.setDescription('0300.0050.0001 This object defines the System BIOS Table Entry.')
systemBIOSchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSchassisIndex.setDescription('0300.0050.0001.0001 This attribute defines the index (one based) of the associated chassis.')
systemBIOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSIndex.setDescription('0300.0050.0001.0002 This attribute defines the index (one based) of the system BIOS.')
systemBIOSStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSStateCapabilities.setDescription('0300.0050.0001.0003 This attribute defines the state capabilities of the system BIOS.')
systemBIOSStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSStateSettings.setDescription('0300.0050.0001.0004 This attribute defines the state settings of the system BIOS.')
systemBIOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSStatus.setDescription('0300.0050.0001.0005 This attribute defines the status of the system BIOS.')
systemBIOSSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 6), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSSize.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSSize.setDescription('0300.0050.0001.0006 This attribute defines the image size of the system BIOS in KBytes. Zero indicates size is unknown.')
systemBIOSReleaseDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 7), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSReleaseDateName.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSReleaseDateName.setDescription('0300.0050.0001.0007 This attribute defines the release date name of the system BIOS.')
systemBIOSVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSVersionName.setDescription('0300.0050.0001.0008 This attribute defines the version name of the system BIOS.')
systemBIOSStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 9), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSStartingAddress.setDescription('0300.0050.0001.0009 This attribute defines the starting address of the system BIOS. Zero indicates the starting address is unknown.')
systemBIOSEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 10), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSEndingAddress.setDescription('0300.0050.0001.0010 This attribute defines the ending address of the system BIOS. Zero indicates the starting address is unknown.')
systemBIOSManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 11), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSManufacturerName.setDescription('0300.0050.0001.0011 This attribute defines the name of the manufacturer of the system BIOS.')
systemBIOSCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 12), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSCharacteristics.setDescription('0300.0050.0001.0012 This attribute defines characteristics of the system BIOS. This attribute is a bit field where a bit has the meaning defined below when set to 1 (one). Bit 63 is the first bit in the value, and bit 0 is the last bit in the value. See the description of DellUnsigned64BitRange at the beginning of this file for more information on the format of the value. NOTE: Bits 48-63 need to be examined in the context of the system ID. The system ID is available in the attribute chassisID. If the value for chassisID is non-zero, bits 48-63 have the meaning defined below. Bit Position Meaning if Set -------- -------------- Bit 0 Reserved Bit 1 Reserved Bit 2 Unknown Bit 3 BIOS Characteristics Not Supported Bit 4 ISA is supported Bit 5 MCA is supported Bit 6 EISA is supported Bit 7 PCI is supported Bit 8 PC Card (PCMCIA) is supported Bit 9 Plug and Play is supported Bit 10 APM is supported Bit 11 BIOS is Upgradeable (Flash) Bit 12 BIOS shadowing is allowed Bit 13 VL-VESA is supported Bit 14 ESCD support is available Bit 15 Boot from CD is supported Bit 16 Selectable Boot is supported Bit 17 BIOS ROM is socketed Bit 18 Boot From PC Card (PCMCIA) is supported Bit 19 EDD (Enhanced Disk Drive) Specification is supported Bit 20 Int 13h - Japanese Floppy for NEC 9800 1.2mb (3.5 in, 1k Bytes/Sector, 360 RPM) is supported Bit 21 Int 13h - Japanese Floppy for Toshiba 1.2mb (3.5 in, 360 RPM) is supported Bit 22 Int 13h - 5.25 in / 360 KB Floppy Services are supported Bit 23 Int 13h - 5.25 in /1.2MB Floppy Services are supported Bit 24 Int 13h - 3.5 in / 720 KB Floppy Services are supported Bit 25 Int 13h - 3.5 in / 2.88 MB Floppy Services are supported Bit 26 Int 5h, Print Screen Service is supported Bit 27 Int 9h, 8042 Keyboard services are supported Bit 28 Int 14h, Serial Services are supported Bit 29 Int 17h, Printer Services are supported Bit 30 Int 10h, CGA/Mono Video Services are supported Bit 31 NEC PC-98 Bit 32-47 Reserved Bit 48 Built-in NIC supports Magic Packet Bit 49 System supports Wake-on-LAN Bit 50 System supports chassis intrusion Bit 51 Built-in NIC supports pattern-matching Bit 52 System BIOS supports a 7-character service tag Bit 53-63 Reserved')
systemBIOSCharacteristicsExt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 13), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSCharacteristicsExt1.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSCharacteristicsExt1.setDescription('0300.0050.0001.0013 This attribute defines additional characteristics of the system BIOS. This attribute is a bit field where a bit has the meaning defined below when set to 1 (one). Bit Position Meaning if Set -------- -------------- Bit 0 ACPI supported Bit 1 USB Legacy is supported Bit 2 AGP is supported Bit 3 I2O boot is supported Bit 4 LS-120 boot is supported Bit 5 ATAPI ZIP Drive boot is supported Bit 6 1394 boot is supported Bit 7 Smart Battery supported')
systemBIOSCharacteristicsExt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 50, 1, 14), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSCharacteristicsExt2.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSCharacteristicsExt2.setDescription('0300.0050.0001.0014 This attribute defines additional characteristics of the system BIOS. This attribute is a bit field where a bit has the meaning defined below when set to 1 (one). Bit Position Meaning if Set -------- -------------- Bit 0 BIOS Boot Specification supported Bit 1 Function key-initiated Network Service boot supported Bit 2 Targeted Content Distribution supported Bit 3-7 Reserved')
class DellFirmwareType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("systemBIOS", 3), ("embeddedSystemManagementController", 4), ("powerSupplyParallelingBoard", 5), ("systemBackPlane", 6), ("powerVault2XXSKernel", 7), ("powerVault2XXSApplication", 8), ("frontPanel", 9), ("baseboardManagementController", 10), ("hotPlugPCI", 11), ("sensorData", 12), ("peripheralBay", 13), ("secondaryBackPlane", 14), ("secondaryBackPlaneESM3And4", 15), ("rac", 16), ("iDRAC", 17), ("iDRAC6", 18), ("unifiedServerConfigurator", 19), ("lifecycleController", 20), ("iDRAC7", 21))

firmwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60), )
if mibBuilder.loadTexts: firmwareTable.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareTable.setDescription('0300.0060 This object defines the Firmware Table.')
firmwareTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1), ).setIndexNames((0, "MIB-Dell-10892", "firmwarechassisIndex"), (0, "MIB-Dell-10892", "firmwareIndex"))
if mibBuilder.loadTexts: firmwareTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareTableEntry.setDescription('0300.0060.0001 This object defines the Firmware Table Entry.')
firmwarechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwarechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: firmwarechassisIndex.setDescription('0300.0060.0001.0001 This attribute defines the index (one based) of the associated chassis.')
firmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareIndex.setDescription('0300.0060.0001.0002 This attribute defines the index (one based) of the firmware.')
firmwareStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareStateCapabilities.setDescription('0300.0060.0001.0003 This attribute defines the state capabilities of the firmware.')
firmwareStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareStateSettings.setDescription('0300.0060.0001.0004 This attribute defines the state settings of the firmware.')
firmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareStatus.setDescription('0300.0060.0001.0005 This attribute defines the status of the firmware.')
firmwareSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 6), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareSize.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareSize.setDescription('0300.0060.0001.0006 This attribute defines the image size of the firmware in KBytes. Zero indicates size is unknown.')
firmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 7), DellFirmwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareType.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareType.setDescription('0300.0060.0001.0007 This attribute defines the type of firmware.')
firmwareTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareTypeName.setDescription('0300.0060.0001.0008 This attribute defines the type name of the firmware.')
firmwareUpdateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 9), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateCapabilities.setDescription('0300.0060.0001.0009 This attribute defines the bitmap of supported methods for firmware update.')
firmwareDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareDateName.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareDateName.setDescription('0300.0060.0001.0010 This attribute defines the release date of the firmware.')
firmwareVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 60, 1, 11), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareVersionName.setDescription('0300.0060.0001.0011 This attribute defines the version of the firmware.')
class DellIntrusionReading(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("chassisNotBreached", 1), ("chassisBreached", 2), ("chassisBreachedPrior", 3), ("chassisBreachSensorFailure", 4))

class DellIntrusionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("chassisBreachDetectionWhenPowerON", 1), ("chassisBreachDetectionWhenPowerOFF", 2))

intrusionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70), )
if mibBuilder.loadTexts: intrusionTable.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionTable.setDescription('0300.0070 This object defines the Intrusion Table.')
intrusionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1), ).setIndexNames((0, "MIB-Dell-10892", "intrusionchassisIndex"), (0, "MIB-Dell-10892", "intrusionIndex"))
if mibBuilder.loadTexts: intrusionTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionTableEntry.setDescription('0300.0070.0001 This object defines the Intrusion Table Entry.')
intrusionchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionchassisIndex.setDescription('0300.0070.0001.0001 This attribute defines the index (one based) of the associated chassis.')
intrusionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionIndex.setDescription('0300.0070.0001.0002 This attribute defines the index (one based) of the intrusion sensor.')
intrusionStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionStateCapabilities.setDescription('0300.0070.0001.0003 This attribute defines the state capabilities of the intrusion sensor.')
intrusionStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionStateSettings.setDescription('0300.0070.0001.0004 This attribute defines the state settings of the intrusion sensor.')
intrusionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionStatus.setDescription('0300.0070.0001.0005 This attribute defines the status of the intrusion sensor.')
intrusionReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1, 6), DellIntrusionReading()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionReading.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionReading.setDescription('0300.0070.0001.0006 This attribute defines the reading of the intrusion sensor.')
intrusionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1, 7), DellIntrusionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionType.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionType.setDescription('0300.0070.0001.0007 This attribute defines the type of the intrusion sensor.')
intrusionLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 70, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionLocationName.setDescription('0300.0070.0001.0008 This attribute defines the location of the intrusion sensor.')
class DellBaseBoardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("serverBlade", 3), ("connectivitySwitch", 4), ("systemManagementModule", 5), ("processorModule", 6), ("ioModule", 7), ("memoryModule", 8), ("daughterBoard", 9), ("motherboard", 10), ("processorMemoryModule", 11), ("processorIOModule", 12), ("interconnectBoard", 13))

class DellBaseBoardFeatureFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("boardIsHostingBoard", 1), ("boardRequiresDaughterBoard", 2), ("boardIsRemovable", 4), ("boardIsReplaceable", 8), ("boardIsHotSwappable", 16))

baseBoardTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80), )
if mibBuilder.loadTexts: baseBoardTable.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardTable.setDescription('0300.0080 This object defines the Base Board Table.')
baseBoardTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1), ).setIndexNames((0, "MIB-Dell-10892", "baseBoardChassisIndex"), (0, "MIB-Dell-10892", "baseBoardIndex"))
if mibBuilder.loadTexts: baseBoardTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardTableEntry.setDescription('0300.0080.0001 This object defines the Base Board Table Entry.')
baseBoardChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardChassisIndex.setDescription('0300.0080.0001.0001 This attribute defines the index (one based) of the associated chassis.')
baseBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardIndex.setDescription('0300.0080.0001.0002 This attribute defines the index (one based) of the base board.')
baseBoardStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardStateCapabilities.setDescription('0300.0080.0001.0003 This attribute defines the state capabilities of the base board.')
baseBoardStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardStateSettings.setDescription('0300.0080.0001.0004 This attribute defines the state settings of the base board.')
baseBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardStatus.setDescription('0300.0080.0001.0005 This attribute defines the status of the base board.')
baseBoardFeatureFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 6), DellBaseBoardFeatureFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardFeatureFlags.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardFeatureFlags.setDescription('0300.0080.0001.0006 This attribute defines the features of the base board.')
baseBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 7), DellBaseBoardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardType.setDescription('0300.0080.0001.0007 This attribute defines the type of the base board.')
baseBoardTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardTypeName.setDescription('0300.0080.0001.0008 This attribute defines the type name of the base board.')
baseBoardLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 9), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardLocationName.setDescription('0300.0080.0001.0009 This attribute defines the location of the base board.')
baseBoardManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 10), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardManufacturerName.setDescription('0300.0080.0001.0010 This attribute defines the name of the manufacturer of the base board.')
baseBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 11), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardProductName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardProductName.setDescription('0300.0080.0001.0011 This attribute defines the product name of the base board.')
baseBoardVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 12), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardVersionName.setDescription('0300.0080.0001.0012 This attribute defines the version of the base board.')
baseBoardServiceTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 13), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardServiceTagName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardServiceTagName.setDescription('0300.0080.0001.0013 This attribute defines the service tag of the base board.')
baseBoardPiecePartIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 14), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardPiecePartIDName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardPiecePartIDName.setDescription('0300.0080.0001.0014 This attribute defines the Piece Part ID (PPID) of the base board.')
baseBoardAssetTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 15), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardAssetTagName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardAssetTagName.setDescription('0300.0080.0001.0015 This attribute defines the asset tag of the base board.')
baseBoardExpressServiceCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 300, 80, 1, 16), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBoardExpressServiceCodeName.setStatus('mandatory')
if mibBuilder.loadTexts: baseBoardExpressServiceCodeName.setDescription('0300.0080.0001.0016 This attribute defines the Express Service Code of the base board.')
operatingSystemTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10), )
if mibBuilder.loadTexts: operatingSystemTable.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemTable.setDescription('0400.0010 This object defines the Operating System Table.')
operatingSystemTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "operatingSystemchassisIndex"))
if mibBuilder.loadTexts: operatingSystemTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemTableEntry.setDescription('0400.0010.0001 This object defines the Operating System Table Entry.')
operatingSystemchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemchassisIndex.setDescription('0400.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
operatingSystemStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10, 1, 2), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemStateCapabilities.setDescription('0400.0010.0001.0002 This attribute defines the state capabilities of the operating system.')
operatingSystemStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemStateSettings.setDescription('0400.0010.0001.0003 This attribute defines the state settings of the operating system.')
operatingSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10, 1, 4), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemStatus.setDescription('0400.0010.0001.0004 This attribute defines the status of the operating system.')
operatingSystemIsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10, 1, 5), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemIsPrimary.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemIsPrimary.setDescription('0400.0010.0001.0005 This attribute defines if this operating system is the primary operating system or not.')
operatingSystemOperatingSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemOperatingSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemOperatingSystemName.setDescription('0400.0010.0001.0006 This attribute defines the name of the operating system.')
operatingSystemOperatingSystemVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemOperatingSystemVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemOperatingSystemVersionName.setDescription('0400.0010.0001.0007 This attribute defines the version of the operating system.')
operatingSystemMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20), )
if mibBuilder.loadTexts: operatingSystemMemoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryTable.setDescription('0400.0020 This object defines the Operating System Memory Table.')
operatingSystemMemoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "operatingSystemMemorychassisIndex"))
if mibBuilder.loadTexts: operatingSystemMemoryTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryTableEntry.setDescription('0400.0020.0001 This object defines the Operating System Memory Table Entry.')
operatingSystemMemorychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemorychassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemorychassisIndex.setDescription('0400.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
operatingSystemMemoryStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 2), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryStateCapabilities.setDescription('0400.0020.0001.0002 This attribute defines the state capabilities of the operating system memory.')
operatingSystemMemoryStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryStateSettings.setDescription('0400.0020.0001.0003 This attribute defines the state settings of the operating system memory.')
operatingSystemMemoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 4), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryStatus.setDescription('0400.0020.0001.0004 This attribute defines the status of the operating system memory.')
operatingSystemMemoryTotalPhysicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 5), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryTotalPhysicalSize.setStatus('deprecated')
if mibBuilder.loadTexts: operatingSystemMemoryTotalPhysicalSize.setDescription('0400.0020.0001.0005 This attribute defines the total physical memory for the operating system memory in KBytes. **NOTE: This attribute is deprecated and replaced by operatingSystemMemoryExtTotalPhysicalSize.')
operatingSystemMemoryAvailablePhysicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 6), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryAvailablePhysicalSize.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryAvailablePhysicalSize.setDescription('0400.0020.0001.0006 This attribute defines the available physical memory for the operating system memory in KBytes.')
operatingSystemMemoryTotalPageFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 7), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryTotalPageFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryTotalPageFileSize.setDescription('0400.0020.0001.0007 This attribute defines the total page file memory for the operating system memory in KBytes.')
operatingSystemMemoryAvailablePageFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 8), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryAvailablePageFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryAvailablePageFileSize.setDescription('0400.0020.0001.0008 This attribute defines the available page file memory for the operating system memory in KBytes.')
operatingSystemMemoryTotalVirtualSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 9), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryTotalVirtualSize.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryTotalVirtualSize.setDescription('0400.0020.0001.0009 This attribute defines the total virtual memory for the operating system memory in KBytes.')
operatingSystemMemoryAvailableVirtualSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 10), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryAvailableVirtualSize.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryAvailableVirtualSize.setDescription('0400.0020.0001.0010 This attribute defines the available virtual memory for the operating system memory in KBytes.')
operatingSystemMemoryExtTotalPhysicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 400, 20, 1, 11), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemMemoryExtTotalPhysicalSize.setStatus('mandatory')
if mibBuilder.loadTexts: operatingSystemMemoryExtTotalPhysicalSize.setDescription('0400.0020.0001.0011 This attribute defines the total physical memory for the operating system memory in KBytes. **NOTE: This attribute is replaces operatingSystemMemoryTotalPhysicalSize.')
class DellSystemResourceMapType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("typeOne", 3))

systemResourceMapTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 10), )
if mibBuilder.loadTexts: systemResourceMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapTable.setDescription('0500.0010 This object defines the System Resource Map Table.')
systemResourceMapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemResourceMapchassisIndex"), (0, "MIB-Dell-10892", "systemResourceMapIndex"))
if mibBuilder.loadTexts: systemResourceMapTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapTableEntry.setDescription('0500.0010.0001 This object defines the System Resource Map Table Entry.')
systemResourceMapchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMapchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapchassisIndex.setDescription('0500.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
systemResourceMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapIndex.setDescription('0500.0010.0001.0002 This attribute defines the index (one based) of the system resource map.')
systemResourceMapStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 10, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMapStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapStateCapabilities.setDescription('0500.0010.0001.0003 This attribute defines the state capabilities of the system resource map.')
systemResourceMapStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 10, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMapStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapStateSettings.setDescription('0500.0010.0001.0004 This attribute defines the state settings of the system resource map.')
systemResourceMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 10, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapStatus.setDescription('0500.0010.0001.0005 This attribute defines the status of the system resource map.')
systemResourceMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 10, 1, 6), DellSystemResourceMapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMapType.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapType.setDescription('0500.0010.0001.0006 This attribute defines the type of the system resource map.')
class DellResourceOwnerInterfaceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("typeIsOther", 1), ("typeIsUnknown", 2), ("typeIsInternal", 3), ("typeIsISA", 4), ("typeIsEISA", 5), ("typeIsMCA", 6), ("typeIsTurboChannel", 7), ("typeIsPCI", 8))

systemResourceOwnerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20), )
if mibBuilder.loadTexts: systemResourceOwnerTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerTable.setDescription('0500.0020 This object defines the System Resource Owner Table.')
systemResourceOwnerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemResourceOwnerchassisIndex"), (0, "MIB-Dell-10892", "systemResourceOwnerIndex"))
if mibBuilder.loadTexts: systemResourceOwnerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerTableEntry.setDescription('0500.0020.0001 This object defines the System Resource Owner Table Entry.')
systemResourceOwnerchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceOwnerchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerchassisIndex.setDescription('0500.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
systemResourceOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceOwnerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerIndex.setDescription('0500.0020.0001.0002 This attribute defines the index of (one based) of the system resource owner.')
systemResourceOwnerStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceOwnerStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerStateCapabilities.setDescription('0500.0020.0001.0003 This attribute defines the state capabilities of the system resource owner.')
systemResourceOwnerStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceOwnerStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerStateSettings.setDescription('0500.0020.0001.0004 This attribute defines the state settings of the system resource owner.')
systemResourceOwnerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceOwnerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerStatus.setDescription('0500.0020.0001.0005 This attribute defines the status of the system resource owner.')
systemResourceOwnerInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 6), DellResourceOwnerInterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceOwnerInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerInterfaceType.setDescription('0500.0020.0001.0006 This attribute defines the interface type of the system resource owner.')
systemResourceMapIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 7), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMapIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMapIndexReference.setDescription('0500.0020.0001.0007 This attribute defines the index to the associated system resource map.')
systemResourceOwnerDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceOwnerDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerDescriptionName.setDescription('0500.0020.0001.0008 This attribute defines the description of the system resource owner.')
systemResourceOwnerInterfaceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 20, 1, 9), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceOwnerInterfaceInstance.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceOwnerInterfaceInstance.setDescription('0500.0020.0001.0009 This attribute defines the index to the associated system resource owner interface type.')
class DellResourceShareDisposition(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("shareIsOther", 1), ("shareIsUnknown", 2), ("shareIsDeviceExclusive", 3), ("shareIsDriverExclusive", 4), ("shareIsShared", 5))

systemResourceIOPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30), )
if mibBuilder.loadTexts: systemResourceIOPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortTable.setDescription('0500.0030 This object defines the System Resource I/O Port Table.')
systemResourceIOPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemResourceIOPortchassisIndex"), (0, "MIB-Dell-10892", "systemResourceIOPortIndex"))
if mibBuilder.loadTexts: systemResourceIOPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortTableEntry.setDescription('0500.0030.0001 This object defines the System Resource I/O Port Table Entry.')
systemResourceIOPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortchassisIndex.setDescription('0500.0030.0001.0001 This attribute defines the index (one based) of the associated chassis.')
systemResourceIOPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortIndex.setDescription('0500.0030.0001.0002 This attribute defines the index (one based) of the system resource I/O port.')
systemResourceIOPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortStateCapabilities.setDescription('0500.0030.0001.0003 This attribute defines the state capabilities of the system resource I/O port.')
systemResourceIOPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortStateSettings.setDescription('0500.0030.0001.0004 This attribute defines the state settings of the system resource I/O port.')
systemResourceIOPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortStatus.setDescription('0500.0030.0001.0005 This attribute defines the status of the system resource I/O port.')
systemResourceIOPortOwnerIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortOwnerIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortOwnerIndexReference.setDescription('0500.0030.0001.0006 This attribute defines the index to the associated system resource owner for this system resource I/O port.')
systemResourceIOPortShareDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 7), DellResourceShareDisposition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortShareDisposition.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortShareDisposition.setDescription('0500.0030.0001.0007 This attribute defines the share disposition of the system resource I/O port.')
systemResourceIOPortStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 8), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortStartingAddress.setDescription('0500.0030.0001.0008 This attribute defines the 64-bit starting address of the system resource I/O port.')
systemResourceIOPortEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 30, 1, 9), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOPortEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceIOPortEndingAddress.setDescription('0500.0030.0001.0009 This attribute defines the 64-bit ending address of the system resource I/O port.')
class DellResourceMemoryFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 16))
    namedValues = NamedValues(("memoryIsReadOnly", 1), ("memoryIsWriteOnly", 2), ("memoryIsReadAndWrite", 3), ("memoryIsPreFetchable", 4), ("memoryIsCombinedWritable", 8), ("memoryIsF24", 16))

systemResourceMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40), )
if mibBuilder.loadTexts: systemResourceMemoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryTable.setDescription('0500.0040 This object defines the System Resource Memory Table.')
systemResourceMemoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemResourceMemorychassisIndex"), (0, "MIB-Dell-10892", "systemResourceMemoryIndex"))
if mibBuilder.loadTexts: systemResourceMemoryTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryTableEntry.setDescription('0500.0040.0001 This object defines the System Resource Memory Table Entry.')
systemResourceMemorychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemorychassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemorychassisIndex.setDescription('0500.0040.0001.0001 This attribute defines the index (one based) of the associated chassis.')
systemResourceMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryIndex.setDescription('0500.0040.0001.0002 This attribute defines the index (one based) of the system resource memory.')
systemResourceMemoryStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryStateCapabilities.setDescription('0500.0040.0001.0003 This attribute defines the state capabilities of the system resource memory.')
systemResourceMemoryStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryStateSettings.setDescription('0500.0040.0001.0004 This attribute defines the state settings of the system resource memory.')
systemResourceMemoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryStatus.setDescription('0500.0040.0001.0005 This attribute defines the status of the system resource memory.')
systemResourceMemoryOwnerIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryOwnerIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryOwnerIndexReference.setDescription('0500.0040.0001.0006 This attribute defines the index to the associated system resource owner for this system resource memory.')
systemResourceMemoryShareDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 7), DellResourceShareDisposition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryShareDisposition.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryShareDisposition.setDescription('0500.0040.0001.0007 This attribute defines the share disposition of the system resource memory.')
systemResourceMemoryStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 8), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryStartingAddress.setDescription('0500.0040.0001.0008 This attribute defines the 64-bit starting address of the system resource memory.')
systemResourceMemoryEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 9), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryEndingAddress.setDescription('0500.0040.0001.0009 This attribute defines the 64-bit ending address of the system resource memory.')
systemResourceMemoryFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 40, 1, 10), DellResourceMemoryFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryFlags.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceMemoryFlags.setDescription('0500.0040.0001.0010 This attribute defines the permission flags of the system resource memory.')
class DellResourceInterruptType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("interruptIsLevelSensitive", 1), ("interruptIsLatched", 2))

class DellResourceInterruptTrigger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("interruptIsActiveWhenLow", 1), ("interruptIsActiveWhenHigh", 2))

systemResourceInterruptTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50), )
if mibBuilder.loadTexts: systemResourceInterruptTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptTable.setDescription('0500.0050 This object defines the System Resource Interrupts Table.')
systemResourceInterruptTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemResourceInterruptchassisIndex"), (0, "MIB-Dell-10892", "systemResourceInterruptIndex"))
if mibBuilder.loadTexts: systemResourceInterruptTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptTableEntry.setDescription('0500.0050.0001 This object defines the System Resource Interrupts Table Entry.')
systemResourceInterruptchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptchassisIndex.setDescription('0500.0050.0001.0001 This attribute defines the index (one based) of the associated chassis.')
systemResourceInterruptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptIndex.setDescription('0500.0050.0001.0002 This attribute defines the index (one based) of the system resource interrupt.')
systemResourceInterruptStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptStateCapabilities.setDescription('0500.0050.0001.0003 This attribute defines the state capabilities of the system resource interrupt.')
systemResourceInterruptStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptStateSettings.setDescription('0500.0050.0001.0004 This attribute defines the state settings of the system resource interrupt.')
systemResourceInterruptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptStatus.setDescription('0500.0050.0001.0005 This attribute defines the status of the system resource interrupt.')
systemResourceInterruptOwnerIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptOwnerIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptOwnerIndexReference.setDescription('0500.0050.0001.0006 This attribute defines the index to the associated system resource owner for this system resource interrupt.')
systemResourceInterruptShareDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 7), DellResourceShareDisposition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptShareDisposition.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptShareDisposition.setDescription('0500.0050.0001.0007 This attribute defines the share disposition of the system resource interrupt.')
systemResourceInterruptLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 8), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptLevel.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptLevel.setDescription('0500.0050.0001.0008 This attribute defines the interrupt request level (IRQ) of the system resource interrupt.')
systemResourceInterruptType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 9), DellResourceInterruptType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptType.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptType.setDescription('0500.0050.0001.0009 This attribute defines the interrupt type of the system resource interrupt.')
systemResourceInterruptTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 50, 1, 10), DellResourceInterruptTrigger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceInterruptTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceInterruptTrigger.setDescription('0500.0050.0001.0010 This attribute defines the interrupt trigger of the system resource interrupt.')
class DellResourceDMATransferWidth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("dmaTransferWidthIsOther", 1), ("dmaTransferWidthIsunknown", 2), ("dmaTransferWidthIs8Bits", 3), ("dmaTransferWidthIs16Bits", 4), ("dmaTransferWidthIs32Bits", 5), ("dmaTransferWidthIs64Bits", 6), ("dmaTransferWidthIs128Bits", 7))

class DellResourceDMABusMaster(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("dmaIsOther", 1), ("dmaIsUnknown", 2), ("dmaIsNotABusmaster", 3), ("dmaIsABusmaster", 4))

systemResourceDMATable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60), )
if mibBuilder.loadTexts: systemResourceDMATable.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMATable.setDescription('0500.0060 This object defines the System Resource DMA Table.')
systemResourceDMATableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemResourceDMAchassisIndex"), (0, "MIB-Dell-10892", "systemResourceDMAIndex"))
if mibBuilder.loadTexts: systemResourceDMATableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMATableEntry.setDescription('0500.0060.0001 This object defines the System Resource DMA Table Entry.')
systemResourceDMAchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAchassisIndex.setDescription('0500.0060.0001.0001 This attribute defines the index (one based) of the associated chassis.')
systemResourceDMAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAIndex.setDescription('0500.0060.0001.0002 This attribute defines the index (one based) of the system resource DMA.')
systemResourceDMAStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAStateCapabilities.setDescription('0500.0060.0001.0003 This attribute defines the state capabilities of the system resource DMA.')
systemResourceDMAStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAStateSettings.setDescription('0500.0060.0001.0004 This attribute defines the state settings of the system resource DMA.')
systemResourceDMAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAStatus.setDescription('0500.0060.0001.0005 This attribute defines the status of the system resource DMA.')
systemResourceDMAOwnerIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAOwnerIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAOwnerIndexReference.setDescription('0500.0060.0001.0006 This attribute defines the index to the associated system resource owner for this system resource DMA.')
systemResourceDMAShareDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 7), DellResourceShareDisposition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAShareDisposition.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAShareDisposition.setDescription('0500.0060.0001.0007 This attribute defines the share disposition of the system resource DMA.')
systemResourceDMAMaximumTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 8), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAMaximumTransferSize.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMAMaximumTransferSize.setDescription('0500.0060.0001.0008 This attribute defines the maximum size of a memory transfer in bytes for the system resource DMA.')
systemResourceDMATransferWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 9), DellResourceDMATransferWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMATransferWidth.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMATransferWidth.setDescription('0500.0060.0001.0009 This attribute defines the tranfer width of the system resource DMA.')
systemResourceDMABusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 500, 60, 1, 10), DellResourceDMABusMaster()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMABusMaster.setStatus('mandatory')
if mibBuilder.loadTexts: systemResourceDMABusMaster.setDescription('0500.0060.0001.0010 This attribute defines the bus master capabilities of the system resource DMA.')
powerUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10), )
if mibBuilder.loadTexts: powerUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitTable.setDescription('0600.0010 This object defines the Power Unit Table.')
powerUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "powerUnitchassisIndex"), (0, "MIB-Dell-10892", "powerUnitIndex"))
if mibBuilder.loadTexts: powerUnitTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitTableEntry.setDescription('0600.0010.0001 This object defines the Power Unit Table Entry.')
powerUnitchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitchassisIndex.setDescription('0600.0010.0001.0001 This attribute defines the index (one based) of the chassis.')
powerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitIndex.setDescription('0600.0010.0001.0002 This attribute defines the index (one based) of the power unit.')
powerUnitStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitStateCapabilities.setDescription('0600.0010.0001.0003 This attribute defines the state capabilities of the power unit.')
powerUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitStateSettings.setDescription('0600.0010.0001.0004 This attribute defines the state settings of the power unit.')
powerUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1, 5), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitRedundancyStatus.setDescription('0600.0010.0001.0005 This attribute defines the redundancy status of the power unit.')
powerSupplyCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyCountForRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyCountForRedundancy.setDescription('0600.0010.0001.0006 This attribute defines the total number of power supplies required for this power unit to have full redundancy.')
powerUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitName.setDescription('0600.0010.0001.0007 This attribute defines the name of the power unit.')
powerUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 10, 1, 8), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitStatus.setDescription('0600.0010.0001.0008 This attribute defines the status of the power unit.')
class DellPowerSupplyStateCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("onlineCapable", 2), ("notReadyCapable", 4))

class DellPowerSupplyStateSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 16, 32, 64, 66, 128, 130, 210, 242))
    namedValues = NamedValues(("unknown", 1), ("onLine", 2), ("notReady", 4), ("fanFailure", 8), ("onlineAndFanFailure", 10), ("powerSupplyIsON", 16), ("powerSupplyIsOK", 32), ("acSwitchIsON", 64), ("onlineandAcSwitchIsON", 66), ("acPowerIsON", 128), ("onlineAndAcPowerIsON", 130), ("onlineAndPredictiveFailure", 210), ("acPowerAndSwitchAreOnPowerSupplyIsOnIsOkAndOnline", 242))

class DellPowerSupplyType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("powerSupplyTypeIsOther", 1), ("powerSupplyTypeIsUnknown", 2), ("powerSupplyTypeIsLinear", 3), ("powerSupplyTypeIsSwitching", 4), ("powerSupplyTypeIsBattery", 5), ("powerSupplyTypeIsUPS", 6), ("powerSupplyTypeIsConverter", 7), ("powerSupplyTypeIsRegulator", 8), ("powerSupplyTypeIsAC", 9), ("powerSupplyTypeIsDC", 10), ("powerSupplyTypeIsVRM", 11))

class DellPowerSupplySensorState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))
    namedValues = NamedValues(("presenceDetected", 1), ("psFailureDetected", 2), ("predictiveFailure", 4), ("psACLost", 8), ("acLostOrOutOfRange", 16), ("acOutOfRangeButPresent", 32), ("configurationError", 64))

class DellPowerSupplyConfigurationErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vendorMismatch", 1), ("revisionMismatch", 2), ("processorMissing", 3))

powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('0600.0012 This object defines the Power Supply Table.')
powerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1), ).setIndexNames((0, "MIB-Dell-10892", "powerSupplychassisIndex"), (0, "MIB-Dell-10892", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyTableEntry.setDescription('0600.0012.0001 This object defines the Power Supply Table Entry.')
powerSupplychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplychassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplychassisIndex.setDescription('0600.0012.0001.0001 This attribute defines the index (one based) of the chassis.')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyIndex.setDescription('0600.0012.0001.0002 This attribute defines the index (one based) of the power supply.')
powerSupplyStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 3), DellPowerSupplyStateCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStateCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyStateCapabilitiesUnique.setDescription('0600.0012.0001.0003 This attribute defines the state capabilities of the power supply.')
powerSupplyStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 4), DellPowerSupplyStateSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyStateSettingsUnique.setDescription('0600.0012.0001.0004 This attribute defines the state settings of the power supply.')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyStatus.setDescription('0600.0012.0001.0005 This attribute defines the status of the power supply.')
powerSupplyOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 6), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyOutputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyOutputWatts.setDescription('0600.0012.0001.0006 This attribute defines the maximum sustained output wattage of the power supply (in tenths of Watts).')
powerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 7), DellPowerSupplyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyType.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyType.setDescription('0600.0012.0001.0007 This attribute defines the type of the power supply.')
powerSupplyLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyLocationName.setDescription('0600.0012.0001.0008 This attribute defines the location of the power supply.')
powerSupplyInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 9), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyInputVoltage.setDescription('0600.0012.0001.0009 This attribute defines the input voltage to the power supply (in Volts).')
powerSupplypowerUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 10), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplypowerUnitIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplypowerUnitIndexReference.setDescription('0600.0012.0001.0010 This attribute defines the index to the associated power unit if the power supply is part of a power unit.')
powerSupplySensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 11), DellPowerSupplySensorState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplySensorState.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplySensorState.setDescription('0600.0012.0001.0011 This attribute defines the state reported by the power supply sensor. This attribute supplements the attribute powerSupplyStateSettingsUnique.')
powerSupplyConfigurationErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 12), DellPowerSupplyConfigurationErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConfigurationErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConfigurationErrorType.setDescription('0600.0012.0001.0012 This attribute defines the type of configuration error reported by the power supply sensor. When the configurationError bit is on in the value for the attribute powerSupplySensorState, a value is returned for this attribute; otherwise, a value is not returned for this attribute.')
powerSupplyPowerMonitorCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 13), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPowerMonitorCapable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyPowerMonitorCapable.setDescription('0600.0012.0001.0013 This attribute defines a boolean value that reports whether the power supply is capable of monitoring power consumption.')
powerSupplyRatedInputWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 12, 1, 14), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRatedInputWattage.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyRatedInputWattage.setDescription('0600.0012.0001.0014 This attribute defines the rated input wattage of the power supply (in tenths of Watts).')
class DellVoltageType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("voltageProbeTypeIsOther", 1), ("voltageProbeTypeIsUnknown", 2), ("voltageProbeTypeIs1Point5Volt", 3), ("voltageProbeTypeIs3Point3Volt", 4), ("voltageProbeTypeIs5Volt", 5), ("voltageProbeTypeIsMinus5Volt", 6), ("voltageProbeTypeIs12Volt", 7), ("voltageProbeTypeIsMinus12Volt", 8), ("voltageProbeTypeIsIO", 9), ("voltageProbeTypeIsCore", 10), ("voltageProbeTypeIsFLEA", 11), ("voltageProbeTypeIsBattery", 12), ("voltageProbeTypeIsTerminator", 13), ("voltageProbeTypeIs2Point5Volt", 14), ("voltageProbeTypeIsGTL", 15), ("voltageProbeTypeIsDiscrete", 16))

class DellVoltageDiscreteReading(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("voltageIsGood", 1), ("voltageIsBad", 2))

voltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20), )
if mibBuilder.loadTexts: voltageProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeTable.setDescription('0600.0020 This object defines the Voltage Probe Table.')
voltageProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "voltageProbechassisIndex"), (0, "MIB-Dell-10892", "voltageProbeIndex"))
if mibBuilder.loadTexts: voltageProbeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeTableEntry.setDescription('0600.0020.001 This object defines the Voltage Probe Table Entry.')
voltageProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbechassisIndex.setDescription('0600.0020.0001.0001 This attribute defines the index (one based) of the chassis.')
voltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeIndex.setDescription('0600.0020.0001.0002 This attribute defines the index (one based) of the voltage probe.')
voltageProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeStateCapabilities.setDescription('0600.0020.0001.0003 This attribute defines the state capabilities of the voltage probe.')
voltageProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeStateSettings.setDescription('0600.0020.0001.0004 This attribute defines the state settings of the voltage probe.')
voltageProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 5), DellStatusProbe()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeStatus.setDescription('0600.0020.0001.0005 This attribute defines the probe status of the voltage probe.')
voltageProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 6), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeReading.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeReading.setDescription('0600.0020.0001.0006 This attribute defines the reading for a voltage probe of type other than voltageProbeTypeIsDiscrete. When the value for voltageProbeType is other than voltageProbeTypeIsDiscrete, the value returned for this attribute is the voltage that the probe is reading in millivolts. When the value for voltageProbeType is voltageProbeTypeIsDiscrete, a value is not returned for this attribute.')
voltageProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 7), DellVoltageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeType.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeType.setDescription('0600.0020.0001.0007 This attribute defines the type of the voltage probe.')
voltageProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLocationName.setDescription('0600.0020.0001.0008 This attribute defines the location name of the voltage probe.')
voltageProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 9), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeUpperNonRecoverableThreshold.setDescription('0600.0020.0001.0009 This attribute defines the upper nonrecoverable threshold of the voltage probe. The value is an integer representing the voltage of the threshold in millivolts.')
voltageProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 10), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeUpperCriticalThreshold.setDescription('0600.0020.0001.0010 This attribute defines the upper critical threshold of the voltage probe. The value is an integer representing the voltage of the threshold in millivolts.')
voltageProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 11), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeUpperNonCriticalThreshold.setDescription('0600.0020.0001.0011 This attribute defines the upper noncritical threshold of the voltage probe. The value is an integer representing the voltage of the threshold in millivolts.')
voltageProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 12), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLowerNonCriticalThreshold.setDescription('0600.0020.0001.0012 This attribute defines the lower noncritical threshold of the voltage probe. The value is an integer representing the voltage of the threshold in millivolts.')
voltageProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 13), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLowerCriticalThreshold.setDescription('0600.0020.0001.0013 This attribute defines the lower critical threshold of the voltage probe. The value is an integer representing the voltage of the threshold in millivolts.')
voltageProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 14), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLowerNonRecoverableThreshold.setDescription('0600.0020.0001.0014 This attribute defines the lower nonrecoverable threshold of the voltage probe. The value is an integer representing the voltage of the threshold in millivolts.')
voltageProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 15), DellProbeCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeProbeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeProbeCapabilities.setDescription('0600.0020.0001.0015 This attribute defines the probe capabilities of the voltage probe.')
voltageProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 20, 1, 16), DellVoltageDiscreteReading()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeDiscreteReading.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeDiscreteReading.setDescription('0600.0020.0001.0016 This attribute defines the reading for a voltage probe of type voltageProbeTypeIsDiscrete. When the value for voltageProbeType is other than voltageProbeTypeIsDiscrete, a value is not returned for this attribute. When the value for voltageProbeType is voltageProbeTypeIsDiscrete, the value returned for this attribute is the discrete reading for the probe.')
class DellAmperageProbeType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26))
    namedValues = NamedValues(("amperageProbeTypeIsOther", 1), ("amperageProbeTypeIsUnknown", 2), ("amperageProbeTypeIs1Point5Volt", 3), ("amperageProbeTypeIs3Point3volt", 4), ("amperageProbeTypeIs5Volt", 5), ("amperageProbeTypeIsMinus5Volt", 6), ("amperageProbeTypeIs12Volt", 7), ("amperageProbeTypeIsMinus12Volt", 8), ("amperageProbeTypeIsIO", 9), ("amperageProbeTypeIsCore", 10), ("amperageProbeTypeIsFLEA", 11), ("amperageProbeTypeIsBattery", 12), ("amperageProbeTypeIsTerminator", 13), ("amperageProbeTypeIs2Point5Volt", 14), ("amperageProbeTypeIsGTL", 15), ("amperageProbeTypeIsDiscrete", 16), ("amperageProbeTypeIsPowerSupplyAmps", 23), ("amperageProbeTypeIsPowerSupplyWatts", 24), ("amperageProbeTypeIsSystemAmps", 25), ("amperageProbeTypeIsSystemWatts", 26))

class DellAmperageDiscreteReading(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("amperageIsGood", 1), ("amperageIsBad", 2))

amperageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30), )
if mibBuilder.loadTexts: amperageProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeTable.setDescription('0600.0030 This object defines the Amperage Probe Table.')
amperageProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "amperageProbechassisIndex"), (0, "MIB-Dell-10892", "amperageProbeIndex"))
if mibBuilder.loadTexts: amperageProbeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeTableEntry.setDescription('0600.0030.0001 This object defines the Amperage Probe Table Entry.')
amperageProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbechassisIndex.setDescription('0600.0030.0001.0001 This attribute defines the index (one based) of the chassis.')
amperageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeIndex.setDescription('0600.0030.0001.0002 This attribute defines the index (one based) of the amperage probe.')
amperageProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeStateCapabilities.setDescription('0600.0030.0001.0003 This attribute defines the state capabilities of the amperage probe.')
amperageProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeStateSettings.setDescription('0600.0030.0001.0004 This attribute defines the state settings of the amperage probe.')
amperageProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 5), DellStatusProbe()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeStatus.setDescription('0600.0030.0001.0005 This attribute defines the probe status of the amperage probe.')
amperageProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 6), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeReading.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeReading.setDescription('0600.0030.0001.0006 This attribute defines the reading for an amperage probe of type other than amperageProbeTypeIsDiscrete. When the value for amperageProbeType is amperageProbeTypeIsPowerSupplyAmps or amperageProbeTypeIsSystemAmps, the value returned for this attribute is the power usage that the probe is reading in tenths of Amps. When the value for amperageProbeType is amperageProbeTypeIsPowerSupplyWatts or amperageProbeTypeIsSystemWatts, the value returned for this attribute is the power usage that the probe is reading in Watts. When the value for amperageProbeType is other than amperageProbeTypeIsDiscrete, amperageProbeTypeIsPowerSupplyAmps, amperageProbeTypeIsPowerSupplyWatts, amperageProbeTypeIsSystemAmps or amperageProbeTypeIsSystemWatts, the value returned for this attribute is the amperage that the probe is reading in Milliamps. When the value for amperageProbeType is amperageProbeTypeIsDiscrete, a value is not returned for this attribute.')
amperageProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 7), DellAmperageProbeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeType.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeType.setDescription('0600.0030.0001.0007 This attribute defines the type of the amperage probe.')
amperageProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeLocationName.setDescription('0600.0030.0001.0008 This attribute defines the location of the amperage probe.')
amperageProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 9), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeUpperNonRecoverableThreshold.setDescription('0600.0030.0001.0009 This attribute defines the upper nonrecoverable threshold of the amperage probe. The value is an integer representing the amperage of the threshold in milliamps.')
amperageProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 10), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeUpperCriticalThreshold.setDescription('0600.0030.0001.0010 This attribute defines the upper critical threshold of the amperage probe. The value is an integer representing the amperage of the threshold in milliamps.')
amperageProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 11), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeUpperNonCriticalThreshold.setDescription('0600.0030.0001.0011 This attribute defines the upper noncritical threshold of the amperage probe. The value is an integer representing the amperage of the threshold in milliamps.')
amperageProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 12), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeLowerNonCriticalThreshold.setDescription('0600.0030.0001.0012 This attribute defines the lower noncritical threshold of the amperage probe. The value is an integer representing the amperage of the threshold in milliamps.')
amperageProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 13), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeLowerCriticalThreshold.setDescription('0600.0030.0001.0013 This attribute defines the lower critical threshold of the amperage probe. The value is an integer representing the amperage of the threshold in milliamps.')
amperageProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 14), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeLowerNonRecoverableThreshold.setDescription('0600.0030.0001.0014 This attribute defines the lower nonrecoverable threshold of the amperage probe. The value is an integer representing the amperage of the threshold in milliamps.')
amperageProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 15), DellProbeCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeProbeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeProbeCapabilities.setDescription('0600.0030.0001.0015 This attribute defines the probe capabilities of the amperage probe.')
amperageProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 30, 1, 16), DellAmperageDiscreteReading()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeDiscreteReading.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeDiscreteReading.setDescription('0600.0030.0001.0016 This attribute defines the reading for an amperage probe of type amperageProbeTypeIsDiscrete. When the value for amperageProbeType is other than amperageProbeTypeIsDiscrete, a value is not returned for this attribute. When the value for amperageProbeType is amperageProbeTypeIsDiscrete, the value returned for this attribute is the discrete reading for the probe.')
class DellACPowerSwitchCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 14, 16, 30, 32, 62))
    namedValues = NamedValues(("unknownCapabilities", 1), ("inputSourceCord1NoReturnCapable", 2), ("inputSourceCord1ReturnCapable", 4), ("inputSourceCord2NoReturnCapable", 8), ("inputSourceCord1NoReturnCord1ReturnAndCord2NoReturnCapable", 14), ("inputSourceCord2ReturnCapable", 16), ("inputSourceAllExceptSharedCapable", 30), ("inputSourceSharedCapable", 32), ("inputSourceAllCapable", 62))

class DellACPowerSwitchSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))
    namedValues = NamedValues(("unknown", 1), ("inputSourceCord1NoReturn", 2), ("inputSourceCord1Return", 4), ("inputSourceCord2NoReturn", 8), ("inputSourceCord2Return", 16), ("inputSourceShared", 32))

class DellACPowerSwitchRedundancyMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nonRedundant", 1), ("redundant", 2))

aCPowerSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40), )
if mibBuilder.loadTexts: aCPowerSwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchTable.setDescription('0600.0040 This object defines the AC Power Switch Table.')
aCPowerSwitchTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1), ).setIndexNames((0, "MIB-Dell-10892", "aCPowerSwitchchassisIndex"), (0, "MIB-Dell-10892", "aCPowerSwitchIndex"))
if mibBuilder.loadTexts: aCPowerSwitchTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchTableEntry.setDescription('0600.0040.0001 This object defines the AC Power Switch Table Entry.')
aCPowerSwitchchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerSwitchchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchchassisIndex.setDescription('0600.0040.0001.0001 This attribute defines the index (one based) of the associated chassis.')
aCPowerSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerSwitchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchIndex.setDescription('0600.0040.0001.0002 This attribute defines the index (one based) of the AC power switch.')
aCPowerSwitchCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 3), DellACPowerSwitchCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerSwitchCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchCapabilities.setDescription('0600.0040.0001.0003 This attribute defines the capabilities of the AC power switch.')
aCPowerSwitchSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 4), DellACPowerSwitchSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerSwitchSettings.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchSettings.setDescription('0600.0040.0001.0004 This attribute defines the settings of the AC power switch.')
aCPowerSwitchRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 5), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerSwitchRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchRedundancyStatus.setDescription('0600.0040.0001.0005 This attribute defines the redundancy status of the AC power switch.')
aCPowerCordCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerCordCountForRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordCountForRedundancy.setDescription('0600.0040.0001.0006 This attribute defines the total number of AC power cords required for this AC power switch to have full redundancy.')
aCPowerSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerSwitchName.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchName.setDescription('0600.0040.0001.0007 This attribute defines the name of the AC power switch.')
aCPowerSwitchRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 8), DellACPowerSwitchRedundancyMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerSwitchRedundancyMode.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchRedundancyMode.setDescription('0600.0040.0001.0008 This attribute defines the redundancy mode of the AC power switch.')
aCPowerSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 40, 1, 9), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerSwitchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerSwitchStatus.setDescription('0600.0040.0001.0009 This attribute defines the status of the AC power switch.')
class DellACPowerCordStateCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enableCapable", 2), ("notReadyCapable", 4))

class DellACPowerCordStateSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 16, 26))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("acPowerCordHasPower", 8), ("acPowerCordIsEnabledAndHasPower", 10), ("acPowerCordIsActiveSource", 16), ("acPowerCordIsEnabledHasPowerAndIsActiveSource", 26))

aCPowerCordTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42), )
if mibBuilder.loadTexts: aCPowerCordTable.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordTable.setDescription('0600.0042 This object defines the AC Power Cord Table.')
aCPowerCordTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42, 1), ).setIndexNames((0, "MIB-Dell-10892", "aCPowerCordchassisIndex"), (0, "MIB-Dell-10892", "aCPowerCordIndex"))
if mibBuilder.loadTexts: aCPowerCordTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordTableEntry.setDescription('0600.0042.0001 This object defines the AC Power Cord Table Entry.')
aCPowerCordchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerCordchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordchassisIndex.setDescription('0600.0042.0001.0001 This attribute defines the index (one based) of the associated chassis.')
aCPowerCordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerCordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordIndex.setDescription('0600.0042.0001.0002 This attribute defines the index (one based) of the AC power cord.')
aCPowerCordStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42, 1, 3), DellACPowerCordStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerCordStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordStateCapabilities.setDescription('0600.0042.0001.0003 This attribute defines the state capabilities of the AC power cord.')
aCPowerCordStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42, 1, 4), DellACPowerCordStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerCordStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordStateSettings.setDescription('0600.0042.0001.0004 This attribute defines the state settings of the AC power cord.')
aCPowerCordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerCordStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordStatus.setDescription('0600.0042.0001.0005 This attribute defines the status of the AC power cord.')
aCPowerCordaCPowerSwitchIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerCordaCPowerSwitchIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordaCPowerSwitchIndexReference.setDescription('0600.0042.0001.0006 This attribute defines the index (one based) to the associated AC power switch for this AC power cord.')
aCPowerCordLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 42, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCPowerCordLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: aCPowerCordLocationName.setDescription('0600.0042.0001.0007 This attribute defines the location of the AC power cord.')
class DellBatteryReading(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("predictiveFailure", 1), ("failed", 2), ("presenceDetected", 4))

batteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50), )
if mibBuilder.loadTexts: batteryTable.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTable.setDescription('0600.0050 This object defines the Battery Table.')
batteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50, 1), ).setIndexNames((0, "MIB-Dell-10892", "batteryChassisIndex"), (0, "MIB-Dell-10892", "batteryIndex"))
if mibBuilder.loadTexts: batteryTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTableEntry.setDescription('0600.0050.0001 This object defines the Battery Table Entry.')
batteryChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: batteryChassisIndex.setDescription('0600.0050.0001.0001 This attribute defines the index (one based) of the chassis that contains the battery.')
batteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: batteryIndex.setDescription('0600.0050.0001.0002 This attribute defines the index (one based) of the battery.')
batteryStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: batteryStateCapabilities.setDescription('0600.0050.0001.0003 This attribute defines the state capabilities of the battery.')
batteryStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: batteryStateSettings.setDescription('0600.0050.0001.0004 This attribute defines the state settings of the battery.')
batteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryStatus.setDescription('0600.0050.0001.0005 This attribute defines the status of the battery.')
batteryReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50, 1, 6), DellBatteryReading()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryReading.setStatus('mandatory')
if mibBuilder.loadTexts: batteryReading.setDescription('0600.0050.0001.0006 This attribute defines the reading of the battery.')
batteryLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 50, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: batteryLocationName.setDescription('0600.0050.0001.0007 This attribute defines the location of the battery.')
class DellPowerCapCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class DellPowerCapSetting(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("enabled", 1))

powerUsageTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60), )
if mibBuilder.loadTexts: powerUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageTable.setDescription('0600.0060 This object defines the Power Usage Table.')
powerUsageTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1), ).setIndexNames((0, "MIB-Dell-10892", "powerUsageChassisIndex"), (0, "MIB-Dell-10892", "powerUsageIndex"))
if mibBuilder.loadTexts: powerUsageTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageTableEntry.setDescription('0600.0060.0001 This object defines the Power Usage Table Entry.')
powerUsageChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageChassisIndex.setDescription('0600.0060.0001.0001 This attribute defines the index (one based) of the associated chassis.')
powerUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageIndex.setDescription('0600.0060.0001.0002 This attribute defines the index (one based) of the power usage information.')
powerUsageStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageStateCapabilities.setDescription('0600.0060.0001.0003 This attribute defines the state capabilities of the power usage information.')
powerUsageStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageStateSettings.setDescription('0600.0060.0001.0004 This attribute defines the state settings of the power usage information.')
powerUsageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageStatus.setDescription('0600.0060.0001.0005 This attribute defines the status of the power usage information.')
powerUsageEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageEntityName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageEntityName.setDescription('0600.0060.0001.0006 This attribute defines the name of the entity associated with this power usage information.')
powerUsageCumulativeWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 7), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageCumulativeWattage.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageCumulativeWattage.setDescription('0600.0060.0001.0007 This attribute defines the total wattage used (in Watt-hours) by this entity since the date and time specified by the powerUsageCumulativeWattageStartDateName attribute.')
powerUsageCumulativeWattageStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 8), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageCumulativeWattageStartDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageCumulativeWattageStartDateName.setDescription('0600.0060.0001.0008 This attribute defines the date and time at which the data collection started for the value reported by the powerUsageCumulativeWattage attribute.')
powerUsagePeakWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 9), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWatts.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakWatts.setDescription('0600.0060.0001.0009 This attribute defines the peak wattage reading (in Watts) for this entity since the date and time specified by the powerUsagePeakWattsStartDateName attribute.')
powerUsagePeakWattsStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 10), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWattsStartDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakWattsStartDateName.setDescription('0600.0060.0001.0010 This attribute defines the date and time at which the data collection started for the value reported by the powerUsagePeakWatts attribute.')
powerUsagePeakWattsReadingDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 11), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWattsReadingDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakWattsReadingDateName.setDescription('0600.0060.0001.0011 This attribute defines the date and time at which the value reported by the powerUsagePeakWatts attribute was measured.')
powerUsagePeakAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 12), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmps.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakAmps.setDescription('0600.0060.0001.0012 This attribute defines the peak amperage reading (in tenths of Amps) for this entity since the date and time specified by the powerUsagePeakAmpsStartDateName attribute.')
powerUsagePeakAmpsStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 13), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmpsStartDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakAmpsStartDateName.setDescription('0600.0060.0001.0013 This attribute defines the date and time at which the data collection started for the value reported by the powerUsagePeakAmps attribute.')
powerUsagePeakAmpsReadingDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 14), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmpsReadingDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakAmpsReadingDateName.setDescription('0600.0060.0001.0014 This attribute defines the date and time at which the value reported by the powerUsagePeakAmps attribute was measured.')
powerUsageIdlePower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 15), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageIdlePower.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageIdlePower.setDescription('0600.0060.0001.0015 This attribute defines the system idle power (in Watts). This is the minimum power the system can consume based on the current hardware configuration.')
powerUsageMaxPotentialPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 16), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageMaxPotentialPower.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageMaxPotentialPower.setDescription('0600.0060.0001.0016 This attribute defines the system maximum potential power (in Watts). This is the maximum power the system can consume based on the current hardware configuration.')
powerUsagePowerCapCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 17), DellPowerCapCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePowerCapCapabilities.setDescription('0600.0060.0001.0017 This attribute defines the system power cap capabilities.')
powerUsagePowerCapSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 18), DellPowerCapSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapSetting.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePowerCapSetting.setDescription('0600.0060.0001.0018 This attribute defines the system power cap setting.')
powerUsagePowerCapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 19), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapValue.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePowerCapValue.setDescription('0600.0060.0001.0019 This attribute defines the system power cap value (in Watts).')
powerUsageInstantaneousHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 20), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageInstantaneousHeadroom.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageInstantaneousHeadroom.setDescription('0600.0060.0001.0020 This attribute defines the system instantaneous headroom (in Watts). This is the theoretical maximum power drawn by the power supply minus instantaneous power draw.')
powerUsagePeakHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 60, 1, 21), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakHeadroom.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakHeadroom.setDescription('0600.0060.0001.0021 This attribute defines the system peak headroom (in Watts). This is the theoretical maximum power drawn by the power supply minus peak power draw.')
class DellPowerProfileType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("maxPerformance", 1), ("osControl", 2), ("activePowerController", 4), ("custom", 8))

class DellCPUPowerPerformanceManagementType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("maxPerformance", 1), ("minPower", 2), ("osDBPM", 4), ("systemDBPM", 8))

class DellMemoryPowerPerformanceManagementType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("maxPerformance", 1), ("mhz1333", 2), ("mhz1067", 4), ("mhz800", 8), ("minPower", 16))

class DellFanPowerPerformanceManagementType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("maxPerformance", 1), ("minPower", 2))

powerProfileTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70), )
if mibBuilder.loadTexts: powerProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileTable.setDescription('0600.0070 This object defines the Power Profile Table.')
powerProfileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1), ).setIndexNames((0, "MIB-Dell-10892", "powerProfileChassisIndex"), (0, "MIB-Dell-10892", "powerProfileIndex"))
if mibBuilder.loadTexts: powerProfileTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileTableEntry.setDescription('0600.0070.0001 This object defines the Power Profile Table Entry.')
powerProfileChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileChassisIndex.setDescription('0600.0070.0001.0001 This attribute defines the index (one based) of the associated chassis.')
powerProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileIndex.setDescription('0600.0060.0001.0002 This attribute defines the index (one based) of the power profile information.')
powerProfileSupportedProfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 3), DellPowerProfileType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileSupportedProfiles.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileSupportedProfiles.setDescription('0600.0070.0001.0003 This attribute defines the supported power profiles.')
powerProfileSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 4), DellPowerProfileType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileSetting.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileSetting.setDescription('0600.0070.0001.0004 This attribute defines the power profile setting.')
powerProfileCustomCPUMgmtCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 5), DellCPUPowerPerformanceManagementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileCustomCPUMgmtCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileCustomCPUMgmtCapabilities.setDescription('0600.0070.0001.0005 This attribute defines the custom CPU power and performance management capabilities that are available for the Custom power profile.')
powerProfileCustomCPUMgmtSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 6), DellCPUPowerPerformanceManagementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileCustomCPUMgmtSetting.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileCustomCPUMgmtSetting.setDescription('0600.0070.0001.0006 This attribute defines the custom CPU power and performance management setting for the Custom power profile.')
powerProfileCustomMemoryMgmtCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 7), DellMemoryPowerPerformanceManagementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileCustomMemoryMgmtCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileCustomMemoryMgmtCapabilities.setDescription('0600.0070.0001.0007 This attribute defines the custom memory power and performance management capabilities that are available for the Custom power profile.')
powerProfileCustomMemoryMgmtSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 8), DellMemoryPowerPerformanceManagementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileCustomMemoryMgmtSetting.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileCustomMemoryMgmtSetting.setDescription('0600.0070.0001.0008 This attribute defines the custom memory power and performance management setting for the Custom power profile.')
powerProfileCustomFanMgmtCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 9), DellFanPowerPerformanceManagementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileCustomFanMgmtCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileCustomFanMgmtCapabilities.setDescription('0600.0070.0001.0009 This attribute defines the custom fan power and performance management capabilities that are available for the Custom power profile.')
powerProfileCustomFanMgmtSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 600, 70, 1, 10), DellFanPowerPerformanceManagementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerProfileCustomFanMgmtSetting.setStatus('mandatory')
if mibBuilder.loadTexts: powerProfileCustomFanMgmtSetting.setDescription('0600.0070.0001.0010 This attribute defines the custom fan power and performance management setting for the Custom power profile.')
coolingUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10), )
if mibBuilder.loadTexts: coolingUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitTable.setDescription('0700.0010 This object defines the Cooling Unit Table.')
coolingUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "coolingUnitchassisIndex"), (0, "MIB-Dell-10892", "coolingUnitIndex"))
if mibBuilder.loadTexts: coolingUnitTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitTableEntry.setDescription('0700.0010.0001 This object defines the Cooling Unit Table Entry.')
coolingUnitchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitchassisIndex.setDescription('0700.0010.0001.0001 This attribute defines the index (one based) of the assoicated chassis.')
coolingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitIndex.setDescription('0700.0010.0001.0002 This attribute defines the index (one based) of the cooling unit.')
coolingUnitStateCapabilties = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStateCapabilties.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitStateCapabilties.setDescription('0700.0010.0001.0003 This attribute defines the state capabilities of the cooling unit.')
coolingUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitStateSettings.setDescription('0700.0010.0001.0004 This attribute defines the state settings of the cooling unit.')
coolingUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1, 5), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitRedundancyStatus.setDescription('0700.0010.0001.0005 This attribute defines the redundancy status of the cooling unit.')
coolingDeviceCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceCountForRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceCountForRedundancy.setDescription('0700.0010.0001.0006 This attribute defines the total number of cooling devices required for this cooling unit to have full redundancy.')
coolingUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitName.setDescription('0700.0010.0001.0007 This attribute defines the name of the cooling unit.')
coolingUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 10, 1, 8), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitStatus.setDescription('0700.0010.0001.0008 This attribute defines the status of the cooling unit.')
class DellCoolingDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("coolingDeviceTypeIsOther", 1), ("coolingDeviceTypeIsUnknown", 2), ("coolingDeviceTypeIsAFan", 3), ("coolingDeviceTypeIsABlower", 4), ("coolingDeviceTypeIsAChipFan", 5), ("coolingDeviceTypeIsACabinetFan", 6), ("coolingDeviceTypeIsAPowerSupplyFan", 7), ("coolingDeviceTypeIsAHeatPipe", 8), ("coolingDeviceTypeIsRefrigeration", 9), ("coolingDeviceTypeIsActiveCooling", 10), ("coolingDeviceTypeIsPassiveCooling", 11))

class DellCoolingDeviceSubType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16))
    namedValues = NamedValues(("coolingDeviceSubTypeIsOther", 1), ("coolingDeviceSubTypeIsUnknown", 2), ("coolingDeviceSubTypeIsAFanThatReadsInRPM", 3), ("coolingDeviceSubTypeIsAFanReadsONorOFF", 4), ("coolingDeviceSubTypeIsAPowerSupplyFanThatReadsinRPM", 5), ("coolingDeviceSubTypeIsAPowerSupplyFanThatReadsONorOFF", 6), ("coolingDeviceSubTypeIsDiscrete", 16))

class DellCoolingDeviceDiscreteReading(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("coolingDeviceIsGood", 1), ("coolingDeviceIsBad", 2))

coolingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12), )
if mibBuilder.loadTexts: coolingDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceTable.setDescription('0700.0012 This object defines the Cooling Device Table.')
coolingDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1), ).setIndexNames((0, "MIB-Dell-10892", "coolingDevicechassisIndex"), (0, "MIB-Dell-10892", "coolingDeviceIndex"))
if mibBuilder.loadTexts: coolingDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceTableEntry.setDescription('0700.0012.0001 This object defines the Cooling Device Table Entry.')
coolingDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDevicechassisIndex.setDescription('0700.0012.0001.0001 This attribute defines the index (one based) of the associated chassis.')
coolingDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceIndex.setDescription('0700.0012.0001.0002 This attribute defines the index (one based) of the cooling device.')
coolingDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceStateCapabilities.setDescription('0700.0012.0001.0003 This attribute defines the state capabilities of the cooling device.')
coolingDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceStateSettings.setDescription('0700.0012.0001.0004 This attribute defines the state settings of the cooling device.')
coolingDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 5), DellStatusProbe()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceStatus.setDescription('0700.0012.0001.0005 This attribute defines the probe status of the cooling device.')
coolingDeviceReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 6), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceReading.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceReading.setDescription('0700.0012.0001.0006 This attribute defines the reading for a cooling device of subtype other than coolingDeviceSubTypeIsDiscrete. When the value for coolingDeviceSubType is other than coolingDeviceSubTypeIsDiscrete, the value returned for this attribute is the speed in RPM or the OFF/ON value of the cooling device. When the value for coolingDeviceSubType is coolingDeviceSubTypeIsDiscrete, a value is not returned for this attribute.')
coolingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 7), DellCoolingDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceType.setDescription('0700.0012.0001.0007 This attribute defines the type of the cooling device.')
coolingDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceLocationName.setDescription('0700.0012.0001.0008 This attribute defines the location name of the cooling device.')
coolingDeviceUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 9), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceUpperNonRecoverableThreshold.setDescription('0700.0012.0001.0009 This attribute defines the upper nonrecoverable threshold of the cooling device. The value is an integer representing fan speed in revolutions per minute (RPM). It is not applicable to OFF/ON type cooling devices or non-cooling device types.')
coolingDeviceUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 10), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceUpperCriticalThreshold.setDescription('0700.0012.0001.0010 This attribute defines the upper critical threshold of the cooling device. The value is an integer representing fan speed in revolutions per minute (RPM). It is not applicable to OFF/ON type cooling devices or non-cooling device types.')
coolingDeviceUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 11), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceUpperNonCriticalThreshold.setDescription('0700.0012.0001.0011 This attribute defines the upper noncritical threshold of the cooling device. The value is an integer representing fan speed in revolutions per minute (RPM). It is not applicable to OFF/ON type cooling devices or non-cooling device types.')
coolingDeviceLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 12), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceLowerNonCriticalThreshold.setDescription('0700.0012.0001.0012 This attribute defines the lower noncritical threshold of the cooling device. The value is an integer representing fan speed in revolutions per minute (RPM). It is not applicable to OFF/ON type cooling devices or non-cooling device types.')
coolingDeviceLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 13), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceLowerCriticalThreshold.setDescription('0700.0012.0001.0013 This attribute defines the lower critical threshold of the cooling device. The value is an integer representing fan speed in revolutions per minute (RPM). It is not applicable to OFF/ON type cooling devices or non-cooling device types.')
coolingDeviceLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 14), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceLowerNonRecoverableThreshold.setDescription('0700.0012.0001.0014 This attribute defines the lower nonrecoverable threshold of the cooling device. The value is an integer representing fan speed in revolutions per minute (RPM). It is not applicable to OFF/ON type cooling devices or non-cooling device types.')
coolingDevicecoolingUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 15), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDevicecoolingUnitIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDevicecoolingUnitIndexReference.setDescription('0700.0012.0001.0015 This attribute defines the index to the associated cooling unit.')
coolingDeviceSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 16), DellCoolingDeviceSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceSubType.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceSubType.setDescription('0700.0012.0001.0016 This attribute defines the subtype of the cooling device.')
coolingDeviceProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 17), DellProbeCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceProbeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceProbeCapabilities.setDescription('0700.0012.0001.0017 This attribute defines the probe capabilities of the cooling device.')
coolingDeviceDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 12, 1, 18), DellCoolingDeviceDiscreteReading()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceDiscreteReading.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceDiscreteReading.setDescription('0700.0012.0001.0018 This attribute defines the reading for a cooling device of type coolingDeviceSubTypeIsDiscrete. When the value for coolingDeviceSubType is other than coolingDeviceSubTypeIsDiscrete, a value is not returned for this attribute. When the value for coolingDeviceSubType is coolingDeviceSubTypeIsDiscrete, the value returned for this attribute is the discrete reading for the cooling device.')
class DellTemperatureProbeType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16))
    namedValues = NamedValues(("temperatureProbeTypeIsOther", 1), ("temperatureProbeTypeIsUnknown", 2), ("temperatureProbeTypeIsAmbientESM", 3), ("temperatureProbeTypeIsDiscrete", 16))

class DellTemperatureDiscreteReading(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("temperatureIsGood", 1), ("temperatureIsBad", 2))

temperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20), )
if mibBuilder.loadTexts: temperatureProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeTable.setDescription('0700.0020 This object defines the Temperature Probe Table.')
temperatureProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "temperatureProbechassisIndex"), (0, "MIB-Dell-10892", "temperatureProbeIndex"))
if mibBuilder.loadTexts: temperatureProbeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeTableEntry.setDescription('0700.0020.0001 This object defines the Temperature Probe Table Entry.')
temperatureProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbechassisIndex.setDescription('0700.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
temperatureProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeIndex.setDescription('0700.0020.0001.0002 This attribute defines the index (one based) of the temperature probe.')
temperatureProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeStateCapabilities.setDescription('0700.0020.0001.0003 This attribute defines the state capabilities of the temperature probe.')
temperatureProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeStateSettings.setDescription('0700.0020.0001.0004 This attribute defines the state settings of the temperature probe.')
temperatureProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 5), DellStatusProbe()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeStatus.setDescription('0700.0020.0001.0005 This attribute defines the probe status of the temperature probe.')
temperatureProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 6), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeReading.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeReading.setDescription('0700.0020.0001.0006 This attribute defines the reading for a temperature probe of type other than temperatureProbeTypeIsDiscrete. When the value for temperatureProbeType is other than temperatureProbeTypeIsDiscrete, the value returned for this attribute is the temperature that the probe is reading in tenths of degrees Centigrade. When the value for temperatureProbeType is temperatureProbeTypeIsDiscrete, a value is not returned for this attribute.')
temperatureProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 7), DellTemperatureProbeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeType.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeType.setDescription('0700.0020.0001.0007 This attribute defines the type of the temperature probe.')
temperatureProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLocationName.setDescription('0700.0020.0001.0008 This attribute defines the location name of the temperature probe.')
temperatureProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 9), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeUpperNonRecoverableThreshold.setDescription('0700.0020.0001.0009 This attribute defines the upper nonrecoverable threshold of the temperature probe. The value is an integer representing the temperature of the threshold in tenths of degrees Centigrade.')
temperatureProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 10), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeUpperCriticalThreshold.setDescription('0700.0020.0001.0010 This attribute defines the upper critical threshold of the temperature probe. The value is an integer representing the temperature of the threshold in tenths of degrees Centigrade.')
temperatureProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 11), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeUpperNonCriticalThreshold.setDescription('0700.0020.0001.0011 This attribute defines the upper noncritical threshold of the temperature probe. The value is an integer representing the temperature of the threshold in tenths of degrees Centigrade.')
temperatureProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 12), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLowerNonCriticalThreshold.setDescription('0700.0020.0001.0012 This attribute defines the lower noncritical threshold of the temperature probe. The value is an integer representing the temperature of the threshold in tenths of degrees Centigrade.')
temperatureProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 13), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLowerCriticalThreshold.setDescription('0700.0020.0001.0013 This attribute defines the lower critical threshold of the temperature probe. The value is an integer representing the temperature of the threshold in tenths of degrees Centigrade.')
temperatureProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 14), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLowerNonRecoverableThreshold.setDescription('0700.0020.0001.0014 This attribute defines the lower nonrecoverable threshold of the temperature probe. The value is an integer representing the temperature of the threshold in tenths of degrees Centigrade.')
temperatureProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 15), DellProbeCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeProbeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeProbeCapabilities.setDescription('0700.0020.0001.0015 This attribute defines the probe capabilities of the temperature probe.')
temperatureProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 700, 20, 1, 16), DellTemperatureDiscreteReading()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeDiscreteReading.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeDiscreteReading.setDescription('0700.0020.0001.0016 This attribute defines the reading for a temperature probe of type temperatureProbeTypeIsDiscrete. When the value for temperatureProbeType is other than temperatureProbeTypeIsDiscrete, a value is not returned for this attribute. When the value for temperatureProbeType is temperatureProbeTypeIsDiscrete, the value returned for this attribute is the discrete reading for the probe.')
userSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 800, 10), )
if mibBuilder.loadTexts: userSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: userSecurityTable.setDescription('0800.0010 This object defines the User Security Table.')
userSecurityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 800, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "userSecuritychassisIndex"), (0, "MIB-Dell-10892", "userSecurityIndex"))
if mibBuilder.loadTexts: userSecurityTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: userSecurityTableEntry.setDescription('0800.0010.0001 This object defines the User Security Table Entry.')
userSecuritychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 800, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecuritychassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: userSecuritychassisIndex.setDescription('0800.0010.0001.0001 This attribute defines the index (one based) of the assoicated chassis.')
userSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 800, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: userSecurityIndex.setDescription('0800.0010.0001.0002 This attribute defines the index (one based) of the user.')
userSecurityUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 800, 10, 1, 3), DellSecurityString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityUserName.setStatus('mandatory')
if mibBuilder.loadTexts: userSecurityUserName.setDescription('0800.0010.0001.0003 This attribute defines the name of the user that is authorized to perform Set operations on this system.')
userSecurityControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 800, 10, 1, 4), DellSecurityString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityControlName.setStatus('mandatory')
if mibBuilder.loadTexts: userSecurityControlName.setDescription('0800.0010.0001.0004 This attribute defines the control string that is used for managing users in this table.')
userSecurityRequestName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 800, 10, 1, 5), DellSecurityString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityRequestName.setStatus('mandatory')
if mibBuilder.loadTexts: userSecurityRequestName.setDescription('0800.0010.0001.0005 This attribute defines the request string that is used for Set requests on this system.')
class DellRemoteFlashBIOSStateCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10))
    namedValues = NamedValues(("unknown", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("cancelCapable", 8), ("enableAndCancelCapable", 10))

class DellRemoteFlashBIOSStateSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("canceled", 8), ("pending", 16), ("other", 32))

class DellRemoteFlashBIOSCompletionCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("completionCodeIsOther", 1), ("completionCodeIsUnknown", 2), ("completionCodeIsOK", 3), ("completionCodeIsBadImage", 4), ("completionCodeIsNoFileAccess", 5), ("completionCodeIsNotReady", 6), ("completionCodeIsDisabled", 7), ("completionCodeIsNoBattery", 8), ("completionCodeIsNoChargedBattery", 9), ("completionCodeIsNoExternalPower", 10), ("completionCodeIsNo12VoltSet", 11), ("completionCodeIsNo12VoltRemoval", 12), ("completionCodeIsFlashMemoryFailed", 13), ("completionCodeIsGeneralFailure", 14), ("completionCodeIsDataMiscompare", 15), ("completionCodeIsNoImageFound", 16), ("completionCodeIsNoUpdatePerformed", 17))

remoteFlashBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10), )
if mibBuilder.loadTexts: remoteFlashBIOSTable.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSTable.setDescription('0900.0010 This object defines the Remote Flash BIOS Table.')
remoteFlashBIOSTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "remoteFlashBIOSchassisIndex"), (0, "MIB-Dell-10892", "remoteFlashBIOSIndex"))
if mibBuilder.loadTexts: remoteFlashBIOSTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSTableEntry.setDescription('0900.0010.0001 This object defines the Remote Flash BIOS Table Entry.')
remoteFlashBIOSchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteFlashBIOSchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSchassisIndex.setDescription('0900.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
remoteFlashBIOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteFlashBIOSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSIndex.setDescription('0900.0010.0001.0002 This attribute defines the index (one based) of the remote flash BIOS function.')
remoteFlashBIOSStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1, 3), DellRemoteFlashBIOSStateCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteFlashBIOSStateCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSStateCapabilitiesUnique.setDescription('0900.0010.0001.0003 This attribute defines the state capabilities of the remote flash BIOS function.')
remoteFlashBIOSStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1, 4), DellRemoteFlashBIOSStateSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteFlashBIOSStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSStateSettingsUnique.setDescription('0900.0010.0001.0004 This attribute defines the state settings of the remote flash BIOS function.')
remoteFlashBIOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteFlashBIOSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSStatus.setDescription('0900.0010.0001.0005 This attribute defines the status of the remote flash BIOS function.')
remoteFlashBIOSLastBIOSDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1, 6), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteFlashBIOSLastBIOSDateName.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSLastBIOSDateName.setDescription('0900.0010.0001.0006 This attribute defines the date of last BIOS update. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes and ss are the seconds. uuuuuu is the number of microseconds, and +fff or -fff is the offset from UTC in minutes.')
remoteFlashBIOSCompletionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1, 7), DellRemoteFlashBIOSCompletionCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteFlashBIOSCompletionCode.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSCompletionCode.setDescription('0900.0010.0001.0007 This attribute defines the completion code of the last BIOS update.')
remoteFlashBIOSMinimumContiguousMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 900, 10, 1, 8), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteFlashBIOSMinimumContiguousMemory.setStatus('mandatory')
if mibBuilder.loadTexts: remoteFlashBIOSMinimumContiguousMemory.setDescription('0900.0010.0001.0008 This attribute defines the minimum size of contiguous memory required for the remote flash BIOS function in KBbytes.')
class DellGenericPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))
    namedValues = NamedValues(("portConnectorTypeIsOther", 1), ("portConnectorTypeIsNone", 2), ("portConnectorTypeIsCentronics", 3), ("portConnectorTypeIsMiniCentronics", 4), ("portConnectorTypeIsProprietary", 5), ("portConnectorTypeIsDB25Male", 6), ("portConnectorTypeIsDB25Female", 7), ("portConnectorTypeIsDB15Male", 8), ("portConnectorTypeIsDB15Female", 9), ("portConnectorTypeIsDB9Male", 10), ("portConnectorTypeIsDB9Female", 11), ("portConnectorTypeIsRJ11", 12), ("portConnectorTypeIsRJ45", 13), ("portConnectorTypeIsMiniSCSI50Pin", 14), ("portConnectorTypeIsMiniDIN", 15), ("portConnectorTypeIsMicroDIN", 16), ("portConnectorTypeIsPS2", 17), ("portConnectorTypeIsInfrared", 18), ("portConnectorTypeIsHPHIL", 19), ("portConnectorTypeIsAccessBussUSB", 20), ("portConnectorTypeISSASCSI", 21), ("portConnectorTypeIsCirdin8Male", 22), ("portConnectorTypeIsCirdin8Female", 23), ("portConnectorTypeIsIDE", 24), ("portConnectorTypeIsFloppy", 25), ("portConnectorTypeIsDIN9Pin", 26), ("portConnectorTypeIsDIN25Pin", 27), ("portConnectorTypeIsDIN50Pin", 28), ("portConnectorTypeIsDIN68Pin", 29), ("portConnectorTypeIsCDROMLineOut", 30), ("portConnectorTypeIsMiniCentronics14", 31), ("portConnectorTypeIsMiniCentronics26", 32), ("portConnectorTypeIsMiniJack", 33), ("portConnectorTypeIsBNC", 34), ("portConnectorTypeIs1394", 35), ("portConnectorTypeIsPC98", 36), ("portConnectorTypeIsPC98Hireso", 37), ("portConnectorTypeIsPCH98", 38), ("portConnectorTypeIsPC98Note", 39), ("portConnectorTypeIsPC98Full", 40))

class DellPortSecurityState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("externalIsDisabled", 4), ("externalIsEnabled", 5), ("bootByPass", 6))

class DellPointingPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsSerial", 3), ("connectorPortTypeIsPS2", 4), ("connectorPortTypeIsInfrared", 5), ("connectorPortTypeIsHPHIL", 6), ("connectorPortTypeIsBusMouse", 7), ("connectorPortTypeIsADB", 8), ("connectorPortTypeIsDB9", 9), ("connectorPortTypeIsMicroDIN", 10), ("connectorPortTypeIsAccessBusUSB", 11), ("connectorPortTypeIsPC98", 12))

pointingPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10), )
if mibBuilder.loadTexts: pointingPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortTable.setDescription('1000.0010 This object defines the Pointing Port Table.')
pointingPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "pointingPortchassisIndex"), (0, "MIB-Dell-10892", "pointingPortIndex"))
if mibBuilder.loadTexts: pointingPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortTableEntry.setDescription('1000.0010.0001 This object defines the Pointing Port Table Entry.')
pointingPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortchassisIndex.setDescription('1000.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
pointingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortIndex.setDescription('1000.0010.0001.0002 This attribute defines the index (one based) of the pointing port.')
pointingPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortStateCapabilities.setDescription('1000.0010.0001.0003 This attribute defines the state capabilities of the pointing port.')
pointingPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortStateSettings.setDescription('1000.0010.0001.0004 This attribute defines the state settings of the pointing port.')
pointingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortStatus.setDescription('1000.0010.0001.0005 This attribute defines the status of the pointing port.')
pointingPortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortSecurityState.setDescription('1000.0010.0001.0006 This attribute defines the security state of the pointing port.')
pointingPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 7), DellPointingPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortConnectorType.setDescription('1000.0010.0001.0007 This attribute defines the connector type of the pointing port.')
pointingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortName.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortName.setDescription('1000.0010.0001.0008 This attribute defines name of the pointing port.')
pointingPortBIOSConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 10, 1, 9), DellGenericPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortBIOSConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortBIOSConnectorType.setDescription('1000.0010.0001.0009 This attribute defines the BIOS connector type of the pointing port.')
class DellKeyboardPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsMiniDIN", 3), ("connectorPortTypeIsMicroDIN", 4), ("connectorPortTypeIsPS2", 5), ("connectorPortTypeIsInfrared", 6), ("connectorPortTypeIsHPHIL", 7), ("connectorPortTypeIsDB9", 8), ("connectorPortTypeIsAccessBusUSB", 9), ("connectorPortTypeIsPC98", 10))

keyboardPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20), )
if mibBuilder.loadTexts: keyboardPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortTable.setDescription('1000.0020 This object defines the Keyboard Port Table.')
keyboardPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "keyboardPortchassisIndex"), (0, "MIB-Dell-10892", "keyboardPortIndex"))
if mibBuilder.loadTexts: keyboardPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortTableEntry.setDescription('1000.0020.0001 This object defines the Keyboard Port Table Entry.')
keyboardPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortchassisIndex.setDescription('1000.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
keyboardPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortIndex.setDescription('1000.0020.0001.0002 This attribute defines the index (one based) of the keyboard port.')
keyboardPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortStateCapabilities.setDescription('1000.0020.0001.0003 This attribute defines the state capabilities of the keyboard port.')
keyboardPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortStateSettings.setDescription('1000.0020.0001.0004 This attribute defines the state settings of the keyboard port.')
keyboardPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortStatus.setDescription('1000.0020.0001.0005 This attribute defines the status of the keyboard port.')
keyboardPortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortSecurityState.setDescription('1000.0020.0001.0006 This attribute defines the security state of the keyboard port.')
keyboardPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 7), DellKeyboardPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortConnectorType.setDescription('1000.0020.0001.0007 This attribute defines the connector type of the keyboard port.')
keyboardPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortName.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortName.setDescription('1000.0020.0001.0008 This attribute defines name of the keyboard port.')
keyboardPortBIOSConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 20, 1, 9), DellGenericPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortBIOSConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortBIOSConnectorType.setDescription('1000.0020.0001.0009 This attribute defines the BIOS connector type of the keyboard port.')
class DellProcessorPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsDaughterdBoard", 3), ("connectorPortTypeIsZIFSocket", 4), ("connectorPortTypeIsAPiggyBackBoard", 5), ("connectorPortTypeIsNone", 6), ("connectorPortTypeIsLIFSocket", 7), ("connectorPortTypeIsSlot1", 8), ("connectorPortTypeIsSlot2", 9), ("connectorPortTypeIs370PinSocket", 10))

processorPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30), )
if mibBuilder.loadTexts: processorPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortTable.setDescription('1000.0030 This object defines the Processor Port Table.')
processorPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "processorPortchassisIndex"), (0, "MIB-Dell-10892", "processorPortIndex"))
if mibBuilder.loadTexts: processorPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortTableEntry.setDescription('1000.0030.0001 This object defines the Processor Port Table Entry.')
processorPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortchassisIndex.setDescription('1000.0030.0001.0001 This attribute defines the index (one based) of the associated chassis.')
processorPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortIndex.setDescription('1000.0030.0001.0002 This attribute defines the index (one based) of the processor port.')
processorPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortStateCapabilities.setDescription('1000.0030.0001.0003 This attribute defines the state capabilities of the processor port.')
processorPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortStateSettings.setDescription('1000.0030.0001.0004 This attribute defines the state settings of the processor port.')
processorPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortStatus.setDescription('1000.0030.0001.0005 This attribute defines the status of the processor port.')
processorPortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortSecurityState.setDescription('1000.0030.0001.0006 This attribute defines the security state of the processor port.')
processorPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 7), DellProcessorPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortConnectorType.setDescription('1000.0030.0001.0007 This attribute defines the connector type of the processor port.')
processorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortName.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortName.setDescription('1000.0030.0001.0008 This attribute defines name of the processor port.')
processorPortBIOSConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 30, 1, 9), DellGenericPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortBIOSConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortBIOSConnectorType.setDescription('1000.0030.0001.0009 This attribute defines the BIOS connector type of the processor port.')
class DellMemoryDevicePortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsSIMM", 3), ("connectorPortTypeIsSIP", 4), ("connectorPortTypeIsAChip", 5), ("connectorPortTypeIsDIP", 6), ("connectorPortTypeIsZIP", 7), ("connectorPortTypeIsAProprietaryCard", 8), ("connectorPortTypeIsDIMM", 9), ("connectorPortTypeIsTSOP", 10), ("connectorPortTypeIsARowOfChips", 11), ("connectorPortTypeIsRIMM", 12), ("connectorPortTypeIsSODIMM", 13), ("connectorPortTypeIsSRIMM", 14))

memoryDevicePortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40), )
if mibBuilder.loadTexts: memoryDevicePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortTable.setDescription('1000.0040 This object defines the Memory Device Port Table.')
memoryDevicePortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1), ).setIndexNames((0, "MIB-Dell-10892", "memoryDevicePortchassisIndex"), (0, "MIB-Dell-10892", "memoryDevicePortIndex"))
if mibBuilder.loadTexts: memoryDevicePortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortTableEntry.setDescription('1000.0040.0001 This object defines the Memory Device Port Table Entry.')
memoryDevicePortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortchassisIndex.setDescription('1000.0040.0001.0001 This attribute defines the index (one based) of the associated chassis.')
memoryDevicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortIndex.setDescription('1000.0040.0001.0002 This attribute defines the index (one based) of the memory device port.')
memoryDevicePortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortStateCapabilities.setDescription('1000.0040.0001.0003 This attribute defines the state capabilities of the memory device port.')
memoryDevicePortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortStateSettings.setDescription('1000.0040.0001.0004 This attribute defines the state settings of the memory device port.')
memoryDevicePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortStatus.setDescription('1000.0040.0001.0005 This attribute defines the status of the memory device port.')
memoryDevicePortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortSecurityState.setDescription('1000.0040.0001.0006 This attribute defines the security state of the memory device port.')
memoryDevicePortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 7), DellMemoryDevicePortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortConnectorType.setDescription('1000.0040.0001.0007 This attribute defines the connector type of the memory device port.')
memoryDevicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortName.setDescription('1000.0040.0001.0008 This attribute defines name of the memory device port.')
memoryDevicePortBIOSConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 9), DellGenericPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortBIOSConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortBIOSConnectorType.setDescription('1000.0040.0001.0009 This attribute defines the BIOS connector type of the memory device port.')
memoryDevicePortPhysicalMemoryArrayIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 10), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortPhysicalMemoryArrayIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortPhysicalMemoryArrayIndexReference.setDescription('1000.0040.0001.0010 This attribute defines the index (one based) of the Physical Memory Array Table entry for the physical memory array with the same chassis index that this memory device port is associated with.')
memoryDevicePortPhysicalMemoryCardIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 40, 1, 11), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePortPhysicalMemoryCardIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePortPhysicalMemoryCardIndexReference.setDescription('1000.0040.0001.0011 This attribute defines the index (one based) of the Physical Memory Card Table entry for the physical memory card with the same chassis index that this memory device port is associated with (if any).')
class DellMonitorPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsDB15PinMale", 3), ("connectorPortTypeIsDB15PinFemale", 4))

monitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50), )
if mibBuilder.loadTexts: monitorPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortTable.setDescription('1000.0050 This object defines the Monitor Port Table.')
monitorPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1), ).setIndexNames((0, "MIB-Dell-10892", "monitorPortchassisIndex"), (0, "MIB-Dell-10892", "monitorPortIndex"))
if mibBuilder.loadTexts: monitorPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortTableEntry.setDescription('1000.0050.0001 This object defines the Monitor Port Table Entry.')
monitorPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortchassisIndex.setDescription('1000.0050.0001.0001 This attribute defines the index (one based) of the associated chassis.')
monitorPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortIndex.setDescription('1000.0050.0001.0002 This attribute defines the index (one based) of the monitor port.')
monitorPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortStateCapabilities.setDescription('1000.0050.0001.0003 This attribute defines the state capabilities of the monitor port.')
monitorPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortStateSettings.setDescription('1000.0050.0001.0004 This attribute defines the state settings of the monitor port.')
monitorPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortStatus.setDescription('1000.0050.0001.0005 This attribute defines the status of the monitor port.')
monitorPortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortSecurityState.setDescription('1000.0050.0001.0006 This attribute defines the security state of the monitor port.')
monitorPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 7), DellMonitorPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortConnectorType.setDescription('1000.0050.0001.0007 This attribute defines the connector type of the monitor port.')
monitorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortName.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortName.setDescription('1000.0050.0001.0008 This attribute defines name of the monitor port.')
monitorPortBIOSConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 50, 1, 9), DellGenericPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorPortBIOSConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: monitorPortBIOSConnectorType.setDescription('1000.0050.0001.0009 This attribute defines the BIOS connector type of the monitor port.')
class DellSCSIPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsDIN25pin", 3), ("connectorPortTypeIsDIN50pin", 4), ("connectorPortTypeIsDIN68pin", 5))

sCSIPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60), )
if mibBuilder.loadTexts: sCSIPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortTable.setDescription('1000.0060 This object defines the Small Computer Systems Interface (SCSI) Port Table.')
sCSIPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1), ).setIndexNames((0, "MIB-Dell-10892", "sCSIPortchassisIndex"), (0, "MIB-Dell-10892", "sCSIPortIndex"))
if mibBuilder.loadTexts: sCSIPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortTableEntry.setDescription('1000.0060.0001 This object defines the Small Computer Systems Interface (SCSI) Port Table Entry.')
sCSIPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortchassisIndex.setDescription('1000.0060.0001.0001 This attribute defines the index (one based) of the associated chassis.')
sCSIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortIndex.setDescription('1000.0060.0001.0002 This attribute defines the index (one based) of the SCSI port.')
sCSIPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortStateCapabilities.setDescription('1000.0060.0001.0003 This attribute defines the state capabilities of the SCSI port.')
sCSIPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortStateSettings.setDescription('1000.0060.0001.0004 This attribute defines the state settings of the SCSI port.')
sCSIPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortStatus.setDescription('1000.0060.0001.0005 This attribute defines the status of the SCSI port.')
sCSIPortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortSecurityState.setDescription('1000.0060.0001.0006 This attribute defines the security state of the SCSI port.')
sCSIPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 7), DellSCSIPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortConnectorType.setDescription('1000.0060.0001.0007 This attribute defines the connector type of the SCSI port.')
sCSIPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortName.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortName.setDescription('1000.0060.0001.0008 This attribute defines name of the SCSI port.')
sCSIPortBIOSConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 60, 1, 9), DellGenericPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIPortBIOSConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIPortBIOSConnectorType.setDescription('1000.0060.0001.0009 This attribute defines the BIOS connector type of the SCSI port.')
class DellParallelPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsDB25PinFemale", 3), ("connectorPortTypeIsDB25PinMale", 4), ("connectorPortTypeIsCentronics", 5), ("connectorPortTypeIsMiniCentronics", 6), ("connectorPortTypeIsProprietary", 7), ("connectorPortTypeIsCentronics14", 8), ("connectorPortTypeIsDB36PinFemale", 9), ("connectorPortTypeIsMiniCentronics20", 10))

class DellParallelPortConnectorPinout(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("connectorPortPinoutIsOther", 1), ("connectorPortPinoutIsUnknown", 2), ("connectorPortPinoutIsXTorAT", 3), ("connectorPortPinoutIsPS2", 4), ("connectorPortPinoutIsIEEE1284", 5), ("connectorPortPinoutIsProprietary", 6), ("connectorPortPinoutIsPC98", 7), ("connectorPortPinoutIsPC98Hireso", 8), ("connectorPortPinoutIsPC98Note", 9), ("connectorPortPinoutIsPC98Full", 10))

class DellParallelPortCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 30, 32, 64, 128))
    namedValues = NamedValues(("unknown", 1), ("atCapable", 2), ("ps2Capable", 4), ("ecpCapable", 8), ("eppCapable", 16), ("atOrPS2OrECPOrEPPCapable", 30), ("pc98Capable", 32), ("pc98HiresoCapable", 64), ("pc98HCapable", 128))

parallelPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70), )
if mibBuilder.loadTexts: parallelPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortTable.setDescription('1000.0070 This object defines the Parallel Port Table.')
parallelPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1), ).setIndexNames((0, "MIB-Dell-10892", "parallelPortchassisIndex"), (0, "MIB-Dell-10892", "parallelPortIndex"))
if mibBuilder.loadTexts: parallelPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortTableEntry.setDescription('1000.0070.0001 This object defines the Parallel Port Table Entry.')
parallelPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortchassisIndex.setDescription('1000.0070.0001.0001 This attribute defines the index (one based) of the associated chassis.')
parallelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortIndex.setDescription('1000.0070.0001.0002 This attribute defines the index (one based) of the parallel port.')
parallelPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortStateCapabilities.setDescription('1000.0070.0001.0003 This attribute defines the state capabilities of the parallel port.')
parallelPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortStateSettings.setDescription('1000.0070.0001.0004 This attribute defines the state settings of the parallel port.')
parallelPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortStatus.setDescription('1000.0070.0001.0005 This attribute defines the status of the parallel port.')
parallelPortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortSecurityState.setDescription('1000.0070.0001.0006 This attribute defines the security state of the parallel port.')
parallelPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 7), DellParallelPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortConnectorType.setDescription('1000.0070.0001.0007 This attribute defines the connector type of the parallel port.')
parallelPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortName.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortName.setDescription('1000.0070.0001.0008 This attribute defines the name of the parallel port.')
parallelPortConnectorPinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 9), DellParallelPortConnectorPinout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortConnectorPinOut.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortConnectorPinOut.setDescription('1000.0070.0001.0009 This attribute defines the pinout of the parallel port.')
parallelPortCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 10), DellParallelPortCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortCapabilitiesUnique.setDescription('1000.0070.0001.0010 This attribute defines the mode capabilities of the parallel port.')
parallelPortBaseIOAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 11), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortBaseIOAddress.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortBaseIOAddress.setDescription('1000.0070.0001.0011 This attribute defines the base Input/Output address of the parallel port.')
parallelPortIRQLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 12), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortIRQLevel.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortIRQLevel.setDescription('1000.0070.0001.0012 This attribute defines the Interrupt Request Level of the parallel port.')
parallelPortDMASupport = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 70, 1, 13), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortDMASupport.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortDMASupport.setDescription('1000.0070.0001.0013 This attribute defines if DMA is supported by the parallel port.')
class DellSerialPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsDB9PinMale", 3), ("connectorPortTypeIsDB9PinFemale", 4), ("connectorPortTypeIsDB25PinMale", 5), ("connectorPortTypeIsDB25PinFemale", 6), ("connectorPortTypeIsRJ11", 7), ("connectorPortTypeIsRJ45", 8), ("connectorPortTypeIsProprietary", 9), ("connectorPortTypeIsCirdin8Male", 10), ("connectorPortTypeIsCirdin8Female", 11), ("connectorPortTypeIsMiniCentronics14", 12), ("connectorPortTypeIsMiniCentronics26", 13))

class DellSerialPortCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("xtorATCapable", 4), ("c16450Capable", 8), ("c16550Capable", 16), ("c16550aCapable", 32), ("c8251Capable", 64), ("c8251FIFOCapable", 128))

serialPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80), )
if mibBuilder.loadTexts: serialPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortTable.setDescription('1000.0080 This object defines the Serial Port Table.')
serialPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1), ).setIndexNames((0, "MIB-Dell-10892", "serialPortchassisIndex"), (0, "MIB-Dell-10892", "serialPortIndex"))
if mibBuilder.loadTexts: serialPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortTableEntry.setDescription('1000.0080.0001 This object defines the Serial Port Table Entry.')
serialPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortchassisIndex.setDescription('1000.0080.0001.0001 This attribute defines the index (one based) of the associated chassis.')
serialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortIndex.setDescription('1000.0080.0001.0002 This attribute defines the index (one based) of the serial port.')
serialPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortStateCapabilities.setDescription('1000.0080.0001.0003 This attribute defines the state capabilities of the serial port.')
serialPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortStateSettings.setDescription('1000.0080.0001.0004 This attribute defines the state settings of the serial port.')
serialPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortStatus.setDescription('1000.0080.0001.0005 This attribute defines the status of the serial port.')
serialPortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortSecurityState.setDescription('1000.0080.0001.0006 This attribute defines the security state of the serial port.')
serialPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 7), DellSerialPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortConnectorType.setDescription('1000.0080.0001.0007 This attribute defines the connector type of the serial port.')
serialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortName.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortName.setDescription('1000.0080.0001.0008 This attribute defines the name of the serial port.')
serialPortMaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 9), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortMaximumSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortMaximumSpeed.setDescription('1000.0080.0001.0009 This attribute defines the maximum speed the serial port can support in bits per second. 0 (zero) indicates maximum speed is unknown.')
serialPortCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 10), DellSerialPortCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortCapabilitiesUnique.setDescription('1000.0080.0001.0010 This attribute defines the mode capabilities of the serial port.')
serialPortBaseIOAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 11), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortBaseIOAddress.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortBaseIOAddress.setDescription('1000.0080.0001.0011 This attribute defines the base Input/Output address of the serial port.')
serialPortIRQLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 80, 1, 12), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortIRQLevel.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortIRQLevel.setDescription('1000.0080.0001.0012 This attribute defines the Interrupt Request Level of the serial port.')
class DellUSBPortConnectorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("connectorPortTypeIsOther", 1), ("connectorPortTypeIsUnknown", 2), ("connectorPortTypeIsUSB", 3))

uSBPortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90), )
if mibBuilder.loadTexts: uSBPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortTable.setDescription('1000.0090 This object defines the Universal Serial Bus (USB) Port Table.')
uSBPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1), ).setIndexNames((0, "MIB-Dell-10892", "uSBPortchassisIndex"), (0, "MIB-Dell-10892", "uSBPortIndex"))
if mibBuilder.loadTexts: uSBPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortTableEntry.setDescription('1000.0090.0001 This object defines the USB Port Table Entry.')
uSBPortchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortchassisIndex.setDescription('1000.0090.0001.0001 This attribute defines the index (one based) of the associated chassis.')
uSBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortIndex.setDescription('1000.0090.0001.0002 This attribute defines the index (one based) of the USB port.')
uSBPortStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortStateCapabilities.setDescription('1000.0090.0001.0003 This attribute defines the state capabilities of the USB port.')
uSBPortStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortStateSettings.setDescription('1000.0090.0001.0004 This attribute defines the state settings of the USB port.')
uSBPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortStatus.setDescription('1000.0090.0001.0005 This attribute defines the status of the USB port.')
uSBPortSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 6), DellPortSecurityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortSecurityState.setDescription('1000.0090.0001.0006 This attribute defines the security state of the USB port.')
uSBPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 7), DellUSBPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortConnectorType.setDescription('1000.0090.0001.0007 This attribute defines the connector type of the USB port.')
uSBPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortName.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortName.setDescription('1000.0090.0001.0008 This attribute defines name of the USB port.')
uSBPortBIOSConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1000, 90, 1, 9), DellGenericPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSBPortBIOSConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: uSBPortBIOSConnectorType.setDescription('1000.0090.0001.0009 This attribute defines the BIOS connector type of the USB port.')
class DellPointingDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsAMouse", 3), ("deviceTypeIsATrackBall", 4), ("deviceTypeIsATrackPoint", 5), ("deviceTypeIsAGlidePoint", 6), ("deviceTypeIsATouchPad", 7))

pointingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10), )
if mibBuilder.loadTexts: pointingDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDeviceTable.setDescription('1100.0010 This object defines the Pointing Device Table.')
pointingDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "pointingDevicechassisIndex"), (0, "MIB-Dell-10892", "pointingDeviceIndex"))
if mibBuilder.loadTexts: pointingDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDeviceTableEntry.setDescription('1100.0010.0001 This object defines the Pointing Device Table Entry.')
pointingDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDevicechassisIndex.setDescription('1100.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
pointingDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDeviceIndex.setDescription('1100.0010.0001.0002 This attribute defines the index (one based) of the pointing device.')
pointingDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDeviceStateCapabilities.setDescription('1100.0010.0001.0003 This attribute defines the state capabilities of the pointing device.')
pointingDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDeviceStateSettings.setDescription('1100.0010.0001.0004 This attribute defines the state settings of the pointing device.')
pointingDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDeviceStatus.setDescription('1100.0010.0001.0005 This attribute defines the status of the pointing device.')
pointingPortIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingPortIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: pointingPortIndexReference.setDescription('1100.0010.0001.0006 This attribute defines the index (one based) of the associated pointing port in the same chassis.')
pointingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1, 7), DellPointingDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDeviceType.setDescription('1100.0010.0001.0007 This attribute defines the type of the pointing device.')
pointingDeviceNumberofButtons = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 10, 1, 8), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceNumberofButtons.setStatus('mandatory')
if mibBuilder.loadTexts: pointingDeviceNumberofButtons.setDescription('1100.0010.0001.0008 This attribute defines the number of buttons on the pointing device.')
keyboardDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20), )
if mibBuilder.loadTexts: keyboardDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDeviceTable.setDescription('1100.0020 This object defines the Keyboard Device Table.')
keyboardDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "keyboardDevicechassisIndex"), (0, "MIB-Dell-10892", "keyboardDeviceIndex"))
if mibBuilder.loadTexts: keyboardDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDeviceTableEntry.setDescription('1100.0020.0001 This object defines the Keyboard Device Table Entry.')
keyboardDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDevicechassisIndex.setDescription('1100.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
keyboardDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDeviceIndex.setDescription('1100.0020.0001.0002 This attribute defines the index (one based) of the keyboard device.')
keyboardDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDeviceStateCapabilities.setDescription('1100.0020.0001.0003 This attribute defines the state capabilities of the keyboard device.')
keyboardDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDeviceStateSettings.setDescription('1100.0020.0001.0004 This attribute defines the state settings of the keyboard device.')
keyboardDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDeviceStatus.setDescription('1100.0020.0001.0005 This attribute defines the status of the keyboard device.')
keyboardPortIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPortIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardPortIndexReference.setDescription('1100.0020.0001.0006 This attribute defines the index (one based) of the associated keyboard device in the same chassis.')
keyboardDeviceTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardDeviceTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDeviceTypeName.setDescription('1100.0020.0001.0007 This attribute defines the name of the keyboard device type.')
keyboardDeviceLayoutName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 20, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardDeviceLayoutName.setStatus('mandatory')
if mibBuilder.loadTexts: keyboardDeviceLayoutName.setDescription('1100.0020.0001.0008 This attribute defines the name of the keyboard device layout.')
class DellProcessorDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsCPU", 3), ("deviceTypeIsMathProcessor", 4), ("deviceTypeIsDSP", 5), ("deviceTypeIsAVideoProcessor", 6))

class DellProcessorDeviceFamily(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 101, 112, 120, 121, 122, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 250, 251))
    namedValues = NamedValues(("deviceFamilyIsOther", 1), ("deviceFamilyIsUnknown", 2), ("deviceFamilyIs8086", 3), ("deviceFamilyIs80286", 4), ("deviceFamilyIsIntel386", 5), ("deviceFamilyIsIntel486", 6), ("deviceFamilyIs8087", 7), ("deviceFamilyIs80287", 8), ("deviceFamilyIs80387", 9), ("deviceFamilyIs80487", 10), ("deviceFamilyIsPentium", 11), ("deviceFamilyIsPentiumPro", 12), ("deviceFamilyIsPentiumII", 13), ("deviceFamilyIsPentiumMMX", 14), ("deviceFamilyIsCeleron", 15), ("deviceFamilyIsPentiumIIXeon", 16), ("deviceFamilyIsPentiumIII", 17), ("deviceFamilyIsPentiumIIIXeon", 18), ("deviceFamilyIsPentiumIIISpeedStep", 19), ("deviceFamilyIsItanium", 20), ("deviceFamilyIsIntelXeon", 21), ("deviceFamilyIsPentium4", 22), ("deviceFamilyIsIntelXeonMP", 23), ("deviceFamilyIsIntelItanium2", 24), ("deviceFamilyIsK5", 25), ("deviceFamilyIsK6", 26), ("deviceFamilyIsK6-2", 27), ("deviceFamilyIsK6-3", 28), ("deviceFamilyIsAMDAthlon", 29), ("deviceFamilyIsAMD2900", 30), ("deviceFamilyIsK6-2Plus", 31), ("deviceFamilyIsPowerPC", 32), ("deviceFamilyIsPowerPC601", 33), ("deviceFamilyIsPowerPC603", 34), ("deviceFamilyIsPowerPC603Plus", 35), ("deviceFamilyIsPowerPC604", 36), ("deviceFamilyIsPowerPC620", 37), ("deviceFamilyIsPowerPCx704", 38), ("deviceFamilyIsPowerPC750", 39), ("deviceFamilyIsIntelCoreDuo", 40), ("deviceFamilyIsIntelCoreDuoMobile", 41), ("deviceFamilyIsIntelCoreSoloMobile", 42), ("deviceFamilyIsIntelAtom", 43), ("deviceFamilyIsAlpha", 48), ("deviceFamilyIsAlpha21064", 49), ("deviceFamilyIsAlpha21066", 50), ("deviceFamilyIsAlpha21164", 51), ("deviceFamilyIsAlpha21164PC", 52), ("deviceFamilyIsAlpha21164a", 53), ("deviceFamilyIsAlpha21264", 54), ("deviceFamilyIsAlpha21364", 55), ("deviceFamilyIsAMDTurionIIUltraDualMobileM", 56), ("deviceFamilyIsAMDTurionIIDualMobileM", 57), ("deviceFamilyIsAMDAthlonIIDualMobileM", 58), ("deviceFamilyIsAMDOpteron6100", 59), ("deviceFamilyIsAMDOpteron4100", 60), ("deviceFamilyIsAMDOpteron6200", 61), ("deviceFamilyIsAMDOpteron4200", 62), ("deviceFamilyIsMIPS", 64), ("deviceFamilyIsMIPSR4000", 65), ("deviceFamilyIsMIPSR4200", 66), ("deviceFamilyIsMIPSR4400", 67), ("deviceFamilyIsMIPSR4600", 68), ("deviceFamilyIsMIPSR10000", 69), ("deviceFamilyIsSPARC", 80), ("deviceFamilyIsSuperSPARC", 81), ("deviceFamilyIsmicroSPARCII", 82), ("deviceFamilyIsmicroSPARCIIep", 83), ("deviceFamilyIsUltraSPARC", 84), ("deviceFamilyIsUltraSPARCII", 85), ("deviceFamilyIsUltraSPARCIIi", 86), ("deviceFamilyIsUltraSPARCIII", 87), ("deviceFamilyIsUltraSPARCIIIi", 88), ("deviceFamilyIs68040", 96), ("deviceFamilyIs68xxx", 97), ("deviceFamilyIs68000", 98), ("deviceFamilyIs68010", 99), ("deviceFamilyIs68020", 100), ("deviceFamilyIs68030", 101), ("deviceFamilyIsHobbit", 112), ("deviceFamilyIsCrusoeTM5000", 120), ("deviceFamilyIsCrusoeTM3000", 121), ("deviceFamilyIsEfficeonTM8000", 122), ("deviceFamilyIsWeitek", 128), ("deviceFamilyIsIntelCeleronM", 130), ("deviceFamilyIsAMDAthlon64", 131), ("deviceFamilyIsAMDOpteron", 132), ("deviceFamilyIsAMDSempron", 133), ("deviceFamilyIsAMDTurion64Mobile", 134), ("deviceFamilyIsDualCoreAMDOpteron", 135), ("deviceFamilyIsAMDAthlon64X2DualCore", 136), ("deviceFamilyIsAMDTurion64X2Mobile", 137), ("deviceFamilyIsQuadCoreAMDOpteron", 138), ("deviceFamilyIsThirdGenerationAMDOpteron", 139), ("deviceFamilyIsAMDPhenomFXQuadCore", 140), ("deviceFamilyIsAMDPhenomX4QuadCore", 141), ("deviceFamilyIsAMDPhenomX2DualCore", 142), ("deviceFamilyIsAMDAthlonX2DualCore", 143), ("deviceFamilyIsPA-RISC", 144), ("deviceFamilyIsPA-RISC8500", 145), ("deviceFamilyIsPA-RISC8000", 146), ("deviceFamilyIsPA-RISC7300LC", 147), ("deviceFamilyIsPA-RISC7200", 148), ("deviceFamilyIsPA-RISC7100LC", 149), ("deviceFamilyIsPA-RISC7100", 150), ("deviceFamilyIsV30", 160), ("deviceFamilyIsQuadCoreIntelXeon3200", 161), ("deviceFamilyIsDualCoreIntelXeon3000", 162), ("deviceFamilyIsQuadCoreIntelXeon5300", 163), ("deviceFamilyIsDualCoreIntelXeon5100", 164), ("deviceFamilyIsDualCoreIntelXeon5000", 165), ("deviceFamilyIsDualCoreIntelXeonLV", 166), ("deviceFamilyIsDualCoreIntelXeonULV", 167), ("deviceFamilyIsDualCoreIntelXeon7100", 168), ("deviceFamilyIsQuadCoreIntelXeon5400", 169), ("deviceFamilyIsQuadCoreIntelXeon", 170), ("deviceFamilyIsDualCoreIntelXeon5200", 171), ("deviceFamilyIsDualCoreIntelXeon7200", 172), ("deviceFamilyIsQuadCoreIntelXeon7300", 173), ("deviceFamilyIsQuadCoreIntelXeon7400", 174), ("deviceFamilyIsMultiCoreIntelXeon7400", 175), ("deviceFamilyIsM1", 176), ("deviceFamilyIsM2", 177), ("deviceFamilyIsIntelPentium4HT", 179), ("deviceFamilyIsAS400", 180), ("deviceFamilyIsAMDAthlonXP", 182), ("deviceFamilyIsAMDAthlonMP", 183), ("deviceFamilyIsAMDDuron", 184), ("deviceFamilyIsIntelPentiumM", 185), ("deviceFamilyIsIntelCeleronD", 186), ("deviceFamilyIsIntelPentiumD", 187), ("deviceFamilyIsIntelPentiumExtreme", 188), ("deviceFamilyIsIntelCoreSolo", 189), ("deviceFamilyIsIntelCore2", 190), ("deviceFamilyIsIntelCore2Duo", 191), ("deviceFamilyIsIntelCore2Solo", 192), ("deviceFamilyIsIntelCore2Extreme", 193), ("deviceFamilyIsIntelCore2Quad", 194), ("deviceFamilyIsIntelCore2ExtremeMobile", 195), ("deviceFamilyIsIntelCore2DuoMobile", 196), ("deviceFamilyIsIntelCore2SoloMobile", 197), ("deviceFamilyIsIntelCorei7", 198), ("deviceFamilyIsDualCoreIntelCeleron", 199), ("deviceFamilyIsIBM390", 200), ("deviceFamilyIsG4", 201), ("deviceFamilyIsG5", 202), ("deviceFamilyIsESA390G6", 203), ("deviceFamilyIszArchitectur", 204), ("deviceFamilyIsIntelCorei5", 205), ("deviceFamilyIsIntelCorei3", 206), ("deviceFamilyIsVIAC7-M", 210), ("deviceFamilyIsVIAC7-D", 211), ("deviceFamilyIsVIAC7", 212), ("deviceFamilyIsVIAEden", 213), ("deviceFamilyIsMultiCoreIntelXeon", 214), ("deviceFamilyIsDualCoreIntelXeon3xxx", 215), ("deviceFamilyIsQuadCoreIntelXeon3xxx", 216), ("deviceFamilyIsVIANano", 217), ("deviceFamilyIsDualCoreIntelXeon5xxx", 218), ("deviceFamilyIsQuadCoreIntelXeon5xxx", 219), ("deviceFamilyIsDualCoreIntelXeon7xxx", 221), ("deviceFamilyIsQuadCoreIntelXeon7xxx", 222), ("deviceFamilyIsMultiCoreIntelXeon7xxx", 223), ("deviceFamilyIsMultiCoreIntelXeon3400", 224), ("deviceFamilyIsEmbeddedAMDOpertonQuadCore", 230), ("deviceFamilyIsAMDPhenomTripleCore", 231), ("deviceFamilyIsAMDTurionUltraDualCoreMobile", 232), ("deviceFamilyIsAMDTurionDualCoreMobile", 233), ("deviceFamilyIsAMDAthlonDualCore", 234), ("deviceFamilyIsAMDSempronSI", 235), ("deviceFamilyIsAMDPhenomII", 236), ("deviceFamilyIsAMDAthlonII", 237), ("deviceFamilyIsSixCoreAMDOpteron", 238), ("deviceFamilyIsAMDSempronM", 239), ("deviceFamilyIsi860", 250), ("deviceFamilyIsi960", 251))

class DellProcessorDeviceStatusState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("userDisabled", 4), ("biosDisabled", 5), ("idle", 6))

class DellProcessorUpgradeInformation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("processorUpgradeIsOther", 1), ("processorUpgradeIsUnknown", 2), ("processorUpgradeIsByDaughterBoard", 3), ("processorUpgradeIsByZIFSocket", 4), ("processorUpgradeIsByReplacement", 5), ("processorUpgradeIsNone", 6), ("processorUpgradeIsByLIFSocket", 7), ("processorUpgradeIsBySlot1", 8), ("processorUpgradeIsBySlot2", 9), ("processorUpgradeIsBy370PinSocket", 10), ("processorUpgradeIsBySlotA", 11), ("processorUpgradeIsBySlotM", 12), ("processorUpgradeIsByScoket423", 13), ("processorUpgradeIsBySocketA", 14), ("processorUpgradeIsBySocket478", 15), ("processorUpgradeIsBySocket754", 16), ("processorUpgradeIsBySocket940", 17), ("processorUpgradeIsBySocket939", 18), ("processorUpgradeIsBySocketmPGA604", 19), ("processorUpgradeIsBySocketLGA771", 20), ("processorUpgradeIsBySocketLGA775", 21), ("processorUpgradeIsBySocketS1", 22), ("processorUpgradeIsBySocketAM2", 23), ("processorUpgradeIsBySocketF", 24), ("processorUpgradeIsBySocketLGA1366", 25))

processorDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30), )
if mibBuilder.loadTexts: processorDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceTable.setDescription('1100.0030 This object defines the Processor Device Table.')
processorDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "processorDevicechassisIndex"), (0, "MIB-Dell-10892", "processorDeviceIndex"))
if mibBuilder.loadTexts: processorDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceTableEntry.setDescription('1100.0030.0001 This object defines the Processor Device Table Entry.')
processorDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorDevicechassisIndex.setDescription('1100.0030.0001.0001 This attribute defines the index (one based) of the associated chassis.')
processorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceIndex.setDescription('1100.0030.0001.0002 This attribute defines the index (one based) of the processor device.')
processorDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStateCapabilities.setDescription('1100.0030.0001.0003 This attribute defines the state capabilities of the processor device.')
processorDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStateSettings.setDescription('1100.0030.0001.0004 This attribute defines the state settings of the processor device.')
processorDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatus.setDescription('1100.0030.0001.0005 This attribute defines the status of the processor device.')
processorPortIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPortIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: processorPortIndexReference.setDescription('1100.0030.0001.0006 This attribute defines the index (one based) of the associated processor port in the same chassis.')
processorDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 7), DellProcessorDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceType.setDescription('1100.0030.0001.0007 This attribute defines the type of the processor device.')
processorDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceManufacturerName.setDescription('1100.0030.0001.0008 This attribute defines the name of the manufacturer of the processor device.')
processorDeviceStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 9), DellProcessorDeviceStatusState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusState.setDescription('1100.0030.0001.0009 This attribute defines the status state of the processor device.')
processorDeviceFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 10), DellProcessorDeviceFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceFamily.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceFamily.setDescription('1100.0030.0001.0010 This attribute defines the family of the processor device.')
processorDeviceMaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 11), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceMaximumSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceMaximumSpeed.setDescription('1100.0030.0001.0011 This attribute defines the maximum speed of the processor device in MHz. Zero indicates the maximum speed is unknown.')
processorDeviceCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 12), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCurrentSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceCurrentSpeed.setDescription('1100.0030.0001.0012 This attribute defines the current speed of the processor device in MHz. Zero indicates the current speed is unknown.')
processorDeviceExternalClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 13), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExternalClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceExternalClockSpeed.setDescription('1100.0030.0001.0013 This attribute defines the speed of the external clock for the processor device in MHz. Zero indicates the external clock speed is unknown.')
processorDeviceVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 14), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceVoltage.setDescription('1100.0030.0001.0014 This attribute defines the voltage powering the processor device in millivolts. Zero indicates the voltage is unknown.')
processorDeviceUpgradeInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 15), DellProcessorUpgradeInformation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceUpgradeInformation.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceUpgradeInformation.setDescription('1100.0030.0001.0015 This attribute defines the processor upgrade information for the processor device.')
processorDeviceVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 16), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceVersionName.setDescription('1100.0030.0001.0016 This attribute defines the version of the processor device. On some systems, this value contains the brand and stepping information; on other systems, this value contains the model and stepping information.')
processorDeviceCoreCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 17), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCoreCount.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceCoreCount.setDescription('1100.0030.0001.0017 This attribute defines the number of processor cores detected for the processor device.')
processorDeviceCoreEnabledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 18), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCoreEnabledCount.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceCoreEnabledCount.setDescription('1100.0030.0001.0018 This attribute defines the number of processor cores enabled for the processor device.')
processorDeviceThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 19), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceThreadCount.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceThreadCount.setDescription('1100.0030.0001.0019 This attribute defines the number of processor threads detected for the processor device.')
processorDeviceCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 20), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceCharacteristics.setDescription('1100.0030.0001.0020 This attribute defines characteristics of the processor device. This attribute is a bit field where a bit has the meaning defined below when set to 1 (one). NOTE: Bits 2-15 need to be examined in the context of bit 1. If bit 1 is set, the processor charactistics are unknown and bits 2-15 cannot be used to determine if the functions associated with the bits are supported. Bit Position Meaning if Set -------- -------------- Bit 0 Reserved Bit 1 Unknown Bit 2 64-bit capable Bit 3-15 Reserved')
processorDeviceExtendedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 21), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExtendedCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceExtendedCapabilities.setDescription('1100.0030.0001.0021 This attribute defines extended capabilities of the processor device. This attribute is a bit field where a bit has the meaning defined below when set to 1 (one). Bit Position Meaning if Set -------- -------------- Bit 0 Virtualization Technology (VT) supported Bit 1 Demand-Based Switching (DBS) supported Bit 2 eXecute Disable (XD) supported Bit 3 Hyper-Threading (HT) supported')
processorDeviceExtendedSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 22), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExtendedSettings.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceExtendedSettings.setDescription('1100.0030.0001.0022 This attribute defines extended settings of the processor device. This attribute is a bit field where a bit has the meaning defined below when set to 1 (one). Bit Position Meaning if Set -------- -------------- Bit 0 Virtualization Technology (VT) enabled Bit 1 Demand Based Switching (DBS) enabled Bit 2 eXecute Disable (XD) enabled Bit 3 Hyper-Threading (HT) enabled')
processorDeviceBrandName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 23), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceBrandName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceBrandName.setDescription('1100.0030.0001.0023 This attribute defines the brand of the processor device.')
processorDeviceModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 24), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceModelName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceModelName.setDescription('1100.0030.0001.0024 This attribute defines the model of the processor device.')
processorDeviceSteppingName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 30, 1, 25), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceSteppingName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceSteppingName.setDescription('1100.0030.0001.0025 This attribute defines the stepping of the processor device.')
class DellProcessorDeviceStatusReading(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 32, 128, 256, 512, 1024))
    namedValues = NamedValues(("internalError", 1), ("thermalTrip", 2), ("configurationError", 32), ("processorPresent", 128), ("processorDisabled", 256), ("terminatorPresent", 512), ("processorThrottled", 1024))

processorDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32), )
if mibBuilder.loadTexts: processorDeviceStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusTable.setDescription('1100.0032 This object defines the Processor Device Status Table.')
processorDeviceStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1), ).setIndexNames((0, "MIB-Dell-10892", "processorDeviceStatusChassisIndex"), (0, "MIB-Dell-10892", "processorDeviceStatusIndex"))
if mibBuilder.loadTexts: processorDeviceStatusTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusTableEntry.setDescription('1100.0032.0001 This object defines the Processor Device Status Table Entry.')
processorDeviceStatusChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusChassisIndex.setDescription('1100.0032.0001.0001 This attribute defines the index (one based) of the associated chassis.')
processorDeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusIndex.setDescription('1100.0032.0001.0002 This attribute defines the index (one based) of the processor device status probe.')
processorDeviceStatusStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusStateCapabilities.setDescription('1100.0032.0001.0003 This attribute defines the state capabilities of the processor device status probe.')
processorDeviceStatusStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusStateSettings.setDescription('1100.0032.0001.0004 This attribute defines the state settings of the processor device status probe.')
processorDeviceStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusStatus.setDescription('1100.0032.0001.0005 This attribute defines the status of the processor device status probe. This status will be joined into the processorDeviceStatus attribute.')
processorDeviceStatusReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1, 6), DellProcessorDeviceStatusReading()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusReading.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusReading.setDescription('1100.0032.0001.0006 This attribute defines the reading of the processor device status probe.')
processorDeviceStatusLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusLocationName.setDescription('1100.0032.0001.0007 This attribute defines the location name of the processor device status probe.')
processorDeviceStatusPortIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 32, 1, 8), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusPortIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusPortIndexReference.setDescription('1100.0032.0001.0008 This attribute defines the index (one based) of the associated processor port in the same chassis.')
class DellCacheDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsInstruction", 3), ("deviceTypeIsData", 4), ("deviceTypeIsUnified", 5))

class DellCacheDeviceLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("deviceLevelIsOther", 1), ("deviceLevelIsUnknown", 2), ("deviceLevelIsPrimary", 3), ("deviceLevelIsSecondary", 4), ("deviceLevelIsTertiary", 5))

class DellCacheDeviceWritePolicy(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("deviceWritePolicyIsOther", 1), ("deviceWritePolicyIsUnknown", 2), ("deviceWritePolicyIsWriteBack", 3), ("deviceWritePolicyIsWriteThrough", 4), ("deviceWritePolicyIsVariesByAddress", 5), ("deviceWritePolicyIsDeterminedByIO", 6))

class DellCacheDeviceStatusState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("userDisabled", 4), ("biosDisabled", 5))

class DellCacheDeviceECCType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("deviceECCTypeIsOther", 1), ("deviceECCTypeIsUnknown", 2), ("deviceECCTypeIsNone", 3), ("deviceECCTypeIsParity", 4), ("deviceECCTypeIsSingleBitECC", 5), ("deviceECCTypeIsMultiBitECC", 6), ("deviceECCTypeIsCRC", 7))

class DellCacheDeviceAssociativity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("deviceAssociativityIsOther", 1), ("deviceAssociativityIsUnknown", 2), ("deviceAssociativityIsDirectMapped", 3), ("deviceAssociativityIsTwoWaySetAssociative", 4), ("deviceAssociativityIsFourWaySetAssociative", 5), ("deviceAssociativityIsFullyAssociative", 6), ("deviceAssociativityIsEightWaySetAssociative", 7), ("deviceAssociativityIsSixteenWaySetAssociative", 8), ("deviceAssociativityIs12WaySetAssociative", 9), ("deviceAssociativityIs24WaySetAssociative", 10), ("deviceAssociativityIs32WaySetAssociative", 11), ("deviceAssociativityIs48WaySetAssociative", 12), ("deviceAssociativityIs64WaySetAssociative", 13))

class DellCacheDeviceLocation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("deviceLocationIsOther", 1), ("deviceLocationIsUnknown", 2), ("deviceLocationIsInternal", 3), ("deviceLocationIsExternal", 4))

class DellCacheDeviceSRAMType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("deviceSRAMTypeIsOther", 1), ("deviceSRAMTypeIsUnknown", 2), ("deviceSRAMTypeIsNonBurst", 3), ("deviceSRAMTypeIsBurst", 4), ("deviceSRAMTypeIsPipeBurst", 5), ("deviceSRAMTypeIsSynchronous", 6), ("deviceSRAMTypeIsAsynchronous", 7))

cacheDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40), )
if mibBuilder.loadTexts: cacheDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceTable.setDescription('1100.0040 This object defines the Cache Device Table.')
cacheDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1), ).setIndexNames((0, "MIB-Dell-10892", "cacheDevicechassisIndex"), (0, "MIB-Dell-10892", "cacheDeviceIndex"))
if mibBuilder.loadTexts: cacheDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceTableEntry.setDescription('1100.0040.0001 This object defines the Cache Device Table Entry.')
cacheDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDevicechassisIndex.setDescription('1100.0040.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cacheDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceIndex.setDescription('1100.0040.0001.0002 This attribute defines the index (one based) of the cache device.')
cacheDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceStateCapabilities.setDescription('1100.0040.0001.0003 This attribute defines the state capabilities of the cache device.')
cacheDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceStateSettings.setDescription('1100.0040.0001.0004 This attribute defines the state settings of the cache device.')
cacheDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceStatus.setDescription('1100.0040.0001.0005 This attribute defines the status of the cache device.')
cacheDeviceprocessorDeviceIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceprocessorDeviceIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceprocessorDeviceIndexReference.setDescription('1100.0040.0001.0006 This attribute defines the index (one based) of the processor device associated with the cache device.')
cacheDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 7), DellCacheDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceType.setDescription('1100.0040.0001.0007 This attribute defines the type of cache device.')
cacheDeviceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 8), DellCacheDeviceLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceLocation.setDescription('1100.0040.0001.0008 This attribute defines the location of the cache device.')
cacheDeviceStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 9), DellCacheDeviceStatusState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceStatusState.setDescription('1100.0040.0001.0009 This attribute defines the status state of the cache device.')
cacheDeviceExternalSocketName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 10), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceExternalSocketName.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceExternalSocketName.setDescription('1100.0040.0001.0010 This attribute defines the name of the external socket name of the cache device if the cache device is socketed.')
cacheDeviceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 11), DellCacheDeviceLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceLevel.setDescription('1100.0040.0001.0011 This attribute defines the level of the cache device.')
cacheDeviceMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 12), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceMaximumSize.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceMaximumSize.setDescription('1100.0040.0001.0012 This attribute defines the maximum size of the cache device in KBytes. Zero indicates the maximum size is unknown.')
cacheDeviceCurrentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 13), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceCurrentSize.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceCurrentSize.setDescription('1100.0040.0001.0013 This attribute defines the current size of the cache device in KBytes. Zero indicates the current size is unknown.')
cacheDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 14), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceSpeed.setDescription('1100.0040.0001.0014 This attribute defines the speed of the cache device in nanoseconds. Zero indicates the speed is unknown.')
cacheDeviceWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 15), DellCacheDeviceWritePolicy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceWritePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceWritePolicy.setDescription('1100.0040.0001.0015 This attribute defines the write policy of the cache device.')
cacheDeviceIsSocketed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 16), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceIsSocketed.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceIsSocketed.setDescription('1100.0040.0001.0016 This attribute defines if the cache device is socketed or not.')
cacheDeviceECCType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 17), DellCacheDeviceECCType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceECCType.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceECCType.setDescription('1100.0040.0001.0017 This attribute defines the type of error correction in use by the cache device.')
cacheDeviceAssociativity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 18), DellCacheDeviceAssociativity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceAssociativity.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceAssociativity.setDescription('1100.0040.0001.0018 This attribute defines the type of associativity in use by the cache device.')
cacheDeviceSupportedType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 19), DellCacheDeviceSRAMType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceSupportedType.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceSupportedType.setDescription('1100.0040.0001.0019 This attribute defines the supported SRAM type of the cache device.')
cacheDeviceCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 40, 1, 20), DellCacheDeviceSRAMType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeviceCurrentType.setStatus('mandatory')
if mibBuilder.loadTexts: cacheDeviceCurrentType.setDescription('1100.0040.0001.0020 This attribute defines the current SRAM type of the cache device.')
class DellMemoryDeviceFormFactor(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("deviceFormFactorIsOther", 1), ("deviceFormFactorIsUnknown", 2), ("deviceFormFactorIsSIMM", 3), ("deviceFormFactorIsSIP", 4), ("deviceFormFactorIsAChip", 5), ("deviceFormFactorIsDIP", 6), ("deviceFormFactorIsZIP", 7), ("deviceFormFactorIsAProprietaryCard", 8), ("deviceFormFactorIsDIMM", 9), ("deviceFormFactorIsTSOP", 10), ("deviceFormFactorIsARowOfChips", 11), ("deviceFormFactorIsRIMM", 12), ("deviceFormFactorIsSODIMM", 13), ("deviceFormFactorIsSRIMM", 14), ("deviceFormFactorIsFBDIMM", 15))

class DellMemoryDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsDRAM", 3), ("deviceTypeIsEDRAM", 4), ("deviceTypeIsVRAM", 5), ("deviceTypeIsSRAM", 6), ("deviceTypeIsRAM", 7), ("deviceTypeIsROM", 8), ("deviceTypeIsFLASH", 9), ("deviceTypeIsEEPROM", 10), ("deviceTypeIsFEPROM", 11), ("deviceTypeIsEPROM", 12), ("deviceTypeIsCDRAM", 13), ("deviceTypeIs3DRAM", 14), ("deviceTypeIsSDRAM", 15), ("deviceTypeIsSGRAM", 16), ("deviceTypeIsRDRAM", 17), ("deviceTypeIsDDR", 18), ("deviceTypeIsDDR2", 19), ("deviceTypeIsDDR2FBDIMM", 20), ("deviceTypeIsDDR3", 24), ("deviceTypeIsFBD2", 25))

class DellMemoryDeviceRank(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))
    namedValues = NamedValues(("deviceRankIsUnknown", 1), ("deviceRankIsSingle", 2), ("deviceRankIsDual", 4), ("deviceRankIsQuad", 8), ("deviceRankIsOctal", 16), ("deviceRankIsHexa", 32))

class DellMemoryDeviceTypeDetails(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384))
    namedValues = NamedValues(("deviceTypeDetailIsOther", 2), ("deviceTypeDetailIsUnknown", 4), ("deviceTypeDetailIsFastPaged", 8), ("deviceTypeDetailIsStaticColumn", 16), ("deviceTypeDetailIsPseudoStatic", 32), ("deviceTypeDetailIsRAMBUS", 64), ("deviceTypeDetailIsSynchronous", 128), ("deviceTypeDetailIsCMOS", 256), ("deviceTypeDetailIsEDO", 512), ("deviceTypeDetailIsWindowDRAM", 1024), ("deviceTypeDetailIsCacheDRAM", 2048), ("deviceTypeDetailIsNonVolatile", 4096), ("deviceTypeDetailIsRegistered", 8192), ("deviceTypeDetailIsNonRegistered", 16384))

class DellMemoryDeviceFailureModes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("eccSingleBitCorrectionWarningRate", 1), ("eccSingleBitCorrectionFailureRate", 2), ("eccMultiBitFault", 4), ("eccSingleBitCorrectionLoggingDisabled", 8), ("deviceDisabledBySpareActivation", 16))

memoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50), )
if mibBuilder.loadTexts: memoryDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceTable.setDescription('1100.0050 This object defines the Memory Device Table.')
memoryDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1), ).setIndexNames((0, "MIB-Dell-10892", "memoryDevicechassisIndex"), (0, "MIB-Dell-10892", "memoryDeviceIndex"))
if mibBuilder.loadTexts: memoryDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceTableEntry.setDescription('1100.0050.0001 This object defines the Memory Device Table Entry.')
memoryDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicechassisIndex.setDescription('1100.0050.0001.0001 This attribute defines the index (one based) of the associated chassis.')
memoryDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceIndex.setDescription('1100.0050.0001.0002 This attribute defines the index (one based) of the memory device.')
memoryDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceStateCapabilities.setDescription('1100.0050.0001.0003 This attribute defines the state capabilities of the memory device.')
memoryDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceStateSettings.setDescription('1100.0050.0001.0004 This attribute defines the state settings of the memory device.')
memoryDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceStatus.setDescription('1100.0050.0001.0005 This attribute defines the status of the memory device.')
memoryDeviceMemoryPortIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMemoryPortIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMemoryPortIndexReference.setDescription('1100.0050.0001.0006 This attribute defines the index (one based) of the memory port that this memory device is part of.')
memoryDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 7), DellMemoryDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceType.setDescription('1100.0050.0001.0007 This attribute defines the type of the memory device.')
memoryDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceLocationName.setDescription('1100.0050.0001.0008 This attribute defines the location of the memory device.')
memoryDeviceErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 9), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceErrorCount.setStatus('deprecated')
if mibBuilder.loadTexts: memoryDeviceErrorCount.setDescription('1100.0050.0001.0009 This attribute defines the total number of ECC corrections for the memory device. Writing a 0 (zero) to this variable will reset the error counts for the device. **NOTE: This attribute is deprecated and replaced by memoryDeviceFailureModes. The value will always be zero. Writing a 0 (zero) has no effect.')
memoryDeviceBankLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 10), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceBankLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceBankLocationName.setDescription('1100.0050.0001.0010 This attribute defines the location of the bank for the memory device.')
memoryDeviceTypeDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 11), DellMemoryDeviceTypeDetails()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceTypeDetails.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceTypeDetails.setDescription('1100.0050.0001.0011 This attribute defines the detailed type of the memory device.')
memoryDeviceFormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 12), DellMemoryDeviceFormFactor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceFormFactor.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceFormFactor.setDescription('1100.0050.0001.0012 This attribute defines the form factor of the memory device.')
memoryDeviceSet = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 13), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSet.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceSet.setDescription('1100.0050.0001.0013 This attribute defines if the memory device is a part of a set. Zero indicates it is not part of a set; 2,147,483,647 indicates it is unknown if it is a part of a set.')
memoryDeviceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 14), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSize.setStatus('deprecated')
if mibBuilder.loadTexts: memoryDeviceSize.setDescription('1100.0050.0001.0014 This attribute defines the size in KBytes of the memory device. Zero indicates no memory installed; 2,147,483,647 indicates an unknown memory size. **NOTE: This attribute is deprecated and replaced by memoryDeviceExtendedSize.')
memoryDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 15), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceSpeed.setDescription('1100.0050.0001.0015 This attribute defines the speed in nanoseconds of the memory device. Zero indicates an unknown speed.')
memoryDeviceTotalBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 16), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceTotalBusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceTotalBusWidth.setDescription('1100.0050.0001.0016 This attribute defines the total number bits, including ECC, used by the memory device. 2,147,483,647 indicates an unknown number of bits.')
memoryDeviceTotalDataBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 17), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceTotalDataBusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceTotalDataBusWidth.setDescription('1100.0050.0001.0017 This attribute defines the total number of data bits used by the memory device. 2,147,483,647 indicates an unknown number of bits.')
memoryDeviceSingleBitErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 18), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSingleBitErrorCount.setStatus('deprecated')
if mibBuilder.loadTexts: memoryDeviceSingleBitErrorCount.setDescription('1100.0050.0001.0018 This attribute defines the total number of single bit ECC corrections for the memory device. **NOTE: This attribute is deprecated and replaced by memoryDeviceFailureModes. The value will always be zero.')
memoryDeviceMultiBitErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 19), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMultiBitErrorCount.setStatus('deprecated')
if mibBuilder.loadTexts: memoryDeviceMultiBitErrorCount.setDescription('1100.0050.0001.0019 This attribute defines the total number of multibit ECC errors for the memory device. **NOTE: This attribute is deprecated and replaced by memoryDeviceFailureModes. The value will always be zero.')
memoryDeviceFailureModes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 20), DellMemoryDeviceFailureModes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceFailureModes.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceFailureModes.setDescription('1100.0050.0001.0020 This attribute defines the failure modes of the memory device when the memoryDeviceStatus attribute is not ok(3). It is a bit field that can be used to report more than one type of failure mode by using a combination of the defined bit masks. **NOTE: This attribute replaces the memory device error count attributes. When the memoryDeviceStatus attribute is not ok(3), this attribute should be used to determine the reason for that instead of the error count attributes.')
memoryDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 21), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceManufacturerName.setDescription('1100.0050.0001.0021 This attribute defines the manufacturer of the memory device.')
memoryDevicePartNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 22), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePartNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePartNumberName.setDescription("1100.0050.0001.0022 This attribute defines the manufacturer's part number for the memory device.")
memoryDeviceSerialNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 23), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSerialNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceSerialNumberName.setDescription('1100.0050.0001.0023 This attribute defines the serial number of the memory device.')
memoryDeviceAssetTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 24), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceAssetTagName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceAssetTagName.setDescription('1100.0050.0001.0024 This attribute defines the asset tag of the memory device.')
memoryDeviceSpeedName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 25), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSpeedName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceSpeedName.setDescription('1100.0050.0001.0025 This attribute defines the speed of the memory device in string format with units specified in string.')
memoryDeviceRank = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 26), DellMemoryDeviceRank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceRank.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceRank.setDescription('1100.0050.0001.0026 This attribute defines the Rank of the memory device (DIMM). Zero indicates an unknown.')
memoryDeviceExtendedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 50, 1, 27), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceExtendedSize.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceExtendedSize.setDescription('1100.0050.0001.0027 This attribute defines the size in MBytes of the memory device. **NOTE: This attribute replaces the memoryDeviceSize.')
memoryDeviceMappedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60), )
if mibBuilder.loadTexts: memoryDeviceMappedAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressTable.setDescription('1100.0060 This object defines the Memory Device Mapped Address Table.')
memoryDeviceMappedAddressTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1), ).setIndexNames((0, "MIB-Dell-10892", "memoryDeviceMappedAddresschassisIndex"), (0, "MIB-Dell-10892", "memoryDeviceMappedAddressIndex"))
if mibBuilder.loadTexts: memoryDeviceMappedAddressTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressTableEntry.setDescription('1100.0060.0001 This object defines the Memory Device Mapped Address Table Entry.')
memoryDeviceMappedAddresschassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddresschassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddresschassisIndex.setDescription('1100.0060.0001.0001 This attribute defines the index (one based) of the associated chassis.')
memoryDeviceMappedAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressIndex.setDescription('1100.0060.0001.0002 This attribute defines the index (one based) of the memory device mapped address.')
memoryDeviceMappedAddressStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressStateCapabilities.setDescription('1100.0060.0001.0003 This attribute defines the state capabilities of the memory device mapped address.')
memoryDeviceMappedAddressStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressStateSettings.setDescription('1100.0060.0001.0004 This attribute defines the state settings of the memory device mapped address.')
memoryDeviceMappedAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressStatus.setDescription('1100.0060.0001.0005 This attribute defines the status of the memory device mapped address.')
memoryDeviceIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceIndexReference.setDescription('1100.0060.0001.0006 This attribute defines the index (one based) of the memory device associated with the memory device mapped address.')
memoryDeviceMappedAddressRowPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 7), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressRowPosition.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressRowPosition.setDescription('1100.0060.0001.0007 This attribute defines the position of the referenced memory in a row of the memory device mapped address. 2,147,483,647 indicates an unknown position.')
memoryDeviceMappedAddressInterleavePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 8), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressInterleavePosition.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressInterleavePosition.setDescription('1100.0060.0001.0008 This attribute defines the position of the referenced memory in an interleave of the memory device mapped address. 2,147,483,647 indicates an unknown position.')
memoryDeviceMappedAddressInterleaveDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 9), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressInterleaveDepth.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressInterleaveDepth.setDescription('1100.0060.0001.0009 This attribute defines the maximum number of consecutive rows from the referenced memory device that are accessed in a single interleaved transfer in the memory device mapped address. 2,147,483,647 indicates an unknown number of rows.')
memoryDeviceMappedAddressStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 10), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressStartingAddress.setDescription('1100.0060.0001.0010 This attribute defines the physical starting address in KBytes of the memory device mapped address.')
memoryDeviceMappedAddressEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 60, 1, 11), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceMappedAddressEndingAddress.setDescription('1100.0060.0001.0011 This attribute defines the physical ending address in KBytes of the memory device mapped address.')
class DellGenericDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsAVideoDevice", 3), ("deviceTypeIsASCSIController", 4), ("deviceTypeIsAnEthernetDevice", 5), ("deviceTypeIsTokenRingDevice", 6), ("deviceTypeIsASoundDevice", 7))

genericDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70), )
if mibBuilder.loadTexts: genericDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceTable.setDescription('1100.0070 This object defines the Generic Device Table.')
genericDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1), ).setIndexNames((0, "MIB-Dell-10892", "genericDevicechassisIndex"), (0, "MIB-Dell-10892", "genericDeviceIndex"))
if mibBuilder.loadTexts: genericDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceTableEntry.setDescription('1100.0070.0001 This object defines the Generic Device Table Entry.')
genericDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genericDevicechassisIndex.setDescription('1100.0070.0001.0001 This attribute defines the index (one based) of the associated chassis.')
genericDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceIndex.setDescription('1100.0070.0001.0002 This attribute defines the index (one based) of the generic device.')
genericDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceStateCapabilities.setDescription('1100.0070.0001.0003 This attribute defines the state capabilities of the generic device.')
genericDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceStateSettings.setDescription('1100.0070.0001.0004 This attribute defines the state settings of the generic device.')
genericDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceStatus.setDescription('1100.0070.0001.0005 This attribute defines the status of the generic device.')
genericDeviceSystemSlotIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericDeviceSystemSlotIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceSystemSlotIndexReference.setDescription('1100.0070.0001.0006 This attribute defines the index (one based) of the system slot that the generic device is in.')
genericDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1, 7), DellGenericDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceType.setDescription('1100.0070.0001.0007 This attribute defines the type of the generic device.')
genericDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 70, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: genericDeviceName.setDescription('1100.0070.0001.0008 This attribute defines the name of the generic device.')
pCIDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80), )
if mibBuilder.loadTexts: pCIDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceTable.setDescription('1100.0080 This object defines the PCI Device Table.')
pCIDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1), ).setIndexNames((0, "MIB-Dell-10892", "pCIDevicechassisIndex"), (0, "MIB-Dell-10892", "pCIDeviceIndex"))
if mibBuilder.loadTexts: pCIDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceTableEntry.setDescription('1100.0080.0001 This object defines the PCI Device Table Entry.')
pCIDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDevicechassisIndex.setDescription('1100.0080.0001.0001 This attribute defines the index (one based) of the associated chassis.')
pCIDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceIndex.setDescription('1100.0080.0001.0002 This attribute defines the index (one based) of the PCI device.')
pCIDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceStateCapabilities.setDescription('1100.0080.0001.0003 This attribute defines the state capabilities of the PCI device.')
pCIDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceStateSettings.setDescription('1100.0080.0001.0004 This attribute defines the state settings of the PCI device.')
pCIDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceStatus.setDescription('1100.0080.0001.0005 This attribute defines the status of the PCI device.')
pCIDeviceSystemSlotIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceSystemSlotIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceSystemSlotIndexReference.setDescription('1100.0080.0001.0006 This attribute defines the index (one based) of the system slot that the PCI Device is in.')
pCIDeviceDataBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 7), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceDataBusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceDataBusWidth.setDescription('1100.0080.0001.0007 This attribute defines the width of the data bus of the PCI device.')
pCIDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceManufacturerName.setDescription('1100.0080.0001.0008 This attribute defines the name of the manufacturer of the PCI device.')
pCIDeviceDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 9), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceDescriptionName.setDescription('1100.0080.0001.0009 This attribute defines the description of the PCI device.')
pCIDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 10), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceSpeed.setDescription('1100.0080.0001.0010 This attribute defines the bus speed in MHz of the PCI device. Zero indicates the speed is unknown.')
pCIDeviceAdapterFault = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 80, 1, 11), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceAdapterFault.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceAdapterFault.setDescription('1100.0080.0001.0011 This attribute defines if the PCI device has detected a fault or not.')
pCIDeviceConfigurationSpaceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82), )
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceTable.setDescription('1100.0082 This object defines the PCI Device Configuration Space Table.')
pCIDeviceConfigurationSpaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1), ).setIndexNames((0, "MIB-Dell-10892", "pCIDeviceConfigurationSpacechassisIndex"), (0, "MIB-Dell-10892", "pCIDeviceConfigurationSpaceIndex"))
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceTableEntry.setDescription('1100.0082.0001 This object defines the PCI Device Configuration Space Table Entry.')
pCIDeviceConfigurationSpacechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpacechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpacechassisIndex.setDescription('1100.0082.0001.0001 This attribute defines the index (one based) of the associated chassis.')
pCIDeviceConfigurationSpaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceIndex.setDescription('1100.0082.0001.0002 This attribute defines the index (one based) of the PCI device configuration space.')
pCIDeviceConfigurationSpaceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceStateCapabilities.setDescription('1100.0082.0001.0003 This attribute defines the state capabilities of the PCI device configuration space.')
pCIDeviceConfigurationSpaceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceStateSettings.setDescription('1100.0082.0001.0004 This attribute defines the state settings of the PCI device configuration space.')
pCIDeviceConfigurationSpaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceStatus.setDescription('1100.0082.0001.0005 This attribute defines the status of the PCI device configuration space.')
pCIDeviceIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceIndexReference.setDescription('1100.0082.0001.0006 This attribute defines the index (one based) of the PCI device that this PCI device configuration space applies to.')
pCIDeviceConfigurationSpaceBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 7), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceBusNumber.setDescription('1100.0082.0001.0007 This attribute defines the bus number of the PCI device configuration space.')
pCIDeviceConfigurationSpaceDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 8), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceDeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceDeviceNumber.setDescription('1100.0082.0001.0008 This attribute defines the device number of the PCI device configuration space.')
pCIDeviceConfigurationSpaceFunctionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 9), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceFunctionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceFunctionNumber.setDescription('1100.0082.0001.0009 This attribute defines the function number of the PCI device configuration space.')
pCIDeviceConfigurationSpaceHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 82, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1025))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceHeader.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceConfigurationSpaceHeader.setDescription('1100.0082.0001.0010 This attribute defines the header of the PCI device configuration space.')
class DellNetworkDeviceConnectionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 11, 12, 13))
    namedValues = NamedValues(("connected", 1), ("disconnected", 2), ("driverBad", 3), ("driverDisabled", 4), ("hardwareInitalizing", 10), ("hardwareResetting", 11), ("hardwareClosing", 12), ("hardwareNotReady", 13))

class DellNetworkDeviceTeamingFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("noTeam", 1), ("teamingEnabled", 2), ("adapterFaultToleranceMode", 4), ("loadBalancingMode", 8))

class DellNetworkDeviceTOECapabilityFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class DellNetworkDeviceRDMACapabilityFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class DellNetworkDeviceiSCSICapabilityFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class DellNetworkDeviceCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("supported", 1), ("toe", 2), ("iscsiOffload", 4), ("fcoeOffload", 8))

networkDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90), )
if mibBuilder.loadTexts: networkDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceTable.setDescription('1100.0090 This object defines the Network Device Table.')
networkDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1), ).setIndexNames((0, "MIB-Dell-10892", "networkDeviceChassisIndex"), (0, "MIB-Dell-10892", "networkDeviceIndex"))
if mibBuilder.loadTexts: networkDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceTableEntry.setDescription('1100.0090.0001 This object defines the Network Device Table Entry.')
networkDeviceChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceChassisIndex.setDescription('1100.0090.0001.0001 This attribute defines the index (one based) of the chassis that contains the network device.')
networkDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceIndex.setDescription('1100.0090.0001.0002 This attribute defines the index (one based) of the network device.')
networkDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 3), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceStatus.setDescription('1100.0090.0001.0003 This attribute defines the status of the network device.')
networkDeviceConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 4), DellNetworkDeviceConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceConnectionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceConnectionStatus.setDescription('1100.0090.0001.0004 This attribute defines the connection status of the network device.')
networkDeviceDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 5), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceDescriptionName.setDescription('1100.0090.0001.0005 This attribute defines the description of the network device.')
networkDeviceProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceProductName.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceProductName.setDescription('1100.0090.0001.0006 This attribute defines the product name of the network device.')
networkDeviceVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceVendorName.setDescription('1100.0090.0001.0007 This attribute defines the name of the vendor of the network device.')
networkDeviceServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceServiceName.setDescription('1100.0090.0001.0008 This attribute defines the service name of the network device.')
networkDeviceDriverImagePathName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 9), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceDriverImagePathName.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceDriverImagePathName.setDescription('1100.0090.0001.0009 This attribute defines the path to the binary image of the driver for the network device.')
networkDeviceDriverVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 10), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceDriverVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceDriverVersionName.setDescription('1100.0090.0001.0010 This attribute defines the version of the driver for the network device.')
networkDeviceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceIPAddress.setDescription('1100.0090.0001.0011 This attribute defines the IP address of the network device.')
networkDeviceIPSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceIPSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceIPSubnetMask.setDescription('1100.0090.0001.0012 This attribute defines the IP subnet mask for the IP address currently assigned to the network device.')
networkDeviceDefaultGatewayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceDefaultGatewayIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceDefaultGatewayIPAddress.setDescription('1100.0090.0001.0013 This attribute defines the IP address of the default gateway for the network device.')
networkDeviceDHCPServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceDHCPServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceDHCPServerIPAddress.setDescription('1100.0090.0001.0014 This attribute defines the IP address of the DHCP server that was used to obtain the IP address of the network device if DHCP is used to configure the network device.')
networkDeviceCurrentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 15), DellMACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceCurrentMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceCurrentMACAddress.setDescription('1100.0090.0001.0015 This attribute defines the current MAC address of the network device.')
networkDevicePermanentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 16), DellMACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePermanentMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkDevicePermanentMACAddress.setDescription('1100.0090.0001.0016 This attribute defines the permanent MAC address of the network device.')
networkDevicePCIBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 17), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: networkDevicePCIBusNumber.setDescription('1100.0090.0001.0017 This attribute defines the PCI bus number of the network device.')
networkDevicePCIDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 18), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIDeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: networkDevicePCIDeviceNumber.setDescription('1100.0090.0001.0018 This attribute defines the PCI device number of the network device.')
networkDevicePCIFunctionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 19), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIFunctionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: networkDevicePCIFunctionNumber.setDescription('1100.0090.0001.0019 This attribute defines the PCI function number of the network device.')
networkDeviceIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 20), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceIRQ.setDescription('1100.0090.0001.0020 This attribute defines the interrupt request number of the network device.')
networkDeviceBaseIOPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 21), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceBaseIOPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceBaseIOPortAddress.setDescription('1100.0090.0001.0021 This attribute defines the base input/outport port address of the network device.')
networkDeviceTeamingFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 22), DellNetworkDeviceTeamingFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceTeamingFlags.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceTeamingFlags.setDescription('1100.0090.0001.0022 This attribute defines the teaming features of the network device.')
networkDeviceTOECapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 23), DellNetworkDeviceTOECapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceTOECapabilityFlags.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceTOECapabilityFlags.setDescription('1100.0090.0001.0023 This attribute defines the TCP/IP Offload Engine (TOE) capability flags of the network device.')
networkDeviceTOEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 24), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceTOEEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceTOEEnabled.setDescription('1100.0090.0001.0024 This attribute defines if TOE is enabled for the network device.')
networkDeviceRDMACapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 25), DellNetworkDeviceRDMACapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceRDMACapabilityFlags.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceRDMACapabilityFlags.setDescription('1100.0090.0001.0025 This attribute defines the Remote Direct Memory Access (RDMA) capability flags of the network device.')
networkDeviceRDMAEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 26), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceRDMAEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceRDMAEnabled.setDescription('1100.0090.0001.0026 This attribute defines if RDMA is enabled for the network device.')
networkDeviceiSCSICapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 27), DellNetworkDeviceiSCSICapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceiSCSICapabilityFlags.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceiSCSICapabilityFlags.setDescription('1100.0090.0001.0027 This attribute defines the Internet Small Computer System Interface (iSCSI) capability flags of the network device.')
networkDeviceiSCSIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 28), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceiSCSIEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceiSCSIEnabled.setDescription('1100.0090.0001.0028 This attribute defines if iSCSI is enabled for the network device.')
networkDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 90, 1, 29), DellNetworkDeviceCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceCapabilities.setDescription('1100.0090.0001.0029 This attribute defines the capabilities of the network device. If this value is notSupported(0), the networkDeviceTOECapabilityFlags, networkDeviceTOEEnabled, networkDeviceRDMACapabilityFlags, networkDeviceRDMAEnabled, networkDeviceiSCSICapabilityFlags and networkDeviceiSCSIEnabled attributes should be used to determine the network device capabilities. If the supported(1) bit is on, this attribute should be used to determine the network device capabilities, and the attributes mentioned above should not be used. NOTE: For a network device on Converged Network Adapter (CNA), this attribute provides capability information for the CNA and not for the network device. For more information read vendor documentation.')
class DellManagedSystemServicesDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("optionalDevice", 1))

managedSystemServicesDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 100), )
if mibBuilder.loadTexts: managedSystemServicesDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: managedSystemServicesDeviceTable.setDescription('1100.0100 This object defines the Managed System Services Device Table.')
managedSystemServicesDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 100, 1), ).setIndexNames((0, "MIB-Dell-10892", "managedSystemServicesDeviceChassisIndex"), (0, "MIB-Dell-10892", "managedSystemServicesDeviceIndex"))
if mibBuilder.loadTexts: managedSystemServicesDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: managedSystemServicesDeviceTableEntry.setDescription('1100.0100.0001 This object defines the Managed System Services Device Table Entry.')
managedSystemServicesDeviceChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 100, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedSystemServicesDeviceChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: managedSystemServicesDeviceChassisIndex.setDescription('1100.0100.0001.0001 This attribute defines the index (one-based) of the chassis that contains the managed system services device.')
managedSystemServicesDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 100, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedSystemServicesDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: managedSystemServicesDeviceIndex.setDescription('1100.0100.0001.0002 This attribute defines the index (one-based) of the managed system services device.')
managedSystemServicesDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 100, 1, 3), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedSystemServicesDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: managedSystemServicesDeviceStatus.setDescription('1100.0100.0001.0003 This attribute defines the status of the managed system services device.')
managedSystemServicesDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 100, 1, 4), DellManagedSystemServicesDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedSystemServicesDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: managedSystemServicesDeviceType.setDescription('1100.0100.0001.0004 This attribute defines the type of the managed system services device.')
managedSystemServicesDeviceStoragePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 100, 1, 5), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedSystemServicesDeviceStoragePresent.setStatus('mandatory')
if mibBuilder.loadTexts: managedSystemServicesDeviceStoragePresent.setDescription('1100.0100.0001.0005 This attribute defines whether storage is present on the managed system services device.')
managedSystemServicesDeviceStorageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 100, 1, 6), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedSystemServicesDeviceStorageSize.setStatus('mandatory')
if mibBuilder.loadTexts: managedSystemServicesDeviceStorageSize.setDescription('1100.0100.0001.0006 This attribute defines the size in MB (megabytes) of the storage present on the managed system services device.')
sdCardUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110), )
if mibBuilder.loadTexts: sdCardUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitTable.setDescription('1100.0110 This object defines the SD Card Unit Table.')
sdCardUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1), ).setIndexNames((0, "MIB-Dell-10892", "sdCardUnitChassisIndex"), (0, "MIB-Dell-10892", "sdCardUnitIndex"))
if mibBuilder.loadTexts: sdCardUnitTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitTableEntry.setDescription('1100.0110.0001 This object defines the SD Card Unit Table Entry.')
sdCardUnitChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardUnitChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitChassisIndex.setDescription('1100.0110.0001.0001 This attribute defines the index (one-based) of the chassis that contains the SD Card unit.')
sdCardUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitIndex.setDescription('1100.0110.0001.0002 This attribute defines the index (one-based) of the SD Card unit.')
sdCardUnitStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardUnitStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitStateCapabilities.setDescription('1100.0110.0001.0003 This attribute defines the state capabilities of the SD Card unit.')
sdCardUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardUnitStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitStateSettings.setDescription('1100.0110.0001.0004 This attribute defines the state settings of the SD Card unit.')
sdCardUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1, 5), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardUnitRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitRedundancyStatus.setDescription('1100.0110.0001.0005 This attribute defines the redundancy status of the SD Card unit.')
sdCardUnitCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardUnitCountForRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitCountForRedundancy.setDescription('1100.0110.0001.0006 This attribute defines the total number of SD Card devices required for this SD Card unit to have full redundancy.')
sdCardUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitName.setDescription('1100.0110.0001.0007 This attribute defines the name of the SD Card unit.')
sdCardUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 110, 1, 8), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardUnitStatus.setDescription('1100.0110.0001.0008 This attribute defines the status of the SD Card unit.')
class DellSDCardDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("hypervisor", 3), ("vFlash", 4))

class DellSDCardDeviceConfigCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sdCapable", 1), ("vFlashCapable", 2))

class DellSDCardDeviceConfigSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sdEnabled", 1), ("vFlashEnabled", 2))

class DellSDCardDeviceCardState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256))
    namedValues = NamedValues(("present", 1), ("ipmiReady", 2), ("fullReady", 4), ("offline", 8), ("failed", 16), ("active", 32), ("bootable", 64), ("writeProtect", 128), ("standby", 256))

class DellSDCardDeviceCardLicensed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("licensed", 1))

sdCardDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112), )
if mibBuilder.loadTexts: sdCardDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceTable.setDescription('1100.0112 This object defines the SD Card Device Table.')
sdCardDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1), ).setIndexNames((0, "MIB-Dell-10892", "sdCardDeviceChassisIndex"), (0, "MIB-Dell-10892", "sdCardDeviceIndex"))
if mibBuilder.loadTexts: sdCardDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceTableEntry.setDescription('1100.0112.0001 This object defines the SD Card Device Table Entry.')
sdCardDeviceChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceChassisIndex.setDescription('1100.0112.0001.0001 This attribute defines the index (one-based) of the chassis that contains the SD Card device.')
sdCardDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceIndex.setDescription('1100.0112.0001.0002 This attribute defines the index (one-based) of the SD Card device.')
sdCardDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 3), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceStatus.setDescription('1100.0112.0001.0003 This attribute defines the status of the SD Card device.')
sdCardDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 4), DellSDCardDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceType.setDescription('1100.0112.0001.0004 This attribute defines the type of the SD Card device.')
sdCardDeviceConfigCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 5), DellSDCardDeviceConfigCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceConfigCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceConfigCapabilities.setDescription('1100.0112.0001.0005 This attribute defines the configuration capabilities of the SD Card device.')
sdCardDeviceConfigSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 6), DellSDCardDeviceConfigSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceConfigSettings.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceConfigSettings.setDescription('1100.0112.0001.0006 This attribute defines the configuration settings of the SD Card device.')
sdCardDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceLocationName.setDescription('1100.0112.0001.0007 This attribute defines the location of the SD Card device.')
sdCardDeviceCardPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 8), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceCardPresent.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceCardPresent.setDescription('1100.0112.0001.0008 This attribute defines whether the SD card is present for the SD Card device.')
sdCardDeviceCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 9), DellSDCardDeviceCardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceCardState.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceCardState.setDescription('1100.0112.0001.0009 This attribute defines the state of the SD card.')
sdCardDeviceCardStorageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 10), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceCardStorageSize.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceCardStorageSize.setDescription('1100.0112.0001.0010 This attribute defines the total storage size in MB (megabytes) of the SD card for the SD Card device.')
sdCardDeviceUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 11), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceUnitIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceUnitIndexReference.setDescription('1100.0112.0001.0011 This attribute defines the index to the associated SD Card unit if the SD Card device is part of a SD Card unit.')
sdCardDeviceCardAvailableStorageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 12), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceCardAvailableStorageSize.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceCardAvailableStorageSize.setDescription('1100.0112.0001.0012 This attribute defines the available storage size in MB (megabytes) of the SD card for the SD Card device.')
sdCardDeviceCardLicensed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1100, 112, 1, 13), DellSDCardDeviceCardLicensed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdCardDeviceCardLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: sdCardDeviceCardLicensed.setDescription('1100.0112.0001.0013 This attribute defines whether the SD card is licensed by the system vendor.')
class DellSystemSlotStateCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 126, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32640, 32766))
    namedValues = NamedValues(("systemSlotHotPlugIsUnknown", 1), ("systemSlotHotPlugIsHotPluggableCapable", 2), ("systemSlotHotPlugCanBePoweredOn", 4), ("systemSlotHotPlugCanSignalAttention", 8), ("systemSlotHotPlugCanSignalPowerFault", 16), ("systemSlotHotPlugCanSignalAdapterPresent", 32), ("systemSlotHotPlugCanSignalPowerButtonPressed", 64), ("canSupportAllHotPlugCapabilities", 126), ("systemSlotCanProvide5Volts", 128), ("systemSlotCanProvide3Point3Volts", 256), ("systemSlotCanSignalIfShared", 512), ("systemSlotCanSupportCard16", 1024), ("systemSlotCanSupportCardBus", 2048), ("systemSlotCanSupportZoomVideo", 4096), ("systemSlotCanSupportModemRingResume", 8192), ("systemSlotCanSupportPMESignal", 16384), ("canSupportAllSlotCapabilities", 32640), ("canSupportAllSlotAndAllHotPlugCapabilities", 32766))

class DellSystemSlotStateSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 36, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 16770, 16804, 16806, 17316))
    namedValues = NamedValues(("systemSlotHotPlugIsUnknown", 1), ("systemSlotHotPlugIsHotPluggable", 2), ("systemSlotHotPlugIsPoweredOn", 4), ("systemSlotHotPlugIsAtAttention", 8), ("systemSlotHotPlugHasPowerFaulted", 16), ("systemSlotHotPlugAdapterIsPresent", 32), ("systemSlotHotPlugAdapterPresentAndPoweredOn", 36), ("systemSlotHotPlugPowerButtonPressed", 64), ("systemSlotProvides5Volts", 128), ("systemSlotProvides3Point3Volts", 256), ("systemSlotIsShared", 512), ("systemSlotSupportsCard16", 1024), ("systemSlotSupportsCardBus", 2048), ("systemSlotSupportsZoomVideo", 4096), ("systemSlotSupportsModemRingResume", 8192), ("systemSlotSupportsPMESignal", 16384), ("supportsPMEand3P3Vand5VandHotPluggable", 16770), ("supportsPMEand3P3Vand5VhasAdapterOn", 16804), ("supportsPMEand3P3Vand5VhasAdapterOnandisHotPluggable", 16806), ("supportsPMEand3P3VIsSharedand5VhasAdapterOnandHotPlugable", 17316))

class DellSystemSlotType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176))
    namedValues = NamedValues(("systemSlotIsOther", 1), ("systemSlotIsUnknown", 2), ("systemSlotIsISA", 3), ("systemSlotIsMCA", 4), ("systemSlotIsEISA", 5), ("systemSlotIsPCI", 6), ("systemSlotIsPCMCIA", 7), ("systemSlotIsVLVESA", 8), ("systemSlotIsProprietary", 9), ("systemSlotIsProcessorCard", 10), ("systemSlotIsProprietaryMemory", 11), ("systemSlotIsIORiserCard", 12), ("systemSlotIsNuBUS", 13), ("systemSlotIsPCI66MHz", 14), ("systemSlotIsAGP", 15), ("systemSlotIsAGP2X", 16), ("systemSlotIsAGP4X", 17), ("systemSlotIsPC98C20", 18), ("systemSlotIsPC98C24", 19), ("systemSlotIsPC98E", 20), ("systemSlotIsPC98LocalBus", 21), ("systemSlotIsPC98Card", 22), ("systemSlotIsPCIX", 23), ("systemSlotIsPCIExpress", 24), ("systemSlotIsAGP8X", 25), ("systemSlotIsPCIExpressX1", 166), ("systemSlotIsPCIExpressX2", 167), ("systemSlotIsPCIExpressX4", 168), ("systemSlotIsPCIExpressX8", 169), ("systemSlotIsPCIExpressX16", 170), ("systemSlotIsPCIExpressGen2", 171), ("systemSlotIsPCIExpressGen2X1", 172), ("systemSlotIsPCIExpressGen2X2", 173), ("systemSlotIsPCIExpressGen2X4", 174), ("systemSlotIsPCIExpressGen2X8", 175), ("systemSlotIsPCIExpressGen2X16", 176))

class DellSystemSlotUsage(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("systemSlotUsageIsOther", 1), ("systemSlotUsageIsUnknown", 2), ("systemSlotUsageIsAvailable", 3), ("systemSlotUsageIsInUse", 4))

class DellSystemSlotLength(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("systemSlotLengthIsOther", 1), ("systemSlotLengthIsUnknown", 2), ("systemSlotLengthIsShort", 3), ("systemSlotLengthIsLong", 4))

class DellSystemSlotCategory(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("systemSlotCategoryIsOther", 1), ("systemSlotCategoryIsUnknown", 2), ("systemSlotCategoryIsBusConnector", 3), ("systemSlotCategoryIsPCMCIA", 4), ("systemSlotCategoryIsMotherboard", 5))

class DellSystemSlotHotPlugBusWidth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("busWidthIsOther", 1), ("busWidthIsUnknown", 2), ("busWidthIs8bits", 3), ("busWidthIs16bits", 4), ("busWidthIs32bits", 5), ("busWidthIs64bits", 6), ("busWidthIs128bits", 7), ("busWidthIs1xOrx1", 8), ("busWidthIs2xOrx2", 9), ("busWidthIs4xOrx4", 10), ("busWidthIs8xOrx8", 11), ("busWidthIs12xOrx12", 12), ("busWidthIs16xOrx16", 13), ("busWidthIs32xOrx32", 14))

systemSlotTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10), )
if mibBuilder.loadTexts: systemSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotTable.setDescription('1200.0010 This object defines the System Slot Table.')
systemSlotTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "systemSlotchassisIndex"), (0, "MIB-Dell-10892", "systemSlotIndex"))
if mibBuilder.loadTexts: systemSlotTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotTableEntry.setDescription('1200.0010.0001 This object defines the System Slot Table Entry.')
systemSlotchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotchassisIndex.setDescription('1200.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
systemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotIndex.setDescription('1200.0010.0001.0002 This attribute defines the index (one based) of the system slot.')
systemSlotStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 3), DellSystemSlotStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStateCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotStateCapabilitiesUnique.setDescription('1200.0010.0001.0003 This attribute defines the state capabilities of the system slot.')
systemSlotStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 4), DellSystemSlotStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotStateSettingsUnique.setDescription('1200.0010.0001.0004 This attribute defines the state settings of the system slot.')
systemSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotStatus.setDescription('1200.0010.0001.0005 This attribute defines the status of the system slot.')
systemSlotCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 6), DellSystemSlotUsage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotCurrentUsage.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotCurrentUsage.setDescription('1200.0010.0001.0006 This attribute defines the current usage of the system slot.')
systemSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 7), DellSystemSlotType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotType.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotType.setDescription('1200.0010.0001.0007 This attribute defines the type of the system slot.')
systemSlotSlotExternalSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotSlotExternalSlotName.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotSlotExternalSlotName.setDescription('1200.0010.0001.0008 This attribute defines the name of the external connector name of the system slot.')
systemSlotLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 9), DellSystemSlotLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotLength.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotLength.setDescription('1200.0010.0001.0009 This attribute defines the length of the system slot.')
systemSlotSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 10), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotSlotID.setDescription('1200.0010.0001.0010 This attribute defines the slot identification number of the system slot.')
systemSlotCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 11), DellSystemSlotCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotCategory.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotCategory.setDescription('1200.0010.0001.0011 This attribute defines the category of the system slot.')
systemSlotHotPlugBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 12), DellSystemSlotHotPlugBusWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotHotPlugBusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotHotPlugBusWidth.setDescription('1200.0010.0001.0012 This attribute defines the bus width of the hot plug system slot.')
systemSlotHotPlugSlotSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 13), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotHotPlugSlotSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotHotPlugSlotSpeed.setDescription('1200.0010.0001.0013 This attribute defines the slot speed in MHz of the hot plug system slot. Zero indicates the slot speed is unknown.')
systemSlotHotPlugAdapterSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1200, 10, 1, 14), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotHotPlugAdapterSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotHotPlugAdapterSpeed.setDescription('1200.0010.0001.0014 This attribute defines the adapter speed in MHz of the hot plug system slot. Zero indicates the adapter speed is unknown.')
class DellPhysicalMemoryArrayLocation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("memoryArrayLocationIsOther", 1), ("memoryArrayLocationIsUnknown", 2), ("memoryArrayLocationIsSystemOrMotherboard", 3), ("memoryArrayLocationIsISA", 4), ("memoryArrayLocationIsEISA", 5), ("memoryArrayLocationIsPCI", 6), ("memoryArrayLocationIsMCA", 7), ("memoryArrayLocationIsPCMCIA", 8), ("memoryArrayLocationIsProprietary", 9), ("memoryArrayLocationIsNUBUS", 10), ("memoryArrayLocationIsPC98C20", 11), ("memoryArrayLocationIsPC98C24", 12), ("memoryArrayLocationIsPC98E", 13), ("memoryArrayLocationIsPC98LocalBus", 14), ("memoryArrayLocationIsPC98Card", 15))

class DellPhysicalMemoryArrayUse(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("memoryArrayUseIsOther", 1), ("memoryArrayUseIsUnknown", 2), ("memoryArrayUseIsSystemMemory", 3), ("memoryArrayUseIsVideoMemory", 4), ("memoryArrayUseIsFLASHMemory", 5), ("memoryArrayUseIsNonVolatileRAMMemory", 6), ("memoryArrayUseIsCacheMemory", 7))

class DellPhysicalMemoryArrayECCType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("memoryArrayECCTypeIsOther", 1), ("memoryArrayECCTypeIsUnknown", 2), ("memoryArrayECCTypeIsNone", 3), ("memoryArrayECCTypeIsParity", 4), ("memoryArrayECCTypeIsSingleBitECC", 5), ("memoryArrayECCTypeIsMultiBitECC", 6), ("memoryArrayECCTypeIsCRC", 7))

physicalMemoryArrayTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10), )
if mibBuilder.loadTexts: physicalMemoryArrayTable.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayTable.setDescription('1300.0010 This object defines the Physical Memory Array Table.')
physicalMemoryArrayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "physicalMemoryArraychassisIndex"), (0, "MIB-Dell-10892", "physicalMemoryArrayIndex"))
if mibBuilder.loadTexts: physicalMemoryArrayTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayTableEntry.setDescription('1300.0010.0001 This object defines the Physical Memory Array Table Entry.')
physicalMemoryArraychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArraychassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArraychassisIndex.setDescription('1300.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
physicalMemoryArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayIndex.setDescription('1300.0010.0001.0002 This attribute defines the index (one based) of the physical memory array.')
physicalMemoryArrayStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayStateCapabilities.setDescription('1300.0010.0001.0003 This attribute defines the state capabilities of the physical memory array.')
physicalMemoryArrayStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayStateSettings.setDescription('1300.0010.0001.0004 This attribute defines the state settings of the physical memory array.')
physicalMemoryArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayStatus.setDescription('1300.0010.0001.0005 This attribute defines the status of the physical memory array.')
physicalMemoryArrayUse = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 6), DellPhysicalMemoryArrayUse()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayUse.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayUse.setDescription('1300.0010.0001.0006 This attribute defines the use of the physical memory array.')
physicalMemoryArrayECCType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 7), DellPhysicalMemoryArrayECCType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayECCType.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayECCType.setDescription('1300.0010.0001.0007 This attribute defines the error correction type used by the physical memory array.')
physicalMemoryArrayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 8), DellPhysicalMemoryArrayLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayLocation.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayLocation.setDescription('1300.0010.0001.0008 This attribute defines the location of the physical memory array.')
physicalMemoryArrayMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 9), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMaximumSize.setStatus('deprecated')
if mibBuilder.loadTexts: physicalMemoryArrayMaximumSize.setDescription('1300.0010.0001.0009 This attribute defines the maximum size in KBytes of the physical memory array. Zero inicates no memory is installed. 2,147,483,647 indicates an unknown maximum size. **NOTE: This attribute is deprecated and replaced by physicalMemoryArrayExtendedMaximumSize.')
physicalMemoryArrayTotalNumberSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 10), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayTotalNumberSockets.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayTotalNumberSockets.setDescription('1300.0010.0001.0010 This attribute defines the total number of memory sockets available for the physical memory array. 2,147,483,647 indicates an unknown number of sockets.')
physicalMemoryArrayInUseNumberSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 11), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayInUseNumberSockets.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayInUseNumberSockets.setDescription('1300.0010.0001.0011 This attribute defines the total number of memory sockets in use by the physical memory array. 2,147,483,647 indicates an unknown number of sockets.')
physicalMemoryArrayECCErrorNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 12), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayECCErrorNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayECCErrorNonRecoverableThreshold.setDescription('1300.0010.0001.0012 This attribute defines the value of the physical memory array ECC error nonrecoverable threshold. The value is an integer representing the number of errors detected.')
physicalMemoryArrayECCErrorCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 13), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayECCErrorCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayECCErrorCriticalThreshold.setDescription('1300.0010.0001.00013 This attribute defines the value of the physical memory array ECC error critical threshold. The value is an integer representing the number of errors detected.')
physicalMemoryArrayECCErrorNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 14), DellSigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayECCErrorNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayECCErrorNonCriticalThreshold.setDescription('1300.0010.0001.00014 This attribute defines the value of the physical memory array ECC error noncritical threshold. The value is an integer representing the number of errors detected.')
physicalMemoryArrayRedundantMemoryUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 15), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayRedundantMemoryUnitIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayRedundantMemoryUnitIndexReference.setDescription('1300.0010.0001.0015 This attribute defines the index to the associated redundant memory unit if this physical memory array is part of a redundant memory unit.')
physicalMemoryArrayExtendedMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 10, 1, 16), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayExtendedMaximumSize.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayExtendedMaximumSize.setDescription('1300.0010.0001.0016 This attribute defines the maximum size in Bytes of the physical memory array. **NOTE: This attribute replaces the physicalMemoryArrayMaximumSize.')
physicalMemoryArrayMappedTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20), )
if mibBuilder.loadTexts: physicalMemoryArrayMappedTable.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedTable.setDescription('1300.0020 This object defines the Physical Memory Array Mapped Table.')
physicalMemoryArrayMappedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "physicalMemoryArrayMappedchassisIndex"), (0, "MIB-Dell-10892", "physicalMemoryArrayMappedIndex"))
if mibBuilder.loadTexts: physicalMemoryArrayMappedTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedTableEntry.setDescription('1300.0020.0001 This object defines the Physical Memory Array Mapped Table Entry.')
physicalMemoryArrayMappedchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMappedchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedchassisIndex.setDescription('1300.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
physicalMemoryArrayMappedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMappedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedIndex.setDescription('1300.0020.0001.0002 This attribute defines the index (one based) of the physical memory array mapped address.')
physicalMemoryArrayMappedStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMappedStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedStateCapabilities.setDescription('1300.0020.0001.0003 This attribute defines the state capabilities of the physical memory array mapped address.')
physicalMemoryArrayMappedStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMappedStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedStateSettings.setDescription('1300.0020.0001.0004 This attribute defines the state settings of the physical memory array mapped address.')
physicalMemoryArrayMappedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMappedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedStatus.setDescription('1300.0020.0001.0005 This attribute defines the status of the physical memory array mapped address.')
physicalMemoryArrayIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 6), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayIndexReference.setDescription('1300.0020.0001.0006 This attribute defines the index (one based) of the associated physical memory array.')
physicalMemoryArrayMappedStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 7), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMappedStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedStartingAddress.setDescription('1300.0020.0001.0007 This attribute defines the physical starting address in KBytes of the physical memory array mapped address.')
physicalMemoryArrayMappedEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 8), DellUnsigned64BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMappedEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedEndingAddress.setDescription('1300.0020.0001.0008 This attribute defines the physical ending address in KBytes of the physical memory array mapped address.')
physicalMemoryArrayMappedPartitionWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 20, 1, 9), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryArrayMappedPartitionWidth.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryArrayMappedPartitionWidth.setDescription('1300.0020.0001.0009 This attribute defines the number of memory devices that form a single row in the memory array mapped address. 2,147,483,647 indicates an unknown number of memory devices.')
class DellPhysicalMemoryConfigStateCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4))

class DellPhysicalMemoryConfigStateSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("redundantMemoryIsActive", 8), ("enabledAndRedundantMemoryIsActive", 10))

class DellPhysicalMemoryConfigRedundantCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 16))
    namedValues = NamedValues(("unknownCapabilities", 1), ("spareCapable", 2), ("mirrorCapable", 4), ("spareAndMirrorCapable", 6), ("raidCapable", 8), ("dddcCapable", 16))

class DellPhysicalMemoryConfigRedundantSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("spareEnabled", 2), ("mirrorEnabled", 4), ("raidEnabled", 8), ("dddcEnabled", 16))

class DellPhysicalMemoryConfigMOMCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknownCapabilities", 1), ("momOptimizerCapable", 2), ("momSpareCapable", 4), ("momMirrorCapable", 8), ("momAdvancedECCCapable", 16))

class DellPhysicalMemoryConfigMOMSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("momOptimizerEnabled", 2), ("momSpareEnabled", 4), ("momMirrorEnabled", 8), ("momAdvancedECCEnabled", 16))

physicalMemoryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30), )
if mibBuilder.loadTexts: physicalMemoryConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigTable.setDescription('1300.0030 This object defines the Physical Memory Configuration Table.')
physicalMemoryConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "physicalMemoryConfigChassisIndex"), (0, "MIB-Dell-10892", "physicalMemoryConfigIndex"))
if mibBuilder.loadTexts: physicalMemoryConfigTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigTableEntry.setDescription('1300.0030.0001 This object defines the Physical Memory Configuration Table Entry.')
physicalMemoryConfigChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigChassisIndex.setDescription('1300.0030.0001.0001 This attribute defines the index (one based) of the associated chassis.')
physicalMemoryConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigIndex.setDescription('1300.0030.0001.0002 This attribute defines the index (one based) of the physical memory configuration.')
physicalMemoryConfigStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 3), DellPhysicalMemoryConfigStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigStateCapabilities.setDescription('1300.0030.0001.0003 This attribute defines the state capabilities of the physical memory configuration.')
physicalMemoryConfigStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 4), DellPhysicalMemoryConfigStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigStateSettings.setDescription('1300.0030.0001.0004 This attribute defines the state settings of the physical memory configuration.')
physicalMemoryConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigStatus.setDescription('1300.0030.0001.0005 This attribute defines the status of the physical memory configuration.')
physicalMemoryConfigRedundantCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 6), DellPhysicalMemoryConfigRedundantCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigRedundantCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigRedundantCapabilities.setDescription('1300.0030.0001.0006 This attribute defines the redundant capabilities of the physical memory.')
physicalMemoryConfigRedundantSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 7), DellPhysicalMemoryConfigRedundantSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigRedundantSettings.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigRedundantSettings.setDescription('1300.0030.0001.0007 This attribute defines the redundant settings of the physical memory.')
physicalMemoryConfigMOMCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 8), DellPhysicalMemoryConfigMOMCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigMOMCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigMOMCapabilities.setDescription('1300.0030.0001.0008 This attribute defines the Memory Operating Mode capabilities of the physical memory.')
physicalMemoryConfigMOMSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 30, 1, 9), DellPhysicalMemoryConfigMOMSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryConfigMOMSettings.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryConfigMOMSettings.setDescription('1300.0030.0001.0009 This attribute defines the Memory Operating Mode settings of the physical memory.')
class DellPhysicalMemoryLoggingCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class DellPhysicalMemoryLoggingSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2))

physicalMemoryLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 40), )
if mibBuilder.loadTexts: physicalMemoryLoggingTable.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryLoggingTable.setDescription('1300.0040 This object defines the Physical Memory Logging Table.')
physicalMemoryLoggingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 40, 1), ).setIndexNames((0, "MIB-Dell-10892", "physicalMemoryLoggingChassisIndex"), (0, "MIB-Dell-10892", "physicalMemoryLoggingIndex"))
if mibBuilder.loadTexts: physicalMemoryLoggingTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryLoggingTableEntry.setDescription('1300.0040.0001 This object defines the Physical Memory Logging Table Entry.')
physicalMemoryLoggingChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 40, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryLoggingChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryLoggingChassisIndex.setDescription('1300.0040.0001.0001 This attribute defines the index (one based) of the associated chassis.')
physicalMemoryLoggingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 40, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryLoggingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryLoggingIndex.setDescription('1300.0040.0001.0002 This attribute defines the index (one based) of the physical memory logging.')
physicalMemoryLoggingCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 40, 1, 3), DellPhysicalMemoryLoggingCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryLoggingCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryLoggingCapabilities.setDescription('1300.0040.0001.0003 This attribute defines the capabilities of the physical memory logging.')
physicalMemoryLoggingSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 40, 1, 4), DellPhysicalMemoryLoggingSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryLoggingSettings.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryLoggingSettings.setDescription('1300.0040.0001.0004 This attribute defines the settings of the physical memory logging.')
physicalMemoryLoggingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 40, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryLoggingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryLoggingStatus.setDescription('1300.0040.0001.0005 This attribute defines the status of the physical memory logging.')
redundantMemoryUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50), )
if mibBuilder.loadTexts: redundantMemoryUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitTable.setDescription('1300.0050 This object defines the Redundant Memory Unit Table.')
redundantMemoryUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50, 1), ).setIndexNames((0, "MIB-Dell-10892", "redundantMemoryUnitChassisIndex"), (0, "MIB-Dell-10892", "redundantMemoryUnitIndex"))
if mibBuilder.loadTexts: redundantMemoryUnitTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitTableEntry.setDescription('1300.0050.0001 This object defines the Redundant Memory Unit Table Entry.')
redundantMemoryUnitChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundantMemoryUnitChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitChassisIndex.setDescription('1300.0050.0001.0001 This attribute defines the index (one based) of the associated chassis.')
redundantMemoryUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundantMemoryUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitIndex.setDescription('1300.0050.0001.0002 This attribute defines the index (one based) of the redundant memory unit.')
redundantMemoryUnitStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundantMemoryUnitStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitStateCapabilities.setDescription('1300.0050.0001.0003 This attribute defines the state capabilities of the redundant memory unit.')
redundantMemoryUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundantMemoryUnitStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitStateSettings.setDescription('1300.0050.0001.0004 This attribute defines the state settings of the redundant memory unit.')
redundantMemoryUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50, 1, 5), DellStatusRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundantMemoryUnitRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitRedundancyStatus.setDescription('1300.0050.0001.0005 This attribute defines the redundancy status of the redundant memory unit.')
redundantMemoryUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundantMemoryUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitName.setDescription('1300.0050.0001.0006 This attribute defines the name of the redundant memory unit.')
redundantMemoryUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 50, 1, 7), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundantMemoryUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: redundantMemoryUnitStatus.setDescription('1300.0050.0001.0007 This attribute defines the status of the redundant memory unit.')
physicalMemoryCardTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60), )
if mibBuilder.loadTexts: physicalMemoryCardTable.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardTable.setDescription('1300.0060 This object defines the Physical Memory Card Table.')
physicalMemoryCardTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1), ).setIndexNames((0, "MIB-Dell-10892", "physicalMemoryCardChassisIndex"), (0, "MIB-Dell-10892", "physicalMemoryCardIndex"))
if mibBuilder.loadTexts: physicalMemoryCardTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardTableEntry.setDescription('1300.0060.0001 This object defines the Physical Memory Card Table Entry.')
physicalMemoryCardChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardChassisIndex.setDescription('1300.0060.0001.0001 This attribute defines the index (one based) of the associated chassis.')
physicalMemoryCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardIndex.setDescription('1300.0060.0001.0002 This attribute defines the index (one based) of the physical memory card.')
physicalMemoryCardStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardStateCapabilities.setDescription('1300.0060.0001.0003 This attribute defines the state capabilities of the physical memory card.')
physicalMemoryCardStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardStateSettings.setDescription('1300.0060.0001.0004 This attribute defines the state settings of the physical memory card.')
physicalMemoryCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardStatus.setDescription('1300.0060.0001.0005 This attribute defines the status of the physical memory card.')
physicalMemoryCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardName.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardName.setDescription('1300.0060.0001.0006 This attribute defines the name of the physical memory card.')
physicalMemoryCardTotalNumberSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 7), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardTotalNumberSockets.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardTotalNumberSockets.setDescription('1300.0060.0001.0007 This attribute defines the total number of memory sockets available on the physical memory card. 2,147,483,647 indicates an unknown number of sockets.')
physicalMemoryCardInUseNumberSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 8), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardInUseNumberSockets.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardInUseNumberSockets.setDescription('1300.0060.0001.0008 This attribute defines the number of memory sockets in use on the physical memory card. Zero indicates that the physical memory card is not installed or has a configuration error. 2,147,483,647 indicates an unknown number of sockets.')
physicalMemoryCardPhyMemArrayIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1300, 60, 1, 9), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMemoryCardPhyMemArrayIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: physicalMemoryCardPhyMemArrayIndexReference.setDescription('1300.0060.0001.0009 This attribute defines the index (one based) of the Physical Memory Array Table entry for the physical memory array with the same chassis index that this physical memory card is associated with.')
class DellSpeakerControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 30))
    namedValues = NamedValues(("unknown", 1), ("enableCapable", 2), ("lowCapable", 4), ("mediumCapable", 8), ("highCapable", 16), ("allVolumeCapable", 30))

class DellSpeakerControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("low", 4), ("medium", 8), ("high", 16))

class DellNIFwakeonLanControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 14))
    namedValues = NamedValues(("unknown", 1), ("enableCapable", 2), ("addInCardCapable", 4), ("onBoardCapable", 8), ("bothCapable", 14))

class DellNIFwakeonLanControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 12))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("addInCard", 4), ("onBoard", 8), ("addInCardOrOnBoard", 12))

class DellBootSequenceControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 16, 30))
    namedValues = NamedValues(("bootSequenceUnknown", 1), ("bootFromDisketteFirstCapable", 2), ("bootFromHardDriveFirstCapable", 4), ("bootFromDisketteORHardDriveFirstCapable", 6), ("bootFromDeviceListCapable", 8), ("bootFromCDROMFirstCapable", 16), ("allFirstCapable", 30))

class DellBootSequenceControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("bootSequenceUnknown", 1), ("bootFromDisketteFirst", 2), ("bootFromHardDriveFirst", 4), ("bootFromDeviceList", 8), ("bootFromCDROMFirst", 16))

class DellBIOSPasswordControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("passwordControlCapabilitiesUnknown", 1), ("passwordControlEnableCapable", 2), ("passwordControlJumperDisableCapable", 4), ("passwordControlEnableAndJumperDisableCapable", 6))

class DellBIOSPasswordControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("passwordControlSettingsUnknown", 1), ("passwordControlEnabled", 2), ("passwordControlJumperDisabled", 4))

class DellTPMSecurityControlCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("offCapable", 1), ("onWithPrebootMeasurementsCapable", 2), ("onWithoutPrebootMeasurementsCapable", 4))

class DellTPMSecurityControlSetting(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("onWithPrebootMeasurements", 1), ("onWithoutPrebootMeasurements", 2))

biosSetUpControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10), )
if mibBuilder.loadTexts: biosSetUpControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: biosSetUpControlTable.setDescription('1400.0010 This object defines the BIOS Setup Control Table.')
biosSetUpControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "biosSetUpControlchassisIndex"))
if mibBuilder.loadTexts: biosSetUpControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biosSetUpControlTableEntry.setDescription('1400.0010.0001 This object defines the BIOS Setup Control Table Entry.')
biosSetUpControlchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSetUpControlchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biosSetUpControlchassisIndex.setDescription('1400.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
bSUCpointingDeviceControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 2), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCpointingDeviceControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCpointingDeviceControlCapabilities.setDescription('1400.0010.0001.0002 This attribute defines the BIOS setup control capabilities of the pointing Device.')
bSUCpointingDeviceControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCpointingDeviceControlSettings.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCpointingDeviceControlSettings.setDescription('1400.0010.0001.0003 This attribute defines the BIOS setup control settings of the pointing device.')
bSUCpointingDeviceControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 4), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCpointingDeviceControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCpointingDeviceControlStatus.setDescription('1400.0010.0001.0004 This attribute defines the BIOS setup control status of the pointing device.')
bSUCpointingDeviceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 5), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCpointingDeviceControlName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCpointingDeviceControlName.setDescription('1400.0010.0001.0005 This attribute defines the BIOS setup control name of the pointing device.')
bSUCnumLockControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 6), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCnumLockControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCnumLockControlCapabilities.setDescription('1400.0010.0001.0006 This attribute defines the BIOS setup control capabilities of the numeric lock.')
bSUCnumLockControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 7), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCnumLockControlSettings.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCnumLockControlSettings.setDescription('1400.0010.0001.0007 This attribute defines the BIOS setup control settings of the numeric lock.')
bSUCnumLockControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 8), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCnumLockControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCnumLockControlStatus.setDescription('1400.0010.0001.0008 This attribute defines the BIOS setup control status of the numeric lock.')
bSUCnumLockControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 9), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCnumLockControlName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCnumLockControlName.setDescription('1400.0010.0001.0009 This attribute defines the BIOS setup control name of the numeric lock.')
bSUCprocessorSerialNumberControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 10), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCprocessorSerialNumberControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCprocessorSerialNumberControlCapabilities.setDescription('1400.0010.0001.0010 This attribute defines the BIOS setup control capabilities of the processor serial number.')
bSUCprocessorSerialNumberControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 11), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCprocessorSerialNumberControlSettings.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCprocessorSerialNumberControlSettings.setDescription('1400.0010.0001.0011 This attribute defines the BIOS setup control settings of the processor serial number.')
bSUCprocessorSerialNumberControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 12), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCprocessorSerialNumberControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCprocessorSerialNumberControlStatus.setDescription('1400.0010.0001.0012 This attribute defines the BIOS setup control status of the processor serial number.')
bSUCprocessorSerialNumberControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 13), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCprocessorSerialNumberControlName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCprocessorSerialNumberControlName.setDescription('1400.0010.0001.0013 This attribute defines the BIOS setup control name of the processor serial number.')
bSUCspeakerControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 14), DellSpeakerControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCspeakerControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCspeakerControlCapabilitiesUnique.setDescription('1400.0010.0001.0014 This attribute defines the BIOS setup control capabilities of the speaker.')
bSUCspeakerControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 15), DellSpeakerControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCspeakerControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCspeakerControlSettingsUnique.setDescription('1400.0010.0001.0015 This attribute defines the BIOS setup control settings of the speaker.')
bSUCspeakerControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 16), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCspeakerControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCspeakerControlStatus.setDescription('1400.0010.0001.0016 This attribute defines the BIOS setup control status of the speaker.')
bSUCspeakerControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 17), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCspeakerControlName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCspeakerControlName.setDescription('1400.0010.0001.0017 This attribute defines the BIOS setup control name of the speaker.')
bSUCnIFwakeonLanControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 18), DellNIFwakeonLanControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCnIFwakeonLanControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCnIFwakeonLanControlCapabilitiesUnique.setDescription('1400.0010.0001.0018 This attribute defines the BIOS setup control capabilities of the NIF wake on Lan.')
bSUCnIFwakeonLanControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 19), DellNIFwakeonLanControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCnIFwakeonLanControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCnIFwakeonLanControlSettingsUnique.setDescription('1400.0010.0001.0019 This attribute defines the BIOS setup control settings of the NIF wake on Lan.')
bSUCnIFwakeonLanControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 20), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCnIFwakeonLanControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCnIFwakeonLanControlStatus.setDescription('1400.0010.0001.0020 This attribute defines the BIOS setup control status of the NIF wake on Lan.')
bSUCnIFwakeonLanControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 21), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCnIFwakeonLanControlName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCnIFwakeonLanControlName.setDescription('1400.0010.0001.0021 This attribute defines the BIOS setup control name of the NIF wake on Lan.')
bSUCbootSequenceControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 22), DellBootSequenceControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCbootSequenceControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCbootSequenceControlCapabilitiesUnique.setDescription('1400.0010.0001.0022 This attribute defines the BIOS setup control capabilities of the boot sequence.')
bSUCbootSequenceControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 23), DellBootSequenceControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCbootSequenceControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCbootSequenceControlSettingsUnique.setDescription('1400.0010.0001.0023 This attribute defines the BIOS setup control settings of the boot sequence.')
bSUCbootSequenceControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 24), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCbootSequenceControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCbootSequenceControlStatus.setDescription('1400.0010.0001.0024 This attribute defines the BIOS setup control status of the boot sequence.')
bSUCbootSequenceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 25), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCbootSequenceControlName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCbootSequenceControlName.setDescription('1400.0010.0001.0025 This attribute defines the BIOS setup control name of the boot sequence.')
bSUCadministratorPasswordControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 26), DellBIOSPasswordControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCadministratorPasswordControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCadministratorPasswordControlCapabilitiesUnique.setDescription('1400.0010.0001.0026 This attribute defines the BIOS setup control capabilities of the administrator password.')
bSUCadministratorPasswordControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 27), DellBIOSPasswordControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCadministratorPasswordControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCadministratorPasswordControlSettingsUnique.setDescription('1400.0010.0001.0027 This attribute defines the BIOS setup control settings of the administrator password.')
bSUCadministratorPasswordControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 28), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCadministratorPasswordControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCadministratorPasswordControlStatus.setDescription('1400.0010.0001.0028 This attribute defines the BIOS setup control status of the administrator password.')
bSUCadministratorPasswordPasswordVerifyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 29), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCadministratorPasswordPasswordVerifyName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCadministratorPasswordPasswordVerifyName.setDescription('1400.0010.0001.0029 This attribute defines the BIOS setup control value of the current administrator password.')
bSUCadministratorPasswordNewPasswordName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 30), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCadministratorPasswordNewPasswordName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCadministratorPasswordNewPasswordName.setDescription('1400.0010.0001.0030 This attribute defines the BIOS setup control value of the new administrator password. To set a new administrator password, a successful set of the current administrator password must have been done immediately preceeding this set.')
bSUCuserPasswordControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 31), DellBIOSPasswordControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCuserPasswordControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCuserPasswordControlCapabilitiesUnique.setDescription('1400.0010.0001.0031 This attribute defines the BIOS setup control capabilities of the user password.')
bSUCuserPasswordControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 32), DellBIOSPasswordControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCuserPasswordControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCuserPasswordControlSettingsUnique.setDescription('1400.0010.0001.0032 This attribute defines the BIOS setup control settings of the user password.')
bSUCuserPasswordControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 33), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCuserPasswordControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCuserPasswordControlStatus.setDescription('1400.0010.0001.0033 This attribute defines the BIOS setup control status of the user password.')
bSUCuserPasswordPasswordVerifyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 34), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCuserPasswordPasswordVerifyName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCuserPasswordPasswordVerifyName.setDescription('1400.0010.0001.0034 This attribute defines the BIOS setup control value of the current user password.')
bSUCuserPasswordNewPasswordName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 35), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCuserPasswordNewPasswordName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCuserPasswordNewPasswordName.setDescription('1400.0010.0001.0035 This attribute defines the BIOS setup control value of the new user password. To set a new user password, a successful set of the current user password must have been done immediately preceeding this set.')
bSUCtpmSecurityControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 36), DellTPMSecurityControlCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCtpmSecurityControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCtpmSecurityControlCapabilities.setDescription('1400.0010.0001.0036 This attribute defines the BIOS setup control capabilities of Trusted Platform Module (TPM) security.')
bSUCtpmSecurityControlSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 37), DellTPMSecurityControlSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCtpmSecurityControlSetting.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCtpmSecurityControlSetting.setDescription('1400.0010.0001.0037 This attribute defines the BIOS setup control setting of Trusted Platform Module (TPM) security.')
bSUCtpmSecurityControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 38), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCtpmSecurityControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCtpmSecurityControlStatus.setDescription('1400.0010.0001.0038 This attribute defines the BIOS setup control status of Trusted Platform Module (TPM) security.')
bSUCtpmSecurityControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 10, 1, 39), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSUCtpmSecurityControlName.setStatus('mandatory')
if mibBuilder.loadTexts: bSUCtpmSecurityControlName.setDescription('1400.0010.0001.0039 This attribute defines the BIOS setup control name of Trusted Platform Module (TPM) security.')
sCSIControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 20), )
if mibBuilder.loadTexts: sCSIControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIControlTable.setDescription('1400.0020 This object defines the Small Computer Systems Interface (SCSI) Control Table.')
sCSIControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "sCSIControlchassisIndex"), (0, "MIB-Dell-10892", "sCSIControlIndex"))
if mibBuilder.loadTexts: sCSIControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIControlTableEntry.setDescription('1400.0020.0001 This object defines the Small Computer Systems Interface (SCSI) Control Table Entry.')
sCSIControlchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIControlchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIControlchassisIndex.setDescription('1400.0020.0001.0001 This attribute defines the index (one based) of the assoicated chassis.')
sCSIControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIControlIndex.setDescription('1400.0020.0001.0002 This attribute defines the index (one based) of the SCSI control.')
sCSIControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 20, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIControlCapabilities.setDescription('1400.0020.0001.0003 This attribute defines the state capabilities of the SCSI control.')
sCSIControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 20, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIControlSettings.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIControlSettings.setDescription('1400.0020.0001.0004 This attribute defines the state settings of the SCSI control.')
sCSIControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 20, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIControlStatus.setDescription('1400.0020.0001.0005 This attribute defines the status of the SCSI control.')
sCSIControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 20, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCSIControlName.setStatus('mandatory')
if mibBuilder.loadTexts: sCSIControlName.setDescription('1400.0020.0001.0006 This attribute defines the BIOS setup control name of the SCSI device.')
class DellParallelPortControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 10, 16, 18, 30))
    namedValues = NamedValues(("unknown", 1), ("enableCapable", 2), ("lpt1Capable", 4), ("lpt1andEnableCapable", 6), ("lpt2Capable", 8), ("lpt2andEnableCapable", 10), ("lpt3Capable", 16), ("lpt3andEnableCapable", 18), ("allParallelPortCapable", 30))

class DellParallelPortControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 10, 16, 18))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("lpt1", 4), ("lpt1Enabled", 6), ("lpt2", 8), ("lpt2Enabled", 10), ("lpt3", 16), ("lpt3Enabled", 18))

class DellParallelPortControlModeCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 16, 30))
    namedValues = NamedValues(("unknown", 1), ("atCapable", 2), ("ps2Capable", 4), ("atAndPS2Capable", 6), ("ecpCapable", 8), ("eppCapable", 16), ("allModeCapable", 30))

class DellParallelPortControlModeSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("atModeEnabled", 2), ("ps2ModeEnabled", 4), ("ecpModeEnabled", 8), ("eppModeEnabled", 16))

parallelPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30), )
if mibBuilder.loadTexts: parallelPortControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlTable.setDescription('1400.0030 This object defines the Parallel Port Control Table.')
parallelPortControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "parallelPortControlchassisIndex"), (0, "MIB-Dell-10892", "parallelPortControlIndex"))
if mibBuilder.loadTexts: parallelPortControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlTableEntry.setDescription('1400.0030.0001 This object defines the Parallel Port Control Table Entry.')
parallelPortControlchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortControlchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlchassisIndex.setDescription('1400.0030.0001.0001 This attribute defines the index (one based) of the associated chassis.')
parallelPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlIndex.setDescription('1400.0030.0001.0002 This attribute defines the index (one based) of the parallel port control.')
parallelPortControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1, 3), DellParallelPortControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlCapabilitiesUnique.setDescription('1400.0030.0001.0003 This attribute defines the port capabilities of the parallel port control.')
parallelPortControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1, 4), DellParallelPortControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlSettingsUnique.setDescription('1400.0030.0001.0004 This attribute defines the port settings of the parallel port control.')
parallelPortControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlStatus.setDescription('1400.0030.0001.0005 This attribute defines the status of the parallel port control.')
parallelPortControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortControlName.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlName.setDescription('1400.0030.0001.0006 This attribute defines the BIOS setup control name of the parallel port.')
parallelPortControlModeCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1, 7), DellParallelPortControlModeCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortControlModeCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlModeCapabilitiesUnique.setDescription('1400.0030.0001.0007 This attribute defines the mode capabilities of the parallel port control.')
parallelPortControlModeSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 30, 1, 8), DellParallelPortControlModeSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortControlModeSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: parallelPortControlModeSettingsUnique.setDescription('1400.0030.0001.0008 This attribute defines the mode settings of the parallel port control.')
class DellSerialPortControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 10, 16, 18, 32, 34, 64, 86, 106, 126))
    namedValues = NamedValues(("unknown", 1), ("enableCapable", 2), ("com1Capable", 4), ("enableAndCom1Capable", 6), ("com2Capable", 8), ("enableAndCom2Capable", 10), ("com3Capable", 16), ("enableAndCom3Capable", 18), ("com4Capable", 32), ("enableAndCom4Capable", 34), ("autoConfigCapable", 64), ("com1OrCom3CapableAndAutoConfigCapable", 86), ("com2OrCom4CapableAndAutoConfigCapable", 106), ("allcomCapable", 126))

class DellSerialPortControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 10, 16, 18, 32, 34, 64, 66))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("com1", 4), ("com1Enabled", 6), ("com2", 8), ("com2Enabled", 10), ("com3", 16), ("com3Enabled", 18), ("com4", 32), ("com4Enabled", 34), ("comPortsAutoConfig", 64), ("enabledAndAutoConfig", 66))

serialPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 40), )
if mibBuilder.loadTexts: serialPortControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortControlTable.setDescription('1400.0040 This object defines the Serial Port Control Table.')
serialPortControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 40, 1), ).setIndexNames((0, "MIB-Dell-10892", "serialPortControlchassisIndex"), (0, "MIB-Dell-10892", "serialPortControlIndex"))
if mibBuilder.loadTexts: serialPortControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortControlTableEntry.setDescription('1400.0040.0001 This object defines the Serial Port Control Table Entry.')
serialPortControlchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 40, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortControlchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortControlchassisIndex.setDescription('1400.0040.0001.0001 This attribute defines the index (one based) of the associated chassis.')
serialPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 40, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortControlIndex.setDescription('1400.0040.0001.0002 This attribute defines the index (one based) of the serial port control.')
serialPortControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 40, 1, 3), DellSerialPortControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortControlCapabilitiesUnique.setDescription('1400.0040.0001.0003 This attribute defines the port capabilities of the serial port control.')
serialPortControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 40, 1, 4), DellSerialPortControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortControlSettingsUnique.setDescription('1400.0040.0001.0004 This attribute defines the port settings of the serial port control.')
serialPortControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 40, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortControlStatus.setDescription('1400.0040.0001.0005 This attribute defines the status of the serial port control.')
serialPortControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 40, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortControlName.setStatus('mandatory')
if mibBuilder.loadTexts: serialPortControlName.setDescription('1400.0040.0001.0006 This attribute defines the BIOS setup control name of the serial port.')
usbControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 50), )
if mibBuilder.loadTexts: usbControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: usbControlTable.setDescription('1400.0050 This object defines the Universal Serial Bus (USB) Control Table.')
usbControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 50, 1), ).setIndexNames((0, "MIB-Dell-10892", "usbControlchassisIndex"), (0, "MIB-Dell-10892", "usbControlIndex"))
if mibBuilder.loadTexts: usbControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: usbControlTableEntry.setDescription('1400.0050.0001 This object defines the Universal Serial Bus (USB) Control Table Entry.')
usbControlchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 50, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControlchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: usbControlchassisIndex.setDescription('1400.0050.0001.0001 This attribute defines the index (one based) of the associated chassis.')
usbControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 50, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: usbControlIndex.setDescription('1400.0050.0001.0002 This attribute defines the index (one based) of the USB control.')
usbControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 50, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: usbControlCapabilities.setDescription('1400.0050.0001.0003 This attribute defines the state capabilities of the USB control.')
usbControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 50, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControlSettings.setStatus('mandatory')
if mibBuilder.loadTexts: usbControlSettings.setDescription('1400.0050.0001.0004 This attribute defines the state settings of the USB control.')
usbControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 50, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: usbControlStatus.setDescription('1400.0050.0001.0005 This attribute defines the status of the USB control.')
usbControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 50, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbControlName.setStatus('mandatory')
if mibBuilder.loadTexts: usbControlName.setDescription('1400.0050.0001.0006 This attribute defines the BIOS setup control name of the USB device.')
class DellideControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("ideControlAutoConfigOrEnableCapable", 2))

class DellideControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("ideControlAutoConfigEnabledOrEnabled", 2))

ideControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 60), )
if mibBuilder.loadTexts: ideControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ideControlTable.setDescription('1400.0060 This object defines the Integrated Device Electronics (IDE) Control Table.')
ideControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 60, 1), ).setIndexNames((0, "MIB-Dell-10892", "ideControlchassisIndex"), (0, "MIB-Dell-10892", "ideControlIndex"))
if mibBuilder.loadTexts: ideControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ideControlTableEntry.setDescription('1400.0060.0001 This object defines the Integrated Device Electronics (IDE) Control Table Entry.')
ideControlchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 60, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ideControlchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ideControlchassisIndex.setDescription('1400.0060.0001.0001 This attribute defines the index (one based) of the associated chassis.')
ideControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 60, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ideControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ideControlIndex.setDescription('1400.0060.0001.0002 This attribute defines the index (one based) of the IDE control.')
ideControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 60, 1, 3), DellideControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ideControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: ideControlCapabilitiesUnique.setDescription('1400.0060.0001.0003 This attribute defines the capabilities of the IDE control.')
ideControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 60, 1, 4), DellideControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ideControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: ideControlSettingsUnique.setDescription('1400.0060.0001.0004 This attribute defines the settings of the IDE control.')
ideControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 60, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ideControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ideControlStatus.setDescription('1400.0060.0001.0005 This attribute defines the state of the IDE control.')
ideControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 60, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ideControlName.setStatus('mandatory')
if mibBuilder.loadTexts: ideControlName.setDescription('1400.0060.0001.0006 This attribute defines the BIOS setup control name of the IDE device.')
class DellDisketteControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("disketteAutoConfigOrEnableCapable", 2), ("disketteReadOnlyCapable", 4), ("disketteAutoConfigOrEnableCapableandReadOnlyCapable", 6))

class DellDisketteControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("disketteAutoConfigEnabledOrEnabled", 2), ("disketteisReadOnly", 4))

disketteControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 70), )
if mibBuilder.loadTexts: disketteControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: disketteControlTable.setDescription('1400.0070 This object defines the Diskette Control Table.')
disketteControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 70, 1), ).setIndexNames((0, "MIB-Dell-10892", "disketteControlchassisIndex"), (0, "MIB-Dell-10892", "disketteControlIndex"))
if mibBuilder.loadTexts: disketteControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: disketteControlTableEntry.setDescription('1400.0070.0001 This object defines the Diskette Control Table Entry.')
disketteControlchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 70, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disketteControlchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: disketteControlchassisIndex.setDescription('1400.0070.0001.0001 This attribute defines the index (one based) of the associated chassis.')
disketteControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 70, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disketteControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: disketteControlIndex.setDescription('1400.0070.0001.0002 This attribute defines the index (one based) of the diskette control.')
disketteControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 70, 1, 3), DellDisketteControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disketteControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: disketteControlCapabilitiesUnique.setDescription('1400.0070.0001.0003 This attribute defines the capabilities of the diskette control.')
disketteControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 70, 1, 4), DellDisketteControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disketteControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: disketteControlSettingsUnique.setDescription('1400.0070.0001.0004 This attribute defines the settings of the diskette control.')
disketteControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 70, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disketteControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: disketteControlStatus.setDescription('1400.0070.0001.0005 This attribute defines the status of the diskette control.')
disketteControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 70, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disketteControlName.setStatus('mandatory')
if mibBuilder.loadTexts: disketteControlName.setDescription('1400.0070.0001.0006 This attribute defines the BIOS setup control name of the diskette device.')
class DellNetworkInterfaceControlCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enableCapable", 2), ("enableWithoutPXECapable", 4))

class DellNetworkInterfaceControlSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("enabledWithoutPXE", 4))

networkInterfaceControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 80), )
if mibBuilder.loadTexts: networkInterfaceControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: networkInterfaceControlTable.setDescription('1400.0080 This object defines the Network Interface Control Table.')
networkInterfaceControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 80, 1), ).setIndexNames((0, "MIB-Dell-10892", "networkInterfaceControlchassisIndex"), (0, "MIB-Dell-10892", "networkInterfaceControlIndex"))
if mibBuilder.loadTexts: networkInterfaceControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: networkInterfaceControlTableEntry.setDescription('1400.0080.0001 This object defines the Network Interface Control Table Entry.')
networkInterfaceControlchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 80, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceControlchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: networkInterfaceControlchassisIndex.setDescription('1400.0080.0001.0001 This attribute defines the index (one based) of the associated chassis.')
networkInterfaceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 80, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: networkInterfaceControlIndex.setDescription('1400.0080.0001.0002 This attribute defines the index (one based) of the network interface control.')
networkInterfaceControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 80, 1, 3), DellNetworkInterfaceControlCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: networkInterfaceControlCapabilitiesUnique.setDescription('1400.0080.0001.0003 This attribute defines the capabilities of the network interface control.')
networkInterfaceControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 80, 1, 4), DellNetworkInterfaceControlSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: networkInterfaceControlSettingsUnique.setDescription('1400.0080.0001.0004 This attribute defines the settings of the network interface control.')
networkInterfaceControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 80, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: networkInterfaceControlStatus.setDescription('1400.0080.0001.0005 This attribute defines the status of the network interface control.')
networkInterfaceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 80, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceControlName.setStatus('mandatory')
if mibBuilder.loadTexts: networkInterfaceControlName.setDescription('1400.0080.0001.0006 This attribute defines the BIOS setup control name of the network interface.')
class DellBIOSSettingValueType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("integer", 1), ("string", 2), ("enumeration", 3), ("orderedList", 4))

biosSettingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90), )
if mibBuilder.loadTexts: biosSettingTable.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingTable.setDescription('1400.0090 This object defines the BIOS Setting Table.')
biosSettingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1), ).setIndexNames((0, "MIB-Dell-10892", "biosSettingChassisIndex"), (0, "MIB-Dell-10892", "biosSettingIndex"))
if mibBuilder.loadTexts: biosSettingTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingTableEntry.setDescription('1400.0090.0001 This object defines the BIOS Setting Table Entry.')
biosSettingChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingChassisIndex.setDescription('1400.0090.0001.0001 This attribute defines the index (one based) of the associated chassis.')
biosSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingIndex.setDescription('1400.0090.0001.0002 This attribute defines the index (one based) of the BIOS setting.')
biosSettingName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingName.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingName.setDescription('1400.0090.0001.0003 This attribute defines the name of the BIOS setting.')
biosSettingDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingDisplayName.setDescription('1400.0090.0001.0004 This attribute defines the display name of the BIOS setting.')
biosSettingValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 5), DellBIOSSettingValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingValueType.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingValueType.setDescription('1400.0090.0001.0005 This attribute defines the type of the BIOS setting value.')
biosSettingCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingCurrentValue.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingCurrentValue.setDescription('1400.0090.0001.0006 This attribute defines the current value of the BIOS setting. If value type is orderedList(4), value is an ordered comma-separated list of values if there is more than one value.')
biosSettingPendingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingPendingValue.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingPendingValue.setDescription('1400.0090.0001.0007 This attribute defines the pending value of the BIOS setting. This value will not take effect until some point in the future. This would typically be used to represent a value that could not be changed until a system reset. If value type is orderedList(4), value is an ordered comma-separated list of values if there is more than one value.')
biosSettingDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingDefaultValue.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingDefaultValue.setDescription('1400.0090.0001.0008 This attribute defines the default value of the BIOS setting. If value type is orderedList(4), value is an ordered comma-separated list of values if there is more than one value.')
biosSettingPossibleValues = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingPossibleValues.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingPossibleValues.setDescription('1400.0090.0001.0009 This attribute defines the possible values of the BIOS setting. If value type is integer(1) or string(2), no value is returned. If value type is enumeration(3) or orderedList(4), value is a comma-separated list of values if there is more than one value.')
biosSettingDisplayOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 10), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingDisplayOrder.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingDisplayOrder.setDescription('1400.0090.0001.0010 This attribute defines the recommended display order of the BIOS setting within its BIOS setting group. This value can be used to display BIOS settings from lowest number to highest number.')
biosSettingGroupDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingGroupDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingGroupDisplayName.setDescription('1400.0090.0001.0011 This attribute defines the display name of the BIOS setting group for the BIOS setting.')
biosSettingFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1400, 90, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosSettingFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: biosSettingFQDD.setDescription('1400.0090.0001.0012 This attribute defines the Fully Qualified Device Descriptor (FQDD) for the BIOS setting.')
class DellLocalResponseAgentCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 256, 383))
    namedValues = NamedValues(("speakerControlCapable", 1), ("consoleAlertCapable", 2), ("broadcastMessageCapable", 4), ("osShutDownCapable", 8), ("rebootCapable", 16), ("powerCycleCapable", 32), ("powerOFFCapable", 64), ("executeApplicationCapable", 256), ("lraFullyCapable", 383))

class DellLRAThermalShutdownCapabilitiesUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 10, 14))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("warningCapable", 4), ("enableOnWarningCapable", 6), ("failureCapable", 8), ("enableOnFailureCapable", 10), ("enableOnWarningOrFailureCapable", 14))

class DellLRAThermalShutdownStateSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 6, 10))
    namedValues = NamedValues(("unknown", 1), ("activatedOnWarning", 6), ("activatedOnFailure", 10))

lRAGlobalSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 10), )
if mibBuilder.loadTexts: lRAGlobalSettingsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lRAGlobalSettingsTable.setDescription('1500.0010 This object defines the Local Response Agent (LRA) Global Settings Table.')
lRAGlobalSettingsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "lRAGlobalchassisIndex"))
if mibBuilder.loadTexts: lRAGlobalSettingsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lRAGlobalSettingsTableEntry.setDescription('1500.0010.0001 This object defines the Local Response Agent (LRA) Global Settings Table Entry.')
lRAGlobalchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAGlobalchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lRAGlobalchassisIndex.setDescription('1500.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
lRAGlobalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 10, 1, 2), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAGlobalState.setStatus('mandatory')
if mibBuilder.loadTexts: lRAGlobalState.setDescription('1500.0010.0001.0002 This attribute defines the state settings of the Local Response Agent.')
lRAGlobalSettingsDisableTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 10, 1, 3), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAGlobalSettingsDisableTimeoutValue.setStatus('mandatory')
if mibBuilder.loadTexts: lRAGlobalSettingsDisableTimeoutValue.setDescription('1500.0010.0001.0003 This attribute defines the timeout duration in seconds that the Local Response Agent will be disabled after a machine shutdown and reboot.')
lRAGlobalSettingsCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 10, 1, 4), DellLocalResponseAgentCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAGlobalSettingsCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: lRAGlobalSettingsCapabilitiesUnique.setDescription('1500.0010.0001.0004 This attribute defines the global settings capabilities that all Local Response Agents may or may not allow to be set or reset.')
lRAGlobalThermalShutdownCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 10, 1, 5), DellLRAThermalShutdownCapabilitiesUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAGlobalThermalShutdownCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: lRAGlobalThermalShutdownCapabilitiesUnique.setDescription('1500.0010.0001.0005 This attribute defines the thermal shutdown capabilities of the Local Response Agent.')
lRAGlobalThermalShutdownStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 10, 1, 6), DellLRAThermalShutdownStateSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAGlobalThermalShutdownStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: lRAGlobalThermalShutdownStateSettingsUnique.setDescription('1500.0010.0001.0006 This attribute defines the thermal shutdown settings of the Local Response Agent.')
class DellLocalResponseAgentSettingsUnique(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 256, 383))
    namedValues = NamedValues(("speakerControl", 1), ("consoleAlert", 2), ("broadcastMessage", 4), ("osShutDown", 8), ("reboot", 16), ("powerCycle", 32), ("powerOFF", 64), ("executeApplication", 256), ("allLRASettingsUnique", 383))

lRAActionTableTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 20), )
if mibBuilder.loadTexts: lRAActionTableTable.setStatus('mandatory')
if mibBuilder.loadTexts: lRAActionTableTable.setDescription('1500.0020 This object defines the Local Response Agent (LRA) Action Table.')
lRAActionTableTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "lRAActionTablechassisIndex"), (0, "MIB-Dell-10892", "lRAActionTableActionNumberIndex"))
if mibBuilder.loadTexts: lRAActionTableTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lRAActionTableTableEntry.setDescription('1500.0020.0001 This object defines the Local Response Agent (LRA) Action Table Entry.')
lRAActionTablechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAActionTablechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lRAActionTablechassisIndex.setDescription('1500.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
lRAActionTableActionNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 20, 1, 2), DellUnsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAActionTableActionNumberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lRAActionTableActionNumberIndex.setDescription('1500.0020.0001.0002 This attribute defines the action number index of the LRA action. The currently supported values are: 160 temperature failure action definition 168 cooling device failure action definition 172 voltage failure action definition 200 temperature warning action definition 202 voltage warning action definition 204 cooling device warning action definition 206 amperage failure action definition 208 amperage warning action definition 210 redundancy unit redundancy lost action definition 212 redundancy unit redundancy degraded action definition 214 power supply failure action definition 220 chassis intrusion action definition 228 memory device noncritical action definition 474 memory device critical action definition 1006 automatic system recovery (ASR) action definition 1353 power supply warning action definition 1553 log near full action definition 1554 log full action definition 1603 processor warning action definition 1604 processor failure action definition 1703 battery warning action definition 1704 battery failure action definition')
lRAActionTableUserApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAActionTableUserApplicationName.setStatus('mandatory')
if mibBuilder.loadTexts: lRAActionTableUserApplicationName.setDescription('1500.0020.0001.0003 This attribute defines the name of the user application executable path and file name to execute by the Local Response Agent if the value executeApplication was set.')
lRAActionTableSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1500, 20, 1, 4), DellLocalResponseAgentSettingsUnique()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRAActionTableSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: lRAActionTableSettingsUnique.setDescription('1500.0020.0001.0004 This attribute defines the settings for the LRA action.')
class DellCooOwnershipCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("owned", 3), ("leased", 4), ("rented", 5), ("offOfLease", 6), ("transfer", 7))

class DellCooHourDayDurationType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("hours", 2), ("days", 3))

class DellCooDayMonthDurationType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("days", 3), ("months", 4))

class DellCooMonthYearDurationType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("months", 4), ("years", 5))

cooTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10), )
if mibBuilder.loadTexts: cooTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooTable.setDescription('1600.0010 This object defines the Cost Of Ownership (COO) Table.')
cooTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "coochassisIndex"))
if mibBuilder.loadTexts: cooTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooTableEntry.setDescription('1600.0010.0001 This object defines the Cost Of Ownership (COO) Table Entry.')
coochassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coochassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coochassisIndex.setDescription('1600.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 2), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooState.setStatus('mandatory')
if mibBuilder.loadTexts: cooState.setDescription('1600.0010.0001.0002 This attribute defines the state settings of the COO information.')
cooAquisitionPurchaseCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 3), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooAquisitionPurchaseCost.setStatus('mandatory')
if mibBuilder.loadTexts: cooAquisitionPurchaseCost.setDescription('1600.0010.0001.0003 This attribute defines the purchase cost of the system.')
cooAquisitionWayBillNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 4), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooAquisitionWayBillNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cooAquisitionWayBillNumber.setDescription('1600.0010.0001.0004 This attribute defines the waybill number of the system.')
cooAquisitionInstallDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 5), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooAquisitionInstallDateName.setStatus('mandatory')
if mibBuilder.loadTexts: cooAquisitionInstallDateName.setDescription('1600.0010.0001.0005 This attribute defines the install date and time of the system. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes, ss are the seconds, uuuuuu are the microseconds and +fff or -fff is the offset from UTC in minutes.')
cooAquisitionPurchaseOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 6), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooAquisitionPurchaseOrder.setStatus('mandatory')
if mibBuilder.loadTexts: cooAquisitionPurchaseOrder.setDescription('1600.0010.0001.0006 This attribute defines the purchase order number of the system.')
cooAquisitionPurchaseDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 7), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooAquisitionPurchaseDateName.setStatus('mandatory')
if mibBuilder.loadTexts: cooAquisitionPurchaseDateName.setDescription('1600.0010.0001.0007 This attribute defines the purchase date and time of the system. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes, ss are the seconds, uuuuuu are the microseconds and +fff or -fff is the offset from UTC in minutes.')
cooAquisitionSigningAuthorityName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 8), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooAquisitionSigningAuthorityName.setStatus('mandatory')
if mibBuilder.loadTexts: cooAquisitionSigningAuthorityName.setDescription('1600.0010.0001.0008 This attribute defines the name of the signing authority for the system.')
cooOriginalMachineConfigurationExpensed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 9), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOriginalMachineConfigurationExpensed.setStatus('mandatory')
if mibBuilder.loadTexts: cooOriginalMachineConfigurationExpensed.setDescription('1600.0010.0001.0009 This attribute defines if the purchase of the system was expensed or not.')
cooOriginalMachineConfigurationVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 10), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOriginalMachineConfigurationVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOriginalMachineConfigurationVendorName.setDescription('1600.0010.0001.0010 This attribute defines the name of the vendor of the system.')
cooCostCenterInformationVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 11), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooCostCenterInformationVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostCenterInformationVendorName.setDescription('1600.0010.0001.0011 This attribute defines the cost center name of the system.')
cooUserInformationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 12), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooUserInformationUserName.setStatus('mandatory')
if mibBuilder.loadTexts: cooUserInformationUserName.setDescription('1600.0010.0001.0012 This attribute defines the name of the user of the system.')
cooExtendedWarrantyStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 13), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooExtendedWarrantyStartDateName.setStatus('mandatory')
if mibBuilder.loadTexts: cooExtendedWarrantyStartDateName.setDescription('1600.0010.0001.0013 This attribute defines the extended warranty start date and time for the system. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes, ss are the seconds, uuuuuu are the microseconds and +fff or -fff is the offset from UTC in minutes.')
cooExtendedWarrantyEndDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 14), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooExtendedWarrantyEndDateName.setStatus('mandatory')
if mibBuilder.loadTexts: cooExtendedWarrantyEndDateName.setDescription('1600.0010.0001.0014 This attribute defines the extended warranty end date and time for the system. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes, ss are the seconds, uuuuuu are the microseconds and +fff or -fff is the offset from UTC in minutes.')
cooExtendedWarrantyCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 15), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooExtendedWarrantyCost.setStatus('mandatory')
if mibBuilder.loadTexts: cooExtendedWarrantyCost.setDescription('1600.0010.0001.0015 This attribute defines the extended warranty cost for the system.')
cooExtendedWarrantyProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 16), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooExtendedWarrantyProviderName.setStatus('mandatory')
if mibBuilder.loadTexts: cooExtendedWarrantyProviderName.setDescription('1600.0010.0001.0016 This attribute defines the name of the extended warranty provider for the system.')
cooOwnershipCode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 17), DellCooOwnershipCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOwnershipCode.setStatus('mandatory')
if mibBuilder.loadTexts: cooOwnershipCode.setDescription('1600.0010.0001.0017 This attribute defines the ownership code for the system.')
cooCorporateOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 18), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooCorporateOwnerName.setStatus('mandatory')
if mibBuilder.loadTexts: cooCorporateOwnerName.setDescription('1600.0010.0001.0018 This attribute defines the name of the corporate owner of the system.')
cooHazardousWasteCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 19), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooHazardousWasteCodeName.setStatus('mandatory')
if mibBuilder.loadTexts: cooHazardousWasteCodeName.setDescription('1600.0010.0001.0019 This attribute defines the hazardous waste code name for the system.')
cooDeploymentDateLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 20), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooDeploymentDateLength.setStatus('mandatory')
if mibBuilder.loadTexts: cooDeploymentDateLength.setDescription('1600.0010.0001.0020 This attribute defines the deployment time length for the system.')
cooDeploymentDurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 21), DellCooHourDayDurationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooDeploymentDurationType.setStatus('mandatory')
if mibBuilder.loadTexts: cooDeploymentDurationType.setDescription('1600.0010.0001.0021 This attribute defines the deployment duration time unit for the Dell System.')
cooTrainingName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 22), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooTrainingName.setStatus('mandatory')
if mibBuilder.loadTexts: cooTrainingName.setDescription('1600.0010.0001.0022 This attribute defines the training name for the system.')
cooOutsourcingProblemDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 23), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOutsourcingProblemDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOutsourcingProblemDescriptionName.setDescription('1600.0010.0001.0023 This attribute defines the outsourcing problem description for the system.')
cooOutsourcingServiceFeeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 24), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOutsourcingServiceFeeName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOutsourcingServiceFeeName.setDescription('1600.0010.0001.0024 This attribute defines the outsourcing service fee for the system.')
cooOutsourcingSigningAuthorityName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 25), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOutsourcingSigningAuthorityName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOutsourcingSigningAuthorityName.setDescription('1600.0010.0001.0025 This attribute defines the name of the person who has signing authority for service.')
cooOutsourcingProviderFeeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 26), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOutsourcingProviderFeeName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOutsourcingProviderFeeName.setDescription('1600.0010.0001.0026 This attribute defines any additional outsourcing charge for service.')
cooOutsourcingProviderServiceLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 27), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOutsourcingProviderServiceLevelName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOutsourcingProviderServiceLevelName.setDescription('1600.0010.0001.0027 This attribute defines the service level agreement for service.')
cooInsuranceCompanyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 28), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooInsuranceCompanyName.setStatus('mandatory')
if mibBuilder.loadTexts: cooInsuranceCompanyName.setDescription('1600.0010.0001.0028 This attribute defines the name of the company insuring the system.')
cooBoxAssetTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 29), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooBoxAssetTagName.setStatus('mandatory')
if mibBuilder.loadTexts: cooBoxAssetTagName.setDescription('1600.0010.0001.0029 This attribute defines the name the system asset tag.')
cooBoxSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 30), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooBoxSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: cooBoxSystemName.setDescription('1600.0010.0001.0030 This attribute defines the name of the system.')
cooBoxCPUSerialNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 31), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooBoxCPUSerialNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: cooBoxCPUSerialNumberName.setDescription('1600.0010.0001.0031 This attribute defines the name of the CPU serial number in the system.')
cooOperatingSystemUpgradeTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 32), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOperatingSystemUpgradeTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOperatingSystemUpgradeTypeName.setDescription('1600.0010.0001.0032 This attribute defines the name the operating system on the system.')
cooOperatingSystemUpgradePatchLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 33), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOperatingSystemUpgradePatchLevelName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOperatingSystemUpgradePatchLevelName.setDescription('1600.0010.0001.0033 This attribute defines the operating system patch level of the system.')
cooOperatingSystemUpgradeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 34), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOperatingSystemUpgradeDate.setStatus('mandatory')
if mibBuilder.loadTexts: cooOperatingSystemUpgradeDate.setDescription('1600.0010.0001.0034 This attribute defines the operating system upgrade date of the system.')
cooDepreciationDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 35), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooDepreciationDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cooDepreciationDuration.setDescription('1600.0010.0001.0035 This attribute defines the depreciation duration time for the system.')
cooDepreciationDurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 36), DellCooMonthYearDurationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooDepreciationDurationType.setStatus('mandatory')
if mibBuilder.loadTexts: cooDepreciationDurationType.setDescription('1600.0010.0001.0036 This attribute defines the depreciation duration time unit for the system.')
cooDepreciationPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 37), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooDepreciationPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: cooDepreciationPercentage.setDescription('1600.0010.0001.0037 This attribute defines the percentage of depreciation for the system.')
cooDepreciationMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 38), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooDepreciationMethodName.setStatus('mandatory')
if mibBuilder.loadTexts: cooDepreciationMethodName.setDescription('1600.0010.0001.0038 This attribute defines the method of Depreciation for the system.')
cooRegistrationIsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 10, 1, 39), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooRegistrationIsRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: cooRegistrationIsRegistered.setDescription('1600.0010.0001.0039 This attribute defines if the system is registered or not.')
cooServiceContractTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 20), )
if mibBuilder.loadTexts: cooServiceContractTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooServiceContractTable.setDescription('1600.0020 This object defines the Cost Of Ownership (COO) Service Contract Table.')
cooServiceContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooServiceContractchassisIndex"), (0, "MIB-Dell-10892", "cooServiceContractIndex"))
if mibBuilder.loadTexts: cooServiceContractTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooServiceContractTableEntry.setDescription('1600.0020.0001 This object defines the Cost Of Ownership (COO) Service Contract Table Entry.')
cooServiceContractchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooServiceContractchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooServiceContractchassisIndex.setDescription('1600.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooServiceContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooServiceContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooServiceContractIndex.setDescription('1600.0020.0001.0002 This attribute defines the index (one based) of the COO service contract.')
cooServiceContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 20, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooServiceContractState.setStatus('mandatory')
if mibBuilder.loadTexts: cooServiceContractState.setDescription('1600.0020.0001.0003 This attribute defines the state settings of the COO service contract.')
cooServiceContractWasRenewed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 20, 1, 4), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooServiceContractWasRenewed.setStatus('mandatory')
if mibBuilder.loadTexts: cooServiceContractWasRenewed.setDescription('1600.0020.0001.0004 This attribute defines if the COO service contract was renewed not.')
cooServiceContractTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 20, 1, 5), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooServiceContractTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: cooServiceContractTypeName.setDescription('1600.0020.0001.0005 This attribute defines the name of the type of COO service contract.')
cooServiceContractVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 20, 1, 6), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooServiceContractVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: cooServiceContractVendorName.setDescription('1600.0020.0001.0006 This attribute defines the name of the provider of the COO service contract.')
cooCostEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 30), )
if mibBuilder.loadTexts: cooCostEventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostEventLogTable.setDescription('1600.0030 This object defines the Cost Of Ownership (COO) Cost Event Log Table.')
cooCostEventLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooCostEventLogchassisIndex"), (0, "MIB-Dell-10892", "cooCostEventLogIndex"))
if mibBuilder.loadTexts: cooCostEventLogTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostEventLogTableEntry.setDescription('1600.0030.0001 This object defines the Cost Of Ownership (COO) Cost Event Log Table Entry.')
cooCostEventLogchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooCostEventLogchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostEventLogchassisIndex.setDescription('1600.0030.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooCostEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 30, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooCostEventLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostEventLogIndex.setDescription('1600.0030.0001.0002 This attribute defines the index (one based) of the COO cost event log entry.')
cooCostEventLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 30, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooCostEventLogState.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostEventLogState.setDescription('1600.0030.0001.0003 This attribute defines the state settings of the COO cost event log entry.')
cooCostEventLogDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 30, 1, 4), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooCostEventLogDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostEventLogDuration.setDescription('1600.0030.0001.0004 This attribute defines the duration of the COO cost event.')
cooCostEventLogDurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 30, 1, 5), DellCooHourDayDurationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooCostEventLogDurationType.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostEventLogDurationType.setDescription('1600.0030.0001.0005 This attribute defines the duration type of the COO cost event.')
cooCostEventLogDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 30, 1, 6), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooCostEventLogDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: cooCostEventLogDescriptionName.setDescription('1600.0030.0001.0006 This attribute defines the description of the COO cost event.')
cooWarrantyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40), )
if mibBuilder.loadTexts: cooWarrantyTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantyTable.setDescription('1600.0040 This object defines the Cost Of Ownership (COO) Warranty Table.')
cooWarrantyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooWarrantychassisIndex"), (0, "MIB-Dell-10892", "cooWarrantyIndex"))
if mibBuilder.loadTexts: cooWarrantyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantyTableEntry.setDescription('1600.0040.0001 This object defines the Cost Of Ownership (COO) Warranty Table Entry.')
cooWarrantychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooWarrantychassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantychassisIndex.setDescription('1600.0040.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooWarrantyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooWarrantyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantyIndex.setDescription('1600.0040.0001.0002 This attribute defines the index (one based) of the COO warranty.')
cooWarrantyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooWarrantyState.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantyState.setDescription('1600.0040.0001.0003 This attribute defines the state settings of the COO warranty.')
cooWarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40, 1, 4), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooWarrantyDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantyDuration.setDescription('1600.0040.0001.0004 This attribute defines the duration of the COO warranty.')
cooWarrantyDurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40, 1, 5), DellCooDayMonthDurationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooWarrantyDurationType.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantyDurationType.setDescription('1600.0040.0001.0005 This attribute defines the duration type of the COO warranty.')
cooWarrantyEndDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40, 1, 6), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooWarrantyEndDateName.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantyEndDateName.setDescription('1600.0040.0001.0006 This attribute defines the end date of the COO warranty. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes, ss are the seconds, uuuuuu are the microseconds and +fff or -fff is the offset from UTC in minutes.')
cooWarrantyCost = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 40, 1, 7), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooWarrantyCost.setStatus('mandatory')
if mibBuilder.loadTexts: cooWarrantyCost.setDescription('1600.0040.0001.0007 This attribute defines the cost of the COO warranty.')
cooLeaseInformationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50), )
if mibBuilder.loadTexts: cooLeaseInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationTable.setDescription('1600.0050 This object defines the Cost Of Ownership (COO) Lease Information Table.')
cooLeaseInformationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooLeaseInformationchassisIndex"), (0, "MIB-Dell-10892", "cooLeaseInformationIndex"))
if mibBuilder.loadTexts: cooLeaseInformationTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationTableEntry.setDescription('1600.0050.0001 This object defines the Cost Of Ownership (COO) Lease Information Table Entry.')
cooLeaseInformationchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationchassisIndex.setDescription('1600.0050.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooLeaseInformationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationIndex.setDescription('1600.0050.0001.0002 This attribute defines the index (one based) of the COO lease information.')
cooLeaseInformationState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationState.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationState.setDescription('1600.0050.0001.0003 This attribute defines the state settings of the COO lease information.')
cooLeaseInformationMultipleSchedules = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 4), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationMultipleSchedules.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationMultipleSchedules.setDescription('1600.0050.0001.0004 This attribute defines if there are multiple schedules for this lease.')
cooLeaseInformationBuyOutAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 5), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationBuyOutAmount.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationBuyOutAmount.setDescription('1600.0050.0001.0005 This attribute defines buy out amount for this lease.')
cooLeaseInformationLeaseRateFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 6), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationLeaseRateFactor.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationLeaseRateFactor.setDescription('1600.0050.0001.0006 This attribute defines the rate factor for this lease.')
cooLeaseInformationEndDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 7), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationEndDateName.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationEndDateName.setDescription('1600.0050.0001.0007 This attribute defines the end date for this lease. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes, ss are the seconds, uuuuuu are the microseconds and +fff or -fff is the offset from UTC in minutes.')
cooLeaseInformationFairMarketValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 8), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationFairMarketValue.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationFairMarketValue.setDescription('1600.0050.0001.0008 This attribute defines the fair market value for this lease.')
cooLeaseInformationLessorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 50, 1, 9), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooLeaseInformationLessorName.setStatus('mandatory')
if mibBuilder.loadTexts: cooLeaseInformationLessorName.setDescription('1600.0050.0001.0009 This attribute defines the name of the lessor for this lease.')
cooScheduleNumberTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 60), )
if mibBuilder.loadTexts: cooScheduleNumberTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooScheduleNumberTable.setDescription('1600.0060 This object defines the Cost Of Ownership (COO) Schedule Number Table.')
cooScheduleNumberTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 60, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooScheduleNumberchassisIndex"), (0, "MIB-Dell-10892", "cooScheduleNumberIndex"))
if mibBuilder.loadTexts: cooScheduleNumberTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooScheduleNumberTableEntry.setDescription('1600.0060.0001 This object defines the Cost Of Ownership (COO) Schedule Number Table Entry.')
cooScheduleNumberchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 60, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooScheduleNumberchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooScheduleNumberchassisIndex.setDescription('1600.0060.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooScheduleNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 60, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooScheduleNumberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooScheduleNumberIndex.setDescription('1600.0060.0001.0002 This attribute defines the index (one based) of the COO schedule number.')
cooScheduleNumberState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 60, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooScheduleNumberState.setStatus('mandatory')
if mibBuilder.loadTexts: cooScheduleNumberState.setDescription('1600.0060.0001.0003 This attribute defines the state settings of the COO schedule number.')
cooScheduleNumberLeaseInformationIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 60, 1, 4), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooScheduleNumberLeaseInformationIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: cooScheduleNumberLeaseInformationIndexReference.setDescription('1600.0060.0001.0004 This attribute defines the index (one based) of the COO lease information associated with the COO schedule number.')
cooScheduleNumberDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 60, 1, 5), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooScheduleNumberDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: cooScheduleNumberDescriptionName.setDescription('1600.0060.0001.0005 This attribute defines the description of the COO schedule number.')
cooOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 70), )
if mibBuilder.loadTexts: cooOptionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooOptionsTable.setDescription('1600.0070 This object defines the Cost Of Ownership (COO) Options Table.')
cooOptionsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 70, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooOptionschassisIndex"), (0, "MIB-Dell-10892", "cooOptionsIndex"))
if mibBuilder.loadTexts: cooOptionsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooOptionsTableEntry.setDescription('1600.0070.0001 This object defines the Cost Of Ownership (COO) Options Table Entry.')
cooOptionschassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 70, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOptionschassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooOptionschassisIndex.setDescription('1600.0070.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooOptionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 70, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOptionsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooOptionsIndex.setDescription('1600.0070.0001.0002 This attribute defines the index (one based) of the COO options.')
cooOptionsState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 70, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOptionsState.setStatus('mandatory')
if mibBuilder.loadTexts: cooOptionsState.setDescription('1600.0070.0001.0003 This attribute defines the state settings of the COO options.')
cooOptionsLeaseInformationIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 70, 1, 4), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOptionsLeaseInformationIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: cooOptionsLeaseInformationIndexReference.setDescription('1600.0070.0001.0004 This attribute defines the index (one based) of the COO lease information associated with the COO options.')
cooOptionsDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 70, 1, 5), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooOptionsDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: cooOptionsDescriptionName.setDescription('1600.0070.0001.0005 This attribute defines the description of the COO options.')
cooMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80), )
if mibBuilder.loadTexts: cooMaintenanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenanceTable.setDescription('1600.0080 This object defines the Cost Of Ownership (COO) Maintenance Table.')
cooMaintenanceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooMaintenancechassisIndex"), (0, "MIB-Dell-10892", "cooMaintenanceIndex"))
if mibBuilder.loadTexts: cooMaintenanceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenanceTableEntry.setDescription('1600.0080.0001 This object defines the Cost Of Ownership (COO) Maintenance Table Entry.')
cooMaintenancechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooMaintenancechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenancechassisIndex.setDescription('1600.0080.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooMaintenanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenanceIndex.setDescription('1600.0080.0001.0002 This attribute defines the index (one based) of the COO maintenance.')
cooMaintenanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooMaintenanceState.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenanceState.setDescription('1600.0080.0001.0003 This attribute defines the state settings of the COO maintenance.')
cooMaintenanceStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80, 1, 4), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooMaintenanceStartDateName.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenanceStartDateName.setDescription('1600.0080.0001.0004 This attribute defines the start date of the COO maintenance. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes, ss are the seconds, uuuuuu are the microseconds and +fff or -fff is the offset from UTC in minutes.')
cooMaintenanceEndDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80, 1, 5), DellDateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooMaintenanceEndDateName.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenanceEndDateName.setDescription('1600.0080.0001.0005 This attribute defines the end date of the COO maintenance. Dates are defined in the ASCII format: yyyyMMddhhmmss.uuuuuu+fff or yyyyMMddhhmmss.uuuuuu-fff where yyyy is the year, MM is the month, dd is the day, hh are the hours, mm are the minutes, ss are the seconds, uuuuuu are the microseconds and +fff or -fff is the offset from UTC in minutes.')
cooMaintenanceProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80, 1, 6), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooMaintenanceProviderName.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenanceProviderName.setDescription('1600.0080.0001.0006 This attribute defines the name of the provider of the COO maintenance.')
cooMaintenanceRestrictionsName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 80, 1, 7), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooMaintenanceRestrictionsName.setStatus('mandatory')
if mibBuilder.loadTexts: cooMaintenanceRestrictionsName.setDescription('1600.0080.0001.0007 This attribute defines the text of the maintenance agreement restrictions.')
cooRepairTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 90), )
if mibBuilder.loadTexts: cooRepairTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooRepairTable.setDescription('1600.0090 This object defines the Cost Of Ownership (COO) Repair Table.')
cooRepairTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 90, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooRepairchassisIndex"), (0, "MIB-Dell-10892", "cooRepairIndex"))
if mibBuilder.loadTexts: cooRepairTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooRepairTableEntry.setDescription('1600.0090.0001 This object defines the Cost Of Ownership (COO) Repair Table Entry.')
cooRepairchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 90, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooRepairchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooRepairchassisIndex.setDescription('1600.0090.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooRepairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 90, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooRepairIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooRepairIndex.setDescription('1600.0090.0001.0002 This attribute defines the index (one based) of the COO repair.')
cooRepairState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 90, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooRepairState.setStatus('mandatory')
if mibBuilder.loadTexts: cooRepairState.setDescription('1600.0090.0001.0003 This attribute defines the state setting of the COO repair.')
cooRepairCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 90, 1, 4), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooRepairCounter.setStatus('mandatory')
if mibBuilder.loadTexts: cooRepairCounter.setDescription('1600.0090.0001.0004 This attribute defines the number of repairs this system has had.')
cooRepairVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 90, 1, 5), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooRepairVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: cooRepairVendorName.setDescription("1600.0090.0001.0005 This attribute defines the repair vendors's name.")
cooSupportInformationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100), )
if mibBuilder.loadTexts: cooSupportInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationTable.setDescription('1600.0100 This object defines the Cost Of Ownership (COO) Support Information Table.')
cooSupportInformationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooSupportInformationchassisIndex"), (0, "MIB-Dell-10892", "cooSupportInformationIndex"))
if mibBuilder.loadTexts: cooSupportInformationTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationTableEntry.setDescription('1600.0100.0001 This object defines the Cost Of Ownership (COO) Support Information Table Entry.')
cooSupportInformationchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooSupportInformationchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationchassisIndex.setDescription('1600.0100.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooSupportInformationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooSupportInformationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationIndex.setDescription('1600.0100.0001.0002 This attribute defines the index (one based) of the COO support information.')
cooSupportInformationState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooSupportInformationState.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationState.setDescription('1600.0100.0001.0003 This attribute defines the state setting of the COO support information.')
cooSupportInformationIsOutsourced = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100, 1, 4), DellBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooSupportInformationIsOutsourced.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationIsOutsourced.setDescription('1600.0100.0001.0004 This attribute defines if support is outsourced or not.')
cooSupportInformationType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100, 1, 5), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooSupportInformationType.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationType.setDescription('1600.0100.0001.0005 This attribute defines the type of the conmponent, system or network problem that occurred.')
cooSupportInformationHelpDeskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100, 1, 6), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooSupportInformationHelpDeskName.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationHelpDeskName.setDescription('1600.0100.0001.0006 This attribute defines the help desk support information provided.')
cooSupportInformationFixTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 100, 1, 7), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooSupportInformationFixTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: cooSupportInformationFixTypeName.setDescription('1600.0100.0001.0007 This attribute defines the method used to fix the problem.')
cooTroubleTicketTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 110), )
if mibBuilder.loadTexts: cooTroubleTicketTable.setStatus('mandatory')
if mibBuilder.loadTexts: cooTroubleTicketTable.setDescription('1600.0110 This object defines the Cost Of Ownership (COO) Trouble Ticket Table.')
cooTroubleTicketTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 110, 1), ).setIndexNames((0, "MIB-Dell-10892", "cooTroubleTicketchassisIndex"), (0, "MIB-Dell-10892", "cooTroubleTicketIndex"))
if mibBuilder.loadTexts: cooTroubleTicketTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cooTroubleTicketTableEntry.setDescription('1600.0110.0001 This object defines the Cost Of Ownership (COO) Trouble Ticket Table Entry.')
cooTroubleTicketchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 110, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooTroubleTicketchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooTroubleTicketchassisIndex.setDescription('1600.0110.0001.0001 This attribute defines the index (one based) of the associated chassis.')
cooTroubleTicketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 110, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooTroubleTicketIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cooTroubleTicketIndex.setDescription('1600.0110.0001.0002 This attribute defines the index (one based) of the COO trouble ticket.')
cooTroubleTicketState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 110, 1, 3), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooTroubleTicketState.setStatus('mandatory')
if mibBuilder.loadTexts: cooTroubleTicketState.setDescription('1600.0110.0001.0003 This attribute defines the state settings of the COO trouble ticket.')
cooTroubleTicketSupportInformationIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 110, 1, 4), DellUnsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooTroubleTicketSupportInformationIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: cooTroubleTicketSupportInformationIndexReference.setDescription('1600.0110.0001.0004 This attribute defines the index (one based) of the COO support information associated with the COO trouble ticket.')
cooTroubleTicketNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1600, 110, 1, 5), DellCostofOwnershipString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cooTroubleTicketNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: cooTroubleTicketNumberName.setDescription('1600.0110.0001.0005 This attribute defines the name of the COO trouble ticket.')
class DellClusterType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("highAvailabilityCluster", 2))

clusterTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10), )
if mibBuilder.loadTexts: clusterTable.setStatus('mandatory')
if mibBuilder.loadTexts: clusterTable.setDescription('1800.0010 This object defines the Cluster Table.')
clusterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "clusterChassisIndex"), (0, "MIB-Dell-10892", "clusterIndex"))
if mibBuilder.loadTexts: clusterTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clusterTableEntry.setDescription('1800.0010.0001 This object defines the Cluster Table Entry.')
clusterChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clusterChassisIndex.setDescription('1800.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
clusterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clusterIndex.setDescription('1800.0010.0001.0002 This attribute defines the index (one based) of the cluster.')
clusterStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: clusterStateCapabilities.setDescription('1800.0010.0001.0003 This attribute defines the state capabilities of the cluster.')
clusterStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: clusterStateSettings.setDescription('1800.0010.0001.0004 This attribute defines the state settings of the cluster.')
clusterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: clusterStatus.setDescription('1800.0010.0001.0005 This attribute defines the status of the cluster.')
clusterType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1, 6), DellClusterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterType.setStatus('mandatory')
if mibBuilder.loadTexts: clusterType.setDescription('1800.0010.0001.0006 This attribute defines the type of the cluster.')
clusterTypeDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1, 7), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterTypeDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: clusterTypeDescriptionName.setDescription('1800.0010.0001.0007 This attribute defines the description name for the type of the cluster.')
clusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1800, 10, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterName.setStatus('mandatory')
if mibBuilder.loadTexts: clusterName.setDescription('1800.0010.0001.0008 This attribute defines the name of the cluster.')
class DellManagementControllerType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(8, 10, 11, 13, 16, 17))
    namedValues = NamedValues(("iDRAC", 8), ("iDRAC6", 10), ("iDRAC6Modular", 11), ("iDRAC6BMC", 13), ("iDRAC7", 16), ("iDRAC7Modular", 17))

class DellBladeFormFactorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 256))
    namedValues = NamedValues(("formFactorTypeIsSingleWidthHalfHeight", 1), ("formFactorTypeIsDualWidthHalfHeight", 2), ("formFactorTypeIsSingleWidthFullHeight", 3), ("formFactorTypeIsDualWidthFullHeight", 4), ("formFactorTypeIsSingleWidthQuarterHeight", 5), ("formFactorTypeIs1UHalfWidth", 6), ("formFactorTypeIs1UQuarterWidth", 7), ("formFactorTypeIs1UFullWidth", 8), ("notApplicable", 256))

bmcTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10), )
if mibBuilder.loadTexts: bmcTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmcTable.setDescription('1900.0010 This object defines the Baseboard Management Controller (BMC) Table.')
bmcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1), ).setIndexNames((0, "MIB-Dell-10892", "bmcChassisIndex"), (0, "MIB-Dell-10892", "bmcIndex"))
if mibBuilder.loadTexts: bmcTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmcTableEntry.setDescription('1900.0010.0001 This object defines the Baseboard Management Controller (BMC) Table Entry.')
bmcChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmcChassisIndex.setDescription('1900.0010.0001.0001 This attribute defines the index (one based) of the associated chassis.')
bmcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmcIndex.setDescription('1900.0010.0001.0002 This attribute defines the index (one based) of the BMC.')
bmcStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 3), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: bmcStateCapabilities.setDescription('1900.0010.0001.0003 This attribute defines the state capabilities of the BMC.')
bmcStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 4), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: bmcStateSettings.setDescription('1900.0010.0001.0004 This attribute defines the state settings of the BMC.')
bmcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bmcStatus.setDescription('1900.0010.0001.0005 This attribute defines the status of the BMC.')
bmcDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 6), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: bmcDisplayName.setDescription('1900.0010.0001.0006 This attribute defines the display name of the BMC.')
bmcDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: bmcDescriptionName.setDescription('1900.0010.0001.0007 This attribute defines the description of the BMC.')
bmcIPMIVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 8), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcIPMIVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: bmcIPMIVersionName.setDescription('1900.0010.0001.0008 This attribute defines the version of the Intelligent Platform Management Interface (IPMI) specification that the BMC supports.')
bmcGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcGUID.setStatus('mandatory')
if mibBuilder.loadTexts: bmcGUID.setDescription('1900.0010.0001.0009 This attribute defines the Globally Unique ID (GUID) of the BMC.')
bmcType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 10), DellManagementControllerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcType.setStatus('mandatory')
if mibBuilder.loadTexts: bmcType.setDescription('1900.0010.0001.00010 This attribute defines the type of the BMC.')
bmcModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 11), DellString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: bmcModuleName.setDescription('1900.0010.0001.0011 This attribute defines the module name for the BMC. The module name is present only on certain systems such as blade systems.')
bmcIPv4URLName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcIPv4URLName.setStatus('mandatory')
if mibBuilder.loadTexts: bmcIPv4URLName.setDescription('1900.0010.0001.0012 This attribute defines the IPv4 URL for the BMC. The URL is not present on all systems.')
bmcIPv6URLName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcIPv6URLName.setStatus('mandatory')
if mibBuilder.loadTexts: bmcIPv6URLName.setDescription('1900.0010.0001.0013 This attribute defines the IPv6 URL for the BMC. The URL is not present on all systems.')
bmcBladeFormFactorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 10, 1, 14), DellBladeFormFactorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcBladeFormFactorName.setStatus('mandatory')
if mibBuilder.loadTexts: bmcBladeFormFactorName.setDescription('1900.0010.0001.0014 This attribute defines Blade FormFactor.')
class DellBMCSerialConnectionModeCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))
    namedValues = NamedValues(("modemBasic", 1), ("modemPPP", 2), ("modemTerminal", 4), ("directBasic", 8), ("directPPP", 16), ("directTerminal", 32))

class DellBMCSerialConnectionModeSettings(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))
    namedValues = NamedValues(("modemBasic", 1), ("modemPPP", 2), ("modemTerminal", 4), ("directBasic", 8), ("directPPP", 16), ("directTerminal", 32))

class DellBMCSerialFlowControlType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("rtsCts", 1), ("xonXoff", 2))

class DellBMCSerialBitRateType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))
    namedValues = NamedValues(("bps9600", 6), ("bps19200", 7), ("bps38400", 8), ("bps57600", 9), ("bps115200", 10))

bmcSerialInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20), )
if mibBuilder.loadTexts: bmcSerialInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceTable.setDescription('1900.0020 This object defines the Baseboard Management Controller (BMC) Serial Interface Table.')
bmcSerialInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1), ).setIndexNames((0, "MIB-Dell-10892", "bmcSerialInterfaceChassisIndex"), (0, "MIB-Dell-10892", "bmcSerialInterfaceBMCIndex"), (0, "MIB-Dell-10892", "bmcSerialInterfaceIndex"))
if mibBuilder.loadTexts: bmcSerialInterfaceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceTableEntry.setDescription('1900.0020.0001 This object defines the Baseboard Management Controller (BMC) Serial Interface Table Entry.')
bmcSerialInterfaceChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceChassisIndex.setDescription('1900.0020.0001.0001 This attribute defines the index (one based) of the associated chassis.')
bmcSerialInterfaceBMCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceBMCIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceBMCIndex.setDescription('1900.0020.0001.0002 This attribute defines the index (one based) of the assoiciated BMC.')
bmcSerialInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 3), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceIndex.setDescription('1900.0020.0001.0003 This attribute defines the index (one based) of the BMC serial interface.')
bmcSerialInterfaceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 4), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceStateCapabilities.setDescription('1900.0020.0001.0004 This attribute defines the state capabilities of the BMC serial interface.')
bmcSerialInterfaceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 5), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceStateSettings.setDescription('1900.0020.0001.0005 This attribute defines the state settings of the BMC serial interface.')
bmcSerialInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 6), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceStatus.setDescription('1900.0020.0001.0006 This attribute defines the status of the BMC serial interface.')
bmcSerialInterfaceChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 7), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceChannelNumber.setDescription('1900.0020.0001.0007 This attribute defines the BMC channel number of the BMC serial interface.')
bmcSerialInterfaceConnectionModeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 8), DellBMCSerialConnectionModeCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceConnectionModeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceConnectionModeCapabilities.setDescription('1900.0020.0001.0008 This attribute defines the connection mode capabilities of the BMC serial interface.')
bmcSerialInterfaceConnectionModeSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 9), DellBMCSerialConnectionModeSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceConnectionModeSettings.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceConnectionModeSettings.setDescription('1900.0020.0001.0009 This attribute defines the connection mode settings of the BMC serial interface.')
bmcSerialInterfaceFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 10), DellBMCSerialFlowControlType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceFlowControl.setDescription('1900.0020.0001.0010 This attribute defines the flow control type of the BMC serial interface.')
bmcSerialInterfaceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 20, 1, 11), DellBMCSerialBitRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcSerialInterfaceBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: bmcSerialInterfaceBitRate.setDescription('1900.0020.0001.0011 This attribute defines the bit rate of the BMC serial interface.')
class DellBMCLANIPAddressSourceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("static", 1), ("dhcp", 2), ("biosOrSystemSoftware", 3), ("other", 4))

bmcLANInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30), )
if mibBuilder.loadTexts: bmcLANInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceTable.setDescription('1900.0030 This object defines the Baseboard Management Controller (BMC) LAN Interface Table.')
bmcLANInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1), ).setIndexNames((0, "MIB-Dell-10892", "bmcLANInterfaceChassisIndex"), (0, "MIB-Dell-10892", "bmcLANInterfaceBMCIndex"), (0, "MIB-Dell-10892", "bmcLANInterfaceIndex"))
if mibBuilder.loadTexts: bmcLANInterfaceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceTableEntry.setDescription('1900.0030.0001 This object defines the Baseboard Management Controller (BMC) LAN Interface Table Entry.')
bmcLANInterfaceChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 1), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceChassisIndex.setDescription('1900.0030.0001.0001 This attribute defines the index (one based) of the associated chassis.')
bmcLANInterfaceBMCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 2), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceBMCIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceBMCIndex.setDescription('1900.0030.0001.0002 This attribute defines the index (one based) of the assoiciated BMC.')
bmcLANInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 3), DellObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceIndex.setDescription('1900.0030.0001.0003 This attribute defines the index (one based) of the BMC LAN interface.')
bmcLANInterfaceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 4), DellStateCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceStateCapabilities.setDescription('1900.0030.0001.0004 This attribute defines the state capabilities of the BMC LAN interface.')
bmcLANInterfaceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 5), DellStateSettings()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceStateSettings.setDescription('1900.0030.0001.0005 This attribute defines the state settings of the BMC LAN interface.')
bmcLANInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 6), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceStatus.setDescription('1900.0030.0001.0006 This attribute defines the status of the BMC LAN interface.')
bmcLANInterfaceChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 7), DellUnsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceChannelNumber.setDescription('1900.0030.0001.0007 This attribute defines the BMC channel number of the BMC LAN interface.')
bmcLANInterfaceIPAddressSource = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 8), DellBMCLANIPAddressSourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceIPAddressSource.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceIPAddressSource.setDescription('1900.0030.0001.0008 This attribute defines the source type of the IP address of the BMC LAN interface.')
bmcLANInterfaceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceIPAddress.setDescription('1900.0030.0001.0009 This attribute defines the IP address of the BMC LAN interface.')
bmcLANInterfaceSubnetMaskAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceSubnetMaskAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceSubnetMaskAddress.setDescription('1900.0030.0001.0010 This attribute defines the subnet mask of the BMC LAN interface.')
bmcLANInterfaceDefaultGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceDefaultGatewayAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceDefaultGatewayAddress.setDescription('1900.0030.0001.0011 This attribute defines the IP address of the default gateway for the BMC LAN interface.')
bmcLANInterfaceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 12), DellMACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceMACAddress.setDescription('1900.0030.0001.0012 This attribute defines the MAC address of the BMC LAN interface.')
bmcLANInterfaceAlertCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 1, 1900, 30, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmcLANInterfaceAlertCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: bmcLANInterfaceAlertCommunityName.setDescription('1900.0030.0001.0013 This attribute defines the SNMP community used for BMC LAN alerts (traps) sent on the BMC LAN interface.')
alertVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10))
alertSystem = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSystem.setStatus('mandatory')
if mibBuilder.loadTexts: alertSystem.setDescription('5000.0010.0001 Name of the system generating the alert.')
alertTableIndexOID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertTableIndexOID.setStatus('mandatory')
if mibBuilder.loadTexts: alertTableIndexOID.setDescription('5000.0010.0002 OID for the index attribute in the table that contains the object causing the alert. This value can be used to uniquely identify the object causing the alert and to correlate different alerts caused by an object. If not applicable, the value will be 0.0.')
alertMessage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessage.setStatus('mandatory')
if mibBuilder.loadTexts: alertMessage.setDescription('5000.0010.0003 Message describing the alert.')
alertCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 4), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alertCurrentStatus.setDescription('5000.0010.0004 Current status of object causing the alert.')
alertPreviousStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 5), DellStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertPreviousStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alertPreviousStatus.setDescription('5000.0010.0005 Previous status of object causing the alert.')
alertData = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertData.setStatus('mandatory')
if mibBuilder.loadTexts: alertData.setDescription('5000.0010.0006 Alert data.')
alertMsgID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMsgID.setStatus('mandatory')
if mibBuilder.loadTexts: alertMsgID.setDescription('5000.0010.0007 Alert message ID.')
alertSystemFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSystemFQDN.setStatus('mandatory')
if mibBuilder.loadTexts: alertSystemFQDN.setDescription('5000.0010.0008 Fully qualified domain name of the system generating the alert.')
alertServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: alertServiceTag.setDescription('5000.0010.0009 Service tag of the system generating the alert.')
alertChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 1, 5000, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertChassisServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: alertChassisServiceTag.setDescription('5000.0010.0010 Chassis service tag of the system generating the alert.')
alertSystemUp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1001)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertSystemUp.setDescription('Server Administrator has completed its initialization.')
alertThermalShutdown = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1004)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertThermalShutdown.setDescription('Thermal shutdown protection has been initiated.')
alertAutomaticSystemRecovery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1006)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertAutomaticSystemRecovery.setDescription('Automatic system recovery (ASR) was performed.')
alertUserHostSystemReset = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1007)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertUserHostSystemReset.setDescription('User has initiated host system reset.')
alertSystemPeakPowerNewPeak = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1013)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertSystemPeakPowerNewPeak.setDescription('System peak power sensor has detected a new peak value.')
alertSystemSoftwareEvent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1014)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertSystemSoftwareEvent.setDescription('System software event has occurred.')
alertTemperatureProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1052)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertTemperatureProbeNormal.setDescription('Temperature probe has returned to a normal value.')
alertTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1053)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertTemperatureProbeWarning.setDescription('Temperature probe has detected a warning value.')
alertTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1054)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertTemperatureProbeFailure.setDescription('Temperature probe has detected a failure value.')
alertTemperatureProbeNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1055)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertTemperatureProbeNonRecoverable.setDescription('Temperature probe has detected a non-recoverable value.')
alertCoolingDeviceNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1102)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertCoolingDeviceNormal.setDescription('Cooling device sensor has returned to a normal value.')
alertCoolingDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1103)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertCoolingDeviceWarning.setDescription('Cooling device sensor has detected a warning value.')
alertCoolingDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1104)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertCoolingDeviceFailure.setDescription('Cooling device sensor has detected a failure value.')
alertCoolingDeviceNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1105)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertCoolingDeviceNonRecoverable.setDescription('Cooling device sensor has detected a non-recoverable value.')
alertVoltageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1152)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertVoltageProbeNormal.setDescription('Voltage probe has returned to a normal value.')
alertVoltageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1153)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertVoltageProbeWarning.setDescription('Voltage probe has detected a warning value.')
alertVoltageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1154)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertVoltageProbeFailure.setDescription('Voltage probe has detected a failure value.')
alertVoltageProbeNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1155)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertVoltageProbeNonRecoverable.setDescription('Voltage probe has detected a non-recoverable value.')
alertAmperageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1202)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertAmperageProbeNormal.setDescription('Amperage probe has returned to a normal value.')
alertAmperageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1203)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertAmperageProbeWarning.setDescription('Amperage probe has detected a warning value.')
alertAmperageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1204)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertAmperageProbeFailure.setDescription('Amperage probe has detected a failure value.')
alertAmperageProbeNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1205)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertAmperageProbeNonRecoverable.setDescription('Amperage probe has detected a non-recoverable value.')
alertChassisIntrusionNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1252)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertChassisIntrusionNormal.setDescription('Chassis intrusion has returned to normal.')
alertChassisIntrusionDetected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1254)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertChassisIntrusionDetected.setDescription('Chassis intrusion has been detected.')
alertRedundancyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1304)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertRedundancyNormal.setDescription('Redundancy has returned to normal.')
alertRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1305)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertRedundancyDegraded.setDescription('Redundancy has been degraded.')
alertRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1306)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertRedundancyLost.setDescription('Redundancy has been lost.')
alertPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1352)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertPowerSupplyNormal.setDescription('Power supply has returned to normal.')
alertPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1353)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertPowerSupplyWarning.setDescription('Power supply has detected a warning.')
alertPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1354)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertPowerSupplyFailure.setDescription('Power supply has detected a failure.')
alertMemoryDeviceNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1402)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertMemoryDeviceNormal.setDescription('Memory device status is normal.')
alertMemoryDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1403)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertMemoryDeviceWarning.setDescription('Memory device status is noncritical.')
alertMemoryDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1404)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertMemoryDeviceFailure.setDescription('Memory device status is critical.')
alertMemoryDeviceNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1405)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertMemoryDeviceNonRecoverable.setDescription('Memory device status is non-recoverable.')
alertFanEnclosureInsertion = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1452)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertFanEnclosureInsertion.setDescription('Fan enclosure has been inserted into system.')
alertFanEnclosureRemoval = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1453)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertFanEnclosureRemoval.setDescription('Fan enclosure has been removed from system.')
alertFanEnclosureExtendedRemoval = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1454)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertFanEnclosureExtendedRemoval.setDescription('Fan enclosure has been removed from system for an extended amount of time.')
alertACPowerCordNoPowerNonRedundant = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1501)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertACPowerCordNoPowerNonRedundant.setDescription('AC power cord does not have power, and the reduncancy mode for its AC power switch has been set to non-redundant.')
alertACPowerCordNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1502)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertACPowerCordNormal.setDescription('AC power cord has regained power.')
alertACPowerCordFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1504)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertACPowerCordFailure.setDescription('AC power cord has lost power.')
alertLogNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1552)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertLogNormal.setDescription('Log size is no longer near or at capacity.')
alertLogWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1553)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertLogWarning.setDescription('Log size is near capacity.')
alertLogFull = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1554)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertLogFull.setDescription('Log size is at capacity.')
alertProcessorDeviceStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1602)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusNormal.setDescription('Processor device status has returned to normal.')
alertProcessorDeviceStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1603)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusWarning.setDescription('Processor device status has detected a warning.')
alertProcessorDeviceStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1604)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusFailure.setDescription('Processor device status has detected a failure.')
alertDeviceAdd = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1651)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertDeviceAdd.setDescription('Device added to system.')
alertDeviceRemove = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1652)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertDeviceRemove.setDescription('Device removed from system.')
alertDeviceConfigError = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1653)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertDeviceConfigError.setDescription('Device configuration error detected.')
alertBatteryNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1702)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertBatteryNormal.setDescription('Battery has returned to normal.')
alertBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1703)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertBatteryWarning.setDescription('Battery has detected a warning.')
alertBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1704)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertBatteryFailure.setDescription('Battery has detected a failure.')
alertSDCardDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1753)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertSDCardDeviceWarning.setDescription('SD card device has detected a warning.')
alertSDCardDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,1754)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"))
if mibBuilder.loadTexts: alertSDCardDeviceFailure.setDescription('SD card device has detected a failure.')
enhancedAlertSystemUp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5001)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertSystemUp.setDescription('Server Administrator has completed its initialization.')
enhancedAlertThermalShutdown = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5004)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertThermalShutdown.setDescription('Thermal shutdown protection has been initiated.')
enhancedAlertAutomaticSystemRecovery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5006)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertAutomaticSystemRecovery.setDescription('Automatic system recovery (ASR) was performed.')
enhancedAlertUserHostSystemReset = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5007)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertUserHostSystemReset.setDescription('User has initiated host system reset.')
enhancedAlertSystemPeakPowerNewPeak = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5013)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertSystemPeakPowerNewPeak.setDescription('System peak power sensor has detected a new peak value.')
enhancedAlertSystemSoftwareEvent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5014)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertSystemSoftwareEvent.setDescription('System software event has occurred.')
enhancedAlertTemperatureProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5052)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertTemperatureProbeNormal.setDescription('Temperature probe has returned to a normal value.')
enhancedAlertTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5053)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertTemperatureProbeWarning.setDescription('Temperature probe has detected a warning value.')
enhancedAlertTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5054)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertTemperatureProbeFailure.setDescription('Temperature probe has detected a failure value.')
enhancedAlertTemperatureProbeNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5055)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertTemperatureProbeNonRecoverable.setDescription('Temperature probe has detected a non-recoverable value.')
enhancedAlertCoolingDeviceNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5102)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertCoolingDeviceNormal.setDescription('Cooling device sensor has returned to a normal value.')
enhancedAlertCoolingDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5103)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertCoolingDeviceWarning.setDescription('Cooling device sensor has detected a warning value.')
enhancedAlertCoolingDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5104)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertCoolingDeviceFailure.setDescription('Cooling device sensor has detected a failure value.')
enhancedAlertCoolingDeviceNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5105)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertCoolingDeviceNonRecoverable.setDescription('Cooling device sensor has detected a non-recoverable value.')
enhancedAlertVoltageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5152)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertVoltageProbeNormal.setDescription('Voltage probe has returned to a normal value.')
enhancedAlertVoltageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5153)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertVoltageProbeWarning.setDescription('Voltage probe has detected a warning value.')
enhancedAlertVoltageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5154)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertVoltageProbeFailure.setDescription('Voltage probe has detected a failure value.')
enhancedAlertVoltageProbeNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5155)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertVoltageProbeNonRecoverable.setDescription('Voltage probe has detected a non-recoverable value.')
enhancedAlertAmperageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5202)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertAmperageProbeNormal.setDescription('Amperage probe has returned to a normal value.')
enhancedAlertAmperageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5203)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertAmperageProbeWarning.setDescription('Amperage probe has detected a warning value.')
enhancedAlertAmperageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5204)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertAmperageProbeFailure.setDescription('Amperage probe has detected a failure value.')
enhancedAlertAmperageProbeNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5205)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertAmperageProbeNonRecoverable.setDescription('Amperage probe has detected a non-recoverable value.')
enhancedAlertChassisIntrusionNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5252)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertChassisIntrusionNormal.setDescription('Chassis intrusion has returned to normal.')
enhancedAlertChassisIntrusionDetected = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5254)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertChassisIntrusionDetected.setDescription('Chassis intrusion has been detected.')
enhancedAlertRedundancyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5304)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertRedundancyNormal.setDescription('Redundancy has returned to normal.')
enhancedAlertRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5305)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertRedundancyDegraded.setDescription('Redundancy has been degraded.')
enhancedAlertRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5306)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertRedundancyLost.setDescription('Redundancy has been lost.')
enhancedAlertPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5352)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertPowerSupplyNormal.setDescription('Power supply has returned to normal.')
enhancedAlertPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5353)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertPowerSupplyWarning.setDescription('Power supply has detected a warning.')
enhancedAlertPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5354)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertPowerSupplyFailure.setDescription('Power supply has detected a failure.')
enhancedAlertMemoryDeviceNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5402)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertMemoryDeviceNormal.setDescription('Memory device status is normal.')
enhancedAlertMemoryDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5403)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertMemoryDeviceWarning.setDescription('Memory device status is noncritical.')
enhancedAlertMemoryDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5404)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertMemoryDeviceFailure.setDescription('Memory device status is critical.')
enhancedAlertMemoryDeviceNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5405)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertMemoryDeviceNonRecoverable.setDescription('Memory device status is non-recoverable.')
enhancedAlertFanEnclosureInsertion = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5452)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertFanEnclosureInsertion.setDescription('Fan enclosure has been inserted into system.')
enhancedAlertFanEnclosureRemoval = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5453)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertFanEnclosureRemoval.setDescription('Fan enclosure has been removed from system.')
enhancedAlertFanEnclosureExtendedRemoval = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5454)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertFanEnclosureExtendedRemoval.setDescription('Fan enclosure has been removed from system for an extended amount of time.')
enhancedAlertACPowerCordNoPowerNonRedundant = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5501)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertACPowerCordNoPowerNonRedundant.setDescription('AC power cord does not have power, and the reduncancy mode for its AC power switch has been set to non-redundant.')
enhancedAlertACPowerCordNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5502)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertACPowerCordNormal.setDescription('AC power cord has regained power.')
enhancedAlertACPowerCordFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5504)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertACPowerCordFailure.setDescription('AC power cord has lost power.')
enhancedAlertLogNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5552)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertLogNormal.setDescription('Log size is no longer near or at capacity.')
enhancedAlertLogWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5553)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertLogWarning.setDescription('Log size is near capacity.')
enhancedAlertLogFull = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5554)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertLogFull.setDescription('Log size is at capacity.')
enhancedAlertProcessorDeviceStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5602)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertProcessorDeviceStatusNormal.setDescription('Processor device status has returned to normal.')
enhancedAlertProcessorDeviceStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5603)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertProcessorDeviceStatusWarning.setDescription('Processor device status has detected a warning.')
enhancedAlertProcessorDeviceStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5604)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertProcessorDeviceStatusFailure.setDescription('Processor device status has detected a failure.')
enhancedAlertDeviceAdd = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5651)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertDeviceAdd.setDescription('Device added to system.')
enhancedAlertDeviceRemove = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5652)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertDeviceRemove.setDescription('Device removed from system.')
enhancedAlertDeviceConfigError = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5653)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertDeviceConfigError.setDescription('Device configuration error detected.')
enhancedAlertBatteryNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5702)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertBatteryNormal.setDescription('Battery has returned to normal.')
enhancedAlertBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5703)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertBatteryWarning.setDescription('Battery has detected a warning.')
enhancedAlertBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5704)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertBatteryFailure.setDescription('Battery has detected a failure.')
enhancedAlertSDCardDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5753)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertSDCardDeviceWarning.setDescription('SD card device has detected a warning.')
enhancedAlertSDCardDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 1) + (0,5754)).setObjects(("MIB-Dell-10892", "alertSystem"), ("MIB-Dell-10892", "alertTableIndexOID"), ("MIB-Dell-10892", "alertMessage"), ("MIB-Dell-10892", "alertCurrentStatus"), ("MIB-Dell-10892", "alertPreviousStatus"), ("MIB-Dell-10892", "alertData"), ("MIB-Dell-10892", "alertMsgID"), ("MIB-Dell-10892", "alertSystemFQDN"), ("MIB-Dell-10892", "alertServiceTag"), ("MIB-Dell-10892", "alertChassisServiceTag"))
if mibBuilder.loadTexts: enhancedAlertSDCardDeviceFailure.setDescription('SD card device has detected a failure.')
mibBuilder.exportSymbols("MIB-Dell-10892", baseBoardTableEntry=baseBoardTableEntry, DellParallelPortControlModeCapabilitiesUnique=DellParallelPortControlModeCapabilitiesUnique, sdCardDeviceLocationName=sdCardDeviceLocationName, processorDeviceManufacturerName=processorDeviceManufacturerName, eventLogRecord=eventLogRecord, systemManagementSoftwareName=systemManagementSoftwareName, DellBMCSerialConnectionModeCapabilities=DellBMCSerialConnectionModeCapabilities, DellLEDControlCapabilities=DellLEDControlCapabilities, chassisAssetTagName=chassisAssetTagName, systemStateBatteryStatusList=systemStateBatteryStatusList, amperageProbeUpperCriticalThreshold=amperageProbeUpperCriticalThreshold, processorDeviceStatusTable=processorDeviceStatusTable, keyboardPortSecurityState=keyboardPortSecurityState, cooSupportInformationTable=cooSupportInformationTable, DellBatteryReading=DellBatteryReading, server3=server3, alertLogNormal=alertLogNormal, batteryChassisIndex=batteryChassisIndex, memoryDeviceMappedAddressStatus=memoryDeviceMappedAddressStatus, biosSetUpControlTableEntry=biosSetUpControlTableEntry, parallelPortTableEntry=parallelPortTableEntry, bmcLANInterfaceDefaultGatewayAddress=bmcLANInterfaceDefaultGatewayAddress, ideControlIndex=ideControlIndex, DellRemoteFlashBIOSStateCapabilitiesUnique=DellRemoteFlashBIOSStateCapabilitiesUnique, physicalMemoryArrayTableEntry=physicalMemoryArrayTableEntry, cooLeaseInformationEndDateName=cooLeaseInformationEndDateName, powerUnitStatus=powerUnitStatus, DellPhysicalMemoryArrayUse=DellPhysicalMemoryArrayUse, cooServiceContractTableEntry=cooServiceContractTableEntry, sCSIControlchassisIndex=sCSIControlchassisIndex, bSUCbootSequenceControlStatus=bSUCbootSequenceControlStatus, cooCostEventLogchassisIndex=cooCostEventLogchassisIndex, systemStateVoltageStateDetails=systemStateVoltageStateDetails, systemResourceOwnerTableEntry=systemResourceOwnerTableEntry, disketteControlTableEntry=disketteControlTableEntry, clusterType=clusterType, voltageProbeStatus=voltageProbeStatus, DellSystemSlotStateCapabilities=DellSystemSlotStateCapabilities, cooInsuranceCompanyName=cooInsuranceCompanyName, pointingPortchassisIndex=pointingPortchassisIndex, cooDepreciationDuration=cooDepreciationDuration, memoryDeviceMappedAddressIndex=memoryDeviceMappedAddressIndex, systemResourceDMABusMaster=systemResourceDMABusMaster, cooCostEventLogTable=cooCostEventLogTable, physicalMemoryArrayStateCapabilities=physicalMemoryArrayStateCapabilities, physicalMemoryArrayMappedEndingAddress=physicalMemoryArrayMappedEndingAddress, pCIDeviceTableEntry=pCIDeviceTableEntry, DellSystemSlotHotPlugBusWidth=DellSystemSlotHotPlugBusWidth, systemManagementSoftwareDescriptionName=systemManagementSoftwareDescriptionName, bSUCprocessorSerialNumberControlStatus=bSUCprocessorSerialNumberControlStatus, alertSystemFQDN=alertSystemFQDN, chassisNMIButtonControlCapabilitiesUnique=chassisNMIButtonControlCapabilitiesUnique, cooLeaseInformationState=cooLeaseInformationState, systemResourceMapchassisIndex=systemResourceMapchassisIndex, redundantMemoryUnitRedundancyStatus=redundantMemoryUnitRedundancyStatus, lRAGlobalSettingsTableEntry=lRAGlobalSettingsTableEntry, networkInterfaceControlCapabilitiesUnique=networkInterfaceControlCapabilitiesUnique, powerUsageStateCapabilities=powerUsageStateCapabilities, coolingDeviceTable=coolingDeviceTable, systemManagementSoftwareSNMPAgentFeatureFlags=systemManagementSoftwareSNMPAgentFeatureFlags, memoryDeviceTotalBusWidth=memoryDeviceTotalBusWidth, chassisallowSETCommandsfromSNMP=chassisallowSETCommandsfromSNMP, managedSystemServicesDeviceType=managedSystemServicesDeviceType, cooSupportInformationState=cooSupportInformationState, biosSettingGroupDisplayName=biosSettingGroupDisplayName, intrusionTableEntry=intrusionTableEntry, powerProfileCustomMemoryMgmtCapabilities=powerProfileCustomMemoryMgmtCapabilities, redundantMemoryUnitIndex=redundantMemoryUnitIndex, cooServiceContractWasRenewed=cooServiceContractWasRenewed, chassisSystemDateName=chassisSystemDateName, DellCoolingDeviceType=DellCoolingDeviceType, DellProbeCapabilities=DellProbeCapabilities, batteryStateCapabilities=batteryStateCapabilities, sCSIPortTable=sCSIPortTable, DellIntrusionType=DellIntrusionType, powerSupplyLocationName=powerSupplyLocationName, DellPointingDeviceType=DellPointingDeviceType, usbControlTableEntry=usbControlTableEntry, alertChassisIntrusionDetected=alertChassisIntrusionDetected, powerProfileSupportedProfiles=powerProfileSupportedProfiles, systemResourceInterruptLevel=systemResourceInterruptLevel, physicalMemoryCardTable=physicalMemoryCardTable, operatingSystemMemoryStateSettings=operatingSystemMemoryStateSettings, uSBPortStateCapabilities=uSBPortStateCapabilities, keyboardDeviceTable=keyboardDeviceTable, firmwareTableEntry=firmwareTableEntry, parallelPortIndex=parallelPortIndex, processorDeviceStateCapabilities=processorDeviceStateCapabilities, DellTemperatureDiscreteReading=DellTemperatureDiscreteReading, DellTPMSecurityControlSetting=DellTPMSecurityControlSetting, powerUnitIndex=powerUnitIndex, sdCardDeviceIndex=sdCardDeviceIndex, DellDateName=DellDateName, voltageProbeLowerNonRecoverableThreshold=voltageProbeLowerNonRecoverableThreshold, DellNMIButtonControlSettings=DellNMIButtonControlSettings, cooOwnershipCode=cooOwnershipCode, cooRepairchassisIndex=cooRepairchassisIndex, lRAGlobalSettingsTable=lRAGlobalSettingsTable, sCSIControlStatus=sCSIControlStatus, processorDeviceStatusStateSettings=processorDeviceStatusStateSettings, DellSDCardDeviceCardLicensed=DellSDCardDeviceCardLicensed, coolingUnitTable=coolingUnitTable, cooRepairIndex=cooRepairIndex, DellBootSequenceControlCapabilitiesUnique=DellBootSequenceControlCapabilitiesUnique, alertAutomaticSystemRecovery=alertAutomaticSystemRecovery, disketteControlName=disketteControlName, firmwarechassisIndex=firmwarechassisIndex, powerProfileCustomFanMgmtSetting=powerProfileCustomFanMgmtSetting, operatingSystemTable=operatingSystemTable, DellPowerButtonControlCapabilities=DellPowerButtonControlCapabilities, physicalMemoryArrayMappedStateSettings=physicalMemoryArrayMappedStateSettings, temperatureProbeProbeCapabilities=temperatureProbeProbeCapabilities, physicalMemoryCardStateCapabilities=physicalMemoryCardStateCapabilities, sdCardUnitStateSettings=sdCardUnitStateSettings, processorDeviceSteppingName=processorDeviceSteppingName, chassisSystemUserPhoneNumberName=chassisSystemUserPhoneNumberName, memoryDevicePortStatus=memoryDevicePortStatus, alertMemoryDeviceWarning=alertMemoryDeviceWarning, cooWarrantyTableEntry=cooWarrantyTableEntry, parallelPortStatus=parallelPortStatus, enhancedAlertVoltageProbeNonRecoverable=enhancedAlertVoltageProbeNonRecoverable, cooOriginalMachineConfigurationVendorName=cooOriginalMachineConfigurationVendorName, sdCardUnitChassisIndex=sdCardUnitChassisIndex, serialPortControlCapabilitiesUnique=serialPortControlCapabilitiesUnique, enhancedAlertTemperatureProbeNormal=enhancedAlertTemperatureProbeNormal, voltageProbeLowerCriticalThreshold=voltageProbeLowerCriticalThreshold, processorPortIndexReference=processorPortIndexReference, systemManagementSoftwareVersionNumberName=systemManagementSoftwareVersionNumberName, DellClusterType=DellClusterType, physicalMemoryArrayMappedIndex=physicalMemoryArrayMappedIndex, systemStateRedundantMemoryUnitStatusDetails=systemStateRedundantMemoryUnitStatusDetails, DellRemoteFlashBIOSCompletionCode=DellRemoteFlashBIOSCompletionCode, enhancedAlertChassisIntrusionNormal=enhancedAlertChassisIntrusionNormal, eventLogchassisIndex=eventLogchassisIndex, systemResourceInterruptShareDisposition=systemResourceInterruptShareDisposition, systemStateACPowerSwitchStatusList=systemStateACPowerSwitchStatusList, bmcStateCapabilities=bmcStateCapabilities, chassisHDFaultClearControlCapabilities=chassisHDFaultClearControlCapabilities, cooAquisitionPurchaseOrder=cooAquisitionPurchaseOrder, parallelPortConnectorType=parallelPortConnectorType, enhancedAlertProcessorDeviceStatusWarning=enhancedAlertProcessorDeviceStatusWarning, remoteFlashBIOSIndex=remoteFlashBIOSIndex, DellProcessorDeviceStatusReading=DellProcessorDeviceStatusReading, systemResourceMemoryTable=systemResourceMemoryTable, operatingSystemMemoryTotalVirtualSize=operatingSystemMemoryTotalVirtualSize, cooServiceContractVendorName=cooServiceContractVendorName, monitorPortSecurityState=monitorPortSecurityState, systemBIOSStatus=systemBIOSStatus, memoryDeviceMappedAddressStateSettings=memoryDeviceMappedAddressStateSettings, bSUCprocessorSerialNumberControlName=bSUCprocessorSerialNumberControlName, voltageProbeType=voltageProbeType, networkDeviceiSCSIEnabled=networkDeviceiSCSIEnabled, physicalMemoryCardTableEntry=physicalMemoryCardTableEntry, chassisSystemName=chassisSystemName, uSBPortName=uSBPortName, systemSlotStateSettingsUnique=systemSlotStateSettingsUnique, cooOriginalMachineConfigurationExpensed=cooOriginalMachineConfigurationExpensed, systemResourceMemoryOwnerIndexReference=systemResourceMemoryOwnerIndexReference, memoryDevicechassisIndex=memoryDevicechassisIndex, systemStateSDCardDeviceStatusList=systemStateSDCardDeviceStatusList, alertTemperatureProbeFailure=alertTemperatureProbeFailure, networkDeviceTableEntry=networkDeviceTableEntry, parallelPortControlCapabilitiesUnique=parallelPortControlCapabilitiesUnique, alertVariables=alertVariables, disketteControlTable=disketteControlTable, processorPortTableEntry=processorPortTableEntry, operatingSystemMemoryStatus=operatingSystemMemoryStatus, enhancedAlertTemperatureProbeNonRecoverable=enhancedAlertTemperatureProbeNonRecoverable, alertVoltageProbeWarning=alertVoltageProbeWarning, cooCostCenterInformationVendorName=cooCostCenterInformationVendorName, ideControlStatus=ideControlStatus, memoryDeviceRank=memoryDeviceRank, DellParallelPortControlModeSettingsUnique=DellParallelPortControlModeSettingsUnique, pointingDeviceTable=pointingDeviceTable, processorDeviceStateSettings=processorDeviceStateSettings, voltageProbeLowerNonCriticalThreshold=voltageProbeLowerNonCriticalThreshold, coolingDeviceDiscreteReading=coolingDeviceDiscreteReading, powerUsageIdlePower=powerUsageIdlePower, physicalMemoryArrayIndex=physicalMemoryArrayIndex, memoryDeviceManufacturerName=memoryDeviceManufacturerName, DellPowerSupplyStateCapabilitiesUnique=DellPowerSupplyStateCapabilitiesUnique, operatingSystemchassisIndex=operatingSystemchassisIndex, systemResourceOwnerInterfaceInstance=systemResourceOwnerInterfaceInstance, cooLeaseInformationLeaseRateFactor=cooLeaseInformationLeaseRateFactor, memoryDeviceType=memoryDeviceType, systemBIOSTableEntry=systemBIOSTableEntry, pointingPortTableEntry=pointingPortTableEntry, systemSlotCurrentUsage=systemSlotCurrentUsage, disketteControlCapabilitiesUnique=disketteControlCapabilitiesUnique, enhancedAlertAmperageProbeNormal=enhancedAlertAmperageProbeNormal, keyboardDevicechassisIndex=keyboardDevicechassisIndex, baseBoardChassisIndex=baseBoardChassisIndex, DellBladeFormFactorType=DellBladeFormFactorType, sCSIPortIndex=sCSIPortIndex, sdCardDeviceCardPresent=sdCardDeviceCardPresent, alertMemoryDeviceNormal=alertMemoryDeviceNormal, serialPortchassisIndex=serialPortchassisIndex, pCIDeviceConfigurationSpaceHeader=pCIDeviceConfigurationSpaceHeader, cooAquisitionWayBillNumber=cooAquisitionWayBillNumber, amperageProbeIndex=amperageProbeIndex, powerSupplyStatus=powerSupplyStatus, serialPortStateSettings=serialPortStateSettings, systemResourceDMAOwnerIndexReference=systemResourceDMAOwnerIndexReference, bmcDisplayName=bmcDisplayName, systemStateAmperageStatusDetails=systemStateAmperageStatusDetails, alertData=alertData, systemResourceInterruptTableEntry=systemResourceInterruptTableEntry, chassisStatus=chassisStatus, sdCardUnitStateCapabilities=sdCardUnitStateCapabilities, cooMaintenanceProviderName=cooMaintenanceProviderName, powerSupplyTable=powerSupplyTable, cooCostEventLogDurationType=cooCostEventLogDurationType, pointingDeviceType=pointingDeviceType, DellStateCapabilitiesLogUnique=DellStateCapabilitiesLogUnique, cooCostEventLogDescriptionName=cooCostEventLogDescriptionName, DellSDCardDeviceConfigSettings=DellSDCardDeviceConfigSettings, processorDeviceCharacteristics=processorDeviceCharacteristics, cooMaintenanceEndDateName=cooMaintenanceEndDateName, amperageProbeLocationName=amperageProbeLocationName, alertProcessorDeviceStatusWarning=alertProcessorDeviceStatusWarning, voltageProbeTableEntry=voltageProbeTableEntry, bmcLANInterfaceMACAddress=bmcLANInterfaceMACAddress, DellPowerButtonControlSettings=DellPowerButtonControlSettings, networkInterfaceControlSettingsUnique=networkInterfaceControlSettingsUnique, sdCardDeviceConfigCapabilities=sdCardDeviceConfigCapabilities, pointingDeviceIndex=pointingDeviceIndex, DellChassisSystemClass=DellChassisSystemClass, ideControlName=ideControlName, systemResourceDMATableEntry=systemResourceDMATableEntry, DellProcessorDeviceType=DellProcessorDeviceType, coochassisIndex=coochassisIndex, chassisPowerButtonControlCapabilitiesUnique=chassisPowerButtonControlCapabilitiesUnique, systemResourceIOPortIndex=systemResourceIOPortIndex, systemStateVoltageStatusCombined=systemStateVoltageStatusCombined, baseBoardServiceTagName=baseBoardServiceTagName, coolingUnitName=coolingUnitName, userSecurityTableEntry=userSecurityTableEntry, systemStateTableEntry=systemStateTableEntry, enhancedAlertMemoryDeviceFailure=enhancedAlertMemoryDeviceFailure, bSUCnIFwakeonLanControlSettingsUnique=bSUCnIFwakeonLanControlSettingsUnique, remoteFlashBIOSTable=remoteFlashBIOSTable, systemStateACPowerSwitchStatusCombined=systemStateACPowerSwitchStatusCombined, physicalMemoryArrayIndexReference=physicalMemoryArrayIndexReference, DellMemoryDeviceFormFactor=DellMemoryDeviceFormFactor, eventLogTableEntry=eventLogTableEntry, chassisName=chassisName, enhancedAlertPowerSupplyWarning=enhancedAlertPowerSupplyWarning, physicalMemoryLoggingTableEntry=physicalMemoryLoggingTableEntry, pointingDevicechassisIndex=pointingDevicechassisIndex, cooDeploymentDurationType=cooDeploymentDurationType, powerUsageInstantaneousHeadroom=powerUsageInstantaneousHeadroom, monitorPortTable=monitorPortTable, eventLogStateSettingsUnique=eventLogStateSettingsUnique, alertCoolingDeviceWarning=alertCoolingDeviceWarning)
mibBuilder.exportSymbols("MIB-Dell-10892", processorDeviceExternalClockSpeed=processorDeviceExternalClockSpeed, alertSystemPeakPowerNewPeak=alertSystemPeakPowerNewPeak, DellProcessorUpgradeInformation=DellProcessorUpgradeInformation, processorDeviceExtendedCapabilities=processorDeviceExtendedCapabilities, parallelPortControlModeSettingsUnique=parallelPortControlModeSettingsUnique, portGroup=portGroup, systemResourceDMATable=systemResourceDMATable, networkDeviceDefaultGatewayIPAddress=networkDeviceDefaultGatewayIPAddress, processorDeviceCoreEnabledCount=processorDeviceCoreEnabledCount, bSUCnumLockControlSettings=bSUCnumLockControlSettings, powerUsagePeakAmpsReadingDateName=powerUsagePeakAmpsReadingDateName, enhancedAlertFanEnclosureRemoval=enhancedAlertFanEnclosureRemoval, userSecurityControlName=userSecurityControlName, systemResourceIOPortStateSettings=systemResourceIOPortStateSettings, DellMemoryDevicePortConnectorType=DellMemoryDevicePortConnectorType, bmcLANInterfaceStateCapabilities=bmcLANInterfaceStateCapabilities, systemStateACPowerSwitchStatusDetails=systemStateACPowerSwitchStatusDetails, systemStateRedundantMemoryUnitStatusList=systemStateRedundantMemoryUnitStatusList, physicalMemoryArrayECCType=physicalMemoryArrayECCType, operatingSystemMemoryTable=operatingSystemMemoryTable, systemManagementSoftwareFeatureFlags=systemManagementSoftwareFeatureFlags, alertACPowerCordNormal=alertACPowerCordNormal, systemStatePowerSupplyStatusDetails=systemStatePowerSupplyStatusDetails, processorDeviceThreadCount=processorDeviceThreadCount, networkDeviceChassisIndex=networkDeviceChassisIndex, parallelPortSecurityState=parallelPortSecurityState, uSBPortBIOSConnectorType=uSBPortBIOSConnectorType, uUIDchassisIndex=uUIDchassisIndex, systemStateAmperageStatusCombined=systemStateAmperageStatusCombined, systemResourceOwnerDescriptionName=systemResourceOwnerDescriptionName, DellACPowerSwitchSettings=DellACPowerSwitchSettings, systemResourceOwnerStateSettings=systemResourceOwnerStateSettings, bmcTable=bmcTable, enhancedAlertCoolingDeviceWarning=enhancedAlertCoolingDeviceWarning, systemStateTemperatureStatusCombined=systemStateTemperatureStatusCombined, cooTroubleTicketTableEntry=cooTroubleTicketTableEntry, bmcLANInterfaceStateSettings=bmcLANInterfaceStateSettings, bSUCtpmSecurityControlStatus=bSUCtpmSecurityControlStatus, systemResourceOwnerStateCapabilities=systemResourceOwnerStateCapabilities, voltageProbeLocationName=voltageProbeLocationName, DellPhysicalMemoryConfigMOMSettings=DellPhysicalMemoryConfigMOMSettings, systemStateSDCardUnitStatusList=systemStateSDCardUnitStatusList, systemResourceIOPortStateCapabilities=systemResourceIOPortStateCapabilities, sdCardDeviceUnitIndexReference=sdCardDeviceUnitIndexReference, processorDeviceVersionName=processorDeviceVersionName, thermalGroup=thermalGroup, DellPowerSupplyType=DellPowerSupplyType, powerUsagePeakHeadroom=powerUsagePeakHeadroom, DellPhysicalMemoryConfigStateSettings=DellPhysicalMemoryConfigStateSettings, cooWarrantyEndDateName=cooWarrantyEndDateName, cacheDeviceStateCapabilities=cacheDeviceStateCapabilities, cacheDevicechassisIndex=cacheDevicechassisIndex, firmwareSize=firmwareSize, physicalMemoryArrayMappedTableEntry=physicalMemoryArrayMappedTableEntry, postLogchassisIndex=postLogchassisIndex, DellAmperageProbeType=DellAmperageProbeType, enhancedAlertFanEnclosureInsertion=enhancedAlertFanEnclosureInsertion, cooSupportInformationchassisIndex=cooSupportInformationchassisIndex, firmwareType=firmwareType, biosSettingChassisIndex=biosSettingChassisIndex, physicalMemoryConfigRedundantSettings=physicalMemoryConfigRedundantSettings, alertSystem=alertSystem, networkDevicePCIFunctionNumber=networkDevicePCIFunctionNumber, bSUCadministratorPasswordControlCapabilitiesUnique=bSUCadministratorPasswordControlCapabilitiesUnique, DellACPowerCordStateCapabilities=DellACPowerCordStateCapabilities, bmcBladeFormFactorName=bmcBladeFormFactorName, sdCardUnitTableEntry=sdCardUnitTableEntry, systemResourceMapIndexReference=systemResourceMapIndexReference, processorDeviceTableEntry=processorDeviceTableEntry, powerSupplychassisIndex=powerSupplychassisIndex, temperatureProbeStatus=temperatureProbeStatus, firmwareStatus=firmwareStatus, monitorPortBIOSConnectorType=monitorPortBIOSConnectorType, systemStatePowerUnitStatusRedundancy=systemStatePowerUnitStatusRedundancy, systemStatePowerUnitStatusCombined=systemStatePowerUnitStatusCombined, sdCardDeviceType=sdCardDeviceType, networkDeviceDriverVersionName=networkDeviceDriverVersionName, memoryDeviceMappedAddressTable=memoryDeviceMappedAddressTable, DellPhysicalMemoryLoggingCapabilities=DellPhysicalMemoryLoggingCapabilities, parallelPortControlchassisIndex=parallelPortControlchassisIndex, DellCacheDeviceAssociativity=DellCacheDeviceAssociativity, physicalMemoryArrayTotalNumberSockets=physicalMemoryArrayTotalNumberSockets, cooCostEventLogIndex=cooCostEventLogIndex, bmcIPMIVersionName=bmcIPMIVersionName, serialPortControlTableEntry=serialPortControlTableEntry, voltageProbeUpperCriticalThreshold=voltageProbeUpperCriticalThreshold, processorPortConnectorType=processorPortConnectorType, networkDeviceIPSubnetMask=networkDeviceIPSubnetMask, cooScheduleNumberLeaseInformationIndexReference=cooScheduleNumberLeaseInformationIndexReference, alertCoolingDeviceFailure=alertCoolingDeviceFailure, alertSDCardDeviceWarning=alertSDCardDeviceWarning, keyboardPortName=keyboardPortName, sCSIControlTableEntry=sCSIControlTableEntry, cooLeaseInformationchassisIndex=cooLeaseInformationchassisIndex, powerSupplypowerUnitIndexReference=powerSupplypowerUnitIndexReference, managedSystemServicesDeviceTable=managedSystemServicesDeviceTable, cooTrainingName=cooTrainingName, enhancedAlertVoltageProbeWarning=enhancedAlertVoltageProbeWarning, physicalMemoryCardChassisIndex=physicalMemoryCardChassisIndex, processorDeviceStatusIndex=processorDeviceStatusIndex, batteryReading=batteryReading, DellUSBPortConnectorType=DellUSBPortConnectorType, chassisResellerContactInformationName=chassisResellerContactInformationName, systemManagementSoftwareManufacturerName=systemManagementSoftwareManufacturerName, DellMemoryDeviceTypeDetails=DellMemoryDeviceTypeDetails, DellGenericPortConnectorType=DellGenericPortConnectorType, systemResourceDMAchassisIndex=systemResourceDMAchassisIndex, operatingSystemStateSettings=operatingSystemStateSettings, redundantMemoryUnitName=redundantMemoryUnitName, systemBIOSTable=systemBIOSTable, sCSIControlIndex=sCSIControlIndex, aCPowerCordLocationName=aCPowerCordLocationName, lRAActionTableUserApplicationName=lRAActionTableUserApplicationName, usbControlchassisIndex=usbControlchassisIndex, lRAGlobalThermalShutdownCapabilitiesUnique=lRAGlobalThermalShutdownCapabilitiesUnique, bmcSerialInterfaceStatus=bmcSerialInterfaceStatus, baseBoardType=baseBoardType, alertFanEnclosureExtendedRemoval=alertFanEnclosureExtendedRemoval, powerSupplyType=powerSupplyType, bmcLANInterfaceChannelNumber=bmcLANInterfaceChannelNumber, DellBoolean=DellBoolean, networkDeviceIRQ=networkDeviceIRQ, alertRedundancyDegraded=alertRedundancyDegraded, lRAGlobalThermalShutdownStateSettingsUnique=lRAGlobalThermalShutdownStateSettingsUnique, clusterTable=clusterTable, sCSIPortStateSettings=sCSIPortStateSettings, bSUCadministratorPasswordPasswordVerifyName=bSUCadministratorPasswordPasswordVerifyName, systemBIOSManufacturerName=systemBIOSManufacturerName, batteryTable=batteryTable, bmcLANInterfaceChassisIndex=bmcLANInterfaceChassisIndex, uUIDTable=uUIDTable, enhancedAlertACPowerCordNoPowerNonRedundant=enhancedAlertACPowerCordNoPowerNonRedundant, enhancedAlertVoltageProbeNormal=enhancedAlertVoltageProbeNormal, cacheDeviceMaximumSize=cacheDeviceMaximumSize, chassisType=chassisType, DellCostofOwnershipString=DellCostofOwnershipString, bmcIPv6URLName=bmcIPv6URLName, eventLogDateName=eventLogDateName, DellPowerCapCapabilities=DellPowerCapCapabilities, powerUsageStateSettings=powerUsageStateSettings, bmcStateSettings=bmcStateSettings, memoryDeviceBankLocationName=memoryDeviceBankLocationName, serialPortBaseIOAddress=serialPortBaseIOAddress, alertSystemUp=alertSystemUp, sdCardUnitCountForRedundancy=sdCardUnitCountForRedundancy, powerUsagePeakAmps=powerUsagePeakAmps, serialPortControlchassisIndex=serialPortControlchassisIndex, cooTableEntry=cooTableEntry, memoryDeviceStateCapabilities=memoryDeviceStateCapabilities, cooExtendedWarrantyProviderName=cooExtendedWarrantyProviderName, genericDevicechassisIndex=genericDevicechassisIndex, memoryDeviceSize=memoryDeviceSize, DellSDCardDeviceConfigCapabilities=DellSDCardDeviceConfigCapabilities, alertBatteryFailure=alertBatteryFailure, aCPowerCordStateSettings=aCPowerCordStateSettings, genericDeviceTableEntry=genericDeviceTableEntry, cooLeaseInformationBuyOutAmount=cooLeaseInformationBuyOutAmount, systemResourceMapIndex=systemResourceMapIndex, bmcModuleName=bmcModuleName, remoteFlashBIOSGroup=remoteFlashBIOSGroup, memoryDeviceLocationName=memoryDeviceLocationName, powerUnitTableEntry=powerUnitTableEntry, enhancedAlertSystemUp=enhancedAlertSystemUp, DellBMCSerialConnectionModeSettings=DellBMCSerialConnectionModeSettings, DellideControlSettingsUnique=DellideControlSettingsUnique, coolingDeviceLowerNonRecoverableThreshold=coolingDeviceLowerNonRecoverableThreshold, processorPortIndex=processorPortIndex, amperageProbeProbeCapabilities=amperageProbeProbeCapabilities, bmcIndex=bmcIndex, cacheDeviceSupportedType=cacheDeviceSupportedType, cacheDeviceStateSettings=cacheDeviceStateSettings, temperatureProbeLowerCriticalThreshold=temperatureProbeLowerCriticalThreshold, cooOptionsTableEntry=cooOptionsTableEntry, operatingSystemMemoryTotalPageFileSize=operatingSystemMemoryTotalPageFileSize, enhancedAlertPowerSupplyFailure=enhancedAlertPowerSupplyFailure, processorDeviceUpgradeInformation=processorDeviceUpgradeInformation, memoryDeviceErrorCount=memoryDeviceErrorCount, DellNetworkDeviceiSCSICapabilityFlags=DellNetworkDeviceiSCSICapabilityFlags, systemResourceMemoryStatus=systemResourceMemoryStatus, pCIDeviceDataBusWidth=pCIDeviceDataBusWidth, biosSettingDisplayName=biosSettingDisplayName, alertPreviousStatus=alertPreviousStatus, serialPortStatus=serialPortStatus, systemSlotHotPlugSlotSpeed=systemSlotHotPlugSlotSpeed, bmcSerialInterfaceStateSettings=bmcSerialInterfaceStateSettings, systemStateRedundantMemoryUnitStatusRedundancy=systemStateRedundantMemoryUnitStatusRedundancy, cacheDeviceCurrentType=cacheDeviceCurrentType, physicalMemoryConfigStatus=physicalMemoryConfigStatus, chassisSystemLocationName=chassisSystemLocationName, DellMonitorPortConnectorType=DellMonitorPortConnectorType, enhancedAlertUserHostSystemReset=enhancedAlertUserHostSystemReset, pointingPortStatus=pointingPortStatus, pCIDeviceDescriptionName=pCIDeviceDescriptionName, biosSettingDefaultValue=biosSettingDefaultValue, uSBPortTable=uSBPortTable, DellSystemProperties=DellSystemProperties, cooAquisitionPurchaseDateName=cooAquisitionPurchaseDateName, cooSupportInformationFixTypeName=cooSupportInformationFixTypeName, processorDeviceMaximumSpeed=processorDeviceMaximumSpeed, alertLogFull=alertLogFull, keyboardPortchassisIndex=keyboardPortchassisIndex, coolingUnitStateSettings=coolingUnitStateSettings, systemResourceMemoryTableEntry=systemResourceMemoryTableEntry, systemResourceDMAStatus=systemResourceDMAStatus, bSUCspeakerControlStatus=bSUCspeakerControlStatus, DellPhysicalMemoryConfigMOMCapabilities=DellPhysicalMemoryConfigMOMCapabilities, processorPortTable=processorPortTable, DellACPowerSwitchRedundancyMode=DellACPowerSwitchRedundancyMode, userSecurityUserName=userSecurityUserName, bSUCnumLockControlName=bSUCnumLockControlName, DellResourceOwnerInterfaceType=DellResourceOwnerInterfaceType, pCIDeviceIndexReference=pCIDeviceIndexReference, DellPowerSupplyConfigurationErrorType=DellPowerSupplyConfigurationErrorType, remoteFlashBIOSCompletionCode=remoteFlashBIOSCompletionCode, usbControlCapabilities=usbControlCapabilities, memoryDeviceMappedAddressEndingAddress=memoryDeviceMappedAddressEndingAddress, enhancedAlertRedundancyNormal=enhancedAlertRedundancyNormal, DellParallelPortControlCapabilitiesUnique=DellParallelPortControlCapabilitiesUnique, usbControlIndex=usbControlIndex, cooScheduleNumberDescriptionName=cooScheduleNumberDescriptionName, networkDeviceIndex=networkDeviceIndex, aCPowerSwitchSettings=aCPowerSwitchSettings, uSBPortStatus=uSBPortStatus, uUIDValue=uUIDValue, systemStatechassisIndex=systemStatechassisIndex, systemResourceMapStateCapabilities=systemResourceMapStateCapabilities, bmcDescriptionName=bmcDescriptionName, pCIDeviceConfigurationSpaceStateSettings=pCIDeviceConfigurationSpaceStateSettings, alertServiceTag=alertServiceTag, uSBPortIndex=uSBPortIndex, chassisExpressServiceCodeName=chassisExpressServiceCodeName, aCPowerSwitchchassisIndex=aCPowerSwitchchassisIndex, DellStatusRedundancy=DellStatusRedundancy, cooTable=cooTable, powerUsageTableEntry=powerUsageTableEntry, systemStateMemoryDeviceStateDetails=systemStateMemoryDeviceStateDetails, DellResourceShareDisposition=DellResourceShareDisposition, systemStateProcessorDeviceStatusList=systemStateProcessorDeviceStatusList, processorDeviceExtendedSettings=processorDeviceExtendedSettings, monitorPortchassisIndex=monitorPortchassisIndex, chassisFanControlSettingsUnique=chassisFanControlSettingsUnique, cooTroubleTicketIndex=cooTroubleTicketIndex, enhancedAlertLogFull=enhancedAlertLogFull, networkDeviceTOECapabilityFlags=networkDeviceTOECapabilityFlags, baseBoardStateSettings=baseBoardStateSettings, temperatureProbechassisIndex=temperatureProbechassisIndex, systemResourceIOPortStartingAddress=systemResourceIOPortStartingAddress, disketteControlSettingsUnique=disketteControlSettingsUnique, powerUsageCumulativeWattage=powerUsageCumulativeWattage, chassisIdentifyFlashControlSettings=chassisIdentifyFlashControlSettings, bSUCbootSequenceControlSettingsUnique=bSUCbootSequenceControlSettingsUnique, cooRepairState=cooRepairState, powerUsagePeakWatts=powerUsagePeakWatts, physicalMemoryCardIndex=physicalMemoryCardIndex)
mibBuilder.exportSymbols("MIB-Dell-10892", powerUsageCumulativeWattageStartDateName=powerUsageCumulativeWattageStartDateName, intrusionType=intrusionType, keyboardPortConnectorType=keyboardPortConnectorType, pCIDeviceTable=pCIDeviceTable, powerUnitchassisIndex=powerUnitchassisIndex, systemStatePowerSupplyStateDetails=systemStatePowerSupplyStateDetails, operatingSystemTableEntry=operatingSystemTableEntry, systemResourceMapStateSettings=systemResourceMapStateSettings, physicalMemoryArrayMaximumSize=physicalMemoryArrayMaximumSize, alertACPowerCordNoPowerNonRedundant=alertACPowerCordNoPowerNonRedundant, alertPowerSupplyNormal=alertPowerSupplyNormal, amperageProbeType=amperageProbeType, serialPortControlIndex=serialPortControlIndex, biosSettingIndex=biosSettingIndex, systemManagementSoftwareGroup=systemManagementSoftwareGroup, chassisResellerName=chassisResellerName, cooAquisitionInstallDateName=cooAquisitionInstallDateName, cacheDeviceStatusState=cacheDeviceStatusState, baseBoardFeatureFlags=baseBoardFeatureFlags, serialPortSecurityState=serialPortSecurityState, DellCacheDeviceType=DellCacheDeviceType, physicalMemoryLoggingIndex=physicalMemoryLoggingIndex, DellSystemSlotCategory=DellSystemSlotCategory, clusterChassisIndex=clusterChassisIndex, powerProfileIndex=powerProfileIndex, alertAmperageProbeWarning=alertAmperageProbeWarning, serialPortConnectorType=serialPortConnectorType, powerProfileCustomCPUMgmtCapabilities=powerProfileCustomCPUMgmtCapabilities, DellSystemSlotStateSettings=DellSystemSlotStateSettings, voltageProbeDiscreteReading=voltageProbeDiscreteReading, physicalMemoryConfigChassisIndex=physicalMemoryConfigChassisIndex, cooRegistrationIsRegistered=cooRegistrationIsRegistered, systemStateTable=systemStateTable, networkDeviceDHCPServerIPAddress=networkDeviceDHCPServerIPAddress, biosSettingPendingValue=biosSettingPendingValue, batteryStatus=batteryStatus, DellCacheDeviceWritePolicy=DellCacheDeviceWritePolicy, memoryDeviceTypeDetails=memoryDeviceTypeDetails, networkDeviceServiceName=networkDeviceServiceName, operatingSystemMemoryExtTotalPhysicalSize=operatingSystemMemoryExtTotalPhysicalSize, aCPowerSwitchTableEntry=aCPowerSwitchTableEntry, cooCostEventLogDuration=cooCostEventLogDuration, memoryDevicePortchassisIndex=memoryDevicePortchassisIndex, systemStateCoolingUnitStatusDetails=systemStateCoolingUnitStatusDetails, chassisparentIndexReference=chassisparentIndexReference, sdCardDeviceCardState=sdCardDeviceCardState, DellCooHourDayDurationType=DellCooHourDayDurationType, cooRepairCounter=cooRepairCounter, coolingDeviceIndex=coolingDeviceIndex, mIBMaintenanceVersionNumber=mIBMaintenanceVersionNumber, ideControlTable=ideControlTable, enhancedAlertMemoryDeviceNormal=enhancedAlertMemoryDeviceNormal, cooOptionsDescriptionName=cooOptionsDescriptionName, ideControlCapabilitiesUnique=ideControlCapabilitiesUnique, systemResourceMapTableEntry=systemResourceMapTableEntry, powerSupplyStateSettingsUnique=powerSupplyStateSettingsUnique, chassisNodeIDName=chassisNodeIDName, cooLeaseInformationTable=cooLeaseInformationTable, systemResourceMemoryShareDisposition=systemResourceMemoryShareDisposition, bmcChassisIndex=bmcChassisIndex, enhancedAlertTemperatureProbeFailure=enhancedAlertTemperatureProbeFailure, enhancedAlertSystemPeakPowerNewPeak=enhancedAlertSystemPeakPowerNewPeak, aCPowerCordchassisIndex=aCPowerCordchassisIndex, alertFanEnclosureRemoval=alertFanEnclosureRemoval, DellHostControlCapabilities=DellHostControlCapabilities, cacheDeviceCurrentSize=cacheDeviceCurrentSize, DellBIOSSettingValueType=DellBIOSSettingValueType, memoryDeviceMultiBitErrorCount=memoryDeviceMultiBitErrorCount, genericDeviceSystemSlotIndexReference=genericDeviceSystemSlotIndexReference, systemResourceMapStatus=systemResourceMapStatus, baseBoardStateCapabilities=baseBoardStateCapabilities, dell=dell, chassisSystemPrimaryUserName=chassisSystemPrimaryUserName, DellPowerSupplyStateSettingsUnique=DellPowerSupplyStateSettingsUnique, chassisManufacturerName=chassisManufacturerName, remoteFlashBIOSStatus=remoteFlashBIOSStatus, coolingDevicechassisIndex=coolingDevicechassisIndex, userSecurityTable=userSecurityTable, uSBPortConnectorType=uSBPortConnectorType, baseboardGroup=baseboardGroup, memoryDevicePortName=memoryDevicePortName, clusterIndex=clusterIndex, DellCacheDeviceLocation=DellCacheDeviceLocation, cacheDeviceIndex=cacheDeviceIndex, systemBIOSStateCapabilities=systemBIOSStateCapabilities, systemManagementSoftwareBuildNumber=systemManagementSoftwareBuildNumber, processorPortName=processorPortName, systemManagementSoftwareURLName=systemManagementSoftwareURLName, baseBoardTable=baseBoardTable, systemResourceInterruptIndex=systemResourceInterruptIndex, memoryDeviceSpeedName=memoryDeviceSpeedName, systemResourceDMAMaximumTransferSize=systemResourceDMAMaximumTransferSize, processorDeviceFamily=processorDeviceFamily, keyboardDeviceTableEntry=keyboardDeviceTableEntry, eventLogRecordIndex=eventLogRecordIndex, sCSIPortStatus=sCSIPortStatus, alertChassisServiceTag=alertChassisServiceTag, DellFirmwareType=DellFirmwareType, firmwareDateName=firmwareDateName, DellACPowerSwitchCapabilities=DellACPowerSwitchCapabilities, memoryDeviceMemoryPortIndexReference=memoryDeviceMemoryPortIndexReference, physicalMemoryArrayMappedStatus=physicalMemoryArrayMappedStatus, enhancedAlertTemperatureProbeWarning=enhancedAlertTemperatureProbeWarning, cooOutsourcingProblemDescriptionName=cooOutsourcingProblemDescriptionName, clusterStateCapabilities=clusterStateCapabilities, temperatureProbeDiscreteReading=temperatureProbeDiscreteReading, sdCardUnitRedundancyStatus=sdCardUnitRedundancyStatus, bmcSerialInterfaceConnectionModeSettings=bmcSerialInterfaceConnectionModeSettings, remoteFlashBIOSMinimumContiguousMemory=remoteFlashBIOSMinimumContiguousMemory, systemSlotHotPlugAdapterSpeed=systemSlotHotPlugAdapterSpeed, DellChassisType=DellChassisType, systemStatePowerUnitStateDetails=systemStatePowerUnitStateDetails, aCPowerCordCountForRedundancy=aCPowerCordCountForRedundancy, DellSecurityString=DellSecurityString, bmcSerialInterfaceBMCIndex=bmcSerialInterfaceBMCIndex, cooScheduleNumberTable=cooScheduleNumberTable, DellSystemSlotLength=DellSystemSlotLength, DellWatchDogTimerCapabilities=DellWatchDogTimerCapabilities, DellPhysicalMemoryConfigStateCapabilities=DellPhysicalMemoryConfigStateCapabilities, genericDeviceStateSettings=genericDeviceStateSettings, DellParallelPortConnectorType=DellParallelPortConnectorType, operatingSystemMemoryAvailablePhysicalSize=operatingSystemMemoryAvailablePhysicalSize, temperatureProbeReading=temperatureProbeReading, operatingSystemStateCapabilities=operatingSystemStateCapabilities, keyboardDeviceIndex=keyboardDeviceIndex, amperageProbechassisIndex=amperageProbechassisIndex, sdCardUnitStatus=sdCardUnitStatus, serialPortControlName=serialPortControlName, physicalMemoryConfigMOMSettings=physicalMemoryConfigMOMSettings, systemSlotTableEntry=systemSlotTableEntry, DellSpeakerControlSettingsUnique=DellSpeakerControlSettingsUnique, DellUnsigned16BitRange=DellUnsigned16BitRange, systemStateACPowerSwitchStatusRedundancy=systemStateACPowerSwitchStatusRedundancy, cooRepairTable=cooRepairTable, physicalMemoryCardInUseNumberSockets=physicalMemoryCardInUseNumberSockets, physicalMemoryArrayLocation=physicalMemoryArrayLocation, systemStateChassisIntrusionStatusDetails=systemStateChassisIntrusionStatusDetails, DellMemoryDeviceType=DellMemoryDeviceType, powerUsagePowerCapValue=powerUsagePowerCapValue, DellPhysicalMemoryLoggingSettings=DellPhysicalMemoryLoggingSettings, bmcSerialInterfaceIndex=bmcSerialInterfaceIndex, bSUCbootSequenceControlName=bSUCbootSequenceControlName, amperageProbeStateSettings=amperageProbeStateSettings, systemBIOSStartingAddress=systemBIOSStartingAddress, systemResourceInterruptStateCapabilities=systemResourceInterruptStateCapabilities, memoryDeviceTotalDataBusWidth=memoryDeviceTotalDataBusWidth, parallelPortIRQLevel=parallelPortIRQLevel, keyboardPortTableEntry=keyboardPortTableEntry, sCSIControlCapabilities=sCSIControlCapabilities, voltageProbeStateSettings=voltageProbeStateSettings, alertGroup=alertGroup, cooLeaseInformationLessorName=cooLeaseInformationLessorName, bmcGUID=bmcGUID, firmwareStateSettings=firmwareStateSettings, DellLocalResponseAgentCapabilitiesUnique=DellLocalResponseAgentCapabilitiesUnique, chassisInformationTable=chassisInformationTable, DellNetworkDeviceConnectionStatus=DellNetworkDeviceConnectionStatus, systemSlotLength=systemSlotLength, systemStateSDCardDeviceStatusCombined=systemStateSDCardDeviceStatusCombined, chassisSystemRevisionNumber=chassisSystemRevisionNumber, temperatureProbeUpperNonCriticalThreshold=temperatureProbeUpperNonCriticalThreshold, parallelPortControlStatus=parallelPortControlStatus, intrusionIndex=intrusionIndex, DellBaseBoardFeatureFlags=DellBaseBoardFeatureFlags, DellStateCapabilities=DellStateCapabilities, powerUnitTable=powerUnitTable, coolingDeviceUpperCriticalThreshold=coolingDeviceUpperCriticalThreshold, temperatureProbeStateSettings=temperatureProbeStateSettings, cooLeaseInformationTableEntry=cooLeaseInformationTableEntry, lRAGlobalSettingsDisableTimeoutValue=lRAGlobalSettingsDisableTimeoutValue, DellFanControlCapabilities=DellFanControlCapabilities, cooSupportInformationHelpDeskName=cooSupportInformationHelpDeskName, powerProfileCustomCPUMgmtSetting=powerProfileCustomCPUMgmtSetting, DellResourceInterruptType=DellResourceInterruptType, physicalMemoryConfigTable=physicalMemoryConfigTable, uSBPortTableEntry=uSBPortTableEntry, pointingDeviceTableEntry=pointingDeviceTableEntry, bSUCtpmSecurityControlName=bSUCtpmSecurityControlName, alertUserHostSystemReset=alertUserHostSystemReset, systemSlotTable=systemSlotTable, DellSerialPortControlCapabilitiesUnique=DellSerialPortControlCapabilitiesUnique, monitorPortStatus=monitorPortStatus, processorDeviceCurrentSpeed=processorDeviceCurrentSpeed, DellPortSecurityState=DellPortSecurityState, alertTemperatureProbeWarning=alertTemperatureProbeWarning, pCIDeviceConfigurationSpaceStatus=pCIDeviceConfigurationSpaceStatus, memoryDevicePortConnectorType=memoryDevicePortConnectorType, serialPortControlStatus=serialPortControlStatus, pCIDeviceSystemSlotIndexReference=pCIDeviceSystemSlotIndexReference, powerUnitRedundancyStatus=powerUnitRedundancyStatus, physicalMemoryCardStatus=physicalMemoryCardStatus, chassisNMIButtonControlSettingsUnique=chassisNMIButtonControlSettingsUnique, eventLogTable=eventLogTable, sCSIControlName=sCSIControlName, pointingPortTable=pointingPortTable, intrusionStateSettings=intrusionStateSettings, bmcLANInterfaceTable=bmcLANInterfaceTable, sdCardDeviceTableEntry=sdCardDeviceTableEntry, parallelPortCapabilitiesUnique=parallelPortCapabilitiesUnique, enhancedAlertRedundancyDegraded=enhancedAlertRedundancyDegraded, memoryDevicePortBIOSConnectorType=memoryDevicePortBIOSConnectorType, pCIDeviceConfigurationSpaceTable=pCIDeviceConfigurationSpaceTable, systemBIOSSize=systemBIOSSize, processorDeviceStatusState=processorDeviceStatusState, temperatureProbeTable=temperatureProbeTable, lRAActionTableActionNumberIndex=lRAActionTableActionNumberIndex, physicalMemoryCardName=physicalMemoryCardName, DellResourceDMATransferWidth=DellResourceDMATransferWidth, DellWatchDogControlCapabilities=DellWatchDogControlCapabilities, bmcStatus=bmcStatus, DellManagedSystemServicesDeviceType=DellManagedSystemServicesDeviceType, chassishostControlCapabilitiesUnique=chassishostControlCapabilitiesUnique, operatingSystemIsPrimary=operatingSystemIsPrimary, processorPortStatus=processorPortStatus, cacheDeviceprocessorDeviceIndexReference=cacheDeviceprocessorDeviceIndexReference, cacheDeviceSpeed=cacheDeviceSpeed, systemManagementSoftwareSupportedProtocol=systemManagementSoftwareSupportedProtocol, cooMaintenanceState=cooMaintenanceState, cooGroup=cooGroup, processorDeviceStatusChassisIndex=processorDeviceStatusChassisIndex, DellObjectRange=DellObjectRange, remoteFlashBIOSStateSettingsUnique=remoteFlashBIOSStateSettingsUnique, DellSystemSlotType=DellSystemSlotType, postLogStateSettingsUnique=postLogStateSettingsUnique, alertAmperageProbeNormal=alertAmperageProbeNormal, enhancedAlertFanEnclosureExtendedRemoval=enhancedAlertFanEnclosureExtendedRemoval, cooMaintenanceIndex=cooMaintenanceIndex, serialPortControlTable=serialPortControlTable, cooOptionsLeaseInformationIndexReference=cooOptionsLeaseInformationIndexReference, bmcLANInterfaceAlertCommunityName=bmcLANInterfaceAlertCommunityName, DellSerialPortConnectorType=DellSerialPortConnectorType, cooDeploymentDateLength=cooDeploymentDateLength, systemStateACPowerCordStatusCombined=systemStateACPowerCordStatusCombined, baseBoardVersionName=baseBoardVersionName, physicalMemoryArrayECCErrorNonCriticalThreshold=physicalMemoryArrayECCErrorNonCriticalThreshold, systemResourceDMATransferWidth=systemResourceDMATransferWidth, chassisModelName=chassisModelName, amperageProbeTableEntry=amperageProbeTableEntry, DellSerialPortCapabilitiesUnique=DellSerialPortCapabilitiesUnique, lRAGlobalSettingsCapabilitiesUnique=lRAGlobalSettingsCapabilitiesUnique, DellUUIDType=DellUUIDType, baseBoardProductName=baseBoardProductName, DellNetworkInterfaceControlSettingsUnique=DellNetworkInterfaceControlSettingsUnique, powerSupplyIndex=powerSupplyIndex, baseBoardTypeName=baseBoardTypeName, keyboardPortStateSettings=keyboardPortStateSettings, cacheDeviceType=cacheDeviceType, physicalMemoryArraychassisIndex=physicalMemoryArraychassisIndex, batteryStateSettings=batteryStateSettings, amperageProbeStatus=amperageProbeStatus, genericDeviceStateCapabilities=genericDeviceStateCapabilities, pointingPortIndex=pointingPortIndex, memoryDevicePortStateSettings=memoryDevicePortStateSettings, systemBIOSEndingAddress=systemBIOSEndingAddress)
mibBuilder.exportSymbols("MIB-Dell-10892", memoryDevicePortPhysicalMemoryCardIndexReference=memoryDevicePortPhysicalMemoryCardIndexReference, memoryDeviceMappedAddressInterleaveDepth=memoryDeviceMappedAddressInterleaveDepth, systemBIOSVersionName=systemBIOSVersionName, systemSlotStateCapabilitiesUnique=systemSlotStateCapabilitiesUnique, systemResourceDMAStateSettings=systemResourceDMAStateSettings, cooWarrantychassisIndex=cooWarrantychassisIndex, DellPhysicalMemoryConfigRedundantCapabilities=DellPhysicalMemoryConfigRedundantCapabilities, DellMemoryPowerPerformanceManagementType=DellMemoryPowerPerformanceManagementType, batteryLocationName=batteryLocationName, physicalMemoryConfigStateSettings=physicalMemoryConfigStateSettings, coolingUnitStateCapabilties=coolingUnitStateCapabilties, memoryDeviceSingleBitErrorCount=memoryDeviceSingleBitErrorCount, memoryDeviceTable=memoryDeviceTable, cacheDeviceAssociativity=cacheDeviceAssociativity, temperatureProbeLocationName=temperatureProbeLocationName, DellSystemResourceMapType=DellSystemResourceMapType, monitorPortStateSettings=monitorPortStateSettings, powerUnitName=powerUnitName, chassisConnectionStatusUnique=chassisConnectionStatusUnique, batteryIndex=batteryIndex, DellIntrusionReading=DellIntrusionReading, bSUCuserPasswordPasswordVerifyName=bSUCuserPasswordPasswordVerifyName, cooMaintenanceTable=cooMaintenanceTable, processorDeviceStatusStatus=processorDeviceStatusStatus, chassiswatchDogControlExpiryTimeCapabilitiesUnique=chassiswatchDogControlExpiryTimeCapabilitiesUnique, cooTroubleTicketSupportInformationIndexReference=cooTroubleTicketSupportInformationIndexReference, clusterTableEntry=clusterTableEntry, bmcSerialInterfaceStateCapabilities=bmcSerialInterfaceStateCapabilities, cooServiceContractState=cooServiceContractState, enhancedAlertACPowerCordFailure=enhancedAlertACPowerCordFailure, cacheDeviceECCType=cacheDeviceECCType, SMSSNMPAgentFeatureFlags=SMSSNMPAgentFeatureFlags, aCPowerCordTableEntry=aCPowerCordTableEntry, cooRepairVendorName=cooRepairVendorName, cooExtendedWarrantyCost=cooExtendedWarrantyCost, operatingSystemOperatingSystemVersionName=operatingSystemOperatingSystemVersionName, batteryTableEntry=batteryTableEntry, memoryDeviceSpeed=memoryDeviceSpeed, enhancedAlertLogWarning=enhancedAlertLogWarning, powerProfileChassisIndex=powerProfileChassisIndex, pCIDeviceConfigurationSpaceBusNumber=pCIDeviceConfigurationSpaceBusNumber, uUIDTableEntry=uUIDTableEntry, systemResourceIOPortTableEntry=systemResourceIOPortTableEntry, biosSettingFQDD=biosSettingFQDD, pCIDevicechassisIndex=pCIDevicechassisIndex, cooWarrantyState=cooWarrantyState, bSUCnIFwakeonLanControlName=bSUCnIFwakeonLanControlName, DellPowerProfileType=DellPowerProfileType, systemSlotSlotExternalSlotName=systemSlotSlotExternalSlotName, memoryDeviceMappedAddressRowPosition=memoryDeviceMappedAddressRowPosition, DellSDCardDeviceCardState=DellSDCardDeviceCardState, physicalMemoryArrayECCErrorCriticalThreshold=physicalMemoryArrayECCErrorCriticalThreshold, cooState=cooState, powerProfileCustomFanMgmtCapabilities=powerProfileCustomFanMgmtCapabilities, processorDeviceStatusTableEntry=processorDeviceStatusTableEntry, usbControlStatus=usbControlStatus, pCIDeviceStateSettings=pCIDeviceStateSettings, pointingPortConnectorType=pointingPortConnectorType, DellNetworkDeviceTeamingFlags=DellNetworkDeviceTeamingFlags, memoryDeviceExtendedSize=memoryDeviceExtendedSize, bSUCuserPasswordControlStatus=bSUCuserPasswordControlStatus, systemStateAmperageStateDetails=systemStateAmperageStateDetails, DellMACAddress=DellMACAddress, cacheDeviceTableEntry=cacheDeviceTableEntry, memoryDeviceMappedAddressInterleavePosition=memoryDeviceMappedAddressInterleavePosition, DellPhysicalMemoryArrayLocation=DellPhysicalMemoryArrayLocation, remoteFlashBIOSStateCapabilitiesUnique=remoteFlashBIOSStateCapabilitiesUnique, systemStateRedundantMemoryUnitStateDetails=systemStateRedundantMemoryUnitStateDetails, DellConnectionStatus=DellConnectionStatus, DellCacheDeviceSRAMType=DellCacheDeviceSRAMType, systemStateCoolingDeviceStateDetails=systemStateCoolingDeviceStateDetails, coolingDevicecoolingUnitIndexReference=coolingDevicecoolingUnitIndexReference, managedSystemServicesDeviceStorageSize=managedSystemServicesDeviceStorageSize, cooOutsourcingServiceFeeName=cooOutsourcingServiceFeeName, sdCardDeviceCardAvailableStorageSize=sdCardDeviceCardAvailableStorageSize, powerProfileCustomMemoryMgmtSetting=powerProfileCustomMemoryMgmtSetting, networkDeviceBaseIOPortAddress=networkDeviceBaseIOPortAddress, voltageProbeTable=voltageProbeTable, sdCardDeviceStatus=sdCardDeviceStatus, memoryDeviceMappedAddressTableEntry=memoryDeviceMappedAddressTableEntry, systemStateRedundantMemoryUnitStatusCombined=systemStateRedundantMemoryUnitStatusCombined, physicalMemoryConfigStateCapabilities=physicalMemoryConfigStateCapabilities, DellParallelPortCapabilitiesUnique=DellParallelPortCapabilitiesUnique, postLogTable=postLogTable, DellPhysicalMemoryArrayECCType=DellPhysicalMemoryArrayECCType, postLogFormat=postLogFormat, baseBoardLocationName=baseBoardLocationName, systemResourceInterruptTrigger=systemResourceInterruptTrigger, powerSupplyPowerMonitorCapable=powerSupplyPowerMonitorCapable, chassisSystemProperties=chassisSystemProperties, serialPortIRQLevel=serialPortIRQLevel, coolingDeviceLowerNonCriticalThreshold=coolingDeviceLowerNonCriticalThreshold, systemResourceInterruptStateSettings=systemResourceInterruptStateSettings, memoryDevicePortIndex=memoryDevicePortIndex, sdCardUnitTable=sdCardUnitTable, networkDeviceCurrentMACAddress=networkDeviceCurrentMACAddress, chassisSystemClass=chassisSystemClass, chassisID=chassisID, networkDeviceIPAddress=networkDeviceIPAddress, bSUCuserPasswordNewPasswordName=bSUCuserPasswordNewPasswordName, voltageProbeReading=voltageProbeReading, DellProcessorDeviceStatusState=DellProcessorDeviceStatusState, managedSystemServicesDeviceChassisIndex=managedSystemServicesDeviceChassisIndex, DellChassisIdentifyControlSettings=DellChassisIdentifyControlSettings, powerUsagePowerCapCapabilities=powerUsagePowerCapCapabilities, enhancedAlertSDCardDeviceFailure=enhancedAlertSDCardDeviceFailure, alertBatteryWarning=alertBatteryWarning, bSUCuserPasswordControlSettingsUnique=bSUCuserPasswordControlSettingsUnique, memoryDeviceStateSettings=memoryDeviceStateSettings, coolingDeviceType=coolingDeviceType, DellSCSIPortConnectorType=DellSCSIPortConnectorType, keyboardDeviceStateSettings=keyboardDeviceStateSettings, coolingDeviceProbeCapabilities=coolingDeviceProbeCapabilities, parallelPortControlSettingsUnique=parallelPortControlSettingsUnique, systemStateEventLogStatus=systemStateEventLogStatus, alertDeviceRemove=alertDeviceRemove, redundantMemoryUnitStateCapabilities=redundantMemoryUnitStateCapabilities, firmwareVersionName=firmwareVersionName, redundantMemoryUnitChassisIndex=redundantMemoryUnitChassisIndex, networkDeviceDriverImagePathName=networkDeviceDriverImagePathName, DellSDCardDeviceType=DellSDCardDeviceType, usbControlName=usbControlName, memoryDevicePortStateCapabilities=memoryDevicePortStateCapabilities, memoryDeviceIndexReference=memoryDeviceIndexReference, intrusionStateCapabilities=intrusionStateCapabilities, chassisInformationGroup=chassisInformationGroup, physicalMemoryCardTotalNumberSockets=physicalMemoryCardTotalNumberSockets, mIBVersionGroup=mIBVersionGroup, voltageProbechassisIndex=voltageProbechassisIndex, keyboardPortIndex=keyboardPortIndex, baseBoardAssetTagName=baseBoardAssetTagName, coolingUnitStatus=coolingUnitStatus, DellProcessorDeviceFamily=DellProcessorDeviceFamily, biosSettingTableEntry=biosSettingTableEntry, systemResourceMemorychassisIndex=systemResourceMemorychassisIndex, aCPowerSwitchCapabilities=aCPowerSwitchCapabilities, pCIDeviceManufacturerName=pCIDeviceManufacturerName, bSUCnumLockControlCapabilities=bSUCnumLockControlCapabilities, DellResourceInterruptTrigger=DellResourceInterruptTrigger, operatingSystemMemoryAvailableVirtualSize=operatingSystemMemoryAvailableVirtualSize, biosSettingCurrentValue=biosSettingCurrentValue, cooOutsourcingProviderFeeName=cooOutsourcingProviderFeeName, cooExtendedWarrantyEndDateName=cooExtendedWarrantyEndDateName, genericDeviceName=genericDeviceName, disketteControlchassisIndex=disketteControlchassisIndex, alertAmperageProbeNonRecoverable=alertAmperageProbeNonRecoverable, networkDeviceStatus=networkDeviceStatus, DellCooDayMonthDurationType=DellCooDayMonthDurationType, coolingUnitchassisIndex=coolingUnitchassisIndex, parallelPortStateCapabilities=parallelPortStateCapabilities, cooSupportInformationIsOutsourced=cooSupportInformationIsOutsourced, clusterTypeDescriptionName=clusterTypeDescriptionName, networkDeviceProductName=networkDeviceProductName, cooOptionschassisIndex=cooOptionschassisIndex, intrusionTable=intrusionTable, bSUCspeakerControlCapabilitiesUnique=bSUCspeakerControlCapabilitiesUnique, bSUCtpmSecurityControlSetting=bSUCtpmSecurityControlSetting, bmcSerialInterfaceFlowControl=bmcSerialInterfaceFlowControl, DellNetworkDeviceCapabilities=DellNetworkDeviceCapabilities, memoryDeviceStatus=memoryDeviceStatus, systemResourceMapTable=systemResourceMapTable, processorDeviceModelName=processorDeviceModelName, DellVoltageDiscreteReading=DellVoltageDiscreteReading, coolingUnitTableEntry=coolingUnitTableEntry, cooServiceContractTypeName=cooServiceContractTypeName, alertPowerSupplyFailure=alertPowerSupplyFailure, DellDisketteControlCapabilitiesUnique=DellDisketteControlCapabilitiesUnique, cooServiceContractIndex=cooServiceContractIndex, alertRedundancyNormal=alertRedundancyNormal, DellCoolingDeviceDiscreteReading=DellCoolingDeviceDiscreteReading, firmwareStateCapabilities=firmwareStateCapabilities, DellUnsigned32BitRange=DellUnsigned32BitRange, temperatureProbeLowerNonCriticalThreshold=temperatureProbeLowerNonCriticalThreshold, physicalMemoryArrayUse=physicalMemoryArrayUse, cooOperatingSystemUpgradeTypeName=cooOperatingSystemUpgradeTypeName, enhancedAlertProcessorDeviceStatusFailure=enhancedAlertProcessorDeviceStatusFailure, enhancedAlertAutomaticSystemRecovery=enhancedAlertAutomaticSystemRecovery, alertMemoryDeviceFailure=alertMemoryDeviceFailure, keyboardDeviceTypeName=keyboardDeviceTypeName, processorPortBIOSConnectorType=processorPortBIOSConnectorType, cooAquisitionPurchaseCost=cooAquisitionPurchaseCost, sdCardDeviceConfigSettings=sdCardDeviceConfigSettings, alertVoltageProbeNormal=alertVoltageProbeNormal, systemResourceOwnerInterfaceType=systemResourceOwnerInterfaceType, cooMaintenanceRestrictionsName=cooMaintenanceRestrictionsName, powerSupplyConfigurationErrorType=powerSupplyConfigurationErrorType, intrusionReading=intrusionReading, powerUsagePowerCapSetting=powerUsagePowerCapSetting, systemSlotSlotID=systemSlotSlotID, bmcSerialInterfaceChannelNumber=bmcSerialInterfaceChannelNumber, firmwareTypeName=firmwareTypeName, baseBoardManufacturerName=baseBoardManufacturerName, DellLRAThermalShutdownCapabilitiesUnique=DellLRAThermalShutdownCapabilitiesUnique, parallelPortStateSettings=parallelPortStateSettings, DellUnsigned64BitRange=DellUnsigned64BitRange, cooSupportInformationIndex=cooSupportInformationIndex, alertMemoryDeviceNonRecoverable=alertMemoryDeviceNonRecoverable, DellPhysicalMemoryConfigRedundantSettings=DellPhysicalMemoryConfigRedundantSettings, aCPowerCordIndex=aCPowerCordIndex, processorDeviceTable=processorDeviceTable, cooScheduleNumberTableEntry=cooScheduleNumberTableEntry, bmcSerialInterfaceConnectionModeCapabilities=bmcSerialInterfaceConnectionModeCapabilities, coolingDeviceUpperNonCriticalThreshold=coolingDeviceUpperNonCriticalThreshold, serialPortCapabilitiesUnique=serialPortCapabilitiesUnique, systemStateChassisIntrusionStateDetails=systemStateChassisIntrusionStateDetails, eventLogFormat=eventLogFormat, networkDeviceTable=networkDeviceTable, DellStateSettingsLogUnique=DellStateSettingsLogUnique, systemSlotHotPlugBusWidth=systemSlotHotPlugBusWidth, temperatureProbeLowerNonRecoverableThreshold=temperatureProbeLowerNonRecoverableThreshold, DellVoltageType=DellVoltageType, eventLogSeverityStatus=eventLogSeverityStatus, chassisIDExtension=chassisIDExtension, chassisResellerSystemID=chassisResellerSystemID, uSBPortStateSettings=uSBPortStateSettings, DellAmperageDiscreteReading=DellAmperageDiscreteReading, physicalMemoryLoggingChassisIndex=physicalMemoryLoggingChassisIndex, systemStateCoolingUnitStateDetails=systemStateCoolingUnitStateDetails, clusterStatus=clusterStatus, cooOperatingSystemUpgradeDate=cooOperatingSystemUpgradeDate, cooOptionsIndex=cooOptionsIndex, cooCorporateOwnerName=cooCorporateOwnerName, chassisLEDControlSettingsUnique=chassisLEDControlSettingsUnique, enhancedAlertACPowerCordNormal=enhancedAlertACPowerCordNormal, alertChassisIntrusionNormal=alertChassisIntrusionNormal, systemResourceInterruptTable=systemResourceInterruptTable, DellStatus=DellStatus, alertCoolingDeviceNormal=alertCoolingDeviceNormal, systemSlotchassisIndex=systemSlotchassisIndex, firmwareUpdateCapabilities=firmwareUpdateCapabilities, powerUnitStateCapabilities=powerUnitStateCapabilities, bSUCnIFwakeonLanControlCapabilitiesUnique=bSUCnIFwakeonLanControlCapabilitiesUnique, enhancedAlertDeviceAdd=enhancedAlertDeviceAdd, powerSupplyStateCapabilitiesUnique=powerSupplyStateCapabilitiesUnique, clusterGroup=clusterGroup, physicalMemoryConfigTableEntry=physicalMemoryConfigTableEntry, cooUserInformationUserName=cooUserInformationUserName, cooDepreciationPercentage=cooDepreciationPercentage, systemBIOSCharacteristicsExt2=systemBIOSCharacteristicsExt2, voltageProbeIndex=voltageProbeIndex, clusterStateSettings=clusterStateSettings, processorDeviceStatusReading=processorDeviceStatusReading, chassisLockPresent=chassisLockPresent, ideControlSettingsUnique=ideControlSettingsUnique, coolingDeviceReading=coolingDeviceReading, systemStateACPowerCordStatusDetails=systemStateACPowerCordStatusDetails, cooScheduleNumberchassisIndex=cooScheduleNumberchassisIndex, amperageProbeTable=amperageProbeTable, physicalMemoryArrayMappedStartingAddress=physicalMemoryArrayMappedStartingAddress, operatingSystemGroup=operatingSystemGroup, bSUCnIFwakeonLanControlStatus=bSUCnIFwakeonLanControlStatus, powerUsagePeakWattsStartDateName=powerUsagePeakWattsStartDateName, usbControlSettings=usbControlSettings, cooWarrantyDuration=cooWarrantyDuration)
mibBuilder.exportSymbols("MIB-Dell-10892", systemStateACPowerCordStateDetails=systemStateACPowerCordStateDetails, systemResourceIOPortStatus=systemResourceIOPortStatus, memoryDevicePortTableEntry=memoryDevicePortTableEntry, memoryDeviceMappedAddressStateCapabilities=memoryDeviceMappedAddressStateCapabilities, cooLeaseInformationFairMarketValue=cooLeaseInformationFairMarketValue, enhancedAlertCoolingDeviceNormal=enhancedAlertCoolingDeviceNormal, processorPortSecurityState=processorPortSecurityState, lRAGlobalchassisIndex=lRAGlobalchassisIndex, amperageProbeLowerNonCriticalThreshold=amperageProbeLowerNonCriticalThreshold, systemStateMemoryDeviceStatusDetails=systemStateMemoryDeviceStatusDetails, cooLeaseInformationIndex=cooLeaseInformationIndex, managedSystemServicesDeviceStatus=managedSystemServicesDeviceStatus, cooOutsourcingProviderServiceLevelName=cooOutsourcingProviderServiceLevelName, DellParallelPortControlSettingsUnique=DellParallelPortControlSettingsUnique, DellCPUPowerPerformanceManagementType=DellCPUPowerPerformanceManagementType, keyboardDeviceStateCapabilities=keyboardDeviceStateCapabilities, systemStateCoolingDeviceStatusDetails=systemStateCoolingDeviceStatusDetails, networkDevicePermanentMACAddress=networkDevicePermanentMACAddress, systemResourceDMAShareDisposition=systemResourceDMAShareDisposition, powerUsageChassisIndex=powerUsageChassisIndex, cooDepreciationDurationType=cooDepreciationDurationType, serialPortIndex=serialPortIndex, alertTableIndexOID=alertTableIndexOID, processorDeviceStatusStateCapabilities=processorDeviceStatusStateCapabilities, alertProcessorDeviceStatusFailure=alertProcessorDeviceStatusFailure, biosSetUpControlchassisIndex=biosSetUpControlchassisIndex, remoteFlashBIOSLastBIOSDateName=remoteFlashBIOSLastBIOSDateName, cooScheduleNumberState=cooScheduleNumberState, DellPowerCapSetting=DellPowerCapSetting, networkInterfaceControlchassisIndex=networkInterfaceControlchassisIndex, pCIDeviceConfigurationSpacechassisIndex=pCIDeviceConfigurationSpacechassisIndex, amperageProbeLowerNonRecoverableThreshold=amperageProbeLowerNonRecoverableThreshold, DellHDFaultLEDControlSettings=DellHDFaultLEDControlSettings, lraGroup=lraGroup, chassiswatchDogControlSettingsUnique=chassiswatchDogControlSettingsUnique, memoryGroup=memoryGroup, redundantMemoryUnitTableEntry=redundantMemoryUnitTableEntry, DellTPMSecurityControlCapabilities=DellTPMSecurityControlCapabilities, DellCoolingDeviceSubType=DellCoolingDeviceSubType, amperageProbeStateCapabilities=amperageProbeStateCapabilities, pointingDeviceStateSettings=pointingDeviceStateSettings, temperatureProbeUpperCriticalThreshold=temperatureProbeUpperCriticalThreshold, enhancedAlertDeviceRemove=enhancedAlertDeviceRemove, pointingPortIndexReference=pointingPortIndexReference, bSUCadministratorPasswordControlSettingsUnique=bSUCadministratorPasswordControlSettingsUnique, processorPortchassisIndex=processorPortchassisIndex, cooOperatingSystemUpgradePatchLevelName=cooOperatingSystemUpgradePatchLevelName, DellCooMonthYearDurationType=DellCooMonthYearDurationType, aCPowerSwitchIndex=aCPowerSwitchIndex, chassisServiceTagName=chassisServiceTagName, amperageProbeLowerCriticalThreshold=amperageProbeLowerCriticalThreshold, temperatureProbeTableEntry=temperatureProbeTableEntry, intrusionchassisIndex=intrusionchassisIndex, parallelPortBaseIOAddress=parallelPortBaseIOAddress, operatingSystemStatus=operatingSystemStatus, parallelPortControlModeCapabilitiesUnique=parallelPortControlModeCapabilitiesUnique, uUIDType=uUIDType, DellResourceDMABusMaster=DellResourceDMABusMaster, physicalMemoryConfigIndex=physicalMemoryConfigIndex, physicalMemoryArrayMappedStateCapabilities=physicalMemoryArrayMappedStateCapabilities, DellNMIButtonControlCapabilities=DellNMIButtonControlCapabilities, systemResourceOwnerchassisIndex=systemResourceOwnerchassisIndex, memoryDevicePortPhysicalMemoryArrayIndexReference=memoryDevicePortPhysicalMemoryArrayIndexReference, DellHDFaultLEDControlCapabilities=DellHDFaultLEDControlCapabilities, operatingSystemMemorychassisIndex=operatingSystemMemorychassisIndex, DellGenericDeviceType=DellGenericDeviceType, cooServiceContractchassisIndex=cooServiceContractchassisIndex, processorDevicechassisIndex=processorDevicechassisIndex, physicalMemoryLoggingTable=physicalMemoryLoggingTable, bmcSerialInterfaceTable=bmcSerialInterfaceTable, systemManagementSoftwareGlobalVersionName=systemManagementSoftwareGlobalVersionName, DellBootSequenceControlSettingsUnique=DellBootSequenceControlSettingsUnique, aCPowerSwitchStatus=aCPowerSwitchStatus, sdCardDeviceCardStorageSize=sdCardDeviceCardStorageSize, intrusionLocationName=intrusionLocationName, memoryDeviceMappedAddresschassisIndex=memoryDeviceMappedAddresschassisIndex, DellManagementControllerType=DellManagementControllerType, remoteFlashBIOSchassisIndex=remoteFlashBIOSchassisIndex, DellNIFwakeonLanControlCapabilitiesUnique=DellNIFwakeonLanControlCapabilitiesUnique, systemResourceMemoryStateSettings=systemResourceMemoryStateSettings, pointingPortName=pointingPortName, enhancedAlertVoltageProbeFailure=enhancedAlertVoltageProbeFailure, sCSIPortBIOSConnectorType=sCSIPortBIOSConnectorType, cooCostEventLogState=cooCostEventLogState, physicalMemoryLoggingCapabilities=physicalMemoryLoggingCapabilities, systemBIOSReleaseDateName=systemBIOSReleaseDateName, biosSettingValueType=biosSettingValueType, alertSystemSoftwareEvent=alertSystemSoftwareEvent, parallelPortControlTableEntry=parallelPortControlTableEntry, lRAActionTableTableEntry=lRAActionTableTableEntry, powerProfileTable=powerProfileTable, bSUCpointingDeviceControlSettings=bSUCpointingDeviceControlSettings, enhancedAlertBatteryNormal=enhancedAlertBatteryNormal, DellSerialPortControlSettingsUnique=DellSerialPortControlSettingsUnique, sdCardDeviceTable=sdCardDeviceTable, memoryDeviceFailureModes=memoryDeviceFailureModes, systemManagementSoftwareUpdateLevelName=systemManagementSoftwareUpdateLevelName, pCIDeviceConfigurationSpaceTableEntry=pCIDeviceConfigurationSpaceTableEntry, physicalMemoryArrayMappedTable=physicalMemoryArrayMappedTable, processorPortStateSettings=processorPortStateSettings, systemStateChassisState=systemStateChassisState, processorDeviceType=processorDeviceType, aCPowerSwitchName=aCPowerSwitchName, serialPortName=serialPortName, sdCardDeviceChassisIndex=sdCardDeviceChassisIndex, systemStateTemperatureStateDetails=systemStateTemperatureStateDetails, coolingDeviceSubType=coolingDeviceSubType, DellStateSettings=DellStateSettings, alertCoolingDeviceNonRecoverable=alertCoolingDeviceNonRecoverable, systemResourceMemoryIndex=systemResourceMemoryIndex, enhancedAlertAmperageProbeNonRecoverable=enhancedAlertAmperageProbeNonRecoverable, bmcLANInterfaceBMCIndex=bmcLANInterfaceBMCIndex, systemStateBatteryStatusCombined=systemStateBatteryStatusCombined, parallelPortControlName=parallelPortControlName, ideControlTableEntry=ideControlTableEntry, cooOutsourcingSigningAuthorityName=cooOutsourcingSigningAuthorityName, systemResourceDMAIndex=systemResourceDMAIndex, monitorPortIndex=monitorPortIndex, managedSystemServicesDeviceIndex=managedSystemServicesDeviceIndex, DellHostControlSettings=DellHostControlSettings, physicalMemoryArrayExtendedMaximumSize=physicalMemoryArrayExtendedMaximumSize, DellFanControlSettings=DellFanControlSettings, coolingUnitIndex=coolingUnitIndex, memoryDeviceIndex=memoryDeviceIndex, bSUCpointingDeviceControlName=bSUCpointingDeviceControlName, SMSFeatureFlags=SMSFeatureFlags, pointingDeviceStateCapabilities=pointingDeviceStateCapabilities, cooMaintenanceTableEntry=cooMaintenanceTableEntry, uUIDIndex=uUIDIndex, sCSIControlSettings=sCSIControlSettings, powerSupplyInputVoltage=powerSupplyInputVoltage, enhancedAlertProcessorDeviceStatusNormal=enhancedAlertProcessorDeviceStatusNormal, remoteFlashBIOSTableEntry=remoteFlashBIOSTableEntry, parallelPortControlTable=parallelPortControlTable, keyboardPortStatus=keyboardPortStatus, DellNetworkInterfaceControlCapabilitiesUnique=DellNetworkInterfaceControlCapabilitiesUnique, powerSupplyCountForRedundancy=powerSupplyCountForRedundancy, DellBMCLANIPAddressSourceType=DellBMCLANIPAddressSourceType, physicalMemoryArrayMappedchassisIndex=physicalMemoryArrayMappedchassisIndex, redundantMemoryUnitStatus=redundantMemoryUnitStatus, lRAActionTableSettingsUnique=lRAActionTableSettingsUnique, aCPowerSwitchRedundancyMode=aCPowerSwitchRedundancyMode, pointingPortBIOSConnectorType=pointingPortBIOSConnectorType, systemResourceIOPortEndingAddress=systemResourceIOPortEndingAddress, coolingDeviceLowerCriticalThreshold=coolingDeviceLowerCriticalThreshold, networkDeviceVendorName=networkDeviceVendorName, pCIDeviceConfigurationSpaceIndex=pCIDeviceConfigurationSpaceIndex, physicalMemoryArrayRedundantMemoryUnitIndexReference=physicalMemoryArrayRedundantMemoryUnitIndexReference, pointingDeviceStatus=pointingDeviceStatus, enhancedAlertRedundancyLost=enhancedAlertRedundancyLost, systemBIOSchassisIndex=systemBIOSchassisIndex, aCPowerCordTable=aCPowerCordTable, cooLeaseInformationMultipleSchedules=cooLeaseInformationMultipleSchedules, systemBIOSCharacteristics=systemBIOSCharacteristics, cooRepairTableEntry=cooRepairTableEntry, bSUCadministratorPasswordNewPasswordName=bSUCadministratorPasswordNewPasswordName, systemStateChassisStatus=systemStateChassisStatus, DellResourceMemoryFlags=DellResourceMemoryFlags, disketteControlIndex=disketteControlIndex, DellBMCSerialFlowControlType=DellBMCSerialFlowControlType, physicalMemoryArrayECCErrorNonRecoverableThreshold=physicalMemoryArrayECCErrorNonRecoverableThreshold, enhancedAlertMemoryDeviceWarning=enhancedAlertMemoryDeviceWarning, alertCurrentStatus=alertCurrentStatus, sCSIPortStateCapabilities=sCSIPortStateCapabilities, processorDeviceBrandName=processorDeviceBrandName, physicalMemoryLoggingSettings=physicalMemoryLoggingSettings, powerGroup=powerGroup, powerUsageIndex=powerUsageIndex, serialPortTable=serialPortTable, voltageProbeStateCapabilities=voltageProbeStateCapabilities, eventLogStateCapabilitiesUnique=eventLogStateCapabilitiesUnique, bSUCpointingDeviceControlStatus=bSUCpointingDeviceControlStatus, systemResourceGroup=systemResourceGroup, genericDeviceType=genericDeviceType, userSecurityIndex=userSecurityIndex, memoryDevicePortSecurityState=memoryDevicePortSecurityState, powerUsageMaxPotentialPower=powerUsageMaxPotentialPower, enhancedAlertAmperageProbeFailure=enhancedAlertAmperageProbeFailure, cooHazardousWasteCodeName=cooHazardousWasteCodeName, userSecurityGroup=userSecurityGroup, networkDeviceRDMACapabilityFlags=networkDeviceRDMACapabilityFlags, coolingDeviceLocationName=coolingDeviceLocationName, systemResourceOwnerIndex=systemResourceOwnerIndex, enhancedAlertBatteryWarning=enhancedAlertBatteryWarning, intrusionStatus=intrusionStatus, physicalMemoryCardStateSettings=physicalMemoryCardStateSettings, physicalMemoryArrayMappedPartitionWidth=physicalMemoryArrayMappedPartitionWidth, parallelPortName=parallelPortName, coolingDeviceCountForRedundancy=coolingDeviceCountForRedundancy, DellRemoteFlashBIOSStateSettingsUnique=DellRemoteFlashBIOSStateSettingsUnique, pCIDeviceConfigurationSpaceFunctionNumber=pCIDeviceConfigurationSpaceFunctionNumber, systemSlotIndex=systemSlotIndex, systemStateChassisIntrusionStatusCombined=systemStateChassisIntrusionStatusCombined, systemSlotType=systemSlotType, cooSupportInformationType=cooSupportInformationType, DellACPowerCordStateSettings=DellACPowerCordStateSettings, bSUCspeakerControlName=bSUCspeakerControlName, bSUCadministratorPasswordControlStatus=bSUCadministratorPasswordControlStatus, bSUCtpmSecurityControlCapabilities=bSUCtpmSecurityControlCapabilities, DellNetworkDeviceTOECapabilityFlags=DellNetworkDeviceTOECapabilityFlags, systemResourceInterruptchassisIndex=systemResourceInterruptchassisIndex, firmwareTable=firmwareTable, aCPowerCordaCPowerSwitchIndexReference=aCPowerCordaCPowerSwitchIndexReference, cacheDeviceStatus=cacheDeviceStatus, enhancedAlertMemoryDeviceNonRecoverable=enhancedAlertMemoryDeviceNonRecoverable, operatingSystemMemoryAvailablePageFileSize=operatingSystemMemoryAvailablePageFileSize, cooWarrantyIndex=cooWarrantyIndex, cooTroubleTicketNumberName=cooTroubleTicketNumberName, chassiswatchDogControlCapabilitiesUnique=chassiswatchDogControlCapabilitiesUnique, DellStatusProbe=DellStatusProbe, monitorPortConnectorType=monitorPortConnectorType, cooBoxSystemName=cooBoxSystemName, alertMsgID=alertMsgID, enhancedAlertChassisIntrusionDetected=enhancedAlertChassisIntrusionDetected, chassisStateCapabilities=chassisStateCapabilities, systemSlotCategory=systemSlotCategory, cooTroubleTicketTable=cooTroubleTicketTable, systemResourceInterruptType=systemResourceInterruptType, powerUsagePeakAmpsStartDateName=powerUsagePeakAmpsStartDateName, networkInterfaceControlStatus=networkInterfaceControlStatus, powerUnitStateSettings=powerUnitStateSettings, bmcLANInterfaceIPAddressSource=bmcLANInterfaceIPAddressSource, powerUsageTable=powerUsageTable, systemResourceMapType=systemResourceMapType, enhancedAlertCoolingDeviceFailure=enhancedAlertCoolingDeviceFailure, DellUnsigned8BitRange=DellUnsigned8BitRange, pCIDeviceIndex=pCIDeviceIndex, cacheDeviceLocation=cacheDeviceLocation, memoryDeviceFormFactor=memoryDeviceFormFactor, memoryDevicePartNumberName=memoryDevicePartNumberName, cooAquisitionSigningAuthorityName=cooAquisitionSigningAuthorityName, alertTemperatureProbeNormal=alertTemperatureProbeNormal, DellPowerSupplySensorState=DellPowerSupplySensorState, temperatureProbeUpperNonRecoverableThreshold=temperatureProbeUpperNonRecoverableThreshold, coolingDeviceStateSettings=coolingDeviceStateSettings, bmcLANInterfaceIPAddress=bmcLANInterfaceIPAddress, postLogRecordIndex=postLogRecordIndex, lRAActionTablechassisIndex=lRAActionTablechassisIndex, systemBIOSStateSettings=systemBIOSStateSettings, sdCardDeviceCardLicensed=sdCardDeviceCardLicensed, processorDeviceStatus=processorDeviceStatus, physicalMemoryLoggingStatus=physicalMemoryLoggingStatus, alertPowerSupplyWarning=alertPowerSupplyWarning, systemStateACPowerSwitchStateDetails=systemStateACPowerSwitchStateDetails, memoryDevicePortTable=memoryDevicePortTable, aCPowerCordStateCapabilities=aCPowerCordStateCapabilities, DellLRAThermalShutdownStateSettingsUnique=DellLRAThermalShutdownStateSettingsUnique, DellSystemSlotUsage=DellSystemSlotUsage, networkDevicePCIBusNumber=networkDevicePCIBusNumber, bSUCpointingDeviceControlCapabilities=bSUCpointingDeviceControlCapabilities, monitorPortName=monitorPortName, baseBoardPiecePartIDName=baseBoardPiecePartIDName, DellideControlCapabilitiesUnique=DellideControlCapabilitiesUnique, parallelPortTable=parallelPortTable)
mibBuilder.exportSymbols("MIB-Dell-10892", enhancedAlertThermalShutdown=enhancedAlertThermalShutdown, pCIDeviceConfigurationSpaceStateCapabilities=pCIDeviceConfigurationSpaceStateCapabilities, sCSIPortTableEntry=sCSIPortTableEntry, systemStateMemoryDeviceStatusCombined=systemStateMemoryDeviceStatusCombined, chassisPowerButtonControlSettingsUnique=chassisPowerButtonControlSettingsUnique, bSUCspeakerControlSettingsUnique=bSUCspeakerControlSettingsUnique, physicalMemoryConfigMOMCapabilities=physicalMemoryConfigMOMCapabilities, cooMaintenanceStartDateName=cooMaintenanceStartDateName, DellBMCSerialBitRateType=DellBMCSerialBitRateType, alertACPowerCordFailure=alertACPowerCordFailure, cooBoxAssetTagName=cooBoxAssetTagName, systemResourceInterruptOwnerIndexReference=systemResourceInterruptOwnerIndexReference, cooDepreciationMethodName=cooDepreciationMethodName, operatingSystemMemoryTotalPhysicalSize=operatingSystemMemoryTotalPhysicalSize, powerUsageEntityName=powerUsageEntityName, chassisInformationTableEntry=chassisInformationTableEntry, cooWarrantyTable=cooWarrantyTable, chassiswatchDogControlExpiryTime=chassiswatchDogControlExpiryTime, alertVoltageProbeNonRecoverable=alertVoltageProbeNonRecoverable, systemResourceInterruptStatus=systemResourceInterruptStatus, amperageProbeUpperNonCriticalThreshold=amperageProbeUpperNonCriticalThreshold, systemResourceMemoryStateCapabilities=systemResourceMemoryStateCapabilities, processorDeviceStatusPortIndexReference=processorDeviceStatusPortIndexReference, DellMemoryDeviceRank=DellMemoryDeviceRank, systemStateCoolingUnitStatusRedundancy=systemStateCoolingUnitStatusRedundancy, cacheDeviceTable=cacheDeviceTable, voltageProbeProbeCapabilities=voltageProbeProbeCapabilities, DellLEDControlSettings=DellLEDControlSettings, systemManagementSoftwarePreferredProtocol=systemManagementSoftwarePreferredProtocol, mIBMajorVersionNumber=mIBMajorVersionNumber, genericDeviceStatus=genericDeviceStatus, processorDeviceIndex=processorDeviceIndex, coolingDeviceStatus=coolingDeviceStatus, systemResourceIOPortchassisIndex=systemResourceIOPortchassisIndex, deviceGroup=deviceGroup, DellChassisIdentifyControlCapabilities=DellChassisIdentifyControlCapabilities, cooExtendedWarrantyStartDateName=cooExtendedWarrantyStartDateName, physicalMemoryCardPhyMemArrayIndexReference=physicalMemoryCardPhyMemArrayIndexReference, postLogTableEntry=postLogTableEntry, baseBoardExpressServiceCodeName=baseBoardExpressServiceCodeName, physicalMemoryArrayTable=physicalMemoryArrayTable, bmcIPv4URLName=bmcIPv4URLName, genericDeviceTable=genericDeviceTable, keyboardPortTable=keyboardPortTable, postLogRecord=postLogRecord, sCSIPortSecurityState=sCSIPortSecurityState, cooWarrantyDurationType=cooWarrantyDurationType, bmcLANInterfaceStatus=bmcLANInterfaceStatus, lRAActionTableTable=lRAActionTableTable, enhancedAlertSDCardDeviceWarning=enhancedAlertSDCardDeviceWarning, systemStateCoolingUnitStatusList=systemStateCoolingUnitStatusList, systemBIOSIndex=systemBIOSIndex, systemResourceIOPortShareDisposition=systemResourceIOPortShareDisposition, DellLocalResponseAgentSettingsUnique=DellLocalResponseAgentSettingsUnique, networkInterfaceControlName=networkInterfaceControlName, keyboardPortIndexReference=keyboardPortIndexReference, powerSupplyOutputWatts=powerSupplyOutputWatts, bSUCnumLockControlStatus=bSUCnumLockControlStatus, networkDeviceTeamingFlags=networkDeviceTeamingFlags, powerSupplySensorState=powerSupplySensorState, alertProcessorDeviceStatusNormal=alertProcessorDeviceStatusNormal, firmwareIndex=firmwareIndex, networkInterfaceControlIndex=networkInterfaceControlIndex, alertRedundancyLost=alertRedundancyLost, networkDeviceTOEEnabled=networkDeviceTOEEnabled, networkInterfaceControlTableEntry=networkInterfaceControlTableEntry, temperatureProbeType=temperatureProbeType, bmcLANInterfaceTableEntry=bmcLANInterfaceTableEntry, systemStateGroup=systemStateGroup, alertLogWarning=alertLogWarning, chassisFanControlCapabilitiesUnique=chassisFanControlCapabilitiesUnique, alertSDCardDeviceFailure=alertSDCardDeviceFailure, chassisIdentifyFlashControlCapabilities=chassisIdentifyFlashControlCapabilities, amperageProbeUpperNonRecoverableThreshold=amperageProbeUpperNonRecoverableThreshold, bmcSerialInterfaceBitRate=bmcSerialInterfaceBitRate, systemResourceMemoryEndingAddress=systemResourceMemoryEndingAddress, serialPortStateCapabilities=serialPortStateCapabilities, physicalMemoryArrayInUseNumberSockets=physicalMemoryArrayInUseNumberSockets, alertVoltageProbeFailure=alertVoltageProbeFailure, DellCacheDeviceLevel=DellCacheDeviceLevel, monitorPortStateCapabilities=monitorPortStateCapabilities, amperageProbeReading=amperageProbeReading, temperatureProbeIndex=temperatureProbeIndex, physicalMemoryConfigRedundantCapabilities=physicalMemoryConfigRedundantCapabilities, cooTroubleTicketchassisIndex=cooTroubleTicketchassisIndex, alertFanEnclosureInsertion=alertFanEnclosureInsertion, DellNIFwakeonLanControlSettingsUnique=DellNIFwakeonLanControlSettingsUnique, biosSettingDisplayOrder=biosSettingDisplayOrder, monitorPortTableEntry=monitorPortTableEntry, powerProfileSetting=powerProfileSetting, temperatureProbeStateCapabilities=temperatureProbeStateCapabilities, baseBoardIndex=baseBoardIndex, DellString=DellString, systemStateVoltageStatusDetails=systemStateVoltageStatusDetails, bSUCbootSequenceControlCapabilitiesUnique=bSUCbootSequenceControlCapabilitiesUnique, memoryDeviceSerialNumberName=memoryDeviceSerialNumberName, cacheDeviceIsSocketed=cacheDeviceIsSocketed, coolingUnitRedundancyStatus=coolingUnitRedundancyStatus, alertDeviceConfigError=alertDeviceConfigError, pointingPortStateCapabilities=pointingPortStateCapabilities, chassisIndexChassisInformation=chassisIndexChassisInformation, systemResourceMemoryFlags=systemResourceMemoryFlags, pCIDeviceStatus=pCIDeviceStatus, ideControlchassisIndex=ideControlchassisIndex, lRAGlobalState=lRAGlobalState, serialPortMaximumSpeed=serialPortMaximumSpeed, enhancedAlertAmperageProbeWarning=enhancedAlertAmperageProbeWarning, pCIDeviceAdapterFault=pCIDeviceAdapterFault, DellKeyboardPortConnectorType=DellKeyboardPortConnectorType, systemResourceOwnerTable=systemResourceOwnerTable, operatingSystemOperatingSystemName=operatingSystemOperatingSystemName, slotGroup=slotGroup, uSBPortchassisIndex=uSBPortchassisIndex, cooMaintenancechassisIndex=cooMaintenancechassisIndex, powerUsagePeakWattsReadingDateName=powerUsagePeakWattsReadingDateName, networkDevicePCIDeviceNumber=networkDevicePCIDeviceNumber, cooWarrantyCost=cooWarrantyCost, systemSlotStatus=systemSlotStatus, enhancedAlertDeviceConfigError=enhancedAlertDeviceConfigError, pCIDeviceConfigurationSpaceDeviceNumber=pCIDeviceConfigurationSpaceDeviceNumber, biosSettingTable=biosSettingTable, keyboardDeviceStatus=keyboardDeviceStatus, operatingSystemMemoryStateCapabilities=operatingSystemMemoryStateCapabilities, coolingDeviceUpperNonRecoverableThreshold=coolingDeviceUpperNonRecoverableThreshold, DellBIOSPasswordControlCapabilitiesUnique=DellBIOSPasswordControlCapabilitiesUnique, disketteControlStatus=disketteControlStatus, bSUCprocessorSerialNumberControlSettings=bSUCprocessorSerialNumberControlSettings, cooBoxCPUSerialNumberName=cooBoxCPUSerialNumberName, alertThermalShutdown=alertThermalShutdown, voltageProbeUpperNonCriticalThreshold=voltageProbeUpperNonCriticalThreshold, bmcGroup=bmcGroup, processorDeviceCoreCount=processorDeviceCoreCount, memoryDeviceTableEntry=memoryDeviceTableEntry, bmcTableEntry=bmcTableEntry, memoryDeviceSet=memoryDeviceSet, postLogStateCapabilitiesUnique=postLogStateCapabilitiesUnique, enhancedAlertSystemSoftwareEvent=enhancedAlertSystemSoftwareEvent, biosSettingName=biosSettingName, sdCardUnitName=sdCardUnitName, mIBMinorVersionNumber=mIBMinorVersionNumber, cooTroubleTicketState=cooTroubleTicketState, memoryDeviceAssetTagName=memoryDeviceAssetTagName, usbControlTable=usbControlTable, bmcSerialInterfaceChassisIndex=bmcSerialInterfaceChassisIndex, DellFanPowerPerformanceManagementType=DellFanPowerPerformanceManagementType, DellTemperatureProbeType=DellTemperatureProbeType, uSBPortSecurityState=uSBPortSecurityState, chassisResellerProductName=chassisResellerProductName, networkDeviceConnectionStatus=networkDeviceConnectionStatus, memoryDeviceMappedAddressStartingAddress=memoryDeviceMappedAddressStartingAddress, serialPortTableEntry=serialPortTableEntry, managedSystemServicesDeviceStoragePresent=managedSystemServicesDeviceStoragePresent, parallelPortDMASupport=parallelPortDMASupport, sCSIPortName=sCSIPortName, powerProfileTableEntry=powerProfileTableEntry, DellNetworkDeviceRDMACapabilityFlags=DellNetworkDeviceRDMACapabilityFlags, enhancedAlertPowerSupplyNormal=enhancedAlertPowerSupplyNormal, biosSettingPossibleValues=biosSettingPossibleValues, powerUsageStatus=powerUsageStatus, cacheDeviceWritePolicy=cacheDeviceWritePolicy, alertBatteryNormal=alertBatteryNormal, cooSupportInformationTableEntry=cooSupportInformationTableEntry, DellCacheDeviceECCType=DellCacheDeviceECCType, userSecurityRequestName=userSecurityRequestName, DellMemoryDeviceFailureModes=DellMemoryDeviceFailureModes, powerSupplyRatedInputWattage=powerSupplyRatedInputWattage, systemStateTemperatureStatusDetails=systemStateTemperatureStatusDetails, redundantMemoryUnitStateSettings=redundantMemoryUnitStateSettings, bSUCprocessorSerialNumberControlCapabilities=bSUCprocessorSerialNumberControlCapabilities, parallelPortchassisIndex=parallelPortchassisIndex, DellProcessorPortConnectorType=DellProcessorPortConnectorType, systemResourceMemoryStartingAddress=systemResourceMemoryStartingAddress, biosSetUpControlGroup=biosSetUpControlGroup, systemStatePowerUnitStatusList=systemStatePowerUnitStatusList, DellWatchControlSettings=DellWatchControlSettings, keyboardPortBIOSConnectorType=keyboardPortBIOSConnectorType, cooCostEventLogTableEntry=cooCostEventLogTableEntry, enhancedAlertLogNormal=enhancedAlertLogNormal, systemStatePowerUnitStatusDetails=systemStatePowerUnitStatusDetails, aCPowerSwitchTable=aCPowerSwitchTable, DellPointingPortConnectorType=DellPointingPortConnectorType, DellSigned32BitRange=DellSigned32BitRange, enhancedAlertBatteryFailure=enhancedAlertBatteryFailure, chassisSystemBootDateName=chassisSystemBootDateName, managedSystemServicesDeviceTableEntry=managedSystemServicesDeviceTableEntry, systemStateSDCardUnitStatusCombined=systemStateSDCardUnitStatusCombined, systemResourceIOPortOwnerIndexReference=systemResourceIOPortOwnerIndexReference, aCPowerCordStatus=aCPowerCordStatus, redundantMemoryUnitTable=redundantMemoryUnitTable, alertTemperatureProbeNonRecoverable=alertTemperatureProbeNonRecoverable, chassisStateSettings=chassisStateSettings, bSUCuserPasswordControlCapabilitiesUnique=bSUCuserPasswordControlCapabilitiesUnique, cooScheduleNumberIndex=cooScheduleNumberIndex, bmcLANInterfaceSubnetMaskAddress=bmcLANInterfaceSubnetMaskAddress, powerSupplyTableEntry=powerSupplyTableEntry, sCSIControlTable=sCSIControlTable, cooOptionsState=cooOptionsState, chassishostControlSettingsUnique=chassishostControlSettingsUnique, systemBIOSCharacteristicsExt1=systemBIOSCharacteristicsExt1, pCIDeviceSpeed=pCIDeviceSpeed, processorDeviceStatusLocationName=processorDeviceStatusLocationName, systemStateCoolingDeviceStatusCombined=systemStateCoolingDeviceStatusCombined, cooServiceContractTable=cooServiceContractTable, enhancedAlertCoolingDeviceNonRecoverable=enhancedAlertCoolingDeviceNonRecoverable, cacheDeviceExternalSocketName=cacheDeviceExternalSocketName, keyboardDeviceLayoutName=keyboardDeviceLayoutName, coolingDeviceStateCapabilities=coolingDeviceStateCapabilities, physicalMemoryArrayStateSettings=physicalMemoryArrayStateSettings, chassisLEDControlCapabilitiesUnique=chassisLEDControlCapabilitiesUnique, pointingDeviceNumberofButtons=pointingDeviceNumberofButtons, biosSetUpControlTable=biosSetUpControlTable, genericDeviceIndex=genericDeviceIndex, bmcType=bmcType, DellLogFormat=DellLogFormat, serialPortControlSettingsUnique=serialPortControlSettingsUnique, parallelPortConnectorPinOut=parallelPortConnectorPinOut, userSecuritychassisIndex=userSecuritychassisIndex, processorDeviceVoltage=processorDeviceVoltage, systemResourceIOPortTable=systemResourceIOPortTable, sCSIPortchassisIndex=sCSIPortchassisIndex, DellCooOwnershipCodes=DellCooOwnershipCodes, pointingPortSecurityState=pointingPortSecurityState, processorPortStateCapabilities=processorPortStateCapabilities, DellBaseBoardType=DellBaseBoardType, sCSIPortConnectorType=sCSIPortConnectorType, networkDeviceDescriptionName=networkDeviceDescriptionName, chassisSystemRevisionName=chassisSystemRevisionName, DellCacheDeviceStatusState=DellCacheDeviceStatusState, SMSSupportedTypes=SMSSupportedTypes, bmcSerialInterfaceTableEntry=bmcSerialInterfaceTableEntry, DellSpeakerControlCapabilitiesUnique=DellSpeakerControlCapabilitiesUnique, voltageProbeUpperNonRecoverableThreshold=voltageProbeUpperNonRecoverableThreshold, chassisHDFaultClearControlSettings=chassisHDFaultClearControlSettings, DellDisketteControlSettingsUnique=DellDisketteControlSettingsUnique, systemStateGlobalSystemStatus=systemStateGlobalSystemStatus, cacheDeviceLevel=cacheDeviceLevel, networkDeviceRDMAEnabled=networkDeviceRDMAEnabled, baseBoardStatus=baseBoardStatus, networkDeviceCapabilities=networkDeviceCapabilities, alertMessage=alertMessage, parallelPortControlIndex=parallelPortControlIndex, systemStateCoolingUnitStatusCombined=systemStateCoolingUnitStatusCombined, bmcLANInterfaceIndex=bmcLANInterfaceIndex, systemStatePowerSupplyStatusCombined=systemStatePowerSupplyStatusCombined, physicalMemoryArrayStatus=physicalMemoryArrayStatus, keyboardPortStateCapabilities=keyboardPortStateCapabilities, DellBIOSPasswordControlSettingsUnique=DellBIOSPasswordControlSettingsUnique, clusterName=clusterName, systemStateProcessorDeviceStatusCombined=systemStateProcessorDeviceStatusCombined, coolingDeviceTableEntry=coolingDeviceTableEntry, networkDeviceiSCSICapabilityFlags=networkDeviceiSCSICapabilityFlags, systemResourceDMAStateCapabilities=systemResourceDMAStateCapabilities, amperageProbeDiscreteReading=amperageProbeDiscreteReading, pCIDeviceStateCapabilities=pCIDeviceStateCapabilities)
mibBuilder.exportSymbols("MIB-Dell-10892", pointingPortStateSettings=pointingPortStateSettings, networkInterfaceControlTable=networkInterfaceControlTable, systemManagementSoftwareLanguageName=systemManagementSoftwareLanguageName, systemResourceOwnerStatus=systemResourceOwnerStatus, alertAmperageProbeFailure=alertAmperageProbeFailure, aCPowerSwitchRedundancyStatus=aCPowerSwitchRedundancyStatus, operatingSystemMemoryTableEntry=operatingSystemMemoryTableEntry, cooOptionsTable=cooOptionsTable, alertDeviceAdd=alertDeviceAdd, DellParallelPortConnectorPinout=DellParallelPortConnectorPinout, sdCardUnitIndex=sdCardUnitIndex)
