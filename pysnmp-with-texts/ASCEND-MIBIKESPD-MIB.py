#
# PySNMP MIB module ASCEND-MIBIKESPD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBIKESPD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, Bits, TimeTicks, IpAddress, iso, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Gauge32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Bits", "TimeTicks", "IpAddress", "iso", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Gauge32", "Counter64", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibmibProfIkeSpd = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 166))
mibmibProfIkeSpdTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 166, 1), )
if mibBuilder.loadTexts: mibmibProfIkeSpdTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibmibProfIkeSpdTable.setDescription('A list of mibmibProfIkeSpd profile entries.')
mibmibProfIkeSpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 166, 1, 1), ).setIndexNames((0, "ASCEND-MIBIKESPD-MIB", "mibProfIkeSpd-Index-o"))
if mibBuilder.loadTexts: mibmibProfIkeSpdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibmibProfIkeSpdEntry.setDescription('A mibmibProfIkeSpd entry containing objects that maps to the parameters of mibmibProfIkeSpd profile.')
mibProfIkeSpd_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 1, 1, 1), Integer32()).setLabel("mibProfIkeSpd-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: mibProfIkeSpd_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_Index_o.setDescription('')
mibProfIkeSpd_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("mibProfIkeSpd-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibProfIkeSpd_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_Action_o.setDescription('')
mibmibProfIkeSpd_IkePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 166, 2), ).setLabel("mibmibProfIkeSpd-IkePolicyTable")
if mibBuilder.loadTexts: mibmibProfIkeSpd_IkePolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibmibProfIkeSpd_IkePolicyTable.setDescription('A list of mibmibProfIkeSpd__ike_policy profile entries.')
mibmibProfIkeSpd_IkePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 166, 2, 1), ).setLabel("mibmibProfIkeSpd-IkePolicyEntry").setIndexNames((0, "ASCEND-MIBIKESPD-MIB", "mibProfIkeSpd-IkePolicy-Index-o"), (0, "ASCEND-MIBIKESPD-MIB", "mibProfIkeSpd-IkePolicy-Index1-o"))
if mibBuilder.loadTexts: mibmibProfIkeSpd_IkePolicyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibmibProfIkeSpd_IkePolicyEntry.setDescription('A mibmibProfIkeSpd__ike_policy entry containing objects that maps to the parameters of mibmibProfIkeSpd__ike_policy profile.')
mibProfIkeSpd_IkePolicy_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 2, 1, 1), Integer32()).setLabel("mibProfIkeSpd-IkePolicy-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_Index_o.setDescription('')
mibProfIkeSpd_IkePolicy_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 2, 1, 2), Integer32()).setLabel("mibProfIkeSpd-IkePolicy-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_Index1_o.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_Index1_o.setDescription('')
mibProfIkeSpd_IkePolicy_ValidEntry = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("mibProfIkeSpd-IkePolicy-ValidEntry").setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_ValidEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_ValidEntry.setDescription('This policy can be disabled by setting this field to no.')
mibProfIkeSpd_IkePolicy_Address_IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 2, 1, 4), IpAddress()).setLabel("mibProfIkeSpd-IkePolicy-Address-IpAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_Address_IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_Address_IpAddress.setDescription('An IP address.')
mibProfIkeSpd_IkePolicy_Address_Netmask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 2, 1, 5), IpAddress()).setLabel("mibProfIkeSpd-IkePolicy-Address-Netmask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_Address_Netmask.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_Address_Netmask.setDescription('The netmask')
mibProfIkeSpd_IkePolicy_IkeProposals = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 2, 1, 6), DisplayString()).setLabel("mibProfIkeSpd-IkePolicy-IkeProposals").setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_IkeProposals.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_IkeProposals.setDescription('The name of the IKE Protection Suite profile to be used for IKE SAs negotiation with peers encompassed by this policy. This may be a unique proposal or the first element of a list of proposals.')
mibProfIkeSpd_IkePolicy_PresharedKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 166, 2, 1, 7), DisplayString()).setLabel("mibProfIkeSpd-IkePolicy-PresharedKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_PresharedKey.setStatus('mandatory')
if mibBuilder.loadTexts: mibProfIkeSpd_IkePolicy_PresharedKey.setDescription('Preshared Key for IKE authentication.')
mibBuilder.exportSymbols("ASCEND-MIBIKESPD-MIB", mibProfIkeSpd_Index_o=mibProfIkeSpd_Index_o, mibProfIkeSpd_Action_o=mibProfIkeSpd_Action_o, mibProfIkeSpd_IkePolicy_Address_IpAddress=mibProfIkeSpd_IkePolicy_Address_IpAddress, mibProfIkeSpd_IkePolicy_ValidEntry=mibProfIkeSpd_IkePolicy_ValidEntry, DisplayString=DisplayString, mibmibProfIkeSpd=mibmibProfIkeSpd, mibmibProfIkeSpdEntry=mibmibProfIkeSpdEntry, mibmibProfIkeSpd_IkePolicyTable=mibmibProfIkeSpd_IkePolicyTable, mibProfIkeSpd_IkePolicy_Index1_o=mibProfIkeSpd_IkePolicy_Index1_o, mibmibProfIkeSpd_IkePolicyEntry=mibmibProfIkeSpd_IkePolicyEntry, mibProfIkeSpd_IkePolicy_Index_o=mibProfIkeSpd_IkePolicy_Index_o, mibProfIkeSpd_IkePolicy_IkeProposals=mibProfIkeSpd_IkePolicy_IkeProposals, mibmibProfIkeSpdTable=mibmibProfIkeSpdTable, mibProfIkeSpd_IkePolicy_PresharedKey=mibProfIkeSpd_IkePolicy_PresharedKey, mibProfIkeSpd_IkePolicy_Address_Netmask=mibProfIkeSpd_IkePolicy_Address_Netmask)
