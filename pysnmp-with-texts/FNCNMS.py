#
# PySNMP MIB module FNCNMS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FNCNMS
# Produced by pysmi-0.3.4 at Wed May  1 13:14:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
netsmart, = mibBuilder.importSymbols("FNC-COMMON-SMI", "netsmart")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
system, = mibBuilder.importSymbols("SNMPv2-MIB", "system")
Unsigned32, NotificationType, MibIdentifier, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, IpAddress, Gauge32, ModuleIdentity, Counter32, Counter64, enterprises, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "MibIdentifier", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "IpAddress", "Gauge32", "ModuleIdentity", "Counter32", "Counter64", "enterprises", "ObjectIdentity")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
netsmart1500 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3861, 4, 1500))
netsmart1500.setRevisions(('2012-02-06 16:00', '2011-06-16 16:00', '2003-08-02 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netsmart1500.setRevisionsDescriptions(('Added keep alive message event', 'Added following NETypes to neType object FLASHWAVE 9500, FLASHWAVE CDS, FLASHWAVE 9410, FLASHWAVE 9420, FLASHWAVE 7120, FLASHWAVE 7420', 'Initial Version.',))
if mibBuilder.loadTexts: netsmart1500.setLastUpdated('201202061600Z')
if mibBuilder.loadTexts: netsmart1500.setOrganization('Fujitsu Network Communications Inc.')
if mibBuilder.loadTexts: netsmart1500.setContactInfo('Fujitsu Network Communications Tel: I-800-USE-FTAC i.e (800) 873 3822')
if mibBuilder.loadTexts: netsmart1500.setDescription(" This MIB represents the interface definition between a third party SNMP Manager and FNC's NETSMART Management System. The functions provided in this MIB are: - Network Element (NE) Target IDentifier (TID) Discovery - Dynamic Alarm reporting - Alarm Discovery and Reconciliation ")
nmsNEMgmtMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1))
nmsNEMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 1))
nmsNEAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2))
nmsNotificationTrapBase = MibIdentifier((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 0))
class NMSSeverity(TextualConvention, Integer32):
    description = ' Severity represents the severity of the Notification. It is assigned by the NE. Cleared indicates that this notification clears a previously sent trap with a severity of critical,major,minor or info. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("cleared", 1), ("info", 2), ("minor", 3), ("major", 4), ("critical", 5))

class NMSCondDirection(TextualConvention, Integer32):
    description = 'Whether the fault is on the transmit side or on the receive side. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("na", 1), ("transmit", 2), ("receive", 3))

class NMSCondLocation(TextualConvention, Integer32):
    description = ' Location indicates whether the failure occurred on the nearEnd of this NE or on the farEnd. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("na", 1), ("nearEnd", 2), ("farEnd", 3))

class NMSServiceEffect(TextualConvention, Integer32):
    description = 'Service Affecting indicates whether the alarm affects traffic or not. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("na", 1), ("serviceAffecting", 2), ("nonServiceAffecting", 3))

class NMSTrapSeqNumber(TextualConvention, Integer32):
    description = ' A value in the range 1-99999 is reported. The value 0 is never reported but can only be obtained through a GET.A value of 0 indicates that agent has not forwarded any notifications since it booted up. When the value of this field reaches 99999, the number resets and the subsequent notification is sent with a number 1. This value is not unique per NE.It is a global number used across all NEs. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 99999)

class NMSMgdNE(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 20)

class NMSNEConnState(TextualConvention, Integer32):
    description = ' Describes the state of connection between an NE and agent.Connected indicates that the agent is connected to the NE. NotConnected indicates that there is no communication between NE and agent. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("connected", 1), ("notConnected", 2))

nmsNETable = MibTable((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 1, 1), )
if mibBuilder.loadTexts: nmsNETable.setStatus('current')
if mibBuilder.loadTexts: nmsNETable.setDescription(' This Table contains a row for each managed NE in NETSMART. The row contains: - the TID (20 characters max) of each NE. - the NE Type ( A string representing the FNC Product Name) . - the NE Connection State. @see NMSNEConnState ')
nmsNEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 1, 1, 1), ).setIndexNames((1, "FNCNMS", "neTID"))
if mibBuilder.loadTexts: nmsNEEntry.setStatus('current')
if mibBuilder.loadTexts: nmsNEEntry.setDescription(' Provides information about a managed NE in NETSMART. ')
neTID = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 1, 1, 1, 1), NMSMgdNE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neTID.setStatus('current')
if mibBuilder.loadTexts: neTID.setDescription('TID of the NE. @see NMSMgdNE. ')
neType = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neType.setStatus('current')
if mibBuilder.loadTexts: neType.setDescription(' Describes the type of Fujitsu NETWORK Element Current Types are FLM6, FACTR, FLM150, FLM600, FLM2400, FLX 600A, FLX 2500A, FLASH 192, FLASH 10G, FLASHWAVE 4010, FLASHWAVE 4020, FLASHWAVE 4100, FLASHWAVE 4300, FLASHWAVE 4500, FLASHWAVE 4560, FLASHWAVE 7200, FLASHWAVE 7300, FLASHWAVE 7500, FLASHWAVE 7700, FLASHWAVE 9500, FLASHWAVE CDS, FLASHWAVE 9410, FLASHWAVE 9420, FLASHWAVE 7120, FLASHWAVE 7420, Fujitsu NE, Generic NE, Unknown. -Unknown NEType represents NEs whose type is not determined yet. -Fujitsu NE NEType represents the NEs which are minimally (only fault management) supported by the agent. -Generic NE NEType represents non Fujitsu NEs whose fault management functionality is supported by the agent. ')
neConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 1, 1, 1, 3), NMSNEConnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neConnState.setStatus('current')
if mibBuilder.loadTexts: neConnState.setDescription(' Describes connection state between agent and NE. @see NMSNEConnState. A nmsNEStateChangeEvent NOTIFICATION generated whenever there is a change in neConnState. Also see neOperation and nmsNEOperationEvent for the default state when an NE is added. ')
nmsNEAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1), )
if mibBuilder.loadTexts: nmsNEAlarmTable.setStatus('current')
if mibBuilder.loadTexts: nmsNEAlarmTable.setDescription(' This table contains a NE TID and a List of nmsNEAlarmList for this TID. ')
nmsNEAlarmListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1), ).setIndexNames((0, "FNCNMS", "alarmTID"), (0, "FNCNMS", "alarmIndex"))
if mibBuilder.loadTexts: nmsNEAlarmListEntry.setStatus('current')
if mibBuilder.loadTexts: nmsNEAlarmListEntry.setDescription(' A row in the table indicating the specific Alarm for the given TID. ')
alarmTID = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 1), NMSMgdNE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTID.setStatus('current')
if mibBuilder.loadTexts: alarmTID.setDescription(' NE TID against which this Alarm is being raised. @see NMSMgdNE. ')
alarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIndex.setStatus('current')
if mibBuilder.loadTexts: alarmIndex.setDescription('The instance of the alarm for this NE. This variable is used to identify a unique row for each alarm. In the nmsNEAlarmTable a sequence of alarms will look like: TID alarmIndex Other Alarm Data ======================================================== TID1 1 1-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID1 2 2-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID1 3 3-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID2 1 1-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID2 2 1-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID3 1 2-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID3 2 3-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID3 3 4-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID3 4 5-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID3 5 6-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 TID4 1 1-1 oc3 CR LOS SA RCV Loss Of Signal neTimeStamp1 nmsTimeStamp2 i.e. For each TID alarmIndex starts with 1 and is incremented by 1. This is to help retrieve alarms on an NE basis. ')
alarmEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEntityId.setStatus('current')
if mibBuilder.loadTexts: alarmEntityId.setDescription('Describes the AID of the entity against which this notification is being sent. ')
alarmEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEntityType.setStatus('current')
if mibBuilder.loadTexts: alarmEntityType.setDescription(' Describes the kind the entity against which this notification is being sent . The combination of (alarmEntity, alarmEntityType) represents a addressable entity on the NE. Examples of kind of entities are EQPT,OC3,STS1,COM,ENV etc. ')
alarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 5), NMSSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmSeverity.setDescription('Describes the severity of the notification being sent. @see NMSSeverity ')
alarmCondType = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCondType.setStatus('current')
if mibBuilder.loadTexts: alarmCondType.setDescription(' Describes the condition type i.e RMVD or LOS etc. ')
alarmServEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 7), NMSServiceEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmServEffect.setStatus('current')
if mibBuilder.loadTexts: alarmServEffect.setDescription(' Describes whether the notification is serviceAffecting or not. @see NMSServiceEffect. ')
alarmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 8), NMSCondLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLocation.setStatus('current')
if mibBuilder.loadTexts: alarmLocation.setDescription(' Describes if the location is applicable and if applicable the appropriate location. @see NMSCondLocation. ')
alarmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 9), NMSCondDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDirection.setStatus('current')
if mibBuilder.loadTexts: alarmDirection.setDescription(' Describes if the direction is a applicable and if applicable the appropriate direction. @see NMSCondLocation. ')
alarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDescription.setStatus('current')
if mibBuilder.loadTexts: alarmDescription.setDescription(' Gives a textual description of the condition. ')
neAlarmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neAlarmTimeStamp.setStatus('current')
if mibBuilder.loadTexts: neAlarmTimeStamp.setDescription('Time stamp at which the NE generated the fault. The correctness of the value depends whether this fault is reported to the agent or agent retrieved this information from NE. For faults reported from the NE this value is correct where as for faults retrieved the timestamp indicates the time on NE at which this fault was retrieved. ')
nmsAlarmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsAlarmTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nmsAlarmTimeStamp.setDescription(' Time at which the NMS received the fault. ')
nmsLastMsgNumber = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 2), NMSTrapSeqNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsLastMsgNumber.setStatus('current')
if mibBuilder.loadTexts: nmsLastMsgNumber.setDescription(' This variable describes the value of the last NMSTrapIndex reported by the agent in the notifications. @see NMSTrapSeqNumber. ')
nmsTrapHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 3), )
if mibBuilder.loadTexts: nmsTrapHistoryTable.setStatus('current')
if mibBuilder.loadTexts: nmsTrapHistoryTable.setDescription(' Thus table contains a sequence of trap seq number and the corresponding neTID.A Management system upon detecting that it has not received a particular sequence number, can determine the NE against which the sequence number was used and do a alarm resynchornization for that NE. ')
nmsTrapHistoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 3, 1), ).setIndexNames((0, "FNCNMS", "nmsTrapHistoryIndex"))
if mibBuilder.loadTexts: nmsTrapHistoryTableEntry.setStatus('current')
if mibBuilder.loadTexts: nmsTrapHistoryTableEntry.setDescription(' A row indicating the trap sequence number and NE TID which caused this event to be sent. ')
nmsTrapHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 3, 1, 1), NMSTrapSeqNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsTrapHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: nmsTrapHistoryIndex.setDescription(' A Sequence Number that was previously sent. @see NMSTrapSeqNumber. ')
nmsTrapHistoryTID = MibTableColumn((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 3, 1, 2), NMSMgdNE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsTrapHistoryTID.setStatus('current')
if mibBuilder.loadTexts: nmsTrapHistoryTID.setDescription(' The tid for which the sequence entry was sent. @see NMSMGgNE. ')
nmsNotificationBase = MibIdentifier((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4))
notifTID = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 1), NMSMgdNE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notifTID.setStatus('current')
if mibBuilder.loadTexts: notifTID.setDescription(' NE TID against which this notification is being sent. @see NMSMgdNE. ')
neEntityID = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neEntityID.setStatus('current')
if mibBuilder.loadTexts: neEntityID.setDescription(' Describes the AID of the entity against which this notification is being sent. ')
neEntityType = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neEntityType.setStatus('current')
if mibBuilder.loadTexts: neEntityType.setDescription(' Describes the type the entity against which this notification is being sent . The combination (neEntityID,neEntityType) represents a addressable entity on the network element. Examples of neEntityType would be EQPT,OC3,COM,STS1,ENV etc. ')
neSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 4), NMSSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSeverity.setStatus('current')
if mibBuilder.loadTexts: neSeverity.setDescription(' Describes the severity of the notification being sent. @see NMSSeverity. ')
neCondType = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neCondType.setStatus('current')
if mibBuilder.loadTexts: neCondType.setDescription(' Describes the condition type i.e RMVD or LOS etc. ')
neServEffect = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 6), NMSServiceEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neServEffect.setStatus('current')
if mibBuilder.loadTexts: neServEffect.setDescription(' Describes whether the notification is ServiceAffecting or not. @see NMSServiceEffect. ')
neLocation = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 7), NMSCondLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neLocation.setStatus('current')
if mibBuilder.loadTexts: neLocation.setDescription(' Describes if the location is applicable for this notification, if it is applicable describes the location. @see NMSCondLocation. ')
neDirection = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 8), NMSCondDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDirection.setStatus('current')
if mibBuilder.loadTexts: neDirection.setDescription('Describes if the direction is a applicable and if it is applicable the direction. @see NMSCondDirection. ')
neCondDescription = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neCondDescription.setStatus('current')
if mibBuilder.loadTexts: neCondDescription.setDescription(' Textual Description of the notification. ')
nmsNotifTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNotifTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nmsNotifTimeStamp.setDescription(' Time when NMS received this event. ')
neNotifTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNotifTimeStamp.setStatus('current')
if mibBuilder.loadTexts: neNotifTimeStamp.setDescription(' Time when NE raised this event. ')
nmsTrapSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 12), NMSTrapSeqNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsTrapSeqNumber.setStatus('current')
if mibBuilder.loadTexts: nmsTrapSeqNumber.setDescription(' @See NMSTrapSeqNumber. ')
nmsNEConnState = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 13), NMSNEConnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNEConnState.setStatus('current')
if mibBuilder.loadTexts: nmsNEConnState.setDescription(' Describes the state of connection between an NE and NMS. ')
neOperation = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neOperation.setStatus('current')
if mibBuilder.loadTexts: neOperation.setDescription(' Indicates if a new NE is added to NETSMART or if it is removed. Addition always implies a nmsNEConnState with value notConnected and NEType of Unknown. ')
notifServer = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notifServer.setStatus('current')
if mibBuilder.loadTexts: notifServer.setDescription(' Describes the Server which this notification is being sent. ')
nmsKeepAliveState = MibScalar((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("alive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsKeepAliveState.setStatus('current')
if mibBuilder.loadTexts: nmsKeepAliveState.setDescription(' Describes the keep alive state which this notification is being sent. ')
nmsNEEvent = NotificationType((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 0, 1)).setObjects(("FNCNMS", "notifTID"), ("FNCNMS", "neEntityID"), ("FNCNMS", "neEntityType"), ("FNCNMS", "neSeverity"), ("FNCNMS", "neCondType"), ("FNCNMS", "neServEffect"), ("FNCNMS", "neLocation"), ("FNCNMS", "neDirection"), ("FNCNMS", "neCondDescription"), ("FNCNMS", "nmsNotifTimeStamp"), ("FNCNMS", "neNotifTimeStamp"), ("FNCNMS", "nmsTrapSeqNumber"))
if mibBuilder.loadTexts: nmsNEEvent.setStatus('current')
if mibBuilder.loadTexts: nmsNEEvent.setDescription(' The agent generates this notification when a rept alarm or rept evt is generated. ')
nmsNEStateChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 0, 2)).setObjects(("FNCNMS", "notifTID"), ("FNCNMS", "nmsNEConnState"), ("FNCNMS", "nmsTrapSeqNumber"))
if mibBuilder.loadTexts: nmsNEStateChangeEvent.setStatus('current')
if mibBuilder.loadTexts: nmsNEStateChangeEvent.setDescription(' The agent generates this notification when a NMS changes its connection state to the NE. @see NMSConnState. ')
nmsNEOperationEvent = NotificationType((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 0, 3)).setObjects(("FNCNMS", "notifTID"), ("FNCNMS", "neOperation"), ("FNCNMS", "nmsTrapSeqNumber"))
if mibBuilder.loadTexts: nmsNEOperationEvent.setStatus('current')
if mibBuilder.loadTexts: nmsNEOperationEvent.setDescription(' The agent generates this notification when a NE is created or deleted. @see neOperation. ')
nmsKeepAliveEvent = NotificationType((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 2, 0, 4)).setObjects(("FNCNMS", "notifServer"), ("FNCNMS", "nmsKeepAliveState"))
if mibBuilder.loadTexts: nmsKeepAliveEvent.setStatus('current')
if mibBuilder.loadTexts: nmsKeepAliveEvent.setDescription(' The agent generates this notification when reaching the keep alive trap interval. @see nmsKeepAliveState. ')
fncNMSMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3))
fncNMSMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 1))
fncNMSMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 2))
fncNMSMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 1, 1)).setObjects(("SNMPv2-MIB", "system"), ("FNCNMS", "nmsNEMgmtGroup"), ("FNCNMS", "nmsNEAlarmGroup"), ("FNCNMS", "nmsNETrapGroup"), ("FNCNMS", "nmsNETrapObjects"), ("FNCNMS", "nmsServerTrapGroup"), ("FNCNMS", "nmsServerTrapObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fncNMSMIBCompliance = fncNMSMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: fncNMSMIBCompliance.setDescription(' Module Compliancy ')
nmsNEMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 2, 1)).setObjects(("FNCNMS", "neTID"), ("FNCNMS", "neType"), ("FNCNMS", "neConnState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nmsNEMgmtGroup = nmsNEMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: nmsNEMgmtGroup.setDescription(' This Group defines objects which are common to all NE Table related retrievals ')
nmsNEAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 2, 2)).setObjects(("FNCNMS", "alarmTID"), ("FNCNMS", "alarmIndex"), ("FNCNMS", "alarmEntityId"), ("FNCNMS", "alarmEntityType"), ("FNCNMS", "alarmSeverity"), ("FNCNMS", "alarmCondType"), ("FNCNMS", "alarmServEffect"), ("FNCNMS", "alarmLocation"), ("FNCNMS", "alarmDirection"), ("FNCNMS", "alarmDescription"), ("FNCNMS", "neAlarmTimeStamp"), ("FNCNMS", "nmsAlarmTimeStamp"), ("FNCNMS", "nmsLastMsgNumber"), ("FNCNMS", "nmsTrapHistoryIndex"), ("FNCNMS", "nmsTrapHistoryTID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nmsNEAlarmGroup = nmsNEAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: nmsNEAlarmGroup.setDescription(' This Group defines objects which are common to all Alarm Table related retrievals ')
nmsNETrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 2, 3)).setObjects(("FNCNMS", "nmsNEEvent"), ("FNCNMS", "nmsNEStateChangeEvent"), ("FNCNMS", "nmsNEOperationEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nmsNETrapGroup = nmsNETrapGroup.setStatus('current')
if mibBuilder.loadTexts: nmsNETrapGroup.setDescription(' This Group defines objects which are used part of notifications ')
nmsNETrapObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 2, 4)).setObjects(("FNCNMS", "notifTID"), ("FNCNMS", "neEntityID"), ("FNCNMS", "neEntityType"), ("FNCNMS", "neSeverity"), ("FNCNMS", "neCondType"), ("FNCNMS", "neServEffect"), ("FNCNMS", "neLocation"), ("FNCNMS", "neDirection"), ("FNCNMS", "neCondDescription"), ("FNCNMS", "nmsNotifTimeStamp"), ("FNCNMS", "neNotifTimeStamp"), ("FNCNMS", "nmsTrapSeqNumber"), ("FNCNMS", "nmsNEConnState"), ("FNCNMS", "neOperation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nmsNETrapObjects = nmsNETrapObjects.setStatus('current')
if mibBuilder.loadTexts: nmsNETrapObjects.setDescription(' This Group defines objects reported as part of notifications. ')
nmsServerTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 2, 5)).setObjects(("FNCNMS", "nmsKeepAliveEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nmsServerTrapGroup = nmsServerTrapGroup.setStatus('current')
if mibBuilder.loadTexts: nmsServerTrapGroup.setDescription(' This Group defines objects which are used part of notifications ')
nmsServerTrapObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 3861, 4, 1500, 1, 3, 2, 6)).setObjects(("FNCNMS", "notifServer"), ("FNCNMS", "nmsKeepAliveState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nmsServerTrapObjects = nmsServerTrapObjects.setStatus('current')
if mibBuilder.loadTexts: nmsServerTrapObjects.setDescription(' This Group defines objects reported as part of notifications. ')
mibBuilder.exportSymbols("FNCNMS", nmsTrapHistoryTableEntry=nmsTrapHistoryTableEntry, nmsNEAlarm=nmsNEAlarm, alarmIndex=alarmIndex, NMSMgdNE=NMSMgdNE, alarmEntityType=alarmEntityType, alarmServEffect=alarmServEffect, NMSServiceEffect=NMSServiceEffect, PYSNMP_MODULE_ID=netsmart1500, nmsTrapHistoryTable=nmsTrapHistoryTable, nmsTrapHistoryIndex=nmsTrapHistoryIndex, nmsNotificationBase=nmsNotificationBase, NMSNEConnState=NMSNEConnState, nmsNEAlarmTable=nmsNEAlarmTable, alarmTID=alarmTID, nmsNEAlarmGroup=nmsNEAlarmGroup, neAlarmTimeStamp=neAlarmTimeStamp, NMSTrapSeqNumber=NMSTrapSeqNumber, fncNMSMIBConformance=fncNMSMIBConformance, neType=neType, fncNMSMIBCompliance=fncNMSMIBCompliance, neEntityType=neEntityType, nmsTrapSeqNumber=nmsTrapSeqNumber, alarmEntityId=alarmEntityId, neServEffect=neServEffect, nmsLastMsgNumber=nmsLastMsgNumber, neEntityID=neEntityID, notifTID=notifTID, nmsTrapHistoryTID=nmsTrapHistoryTID, nmsNEMgmtGroup=nmsNEMgmtGroup, nmsNEEvent=nmsNEEvent, nmsNETrapObjects=nmsNETrapObjects, neLocation=neLocation, nmsNEAlarmListEntry=nmsNEAlarmListEntry, nmsNEOperationEvent=nmsNEOperationEvent, nmsNETable=nmsNETable, nmsNEEntry=nmsNEEntry, neSeverity=neSeverity, nmsKeepAliveState=nmsKeepAliveState, alarmDescription=alarmDescription, fncNMSMIBGroups=fncNMSMIBGroups, nmsNETrapGroup=nmsNETrapGroup, nmsNotificationTrapBase=nmsNotificationTrapBase, NMSCondDirection=NMSCondDirection, neTID=neTID, neConnState=neConnState, nmsNEMgmtMIB=nmsNEMgmtMIB, neDirection=neDirection, notifServer=notifServer, nmsKeepAliveEvent=nmsKeepAliveEvent, nmsServerTrapObjects=nmsServerTrapObjects, neCondType=neCondType, nmsAlarmTimeStamp=nmsAlarmTimeStamp, NMSCondLocation=NMSCondLocation, NMSSeverity=NMSSeverity, neCondDescription=neCondDescription, nmsNEStateChangeEvent=nmsNEStateChangeEvent, alarmCondType=alarmCondType, fncNMSMIBCompliances=fncNMSMIBCompliances, alarmLocation=alarmLocation, alarmDirection=alarmDirection, alarmSeverity=alarmSeverity, netsmart1500=netsmart1500, neNotifTimeStamp=neNotifTimeStamp, nmsNEConnState=nmsNEConnState, neOperation=neOperation, nmsServerTrapGroup=nmsServerTrapGroup, nmsNEMgmt=nmsNEMgmt, nmsNotifTimeStamp=nmsNotifTimeStamp)
