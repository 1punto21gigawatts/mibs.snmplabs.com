#
# PySNMP MIB module Vct-Loopdetect-59-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Vct-Loopdetect-59-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, IpAddress, mgmt, TimeTicks, MibIdentifier, NotificationType, ModuleIdentity, Gauge32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, experimental, Counter32, enterprises, Counter64, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "mgmt", "TimeTicks", "MibIdentifier", "NotificationType", "ModuleIdentity", "Gauge32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "experimental", "Counter32", "enterprises", "Counter64", "Bits", "ObjectIdentity")
TextualConvention, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "RowStatus")
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxr10 = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3))
zxr10switch = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 102))
switch59vct = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24))
switch59loopdetect = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25))
class DisplayString(OctetString):
    pass

vctTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1), )
if mibBuilder.loadTexts: vctTable.setStatus('current')
if mibBuilder.loadTexts: vctTable.setDescription('The vctTable contains the parameter of cable.')
vctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1), ).setIndexNames((0, "Vct-Loopdetect-59-MIB", "vctIfindex"))
if mibBuilder.loadTexts: vctEntry.setStatus('current')
if mibBuilder.loadTexts: vctEntry.setDescription('The parameter list of cable.')
vctIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: vctIfindex.setStatus('current')
if mibBuilder.loadTexts: vctIfindex.setDescription('The ifindex of port,it is same to ifindex.')
vctSetIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctSetIfindex.setStatus('current')
if mibBuilder.loadTexts: vctSetIfindex.setDescription('The ifindex of port, which need to be checked.')
cableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("good", 1), ("fault", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableStatus.setStatus('current')
if mibBuilder.loadTexts: cableStatus.setDescription('The status of cable, either good or fault.')
doubleCableStatus1_2 = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("good", 0), ("open", 1), ("short", 2), ("broken", 3), ("mismatch", 4), ("fail", 5), ("unknown", 6), ("null", 7)))).setLabel("doubleCableStatus1-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: doubleCableStatus1_2.setStatus('current')
if mibBuilder.loadTexts: doubleCableStatus1_2.setDescription('The status of cable pair 1-2.')
doubleCableStatus3_6 = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("good", 0), ("open", 1), ("short", 2), ("broken", 3), ("mismatch", 4), ("fail", 5), ("unknown", 6), ("null", 7)))).setLabel("doubleCableStatus3-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: doubleCableStatus3_6.setStatus('current')
if mibBuilder.loadTexts: doubleCableStatus3_6.setDescription('The status of cable pair 3-6.')
doubleCableStatus4_5 = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("good", 0), ("open", 1), ("short", 2), ("broken", 3), ("mismatch", 4), ("fail", 5), ("unknown", 6), ("null", 7)))).setLabel("doubleCableStatus4-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: doubleCableStatus4_5.setStatus('current')
if mibBuilder.loadTexts: doubleCableStatus4_5.setDescription('The status of cable pair 4-5.')
doubleCableStatus7_8 = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("good", 0), ("open", 1), ("short", 2), ("broken", 3), ("mismatch", 4), ("fail", 5), ("unknown", 6), ("null", 7)))).setLabel("doubleCableStatus7-8").setMaxAccess("readonly")
if mibBuilder.loadTexts: doubleCableStatus7_8.setStatus('current')
if mibBuilder.loadTexts: doubleCableStatus7_8.setDescription('The status of cable pair 7-8.')
doubleCableLength1_2 = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200, 201, 202, 203, 204, 205, 206))).clone(namedValues=NamedValues(("lessthan50", 200), ("from50to80", 201), ("from80to110", 202), ("from110to140", 203), ("morethan140", 204), ("unknow", 205), ("null", 206)))).setLabel("doubleCableLength1-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: doubleCableLength1_2.setStatus('current')
if mibBuilder.loadTexts: doubleCableLength1_2.setDescription('The length of cable pair 1-2.')
doubleCableLength3_6 = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200, 201, 202, 203, 204, 205, 206))).clone(namedValues=NamedValues(("lessthan50", 200), ("from50to80", 201), ("from80to110", 202), ("from110to140", 203), ("morethan140", 204), ("unknow", 205), ("null", 206)))).setLabel("doubleCableLength3-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: doubleCableLength3_6.setStatus('current')
if mibBuilder.loadTexts: doubleCableLength3_6.setDescription('The length of cable pair 3-6.')
doubleCableLength4_5 = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200, 201, 202, 203, 204, 205, 206))).clone(namedValues=NamedValues(("lessthan50", 200), ("from50to80", 201), ("from80to110", 202), ("from110to140", 203), ("morethan140", 204), ("unknow", 205), ("null", 206)))).setLabel("doubleCableLength4-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: doubleCableLength4_5.setStatus('current')
if mibBuilder.loadTexts: doubleCableLength4_5.setDescription('The length of cable pair 4-5.')
doubleCableLength7_8 = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 24, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200, 201, 202, 203, 204, 205, 206))).clone(namedValues=NamedValues(("lessthan50", 200), ("from50to80", 201), ("from80to110", 202), ("from110to140", 203), ("morethan140", 204), ("unknow", 205), ("null", 206)))).setLabel("doubleCableLength7-8").setMaxAccess("readonly")
if mibBuilder.loadTexts: doubleCableLength7_8.setStatus('current')
if mibBuilder.loadTexts: doubleCableLength7_8.setDescription('The length of cable pair 7-8.')
loopdetectReopenTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopdetectReopenTime.setStatus('current')
if mibBuilder.loadTexts: loopdetectReopenTime.setDescription('The max time when the loopdetected port is ')
loopdetectTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2), )
if mibBuilder.loadTexts: loopdetectTable.setStatus('current')
if mibBuilder.loadTexts: loopdetectTable.setDescription('The parameter which the loopdetectTable contains.')
loopdetectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1), ).setIndexNames((0, "Vct-Loopdetect-59-MIB", "loopdetectPortIfindex"))
if mibBuilder.loadTexts: loopdetectEntry.setStatus('current')
if mibBuilder.loadTexts: loopdetectEntry.setDescription('The parameter list shows the happened loopdetect.')
loopdetectPortIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: loopdetectPortIfindex.setStatus('current')
if mibBuilder.loadTexts: loopdetectPortIfindex.setDescription('The index of port, it is same to ifindex.')
loopdetectPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("up", 1), ("down", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopdetectPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: loopdetectPortOperStatus.setDescription('The status of the port.')
loopdetectPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopdetectPortControl.setStatus('current')
if mibBuilder.loadTexts: loopdetectPortControl.setDescription('The loopdetect protocol enable/disable.')
loopdetectPortVid = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopdetectPortVid.setStatus('current')
if mibBuilder.loadTexts: loopdetectPortVid.setDescription('The vlan which the loopdetect port belong to.')
loopdetectPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopdetectPortFlag.setStatus('current')
if mibBuilder.loadTexts: loopdetectPortFlag.setDescription('The result of loopdetect on the port.')
loopdetectPortProtectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopdetectPortProtectFlag.setStatus('current')
if mibBuilder.loadTexts: loopdetectPortProtectFlag.setDescription('The loopdetect protect in the port is enable/disable.')
loopdetectPortReopenTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopdetectPortReopenTime.setStatus('current')
if mibBuilder.loadTexts: loopdetectPortReopenTime.setDescription('How long the port will be opened ')
loopdetectVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopdetectVlan.setStatus('current')
if mibBuilder.loadTexts: loopdetectVlan.setDescription('The vlan contains the port which happened loopdetect.')
mibBuilder.exportSymbols("Vct-Loopdetect-59-MIB", loopdetectPortVid=loopdetectPortVid, doubleCableLength1_2=doubleCableLength1_2, doubleCableLength7_8=doubleCableLength7_8, loopdetectPortReopenTime=loopdetectPortReopenTime, doubleCableStatus7_8=doubleCableStatus7_8, zxr10=zxr10, doubleCableLength3_6=doubleCableLength3_6, zxr10switch=zxr10switch, loopdetectPortFlag=loopdetectPortFlag, doubleCableStatus1_2=doubleCableStatus1_2, loopdetectPortControl=loopdetectPortControl, vctTable=vctTable, doubleCableStatus3_6=doubleCableStatus3_6, loopdetectReopenTime=loopdetectReopenTime, switch59loopdetect=switch59loopdetect, vctSetIfindex=vctSetIfindex, loopdetectPortOperStatus=loopdetectPortOperStatus, loopdetectPortProtectFlag=loopdetectPortProtectFlag, doubleCableStatus4_5=doubleCableStatus4_5, loopdetectPortIfindex=loopdetectPortIfindex, switch59vct=switch59vct, loopdetectEntry=loopdetectEntry, zte=zte, loopdetectVlan=loopdetectVlan, vctEntry=vctEntry, DisplayString=DisplayString, loopdetectTable=loopdetectTable, doubleCableLength4_5=doubleCableLength4_5, cableStatus=cableStatus, vctIfindex=vctIfindex)
