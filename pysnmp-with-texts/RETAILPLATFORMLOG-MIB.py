#
# PySNMP MIB module RETAILPLATFORMLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RETAILPLATFORMLOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:56:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Integer32, IpAddress, MibIdentifier, Counter64, TimeTicks, ModuleIdentity, Bits, NotificationType, Counter32, ObjectIdentity, Gauge32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Integer32", "IpAddress", "MibIdentifier", "Counter64", "TimeTicks", "ModuleIdentity", "Bits", "NotificationType", "Counter32", "ObjectIdentity", "Gauge32", "Unsigned32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncr = MibIdentifier((1, 3, 6, 1, 4, 1, 191))
ncr_products = MibIdentifier((1, 3, 6, 1, 4, 1, 191, 1)).setLabel("ncr-products")
log = MibIdentifier((1, 3, 6, 1, 4, 1, 191, 1, 33))
class NTSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("error", 1), ("warning", 2), ("information", 4), ("auditSuccess", 8), ("auditFailure", 16))

logSysLog = MibIdentifier((1, 3, 6, 1, 4, 1, 191, 1, 33, 1))
logSysLogTable = MibTable((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1), )
if mibBuilder.loadTexts: logSysLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogTable.setDescription('The System Log.')
logSysLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1), ).setIndexNames((0, "RETAILPLATFORMLOG-MIB", "logSysLogIndex"))
if mibBuilder.loadTexts: logSysLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogEntry.setDescription('An entry in the System Log.')
logSysLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogIndex.setDescription('The sequence number of the event.')
logSysLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogDate.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogDate.setDescription('The date the event was logged at the terminal.')
logSysLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogTime.setDescription('The time of day the event was logged at the terminal.')
logSysLogUser = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogUser.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogUser.setDescription('The user name in context of which the application logging the event is running.')
logSysLogComputer = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogComputer.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogComputer.setDescription('The (NetBIOS/Windows computer) name of the terminal where the event was logged.')
logSysLogEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogEventID.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogEventID.setDescription('A numeric identification of the event.')
logSysLogSource = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogSource.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogSource.setDescription('The name of the application/service that logged the event.')
logSysLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 8), NTSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogType.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogType.setDescription('The type (severity) of the event.')
logSysLogCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogCategory.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogCategory.setDescription('The event category.')
logSysLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogDescription.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogDescription.setDescription('Description of the event.')
logSysLogData = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogData.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogData.setDescription('Raw data associated with the event. The octet string returned will be formatted with two-bytes of length information preceding the data.')
logSysLogSize = MibScalar((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSysLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogSize.setDescription('Number of entries in the system log.')
logSysLogReqSize = MibScalar((1, 3, 6, 1, 4, 1, 191, 1, 33, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logSysLogReqSize.setStatus('mandatory')
if mibBuilder.loadTexts: logSysLogReqSize.setDescription('The number of events to return in the logSysLog table (default: 50). To change the default, the desired number of event log entries can be written to this variable.')
logSecLog = MibIdentifier((1, 3, 6, 1, 4, 1, 191, 1, 33, 2))
logSecLogTable = MibTable((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1), )
if mibBuilder.loadTexts: logSecLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogTable.setDescription('The Security Log.')
logSecLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1), ).setIndexNames((0, "RETAILPLATFORMLOG-MIB", "logSecLogIndex"))
if mibBuilder.loadTexts: logSecLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogEntry.setDescription('An entry in the Security Log.')
logSecLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogIndex.setDescription('The sequence number of the event.')
logSecLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogDate.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogDate.setDescription('The date the event was logged at the terminal.')
logSecLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogTime.setDescription('The time of day the event was logged at the terminal.')
logSecLogUser = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogUser.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogUser.setDescription('The user name in context of which the application logging the event is running.')
logSecLogComputer = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogComputer.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogComputer.setDescription('The (NetBIOS/Windows computer) name of the terminal where the event was logged.')
logSecLogEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogEventID.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogEventID.setDescription('A numeric identification of the event.')
logSecLogSource = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogSource.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogSource.setDescription('The name of the application/service that logged the event.')
logSecLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 8), NTSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogType.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogType.setDescription('The type (severity) of the event.')
logSecLogCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogCategory.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogCategory.setDescription('The event category.')
logSecLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogDescription.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogDescription.setDescription('Description of the event.')
logSecLogData = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogData.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogData.setDescription('The raw data from the event message. The octet string returned will be formatted with two-bytes of length information preceding the data.')
logSecLogSize = MibScalar((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSecLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogSize.setDescription('Number of entries in the security log.')
logSecLogReqSize = MibScalar((1, 3, 6, 1, 4, 1, 191, 1, 33, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logSecLogReqSize.setStatus('mandatory')
if mibBuilder.loadTexts: logSecLogReqSize.setDescription('The number of events to return in the logSecLog table (default: 50). To change the default, he desired number of event log entries can be written to this variable. ')
logAppLog = MibIdentifier((1, 3, 6, 1, 4, 1, 191, 1, 33, 3))
logAppLogTable = MibTable((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1), )
if mibBuilder.loadTexts: logAppLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogTable.setDescription('The Application Log.')
logAppLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1), ).setIndexNames((0, "RETAILPLATFORMLOG-MIB", "logAppLogIndex"))
if mibBuilder.loadTexts: logAppLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogEntry.setDescription('An entry in the Application Log.')
logAppLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogIndex.setDescription('The sequence number of the event.')
logAppLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogDate.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogDate.setDescription('The date the event was logged at the Kiosk.')
logAppLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogTime.setDescription('The time of day the event was logged at the Kiosk.')
logAppLogUser = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogUser.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogUser.setDescription('The user name in context of which the application logging the event is running.')
logAppLogComputer = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogComputer.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogComputer.setDescription('The (NetBIOS/Windows computer) name of the Kiosk where the event was logged.')
logAppLogEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogEventID.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogEventID.setDescription('A numeric identification of the event.')
logAppLogSource = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogSource.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogSource.setDescription('The name of the application/service that logged the event.')
logAppLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 8), NTSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogType.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogType.setDescription('The type (severity) of the event.')
logAppLogCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogCategory.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogCategory.setDescription('The event category.')
logAppLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogDescription.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogDescription.setDescription('Description of the event.')
logAppLogData = MibTableColumn((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogData.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogData.setDescription('The raw data from the event message. The octet string returned will be formatted with two-bytes of length information preceding the data.')
logAppLogSize = MibScalar((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAppLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogSize.setDescription('Number of entries in the application log.')
logAppLogReqSize = MibScalar((1, 3, 6, 1, 4, 1, 191, 1, 33, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logAppLogReqSize.setStatus('mandatory')
if mibBuilder.loadTexts: logAppLogReqSize.setDescription('The number of events to return in the logAppLog table (default: 50). To change the default, the desired number of event log entries can be written to this variable. ')
mibBuilder.exportSymbols("RETAILPLATFORMLOG-MIB", logSysLogData=logSysLogData, logSysLogIndex=logSysLogIndex, logSysLogTime=logSysLogTime, logSysLogSource=logSysLogSource, logAppLogDate=logAppLogDate, logSecLogDate=logSecLogDate, logSecLog=logSecLog, logAppLogSize=logAppLogSize, logAppLogUser=logAppLogUser, logSecLogUser=logSecLogUser, ncr_products=ncr_products, logAppLogReqSize=logAppLogReqSize, logAppLogSource=logAppLogSource, logSysLogType=logSysLogType, logSysLogEventID=logSysLogEventID, logSysLogDescription=logSysLogDescription, logSysLogTable=logSysLogTable, logAppLogType=logAppLogType, logSysLogDate=logSysLogDate, logAppLogTime=logAppLogTime, logAppLogCategory=logAppLogCategory, logSysLogReqSize=logSysLogReqSize, logAppLog=logAppLog, logAppLogIndex=logAppLogIndex, logSecLogSource=logSecLogSource, logAppLogEntry=logAppLogEntry, logSysLogUser=logSysLogUser, logSecLogEventID=logSecLogEventID, logSecLogCategory=logSecLogCategory, logSecLogTime=logSecLogTime, logSecLogType=logSecLogType, logSysLogCategory=logSysLogCategory, logAppLogDescription=logAppLogDescription, logSecLogComputer=logSecLogComputer, logSecLogReqSize=logSecLogReqSize, logSecLogTable=logSecLogTable, logSecLogSize=logSecLogSize, logSysLogEntry=logSysLogEntry, logSysLog=logSysLog, logSecLogData=logSecLogData, NTSeverity=NTSeverity, logSysLogComputer=logSysLogComputer, logAppLogData=logAppLogData, logAppLogTable=logAppLogTable, logSecLogIndex=logSecLogIndex, ncr=ncr, logSysLogSize=logSysLogSize, logSecLogDescription=logSecLogDescription, logAppLogComputer=logAppLogComputer, logAppLogEventID=logAppLogEventID, logSecLogEntry=logSecLogEntry, log=log)
