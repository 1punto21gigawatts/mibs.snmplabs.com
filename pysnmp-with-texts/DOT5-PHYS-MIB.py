#
# PySNMP MIB module DOT5-PHYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOT5-PHYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ctDot5PhysMgmt, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctDot5PhysMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, Integer32, Counter64, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Counter32, MibIdentifier, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "Integer32", "Counter64", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Counter32", "MibIdentifier", "iso", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dot5PhysMgmtRev1 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1))
dot5PhysMgmtDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1))
dot5PhysMgmtBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2))
dot5PhysMgmtPort = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3))
dot5PhysMgmtPortCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1))
dot5PhysMgmtPortStn = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 2))
dot5PhysMgmtPortRing = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3))
dot5PhysMgmtPortSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 4))
dot5PhysMgmtRingSpeedTables = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4))
dot5PhysMgmtDeviceRingCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingCount.setDescription('Returns the total number of rings passing through the chassis of which the token ring device is aware. All of these rings may or may not be administratively or statistically manageable.')
dot5PhysMgmtDevicePortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortCount.setDescription('Returns the total number of token ring ports contained within the chassis in which the managing device resides. This count does not include unpopulated TPIM slots, nor does it include ports residing on MIM boards outside of the domain of the managing device.')
dot5PhysMgmtDevicePortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortsEnable.setDescription('Setting this object to enable will cause all the token ring ports residing within the domain of this device to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
dot5PhysMgmtDevicePortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortsOn.setDescription('Returns the total number of administratively enabled token ring ports contained within the chassis in which the managing device resides. This count does not include ports residing on MIM boards outside of the domain of the managing device.')
dot5PhysMgmtDevicePortsOper = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortsOper.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortsOper.setDescription('Returns the total number of operational token ring ports contained within the chassis in which the managing device resides. This count does not include ports residing on MIM boards outside of the domain of the managing device.')
dot5PhysMgmtDeviceStnPortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceStnPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceStnPortCount.setDescription('Returns the total number of token ring station ports contained within the chassis in which the managing device resides. This count does not include ports residing on MIM boards outside of the domain of the managing device.')
dot5PhysMgmtDeviceStnPortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceStnPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceStnPortsEnable.setDescription('Setting this object to enable will cause all the token ring station ports residing within the domain of this device to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
dot5PhysMgmtDeviceStnPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceStnPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceStnPortsOn.setDescription('Returns the total number of administratively enabled token ring station ports contained within the chassis in which the managing device resides. This count does not include ports residing on MIM boards outside of the domain of the managing device.')
dot5PhysMgmtDeviceRingPortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingPortCount.setDescription('Returns the total number of token ring ring in/ring out ports contained within the chassis in which the managing device resides. This count does not include unpopulated TPIM slots nor does it include ports residing on MIM boards outside of the domain of the managing device.')
dot5PhysMgmtDeviceRingPortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingPortsEnable.setDescription('Setting this object to enable will cause all the token ring ring in/ring out ports residing within the domain of this device to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
dot5PhysMgmtDeviceRingPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingPortsOn.setDescription('Returns the total number of administratively enabled token ring ring in/ring out ports contained within the chassis in which this device resides. This count does not include ports residing on MIM boards outside of the domain of the managing device.')
dot5PhysMgmtDevicePortAssociationChanges = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortAssociationChanges.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDevicePortAssociationChanges.setDescription('This object is incremented every time the port association changes for a token ring port residing on a MIM board contained within the chassis in which the managing device resides. This count does not include port association changes for ports residing on MIM boards outside of the domain of the managing device.')
dot5PhysMgmtBoardTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1), )
if mibBuilder.loadTexts: dot5PhysMgmtBoardTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardTable.setDescription('A list of managed objects which pertains to a collection of boards physically residing in the chassis in which a token ring device also resides.')
dot5PhysMgmtBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1), ).setIndexNames((0, "DOT5-PHYS-MIB", "dot5PhysMgmtBoardId"))
if mibBuilder.loadTexts: dot5PhysMgmtBoardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardEntry.setDescription('A list of managed objects which pertains to a single instance of a board physically residing in the chassis in which a token ring device also resides.')
dot5PhysMgmtBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardId.setDescription('Returns an index to a MIM board for which the information in this table pertains.')
dot5PhysMgmtBoardDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outsideDomain", 1), ("withinDomain", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDomain.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDomain.setDescription('Returns an indication of the manageability of this MIM by the device being addressed. If the value outsideDomain is returned, then any write requests to this MIM will result in an SNMP error BadValue being returned. If the value withinDomain is returned, then the MIM may be managed via write requests.')
dot5PhysMgmtBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtBoardName.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardName.setDescription("The ASCII name assigned to this MIM board. This name defaults to 'Board n', where n is a unique integer value from 1 to n which corelates to the physical chassis slot the board resides in.")
dot5PhysMgmtBoardDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDesc.setDescription("An ASCII string which describes this type of MIM board. For example, an MT8MIM would be described as 'MT8MIM' and a TRRMIM-2A would be described as 'TRR2A', etc.")
dot5PhysMgmtBoardDot5PortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5PortCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5PortCount.setDescription('Returns the total number of token ring ports contained on the board. This count does not include unpopulated TPIM slots. If this MIM falls outside of the domain of the managing device, then this count will be zero.')
dot5PhysMgmtBoardDot5PortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5PortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5PortsEnable.setDescription('Setting this object to enable will cause all the token ring ports residing on this MIM board to be enabled, provided this MIM falls within the domain of the device. If the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
dot5PhysMgmtBoardDot5PortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5PortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5PortsOn.setDescription('Returns the total number of administratively enabled token ring ports residing on this MIM board. If this MIM falls outside of the domain of the managing device, then this count will be zero.')
dot5PhysMgmtBoardDot5PortsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5PortsOper.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5PortsOper.setDescription('Returns the total number of operational token ring ports residing on this MIM board. If this MIM falls outside of the domain of the managing device, then this count will be zero.')
dot5PhysMgmtBoardDot5StnPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5StnPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5StnPortCount.setDescription('Returns the total number of token ring station ports contained on the board. If this MIM falls outside of the domain of the managing device, then this count will be zero.')
dot5PhysMgmtBoardDot5StnPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5StnPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5StnPortsEnable.setDescription('Setting this object to enable will cause all the token ring station ports residing on this MIM board to be enabled, provided this MIM falls within the domain of the device. If the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
dot5PhysMgmtBoardDot5StnPortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5StnPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5StnPortsOn.setDescription('Returns the total number of adminstratively enabled token ring station ports residing on this MIM board. If this MIM falls outside of the domain of the managing device, then this count will be zero.')
dot5PhysMgmtBoardDot5RingPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5RingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5RingPortCount.setDescription('Returns the total number of token ring ring in/ring out ports contained on the board. This count does not include unpopulated TPIM slots. If this MIM falls outside of the domain of the managing device, then this count will be zero.')
dot5PhysMgmtBoardDot5RingPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5RingPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5RingPortsEnable.setDescription('Setting this object to enable will cause all the token ring ring in/ring out ports residing on this MIM board to be enabled, provided this MIM falls within the domain of the device. If the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
dot5PhysMgmtBoardDot5RingPortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5RingPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardDot5RingPortsOn.setDescription('Returns the total number of adminstratively enabled token ring ring in/ring out ports residing on this MIM board. If this MIM falls outside of the domain of the managing device, then this count will be zero.')
dot5PhysMgmtBoardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("managementMode", 1), ("autoMode", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtBoardMode.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardMode.setDescription('This object defines the mode of the board. In Auto Mode, the board is using its hardware defaults. The default values of the board are all ports enabled, speed selected by the HW jumper on the board, the FNB attempts to attach left and right and not bypassed, ring port phantom current (if applicable) is controlled via a HW switch, and selectable media (if applicable) is managed also via a HW switch. In Management Mode, the hardware defaults may be overridden by network or local management. If the mode of the board is indeterminate, such as an Ethernet MIM, then the value unknown is returned. A write to this object will place the board into either management or auto mode, provided this MIM falls within the domain of the device. If the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. A write request with the value unknown also returns the SNMP error BadValue.')
dot5PhysMgmtBoardSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 10, 16, 100))).clone(namedValues=NamedValues(("unknown", 1), ("fourMegaBits", 4), ("tenMegaBits", 10), ("sixteenMegaBits", 16), ("hundredMegaBits", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtBoardSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardSpeed.setDescription('This object sets the data speed of the board. On devices with a MAC interface, on MIM boards in which the data speed cannot be set, or on MIMs which reside outside of the domain of the managing device, this object is read-only, and will return the SNMP error BadValue on a write request.')
dot5PhysMgmtBoardSpeedFault = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noFaultDetected", 1), ("faultDetected", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardSpeedFault.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardSpeedFault.setDescription('This object reports a ring speed fault on a MIM board, if applicable. If the MIM cannot detect speed faults, such as an Ethernet MIM, then the value notSupported is returned..')
dot5PhysMgmtBoardSpeedFaultLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("fnb", 2), ("ringIn", 3), ("ringOut", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardSpeedFaultLocation.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardSpeedFaultLocation.setDescription('This object indicates the last ring speed fault detection circuit(s) to detect the fault, if there was one. On MIM boards which cannot detect speed faults, such as an Ethernet MIM, the value notApplicable is returned.')
dot5PhysMgmtBoardPortAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtBoardPortAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardPortAssociation.setDescription('This object, when written, would associate all of the ports on the board with the selected ring, provided this option is available for this MIM and this MIM lies within the domain of the managing device. If this option is not available, or should the MIM lie outside of the domain of the managing device, any write requests will result in the SNMP error BadValue being returned. When read, this object will return either a value indicating which ring all the ports on the board are associated with or notAvailable if this function is not supported. If the MIM lies outside of the domain of the managing device, all read requests will return notAvailable. 0 - MIM does not support function 1..200 - Fnb ring 1 to Fnb ring 200 201..254 - AUX ring 1 to AUX ring 54 255 - All ports are not on the same ring')
dot5PhysMgmtBoardPortAssociationChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardPortAssociationChanges.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardPortAssociationChanges.setDescription('This object is incremented every time the port association changes for a token ring port residing on this MIM board. If this MIM falls outside of the domain of the managing device, then this count will remain zero.')
dot5PhysMgmtPortCommonTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1), )
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonTable.setDescription('A list of managed objects which pertains to a collection of token ring ports physically residing on a MIM board resident in a chassis with this device.')
dot5PhysMgmtPortCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1), ).setIndexNames((0, "DOT5-PHYS-MIB", "dot5PhysMgmtPortCommonBoardId"), (0, "DOT5-PHYS-MIB", "dot5PhysMgmtPortCommonPortId"))
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonEntry.setDescription('A list of managed objects which pertains to a single instance of a token ring port physically residing on a MIM board resident in a chassis with this device.')
dot5PhysMgmtPortCommonPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortId.setDescription('Returns an index to a token ring port for which the information in this table pertains.')
dot5PhysMgmtPortCommonBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonBoardId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonBoardId.setDescription('Returns an index to a MIM board to which the token ring port belongs for which the information in this table pertains.')
dot5PhysMgmtPortCommonPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortName.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortName.setDescription("Sets an ASCII name for this token ring port, provided the MIM on which this port is resident falls within the domain of the device. If the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. The default name for this object is 'Board b, Port p', where b and p are unique integers 1 through n. When read, this object will return the ASCII name which is assigned to this port.")
dot5PhysMgmtPortCommonPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortAdminState.setDescription('Setting this object to enable or disable will cause this token ring port to be enabled or disabled, respectively, provided the MIM on which this port is resident falls within the domain of the device. If the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. When read this object will always return the last administrative request made.')
dot5PhysMgmtPortCommonPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOperational", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortOperState.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortOperState.setDescription('Returns the operational state of this token ring port.')
dot5PhysMgmtPortCommonPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortType.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortType.setDescription('Uniquely defines the token ring station or ring port type. An authoritative identification for a token ring station or ring port type. By convention, this value is allocated within the SMI enterprises subtree (1.3.6.1.4.1), and provides an easy and unambiguous means to determine the type of a token ring station or ring port.')
dot5PhysMgmtPortCommonSpeedFaultDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDetectable", 1), ("noFaultDetected", 2), ("faultDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonSpeedFaultDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonSpeedFaultDetect.setDescription('This object indicates whether a speed fault has been detected at this token ring port. If the HW is incapable of detecting a speed fault at the port, the value notDetectable is returned.')
dot5PhysMgmtPortCommonRingOutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonRingOutEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonRingOutEnable.setDescription('This object, when written, permits the port to function as either a ring out port or a station port, if available and if the MIM board on which this station port is resident lies within the domain of the device. If this selection is not supported by this port, or if the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. When read, this object will return the state of the port with respect to this mode of operation. The default state of this object, if available, is disabled; otherwise it is notAvailable.')
dot5PhysMgmtPortCommonPortAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonPortAssociation.setDescription('This object, when written, would associate the port with the selected ring, provided this option is available for this port and and the MIM the port resides on lies within the domain of the managing device. If this option is not available, or should the MIM on which the port resides lie outside of the domain of the managing device, any write requests will result in the SNMP error BadValue being returned. When read, this object will return either a value indicating which ring the port is associated with or notAvailable if this function is not supported. If the MIM on which the port resides lies outside of the domain of the managing device, all read requests will return notAvailable. 0 - MIM does not support function 1..200 - Fnb ring 1 to Fnb ring 200 201..254 - AUX ring 1 to AUX ring 54')
dot5PhysMgmtPortCommonMauCompId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonMauCompId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortCommonMauCompId.setDescription('This object returns the component ID for the cptMau component for which this port is associated.')
dot5PhysMgmtPortStnTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 2, 1), )
if mibBuilder.loadTexts: dot5PhysMgmtPortStnTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortStnTable.setDescription('A list of managed objects which pertains to a collection of token ring station ports residing on a MIM board resident in a chassis with this device.')
dot5PhysMgmtPortStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 2, 1, 1), ).setIndexNames((0, "DOT5-PHYS-MIB", "dot5PhysMgmtPortStnBoardId"), (0, "DOT5-PHYS-MIB", "dot5PhysMgmtPortStnPortId"))
if mibBuilder.loadTexts: dot5PhysMgmtPortStnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortStnEntry.setDescription('A list of managed objects which pertains to a single instance of a token ring station port residing on a MIM board resident in a chassis with this device.')
dot5PhysMgmtPortStnPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortStnPortId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortStnPortId.setDescription('Returns an index to a token ring station port for which the information in this table pertains.')
dot5PhysMgmtPortStnBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortStnBoardId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortStnBoardId.setDescription('Returns an index to a MIM board to which the token ring station port belongs for which the information in this table pertains.')
dot5PhysMgmtPortStnPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLink", 1), ("link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortStnPortLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortStnPortLinkState.setDescription('This object reports the link status of a token ring station port. The link status indicates the port is detecting a good phantom current.')
dot5PhysMgmtPortStnPortLinkStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortStnPortLinkStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortStnPortLinkStateTime.setDescription("This object reports the amount of time in TimeTicks since the token ring station port's link state last changed.")
dot5PhysMgmtPortStnInsertionTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtPortStnInsertionTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortStnInsertionTrapEnable.setDescription('A write of enabled or disabled to this object permits or inhibits the sending of the port inserted and port deinserted traps when phantom current is asserted or removed, respectively, on this station port, provided the MIM on which this port is resident falls within the domain of the device. If the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. When read this object will repond with the last write request made. The default state of this object is disabled.')
dot5PhysMgmtPortRingTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1), )
if mibBuilder.loadTexts: dot5PhysMgmtPortRingTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingTable.setDescription('A list of managed objects which pertains to a collection of token ring ring ports residing on a MIM board resident in a chassis with this device.')
dot5PhysMgmtPortRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1), ).setIndexNames((0, "DOT5-PHYS-MIB", "dot5PhysMgmtPortRingBoardId"), (0, "DOT5-PHYS-MIB", "dot5PhysMgmtPortRingPortId"))
if mibBuilder.loadTexts: dot5PhysMgmtPortRingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingEntry.setDescription('A list of managed objects which pertains to a single instance of a token ring ring port residing on a MIM board resident in a chassis with this device.')
dot5PhysMgmtPortRingPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPortId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPortId.setDescription('Returns an index to a token ring ring port for which the information in this table pertains.')
dot5PhysMgmtPortRingBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortRingBoardId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingBoardId.setDescription('Returns an index to a MIM board to which the token ring ring port belongs for which the information in this table pertains.')
dot5PhysMgmtPortRingPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAutowrap", 1), ("autowrap", 2), ("selectable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPortClass.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPortClass.setDescription('This object returns a code indicating whether the token ring ring port is capable of either autowrapping or not, or whether the media type is selectable (implies autowrappability).')
dot5PhysMgmtPortRingPortMediaSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noSelection", 1), ("stp", 2), ("fiber", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPortMediaSelect.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPortMediaSelect.setDescription('When written, this object allows for the selection of the media type for this token ring ring ring port, provided the MIM on which this port is resident falls within the domain of the device. If the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. If the ring port is not selectable and an attempt is made to change the media type, a BadValue error will be returned. When read, this object will return the last selection made unless it is unselectable, in which case noSelection is returned.')
dot5PhysMgmtPortRingFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("noFaultDetected", 2), ("faultDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortRingFaultStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingFaultStatus.setDescription('This object reports the media fault status of a token ring ring port capable of auto-wrapping. If auto-wrapping is not available, notSupported will be returned.')
dot5PhysMgmtPortRingFaultStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortRingFaultStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingFaultStateTime.setDescription('This object reports the amount of time in TimeTicks since the token ring ring port fault state last changed.')
dot5PhysMgmtPortRingPhantomCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPhantomAvailable", 1), ("activatePhantom", 2), ("deactivatePhantom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPhantomCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPhantomCurrent.setDescription("When written, this object activates or deactivates the MIM board's phantom current for this ring port, if applicable and provided the MIM on which this port is resident falls within the domain of the device. If the port does not support phantom drive, or if the MIM falls outside of the domain of the device, the SNMP error BadValue will be returned. If successfully written, this selection may be different than the HW switch setting. When read, this object reports the state of the ring port's phantom drive status, whether enabled, disabled, or not supported.")
dot5PhysMgmtPortRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ringIn", 1), ("ringOut", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPortType.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtPortRingPortType.setDescription('This object reports the ring port type.')
dot5PhysMgmtDeviceRingSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 1), )
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingSpeedTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingSpeedTable.setDescription('A list of managed objects which pertains to a collection of rings physically residing in the chassis in which a token ring device also resides.')
dot5PhysMgmtDeviceRingSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 1, 1), ).setIndexNames((0, "DOT5-PHYS-MIB", "dot5PhysMgmtDeviceRingSpeedRing"))
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingSpeedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingSpeedEntry.setDescription('A list of managed objects which pertains to a single instance of a ring physically residing in the chassis in which a token ring device also resides.')
dot5PhysMgmtDeviceRingSpeedRing = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingSpeedRing.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingSpeedRing.setDescription('Returns an index to a FNB ring on a device board for which the information in this table pertains. Valid numeric range: 1 - 200 Fnb rings 1 - 200')
dot5PhysMgmtDeviceRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 10, 16, 100))).clone(namedValues=NamedValues(("unknown", 1), ("fourMegaBits", 4), ("tenMegaBits", 10), ("sixteenMegaBits", 16), ("hundredMegaBits", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtDeviceRingSpeed.setDescription('This object sets the data speed of the ring. All MIM ports physically attached to the ring will be set to the indicated speed')
dot5PhysMgmtBoardAuxRingSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 2), )
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeedTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeedTable.setDescription('A list of managed objects which pertains to a collection of boards physically residing in the chassis in which a token ring device also resides.')
dot5PhysMgmtBoardAuxRingSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 2, 1), ).setIndexNames((0, "DOT5-PHYS-MIB", "dot5PhysMgmtBoardAuxRingSpeedBoardId"), (0, "DOT5-PHYS-MIB", "dot5PhysMgmtBoardAuxRingSpeedAuxRing"))
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeedEntry.setDescription('A list of managed objects which pertains to a single instance of a board physically residing in the chassis in which a token ring device also resides.')
dot5PhysMgmtBoardAuxRingSpeedBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeedBoardId.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeedBoardId.setDescription('Returns an index to a MIM board for which the information in this table pertains.')
dot5PhysMgmtBoardAuxRingSpeedAuxRing = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(201, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeedAuxRing.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeedAuxRing.setDescription('Returns an index to an auxillary ring on a MIM board for which the information in this table pertains. Valid numeric range: 201 - 254 Auxillary rings 1 - 54')
dot5PhysMgmtBoardAuxRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 6, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 10, 16, 100))).clone(namedValues=NamedValues(("unknown", 1), ("fourMegaBits", 4), ("tenMegaBits", 10), ("sixteenMegaBits", 16), ("hundredMegaBits", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dot5PhysMgmtBoardAuxRingSpeed.setDescription('This object sets the data speed of the auxillary ring. On devices without an auxillary ring, or on MIMs which reside outside of the domain of the managing device, this object does not exist.')
mibBuilder.exportSymbols("DOT5-PHYS-MIB", dot5PhysMgmtBoardId=dot5PhysMgmtBoardId, dot5PhysMgmtPortCommonRingOutEnable=dot5PhysMgmtPortCommonRingOutEnable, dot5PhysMgmtDevicePortAssociationChanges=dot5PhysMgmtDevicePortAssociationChanges, dot5PhysMgmtBoardAuxRingSpeedAuxRing=dot5PhysMgmtBoardAuxRingSpeedAuxRing, dot5PhysMgmtPortRingPortClass=dot5PhysMgmtPortRingPortClass, dot5PhysMgmtBoardDot5StnPortsOn=dot5PhysMgmtBoardDot5StnPortsOn, dot5PhysMgmtPortCommonPortName=dot5PhysMgmtPortCommonPortName, dot5PhysMgmtPortRingPhantomCurrent=dot5PhysMgmtPortRingPhantomCurrent, dot5PhysMgmtBoardSpeed=dot5PhysMgmtBoardSpeed, dot5PhysMgmtDeviceStnPortCount=dot5PhysMgmtDeviceStnPortCount, dot5PhysMgmtBoardDot5RingPortsEnable=dot5PhysMgmtBoardDot5RingPortsEnable, dot5PhysMgmtBoardDot5StnPortCount=dot5PhysMgmtBoardDot5StnPortCount, dot5PhysMgmtPortCommonMauCompId=dot5PhysMgmtPortCommonMauCompId, dot5PhysMgmtDeviceRingPortCount=dot5PhysMgmtDeviceRingPortCount, dot5PhysMgmtPortStnPortId=dot5PhysMgmtPortStnPortId, dot5PhysMgmtBoard=dot5PhysMgmtBoard, dot5PhysMgmtPortRingFaultStateTime=dot5PhysMgmtPortRingFaultStateTime, dot5PhysMgmtPortStnInsertionTrapEnable=dot5PhysMgmtPortStnInsertionTrapEnable, dot5PhysMgmtDevicePortsEnable=dot5PhysMgmtDevicePortsEnable, dot5PhysMgmtPortRingEntry=dot5PhysMgmtPortRingEntry, dot5PhysMgmtDeviceRingSpeed=dot5PhysMgmtDeviceRingSpeed, dot5PhysMgmtPortStnEntry=dot5PhysMgmtPortStnEntry, dot5PhysMgmtPortRingBoardId=dot5PhysMgmtPortRingBoardId, dot5PhysMgmtPortStnPortLinkStateTime=dot5PhysMgmtPortStnPortLinkStateTime, dot5PhysMgmtPortCommonPortOperState=dot5PhysMgmtPortCommonPortOperState, dot5PhysMgmtBoardDot5RingPortCount=dot5PhysMgmtBoardDot5RingPortCount, dot5PhysMgmtDeviceRingSpeedTable=dot5PhysMgmtDeviceRingSpeedTable, dot5PhysMgmtBoardSpeedFault=dot5PhysMgmtBoardSpeedFault, dot5PhysMgmtBoardPortAssociationChanges=dot5PhysMgmtBoardPortAssociationChanges, dot5PhysMgmtPortCommonTable=dot5PhysMgmtPortCommonTable, dot5PhysMgmtDeviceRingCount=dot5PhysMgmtDeviceRingCount, dot5PhysMgmtBoardEntry=dot5PhysMgmtBoardEntry, dot5PhysMgmtBoardSpeedFaultLocation=dot5PhysMgmtBoardSpeedFaultLocation, dot5PhysMgmtPortStn=dot5PhysMgmtPortStn, dot5PhysMgmtPortRing=dot5PhysMgmtPortRing, dot5PhysMgmtBoardAuxRingSpeed=dot5PhysMgmtBoardAuxRingSpeed, dot5PhysMgmtBoardAuxRingSpeedEntry=dot5PhysMgmtBoardAuxRingSpeedEntry, dot5PhysMgmtPortRingPortType=dot5PhysMgmtPortRingPortType, dot5PhysMgmtPortRingPortMediaSelect=dot5PhysMgmtPortRingPortMediaSelect, dot5PhysMgmtDevicePortsOper=dot5PhysMgmtDevicePortsOper, dot5PhysMgmtPortStnTable=dot5PhysMgmtPortStnTable, dot5PhysMgmtPortCommonPortType=dot5PhysMgmtPortCommonPortType, dot5PhysMgmtDevicePortCount=dot5PhysMgmtDevicePortCount, dot5PhysMgmtPortStnPortLinkState=dot5PhysMgmtPortStnPortLinkState, dot5PhysMgmtDeviceRingSpeedRing=dot5PhysMgmtDeviceRingSpeedRing, dot5PhysMgmtBoardMode=dot5PhysMgmtBoardMode, dot5PhysMgmtBoardDot5PortsOper=dot5PhysMgmtBoardDot5PortsOper, dot5PhysMgmtDeviceStnPortsOn=dot5PhysMgmtDeviceStnPortsOn, dot5PhysMgmtBoardDot5PortCount=dot5PhysMgmtBoardDot5PortCount, dot5PhysMgmtPortCommon=dot5PhysMgmtPortCommon, dot5PhysMgmtRingSpeedTables=dot5PhysMgmtRingSpeedTables, dot5PhysMgmtPortCommonSpeedFaultDetect=dot5PhysMgmtPortCommonSpeedFaultDetect, dot5PhysMgmtBoardDot5PortsEnable=dot5PhysMgmtBoardDot5PortsEnable, dot5PhysMgmtPortCommonPortAdminState=dot5PhysMgmtPortCommonPortAdminState, dot5PhysMgmtBoardDesc=dot5PhysMgmtBoardDesc, dot5PhysMgmtBoardPortAssociation=dot5PhysMgmtBoardPortAssociation, dot5PhysMgmtDeviceRingSpeedEntry=dot5PhysMgmtDeviceRingSpeedEntry, dot5PhysMgmtRev1=dot5PhysMgmtRev1, dot5PhysMgmtDeviceRingPortsEnable=dot5PhysMgmtDeviceRingPortsEnable, dot5PhysMgmtBoardAuxRingSpeedBoardId=dot5PhysMgmtBoardAuxRingSpeedBoardId, dot5PhysMgmtPortCommonEntry=dot5PhysMgmtPortCommonEntry, dot5PhysMgmtBoardAuxRingSpeedTable=dot5PhysMgmtBoardAuxRingSpeedTable, dot5PhysMgmtPortRingTable=dot5PhysMgmtPortRingTable, dot5PhysMgmtPortStnBoardId=dot5PhysMgmtPortStnBoardId, dot5PhysMgmtPortRingPortId=dot5PhysMgmtPortRingPortId, dot5PhysMgmtDeviceRingPortsOn=dot5PhysMgmtDeviceRingPortsOn, dot5PhysMgmtPortCommonPortId=dot5PhysMgmtPortCommonPortId, dot5PhysMgmtPort=dot5PhysMgmtPort, dot5PhysMgmtPortSwitch=dot5PhysMgmtPortSwitch, dot5PhysMgmtBoardDomain=dot5PhysMgmtBoardDomain, dot5PhysMgmtBoardDot5RingPortsOn=dot5PhysMgmtBoardDot5RingPortsOn, dot5PhysMgmtBoardTable=dot5PhysMgmtBoardTable, dot5PhysMgmtBoardDot5PortsOn=dot5PhysMgmtBoardDot5PortsOn, dot5PhysMgmtDevice=dot5PhysMgmtDevice, dot5PhysMgmtPortRingFaultStatus=dot5PhysMgmtPortRingFaultStatus, dot5PhysMgmtPortCommonPortAssociation=dot5PhysMgmtPortCommonPortAssociation, dot5PhysMgmtBoardDot5StnPortsEnable=dot5PhysMgmtBoardDot5StnPortsEnable, dot5PhysMgmtDevicePortsOn=dot5PhysMgmtDevicePortsOn, dot5PhysMgmtDeviceStnPortsEnable=dot5PhysMgmtDeviceStnPortsEnable, dot5PhysMgmtBoardName=dot5PhysMgmtBoardName, dot5PhysMgmtPortCommonBoardId=dot5PhysMgmtPortCommonBoardId)
