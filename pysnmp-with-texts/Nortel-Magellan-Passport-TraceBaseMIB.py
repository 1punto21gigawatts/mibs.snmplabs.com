#
# PySNMP MIB module Nortel-Magellan-Passport-TraceBaseMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-TraceBaseMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:27:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
RowPointer, DisplayString, StorageType, Integer32, Unsigned32, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowPointer", "DisplayString", "StorageType", "Integer32", "Unsigned32", "RowStatus")
AsciiStringIndex, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiStringIndex", "NonReplicated")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, ModuleIdentity, iso, Bits, Integer32, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Counter64, IpAddress, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "iso", "Bits", "Integer32", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Counter64", "IpAddress", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
traceBaseMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60))
trace = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106))
traceRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 1), )
if mibBuilder.loadTexts: traceRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: traceRowStatusTable.setDescription('This entry controls the addition and deletion of trace components.')
traceRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"))
if mibBuilder.loadTexts: traceRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traceRowStatusEntry.setDescription('A single entry in the table represents a single trace component.')
traceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: traceRowStatus.setDescription('This variable is used as the basis for SNMP naming of trace components. These components can be added and deleted.')
traceComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: traceComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
traceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: traceStorageType.setDescription('This variable represents the storage type value for the trace tables.')
traceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: traceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traceIndex.setDescription('This variable represents the index for the trace tables.')
traceRcvr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2))
traceRcvrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 1), )
if mibBuilder.loadTexts: traceRcvrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: traceRcvrRowStatusTable.setDescription('This entry controls the addition and deletion of traceRcvr components.')
traceRcvrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceRcvrIndex"))
if mibBuilder.loadTexts: traceRcvrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traceRcvrRowStatusEntry.setDescription('A single entry in the table represents a single traceRcvr component.')
traceRcvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceRcvrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: traceRcvrRowStatus.setDescription('This variable is used as the basis for SNMP naming of traceRcvr components. These components can be added and deleted.')
traceRcvrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: traceRcvrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
traceRcvrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRcvrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: traceRcvrStorageType.setDescription('This variable represents the storage type value for the traceRcvr tables.')
traceRcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: traceRcvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traceRcvrIndex.setDescription('This variable represents the index for the traceRcvr tables.')
traceSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3))
traceSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 1), )
if mibBuilder.loadTexts: traceSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of traceSession components.')
traceSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceSessionIndex"))
if mibBuilder.loadTexts: traceSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionRowStatusEntry.setDescription('A single entry in the table represents a single traceSession component.')
traceSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of traceSession components. These components cannot be added nor deleted.')
traceSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
traceSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionStorageType.setDescription('This variable represents the storage type value for the traceSession tables.')
traceSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: traceSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionIndex.setDescription('This variable represents the index for the traceSession tables.')
traceSessionOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100), )
if mibBuilder.loadTexts: traceSessionOperationalTable.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionOperationalTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group provides the operational attributes for the Session component. It displays the service being traced and the destination for the traced data.')
traceSessionOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceIndex"), (0, "Nortel-Magellan-Passport-TraceBaseMIB", "traceSessionIndex"))
if mibBuilder.loadTexts: traceSessionOperationalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionOperationalEntry.setDescription('An entry in the traceSessionOperationalTable.')
traceSessionServiceTraced = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionServiceTraced.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionServiceTraced.setDescription('This attribute identifies the service being traced. An example is FrUni/5.')
traceSessionReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionReceiver.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionReceiver.setDescription('This attribute identifies the trace receiver which is the destination for the traced data.')
traceSessionSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initializing", 0), ("idle", 1), ("waitingForSession", 2), ("releasingSession", 3), ("waitingForProvisioningData", 4), ("callingReceiver", 5), ("clearingCallToReceiver", 6), ("abortingDueToCallFailure", 7), ("binding", 8), ("unbinding", 9), ("active", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionSessionState.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionSessionState.setDescription('This attribute indicates the state of the trace session. The active value is the normal state for a running trace session. The waitingForSession, waitingForProvisioningData, callingReceiver and binding values are all normal transient states used to establish a session with the trace receiver on receipt of a Start command. In the waitingForSession state, a trace session is being allocated. In the waitingForProvisioningData state, a trace session has been allocated and receiver provisioning data, used to setup the call the the receiver, is being retrieved. In the callingReceiver state, the call to the receiver is being established. In the binding state, the call to the receiver has been established and the service data path is being adjusted to include trace. The unbinding, clearingCallToReceiver and releasingSession values are all normal transient states used to disconnect a session with the trace receiver on receipt of a Stop command. In the unbinding state, the service data path is being adjusted to remove trace. In the clearingCallToReceiver state, the call to the receiver is being cleared. In the releasingSession state, a trace session is being deallocated. A value of abortingDueToCallFailure indicates that the call to the trace receiver has disconnected unexpectedly and trace is stopping. The clear cause and diagnostic for the failure is reported. Correct the fault indicated and retry the Start command. Values of initializing and idle can never be seen since these states occur before a Session component is created and after it is destroyed.')
traceSessionCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initializing", 0), ("creatingVc", 1), ("calling", 2), ("clearing", 3), ("enteringDataTransfer", 4), ("terminatingVc", 5), ("dataTransfer", 6), ("reseting", 7), ("terminating", 8), ("terminated", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionCallState.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionCallState.setDescription('This attribute indicates the state of the trace call to the receiver. The dataTransfer value is the normal state for the call. The initializing, creatingVc, calling and enteringDataTransfer values are all normal transient states used to establish a call to the trace receiver on receipt of a Start command. These states occur during the callingReceiver state of the sessionState attribute. In the initializing state, receiver provisioning data, used to setup the call the the receiver, is being retrieved. In the creatingVc state, the local VC is being created. In the calling state, the direct call to the receiver is being connected. In the enteringDataTransfer state, the call to the receiver has been accepted and the data path is being established. The clearing, terminatingVc and terminated values are all normal transient states used to disconnect a call with the trace receiver on receipt of a Stop command. These states occur during the clearingCallToReceiver state of the sessionState attribute. In the clearing state, the call to the receiver is being cleared. In the terminatingVc state, the local VC is being destroyed. In the terminated state, the call is down and all cleanup is complete. A value of reseting indicates a data sequencing problem has occured on the call. This value is applicable for sessions to X.25 trace receivers only and indicates an incompatability with the receiver. Tracing continues, however, some trace data may have been lost. A value of terminating is a normal transient state which occurs if a Stop command is received before the local VC has been created.')
traceSessionQueueState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("full", 1), ("blocked", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionQueueState.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionQueueState.setDescription('This attribute indicates the state of the trace queue. A value of normal indicates that traced data is being queued normally. A value of full indicates that trace data is being discarded because the queue is full. A value of blocked indicates that trace data is being discarded because the trace VC is not able to transport the data.')
traceSessionFramesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionFramesQueued.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionFramesQueued.setDescription('This attribute indicates the number of traced frames that are currently queued to be sent to the VC.')
traceSessionFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionFramesSent.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionFramesSent.setDescription('This attribute counts the number of traced frames sent to the VC. The counter wraps when it exceeds its maximum value.')
traceSessionFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 106, 3, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceSessionFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: traceSessionFramesDiscarded.setDescription('This attribute counts the number of discarded trace frames while the trace queue is full. Frames discarded while the queue is blocked are not counted. The counter wraps when it exceeds its maximum value. DESCRIPTION')
traceBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60, 1))
traceBaseGroupBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60, 1, 4))
traceBaseGroupBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60, 1, 4, 1))
traceBaseGroupBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60, 1, 4, 1, 2))
traceBaseCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60, 3))
traceBaseCapabilitiesBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60, 3, 4))
traceBaseCapabilitiesBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60, 3, 4, 1))
traceBaseCapabilitiesBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 60, 3, 4, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-TraceBaseMIB", traceRcvr=traceRcvr, traceSessionStorageType=traceSessionStorageType, traceSessionQueueState=traceSessionQueueState, traceBaseMIB=traceBaseMIB, traceRcvrRowStatusEntry=traceRcvrRowStatusEntry, traceSessionRowStatusEntry=traceSessionRowStatusEntry, trace=trace, traceBaseCapabilities=traceBaseCapabilities, traceSessionServiceTraced=traceSessionServiceTraced, traceSessionCallState=traceSessionCallState, traceBaseGroupBD=traceBaseGroupBD, traceComponentName=traceComponentName, traceSessionFramesDiscarded=traceSessionFramesDiscarded, traceRowStatusEntry=traceRowStatusEntry, traceSessionFramesQueued=traceSessionFramesQueued, traceSessionOperationalTable=traceSessionOperationalTable, traceSessionSessionState=traceSessionSessionState, traceBaseGroup=traceBaseGroup, traceRcvrComponentName=traceRcvrComponentName, traceBaseGroupBD00A=traceBaseGroupBD00A, traceBaseCapabilitiesBD00A=traceBaseCapabilitiesBD00A, traceBaseCapabilitiesBD=traceBaseCapabilitiesBD, traceRcvrStorageType=traceRcvrStorageType, traceRowStatusTable=traceRowStatusTable, traceRcvrIndex=traceRcvrIndex, traceSessionOperationalEntry=traceSessionOperationalEntry, traceRowStatus=traceRowStatus, traceBaseGroupBD00=traceBaseGroupBD00, traceSessionRowStatusTable=traceSessionRowStatusTable, traceSession=traceSession, traceSessionReceiver=traceSessionReceiver, traceSessionComponentName=traceSessionComponentName, traceBaseCapabilitiesBD00=traceBaseCapabilitiesBD00, traceSessionIndex=traceSessionIndex, traceRcvrRowStatusTable=traceRcvrRowStatusTable, traceSessionRowStatus=traceSessionRowStatus, traceRcvrRowStatus=traceRcvrRowStatus, traceIndex=traceIndex, traceStorageType=traceStorageType, traceSessionFramesSent=traceSessionFramesSent)
