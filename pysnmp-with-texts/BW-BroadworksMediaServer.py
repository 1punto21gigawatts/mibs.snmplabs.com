#
# PySNMP MIB module BW-BroadworksMediaServer (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BW-BroadworksMediaServer
# Produced by pysmi-0.3.4 at Wed May  1 11:42:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, enterprises, Gauge32, IpAddress, TimeTicks, Integer32, Bits, Counter32, iso, MibIdentifier, Unsigned32, ModuleIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "enterprises", "Gauge32", "IpAddress", "TimeTicks", "Integer32", "Bits", "Counter32", "iso", "MibIdentifier", "Unsigned32", "ModuleIdentity", "NotificationType", "Counter64")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
broadsoft = ModuleIdentity((1, 3, 6, 1, 4, 1, 6431))
broadsoft.setRevisions(('2005-08-15 14:30', '2000-09-19 14:31',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: broadsoft.setRevisionsDescriptions(('Adding a MODULE-COMPLIANCE statement and OBJECT-GROUP definitions.', '',))
if mibBuilder.loadTexts: broadsoft.setLastUpdated('200508151430Z')
if mibBuilder.loadTexts: broadsoft.setOrganization('Broadsoft, Inc')
if mibBuilder.loadTexts: broadsoft.setContactInfo('Broadsoft, Inc. 220 Perry Parkway Gaithersburg, MD 20877 301-977-9440')
if mibBuilder.loadTexts: broadsoft.setDescription('This document contains the management information that is common to all elements in a Broadworks system.')
broadworks = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1))
mediaServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3))
mcp = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1))
rtp = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 3))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 4))
http = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 5))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 6))
sip = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7))
mscml = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8))
liveaudio = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 9))
video = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 10))
fax = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 11))
vxml = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 12))
ccxml = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 13))
interfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14))
bwMsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20))
conferencing = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3))
ivr = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4))
msPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msPortsInUse.setStatus('current')
if mibBuilder.loadTexts: msPortsInUse.setDescription('Total numbers of ports currently in use')
msNoPortAvailableErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 6), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msNoPortAvailableErrors.setStatus('current')
if mibBuilder.loadTexts: msNoPortAvailableErrors.setDescription("Number of 'no ports available' errors")
msMCPNotificationsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 7), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMCPNotificationsTransmitted.setStatus('obsolete')
if mibBuilder.loadTexts: msMCPNotificationsTransmitted.setDescription('number of MCP Notifications transmitted')
msMCPNotificationsRetransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 8), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMCPNotificationsRetransmitted.setStatus('obsolete')
if mibBuilder.loadTexts: msMCPNotificationsRetransmitted.setDescription('number of MCP Notifications re-transmitted')
msMCPCommandsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 9), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMCPCommandsReceived.setStatus('obsolete')
if mibBuilder.loadTexts: msMCPCommandsReceived.setDescription('number of MCP Commands received')
msConfAddParticipantFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfAddParticipantFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msConfAddParticipantFailed.setDescription('Number of AddParticipant command failures')
msConfAddParticipant = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfAddParticipant.setStatus('obsolete')
if mibBuilder.loadTexts: msConfAddParticipant.setDescription('Number of AddParticipant commands received')
msConfAllocateBridge = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfAllocateBridge.setStatus('obsolete')
if mibBuilder.loadTexts: msConfAllocateBridge.setDescription('Number of AllocateBridge commands received')
msConfAllocateBridgeFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 4), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfAllocateBridgeFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msConfAllocateBridgeFailed.setDescription('Number of AllocateBridge command failures')
msConfRemoveParticipant = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 5), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfRemoveParticipant.setStatus('obsolete')
if mibBuilder.loadTexts: msConfRemoveParticipant.setDescription('Number of RemoveParticipant commands received')
msConfRemoveParticipantFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 6), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfRemoveParticipantFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msConfRemoveParticipantFailed.setDescription('Number of RemoveParticipant command failures')
msConfCurrentPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msConfCurrentPortsInUse.setStatus('obsolete')
if mibBuilder.loadTexts: msConfCurrentPortsInUse.setDescription('Number of conferencing ports currently in use')
msConferenceCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 8), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConferenceCount.setStatus('current')
if mibBuilder.loadTexts: msConferenceCount.setDescription('Total number of conferences')
msConfTotalDuration = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 9), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfTotalDuration.setStatus('current')
if mibBuilder.loadTexts: msConfTotalDuration.setDescription('Total duration of all conferences (in seconds)')
msConfUpdateParticipant = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 11), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfUpdateParticipant.setStatus('obsolete')
if mibBuilder.loadTexts: msConfUpdateParticipant.setDescription('Number of UpdateParticipant commands received')
msConfUpdateParticipantFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 3, 12), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msConfUpdateParticipantFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msConfUpdateParticipantFailed.setDescription('Number of UpdateParticipant command failures')
msIvrFreeAudioMemory = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msIvrFreeAudioMemory.setStatus('current')
if mibBuilder.loadTexts: msIvrFreeAudioMemory.setDescription('Memory available for audio files (in bytes)')
msIvrAudioMemoryInUse = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msIvrAudioMemoryInUse.setStatus('current')
if mibBuilder.loadTexts: msIvrAudioMemoryInUse.setDescription('Audio memory currently in use (in bytes)')
msIvrCurrentPortsInUse = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msIvrCurrentPortsInUse.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrCurrentPortsInUse.setDescription('Number of IVR ports currently in use')
msIvrCreateConnection = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 4), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrCreateConnection.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrCreateConnection.setDescription('Number of CreateConnection commands received')
msIvrCreateConnectionFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 5), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrCreateConnectionFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrCreateConnectionFailed.setDescription('Number of CreateConnection command failures')
msIvrUpdateConnection = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 6), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrUpdateConnection.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrUpdateConnection.setDescription('Number of UpdateConnection commands received')
msIvrUpdateConnectionFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 7), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrUpdateConnectionFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrUpdateConnectionFailed.setDescription('Number of UpdateConnection command failures')
msIvrPlay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 8), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrPlay.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrPlay.setDescription('Number of Play commands received')
msIvrPlayFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 9), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrPlayFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrPlayFailed.setDescription('Number of Play command failures')
msIvrPlayCollect = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 10), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrPlayCollect.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrPlayCollect.setDescription('Number of PlayCollect commands received')
msIvrPlayCollectFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 11), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrPlayCollectFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrPlayCollectFailed.setDescription('Number of PlayCollect command failures')
msIvrPlayRecord = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 12), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrPlayRecord.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrPlayRecord.setDescription('Number of PlayRecord commands received')
msIvrPlayRecordFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 13), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrPlayRecordFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrPlayRecordFailed.setDescription('Number of PlayRecord command failures')
msIvrSendEmail = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 14), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrSendEmail.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrSendEmail.setDescription('Number of SendEmail commands received')
msIvrSendEmailFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 15), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrSendEmailFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrSendEmailFailed.setDescription('Number of SendEmail command failures')
msIvrSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 16), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrSessionCount.setStatus('current')
if mibBuilder.loadTexts: msIvrSessionCount.setDescription('Total number of IVR sessions')
msIvrTotalDuration = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 17), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrTotalDuration.setStatus('current')
if mibBuilder.loadTexts: msIvrTotalDuration.setDescription('Total duration of all IVR sessions (in seconds)')
msIvrTotalRecordingDuration = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 18), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrTotalRecordingDuration.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrTotalRecordingDuration.setDescription('Total duration of recorded voice messages (in seconds)')
msIvrMerge = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 21), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrMerge.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrMerge.setDescription('Number of Merge commands received')
msIvrMergeFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 22), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrMergeFailed.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrMergeFailed.setDescription('Number of Merge command failures')
msIvrEmptyRecordings = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 1, 4, 23), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msIvrEmptyRecordings.setStatus('obsolete')
if mibBuilder.loadTexts: msIvrEmptyRecordings.setDescription('Number of recordings that failed due to too few RTP packets received. This may be due to silence suppression at the remote RTP device, or the network dropping packets.')
msRtpSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpSessionsCount.setStatus('current')
if mibBuilder.loadTexts: msRtpSessionsCount.setDescription('Total number of RTP sessions')
receive = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 2))
transmit = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 3))
msRtpSessionsInUse = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpSessionsInUse.setStatus('current')
if mibBuilder.loadTexts: msRtpSessionsInUse.setDescription('Total number of active RTP sessions')
msRtcpSenderReports = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtcpSenderReports.setStatus('current')
if mibBuilder.loadTexts: msRtcpSenderReports.setDescription('Number of RTCP sender reports received')
msRtpPacketsExpected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpPacketsExpected.setStatus('current')
if mibBuilder.loadTexts: msRtpPacketsExpected.setDescription('Total number of packets that were expected')
msRtpPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: msRtpPacketsReceived.setDescription('Number of packets actually received')
msRtpOutOfOrder = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: msRtpOutOfOrder.setDescription('Number of RTP packets that were received out of order')
msRtpBadPayload = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpBadPayload.setStatus('current')
if mibBuilder.loadTexts: msRtpBadPayload.setDescription('Number of packets received which had a bad payload type')
msRtpSsrc = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpSsrc.setStatus('current')
if mibBuilder.loadTexts: msRtpSsrc.setDescription('Number of packets received that had an invalid SSRC')
msRtpReceivedPacketJitter = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpReceivedPacketJitter.setStatus('current')
if mibBuilder.loadTexts: msRtpReceivedPacketJitter.setDescription('Total jitter of packets received by this node')
msRtpCumulativePacketsLost = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpCumulativePacketsLost.setStatus('current')
if mibBuilder.loadTexts: msRtpCumulativePacketsLost.setDescription('Cumulative count of packets sent by this node but reported lost by remote nodes')
msRtpPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpPacketsSent.setStatus('current')
if mibBuilder.loadTexts: msRtpPacketsSent.setDescription('Number of packets sent')
msRtpFramesSkipped = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpFramesSkipped.setStatus('current')
if mibBuilder.loadTexts: msRtpFramesSkipped.setDescription('Number of frames that were skipped because CPU is overloaded (one frame = 1 packet per RTP session)')
msRtpTransmitJitter = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 2, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRtpTransmitJitter.setStatus('current')
if mibBuilder.loadTexts: msRtpTransmitJitter.setDescription('Jitter of packets transmitted by this node, as measured by remote nodes')
primary = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 3, 1))
secondary = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 3, 2))
msPrimaryEmailSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 3, 1, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msPrimaryEmailSent.setStatus('current')
if mibBuilder.loadTexts: msPrimaryEmailSent.setDescription('Number of messages sent to primary SMTP server')
msPrimarySmtpErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 3, 1, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msPrimarySmtpErrors.setStatus('current')
if mibBuilder.loadTexts: msPrimarySmtpErrors.setDescription('Number of errors that occured to primary SMTP server')
msSecondaryEmailSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 3, 2, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSecondaryEmailSent.setStatus('current')
if mibBuilder.loadTexts: msSecondaryEmailSent.setDescription('Number of e-mails sent to secondary SMTP server')
msSecondarySmtpErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 3, 2, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSecondarySmtpErrors.setStatus('current')
if mibBuilder.loadTexts: msSecondarySmtpErrors.setDescription('Number of errors that occured to secondary SMTP server')
msAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 4, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: msAlarmsCount.setDescription('Number of alarms sent (i.e., SNMP Traps)')
msSoftwareErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 4, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSoftwareErrorsCount.setStatus('current')
if mibBuilder.loadTexts: msSoftwareErrorsCount.setDescription('Number of software errors that were reported')
msACLViolationCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 4, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msACLViolationCount.setStatus('current')
if mibBuilder.loadTexts: msACLViolationCount.setDescription('Number of sip messages received from unauthorized host')
msMaxCapacityInPorts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 4, 4), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMaxCapacityInPorts.setStatus('current')
if mibBuilder.loadTexts: msMaxCapacityInPorts.setDescription("The maximum number of 'G.711 ports' the MS is capable of handling")
msNumLicensedPorts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 4, 5), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msNumLicensedPorts.setStatus('current')
if mibBuilder.loadTexts: msNumLicensedPorts.setDescription('The maximum number of licensed ports the MS is authorized to use according to its license file.')
msSipStatsInviteIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsInviteIns.setStatus('current')
if mibBuilder.loadTexts: msSipStatsInviteIns.setDescription('Number of INVITE requests received by the MediaServer.')
msSipStatsAckIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsAckIns.setStatus('current')
if mibBuilder.loadTexts: msSipStatsAckIns.setDescription('Number of ACK requests received by the MediaServer.')
msSipStatsByeIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsByeIns.setStatus('current')
if mibBuilder.loadTexts: msSipStatsByeIns.setDescription('Number of BYE requests received by the MediaServer.')
msSipStatsByeOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 4), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsByeOuts.setStatus('current')
if mibBuilder.loadTexts: msSipStatsByeOuts.setDescription('Number of BYE requests sent by the MediaServer.')
msSipStatsInfoIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 5), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsInfoIns.setStatus('current')
if mibBuilder.loadTexts: msSipStatsInfoIns.setDescription('Number of INFO requests received by the MediaServer.')
msSipStatsInfoOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 6), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsInfoOuts.setStatus('current')
if mibBuilder.loadTexts: msSipStatsInfoOuts.setDescription('Number of INFO requests sent by the MediaServer.')
msSipStatsOthersIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 7), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsOthersIns.setStatus('current')
if mibBuilder.loadTexts: msSipStatsOthersIns.setDescription('Number of UNKNOWN requests received by the MediaServer.')
msSipStatsOthersOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 8), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsOthersOuts.setStatus('current')
if mibBuilder.loadTexts: msSipStatsOthersOuts.setDescription('Number of UNKNOWN requests sent by the MediaServer.')
msSipStatsResponsesIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 9), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsResponsesIns.setStatus('current')
if mibBuilder.loadTexts: msSipStatsResponsesIns.setDescription('Number of responses received by the MediaServer, excluding retransmissions.')
msSipStatsResponsesOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 10), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsResponsesOuts.setStatus('current')
if mibBuilder.loadTexts: msSipStatsResponsesOuts.setDescription('Number of responses sent by the MediaServer, excluding retransmissions.')
msSipStatsInvite200OKRetransmitsOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 11), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsInvite200OKRetransmitsOuts.setStatus('current')
if mibBuilder.loadTexts: msSipStatsInvite200OKRetransmitsOuts.setDescription('Number of 200 OK to a SIP INVITE that were retransmitted by the media server to a SIP user agent.')
msSipStatsRequestRetransmittedIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 12), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsRequestRetransmittedIns.setStatus('current')
if mibBuilder.loadTexts: msSipStatsRequestRetransmittedIns.setDescription('Number of SIP requests retransmitted by a remote SIP user agent to the media server.')
msSipStatsReferOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 13), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSipStatsReferOuts.setStatus('current')
if mibBuilder.loadTexts: msSipStatsReferOuts.setDescription('Number of SIP REFER sent by the media server.')
msRedirectsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 14), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRedirectsCount.setStatus('current')
if mibBuilder.loadTexts: msRedirectsCount.setDescription('This is the total number of times SIP Redirect Response (3xx) was received from the Load Balancer/SIP Redirect Proxy in response to INVITE.')
msTimeOutRouteAdvancesCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 15), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTimeOutRouteAdvancesCount.setStatus('current')
if mibBuilder.loadTexts: msTimeOutRouteAdvancesCount.setDescription('This is the total number of times the initial INVITE from MS to the end point times out and a new IINVITE is sent to the next end point on the contact URI list.')
msRouteAdvancesCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 7, 16), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRouteAdvancesCount.setStatus('current')
if mibBuilder.loadTexts: msRouteAdvancesCount.setDescription('This is the total number of times MS had to iterate through the contact URI list either returned in the SIP Redirect Response or configured via CLI (for ASR and TTS servers)')
msMSCMLPlayCollect = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLPlayCollect.setStatus('current')
if mibBuilder.loadTexts: msMSCMLPlayCollect.setDescription('Number of PlayCollect commands received.')
msMSCMLPlayCollectFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLPlayCollectFailed.setStatus('current')
if mibBuilder.loadTexts: msMSCMLPlayCollectFailed.setDescription('Number of PlayCollect command failures.')
msMSCMLPlay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLPlay.setStatus('current')
if mibBuilder.loadTexts: msMSCMLPlay.setDescription('Number of Play commands received.')
msMSCMLPlayFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 4), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLPlayFailed.setStatus('current')
if mibBuilder.loadTexts: msMSCMLPlayFailed.setDescription('Number of Play command failures.')
msMSCMLPlayRecord = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 5), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLPlayRecord.setStatus('current')
if mibBuilder.loadTexts: msMSCMLPlayRecord.setDescription('Number of PlayRecord commands received.')
msMSCMLRecordFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 6), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLRecordFailed.setStatus('current')
if mibBuilder.loadTexts: msMSCMLRecordFailed.setDescription('Number of PlayRecord command failures.')
msMSCMLSendMail = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 7), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLSendMail.setStatus('current')
if mibBuilder.loadTexts: msMSCMLSendMail.setDescription('Number of SendEmail commands received.')
msMSCMLSendMailFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 8), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLSendMailFailed.setStatus('current')
if mibBuilder.loadTexts: msMSCMLSendMailFailed.setDescription('Number of SendEmail command failures.')
msMSCMLTotalRecordingDuration = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 9), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLTotalRecordingDuration.setStatus('current')
if mibBuilder.loadTexts: msMSCMLTotalRecordingDuration.setDescription('Duration of all MSCML sessions (in seconds).')
msMSCMLEmptyRecordings = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 8, 10), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMSCMLEmptyRecordings.setStatus('current')
if mibBuilder.loadTexts: msMSCMLEmptyRecordings.setDescription('Number of recordings that failed due to too few RTP packets received. This may be due to silence suppression at the remote RTP device, or the network dropping packets.')
msFilesDownloaded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 5, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msFilesDownloaded.setStatus('current')
if mibBuilder.loadTexts: msFilesDownloaded.setDescription('total number of files downloaded')
msTotalSizeDownloadedFiles = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 5, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTotalSizeDownloadedFiles.setStatus('current')
if mibBuilder.loadTexts: msTotalSizeDownloadedFiles.setDescription('total size of downloaded files')
msFilesRetrievedFromCache = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 5, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msFilesRetrievedFromCache.setStatus('current')
if mibBuilder.loadTexts: msFilesRetrievedFromCache.setDescription('total number of files retrieved from cache')
msLiveAudioRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 9, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msLiveAudioRequestCount.setStatus('obsolete')
if mibBuilder.loadTexts: msLiveAudioRequestCount.setDescription('total number of live audio request')
msLiveAudioFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 9, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msLiveAudioFailureCount.setStatus('obsolete')
if mibBuilder.loadTexts: msLiveAudioFailureCount.setDescription('total number of live audio failure')
msLiveAudioTotalDuration = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 9, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msLiveAudioTotalDuration.setStatus('obsolete')
if mibBuilder.loadTexts: msLiveAudioTotalDuration.setDescription('total duration of all live audio sessions (in seconds)')
msLiveAudioULawUserCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 9, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msLiveAudioULawUserCount.setStatus('obsolete')
if mibBuilder.loadTexts: msLiveAudioULawUserCount.setDescription('current number of live audio sessions with ulaw codec.')
msLiveAudioALawUserCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 9, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msLiveAudioALawUserCount.setStatus('obsolete')
if mibBuilder.loadTexts: msLiveAudioALawUserCount.setDescription('current number of live audio sessions with alaw codec.')
msLiveAudioG726UserCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 9, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msLiveAudioG726UserCount.setStatus('obsolete')
if mibBuilder.loadTexts: msLiveAudioG726UserCount.setDescription('current number of live audio sessions with g726 codec.')
msLiveAudioG729UserCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 9, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msLiveAudioG729UserCount.setStatus('obsolete')
if mibBuilder.loadTexts: msLiveAudioG729UserCount.setDescription('current number of live audio sessions with g729 codec.')
msVideoRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 10, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msVideoRecorded.setStatus('current')
if mibBuilder.loadTexts: msVideoRecorded.setDescription('This counter is incremented whenever a video stream is recorded.')
msVideoPlayback = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 10, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msVideoPlayback.setStatus('current')
if mibBuilder.loadTexts: msVideoPlayback.setDescription('This counter is incremented whenever a video stream is played back.')
msFaxReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 11, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msFaxReceived.setStatus('current')
if mibBuilder.loadTexts: msFaxReceived.setDescription('This counter is incremented whenever an MS receives a fax on behalf of Broadworks subscriber.')
msFaxReceptionFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 11, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msFaxReceptionFailure.setStatus('current')
if mibBuilder.loadTexts: msFaxReceptionFailure.setDescription('This counter is incremented whenever an MS fails to receive a fax on behalf of Broadworks subscriber.')
msFaxPrinted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 11, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msFaxPrinted.setStatus('current')
if mibBuilder.loadTexts: msFaxPrinted.setDescription('This counter is incremented whenever an MS sends a fax on behalf of Broadworks subscriber.')
msFaxPrintingFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 11, 4), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msFaxPrintingFailure.setStatus('current')
if mibBuilder.loadTexts: msFaxPrintingFailure.setDescription('This counter is incremented whenever an MS fails to send a fax on behalf of Broadworks subscriber.')
msVoiceXMLErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 12, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msVoiceXMLErrorCount.setStatus('current')
if mibBuilder.loadTexts: msVoiceXMLErrorCount.setDescription('The VoiceXML error count counter is incremented whenever an error occurs while downloading or running a VoiceXML script.')
msVoiceXMLFilesDownloaded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 12, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msVoiceXMLFilesDownloaded.setStatus('current')
if mibBuilder.loadTexts: msVoiceXMLFilesDownloaded.setDescription('The VoiceXML files downloaded counter is incremented whenever a VoiceXML file is downloaded. It does not include media files.')
msCallControlXMLSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 13, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msCallControlXMLSessionCount.setStatus('current')
if mibBuilder.loadTexts: msCallControlXMLSessionCount.setDescription('Total number of CallControlXML Sessions')
msCallControlXMLCreateCallCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 13, 2), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msCallControlXMLCreateCallCount.setStatus('current')
if mibBuilder.loadTexts: msCallControlXMLCreateCallCount.setDescription('Total number of CallControlXML calls created through the createcall tag')
msCallControlXMLDialogCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 13, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msCallControlXMLDialogCount.setStatus('current')
if mibBuilder.loadTexts: msCallControlXMLDialogCount.setDescription('Total number of CallControlXML dialogs')
msCallControlXMLConfCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 13, 4), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msCallControlXMLConfCount.setStatus('current')
if mibBuilder.loadTexts: msCallControlXMLConfCount.setDescription('Total number of CallControlXML conferences')
resetAllMSCounters = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 6, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAllMSCounters.setStatus('current')
if mibBuilder.loadTexts: resetAllMSCounters.setDescription('When set to a value other then 0, all the counters in the system are reset to 0.')
mrcp = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1))
msMrcpAsrSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpAsrSessionsCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpAsrSessionsCount.setDescription('This is the total number of completed ASR MRCP sessions.')
msMrcpAsrSessionsInUse = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpAsrSessionsInUse.setStatus('current')
if mibBuilder.loadTexts: msMrcpAsrSessionsInUse.setDescription('This is the total number of currently active ASR MRCP sessions.')
msMrcpTtsSessionsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 3), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpTtsSessionsCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpTtsSessionsCount.setDescription('This is the total number of completed TTS MRCP sessions.')
msMrcpTtsSessionsInUse = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpTtsSessionsInUse.setStatus('current')
if mibBuilder.loadTexts: msMrcpTtsSessionsInUse.setDescription('This is the total number of currently active TTS MRCP sessions.')
msMrcpRecognitionAttemptsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 8), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpRecognitionAttemptsCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpRecognitionAttemptsCount.setDescription('This is the total number of times a RECOGNIZE request is executed during MRCP sessions.')
msMrcpSuccessfulRecognitionsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 9), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpSuccessfulRecognitionsCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpSuccessfulRecognitionsCount.setDescription('This is the total number of times a RECOGNIZE request is executed successfully during MRCP sessions.')
msMrcpRequestsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 10), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpRequestsCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpRequestsCount.setDescription('This is the total number of MRCP requests.')
msMrcpFailedRequestsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 11), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpFailedRequestsCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpFailedRequestsCount.setDescription('This is the total number of failed MRCP requests.')
msMrcpFailedConnectionsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 12), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpFailedConnectionsCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpFailedConnectionsCount.setDescription('This is the total number of times TCP or TLS connection attempts failed during initiating of an MRCP session.')
msMrcpKeepAliveFailuresCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 13), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpKeepAliveFailuresCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpKeepAliveFailuresCount.setDescription('This is the total number of times GET-PARAMS command sent to ASR/TTS server fails to receive a response in a timely manner during initiating MRCP sessions.')
msMrcpSpeakRequestsCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 14), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpSpeakRequestsCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpSpeakRequestsCount.setDescription('This is the total number of times SPEAK requests sent through the control channel to the TTS server.')
msMrcpSpeakRequestFailuresCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 3, 14, 1, 15), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msMrcpSpeakRequestFailuresCount.setStatus('current')
if mibBuilder.loadTexts: msMrcpSpeakRequestFailuresCount.setDescription('This is the total number of times SPEAK request sent to TTS server fails to receive a response <<SPEAK-COMPLETE>> with the completion cause other than <<Completion-Cause:000 normal>>.')
bwMSGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1))
bwMSCompliancy = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 2))
bwMSGroupMCP = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 1)).setObjects(("BW-BroadworksMediaServer", "msPortsInUse"), ("BW-BroadworksMediaServer", "msNoPortAvailableErrors"), ("BW-BroadworksMediaServer", "msMCPNotificationsTransmitted"), ("BW-BroadworksMediaServer", "msMCPNotificationsRetransmitted"), ("BW-BroadworksMediaServer", "msMCPCommandsReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupMCP = bwMSGroupMCP.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupMCP.setDescription('This group defines global counters for the MCP protocol.')
bwMSGroupMCPConferencing = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 2)).setObjects(("BW-BroadworksMediaServer", "msConfAddParticipantFailed"), ("BW-BroadworksMediaServer", "msConfAddParticipant"), ("BW-BroadworksMediaServer", "msConfAllocateBridge"), ("BW-BroadworksMediaServer", "msConfAllocateBridgeFailed"), ("BW-BroadworksMediaServer", "msConfRemoveParticipant"), ("BW-BroadworksMediaServer", "msConfRemoveParticipantFailed"), ("BW-BroadworksMediaServer", "msConfCurrentPortsInUse"), ("BW-BroadworksMediaServer", "msConferenceCount"), ("BW-BroadworksMediaServer", "msConfTotalDuration"), ("BW-BroadworksMediaServer", "msConfUpdateParticipant"), ("BW-BroadworksMediaServer", "msConfUpdateParticipantFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupMCPConferencing = bwMSGroupMCPConferencing.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupMCPConferencing.setDescription('This group defines global counters for the MCP protocol for the Conferencing service.')
bwMSGroupMCPIVR = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 3)).setObjects(("BW-BroadworksMediaServer", "msIvrFreeAudioMemory"), ("BW-BroadworksMediaServer", "msIvrAudioMemoryInUse"), ("BW-BroadworksMediaServer", "msIvrCurrentPortsInUse"), ("BW-BroadworksMediaServer", "msIvrCreateConnection"), ("BW-BroadworksMediaServer", "msIvrCreateConnectionFailed"), ("BW-BroadworksMediaServer", "msIvrUpdateConnection"), ("BW-BroadworksMediaServer", "msIvrUpdateConnectionFailed"), ("BW-BroadworksMediaServer", "msIvrPlay"), ("BW-BroadworksMediaServer", "msIvrPlayFailed"), ("BW-BroadworksMediaServer", "msIvrPlayCollect"), ("BW-BroadworksMediaServer", "msIvrPlayCollectFailed"), ("BW-BroadworksMediaServer", "msIvrPlayRecord"), ("BW-BroadworksMediaServer", "msIvrPlayRecordFailed"), ("BW-BroadworksMediaServer", "msIvrSendEmail"), ("BW-BroadworksMediaServer", "msIvrSendEmailFailed"), ("BW-BroadworksMediaServer", "msIvrSessionCount"), ("BW-BroadworksMediaServer", "msIvrTotalDuration"), ("BW-BroadworksMediaServer", "msIvrTotalRecordingDuration"), ("BW-BroadworksMediaServer", "msIvrMerge"), ("BW-BroadworksMediaServer", "msIvrMergeFailed"), ("BW-BroadworksMediaServer", "msIvrEmptyRecordings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupMCPIVR = bwMSGroupMCPIVR.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupMCPIVR.setDescription('This group defines global counters for the MCP protocol for the IVR service.')
bwMSGroupRTP = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 4)).setObjects(("BW-BroadworksMediaServer", "msRtcpSenderReports"), ("BW-BroadworksMediaServer", "msRtpPacketsExpected"), ("BW-BroadworksMediaServer", "msRtpPacketsReceived"), ("BW-BroadworksMediaServer", "msRtpOutOfOrder"), ("BW-BroadworksMediaServer", "msRtpBadPayload"), ("BW-BroadworksMediaServer", "msRtpSsrc"), ("BW-BroadworksMediaServer", "msRtpReceivedPacketJitter"), ("BW-BroadworksMediaServer", "msRtpCumulativePacketsLost"), ("BW-BroadworksMediaServer", "msRtpPacketsSent"), ("BW-BroadworksMediaServer", "msRtpFramesSkipped"), ("BW-BroadworksMediaServer", "msRtpTransmitJitter"), ("BW-BroadworksMediaServer", "msRtpSessionsCount"), ("BW-BroadworksMediaServer", "msRtpSessionsInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupRTP = bwMSGroupRTP.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupRTP.setDescription('This group defines global counters for the RTP packets.')
bwMSGroupSMTP = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 5)).setObjects(("BW-BroadworksMediaServer", "msPrimaryEmailSent"), ("BW-BroadworksMediaServer", "msPrimarySmtpErrors"), ("BW-BroadworksMediaServer", "msSecondaryEmailSent"), ("BW-BroadworksMediaServer", "msSecondarySmtpErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupSMTP = bwMSGroupSMTP.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupSMTP.setDescription('This group defines global counters for the SMTP protocol.')
bwMSGroupSystem = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 6)).setObjects(("BW-BroadworksMediaServer", "msAlarmsCount"), ("BW-BroadworksMediaServer", "msSoftwareErrorsCount"), ("BW-BroadworksMediaServer", "msACLViolationCount"), ("BW-BroadworksMediaServer", "msMaxCapacityInPorts"), ("BW-BroadworksMediaServer", "msNumLicensedPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupSystem = bwMSGroupSystem.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupSystem.setDescription('This group defines miscellaneous MS system counters.')
bwMSGroupHTTP = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 7)).setObjects(("BW-BroadworksMediaServer", "msFilesDownloaded"), ("BW-BroadworksMediaServer", "msTotalSizeDownloadedFiles"), ("BW-BroadworksMediaServer", "msFilesRetrievedFromCache"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupHTTP = bwMSGroupHTTP.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupHTTP.setDescription('This group defines global counters for the HTTP protocol.')
bwMSGroupManagement = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 8)).setObjects(("BW-BroadworksMediaServer", "resetAllMSCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupManagement = bwMSGroupManagement.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupManagement.setDescription('This group defines global counters for the MS as extension to the BroadWorks Maintenance MIB.')
bwMSGroupSIP = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 9)).setObjects(("BW-BroadworksMediaServer", "msSipStatsInviteIns"), ("BW-BroadworksMediaServer", "msSipStatsAckIns"), ("BW-BroadworksMediaServer", "msSipStatsByeIns"), ("BW-BroadworksMediaServer", "msSipStatsByeOuts"), ("BW-BroadworksMediaServer", "msSipStatsInfoIns"), ("BW-BroadworksMediaServer", "msSipStatsInfoOuts"), ("BW-BroadworksMediaServer", "msSipStatsOthersIns"), ("BW-BroadworksMediaServer", "msSipStatsOthersOuts"), ("BW-BroadworksMediaServer", "msSipStatsResponsesIns"), ("BW-BroadworksMediaServer", "msSipStatsResponsesOuts"), ("BW-BroadworksMediaServer", "msSipStatsInvite200OKRetransmitsOuts"), ("BW-BroadworksMediaServer", "msSipStatsRequestRetransmittedIns"), ("BW-BroadworksMediaServer", "msSipStatsReferOuts"), ("BW-BroadworksMediaServer", "msRedirectsCount"), ("BW-BroadworksMediaServer", "msTimeOutRouteAdvancesCount"), ("BW-BroadworksMediaServer", "msRouteAdvancesCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupSIP = bwMSGroupSIP.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupSIP.setDescription('This group defines global counters for the SIP protocol.')
bwMSGroupMSCML = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 10)).setObjects(("BW-BroadworksMediaServer", "msMSCMLPlayCollect"), ("BW-BroadworksMediaServer", "msMSCMLPlayCollectFailed"), ("BW-BroadworksMediaServer", "msMSCMLPlay"), ("BW-BroadworksMediaServer", "msMSCMLPlayFailed"), ("BW-BroadworksMediaServer", "msMSCMLPlayRecord"), ("BW-BroadworksMediaServer", "msMSCMLRecordFailed"), ("BW-BroadworksMediaServer", "msMSCMLSendMail"), ("BW-BroadworksMediaServer", "msMSCMLSendMailFailed"), ("BW-BroadworksMediaServer", "msMSCMLTotalRecordingDuration"), ("BW-BroadworksMediaServer", "msMSCMLEmptyRecordings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupMSCML = bwMSGroupMSCML.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupMSCML.setDescription('This group defines global counters for the MSCML protocol.')
bwMSGroupLiveAudio = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 11)).setObjects(("BW-BroadworksMediaServer", "msLiveAudioRequestCount"), ("BW-BroadworksMediaServer", "msLiveAudioFailureCount"), ("BW-BroadworksMediaServer", "msLiveAudioTotalDuration"), ("BW-BroadworksMediaServer", "msLiveAudioULawUserCount"), ("BW-BroadworksMediaServer", "msLiveAudioALawUserCount"), ("BW-BroadworksMediaServer", "msLiveAudioG726UserCount"), ("BW-BroadworksMediaServer", "msLiveAudioG729UserCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupLiveAudio = bwMSGroupLiveAudio.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupLiveAudio.setDescription('This group defines global counters for the live audio service.')
bwMSGroupVideo = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 12)).setObjects(("BW-BroadworksMediaServer", "msVideoRecorded"), ("BW-BroadworksMediaServer", "msVideoPlayback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupVideo = bwMSGroupVideo.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupVideo.setDescription('This group defines global counters for the support of video by the media server.')
bwMSGroupFax = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 13)).setObjects(("BW-BroadworksMediaServer", "msFaxReceived"), ("BW-BroadworksMediaServer", "msFaxReceptionFailure"), ("BW-BroadworksMediaServer", "msFaxPrinted"), ("BW-BroadworksMediaServer", "msFaxPrintingFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupFax = bwMSGroupFax.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupFax.setDescription('This group defines global counters for the support of fax by the media server.')
bwMSGroupVxml = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 14)).setObjects(("BW-BroadworksMediaServer", "msVoiceXMLErrorCount"), ("BW-BroadworksMediaServer", "msVoiceXMLFilesDownloaded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupVxml = bwMSGroupVxml.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupVxml.setDescription('this group defines global counters for the support of VoiceXML by the media server.')
bwMSGroupCcxml = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 15)).setObjects(("BW-BroadworksMediaServer", "msCallControlXMLSessionCount"), ("BW-BroadworksMediaServer", "msCallControlXMLCreateCallCount"), ("BW-BroadworksMediaServer", "msCallControlXMLDialogCount"), ("BW-BroadworksMediaServer", "msCallControlXMLConfCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupCcxml = bwMSGroupCcxml.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupCcxml.setDescription('this group defines global counters for the support of CallControlXML by the media server.')
bwMSGroupMrcp = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 1, 16)).setObjects(("BW-BroadworksMediaServer", "msCallControlXMLConfCount"), ("BW-BroadworksMediaServer", "msMrcpAsrSessionsInUse"), ("BW-BroadworksMediaServer", "msMrcpTtsSessionsCount"), ("BW-BroadworksMediaServer", "msMrcpTtsSessionsInUse"), ("BW-BroadworksMediaServer", "msMrcpRecognitionAttemptsCount"), ("BW-BroadworksMediaServer", "msMrcpSuccessfulRecognitionsCount"), ("BW-BroadworksMediaServer", "msMrcpRequestsCount"), ("BW-BroadworksMediaServer", "msMrcpFailedRequestsCount"), ("BW-BroadworksMediaServer", "msMrcpFailedConnectionsCount"), ("BW-BroadworksMediaServer", "msMrcpKeepAliveFailuresCount"), ("BW-BroadworksMediaServer", "msMrcpSpeakRequestsCount"), ("BW-BroadworksMediaServer", "msMrcpSpeakRequestFailuresCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMSGroupMrcp = bwMSGroupMrcp.setStatus('current')
if mibBuilder.loadTexts: bwMSGroupMrcp.setDescription('this group defines global counters for the support of CallControlXML by the media server.')
bwMsBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6431, 1, 3, 20, 2, 1)).setObjects(("BW-BroadworksMediaServer", "bwMSGroupMCP"), ("BW-BroadworksMediaServer", "bwMSGroupMCPConferencing"), ("BW-BroadworksMediaServer", "bwMSGroupMCPIVR"), ("BW-BroadworksMediaServer", "bwMSGroupRTP"), ("BW-BroadworksMediaServer", "bwMSGroupSMTP"), ("BW-BroadworksMediaServer", "bwMSGroupSystem"), ("BW-BroadworksMediaServer", "bwMSGroupHTTP"), ("BW-BroadworksMediaServer", "bwMSGroupManagement"), ("BW-BroadworksMediaServer", "bwMSGroupSIP"), ("BW-BroadworksMediaServer", "bwMSGroupMSCML"), ("BW-BroadworksMediaServer", "bwMSGroupLiveAudio"), ("BW-BroadworksMediaServer", "bwMSGroupVideo"), ("BW-BroadworksMediaServer", "bwMSGroupFax"), ("BW-BroadworksMediaServer", "bwMSGroupVxml"), ("BW-BroadworksMediaServer", "bwMSGroupCcxml"), ("BW-BroadworksMediaServer", "bwMSGroupMrcp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMsBasicCompliance = bwMsBasicCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: bwMsBasicCompliance.setDescription('BroadWorks Media Server MIB Module compliance')
mibBuilder.exportSymbols("BW-BroadworksMediaServer", msTimeOutRouteAdvancesCount=msTimeOutRouteAdvancesCount, msRtpReceivedPacketJitter=msRtpReceivedPacketJitter, msMrcpSpeakRequestFailuresCount=msMrcpSpeakRequestFailuresCount, msLiveAudioFailureCount=msLiveAudioFailureCount, msLiveAudioG729UserCount=msLiveAudioG729UserCount, msIvrTotalRecordingDuration=msIvrTotalRecordingDuration, bwMSGroupVxml=bwMSGroupVxml, msSipStatsResponsesOuts=msSipStatsResponsesOuts, msSipStatsReferOuts=msSipStatsReferOuts, msSipStatsInfoIns=msSipStatsInfoIns, bwMSGroupMCPIVR=bwMSGroupMCPIVR, msCallControlXMLCreateCallCount=msCallControlXMLCreateCallCount, msRtpSessionsCount=msRtpSessionsCount, msMSCMLPlayCollectFailed=msMSCMLPlayCollectFailed, conferencing=conferencing, msLiveAudioTotalDuration=msLiveAudioTotalDuration, primary=primary, msMSCMLPlayRecord=msMSCMLPlayRecord, msRtpPacketsReceived=msRtpPacketsReceived, msMSCMLTotalRecordingDuration=msMSCMLTotalRecordingDuration, fax=fax, msCallControlXMLDialogCount=msCallControlXMLDialogCount, vxml=vxml, msConfAllocateBridge=msConfAllocateBridge, msPrimarySmtpErrors=msPrimarySmtpErrors, http=http, msIvrSendEmailFailed=msIvrSendEmailFailed, msConfAllocateBridgeFailed=msConfAllocateBridgeFailed, resetAllMSCounters=resetAllMSCounters, video=video, msRtpSessionsInUse=msRtpSessionsInUse, msMCPCommandsReceived=msMCPCommandsReceived, msSipStatsByeIns=msSipStatsByeIns, msMCPNotificationsTransmitted=msMCPNotificationsTransmitted, msConfRemoveParticipant=msConfRemoveParticipant, msConferenceCount=msConferenceCount, secondary=secondary, msMrcpRecognitionAttemptsCount=msMrcpRecognitionAttemptsCount, bwMSGroupMSCML=bwMSGroupMSCML, msMSCMLSendMailFailed=msMSCMLSendMailFailed, mediaServer=mediaServer, msIvrEmptyRecordings=msIvrEmptyRecordings, msRtpPacketsSent=msRtpPacketsSent, msRtcpSenderReports=msRtcpSenderReports, bwMsBasicCompliance=bwMsBasicCompliance, msMrcpRequestsCount=msMrcpRequestsCount, msRtpFramesSkipped=msRtpFramesSkipped, msMrcpTtsSessionsInUse=msMrcpTtsSessionsInUse, bwMSGroupHTTP=bwMSGroupHTTP, msMrcpFailedConnectionsCount=msMrcpFailedConnectionsCount, bwMSGroupFax=bwMSGroupFax, msRtpOutOfOrder=msRtpOutOfOrder, msSipStatsRequestRetransmittedIns=msSipStatsRequestRetransmittedIns, ccxml=ccxml, bwMSGroupRTP=bwMSGroupRTP, msRedirectsCount=msRedirectsCount, msIvrPlayFailed=msIvrPlayFailed, msPortsInUse=msPortsInUse, msCallControlXMLConfCount=msCallControlXMLConfCount, msIvrPlayRecord=msIvrPlayRecord, msPrimaryEmailSent=msPrimaryEmailSent, msSipStatsOthersOuts=msSipStatsOthersOuts, bwMSGroupMrcp=bwMSGroupMrcp, msRtpTransmitJitter=msRtpTransmitJitter, bwMSGroupSystem=bwMSGroupSystem, msSipStatsResponsesIns=msSipStatsResponsesIns, msIvrMergeFailed=msIvrMergeFailed, bwMSGroups=bwMSGroups, system=system, msMSCMLRecordFailed=msMSCMLRecordFailed, msMSCMLSendMail=msMSCMLSendMail, msIvrCurrentPortsInUse=msIvrCurrentPortsInUse, msSipStatsByeOuts=msSipStatsByeOuts, msIvrAudioMemoryInUse=msIvrAudioMemoryInUse, msIvrTotalDuration=msIvrTotalDuration, PYSNMP_MODULE_ID=broadsoft, msRtpCumulativePacketsLost=msRtpCumulativePacketsLost, msSecondaryEmailSent=msSecondaryEmailSent, msFilesDownloaded=msFilesDownloaded, msMrcpAsrSessionsCount=msMrcpAsrSessionsCount, msFaxPrinted=msFaxPrinted, msIvrUpdateConnectionFailed=msIvrUpdateConnectionFailed, msIvrPlayRecordFailed=msIvrPlayRecordFailed, msMSCMLPlayFailed=msMSCMLPlayFailed, msConfAddParticipant=msConfAddParticipant, msRtpPacketsExpected=msRtpPacketsExpected, msIvrPlayCollect=msIvrPlayCollect, bwMSGroupMCPConferencing=bwMSGroupMCPConferencing, msSipStatsOthersIns=msSipStatsOthersIns, msFilesRetrievedFromCache=msFilesRetrievedFromCache, mcp=mcp, msAlarmsCount=msAlarmsCount, msFaxReceived=msFaxReceived, msTotalSizeDownloadedFiles=msTotalSizeDownloadedFiles, interfaces=interfaces, msSecondarySmtpErrors=msSecondarySmtpErrors, broadsoft=broadsoft, msNoPortAvailableErrors=msNoPortAvailableErrors, ivr=ivr, msMSCMLPlayCollect=msMSCMLPlayCollect, msConfAddParticipantFailed=msConfAddParticipantFailed, bwMSCompliancy=bwMSCompliancy, msMrcpTtsSessionsCount=msMrcpTtsSessionsCount, management=management, msMrcpSpeakRequestsCount=msMrcpSpeakRequestsCount, msIvrUpdateConnection=msIvrUpdateConnection, msLiveAudioALawUserCount=msLiveAudioALawUserCount, msMSCMLPlay=msMSCMLPlay, msMrcpSuccessfulRecognitionsCount=msMrcpSuccessfulRecognitionsCount, msSipStatsAckIns=msSipStatsAckIns, msMSCMLEmptyRecordings=msMSCMLEmptyRecordings, msIvrFreeAudioMemory=msIvrFreeAudioMemory, bwMSGroupLiveAudio=bwMSGroupLiveAudio, msIvrSessionCount=msIvrSessionCount, msLiveAudioG726UserCount=msLiveAudioG726UserCount, msMCPNotificationsRetransmitted=msMCPNotificationsRetransmitted, bwMSGroupManagement=bwMSGroupManagement, msSipStatsInvite200OKRetransmitsOuts=msSipStatsInvite200OKRetransmitsOuts, rtp=rtp, msRtpBadPayload=msRtpBadPayload, msVideoRecorded=msVideoRecorded, mscml=mscml, msIvrPlayCollectFailed=msIvrPlayCollectFailed, msMrcpAsrSessionsInUse=msMrcpAsrSessionsInUse, msConfRemoveParticipantFailed=msConfRemoveParticipantFailed, liveaudio=liveaudio, bwMsConformance=bwMsConformance, msSoftwareErrorsCount=msSoftwareErrorsCount, msACLViolationCount=msACLViolationCount, msSipStatsInfoOuts=msSipStatsInfoOuts, msConfCurrentPortsInUse=msConfCurrentPortsInUse, msRouteAdvancesCount=msRouteAdvancesCount, msIvrPlay=msIvrPlay, broadworks=broadworks, msConfUpdateParticipant=msConfUpdateParticipant, msIvrCreateConnectionFailed=msIvrCreateConnectionFailed, msSipStatsInviteIns=msSipStatsInviteIns, msCallControlXMLSessionCount=msCallControlXMLSessionCount, msConfUpdateParticipantFailed=msConfUpdateParticipantFailed, msVoiceXMLFilesDownloaded=msVoiceXMLFilesDownloaded, msMrcpKeepAliveFailuresCount=msMrcpKeepAliveFailuresCount, msConfTotalDuration=msConfTotalDuration, bwMSGroupMCP=bwMSGroupMCP, bwMSGroupCcxml=bwMSGroupCcxml, mrcp=mrcp, bwMSGroupVideo=bwMSGroupVideo, msIvrCreateConnection=msIvrCreateConnection, receive=receive, msLiveAudioULawUserCount=msLiveAudioULawUserCount, msVoiceXMLErrorCount=msVoiceXMLErrorCount, transmit=transmit, smtp=smtp, msIvrSendEmail=msIvrSendEmail, bwMSGroupSIP=bwMSGroupSIP, msNumLicensedPorts=msNumLicensedPorts, msLiveAudioRequestCount=msLiveAudioRequestCount, msVideoPlayback=msVideoPlayback, msFaxPrintingFailure=msFaxPrintingFailure, msRtpSsrc=msRtpSsrc, msMaxCapacityInPorts=msMaxCapacityInPorts, msIvrMerge=msIvrMerge, sip=sip, msFaxReceptionFailure=msFaxReceptionFailure, msMrcpFailedRequestsCount=msMrcpFailedRequestsCount, bwMSGroupSMTP=bwMSGroupSMTP)
