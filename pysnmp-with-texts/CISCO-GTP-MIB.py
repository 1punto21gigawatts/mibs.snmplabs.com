#
# PySNMP MIB module CISCO-GTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, Counter64, Unsigned32, Integer32, iso, NotificationType, TimeTicks, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Counter64", "Unsigned32", "Integer32", "iso", "NotificationType", "TimeTicks", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString, TruthValue, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue", "StorageType")
cGtpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 188))
cGtpMIB.setRevisions(('2013-06-18 00:00', '2013-03-11 00:00', '2012-05-21 00:00', '2012-03-05 00:00', '2011-03-15 00:00', '2010-04-27 00:00', '2009-02-13 00:00', '2007-10-11 18:00', '2006-08-07 00:00', '2002-11-09 16:00', '2002-03-08 16:00', '2001-09-13 15:35', '2001-06-11 16:00', '2001-02-07 13:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cGtpMIB.setRevisionsDescriptions(('The following changes have been made. [1] The following objects have been added to cGtpStatistics, 1. cGtpTotalDownlinkQosFailures 2. cGtpTotalUplinkQosFailures [2] New group cGtpStatisticsGroupSup6 has been added. [3] The compliance cGtpMIBComplianceRev10 has been deprecated and superceded by the compliance cGtpMIBComplianceRev11.', 'The following changes have been made. [1] The following objects have been added to cGtpStatus, 1. cGtpTotalActivePaths 2. cGtpTotalActiveGtpv1DataPaths [2] The following objects have been added to cGtpStatistics, 1. cGtpTotalv0v1SigMsgDropped 2. cGtpTotalDataMsgDropped 3. cGtpv0PathCreated 4. cGtpv0PathDeleted 5. cGtpv0PathRestarted 6. cGtpv1SigPathCreated 7. cGtpv1SigPathDeleted 8. cGtpv1SigPathRestarted 9. cGtpv1DataPathCreated 10. cGtpv1DataPathDeleted 11. cGtpv1DataPathRestarted [3] The following new groups were added, 1. cGtpStatusGroupSup2 2. cGtpStatisticsGroupSup5 [4] The compliance cGtpMIBComplianceRev9 has been deprecated and superceded by the compliance cGtpMIBComplianceRev10.', 'Object Description has been changed for the following objects, cGtpDroppedDataMsgs, cGtpRcvdPDUMsgs, cGtpSentPDUMsgs, cGtpRcvdPDUOctets, cGtpSentPDUOctets, cGtpRcvdSigMsgs, cGtpSentSigMsgs, cGtpTotalCreatedPDPs, cGtpTotalDeletedPDPs, cGtpIpv6CreatedPDPs, cGtpIpv6DeletedPDPs, cGtpIpv4v6CreatedPDPs, cGtpIpv4v6DeletedPDPs, cGtpIpv6RcvdPDUs, cGtpIpv6SentPDUs, cGtpIpv6SentOctets, cGtpIpv6RcvdOctets.', 'The following enumerations were added to TEXTUAL-CONVENTION CGtpEntities. 1. rnc 2. eNodeB', 'The following changes have been made. [1] The following objects have been added to cGtpStatistics. cGtpNetworkBehindMsApns, cGtpTotalDownldFramedRout, cGtpTotalDownldFramedRoutSavedFail, cGtpTotalDownldFramedRoutInsFail, cGtpTotalDownldFramedRoutIns, cGtpTotalDownldFramedRoutDeleted [2] Added enumeration spgw to cGtpGSNService. [3] Added the Acronym AAA, to the description. [4] Have added the groups cGtpStatisticsGroupSup4. [5] The compliance statement cGtpMIBComplianceRev8 has been superceded by cGtpMIBComplianceRev9.', "The following changes have been made. [1] Have added the TEXTUAL-CONVENTION CGtpEntities. [2] Updated TEXTUAL-CONVENTION CGtpVersion. [3] The following objects have been added to cGtpPathTable. cGtpPathRemoteNode cGtpPathVrfName [4] The objects cGtpIpv4v6CreatedPDPs and cGtpIpv4v6DeletedPDPs to cGtpPathStatisticsTable. [5] The object cGtpHistRemoteNode, cGtpHistIpv4v6CreatedPDPs and cGtpHistIpv4v6DeletedPDPs has been added to cGtpHistPathStatisticsTable. [6] The definitions 'sgw' and 'pgw' have been added to the object cGtpGSNService. [7] Have added the groups cGtpStatusGroupSup1 and cGtpStatisticsGroupSup3. [8] The compliance statement cGtpMIBComplianceRev7 has been superceded by cGtpMIBComplianceRev8.", 'Added cGtpSgsnProfileTable to cGtpConfigurations.', 'Added cGtpUpdateFailDelete to cGtpConfigurations. Added cGtpNoWaitSgsnLocalDelPDPs, cGtpNoReqSgsnLocalDelPDPs, cGtpRoamingTrustedPDPs, cGtpRoamingNonTrustedPDPs, cGtpNonRoamingPDPs, cGtpSentPdpUpdateReqs, cGtpRcvdPdpUpdateResponses, cGtpTotalDtEnabled to cGtpPathStatisticsTable. Added cGtpHistNoWaitSgsnLocalDelPDPs, cGtpHistNoReqSgsnLocalDelPDPs, cGtpHistRoamingTrustedPDPs, cGtpHistRoamingNonTrustedPDPs, cGtpHistNonRoamingPDPs, cGtpHistSentPdpUpdateReqs, cGtpHistRcvdPdpUpdateResponses, cGtpHistTotalDtEnabled to cGtpPathStatisticsHistoryTable. Modified the description of all objects in cGtpPathStatisticsHistoryTable. Deprecated cGtpRoamingPDUs, cGtpHistRoamingPDUs, cGtpIpv6RcvdSigMsgs, cGtpIPv6SentSigMsgs, cGtpHistIpv6RcvdSigMsgs, cGtpHistIpv6SentSigMsgs.', 'Added cGtpPathHistoryLimit to cGtpConfigurations. Added the cGtpPathStatisticsTable, cGtpPathStatisticsHistoryTable to cGtpStatistics.', 'Modified the description of cGtpDynamicEchoTimerMinTime and cGtpDynamicEchoTimerSmoothFactor. Added the cGtpPathTable. The following have been deprecated cGtpGSNTable, cGtpMIBComplianceRev3, cGtpStatusGroupRev2. The following have been obsoleted cGtpT3TunnelTimer, cGtpMIBComplianceRev2, cGtpConfigurationsGroupRev1, cGtpStatusGroupRev1.', 'Added the object cGtpGSNVersion to the cGtpGSNTable. Deprecated the object cGtpT3TunnelTimer.', "Modified the default value for cGtpMaximumPdps from 1000 to 10000. Added 'gtpdirector' to the enumeration of cGtpService. The APN identifies whether the network is corporate or service provider network. The Single Access point feature enables the service provider to add new access-points to the GGSN without having to provision the HLR. The requests are sent by the SGSN to the same virtual APN. A virtual APN is not associated with any actual physical network. The GGSN processes the request and forwards the packet to the appropriate access-point that is specified in the PCO. This feature is supported only in Cisco GGSNs. The purpose of the GTP-Director is to provide a mechanism for service providers using non-Cisco GGSN to use the Single APN feature. +==+ +===+ +====+ ==== +===+ +====+ +===+ |MS|--|BSS|--|SGSN|--|PLMN|--|GDM|--|GGSN|--Gi-|PDN| +==+ +===+ +====+ ==== +===+ +====+ +===+ | | | | +====+ | |___|GGSN|------Gi | +====+ | | | | +====+ +===+ |_____|GGSN|--Gi-|PDN| +====+ +===+ The GTP-Director also provides load balancing, using round robin mechanism, across GGSNs. The Cisco GGSNs may use the GTP-Director, but is not necessary as they can use IOS-SLB ( Server Load Balancing ).", '* Added cGtpDynamicEchoTimerEnable, cGtpDynamicEchoTimerMinTime, cGtpDynamicEchoTimerSmoothFactor. * Deprecated cGtpGSNTotalBandwidthResrc, cGtpPremiumQosMeanThroughput, cGtpNormalQosMeanThroughput, cGtpBestEffortQosMeanThroughput, cGtpCurrentUsedBandwidth.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: cGtpMIB.setLastUpdated('201306180000Z')
if mibBuilder.loadTexts: cGtpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cGtpMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-gprs@cisco.com')
if mibBuilder.loadTexts: cGtpMIB.setDescription('This MIB module manages the GPRS Tunnelling Protocol (GTP) on GGSN and SGSN. GPRS provides wireless access to packet data network on the GSM infrastructure. The following diagram illustrates a simplified GPRS logical architecture with the name of inter-node interface: +---------------------------------------------+ | a PLMN +======+ +======+ | | | SGSN | | AAA | | | +======+ +======+ | | | | | | Gn SGi | | | | | |+====+ +====+ +=====+ +======+ +======+ | +===+ || TE |-R-| MT |-| BSS |-| SGSN |-Gn-| GGSN |-|-Gi-|PDN| |+====+ +====+ +=====+ +======+ +======+ | +===+ | | | | | | +----------------------------------------|----+ Gp | +-----------------------------+ | +====+ +=====+ +======+ | | | MS |---| BSS |---| SGSN | | | +====+ +=====+ +======+ | | | | other PLMN | +-----------------------------+ GTP is the protocol between GSN nodes (GSN peers) in the GPRS backbone network. It includes both the GTP signalling and data transfer procedures. GTP is used both on the Gn interface, i.e. the interface between GSN peers with in a PLMN, and the Gp interface between GSN peers in different PLMNs. SGSN is the serving GPRS support node, it responsible for the delivery of data packets from and to the MS within its service area. GGSN is the gateway GPRS support node, it provides interworking with external PDN and is connected with SGSNs via an IP-based GPRS backbone network. The GTP protocol is implemented only by SGSNs and GGSN. A PDP Context is an information set maintained by MS and GSNs which describes the mobile wireless service call or session. A Qos Profile is associated with each PDP context which defines multiple attributes like precedence, delay, reliability, peak throughput and mean throughput. Based on the precedence, delay and mean throughput an user is classified into one of the three Qos classes: Best Effort, Normal and Premium. Mean throughput is measured at the Gi and R reference points in units of octets per second. It specifies the average rate at which data is expected to be transferred across the GPRS network during the remaining lifetime of an activated PDP context. A MAP converting GSN is responsible for converting GTP messages to and from MAP messages. This helps in the communication with HLR. Acronyms and terms: APN Access Point Name BSS Base Station Subsystem CG Charging Gateway COA Change of Authorization ETSI European Telecommunications Standards Institute GDM GTP Director Module Gi Reference point between GPRS and an external packet data network. Gn the interface between GSNs within a PLMN Gp the interface between GSNs in different PLMNs GGSN Gateway GPRS Support Node GPRS General Packet Radio Service GSM Global System for Mobile communication GSN GPRS Support Node G-PDU GTP PDU HLR Home Location Register MAP Mobile Application Protocol MME Mobility Management Entity MS Mobile Station = TE + MT MT Mobile Termination NMS Network Management System PDN Public Data Network PDP Packet Data Protocol PDU Protocol Data Unit PGW PDN Gateway PLMN Public Land Mobile Network R Reference point between a non-ISDN compatible TE and MT. SAE System Architecture Evolution SGSN Serving GPRS Support Node SGW Serving Gateway TE Terminal Equipment T-PDU the payload of G-PDU VRF Virtual routing and forwarding AAA Authentication, Authorization and Accounting eNodeB Evolved Node B RNC Radio Network Controller')
class CGtpMaxHistNumber(TextualConvention, Integer32):
    description = 'This indicates the maximum number of entries allowed for PDP path and History statistics table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1000)

class CGtpVersion(TextualConvention, Integer32):
    description = 'This identifies the version of GTP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("version0", 1), ("version1", 2), ("version2", 3))

class CGtpEntities(TextualConvention, Integer32):
    description = "This textual convention enumerates the various GTP-aware remote nodes. semantics are as follows. 'sgsn' - this indicates that GTP entity is a SGSN. 'pgw' - this indicates that GTP entity is a PGW in the SAE architecture. 'sgw' - this indicates that GTP entity is a SGW in the SAE architecture. 'mme' - this indicates that GTP entity is a MME in the SAE architecture. 'cg' - this indicates that GTP entity is a CG in the SAE architecture. 'rnc' - this indicates that GTP entity is a RNC in the SAE architecture. 'eNodeB' - this indicates that GTP entity is a eNodeB in the SAE architecture."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("undefined", 0), ("sgsn", 1), ("pgw", 2), ("sgw", 3), ("mme", 4), ("cg", 5), ("rnc", 6), ("eNodeB", 7))

cGtpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 1))
cGtpConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1))
cGtpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2))
cGtpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3))
cGtpGSNService = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 1), Bits().clone(namedValues=NamedValues(("undefined", 0), ("sgsn", 1), ("ggsn", 2), ("gtpdirector", 3), ("sgw", 4), ("pgw", 5), ("spgw", 6))).clone(namedValues=NamedValues(("undefined", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpGSNService.setStatus('current')
if mibBuilder.loadTexts: cGtpGSNService.setDescription('This object indicates the type of GPRS service that will be enabled on the device: undefined - the GPRS service functionality is turned off. ggsn - the device will function as a GGSN. sgsn - the device will function as SGSN. gtpdirector - the device will function as GDM. sgw - the device will function as a SGW in the SAE architecture. pgw - the device will function as a PGW in the SAE architecture. spgw - the device will function as a combined PGW and SGW in the SAE architecture. When the device is configured to function as GDM, all the other objects in this MIB will not be accessible and the CISCO-GTP-DIRECTOR-MIB should be used for managing the device.')
cGtpVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 2), CGtpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpVersion.setStatus('current')
if mibBuilder.loadTexts: cGtpVersion.setDescription('The highest gtp version supported by the GSN. When the value is, version0 - GTP v0 is supported, version1 - GTP v1 and GTP v0 are supported, version2 - GTP v0, GTP v1 and GTP v2 are supported.')
cGtpT3TunnelTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpT3TunnelTimer.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpT3TunnelTimer.setDescription("When the GSN behaves as SGSN, the T3-TUNNEL timer is used for mobility management. When a roaming MS moves from one SGSN(Old SGSN) to a another SGSN(New SGSN), this timer is started by the 'Old SGSN'. While the timer is running, the T-PDUs received by the 'Old SGSN' (from the GGSN), and any buffered T-PDUs are forwarded to the 'New SGSN'. When the GSN behaves as GGSN, the GGSN starts this timer after receiving a Update PDP Context request message from 'New SGSN'. An Update PDP context request shall be sent by SGSN as part of mobility management intimating that MS has moved to this SGSN. While the timer is running, the GGSN will not be forwarding any PDUs to the requesting 'New SGSN'.")
cGtpT3ResponseTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpT3ResponseTimer.setStatus('current')
if mibBuilder.loadTexts: cGtpT3ResponseTimer.setDescription('The T3-RESPONSE timer for retransmission. This timer is started by a GSN, upon the transmission of a signalling request message; it is used for message retransmission purposes, in the event that no response is received by the time the timer expires.')
cGtpN3Request = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setUnits('retransmissions').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpN3Request.setStatus('current')
if mibBuilder.loadTexts: cGtpN3Request.setDescription('Maximum number of retransmissions for a signalling request message if no corresponding response message is received for a request in cGtpT3ResponseTimer time.')
cGtpN3BufferSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2048, 65535)).clone(8192)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpN3BufferSize.setStatus('current')
if mibBuilder.loadTexts: cGtpN3BufferSize.setDescription('Maximum size of the receive buffer for G-PDUs and signalling request messages. If a packet arrives with more data bytes than the receive buffer can contain, the packet will be discarded.')
cGtpEchoRequestTimerEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpEchoRequestTimerEnable.setStatus('current')
if mibBuilder.loadTexts: cGtpEchoRequestTimerEnable.setDescription('This object indicates whether Echo Request timer is used by the GGSN. - true : will enable the Echo Request timer. - false : will disable the Echo Request timer.')
cGtpEchoRequestTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpEchoRequestTimer.setStatus('current')
if mibBuilder.loadTexts: cGtpEchoRequestTimer.setDescription("The time interval to transmit 'Echo Request' message. 'Echo Response' message is normally received in response to 'Echo Request' message. In the event of no response to the 'Echo Request' message, a notification is generated identifying the peer GSN (i.e. cGtpGSN Address), which fails to respond. This object can be retrieved only if cGtpEchoRequestTimerEnable is set to 'true'.")
cGtpGSNTotalBandwidthResrc = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1048576)).setUnits('bits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpGSNTotalBandwidthResrc.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpGSNTotalBandwidthResrc.setDescription('The total amount of bandwidth resource on the GSN, this total depends on various factors like system throughput, memory size, maximum number of PDP contexts supported. A portion of the total resources will be allocated to a user at the PDP context activation time based on the Qos class the user is assigned to.')
cGtpMaximumPdps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(10000)).setUnits('PDP contexts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpMaximumPdps.setStatus('current')
if mibBuilder.loadTexts: cGtpMaximumPdps.setDescription('The maximum number of PDP contexts that can be activated on the GSN.')
cGtpNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cGtpNotifEnable.setDescription("Indicates whether cGtpNotifications notification will be sent when a notification is generated by the device. - 'true', it will enable the device to send a notification. - 'false', it will prevent the device from sending out a notification.")
cGtpDynamicEchoTimerEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpDynamicEchoTimerEnable.setStatus('current')
if mibBuilder.loadTexts: cGtpDynamicEchoTimerEnable.setDescription('This object indicates whether dynamic echo timer is used by the GGSN. - true : will enable the dynamic echo timer. - false : will disable the dynamic echo timer.')
cGtpDynamicEchoTimerMinTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpDynamicEchoTimerMinTime.setStatus('current')
if mibBuilder.loadTexts: cGtpDynamicEchoTimerMinTime.setDescription("This object specifies the minimum time used by the dynamic echo timer. This object should be ignored if cGtpDynamicEchoTimerEnable is set to 'false'.")
cGtpDynamicEchoTimerSmoothFactor = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpDynamicEchoTimerSmoothFactor.setStatus('current')
if mibBuilder.loadTexts: cGtpDynamicEchoTimerSmoothFactor.setDescription("This object specifies the smooth factor by which dynamic echo timer can be adjusted. This object should be ignored if cGtpDynamicEchoTimerEnable is set to 'false'.")
cGtpPathHistoryLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 15), CGtpMaxHistNumber().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpPathHistoryLimit.setStatus('current')
if mibBuilder.loadTexts: cGtpPathHistoryLimit.setDescription('This object specifies the maximum number of entries in the cGtpPathStatisticsHistoryTable.')
cGtpUpdateFailDelete = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGtpUpdateFailDelete.setStatus('current')
if mibBuilder.loadTexts: cGtpUpdateFailDelete.setDescription("This object specifies whether the delete action will be taken when a COA initiated update request for QOS change fails for a PDP context. If the object is set to 'true' and the update response from SGSN (for a update request) is not got after the retries or the received response indicates a cause value other than 'request accepted', then the PDP context will be deleted by GGSN.")
cGtpSgsnProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18), )
if mibBuilder.loadTexts: cGtpSgsnProfileTable.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileTable.setDescription('This table provides the configuration on SGSN profiles identified by addresses and port numbers configured in GGSN and the associated profile actions to be applied. When an SGSN path identified by cGtpPathAddress and cGtpPathPort in cGtpPathEntry matches the profile matching criteria represented by cGtpSgsnProfileIpAddressType cGtpSgsnProfileStartIpAddress, cGtpSgsnProfileEndIpAddress and cGtpSgsnProfilePortNumber, the actions associated with the profile entry (such as disable echo) will be applied on the corresponding SGSN path.')
cGtpSgsnProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1), ).setIndexNames((0, "CISCO-GTP-MIB", "cGtpSgsnProfileIndex"))
if mibBuilder.loadTexts: cGtpSgsnProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileEntry.setDescription('An entry in this table. Entries in the cGtpSgsnProfileTable are created and deleted using the cGtpSgsnProfileRowStatus object.')
cGtpSgsnProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cGtpSgsnProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileIndex.setDescription('An arbitrary integer-value to uniquely identify a row in in the cGtpSgsnProfileTable.')
cGtpSgsnProfileIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGtpSgsnProfileIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileIpAddressType.setDescription('This object indicates the type of Internet address of the objects cGtpSgsnStartIpAddress and cGtpSgsnEndIpAddress in the same row.')
cGtpSgsnProfileStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGtpSgsnProfileStartIpAddress.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileStartIpAddress.setDescription('This object indicates the start address of the SGSN node in the address range associated with this SGSN profile.')
cGtpSgsnProfileEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGtpSgsnProfileEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileEndIpAddress.setDescription('This object indicates the end address of the SGSN node in the address range associated with this SGSN profile.')
cGtpSgsnProfilePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGtpSgsnProfilePortNumber.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfilePortNumber.setDescription('This object indicates the port number of the SGSN node associated with this SGSN profile.')
cGtpSgsnProfileEchoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGtpSgsnProfileEchoDisable.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileEchoDisable.setDescription("This object indicates whether the GTP echo status is disabled or not for the addresses and port associated with this SGSN profile. The value 'true' indicates that echo is disabled for this profile, while the value 'false' indicates that echo is enabled for this profile.")
cGtpSgsnProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGtpSgsnProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
cGtpSgsnProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 1, 18, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGtpSgsnProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cGtpSgsnProfileRowStatus.setDescription("This object is used to manage creation and deletion of rows in this table. Objects in this row cannot be modified when this entry is 'active'.")
cGtpLastNoRespToEchoGSNIpAddrTyp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpLastNoRespToEchoGSNIpAddrTyp.setStatus('current')
if mibBuilder.loadTexts: cGtpLastNoRespToEchoGSNIpAddrTyp.setDescription('This object indicates the type of Internet address by which cGtpLastNoRespToEchoGSNIpAddr is reachable.')
cGtpLastNoRespToEchoGSNIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpLastNoRespToEchoGSNIpAddr.setStatus('current')
if mibBuilder.loadTexts: cGtpLastNoRespToEchoGSNIpAddr.setDescription("The IP address of the last peer GSN device that did not reply to an GTP 'Echo Request' message from the local GSN device.")
cGtpPremiumQosMeanThroughput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 3), Gauge32()).setUnits('bytes/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpPremiumQosMeanThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpPremiumQosMeanThroughput.setDescription('The sum of the mean throughput for premium class QOS users on the GSN.')
cGtpNormalQosMeanThroughput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 4), Gauge32()).setUnits('bytes/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpNormalQosMeanThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpNormalQosMeanThroughput.setDescription('The sum of the mean throughput for normal class QOS users on the GSN.')
cGtpBestEffortQosMeanThroughput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 5), Gauge32()).setUnits('bytes/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpBestEffortQosMeanThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpBestEffortQosMeanThroughput.setDescription('The sum of the mean throughput for best-effort class QOS users on the GSN.')
cGtpGSNTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 6), )
if mibBuilder.loadTexts: cGtpGSNTable.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpGSNTable.setDescription('GSN peer table. The SGSN-GGSN peer relationship is established as given in the following series of steps: 1. When Mobile System (MS) wants service, it sends packets to a SGSN with specific APN. 2. SGSN uses the DNS to resolve this APN to the IP address of the GGSN which is the designated as the gateway to this APN. 3. SGSN establishes a path to the GGSN using GTP protocol. 4. The SGSN and GGSN peer maintains path by sending echo request message to each other. If one side fails in echo reply for certain times, the other side will send a notification to NMS. A SGSN can have multiple GGSN as peers, while a GGSN can have multiple SGSN peers, depending on routing path.')
cGtpGSNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-GTP-MIB", "cGtpGSNAddressType"), (0, "CISCO-GTP-MIB", "cGtpGSNAddress"))
if mibBuilder.loadTexts: cGtpGSNEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpGSNEntry.setDescription('GSN entry. The entry is created when a path between a GGSN and SGSN is setup and the corresponding peer is not yet listed in the GSN peer table. The entry is deleted when the path is released, or echo test message on the path times out after certain retry number defined as cGtpN3Request.')
cGtpGSNAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cGtpGSNAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpGSNAddressType.setDescription('The type of Internet address by which cGtpGSNAddress is reachable.')
cGtpGSNAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 6, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpGSNAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpGSNAddress.setDescription('Ip address that uniquely identify a GSN node.')
cGtpGSNVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 6, 1, 3), CGtpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpGSNVersion.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpGSNVersion.setDescription('This object represents the GTP version supported by the GSN node, identified by cGtpGSNAddressType and cGtpGSNAddress. The value: version0 - represents GTP version0 and version1 - represents GTP version1.')
cGtpPathTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 7), )
if mibBuilder.loadTexts: cGtpPathTable.setStatus('current')
if mibBuilder.loadTexts: cGtpPathTable.setDescription('This table identifies the paths established on a GSN. The path may be established between a GGSN and SGSN or GGSN and charging gateway or GGSN and MAP converting GSN. The path between GGSN and charging gateway is established when the charging gateway is configured on the GGSN. The path between GGSN and MAP converting GSN is established when the MAP converting GSN is configured on the GGSN. The path between a GGSN and SGSN is established in the following series of steps: 1. When Mobile System (MS) wants service, it sends packets to a SGSN with specific APN. 2. SGSN uses the DNS to resolve this APN to the IP address of the GGSN which is the designated as the gateway to this APN. 3. SGSN establishes a path to the GGSN using GTP protocol. 4. The SGSN and GGSN peer maintains path by sending echo request message to each other. If one side fails in echo reply for certain times, the other side will send a trap to NMS. A SGSN can have multiple GGSN as peers, while a GGSN can have multiple SGSN peers, depending on routing path. Moreover, a GSN can have more than one path to a peer, each of which will have a unique port.')
cGtpPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-GTP-MIB", "cGtpPathAddressType"), (0, "CISCO-GTP-MIB", "cGtpPathAddress"), (0, "CISCO-GTP-MIB", "cGtpPathPort"))
if mibBuilder.loadTexts: cGtpPathEntry.setStatus('current')
if mibBuilder.loadTexts: cGtpPathEntry.setDescription('The entry is created: 1. When a path between a GGSN and SGSN is setup. 2. Or, when a path between the GGSN and the charging gateway is setup. 3. Or, when a path between GGSN and the MAP converting GSN is setup. The entry is deleted when the path is released, or echo test message on the path times out after certain retry number defined as cGtpN3Request.')
cGtpPathAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cGtpPathAddressType.setStatus('current')
if mibBuilder.loadTexts: cGtpPathAddressType.setDescription('The type of Internet address by which cGtpPathAddress is reachable.')
cGtpPathAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 7, 1, 2), InetAddress())
if mibBuilder.loadTexts: cGtpPathAddress.setStatus('current')
if mibBuilder.loadTexts: cGtpPathAddress.setDescription('An address that uniquely identifies a remote node to which this path is established.')
cGtpPathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 7, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: cGtpPathPort.setStatus('current')
if mibBuilder.loadTexts: cGtpPathPort.setDescription('This object identifies the port on the remote node. The value of zero is invalid.')
cGtpPathVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 7, 1, 4), CGtpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpPathVersion.setStatus('current')
if mibBuilder.loadTexts: cGtpPathVersion.setDescription('This object represents the GTP version of the path identified by cGtpPathEntry. The value: version0 - represents GTP version0 and version1 - represents GTP version1.')
cGtpPathRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 7, 1, 5), CGtpEntities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpPathRemoteNode.setStatus('current')
if mibBuilder.loadTexts: cGtpPathRemoteNode.setDescription('This object represents the remote node associated to the path identified by this entry.')
cGtpPathVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 7, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpPathVrfName.setStatus('current')
if mibBuilder.loadTexts: cGtpPathVrfName.setDescription('This object represents the VRF name on the inter-node interface through which this GTP path is established.')
cGtpTotalActivePaths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 8), Gauge32()).setUnits('Paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalActivePaths.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalActivePaths.setDescription('This object represents the total number of paths currently active on the gateway.')
cGtpTotalActiveGtpv1DataPaths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 2, 9), Gauge32()).setUnits('Paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalActiveGtpv1DataPaths.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalActiveGtpv1DataPaths.setDescription('This object represents the total number of GTPv1-U data paths currently active on the gateway.')
cGtpPathFailureOccurrences = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 1), Counter32()).setUnits('times').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpPathFailureOccurrences.setStatus('current')
if mibBuilder.loadTexts: cGtpPathFailureOccurrences.setDescription("The number of times that any one of this GSN's peers failed to respond to an GTP 'Echo Request' messages during the waiting intervals.")
cGtpCurrentUsedBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 2), Gauge32()).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpCurrentUsedBandwidth.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpCurrentUsedBandwidth.setDescription('The current amount of bandwith resource used on the GSN.')
cGtpTotalDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDroppedPackets.setDescription('The total number of received GTP packets that could not be processed and are dropped since system started.')
cGtpPathStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4), )
if mibBuilder.loadTexts: cGtpPathStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cGtpPathStatisticsTable.setDescription('The table has the statistics for each SGSN path established.')
cGtpPathStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-GTP-MIB", "cGtpPathAddressType"), (0, "CISCO-GTP-MIB", "cGtpPathAddress"), (0, "CISCO-GTP-MIB", "cGtpPathPort"))
if mibBuilder.loadTexts: cGtpPathStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cGtpPathStatisticsEntry.setDescription('An entry in this table. Creation of row(s) will happen when a PATH is established. Deletion of row(s) will happen when the PATH gets removed.')
cGtpUnexpectedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 1), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpUnexpectedMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpUnexpectedMsgs.setDescription('This object represents the number of unexpected PDUs received. Trigger Condition: The counter is incremented when GGSN receives a GTP PDU for nonexistent PDP context.')
cGtpDroppedDataMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 2), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpDroppedDataMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpDroppedDataMsgs.setDescription('This object represents the number of GTP PDUs dropped on a GTP-U data path.')
cGtpRcvdPDUMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 3), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpRcvdPDUMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpRcvdPDUMsgs.setDescription('This object represents the number of PDU messages received on a GTP-U data path.')
cGtpSentPDUMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 4), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpSentPDUMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpSentPDUMsgs.setDescription('This object represents the number of PDU messages sent on a GTP-U data path.')
cGtpRcvdPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpRcvdPDUOctets.setStatus('current')
if mibBuilder.loadTexts: cGtpRcvdPDUOctets.setDescription('This object represents the number of bytes received in PDU message on a GTP-U data path.')
cGtpSentPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 6), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpSentPDUOctets.setStatus('current')
if mibBuilder.loadTexts: cGtpSentPDUOctets.setDescription('This object represents the number of bytes sent in PDU message on a GTP-U data path.')
cGtpMsgTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpMsgTooShort.setStatus('current')
if mibBuilder.loadTexts: cGtpMsgTooShort.setDescription('This object represents the number of GTP-PDU messages which are too short. Trigger Condition: The counter is incremented when a GTP message received that is too short to hold the GTP header for the supported GTP version.')
cGtpUnknownMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpUnknownMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpUnknownMsgs.setDescription('This object represents the number of unknown GTP messages received. Trigger Condition: The counter is incremented when a message using a Message Type value defining an unknown GTP signalling message is received.')
cGtpUnexpectedSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpUnexpectedSigMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpUnexpectedSigMsgs.setDescription('This object represents the number of unexpected GTP signaling messages received. Trigger Condition: The counter is incremented when a message received on the wrong end of the tunnel or a response message received for a request that was not sent by the GGSN.')
cGtpRoamingPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 10), Counter32()).setUnits('pdus').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpRoamingPDUs.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpRoamingPDUs.setDescription('This object represents the number of PDUs received from a roaming MS on a SGSN path. This object is deprecated and replaced with more specific objects cGtpRoamingTrustedPDPs and cGtpRoamingNonTrustedPDPs.')
cGtpSecurityViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpSecurityViolations.setStatus('current')
if mibBuilder.loadTexts: cGtpSecurityViolations.setDescription('This objects represents the number of security violations happened on each SGSN path. Trigger Condition: The counter is incremented when a GGSN receives the packet from MS with source or destination address violation.')
cGtpUnsupportedExtHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 12), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpUnsupportedExtHdr.setStatus('current')
if mibBuilder.loadTexts: cGtpUnsupportedExtHdr.setDescription('This object represents the number of create PDP context requests received with unsupported extension headers.')
cGtpPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpPathFailures.setStatus('current')
if mibBuilder.loadTexts: cGtpPathFailures.setDescription('This object represents the number of path failures on the GGSN. Trigger Condition: The counter is incremented when the transmit response timer expires for any message sent on the path.')
cGtpTotalDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDropped.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDropped.setDescription('This object represents the number of dropped packets by GGSN.')
cGtpDroppedSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 15), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpDroppedSigMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpDroppedSigMsgs.setDescription('This object represents the number of signalling packets dropped by GGSN.')
cGtpRcvdSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 16), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpRcvdSigMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpRcvdSigMsgs.setDescription('This object represents the number of signaling messages received on a GTP-C signaling path.')
cGtpSentSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 17), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpSentSigMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpSentSigMsgs.setDescription('This object represents the number of signaling messages sent on a GTP-C signaling path.')
cGtpTotalCreatedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 18), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalCreatedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalCreatedPDPs.setDescription('This object represents the number of created PDPs on this path since the path was created. This includes static, dynamic, IP PDPs.')
cGtpTotalDeletedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 19), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDeletedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDeletedPDPs.setDescription('This object represents the number of PDPs deleted on this path since the path was created.')
cGtpTotalCreatedPppPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 20), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalCreatedPppPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalCreatedPppPDPs.setDescription('This object represents the number of PPP PDPs created since the system is up.')
cGtpTotalDeletedPppPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 21), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDeletedPppPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDeletedPppPDPs.setDescription('This object represents the number of PPP PDPs deleted since the system is up.')
cGtpSinglePDPSessCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 22), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpSinglePDPSessCleared.setStatus('current')
if mibBuilder.loadTexts: cGtpSinglePDPSessCleared.setDescription('This object represents the number of hanging single PDP contexts cleared on the GGSN.')
cGtpPathFailLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 23), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpPathFailLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpPathFailLocalDelPDPs.setDescription('This object represents the number of PDPs deleted locally because of path failure.')
cGtpVerUpgradeLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 24), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpVerUpgradeLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpVerUpgradeLocalDelPDPs.setDescription('This object represents the number of PDPs, which are deleted locally, due to version upgrade.')
cGtpNoSgsnLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 25), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpNoSgsnLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpNoSgsnLocalDelPDPs.setDescription('This object indicates the number of PDPs, which are deleted locally without sending delete PDP request. If GPRS service is turned off, or GGSN is in standby mode, the PDPs are deleted locally.')
cGtpVerFallbackLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 26), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpVerFallbackLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpVerFallbackLocalDelPDPs.setDescription('This object indicates the number of PDPs, which are deleted locally, due to fallback in GTP version. Trigger condition: The counter is incremented when GGSN receives create request of version0 PDP which exists on GTP version1 path.')
cGtpCreateCollideWithDel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpCreateCollideWithDel.setStatus('current')
if mibBuilder.loadTexts: cGtpCreateCollideWithDel.setDescription('This object represents the number of collisions happened when a PDP is locally deleted and recreated.')
cGtpVersionChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpVersionChanges.setStatus('current')
if mibBuilder.loadTexts: cGtpVersionChanges.setDescription('This object represents the number of GTP version changes occurred on a SGSN path. Trigger condition: The counter is incremented when GGSN receives create request for version1 PDP, which exists on GTP version0 path.')
cGtpRetransCreatePDPReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpRetransCreatePDPReqs.setStatus('current')
if mibBuilder.loadTexts: cGtpRetransCreatePDPReqs.setDescription('This object indicates the number of retransmitted create PDP requests received. Trigger condition: The counter is incremented when GGSN receives create PDP request with same sequence number as before.')
cGtpCreateAsUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpCreateAsUpdate.setStatus('current')
if mibBuilder.loadTexts: cGtpCreateAsUpdate.setDescription('This object represents the number of create requests received, which are treated as update request on GGSN. Trigger condition: The counter is incremented when GGSN receives create request for an existing PDP.')
cGtpIpv6PdpActRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 31), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6PdpActRejects.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv6PdpActRejects.setDescription('This object represents the number of IPv6 PDP activation rejected by the GGSN.')
cGtpIpv6CreatedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 32), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6CreatedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv6CreatedPDPs.setDescription('This object represents the total number of IPv6 PDPs successfully created on a GTP-C signaling or a GTP-U data path. This includes static,dynamic, IP PDPs.')
cGtpIpv6DeletedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 33), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6DeletedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv6DeletedPDPs.setDescription('This object indicates the total number of IPv6 PDPs deleted on a GTP-C signaling or a GTP-U data path.')
cGtpIpv6RcvdSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 34), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6RcvdSigMsgs.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpIpv6RcvdSigMsgs.setDescription('This object represents the total number of IPv6 signaling messages received on SGSN path. This object is deprecated as there is no corresponding counter in GGSN. All signaling messages received are indicated by cGtpRcvdSigMsgs.')
cGtpIpv6SentSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 35), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6SentSigMsgs.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpIpv6SentSigMsgs.setDescription('This object represents the number of IPv6 signaling messages sent on SGSN path. This object is deprecated as there is no corresponding counter in GGSN. All signaling messages sent are indicated by cGtpSentSigMsgs.')
cGtpIpv6RcvdPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 36), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6RcvdPDUs.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv6RcvdPDUs.setDescription('This object represents the total number of IPv6 PDU messages received on a GTP-U data path.')
cGtpIpv6SentPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 37), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6SentPDUs.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv6SentPDUs.setDescription('This object represents the total number of IPv6 PDU messages sent on a GTP-U data path.')
cGtpIpv6RcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 38), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6RcvdOctets.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv6RcvdOctets.setDescription('This object represents the number of bytes received in IPv6 PDU message on a GTP-U data path.')
cGtpIpv6SentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 39), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv6SentOctets.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv6SentOctets.setDescription('This object represents the number of bytes sent in IPv6 PDU message on a GTP-U data path.')
cGtpNoWaitSgsnLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 40), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpNoWaitSgsnLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpNoWaitSgsnLocalDelPDPs.setDescription('This object indicates the number of PDPs deleted for a given SGSN path in GGSN without waiting for a delete PDP context response from the SGSN.')
cGtpNoReqSgsnLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 41), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpNoReqSgsnLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpNoReqSgsnLocalDelPDPs.setDescription('This object indicates the number of PDPs deleted locally in GGSN on a SGSN path without sending a delete PDP request to the SGSN.')
cGtpRoamingTrustedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 42), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpRoamingTrustedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpRoamingTrustedPDPs.setDescription('This object indicates the number of roaming PDP contexts in a trusted PLMN.')
cGtpRoamingNonTrustedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 43), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpRoamingNonTrustedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpRoamingNonTrustedPDPs.setDescription('This object indicates the number of roaming PDP contexts that are not in a trusted PLMN.')
cGtpNonRoamingPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 44), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpNonRoamingPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpNonRoamingPDPs.setDescription('This object indicates the number of non-roaming PDPs on a SGSN path.')
cGtpSentPdpUpdateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 45), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpSentPdpUpdateReqs.setStatus('current')
if mibBuilder.loadTexts: cGtpSentPdpUpdateReqs.setDescription('This object indicates the total number of GGSN initiated update PDP requests sent on a SGSN path.')
cGtpRcvdPdpUpdateResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 46), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpRcvdPdpUpdateResponses.setStatus('current')
if mibBuilder.loadTexts: cGtpRcvdPdpUpdateResponses.setDescription('This object indicates the total number of update PDP responses received from the SGSN for the GGSN initiated update PDP requests.')
cGtpTotalDtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDtEnabled.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDtEnabled.setDescription('This object indicates the total number of times Direct tunnel is enabled for the PDP contexts in GGSN.')
cGtpIpv4v6CreatedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv4v6CreatedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv4v6CreatedPDPs.setDescription('This object represents the total number of IPv4v6 PDPs successfully created on a GTP-C signaling or a GTP-U data path.')
cGtpIpv4v6DeletedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 4, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpIpv4v6DeletedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpIpv4v6DeletedPDPs.setDescription('This object indicates the total number of IPv4v6 PDPs deleted on a GTP-C signaling or a GTP-U data path.')
cGtpPathStatisticsHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5), )
if mibBuilder.loadTexts: cGtpPathStatisticsHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cGtpPathStatisticsHistoryTable.setDescription('This table indicates historical information for GTP paths which have been deleted.')
cGtpPathStatisticsHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-GTP-MIB", "cGtpHistIndex"), (0, "CISCO-GTP-MIB", "cGtpHistRemoteAddrType"), (0, "CISCO-GTP-MIB", "cGtpHistRemoteAddress"), (0, "CISCO-GTP-MIB", "cGtpHistRemotePort"))
if mibBuilder.loadTexts: cGtpPathStatisticsHistEntry.setStatus('current')
if mibBuilder.loadTexts: cGtpPathStatisticsHistEntry.setDescription('An entry in this table. Creation of row(s) will happen when a PATH is removed. Deletion of row(s) will happen when the PATH entry limit, given by the object cGtpPathHistoryLimit, is reached. The oldest paths will be removed once the limit is reached.')
cGtpHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 1), CGtpMaxHistNumber())
if mibBuilder.loadTexts: cGtpHistIndex.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIndex.setDescription('This object indicates the history number of an entry.')
cGtpHistRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cGtpHistRemoteAddrType.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRemoteAddrType.setDescription('This object indicates the type of the Internet address of the object cGtpHistRemoteAddress.')
cGtpHistRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 3), InetAddress())
if mibBuilder.loadTexts: cGtpHistRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRemoteAddress.setDescription('This object indicates the Internet address for the remote end of the GTP path, such as the address of the SGSN.')
cGtpHistRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: cGtpHistRemotePort.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRemotePort.setDescription('This object indicates the port number for the remote end of the GTP path.')
cGtpHistUnexpectedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistUnexpectedMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistUnexpectedMsgs.setDescription('This object indicates the historical number of unexpected PDUs received. Trigger Condition: The counter is incremented when GGSN receives a GTP PDU for nonexistent PDP context.')
cGtpHistDroppedDataMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistDroppedDataMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistDroppedDataMsgs.setDescription('This object indicates the historical number of GTP PDUs dropped for a specific SGSN path.')
cGtpHistRcvdPDUMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRcvdPDUMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRcvdPDUMsgs.setDescription('This object indicates the historical number of PDU messages received on a SGSN path.')
cGtpHistSentPDUMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistSentPDUMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistSentPDUMsgs.setDescription('This object indicates the historical number of PDU messages sent on a SGSN path.')
cGtpHistRcvdPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRcvdPDUOctets.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRcvdPDUOctets.setDescription('This object indicates the historical number of bytes received in PDU message on a SGSN path.')
cGtpHistSentPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistSentPDUOctets.setStatus('current')
if mibBuilder.loadTexts: cGtpHistSentPDUOctets.setDescription('This object indicates the historical number of bytes sent in PDU message on a SGSN path.')
cGtpHistMsgTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistMsgTooShort.setStatus('current')
if mibBuilder.loadTexts: cGtpHistMsgTooShort.setDescription('This object indicates the historical number of GTP-PDU messages which are too short. Trigger Condition: The counter is incremented when a GTP message received that is too short to hold the GTP header for the supported GTP version.')
cGtpHistUnknownMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 12), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistUnknownMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistUnknownMsgs.setDescription('This object indicates the historical number of unknown GTP messages received. Trigger Condition: The counter is incremented when a message using a Message Type value defining an unknown GTP signalling message is received.')
cGtpHistUnexpectedSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 13), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistUnexpectedSigMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistUnexpectedSigMsgs.setDescription('This object indicates the historical number of unexpected GTP signaling messages received. Trigger Condition: The counter is incremented when a message received on the wrong end of the tunnel or a response message received for a request that was not sent by the GGSN.')
cGtpHistRoamingPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 14), Counter32()).setUnits('pdus').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRoamingPDUs.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpHistRoamingPDUs.setDescription('This object indicates the historical number of PDUs received from a roaming MS on a SGSN path. This object is deprecated and replaced with more specific objects cGtpHistRoamingTrustedPDPs, cGtpHistRoamingNonTrustedPDPs.')
cGtpHistSecurityViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistSecurityViolations.setStatus('current')
if mibBuilder.loadTexts: cGtpHistSecurityViolations.setDescription('This object indicates the historical number of security violations happened on each SGSN path. Trigger Condition: The counter is incremented when a GGSN receives the packet from MS with source or destination address violation.')
cGtpHistUnsupportedExtHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 16), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistUnsupportedExtHdr.setStatus('current')
if mibBuilder.loadTexts: cGtpHistUnsupportedExtHdr.setDescription('This object indicates the historical number of create PDP context requests received with unsupported extension headers.')
cGtpHistPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistPathFailures.setStatus('current')
if mibBuilder.loadTexts: cGtpHistPathFailures.setDescription('This object indicates the historical number of path failures on the GGSN. Trigger Condition: The counter is incremented when the transmit response timer expires for any message sent on the path.')
cGtpHistTotalDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistTotalDropped.setStatus('current')
if mibBuilder.loadTexts: cGtpHistTotalDropped.setDescription('This object indicates the historical number of dropped packets by GTP.')
cGtpHistDroppedSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 19), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistDroppedSigMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistDroppedSigMsgs.setDescription('This object indicates the historical number of signalling packets dropped by GGSN.')
cGtpHistRcvdSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 20), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRcvdSigMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRcvdSigMsgs.setDescription('This object indicates the historical number of signaling messages received on a GTP-C signaling path.')
cGtpHistSentSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 21), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistSentSigMsgs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistSentSigMsgs.setDescription('This object indicates the historical number of signaling messages sent on a GTP-C signaling path.')
cGtpHistTotalCreatedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 22), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistTotalCreatedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistTotalCreatedPDPs.setDescription('This object indicates the historical number of created PDPs since system is up. This includes static, dynamic, IP PDPs.')
cGtpHistTotalDeletedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 23), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistTotalDeletedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistTotalDeletedPDPs.setDescription('This object indicates the historical number of PDPs deleted since system is up.')
cGtpHistTotalCreatedPppPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 24), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistTotalCreatedPppPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistTotalCreatedPppPDPs.setDescription('This object indicates the historical number of PPP PDPs created since the system is up.')
cGtpHistTotalDeletedPppPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 25), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistTotalDeletedPppPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistTotalDeletedPppPDPs.setDescription('This object indicates the historical number of PPP PDPs deleted since the system is up.')
cGtpHistSinglePDPSessCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 26), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistSinglePDPSessCleared.setStatus('current')
if mibBuilder.loadTexts: cGtpHistSinglePDPSessCleared.setDescription('This object indicates the historical number of hanging single PDP contexts cleared on the GGSN.')
cGtpHistPathFailLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 27), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistPathFailLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistPathFailLocalDelPDPs.setDescription('This object indicates the historical number of PDPs deleted locally because of path failure.')
cGtpHistVerUpgradeLocalDel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 28), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistVerUpgradeLocalDel.setStatus('current')
if mibBuilder.loadTexts: cGtpHistVerUpgradeLocalDel.setDescription('This object indicates the historical number of PDPs, which are deleted locally, due to version upgrade.')
cGtpHistNoSgsnLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 29), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistNoSgsnLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistNoSgsnLocalDelPDPs.setDescription('This object indicates the historical number of PDPs, which are deleted locally without sending delete PDP request. If GPRS service is turned off, or GGSN is in standby mode, the PDPs are deleted locally.')
cGtpHistVerFallbackLocalDel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 30), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistVerFallbackLocalDel.setStatus('current')
if mibBuilder.loadTexts: cGtpHistVerFallbackLocalDel.setDescription('This object indicates the historical number of PDPs, which are deleted locally, due to fallback in GTP version. Trigger condition: The counter is incremented when GGSN receives create request for version0 PDP which exists on GTP version1 path.')
cGtpHistCreateCollideWithDel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistCreateCollideWithDel.setStatus('current')
if mibBuilder.loadTexts: cGtpHistCreateCollideWithDel.setDescription('This object indicates the historical number of collisions happened when a PDP is locally deleted and recreated.')
cGtpHistVersionChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistVersionChanges.setStatus('current')
if mibBuilder.loadTexts: cGtpHistVersionChanges.setDescription('This object indicates the historical number of GTP version changes occured on a SGSN path. Trigger condition: The counter is incremented when GGSN receives create request for version1 PDP, which exists on GTP version0 path.')
cGtpHistRetransCreatePDPReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRetransCreatePDPReqs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRetransCreatePDPReqs.setDescription('This object indicates the historical number of retransmitted create PDP requests received. Trigger condition: The counter is incremented when GGSN receives create PDP request with same sequence number as before.')
cGtpHistCreateAsUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistCreateAsUpdate.setStatus('current')
if mibBuilder.loadTexts: cGtpHistCreateAsUpdate.setDescription('This object indicates the historical number of create requests received, which are treated as update request on GGSN. Trigger condition: The counter is incremented when GGSN receives create request for an existing PDP.')
cGtpHistIpv6PdpActRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 35), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6PdpActRejects.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv6PdpActRejects.setDescription('This object indicates the historical number of IPv6 PDP activation rejected by the GGSN.')
cGtpHistIpv6CreatedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 36), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6CreatedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv6CreatedPDPs.setDescription('This object indicates the historical number of IPv6 PDPs successfully created on SGSN path. This includes static, dynamic IP PDPs.')
cGtpHistIpv6DeletedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 37), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6DeletedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv6DeletedPDPs.setDescription('This object indicates the historical number of IPv6 PDPs deleted on SGSN path.')
cGtpHistIpv6RcvdSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 38), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6RcvdSigMsgs.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpHistIpv6RcvdSigMsgs.setDescription('This object indicates the historical number of IPv6 signaling messages received on SGSN path. This object is deprecated as there is no corresponding counter in GGSN. The historical number of all the signaling messages received is denoted by cGtpHistRcvdSigMsgs.')
cGtpHistIpv6SentSigMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 39), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6SentSigMsgs.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpHistIpv6SentSigMsgs.setDescription('This object indicates the historical number of IPv6 signaling messages sent on SGSN path. This object is deprecated as there is no corresponding counter in GGSN. The historical number of all signaling messages sent is denoted by cGtpHistSentSigMsgs.')
cGtpHistIpv6RcvdPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 40), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6RcvdPDUs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv6RcvdPDUs.setDescription('This object indicates the historical number of IPv6 PDU messages received on SGSN path.')
cGtpHistIpv6SentPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 41), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6SentPDUs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv6SentPDUs.setDescription('This object indicates the historical number of IPv6 PDU messages sent on SGSN path.')
cGtpHistIpv6RcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 42), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6RcvdOctets.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv6RcvdOctets.setDescription('This object indicates the historical number of bytes received in IPV6 PDU message on SGSN path.')
cGtpHistIpv6SentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 43), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv6SentOctets.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv6SentOctets.setDescription('This object indicates the historical number of bytes sent in IPv6 PDU message on SGSN path.')
cGtpHistNoWaitSgsnLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 44), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistNoWaitSgsnLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistNoWaitSgsnLocalDelPDPs.setDescription('This object indicates the historical number of PDPs deleted in GGSN without waiting for a delete PDP response from the SGSN.')
cGtpHistNoReqSgsnLocalDelPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 45), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistNoReqSgsnLocalDelPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistNoReqSgsnLocalDelPDPs.setDescription('This object indicates the historical number of PDPs deleted in GGSN without sending a delete PDP request to the SGSN.')
cGtpHistRoamingTrustedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 46), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRoamingTrustedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRoamingTrustedPDPs.setDescription('This object indicates the historical number of roaming PDP contexts in a trusted PLMN on a SGSN path.')
cGtpHistRoamingNonTrustedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 47), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRoamingNonTrustedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRoamingNonTrustedPDPs.setDescription('This object indicates the historical number of roaming PDP contexts that are not in a trusted PLMN on a SGSN path.')
cGtpHistNonRoamingPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 48), Counter32()).setUnits('pdps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistNonRoamingPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistNonRoamingPDPs.setDescription('This object indicates the historical number of non-roaming PDPs on a SGSN path.')
cGtpHistSentPdpUpdateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 49), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistSentPdpUpdateReqs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistSentPdpUpdateReqs.setDescription('This object indicates the historical number of GGSN initiated update PDP requests sent on a SGSN path.')
cGtpHistRcvdPdpUpdateResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 50), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRcvdPdpUpdateResponses.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRcvdPdpUpdateResponses.setDescription('This object indicates the historical number of update PDP responses received from the SGSN for the GGSN initiated update PDP requests.')
cGtpHistTotalDtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistTotalDtEnabled.setStatus('current')
if mibBuilder.loadTexts: cGtpHistTotalDtEnabled.setDescription('This object indicates the historical number of times Direct tunnel is enabled for the PDP contexts in GGSN on a SGSN path.')
cGtpHistRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 52), CGtpEntities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistRemoteNode.setStatus('current')
if mibBuilder.loadTexts: cGtpHistRemoteNode.setDescription('This object represents the remote node to which the GTP path was associated.')
cGtpHistIpv4v6CreatedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv4v6CreatedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv4v6CreatedPDPs.setDescription('This object indicates the historical number of IPv4v6 PDPs successfully created on SGSN path.')
cGtpHistIpv4v6DeletedPDPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 5, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpHistIpv4v6DeletedPDPs.setStatus('current')
if mibBuilder.loadTexts: cGtpHistIpv4v6DeletedPDPs.setDescription('This object indicates the historical number of IPv4v6 PDPs deleted on SGSN path.')
cGtpNetworkBehindMsApns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 6), Counter32()).setUnits('APN').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpNetworkBehindMsApns.setStatus('current')
if mibBuilder.loadTexts: cGtpNetworkBehindMsApns.setDescription('This object represents the total number of APNs configured to support routing behind the MS in the gateway. Network-behind-mobile access-point is configured to enable an access point to support routing behind the MS. The routing behind the MS feature enables the routing of packets to IP addresses that do not belong to the PDP context (the MS), but exist behind it.')
cGtpTotalDownldFramedRout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDownldFramedRout.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDownldFramedRout.setDescription('This object represents the total number of routes downloaded from the AAA server.')
cGtpTotalDownldFramedRoutSavedFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDownldFramedRoutSavedFail.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDownldFramedRoutSavedFail.setDescription('This object represents the total number of downloaded routes that could not be saved due to no memory.')
cGtpTotalDownldFramedRoutInsFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDownldFramedRoutInsFail.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDownldFramedRoutInsFail.setDescription('This object represents the total number of downloaded routes that cannot be inserted into the routing table because it is conflicting with other routes.')
cGtpTotalDownldFramedRoutIns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDownldFramedRoutIns.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDownldFramedRoutIns.setDescription('This object represents the total number of routes downloaded from the AAA server that have been inserted into the routing table.')
cGtpTotalDownldFramedRoutDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDownldFramedRoutDeleted.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDownldFramedRoutDeleted.setDescription('This object represents the total number of routes downloaded from the AAA server that have been deleted from the routing table.')
cGtpTotalv0v1SigMsgDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalv0v1SigMsgDropped.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalv0v1SigMsgDropped.setDescription('This object represents the total number of GTPv0 and GTPv1 signalling messages that could not be processed and are dropped since system started.')
cGtpTotalDataMsgDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDataMsgDropped.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDataMsgDropped.setDescription('This object represents the total number of data messages that could not be processed and are dropped since system started.')
cGtpv0PathCreated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 14), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv0PathCreated.setStatus('current')
if mibBuilder.loadTexts: cGtpv0PathCreated.setDescription('This object represents the total number of GTPv0 paths created since system started.')
cGtpv0PathDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 15), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv0PathDeleted.setStatus('current')
if mibBuilder.loadTexts: cGtpv0PathDeleted.setDescription('This object represents the total number of GTPv0 paths deleted since system started.')
cGtpv0PathRestarted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 16), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv0PathRestarted.setStatus('current')
if mibBuilder.loadTexts: cGtpv0PathRestarted.setDescription('This object represents the total number of GTPv0 paths restarted since system started.')
cGtpv1SigPathCreated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 17), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv1SigPathCreated.setStatus('current')
if mibBuilder.loadTexts: cGtpv1SigPathCreated.setDescription('This object represents the total number of GTPv1 signalling paths created since system started.')
cGtpv1SigPathDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 18), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv1SigPathDeleted.setStatus('current')
if mibBuilder.loadTexts: cGtpv1SigPathDeleted.setDescription('This object represents the total number of GTPv1 signalling paths deleted since system started.')
cGtpv1SigPathRestarted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 19), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv1SigPathRestarted.setStatus('current')
if mibBuilder.loadTexts: cGtpv1SigPathRestarted.setDescription('This object represents the total number of GTPv1 signalling paths restarted since system started.')
cGtpv1DataPathCreated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 20), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv1DataPathCreated.setStatus('current')
if mibBuilder.loadTexts: cGtpv1DataPathCreated.setDescription('This object represents the total number of GTPv1 data paths created since system started.')
cGtpv1DataPathDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 21), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv1DataPathDeleted.setStatus('current')
if mibBuilder.loadTexts: cGtpv1DataPathDeleted.setDescription('This object represents the total number of GTPv1 data paths deleted since system started.')
cGtpv1DataPathRestarted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 22), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpv1DataPathRestarted.setStatus('current')
if mibBuilder.loadTexts: cGtpv1DataPathRestarted.setDescription('This object represents the total number of GTPv1 data paths restarted since system started.')
cGtpTotalDownlinkQosFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalDownlinkQosFailures.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalDownlinkQosFailures.setDescription('This object represents the total number of downlink packet drops due to Qos failure on the gateway.')
cGtpTotalUplinkQosFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 188, 1, 3, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGtpTotalUplinkQosFailures.setStatus('current')
if mibBuilder.loadTexts: cGtpTotalUplinkQosFailures.setDescription('This object represents the total number of uplink packet drops due to Qos failure on the gateway.')
cGtpNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 2))
cGtpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 2, 0))
cGtpPathFailedNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 188, 2, 0, 1)).setObjects(("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddrTyp"), ("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddr"))
if mibBuilder.loadTexts: cGtpPathFailedNotification.setStatus('current')
if mibBuilder.loadTexts: cGtpPathFailedNotification.setDescription("This notification is sent when one of this GSN's peers failed to respond to the GTP 'Echo Request' message for the waiting interval.")
cGtpMIBConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 3))
cGtpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1))
cGtpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2))
cGtpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 1)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroup"), ("CISCO-GTP-MIB", "cGtpStatusGroup"), ("CISCO-GTP-MIB", "cGtpStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBCompliance = cGtpMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpMIBCompliance.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB.')
cGtpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 2)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev1 = cGtpMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpMIBComplianceRev1.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB.')
cGtpMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 3)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev2 = cGtpMIBComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpMIBComplianceRev2.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB.')
cGtpMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 4)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev2"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev3 = cGtpMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpMIBComplianceRev3.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB. This is deprecated by cGtpMIBComplianceRev4.')
cGtpMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 5)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev3"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev4 = cGtpMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpMIBComplianceRev4.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB. This is deprecated by cGtpMIBComplianceRev5.')
cGtpMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 6)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup1"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev3"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup1"), ("CISCO-GTP-MIB", "cGtpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev5 = cGtpMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpMIBComplianceRev5.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB. This is deprecated by cGtpMIBComplianceRev6.')
cGtpMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 7)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup2"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev3"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup2"), ("CISCO-GTP-MIB", "cGtpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev6 = cGtpMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpMIBComplianceRev6.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB. This is deprecated by cGtpMIBComplianceRev7.')
cGtpMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 8)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup3"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev3"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup2"), ("CISCO-GTP-MIB", "cGtpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev7 = cGtpMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpMIBComplianceRev7.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB.')
cGtpMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 9)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup3"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev3"), ("CISCO-GTP-MIB", "cGtpStatusGroupSup1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup2"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup3"), ("CISCO-GTP-MIB", "cGtpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev8 = cGtpMIBComplianceRev8.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpMIBComplianceRev8.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB. This compliance is deprecated by cGtpMIBComplianceRev9.')
cGtpMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 10)).setObjects(("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup3"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev3"), ("CISCO-GTP-MIB", "cGtpStatusGroupSup1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup2"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup3"), ("CISCO-GTP-MIB", "cGtpNotifGroup"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev9 = cGtpMIBComplianceRev9.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpMIBComplianceRev9.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB.This compliance has been superceded by cGtpMIBComplianceRev10.')
cGtpMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 11)).setObjects(("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpNotifGroup"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev3"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup2"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup3"), ("CISCO-GTP-MIB", "cGtpStatusGroupSup1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup3"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup4"), ("CISCO-GTP-MIB", "cGtpStatusGroupSup2"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup5"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev10 = cGtpMIBComplianceRev10.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpMIBComplianceRev10.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB.This compliance has been superceded by cGtpMIBComplianceRev11.')
cGtpMIBComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 1, 12)).setObjects(("CISCO-GTP-MIB", "cGtpStatisticsGroupRev1"), ("CISCO-GTP-MIB", "cGtpNotifGroup"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupRev2"), ("CISCO-GTP-MIB", "cGtpStatusGroupRev3"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup2"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup2"), ("CISCO-GTP-MIB", "cGtpConfigurationsGroupSup3"), ("CISCO-GTP-MIB", "cGtpStatusGroupSup1"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup3"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup4"), ("CISCO-GTP-MIB", "cGtpStatusGroupSup2"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup5"), ("CISCO-GTP-MIB", "cGtpStatisticsGroupSup6"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpMIBComplianceRev11 = cGtpMIBComplianceRev11.setStatus('current')
if mibBuilder.loadTexts: cGtpMIBComplianceRev11.setDescription('The compliance statements for entities which implement the CISCO-GTP-MIB.')
cGtpConfigurationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 1)).setObjects(("CISCO-GTP-MIB", "cGtpGSNService"), ("CISCO-GTP-MIB", "cGtpVersion"), ("CISCO-GTP-MIB", "cGtpT3TunnelTimer"), ("CISCO-GTP-MIB", "cGtpT3ResponseTimer"), ("CISCO-GTP-MIB", "cGtpN3Request"), ("CISCO-GTP-MIB", "cGtpN3BufferSize"), ("CISCO-GTP-MIB", "cGtpEchoRequestTimer"), ("CISCO-GTP-MIB", "cGtpGSNTotalBandwidthResrc"), ("CISCO-GTP-MIB", "cGtpMaximumPdps"), ("CISCO-GTP-MIB", "cGtpNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpConfigurationsGroup = cGtpConfigurationsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpConfigurationsGroup.setDescription('A collection of GTP configurations.')
cGtpStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 2)).setObjects(("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddrTyp"), ("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddr"), ("CISCO-GTP-MIB", "cGtpPremiumQosMeanThroughput"), ("CISCO-GTP-MIB", "cGtpNormalQosMeanThroughput"), ("CISCO-GTP-MIB", "cGtpBestEffortQosMeanThroughput"), ("CISCO-GTP-MIB", "cGtpGSNAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatusGroup = cGtpStatusGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpStatusGroup.setDescription('A collection of GTP Status.')
cGtpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 3)).setObjects(("CISCO-GTP-MIB", "cGtpPathFailureOccurrences"), ("CISCO-GTP-MIB", "cGtpCurrentUsedBandwidth"), ("CISCO-GTP-MIB", "cGtpTotalDroppedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatisticsGroup = cGtpStatisticsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpStatisticsGroup.setDescription('A collection of GTP statistics .')
cGtpConfigurationsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 4)).setObjects(("CISCO-GTP-MIB", "cGtpGSNService"), ("CISCO-GTP-MIB", "cGtpVersion"), ("CISCO-GTP-MIB", "cGtpT3TunnelTimer"), ("CISCO-GTP-MIB", "cGtpT3ResponseTimer"), ("CISCO-GTP-MIB", "cGtpN3Request"), ("CISCO-GTP-MIB", "cGtpN3BufferSize"), ("CISCO-GTP-MIB", "cGtpEchoRequestTimerEnable"), ("CISCO-GTP-MIB", "cGtpEchoRequestTimer"), ("CISCO-GTP-MIB", "cGtpMaximumPdps"), ("CISCO-GTP-MIB", "cGtpNotifEnable"), ("CISCO-GTP-MIB", "cGtpDynamicEchoTimerEnable"), ("CISCO-GTP-MIB", "cGtpDynamicEchoTimerMinTime"), ("CISCO-GTP-MIB", "cGtpDynamicEchoTimerSmoothFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpConfigurationsGroupRev1 = cGtpConfigurationsGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpConfigurationsGroupRev1.setDescription('A collection of GTP configurations.')
cGtpStatusGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 5)).setObjects(("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddrTyp"), ("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddr"), ("CISCO-GTP-MIB", "cGtpGSNAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatusGroupRev1 = cGtpStatusGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cGtpStatusGroupRev1.setDescription('A collection of GTP Status.')
cGtpStatisticsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 6)).setObjects(("CISCO-GTP-MIB", "cGtpPathFailureOccurrences"), ("CISCO-GTP-MIB", "cGtpTotalDroppedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatisticsGroupRev1 = cGtpStatisticsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cGtpStatisticsGroupRev1.setDescription('A collection of GTP statistics.')
cGtpNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 7)).setObjects(("CISCO-GTP-MIB", "cGtpPathFailedNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpNotifGroup = cGtpNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cGtpNotifGroup.setDescription('A collection of GTP notifications.')
cGtpConfigurationsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 8)).setObjects(("CISCO-GTP-MIB", "cGtpGSNService"), ("CISCO-GTP-MIB", "cGtpVersion"), ("CISCO-GTP-MIB", "cGtpT3ResponseTimer"), ("CISCO-GTP-MIB", "cGtpN3Request"), ("CISCO-GTP-MIB", "cGtpN3BufferSize"), ("CISCO-GTP-MIB", "cGtpEchoRequestTimerEnable"), ("CISCO-GTP-MIB", "cGtpEchoRequestTimer"), ("CISCO-GTP-MIB", "cGtpMaximumPdps"), ("CISCO-GTP-MIB", "cGtpNotifEnable"), ("CISCO-GTP-MIB", "cGtpDynamicEchoTimerEnable"), ("CISCO-GTP-MIB", "cGtpDynamicEchoTimerMinTime"), ("CISCO-GTP-MIB", "cGtpDynamicEchoTimerSmoothFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpConfigurationsGroupRev2 = cGtpConfigurationsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cGtpConfigurationsGroupRev2.setDescription('A collection of GTP configurations.')
cGtpStatusGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 9)).setObjects(("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddrTyp"), ("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddr"), ("CISCO-GTP-MIB", "cGtpGSNAddress"), ("CISCO-GTP-MIB", "cGtpGSNVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatusGroupRev2 = cGtpStatusGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpStatusGroupRev2.setDescription('A collection of GTP status. This is deprecated by cGtpStatusGroupRev3.')
cGtpStatusGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 11)).setObjects(("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddrTyp"), ("CISCO-GTP-MIB", "cGtpLastNoRespToEchoGSNIpAddr"), ("CISCO-GTP-MIB", "cGtpPathVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatusGroupRev3 = cGtpStatusGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cGtpStatusGroupRev3.setDescription('A collection of GTP status.')
cGtpStatisticsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 12)).setObjects(("CISCO-GTP-MIB", "cGtpUnexpectedMsgs"), ("CISCO-GTP-MIB", "cGtpDroppedDataMsgs"), ("CISCO-GTP-MIB", "cGtpRcvdPDUMsgs"), ("CISCO-GTP-MIB", "cGtpSentPDUMsgs"), ("CISCO-GTP-MIB", "cGtpRcvdPDUOctets"), ("CISCO-GTP-MIB", "cGtpSentPDUOctets"), ("CISCO-GTP-MIB", "cGtpMsgTooShort"), ("CISCO-GTP-MIB", "cGtpUnknownMsgs"), ("CISCO-GTP-MIB", "cGtpUnexpectedSigMsgs"), ("CISCO-GTP-MIB", "cGtpRoamingPDUs"), ("CISCO-GTP-MIB", "cGtpSecurityViolations"), ("CISCO-GTP-MIB", "cGtpUnsupportedExtHdr"), ("CISCO-GTP-MIB", "cGtpPathFailures"), ("CISCO-GTP-MIB", "cGtpTotalDropped"), ("CISCO-GTP-MIB", "cGtpDroppedSigMsgs"), ("CISCO-GTP-MIB", "cGtpRcvdSigMsgs"), ("CISCO-GTP-MIB", "cGtpSentSigMsgs"), ("CISCO-GTP-MIB", "cGtpTotalCreatedPDPs"), ("CISCO-GTP-MIB", "cGtpTotalDeletedPDPs"), ("CISCO-GTP-MIB", "cGtpTotalCreatedPppPDPs"), ("CISCO-GTP-MIB", "cGtpTotalDeletedPppPDPs"), ("CISCO-GTP-MIB", "cGtpSinglePDPSessCleared"), ("CISCO-GTP-MIB", "cGtpPathFailLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpVerUpgradeLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpNoSgsnLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpVerFallbackLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpCreateCollideWithDel"), ("CISCO-GTP-MIB", "cGtpVersionChanges"), ("CISCO-GTP-MIB", "cGtpRetransCreatePDPReqs"), ("CISCO-GTP-MIB", "cGtpCreateAsUpdate"), ("CISCO-GTP-MIB", "cGtpIpv6PdpActRejects"), ("CISCO-GTP-MIB", "cGtpIpv6CreatedPDPs"), ("CISCO-GTP-MIB", "cGtpIpv6DeletedPDPs"), ("CISCO-GTP-MIB", "cGtpIpv6RcvdSigMsgs"), ("CISCO-GTP-MIB", "cGtpIpv6SentSigMsgs"), ("CISCO-GTP-MIB", "cGtpIpv6RcvdPDUs"), ("CISCO-GTP-MIB", "cGtpIpv6SentPDUs"), ("CISCO-GTP-MIB", "cGtpIpv6RcvdOctets"), ("CISCO-GTP-MIB", "cGtpIpv6SentOctets"), ("CISCO-GTP-MIB", "cGtpHistUnexpectedMsgs"), ("CISCO-GTP-MIB", "cGtpHistDroppedDataMsgs"), ("CISCO-GTP-MIB", "cGtpHistRcvdPDUMsgs"), ("CISCO-GTP-MIB", "cGtpHistSentPDUMsgs"), ("CISCO-GTP-MIB", "cGtpHistRcvdPDUOctets"), ("CISCO-GTP-MIB", "cGtpHistSentPDUOctets"), ("CISCO-GTP-MIB", "cGtpHistMsgTooShort"), ("CISCO-GTP-MIB", "cGtpHistUnknownMsgs"), ("CISCO-GTP-MIB", "cGtpHistUnexpectedSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistRoamingPDUs"), ("CISCO-GTP-MIB", "cGtpHistSecurityViolations"), ("CISCO-GTP-MIB", "cGtpHistUnsupportedExtHdr"), ("CISCO-GTP-MIB", "cGtpHistPathFailures"), ("CISCO-GTP-MIB", "cGtpHistTotalDropped"), ("CISCO-GTP-MIB", "cGtpHistDroppedSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistRcvdSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistSentSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistTotalCreatedPDPs"), ("CISCO-GTP-MIB", "cGtpHistTotalDeletedPDPs"), ("CISCO-GTP-MIB", "cGtpHistTotalCreatedPppPDPs"), ("CISCO-GTP-MIB", "cGtpHistTotalDeletedPppPDPs"), ("CISCO-GTP-MIB", "cGtpHistSinglePDPSessCleared"), ("CISCO-GTP-MIB", "cGtpHistPathFailLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpHistVerUpgradeLocalDel"), ("CISCO-GTP-MIB", "cGtpHistNoSgsnLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpHistVerFallbackLocalDel"), ("CISCO-GTP-MIB", "cGtpHistCreateCollideWithDel"), ("CISCO-GTP-MIB", "cGtpHistVersionChanges"), ("CISCO-GTP-MIB", "cGtpHistRetransCreatePDPReqs"), ("CISCO-GTP-MIB", "cGtpHistCreateAsUpdate"), ("CISCO-GTP-MIB", "cGtpHistIpv6PdpActRejects"), ("CISCO-GTP-MIB", "cGtpHistIpv6CreatedPDPs"), ("CISCO-GTP-MIB", "cGtpHistIpv6DeletedPDPs"), ("CISCO-GTP-MIB", "cGtpHistIpv6RcvdSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistIpv6SentSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistIpv6RcvdPDUs"), ("CISCO-GTP-MIB", "cGtpHistIpv6SentPDUs"), ("CISCO-GTP-MIB", "cGtpHistIpv6RcvdOctets"), ("CISCO-GTP-MIB", "cGtpHistIpv6SentOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatisticsGroupSup1 = cGtpStatisticsGroupSup1.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpStatisticsGroupSup1.setDescription('A collection of GTP status. This is deprecated by cGtpStatisticsGroupSup2.')
cGtpConfigurationsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 13)).setObjects(("CISCO-GTP-MIB", "cGtpPathHistoryLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpConfigurationsGroupSup1 = cGtpConfigurationsGroupSup1.setStatus('deprecated')
if mibBuilder.loadTexts: cGtpConfigurationsGroupSup1.setDescription('A collection of GTP configurations. This is deprecated by cGtpConfigurationsGroupSup2.')
cGtpConfigurationsGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 14)).setObjects(("CISCO-GTP-MIB", "cGtpPathHistoryLimit"), ("CISCO-GTP-MIB", "cGtpUpdateFailDelete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpConfigurationsGroupSup2 = cGtpConfigurationsGroupSup2.setStatus('current')
if mibBuilder.loadTexts: cGtpConfigurationsGroupSup2.setDescription('A collection of GTP configurations.')
cGtpStatisticsGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 15)).setObjects(("CISCO-GTP-MIB", "cGtpUnexpectedMsgs"), ("CISCO-GTP-MIB", "cGtpDroppedDataMsgs"), ("CISCO-GTP-MIB", "cGtpRcvdPDUMsgs"), ("CISCO-GTP-MIB", "cGtpSentPDUMsgs"), ("CISCO-GTP-MIB", "cGtpRcvdPDUOctets"), ("CISCO-GTP-MIB", "cGtpSentPDUOctets"), ("CISCO-GTP-MIB", "cGtpMsgTooShort"), ("CISCO-GTP-MIB", "cGtpUnknownMsgs"), ("CISCO-GTP-MIB", "cGtpUnexpectedSigMsgs"), ("CISCO-GTP-MIB", "cGtpSecurityViolations"), ("CISCO-GTP-MIB", "cGtpUnsupportedExtHdr"), ("CISCO-GTP-MIB", "cGtpPathFailures"), ("CISCO-GTP-MIB", "cGtpTotalDropped"), ("CISCO-GTP-MIB", "cGtpDroppedSigMsgs"), ("CISCO-GTP-MIB", "cGtpRcvdSigMsgs"), ("CISCO-GTP-MIB", "cGtpSentSigMsgs"), ("CISCO-GTP-MIB", "cGtpTotalCreatedPDPs"), ("CISCO-GTP-MIB", "cGtpTotalDeletedPDPs"), ("CISCO-GTP-MIB", "cGtpTotalCreatedPppPDPs"), ("CISCO-GTP-MIB", "cGtpTotalDeletedPppPDPs"), ("CISCO-GTP-MIB", "cGtpSinglePDPSessCleared"), ("CISCO-GTP-MIB", "cGtpPathFailLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpVerUpgradeLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpNoSgsnLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpVerFallbackLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpCreateCollideWithDel"), ("CISCO-GTP-MIB", "cGtpVersionChanges"), ("CISCO-GTP-MIB", "cGtpRetransCreatePDPReqs"), ("CISCO-GTP-MIB", "cGtpCreateAsUpdate"), ("CISCO-GTP-MIB", "cGtpIpv6PdpActRejects"), ("CISCO-GTP-MIB", "cGtpIpv6CreatedPDPs"), ("CISCO-GTP-MIB", "cGtpIpv6DeletedPDPs"), ("CISCO-GTP-MIB", "cGtpIpv6RcvdPDUs"), ("CISCO-GTP-MIB", "cGtpIpv6SentPDUs"), ("CISCO-GTP-MIB", "cGtpIpv6RcvdOctets"), ("CISCO-GTP-MIB", "cGtpIpv6SentOctets"), ("CISCO-GTP-MIB", "cGtpNoWaitSgsnLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpNoReqSgsnLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpRoamingTrustedPDPs"), ("CISCO-GTP-MIB", "cGtpRoamingNonTrustedPDPs"), ("CISCO-GTP-MIB", "cGtpNonRoamingPDPs"), ("CISCO-GTP-MIB", "cGtpSentPdpUpdateReqs"), ("CISCO-GTP-MIB", "cGtpRcvdPdpUpdateResponses"), ("CISCO-GTP-MIB", "cGtpTotalDtEnabled"), ("CISCO-GTP-MIB", "cGtpHistUnexpectedMsgs"), ("CISCO-GTP-MIB", "cGtpHistDroppedDataMsgs"), ("CISCO-GTP-MIB", "cGtpHistRcvdPDUMsgs"), ("CISCO-GTP-MIB", "cGtpHistSentPDUMsgs"), ("CISCO-GTP-MIB", "cGtpHistRcvdPDUOctets"), ("CISCO-GTP-MIB", "cGtpHistSentPDUOctets"), ("CISCO-GTP-MIB", "cGtpHistMsgTooShort"), ("CISCO-GTP-MIB", "cGtpHistUnknownMsgs"), ("CISCO-GTP-MIB", "cGtpHistUnexpectedSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistSecurityViolations"), ("CISCO-GTP-MIB", "cGtpHistUnsupportedExtHdr"), ("CISCO-GTP-MIB", "cGtpHistPathFailures"), ("CISCO-GTP-MIB", "cGtpHistTotalDropped"), ("CISCO-GTP-MIB", "cGtpHistDroppedSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistRcvdSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistSentSigMsgs"), ("CISCO-GTP-MIB", "cGtpHistTotalCreatedPDPs"), ("CISCO-GTP-MIB", "cGtpHistTotalDeletedPDPs"), ("CISCO-GTP-MIB", "cGtpHistTotalCreatedPppPDPs"), ("CISCO-GTP-MIB", "cGtpHistTotalDeletedPppPDPs"), ("CISCO-GTP-MIB", "cGtpHistSinglePDPSessCleared"), ("CISCO-GTP-MIB", "cGtpHistPathFailLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpHistVerUpgradeLocalDel"), ("CISCO-GTP-MIB", "cGtpHistNoSgsnLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpHistVerFallbackLocalDel"), ("CISCO-GTP-MIB", "cGtpHistCreateCollideWithDel"), ("CISCO-GTP-MIB", "cGtpHistVersionChanges"), ("CISCO-GTP-MIB", "cGtpHistRetransCreatePDPReqs"), ("CISCO-GTP-MIB", "cGtpHistCreateAsUpdate"), ("CISCO-GTP-MIB", "cGtpHistIpv6PdpActRejects"), ("CISCO-GTP-MIB", "cGtpHistIpv6CreatedPDPs"), ("CISCO-GTP-MIB", "cGtpHistIpv6DeletedPDPs"), ("CISCO-GTP-MIB", "cGtpHistIpv6RcvdPDUs"), ("CISCO-GTP-MIB", "cGtpHistIpv6SentPDUs"), ("CISCO-GTP-MIB", "cGtpHistIpv6RcvdOctets"), ("CISCO-GTP-MIB", "cGtpHistIpv6SentOctets"), ("CISCO-GTP-MIB", "cGtpHistNoWaitSgsnLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpHistNoReqSgsnLocalDelPDPs"), ("CISCO-GTP-MIB", "cGtpHistRoamingTrustedPDPs"), ("CISCO-GTP-MIB", "cGtpHistRoamingNonTrustedPDPs"), ("CISCO-GTP-MIB", "cGtpHistNonRoamingPDPs"), ("CISCO-GTP-MIB", "cGtpHistSentPdpUpdateReqs"), ("CISCO-GTP-MIB", "cGtpHistRcvdPdpUpdateResponses"), ("CISCO-GTP-MIB", "cGtpHistTotalDtEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatisticsGroupSup2 = cGtpStatisticsGroupSup2.setStatus('current')
if mibBuilder.loadTexts: cGtpStatisticsGroupSup2.setDescription('A collection of GTP statistics.')
cGtpConfigurationsGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 16)).setObjects(("CISCO-GTP-MIB", "cGtpSgsnProfileIpAddressType"), ("CISCO-GTP-MIB", "cGtpSgsnProfileStartIpAddress"), ("CISCO-GTP-MIB", "cGtpSgsnProfileEndIpAddress"), ("CISCO-GTP-MIB", "cGtpSgsnProfilePortNumber"), ("CISCO-GTP-MIB", "cGtpSgsnProfileEchoDisable"), ("CISCO-GTP-MIB", "cGtpSgsnProfileStorageType"), ("CISCO-GTP-MIB", "cGtpSgsnProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpConfigurationsGroupSup3 = cGtpConfigurationsGroupSup3.setStatus('current')
if mibBuilder.loadTexts: cGtpConfigurationsGroupSup3.setDescription('A collection of objects for SGSN profile configurations.')
cGtpStatusGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 17)).setObjects(("CISCO-GTP-MIB", "cGtpPathRemoteNode"), ("CISCO-GTP-MIB", "cGtpPathVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatusGroupSup1 = cGtpStatusGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cGtpStatusGroupSup1.setDescription('This group of objects provides the GTP path information.')
cGtpStatisticsGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 18)).setObjects(("CISCO-GTP-MIB", "cGtpHistRemoteNode"), ("CISCO-GTP-MIB", "cGtpIpv4v6CreatedPDPs"), ("CISCO-GTP-MIB", "cGtpIpv4v6DeletedPDPs"), ("CISCO-GTP-MIB", "cGtpHistIpv4v6CreatedPDPs"), ("CISCO-GTP-MIB", "cGtpHistIpv4v6DeletedPDPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatisticsGroupSup3 = cGtpStatisticsGroupSup3.setStatus('current')
if mibBuilder.loadTexts: cGtpStatisticsGroupSup3.setDescription('This supplements cGtpStatisticsGroupRev1 to provide the information about the remote node in the GTP path history.')
cGtpStatisticsGroupSup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 19)).setObjects(("CISCO-GTP-MIB", "cGtpNetworkBehindMsApns"), ("CISCO-GTP-MIB", "cGtpTotalDownldFramedRout"), ("CISCO-GTP-MIB", "cGtpTotalDownldFramedRoutSavedFail"), ("CISCO-GTP-MIB", "cGtpTotalDownldFramedRoutInsFail"), ("CISCO-GTP-MIB", "cGtpTotalDownldFramedRoutIns"), ("CISCO-GTP-MIB", "cGtpTotalDownldFramedRoutDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatisticsGroupSup4 = cGtpStatisticsGroupSup4.setStatus('current')
if mibBuilder.loadTexts: cGtpStatisticsGroupSup4.setDescription('This supplements cGtpStatisticsGroupSup3 to provide the information about the networks behind Ms Statistics.')
cGtpStatusGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 20)).setObjects(("CISCO-GTP-MIB", "cGtpTotalActivePaths"), ("CISCO-GTP-MIB", "cGtpTotalActiveGtpv1DataPaths"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatusGroupSup2 = cGtpStatusGroupSup2.setStatus('current')
if mibBuilder.loadTexts: cGtpStatusGroupSup2.setDescription('This group of objects provides the GTP path status information.')
cGtpStatisticsGroupSup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 21)).setObjects(("CISCO-GTP-MIB", "cGtpTotalv0v1SigMsgDropped"), ("CISCO-GTP-MIB", "cGtpTotalDataMsgDropped"), ("CISCO-GTP-MIB", "cGtpv0PathCreated"), ("CISCO-GTP-MIB", "cGtpv0PathDeleted"), ("CISCO-GTP-MIB", "cGtpv0PathRestarted"), ("CISCO-GTP-MIB", "cGtpv1SigPathCreated"), ("CISCO-GTP-MIB", "cGtpv1SigPathDeleted"), ("CISCO-GTP-MIB", "cGtpv1SigPathRestarted"), ("CISCO-GTP-MIB", "cGtpv1DataPathCreated"), ("CISCO-GTP-MIB", "cGtpv1DataPathDeleted"), ("CISCO-GTP-MIB", "cGtpv1DataPathRestarted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatisticsGroupSup5 = cGtpStatisticsGroupSup5.setStatus('current')
if mibBuilder.loadTexts: cGtpStatisticsGroupSup5.setDescription('This group of objects provides the GTP path statistics information.')
cGtpStatisticsGroupSup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 188, 3, 2, 22)).setObjects(("CISCO-GTP-MIB", "cGtpTotalDownlinkQosFailures"), ("CISCO-GTP-MIB", "cGtpTotalUplinkQosFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGtpStatisticsGroupSup6 = cGtpStatisticsGroupSup6.setStatus('current')
if mibBuilder.loadTexts: cGtpStatisticsGroupSup6.setDescription('This group of objects provides the GTP QoS statistics information.')
mibBuilder.exportSymbols("CISCO-GTP-MIB", cGtpHistPathFailLocalDelPDPs=cGtpHistPathFailLocalDelPDPs, cGtpHistCreateAsUpdate=cGtpHistCreateAsUpdate, PYSNMP_MODULE_ID=cGtpMIB, cGtpStatisticsGroupSup1=cGtpStatisticsGroupSup1, cGtpMIBComplianceRev9=cGtpMIBComplianceRev9, cGtpMIBComplianceRev10=cGtpMIBComplianceRev10, cGtpv0PathCreated=cGtpv0PathCreated, cGtpConfigurationsGroupSup1=cGtpConfigurationsGroupSup1, cGtpHistUnexpectedMsgs=cGtpHistUnexpectedMsgs, cGtpStatusGroup=cGtpStatusGroup, cGtpPathFailedNotification=cGtpPathFailedNotification, cGtpTotalDeletedPppPDPs=cGtpTotalDeletedPppPDPs, cGtpStatusGroupRev3=cGtpStatusGroupRev3, cGtpSentPDUOctets=cGtpSentPDUOctets, cGtpHistIpv6RcvdSigMsgs=cGtpHistIpv6RcvdSigMsgs, cGtpv1SigPathRestarted=cGtpv1SigPathRestarted, cGtpSgsnProfileIpAddressType=cGtpSgsnProfileIpAddressType, cGtpGSNTotalBandwidthResrc=cGtpGSNTotalBandwidthResrc, cGtpTotalv0v1SigMsgDropped=cGtpTotalv0v1SigMsgDropped, cGtpHistUnknownMsgs=cGtpHistUnknownMsgs, cGtpNotifications=cGtpNotifications, cGtpv1DataPathCreated=cGtpv1DataPathCreated, cGtpGSNAddressType=cGtpGSNAddressType, cGtpHistRemoteAddrType=cGtpHistRemoteAddrType, cGtpHistIpv6CreatedPDPs=cGtpHistIpv6CreatedPDPs, cGtpHistIndex=cGtpHistIndex, cGtpMsgTooShort=cGtpMsgTooShort, cGtpEchoRequestTimer=cGtpEchoRequestTimer, cGtpHistIpv6PdpActRejects=cGtpHistIpv6PdpActRejects, cGtpSecurityViolations=cGtpSecurityViolations, cGtpStatisticsGroupSup4=cGtpStatisticsGroupSup4, cGtpN3Request=cGtpN3Request, cGtpUpdateFailDelete=cGtpUpdateFailDelete, cGtpHistDroppedSigMsgs=cGtpHistDroppedSigMsgs, cGtpStatisticsGroupRev1=cGtpStatisticsGroupRev1, cGtpVerUpgradeLocalDelPDPs=cGtpVerUpgradeLocalDelPDPs, cGtpRoamingNonTrustedPDPs=cGtpRoamingNonTrustedPDPs, cGtpHistRcvdPDUMsgs=cGtpHistRcvdPDUMsgs, cGtpSgsnProfileEchoDisable=cGtpSgsnProfileEchoDisable, cGtpHistRemoteAddress=cGtpHistRemoteAddress, cGtpNetworkBehindMsApns=cGtpNetworkBehindMsApns, cGtpHistIpv6SentPDUs=cGtpHistIpv6SentPDUs, cGtpHistIpv6DeletedPDPs=cGtpHistIpv6DeletedPDPs, cGtpStatisticsGroupSup3=cGtpStatisticsGroupSup3, cGtpMIBCompliances=cGtpMIBCompliances, cGtpPathAddressType=cGtpPathAddressType, cGtpSgsnProfileStartIpAddress=cGtpSgsnProfileStartIpAddress, cGtpConfigurationsGroupRev2=cGtpConfigurationsGroupRev2, cGtpHistIpv4v6DeletedPDPs=cGtpHistIpv4v6DeletedPDPs, cGtpT3ResponseTimer=cGtpT3ResponseTimer, cGtpTotalUplinkQosFailures=cGtpTotalUplinkQosFailures, cGtpTotalDeletedPDPs=cGtpTotalDeletedPDPs, cGtpMIBGroups=cGtpMIBGroups, cGtpHistTotalDropped=cGtpHistTotalDropped, cGtpStatusGroupSup1=cGtpStatusGroupSup1, cGtpMIB=cGtpMIB, cGtpHistIpv6SentOctets=cGtpHistIpv6SentOctets, cGtpHistPathFailures=cGtpHistPathFailures, cGtpHistCreateCollideWithDel=cGtpHistCreateCollideWithDel, cGtpPathStatisticsHistEntry=cGtpPathStatisticsHistEntry, cGtpHistNonRoamingPDPs=cGtpHistNonRoamingPDPs, cGtpMIBObjects=cGtpMIBObjects, cGtpHistVersionChanges=cGtpHistVersionChanges, cGtpTotalDropped=cGtpTotalDropped, cGtpT3TunnelTimer=cGtpT3TunnelTimer, cGtpTotalDownldFramedRoutInsFail=cGtpTotalDownldFramedRoutInsFail, cGtpMIBComplianceRev11=cGtpMIBComplianceRev11, CGtpVersion=CGtpVersion, cGtpDroppedDataMsgs=cGtpDroppedDataMsgs, cGtpHistSentSigMsgs=cGtpHistSentSigMsgs, cGtpMIBComplianceRev1=cGtpMIBComplianceRev1, cGtpPathStatisticsTable=cGtpPathStatisticsTable, cGtpSentPDUMsgs=cGtpSentPDUMsgs, cGtpIpv4v6DeletedPDPs=cGtpIpv4v6DeletedPDPs, cGtpIpv6RcvdPDUs=cGtpIpv6RcvdPDUs, cGtpSgsnProfileIndex=cGtpSgsnProfileIndex, cGtpRoamingPDUs=cGtpRoamingPDUs, cGtpTotalDownlinkQosFailures=cGtpTotalDownlinkQosFailures, cGtpRcvdSigMsgs=cGtpRcvdSigMsgs, cGtpSgsnProfileStorageType=cGtpSgsnProfileStorageType, cGtpDynamicEchoTimerEnable=cGtpDynamicEchoTimerEnable, cGtpSgsnProfileTable=cGtpSgsnProfileTable, cGtpTotalActiveGtpv1DataPaths=cGtpTotalActiveGtpv1DataPaths, cGtpTotalActivePaths=cGtpTotalActivePaths, cGtpNotifEnable=cGtpNotifEnable, cGtpLastNoRespToEchoGSNIpAddrTyp=cGtpLastNoRespToEchoGSNIpAddrTyp, cGtpPathFailureOccurrences=cGtpPathFailureOccurrences, cGtpTotalCreatedPDPs=cGtpTotalCreatedPDPs, cGtpIpv6SentSigMsgs=cGtpIpv6SentSigMsgs, cGtpHistRoamingPDUs=cGtpHistRoamingPDUs, cGtpUnexpectedSigMsgs=cGtpUnexpectedSigMsgs, cGtpTotalDtEnabled=cGtpTotalDtEnabled, cGtpMIBComplianceRev8=cGtpMIBComplianceRev8, cGtpHistDroppedDataMsgs=cGtpHistDroppedDataMsgs, cGtpNoWaitSgsnLocalDelPDPs=cGtpNoWaitSgsnLocalDelPDPs, cGtpNonRoamingPDPs=cGtpNonRoamingPDPs, cGtpHistVerFallbackLocalDel=cGtpHistVerFallbackLocalDel, cGtpHistRcvdPdpUpdateResponses=cGtpHistRcvdPdpUpdateResponses, cGtpStatisticsGroup=cGtpStatisticsGroup, cGtpStatisticsGroupSup6=cGtpStatisticsGroupSup6, cGtpHistTotalCreatedPDPs=cGtpHistTotalCreatedPDPs, cGtpIpv6PdpActRejects=cGtpIpv6PdpActRejects, cGtpHistUnsupportedExtHdr=cGtpHistUnsupportedExtHdr, cGtpConfigurationsGroupRev1=cGtpConfigurationsGroupRev1, cGtpGSNService=cGtpGSNService, cGtpStatisticsGroupSup5=cGtpStatisticsGroupSup5, cGtpHistRoamingTrustedPDPs=cGtpHistRoamingTrustedPDPs, cGtpHistRoamingNonTrustedPDPs=cGtpHistRoamingNonTrustedPDPs, cGtpHistUnexpectedSigMsgs=cGtpHistUnexpectedSigMsgs, cGtpIpv6RcvdSigMsgs=cGtpIpv6RcvdSigMsgs, cGtpStatusGroupRev2=cGtpStatusGroupRev2, cGtpMIBComplianceRev7=cGtpMIBComplianceRev7, cGtpHistTotalDeletedPDPs=cGtpHistTotalDeletedPDPs, cGtpHistTotalDtEnabled=cGtpHistTotalDtEnabled, cGtpMIBConformances=cGtpMIBConformances, cGtpNotifPrefix=cGtpNotifPrefix, cGtpv1SigPathCreated=cGtpv1SigPathCreated, cGtpv0PathRestarted=cGtpv0PathRestarted, cGtpIpv4v6CreatedPDPs=cGtpIpv4v6CreatedPDPs, cGtpPathAddress=cGtpPathAddress, cGtpConfigurationsGroup=cGtpConfigurationsGroup, cGtpPathVrfName=cGtpPathVrfName, cGtpHistSecurityViolations=cGtpHistSecurityViolations, cGtpTotalDownldFramedRoutIns=cGtpTotalDownldFramedRoutIns, cGtpStatusGroupSup2=cGtpStatusGroupSup2, cGtpStatusGroupRev1=cGtpStatusGroupRev1, cGtpUnexpectedMsgs=cGtpUnexpectedMsgs, cGtpCreateCollideWithDel=cGtpCreateCollideWithDel, cGtpHistNoWaitSgsnLocalDelPDPs=cGtpHistNoWaitSgsnLocalDelPDPs, cGtpMIBComplianceRev5=cGtpMIBComplianceRev5, cGtpMIBComplianceRev3=cGtpMIBComplianceRev3, cGtpHistSentPdpUpdateReqs=cGtpHistSentPdpUpdateReqs, cGtpLastNoRespToEchoGSNIpAddr=cGtpLastNoRespToEchoGSNIpAddr, cGtpHistRemoteNode=cGtpHistRemoteNode, cGtpRetransCreatePDPReqs=cGtpRetransCreatePDPReqs, cGtpPathStatisticsHistoryTable=cGtpPathStatisticsHistoryTable, cGtpStatisticsGroupSup2=cGtpStatisticsGroupSup2, cGtpRcvdPDUOctets=cGtpRcvdPDUOctets, cGtpMaximumPdps=cGtpMaximumPdps, cGtpStatus=cGtpStatus, cGtpBestEffortQosMeanThroughput=cGtpBestEffortQosMeanThroughput, cGtpHistRetransCreatePDPReqs=cGtpHistRetransCreatePDPReqs, cGtpPathFailures=cGtpPathFailures, cGtpUnknownMsgs=cGtpUnknownMsgs, cGtpHistTotalDeletedPppPDPs=cGtpHistTotalDeletedPppPDPs, cGtpTotalDownldFramedRoutDeleted=cGtpTotalDownldFramedRoutDeleted, cGtpTotalDataMsgDropped=cGtpTotalDataMsgDropped, cGtpMIBComplianceRev6=cGtpMIBComplianceRev6, cGtpHistSentPDUOctets=cGtpHistSentPDUOctets, cGtpPathHistoryLimit=cGtpPathHistoryLimit, cGtpIpv6RcvdOctets=cGtpIpv6RcvdOctets, cGtpTotalDownldFramedRout=cGtpTotalDownldFramedRout, cGtpConfigurations=cGtpConfigurations, cGtpGSNVersion=cGtpGSNVersion, cGtpIpv6SentPDUs=cGtpIpv6SentPDUs, cGtpPremiumQosMeanThroughput=cGtpPremiumQosMeanThroughput, cGtpHistSentPDUMsgs=cGtpHistSentPDUMsgs, cGtpHistIpv4v6CreatedPDPs=cGtpHistIpv4v6CreatedPDPs, cGtpMIBComplianceRev4=cGtpMIBComplianceRev4, cGtpVersionChanges=cGtpVersionChanges, cGtpGSNTable=cGtpGSNTable, cGtpSentSigMsgs=cGtpSentSigMsgs, cGtpGSNAddress=cGtpGSNAddress, cGtpVerFallbackLocalDelPDPs=cGtpVerFallbackLocalDelPDPs, cGtpSentPdpUpdateReqs=cGtpSentPdpUpdateReqs, cGtpHistMsgTooShort=cGtpHistMsgTooShort, cGtpHistNoReqSgsnLocalDelPDPs=cGtpHistNoReqSgsnLocalDelPDPs, cGtpUnsupportedExtHdr=cGtpUnsupportedExtHdr, cGtpPathPort=cGtpPathPort, cGtpSinglePDPSessCleared=cGtpSinglePDPSessCleared, cGtpv0PathDeleted=cGtpv0PathDeleted, cGtpv1SigPathDeleted=cGtpv1SigPathDeleted, cGtpHistTotalCreatedPppPDPs=cGtpHistTotalCreatedPppPDPs, cGtpMIBComplianceRev2=cGtpMIBComplianceRev2, cGtpDroppedSigMsgs=cGtpDroppedSigMsgs, cGtpConfigurationsGroupSup2=cGtpConfigurationsGroupSup2, cGtpPathStatisticsEntry=cGtpPathStatisticsEntry, cGtpSgsnProfileRowStatus=cGtpSgsnProfileRowStatus, cGtpPathTable=cGtpPathTable, cGtpv1DataPathRestarted=cGtpv1DataPathRestarted, cGtpHistRcvdPDUOctets=cGtpHistRcvdPDUOctets, cGtpTotalCreatedPppPDPs=cGtpTotalCreatedPppPDPs, cGtpConfigurationsGroupSup3=cGtpConfigurationsGroupSup3, cGtpHistIpv6RcvdOctets=cGtpHistIpv6RcvdOctets, cGtpDynamicEchoTimerSmoothFactor=cGtpDynamicEchoTimerSmoothFactor, cGtpDynamicEchoTimerMinTime=cGtpDynamicEchoTimerMinTime, cGtpN3BufferSize=cGtpN3BufferSize, cGtpTotalDroppedPackets=cGtpTotalDroppedPackets, cGtpRcvdPdpUpdateResponses=cGtpRcvdPdpUpdateResponses, cGtpGSNEntry=cGtpGSNEntry, cGtpHistRcvdSigMsgs=cGtpHistRcvdSigMsgs, cGtpv1DataPathDeleted=cGtpv1DataPathDeleted, cGtpHistVerUpgradeLocalDel=cGtpHistVerUpgradeLocalDel, cGtpMIBCompliance=cGtpMIBCompliance, cGtpNotifGroup=cGtpNotifGroup, cGtpPathRemoteNode=cGtpPathRemoteNode, cGtpNoSgsnLocalDelPDPs=cGtpNoSgsnLocalDelPDPs, cGtpSgsnProfileEndIpAddress=cGtpSgsnProfileEndIpAddress, cGtpHistIpv6RcvdPDUs=cGtpHistIpv6RcvdPDUs, cGtpNoReqSgsnLocalDelPDPs=cGtpNoReqSgsnLocalDelPDPs, cGtpIpv6CreatedPDPs=cGtpIpv6CreatedPDPs, cGtpEchoRequestTimerEnable=cGtpEchoRequestTimerEnable, cGtpHistNoSgsnLocalDelPDPs=cGtpHistNoSgsnLocalDelPDPs, cGtpPathEntry=cGtpPathEntry, cGtpVersion=cGtpVersion, CGtpMaxHistNumber=CGtpMaxHistNumber, cGtpSgsnProfileEntry=cGtpSgsnProfileEntry, cGtpRoamingTrustedPDPs=cGtpRoamingTrustedPDPs, cGtpNormalQosMeanThroughput=cGtpNormalQosMeanThroughput, cGtpIpv6SentOctets=cGtpIpv6SentOctets, cGtpCreateAsUpdate=cGtpCreateAsUpdate, cGtpStatistics=cGtpStatistics, CGtpEntities=CGtpEntities, cGtpIpv6DeletedPDPs=cGtpIpv6DeletedPDPs, cGtpRcvdPDUMsgs=cGtpRcvdPDUMsgs, cGtpPathFailLocalDelPDPs=cGtpPathFailLocalDelPDPs, cGtpSgsnProfilePortNumber=cGtpSgsnProfilePortNumber, cGtpHistIpv6SentSigMsgs=cGtpHistIpv6SentSigMsgs, cGtpPathVersion=cGtpPathVersion, cGtpCurrentUsedBandwidth=cGtpCurrentUsedBandwidth, cGtpHistSinglePDPSessCleared=cGtpHistSinglePDPSessCleared, cGtpHistRemotePort=cGtpHistRemotePort, cGtpTotalDownldFramedRoutSavedFail=cGtpTotalDownldFramedRoutSavedFail)
