#
# PySNMP MIB module CISCO-VSAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VSAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
VsanIndex, FcNameId = mibBuilder.importSymbols("CISCO-ST-TC", "VsanIndex", "FcNameId")
ListIndex, CiscoMilliSeconds, ListIndexOrZero = mibBuilder.importSymbols("CISCO-TC", "ListIndex", "CiscoMilliSeconds", "ListIndexOrZero")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Gauge32, IpAddress, TimeTicks, ObjectIdentity, Bits, MibIdentifier, Integer32, Counter32, Unsigned32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "IpAddress", "TimeTicks", "ObjectIdentity", "Bits", "MibIdentifier", "Integer32", "Counter32", "Unsigned32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString, RowStatus, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TimeStamp", "TruthValue")
ciscoVsanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 282))
ciscoVsanMIB.setRevisions(('2006-02-06 00:00', '2005-12-07 00:00', '2005-10-07 00:00', '2005-06-07 00:00', '2004-02-18 00:00', '2003-12-02 00:00', '2003-05-07 00:00', '2003-04-23 00:00', '2002-12-18 00:00', '2002-11-04 00:00', '2002-09-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVsanMIB.setRevisionsDescriptions(('Enhanced the description of vsanInterOperValue object.', 'Added new object group vsanGroupRev3 to contain vsanFcFeElementName object-type. Added new compliance vsanMIBCompliance7 to include new compliance group vsanGroupRev3. Updated comments section for vsanFcFeElementName.', 'Added new notification vsanPortMembershipChange for port-vsan changes for interfaces. Added new compliance vsanMIBCompliance6 to include new compliance group vsanNotificationGroupRev1.', ' Extended the vsanMembershipSummaryTable to contain not just static assignments but also dynamic assignments. Added new compliance vsanMIBCompliance5 to include new compliance group vsanMembershipSummaryGroupRev1.', 'Added two new objects vsanInorderDelivery and vsanNetworkDropLatency to vsanTable. Added a new compliance statement vsanMIBCompliance4.', "Added a conformance for the range of vsanInterOperValue. Added a new table 'vsanFcTimerTable', to configure FC timer values for VSANs.", 'Deprecated vsanInterOperMode object which is superceded by a new object vsanInterOperValue. Added new compliance statement vsanMIBCompliance1.', 'Added a new table vsanMembershipSummaryTable.', 'Use CiscoMilliSeconds instead MilliSeconds from CISCO-TC.', 'Changed the MIB descriptors fcSwitchLatency and fcNetworkLatency to fcSwitchDropLatency and fcNetworkDropLatency respectively. MAX-ACCESS for fcSwitchLatency is changed to read-write.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVsanMIB.setLastUpdated('200602060000Z')
if mibBuilder.loadTexts: ciscoVsanMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoVsanMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoVsanMIB.setDescription("The MIB module for the management of the Virtual Storage Networks (VSANs) within the frame work of Cisco's VSAN Architecture. This MIB enables the users to configure and monitor VSAN parameters.")
ciscoVsanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 1))
vsanMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 3))
vsanConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1))
vsanMembership = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2))
vsanNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 3))
vsanFcConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4))
vsanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 5))
vsanNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 3, 0))
class VsanMediaType(TextualConvention, Integer32):
    description = 'Media type of the fabric. fibreChannel(1) - media type is Fibre Channel ethernet (2) - media type is ethernet infiniband (3) - media type is infiniband other(4) - other.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fibreChannel", 1), ("ethernet", 2), ("infiniband", 3), ("other", 4))

class VsanAdminState(TextualConvention, Integer32):
    description = 'State of the VSAN. active - the VSAN is active suspended - VSAN is de-activated but the configuration is retained.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("suspended", 2))

class VsanOperationalState(TextualConvention, Integer32):
    description = 'State of the VSAN. up - the VSAN is up. down - VSAN is down. No traffic running on the VSAN.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class VsanLoadBalancingType(TextualConvention, Integer32):
    reference = 'For more information on OX_ID, refer to Fibre Channel Switch Fabric 2 (FC-SW2) section 5.8.'
    description = 'Type of load balancing. srcIdDestId - based on only source ID (S_ID) and destination ID (D_ID). srcIdDestIdOxId - Originator exchange ID (OX_ID) is also used for load balancing in addition to S_ID and D_ID. OX_ID is an exchange ID assigned by the originator Interconnect Port for an exchange with the target Interconnect Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("srcIdDestId", 1), ("srcIdDestIdOxId", 2))

vsanNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanNumber.setStatus('current')
if mibBuilder.loadTexts: vsanNumber.setDescription('The number of VSANs configured on this device.')
vsanLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanLastChange.setStatus('current')
if mibBuilder.loadTexts: vsanLastChange.setDescription('The value of sysUpTime at the time of the last creation, deletion or modification of an entry in the vsanTable and the vsanIfTable, where modification is a change in the value of any object instance within the table.')
vsanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3), )
if mibBuilder.loadTexts: vsanTable.setStatus('current')
if mibBuilder.loadTexts: vsanTable.setDescription('This table lists all the VSAN configured on this device. This table allows users to create, delete and manage the VSANs on local device.')
vsanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: vsanEntry.setStatus('current')
if mibBuilder.loadTexts: vsanEntry.setDescription('An entry (conceptual row) in the vsanTable. This contains information about a VSAN.')
vsanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 1), VsanIndex())
if mibBuilder.loadTexts: vsanIndex.setStatus('current')
if mibBuilder.loadTexts: vsanIndex.setDescription('The ID of the VSAN.')
vsanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanName.setStatus('current')
if mibBuilder.loadTexts: vsanName.setDescription("The name of the VSAN. Note that default value of this object will be the string 'VSANxxxx' where xxxx is value of vsanIndex expressed as 4 digits. For example, if vsanIndex is 23, the default value of this object is 'VSAN0023'.")
vsanMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 3), VsanMediaType().clone('fibreChannel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanMediaType.setStatus('current')
if mibBuilder.loadTexts: vsanMediaType.setDescription('The network media type on which this VSAN is defined.')
vsanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 4), VsanAdminState().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanAdminState.setStatus('current')
if mibBuilder.loadTexts: vsanAdminState.setDescription("Represents the configurable state of this VSAN. The value 'active' for this object represents the VSAN is configured and services for the VSAN is activated. The value 'suspended' for this object represents the VSAN is configured but services for the VSAN is de-activated. User can use this state to preconfigure all the VSAN parameters for the whole fabric.")
vsanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2112)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanMtu.setStatus('current')
if mibBuilder.loadTexts: vsanMtu.setDescription("The MTU of the VSAN. Normally, this object is 2112 for all VSANs for which object vsanMediaType has the value 'fibreChannel'.")
vsanLoadBalancingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 6), VsanLoadBalancingType().clone('srcIdDestIdOxId')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanLoadBalancingType.setStatus('current')
if mibBuilder.loadTexts: vsanLoadBalancingType.setDescription('The type of load balancing used on this VSAN.')
vsanInterOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanInterOperMode.setStatus('deprecated')
if mibBuilder.loadTexts: vsanInterOperMode.setDescription('The interoperability mode of the local switch on this VSAN. This object indicates if this device can inter-operate with devices from other vendors on this VSAN.')
vsanOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 8), VsanOperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanOperState.setStatus('current')
if mibBuilder.loadTexts: vsanOperState.setDescription('The operational state of the VSAN. Indicates whether traffic can pass thru this VSAN.')
vsanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanRowStatus.setStatus('current')
if mibBuilder.loadTexts: vsanRowStatus.setDescription('The status of this conceptual row.')
vsanInterOperValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanInterOperValue.setStatus('current')
if mibBuilder.loadTexts: vsanInterOperValue.setDescription("This object is used for configuring the interoperability value of the VSAN, to inter-operate with different vendor devices. If the value of this object is 0, then the interoperability is disabled. If the value of this object is 1, then the VSAN can inter-operate with all the Fibre Channel vendor devices. The value '2' to '4' for this object represents the interoperability with specific Fibre Channel vendor devices for basic to advanced functionalities.")
vsanInorderDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanInorderDelivery.setStatus('current')
if mibBuilder.loadTexts: vsanInorderDelivery.setDescription("The InorderDelivery guarantee flag for the local switch on this VSAN. If the value of the object is 'true', then the in-order delivery is guaranteed. If 'false', it is not guaranteed. When the value of fcInorderDelivery is changed, the value of this object will be set to the new value of that object.")
vsanNetworkDropLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 3, 1, 12), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(500, 60000)).clone(2000)).setUnits('msec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanNetworkDropLatency.setStatus('current')
if mibBuilder.loadTexts: vsanNetworkDropLatency.setDescription('Network latency of this switch on this VSAN. This is the time interval after which the frames are dropped if they are not delivered in the order they were transmitted. Note that vsanNetworkLatency is always greater than fcSwitchLatency. When the value of fcNetworkDropLatency is changed, the value of this object will be set to the new value of that object.')
notifyVsanIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 1, 4), VsanIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: notifyVsanIndex.setStatus('current')
if mibBuilder.loadTexts: notifyVsanIndex.setDescription('The ID of the VSAN. This object is to be used only as an object in the notification. We cannot use the vsanIndex in a notification as it is defined to not-accessible in the vsanTable.')
vsanDenyUnknownWwn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsanDenyUnknownWwn.setStatus('current')
if mibBuilder.loadTexts: vsanDenyUnknownWwn.setDescription("On a Fibre Channel fabric, an N_port is required to issue an Fabric Login (FLOGI) in order to login to the fabric. The FLOGI contains port's Port World Wide Name (WWN). By default, if this object is false and if a Port WWN is not present in the VSAN WWN database (if there is one), the static VSAN membership is used. If this object is 'true', then the FLOGI is denied if the Port WWN is not present in membership database. On other kinds of fabric, this object's value is undefined.")
vsanWwnListNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanWwnListNumber.setStatus('current')
if mibBuilder.loadTexts: vsanWwnListNumber.setDescription('The number of WWNs configured both for static and dynamic membership purposes on this device. This is number of rows in the vsanWwnListTable.')
vsanWwnListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 3), )
if mibBuilder.loadTexts: vsanWwnListTable.setStatus('current')
if mibBuilder.loadTexts: vsanWwnListTable.setDescription('A table of Port WWN lists. vsanIfTable and vsanDynamicTable use these Port WWN lists for the static and dynamic configuration of Port WWNs. In static case, this list serves as a list of Port WWNs that are denied on a interface, whereas in the dynamic case, it is the list of Port WWNs that are allowed on any interface. Here is an example : listIndex wwnIndex WWN 1 1 WWN1 1 2 WWN2 1 3 WWN3 1 4 WWN4 2 1 WWN5 2 2 WWN6 3 1 WWN7 3 2 WWN8 3 3 WWN9 4 1 WWN10 5 1 WWN11 5 2 WWN12')
vsanWwnListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanWwnListIndex"), (0, "CISCO-VSAN-MIB", "vsanWwnListWwnIndex"))
if mibBuilder.loadTexts: vsanWwnListEntry.setStatus('current')
if mibBuilder.loadTexts: vsanWwnListEntry.setDescription('This entry contains a Port WWN indexed by a list index and Port WWN index. So each entry is a member of Port WWN list. A list consists of all the entries with the same value of vsanWwnListIndex.')
vsanWwnListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 3, 1, 1), ListIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vsanWwnListIndex.setStatus('current')
if mibBuilder.loadTexts: vsanWwnListIndex.setDescription('This is an index to a Port WWN list.')
vsanWwnListWwnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vsanWwnListWwnIndex.setStatus('current')
if mibBuilder.loadTexts: vsanWwnListWwnIndex.setDescription('This is an index to a Port WWN within a Port WWN list.')
vsanWwnListWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 3, 1, 3), FcNameId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanWwnListWwn.setStatus('current')
if mibBuilder.loadTexts: vsanWwnListWwn.setDescription('The Port WWN associated with this entry.')
vsanWwnListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanWwnListRowStatus.setStatus('current')
if mibBuilder.loadTexts: vsanWwnListRowStatus.setDescription('The status of this conceptual row. Users can create, and delete the Port WWN entry.')
vsanIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanIfNumber.setStatus('current')
if mibBuilder.loadTexts: vsanIfNumber.setDescription('The number of rows in the vsanIfTable.')
vsanIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 5), )
if mibBuilder.loadTexts: vsanIfTable.setStatus('current')
if mibBuilder.loadTexts: vsanIfTable.setDescription('A table containing VSAN-related information for interfaces. This table gives a list of interface that are statically assigned to different VSANs. In addition, it also gives the list of Port WWNs that are denied on a particular interface. Here is a example of this table : ifIndex vsanIndex denyList 2 1 0 9 4 4 12 3 0 34 2 0 345 1 3 456 1 0 1234 2 0 5676 3 0 Entries are automatically created for every E_port and Fx_ports on the device.')
vsanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vsanIfEntry.setStatus('current')
if mibBuilder.loadTexts: vsanIfEntry.setDescription('This contains information on the static membership of a interface and the list of Port WWNs that are denied fabric login on that interface. The table contains membership information only for E_port and Fx_ports.')
vsanIfVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 5, 1, 1), VsanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsanIfVsan.setStatus('current')
if mibBuilder.loadTexts: vsanIfVsan.setDescription('Index of the VSAN to which this interface is statically assigned.')
vsanIfDenyList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 5, 1, 2), ListIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsanIfDenyList.setStatus('current')
if mibBuilder.loadTexts: vsanIfDenyList.setDescription('Index of the Port WWN list in the vsanWwnListTable. This is the list of Port WWNs which are denied the login when the Nx_ports try to login to the fabric on this interface. The value of this object is 0, if and only if there is no list to be denied on this port.')
vsanDynamicListNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanDynamicListNumber.setStatus('current')
if mibBuilder.loadTexts: vsanDynamicListNumber.setDescription('The number of WWN lists configured for dynamic membership. This is the number of rows in the vsanDynamicTable.')
vsanDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 7), )
if mibBuilder.loadTexts: vsanDynamicTable.setStatus('current')
if mibBuilder.loadTexts: vsanDynamicTable.setDescription('The global database of Port WWN list to VSAN mappings which are used to determining dynamic membership of VSANs. If the port WWN in the login request is present in the database, then it is allowed login to the fabric. Following is an example for this table: listIndex vsanIndex 1 3 2 3 3 3 5 4')
vsanDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanWwnListIndex"))
if mibBuilder.loadTexts: vsanDynamicEntry.setStatus('current')
if mibBuilder.loadTexts: vsanDynamicEntry.setDescription('A row containing VSAN information, which is dynamically applied, based on a particular list of Port WWNs.')
vsanDynamicVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 7, 1, 1), VsanIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanDynamicVsan.setStatus('current')
if mibBuilder.loadTexts: vsanDynamicVsan.setDescription('The VSAN associated with this Port WWN list. If a Nx_port tries to login into the fabric with a Port WWN contained in this list, then the interface connected to that port is assigned to this VSAN.')
vsanDynamicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanDynamicRowStatus.setStatus('current')
if mibBuilder.loadTexts: vsanDynamicRowStatus.setDescription('The status of this conceptual row. Users can create, and delete a Port WWN to VSAN mapping entry.')
vsanMembershipSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 8), )
if mibBuilder.loadTexts: vsanMembershipSummaryTable.setReference('For information on cdpvmDynPortsTable, refer to CISCO-DPVM-MIB.')
if mibBuilder.loadTexts: vsanMembershipSummaryTable.setStatus('current')
if mibBuilder.loadTexts: vsanMembershipSummaryTable.setDescription('The VSAN membership summary table. vsanIfTable provides static VSAN membership of each of the interfaces whereas cdpvmDynPortsTable provides dynamic VSAN membership. This table lists all interfaces which are statically or dynamically assigned to VSANs on the local device. Following is an example for this table: vsanIndex SummaryInterface 1 1212311 1 4311 1 56544 2 7665 3 76542')
vsanMembershipSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 8, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-VSAN-MIB", "vsanMembershipSummaryInterface"))
if mibBuilder.loadTexts: vsanMembershipSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: vsanMembershipSummaryEntry.setDescription('A row in the vsanMembershipSummaryTable. Each row identifies one interface such that the identified interface is one of the potentially many interfaces which are members of a particular VSAN.')
vsanMembershipSummaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanMembershipSummaryInterface.setStatus('current')
if mibBuilder.loadTexts: vsanMembershipSummaryInterface.setDescription('The ifIndex of the interface which is a member of this VSAN.')
vsanMembershipSummaryIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanMembershipSummaryIntfType.setStatus('current')
if mibBuilder.loadTexts: vsanMembershipSummaryIntfType.setDescription('Indicate how this interface (represented by vsanMembershipSummaryInterface) was assigned to this VSAN.')
fcTimerRatov = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 1), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(5000, 100000)).clone(10000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcTimerRatov.setReference('Section 29.2.1.3 R_A_TOV in FC-PH (Fibre Channel - Physical and Signaling Interface) Rev 4.3.')
if mibBuilder.loadTexts: fcTimerRatov.setStatus('current')
if mibBuilder.loadTexts: fcTimerRatov.setDescription('The Resource_Allocation_Timeout Value used for FxPorts as the timeout value for determining when to reuse an NxPort resource such as a Recovery_Qualifier. It represents E_D_TOV (fcTimerEdtov) plus twice the maximum time that a frame may be delayed within the Fabric and still be delivered. Note that all switches in a fabric should be configured with the same value of this timeout.')
fcTimerEdtov = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 2), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(1000, 100000)).clone(2000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcTimerEdtov.setReference('Section 29.2.1.2 E_D_TOV in FC-PH (Fibre Channel - Physical and Signaling Interface) Rev 4.3.')
if mibBuilder.loadTexts: fcTimerEdtov.setStatus('current')
if mibBuilder.loadTexts: fcTimerEdtov.setDescription('The Error_Detect_Timeout Value used for FxPorts as the timeout value for detecting an error condition. Note that all switches in a fabric should be configured with the same value of this timeout. Note that value of this object must be less than value of fcTimerDstov.')
fcTimerFstov = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 3), CiscoMilliSeconds()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTimerFstov.setReference('Section 3.1.40 F_S_TOV in FC-SW2 (Fibre Channel - Switch Fabric) Rev 5.4.')
if mibBuilder.loadTexts: fcTimerFstov.setStatus('current')
if mibBuilder.loadTexts: fcTimerFstov.setDescription('The Fabric_Stability_Timeout Value used to ensure that Fabric stability has been achieved during Fabric Configuration.')
fcTimerDstov = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 4), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(5000, 100000)).clone(5000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcTimerDstov.setReference('Section 3.1.25 in FC-SW2 (Fibre Channel - Switch Fabric) Rev 5.4.')
if mibBuilder.loadTexts: fcTimerDstov.setStatus('current')
if mibBuilder.loadTexts: fcTimerDstov.setDescription('The Distributed_Services_Timeout Value which indicates how long a distributed services requester will wait for a response.')
fcNetworkDropLatency = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 5), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(500, 60000)).clone(2000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNetworkDropLatency.setStatus('current')
if mibBuilder.loadTexts: fcNetworkDropLatency.setDescription('Network latency of this switch. This is the time interval after which the frames are dropped if they are not delivered in the order they were transmitted. Note that fcNetworkLatency is always greater than fcSwitchLatency.')
fcSwitchDropLatency = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 6), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(500)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcSwitchDropLatency.setStatus('current')
if mibBuilder.loadTexts: fcSwitchDropLatency.setDescription('The switch latency of this switch. This is the time interval after which a switch drops the undelivered frames on a link which went down after delivering some frames to the next hop. This way the undelivered frames can be transmitted on a new link if there is one available.')
fcInorderDelivery = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcInorderDelivery.setStatus('current')
if mibBuilder.loadTexts: fcInorderDelivery.setDescription("The InorderDelivery guarantee flag of device. If the value of the object is 'true', then the in-order delivery is guaranteed. If 'false', it is not guaranteed.")
vsanFcTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 8), )
if mibBuilder.loadTexts: vsanFcTimerTable.setStatus('current')
if mibBuilder.loadTexts: vsanFcTimerTable.setDescription("This table allows the different FC timer values to be configured per VSAN basis. To set a particular type of 'FC Timeout Value', the VSAN should be in 'suspended' administrative state.")
vsanFcTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 8, 1), )
vsanEntry.registerAugmentions(("CISCO-VSAN-MIB", "vsanFcTimerEntry"))
vsanFcTimerEntry.setIndexNames(*vsanEntry.getIndexNames())
if mibBuilder.loadTexts: vsanFcTimerEntry.setStatus('current')
if mibBuilder.loadTexts: vsanFcTimerEntry.setDescription('This object contains information about the FC timer values (dstov / edtov / ratov / fstov) configured for a VSAN. Whenever a global FC timer value (fcTimerRatov / fcTimerEdtov / fcTimerDstov / fcTimerFstov) is configured then the corresponding FC timer value for all the VSANs will be replaced with the global value.')
vsanFcTimerForceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 8, 1, 1), Bits().clone(namedValues=NamedValues(("ratov", 0), ("edtov", 1), ("dstov", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanFcTimerForceFlag.setStatus('current')
if mibBuilder.loadTexts: vsanFcTimerForceFlag.setDescription("This object contains one bit for each of the FC timer value objects in this same table. The value of each bit governs the agent's behavior when the corresponding FC timer-value object is modified for a VSAN when that VSAN's administrative state is 'active'. Specifically, if a VSAN's administrative state is 'active', then: - an attempt to change a VSAN's value of vsanFcTimerRatov, vsanFcTimerEdtov or vsanFcTimerDstov will fail if the corresponding bit position of this object has the value 0. - if the corresponding bit position of this object has the value 1, then an attempt to change a VSAN's value of vsanFcTimerRatov, vsanFcTimerEdtov and/or vsanFcTimerDstov will cause the VSAN to be temporarily suspended while the timer value is changed, and then re-activated again. The default value of this object will have all the bits reset.")
vsanFcTimerRatov = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 8, 1, 2), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(5000, 100000)).clone(10000)).setUnits('msec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanFcTimerRatov.setReference('Section 29.2.1.3 R_A_TOV in FC-PH (Fibre Channel - Physical and Signaling Interface) Rev 4.3.')
if mibBuilder.loadTexts: vsanFcTimerRatov.setStatus('current')
if mibBuilder.loadTexts: vsanFcTimerRatov.setDescription("The Resource_Allocation_Timeout Value used for FxPorts as the timeout value for determining when to reuse an NxPort resource such as a Recovery_Qualifier. It represents E_D_TOV (vsanFcTimerEdtov) plus twice the maximum time that a frame may be delayed within the fabric and still be delivered. Note that all switches in a VSAN should be configured with the same value of this timeout. If the corresponding VSAN administrative state is 'active', then the 'SET' operation on this object results in error. However to force the value of 'Resource Allocation Timeout Value', when the VSAN administrative state is 'active', the corresponding instance of 'vsanFcTimerForceFlag' bit position 0 should be set.")
vsanFcTimerEdtov = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 8, 1, 3), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(1000, 100000)).clone(2000)).setUnits('msec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanFcTimerEdtov.setReference('Section 29.2.1.2 E_D_TOV in FC-PH (Fibre Channel - Physical and Signaling Interface) Rev 4.3.')
if mibBuilder.loadTexts: vsanFcTimerEdtov.setStatus('current')
if mibBuilder.loadTexts: vsanFcTimerEdtov.setDescription("The Error_Detect_Timeout Value used for FxPorts as the timeout value for detecting an error condition. Note that all switches in a VSAN should be configured with the same value of this timeout. Note that value of this object must be less than value of vsanFcTimerDstov. If the corresponding VSAN administrative state is 'active', then the 'SET' operation on this object results in error. However to force the value of 'Error Detect Timeout Value', when the VSAN administrative state is 'active', the corresponding instance of 'vsanFcTimerForceFlag' bit position 1 should be set.")
vsanFcTimerDstov = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 8, 1, 4), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(5000, 100000)).clone(5000)).setUnits('msec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vsanFcTimerDstov.setReference('Section 3.1.25 in FC-SW2 (Fibre Channel - Switch Fabric) Rev 5.4.')
if mibBuilder.loadTexts: vsanFcTimerDstov.setStatus('current')
if mibBuilder.loadTexts: vsanFcTimerDstov.setDescription("The Distributed_Services_Timeout Value which indicates how long a distributed services requester will wait for a response. If the corresponding VSAN administrative state is 'active', then the 'SET' operation on this object results in error. However to force the value of 'Distributed Services Timeout Value', when the VSAN administrative state is 'active', the corresponding instance of 'vsanFcTimerForceFlag' bit position 2 should be set.")
vsanFcTimerFstov = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 4, 8, 1, 5), CiscoMilliSeconds()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsanFcTimerFstov.setReference('Section 3.1.40 F_S_TOV in FC-SW2 (Fibre Channel - Switch Fabric) Rev 5.4.')
if mibBuilder.loadTexts: vsanFcTimerFstov.setStatus('current')
if mibBuilder.loadTexts: vsanFcTimerFstov.setDescription('The Fabric_Stability_Timeout Value used to ensure that Fabric stability has been achieved during Fabric Configuration. The value of this object is common across all VSANs.')
vsanFcFeElementName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 5, 1), FcNameId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsanFcFeElementName.setStatus('current')
if mibBuilder.loadTexts: vsanFcFeElementName.setDescription('This object is part of vsanPortMembershipChange notification. It is the Switch World-Wide Name (WWN) of the switch which is generating this notification.')
vsanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 3, 0, 1)).setObjects(("CISCO-VSAN-MIB", "notifyVsanIndex"), ("CISCO-VSAN-MIB", "vsanAdminState"), ("CISCO-VSAN-MIB", "vsanOperState"))
if mibBuilder.loadTexts: vsanStatusChange.setStatus('current')
if mibBuilder.loadTexts: vsanStatusChange.setDescription('A state change notification is generated whenever vsanOperState is changed. The index and both states of the VSAN after the change, are included as variables in the notification.')
vsanPortMembershipChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 282, 1, 3, 0, 2)).setObjects(("CISCO-VSAN-MIB", "vsanFcFeElementName"), ("IF-MIB", "ifIndex"), ("CISCO-VSAN-MIB", "notifyVsanIndex"))
if mibBuilder.loadTexts: vsanPortMembershipChange.setStatus('current')
if mibBuilder.loadTexts: vsanPortMembershipChange.setDescription('A membership change notification is generated whenever port-vsan membership of a port is changed. The switch wwn, interface index and new port-vsan after the change, are included as variables in the notification. Change in vsanIfEntry object of vsanIfTable triggers this notification.')
vsanMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1))
vsanMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2))
vsanMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1, 1)).setObjects(("CISCO-VSAN-MIB", "vsanGroup"), ("CISCO-VSAN-MIB", "vsanMembershipGroup"), ("CISCO-VSAN-MIB", "vsanStaticMembershipGroup"), ("CISCO-VSAN-MIB", "vsanNotificationGroup"), ("CISCO-VSAN-MIB", "vsanFcTimerGroup"), ("CISCO-VSAN-MIB", "vsanFcLatencyGroup"), ("CISCO-VSAN-MIB", "vsanDynamicMembershipGroup"), ("CISCO-VSAN-MIB", "vsanWWNListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMIBCompliance = vsanMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: vsanMIBCompliance.setDescription('The compliance statement for entities which implement the VSANs.')
vsanMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1, 2)).setObjects(("CISCO-VSAN-MIB", "vsanGroup"), ("CISCO-VSAN-MIB", "vsanMembershipGroup"), ("CISCO-VSAN-MIB", "vsanStaticMembershipGroup"), ("CISCO-VSAN-MIB", "vsanNotificationGroup"), ("CISCO-VSAN-MIB", "vsanFcTimerGroup"), ("CISCO-VSAN-MIB", "vsanFcLatencyGroup"), ("CISCO-VSAN-MIB", "vsanVsanMembershipSummaryGroup"), ("CISCO-VSAN-MIB", "vsanDynamicMembershipGroup"), ("CISCO-VSAN-MIB", "vsanWWNListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMIBCompliance1 = vsanMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: vsanMIBCompliance1.setDescription('The compliance statement for entities which implement the VSANs.')
vsanMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1, 3)).setObjects(("CISCO-VSAN-MIB", "vsanGroupRev1"), ("CISCO-VSAN-MIB", "vsanMembershipGroup"), ("CISCO-VSAN-MIB", "vsanStaticMembershipGroup"), ("CISCO-VSAN-MIB", "vsanNotificationGroup"), ("CISCO-VSAN-MIB", "vsanFcTimerGroup"), ("CISCO-VSAN-MIB", "vsanFcLatencyGroup"), ("CISCO-VSAN-MIB", "vsanVsanMembershipSummaryGroup"), ("CISCO-VSAN-MIB", "vsanDynamicMembershipGroup"), ("CISCO-VSAN-MIB", "vsanWWNListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMIBCompliance2 = vsanMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: vsanMIBCompliance2.setDescription('The compliance statement for entities which implement the VSANs.')
vsanMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1, 4)).setObjects(("CISCO-VSAN-MIB", "vsanGroupRev1"), ("CISCO-VSAN-MIB", "vsanMembershipGroup"), ("CISCO-VSAN-MIB", "vsanStaticMembershipGroup"), ("CISCO-VSAN-MIB", "vsanNotificationGroup"), ("CISCO-VSAN-MIB", "vsanFcTimerGroupRev1"), ("CISCO-VSAN-MIB", "vsanFcLatencyGroup"), ("CISCO-VSAN-MIB", "vsanVsanMembershipSummaryGroup"), ("CISCO-VSAN-MIB", "vsanDynamicMembershipGroup"), ("CISCO-VSAN-MIB", "vsanWWNListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMIBCompliance3 = vsanMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: vsanMIBCompliance3.setDescription('The compliance statement for entities which implement the VSANs.')
vsanMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1, 5)).setObjects(("CISCO-VSAN-MIB", "vsanGroupRev2"), ("CISCO-VSAN-MIB", "vsanMembershipGroup"), ("CISCO-VSAN-MIB", "vsanStaticMembershipGroup"), ("CISCO-VSAN-MIB", "vsanNotificationGroup"), ("CISCO-VSAN-MIB", "vsanFcTimerGroupRev1"), ("CISCO-VSAN-MIB", "vsanFcLatencyGroup"), ("CISCO-VSAN-MIB", "vsanVsanMembershipSummaryGroup"), ("CISCO-VSAN-MIB", "vsanDynamicMembershipGroup"), ("CISCO-VSAN-MIB", "vsanWWNListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMIBCompliance4 = vsanMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: vsanMIBCompliance4.setDescription('The compliance statement for entities which implement the VSANs.')
vsanMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1, 6)).setObjects(("CISCO-VSAN-MIB", "vsanGroupRev2"), ("CISCO-VSAN-MIB", "vsanMembershipGroup"), ("CISCO-VSAN-MIB", "vsanStaticMembershipGroup"), ("CISCO-VSAN-MIB", "vsanNotificationGroup"), ("CISCO-VSAN-MIB", "vsanFcTimerGroupRev1"), ("CISCO-VSAN-MIB", "vsanFcLatencyGroup"), ("CISCO-VSAN-MIB", "vsanVsanMembershipSummaryGroup"), ("CISCO-VSAN-MIB", "vsanMembershipSummaryGroupRev1"), ("CISCO-VSAN-MIB", "vsanDynamicMembershipGroup"), ("CISCO-VSAN-MIB", "vsanWWNListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMIBCompliance5 = vsanMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: vsanMIBCompliance5.setDescription('The compliance statement for entities which implement the VSANs.')
vsanMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1, 7)).setObjects(("CISCO-VSAN-MIB", "vsanGroupRev2"), ("CISCO-VSAN-MIB", "vsanMembershipGroup"), ("CISCO-VSAN-MIB", "vsanStaticMembershipGroup"), ("CISCO-VSAN-MIB", "vsanNotificationGroupRev1"), ("CISCO-VSAN-MIB", "vsanFcTimerGroupRev1"), ("CISCO-VSAN-MIB", "vsanFcLatencyGroup"), ("CISCO-VSAN-MIB", "vsanVsanMembershipSummaryGroup"), ("CISCO-VSAN-MIB", "vsanMembershipSummaryGroupRev1"), ("CISCO-VSAN-MIB", "vsanDynamicMembershipGroup"), ("CISCO-VSAN-MIB", "vsanWWNListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMIBCompliance6 = vsanMIBCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: vsanMIBCompliance6.setDescription('The compliance statement for entities which implement the VSANs.')
vsanMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 1, 8)).setObjects(("CISCO-VSAN-MIB", "vsanGroupRev3"), ("CISCO-VSAN-MIB", "vsanMembershipGroup"), ("CISCO-VSAN-MIB", "vsanStaticMembershipGroup"), ("CISCO-VSAN-MIB", "vsanNotificationGroupRev1"), ("CISCO-VSAN-MIB", "vsanFcTimerGroupRev1"), ("CISCO-VSAN-MIB", "vsanFcLatencyGroup"), ("CISCO-VSAN-MIB", "vsanVsanMembershipSummaryGroup"), ("CISCO-VSAN-MIB", "vsanMembershipSummaryGroupRev1"), ("CISCO-VSAN-MIB", "vsanDynamicMembershipGroup"), ("CISCO-VSAN-MIB", "vsanWWNListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMIBCompliance7 = vsanMIBCompliance7.setStatus('current')
if mibBuilder.loadTexts: vsanMIBCompliance7.setDescription('The compliance statement for entities which implement the VSANs.')
vsanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 1)).setObjects(("CISCO-VSAN-MIB", "vsanNumber"), ("CISCO-VSAN-MIB", "vsanLastChange"), ("CISCO-VSAN-MIB", "vsanName"), ("CISCO-VSAN-MIB", "vsanMediaType"), ("CISCO-VSAN-MIB", "vsanMtu"), ("CISCO-VSAN-MIB", "vsanAdminState"), ("CISCO-VSAN-MIB", "vsanLoadBalancingType"), ("CISCO-VSAN-MIB", "vsanInterOperMode"), ("CISCO-VSAN-MIB", "vsanOperState"), ("CISCO-VSAN-MIB", "vsanRowStatus"), ("CISCO-VSAN-MIB", "notifyVsanIndex"), ("CISCO-VSAN-MIB", "fcInorderDelivery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanGroup = vsanGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vsanGroup.setDescription('A collection of objects for configuring and displaying information on VSANs.')
vsanMembershipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 3)).setObjects(("CISCO-VSAN-MIB", "vsanDenyUnknownWwn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMembershipGroup = vsanMembershipGroup.setStatus('current')
if mibBuilder.loadTexts: vsanMembershipGroup.setDescription('A collection of objects for controlling VSAN membership.')
vsanStaticMembershipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 4)).setObjects(("CISCO-VSAN-MIB", "vsanIfNumber"), ("CISCO-VSAN-MIB", "vsanIfVsan"), ("CISCO-VSAN-MIB", "vsanIfDenyList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanStaticMembershipGroup = vsanStaticMembershipGroup.setStatus('current')
if mibBuilder.loadTexts: vsanStaticMembershipGroup.setDescription('A collection of objects for displaying and configuring VSAN static membership.')
vsanWWNListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 5)).setObjects(("CISCO-VSAN-MIB", "vsanWwnListNumber"), ("CISCO-VSAN-MIB", "vsanWwnListWwn"), ("CISCO-VSAN-MIB", "vsanWwnListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanWWNListGroup = vsanWWNListGroup.setStatus('current')
if mibBuilder.loadTexts: vsanWWNListGroup.setDescription('A collection of objects for creating WWN lists and adding Port WWNs into Port WWN list.')
vsanDynamicMembershipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 6)).setObjects(("CISCO-VSAN-MIB", "vsanDynamicListNumber"), ("CISCO-VSAN-MIB", "vsanDynamicVsan"), ("CISCO-VSAN-MIB", "vsanDynamicRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanDynamicMembershipGroup = vsanDynamicMembershipGroup.setStatus('current')
if mibBuilder.loadTexts: vsanDynamicMembershipGroup.setDescription('A collection of objects for dynamic VSAN configuration.')
vsanNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 7)).setObjects(("CISCO-VSAN-MIB", "vsanStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanNotificationGroup = vsanNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vsanNotificationGroup.setDescription('A collection of objects for status change monitoring and notifications.')
vsanFcTimerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 8)).setObjects(("CISCO-VSAN-MIB", "fcTimerRatov"), ("CISCO-VSAN-MIB", "fcTimerEdtov"), ("CISCO-VSAN-MIB", "fcTimerFstov"), ("CISCO-VSAN-MIB", "fcTimerDstov"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanFcTimerGroup = vsanFcTimerGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vsanFcTimerGroup.setDescription('A collection of objects for configuring and monitoring Fibre Channel timers.')
vsanFcLatencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 9)).setObjects(("CISCO-VSAN-MIB", "fcNetworkDropLatency"), ("CISCO-VSAN-MIB", "fcSwitchDropLatency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanFcLatencyGroup = vsanFcLatencyGroup.setStatus('current')
if mibBuilder.loadTexts: vsanFcLatencyGroup.setDescription('A collection of objects for configuring and monitoring Fibre Channel latencies.')
vsanVsanMembershipSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 10)).setObjects(("CISCO-VSAN-MIB", "vsanMembershipSummaryInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanVsanMembershipSummaryGroup = vsanVsanMembershipSummaryGroup.setStatus('current')
if mibBuilder.loadTexts: vsanVsanMembershipSummaryGroup.setDescription('A collection of objects for VSAN membership summary.')
vsanGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 11)).setObjects(("CISCO-VSAN-MIB", "vsanNumber"), ("CISCO-VSAN-MIB", "vsanLastChange"), ("CISCO-VSAN-MIB", "vsanName"), ("CISCO-VSAN-MIB", "vsanMediaType"), ("CISCO-VSAN-MIB", "vsanMtu"), ("CISCO-VSAN-MIB", "vsanAdminState"), ("CISCO-VSAN-MIB", "vsanLoadBalancingType"), ("CISCO-VSAN-MIB", "vsanOperState"), ("CISCO-VSAN-MIB", "vsanRowStatus"), ("CISCO-VSAN-MIB", "vsanInterOperValue"), ("CISCO-VSAN-MIB", "notifyVsanIndex"), ("CISCO-VSAN-MIB", "fcInorderDelivery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanGroupRev1 = vsanGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: vsanGroupRev1.setDescription('A collection of objects for configuring and displaying information on VSANs.')
vsanFcTimerGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 12)).setObjects(("CISCO-VSAN-MIB", "fcTimerRatov"), ("CISCO-VSAN-MIB", "fcTimerEdtov"), ("CISCO-VSAN-MIB", "fcTimerDstov"), ("CISCO-VSAN-MIB", "fcTimerFstov"), ("CISCO-VSAN-MIB", "vsanFcTimerForceFlag"), ("CISCO-VSAN-MIB", "vsanFcTimerRatov"), ("CISCO-VSAN-MIB", "vsanFcTimerEdtov"), ("CISCO-VSAN-MIB", "vsanFcTimerDstov"), ("CISCO-VSAN-MIB", "vsanFcTimerFstov"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanFcTimerGroupRev1 = vsanFcTimerGroupRev1.setStatus('current')
if mibBuilder.loadTexts: vsanFcTimerGroupRev1.setDescription('A collection of objects for configuring and monitoring global FC timers and per VSAN based FC timers.')
vsanGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 13)).setObjects(("CISCO-VSAN-MIB", "vsanNumber"), ("CISCO-VSAN-MIB", "vsanLastChange"), ("CISCO-VSAN-MIB", "vsanName"), ("CISCO-VSAN-MIB", "vsanMediaType"), ("CISCO-VSAN-MIB", "vsanMtu"), ("CISCO-VSAN-MIB", "vsanAdminState"), ("CISCO-VSAN-MIB", "vsanLoadBalancingType"), ("CISCO-VSAN-MIB", "vsanOperState"), ("CISCO-VSAN-MIB", "vsanRowStatus"), ("CISCO-VSAN-MIB", "vsanInterOperValue"), ("CISCO-VSAN-MIB", "notifyVsanIndex"), ("CISCO-VSAN-MIB", "fcInorderDelivery"), ("CISCO-VSAN-MIB", "vsanInorderDelivery"), ("CISCO-VSAN-MIB", "vsanNetworkDropLatency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanGroupRev2 = vsanGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: vsanGroupRev2.setDescription('A collection of objects for configuring and displaying information on VSANs.')
vsanMembershipSummaryGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 14)).setObjects(("CISCO-VSAN-MIB", "vsanMembershipSummaryIntfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanMembershipSummaryGroupRev1 = vsanMembershipSummaryGroupRev1.setStatus('current')
if mibBuilder.loadTexts: vsanMembershipSummaryGroupRev1.setDescription('A collection of objects for VSAN membership interface type.')
vsanNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 15)).setObjects(("CISCO-VSAN-MIB", "vsanStatusChange"), ("CISCO-VSAN-MIB", "vsanPortMembershipChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanNotificationGroupRev1 = vsanNotificationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: vsanNotificationGroupRev1.setDescription('A collection of notifications for VSAN management.')
vsanGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 282, 3, 2, 16)).setObjects(("CISCO-VSAN-MIB", "vsanNumber"), ("CISCO-VSAN-MIB", "vsanLastChange"), ("CISCO-VSAN-MIB", "vsanName"), ("CISCO-VSAN-MIB", "vsanMediaType"), ("CISCO-VSAN-MIB", "vsanMtu"), ("CISCO-VSAN-MIB", "vsanAdminState"), ("CISCO-VSAN-MIB", "vsanLoadBalancingType"), ("CISCO-VSAN-MIB", "vsanOperState"), ("CISCO-VSAN-MIB", "vsanRowStatus"), ("CISCO-VSAN-MIB", "vsanInterOperValue"), ("CISCO-VSAN-MIB", "notifyVsanIndex"), ("CISCO-VSAN-MIB", "fcInorderDelivery"), ("CISCO-VSAN-MIB", "vsanInorderDelivery"), ("CISCO-VSAN-MIB", "vsanNetworkDropLatency"), ("CISCO-VSAN-MIB", "vsanFcFeElementName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vsanGroupRev3 = vsanGroupRev3.setStatus('current')
if mibBuilder.loadTexts: vsanGroupRev3.setDescription('A collection of objects for configuring and displaying information on VSANs.')
mibBuilder.exportSymbols("CISCO-VSAN-MIB", vsanMIBCompliance1=vsanMIBCompliance1, vsanGroupRev2=vsanGroupRev2, vsanDynamicVsan=vsanDynamicVsan, vsanFcTimerGroup=vsanFcTimerGroup, fcTimerEdtov=fcTimerEdtov, fcNetworkDropLatency=fcNetworkDropLatency, vsanIfTable=vsanIfTable, vsanPortMembershipChange=vsanPortMembershipChange, vsanMIBCompliances=vsanMIBCompliances, vsanIfVsan=vsanIfVsan, vsanWwnListIndex=vsanWwnListIndex, vsanMIBConformance=vsanMIBConformance, vsanWWNListGroup=vsanWWNListGroup, vsanMembership=vsanMembership, vsanMediaType=vsanMediaType, vsanMembershipSummaryGroupRev1=vsanMembershipSummaryGroupRev1, vsanWwnListWwn=vsanWwnListWwn, VsanAdminState=VsanAdminState, vsanInterOperValue=vsanInterOperValue, PYSNMP_MODULE_ID=ciscoVsanMIB, notifyVsanIndex=notifyVsanIndex, vsanWwnListEntry=vsanWwnListEntry, fcInorderDelivery=fcInorderDelivery, vsanInterOperMode=vsanInterOperMode, vsanMIBCompliance3=vsanMIBCompliance3, fcTimerFstov=fcTimerFstov, vsanVsanMembershipSummaryGroup=vsanVsanMembershipSummaryGroup, vsanLastChange=vsanLastChange, vsanMembershipSummaryEntry=vsanMembershipSummaryEntry, vsanWwnListRowStatus=vsanWwnListRowStatus, vsanIfEntry=vsanIfEntry, ciscoVsanMIBObjects=ciscoVsanMIBObjects, fcTimerRatov=fcTimerRatov, vsanFcTimerEdtov=vsanFcTimerEdtov, vsanNumber=vsanNumber, vsanGroup=vsanGroup, vsanTable=vsanTable, vsanConfiguration=vsanConfiguration, vsanDynamicListNumber=vsanDynamicListNumber, vsanMembershipSummaryIntfType=vsanMembershipSummaryIntfType, vsanAdminState=vsanAdminState, vsanMIBCompliance7=vsanMIBCompliance7, vsanOperState=vsanOperState, vsanWwnListNumber=vsanWwnListNumber, vsanFcTimerTable=vsanFcTimerTable, vsanFcTimerGroupRev1=vsanFcTimerGroupRev1, fcSwitchDropLatency=fcSwitchDropLatency, vsanMtu=vsanMtu, vsanFcTimerFstov=vsanFcTimerFstov, vsanFcConfiguration=vsanFcConfiguration, vsanName=vsanName, VsanLoadBalancingType=VsanLoadBalancingType, vsanStatusChange=vsanStatusChange, vsanFcFeElementName=vsanFcFeElementName, vsanIfNumber=vsanIfNumber, vsanIndex=vsanIndex, vsanMembershipSummaryTable=vsanMembershipSummaryTable, vsanMembershipSummaryInterface=vsanMembershipSummaryInterface, vsanRowStatus=vsanRowStatus, vsanMIBCompliance5=vsanMIBCompliance5, vsanInorderDelivery=vsanInorderDelivery, vsanDynamicMembershipGroup=vsanDynamicMembershipGroup, vsanMIBCompliance6=vsanMIBCompliance6, vsanFcTimerDstov=vsanFcTimerDstov, vsanWwnListTable=vsanWwnListTable, vsanStaticMembershipGroup=vsanStaticMembershipGroup, vsanNotificationGroup=vsanNotificationGroup, vsanMIBCompliance=vsanMIBCompliance, vsanMIBGroups=vsanMIBGroups, vsanMIBCompliance4=vsanMIBCompliance4, VsanOperationalState=VsanOperationalState, vsanLoadBalancingType=vsanLoadBalancingType, VsanMediaType=VsanMediaType, vsanIfDenyList=vsanIfDenyList, vsanDenyUnknownWwn=vsanDenyUnknownWwn, ciscoVsanMIB=ciscoVsanMIB, vsanDynamicTable=vsanDynamicTable, vsanFcTimerRatov=vsanFcTimerRatov, vsanDynamicEntry=vsanDynamicEntry, vsanFcLatencyGroup=vsanFcLatencyGroup, vsanEntry=vsanEntry, vsanMIBCompliance2=vsanMIBCompliance2, vsanStats=vsanStats, vsanWwnListWwnIndex=vsanWwnListWwnIndex, vsanMembershipGroup=vsanMembershipGroup, vsanNetworkDropLatency=vsanNetworkDropLatency, vsanDynamicRowStatus=vsanDynamicRowStatus, vsanNotification=vsanNotification, fcTimerDstov=fcTimerDstov, vsanFcTimerForceFlag=vsanFcTimerForceFlag, vsanGroupRev3=vsanGroupRev3, vsanFcTimerEntry=vsanFcTimerEntry, vsanNotificationGroupRev1=vsanNotificationGroupRev1, vsanGroupRev1=vsanGroupRev1, vsanNotifications=vsanNotifications)
