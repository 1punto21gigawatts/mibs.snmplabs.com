#
# PySNMP MIB module ZYXEL-QUEUING-METHOD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-QUEUING-METHOD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Counter32, MibIdentifier, TimeTicks, Integer32, IpAddress, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Counter32", "MibIdentifier", "TimeTicks", "Integer32", "IpAddress", "Counter64", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelQueuingMethod = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70))
if mibBuilder.loadTexts: zyxelQueuingMethod.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelQueuingMethod.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelQueuingMethod.setContactInfo('')
if mibBuilder.loadTexts: zyxelQueuingMethod.setDescription('The subtree for queuing method')
zyxelQueuingMethodSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1))
zyxelQueuingMethodPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1, 1), )
if mibBuilder.loadTexts: zyxelQueuingMethodPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelQueuingMethodPortTable.setDescription('The table contains queuing method outgoing port configuration. ')
zyxelQueuingMethodPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ZYXEL-QUEUING-METHOD-MIB", "zyQueuingMethodPortQueue"))
if mibBuilder.loadTexts: zyxelQueuingMethodPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelQueuingMethodPortEntry.setDescription('An entry contains queuing method outgoing port configuration.')
zyQueuingMethodPortQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: zyQueuingMethodPortQueue.setStatus('current')
if mibBuilder.loadTexts: zyQueuingMethodPortQueue.setDescription('Number of queue(0...7) for the specified port.')
zyQueuingMethodPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyQueuingMethodPortWeight.setStatus('current')
if mibBuilder.loadTexts: zyQueuingMethodPortWeight.setDescription('Set weight (0...15) of Queue. Bandwidth is divided across the different traffic queues according to their weights. Queue with larger weight get more service than queues with smaller weights. ')
zyQueuingMethodPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("strictlyPriority", 0), ("weightedFairScheduling", 1), ("weightedRoundRobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyQueuingMethodPortMode.setStatus('current')
if mibBuilder.loadTexts: zyQueuingMethodPortMode.setDescription('Select SPQ(Strictly Priority Queuing), WFQ(Weighted Fair Queuing), or WRR (Weighted Round Robin) for the specified port.')
zyxelQueuingMethodHybridSpqPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1, 2), )
if mibBuilder.loadTexts: zyxelQueuingMethodHybridSpqPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelQueuingMethodHybridSpqPortTable.setDescription('The table contains queuing method hybird-SPQ outgoing port configuration. ')
zyxelQueuingMethodHybridSpqPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelQueuingMethodHybridSpqPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelQueuingMethodHybridSpqPortEntry.setDescription('An entry contains queuing method hybird-SPQ outgoing port configuration.')
zyQueuingMethodHybridSpqPortQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 70, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("q0", 1), ("q1", 2), ("q2", 3), ("q3", 4), ("q4", 5), ("q5", 6), ("q6", 7), ("q7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyQueuingMethodHybridSpqPortQueue.setStatus('current')
if mibBuilder.loadTexts: zyQueuingMethodHybridSpqPortQueue.setDescription('This is applicable only when you select WFQ or WRR. Select a queue to have the switch use SPQ to service the subsequent queue after and including the specified queue.This is applicable only when you select WFQ or WRR.')
mibBuilder.exportSymbols("ZYXEL-QUEUING-METHOD-MIB", zyxelQueuingMethodHybridSpqPortTable=zyxelQueuingMethodHybridSpqPortTable, zyxelQueuingMethodPortEntry=zyxelQueuingMethodPortEntry, zyQueuingMethodPortQueue=zyQueuingMethodPortQueue, zyxelQueuingMethod=zyxelQueuingMethod, zyQueuingMethodPortMode=zyQueuingMethodPortMode, zyQueuingMethodPortWeight=zyQueuingMethodPortWeight, zyxelQueuingMethodHybridSpqPortEntry=zyxelQueuingMethodHybridSpqPortEntry, zyxelQueuingMethodPortTable=zyxelQueuingMethodPortTable, PYSNMP_MODULE_ID=zyxelQueuingMethod, zyQueuingMethodHybridSpqPortQueue=zyQueuingMethodHybridSpqPortQueue, zyxelQueuingMethodSetup=zyxelQueuingMethodSetup)
