#
# PySNMP MIB module TIMETRA-DIAMETER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-DIAMETER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Unsigned32, Integer32, MibIdentifier, Bits, ObjectIdentity, IpAddress, Counter32, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Integer32", "MibIdentifier", "Bits", "ObjectIdentity", "IpAddress", "Counter32", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "Counter64")
TextualConvention, TruthValue, TimeStamp, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "TimeStamp", "RowStatus", "DisplayString")
timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRConfs, tmnxSRObjs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRConfs", "tmnxSRObjs")
TmnxSubNasPortSuffixType, TmnxSubNasPortPrefixType, TItemDescription, TNamedItem, TmnxVRtrID = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxSubNasPortSuffixType", "TmnxSubNasPortPrefixType", "TItemDescription", "TNamedItem", "TmnxVRtrID")
timetraDiameterMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 58))
timetraDiameterMIBModule.setRevisions(('1912-02-28 12:00', '1911-02-01 00:00', '1909-02-28 00:00', '1908-07-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraDiameterMIBModule.setRevisionsDescriptions(('Rev 10.0 28 Feb 2012 12:00 10.0 release of the TIMETRA-DIAMETER-MIB.', 'Rev 9.0 1 Feb 2011 00:00 9.0 release of the TIMETRA-DIAMETER-MIB.', 'Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-DIAMETER-MIB.', 'Rev 0.1 01 July 2008 00:00 Initial version of the TIMETRA-DIAMETER-MIB.',))
if mibBuilder.loadTexts: timetraDiameterMIBModule.setLastUpdated('201202281200Z')
if mibBuilder.loadTexts: timetraDiameterMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraDiameterMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraDiameterMIBModule.setDescription("This document is the SNMP MIB module to manage and provision DIAMETER on the Alcatel-Lucent SROS device. Copyright 2008-2012 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxDiameter = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58))
tmnxDiameterBaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1))
tmnxDiameterDccaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2))
tmnxDiameterNotificationObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 100))
tmnxDiameterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58))
tmnxDiameterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 1))
tmnxDiameterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2))
tmnxDiameterNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 58))
tmnxDiameterNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 58, 0))
class TmnxDiameterAdminStatus(TextualConvention, Integer32):
    description = 'The TmnxDiameterAdminStatus data type is an enumerated integer that describes the values used to identify the administrative state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class TmnxDiamPeerTransportProt(TextualConvention, Integer32):
    description = 'The TmnxDiamPeerTransportProt data type is an enumerated integer that describes the different transport protocols that can be used to setup a DIAMETER connection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("tcp", 1))

class TmnxDiamCcFailureHndlng(TextualConvention, Integer32):
    description = 'The TmnxDiamCcFailureHndlng data type is an enumerated integer that describes the different actions that can be taken after a DCCA (Diameter Credit Control Application) session failure has occured.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("terminate", 1), ("continue", 2), ("retryAndTerminate", 3))

class TmnxDiamDccaApplicationType(TextualConvention, Integer32):
    description = 'The TmnxDiamDccaApplicationType data type is an enumerated integer that identifies the different DCCA (Diameter Credit Control Application) application types. A particular value of TmnxDiamDccaApplicationType is associated with a set of values for the Authentication-Application-Id AVP (Attribute Value Pair) in Diameter messages.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vfDccaV2", 1), ("gx", 2))

class TmnxDiamPlcyVendorSupportType(TextualConvention, Integer32):
    description = 'The TmnxDiamPlcyVendorSupportType data type is an enumerated integer that describes which vendor specific attributes are used in DCCA sessions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vodafone", 1), ("threeGpp", 2))

class TmnxDiamPlcyDccaAvpOriginType(TextualConvention, Integer32):
    description = 'The TmnxDiamPlcyDccaAvpOriginType data type is an enumerated integer that describes the origin of th information to send in the AVP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("subscriberId", 1), ("circuitId", 2), ("imsi", 3), ("msisdn", 4), ("imei", 5))

tmnxDiameterPlcyTableLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiameterPlcyTableLastChngd.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterPlcyTableLastChngd.setDescription('The value of tmnxDiameterPlcyTableLastChngd indicates the sysUpTime at the time of the most recent management-initiated change to the tmnxDiameterPlcyTable.')
tmnxDiameterPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2), )
if mibBuilder.loadTexts: tmnxDiameterPlcyTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterPlcyTable.setDescription('The tmnxDiameterPlcyTable has an entry for each DIAMETER policy configured in the system.')
tmnxDiameterPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1), ).setIndexNames((0, "TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyName"))
if mibBuilder.loadTexts: tmnxDiameterPlcyEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterPlcyEntry.setDescription('Each row entry represents a DIAMETER policy configured in the system. Entries can be created and deleted via SNMP SET operations on the object tmnxDiamPlcyRowStatus.')
tmnxDiamPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxDiamPlcyName.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyName.setDescription('The value of tmnxDiamPlcyName specifies the name of the DIAMETER policy.')
tmnxDiamPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyRowStatus.setDescription('The value of tmnxDiamPlcyRowStatus controls the creation and deletion of rows in this table.')
tmnxDiamPlcyLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPlcyLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyLastMgmtChange.setDescription('The value of tmnxDiamPlcyLastMgmtChange indicates the sysUpTime at the time of the most recent management-initiated change to this table row.')
tmnxDiamPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDescription.setDescription('The value of tmnxDiamPlcyDescription specifies the user provided description of this DIAMETER policy.')
tmnxDiamPlcyOriginHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyOriginHost.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyOriginHost.setDescription('The value of tmnxDiamPlcyOriginHost specifies the Origin-Host AVP (Attribute Value Pair) used by this DIAMETER policy.')
tmnxDiamPlcyOriginRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyOriginRealm.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyOriginRealm.setDescription('The value of tmnxDiamPlcyOriginRealm specifies the Origin-Realm AVP (Attribute Value Pair) used by this DIAMETER policy.')
tmnxDiamPlcyRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 7), TmnxVRtrID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyRouter.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyRouter.setDescription('The value of tmnxDiamPlcyRouter specifies the virtual router in which the DIAMETER connection(s) will be established by this DIAMETER policy.')
tmnxDiamPlcySourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 8), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcySourceAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcySourceAddrType.setDescription('The value of tmnxDiamPlcySourceAddrType specifies the type of address contained in tmnxDiamPlcySourceAddr.')
tmnxDiamPlcySourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 9), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcySourceAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcySourceAddr.setDescription('The value of tmnxDiamPlcySourceAddr specifies the source IP address used to setup DIAMETER connection in this DIAMETER policy.')
tmnxDiamPlcyWatchdogTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyWatchdogTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyWatchdogTimer.setDescription('The value of tmnxDiamPlcyWatchdogTimer specifies the device watchdog timer (TW) (in seconds) used on all connections by this DIAMETER policy.')
tmnxDiamPlcyConnectionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyConnectionTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyConnectionTimer.setDescription('The value of tmnxDiamPlcyConnectionTimer specifies the connection timer (TC) (in seconds) used by this DIAMETER policy. It defines the time the systems waits before attempting to reconnect to a peer after the connection was lost.')
tmnxDiamPlcyTransactionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyTransactionTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyTransactionTimer.setDescription('The value of tmnxDiamPlcyTransactionTimer specifies the transaction timer (in seconds) used by this DIAMETER policy. This timer defines how long the system will wait for an answer from the peer after sending a request.')
tmnxDiamPlcyVendorSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 2, 1, 13), TmnxDiamPlcyVendorSupportType().clone('threeGpp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyVendorSupport.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyVendorSupport.setDescription('The value of tmnxDiamPlcyVendorSupport specifies which vendor specific attributes are used in DCCA sessions for this DIAMETER policy.')
tmnxDiamPlcyPeerTableLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerTableLastChngd.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerTableLastChngd.setDescription('The value of tmnxDiamPlcyPeerTableLastChngd indicates the sysUpTime at the time of the most recent management-initiated change to the tmnxDiameterPlcyPeerTable.')
tmnxDiameterPlcyPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4), )
if mibBuilder.loadTexts: tmnxDiameterPlcyPeerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterPlcyPeerTable.setDescription('The tmnxDiameterPlcyPeerTable has an entry for each peer defined in a DIAMETER policy configured in the system.')
tmnxDiameterPlcyPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1), ).setIndexNames((0, "TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyName"), (0, "TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerName"))
if mibBuilder.loadTexts: tmnxDiameterPlcyPeerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterPlcyPeerEntry.setDescription('Each row entry represents a peer configured in a DIAMETER policy configured in the system. Entries can be created and deleted via SNMP SET operations on the object tmnxDiamPlcyPeerRowStatus.')
tmnxDiamPlcyPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxDiamPlcyPeerName.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerName.setDescription('The value of tmnxDiamPlcyPeerName specifies the name of the peer within a DIAMETER policy.')
tmnxDiamPlcyPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerRowStatus.setDescription('The value of tmnxDiamPlcyPeerRowStatus controls the creation and deletion of rows in this table.')
tmnxDiamPlcyPeerLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerLastMgmtChange.setDescription('The value of tmnxDiamPlcyPeerLastMgmtChange indicates the sysUpTime at the time of the most recent management-initiated change to this table row.')
tmnxDiamPlcyPeerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 4), TmnxDiameterAdminStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerAdminState.setDescription('The value of the object tmnxDiamPlcyPeerAdminState specifies the administrative state of the DIAMETER Policy peer.')
tmnxDiamPlcyPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerAddrType.setDescription('The value of tmnxDiamPlcyPeerAddrType specifies the type of address contained in tmnxDiamPlcyPeerAddr.')
tmnxDiamPlcyPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerAddr.setDescription('The value of tmnxDiamPlcyPeerAddr specifies the IP address of this DIAMETER policy peer.')
tmnxDiamPlcyPeerTransportProt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 7), TmnxDiamPeerTransportProt().clone('tcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerTransportProt.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerTransportProt.setDescription('The value of tmnxDiamPlcyPeerTransportProt specifies the transport protocol used towards this DIAMETER policy peer.')
tmnxDiamPlcyPeerTransportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3868)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerTransportPort.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerTransportPort.setDescription('The value of tmnxDiamPlcyPeerTransportPort specifies the transport protocol port number used towards this DIAMETER policy peer.')
tmnxDiamPlcyPeerDestHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerDestHost.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerDestHost.setDescription('The value of tmnxDiamPlcyPeerDestHost specifies the Destination-Host AVP used by this DIAMETER policy peer.')
tmnxDiamPlcyPeerDestRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerDestRealm.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerDestRealm.setDescription('The value of tmnxDiamPlcyPeerDestRealm specifies the Destination-Realm AVP used by this DIAMETER policy peer.')
tmnxDiamPlcyPeerWatchdogTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerWatchdogTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerWatchdogTimer.setDescription("The value of tmnxDiamPlcyPeerWatchdogTimer specifies the device watchdog timer (in seconds) used by this DIAMETER policy peer. A value '0' will cause the peer to use the watchdog timer defined at DIAMETER base level (tmnxDiamPlcyWatchdogTimer).")
tmnxDiamPlcyPeerConnectionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerConnectionTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerConnectionTimer.setDescription("The value of tmnxDiamPlcyPeerConnectionTimer specifies the device connection timer (in seconds) used by this DIAMETER policy peer. A value '0' will cause the peer to use the connection timer defined at DIAMETER base level (tmnxDiamPlcyConnectionTimer).")
tmnxDiamPlcyPeerTransactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerTransactTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerTransactTimer.setDescription("The value of tmnxDiamPlcyPeerTransactTimer specifies the device transaction timer (in seconds) used by this DIAMETER policy peer. A value '0' will cause the peer to use the transaction timer defined at DIAMETER base level (tmnxDiamPlcyTransactionTimer).")
tmnxDiamPlcyPeerPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyPeerPreference.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerPreference.setDescription("The value of tmnxDiamPlcyPeerPreference specifies the preference given to this DIAMETER policy peer with respect to the other peers associated with this DIAMETER policy. If multiple peers are available for this policy, only the available peer with the highest preference will be used. If multiple peers with the same preference are available, one of them will be used. The highest preference is specified by the value '1'.")
tmnxDiamPlcyPeerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5), )
if mibBuilder.loadTexts: tmnxDiamPlcyPeerInfoTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerInfoTable.setDescription('The tmnxDiamPlcyPeerInfoTable contains detailed runtime information about the peers defined in a DIAMETER policy.')
tmnxDiamPlcyPeerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1), )
tmnxDiameterPlcyPeerEntry.registerAugmentions(("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerInfoEntry"))
tmnxDiamPlcyPeerInfoEntry.setIndexNames(*tmnxDiameterPlcyPeerEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDiamPlcyPeerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerInfoEntry.setDescription('Each conceptual row contains detailed runtime information about a peer defined in a DIAMETER policy. Entries in this table are created and removed automatically by the system')
tmnxDiamPeerPsmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 0), ("wait-conn-ack", 1), ("wait-i-cea", 2), ("i-open", 3), ("closing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerPsmState.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerPsmState.setDescription("The value of tmnxDiamPeerPsmState indicates the current state of the DIAMETER peer's state machine.")
tmnxDiamPeerConnectionSuspended = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerConnectionSuspended.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerConnectionSuspended.setDescription("The value of tmnxDiamPeerConnectionSuspended indicates whether the peer's DIAMETER connection that is in I-Open state has been temporarily put on suspension.")
tmnxDiamPeerCooldownSeqStage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("stage1", 0), ("stage2", 1), ("stage3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerCooldownSeqStage.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerCooldownSeqStage.setDescription("While the value of tmnxDiamPeerCooldownSeqActive is 'true', the value of tmnxDiamPeerCooldownSeqStage indicates the current stage of the cooling down sequence.")
tmnxDiamPeerOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerOrder.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerOrder.setDescription("The value of tmnxDiamPeerOrder indicates the runtime order of the DIAMETER policy's peers. It is determined both by the configuration level preference and other runtime conditions. A value of zero indicates this field is currently not applicable for this peer.")
tmnxDiamPeerPrimarySecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerPrimarySecondary.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerPrimarySecondary.setDescription('The value of tmnxDiamPeerPrimarySecondary indicates whether the DIAMETER peer figures as primary or secondary peer in its policy.')
tmnxDiamPeerTcTimerTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerTcTimerTimeLeft.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerTcTimerTimeLeft.setDescription("The value of tmnxDiamPeerTcTimerTimeLeft indicates the current countdown progress of the DIAMETER peer's connection timer.")
tmnxDiamPeerTtTimerTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerTtTimerTimeLeft.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerTtTimerTimeLeft.setDescription("The value of tmnxDiamPeerTtTimerTimeLeft indicates the current countdown progress of the DIAMETER peer's transaction timer.")
tmnxDiamPeerTwTimerTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerTwTimerTimeLeft.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerTwTimerTimeLeft.setDescription("The value of tmnxDiamPeerTwTimerTimeLeft indicates the current countdown progress of the DIAMETER peer's watchdog timer.")
tmnxDiamPeerWatchdogAlgActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerWatchdogAlgActive.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerWatchdogAlgActive.setDescription('The value of tmnxDiamPeerWatchdogAlgActive indicates whether the DIAMETER application-layer watchdog algorithm is currently running.')
tmnxDiamPeerWatchdogAnswPending = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerWatchdogAnswPending.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerWatchdogAnswPending.setDescription('The value of tmnxDiamPeerWatchdogAnswPending indicates whether reception of a DIAMETER Device Watchdog Answer (DWA) is expected for a corresponding Device Watchdog Request (DWR) waiting in the Pending Message Queue (PMQ).')
tmnxDiamPeerCooldownSeqPending = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerCooldownSeqPending.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerCooldownSeqPending.setDescription("The value of tmnxDiamPeerCooldownSeqPending indicates whether the DIAMETER peer's connection manages to get in a non-suspended I-Open state.")
tmnxDiamPeerCooldownSeqActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerCooldownSeqActive.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerCooldownSeqActive.setDescription('The value of tmnxDiamPeerCooldownSeqActive indicates whether the DIAMETER Cooldown Sequence is currently running.')
tmnxDiamPeerPeerRemovalPending = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerPeerRemovalPending.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerPeerRemovalPending.setDescription("The value of tmnxDiamPeerPeerRemovalPending indicates whether the execution of a DIAMETER peer's removal is still pending until the disconnect-peer roundtrip has finished.")
tmnxDiamPlcyPeerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6), )
if mibBuilder.loadTexts: tmnxDiamPlcyPeerStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerStatsTable.setDescription('The tmnxDiamPlcyPeerStatsTable contains detailed statistics about the peers defined in a DIAMETER policy.')
tmnxDiamPlcyPeerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1), )
tmnxDiameterPlcyPeerEntry.registerAugmentions(("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerStatsEntry"))
tmnxDiamPlcyPeerStatsEntry.setIndexNames(*tmnxDiameterPlcyPeerEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDiamPlcyPeerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyPeerStatsEntry.setDescription('Each conceptual row contains detailed statistics about a peer defined in a DIAMETER policy. Entries in this table are created and removed automatically by the system')
tmnxDiamPeerStatsLastClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStatsLastClearTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStatsLastClearTime.setDescription('The value of tmnxDiamPeerStatsLastClearTime indicates the sysUpTime when the counters of this row were last reset. A value of zero for this object indicates that the counters have not been reset since the system has last been initialized.')
tmnxDiamPeerStCiTcpSendFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCiTcpSendFailed.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCiTcpSendFailed.setDescription('The value of tmnxDiamPeerStCiTcpSendFailed indicates client initiated roundtrip DIAMETER statistics regarding the number of TCP send failures.')
tmnxDiamPeerStCiDiamRxDropCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCiDiamRxDropCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCiDiamRxDropCnt.setDescription('The value of tmnxDiamPeerStCiDiamRxDropCnt indicates client initiated roundtrip DIAMETER statistics regarding the number of dropped response messages upon reception from server.')
tmnxDiamPeerStCiDiamTxReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCiDiamTxReqs.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCiDiamTxReqs.setDescription('The value of tmnxDiamPeerStCiDiamTxReqs indicates client initiated roundtrip DIAMETER statistics regarding the number of request messages sent to server.')
tmnxDiamPeerStCiDiamRxResps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCiDiamRxResps.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCiDiamRxResps.setDescription('The value of tmnxDiamPeerStCiDiamRxResps indicates client initiated roundtrip DIAMETER statistics regarding the number of response messages received from server.')
tmnxDiamPeerStCiPendMsgsPMQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCiPendMsgsPMQ.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCiPendMsgsPMQ.setDescription('The value of tmnxDiamPeerStCiPendMsgsPMQ indicates client initiated roundtrip DIAMETER statistics regarding the number of request messages in the Pending Message Queue waiting to be matched with corresponding response messages from the server.')
tmnxDiamPeerStCiReqTimeoutsPMQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCiReqTimeoutsPMQ.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCiReqTimeoutsPMQ.setDescription('The value of tmnxDiamPeerStCiReqTimeoutsPMQ indicates client initiated roundtrip DIAMETER statistics regarding the number of request messages that were removed from the Pending Message Queue due to a match timeout.')
tmnxDiamPeerStSiTcpSendFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStSiTcpSendFailed.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStSiTcpSendFailed.setDescription('The value of tmnxDiamPeerStSiTcpSendFailed indicates client initiated roundtrip DIAMETER statistics regarding the number of TCP send failures.')
tmnxDiamPeerStSiDiamRxDropCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStSiDiamRxDropCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStSiDiamRxDropCnt.setDescription('The value of tmnxDiamPeerStSiDiamRxDropCnt indicates client initiated roundtrip DIAMETER statistics regarding the number of dropped request messages upon reception from server.')
tmnxDiamPeerStSiDiamRxReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStSiDiamRxReqs.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStSiDiamRxReqs.setDescription('The value of tmnxDiamPeerStSiDiamRxReqs indicates client initiated roundtrip DIAMETER statistics regarding the number of request messages received from server.')
tmnxDiamPeerStSiDiamTxResps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStSiDiamTxResps.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStSiDiamTxResps.setDescription('The value of tmnxDiamPeerStSiDiamTxResps indicates client initiated roundtrip DIAMETER statistics regarding the number of response messages sent to server.')
tmnxDiamPeerStErrHdlDiamTxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStErrHdlDiamTxErrCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStErrHdlDiamTxErrCnt.setDescription('The value of this object is always equal to zero.')
tmnxDiamPeerStErrHdlDiamRxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStErrHdlDiamRxErrCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStErrHdlDiamRxErrCnt.setDescription('The value of this object is always equal to zero.')
tmnxDiamPeerStCcrInitialTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCcrInitialTx.setReference('RFC 4006 Diameter Credit-Control Application, section 8.3 and Appendix A1.')
if mibBuilder.loadTexts: tmnxDiamPeerStCcrInitialTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCcrInitialTx.setDescription('The value of tmnxDiamPeerStCcrInitialTx indicates the number of Credit Control Request messages with CC-Request-Type AVP equal to INITIAL_REQUEST that are transmitted to the server.')
tmnxDiamPeerStCcaInitialRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCcaInitialRx.setReference('RFC 4006 Diameter Credit-Control Application, section 8.3 and Appendix A1.')
if mibBuilder.loadTexts: tmnxDiamPeerStCcaInitialRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCcaInitialRx.setDescription('The value of tmnxDiamPeerStCcaInitialRx indicates the number of Credit Control Answer messages in response to the CCR INITIAL_REQUEST that are received from the server.')
tmnxDiamPeerStCcrUpdateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCcrUpdateTx.setReference('RFC 4006 Diameter Credit-Control Application, section 8.3 and Appendix A1.')
if mibBuilder.loadTexts: tmnxDiamPeerStCcrUpdateTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCcrUpdateTx.setDescription('The value of tmnxDiamPeerStCcrUpdateTx indicates the number of Credit Control Request messages with CC-Request-Type AVP equal to UPDATE_REQUEST that are transmitted to the server.')
tmnxDiamPeerStCcaUpdateRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCcaUpdateRx.setReference('RFC 4006 Diameter Credit-Control Application, section 8.3 and Appendix A1.')
if mibBuilder.loadTexts: tmnxDiamPeerStCcaUpdateRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCcaUpdateRx.setDescription('The value of tmnxDiamPeerStCcaUpdateRx indicates the number of Credit Control Answer messages in response to the CCR UPDATE_REQUEST that are received from the server.')
tmnxDiamPeerStCcrTerminateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCcrTerminateTx.setReference('RFC 4006 Diameter Credit-Control Application, section 8.3 and Appendix A1.')
if mibBuilder.loadTexts: tmnxDiamPeerStCcrTerminateTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCcrTerminateTx.setDescription('The value of tmnxDiamPeerStCcrTerminateTx indicates the number of Credit Control Request messages with CC-Request-Type AVP equal to TERMINATION_REQUEST that are transmitted to the server.')
tmnxDiamPeerStCcaTerminateRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCcaTerminateRx.setReference('RFC 4006 Diameter Credit-Control Application, section 8.3 and Appendix A1.')
if mibBuilder.loadTexts: tmnxDiamPeerStCcaTerminateRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCcaTerminateRx.setDescription('The value of tmnxDiamPeerStCcaTerminateRx indicates the number of Credit Control Answer messages in response to the CCR TERMINATION_REQUEST that are received from the server.')
tmnxDiamPeerStCerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCerTx.setReference('RFC 3588 Diameter Based Protocol, section 5.3.1.')
if mibBuilder.loadTexts: tmnxDiamPeerStCerTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCerTx.setDescription('The value of tmnxDiamPeerStCerTx indicates the number of Capabilities-Exchange-Request messages that are transmitted to the server.')
tmnxDiamPeerStCeaRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStCeaRx.setReference('RFC 3588 Diameter Based Protocol, section 5.3.2.')
if mibBuilder.loadTexts: tmnxDiamPeerStCeaRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStCeaRx.setDescription('The value of tmnxDiamPeerStCeaRx indicates the number of Capabilities-Exchange-Answer messages that are received from the server.')
tmnxDiamPeerStWdrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStWdrTx.setReference('RFC 3588 Diameter Based Protocol, section 5.5.1.')
if mibBuilder.loadTexts: tmnxDiamPeerStWdrTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStWdrTx.setDescription('The value of tmnxDiamPeerStWdrTx indicates the number of Device-Watchdog-Request messages that are transmitted to the server.')
tmnxDiamPeerStWdaRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStWdaRx.setReference('RFC 3588 Diameter Based Protocol, section 5.5.2.')
if mibBuilder.loadTexts: tmnxDiamPeerStWdaRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStWdaRx.setDescription('The value of tmnxDiamPeerStWdaRx indicates the number of Device-Watchdog-Answer messages that are received from the server.')
tmnxDiamPeerStWdrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStWdrRx.setReference('RFC 3588 Diameter Based Protocol, section 5.5.1.')
if mibBuilder.loadTexts: tmnxDiamPeerStWdrRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStWdrRx.setDescription('The value of tmnxDiamPeerStWdrRx indicates the number of Device-Watchdog-Request messages that are received from the server.')
tmnxDiamPeerStWdaTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStWdaTx.setReference('RFC 3588 Diameter Based Protocol, section 5.5.2.')
if mibBuilder.loadTexts: tmnxDiamPeerStWdaTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStWdaTx.setDescription('The value of tmnxDiamPeerStWdaTx indicates the number of Device-Watchdog-Answer messages that are transmitted to the server.')
tmnxDiamPeerStAsrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStAsrRx.setReference('RFC 3588 Diameter Based Protocol, section 8.5.1.')
if mibBuilder.loadTexts: tmnxDiamPeerStAsrRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStAsrRx.setDescription('The value of tmnxDiamPeerStAsrRx indicates the number of Abort-Session-Request messages that are received from the server.')
tmnxDiamPeerStAsaTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStAsaTx.setReference('RFC 3588 Diameter Based Protocol, section 8.5.2.')
if mibBuilder.loadTexts: tmnxDiamPeerStAsaTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStAsaTx.setDescription('The value of tmnxDiamPeerStAsaTx indicates the number of Abort-Session-Answer messages that are transmitted to the server.')
tmnxDiamPeerStRarRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStRarRx.setReference('RFC 3588 Diameter Based Protocol, section 8.3.1.')
if mibBuilder.loadTexts: tmnxDiamPeerStRarRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStRarRx.setDescription('The value of tmnxDiamPeerStRarRx indicates the number of Re-Auth-Request messages that are received from the server.')
tmnxDiamPeerStRaaTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStRaaTx.setReference('RFC 3588 Diameter Based Protocol, section 8.3.2.')
if mibBuilder.loadTexts: tmnxDiamPeerStRaaTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStRaaTx.setDescription('The value of tmnxDiamPeerStRaaTx indicates the number of Re-Auth-Answer messages that are transmitted to the server.')
tmnxDiamPeerStDprTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStDprTx.setReference('RFC 3588 Diameter Based Protocol, section 5.4.1.')
if mibBuilder.loadTexts: tmnxDiamPeerStDprTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStDprTx.setDescription('The value of tmnxDiamPeerStDprTx indicates the number of Disconnect-Peer-Request messages that are transmitted to the server.')
tmnxDiamPeerStDpaRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStDpaRx.setReference('RFC 3588 Diameter Based Protocol, section 5.4.2.')
if mibBuilder.loadTexts: tmnxDiamPeerStDpaRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStDpaRx.setDescription('The value of tmnxDiamPeerStDpaRx indicates the number of Disconnect-Peer-Answer messages that are received from the server.')
tmnxDiamPeerStDprRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStDprRx.setReference('RFC 3588 Diameter Based Protocol, section 5.4.1.')
if mibBuilder.loadTexts: tmnxDiamPeerStDprRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStDprRx.setDescription('The value of tmnxDiamPeerStDprRx indicates the number of Disconnect-Peer-Request messages that are received from the server.')
tmnxDiamPeerStDpaTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 1, 6, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPeerStDpaTx.setReference('RFC 3588 Diameter Based Protocol, section 5.4.2.')
if mibBuilder.loadTexts: tmnxDiamPeerStDpaTx.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPeerStDpaTx.setDescription('The value of tmnxDiamPeerStDpaTx indicates the number of Disconnect-Peer-Answer messages that are transmitted to the server.')
tmnxDiamPlcyDccaTableLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaTableLastChngd.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaTableLastChngd.setDescription('The value of tmnxDiamPlcyDccaTableLastChngd indicates the sysUpTime at the time of the most recent management-initiated change to the tmnxDiameterPlcyDccaTable. DCCA = Diameter Credit Control Application.')
tmnxDiameterPlcyDccaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2), )
if mibBuilder.loadTexts: tmnxDiameterPlcyDccaTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterPlcyDccaTable.setDescription('The tmnxDiameterPlcyDccaTable has an entry for each DIAMETER policy configured in the system.')
tmnxDiameterPlcyDccaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1), )
tmnxDiameterPlcyEntry.registerAugmentions(("TIMETRA-DIAMETER-MIB", "tmnxDiameterPlcyDccaEntry"))
tmnxDiameterPlcyDccaEntry.setIndexNames(*tmnxDiameterPlcyEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDiameterPlcyDccaEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterPlcyDccaEntry.setDescription('Each row entry represents DCCA parameters defined for this DIAMETER policy. Entries are created and deleted by the system.')
tmnxDiamPlcyDccaLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaLastMgmtChange.setDescription('The value of tmnxDiamPlcyDccaLastMgmtChange indicates the sysUpTime at the time of the most recent management-initiated change to this table row.')
tmnxDiamPlcyDccaFailover = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaFailover.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaFailover.setDescription('The value of tmnxDiamPlcyDccaFailover specifies whether or not moving the CC message stream to a backup server during an ongoing CC session is supported for this DIAMETER policy.')
tmnxDiamPlcyDccaFailureHndlng = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 3), TmnxDiamCcFailureHndlng().clone('terminate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaFailureHndlng.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaFailureHndlng.setDescription('The value of tmnxDiamPlcyDccaFailureHndlng specifies what action to take in case of a DCCA session failure for this DIAMETER policy.')
tmnxDiamPlcyDccaTxTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaTxTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaTxTimer.setDescription('The value of tmnxDiamPlcyDccaTxTimer specifies the DCCA Tx Timer (in seconds) for this DIAMETER policy.')
tmnxDiamPlcyDccaAvpServCntxtId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpServCntxtId.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpServCntxtId.setDescription('The value of tmnxDiamPlcyDccaAvpServCntxtId specifies the DCCA Service-Context-Id AVP. If set the AVP will be included in CCR (Credit Control Request) messages.')
tmnxDiamPlcyDccaAvpCldStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpCldStationId.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpCldStationId.setDescription('The value of tmnxDiamPlcyDccaAvpCldStationId specifies the RADIUS Called-Station-Id AVP. If set, the AVP will be included in CCR (Credit Control Request) messages.')
tmnxDiamPlcyDccaAvpRadiusUsrNme = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpRadiusUsrNme.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpRadiusUsrNme.setDescription('The value of tmnxDiamPlcyDccaAvpRadiusUsrNme specifies whether or not the DIAMETER User-Name AVP will be included in CCR(Credit Control Request) messages.')
tmnxDiamPlcyDccaAvpSubIdOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 8), TmnxDiamPlcyDccaAvpOriginType().clone('subscriberId')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpSubIdOrg.setReference('RFC 4006 Diameter Credit-Control Application section 8.48. Subscription-Id-Data AVP.')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpSubIdOrg.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpSubIdOrg.setDescription('The value of tmnxDiamPlcyDccaAvpSubIdOrg specifies the origin of the information to send in the Subscription-Id-Data AVP.')
tmnxDiamPlcyDccaAvpSubIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("endUserE164", 0), ("endUserImsi", 1), ("endUserPrivate", 4))).clone('endUserPrivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpSubIdType.setReference('RFC 4006 Diameter Credit-Control Application section 8.47. Subscription-Id-Type AVP.')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpSubIdType.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpSubIdType.setDescription('The value of tmnxDiamPlcyDccaAvpSubIdType specifies the type of the identifier stored in the Subscription-Id-Data AVP.')
tmnxDiamPlcyDccaAvpNasP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasP.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasP.setDescription('The value of tmnxDiamPlcyDccaAvpNasP specifies if the NAS-Port-Id AVP will be included in applicable DIAMETER messages.')
tmnxDiamPlcyDccaAvpNasPPfixType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 11), TmnxSubNasPortPrefixType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasPPfixType.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasPPfixType.setDescription('The value of tmnxDiamPlcyDccaAvpNasPPfixType specifies what type of prefix will be added to the NAS-Port AVP if included in DIAMETER messages.')
tmnxDiamPlcyDccaAvpNasPPfixStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasPPfixStr.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasPPfixStr.setDescription("The value of tmnxDiamPlcyDccaAvpNasPPfixStr specifies the user configurable string to be added as prefix to the NAS-Port AVP if included in DIAMETER messages. This field is only applicable if tmnxDiamPlcyDccaAvpNasPPfixType is set to 'userString'.")
tmnxDiamPlcyDccaAvpNasPSfixType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 13), TmnxSubNasPortSuffixType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasPSfixType.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasPSfixType.setDescription('The value of tmnxDiamPlcyDccaAvpNasPSfixType specifies what type of suffix will be added to the NAS-Port attribute NAS-Port AVP if included in DIAMETER messages.')
tmnxDiamPlcyDccaAvpNasPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasPType.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpNasPType.setDescription('The value of tmnxDiamPlcyDccaAvpNasP specifies if the NAS-Port-Type AVP will be included in applicable DIAMETER messages.')
tmnxDiamPlcyDccaAvpImsiOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 15), TmnxDiamPlcyDccaAvpOriginType().clone('subscriberId')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpImsiOrg.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaAvpImsiOrg.setDescription('The value of tmnxDiamPlcyDccaAvpImsiOrg specifies the origin of the information to send in the International Mobile Subscriber Identity (IMSI) AVP.')
tmnxDiamPlcyDccaApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 50), TmnxDiamDccaApplicationType().clone('vfDccaV2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaApplicationType.setReference('RFC 3588 Diameter Based Protocol section 6.8. Auth-Application-Id AVP. IANA Authentication, Authorization, and Accounting (AAA) Parameters.')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaApplicationType.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaApplicationType.setDescription('The value of tmnxDiamPlcyDccaApplicationType specifies the application type associated with this policy. It defines the set of supported values for the Auth-Application-Id AVP. tmnxDiamPlcyDccaApplicationType | Auth-Application-Id --------------------------------|------------------------------------- vfDccaV2 | 4 (standard) gx | 16777238 (vendor-specific 3GPP) ')
tmnxDiamPlcyDccaMaxPendingReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 131072)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaMaxPendingReq.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaMaxPendingReq.setDescription('The value of tmnxDiamPlcyDccaMaxPendingReq specifies the maximum number of pending requests for this DIAMETER policy. If the maximum number of pending requests has been exceeded, further requests are buffered or dropped.')
tmnxDiamPlcyDccaTxRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaTxRetryLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaTxRetryLimit.setDescription('The value of tmnxDiamPlcyDccaTxRetryLimit specifies the maximum number of retries for a CCR message associated with this DIAMETER policy.')
tmnxDiamPlcyDccaOutOfCreditRep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("final", 1), ("quotaExhausted", 2))).clone('final')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDiamPlcyDccaOutOfCreditRep.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPlcyDccaOutOfCreditRep.setDescription("The value of tmnxDiamPlcyDccaOutOfCreditRep specifies the reporting reason in an intermediate interrogation when the final granted units have been consumed and a corresponding out-of-credit-action different from 'disconnect-host' is started.")
tmnxDiamAppPlcyName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 100, 1), TNamedItem()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDiamAppPlcyName.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppPlcyName.setDescription('The value of tmnxDiamAppPlcyName specifies the name of the DIAMETER policy.')
tmnxDiamAppPeerName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 100, 2), TNamedItem()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDiamAppPeerName.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppPeerName.setDescription('The value of tmnxDiamAppPeerName specifies the name of the peer within a DIAMETER policy.')
tmnxDiamAppTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 100, 3), TItemDescription()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDiamAppTrapDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppTrapDescription.setDescription('The value of tmnxDiamAppTrapDescription specifies the diameter application provided description of the failure for this trap.')
tmnxDiamAppSessionId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 100, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 102))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDiamAppSessionId.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppSessionId.setDescription('The value of tmnxDiamAppSessionId specifies the diameter session id for this trap.')
tmnxDiamAppSubscrId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 100, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDiamAppSubscrId.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppSubscrId.setDescription('The value of tmnxDiamAppSubscrId specifies the subscriber identification for this trap.')
tmnxDiamAppSapId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 100, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDiamAppSapId.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppSapId.setDescription('The value of tmnxDiamAppSapId specifies the SAP identification for this trap.')
tmnxDiamAppSLAProfName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 58, 100, 7), TNamedItem()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDiamAppSLAProfName.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppSLAProfName.setDescription('The value of tmnxDiamAppSLAProfName specifies the SLA profile name for this trap.')
tmnxDiamPolicyPeerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 58, 0, 1)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerPrimarySecondary"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerConnectionSuspended"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerCooldownSeqActive"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppTrapDescription"))
if mibBuilder.loadTexts: tmnxDiamPolicyPeerStateChange.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamPolicyPeerStateChange.setDescription('A tmnxDiamPolicyPeerStateChange notification is generated when the state of a DIAMETER policy peer changes.')
tmnxDiamAppMessageDropped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 58, 0, 2)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamAppPlcyName"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppPeerName"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppTrapDescription"))
if mibBuilder.loadTexts: tmnxDiamAppMessageDropped.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppMessageDropped.setDescription('The tmnxDiamAppMessageDropped notification indicates that the DIAMETER protocol has dropped a message due to some reason.')
tmnxDiamAppSessionFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 58, 0, 3)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSessionId"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSubscrId"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSapId"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSLAProfName"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppTrapDescription"))
if mibBuilder.loadTexts: tmnxDiamAppSessionFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxDiamAppSessionFailure.setDescription('The tmnxDiamAppSessionFailure notification indicates that the DIAMETER protocol has a session failure.')
tmnxDiameterBaseV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 1)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiameterPlcyTableLastChngd"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyRowStatus"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyLastMgmtChange"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDescription"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyOriginHost"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyOriginRealm"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyRouter"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcySourceAddrType"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcySourceAddr"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyWatchdogTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyConnectionTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyTransactionTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerTableLastChngd"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerRowStatus"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerLastMgmtChange"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerAdminState"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerAddrType"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerAddr"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerTransportProt"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerTransportPort"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerDestHost"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerDestRealm"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerWatchdogTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerConnectionTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerTransactTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterBaseV7v0Group = tmnxDiameterBaseV7v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDiameterBaseV7v0Group.setDescription('The group of objects supporting DIAMETER on Alcatel-Lucent SROS series systems 7.0 release.')
tmnxDiameterDccaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 2)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaTableLastChngd"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaLastMgmtChange"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaFailover"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaFailureHndlng"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaTxTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpServCntxtId"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpCldStationId"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpRadiusUsrNme"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpSubIdOrg"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpSubIdType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterDccaGroup = tmnxDiameterDccaGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterDccaGroup.setDescription('The group of objects supporting DIAMETER DCCA on Alcatel-Lucent SROS series systems.')
tmnxDiameterBaseV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 3)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiameterPlcyTableLastChngd"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyRowStatus"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyLastMgmtChange"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDescription"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyOriginHost"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyOriginRealm"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyRouter"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcySourceAddrType"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcySourceAddr"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyWatchdogTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyConnectionTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyTransactionTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerTableLastChngd"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerRowStatus"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerLastMgmtChange"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerAdminState"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerAddrType"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerAddr"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerTransportProt"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerTransportPort"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerDestHost"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerDestRealm"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerWatchdogTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerConnectionTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerTransactTimer"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyPeerPreference"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerPsmState"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerConnectionSuspended"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerCooldownSeqStage"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerOrder"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerPrimarySecondary"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerTcTimerTimeLeft"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerTtTimerTimeLeft"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerTwTimerTimeLeft"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerWatchdogAlgActive"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerWatchdogAnswPending"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerCooldownSeqPending"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerCooldownSeqActive"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerPeerRemovalPending"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStatsLastClearTime"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCiTcpSendFailed"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCiDiamRxDropCnt"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCiDiamTxReqs"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCiDiamRxResps"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCiPendMsgsPMQ"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCiReqTimeoutsPMQ"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStSiTcpSendFailed"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStSiDiamRxDropCnt"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStSiDiamRxReqs"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStSiDiamTxResps"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStErrHdlDiamTxErrCnt"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStErrHdlDiamRxErrCnt"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCcrInitialTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCcaInitialRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCcrUpdateTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCcaUpdateRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCcrTerminateTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCcaTerminateRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCerTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStCeaRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStWdrTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStWdaRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStWdrRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStWdaTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStAsrRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStAsaTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStRarRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStRaaTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStDprTx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStDpaRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStDprRx"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPeerStDpaTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterBaseV8v0Group = tmnxDiameterBaseV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterBaseV8v0Group.setDescription('The group of objects supporting DIAMETER on Alcatel-Lucent SROS series systems 8.0 release.')
tmnxDiameterDccaGxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 6)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpNasP"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpNasPPfixType"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpNasPPfixStr"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpNasPSfixType"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpNasPType"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaApplicationType"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaAvpImsiOrg"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaMaxPendingReq"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaTxRetryLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterDccaGxGroup = tmnxDiameterDccaGxGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterDccaGxGroup.setDescription('The group of objects supporting DIAMETER DCCA Gx Interface on Alcatel-Lucent SROS series systems.')
tmnxDiameterDccaV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 7)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyVendorSupport"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamPlcyDccaOutOfCreditRep"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterDccaV10v0Group = tmnxDiameterDccaV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterDccaV10v0Group.setDescription('The group of objects supporting DIAMETER vendor type on Alcatel-Lucent SROS series systems.')
tmnxDiameterNotifyV8v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 4)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamPolicyPeerStateChange"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppMessageDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterNotifyV8v0Group = tmnxDiameterNotifyV8v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDiameterNotifyV8v0Group.setDescription('The group of notifications supporting DIAMETER on Alcatel-Lucent SROS series systems 8.0 release.')
tmnxDiameterV8v0NotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 5)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamAppPlcyName"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppPeerName"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppTrapDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterV8v0NotifyObjsGroup = tmnxDiameterV8v0NotifyObjsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDiameterV8v0NotifyObjsGroup.setDescription('The group of objects supporting management of DIAMETER notification objects on Alcatel-Lucent SROS series systems 8.0 release.')
tmnxDiameterNotifyV10v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 8)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamPolicyPeerStateChange"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppMessageDropped"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSessionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterNotifyV10v0Group = tmnxDiameterNotifyV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterNotifyV10v0Group.setDescription('The group of notifications supporting DIAMETER on Alcatel-Lucent SROS series systems 10.0 release.')
tmnxDiameterV10v0NotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 2, 9)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiamAppPlcyName"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppPeerName"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppTrapDescription"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSessionId"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSubscrId"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSapId"), ("TIMETRA-DIAMETER-MIB", "tmnxDiamAppSLAProfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterV10v0NotifyObjsGroup = tmnxDiameterV10v0NotifyObjsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterV10v0NotifyObjsGroup.setDescription('The group of objects supporting management of DIAMETER notification objects on Alcatel-Lucent SROS series systems 10.0 release.')
tmnxDiameterV8v0MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 1, 1)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiameterBaseV8v0Group"), ("TIMETRA-DIAMETER-MIB", "tmnxDiameterDccaGroup"), ("TIMETRA-DIAMETER-MIB", "tmnxDiameterNotifyV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterV8v0MIBCompliance = tmnxDiameterV8v0MIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDiameterV8v0MIBCompliance.setDescription('The compliance statement for TIMETRA-DIAMETER-MIB on Alcatel-Lucent SROS and 7710 series systems release R8.0.')
tmnxDiameterV10v0MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 58, 1, 2)).setObjects(("TIMETRA-DIAMETER-MIB", "tmnxDiameterBaseV8v0Group"), ("TIMETRA-DIAMETER-MIB", "tmnxDiameterDccaGroup"), ("TIMETRA-DIAMETER-MIB", "tmnxDiameterNotifyV10v0Group"), ("TIMETRA-DIAMETER-MIB", "tmnxDiameterDccaGxGroup"), ("TIMETRA-DIAMETER-MIB", "tmnxDiameterDccaV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDiameterV10v0MIBCompliance = tmnxDiameterV10v0MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: tmnxDiameterV10v0MIBCompliance.setDescription('The compliance statement for TIMETRA-DIAMETER-MIB on Alcatel-Lucent SROS and 7710 series systems release R10.0.')
mibBuilder.exportSymbols("TIMETRA-DIAMETER-MIB", tmnxDiamPlcyDccaAvpNasPType=tmnxDiamPlcyDccaAvpNasPType, tmnxDiamPlcyVendorSupport=tmnxDiamPlcyVendorSupport, tmnxDiamPlcyPeerInfoEntry=tmnxDiamPlcyPeerInfoEntry, tmnxDiamAppSessionFailure=tmnxDiamAppSessionFailure, tmnxDiamPlcyDccaTxTimer=tmnxDiamPlcyDccaTxTimer, tmnxDiamPeerCooldownSeqStage=tmnxDiamPeerCooldownSeqStage, tmnxDiamAppSubscrId=tmnxDiamAppSubscrId, tmnxDiamPeerStRarRx=tmnxDiamPeerStRarRx, tmnxDiamPlcyDccaAvpCldStationId=tmnxDiamPlcyDccaAvpCldStationId, tmnxDiamPeerStWdaTx=tmnxDiamPeerStWdaTx, tmnxDiamPeerStCiPendMsgsPMQ=tmnxDiamPeerStCiPendMsgsPMQ, tmnxDiamPlcyPeerTransactTimer=tmnxDiamPlcyPeerTransactTimer, tmnxDiameterV10v0MIBCompliance=tmnxDiameterV10v0MIBCompliance, tmnxDiameterNotifyPrefix=tmnxDiameterNotifyPrefix, tmnxDiameterBaseV8v0Group=tmnxDiameterBaseV8v0Group, tmnxDiamPlcyLastMgmtChange=tmnxDiamPlcyLastMgmtChange, tmnxDiamPlcyDccaTableLastChngd=tmnxDiamPlcyDccaTableLastChngd, tmnxDiamPlcyDccaAvpImsiOrg=tmnxDiamPlcyDccaAvpImsiOrg, tmnxDiamPeerStSiDiamTxResps=tmnxDiamPeerStSiDiamTxResps, tmnxDiamPeerStDprTx=tmnxDiamPeerStDprTx, TmnxDiameterAdminStatus=TmnxDiameterAdminStatus, tmnxDiamPeerStCeaRx=tmnxDiamPeerStCeaRx, tmnxDiamPeerStCerTx=tmnxDiamPeerStCerTx, tmnxDiamPeerTwTimerTimeLeft=tmnxDiamPeerTwTimerTimeLeft, tmnxDiamPlcyPeerRowStatus=tmnxDiamPlcyPeerRowStatus, tmnxDiamPlcyPeerTransportPort=tmnxDiamPlcyPeerTransportPort, tmnxDiamPeerStCcrTerminateTx=tmnxDiamPeerStCcrTerminateTx, tmnxDiamPlcyDccaLastMgmtChange=tmnxDiamPlcyDccaLastMgmtChange, tmnxDiamPlcyPeerAddr=tmnxDiamPlcyPeerAddr, tmnxDiamPlcyPeerAdminState=tmnxDiamPlcyPeerAdminState, tmnxDiameterDccaGroup=tmnxDiameterDccaGroup, tmnxDiamPeerTtTimerTimeLeft=tmnxDiamPeerTtTimerTimeLeft, tmnxDiamPlcyName=tmnxDiamPlcyName, tmnxDiamPlcyPeerDestHost=tmnxDiamPlcyPeerDestHost, tmnxDiamPeerStErrHdlDiamTxErrCnt=tmnxDiamPeerStErrHdlDiamTxErrCnt, tmnxDiamPeerStCcrUpdateTx=tmnxDiamPeerStCcrUpdateTx, tmnxDiameterPlcyTable=tmnxDiameterPlcyTable, tmnxDiamPeerCooldownSeqPending=tmnxDiamPeerCooldownSeqPending, tmnxDiamPlcyDccaTxRetryLimit=tmnxDiamPlcyDccaTxRetryLimit, tmnxDiamPlcyDccaFailover=tmnxDiamPlcyDccaFailover, tmnxDiamPlcyDccaMaxPendingReq=tmnxDiamPlcyDccaMaxPendingReq, timetraDiameterMIBModule=timetraDiameterMIBModule, tmnxDiamPeerStCiDiamRxResps=tmnxDiamPeerStCiDiamRxResps, tmnxDiamPlcyRowStatus=tmnxDiamPlcyRowStatus, tmnxDiamPlcyDccaAvpNasP=tmnxDiamPlcyDccaAvpNasP, tmnxDiameterDccaV10v0Group=tmnxDiameterDccaV10v0Group, tmnxDiamPeerStRaaTx=tmnxDiamPeerStRaaTx, tmnxDiamPlcyDccaFailureHndlng=tmnxDiamPlcyDccaFailureHndlng, tmnxDiamPeerStDprRx=tmnxDiamPeerStDprRx, tmnxDiamPlcyConnectionTimer=tmnxDiamPlcyConnectionTimer, tmnxDiameterPlcyTableLastChngd=tmnxDiameterPlcyTableLastChngd, tmnxDiamPeerPrimarySecondary=tmnxDiamPeerPrimarySecondary, tmnxDiamPlcyDccaAvpRadiusUsrNme=tmnxDiamPlcyDccaAvpRadiusUsrNme, tmnxDiameterGroups=tmnxDiameterGroups, tmnxDiamPlcyDccaAvpServCntxtId=tmnxDiamPlcyDccaAvpServCntxtId, tmnxDiameterNotifyV10v0Group=tmnxDiameterNotifyV10v0Group, tmnxDiameterPlcyEntry=tmnxDiameterPlcyEntry, tmnxDiameterDccaObjects=tmnxDiameterDccaObjects, tmnxDiamPlcyOriginRealm=tmnxDiamPlcyOriginRealm, tmnxDiameterCompliances=tmnxDiameterCompliances, tmnxDiamPeerStDpaTx=tmnxDiamPeerStDpaTx, tmnxDiamPlcyPeerTableLastChngd=tmnxDiamPlcyPeerTableLastChngd, tmnxDiamPlcyTransactionTimer=tmnxDiamPlcyTransactionTimer, tmnxDiamPeerPeerRemovalPending=tmnxDiamPeerPeerRemovalPending, tmnxDiamPlcyPeerStatsEntry=tmnxDiamPlcyPeerStatsEntry, tmnxDiamPeerStCcaInitialRx=tmnxDiamPeerStCcaInitialRx, tmnxDiameterV8v0NotifyObjsGroup=tmnxDiameterV8v0NotifyObjsGroup, tmnxDiamAppPeerName=tmnxDiamAppPeerName, tmnxDiamAppTrapDescription=tmnxDiamAppTrapDescription, tmnxDiamPeerTcTimerTimeLeft=tmnxDiamPeerTcTimerTimeLeft, tmnxDiamPlcyPeerInfoTable=tmnxDiamPlcyPeerInfoTable, tmnxDiamPlcyOriginHost=tmnxDiamPlcyOriginHost, TmnxDiamPeerTransportProt=TmnxDiamPeerTransportProt, tmnxDiamPeerPsmState=tmnxDiamPeerPsmState, tmnxDiamPlcyDccaAvpSubIdOrg=tmnxDiamPlcyDccaAvpSubIdOrg, tmnxDiamPlcyDccaAvpNasPPfixStr=tmnxDiamPlcyDccaAvpNasPPfixStr, tmnxDiamPlcyPeerWatchdogTimer=tmnxDiamPlcyPeerWatchdogTimer, tmnxDiamAppSessionId=tmnxDiamAppSessionId, tmnxDiamPeerStatsLastClearTime=tmnxDiamPeerStatsLastClearTime, tmnxDiameterPlcyPeerEntry=tmnxDiameterPlcyPeerEntry, tmnxDiamPeerOrder=tmnxDiamPeerOrder, tmnxDiameter=tmnxDiameter, tmnxDiameterNotificationObjs=tmnxDiameterNotificationObjs, tmnxDiamPlcyDccaOutOfCreditRep=tmnxDiamPlcyDccaOutOfCreditRep, tmnxDiamPeerStSiDiamRxReqs=tmnxDiamPeerStSiDiamRxReqs, tmnxDiamPeerStCcaUpdateRx=tmnxDiamPeerStCcaUpdateRx, tmnxDiameterConformance=tmnxDiameterConformance, tmnxDiamPeerStCiTcpSendFailed=tmnxDiamPeerStCiTcpSendFailed, tmnxDiamPlcyPeerDestRealm=tmnxDiamPlcyPeerDestRealm, tmnxDiameterPlcyDccaTable=tmnxDiameterPlcyDccaTable, tmnxDiamPeerStSiDiamRxDropCnt=tmnxDiamPeerStSiDiamRxDropCnt, tmnxDiamPlcyDescription=tmnxDiamPlcyDescription, TmnxDiamPlcyDccaAvpOriginType=TmnxDiamPlcyDccaAvpOriginType, tmnxDiamAppSLAProfName=tmnxDiamAppSLAProfName, PYSNMP_MODULE_ID=timetraDiameterMIBModule, tmnxDiamPeerStWdrTx=tmnxDiamPeerStWdrTx, tmnxDiamPeerStAsrRx=tmnxDiamPeerStAsrRx, tmnxDiamAppSapId=tmnxDiamAppSapId, tmnxDiamPeerStCcrInitialTx=tmnxDiamPeerStCcrInitialTx, tmnxDiameterV10v0NotifyObjsGroup=tmnxDiameterV10v0NotifyObjsGroup, tmnxDiamPlcyPeerTransportProt=tmnxDiamPlcyPeerTransportProt, tmnxDiameterPlcyPeerTable=tmnxDiameterPlcyPeerTable, TmnxDiamPlcyVendorSupportType=TmnxDiamPlcyVendorSupportType, tmnxDiamPeerStCiReqTimeoutsPMQ=tmnxDiamPeerStCiReqTimeoutsPMQ, tmnxDiameterNotifyV8v0Group=tmnxDiameterNotifyV8v0Group, tmnxDiamPeerStErrHdlDiamRxErrCnt=tmnxDiamPeerStErrHdlDiamRxErrCnt, tmnxDiamPeerStWdrRx=tmnxDiamPeerStWdrRx, tmnxDiamPeerStDpaRx=tmnxDiamPeerStDpaRx, tmnxDiamPeerStCiDiamRxDropCnt=tmnxDiamPeerStCiDiamRxDropCnt, tmnxDiameterPlcyDccaEntry=tmnxDiameterPlcyDccaEntry, tmnxDiameterNotifications=tmnxDiameterNotifications, tmnxDiamPlcyRouter=tmnxDiamPlcyRouter, tmnxDiamPeerStWdaRx=tmnxDiamPeerStWdaRx, tmnxDiamPlcyDccaAvpNasPSfixType=tmnxDiamPlcyDccaAvpNasPSfixType, tmnxDiamPlcyDccaAvpNasPPfixType=tmnxDiamPlcyDccaAvpNasPPfixType, tmnxDiamPlcyPeerName=tmnxDiamPlcyPeerName, tmnxDiamPlcyPeerLastMgmtChange=tmnxDiamPlcyPeerLastMgmtChange, tmnxDiamPeerWatchdogAnswPending=tmnxDiamPeerWatchdogAnswPending, tmnxDiamPlcyPeerPreference=tmnxDiamPlcyPeerPreference, tmnxDiamPlcyDccaAvpSubIdType=tmnxDiamPlcyDccaAvpSubIdType, tmnxDiameterBaseObjects=tmnxDiameterBaseObjects, TmnxDiamDccaApplicationType=TmnxDiamDccaApplicationType, tmnxDiamPlcyWatchdogTimer=tmnxDiamPlcyWatchdogTimer, TmnxDiamCcFailureHndlng=TmnxDiamCcFailureHndlng, tmnxDiamPeerWatchdogAlgActive=tmnxDiamPeerWatchdogAlgActive, tmnxDiamPeerConnectionSuspended=tmnxDiamPeerConnectionSuspended, tmnxDiamPolicyPeerStateChange=tmnxDiamPolicyPeerStateChange, tmnxDiameterDccaGxGroup=tmnxDiameterDccaGxGroup, tmnxDiamPlcyDccaApplicationType=tmnxDiamPlcyDccaApplicationType, tmnxDiamPlcyPeerConnectionTimer=tmnxDiamPlcyPeerConnectionTimer, tmnxDiamPlcySourceAddrType=tmnxDiamPlcySourceAddrType, tmnxDiamPeerStCcaTerminateRx=tmnxDiamPeerStCcaTerminateRx, tmnxDiamPeerStCiDiamTxReqs=tmnxDiamPeerStCiDiamTxReqs, tmnxDiamAppMessageDropped=tmnxDiamAppMessageDropped, tmnxDiameterV8v0MIBCompliance=tmnxDiameterV8v0MIBCompliance, tmnxDiamPlcyPeerStatsTable=tmnxDiamPlcyPeerStatsTable, tmnxDiamPlcyPeerAddrType=tmnxDiamPlcyPeerAddrType, tmnxDiamPeerStAsaTx=tmnxDiamPeerStAsaTx, tmnxDiamPeerCooldownSeqActive=tmnxDiamPeerCooldownSeqActive, tmnxDiamAppPlcyName=tmnxDiamAppPlcyName, tmnxDiameterBaseV7v0Group=tmnxDiameterBaseV7v0Group, tmnxDiamPeerStSiTcpSendFailed=tmnxDiamPeerStSiTcpSendFailed, tmnxDiamPlcySourceAddr=tmnxDiamPlcySourceAddr)
