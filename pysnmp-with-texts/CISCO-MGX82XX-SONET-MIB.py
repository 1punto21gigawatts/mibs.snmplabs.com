#
# PySNMP MIB module CISCO-MGX82XX-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
cwsonetObjects, = mibBuilder.importSymbols("BASIS-MIB", "cwsonetObjects")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, IpAddress, MibIdentifier, Gauge32, Counter64, ObjectIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "IpAddress", "MibIdentifier", "Gauge32", "Counter64", "ObjectIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1))
cwsonetMedium = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2))
cwsonetSection = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3))
cwsonetLine = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4))
cwsonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5))
sonetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1), )
if mibBuilder.loadTexts: sonetConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetConfigTable.setDescription('The SONET Configuration table. There is one row for each SONET port in the BASIS system. The table size (number of rows) is given by the value of sonetLineNumOfValidEntries.')
sonetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetLineNum"))
if mibBuilder.loadTexts: sonetConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetConfigEntry.setDescription('An entry in the SONET Configuration table.')
sonetLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineNum.setDescription('This object is the identifier of a SONET Interface on a managed device. For MGX8850(For example PXM1 Module): OC-3 : sonetLineNum in a range 1..4 OC-12: sonetLineNum = 1 is the ONLY valid number For Other: sonetLineNum = 1 is the ONLY valid number')
sonetLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sonetSts3c", 1), ("sonetStm1", 2), ("sonetSts12c", 3), ("sonetStm4", 4), ("sonetSts48c", 5), ("sonetStm16", 6), ("sonetSts192c", 7), ("sonetStm64", 8), ("sonetSts3", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineType.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineType.setDescription('This variable indicates the cell framing. Defaults to Sts-3c ')
sonetLineLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonetNoLoop", 1), ("sonetRemoteLineLoop", 2), ("sonetLocalLineLoop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineLoopbackCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineLoopbackCommand.setDescription("This variable represents the loopback configuration of the SONET interface. The values mean: sonetNoLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as it's value. sonetRemoteLineLoop Near End loops back Remote data sonetLocalLineLoop Near End loops back Local data.")
sonetHCSmasking = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetHCSmasking.setStatus('mandatory')
if mibBuilder.loadTexts: sonetHCSmasking.setDescription('HCS masking. Defaults to enable. ')
sonetPayloadScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPayloadScrambling.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPayloadScrambling.setDescription('STS3c or STM-1 payload scrambling. Defaults to enable. ')
sonetFrameScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFrameScrambling.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFrameScrambling.setDescription('STS3c or STM-1 frame scrambling. Defaults to enable. ')
sonetLineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineEnable.setDescription('This variable indicates if the line is enabled or not defaults to disable ')
sonetLineXmtClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("backplaneClk", 1), ("recoverClk", 2), ("localClk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineXmtClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineXmtClkSrc.setDescription('This represents the type of transmit clock source. backplaneClk: clock source is from the controller card, transmitted via the backplane to the service module. recoverClk: clock is recovered from the received signal. localClk: clock is from a local oscillator on the card. Default is backplaneClk.')
sonetRDIVType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("onebit", 1), ("threebit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetRDIVType.setStatus('mandatory')
if mibBuilder.loadTexts: sonetRDIVType.setDescription('This variable represents the type of RDI-V sent by this NE to remote NE. onebit: use 1 bit RDI-V. Compatible with older equipment. threebit: use 3 bit, enhanced RDI-V. Defaults to onebit. ')
sonetRDIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("onebit", 1), ("threebit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetRDIPType.setStatus('mandatory')
if mibBuilder.loadTexts: sonetRDIPType.setDescription('This variable represents the type of RDI-P sent by this NE to remote NE. onebit: use 1 bit RDI-P. Compatible with older equipment. threebit: use 3 bit, enhanced RDI-P. Defaults to onebit. ')
sonetTributaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt15vc11", 1), ("vt2vc12", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTributaryType.setStatus('mandatory')
if mibBuilder.loadTexts: sonetTributaryType.setDescription('Type of tributary carried within the Sonet/Sdh signal. vt15vc11: carries T1 signals (VT15 or VC11) vt2vc12: carries E1 signals (VT2 or VC12) Default is vt15vc11 for Sonet interfaces and vt2vc12 for SDH interfaces. ')
sonetTributaryMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asynchronous", 1), ("byteSynchronous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTributaryMappingType.setStatus('mandatory')
if mibBuilder.loadTexts: sonetTributaryMappingType.setDescription('Type of VT/VC mapping. asynchronous: In this mode, the channel structure of the DS1/E1 is neither visible nor preserved. byteSynchronous: In this mode, the DS0 channels inside the VC/VT can be found and extracted. Default is asynchronous. ')
sonetTributaryFramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("sf", 2), ("esf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTributaryFramingFormat.setStatus('mandatory')
if mibBuilder.loadTexts: sonetTributaryFramingFormat.setDescription('Type of vt framing format. Is applicable only in byte-sync mapping mode for T1 tributaries. notApplicable: if VT mapping is not byte-sync. sf: superframe format. esf: extended superframe format. Default is esf if sonetTributaryMappingType is set to byteSynchronous, else the default is notApplicable. ')
sonetSignallingTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("signallingTransferMode", 2), ("clearMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSignallingTransportMode.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSignallingTransportMode.setDescription('The mode used to transport DS0 signalling information for T1 byte-sync mapping. notApplicable: if byte-sync mapping is not used. signallingTransferMode: the robbed bit signalling is transferred into the S bits of the VT header and framing bit is discarded. clearMode: only the framing bit is transferred to VT header. The signalling bits are left intact in the VT payload. Default is signallingTransferMode if sonetTributaryMappingType is set to byteSynchronous, else the default is notApplicable. ')
sonetTributaryGroupingType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("au3Grouping", 2), ("au4Grouping", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTributaryGroupingType.setStatus('mandatory')
if mibBuilder.loadTexts: sonetTributaryGroupingType.setDescription('This variable indicates the method used to group VCs into an STM-1 signal. Applicable only to SDH. notApplicable: for sonet interfaces. au3Grouping: STM-1 <- AU-3 <- TUG-2 <- TU-12 <- VC12 or STM-1 <- AU-3 <- TUG-2 <- TU-11 <- VC11. au4Grouping: STM-1 <- AU-4 <- TUG-3 <- TUG-2 <- TU-12 <- VC12 or STM-1 <- AU-4 <- TUG-3 <- TUG-2 <- TU-11 <- VC11. Defaults to au3Grouping for SDH interfaces and notApplicable for Sonet interfaces. ')
sonetConfigNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetConfigNumOfValidEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sonetConfigNumOfValidEntries.setDescription('The number of SONET configuration entries (regardless of their current configuration) in the sonetConfigTable.')
cwSonetMediumTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1), )
if mibBuilder.loadTexts: cwSonetMediumTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetMediumTable.setDescription(' Sonet medium table parameters')
cwSonetMediumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetLineNum"))
if mibBuilder.loadTexts: cwSonetMediumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetMediumEntry.setDescription('An entry in the SONET/SDH Medium table.')
cwSonetMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumType.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetMediumType.setDescription('This variable identifies whether a SONET or a SDH signal is used across this interface.')
cwSonetMediumTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetMediumTimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the mandatory error-measurement period.')
cwSonetMediumValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetMediumValidIntervals.setDescription('The number of previous intervals for which valid data has been stored. A SONET device must support at least n intervals. The minimum value of n is 4. The default of n is 32. The maximum value of n is 96. The value of this object will be n unless the device was brought online within the last (nx15) minutes, in which case the value will be the number of complete 15 minute intervals the device has been online.')
cwSonetMediumLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonetMediumOther", 1), ("sonetMediumB3ZS", 2), ("sonetMediumCMI", 3), ("sonetMediumNRZ", 4), ("sonetMediumRZ", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetMediumLineCoding.setDescription('This variable describes the line coding for this interface. The B3ZS and CMI are used for electrical SONET/SDH signals (STS-1 and STS-3). The Non-Return to Zero (NRZ) and the Return to Zero are used for optical SONET/SDH signals.')
cwSonetMediumLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sonetOther", 1), ("sonetShortSingleMode", 2), ("sonetLongSingleMode", 3), ("sonetMultiMode", 4), ("sonetCoax", 5), ("sonetUTP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumLineType.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetMediumLineType.setDescription('This variable describes the line type for this interface. The line types are Short and Long Range Single Mode fiber or Multi-Mode fiber interfaces, and coax and UTP for electrical interfaces. The value sonetOther should be used when the Line Type is not one of the listed values.')
cwSonetMediumCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetMediumCircuitIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetMediumCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
cwSonetSectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1), )
if mibBuilder.loadTexts: cwSonetSectionCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentTable.setDescription('The SONET/SDH Section Current table.')
cwSonetSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetSectionCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetSectionCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentEntry.setDescription('An entry in the SONET/SDH Section Current table.')
cwSonetSectionCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentLineNum.setDescription(' line number. There are Max 1 line Num ')
cwSonetSectionCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentStatus.setDescription('This variable indicates the status of the sonet section layer. The cwSonetSectionCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetSectionNoDefect should be set if and only if no other flag is set. The various bit positions are: bit 1 = sonetSectionNoDefect bit 2 = sonetSectionLOS bit 3 = sonetSectionLOF ')
cwSonetSectionCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentValidFlag.setDescription('Indicates if the current 15min bucket is valid or not. ')
cwSonetSectionCurrent15minTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrent15minTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrent15minTimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the 15min error-measurement period. ')
cwSonetSectionCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in the current 15 minute interval.')
cwSonetSectionCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in the current 15 minute interval.')
cwSonetSectionCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in the current 15 minute interval.')
cwSonetSectionCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionCurrentCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in the current 15 minute interval.')
cwSonetSectionCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetSectionCurrentClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionCurrentClrButton.setDescription("Clears all the Section's Current15min counters. ")
sonetSectionCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2), )
if mibBuilder.loadTexts: sonetSectionCurrentDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayTable.setDescription('The SONET/SDH Section CurrentDay table.')
sonetSectionCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetSectionCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetSectionCurrentDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayEntry.setDescription('An entry in the SONET/SDH Section CurrentDay table.')
sonetSectionCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDayLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayLineNum.setDescription(' line number. BNM has one line ')
sonetSectionCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDayValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayValidFlag.setDescription('Indicates if the current day bucket is valid or not. ')
sonetSectionCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDayESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in the CurrentDay one day interval.')
sonetSectionCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDaySESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in the CurrentDay minute interval.')
sonetSectionCurrentDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDaySEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDaySEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in the CurrentDay one day interval.')
sonetSectionCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCurrentDayCVs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in the CurrentDay one day interval.')
sonetSectionCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDayClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayClrButton.setDescription("Clears all the Section's Current Day counters. ")
cwSonetSectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3), )
if mibBuilder.loadTexts: cwSonetSectionIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalTable.setDescription('The SONET/SDH Section Interval table.')
cwSonetSectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetSectionIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetSectionIntervalNumber"))
if mibBuilder.loadTexts: cwSonetSectionIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalEntry.setDescription('An entry in the SONET/SDH Section Interval table.')
cwSonetSectionIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalLineNum.setDescription(' line number. BNM has one line ')
cwSonetSectionIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cwSonetSectionIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalValidFlag.setDescription('Indicates if the bucket specified by the interval is valid or not. ')
cwSonetSectionIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
cwSonetSectionIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
cwSonetSectionIntervalSEFss = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalSEFss.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalSEFss.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
cwSonetSectionIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetSectionIntervalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetSectionIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
sonetSectionAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4), )
if mibBuilder.loadTexts: sonetSectionAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionAlarmTable.setDescription('The SONET/SDH Section Alarm table.')
sonetSectionAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sectionAlarmLineNum"))
if mibBuilder.loadTexts: sonetSectionAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionAlarmEntry.setDescription('An entry in the SONET/SDH Section Alarm table.')
sectionAlarmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectionAlarmLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sectionAlarmLineNum.setDescription(' line number. BNM has 1 line ')
sonetSectionStatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionStatisticalAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionStatisticalAlarmSeverity.setDescription('When any statistical threshold is exceeded. ')
sonetSectionCurrent15minESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrent15minESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrent15minESsThreshold.setDescription('The default is set to 20. ')
sonetSectionCurrentDayESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDayESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayESsThreshold.setDescription('The default is set to 200. ')
sonetSectionCurrent15minSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrent15minSESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrent15minSESsThreshold.setDescription('The default is set to 3. ')
sonetSectionCurrentDaySESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDaySESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDaySESsThreshold.setDescription('The default is set to 7. ')
sonetSectionCurrent15minSEFSsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrent15minSEFSsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrent15minSEFSsThreshold.setDescription('The default is set to 3. ')
sonetSectionCurrentDaySEFSsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDaySEFSsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDaySEFSsThreshold.setDescription('The default is set to 7. ')
sonetSectionCurrent15minCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrent15minCVsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrent15minCVsThreshold.setDescription('The default is set to 25. ')
sonetSectionCurrentDayCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCurrentDayCVsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCurrentDayCVsThreshold.setDescription('The default is set to 250. ')
sonetSectionTraceSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("sixtyFourBytes", 2), ("sixtyFourBytesCrlf", 3), ("sixteenBytes", 4), ("sixteenBytesCrc7", 5), ("sixteenBytesMsb1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionTraceSelection.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionTraceSelection.setDescription('Sonet Section Trace Selection. ')
sonetSectionTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionTraceToTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionTraceToTransmit.setDescription('Sonet Section Trace To Transmit. 16-64 bytes String. If 16 byte trace is selected, FW will only use bytes 0-15 of the string. ')
sonetSectionTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionTraceToExpect.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionTraceToExpect.setDescription('Sonet Section Trace To Expect. 16-64 bytes String. If 16 byte trace is selected, FW will only use bytes 0-15 of the string. ')
sonetSectionTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionTraceReceived.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionTraceReceived.setDescription('Sonet Section Trace Received. 16-64 bytes String. The write option is for debugging only. ')
sonetSectionStatAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionStatAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionStatAlarmStatus.setDescription('This variable indicates the status of the interface. The sonetSectionStatAlarmStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetLineStatAlarmNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetSectionStatAlarmNoDefect 2 sonetSectionCurrent15minESs 3 sonetSectionCurrent15minSESs 4 sonetSectionCurrent15minSEFSs 5 sonetSectionCurrent15minCVs 6 sonetSectionCurrentDayESs 7 sonetSectionCurrentDaySESs 8 sonetSectionCurrentDaySEFSs 9 sonetSectionCurrentDayCVs ')
sonetSectionCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5), )
if mibBuilder.loadTexts: sonetSectionCounterTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCounterTable.setDescription('The SONET/SDH Section Counter table.')
sonetSectionCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sectionCounterLineNum"))
if mibBuilder.loadTexts: sonetSectionCounterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCounterEntry.setDescription('An entry in the SONET/SDH Section table.')
sectionCounterLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectionCounterLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sectionCounterLineNum.setDescription(' line number. There are Max 1 line on the BNM ')
sonetSectionCounterLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCounterLOSs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCounterLOSs.setDescription('The counter associated with the number of LOSs encountered by a SONET/SDH. ')
sonetSectionCounterLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionCounterLOFs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCounterLOFs.setDescription('The counter associated with the number of LOFs encountered by a SONET/SDH Section. ')
sonetSectionCounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionCounterClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: sonetSectionCounterClrButton.setDescription("Clears all the Section's counters. ")
cwSonetLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1), )
if mibBuilder.loadTexts: cwSonetLineCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentTable.setDescription('The SONET/SDH Line Current table.')
cwSonetLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetLineCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetLineCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentEntry.setDescription('An entry in the SONET/SDH Line Current table.')
cwSonetLineCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentLineNum.setDescription(' line number. BNM has one line ')
cwSonetLineCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentStatus.setDescription('This variable indicates the status of the sonet line layer. The cwSonetLineCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetLineNoDefect should be set if and only if no other flag is set. The various bit positions are: bit 1 = sonetLineNoDefect bit 2 = sonetLineRcvAIS bit 3 = sonetLineRcvRDI bit 4 = sonetLineXmtAis bit 5 = sonetLineXmtRdi ')
cwSonetLineCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentValidFlag.setDescription('Indicates if the current 15min bucket is valid or not. ')
cwSonetLineCurrent15minTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrent15minTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrent15minTimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the 15min error-measurement period. ')
cwSonetLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
cwSonetLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
cwSonetLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in the current 15 minute interval.')
cwSonetLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
cwSonetLineCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetLineCurrentClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineCurrentClrButton.setDescription("Clears all the SONET Line's Current15min counters. ")
sonetLineCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2), )
if mibBuilder.loadTexts: sonetLineCurrentDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayTable.setDescription('The SONET/SDH Line Current Day table.')
sonetLineCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "lineCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetLineCurrentDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayEntry.setDescription('An entry in the SONET/SDH Line Current Day table.')
lineCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCurrentDayLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: lineCurrentDayLineNum.setDescription(' line number. BNM has 1 line ')
sonetLineCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayValidFlag.setDescription('Indicates if the current day bucket is valid or not. ')
sonetLineCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in the current day interval.')
sonetLineCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDaySESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in the current day interval.')
sonetLineCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayCVs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayCVs.setDescription('The counter associated with the number of Coding Violations (BIP-8*N for STS-N) encountered by a SONET/SDH Line in the current day interval.')
sonetLineCurrentDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayFCs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayFCs.setDescription('Number of times that line was in AIS alarm in the current day interval. ')
sonetLineCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCurrentDayUASs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in the current day interval.')
sonetLineCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDayClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayClrButton.setDescription("Clears all the SONET Line's CurrentDay counters. ")
cwSonetLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3), )
if mibBuilder.loadTexts: cwSonetLineIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalTable.setDescription('The SONET/SDH Line Interval table.')
cwSonetLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetLineIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetLineIntervalNumber"))
if mibBuilder.loadTexts: cwSonetLineIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalEntry.setDescription('An entry in the SONET/SDH Line Interval table.')
cwSonetLineIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalLineNum.setDescription(' line number. BNM has one line ')
cwSonetLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cwSonetLineIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalValidFlag.setDescription('Indicates if the bucket specified by the interval is valid or not. ')
cwSonetLineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
cwSonetLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
cwSonetLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalCVs.setDescription('The counter associated with the number of Coding Violations (BIP-8*N) encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
cwSonetLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalFCs.setDescription('Number of times that line was in AIS alarm in the particular 15-minute interval in the past 24 hours.')
cwSonetLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetLineIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetLineIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4), )
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentTable.setDescription('The SONET/SDH Far End Line Current table.')
cwSonetFarEndLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFELineCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentEntry.setDescription('An entry in the SONET/SDH Far End Line Current table.')
cwSonetFELineCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFELineCurrentLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFELineCurrentLineNum.setDescription(' line number. BNM has one line ')
cwSonetFarEndLineCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentValidFlag.setDescription('Indicates if the Far End current 15min bucket is valid or not. ')
cwSonetFarEndLineCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentTimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the 15min error-measurement period. ')
cwSonetFarEndLineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentESs.setDescription('The counter associated with the number of Far Far End Errored Seconds encountered by a SONET/SDH interface in the current 15 minute interval.')
cwSonetFarEndLineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Medium/Section/Line interface in the current 15 minute interval.')
cwSonetFarEndLineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error (FEBE) count encountered by a SONET/SDH Medium/Section/Line interface in the current 15 minute interval.')
cwSonetFarEndLineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentFCs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentFCs.setDescription('The counter associated with the number of RFI failures occurred in the current 15 min. ')
cwSonetFarEndLineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Medium/Section/Line interface in the current 15 minute interval.')
cwSonetFarEndLineCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineCurrentClrButton.setDescription("Clears all the SONET Far End Line's Current 15min counters. ")
sonetFarEndLineCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5), )
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayTable.setDescription('The SONET/SDH Far End Line CurrentDay table.')
sonetFarEndLineCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetFELineCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayEntry.setDescription('An entry in the SONET/SDH Far End Line CurrentDay table.')
sonetFELineCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFELineCurrentDayLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFELineCurrentDayLineNum.setDescription(' line number. BNM has one line ')
sonetFarEndLineCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayValidFlag.setDescription('Indicates if the Far End current day bucket is valid or not. ')
sonetFarEndLineCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayESs.setDescription('The counter associated with the number of Far Far End Errored Seconds encountered by a SONET/SDH interface in the current day interval.')
sonetFarEndLineCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDaySESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDaySESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Medium/Section/Line interface in the current day interval.')
sonetFarEndLineCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayCVs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error (FEBE) count encountered by a SONET/SDH Medium/Section/Line interface in the current day interval.')
sonetFarEndLineCurrentDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayFCs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayFCs.setDescription('The counter associated with the number of RFI failures occurred in the current day interval. ')
sonetFarEndLineCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayUASs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Medium/Section/Line interface in the current day interval.')
sonetFarEndLineCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndLineCurrentDayClrButton.setDescription("Clears all the SONET Far End Line's Current Day counters. ")
cwSonetFarEndLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6), )
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalTable.setDescription('The SONET/SDH Far End Line Interval table.')
cwSonetFarEndLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFELineIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFarEndLineIntervalNumber"))
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalEntry.setDescription('An entry in the SONET/SDH Far End Line Interval table.')
cwSonetFELineIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFELineIntervalLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFELineIntervalLineNum.setDescription(' line number. BNM has one line ')
cwSonetFarEndLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cwSonetFarEndLineIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalValidFlag.setDescription('Indicates if the bucket specified by the interval is valid or not. ')
cwSonetFarEndLineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH Line interface in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndLineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Line interface in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndLineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error count encountered by a SONET/SDH Line interface in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalFCs.setDescription('The counter associated with the number of RFI failures in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndLineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndLineIntervalUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Line interface in a particular 15-minute interval in the past 24 hours.')
sonetLineAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7), )
if mibBuilder.loadTexts: sonetLineAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineAlarmTable.setDescription('The SONET/SDH Line Alarm table.')
sonetLineAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetLineAlarmLineNum"))
if mibBuilder.loadTexts: sonetLineAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineAlarmEntry.setDescription('An entry in the SONET/SDH Line Alarm table.')
sonetLineAlarmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineAlarmLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineAlarmLineNum.setDescription(' line number. BNM has one line ')
sonetLineStatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineStatisticalAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineStatisticalAlarmSeverity.setDescription('When any statistical threshold is exceeded. ')
sonetLineCurrent15minESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrent15minESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrent15minESsThreshold.setDescription('The default is set to 20. This threshold is the same for Far End and Near End. ')
sonetLineCurrentDayESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDayESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayESsThreshold.setDescription('The default is set to 200. This threshold is the same for Far End and Near End. ')
sonetLineCurrent15minSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrent15minSESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrent15minSESsThreshold.setDescription('The default is set to 3. This threshold is the same for Far End and Near End. ')
sonetLineCurrentDaySESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDaySESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDaySESsThreshold.setDescription('The default is set to 7. This threshold is the same for Far End and Near End. ')
sonetLineCurrent15minCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrent15minCVsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrent15minCVsThreshold.setDescription('The default is set to 25. This threshold is the same for Far End and Near End. ')
sonetLineCurrentDayCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDayCVsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayCVsThreshold.setDescription('The default is set to 250. This threshold is the same for Far End and Near End. ')
sonetLineCurrent15minUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrent15minUASsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrent15minUASsThreshold.setDescription('The default is set to 10. This threshold is the same for Far End and Near End. ')
sonetLineCurrentDayUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCurrentDayUASsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCurrentDayUASsThreshold.setDescription('The default is set to 10. This threshold is the same for Far End and Near End. ')
sonetLineStatAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineStatAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineStatAlarmStatus.setDescription('This variable indicates the status of the interface. The sonetLineStatAlarmStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetLineStatAlarmNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetLineStatAlarmNoDefect 2 sonetLineCurrent15minESs 3 sonetLineCurrent15minSESs 4 sonetLineCurrent15minCVs 5 sonetLineCurrent15minUASs 6 sonetFarEndLineCurrent15minESs 7 sonetFarEndLineCurrent15minSESs 8 sonetFarEndLineCurrent15minCVs 9 sonetFarEndLineCurrent15minUASs 10 sonetLineCurrentDayESs 11 sonetLineCurrentDaySESs 12 sonetLineCurrentDayCVs 13 sonetLineCurrentDayUASs 14 sonetFarEndLineCurrentDayESs 15 sonetFarEndLineCurrentDaySESs 16 sonetFarEndLineCurrentDayCVs 17 sonetFarEndLineCurrentDayUASs ')
sonetLineCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8), )
if mibBuilder.loadTexts: sonetLineCounterTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCounterTable.setDescription('The SONET/SDH Line Counter table.')
sonetLineCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetLineCounterLineNum"))
if mibBuilder.loadTexts: sonetLineCounterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCounterEntry.setDescription('An entry in the SONET/SDH Line table.')
sonetLineCounterLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCounterLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCounterLineNum.setDescription(' line number. BNM has one line ')
sonetLineCounterAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCounterAISs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCounterAISs.setDescription('The counter associated with the number of AISs encountered by a SONET/SDH. ')
sonetLineCounterRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCounterRFIs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCounterRFIs.setDescription('The counter associated with the number of RFIs encountered by a SONET/SDH Line. ')
sonetLineCounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineCounterClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: sonetLineCounterClrButton.setDescription("Clears all the Line's counters. ")
cwSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1), )
if mibBuilder.loadTexts: cwSonetPathCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentTable.setDescription('The SONET/SDH Path Current table.')
cwSonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetPathCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetPathCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentEntry.setDescription('An entry in the SONET/SDH Path Current table.')
cwSonetPathCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentLineNum.setDescription(' line number. BNM has 1 line ')
cwSonetPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentStatus.setDescription('This variable indicates the status of the sonet path layer. The cwSonetPathCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetPathNoDefect should be set if and only if no other flag is set. The various bit positions are: bit 1 = sonetPathNoDefect bit 2 = sonetPathRcvLOP bit 3 = sonetPathRcvAIS bit 4 = sonetPathRcvRDI bit 5 = sonetPathUnequipted bit 6 = sonetPathSignalLabelMismatch bit 7 = sonetPathTraceFailure bit 8 = sonetPathXmtAis bit 9 = sonetPathXmtRdi bit 10 = sonetPathRcvLOCD ')
cwSonetPathCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentValidFlag.setDescription('Indicates if the current 15min bucket is valid or not. ')
cwSonetPathCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentTimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the 15min error-measurement period. ')
cwSonetPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in the current 15 minute interval.')
cwSonetPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in the current 15 minute interval.')
cwSonetPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentCVs.setDescription('The counter associated with the number of Coding Violations (BIP-8) encountered by a SONET/SDH Path in the current 15 minute interval.')
cwSonetPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentFCs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentFCs.setDescription('Number of times that Path was in AIS or LOP alarm in the current 15 minute interval. ')
cwSonetPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in the current 15 minute, interval.')
cwSonetPathCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetPathCurrentClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathCurrentClrButton.setDescription("Clears all the SONET Path's Current counters. ")
sonetPathCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2), )
if mibBuilder.loadTexts: sonetPathCurrentDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayTable.setDescription('The SONET/SDH Path CurrentDay table.')
sonetPathCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetPathCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetPathCurrentDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayEntry.setDescription('An entry in the SONET/SDH Path CurrentDay table.')
sonetPathCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayLineNum.setDescription(' line number. BNM has one line ')
sonetPathCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayValidFlag.setDescription('Indicates if the current day bucket is valid or not. ')
sonetPathCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in the Current day interval.')
sonetPathCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDaySESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in the Current day interval.')
sonetPathCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayCVs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayCVs.setDescription('The counter associated with the number of Coding Violations (BIP-8) encountered by a SONET/SDH Path in the Current day interval.')
sonetPathCurrentDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayFCs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayFCs.setDescription('Number of times that Path was in AIS or LOP alarm in the Current interval. ')
sonetPathCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCurrentDayUASs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in the Current day, interval.')
sonetPathCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDayClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayClrButton.setDescription("Clears all the SONET Path's CurrentDay counters. ")
cwSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3), )
if mibBuilder.loadTexts: cwSonetPathIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalTable.setDescription('The SONET/SDH Path Interval table.')
cwSonetPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetPathIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetPathIntervalNumber"))
if mibBuilder.loadTexts: cwSonetPathIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalEntry.setDescription('An entry in the SONET/SDH Path Interval table.')
cwSonetPathIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalLineNum.setDescription(' line number. BNM has one line ')
cwSonetPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cwSonetPathIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalValidFlag.setDescription('Indicates if the bucket specified by the interval is valid or not. ')
cwSonetPathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
cwSonetPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
cwSonetPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
cwSonetPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalFCs.setDescription('Number of times that Path was in AIS or LOP alarm in a particular 15-minute interval in the past 24 hours.')
cwSonetPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetPathIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetPathIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4), )
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentTable.setDescription('The SONET/SDH Far End Path Current table.')
cwSonetFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFEPathCurrentLineNum"))
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentEntry.setDescription('An entry in the SONET/SDH Far End Path Current table.')
cwSonetFEPathCurrentLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFEPathCurrentLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFEPathCurrentLineNum.setDescription(' line number. BNM has one line ')
cwSonetFarEndPathCurrentValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentValidFlag.setDescription('Indicates if the Far End current 15min bucket is valid or not. ')
cwSonetFarEndPathCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentTimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the 15min error-measurement period. ')
cwSonetFarEndPathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentESs.setDescription('The counter associated with the number of Far Far End Errored Seconds encountered by a SONET/SDH interface in the current 15 minute interval. ')
cwSonetFarEndPathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Path interface in the current 15 minute interval.')
cwSonetFarEndPathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error (FEBE) count encountered by a SONET/SDH Path interface in the current 15 minute interval.')
cwSonetFarEndPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentFCs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentFCs.setDescription('The counter associated with the number of RFIs in the current 15 minute interval.')
cwSonetFarEndPathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Path interface in the current 15 minute interval.')
cwSonetFarEndPathCurrentClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathCurrentClrButton.setDescription('Clears all the Far End Path Current counters. ')
sonetFarEndPathCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5), )
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayTable.setDescription('The SONET/SDH Far End Path CurrentDay table.')
sonetFarEndPathCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetFEPathCurrentDayLineNum"))
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayEntry.setDescription('An entry in the SONET/SDH Far End Path CurrentDay table.')
sonetFEPathCurrentDayLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFEPathCurrentDayLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFEPathCurrentDayLineNum.setDescription(' line number. BNM has one line ')
sonetFarEndPathCurrentDayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayValidFlag.setDescription('Indicates if the Far End current day bucket is valid or not. ')
sonetFarEndPathCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayESs.setDescription('The counter associated with the number of Far Far End Errored Seconds encountered by a SONET/SDH interface in the Current day interval.')
sonetFarEndPathCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDaySESs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDaySESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Path interface in the Current day interval.')
sonetFarEndPathCurrentDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayCVs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error (FEBE) count encountered by a SONET/SDH Path interface in the Current day interval.')
sonetFarEndPathCurrentDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayFCs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayFCs.setDescription('The counter associated with the number of RFIs in the Current day interval.')
sonetFarEndPathCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayUASs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Path interface in the Current day interval.')
sonetFarEndPathCurrentDayClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: sonetFarEndPathCurrentDayClrButton.setDescription('Clears all the Far End Path CurrentDay counters. ')
cwSonetFarEndPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6), )
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalTable.setDescription('The SONET/SDH Far End Path Interval table.')
cwSonetFarEndPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFEPathIntervalLineNum"), (0, "CISCO-MGX82XX-SONET-MIB", "cwSonetFarEndPathIntervalNumber"))
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalEntry.setDescription('An entry in the SONET/SDH Far End Path Interval table.')
cwSonetFEPathIntervalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFEPathIntervalLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFEPathIntervalLineNum.setDescription(' line number. BNM has one line ')
cwSonetFarEndPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cwSonetFarEndPathIntervalValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalValidFlag.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalValidFlag.setDescription('Indicates if the bucket specified by the interval is valid or not. ')
cwSonetFarEndPathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalESs.setDescription('The counter associated with the number of Far End Errored Seconds encountered by a SONET/SDH Path interface in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndPathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalSESs.setDescription('The counter associated with the number of Far End Severely Errored Seconds encountered by a SONET/SDH Path interface in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndPathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalCVs.setDescription('The counter associated with the number of Far End Coding Violations reported via the far end block error count encountered by a SONET/SDH Path interface in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalFCs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalFCs.setDescription('The counter associated with the number of RFIs in in a particular 15-minute interval in the past 24 hours.')
cwSonetFarEndPathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: cwSonetFarEndPathIntervalUASs.setDescription('The counter associated with the number of Far End Unavailable Seconds encountered by a SONET/SDH Path interface in a particular 15-minute interval in the past 24 hours.')
sonetPathAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7), )
if mibBuilder.loadTexts: sonetPathAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathAlarmTable.setDescription('The SONET/SDH Path Alarm table.')
sonetPathAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetPathAlarmLineNum"))
if mibBuilder.loadTexts: sonetPathAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathAlarmEntry.setDescription('An entry in the SONET/SDH Path Alarm table.')
sonetPathAlarmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathAlarmLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathAlarmLineNum.setDescription(' line number. BNM has one line ')
sonetPathStatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathStatisticalAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathStatisticalAlarmSeverity.setDescription('When any statistical threshold is exceeded. ')
sonetPathCurrent15minESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrent15minESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrent15minESsThreshold.setDescription('The default is set to 20. This threshold is the same for Far End and Near End. ')
sonetPathCurrentDayESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDayESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayESsThreshold.setDescription('The default is set to 200. This threshold is the same for Far End and Near End. ')
sonetPathCurrent15minSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrent15minSESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrent15minSESsThreshold.setDescription('The default is set to 3. This threshold is the same for Far End and Near End. ')
sonetPathCurrentDaySESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDaySESsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDaySESsThreshold.setDescription('The default is set to 7. This threshold is the same for Far End and Near End. ')
sonetPathCurrent15minCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrent15minCVsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrent15minCVsThreshold.setDescription('The default is set to 25. This threshold is the same for Far End and Near End. ')
sonetPathCurrentDayCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDayCVsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayCVsThreshold.setDescription('The default is set to 250. This threshold is the same for Far End and Near End. ')
sonetPathCurrent15minUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrent15minUASsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrent15minUASsThreshold.setDescription('The default is set to 10. This threshold is the same for Far End and Near End. ')
sonetPathCurrentDayUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCurrentDayUASsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCurrentDayUASsThreshold.setDescription('The default is set to 10. This threshold is the same for Far End and Near End. ')
sonetPathTraceSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("sixtyFourBytes", 2), ("sixtyFourBytesCrlf", 3), ("sixteenBytes", 4), ("sixteenBytesCrc7", 5), ("sixteenBytesMsb1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathTraceSelection.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathTraceSelection.setDescription('Sonet Path Trace Selection. ')
sonetPathTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathTraceToTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathTraceToTransmit.setDescription('Sonet Path Trace To Transmit. 64-bytes String. If 16 byte trace is selected, FW will only use bytes 0-15 of the string. ')
sonetPathTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathTraceToExpect.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathTraceToExpect.setDescription('Sonet Path Trace To Expect. 64-bytes String. If 16 byte trace is selected, FW will only use bytes 0-15 of the string. ')
sonetPathTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathTraceReceived.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathTraceReceived.setDescription('Sonet Path Trace Received. 64-bytes String. The write option is for debugging only. ')
sonetPathStatAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathStatAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathStatAlarmStatus.setDescription('This variable indicates the status of the interface. The sonetPathStatAlarmStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetPathStatAlarmNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetPathStatAlarmNoDefect 2 sonetPathCurrent15minESs 3 sonetPathCurrent15minSESs 4 sonetPathCurrent15minCVs 5 sonetPathCurrent15minUASs 6 sonetFarEndPathCurrent15minESs 7 sonetFarEndPathCurrent15minSESs 8 sonetFarEndPathCurrent15minCVs 9 sonetFarEndPathCurrent15minUASs 10 sonetPathCurrentDayESs 11 sonetPathCurrentDaySESs 12 sonetPathCurrentDayCVs 13 sonetPathCurrentDayUASs 14 sonetFarEndPathCurrentDayESs 15 sonetFarEndPathCurrentDaySESs 16 sonetFarEndPathCurrentDayCVs 17 sonetFarEndPathCurrentDayUASs ')
sonetPathCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8), )
if mibBuilder.loadTexts: sonetPathCounterTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCounterTable.setDescription('The SONET/SDH Path Counter table.')
sonetPathCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "sonetPathCounterLineNum"))
if mibBuilder.loadTexts: sonetPathCounterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCounterEntry.setDescription('An entry in the SONET/SDH Path table.')
sonetPathCounterLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCounterLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCounterLineNum.setDescription(' line number. BNM has one line ')
sonetPathCounterAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCounterAISs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCounterAISs.setDescription('The counter associated with the number of AISs encountered by a SONET/SDH. ')
sonetPathCounterRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathCounterRFIs.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCounterRFIs.setDescription('The counter associated with the number of RFIs encountered by a SONET/SDH Path. ')
sonetPathCounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathCounterClrButton.setStatus('mandatory')
if mibBuilder.loadTexts: sonetPathCounterClrButton.setDescription("Clears all the Path's counters. ")
sonetApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6))
sonetApsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1), )
if mibBuilder.loadTexts: sonetApsConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sonetApsConfigTable.setDescription('The Sonet APS config table')
sonetApsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-SONET-MIB", "apsWorkingLine"))
if mibBuilder.loadTexts: sonetApsConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sonetApsConfigEntry.setDescription('An entry in the Sonet APS table. Each Entry is index by the working Line number. ')
apsWorkingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsWorkingSlot.setStatus('mandatory')
if mibBuilder.loadTexts: apsWorkingSlot.setDescription('This object is the chassis slot number of the working line MGX 8x50 PXM: can only be slot 7 or 8. MGX 8x30 PXM: can only be slot 1 or 2. MGX 8x50 SRME: can only be slot 15,16,31 or 32 MGX 8x30 SRME: can only be slot 7 or 14 ')
apsWorkingLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsWorkingLine.setStatus('mandatory')
if mibBuilder.loadTexts: apsWorkingLine.setDescription('This object is the line number of the working line OC-3 : sonetLineNum in a range 1..4 OC-12: sonetLineNum = 1 is the ONLY valid number ')
apsProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtectionSlot.setStatus('mandatory')
if mibBuilder.loadTexts: apsProtectionSlot.setDescription('This object is the chassis slot number of the protection line MGX 8x50 PXM: can only be slot 7 or 8. MGX 8x30 PXM: can only be slot 1 or 2. MGX 8x50 SRME: can only be slot 15,16,31 or 32 MGX 8x30 SRME: can only be slot 7 or 14 ')
apsProtectionLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsProtectionLine.setStatus('mandatory')
if mibBuilder.loadTexts: apsProtectionLine.setDescription('This object is the line number of the working line OC-3 : sonetLineNum in a range 1..4 OC-12: sonetLineNum = 1 is the ONLY valid number ')
apsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("apsFeatDisable", 1), ("apsFeatEnable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apsEnable.setDescription('This object is used to enable or disable APS feature on the working/protection line pairs. ')
apsArchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singleCardonePlusOne", 1), ("dualCardonePlusOne", 2), ("singleCardOneToOne", 3), ("anexBOnePlusOne", 4), ("anexAOnePlusOne", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsArchMode.setStatus('mandatory')
if mibBuilder.loadTexts: apsArchMode.setDescription("This object is used to configure APS architecture mode on the working/protection line pairs. The architecture modes currently supported are 'dualCardonePlusOne' (for GR-253) and 'anexAOnePlusOne (for G.783 Annex A). ")
apsActiveLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("apsWorkingLine", 1), ("apsProtectionLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsActiveLine.setStatus('mandatory')
if mibBuilder.loadTexts: apsActiveLine.setDescription('This object indicates which line is currently active ob the trunk line. ')
apsSFBER = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsSFBER.setStatus('mandatory')
if mibBuilder.loadTexts: apsSFBER.setDescription('This object contains the Bit Error Rate threshold for Signal Fault detection on the working line. ')
apsSDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsSDBER.setStatus('mandatory')
if mibBuilder.loadTexts: apsSDBER.setDescription('This object contains the Bit Error Rate threshold for Signal Degrade detection on the working line. If set to 5, it means SDBER rate = 10 ^^ -5. ')
apsWtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsWtr.setStatus('mandatory')
if mibBuilder.loadTexts: apsWtr.setDescription('This object contains interval (in minute) to wait before attempting to switch back to working line. Not applicable if the line configure in non-revertive mode. ')
apsdirection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsdirection.setStatus('mandatory')
if mibBuilder.loadTexts: apsdirection.setDescription('This object is used to configure the switching direction which this APS line support. Unidirectional switch only one direction. Bidirectional switch in both ends of the line. ')
apsRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsRevertive.setStatus('mandatory')
if mibBuilder.loadTexts: apsRevertive.setDescription('This object is used to configure the APS revertive or nonrevertive option. Revertive allows the line to be switch back to working line after the Wait-To-restore interval has expired and the working line SF/SD has been cleared. ')
apsK1K2Disable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbandEnable", 1), ("kbandDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsK1K2Disable.setStatus('mandatory')
if mibBuilder.loadTexts: apsK1K2Disable.setDescription('This object is used to enable or disable the K1/K2 inband interface on the protection line. ')
apsCardFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("apsProtectBCMissing", 1), ("apsProtectDCMissing", 2), ("apsWorkingBCMissing", 3), ("apsWorkingDCMissing", 4), ("apsWorkingCdMismatch", 5), ("apsProtectCdMismatch", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsCardFailureCode.setStatus('mandatory')
if mibBuilder.loadTexts: apsCardFailureCode.setDescription('The Sonet APS card failure code apsProtectBCMissing = protection Back card missing apsProtectDCMissing = protection Daughter card missing apsWorkingBCMissing = Working Back card missing apsWorkingDCMissing = Working Daughter card missing apsWorkingCdMismatch = Working Card in mismatch/fail state apsProtectCdMismatch = protection card in mismatch/fail state ')
apsLineFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("apsSignalDegrade", 1), ("apsSignalFailure", 2), ("apsLineAlarm", 3), ("apsLineLoopBack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLineFailureCode.setStatus('mandatory')
if mibBuilder.loadTexts: apsLineFailureCode.setDescription('The Sonet APS line failure code')
apsLineSwReason = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("apsRevertive", 1), ("apsManual", 2), ("apsSignalDefectLow", 3), ("apsSignalDefectHigh", 4), ("apsSignalFailureLow", 5), ("apsSignalFailureHigh", 6), ("apsForceSwitch", 7), ("apsLockOut", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLineSwReason.setStatus('mandatory')
if mibBuilder.loadTexts: apsLineSwReason.setDescription('The Sonet APS line switch reason code ')
apsLineSwFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("apsRevertiveSwitchFail", 1), ("apsManualSwitchFail", 2), ("apsSDLowSwitchFail", 3), ("apsSDHighSwitchFail", 4), ("apsSFLowSwitchFail", 5), ("apsSFHighSwitchFail", 6), ("apsForceSwitchFail", 7), ("apsLockOutSwitchFail", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLineSwFailureCode.setStatus('mandatory')
if mibBuilder.loadTexts: apsLineSwFailureCode.setDescription('The Sonet APS line switch failure code')
apsStandbyLineFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 6, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("apsSignalDegrade", 1), ("apsSignalFailure", 2), ("apsLineAlarm", 3), ("apsLineLoopBack", 4), ("apsProtectionByteFail", 5), ("apsArchitectureMismatch", 6), ("apsChannelMismatch", 7), ("apsDirectionMismatch", 8), ("apsWrongRequest", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStandbyLineFailureCode.setStatus('mandatory')
if mibBuilder.loadTexts: apsStandbyLineFailureCode.setDescription('The Sonet APS standby line failure code')
mibBuilder.exportSymbols("CISCO-MGX82XX-SONET-MIB", cwSonetMediumLineType=cwSonetMediumLineType, sonetConfigTable=sonetConfigTable, sonetLineCounterLineNum=sonetLineCounterLineNum, cwSonetPathIntervalESs=cwSonetPathIntervalESs, sonetHCSmasking=sonetHCSmasking, cwSonetSectionIntervalSEFss=cwSonetSectionIntervalSEFss, sonetSectionStatisticalAlarmSeverity=sonetSectionStatisticalAlarmSeverity, cwSonetFarEndLineIntervalSESs=cwSonetFarEndLineIntervalSESs, apsK1K2Disable=apsK1K2Disable, sonetPathCounterEntry=sonetPathCounterEntry, sectionCounterLineNum=sectionCounterLineNum, sonetLineCurrentDayClrButton=sonetLineCurrentDayClrButton, cwSonetSectionCurrentStatus=cwSonetSectionCurrentStatus, sonetSectionCounterEntry=sonetSectionCounterEntry, sonetFarEndLineCurrentDayUASs=sonetFarEndLineCurrentDayUASs, sonetPathCurrentDayESs=sonetPathCurrentDayESs, sonetPathTraceSelection=sonetPathTraceSelection, cwSonetFarEndPathCurrentUASs=cwSonetFarEndPathCurrentUASs, cwSonetLineCurrentEntry=cwSonetLineCurrentEntry, cwSonetPathCurrentLineNum=cwSonetPathCurrentLineNum, cwSonetLineIntervalUASs=cwSonetLineIntervalUASs, cwSonetFarEndPathIntervalFCs=cwSonetFarEndPathIntervalFCs, sonetPathCurrent15minUASsThreshold=sonetPathCurrent15minUASsThreshold, sonetPathCounterTable=sonetPathCounterTable, cwSonetMediumType=cwSonetMediumType, sonetSectionTraceToExpect=sonetSectionTraceToExpect, cwSonetLineIntervalFCs=cwSonetLineIntervalFCs, cwSonetFarEndPathCurrentESs=cwSonetFarEndPathCurrentESs, sonetPathAlarmLineNum=sonetPathAlarmLineNum, sonetFarEndPathCurrentDaySESs=sonetFarEndPathCurrentDaySESs, sonetPathTraceToTransmit=sonetPathTraceToTransmit, cwSonetFarEndPathIntervalEntry=cwSonetFarEndPathIntervalEntry, sonetSectionCurrentDayESsThreshold=sonetSectionCurrentDayESsThreshold, cwSonetLineCurrentUASs=cwSonetLineCurrentUASs, sonetSectionCurrent15minSESsThreshold=sonetSectionCurrent15minSESsThreshold, cwSonetPathCurrentTable=cwSonetPathCurrentTable, cwSonetFarEndLineCurrentClrButton=cwSonetFarEndLineCurrentClrButton, cwSonetPathIntervalCVs=cwSonetPathIntervalCVs, cwSonetPathCurrentFCs=cwSonetPathCurrentFCs, sonetSectionAlarmEntry=sonetSectionAlarmEntry, cwSonetPathIntervalUASs=cwSonetPathIntervalUASs, cwSonetPathCurrentUASs=cwSonetPathCurrentUASs, cwSonetFarEndLineCurrentUASs=cwSonetFarEndLineCurrentUASs, sonetSectionTraceReceived=sonetSectionTraceReceived, sonetLineLoopbackCommand=sonetLineLoopbackCommand, cwSonetLineCurrentTable=cwSonetLineCurrentTable, cwSonetLineCurrentClrButton=cwSonetLineCurrentClrButton, sonetFarEndLineCurrentDayTable=sonetFarEndLineCurrentDayTable, sonetPathCurrentDayClrButton=sonetPathCurrentDayClrButton, cwSonetPathIntervalFCs=cwSonetPathIntervalFCs, cwSonetLineCurrentStatus=cwSonetLineCurrentStatus, cwSonetSectionCurrentSEFSs=cwSonetSectionCurrentSEFSs, cwSonetFELineIntervalLineNum=cwSonetFELineIntervalLineNum, cwSonetFarEndPathCurrentSESs=cwSonetFarEndPathCurrentSESs, sonetFarEndPathCurrentDayClrButton=sonetFarEndPathCurrentDayClrButton, sonetLineCurrentDaySESsThreshold=sonetLineCurrentDaySESsThreshold, sonetPathCurrentDayCVsThreshold=sonetPathCurrentDayCVsThreshold, apsWtr=apsWtr, sonetPathCounterAISs=sonetPathCounterAISs, apsCardFailureCode=apsCardFailureCode, sonetLineCurrent15minESsThreshold=sonetLineCurrent15minESsThreshold, cwSonetPathIntervalValidFlag=cwSonetPathIntervalValidFlag, apsActiveLine=apsActiveLine, sonetLineCounterClrButton=sonetLineCounterClrButton, sonetPayloadScrambling=sonetPayloadScrambling, cwSonetLineCurrentESs=cwSonetLineCurrentESs, cwSonetFarEndPathIntervalCVs=cwSonetFarEndPathIntervalCVs, sonetSectionAlarmTable=sonetSectionAlarmTable, cwSonetPathIntervalNumber=cwSonetPathIntervalNumber, sonetPathCurrentDaySESsThreshold=sonetPathCurrentDaySESsThreshold, sonetConfig=sonetConfig, sonetSectionCurrentDayCVsThreshold=sonetSectionCurrentDayCVsThreshold, sonetLineCurrent15minSESsThreshold=sonetLineCurrent15minSESsThreshold, apsLineFailureCode=apsLineFailureCode, cwSonetFarEndPathIntervalValidFlag=cwSonetFarEndPathIntervalValidFlag, sonetFELineCurrentDayLineNum=sonetFELineCurrentDayLineNum, sonetSectionTraceToTransmit=sonetSectionTraceToTransmit, sonetTributaryFramingFormat=sonetTributaryFramingFormat, sonetLineCurrentDayFCs=sonetLineCurrentDayFCs, cwSonetSectionCurrentValidFlag=cwSonetSectionCurrentValidFlag, sonetPathCurrentDayLineNum=sonetPathCurrentDayLineNum, cwSonetFarEndPathCurrentEntry=cwSonetFarEndPathCurrentEntry, cwSonetLineCurrentValidFlag=cwSonetLineCurrentValidFlag, sonetLineCurrentDayUASsThreshold=sonetLineCurrentDayUASsThreshold, cwSonetFarEndPathCurrentCVs=cwSonetFarEndPathCurrentCVs, cwSonetSectionCurrentLineNum=cwSonetSectionCurrentLineNum, apsArchMode=apsArchMode, sonetLineXmtClkSrc=sonetLineXmtClkSrc, cwSonetLineCurrentSESs=cwSonetLineCurrentSESs, sonetLineCurrent15minUASsThreshold=sonetLineCurrent15minUASsThreshold, cwSonetFarEndPathIntervalESs=cwSonetFarEndPathIntervalESs, apsWorkingLine=apsWorkingLine, sonetPathCurrent15minESsThreshold=sonetPathCurrent15minESsThreshold, sonetPathTraceToExpect=sonetPathTraceToExpect, sonetSectionCurrentDaySESsThreshold=sonetSectionCurrentDaySESsThreshold, cwSonetLineCurrentLineNum=cwSonetLineCurrentLineNum, cwSonetFarEndLineIntervalFCs=cwSonetFarEndLineIntervalFCs, sonetPathCurrentDayEntry=sonetPathCurrentDayEntry, sonetLineStatisticalAlarmSeverity=sonetLineStatisticalAlarmSeverity, sonetPathCurrentDaySESs=sonetPathCurrentDaySESs, cwSonetMediumValidIntervals=cwSonetMediumValidIntervals, sonetFarEndPathCurrentDayCVs=sonetFarEndPathCurrentDayCVs, sonetPathAlarmEntry=sonetPathAlarmEntry, sonetPathCurrentDayTable=sonetPathCurrentDayTable, cwSonetSectionCurrentESs=cwSonetSectionCurrentESs, sonetRDIPType=sonetRDIPType, sonetLineCurrentDayCVs=sonetLineCurrentDayCVs, cwSonetFarEndLineIntervalESs=cwSonetFarEndLineIntervalESs, sonetLineNum=sonetLineNum, sonetFarEndLineCurrentDayClrButton=sonetFarEndLineCurrentDayClrButton, sonetPathCurrentDayUASs=sonetPathCurrentDayUASs, sonetSectionCounterLOFs=sonetSectionCounterLOFs, sonetPathCurrent15minSESsThreshold=sonetPathCurrent15minSESsThreshold, sonetLineCounterAISs=sonetLineCounterAISs, cwSonetPathIntervalSESs=cwSonetPathIntervalSESs, apsStandbyLineFailureCode=apsStandbyLineFailureCode, sonetPathCurrentDayCVs=sonetPathCurrentDayCVs, sonetApsConfigEntry=sonetApsConfigEntry, sonetSectionCurrentDayCVs=sonetSectionCurrentDayCVs, cwSonetFarEndLineCurrentTable=cwSonetFarEndLineCurrentTable, cwSonetFarEndPathIntervalSESs=cwSonetFarEndPathIntervalSESs, cwSonetFarEndLineIntervalCVs=cwSonetFarEndLineIntervalCVs, sonetFarEndPathCurrentDayEntry=sonetFarEndPathCurrentDayEntry, sonetSectionCurrentDaySESs=sonetSectionCurrentDaySESs, cwSonetSectionIntervalLineNum=cwSonetSectionIntervalLineNum, sonetFarEndLineCurrentDayEntry=sonetFarEndLineCurrentDayEntry, sonetLineCurrentDayESs=sonetLineCurrentDayESs, cwsonetMedium=cwsonetMedium, sonetFrameScrambling=sonetFrameScrambling, sonetPathCurrentDayValidFlag=sonetPathCurrentDayValidFlag, cwSonetFarEndPathIntervalUASs=cwSonetFarEndPathIntervalUASs, lineCurrentDayLineNum=lineCurrentDayLineNum, cwSonetMediumLineCoding=cwSonetMediumLineCoding, cwSonetFarEndLineCurrentCVs=cwSonetFarEndLineCurrentCVs, cwSonetSectionCurrentEntry=cwSonetSectionCurrentEntry, sonetLineCurrent15minCVsThreshold=sonetLineCurrent15minCVsThreshold, sonetApsConfig=sonetApsConfig, cwSonetLineCurrentCVs=cwSonetLineCurrentCVs, cwSonetPathCurrentSESs=cwSonetPathCurrentSESs, cwSonetSectionCurrentSESs=cwSonetSectionCurrentSESs, cwSonetFarEndLineIntervalUASs=cwSonetFarEndLineIntervalUASs, sonetFarEndLineCurrentDaySESs=sonetFarEndLineCurrentDaySESs, sonetPathCounterClrButton=sonetPathCounterClrButton, cwSonetSectionCurrentTable=cwSonetSectionCurrentTable, cwSonetLineIntervalTable=cwSonetLineIntervalTable, apsEnable=apsEnable, cwSonetSectionIntervalCVs=cwSonetSectionIntervalCVs, cwSonetLineIntervalSESs=cwSonetLineIntervalSESs, sonetPathCurrentDayFCs=sonetPathCurrentDayFCs, cwSonetPathIntervalTable=cwSonetPathIntervalTable, cwSonetSectionIntervalValidFlag=cwSonetSectionIntervalValidFlag, cwSonetFarEndPathCurrentTimeElapsed=cwSonetFarEndPathCurrentTimeElapsed, cwSonetFarEndPathIntervalNumber=cwSonetFarEndPathIntervalNumber, sonetSectionCurrentDayValidFlag=sonetSectionCurrentDayValidFlag, sonetSectionCounterLOSs=sonetSectionCounterLOSs, cwSonetLineCurrent15minTimeElapsed=cwSonetLineCurrent15minTimeElapsed, cwSonetFarEndLineIntervalEntry=cwSonetFarEndLineIntervalEntry, sonetFarEndPathCurrentDayFCs=sonetFarEndPathCurrentDayFCs, sonetFarEndLineCurrentDayESs=sonetFarEndLineCurrentDayESs, cwSonetSectionIntervalSESs=cwSonetSectionIntervalSESs, sonetTributaryType=sonetTributaryType, cwSonetFarEndLineIntervalTable=cwSonetFarEndLineIntervalTable, sonetLineCurrentDayUASs=sonetLineCurrentDayUASs, cwSonetPathIntervalEntry=cwSonetPathIntervalEntry, sonetFarEndLineCurrentDayValidFlag=sonetFarEndLineCurrentDayValidFlag, sonetFarEndPathCurrentDayTable=sonetFarEndPathCurrentDayTable, sonetTributaryGroupingType=sonetTributaryGroupingType, sonetSectionCurrentDayEntry=sonetSectionCurrentDayEntry, sonetFarEndPathCurrentDayValidFlag=sonetFarEndPathCurrentDayValidFlag, sonetApsConfigTable=sonetApsConfigTable, sonetSectionStatAlarmStatus=sonetSectionStatAlarmStatus, cwSonetLineIntervalLineNum=cwSonetLineIntervalLineNum, cwSonetPathIntervalLineNum=cwSonetPathIntervalLineNum, sonetPathCurrentDayUASsThreshold=sonetPathCurrentDayUASsThreshold, cwSonetPathCurrentStatus=cwSonetPathCurrentStatus, apsSFBER=apsSFBER, sonetSignallingTransportMode=sonetSignallingTransportMode, cwSonetSectionIntervalESs=cwSonetSectionIntervalESs, cwSonetFEPathIntervalLineNum=cwSonetFEPathIntervalLineNum, cwSonetFarEndLineCurrentValidFlag=cwSonetFarEndLineCurrentValidFlag, sonetPathTraceReceived=sonetPathTraceReceived, cwSonetPathCurrentTimeElapsed=cwSonetPathCurrentTimeElapsed, sonetSectionCounterClrButton=sonetSectionCounterClrButton, cwSonetFarEndLineCurrentEntry=cwSonetFarEndLineCurrentEntry, apsRevertive=apsRevertive, apsSDBER=apsSDBER, cwSonetPathCurrentClrButton=cwSonetPathCurrentClrButton, cwSonetPathCurrentEntry=cwSonetPathCurrentEntry, sonetSectionCurrentDayESs=sonetSectionCurrentDayESs, sonetSectionCurrentDaySEFSs=sonetSectionCurrentDaySEFSs, cwSonetFarEndLineIntervalNumber=cwSonetFarEndLineIntervalNumber, sonetSectionCurrent15minSEFSsThreshold=sonetSectionCurrent15minSEFSsThreshold, cwSonetMediumTimeElapsed=cwSonetMediumTimeElapsed, sonetLineCurrentDayTable=sonetLineCurrentDayTable, sonetLineCounterEntry=sonetLineCounterEntry, cwSonetPathCurrentESs=cwSonetPathCurrentESs, cwSonetPathCurrentValidFlag=cwSonetPathCurrentValidFlag, cwSonetFEPathCurrentLineNum=cwSonetFEPathCurrentLineNum, sonetLineEnable=sonetLineEnable, sonetFarEndPathCurrentDayUASs=sonetFarEndPathCurrentDayUASs, sectionAlarmLineNum=sectionAlarmLineNum, cwSonetFarEndLineCurrentSESs=cwSonetFarEndLineCurrentSESs, sonetPathStatisticalAlarmSeverity=sonetPathStatisticalAlarmSeverity, cwSonetMediumCircuitIdentifier=cwSonetMediumCircuitIdentifier, cwSonetFELineCurrentLineNum=cwSonetFELineCurrentLineNum, apsProtectionSlot=apsProtectionSlot, sonetPathCurrent15minCVsThreshold=sonetPathCurrent15minCVsThreshold, sonetTributaryMappingType=sonetTributaryMappingType, sonetSectionCurrentDayLineNum=sonetSectionCurrentDayLineNum, sonetSectionCurrent15minESsThreshold=sonetSectionCurrent15minESsThreshold, cwSonetFarEndLineCurrentTimeElapsed=cwSonetFarEndLineCurrentTimeElapsed, cwSonetFarEndPathCurrentTable=cwSonetFarEndPathCurrentTable, cwSonetLineIntervalESs=cwSonetLineIntervalESs, cwSonetFarEndPathCurrentClrButton=cwSonetFarEndPathCurrentClrButton, sonetLineCurrentDayEntry=sonetLineCurrentDayEntry, cwSonetMediumTable=cwSonetMediumTable, sonetLineCounterTable=sonetLineCounterTable, cwSonetMediumEntry=cwSonetMediumEntry, sonetFarEndPathCurrentDayESs=sonetFarEndPathCurrentDayESs, sonetLineAlarmEntry=sonetLineAlarmEntry, sonetPathStatAlarmStatus=sonetPathStatAlarmStatus, apsWorkingSlot=apsWorkingSlot, cwSonetFarEndLineCurrentESs=cwSonetFarEndLineCurrentESs, sonetPathCounterLineNum=sonetPathCounterLineNum, sonetSectionCurrentDayTable=sonetSectionCurrentDayTable, sonetLineCurrentDayESsThreshold=sonetLineCurrentDayESsThreshold, sonetPathAlarmTable=sonetPathAlarmTable, cwSonetLineIntervalEntry=cwSonetLineIntervalEntry, cwSonetLineIntervalNumber=cwSonetLineIntervalNumber, sonetLineCounterRFIs=sonetLineCounterRFIs, sonetConfigEntry=sonetConfigEntry, cwsonetSection=cwsonetSection, cwSonetFarEndPathCurrentFCs=cwSonetFarEndPathCurrentFCs, sonetSectionCurrentDaySEFSsThreshold=sonetSectionCurrentDaySEFSsThreshold, sonetPathCurrentDayESsThreshold=sonetPathCurrentDayESsThreshold, cwsonetPath=cwsonetPath, sonetConfigNumOfValidEntries=sonetConfigNumOfValidEntries, sonetSectionCurrentDayClrButton=sonetSectionCurrentDayClrButton, sonetSectionTraceSelection=sonetSectionTraceSelection, sonetLineCurrentDaySESs=sonetLineCurrentDaySESs, sonetFarEndLineCurrentDayFCs=sonetFarEndLineCurrentDayFCs, cwSonetFarEndPathCurrentValidFlag=cwSonetFarEndPathCurrentValidFlag, cwSonetSectionIntervalTable=cwSonetSectionIntervalTable, sonetLineCurrentDayValidFlag=sonetLineCurrentDayValidFlag, sonetLineAlarmLineNum=sonetLineAlarmLineNum, apsProtectionLine=apsProtectionLine, cwSonetSectionCurrentCVs=cwSonetSectionCurrentCVs, cwSonetFarEndLineCurrentFCs=cwSonetFarEndLineCurrentFCs, sonetLineCurrentDayCVsThreshold=sonetLineCurrentDayCVsThreshold, sonetLineType=sonetLineType, cwSonetSectionIntervalNumber=cwSonetSectionIntervalNumber, apsLineSwReason=apsLineSwReason, cwSonetFarEndPathIntervalTable=cwSonetFarEndPathIntervalTable, cwSonetSectionCurrent15minTimeElapsed=cwSonetSectionCurrent15minTimeElapsed)
mibBuilder.exportSymbols("CISCO-MGX82XX-SONET-MIB", cwSonetPathCurrentCVs=cwSonetPathCurrentCVs, cwSonetSectionCurrentClrButton=cwSonetSectionCurrentClrButton, apsLineSwFailureCode=apsLineSwFailureCode, cwSonetSectionIntervalEntry=cwSonetSectionIntervalEntry, sonetSectionCurrent15minCVsThreshold=sonetSectionCurrent15minCVsThreshold, sonetLineAlarmTable=sonetLineAlarmTable, sonetPathCounterRFIs=sonetPathCounterRFIs, sonetRDIVType=sonetRDIVType, cwsonetLine=cwsonetLine, sonetLineStatAlarmStatus=sonetLineStatAlarmStatus, apsdirection=apsdirection, sonetSectionCounterTable=sonetSectionCounterTable, cwSonetLineIntervalCVs=cwSonetLineIntervalCVs, sonetFarEndLineCurrentDayCVs=sonetFarEndLineCurrentDayCVs, cwSonetLineIntervalValidFlag=cwSonetLineIntervalValidFlag, cwSonetFarEndLineIntervalValidFlag=cwSonetFarEndLineIntervalValidFlag, sonetFEPathCurrentDayLineNum=sonetFEPathCurrentDayLineNum)
