#
# PySNMP MIB module TIMETRA-IEEE8021-CFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-IEEE8021-CFM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
Dot1agCfmMepIdOrZero, VlanIdOrNone, dot1agCfmMepDbEntry, dot1agCfmMaMepListEntry, Dot1agCfmMDLevel, dot1agCfmMaNetEntry, dot1agCfmMepEntry, dot1agCfmMepIdentifier, dot1agCfmMepTransmitLtmSeqNumber, dot1agCfmMdIndex, Dot1agCfmMpDirection, Dot1agCfmMepId, dot1agCfmMepTransmitLbmDestMacAddress, dot1agCfmMaIndex = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMepIdOrZero", "VlanIdOrNone", "dot1agCfmMepDbEntry", "dot1agCfmMaMepListEntry", "Dot1agCfmMDLevel", "dot1agCfmMaNetEntry", "dot1agCfmMepEntry", "dot1agCfmMepIdentifier", "dot1agCfmMepTransmitLtmSeqNumber", "dot1agCfmMdIndex", "Dot1agCfmMpDirection", "Dot1agCfmMepId", "dot1agCfmMepTransmitLbmDestMacAddress", "dot1agCfmMaIndex")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, TimeTicks, Bits, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Counter64, ObjectIdentity, Unsigned32, Integer32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Bits", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Counter64", "ObjectIdentity", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity")
DisplayString, MacAddress, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "RowStatus", "TextualConvention")
tmnxSRObjs, timetraSRMIBModules, tmnxSRConfs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRConfs", "tmnxSRNotifyPrefix")
SdpId, = mibBuilder.importSymbols("TIMETRA-SERV-MIB", "SdpId")
TItemDescription, TmnxServId, TNamedItem, TmnxEnabledDisabled = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TItemDescription", "TmnxServId", "TNamedItem", "TmnxEnabledDisabled")
timetraIEEE8021CfmMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 52))
timetraIEEE8021CfmMIBModule.setRevisions(('1911-02-01 00:00', '1909-02-28 00:00', '1908-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setRevisionsDescriptions(('Rev 9.0 1 Feb 2011 00:00 9.0 release of the TIMETRA-IEEE8021-CFM-MIB.', 'Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-IEEE8021-CFM-MIB.', 'Rev 1.0 01 Jan 2008 00:00 Initial version of the TIMETRA-IEEE8021-CFM-MIB.',))
if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraIEEE8021CfmMIBModule.setDescription("This document is the SNMP MIB module to manage and provision dot1ag Connectivity Fault Management module functionality for the Alcatel-Lucent SROS products. This includes extensions to the IEEE8021-CFM MIB. Copyright 2008-2013 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxDot1agMIBObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52))
tmnxDot1agNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52))
tmnxDot1agNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0))
tmnxDot1agMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52))
tmnxDot1agCfmStack = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1))
tmnxDot1agCfmGlobalObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2))
tmnxDot1agCfmManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3))
tmnxDot1agCfmMa = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6))
tmnxDot1agCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7))
tmnxDot1agCfmMip = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8))
tmnxDot1agCfmNotificationObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 9))
tmnxDot1agCfmSdpBindStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackTable.setReference('802.1ag clauses 12.14.2')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackTable.setDescription('There is one CFM Sdp-Bind Stack table per bridge. It permits the retrieval of information about the Maintenance Points configured on any given Sdp bindings.')
tmnxDot1agCfmSdpBindStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackSdpId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackVcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackEntry.setDescription('A conceptual row in the tmnxDot1agCfmSdpBindStackTable. This row behaves exactly like the dot1agCfmStackEntry row.')
tmnxDot1agCfmSdpBindStackSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 1), SdpId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackSdpId.setReference('802.1ag clause 12.14.2.1.2:a')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackSdpId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackSdpId.setDescription('The value of tmnxDot1agCfmSdpBindStackSdpId specifies the Bridge Port or aggregated port on which MEPs or MHFs might be configured.')
tmnxDot1agCfmSdpBindStackVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackVcId.setReference('802.1ag clause 12.14.2.1.2:d')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackVcId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackVcId.setDescription('The value of tmnxDot1agCfmSdpBindStackVcId specifies, along with tmnxDot1agCfmSdpBindStackSdpId, the SDP Binding for the bridge.')
tmnxDot1agCfmSdpBindStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 3), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdLevel.setReference('802.1ag clause 12.14.2.1.2:b')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdLevel.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdLevel.setDescription('The value of tmnxDot1agCfmSdpBindStackMdLevel specifies the MD Level of the Maintenance Point.')
tmnxDot1agCfmSdpBindStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 4), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackDirection.setReference('802.1ag clause 12.14.2.1.2:c')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackDirection.setDescription('The value of tmnxDot1agCfmSdpBindStackDirection specifies the Direction in which the MP faces on the Bridge Port')
tmnxDot1agCfmSdpBindStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdIndex.setReference('802.1ag clause 12.14.2.1.3:b')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMdIndex.setDescription('The value of tmnxDot1agCfmSdpBindStackMdIndex indicates the index of the Maintenance Domain in the dot1agCfmMdTable to which the MP is associated, or 0, if none.')
tmnxDot1agCfmSdpBindStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMaIndex.setReference('802.1ag clause 12.14.2.1.3:c')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMaIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMaIndex.setDescription('The value of tmnxDot1agCfmSdpBindStackMaIndex indicates the index of the MA in the dot1agCfmMaNetTable and dot1agCfmMaCompTable to which the MP is associated, or 0, if none.')
tmnxDot1agCfmSdpBindStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 7), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMepId.setReference('802.1ag clause 12.14.2.1.3:d')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMepId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMepId.setDescription('The value of tmnxDot1agCfmSdpBindStackMepId indicates if an MEP is configured, the MEPID, else 0')
tmnxDot1agCfmSdpBindStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMacAddress.setReference('802.1ag clause 12.14.2.1.3:e')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackMacAddress.setDescription('The value of tmnxDot1agCfmSdpBindStackMacAddress indicates the MAC address of the MP.')
tmnxDot1agCfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepTable.setDescription('This table augments the Maintenance Association End Point (MEP) table of the IEEE8021-CFM-MIB.')
tmnxDot1agCfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEntry"))
tmnxDot1agCfmMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEntry.setDescription('A conceptual row in the tmnxDot1agCfmMepTable. This row exists only if the association dot1agCfmMepEntry is active.')
tmnxDot1agCfmMepSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 1), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSdpId.setReference('802.1ag clause 12.14.2.1.2:a')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSdpId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSdpId.setDescription('The value of tmnxDot1agCfmMepSdpId specifies, along with the tmnxDot1agCfmMepVcId, the SDP-Binding within a bridge port, to which the MEP is attached. This object is applicable to SDP-Bindings only, and MUST be set to the null ID (0) when dot1agCfmMepIfIndex, dot1agCfmMepPrimaryVid, tmnxDot1agCfmMepSvcId, tmnxDot1agCfmMepFacilityIfIndex, tmnxDot1agCfmMepFacilityVlanId, or tmnxDot1agCfmMepFacilityType is non-zero. When this object is applicable (non-zero), the above objects MUST be set to zero (0). Once set, this object can not be modified.')
tmnxDot1agCfmMepVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepVcId.setReference('802.1ag clause 12.14.2.1.2:d')
if mibBuilder.loadTexts: tmnxDot1agCfmMepVcId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepVcId.setDescription('The value of tmnxDot1agCfmMepVcId specifies, along with tmnxDot1agCfmMepSdpId, the SDP Binding for the bridge. tmnxDot1agCfmMepVcId is applicable to SDP-Bindings only, and MUST be set to zero (0) when dot1agCfmMepIfIndex, dot1agCfmMepPrimaryVid tmnxDot1agCfmMepSvcId, tmnxDot1agCfmMepFacilityIfIndex, tmnxDot1agCfmMepFacilityVlanId, or tmnxDot1agCfmMepFacilityType is non-zero. When this object is applicable (non-zero), the above objects MUST be set to zero (0). Once set, this object can not be modified.')
tmnxDot1agCfmMepMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMacAddress.setReference('802.1ag clause 12.14.7.1.3:i and 19.4')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMacAddress.setDescription('The value of tmnxDot1agCfmMepMacAddress specifies the mac-address that is assigned to dot1agCfmMepMacAddress.')
tmnxDot1agCfmMepAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisEnable.setDescription('The value of tmnxDot1agCfmMepAisEnable specifies whether AIS frames are generated from the Maintenance Entity Group (MEG).')
tmnxDot1agCfmMepAisMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 5), Bits().clone(namedValues=NamedValues(("level1", 0), ("level2", 1), ("level3", 2), ("level4", 3), ("level5", 4), ("level6", 5), ("level7", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisMegLevel.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisMegLevel.setDescription('The value of tmnxDot1agCfmMepAisMegLevel specifies the levels that should be notified to suppress alarms resulting from defect conditions detected by the MEP.')
tmnxDot1agCfmMepAisPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisPriority.setDescription('The value of tmnxDot1agCfmMepAisPriority specifies at what priority the AIS frames should be transmitted.')
tmnxDot1agCfmMepAisInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), )).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisInterval.setDescription('The value of tmnxDot1agCfmMepAisInterval specifies at what intervals to transmit AIS frames.')
tmnxDot1agCfmMepEthRxAisInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), )).clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthRxAisInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthRxAisInterval.setDescription('The value of tmnxDot1agCfmMepEthRxAisInterval indicates the AIS Interval received in the last AIS Frame.')
tmnxDot1agCfmMepEthRxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthRxAis.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthRxAis.setDescription('The value of tmnxDot1agCfmMepEthRxAis indicates the MEP is receiving AIS test frames from one or more of its sub-layer MEPs.')
tmnxDot1agCfmMepEthAisTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthAisTxCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthAisTxCount.setDescription('The value of tmnxDot1agCfmMepEthAisTxCount indicates number of AIS frames transmitted on the MEP.')
tmnxDot1agCfmMepEthTestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestEnable.setDescription("The value of tmnxDot1agCfmMepEthTestEnable specifies whether ethernet test frames are to be generated on transmission or processed on reception. If this object is set to 'false', then tmnxDot1agCfmMepEthTestPattern is undefined. When this object is set to 'true', tmnxDot1agCfmMepEthTestPattern is reset to its default value, unless tmnxDot1agCfmMepEthTestPattern is set to a specific value in the same SNMP PDU.")
tmnxDot1agCfmMepEthTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allZerosNoCrc", 0), ("allZerosCrc", 1), ("prbsNoCrc", 2), ("prbsCrc", 3), ("allOnesNoCrc", 4), ("allOnesCrc", 5))).clone('allZerosNoCrc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestPattern.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestPattern.setDescription("The value of tmnxDot1agCfmMepEthTestPattern specifies the data-content of the AIS test frames. 'allZerosNoCrc (0)' and 'allZerosCrc (1)' specifies the data content as all zero values (without and with CRC calculations respectively). 'prbsNoCrc (3) and 'prbsCrc (4) specifies the data content as pseudo random bit sequence (without and with CRC calculations respectively). 'allOnesNoCrc (4)' and 'allOnesCrc (5)', specifies the data content as all ones (without and with CRC calculations respectively). This object is only applicable if tmnxDot1agCfmMepEthTestEnable is set to 'true'.")
tmnxDot1agCfmMepEthTestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 13), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestMacAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestMacAddr.setDescription('The value of tmnxDot1agCfmMepEthTestMacAddr specifies the MAC address of the target to whom the Eth-test frames are sent. Setting this object will trigger the test frame to be sent. Once the test is complete, the object will revert to the default value, indicating that another test is possible.')
tmnxDot1agCfmMepEthTestDataLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestDataLen.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestDataLen.setDescription('The value of tmnxDot1agCfmMepEthTestDataLen specifies the length of the data sent in an Eth-test frame. The contents of the data is specified by the tmnxDot1agCfmMepEthTestPattern object.')
tmnxDot1agCfmMepEthTestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestPriority.setDescription('The value of tmnxDot1agCfmMepEthTestPriority specifies the priority used in generating Eth-Test frames.')
tmnxDot1agCfmMepOWDTMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 16), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTMacAddress.setDescription("The value of tmnxDot1agCfmMepOWDTMacAddress specifies the MAC address used as a target for the One-Way-Delay Test (OWDT). Setting this object will trigger a One-Way-Delay test to the specified MAC address. Upon completion of the test, the MacAddress will revert to it's default value, indicating that another test is possible.")
tmnxDot1agCfmMepOWDTPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTPriority.setDescription('The value of tmnxDot1agCfmMepOWDTPriority specifies the priority used in the generated test frame for the One-Way-Delay test.')
tmnxDot1agCfmMepTWDTMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 18), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTMacAddress.setDescription("The value of tmnxDot1agCfmMepTWDTMacAddress specifies the MAC address used as a target for the Two-Way-Delay Test (TWDT). Setting this object will trigger a Two-Way-Delay test to the specified MAC address. Upon completion of the test, the MacAddress will revert to it's default value, indicating that another test is possible.")
tmnxDot1agCfmMepTWDTPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepTWDTPriority.setDescription('The value of tmnxDot1agCfmMepTWDTPriority specifies the priority used in the generated test frame for the Two-Way-Delay test.')
tmnxDot1agCfmMepSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 20), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSvcId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSvcId.setDescription('The value of tmnxDot1agCfmMepSvcId specifies the service to which the virtual MEP is attached. tmnxDot1agCfmMepSvcId is applicable to virtual MEPs only, and MUST be set to zero (0) when dot1agCfmMepIfIndex, dot1agCfmMepPrimaryVid, tmnxDot1agCfmMepSdpId, tmnxDot1agCfmMepVcId, tmnxDot1agCfmMepFacilityIfIndex, tmnxDot1agCfmMepFacilityVlanId, or tmnxDot1agCfmMepFacilityType is non-zero. When this object is applicable (non-zero), the above objects MUST be set to zero (0). Once set, this object can not be modified.')
tmnxDot1agCfmMepControlMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepControlMep.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepControlMep.setDescription('The value of tmnxDot1agCfmMepControlMep specifies whether or not the operational state of the MEP is used by the management entity over which this MEP is configured.')
tmnxDot1agCfmMepEthTestThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 11840)).clone(1)).setUnits('bit-errors').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestThreshold.setDescription('The value of tmnxDot1agCfmMepEthTestThreshold specifies when a tmnxDot1agCfmMepEthTestComplete notification is sent. If tmnxDot1agCfmMepEthTestThreshold is set to zero (0), a notification is sent on the completion of any test for this MEP. Otherwise the threshold must be exceeded and/or CRC failures must be detected to send the notification.')
tmnxDot1agCfmMepOWDTThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepOWDTThreshold.setDescription('The value of tmnxDot1agCfmMepOWDTThreshold specifies when a tmnxDot1agCfmMepDMTestComplete notification is sent for a one-way-delay test. If tmnxDot1agCfmMepOWDTThreshold is set to zero (0), a notification is sent on the completion of any one-way-delay-test for this MEP. Otherwise the threshold must be exceeded to send the notification.')
tmnxDot1agCfmMepFaultPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("useIfStatusTLV", 1), ("suspendCCM", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFaultPropagation.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepFaultPropagation.setDescription("The value of tmnxDot1agCfmMepFaultPropagation specifies what action should be taken by the MEP if a fault is detected in the service containing the MEP. It also specifies if the MEP should propagate a fault that it has detected into the service. When this object is set to 'disabled (0)', no additional fault propagation will occur. When this object is set to 'useIfStatusTLV (1)', the MEP will send an interface status TLV in the next CCM indicating fault when fault is detected, even if the MEP itself has not detected a fault. When this object is set to 'suspendCCM (2)', faults will be propagated by stopping the regular CCM transmissions entirely. Once the fault is cleared, the regular CCM transmissions will resume. Additionally, when the value of tmnxDot1agCfmMepFaultPropagation is different than 'disabled (0)', a defect detected by the MEP will be propagated into the service.")
tmnxDot1agCfmMepFacilityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 25), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityIfIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityIfIndex.setDescription('The value of tmnxDot1agCfmMepFacilityIfIndex specifies, along with tmnxDot1agCfmMepFacilityVlanId and tmnxDot1agCfmMepFacilityType, the port or interface associated with this MEP. The tmnxDot1agCfmMepFacilityIfIndex is applicable to facility MEPs only, and MUST be set to zero (0) when dot1agCfmMepIfIndex, dot1agCfmMepPrimaryVid, tmnxDot1agCfmMepSdpId, tmnxDot1agCfmMepVcId, or tmnxDot1agCfmMepSvcId is non-zero. When this object is applicable (non-zero), the above objects MUST be set to zero (0). Once set, this object can not be modified.')
tmnxDot1agCfmMepFacilityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 26), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityVlanId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityVlanId.setDescription('The value of tmnxDot1agCfmMepFacilityVlanId specifies, along with tmnxDot1agCfmMepFacilityIfIndex and tmnxDot1agCfmMepFacilityType, the encapsulation value of the port or interface associated with this MEP. The tmnxDot1agCfmMepFacilityVlanId is applicable to facility MEPs only, and MUST be set to zero (0) when dot1agCfmMepIfIndex, dot1agCfmMepPrimaryVid, tmnxDot1agCfmMepSdpId, tmnxDot1agCfmMepVcId, or tmnxDot1agCfmMepSvcId is non-zero. When this object is applicable (non-zero), the above objects MUST be set to zero (0). Once set, this object can not be modified.')
tmnxDot1agCfmMepFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonFacilityType", 0), ("port", 1), ("interface", 2))).clone('nonFacilityType')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityType.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepFacilityType.setDescription("The value of tmnxDot1agCfmMepFacilityType specifies, along with tmnxDot1agCfmMepFacilityIfIndex and tmnxDot1agCfmMepFacilityVlanId, whether the port or interface is associated with this MEP. The tmnxDot1agCfmMepFacilityType is applicable to facility MEPs only, and MUST be set to 'nonFacilityType (0)' when dot1agCfmMepIfIndex, dot1agCfmMepPrimaryVid, tmnxDot1agCfmMepSdpId, tmnxDot1agCfmMepVcId, or tmnxDot1agCfmMepSvcId is non-zero. When this object is applicable (non-zero), the above objects MUST be set to zero (0). Once set, this object can not be modified.")
tmnxDot1agCfmMepFcltyFaultNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFcltyFaultNotify.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepFcltyFaultNotify.setDescription("The value of tmnxDot1agCfmMepFcltyFaultNotify specifies whether or not a fault detected on this Facility MEP will notify the port or facility tunnel associated to this MEP. This object pertains to Facility MEPs only. Attempting to change this object away from its default for a non-facility MEP will result in an 'inconsistentValue' error.")
tmnxDot1agCfmMepDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 29), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDescription.setDescription('The value of tmnxDot1agCfmMepDescription specifies a user supplied detailed description for this ETH-CFM MEP.')
tmnxDot1agCfmMepMcLagInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("standby", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcLagInactive.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcLagInactive.setDescription("The value of tmnxDot1agCfmMepMcLagInactive indicates whether or not the MEP is inactive, 'standby (2)', due to the MC-LAG standby state. The value of tmnxDot1agCfmMcLagStdbyInactive must be set to 'true (1)' for this object to have meaning and return anything other than 'notApplicable (0)'.")
tmnxDot1agCfmMepCcmPaddingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 1500), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmPaddingSize.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmPaddingSize.setDescription('The value of tmnxDot1agCfmMepCcmPaddingSize specifies the number of additional octets inserted into the CCM PDU for the Data TLV padding. If tmnxDot1agCfmMepCcmPaddingSize is set to zero (0), no Data TLV will be added to the CCM PDUs.')
tmnxDot1agCfmMepCcmIgnoreTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 32), Bits().clone(namedValues=NamedValues(("interfaceStatus", 0), ("portStatus", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmIgnoreTLVs.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepCcmIgnoreTLVs.setDescription("The value of tmnxDot1agCfmMepCcmIgnoreTLVs specifies the set of TLVs that are received in a CCM PDU for the Remote MEP state machine of the MEP that will be validated for format correctness but their values will be ignored and marked 'Absent' by ETH-CFM.")
tmnxDot1agCfmMepType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("facilityPort", 1), ("facilityInterface", 2), ("sapPrimaryVlan", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepType.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepType.setDescription('The value of tmnxDot1agCfmMepType specifies the endpoint type that this MEP facilitates. default (0) -- implements a traditional MEP. facilityPort (1) -- implements a facility port/LAG level MEP. facilityInterface (2) -- implements a router interface level MEP. sapPrimaryVlan (3) -- implements a SAP MEP using primary VLAN-ID from the MA Comp Table. This is only applicable if the MA primary VLAN ID is set to a value other than zero (0). This object must be specified during row creation.')
tmnxDot1agCfmMepDmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 1, 1, 101), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDmEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDmEnable.setDescription('The value of tmnxDot1agCfmMepDmEnable specifies whether Delay measurement is enabled or disabled')
tmnxDot1agCfmStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmStackTable.setReference('802.1ag clauses 12.14.2')
if mibBuilder.loadTexts: tmnxDot1agCfmStackTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackTable.setDescription('There is one CFM Stack table per bridge. It permits the retrieval of information about the Maintenance Points configured on any given interface. ')
tmnxDot1agCfmStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackifIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackVlanIdOrNone"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmStackEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackEntry.setDescription('The Stack table entry')
tmnxDot1agCfmStackifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmStackifIndex.setReference('802.1ag clause 12.14.2.1.2:a')
if mibBuilder.loadTexts: tmnxDot1agCfmStackifIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackifIndex.setDescription('This object represents the Bridge Port or aggregated port on which MEPs or MHFs might be configured. Upon a restart of the system, the system SHALL, if necessary, change the value of this variable, and rearrange the dot1agCfmStackTable, so that it indexes the entry in the interface table with the same value of ifAlias that it indexed before the system restart. If no such entry exists, then the system SHALL delete all entries in the dot1agCfmStackTable with the interface index. ')
tmnxDot1agCfmStackVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmStackVlanIdOrNone.setReference('802.1ag clauses 12.14.2.1.2:d, 22.1.7')
if mibBuilder.loadTexts: tmnxDot1agCfmStackVlanIdOrNone.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackVlanIdOrNone.setDescription('VLAN ID to which the MP is attached, or 0, if none.')
tmnxDot1agCfmStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 3), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdLevel.setReference('802.1ag clause 12.14.2.1.2:b')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdLevel.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdLevel.setDescription('MD Level of the Maintenance Point.')
tmnxDot1agCfmStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 4), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmStackDirection.setReference('802.1ag clause 12.14.2.1.2:c')
if mibBuilder.loadTexts: tmnxDot1agCfmStackDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackDirection.setDescription('Direction in which the MP faces on the Bridge Port')
tmnxDot1agCfmStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdIndex.setReference('802.1ag clause 12.14.2.1.3:b')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMdIndex.setDescription('The index of the Maintenance Domain in the dot1agCfmMdTable to which the MP is associated, or 0, if none.')
tmnxDot1agCfmStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMaIndex.setReference('802.1ag clause 12.14.2.1.3:c')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMaIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMaIndex.setDescription('The index of the MA in the dot1agCfmMaNetTable and dot1agCfmMaCompTable to which the MP is associated, or 0, if none.')
tmnxDot1agCfmStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 7), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMepId.setReference('802.1ag clause 12.14.2.1.3:d')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMepId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMepId.setDescription('If an MEP is configured, the MEPID, else 0')
tmnxDot1agCfmStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMacAddress.setReference('802.1ag clause 12.14.2.1.3:e')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMacAddress.setDescription('MAC address of the MP.')
tmnxDot1agCfmStackMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sap", 1), ("ethTun", 2), ("ethRing", 3), ("facPort", 4), ("facInterface", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmStackMPType.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStackMPType.setDescription('The value of tmnxDot1agCfmStackMPType indicates the entity that the MP is configured on: sap(1) MP is configured on a SAP ethTun(2) MP is configured on an ethernet-tunnel ethRing(3) MP is configured on an ethernet-ring facPort(4) MP is configured on a facility port facInterface(5) MP is configured on a facility interface')
tmnxDot1agCfmVStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmVStackTable.setReference('802.1ag clauses 12.14.2')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackTable.setDescription('There is one CFM Virtual Stack entry per service. It permits the retrieval of information about the Maintenance Points configured on any given virtual Maintenance Association End Point (MEP).')
tmnxDot1agCfmVStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackSvcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmVStackEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackEntry.setDescription('A conceptual row in the tmnxDot1agCfmVStackTable. There exists one row for each configured virtual MEP in the system. Rows are created and destroyed based on the existence of a virtual MEP.')
tmnxDot1agCfmVStackSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 1), TmnxServId())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackSvcId.setReference('802.1ag clause 12.14.2.1.2:a')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackSvcId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackSvcId.setDescription('The value of tmnxDot1agCfmVStackSvcId specifies the service on which MEPs might be configured.')
tmnxDot1agCfmVStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 2), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdLevel.setReference('802.1ag clause 12.14.2.1.2:b')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdLevel.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdLevel.setDescription('The value of tmnxDot1agCfmVStackMdLevel specifies the Maintenance Domain (MD) Level of the Maintenance Point.')
tmnxDot1agCfmVStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 3), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmVStackDirection.setReference('802.1ag clause 12.14.2.1.2:c')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackDirection.setDescription('The value of tmnxDot1agCfmVStackDirection specifies the direction in which the Maintenance Point (MP) faces on the service.')
tmnxDot1agCfmVStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdIndex.setReference('802.1ag clause 12.14.2.1.3:b')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMdIndex.setDescription('The value of tmnxDot1agCfmVStackMdIndex indicates the index of the Maintenance Domain in the dot1agCfmMdTable to which the Maintenance Point (MP) is associated, or 0, if none.')
tmnxDot1agCfmVStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMaIndex.setReference('802.1ag clause 12.14.2.1.3:c')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMaIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMaIndex.setDescription('The value of tmnxDot1agCfmVStackMaIndex indicates the index of the Maintenance Association (MA) in the dot1agCfmMaNetTable and dot1agCfmMaCompTable to which the Maintenance Point (MP) is associated, or 0, if none.')
tmnxDot1agCfmVStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 6), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMepId.setReference('802.1ag clause 12.14.2.1.3:d')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMepId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMepId.setDescription('The value of tmnxDot1agCfmVStackMepId indicates if an MEP is configured, the MEPID, else 0.')
tmnxDot1agCfmVStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMacAddress.setReference('802.1ag clause 12.14.2.1.3:e')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmVStackMacAddress.setDescription('The value of tmnxDot1agCfmVStackMacAddress indicates the MAC address of the MP.')
tmnxDot1agCfmPVStackTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4), )
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackTable.setReference('802.1ag clauses 12.14.2')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackTable.setDescription('There is one CFM Stack table per bridge. It permits the retrieval of information about the Maintenance Points (MP) configured on any given interface.')
tmnxDot1agCfmPVStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackifIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackVlanIdOrNone"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackPriVlanId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMdLevel"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackDirection"))
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackEntry.setDescription('The Primary VLAN-ID Stack table entry. Entries in this table are MEPs configured to use the primary VLAN-ID of the Maintenance Association (MA).')
tmnxDot1agCfmPVStackifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackifIndex.setReference('802.1ag clause 12.14.2.1.2:a')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackifIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackifIndex.setDescription('This object represents the Bridge Port or aggregated port on which MEPs or MHFs might be configured.')
tmnxDot1agCfmPVStackVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackVlanIdOrNone.setReference('802.1ag clauses 12.14.2.1.2:d, 22.1.7')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackVlanIdOrNone.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackVlanIdOrNone.setDescription('VLAN ID to which the MP is attached, or 0, if none.')
tmnxDot1agCfmPVStackPriVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackPriVlanId.setReference('802.1ag clause 12.14.6.1.3:b')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackPriVlanId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackPriVlanId.setDescription('The Primary VLAN ID with which the Maintenance Association is associated.')
tmnxDot1agCfmPVStackMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 4), Dot1agCfmMDLevel())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdLevel.setReference('802.1ag clause 12.14.2.1.2:b')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdLevel.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdLevel.setDescription('MD Level of the Maintenance Point.')
tmnxDot1agCfmPVStackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 5), Dot1agCfmMpDirection())
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackDirection.setReference('802.1ag clause 12.14.2.1.2:c')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackDirection.setDescription('Direction in which the MP faces on the Bridge Port')
tmnxDot1agCfmPVStackMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdIndex.setReference('802.1ag clause 12.14.2.1.3:b')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMdIndex.setDescription('The index of the Maintenance Domain in the dot1agCfmMdTable to which the MP is associated, or 0, if none.')
tmnxDot1agCfmPVStackMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMaIndex.setReference('802.1ag clause 12.14.2.1.3:c')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMaIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMaIndex.setDescription('The index of the MA in the dot1agCfmMaNetTable and dot1agCfmMaCompTable to which the MP is associated, or 0, if none.')
tmnxDot1agCfmPVStackMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 8), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMepId.setReference('802.1ag clause 12.14.2.1.3:d')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMepId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMepId.setDescription('If an MEP is configured, the MEPID, else 0')
tmnxDot1agCfmPVStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 1, 4, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMacAddress.setReference('802.1ag clause 12.14.2.1.3:e')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmPVStackMacAddress.setDescription('MAC address of the MP.')
tmnxDot1agCfmMcLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1))
tmnxDot1agCfmMcLagStdbyInactive = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmMcLagStdbyInactive.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMcLagStdbyInactive.setDescription("The value of tmnxDot1agCfmMcLagStdbyInactive specifies whether or not ETH-CFM MEPs configured on Multi-Chassis LAG ports are aware of MC-LAG port active/standby states. When this object is 'true (1)', MEPs configured on a Multi-Chassis LAG port will act as if they are administratively shutdown if running on a standby port, and will only be operational on an active MC-LAG port. When this object is 'false (2)', MEPs configured on a Multi-Chassis LAG port will operate regardless of the MC-LAG port active and standby states.")
tmnxDot1agCfmMcLagPropHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmMcLagPropHoldTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMcLagPropHoldTime.setDescription("The value of tmnxDot1agCfmMcLagPropHoldTime specifies the duration, in seconds, of a timer that is activated when an MC-LAG port or protocol changes state. While the timer is active, no fault set or clear is propagated to the MC-LAG SAP's CFM MEP. The outstanding hold time can be monitored by polling the value of sapEthCfmMcLagPropHoldTimeRemain for a particular SAP. When set to the value zero (0), no delay in response to a port or protocol change will be observed. This object is meaningful only when tmnxDot1agCfmMcLagStdbyInactive is set to the value 'enabled (1)', otherwise an SNMP Set operation will result in an inconsistentValue error and the result of an SNMP Get operation will be undefined.")
tmnxDot1agCfmSLMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 2))
tmnxDot1agCfmSLMInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(100)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmSLMInactivityTimer.setReference('ITU-T Y.1731 Ethernet Synthetic Frame Loss Measurement (ETH-SLM) Section 8.2 Note 2.')
if mibBuilder.loadTexts: tmnxDot1agCfmSLMInactivityTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSLMInactivityTimer.setDescription("The value of tmnxDot1agCfmSLMInactivityTimer specifies the duration, in seconds, that the system will maintain Synthetic Loss Measurement (SLM) reply (SLR) data for individual two-way tests in the absence of receiving SLM frames. The system may be blocked in responding to new two-way SLM tests due to an excessive inactive timer duration. In this case, reducing this object's value, thus reducing the retention time for existing latent SLR test data, will help free test resources allowing the system to respond to new two-way SLM tests.")
tmnxDot1agCfmStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3))
tmnxDot1agCfmGlobalPacketStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1))
tmnxDot1agCfmGlobalPacketRxCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketRxCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketRxCount.setDescription('The value of tmnxDot1agCfmGlobalPacketRxCount indicates the number of received ETH-CFM packets.')
tmnxDot1agCfmGlobalPacketTxCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketTxCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketTxCount.setDescription('The value of tmnxDot1agCfmGlobalPacketTxCount indicates the number of transmitted ETH-CFM packets.')
tmnxDot1agCfmGlobalPacketDropped = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketDropped.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketDropped.setDescription('The value of tmnxDot1agCfmGlobalPacketDropped indicates the number of packets dropped by ETH-CFM. A packet is dropped because of resource contention.')
tmnxDot1agCfmGlobalPacketDiscard = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketDiscard.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalPacketDiscard.setDescription('The value of tmnxDot1agCfmGlobalPacketDiscard indicates the number of packets discarded by ETH-CFM. A packet may be discarded for several reasons including, but not limited to, malformed PDU, invalid TLVs, MEP admin down, etc.')
tmnxDot1agCfmComponentLimitTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmComponentLimitTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmComponentLimitTable.setDescription('The tmnxDot1agCfmComponentLimitTable stores the current resource counts as well as their resource limits for Ethernet Connectivity Fault Management (ETH-CFM) components in the SROS series system.')
tmnxDot1agCfmComponentLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompMajorIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompMinorIndex"))
if mibBuilder.loadTexts: tmnxDot1agCfmComponentLimitEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmComponentLimitEntry.setDescription('The tmnxDot1agCfmComponentLimitEntry consists of the resource limits for a particular component of ETH-CFM. Rows are managed by the system and can not be created or destroyed using SNMP set requests.')
tmnxDot1agCfmCompMajorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmCompMajorIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmCompMajorIndex.setDescription('The value of tmnxDot1agCfmCompMajorIndex specifies the major identifier of the ETH-CFM component.')
tmnxDot1agCfmCompMinorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmCompMinorIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmCompMinorIndex.setDescription('The value of tmnxDot1agCfmCompMinorIndex specifies the minor identifier of the ETH-CFM component.')
tmnxDot1agCfmCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 3), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompName.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmCompName.setDescription('The value of tmnxDot1agCfmCompName indicates the name of the ETH-CFM component.')
tmnxDot1agCfmCompResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompResourceUsage.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmCompResourceUsage.setDescription('The value of tmnxDot1agCfmCompResourceUsage indicates the current resource usage for the ETH-CFM component.')
tmnxDot1agCfmCompResourceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmCompResourceLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmCompResourceLimit.setDescription('The value of tmnxDot1agCfmCompResourceLimit indicates the maximum resource usage limit for the ETH-CFM component for the SROS series system.')
tmnxDot1agCfmSystemScalarsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4))
tmnxDot1agCfmGraceTxEnable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1agCfmGraceTxEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmGraceTxEnable.setDescription("The value of tmnxDot1agCfmGraceTxEnable specifies whether or not grace period notifications will be sent to the ETH-CFM remote MEP peers. The value 'true' enables grace period notifications, and the value 'false' suppresses the notifications. During an outage, the modification of this object from 'true' to 'false' will cause an immediate clear of all grace period notifications, after which no further notifications will be sent. A modification of this object from 'false' to 'true' will not enable the transmission of grace period for any outages currently in progress but will take effect for subsequent outages.")
tmnxDot1agCfmGracePeriod = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 2, 4, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmGracePeriod.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmGracePeriod.setDescription("The value of tmnxDot1agCfmGracePeriod indicates whether or not the node is locally executing a grace period. A value of 'true' indicates that all peer timeouts are extended locally and eligible MEPs are transmitting grace period information. A value of 'false' indicates no grace period information is transmitted and standard values are used for timing out remote peers. Note that for a local MEP to be eligible for grace period transmission it must be admin up and ccm-enabled. Additionally, for any transmission to occur tmnxDot1agCfmGraceTxEnable must be set to 'true'.")
tmnxDot1agCfmMaNetTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetTable.setDescription('The tmnxDot1agCfmMaNetTable AUGMENTS the standard MIB table, dot1agCfmMaNetTable. This table is used to enhance Maintenance Association functionality for Ethernet Connectivity Fault Management (ETH-CFM).')
tmnxDot1agCfmMaNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1), )
dot1agCfmMaNetEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetEntry"))
tmnxDot1agCfmMaNetEntry.setIndexNames(*dot1agCfmMaNetEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetEntry.setDescription('The tmnxDot1agCfmMaNetEntry consists of the configuration objects used to enhance the Maintenance Association functionality.')
tmnxDot1agCfmMaNetHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetHoldDownTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetHoldDownTimer.setDescription('The value of tmnxDot1agCfmMaNetHoldDownTimer specifies the time, in centiseconds, that a MEP in the association will delay declaring a fault. This delay is added on to the existing 3.5 * dot1agCfmMaNetCcmInterval value used to determine if a connectivity fault to the peer should be raised. A value of zero (0) indicates that no additional delay should be added to the existing 3.5 * dot1agCfmMaNetCcmInterval value.')
tmnxDot1agCfmMaNetTotalMEPCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetTotalMEPCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaNetTotalMEPCount.setDescription("The value of tmnxDot1agCfmMaNetTotalMEPCount indicates the number of unique MEPs configured (both local and remote) that are associated with this MA. When the number of MEPs exceed the normal MA limits, the MA is considered to be an extended MA and will use a resource from the 'Extended MA' resource entry in tmnxDot1agCfmComponentLimitTable.")
tmnxDot1agCfmMaMepListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListTable.setDescription('The tmnxDot1agCfmMaMepListTable extends the functionality of the dot1agCfmMaMepListTable for the SROS series systems.')
tmnxDot1agCfmMaMepListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3, 1), )
dot1agCfmMaMepListEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMepListEntry"))
tmnxDot1agCfmMaMepListEntry.setIndexNames(*dot1agCfmMaMepListEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListEntry.setDescription('The tmnxDot1agCfmMaMepListEntry augments the standard MIB entry for the purpose of extending functionality for the SROS series systems for the Dot1ag CFM MEP Lists. Rows are created and destroyed by the system through the row status field in dot1agCfmMaMepListEntry.')
tmnxDot1agCfmMaMepListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 6, 3, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaMepListMacAddress.setDescription('The value of tmnxDot1agCfmMaMepListMacAddress specifies the target unicast MAC address used for transmitting CFM packets to the remote MEPs for the specified MEPID. Setting a unicast MAC address restricts the number of MEPIDs that can be configured for an individual MA to a maximum of one (1). Setting the address back to the default value will remove this restriction and will result in the regular CCM multicast address being used. This value cannot be set to any multicast or broadcast address.')
tmnxDot1agCfmSapMipTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipTable.setDescription('A row in the tmnxDot1agCfmSapMipTable indicates that the specified SAP may have a MIP created on the endpoint.')
tmnxDot1agCfmSapMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipIfIndex"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipVlanIdOrNone"))
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipEntry.setDescription('The MIP (SAP) entry')
tmnxDot1agCfmSapMipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipIfIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipIfIndex.setDescription('This object represents the Bridge Port or aggregated port on which MEPs or MHFs might be configured.')
tmnxDot1agCfmSapMipVlanIdOrNone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipVlanIdOrNone.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipVlanIdOrNone.setDescription('VLAN ID to which the MIP is attached, or 0, if none.')
tmnxDot1agCfmSapMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipRowStatus.setDescription('The tmnxDot1agCfmSapMipRowStatus specifies the ability to enable MIP creation under a SAP. Existing MIPs associated with the SAP may be viewed via the tmnxDot1agCfmStackTable')
tmnxDot1agCfmSapMipSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSapMipSrcMacAddress.setDescription('The value of tmnxDot1agCfmSapMipSrcMacAddress specifies the source MAC address used by the MIP. By default, the MAC address is the MAC address of the SAP.')
tmnxDot1agCfmSdpMipTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipTable.setDescription('A row in the tmnxDot1agCfmSapMipTable indicates that the specified SDP-Binding may have a MIP created on the endpoint.')
tmnxDot1agCfmSdpMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1), ).setIndexNames((0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSvcId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSdpId"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipVcId"))
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipEntry.setDescription('The MIP (SDP-Binding) entry')
tmnxDot1agCfmSdpMipSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 1), TmnxServId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSvcId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSvcId.setDescription('The value of tmnxDot1agCfmSdpMipSvcId specifies the service on which the Sdp-Binding MIP is configured.')
tmnxDot1agCfmSdpMipSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 2), SdpId())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSdpId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSdpId.setDescription('The value of tmnxDot1agCfmSdpMipSdpId specifies the Bridge Port or aggregated port on which MEPs or MHFs might be configured.')
tmnxDot1agCfmSdpMipVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipVcId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipVcId.setDescription('The value of tmnxDot1agCfmSdpMipVcId specifies, along with tmnxDot1agCfmSdpMipSdpId, the SDP Binding for the bridge.')
tmnxDot1agCfmSdpMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipRowStatus.setDescription('The tmnxDot1agCfmSapMipRowStatus specifies the ability to enable MIP creation under a SAP. Existing MIPs associated with the SAP may be viewed via the tmnxDot1agCfmSdpBindStackTable')
tmnxDot1agCfmSdpMipSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 8, 2, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpMipSrcMacAddress.setDescription('The value of tmnxDot1agCfmSdpMipSrcMacAddress specifies the source MAC address used by the MIP. By default, the MAC address is the MAC address of the chassis.')
tmnxDot1agCfmMepMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtTable.setDescription('The tmnxDot1agCfmMepMgmtTable manages the row creation and deletion of dot1agCfmMepTable rows. This table replaces the standard row creation model for Dot1ag CFM MEPs to better facilitate Alcatel-Lucent SROS series requirements. The use of writing to the IEEE-8021-CFM-MIB::dot1agCfmMepRowStatus object is deprecated and should be discouraged in favour of this table.')
tmnxDot1agCfmMepMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtEntry"))
tmnxDot1agCfmMepMgmtEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtEntry.setDescription('The tmnxDot1agCfmMepMgmtEntry consists of the configuration objects used for the purpose of row creation for Alcatel-Lucent SROS Dot1ag MEPs. To create a MEP one must specify its type and endpoint association.')
tmnxDot1agCfmMepMgmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtRowStatus.setDescription('The value of tmnxDot1agCfmMepMgmtRowStatus specifies the row status of the dot1ag CFM MEP. This object replaces the use of the IEEE-8021-CFM-MIB::dot1agCfmMepRowStatus object.')
tmnxDot1agCfmMepMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("facilityPort", 1), ("facilityInterface", 2), ("sapPrimaryVlan", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtType.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtType.setDescription('The value of tmnxDot1agCfmMepMgmtType specifies the endpoint type that this MEP facilitates. default (0) -- implements a traditional MEP. facilityPort (1) -- implements a facility port/LAG level MEP. facilityInterface (2) -- implements a router interface level MEP. sapPrimaryVlan (3) -- implements a SAP MEP using primary VLAN-ID from the MA Comp Table. This is only applicable if the MA primary VLAN ID is set to a value other than zero (0). This object must be specified during row creation.')
tmnxDot1agCfmMepMgmtServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 3), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtServiceId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtServiceId.setDescription("The value of tmnxDot1agCfmMepMgmtServiceId specifies the service to which the virtual MEP is attached. This object refers directly to TIMETRA-IEEE8021-CFM-MIB::tmnxDot1agCfmMepSvcId. This object may be specified during row creation when tmnxDot1agCfmMepMgmtType is set to the value 'default'.")
tmnxDot1agCfmMepMgmtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtIfIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtIfIndex.setDescription("The value of tmnxDot1agCfmMepMgmtIfIndex specifies, along with tmnxDot1agCfmMepMgmtPrimaryVid, the interface index of the interface to which the MEP is attached. This object refers directly to IEEE8021-CFM-MIB::dot1agCfmMepIfIndex. This object may be specified during row creation when tmnxDot1agCfmMepMgmtType is set to either the value 'default' or 'sapPrimaryVlan'.")
tmnxDot1agCfmMepMgmtPrimaryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtPrimaryVid.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtPrimaryVid.setDescription('The value of tmnxDot1agCfmMepMgmtPrimaryVid specifies, along with tmnxDot1agCfmMepMgmtIfIndex, the Primary VID of the MEP. This object refers directly to IEEE8021-CFM-MIB::dot1agCfmMepPrimaryVid. This object must be specified during row creation when tmnxDot1agCfmMepMgmtIfIndex is specified.')
tmnxDot1agCfmMepMgmtSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 6), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtSdpId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtSdpId.setDescription("The value of tmnxDot1agCfmMepMgmtSdpId specifies, along with tmnxDot1agCfmMepMgmtVcId, the SDP-Binding to which the MEP is attached. This object refers directly to TIMETRA-IEEE8021-CFM-MIB::tmnxDot1agCfmMepSdpId. This object may be specified during row creation when tmnxDot1agCfmMepMgmtType is set to the value 'default'.")
tmnxDot1agCfmMepMgmtVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtVcId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtVcId.setDescription('The value of tmnxDot1agCfmMepMgmtVcId specifies, along with tmnxDot1agCfmMepMgmtSdpId, the SDP-Binding to which the MEP is attached. This object refers directly to TIMETRA-IEEE8021-CFM-MIB::tmnxDot1agCfmMepVcId. This object must be specified during row creation when tmnxDot1agCfmMepMgmtSdpId is specified.')
tmnxDot1agCfmMepMgmtFcltyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtFcltyIfIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtFcltyIfIndex.setDescription("The value of tmnxDot1agCfmMepMgmtFcltyIfIndex specifies, along with tmnxDot1agCfmMepMgmtFcltyVlanId, the port or interface to which this MEP is attached. This object refers directly to TIMETRA-IEEE8021-CFM-MIB::tmnxDot1agCfmMepFacilityIfIndex. This object must be specified during row creation when tmnxDot1agCfmMepMgmtType is set to a 'facility' value.")
tmnxDot1agCfmMepMgmtFcltyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 9), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtFcltyVlanId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtFcltyVlanId.setDescription('The value of tmnxDot1agCfmMepMgmtFcltyVlanId specifies, along with tmnxDot1agCfmMepMgmtFcltyIfIndex, the port or interface to which this MEP is attached. This object refers directly to TIMETRA-IEEE8021-CFM-MIB::tmnxDot1agCfmMepFacilityVlanId. This object must be specified during row creation when tmnxDot1agCfmMepMgmtFcltyIfIndex is specified.')
tmnxDot1agCfmMepMgmtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 3, 1, 1, 50), Dot1agCfmMpDirection().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMgmtDirection.setDescription('The value of tmnxDot1agCfmMepMgmtDirection specifies the direction in which the MEP faces on the Bridge port. This object refers directly to IEEE8021-CFM-MIB::dot1agCfmMepDirection. This object applies to any MEP type as specified by the object tmnxDot1agCfmMepMgmtType.')
tmnxDot1agCfmMepEthTestRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestRsltTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestRsltTable.setDescription('The tmnxDot1agCfmMepEthTestRsltTable indicates the results of all eth-tests indexed by the originating MAC addresses. This table is not persistent over reboots of the chassis.')
tmnxDot1agCfmMepEthTestRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSrcMacAddress"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestRsltEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestRsltEntry.setDescription('The MEG result table.')
tmnxDot1agCfmMepSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSrcMacAddress.setDescription('The value of tmnxDot1agCfmMepSrcMacAddress indicates the MAC address of the issuer of the eth-test.')
tmnxDot1agCfmMepFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFrameCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepFrameCount.setDescription('The value of tmnxDot1agCfmMepFrameCount indicates the number of frames received from the issuer of the eth-test.')
tmnxDot1agCfmMepByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepByteCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepByteCount.setDescription('The value of tmnxDot1agCfmMepByteCount indicates the number of bytes received from the issuer of the eth-test.')
tmnxDot1agCfmMepFailedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepFailedBits.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepFailedBits.setDescription("The value of tmnxDot1agCfmMepFailedBits indicates the accumulated number of bits that did not match the test-pattern in all received Eth-Tst frames since tmnxDot1agCfmMepEthTestEnable is configured from 'false' to 'true'.")
tmnxDot1agCfmMepCrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCrcFailures.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepCrcFailures.setDescription('The value of tmnxDot1agCfmMepCrcFailures indicates the accumulated number of CRC checksum failures.')
tmnxDot1agCfmMepCurrByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrByteCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrByteCount.setDescription('The value of tmnxDot1agCfmMepCurrByteCount indicates the number of bytes contained in the most recently received Eth-Tst frame Test TLV.')
tmnxDot1agCfmMepCurrFailedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrFailedBits.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrFailedBits.setDescription('The value of tmnxDot1agCfmMepCurrFailedBits indicates the number of bits that did not match the test-pattern in the most recently received Eth-Tst frame.')
tmnxDot1agCfmMepCurrCrcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrCrcFailures.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepCurrCrcFailures.setDescription('The value of tmnxDot1agCfmMepCurrCrcFailures indicates that CRC errors were detected in the most recently received Eth-Tst frame.')
tmnxDot1agCfmMepDelayRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayRsltTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayRsltTable.setDescription('The tmnxDot1agCfmMepDelayRsltTable indicates the results of all the One-Way/Two-Way Delay Tests from the originating MAC addresses. This table is not persistent over reboots of the chassis.')
tmnxDot1agCfmMepDelayRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelaySrcMacAddr"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestType"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayRsltEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayRsltEntry.setDescription('The MEG result table.')
tmnxDot1agCfmMepDelaySrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelaySrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelaySrcMacAddr.setDescription('The value of tmnxDot1agCfmMepDelaySrcMacAddr indicates the source MAC address of the issuer of the test.')
tmnxDot1agCfmMepDelayTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneWayTest", 1), ("twoWayTest", 2))))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayTestType.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayTestType.setDescription('The value of tmnxDot1agCfmMepDelayTestType indicates the type of test this row details.')
tmnxDot1agCfmMepDelayTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 3), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayTestDelay.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayTestDelay.setDescription('The value of tmnxDot1agCfmMepDelayTestDelay indicates the amount of time, measured in microseconds, from when the test-frame was transmitted to the time it was received minus the local processing time taken by the remote system.')
tmnxDot1agCfmMepDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 3, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayVariation.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDelayVariation.setDescription('The value of tmnxDot1agCfmMepDelayVariation indicates the amount of time delay variation, measured in microseconds, from the two most recent time delay measurements')
tmnxDot1agCfmMepSlmTWTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestTable.setReference('ITU-T Y.1731 Ethernet Synthetic Frame Loss Measurement (ETH-SLM)')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestTable.setDescription('tmnxDot1agCfmMepSlmTWTestTable consists of the MEP configuration for issuing individual Synthetic Loss Measurement tests.')
tmnxDot1agCfmMepSlmTWTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestEntry"))
tmnxDot1agCfmMepSlmTWTestEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestEntry.setDescription("tmnxDot1agCfmMepSlmTWTestEntry contains the configuration for generating Synthetic Loss Measurement (SLM) Tests for a particular MEP. A row exists for each row in the dot1agCfmMepTable, and is destroyed automatically with the removal of a row in the dot1agCfmMepTable. Results from a two-way SLM test are reported in tmnxDot1agCfmMepSlmTestRsltTable with the tmnxDot1agCfmMepSlmTestType set to 'twoWayTest (2)'.")
tmnxDot1agCfmMepSlmTWTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestStatus.setDescription("The value of tmnxDot1agCfmMepSlmTWTestStatus specifies the operational state of the two-way Synthetic Loss Measurement (SLM) test. To issue a two-way SLM test the user must issue an SNMP SET on this object with a value 'enabled (1)'. To abort the two-way SLM test issue an SNMP SET on this object with the value 'disabled (2)'. A read on this object represents the current state of the two-way SLM test: enabled (1) - The test is actively running, and attempts at modifying any two-way SLM object will be rejected disabled (2) - The test is not running. Once the test is complete this object will revert to the default value 'disabled (2)'.")
tmnxDot1agCfmMepSlmTWTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTestId.setDescription('The value of tmnxDot1agCfmMepSlmTWTestId indicates the test identifier used to initiate the two-way Synthetic Loss Measurement (SLM) test.')
tmnxDot1agCfmMepSlmTWMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWMacAddress.setDescription('The value of tmnxDot1agCfmMepSlmTWMacAddress specifies the MAC address used as a target for the two-way Synthetic Loss Measurement (SLM) test. This object MUST be set to a valid MAC Address for proper execution of the two-way SLM test.')
tmnxDot1agCfmMepSlmTWPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWPriority.setDescription('The value of tmnxDot1agCfmMepSlmTWPriority specifies the priority used in the generated test frame for the two-way Synthetic Loss Measurement (SLM) test.')
tmnxDot1agCfmMepSlmTWInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWInterval.setDescription("The value of tmnxDot1agCfmMepSlmTWInterval, in conjuction with tmnxDot1agCfmMepSlmTWIntrvlUnits, specifies the interval between Synthetic Loss Measurement (SLM) messages sent by the two-way SLM test. For example, if tmnxDot1agCfmMepSlmTWInterval has the value 90, and tmnxDot1agCfmMepSlmTWIntrvlUnits has the value 'centiseconds(2)', the interval between SLM messages is 0.9 seconds. The tmnxDot1agCfmMepSlmTWInterval and tmnxDot1agCfmMepSlmTWIntrvlUnits pair provide support for the following intervals: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 seconds; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 seconds.")
tmnxDot1agCfmMepSlmTWTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWTimeout.setDescription('The value of tmnxDot1agCfmMepSlmTWTimeout specifies the time-out value, in seconds, to wait for a Synthetic Loss Measurement (SLM) message to reply for the two-way SLM test. Upon expiration of the timeout period, the agent assumes that the message response will not be received. Any response received after the timeout period has expired is silently discarded.')
tmnxDot1agCfmMepSlmTWDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWDataSize.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWDataSize.setDescription('The value of tmnxDot1agCfmMepSlmTWDataSize specifies the data size, in bytes, contained in the padding TLV for the two-way Synthetic Loss Measurement (SLM) test. A value of zero (0) specifies that no padding TLV is inserted in the SLM packet. Any non-zero value will increase the packet size by the specified data size plus 3 bytes for the TLV header.')
tmnxDot1agCfmMepSlmTWSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWSendCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWSendCount.setDescription('The value of tmnxDot1agCfmMepSlmTWSendCount specifies the number of Synthetic Loss Measurement (SLM) packets to send during the two-way SLM test.')
tmnxDot1agCfmMepSlmTWIntrvlUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seconds", 1), ("centiseconds", 2))).clone('seconds')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWIntrvlUnits.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWIntrvlUnits.setDescription("The value of tmnxDot1agCfmMepSlmTWIntrvlUnits, in conjuction with tmnxDot1agCfmMepSlmTWInterval, specifies the interval between Synthetic Loss Measurement (SLM) messages sent by the two-way SLM test. For example, if tmnxDot1agCfmMepSlmTWInterval has the value 90, and tmnxDot1agCfmMepSlmTWIntrvlUnits has the value 'centiseconds(2)', the interval between SLM messages is 0.9 seconds. The intervals supported are shown in the tmnxDot1agCfmMepSlmTWInterval DESCRIPTION clause.")
tmnxDot1agCfmMepSlmOWTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestTable.setReference('ITU-T Y.1731 Ethernet Synthetic Frame Loss Measurement (ETH-SLM)')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestTable.setDescription('tmnxDot1agCfmMepSlmOWTestTable consists of the MEP configuration for issuing individual Synthetic Loss Measurement one-way tests.')
tmnxDot1agCfmMepSlmOWTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1), )
dot1agCfmMepEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestEntry"))
tmnxDot1agCfmMepSlmOWTestEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestEntry.setDescription("tmnxDot1agCfmMepSlmOWTestEntry contains the configuration for generating Synthetic Loss Measurement (SLM) Tests for a particular MEP. A row exists for each row in the dot1agCfmMepTable, and is destroyed automatically with the removal of a row in the dot1agCfmMepTable. Results from a one-way SLM test are reported in tmnxDot1agCfmMepSlmTestRsltTable with tmnxDot1agCfmMepSlmTestType set to 'oneWayTest (1)'.")
tmnxDot1agCfmMepSlmOWTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestStatus.setDescription("The value of tmnxDot1agCfmMepSlmOWTestStatus specifies the operational state of the one-way Synthetic Loss Measurement (SLM) test. To issue a one-way SLM test the user must issue an SNMP SET on this object with a value 'enabled (1)'. To abort the one-way SLM test issue an SNMP SET on this object with the value 'disabled (2)'. A read on this object represents the current state of the one-way SLM test: enabled (1) - The test is actively running, and attempts at modifying any one-way SLM object will be rejected disabled (2) - The test is not running. Once the test is complete this object will revert to the default value 'disabled (2)'.")
tmnxDot1agCfmMepSlmOWTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWTestId.setDescription('The value of tmnxDot1agCfmMepSlmOWTestId indicates the test identifier used to initiate the one-way Synthetic Loss Measurement (SLM) test.')
tmnxDot1agCfmMepSlmOWMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWMacAddress.setDescription('The value of tmnxDot1agCfmMepSlmOWMacAddress specifies the MAC address used as a target for the one-way Synthetic Loss Measurement (SLM) Test. This object MUST be set to a valid MAC Address for proper execution of the one-way SLM test.')
tmnxDot1agCfmMepSlmOWPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWPriority.setDescription('The value of tmnxDot1agCfmMepSlmOWPriority specifies the priority used in the generated test frame for the one-way Synthetic Loss Measurement (SLM) test.')
tmnxDot1agCfmMepSlmOWInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWInterval.setDescription('The value of tmnxDot1agCfmMepSlmOWInterval specifies the delay, in seconds, between Synthetic Loss Measurement (SLM) messages for the one-way SLM test.')
tmnxDot1agCfmMepSlmOWDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWDataSize.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWDataSize.setDescription('The value of tmnxDot1agCfmMepSlmOWDataSize specifies the data size, in bytes, contained in the padding TLV for the one-way Synthetic Loss Measurement (SLM) test. A value of zero (0) specifies that no padding TLV is inserted in the SLM packet. Any non-zero value will increase the packet size by the specified data size plus 3 bytes for the TLV header.')
tmnxDot1agCfmMepSlmOWSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWSendCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmOWSendCount.setDescription('The value of tmnxDot1agCfmMepSlmOWSendCount specifies the number of Synthetic Loss Measurement (SLM) packets to send consecutively during the one-way SLM test.')
tmnxDot1agCfmMepSlmTestRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestRsltTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestRsltTable.setDescription('tmnxDot1agCfmMepSlmTestRsltTable consists of the results of manually triggered Synthetic Loss Measurement tests.')
tmnxDot1agCfmMepSlmTestRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestType"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMacAddr"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestRsltEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestRsltEntry.setDescription('tmnxDot1agCfmMepSlmTestRsltEntry contains the results of a manually triggered Synthetic Loss Measurement (SLM) test for a particular MEP. Rows are auto-generated by the system based on the issuing of a SLM test.')
tmnxDot1agCfmMepSlmTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneWayTest", 1), ("twoWayTest", 2))))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestType.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestType.setDescription('The value of tmnxDot1agCfmMepSlmTestType specifies whether the row for this Synthetic Loss Measurement (SLM) test refers to a two-way SLM test.')
tmnxDot1agCfmMepSlmRemoteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmRemoteMacAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmRemoteMacAddr.setDescription('The value of tmnxDot1agCfmMepSlmRemoteMacAddr specifies the source MAC address of the remote node involved in the test.')
tmnxDot1agCfmMepSlmTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTestId.setDescription('The value of tmnxDot1agCfmMepSlmTestId indicates the test identifier that was used to initiate the Synthetic Loss Measurement (SLM) test.')
tmnxDot1agCfmMepSlmRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 4), Dot1agCfmMepId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmRemoteMepId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmRemoteMepId.setDescription('The value of tmnxDot1agCfmMepSlmRemoteMepId indicates the MEP Identifier of the remote node involved in the test.')
tmnxDot1agCfmMepSlmLastTxSeqF = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmLastTxSeqF.setReference('ITU-T Y.1731 Ethernet Synthetic Frame Loss Measurement (ETH-SLM)')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmLastTxSeqF.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmLastTxSeqF.setDescription('The value of tmnxDot1agCfmMepSlmLastTxSeqF indicates the last received sequence number on the local node, transmitted by the remote node.')
tmnxDot1agCfmMepSlmPacketIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketIn.setReference('ITU-T Y.1731 Ethernet Synthetic Frame Loss Measurement (ETH-SLM)')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketIn.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketIn.setDescription('The value of tmnxDot1agCfmMepSlmPacketIn indicates the number of packets received during the execution of the test.')
tmnxDot1agCfmMepSlmPacketLossIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 7), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossIn.setReference('ITU-T Y.1731 Ethernet Synthetic Frame Loss Measurement (ETH-SLM)')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossIn.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossIn.setDescription('The value of tmnxDot1agCfmMepSlmPacketLossIn indicates the number of packets transmitted from the remote node but not received on the local node during the execution of the test.')
tmnxDot1agCfmMepSlmPacketLossOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 8), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossOut.setReference('ITU-T Y.1731 Ethernet Synthetic Frame Loss Measurement (ETH-SLM)')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossOut.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketLossOut.setDescription('The value of tmnxDot1agCfmMepSlmPacketLossOut indicates the number of packets transmitted from the local node but not received on the remote node during the execution of the test.')
tmnxDot1agCfmMepSlmPacketUnack = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 6, 1, 9), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketUnack.setReference('ITU-T Y.1731 Ethernet Synthetic Frame Loss Measurement (ETH-SLM)')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketUnack.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmPacketUnack.setDescription('The value of tmnxDot1agCfmMepSlmPacketUnack indicates the number of unacknowledged lost packets during the execution of the test.')
tmnxDot1agCfmMepMcstLbmRsltTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcstLbmRsltTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcstLbmRsltTable.setDescription('tmnxDot1agCfmMepMcstLbmRsltTable consists of the results of manually triggered ETH-CFM loopback tests where the value of dot1agCfmMepTransmitLbmDestMacAddress was set to the multicast MAC address for the MEP. Only one result set per MEP is retained.')
tmnxDot1agCfmMepMcstLbmRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRemoteMepMac"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmSeqNumber"), (0, "TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRxIndex"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcstLbmRsltEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcstLbmRsltEntry.setDescription('tmnxDot1agCfmMepMcstLbmRsltEntry contains an individual message response to a manually triggered loopback test. A row is auto-generated by the system upon receipt of a valid loopback response that matches a multicast loopback test in progress.')
tmnxDot1agCfmMepLbmRemoteMepMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmRemoteMepMac.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmRemoteMepMac.setDescription('The value of tmnxDot1agCfmMepLbmRemoteMepMac specifies the MAC address of the remote MEP responding to the multicast loopback message.')
tmnxDot1agCfmMepLbmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmSeqNumber.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmSeqNumber.setDescription('The value of tmnxDot1agCfmMepLbmSeqNumber specifies the sequence number contained within the reply message.')
tmnxDot1agCfmMepLbmRxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmRxIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmRxIndex.setDescription('The value of tmnxDot1agCfmMepLbmRxIndex indicates the order in which the reply was received for the corresponding remote MAC address. It is locally assigned and can be used to detect out of order responses.')
tmnxDot1agCfmMepDbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8), )
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbTable.setDescription('tmnxDot1agCfmMepDbTable is an augmented table for the standard IEEE8021-CFM table dot1agCfmMepDbTable.')
tmnxDot1agCfmMepDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8, 1), )
dot1agCfmMepDbEntry.registerAugmentions(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDbEntry"))
tmnxDot1agCfmMepDbEntry.setIndexNames(*dot1agCfmMepDbEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbEntry.setDescription('tmnxDot1agCfmMepDbEntry is an augmented conceptual row in the dot1agCfmMepDbTable. Objects defined in this row extend the functionality of the base row. Creation and deletion of rows in this table is managed through the base table.')
tmnxDot1agCfmMepDbGraceRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 7, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbGraceRx.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDbGraceRx.setDescription('The value of tmnxDot1agCfmMepDbGraceRx indicates whether the remote peer is transmitting a grace period notification or not.')
tmnxDot1agCfmNotifySvcId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 52, 9, 1), TmnxServId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDot1agCfmNotifySvcId.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmNotifySvcId.setDescription('The tmnxDot1agCfmNotifySvcId is used in notifications when a row consisting of the service identifier may not exist when the trap is issued.')
tmnxDot1agCfmMepLbmTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 1)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepTransmitLbmDestMacAddress"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmTestComplete.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepLbmTestComplete.setDescription('The tmnxDot1agCfmMepLbmTestComplete notification indicates that a loopback test has been issued and results are ready.')
tmnxDot1agCfmMepLtmTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 2)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepTransmitLtmSeqNumber"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepLtmTestComplete.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepLtmTestComplete.setDescription('The tmnxDot1agCfmMepLtmTestComplete notification indicates that a linktrace test has been issued and results are ready. The dot1agCfmMepTransmitLtmSeqNumber indicates the Transaction Identifier to use to retrieve the Link-trace results.')
tmnxDot1agCfmMepEthTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrCrcFailures"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestComplete.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepEthTestComplete.setDescription("The tmnxDot1agCfmMepEthTestComplete notification indicates that an eth-test has been issued and results are ready. The tmnxDot1agCfmMepCurrByteCount indicates the number of bytes contained in the frame's Test TLV, and the tmnxDot1agCfmMepCurrFailedBits and tmnxDot1agCfmMepCurrCrcFailures indicate the failure state of the test. A value of Zero (0) for tmnxDot1agCfmMepCurrFailedBits and a value of 'false (2)' for tmnxDot1agCfmMepCurrCrcFailures indicates a successful test.")
tmnxDot1agCfmMepDMTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestDelay"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepDMTestComplete.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepDMTestComplete.setDescription('The tmnxDot1agCfmMepDMTestComplete notification indicates that a One-Way-Delay-Test (OWDT) frame, or a Two-Way-Delay-Test (TWDT) response was received. For an OWDT frame, traps are raised only when a delay threshold of three (3) seconds is exceeded.')
tmnxDot1agCfmMepAisStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAis"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisStateChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepAisStateChanged.setDescription('The tmnxDot1agCfmMepAisStateChanged notification is generated when a MEP enters or exits an AIS state.')
tmnxDot1agCfmMipEvaluation = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotifySvcId"))
if mibBuilder.loadTexts: tmnxDot1agCfmMipEvaluation.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMipEvaluation.setDescription('The tmnxDot1agCfmMipEvaluation notification is generated when a virtual MEP is created or deleted causing MIP reevaluation on the service. On virtual MEP creation, any MIPs in the service will be removed. On virtual MEP deletion, the MIPs are reevaluated.')
tmnxDot1agCfmMepSLMTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 52, 0, 7)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmLastTxSeqF"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossOut"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketUnack"))
if mibBuilder.loadTexts: tmnxDot1agCfmMepSLMTestComplete.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSLMTestComplete.setDescription('The tmnxDot1agCfmMepSLMTestComplete notification is generated when a two-way Synthetic Loss Measurement (SLM) test is completed.')
tmnxDot1agCfmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1))
tmnxDot1agCfmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2))
tmnxDot1agCfmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmCompliance = tmnxDot1agCfmCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDot1agCfmCompliance.setDescription('The compliance statement for revision 1.0 of TIMETRA-IEEE8021-CFM-MIB.')
tmnxDot1agCfmComplianceV7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV7v0 = tmnxDot1agCfmComplianceV7v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDot1agCfmComplianceV7v0.setDescription('The compliance statement for revision 7.0 of the SROS system')
tmnxDot1agCfmComplianceV8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV8v0 = tmnxDot1agCfmComplianceV8v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDot1agCfmComplianceV8v0.setDescription('The compliance statement for revision 8.0 of the SROS system')
tmnxDot1agCfmComplianceV9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV9v0 = tmnxDot1agCfmComplianceV9v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDot1agCfmComplianceV9v0.setDescription('The compliance statement for revision 9.0 of the SROS system')
tmnxDot1agCfmComplianceV10v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStatsGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGPGroupV10v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV10v0 = tmnxDot1agCfmComplianceV10v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDot1agCfmComplianceV10v0.setDescription('The compliance statement for revision 10.0 of the SROS system')
tmnxDot1agCfmComplianceV11v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 1, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV7v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcastLbmGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmGroupV9v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipGroupV8v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipNotifyGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStatsGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxY1731CfmNotificationGroup"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGPGroupV10v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMEPMgmtGroupV11v0"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMdGroupV11v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmComplianceV11v0 = tmnxDot1agCfmComplianceV11v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmComplianceV11v0.setDescription('The compliance statement for revision 11.0 of the SROS system')
tmnxDot1agCfmSdpBindStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpBindStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmSdpBindStackGroup = tmnxDot1agCfmSdpBindStackGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSdpBindStackGroup.setDescription('The group of objects for management of dot1ag Stack Table applicable to implementing SDP-Bindings.')
tmnxDot1agCfmMepGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroup = tmnxDot1agCfmMepGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDot1agCfmMepGroup.setDescription('The group of objects for management of dot1ag MEP Table applicable to implementing SDP-Bindings.')
tmnxDot1agCfmSapStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmSapStackGroup = tmnxDot1agCfmSapStackGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmSapStackGroup.setDescription('The group of objects for management of dot1ag Stack Table applicable to implementing SAP on the SROS.')
tmnxDot1agCfmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLtmTestComplete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmNotificationGroup = tmnxDot1agCfmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmNotificationGroup.setDescription('The group of objects for management of dot1ag Notifications applicable to implementing CFM on the SROS.')
tmnxDot1agCfmMipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipGroup = tmnxDot1agCfmMipGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDot1agCfmMipGroup.setDescription('The group of objects for management of dot1ag MIP Tables applicable to implementing MIPs.')
tmnxDot1agCfmMepGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisMegLevel"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestPattern"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAisInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthRxAis"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthAisTxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestMacAddr"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestDataLen"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTWDTMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepTWDTPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFrameCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCrcFailures"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrByteCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrFailedBits"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCurrCrcFailures"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayTestDelay"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDelayVariation"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSvcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepControlMep"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestThreshold"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepOWDTThreshold"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmVStackMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmStackMPType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV7v0 = tmnxDot1agCfmMepGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepGroupV7v0.setDescription('The group of objects for managing dot1ag and Y.1731 tables applicable to Virtual MEPs and MEGs on SROS R7.0, and enabling APS support.')
tmnxY1731CfmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 7)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepEthTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDMTestComplete"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepAisStateChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxY1731CfmNotificationGroup = tmnxY1731CfmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxY1731CfmNotificationGroup.setDescription('The group of objects for management of Y.1731 Notifications applicable to implementing CFM on the SROS.')
tmnxDot1agCfmNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 8)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmNotifySvcId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmNotifyObjsGroup = tmnxDot1agCfmNotifyObjsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmNotifyObjsGroup.setDescription('The group of objects supporting notifications for revision 7.0 on Alcatel-Lucent SROS series systems.')
tmnxDot1agCfmMipNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 9)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMipEvaluation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipNotifyGroup = tmnxDot1agCfmMipNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMipNotifyGroup.setDescription('The group of notification objects for management of dot1ag MIPs.')
tmnxDot1agCfmV6v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 10))
tmnxDot1agCfmV7v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 11))
tmnxDot1agCfmV8v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12))
tmnxDot1agCfmMipGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSapMipSrcMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSdpMipSrcMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMipGroupV8v0 = tmnxDot1agCfmMipGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMipGroupV8v0.setDescription('The group of objects for management of dot1ag MIP Tables applicable to implementing MIPs for SROS release 8.0.')
tmnxDot1agCfmMepGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 12, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFaultPropagation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV8v0 = tmnxDot1agCfmMepGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepGroupV8v0.setDescription('The group of objects for managing dot1ag and Y.1731 tables applicable to Virtual MEPs and MEGs on SROS R8.0, and enabling APS support.')
tmnxDot1agCfmV9v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13))
tmnxDot1agCfmMaGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetHoldDownTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaGroupV9v0 = tmnxDot1agCfmMaGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaGroupV9v0.setDescription('The group of objects for management of dot1ag and Y.1731 tables applicable to enhancing Maintenance Associations for the SROS release 9.0.')
tmnxDot1agCfmMepGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityVlanId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFacilityType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepFcltyFaultNotify"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDescription"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMcLagInactive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV9v0 = tmnxDot1agCfmMepGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepGroupV9v0.setDescription('The group of objects for management of dot1ag and Y.1731 tables applicable to implementing Facility MEPs for the SROS release 9.0.')
tmnxDot1agCfmGlobalGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMcLagStdbyInactive"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMcLagPropHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmGlobalGroupV9v0 = tmnxDot1agCfmGlobalGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmGlobalGroupV9v0.setDescription('The group of global objects for enhancing dot1ag and Y.1731 features with support for Multi-Chassis LAG ports for the SROS release 9.0.')
tmnxDot1agCfmMepSlmGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmSLMInactivityTimer"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWTimeout"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWDataSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWSendCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWPriority"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWInterval"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWDataSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmOWSendCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTestId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmRemoteMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmLastTxSeqF"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossIn"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketLossOut"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmPacketUnack"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmGroupV9v0 = tmnxDot1agCfmMepSlmGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmGroupV9v0.setDescription('The group of objects for management of Synthetic Loss Measurement Tests for the SROS release 9.0.')
tmnxDot1agCfmMepSlmNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSLMTestComplete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmNotifyGroup = tmnxDot1agCfmMepSlmNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmNotifyGroup.setDescription('The group of notification objects for management of dot1ag Synthetic Loss Measurement (SLM) test for the SROS release 9.0.')
tmnxDot1agCfmMepMcastLbmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 13, 6)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepLbmRxIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepMcastLbmGroup = tmnxDot1agCfmMepMcastLbmGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepMcastLbmGroup.setDescription('The group of objects for management of multicast loopback tests for the SROS release 9.0.')
tmnxDot1agCfmV10v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14))
tmnxDot1agCfmMepSlmTWGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepSlmTWIntrvlUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepSlmTWGroupV10v0 = tmnxDot1agCfmMepSlmTWGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepSlmTWGroupV10v0.setDescription('The group of objects providing additional management options for two-way SLM tests in SROS Release 10.0.')
tmnxDot1agCfmMaGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 2)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaMepListMacAddress"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMaNetTotalMEPCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMaGroupV10v0 = tmnxDot1agCfmMaGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMaGroupV10v0.setDescription('The group of additional objects for management of dot1ag and Y.1731 tables applicable to Maintenance Associations for the SROS release 10.0.')
tmnxDot1agCfmMepGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 3)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmPaddingSize"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepCcmIgnoreTLVs"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDmEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMepGroupV10v0 = tmnxDot1agCfmMepGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMepGroupV10v0.setDescription('The group of additional objects for management of dot1ag and Y.1731 tables applicable to MEPs for the SROS release 10.0.')
tmnxDot1agCfmStatsGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 4)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketRxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketTxCount"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketDropped"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGlobalPacketDiscard"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompName"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompResourceUsage"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmCompResourceLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmStatsGroupV10v0 = tmnxDot1agCfmStatsGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmStatsGroupV10v0.setDescription('The group of objects reporting dot1ag and Y.1731 global statistics applicable for the SROS release 10.0.')
tmnxDot1agCfmGPGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 14, 5)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGraceTxEnable"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmGracePeriod"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepDbGraceRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmGPGroupV10v0 = tmnxDot1agCfmGPGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmGPGroupV10v0.setDescription('The group of additional objects for management of dot1ag and Y.1731 tables applicable to Continuity Check and the grace period notifications.')
tmnxDot1agCfmV11v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15))
tmnxDot1agCfmMEPMgmtGroupV11v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 52, 2, 15, 1)).setObjects(("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtRowStatus"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtType"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtServiceId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtPrimaryVid"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtSdpId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtVcId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtFcltyIfIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtFcltyVlanId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmMepMgmtDirection"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMdIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMaIndex"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMepId"), ("TIMETRA-IEEE8021-CFM-MIB", "tmnxDot1agCfmPVStackMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDot1agCfmMEPMgmtGroupV11v0 = tmnxDot1agCfmMEPMgmtGroupV11v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDot1agCfmMEPMgmtGroupV11v0.setDescription('The group of additional objects for management of dot1ag and Y.1731 tables applicable to the row creation and deletion of MEPs.')
mibBuilder.exportSymbols("TIMETRA-IEEE8021-CFM-MIB", tmnxDot1agCfmGlobalPacketDropped=tmnxDot1agCfmGlobalPacketDropped, tmnxDot1agCfmMepMgmtRowStatus=tmnxDot1agCfmMepMgmtRowStatus, tmnxDot1agCfmMepSlmTWTestTable=tmnxDot1agCfmMepSlmTWTestTable, tmnxDot1agCfmNotifySvcId=tmnxDot1agCfmNotifySvcId, tmnxDot1agCfmMaMepListEntry=tmnxDot1agCfmMaMepListEntry, tmnxDot1agCfmMepSlmOWSendCount=tmnxDot1agCfmMepSlmOWSendCount, tmnxDot1agCfmMepCurrByteCount=tmnxDot1agCfmMepCurrByteCount, tmnxDot1agCfmSapStackGroup=tmnxDot1agCfmSapStackGroup, tmnxDot1agCfmSdpMipRowStatus=tmnxDot1agCfmSdpMipRowStatus, tmnxDot1agCfmSdpBindStackEntry=tmnxDot1agCfmSdpBindStackEntry, tmnxDot1agCfmMepEthTestDataLen=tmnxDot1agCfmMepEthTestDataLen, tmnxDot1agCfmMepGroupV8v0=tmnxDot1agCfmMepGroupV8v0, tmnxDot1agCfmVStackMdIndex=tmnxDot1agCfmVStackMdIndex, tmnxDot1agCfmMipGroup=tmnxDot1agCfmMipGroup, tmnxDot1agCfmStackMdIndex=tmnxDot1agCfmStackMdIndex, timetraIEEE8021CfmMIBModule=timetraIEEE8021CfmMIBModule, tmnxDot1agCfmMepAisEnable=tmnxDot1agCfmMepAisEnable, tmnxDot1agCfmMa=tmnxDot1agCfmMa, tmnxDot1agCfmStackDirection=tmnxDot1agCfmStackDirection, tmnxDot1agCfmPVStackDirection=tmnxDot1agCfmPVStackDirection, tmnxDot1agCfmMepDMTestComplete=tmnxDot1agCfmMepDMTestComplete, tmnxDot1agCfmMepGroup=tmnxDot1agCfmMepGroup, tmnxDot1agCfmV6v0Groups=tmnxDot1agCfmV6v0Groups, tmnxDot1agCfmMepSdpId=tmnxDot1agCfmMepSdpId, tmnxDot1agCfmVStackTable=tmnxDot1agCfmVStackTable, tmnxDot1agCfmMepEthTestComplete=tmnxDot1agCfmMepEthTestComplete, tmnxDot1agCfmMepCurrCrcFailures=tmnxDot1agCfmMepCurrCrcFailures, tmnxDot1agCfmMepMgmtFcltyVlanId=tmnxDot1agCfmMepMgmtFcltyVlanId, tmnxDot1agCfmCompResourceUsage=tmnxDot1agCfmCompResourceUsage, tmnxDot1agCfmStackifIndex=tmnxDot1agCfmStackifIndex, tmnxDot1agCfmMepAisStateChanged=tmnxDot1agCfmMepAisStateChanged, tmnxDot1agCfmMepOWDTMacAddress=tmnxDot1agCfmMepOWDTMacAddress, tmnxDot1agCfmMepDelaySrcMacAddr=tmnxDot1agCfmMepDelaySrcMacAddr, tmnxDot1agCfmV9v0Groups=tmnxDot1agCfmV9v0Groups, tmnxDot1agCfmMip=tmnxDot1agCfmMip, tmnxDot1agCfmMepEthRxAis=tmnxDot1agCfmMepEthRxAis, tmnxDot1agCfmMepTWDTPriority=tmnxDot1agCfmMepTWDTPriority, tmnxDot1agCfmMepMacAddress=tmnxDot1agCfmMepMacAddress, tmnxDot1agCfmMepDmEnable=tmnxDot1agCfmMepDmEnable, tmnxDot1agCfmPVStackMaIndex=tmnxDot1agCfmPVStackMaIndex, tmnxDot1agCfmSapMipIfIndex=tmnxDot1agCfmSapMipIfIndex, tmnxDot1agCfmMepMgmtType=tmnxDot1agCfmMepMgmtType, tmnxDot1agCfmMepAisPriority=tmnxDot1agCfmMepAisPriority, tmnxDot1agCfmMepDelayVariation=tmnxDot1agCfmMepDelayVariation, tmnxDot1agCfmMcLagPropHoldTime=tmnxDot1agCfmMcLagPropHoldTime, tmnxDot1agCfmStackMaIndex=tmnxDot1agCfmStackMaIndex, tmnxDot1agCfmStackTable=tmnxDot1agCfmStackTable, tmnxDot1agCfmSdpBindStackTable=tmnxDot1agCfmSdpBindStackTable, tmnxDot1agCfmStatisticsGroup=tmnxDot1agCfmStatisticsGroup, tmnxDot1agCfmStackMPType=tmnxDot1agCfmStackMPType, tmnxDot1agCfmMepSlmPacketIn=tmnxDot1agCfmMepSlmPacketIn, tmnxDot1agCfmMepSlmRemoteMepId=tmnxDot1agCfmMepSlmRemoteMepId, tmnxDot1agCfmSapMipTable=tmnxDot1agCfmSapMipTable, tmnxDot1agCfmMepSlmRemoteMacAddr=tmnxDot1agCfmMepSlmRemoteMacAddr, tmnxDot1agCfmVStackSvcId=tmnxDot1agCfmVStackSvcId, tmnxDot1agCfmPVStackMdIndex=tmnxDot1agCfmPVStackMdIndex, tmnxDot1agCfmMepMgmtSdpId=tmnxDot1agCfmMepMgmtSdpId, tmnxDot1agCfmSLMInactivityTimer=tmnxDot1agCfmSLMInactivityTimer, tmnxDot1agCfmMepSlmTWGroupV10v0=tmnxDot1agCfmMepSlmTWGroupV10v0, tmnxDot1agCfmMaGroupV10v0=tmnxDot1agCfmMaGroupV10v0, tmnxDot1agCfmMepType=tmnxDot1agCfmMepType, tmnxDot1agCfmMepDbTable=tmnxDot1agCfmMepDbTable, tmnxDot1agCfmGlobalPacketTxCount=tmnxDot1agCfmGlobalPacketTxCount, tmnxDot1agCfmMepSlmTWMacAddress=tmnxDot1agCfmMepSlmTWMacAddress, tmnxDot1agCfmStack=tmnxDot1agCfmStack, tmnxDot1agCfmMepAisInterval=tmnxDot1agCfmMepAisInterval, tmnxDot1agCfmMepCcmIgnoreTLVs=tmnxDot1agCfmMepCcmIgnoreTLVs, tmnxDot1agCfmMepSlmTWDataSize=tmnxDot1agCfmMepSlmTWDataSize, tmnxDot1agCfmMepMcstLbmRsltEntry=tmnxDot1agCfmMepMcstLbmRsltEntry, tmnxDot1agCfmV11v0Groups=tmnxDot1agCfmV11v0Groups, tmnxDot1agCfmStatsGroupV10v0=tmnxDot1agCfmStatsGroupV10v0, tmnxDot1agCfmMcLagConfigGroup=tmnxDot1agCfmMcLagConfigGroup, tmnxDot1agCfmVStackMacAddress=tmnxDot1agCfmVStackMacAddress, tmnxDot1agCfmMepEthRxAisInterval=tmnxDot1agCfmMepEthRxAisInterval, tmnxDot1agCfmPVStackTable=tmnxDot1agCfmPVStackTable, tmnxDot1agCfmMEPMgmtGroupV11v0=tmnxDot1agCfmMEPMgmtGroupV11v0, tmnxDot1agCfmVStackMepId=tmnxDot1agCfmVStackMepId, tmnxDot1agCfmMepSlmTestRsltTable=tmnxDot1agCfmMepSlmTestRsltTable, tmnxDot1agCfmMepEthTestMacAddr=tmnxDot1agCfmMepEthTestMacAddr, tmnxDot1agCfmMepLbmRemoteMepMac=tmnxDot1agCfmMepLbmRemoteMepMac, tmnxDot1agCfmStackMepId=tmnxDot1agCfmStackMepId, tmnxDot1agCfmSapMipVlanIdOrNone=tmnxDot1agCfmSapMipVlanIdOrNone, tmnxDot1agCfmSdpMipSrcMacAddress=tmnxDot1agCfmSdpMipSrcMacAddress, tmnxDot1agCfmGlobalGroupV9v0=tmnxDot1agCfmGlobalGroupV9v0, tmnxDot1agCfmNotifyObjsGroup=tmnxDot1agCfmNotifyObjsGroup, tmnxDot1agCfmMepMgmtPrimaryVid=tmnxDot1agCfmMepMgmtPrimaryVid, tmnxDot1agCfmMepSlmTWTestId=tmnxDot1agCfmMepSlmTWTestId, tmnxY1731CfmNotificationGroup=tmnxY1731CfmNotificationGroup, tmnxDot1agCfmMepDelayTestType=tmnxDot1agCfmMepDelayTestType, tmnxDot1agCfmMepLbmTestComplete=tmnxDot1agCfmMepLbmTestComplete, tmnxDot1agCfmMepSlmTestType=tmnxDot1agCfmMepSlmTestType, tmnxDot1agCfmGroups=tmnxDot1agCfmGroups, tmnxDot1agCfmMaNetEntry=tmnxDot1agCfmMaNetEntry, tmnxDot1agNotifications=tmnxDot1agNotifications, tmnxDot1agCfmMepSlmTWPriority=tmnxDot1agCfmMepSlmTWPriority, tmnxDot1agCfmPVStackVlanIdOrNone=tmnxDot1agCfmPVStackVlanIdOrNone, tmnxDot1agCfmVStackEntry=tmnxDot1agCfmVStackEntry, tmnxDot1agCfmMepSlmTWSendCount=tmnxDot1agCfmMepSlmTWSendCount, tmnxDot1agCfmMepDescription=tmnxDot1agCfmMepDescription, tmnxDot1agCfmMepEthTestRsltEntry=tmnxDot1agCfmMepEthTestRsltEntry, tmnxDot1agCfmSapMipRowStatus=tmnxDot1agCfmSapMipRowStatus, tmnxDot1agCfmMepEntry=tmnxDot1agCfmMepEntry, tmnxDot1agCfmMepCrcFailures=tmnxDot1agCfmMepCrcFailures, tmnxDot1agCfmMepSlmOWPriority=tmnxDot1agCfmMepSlmOWPriority, tmnxDot1agCfmMepSlmTWTestEntry=tmnxDot1agCfmMepSlmTWTestEntry, tmnxDot1agCfmCompResourceLimit=tmnxDot1agCfmCompResourceLimit, tmnxDot1agCfmManagementObjects=tmnxDot1agCfmManagementObjects, tmnxDot1agCfmMepLbmRxIndex=tmnxDot1agCfmMepLbmRxIndex, tmnxDot1agCfmMepSlmTWIntrvlUnits=tmnxDot1agCfmMepSlmTWIntrvlUnits, tmnxDot1agCfmCompliance=tmnxDot1agCfmCompliance, tmnxDot1agCfmMepSlmPacketLossOut=tmnxDot1agCfmMepSlmPacketLossOut, tmnxDot1agCfmMepSlmOWTestEntry=tmnxDot1agCfmMepSlmOWTestEntry, tmnxDot1agCfmMepMcLagInactive=tmnxDot1agCfmMepMcLagInactive, tmnxDot1agCfmMepSlmTWTestStatus=tmnxDot1agCfmMepSlmTWTestStatus, tmnxDot1agCfmMepMcstLbmRsltTable=tmnxDot1agCfmMepMcstLbmRsltTable, tmnxDot1agCfmMepFrameCount=tmnxDot1agCfmMepFrameCount, tmnxDot1agCfmSapMipEntry=tmnxDot1agCfmSapMipEntry, tmnxDot1agCfmSLMConfigGroup=tmnxDot1agCfmSLMConfigGroup, tmnxDot1agCfmMepFacilityIfIndex=tmnxDot1agCfmMepFacilityIfIndex, tmnxDot1agCfmMaNetHoldDownTimer=tmnxDot1agCfmMaNetHoldDownTimer, tmnxDot1agCfmSystemScalarsGroup=tmnxDot1agCfmSystemScalarsGroup, tmnxDot1agCfmMepFcltyFaultNotify=tmnxDot1agCfmMepFcltyFaultNotify, tmnxDot1agCfmVStackMaIndex=tmnxDot1agCfmVStackMaIndex, tmnxDot1agCfmPVStackifIndex=tmnxDot1agCfmPVStackifIndex, tmnxDot1agCfmPVStackMacAddress=tmnxDot1agCfmPVStackMacAddress, tmnxDot1agCfmMepMgmtServiceId=tmnxDot1agCfmMepMgmtServiceId, tmnxDot1agCfmMepDelayTestDelay=tmnxDot1agCfmMepDelayTestDelay, tmnxDot1agCfmMepGroupV10v0=tmnxDot1agCfmMepGroupV10v0, tmnxDot1agCfmMepFacilityType=tmnxDot1agCfmMepFacilityType, tmnxDot1agCfmNotificationGroup=tmnxDot1agCfmNotificationGroup, tmnxDot1agCfmGlobalPacketStats=tmnxDot1agCfmGlobalPacketStats, tmnxDot1agCfmMepEthTestThreshold=tmnxDot1agCfmMepEthTestThreshold, tmnxDot1agCfmComponentLimitEntry=tmnxDot1agCfmComponentLimitEntry, tmnxDot1agCfmCompMinorIndex=tmnxDot1agCfmCompMinorIndex, tmnxDot1agCfmMaNetTable=tmnxDot1agCfmMaNetTable, tmnxDot1agCfmMepEthTestEnable=tmnxDot1agCfmMepEthTestEnable, tmnxDot1agCfmStackMacAddress=tmnxDot1agCfmStackMacAddress, tmnxDot1agCfmMipEvaluation=tmnxDot1agCfmMipEvaluation, tmnxDot1agCfmMepSlmNotifyGroup=tmnxDot1agCfmMepSlmNotifyGroup, tmnxDot1agCfmSdpBindStackDirection=tmnxDot1agCfmSdpBindStackDirection, tmnxDot1agCfmMepGroupV7v0=tmnxDot1agCfmMepGroupV7v0, tmnxDot1agCfmSdpBindStackMacAddress=tmnxDot1agCfmSdpBindStackMacAddress, tmnxDot1agCfmMepAisMegLevel=tmnxDot1agCfmMepAisMegLevel, tmnxDot1agCfmGlobalPacketRxCount=tmnxDot1agCfmGlobalPacketRxCount, tmnxDot1agCfmSdpMipSvcId=tmnxDot1agCfmSdpMipSvcId, tmnxDot1agCfmSdpBindStackMepId=tmnxDot1agCfmSdpBindStackMepId, tmnxDot1agCfmSdpBindStackGroup=tmnxDot1agCfmSdpBindStackGroup, tmnxDot1agMIBObjs=tmnxDot1agMIBObjs, tmnxDot1agCfmGlobalPacketDiscard=tmnxDot1agCfmGlobalPacketDiscard, tmnxDot1agCfmSdpMipTable=tmnxDot1agCfmSdpMipTable, tmnxDot1agCfmMepMgmtFcltyIfIndex=tmnxDot1agCfmMepMgmtFcltyIfIndex, tmnxDot1agCfmMepSlmOWDataSize=tmnxDot1agCfmMepSlmOWDataSize, tmnxDot1agCfmGPGroupV10v0=tmnxDot1agCfmGPGroupV10v0, tmnxDot1agCfmVStackMdLevel=tmnxDot1agCfmVStackMdLevel, tmnxDot1agCfmV8v0Groups=tmnxDot1agCfmV8v0Groups, tmnxDot1agCfmMepFaultPropagation=tmnxDot1agCfmMepFaultPropagation, tmnxDot1agCfmPVStackPriVlanId=tmnxDot1agCfmPVStackPriVlanId, tmnxDot1agCfmMepTable=tmnxDot1agCfmMepTable, tmnxDot1agCfmMepDelayRsltTable=tmnxDot1agCfmMepDelayRsltTable, tmnxDot1agCfmSdpBindStackVcId=tmnxDot1agCfmSdpBindStackVcId, tmnxDot1agCfmSdpMipEntry=tmnxDot1agCfmSdpMipEntry, tmnxDot1agCfmMepVcId=tmnxDot1agCfmMepVcId, tmnxDot1agCfmMaMepListMacAddress=tmnxDot1agCfmMaMepListMacAddress, tmnxDot1agCfmSdpMipVcId=tmnxDot1agCfmSdpMipVcId, tmnxDot1agCfmMipNotifyGroup=tmnxDot1agCfmMipNotifyGroup, tmnxDot1agCfmPVStackEntry=tmnxDot1agCfmPVStackEntry, tmnxDot1agCfmMepOWDTPriority=tmnxDot1agCfmMepOWDTPriority, tmnxDot1agCfmGraceTxEnable=tmnxDot1agCfmGraceTxEnable, tmnxDot1agCfmMepSlmOWTestStatus=tmnxDot1agCfmMepSlmOWTestStatus, tmnxDot1agCfmMepSlmOWTestId=tmnxDot1agCfmMepSlmOWTestId, tmnxDot1agCfmMepSlmLastTxSeqF=tmnxDot1agCfmMepSlmLastTxSeqF, tmnxDot1agCfmStackMdLevel=tmnxDot1agCfmStackMdLevel, tmnxDot1agCfmMepSrcMacAddress=tmnxDot1agCfmMepSrcMacAddress, tmnxDot1agCfmMepSlmOWInterval=tmnxDot1agCfmMepSlmOWInterval, tmnxDot1agCfmComplianceV8v0=tmnxDot1agCfmComplianceV8v0, tmnxDot1agCfmMepCurrFailedBits=tmnxDot1agCfmMepCurrFailedBits, tmnxDot1agCfmSapMipSrcMacAddress=tmnxDot1agCfmSapMipSrcMacAddress, tmnxDot1agCfmMepCcmPaddingSize=tmnxDot1agCfmMepCcmPaddingSize, tmnxDot1agCfmCompliances=tmnxDot1agCfmCompliances, tmnxDot1agCfmMcLagStdbyInactive=tmnxDot1agCfmMcLagStdbyInactive, tmnxDot1agCfmCompMajorIndex=tmnxDot1agCfmCompMajorIndex, tmnxDot1agCfmMepSvcId=tmnxDot1agCfmMepSvcId, tmnxDot1agCfmMepGroupV9v0=tmnxDot1agCfmMepGroupV9v0, tmnxDot1agCfmV10v0Groups=tmnxDot1agCfmV10v0Groups, tmnxDot1agCfmSdpBindStackMdIndex=tmnxDot1agCfmSdpBindStackMdIndex, tmnxDot1agCfmMepSlmGroupV9v0=tmnxDot1agCfmMepSlmGroupV9v0, tmnxDot1agCfmMepEthTestPriority=tmnxDot1agCfmMepEthTestPriority, tmnxDot1agCfmMepSlmPacketUnack=tmnxDot1agCfmMepSlmPacketUnack, tmnxDot1agCfmMepControlMep=tmnxDot1agCfmMepControlMep, tmnxDot1agCfmComplianceV9v0=tmnxDot1agCfmComplianceV9v0, tmnxDot1agCfmMepSlmOWTestTable=tmnxDot1agCfmMepSlmOWTestTable, tmnxDot1agCfmMepMgmtDirection=tmnxDot1agCfmMepMgmtDirection, tmnxDot1agCfmMepTWDTMacAddress=tmnxDot1agCfmMepTWDTMacAddress, tmnxDot1agCfmMaGroupV9v0=tmnxDot1agCfmMaGroupV9v0, tmnxDot1agCfmMepEthAisTxCount=tmnxDot1agCfmMepEthAisTxCount, tmnxDot1agCfmMepDbGraceRx=tmnxDot1agCfmMepDbGraceRx, tmnxDot1agCfmMepMcastLbmGroup=tmnxDot1agCfmMepMcastLbmGroup, tmnxDot1agCfmComplianceV7v0=tmnxDot1agCfmComplianceV7v0, tmnxDot1agCfmMepSlmTWTimeout=tmnxDot1agCfmMepSlmTWTimeout, tmnxDot1agCfmMipGroupV8v0=tmnxDot1agCfmMipGroupV8v0, tmnxDot1agCfmMepOWDTThreshold=tmnxDot1agCfmMepOWDTThreshold, tmnxDot1agCfmMepSlmTestId=tmnxDot1agCfmMepSlmTestId, tmnxDot1agCfmMepMgmtTable=tmnxDot1agCfmMepMgmtTable, tmnxDot1agCfmMepSlmOWMacAddress=tmnxDot1agCfmMepSlmOWMacAddress, tmnxDot1agCfmPVStackMdLevel=tmnxDot1agCfmPVStackMdLevel, tmnxDot1agNotificationsPrefix=tmnxDot1agNotificationsPrefix, tmnxDot1agCfmMepDelayRsltEntry=tmnxDot1agCfmMepDelayRsltEntry, tmnxDot1agCfmSdpBindStackMaIndex=tmnxDot1agCfmSdpBindStackMaIndex, tmnxDot1agCfmMepDbEntry=tmnxDot1agCfmMepDbEntry, tmnxDot1agCfmMepMgmtEntry=tmnxDot1agCfmMepMgmtEntry, tmnxDot1agCfmMepEthTestRsltTable=tmnxDot1agCfmMepEthTestRsltTable, PYSNMP_MODULE_ID=timetraIEEE8021CfmMIBModule, tmnxDot1agCfmSdpBindStackSdpId=tmnxDot1agCfmSdpBindStackSdpId, tmnxDot1agCfmMepSLMTestComplete=tmnxDot1agCfmMepSLMTestComplete, tmnxDot1agCfmNotificationObjs=tmnxDot1agCfmNotificationObjs, tmnxDot1agCfmCompName=tmnxDot1agCfmCompName, tmnxDot1agCfmMepFailedBits=tmnxDot1agCfmMepFailedBits, tmnxDot1agCfmMepMgmtVcId=tmnxDot1agCfmMepMgmtVcId, tmnxDot1agCfmPVStackMepId=tmnxDot1agCfmPVStackMepId, tmnxDot1agCfmVStackDirection=tmnxDot1agCfmVStackDirection, tmnxDot1agCfmMepLbmSeqNumber=tmnxDot1agCfmMepLbmSeqNumber, tmnxDot1agCfmMaNetTotalMEPCount=tmnxDot1agCfmMaNetTotalMEPCount, tmnxDot1agCfmMepSlmPacketLossIn=tmnxDot1agCfmMepSlmPacketLossIn, tmnxDot1agCfmGlobalObjs=tmnxDot1agCfmGlobalObjs, tmnxDot1agMIBConformance=tmnxDot1agMIBConformance, tmnxDot1agCfmMepLtmTestComplete=tmnxDot1agCfmMepLtmTestComplete, tmnxDot1agCfmMepFacilityVlanId=tmnxDot1agCfmMepFacilityVlanId, tmnxDot1agCfmStackVlanIdOrNone=tmnxDot1agCfmStackVlanIdOrNone, tmnxDot1agCfmMepEthTestPattern=tmnxDot1agCfmMepEthTestPattern, tmnxDot1agCfmMepMgmtIfIndex=tmnxDot1agCfmMepMgmtIfIndex, tmnxDot1agCfmMepByteCount=tmnxDot1agCfmMepByteCount, tmnxDot1agCfmMepSlmTestRsltEntry=tmnxDot1agCfmMepSlmTestRsltEntry, tmnxDot1agCfmV7v0Groups=tmnxDot1agCfmV7v0Groups, tmnxDot1agCfmMaMepListTable=tmnxDot1agCfmMaMepListTable, tmnxDot1agCfmSdpMipSdpId=tmnxDot1agCfmSdpMipSdpId, tmnxDot1agCfmMepSlmTWInterval=tmnxDot1agCfmMepSlmTWInterval, tmnxDot1agCfmComponentLimitTable=tmnxDot1agCfmComponentLimitTable, tmnxDot1agCfmComplianceV10v0=tmnxDot1agCfmComplianceV10v0, tmnxDot1agCfmSdpBindStackMdLevel=tmnxDot1agCfmSdpBindStackMdLevel, tmnxDot1agCfmGracePeriod=tmnxDot1agCfmGracePeriod, tmnxDot1agCfmMep=tmnxDot1agCfmMep, tmnxDot1agCfmComplianceV11v0=tmnxDot1agCfmComplianceV11v0, tmnxDot1agCfmStackEntry=tmnxDot1agCfmStackEntry)
