#
# PySNMP MIB module BIANCA-BRICK-SEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-SEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, Integer32, IpAddress, ModuleIdentity, ObjectIdentity, NotificationType, Unsigned32, TimeTicks, Bits, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "Integer32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Unsigned32", "TimeTicks", "Bits", "iso", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bintecsec = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 254))
biboAdmAdminCommunity = MibScalar((1, 3, 6, 1, 4, 1, 272, 254, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmAdminCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmAdminCommunity.setDescription('The Community name used for admin access')
biboAdmReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 272, 254, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmReadCommunity.setDescription('The Community name used for read-only access.')
biboAdmWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 272, 254, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmWriteCommunity.setDescription('The Community name used for read-write access.')
biboAdmLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 272, 254, 4), )
if mibBuilder.loadTexts: biboAdmLicenseTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseTable.setDescription('This table contains the licenses, purchased for this BIANCA/BRICK. Each entry describes a license. Each license can enable one or more features of the BIANCA/BRICK, when the activation key is correct. Please Note, that a license is only valid for the BIANCA/BRICK it has been purchased for.')
biboAdmLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 254, 4, 1), ).setIndexNames((0, "BIANCA-BRICK-SEC-MIB", "biboAdmLicenseKey"))
if mibBuilder.loadTexts: biboAdmLicenseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseEntry.setDescription('')
biboAdmLicenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLicenseSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseSerialNumber.setDescription("This object specifies the serial number of the license in case of a numerical license (together with 'Mask' and 'Key').")
biboAdmLicenseMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLicenseMask.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseMask.setDescription('The LicenseMask is a bitfield, that specifies the different features enabled by the license. (only used on a numerical license).')
biboAdmLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLicenseKey.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseKey.setDescription('This object contains the activation key. A license is only valid, if the activation key is correct.')
biboAdmLicenseState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2), ("delete", 3), ("internal-ok", 4), ("internal-erase", 5), ("not-supported", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLicenseState.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseState.setDescription("To delete a license from the system, this object has to be set to delete. In case of an 'internal-ok' license the license can be erased from the modules EEPROM, if it is set to 'internal-erase'. The state will be 'not-supported' if a license refers to a feature which is not supported by the image loaded. With 'delete' it is only deleted from the main board flash memory.")
biboAdmLicenseSerialId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLicenseSerialId.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseSerialId.setDescription("This object specifies the serial id string of the license in case of string license (together with 'Key').")
biboAdmLicenseHwSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboAdmLicenseHwSerial.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseHwSerial.setDescription('This object contains the device Hardware serial number for which the license is purchased for.')
biboAdmLicenseLicType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 33, 128, 129, 130, 131, 132))).clone(namedValues=NamedValues(("ip", 1), ("capi", 2), ("bridge", 3), ("x25", 4), ("ipx", 5), ("stac", 6), ("frame-relay", 7), ("tapi", 8), ("ospf", 9), ("extended-lan", 10), ("tunneling", 11), ("taf", 12), ("extended-wan", 13), ("leased-line", 14), ("ipsec", 33), ("ethernet", 128), ("bri", 129), ("g703", 130), ("pri", 131), ("modem", 132)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboAdmLicenseLicType.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLicenseLicType.setDescription('The type of licenseable feature.')
biboAdmRadiusSecret = MibScalar((1, 3, 6, 1, 4, 1, 272, 254, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmRadiusSecret.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmRadiusSecret.setDescription('The shared secret for RADIUS access.')
biboAdmHttpPassword = MibScalar((1, 3, 6, 1, 4, 1, 272, 254, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmHttpPassword.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmHttpPassword.setDescription('The password for HTTP access.')
biboAdmLoginTable = MibTable((1, 3, 6, 1, 4, 1, 272, 254, 7), )
if mibBuilder.loadTexts: biboAdmLoginTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLoginTable.setDescription('The biboAdmLoginTable defines additional users and their passwords, and the commnd to be executed at login.')
biboAdmLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 254, 7, 1), ).setIndexNames((0, "BIANCA-BRICK-SEC-MIB", "biboAdmLoginUser"))
if mibBuilder.loadTexts: biboAdmLoginEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLoginEntry.setDescription('')
biboAdmLoginUser = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 7, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLoginUser.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLoginUser.setDescription('This is the login name.')
biboAdmLoginPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLoginPassword.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLoginPassword.setDescription('This is the user password.')
biboAdmLoginCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLoginCommand.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLoginCommand.setDescription('This is the command, which is started at login, e.g. sh, telnet. All external commands are possible.')
biboAdmLoginState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("delete", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmLoginState.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmLoginState.setDescription('The variable is used to disable or discard the entry.')
biboAdmPublicKey = MibScalar((1, 3, 6, 1, 4, 1, 272, 254, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboAdmPublicKey.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmPublicKey.setDescription('Generated public key for TAF client access')
biboAdmPrivateKey = MibScalar((1, 3, 6, 1, 4, 1, 272, 254, 11), OctetString())
if mibBuilder.loadTexts: biboAdmPrivateKey.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmPrivateKey.setDescription('')
biboAdmActMonPassword = MibScalar((1, 3, 6, 1, 4, 1, 272, 254, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboAdmActMonPassword.setStatus('mandatory')
if mibBuilder.loadTexts: biboAdmActMonPassword.setDescription('The password for Activity Monitor access.')
mibBuilder.exportSymbols("BIANCA-BRICK-SEC-MIB", enterprises=enterprises, biboAdmLicenseTable=biboAdmLicenseTable, biboAdmLoginUser=biboAdmLoginUser, biboAdmRadiusSecret=biboAdmRadiusSecret, dod=dod, biboAdmLicenseMask=biboAdmLicenseMask, private=private, biboAdmLicenseKey=biboAdmLicenseKey, biboAdmLoginPassword=biboAdmLoginPassword, bintecsec=bintecsec, biboAdmLoginEntry=biboAdmLoginEntry, biboAdmLoginCommand=biboAdmLoginCommand, biboAdmActMonPassword=biboAdmActMonPassword, biboAdmLicenseLicType=biboAdmLicenseLicType, biboAdmLoginTable=biboAdmLoginTable, biboAdmWriteCommunity=biboAdmWriteCommunity, biboAdmLicenseState=biboAdmLicenseState, biboAdmPrivateKey=biboAdmPrivateKey, biboAdmAdminCommunity=biboAdmAdminCommunity, org=org, biboAdmHttpPassword=biboAdmHttpPassword, biboAdmLicenseEntry=biboAdmLicenseEntry, biboAdmLicenseSerialId=biboAdmLicenseSerialId, biboAdmReadCommunity=biboAdmReadCommunity, biboAdmLicenseSerialNumber=biboAdmLicenseSerialNumber, biboAdmLicenseHwSerial=biboAdmLicenseHwSerial, biboAdmLoginState=biboAdmLoginState, bintec=bintec, biboAdmPublicKey=biboAdmPublicKey, internet=internet)
