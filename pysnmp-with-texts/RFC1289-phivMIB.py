#
# PySNMP MIB module RFC1289-phivMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1289-phivMIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, ModuleIdentity, Bits, mib_2, ObjectIdentity, Unsigned32, TimeTicks, MibIdentifier, IpAddress, NotificationType, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "ModuleIdentity", "Bits", "mib-2", "ObjectIdentity", "Unsigned32", "TimeTicks", "MibIdentifier", "IpAddress", "NotificationType", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
phiv = MibIdentifier((1, 3, 6, 1, 2, 1, 18))
class PhivAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class PhivCounter(Integer32):
    pass

phivSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 1))
phivManagement = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 2))
session = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 3))
end = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 4))
routing = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 5))
circuit = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 6))
ddcmp = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 7))
control = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 8))
ethernet = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 9))
counters = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 10))
adjacency = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 11))
line = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 12))
nonBroadcastLine = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 14))
area = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 15))
phivSystemState = MibScalar((1, 3, 6, 1, 2, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("shut", 3), ("restricted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivSystemState.setStatus('mandatory')
if mibBuilder.loadTexts: phivSystemState.setDescription('This represents the operational state of the executor node. The possible states are: ON Allows logical links. OFF Allows no new links, terminates existing links, and stops routing traffic through. SHUT Allows no new logical links, does not destroy existing logical links, and goes to the OFF state when all logical links are gone. RESTRICTED Allows no new incoming logical links from other nodes. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155).')
phivExecIdent = MibScalar((1, 3, 6, 1, 2, 1, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivExecIdent.setStatus('mandatory')
if mibBuilder.loadTexts: phivExecIdent.setDescription("This is a text string that describes the executor node (for example, 'Research Lab'). The string is up to 32 characters of any type.")
phivMgmtMgmtVers = MibScalar((1, 3, 6, 1, 2, 1, 18, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivMgmtMgmtVers.setStatus('mandatory')
if mibBuilder.loadTexts: phivMgmtMgmtVers.setDescription('This is the read-only Network Management Version, consisting of the version number, the Engineering Change Order (ECO) number, and the user ECO number (for example, 3.0.0). This parameter applies to the executor node only.')
phivSessionSystemName = MibScalar((1, 3, 6, 1, 2, 1, 18, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivSessionSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: phivSessionSystemName.setDescription('Name to be associated with the node identification. Only one name can be assigned to a node address or a circuit identification. No name should be used more than once in a DECnet network. Node-name is one to six upper case alphanumeric characters with at least one alpha character. A length of 0 indicates no name.')
phivSessionInTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivSessionInTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivSessionInTimer.setDescription('This value represents the maximum duration between the time a connect is received for a process at the executor node and the time that process accepts or rejects it. If the connect is not accepted or rejected by the user within the number of seconds specified, Session Control rejects it for the user. A 0 indicates no timer is running.')
phivSessionOutTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivSessionOutTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivSessionOutTimer.setDescription('This value represents the duration between the time the executor requests a connect and the time that connect is acknowledged by the destination node. If the connect is not acknowledged within the number of seconds specified, Session Control returns an error. A 0 indicates no timer is running.')
phivEndRemoteTable = MibTable((1, 3, 6, 1, 2, 1, 18, 4, 1), )
if mibBuilder.loadTexts: phivEndRemoteTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndRemoteTable.setDescription('Information about the state of sessions between the node under study and the nodes found in the table.')
phivEndRemoteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 4, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivEndRemoteHostNodeID"))
if mibBuilder.loadTexts: phivEndRemoteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndRemoteEntry.setDescription('Information about a particular remote node as seen from the end communication layer.')
phivEndRemoteHostNodeID = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 1, 1, 1), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndRemoteHostNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndRemoteHostNodeID.setDescription('This value is the address of the remote node to be evaluated.')
phivEndRemoteState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("shut", 3), ("restricted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEndRemoteState.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndRemoteState.setDescription('This represents the operational state of the remote node being evaluated. The possible states are: ON Allows logical links. OFF Allows no new links, terminates existing links, and stops routing traffic through. SHUT Allows no new logical links, does not destroy existing logical links, and goes to the OFF state when all logical links are gone. RESTRICTED Allows no new incoming logical links from other nodes. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.')
phivEndCircuitIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCircuitIndex.setDescription('A unique index value for each known circuit used to communicate with the remote node. This is the same value as phivCircuitIndex.')
phivEndActiveLinks = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndActiveLinks.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndActiveLinks.setDescription('This read-only parameter represents the number of active logical links from the executor to the destination node.')
phivEndDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndDelay.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndDelay.setDescription('This read-only parameter is the average round trip delay in seconds to the destination node. This parameter is kept on a remote node basis.')
phivEndCountTable = MibTable((1, 3, 6, 1, 2, 1, 18, 4, 2), )
if mibBuilder.loadTexts: phivEndCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountTable.setDescription('Information about the counters associated with each end system that is known to the entity. These counters reflect totals from the perspective of the executor node.')
phivEndCountEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 4, 2, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivEndCountHostNodeID"))
if mibBuilder.loadTexts: phivEndCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountEntry.setDescription('Information about a particular session between two end systems.')
phivEndCountHostNodeID = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 1), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountHostNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountHostNodeID.setDescription('This value is the address of the remote node to be evaluated.')
phivEndCountSecsLastZeroed = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 2), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountSecsLastZeroed.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountSecsLastZeroed.setDescription('This value is the number of seconds that have elapsed since the counters for the node in this table row were last set to zero. This counter is located in the network management layer, but is returned with the end system information which follows.')
phivEndCountUsrBytesRec = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 3), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountUsrBytesRec.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountUsrBytesRec.setDescription('Number of user bytes received from the target host.')
phivEndCountUsrBytesSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 4), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountUsrBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountUsrBytesSent.setDescription('Number of user bytes sent to the target host.')
phivEndUCountUsrMessRec = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 5), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndUCountUsrMessRec.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndUCountUsrMessRec.setDescription('Number of user messages received from the target host.')
phivEndCountUsrMessSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 6), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountUsrMessSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountUsrMessSent.setDescription('Number of user messages sent to the target host.')
phivEndCountTotalBytesRec = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 7), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountTotalBytesRec.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountTotalBytesRec.setDescription('Number of bytes received from the target host.')
phivEndCountTotalBytesSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 8), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountTotalBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountTotalBytesSent.setDescription('Number of bytes sent to the target host.')
phivEndCountTotalMessRec = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 9), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountTotalMessRec.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountTotalMessRec.setDescription('Number of messages received from the target host.')
phivEndCountTotalMessSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 10), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountTotalMessSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountTotalMessSent.setDescription('Number of messages sent to the target host.')
phivEndCountConnectsRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 11), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountConnectsRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountConnectsRecd.setDescription('Number of connects received from the target host.')
phivEndCountConnectsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 12), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountConnectsSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountConnectsSent.setDescription('Number of connects sent to the target host.')
phivEndCountReponseTimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 13), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountReponseTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountReponseTimeouts.setDescription('Number of response timeouts.')
phivEndCountRecdConnectResErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 4, 2, 1, 14), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndCountRecdConnectResErrs.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountRecdConnectResErrs.setDescription('Number of received connect resource errors.')
phivEndMaxLinks = MibScalar((1, 3, 6, 1, 2, 1, 18, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEndMaxLinks.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndMaxLinks.setDescription('This value represents the maximum active logical link count allowed for the executor.')
phivEndNSPVers = MibScalar((1, 3, 6, 1, 2, 1, 18, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEndNSPVers.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndNSPVers.setDescription('This read-only parameter represents the version number of the node End Communication S/W. The format is version number, ECO, and user ECO, e.g., 4.1.0')
phivEndRetransmitFactor = MibScalar((1, 3, 6, 1, 2, 1, 18, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEndRetransmitFactor.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndRetransmitFactor.setDescription('This value represents the maximum number of times the source End Communication at the executor node will restart the retransmission timer when it expires. If the number is exceeded, Session Control disconnects the logical link for the user.')
phivEndDelayFact = MibScalar((1, 3, 6, 1, 2, 1, 18, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEndDelayFact.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndDelayFact.setDescription('This is the number by which to multiply one sixteenth of the estimated round trip delay to a node to set the retransmission timer to that node.')
phivEndDelayWeight = MibScalar((1, 3, 6, 1, 2, 1, 18, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEndDelayWeight.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndDelayWeight.setDescription('This number represents the weight to apply to a current round trip delay estimate to a remote node when updating the estimated round trip delay to a node. On some systems the number must be 1 less than a power of 2 for computational efficiency.')
phivEndInactivityTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEndInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndInactivityTimer.setDescription('This value represents the maximum duration of inactivity (no data in either direction) on a logical link before the node checks to see if the logical link still works. If no activity occurs within the minimum number of seconds, End Communication generates artificial traffic to test the link (End Communication specification).')
phivEndCountZeroCount = MibScalar((1, 3, 6, 1, 2, 1, 18, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEndCountZeroCount.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndCountZeroCount.setDescription('When this value is set to 2, all of the counters in the End System Counter Table are set to zero.')
phivEndMaxLinksActive = MibScalar((1, 3, 6, 1, 2, 1, 18, 4, 10), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEndMaxLinksActive.setStatus('mandatory')
if mibBuilder.loadTexts: phivEndMaxLinksActive.setDescription('This value represents the high water mark for the number of links that were active at any one time.')
phivRouteBroadcastRouteTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteBroadcastRouteTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteBroadcastRouteTimer.setDescription('This value determines the maximum time in seconds allowed between Routing updates on Ethernet circuits. When this timer expired before a routing update occurs, a routing update is forced. With a standard calculation, Routing also uses this timer to enforce a minimum delay between routing updates.')
phivRouteBuffSize = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteBuffSize.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteBuffSize.setDescription('This parameter value determines the maximum size of a Routing message. It therefore determines the maximum size message that can be forwarded. This size includes protocol overhead down to and including the End Communication layer, plus a constant value of 6. (This value of 6 is included to provide compatibility with the parameter definition in Phase III, which included the Routing overhead.) It does not include Routing or Data link overhead (except for the constant value of 6). There is one buffer size for all circuits. NOTE: The BUFFER SIZE defines the maximum size messages that the Routing layer can forward. The SEGMENT BUFFER SIZE (defined below) defines the maximum size messages that the End Communication layer can transmit or receive. The SEGMENT BUFFER SIZE is always less than or equal to the BUFFER SIZE. Normally the two parameters will be equal. They may be different to allow the network manager to alter buffer sizes on all nodes without interruption of service. They both include an extra 6 bytes for compatibility with Phase III.')
phivRouteRoutingVers = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteRoutingVers.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteRoutingVers.setDescription("This read-only parameter identifies the executor node's Routing version number. The format is version number, ECO, and user ECO, e.g., 4.1.0")
phivRouteMaxAddr = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxAddr.setDescription("This value represents the largest node number and, therefore, number of nodes that can be known about by the executor node's home area.")
phivRouteMaxBdcastNonRouters = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxBdcastNonRouters.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxBdcastNonRouters.setDescription('This value represents the maximum total number of nonrouters the executor node can have on its Ethernet circuits.')
phivRouteMaxBdcastRouters = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxBdcastRouters.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxBdcastRouters.setDescription('This value represents the maximum total number of routers the executor node can have on its Ethernet circuits.')
phivRouteMaxBuffs = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxBuffs.setDescription('This value represents the maximum number of transmit buffers that Routing may use for all circuits.')
phivRouteMaxCircuits = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxCircuits.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxCircuits.setDescription('This value represents the maximum number of Routing circuits that the executor node can know about.')
phivRouteMaxCost = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxCost.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxCost.setDescription("This value represents the maximum total path cost allowed from the executor to any node within an area. The path cost is the sum of the circuit costs along a path between two nodes. This parameter defines the point where the executor node's Routing routing decision algorithm declares another node unreachable because the cost of the least costly path to the other node is excessive. For correct operation, this parameter must not be less than the maximum path cost of the network.")
phivRouteMaxHops = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxHops.setDescription("This value represents the maximum number of routing hops allowable from the executor to any other reachable node within an area. (A hop is the logical distance over a circuit between two adjacent nodes.) This parameter defines the point where the executor node's Routing routing decision algorithm declares another node unreachable because the length of the shortest path between the two nodes is too long. For correct operation, this parameter must not be less than the network diameter. (The network diameter is the reachability distance between the two nodes of the network having the greatest reachability distance, where reachability distance is the length the shortest path between a given pair of nodes.)")
phivRouteMaxVisits = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxVisits.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxVisits.setDescription('This value represents the maximum number of nodes a message coming into the executor node can have visited. If the message is not for this node and the MAXIMUM VISITS number is exceeded, the message is discarded. The MAXIMUM VISITS parameter defines the point where the packet lifetime control algorithm discards a packet that has traversed too many nodes. For correct operation, this parameter must not be less than the maximum path length of the network. (The maximum path length is the routing distance between the two nodes of the network having the greatest routing distance, where routing distance is the length of the least costly path between a given pair of nodes.)')
phivRouteRoutingTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteRoutingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteRoutingTimer.setDescription('This value determines the maximum time in seconds allowed between Routing updates on non-Ethernet circuits. When this timer expires before a routing update occurs, a routing update is forced.')
phivRouteSegBuffSize = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteSegBuffSize.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteSegBuffSize.setDescription('This parameter value determines the maximum size of an end-to-end segment. The size is a decimal integer in the range 1-65535. This size is in bytes. This size includes protocol overhead down to and including the End Communication layer, plus a constant value of 6. (This value of 6 is included to provide compatibility with the BUFFER SIZE parameter definition.) It does not include Routing or Data link overhead (except for the constant value of 6).')
phivRouteType = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routing-III", 1), ("nonrouting-III", 2), ("area", 3), ("routing-IV", 4), ("nonrouting-IV", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteType.setDescription('This parameter indicates the type of the executor node. The node-type is one of the following: routing-III nonrouting-III routing-IV ronrouting-IV area A routing node has full routing capability. A nonrouting node contains a subset of the Routing routing modules. The III and IV indicate the DNA phase of the node. Nonrouting nodes can deliver and receive packets to and from any node, but cannot route packets from other nodes through to other nodes. An area node routes between areas. Refer to the Routing specification for details. For adjacent nodes, this is a read-only parameter that indicates the type of the reachable adjacent node. NOTE: The ROUTING-III and NONROUTING-III values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155)')
phivRouteCountAgedPktLoss = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 15), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteCountAgedPktLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteCountAgedPktLoss.setDescription('Number of aged packet losses.')
phivRouteCountNodeUnrPktLoss = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 16), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteCountNodeUnrPktLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteCountNodeUnrPktLoss.setDescription('Number of node unreachable packet losses.')
phivRouteCountOutRngePktLoss = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 17), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteCountOutRngePktLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteCountOutRngePktLoss.setDescription('Number of node out-of-range packet losses.')
phivRouteCountOverSzePktLoss = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 18), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteCountOverSzePktLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteCountOverSzePktLoss.setDescription('Number of Oversized packet losses.')
phivRouteCountPacketFmtErr = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 19), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteCountPacketFmtErr.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteCountPacketFmtErr.setDescription('Number of packet format errors.')
phivRouteCountPtlRteUpdtLoss = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 20), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteCountPtlRteUpdtLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteCountPtlRteUpdtLoss.setDescription('Number of partial routing update losses.')
phivRouteCountVerifReject = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 21), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteCountVerifReject.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteCountVerifReject.setDescription('Number of verification rejects.')
phivLevel1RouteTable = MibTable((1, 3, 6, 1, 2, 1, 18, 5, 22), )
if mibBuilder.loadTexts: phivLevel1RouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivLevel1RouteTable.setDescription('Information about the currently known DECnet Phase IV Routes.')
phivLevel1RouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 5, 22, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivLevel1RouteNodeAddr"))
if mibBuilder.loadTexts: phivLevel1RouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivLevel1RouteEntry.setDescription('Information about the currently known DECnet Phase IV Routes.')
phivLevel1RouteNodeAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 5, 22, 1, 1), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLevel1RouteNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivLevel1RouteNodeAddr.setDescription('This value is the address of the node about which routing information is contained in this level 1 routing table.')
phivLevel1RouteCircuitIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 5, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLevel1RouteCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivLevel1RouteCircuitIndex.setDescription('A unique index value for each known circuit. This is the index to the circuit state table and is the same value as phivCircuitIndex.')
phivLevel1RouteCost = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 5, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLevel1RouteCost.setStatus('mandatory')
if mibBuilder.loadTexts: phivLevel1RouteCost.setDescription('This read-only parameter represents the total cost over the current path to the destination node. Cost is a positive integer value associated with using a circuit. Routing routes messages (data) along the path between two nodes with the smallest cost. COST is kept on a remote node basis.')
phivLevel1RouteHops = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 5, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLevel1RouteHops.setStatus('mandatory')
if mibBuilder.loadTexts: phivLevel1RouteHops.setDescription('This read-only parameter represents the number of hops over to a destination node. A hop is Routing value representing the logical distance between two nodes in a network. HOPS is kept on a remote node basis.')
phivLevel1RouteNextNode = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 5, 22, 1, 5), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLevel1RouteNextNode.setStatus('mandatory')
if mibBuilder.loadTexts: phivLevel1RouteNextNode.setDescription('This read-only value indicates the next node on the circuit used to get to the node under scrutiny (next hop).')
phivRouteCountZeroCount = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteCountZeroCount.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteCountZeroCount.setDescription('When this value is set to 2, the following objects are set to Zero: phivRouteCountAgedPktLoss, phivRouteCountNodeUnrPktLoss, phivRouteCountOutRngePktLoss, phivRouteCountOverSzePktLoss, phivRouteCountPacketFmtErr, phivRouteCountPtlRteUpdtLoss, and phivRouteCountVerifReject.')
phivRouteSystemAddr = MibScalar((1, 3, 6, 1, 2, 1, 18, 5, 24), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivRouteSystemAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteSystemAddr.setDescription('DECnet Phase IV node address.')
phivCircuitParametersTable = MibTable((1, 3, 6, 1, 2, 1, 18, 6, 1), )
if mibBuilder.loadTexts: phivCircuitParametersTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitParametersTable.setDescription('Information about the parameters associated with all circuits currently known.')
phivCircuitParametersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 6, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivCircuitIndex"))
if mibBuilder.loadTexts: phivCircuitParametersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitParametersEntry.setDescription('Parameters information about all circuits currently known.')
phivCircuitIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitIndex.setDescription('A unique index value for each known circuit.')
phivCircuitLineIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitLineIndex.setDescription('The line on which this circuit is active. This is the same as the IfIndex.')
phivCircuitCommonState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("service", 3), ("cleared", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitCommonState.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCommonState.setDescription("This value represents the circuit's Network Management operational state. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.")
phivCircuitCommonSubState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("starting", 1), ("reflecting", 2), ("looping", 3), ("loading", 4), ("dumping", 5), ("triggering", 6), ("autoservice", 7), ("autoloading", 8), ("autodumping", 9), ("autotriggering", 10), ("synchronizing", 11), ("failed", 12), ("running", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCommonSubState.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCommonSubState.setDescription("This value represents the circuit's Network Management operational and service substate. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.")
phivCircuitCommonName = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCommonName.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCommonName.setDescription('The name of the circuit entry in the table, for example, SVA-0 or in a level 2 router ASYNC-8 or ETHER-1).')
phivCircuitExecRecallTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExecRecallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExecRecallTimer.setDescription('This parameter represents the minimum number of seconds to wait before restarting the circuit. A value of 0 indicates not timer is running.')
phivCircuitCommonType = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15))).clone(namedValues=NamedValues(("ddcmp-point", 1), ("ddcmp-control", 2), ("ddcmp-tributary", 3), ("x25", 4), ("ddcmp-dmc", 5), ("ethernet", 6), ("ci", 7), ("qp2-dte20", 8), ("bisync", 9), ("other", 14), ("fddi", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCommonType.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCommonType.setDescription('Represents the type of the circuit. For X.25 circuits, the value must be set to X25. For DDCMP and Ethernet circuits it is read only and is the same value as the protocol of the associated line. NOTE: Values 1 - 5 are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.')
phivCircuitService = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitService.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitService.setDescription('This value indicates whether or not Network Management allows service operations on a circuit. The values for service-control are as follows: ENABLED SERVICE state and/or service functions are allowed. DISABLED SERVICE state and/or service functions are not allowed. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.')
phivCircuitExecCost = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExecCost.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExecCost.setDescription('This value represents the routing cost of the circuit. Routing sends messages along the path between two nodes having the smallest cost.')
phivCircuitExecHelloTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExecHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExecHelloTimer.setDescription('This value determines the frequency of Routing Hello messages sent to the adjacent node on the circuit.')
phivCircuitCountTable = MibTable((1, 3, 6, 1, 2, 1, 18, 6, 2), )
if mibBuilder.loadTexts: phivCircuitCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTable.setDescription('Information about the counters associated with all circuits currently known.')
phivCircuitCountEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 6, 2, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivCircuitIndex"))
if mibBuilder.loadTexts: phivCircuitCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountEntry.setDescription('Counter information about all circuits currently known')
phivCircuitCountSecLastZeroed = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 1), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountSecLastZeroed.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountSecLastZeroed.setDescription('Number of seconds since the circuit counters for this circuit were last zeroed.')
phivCircuitCountTermPacketsRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 2), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTermPacketsRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTermPacketsRecd.setDescription('Number of terminating packets received on this circuit.')
phivCircuitCountOriginPackSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 3), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountOriginPackSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountOriginPackSent.setDescription('Number of originating packets sent on this circuit.')
phivCircuitCountTermCongLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 4), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTermCongLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTermCongLoss.setDescription('Number of terminating congestion losses on this circuit.')
phivCircuitCountCorruptLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 5), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountCorruptLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountCorruptLoss.setDescription('Number of corruption losses on this circuit.')
phivCircuitCountTransitPksRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 6), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTransitPksRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTransitPksRecd.setDescription('Number of Transit packets received on this circuit.')
phivCircuitCountTransitPkSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 7), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTransitPkSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTransitPkSent.setDescription('Number of transit packets sent on this circuit.')
phivCircuitCountTransitCongestLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 8), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTransitCongestLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTransitCongestLoss.setDescription('Number of transit congestion losses on this circuit.')
phivCircuitCountCircuitDown = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 9), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountCircuitDown.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountCircuitDown.setDescription('Number of circuit downs on this circuit.')
phivCircuitCountInitFailure = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 10), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountInitFailure.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountInitFailure.setDescription('Number of Initialization failures on this circuit.')
phivCircuitCountAdjDown = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 11), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountAdjDown.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountAdjDown.setDescription('This counter indicates the number of adjacency losses that result from any of the following: Node listener timeout Invalid data received at node listener Unexpected control (initialization or verification) message received Routing message received with a checksum error Node identification from a routing message or a Hello message that is not the one expected Hello message received indicating that connectivity became one-way Adjacency idled.')
phivCircuitCountPeakAdj = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 12), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountPeakAdj.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountPeakAdj.setDescription('This counter indicates the maximum number of nodes that are up on the circuit.')
phivCircuitCountBytesRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 13), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountBytesRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountBytesRecd.setDescription('Number of bytes received on this circuit.')
phivCircuitCountBytesSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 14), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountBytesSent.setDescription('Number of bytes sent on this circuit.')
phivCircuitCountDataBlocksRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 15), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountDataBlocksRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountDataBlocksRecd.setDescription('Number of data blocks received on this circuit.')
phivCircuitCountDataBlocksSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 16), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountDataBlocksSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountDataBlocksSent.setDescription('Number of data blocks sent on this circuit.')
phivCircuitCountUsrBuffUnav = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 17), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountUsrBuffUnav.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountUsrBuffUnav.setDescription('Number of user buffer unavailable errors.')
phivCircuitOrigQueueLimit = MibScalar((1, 3, 6, 1, 2, 1, 18, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitOrigQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitOrigQueueLimit.setDescription('This parameter indicates the maximum number of originating packets that may be outstanding on this circuit. This does not include route-thru traffic.')
phivCircuitCountZeroCount = MibScalar((1, 3, 6, 1, 2, 1, 18, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitCountZeroCount.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountZeroCount.setDescription('When this value is set to 2, all of the counters in the Circuit Counter Table are set to zero.')
phivDDCMPCircuitParametersTable = MibTable((1, 3, 6, 1, 2, 1, 18, 7, 1), )
if mibBuilder.loadTexts: phivDDCMPCircuitParametersTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitParametersTable.setDescription('Information about DDCMP circuit parameters.')
phivDDCMPCircuitParametersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 7, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivDDCMPCircuitIndex"))
if mibBuilder.loadTexts: phivDDCMPCircuitParametersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitParametersEntry.setDescription('Parameters information about DDCMP circuits currently known.')
phivDDCMPCircuitIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitIndex.setDescription('A unique index value for each known DDCMP circuit. This is the same value as phivCircuitIndex.')
phivDDCMPCircuitAdjNodeAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitAdjNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitAdjNodeAddr.setDescription('The address of the adjacent node.')
phivDDCMPCircuitTributary = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitTributary.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitTributary.setDescription('This value represents the Data Link physical tributary address of the circuit.')
phivDDCMPCircuitCountTable = MibTable((1, 3, 6, 1, 2, 1, 18, 7, 2), )
if mibBuilder.loadTexts: phivDDCMPCircuitCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitCountTable.setDescription('Information about the DDCMP counters associated with all circuits currently known.')
phivDDCMPCircuitCountEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 7, 2, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivCircuitIndex"))
if mibBuilder.loadTexts: phivDDCMPCircuitCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitCountEntry.setDescription('Counter information about DDCMP circuits now known')
phivDDCMPCircuitErrorsInbd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 2, 1, 1), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitErrorsInbd.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitErrorsInbd.setDescription('Number of Data errors inbound.')
phivDDCMPCircuitErrorsOutbd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 2, 1, 2), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitErrorsOutbd.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitErrorsOutbd.setDescription('Number of outbound data errors.')
phivDDCMPCircuitRmteReplyTimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 2, 1, 3), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitRmteReplyTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitRmteReplyTimeouts.setDescription('Number of remote reply timeouts.')
phivDDCMPCircuitLocalReplyTimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 2, 1, 4), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitLocalReplyTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitLocalReplyTimeouts.setDescription('Number of local Reply timeouts.')
phivDDCMPCircuitRmteBuffErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 2, 1, 5), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitRmteBuffErrors.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitRmteBuffErrors.setDescription('Number of remote reply time out errors.')
phivDDCMPCircuitLocalBuffErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 2, 1, 6), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitLocalBuffErrors.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitLocalBuffErrors.setDescription('Number of local buffer errors.')
phivDDCMPCircuitSelectIntervalsElap = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 2, 1, 7), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitSelectIntervalsElap.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitSelectIntervalsElap.setDescription('Selection intervals that have elapsed.')
phivDDCMPCircuitSelectTimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 2, 1, 8), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPCircuitSelectTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPCircuitSelectTimeouts.setDescription('Number of selection timeouts.')
phivDDCMPLineCountTable = MibTable((1, 3, 6, 1, 2, 1, 18, 7, 3), )
if mibBuilder.loadTexts: phivDDCMPLineCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPLineCountTable.setDescription('The DDCMP Line Count Table.')
phivDDCMPLineCountEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 7, 3, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivDDCMPLineCountIndex"))
if mibBuilder.loadTexts: phivDDCMPLineCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPLineCountEntry.setDescription('There is one entry in the table for each line.')
phivDDCMPLineCountIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPLineCountIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPLineCountIndex.setDescription("The line on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of phivLineIndex. This value is the IfIndex.")
phivDDCMPLineCountDataErrsIn = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 3, 1, 2), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPLineCountDataErrsIn.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPLineCountDataErrsIn.setDescription('Number of data errors inbound.')
phivDDCMPLineCountRmteStationErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 3, 1, 3), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPLineCountRmteStationErrs.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPLineCountRmteStationErrs.setDescription('Number of remote station errors.')
phivDDCMPLineCountLocalStationErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 7, 3, 1, 4), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivDDCMPLineCountLocalStationErrs.setStatus('mandatory')
if mibBuilder.loadTexts: phivDDCMPLineCountLocalStationErrs.setDescription('Number of local station errors.')
phivControlSchedTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 65535)).clone(200)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivControlSchedTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlSchedTimer.setDescription('This value represents the number of milliseconds between recalculation of tributary polling priorities.')
phivControlDeadTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivControlDeadTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlDeadTimer.setDescription('This value represents the number of milliseconds between polls of one of the set of dead tributaries.')
phivControlDelayTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivControlDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlDelayTimer.setDescription('This value represents the minimum number of milliseconds to delay between polls. The delay timer limits the effect of a very fast control station on slow tributaries.')
phivControlStreamTimer = MibScalar((1, 3, 6, 1, 2, 1, 18, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(6000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivControlStreamTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlStreamTimer.setDescription('This value represents the number of milliseconds a tributary or a half duplex remote station is allowed to hold the line. NOTE: This parameter can also be applied to half-duplex lines of type DDCMP POINT.')
phivControlParametersTable = MibTable((1, 3, 6, 1, 2, 1, 18, 8, 5), )
if mibBuilder.loadTexts: phivControlParametersTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlParametersTable.setDescription('Information about control circuit parameters.')
phivControlParametersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 8, 5, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivControlCircuitIndex"))
if mibBuilder.loadTexts: phivControlParametersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlParametersEntry.setDescription('Parameters information about control circuits currently known.')
phivControlCircuitIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivControlCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlCircuitIndex.setDescription('A unique index value for each known multirpoint control circuit. This is the same value as phivCircuitIndex.')
phivControlBabbleTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(6000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlBabbleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlBabbleTimer.setDescription('This value represents the number of milliseconds that a selected tributary or remote half-duplex station is allowed to transmit.')
phivControlMaxBuffs = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlMaxBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlMaxBuffs.setDescription('This value represents the maximum number of buffers the tributary can use from a common buffer pool. If not set, there is no common buffer pool and buffers are explicitly supplied by the higher level. Count is a decimal integer in the range 1-254.')
phivControlMaxTransmits = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlMaxTransmits.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlMaxTransmits.setDescription('This value represents the maximum number of data messages that can be transmitted at one time. Count is a decimal integer in the range 1-255.')
phivControlDyingBase = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlDyingBase.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlDyingBase.setDescription('This value represents the base priority to which a tributary is reset each time it has been polled. A separate base can be set for each of the indicated polling states. Base is a decimal integer in the range 0-255. If not set, the defaults are: active, 255; inactive, 0; and dying, 0.')
phivControlDyingIncrement = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlDyingIncrement.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlDyingIncrement.setDescription('This value represents the increment added to the tributary priority each time the scheduling timer expires. If not set, the defaults are: active, 0; inactive, 64; and dying, 16.')
phivControlDeadThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlDeadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlDeadThreshold.setDescription('This value represents the number of times to poll the active, inactive, or dying tributary before changing its polling state to dead because of receive timeouts. Count is a decimal integer in the range 0-255.')
phivControlDyingThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlDyingThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlDyingThreshold.setDescription('This value represents the number of times to poll the active or inactive tributary before changing its polling state to dying because of receive timeouts. Count is a decimal integer in the range 0-255.')
phivControlInactTreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlInactTreshold.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlInactTreshold.setDescription('This value represents the number of times to poll the active tributary before changing its polling state to inactive because of no data response. Count is a decimal integer in the range 0-255.')
phivControlPollingState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("automatic", 1), ("active", 2), ("inactive", 3), ("dying", 4), ("dead", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlPollingState.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlPollingState.setDescription("This value represents the state of the tributary relative to the multipoint polling algorithm. If not set the default is AUTOMATIC. The possible states are: AUTOMATIC The tributary's state is allowed to vary according to the operation of the polling algorithm. ACTIVE/INACTIVE/DYING/DEAD The tributary is locked in the specified state. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.")
phivControlPollingSubState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("dying", 3), ("dead", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivControlPollingSubState.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlPollingSubState.setDescription("This value represents the tributary's state as determined by the polling algorithm. This applies only when the polling state is AUTOMATIC and is read-only to Network Management. Polling-substate is one of ACTIVE, INACTIVE, DYING, or DEAD. It is displayed as a tag on the polling state, for example: AUTOMATIC-INACTIVE.")
phivControlTransTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 8, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivControlTransTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivControlTransTimer.setDescription('This value represents the number of milliseconds to delay between data message transmits. Milliseconds is a decimal integer in the range 0-65535.')
phivEthLinkParametersTable = MibTable((1, 3, 6, 1, 2, 1, 18, 9, 1), )
if mibBuilder.loadTexts: phivEthLinkParametersTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivEthLinkParametersTable.setDescription('Information about ethernet link parameters.')
phivEthLinkParametersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 9, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivEthLinkIndex"))
if mibBuilder.loadTexts: phivEthLinkParametersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivEthLinkParametersEntry.setDescription('Parameter information about ethernet links currently known.')
phivEthLinkIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEthLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivEthLinkIndex.setDescription('The circuit over which this links information is collected. This is the same as phivCircuitIndex.')
phivEthDesigRouterNodeAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 9, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEthDesigRouterNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivEthDesigRouterNodeAddr.setDescription('This value is the address of the designated router.')
phivEthMaxRouters = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEthMaxRouters.setStatus('mandatory')
if mibBuilder.loadTexts: phivEthMaxRouters.setDescription('This parameter is the maximum number of routers (other than the executor itself) allowed on the circuit by Routing for circuits that are owned by the executor node.')
phivEthRouterPri = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivEthRouterPri.setStatus('mandatory')
if mibBuilder.loadTexts: phivEthRouterPri.setDescription('This parameter is the priority that this router is to have in the selection of designated router for the circuit on circuits that are owned by the executor node.')
phivEthHardwareAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 9, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivEthHardwareAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivEthHardwareAddr.setDescription('This read-only parameter is the address that is associated with the line device hardware as seen by the DECnet Software. This value is not the same as ifPhysAddress.')
phivCountersCountTable = MibTable((1, 3, 6, 1, 2, 1, 18, 10, 1), )
if mibBuilder.loadTexts: phivCountersCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountTable.setDescription('Information about ethernet link counters.')
phivCountersCountEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 10, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivCountersIndex"))
if mibBuilder.loadTexts: phivCountersCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountEntry.setDescription('Counter information about ethernet links currently known..')
phivCountersIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersIndex.setDescription('The interface to which these counters apply. This is the same interface as identified by the same value of phivLineIndex. This value is the IfIndex.')
phivCountersCountBytesRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 2), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountBytesRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountBytesRecd.setDescription('Number of bytes received over this link.')
phivCountersCountBytesSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 3), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountBytesSent.setDescription('Number of bytes sent over this link.')
phivCountersCountDataBlocksRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 4), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountDataBlocksRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountDataBlocksRecd.setDescription('Number of data blocks received over this link.')
phivCountersCountDataBlocksSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 5), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountDataBlocksSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountDataBlocksSent.setDescription('Number of data blocks sent over this link.')
phivCountersCountEthUsrBuffUnav = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 6), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountEthUsrBuffUnav.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountEthUsrBuffUnav.setDescription('Number of user buffer unavailable errors over this link.')
phivCountersCountMcastBytesRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 7), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountMcastBytesRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountMcastBytesRecd.setDescription('Number of multicast bytes received over this link.')
phivCountersCountDataBlksRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 8), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountDataBlksRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountDataBlksRecd.setDescription('Number of data blocks received over this link.')
phivCountersCountDataBlksSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 9), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountDataBlksSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountDataBlksSent.setDescription('Number of data blocks sent over this link.')
phivCountersCountMcastBlksRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 10), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountMcastBlksRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountMcastBlksRecd.setDescription('Number of multicast blocks received over this link.')
phivCountersCountBlksSentDef = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 11), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountBlksSentDef.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountBlksSentDef.setDescription('Number of blocks sent, initially deferred over this link.')
phivCountersCountBlksSentSingleCol = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 12), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountBlksSentSingleCol.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountBlksSentSingleCol.setDescription('Number of blocks sent, single collision over this link.')
phivCountersCountBlksSentMultCol = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 13), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountBlksSentMultCol.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountBlksSentMultCol.setDescription('Number of blocks sent, multiple collisions over this link.')
phivCountersCountSendFailure = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 14), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountSendFailure.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountSendFailure.setDescription('Number of send failures over this link.')
phivCountersCountCollDetectFailure = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 15), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountCollDetectFailure.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountCollDetectFailure.setDescription('Number of collision detect check failures over this link.')
phivCountersCountReceiveFailure = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 16), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountReceiveFailure.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountReceiveFailure.setDescription('Number of receive failures over this link.')
phivCountersCountUnrecFrameDest = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 17), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountUnrecFrameDest.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountUnrecFrameDest.setDescription('Number of unrecognized frame destinations over this link.')
phivCountersCountDataOver = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 18), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountDataOver.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountDataOver.setDescription('Number of data overruns over this link.')
phivCountersCountSysBuffUnav = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 19), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountSysBuffUnav.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountSysBuffUnav.setDescription('Number of system buffer unavailables over this link.')
phivCountersCountUsrBuffUnav = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 10, 1, 1, 20), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCountersCountUsrBuffUnav.setStatus('mandatory')
if mibBuilder.loadTexts: phivCountersCountUsrBuffUnav.setDescription('Number of user buffer unavailables.')
phivAdjTable = MibTable((1, 3, 6, 1, 2, 1, 18, 11, 1), )
if mibBuilder.loadTexts: phivAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjTable.setDescription('The Adjacency Table.')
phivAdjEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 11, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivAdjCircuitIndex"))
if mibBuilder.loadTexts: phivAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjEntry.setDescription('There is one entry in the table for each adjacency.')
phivAdjCircuitIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjCircuitIndex.setDescription('A unique index value for each known circuit.')
phivAdjNodeAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjNodeAddr.setDescription('The address of the adjacent node.')
phivAdjBlockSize = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjBlockSize.setDescription('This read-only parameter is the block size that was negotiated with the adjacent Routing layer during Routing initialization over a particular circuit. It includes the routing header, but excludes the data link header. This parameter is qualified by ADJACENT NODE.')
phivAdjListenTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjListenTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjListenTimer.setDescription('This value determines the maximum number of seconds allowed to elapse before Routing receives some message (either a Hello message or a user message) from the adjacent node on the circuit. It was agreed during Routing initialization with the adjacent Routing layer. This parameter is qualified by ADJACENT NODE.')
phivAdjCircuitEtherServPhysAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjCircuitEtherServPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjCircuitEtherServPhysAddr.setDescription('This parameter indicates the Ethernet physical address of an adjacent node that is being serviced on this circuit. This parameter is a qualifier for SERVICE SUBSTATE.')
phivAdjType = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routing-III", 1), ("nonrouting-III", 2), ("area", 3), ("routing-IV", 4), ("nonrouting-IV", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjType.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjType.setDescription('This parameter indicates the type of adjacency. For adjacent nodes, this is a read-only parameter that indicates the type of the reachable adjacent node. NOTE: The routing-III and nonrouting-III values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155)')
phivAdjState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("run", 3), ("circuit-rejected", 4), ("data-link-start", 5), ("routing-layer-initialize", 6), ("routing-layer-verify", 7), ("routing-layer-complete", 8), ("off", 9), ("halt", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjState.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjState.setDescription('This value indicates the state of a router adjacency. On adjacencies over a circuit of type (phivCircuitCommonType) Ethernet, CI, or FDDI, with an adjacent node of type (phivAdjType) ROUTING IV or AREA, this variable is the state of the Ethernet Initialization Layer for this adjacency, and can have values INITIALIZING or UP. (See Section 9.1.1 of DECnet Phase IV Routing Layer Functional Specification.) On adjacencies over a circuit of type (phivCircuitCommonType) Ethernet, CI, or FDDI, with an adjacent node of type (phivAdjType) NONROUTING IV, this variable will always take on the value UP. On adjacencies over a circuit of type (phivCircuitCommonType) DDCMP POINT, DDCMP CONTROL, DDCMP TRIBUTARY, DDCMP DMC, or X.25, this variable is the state of the Routing Layer Initialization Circuit State. (See section 7.3, ibid.) It can have values between RUN and HALT. On adjacencies over a circuit of type (phivCircuitCommonType) OTHER, this variable may be used in a manner consistent with the Initialization Layer used on that circuit.')
phivAdjPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjPriority.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjPriority.setDescription('Priority assigned by the adjacent node for this circuit.')
phivAdjExecListenTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAdjExecListenTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivAdjExecListenTimer.setDescription('This read-only value determines the maximum number of seconds allowed to elapse before Routing receives some message (either a Hello message or a user message) from the adjacent node on the circuit. It was agreed during Routing initialization with the adjacent Routing layer.')
phivLineTable = MibTable((1, 3, 6, 1, 2, 1, 18, 12, 1), )
if mibBuilder.loadTexts: phivLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineTable.setDescription('The Line Table.')
phivLineEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 12, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivLineIndex"))
if mibBuilder.loadTexts: phivLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineEntry.setDescription('There is one entry in the table for each line.')
phivLineIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineIndex.setDescription("The line on which this entry's equivalence is effective. This is the same as the IfIndex.")
phivLineName = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineName.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineName.setDescription('The name of the line on this row of the table.')
phivLineState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("service", 3), ("cleared", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineState.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineState.setDescription('This value represents Network Management operational state. NOTE that these values are incremented by one compared to the standard DECnet values.')
phivLineSubstate = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("starting", 1), ("reflecting", 2), ("looping", 3), ("loading", 4), ("dumping", 5), ("triggering", 6), ("auto-service", 7), ("auto-loading", 8), ("auto-dumping", 9), ("auto-triggering", 10), ("synchronizing", 11), ("failed", 12), ("running", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineSubstate.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineSubstate.setDescription("This value represents the line's read-only Network Management substate. NOTE that these values are incremented by one compared to the standard DECnet values.")
phivLineService = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("starting", 1), ("reflecting", 2), ("looping", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineService.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineService.setDescription("This value represents the line's read-only Network Management service. NOTE that these values are incremented by one compared to the standard DECnet values and OTHER is a new addition.")
phivLineDevice = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineDevice.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineDevice.setDescription('This value represents the Physical Link device to be used on the line.')
phivLineReceiveBuffs = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineReceiveBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineReceiveBuffs.setDescription('This value represents the number of receive buffers reserved for the line. It is a decimal number in the range 0-65535. 0 is supported for those vendors that do not reserve buffers on a per line basis and use a pool of buffers that can be used by any line.')
phivLineProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15))).clone(namedValues=NamedValues(("ddcmp-point", 1), ("ddcmp-control", 2), ("ddcmp-tributary", 3), ("reserved", 4), ("ddcmp-dmc", 5), ("lapb", 6), ("ethernet", 7), ("ci", 8), ("qp2", 9), ("other", 14), ("fddi", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineProtocol.setDescription('This value represents the protocol used on the line device. Note that these values are incremented by one compared to the standard DECnet values.')
phivLineServiceTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineServiceTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineServiceTimer.setDescription('This value represents the amount of time in milliseconds allowed to elapse before a Data Link receive request completes while doing service operations.')
phivLineMaxBlock = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivLineMaxBlock.setStatus('mandatory')
if mibBuilder.loadTexts: phivLineMaxBlock.setDescription('This value represents the Data Link maximum block size on the line.')
phivNonBroadcastTable = MibTable((1, 3, 6, 1, 2, 1, 18, 14, 1), )
if mibBuilder.loadTexts: phivNonBroadcastTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivNonBroadcastTable.setDescription('The Non Broadcast Table.')
phivNonBroadcastEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 14, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivNonBroadcastIndex"))
if mibBuilder.loadTexts: phivNonBroadcastEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivNonBroadcastEntry.setDescription('There is one entry in the table for each Non Broadcast line.')
phivNonBroadcastIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivNonBroadcastIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivNonBroadcastIndex.setDescription("The Non Broadcast line on which this entry's equivalence is effective. This is the same value as the IfIndex.")
phivNonBroadcastController = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("loopback", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivNonBroadcastController.setStatus('mandatory')
if mibBuilder.loadTexts: phivNonBroadcastController.setDescription('This value represents the Physical Link hardware controller mode for the line device. The values for controller-mode are: NORMAL For normal controller operating mode. LOOPBACK For software controllable loopback of the controller. On those devices that can support this mode, it causes all transmitted messages to be looped back from within the controller itself. This is accomplished without any manual intervention other than the setting of this parameter value. OTHER indicates function is not supported Note that these values are incremented by one compared to the standard DECnet values.')
phivNonBroadcastDuplex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivNonBroadcastDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: phivNonBroadcastDuplex.setDescription('This value represents the Physical Link hardware duplex mode of the line device. The possible modes are: FULL Full-duplex HALF Half-duplex Note that these values are incremented by one compared to the standard DECnet values.')
phivNonBroadcastClock = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivNonBroadcastClock.setStatus('mandatory')
if mibBuilder.loadTexts: phivNonBroadcastClock.setDescription('This value represents the Physical Link hardware clock mode for the line device. The values for clock-mode are: INTERNAL For software controllable loopback use of the clock. On those devices that can support this mode, it causes the device to supply a clock signal such that a transmitted messages can be looped back from outside the device. This may require manual intervention other than the setting of this parameter value. For example, the operator may have to connect a loopback plug in place of the normal line. EXTERNAL For normal clock operating mode, where the clock signal is supplied externally to the controller. Note that these values are incremented by one compared to the standard DECnet values.')
phivNonBroadcastRetransmitTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivNonBroadcastRetransmitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivNonBroadcastRetransmitTimer.setDescription('This value represents number of milliseconds before the Data Link retransmits a block on the line. On half-duplex lines, this parameter is the select timer.')
phivAreaTable = MibTable((1, 3, 6, 1, 2, 1, 18, 15, 1), )
if mibBuilder.loadTexts: phivAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaTable.setDescription('Table of information kept on all areas known to this unit.')
phivAreaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 15, 1, 1), ).setIndexNames((0, "RFC1289-phivMIB", "phivAreaNum"))
if mibBuilder.loadTexts: phivAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaEntry.setDescription('The area routing information.')
phivAreaNum = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAreaNum.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaNum.setDescription('This value indicates the area number of this entry.')
phivAreaState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("reachable", 4), ("unreachable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAreaState.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaState.setDescription('This value indicates the state of the area')
phivAreaCost = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 15, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAreaCost.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaCost.setDescription('The total cost over the current path to the destination area. Cost is a value associated with using a circuit. Routing routes messages (data) along the path between 2 areas with the smallest cost.')
phivAreaHops = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAreaHops.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaHops.setDescription('The number of hops to a destination area. A hop is the routing value representing the logical distance between two areas in network.')
phivAreaNextNode = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 15, 1, 1, 5), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAreaNextNode.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaNextNode.setDescription('The next node on the circuit used to get to the area under scrutiny.')
phivAreaCircuitIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 15, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivAreaCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaCircuitIndex.setDescription('A unique index value for each known circuit.')
phivAreaMaxCost = MibScalar((1, 3, 6, 1, 2, 1, 18, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivAreaMaxCost.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaMaxCost.setDescription('This value represents the maximum total path cost allowed from the executor to any other level 2 routing node. The AREA MAXIMUM COST number is decimal in the range 1-1022. This parameter is only applicable if the executor node is of type AREA.')
phivAreaMaxHops = MibScalar((1, 3, 6, 1, 2, 1, 18, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivAreaMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: phivAreaMaxHops.setDescription('This value represents the maximum number of routing hops allowable from the executor to any other level 2 routing node. This parameter is only applicable if the executor node is of type AREA.')
phivRouteMaxArea = MibScalar((1, 3, 6, 1, 2, 1, 18, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivRouteMaxArea.setStatus('mandatory')
if mibBuilder.loadTexts: phivRouteMaxArea.setDescription("This value represents the largest area number and, therefore, number of areas that can be known about by the executor node's Routing. This parameter is only applicable if the executor node is of type AREA.")
mibBuilder.exportSymbols("RFC1289-phivMIB", phivCountersCountDataBlocksSent=phivCountersCountDataBlocksSent, phivEndCountReponseTimeouts=phivEndCountReponseTimeouts, phivRouteMaxBdcastRouters=phivRouteMaxBdcastRouters, phivEndCountUsrMessSent=phivEndCountUsrMessSent, phivLineProtocol=phivLineProtocol, phivEthDesigRouterNodeAddr=phivEthDesigRouterNodeAddr, line=line, phivEndCountUsrBytesRec=phivEndCountUsrBytesRec, phiv=phiv, phivEndCountUsrBytesSent=phivEndCountUsrBytesSent, phivDDCMPCircuitSelectIntervalsElap=phivDDCMPCircuitSelectIntervalsElap, phivCircuitCountPeakAdj=phivCircuitCountPeakAdj, phivSessionOutTimer=phivSessionOutTimer, phivControlDyingIncrement=phivControlDyingIncrement, phivNonBroadcastClock=phivNonBroadcastClock, phivNonBroadcastIndex=phivNonBroadcastIndex, phivEndNSPVers=phivEndNSPVers, phivRouteRoutingVers=phivRouteRoutingVers, end=end, phivLineDevice=phivLineDevice, phivAreaCost=phivAreaCost, phivAreaMaxHops=phivAreaMaxHops, phivDDCMPCircuitParametersTable=phivDDCMPCircuitParametersTable, phivEthMaxRouters=phivEthMaxRouters, phivCountersCountDataOver=phivCountersCountDataOver, session=session, phivRouteRoutingTimer=phivRouteRoutingTimer, phivAreaMaxCost=phivAreaMaxCost, phivCircuitCountOriginPackSent=phivCircuitCountOriginPackSent, phivRouteCountOutRngePktLoss=phivRouteCountOutRngePktLoss, phivEndUCountUsrMessRec=phivEndUCountUsrMessRec, phivCountersCountBlksSentMultCol=phivCountersCountBlksSentMultCol, phivCircuitCountBytesRecd=phivCircuitCountBytesRecd, phivAdjNodeAddr=phivAdjNodeAddr, PhivAddr=PhivAddr, phivCircuitExecHelloTimer=phivCircuitExecHelloTimer, phivCircuitCountTermCongLoss=phivCircuitCountTermCongLoss, phivCountersCountDataBlksSent=phivCountersCountDataBlksSent, phivEndCountConnectsSent=phivEndCountConnectsSent, phivEndCountEntry=phivEndCountEntry, phivLineState=phivLineState, phivCircuitCommonType=phivCircuitCommonType, phivControlDeadTimer=phivControlDeadTimer, phivNonBroadcastRetransmitTimer=phivNonBroadcastRetransmitTimer, phivNonBroadcastController=phivNonBroadcastController, phivDDCMPLineCountDataErrsIn=phivDDCMPLineCountDataErrsIn, phivCountersCountTable=phivCountersCountTable, phivDDCMPCircuitParametersEntry=phivDDCMPCircuitParametersEntry, phivCircuitCommonSubState=phivCircuitCommonSubState, phivDDCMPCircuitAdjNodeAddr=phivDDCMPCircuitAdjNodeAddr, phivRouteBroadcastRouteTimer=phivRouteBroadcastRouteTimer, phivDDCMPCircuitLocalReplyTimeouts=phivDDCMPCircuitLocalReplyTimeouts, phivControlPollingState=phivControlPollingState, phivLineReceiveBuffs=phivLineReceiveBuffs, phivCircuitCountTable=phivCircuitCountTable, phivAreaNextNode=phivAreaNextNode, phivDDCMPCircuitRmteReplyTimeouts=phivDDCMPCircuitRmteReplyTimeouts, counters=counters, phivRouteBuffSize=phivRouteBuffSize, phivSystemState=phivSystemState, phivDDCMPCircuitRmteBuffErrors=phivDDCMPCircuitRmteBuffErrors, phivControlDeadThreshold=phivControlDeadThreshold, phivLineTable=phivLineTable, phivCircuitExecCost=phivCircuitExecCost, phivControlMaxTransmits=phivControlMaxTransmits, phivNonBroadcastTable=phivNonBroadcastTable, phivControlCircuitIndex=phivControlCircuitIndex, phivControlBabbleTimer=phivControlBabbleTimer, phivCircuitCountUsrBuffUnav=phivCircuitCountUsrBuffUnav, phivDDCMPCircuitTributary=phivDDCMPCircuitTributary, phivCountersIndex=phivCountersIndex, phivAreaState=phivAreaState, phivCircuitIndex=phivCircuitIndex, phivSystem=phivSystem, phivEndCountSecsLastZeroed=phivEndCountSecsLastZeroed, phivEthRouterPri=phivEthRouterPri, phivCircuitCountAdjDown=phivCircuitCountAdjDown, phivCountersCountSendFailure=phivCountersCountSendFailure, phivLevel1RouteEntry=phivLevel1RouteEntry, phivEndCountTotalBytesRec=phivEndCountTotalBytesRec, phivCountersCountDataBlocksRecd=phivCountersCountDataBlocksRecd, phivEndRemoteState=phivEndRemoteState, phivControlParametersEntry=phivControlParametersEntry, phivEndDelayWeight=phivEndDelayWeight, phivCountersCountUsrBuffUnav=phivCountersCountUsrBuffUnav, phivLineIndex=phivLineIndex, phivCountersCountReceiveFailure=phivCountersCountReceiveFailure, phivCircuitCountBytesSent=phivCircuitCountBytesSent, phivCountersCountSysBuffUnav=phivCountersCountSysBuffUnav, phivEndRemoteTable=phivEndRemoteTable, phivCountersCountDataBlksRecd=phivCountersCountDataBlksRecd, phivCountersCountBytesSent=phivCountersCountBytesSent, phivCircuitCommonName=phivCircuitCommonName, phivCircuitCountZeroCount=phivCircuitCountZeroCount, phivCircuitParametersEntry=phivCircuitParametersEntry, phivAreaEntry=phivAreaEntry, phivDDCMPCircuitSelectTimeouts=phivDDCMPCircuitSelectTimeouts, phivAdjExecListenTimer=phivAdjExecListenTimer, phivDDCMPCircuitLocalBuffErrors=phivDDCMPCircuitLocalBuffErrors, phivControlParametersTable=phivControlParametersTable, phivControlPollingSubState=phivControlPollingSubState, phivRouteMaxCost=phivRouteMaxCost, phivEndRetransmitFactor=phivEndRetransmitFactor, phivRouteMaxArea=phivRouteMaxArea, phivDDCMPCircuitCountTable=phivDDCMPCircuitCountTable, phivEthHardwareAddr=phivEthHardwareAddr, phivAreaTable=phivAreaTable, phivEndCountTotalBytesSent=phivEndCountTotalBytesSent, phivDDCMPCircuitErrorsOutbd=phivDDCMPCircuitErrorsOutbd, PhivCounter=PhivCounter, phivEndRemoteEntry=phivEndRemoteEntry, phivEthLinkParametersEntry=phivEthLinkParametersEntry, phivRouteMaxBuffs=phivRouteMaxBuffs, phivEndDelay=phivEndDelay, phivDDCMPLineCountEntry=phivDDCMPLineCountEntry, phivLineEntry=phivLineEntry, phivRouteSystemAddr=phivRouteSystemAddr, phivLineMaxBlock=phivLineMaxBlock, adjacency=adjacency, phivEndCountZeroCount=phivEndCountZeroCount, phivDDCMPLineCountIndex=phivDDCMPLineCountIndex, phivCountersCountBlksSentDef=phivCountersCountBlksSentDef, phivLineSubstate=phivLineSubstate, phivAreaHops=phivAreaHops, ddcmp=ddcmp, phivRouteCountPacketFmtErr=phivRouteCountPacketFmtErr, phivCircuitCountInitFailure=phivCircuitCountInitFailure, phivAdjTable=phivAdjTable, phivEndDelayFact=phivEndDelayFact, phivMgmtMgmtVers=phivMgmtMgmtVers, phivExecIdent=phivExecIdent, phivDDCMPLineCountTable=phivDDCMPLineCountTable, phivSessionInTimer=phivSessionInTimer, phivAdjListenTimer=phivAdjListenTimer, phivCircuitCountSecLastZeroed=phivCircuitCountSecLastZeroed, phivCircuitCommonState=phivCircuitCommonState, phivControlMaxBuffs=phivControlMaxBuffs, phivEndCountTable=phivEndCountTable, phivRouteCountPtlRteUpdtLoss=phivRouteCountPtlRteUpdtLoss, phivEndRemoteHostNodeID=phivEndRemoteHostNodeID, phivEndCountTotalMessSent=phivEndCountTotalMessSent, phivLineServiceTimer=phivLineServiceTimer, phivSessionSystemName=phivSessionSystemName, phivAdjState=phivAdjState, phivControlStreamTimer=phivControlStreamTimer, phivCircuitCountCorruptLoss=phivCircuitCountCorruptLoss, phivEndActiveLinks=phivEndActiveLinks, phivRouteCountAgedPktLoss=phivRouteCountAgedPktLoss, phivCircuitCountTransitCongestLoss=phivCircuitCountTransitCongestLoss, ethernet=ethernet, nonBroadcastLine=nonBroadcastLine, phivCountersCountBlksSentSingleCol=phivCountersCountBlksSentSingleCol, phivRouteMaxCircuits=phivRouteMaxCircuits, phivLevel1RouteNodeAddr=phivLevel1RouteNodeAddr, phivCircuitCountDataBlocksRecd=phivCircuitCountDataBlocksRecd, phivRouteSegBuffSize=phivRouteSegBuffSize, phivEthLinkIndex=phivEthLinkIndex, phivControlDelayTimer=phivControlDelayTimer, phivCountersCountEthUsrBuffUnav=phivCountersCountEthUsrBuffUnav, phivAdjCircuitIndex=phivAdjCircuitIndex, phivCircuitLineIndex=phivCircuitLineIndex, phivRouteMaxBdcastNonRouters=phivRouteMaxBdcastNonRouters, phivRouteCountNodeUnrPktLoss=phivRouteCountNodeUnrPktLoss, phivCircuitCountDataBlocksSent=phivCircuitCountDataBlocksSent, phivCircuitCountEntry=phivCircuitCountEntry, phivEndCircuitIndex=phivEndCircuitIndex, phivCircuitParametersTable=phivCircuitParametersTable, phivDDCMPLineCountLocalStationErrs=phivDDCMPLineCountLocalStationErrs, phivEndCountTotalMessRec=phivEndCountTotalMessRec, phivCountersCountMcastBytesRecd=phivCountersCountMcastBytesRecd, phivCountersCountCollDetectFailure=phivCountersCountCollDetectFailure, phivControlInactTreshold=phivControlInactTreshold, phivControlDyingThreshold=phivControlDyingThreshold, phivAdjEntry=phivAdjEntry, phivAdjBlockSize=phivAdjBlockSize, phivCountersCountMcastBlksRecd=phivCountersCountMcastBlksRecd, phivDDCMPLineCountRmteStationErrs=phivDDCMPLineCountRmteStationErrs, phivAdjCircuitEtherServPhysAddr=phivAdjCircuitEtherServPhysAddr, phivControlSchedTimer=phivControlSchedTimer, phivLineService=phivLineService, phivRouteType=phivRouteType, phivDDCMPCircuitCountEntry=phivDDCMPCircuitCountEntry, phivEndMaxLinksActive=phivEndMaxLinksActive, phivCountersCountUnrecFrameDest=phivCountersCountUnrecFrameDest, phivNonBroadcastDuplex=phivNonBroadcastDuplex, phivManagement=phivManagement, phivLevel1RouteNextNode=phivLevel1RouteNextNode, phivCircuitCountTransitPkSent=phivCircuitCountTransitPkSent, phivRouteMaxAddr=phivRouteMaxAddr, phivAreaCircuitIndex=phivAreaCircuitIndex, phivLevel1RouteCircuitIndex=phivLevel1RouteCircuitIndex, phivCircuitCountTermPacketsRecd=phivCircuitCountTermPacketsRecd, phivCountersCountEntry=phivCountersCountEntry, phivEndMaxLinks=phivEndMaxLinks, area=area, phivCircuitCountCircuitDown=phivCircuitCountCircuitDown, phivRouteCountOverSzePktLoss=phivRouteCountOverSzePktLoss, phivRouteMaxHops=phivRouteMaxHops, phivControlTransTimer=phivControlTransTimer, phivControlDyingBase=phivControlDyingBase, phivRouteCountZeroCount=phivRouteCountZeroCount, phivLevel1RouteTable=phivLevel1RouteTable, phivAdjType=phivAdjType, phivRouteCountVerifReject=phivRouteCountVerifReject, phivDDCMPCircuitIndex=phivDDCMPCircuitIndex, phivNonBroadcastEntry=phivNonBroadcastEntry, phivCountersCountBytesRecd=phivCountersCountBytesRecd, phivEndCountConnectsRecd=phivEndCountConnectsRecd, phivAdjPriority=phivAdjPriority, circuit=circuit, control=control, phivEndInactivityTimer=phivEndInactivityTimer, phivLevel1RouteCost=phivLevel1RouteCost, phivCircuitExecRecallTimer=phivCircuitExecRecallTimer, phivCircuitService=phivCircuitService, phivEndCountRecdConnectResErrs=phivEndCountRecdConnectResErrs, phivLineName=phivLineName, phivCircuitOrigQueueLimit=phivCircuitOrigQueueLimit, phivCircuitCountTransitPksRecd=phivCircuitCountTransitPksRecd, phivEthLinkParametersTable=phivEthLinkParametersTable, phivAreaNum=phivAreaNum, routing=routing, phivDDCMPCircuitErrorsInbd=phivDDCMPCircuitErrorsInbd, phivLevel1RouteHops=phivLevel1RouteHops, phivRouteMaxVisits=phivRouteMaxVisits, phivEndCountHostNodeID=phivEndCountHostNodeID)
