#
# PySNMP MIB module XYLAN-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
MacAddress, BridgeId, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress", "BridgeId", "Timeout")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, Counter32, iso, IpAddress, Bits, Gauge32, ModuleIdentity, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "Counter32", "iso", "IpAddress", "Bits", "Gauge32", "ModuleIdentity", "Counter64", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanVlanArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanVlanArch")
XylanPortFuncCodes, = mibBuilder.importSymbols("XYLAN-PORT-MIB", "XylanPortFuncCodes")
vLanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 1))
vIPRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 2))
vIPXRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 3))
vBrdgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 4))
vStpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 5))
vRipInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 7))
vSr = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 8))
vTrunking = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 9))
vAutoTracker = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 10))
atvIPRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 11))
atvIPXRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 12))
v80210 = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 13))
vDBr = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 14))
v8021Q = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 15))
vDupMac = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 16))
vPmap = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 17))
class XylanVlanAdminStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("disable", 1), ("enable", 2), ("delete", 3), ("create", 4), ("modify", 5))

class XylanVlanOperStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inactive", 1), ("active", 2))

class XylanVlanModes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("other", 2), ("standard", 3), ("atmCIP", 4), ("frRouter", 5))

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

vLanCurrentNumber = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanCurrentNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vLanCurrentNumber.setDescription('The current instance of Virtual LAN which corresponds to vLanNumber in object type vLanEntry. All the Bridging, Spanning Tree, and interface parameters refered thereafter will be referenced from this instance only. Default value upon the OmniSwitch power up is 1. It must be set to the desired value before any access to the rest of the virtual LAN system.')
vLanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2), )
if mibBuilder.loadTexts: vLanTable.setStatus('mandatory')
if mibBuilder.loadTexts: vLanTable.setDescription('A list of Virtual LAN instances in this physical OmniSwitch.')
vLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: vLanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vLanEntry.setDescription('A VLAN entry.')
vLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vLanNumber.setDescription('The VLAN number identifying this instance. Valid range from 1 to 65535.')
vLanBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanBridgeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vLanBridgeAddress.setDescription('The MAC address used by the instance of VLAN which specified in vLanCurrentNumber when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this VLAN. However it is only required to be unique. When concatenated with vStpPriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol.')
vLanBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("transparent-only", 3), ("sourceroute-only", 4), ("srt", 5), ("not-supported", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanBridgeType.setStatus('deprecated')
if mibBuilder.loadTexts: vLanBridgeType.setDescription('Indicates what type of bridging this VLAN can perform. If a VLAN is actually performing a certain type of bridging this will be indicated by entries in the port table for the given type.')
vLanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanDescription.setStatus('mandatory')
if mibBuilder.loadTexts: vLanDescription.setDescription('Textual description of the VLAN instance.')
vLanAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 5), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vLanAdmStatus.setDescription('The administrative status which can be set by configuration. Disable(1) will disable ALL vports that are connected to this VLAN, enable(2) will enable ALL ports on this VLAN, delete(3) will dettach and delete the ports/routers AND remove the VLAN.')
vLanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 6), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vLanOperStatus.setDescription('Provide operating status of a particular VLAN environment.')
vLanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 7), XylanVlanModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanMode.setStatus('mandatory')
if mibBuilder.loadTexts: vLanMode.setDescription('Provides special operating mode setup and status. Currently this object is used to specify weather the VLAN supports the standard or ATM CIP connections.')
vLanFloodOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanFloodOverride.setStatus('mandatory')
if mibBuilder.loadTexts: vLanFloodOverride.setDescription('Provides the flood limit value for all virtual ports that belong to the specied VLAN. The number is given in bytes per second. -1 and 0 have a special meaning. -1 means use the default or configured flood limit for each virtual port that belongs to the specified VLAN. 0 disables flood limiting on all virtual ports that belong to the specifed VLAN.')
vLanRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vLanRouterAddress.setDescription("The user-configured MAC address used by the the VLAN's router port (IP / IPX). If this value has not been configured, the value returned is zero and this VLAN's router port will use a factory provided default value. The address should be specified in canonical order.")
vLanMobileGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanMobileGroup.setStatus('mandatory')
if mibBuilder.loadTexts: vLanMobileGroup.setDescription('If set to enabled, makes this a mobile group. If set to disabled, makes this a non-mobile gropu.')
vLanAuthGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanAuthGroup.setStatus('mandatory')
if mibBuilder.loadTexts: vLanAuthGroup.setDescription('If set to enable, makes this a authenticated group. If set to disable, makes this a non-authenticated group. For it to be set to enable, the group should be a mobile group.')
vLanAuthGroupProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanAuthGroupProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vLanAuthGroupProtocol.setDescription('If a NULL string is returned as the value, this object is not applicable to that group. The contents of the string can interpreted based on the first byte. if the first byte is 1, the protocol is IP ( for all encaps ). 2, the protocol is IPX 3, the protocol is DECNET 4, the protocol is APPLETALK 5, the protocol is specified as an Ether-Type value with the next two bytes indicating the ether-type value, for e.g banyan vines ether-type will be specified as 08 0B AD 6, the protocol is specified using dsap and ssap values with the next two bytes giving the dsap and ssap value respectively, for e.g for banyan vines llc encap, it would look like 09 BC BC. 7, the protocol is specified using snap header with the next 5 bytes indicating the snap header for that protocol. For e.g if banyan vines snap has to be specified, it would look like, 0A 00 00 00 80 C4. FF, for all protocols.')
vLanStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanStpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vLanStpStatus.setDescription('Indicates status of spanning tree for the current VLAN.')
vLanBrdgTpExtendedAgeingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanBrdgTpExtendedAgeingTime.setStatus('mandatory')
if mibBuilder.loadTexts: vLanBrdgTpExtendedAgeingTime.setDescription('The AutoTracker extended ageing timer. This value indicates how long the switch will remember the mac address and its associated vlan information. The default value is 1200 secs. This means that the mac information will be remembered for (vLanBrdgTpExtendedAgeingTime - vBrdgTpAgingTime) seconds after the mac is aged out. This value must be set to a value greater than or equal to vBrdgTpAgingTime.')
vLanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vLanPriority.setDescription('This is the priority of the given VLAN. It can be any one level from 0 to 7 with 0 being the lowest and 7 being the highest')
vLanNextFreeNumber = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanNextFreeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vLanNextFreeNumber.setDescription('This is the next unused VLAN number. Typically this will be used to create a new VLAN with the next highest number.')
vIPRouterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1), )
if mibBuilder.loadTexts: vIPRouterTable.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterTable.setDescription('A list of Virtual Router instances in this physical OmniSwitch.')
vIPRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vIPRouterVLan"))
if mibBuilder.loadTexts: vIPRouterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterEntry.setDescription('A VLAN entry.')
vIPRouterVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterVLan.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterVLan.setDescription('VLAN ID for this vIPRouterEntry instance.')
vIPRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterProtocol.setDescription('The routing protocol(s) for this virtual router port. Each IP router port can carry one or more routing protocols. This will be represented by the logical ORing of each protocol number. Which are: ipOther(1), ipRip(2), ipEgp(4), ipGgp(8), ipHello(16), ipIs-is(32), ipEs-is(64), ipCiscoIgrp(128), ipBbnSpfIgp(256), ipOigp(512)')
vIPRouterNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterNetAddress.setDescription('The IP network address for this virtual bridge instance for the purpose of allowing access from the external network management system.')
vIPRouterSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterSubNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterSubNetMask.setDescription('The IP network subnet mask for this virtual bridge instance for the purpose of allowing access from the external network management system.')
vIPRouterBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterBcastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterBcastAddress.setDescription('The IP broadcast address for this virtual bridge instance for the purpose of allowing access from the external network management system.')
vIPRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterDescription.setStatus('optional')
if mibBuilder.loadTexts: vIPRouterDescription.setDescription('Textual description of the router instance.')
vIPRouterAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 7), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterAdmStatus.setDescription("The particular routing environment can be enable(2) or disable(1) (or delete (3)) upon user's request.")
vIPRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 8), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vIPRouterOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterOperStatus.setDescription('Provide operating status of a particular router envirnment.')
vIPRouterFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ethernet-2", 1), ("ethernet-802-3", 2), ("fddi", 3), ("token-ring", 4), ("token-ring-source-routed", 5), ("atm-1483", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterFramingType.setDescription('Provides the ability to set the outbound frame type for IP traffic. The default frame type is Ethernet 2. If the frame type is incompatible with the transmitting media, appropriate translation will be performed at egress.')
vIPRouterRipConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("deaf", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRipConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRipConfigMode.setDescription("RIP's operational mode. 'silent' means that RIP listens for routing updates but does not send them. 'deaf' means that RIP sends routing updates but not listen to them. 'active' means that RIP both sends and receives routing updates, and 'inactive' means that RIP is not operational on the given virtual LAN. The default is 'simple'.")
class VIPRouterRelayServType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("vIPRouterRelayBootp", 1), ("vIPRouterRelayNBNS", 2), ("vIPRouterRelayNBDD", 3), ("vIPRouterRelayGen1", 4), ("vIPRouterRelayGen2", 5), ("vIPRouterRelayGen3", 6), ("vIPRouterRelayGen4", 7), ("vIPRouterRelayGen5", 8))

vIPRouterRelayTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2), )
if mibBuilder.loadTexts: vIPRouterRelayTable.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRelayTable.setDescription(' A list of UDP Relay Service instances.')
vIPRouterRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vIPRouterRelayService"))
if mibBuilder.loadTexts: vIPRouterRelayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRelayEntry.setDescription('A UDP Relay Service entry.')
vIPRouterRelayService = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 1), VIPRouterRelayServType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vIPRouterRelayService.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRelayService.setDescription('This specifies the UDP Relay Service to be forwarded.')
vIPRouterRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayMode.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRelayMode.setDescription("This controls whether the internal UDP Relay service is enabled or disabled. When enabled, the service will forward packets to a specified server (or specified broadcast address.) or VLAN. Note that for BOOTP/DHCP service, unless the relay's next hop ip address (vIPRouterRelayForwAddr) is set to a valid value, it will not possible to enable the relay. For other services, a VLAN to forwared to (vIPRouterRelayForwVlan in vIPRouterRelayForwTable) or a next hop ip address must be set. The mode definitions are as follows: 1 - enabled 2 - configureRequest 3 - underConfiguration 4 - disabled A manager will set the state to configureRequest(2) before attempting to configure any other parameters for a particular UPD Service. The agent will then set the state to underConfiguration(3). When in the underConfiguration(3) state, a UDP service is not completely configured and will remain in this state until the management station is finished configuring and sets the state to either enabled(1) or disabled(4). A manager is restricted to changing the state of an entry in the following ways: config under To: valid Request config invalid From: valid OK NO OK OK configRequest N/A N/A N/A N/A underConfig OK NO OK OK invalid NO OK NO OK")
vIPRouterRelayNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRelayNextHop.setDescription("This sets the relay's forwarding address. It can either be set to a distinct IP address (e.g. the address of a server), to an IP broadcast address or a VLAN.")
vIPRouterRelayParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayParam1.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRelayParam1.setDescription("This sets the BOOTP/DHCP relay's maximum hops forwarding limit. If a BOOT/DHCP frame arrives with hopcount greater than or equal to vIPRouterRelayParam1, it will be dropped. For BOOTP/DHCP the legal range is 1..16. For Generic services, this sets the port number to be forwarded. The legal range is -1..65535 with -1 indicating the unset state.")
vIPRouterRelayParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayParam2.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRelayParam2.setDescription("This sets the BOOTP/DHCP relay's forwarding delay and is only used by the BOOTP/DHCP service. For other services it is ignored. It is typically set as seconds, but the value is totally client dependent. The relay will not forward frames until client frames have 'secs' field set to at least the value of vIPRouterRelayParam2.")
vIPRouterRelayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayDescription.setStatus('mandatory')
if mibBuilder.loadTexts: vIPRouterRelayDescription.setDescription('This sets the service description for generic services. For other services, the description is fixed and may only be read.')
vIPXRouterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1), )
if mibBuilder.loadTexts: vIPXRouterTable.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXRouterTable.setDescription('A list of Virtual Router instances in this physical OmniSwitch.')
vIPXRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vIPXRouterVLan"))
if mibBuilder.loadTexts: vIPXRouterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXRouterEntry.setDescription('A VLAN entry.')
vIPXRouterVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterVLan.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXRouterVLan.setDescription('VLAN ID for this vIPXRouterEntry instance.')
vIPXRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXRouterProtocol.setDescription('The routing protocol(s) for this virtual router port. Each IPX router port can carry one or more routing protocols. This will be represented by the logical ORing of each protocol number. Which are: ipxNone(1), ipxRipOnly(2), ipxRipAndSap(3), ipxTriggered(4)')
vIPXRouterNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXRouterNetAddress.setDescription('The IPX network address for this virtual bridge.')
vIPXRouterFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ethernet-2", 1), ("ethernet-802-3-llc", 2), ("ethernet-802-3-snap", 3), ("ethernet-802-3-raw", 4), ("fddi-snap", 5), ("fddi-snap-sr", 6), ("fddi-llc", 7), ("fddi-llc-sr", 8), ("token-ring-snap", 9), ("token-ring-snap-sr", 10), ("token-ring-llc", 11), ("token-ring-llc-sr", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXRouterFramingType.setDescription('Provides the ability to set the outbound frame type for IPX traffic. The default frame type is 802.2 Novell Raw. If the frame type is incompatible with the transmitting media, appropriate translation will be performed at egress.')
vIPXRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterDescription.setStatus('optional')
if mibBuilder.loadTexts: vIPXRouterDescription.setDescription('Textual description of the router instance.')
vIPXRouterAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 6), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXRouterAdmStatus.setDescription("The particular routing environment can be enabled(2) or disabled(1) upon user's request.")
vIPXRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 7), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vIPXRouterOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXRouterOperStatus.setDescription('Provide operating status of a particular router environment.')
vIPXSrcRteType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("are", 1), ("ste", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXSrcRteType.setStatus('mandatory')
if mibBuilder.loadTexts: vIPXSrcRteType.setDescription('Provide the ability to set the type of source routing broadcasts between AllRoutesExplorer(0) and SpanningTreeExplorer(1).')
vBrdgTpLearnEntryDiscards = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpLearnEntryDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpLearnEntryDiscards.setDescription('The total number of Forwarding Database entries, which have been or would have been learnt, but have been discarded due to a lack of space to store them in the Forwarding Database. If this counter is increasing, it indicates that the Forwarding Database is regularly becoming full (a condition which has unpleasant performance effects on the subnetwork). If this counter has a significant value but is not presently increasing, it indicates that the problem has been occurring but is not persistent.')
vBrdgTpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgTpAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information. 802.1D-1990 recommends a default of 300 seconds.')
vBrdgTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3), )
if mibBuilder.loadTexts: vBrdgTpFdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function within its VLAN in determining how to propagate a received frame.')
vBrdgTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vBrdgTpFdbGroupId"), (0, "XYLAN-VLAN-MIB", "vBrdgTpFdbAddress"))
if mibBuilder.loadTexts: vBrdgTpFdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the VLAN bridge has some forwarding and/or filtering information.')
vBrdgTpFdbGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbGroupId.setDescription('The GroupId for this bridge.')
vBrdgTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbAddress.setDescription('A unicast MAC address for which the VLAN bridge has forwarding and/or filtering information.')
vBrdgTpFdbRcvPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortSlot.setDescription('The slot number of the port that vBrdgTpFdbAddress is received.')
vBrdgTpFdbRcvPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortIF.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortIF.setDescription('The on-board interface number of the port that vBrdgTpFdbAddress is received.')
vBrdgTpFdbRcvPortFuncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 5), XylanPortFuncCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortFuncTyp.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortFuncTyp.setDescription('The service type of the port that vBrdgTpFdbAddress is received.')
vBrdgTpFdbRcvPortFuncTypInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortFuncTypInst.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortFuncTypInst.setDescription('The service type instance of the port that vBrdgTpFdbAddress is received.')
vBrdgTpFdbRcvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbRcvStatus.setDescription('The status of this entry. Xylan does not support other(1) and self(4). The meanings of the values are: invalid(2) : this entry is no longer valid, but has not yet been flushed from the table. learned(3) : this entry has been learned. mgmt(5) : this entry is configured as a static entry.')
vBrdgTpFdbRcvVLANMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvVLANMembership.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbRcvVLANMembership.setDescription('The Auto-Tracker VLAN membership for this device. Each bit that is set in this objects 32 bit value indicates that the device is part of the VLAN given by that bits position.')
vBrdgTpFdbDupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbDupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbDupStatus.setDescription('The variable indicates if vBrdgTpFdbAddress is a duplicate Mac.')
vBrdgTpFdbLastSeenTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbLastSeenTime.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpFdbLastSeenTime.setDescription('The time since, the specific unicast MAC address for which the VLAN bridge has forwarding information was last seen.')
vBrdgStaticTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4), )
if mibBuilder.loadTexts: vBrdgStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgStaticTable.setDescription('A table contains source addresses which can be configured to stay permanent (not aging out) in the Forwarding table.')
vBrdgStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vBrdgStaticAddress"))
if mibBuilder.loadTexts: vBrdgStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgStaticEntry.setDescription('Information about a specific unicast MAC address for which the VLAN bridge has VLAN information.')
vBrdgStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgStaticAddress.setDescription('The MAC address which the static status applies.')
vBrdgStaticPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgStaticPortSlot.setDescription('The slot number of the port that vBrdgStaticAddress applies. Entering this entry allows the MAC address to set in this port. If this entry is provided, vBrdgStaticPortIF, vBrdgStaticPortFuncTyp and vBrdgStaticPortFuncTypInst must also be set.')
vBrdgStaticPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticPortIF.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgStaticPortIF.setDescription('The on-board interface of the port that vBrdgStaticAddress applies. Entering this entry allows the MAC address to set in this port. If this entry is set, vBrdgStaticPortSlot, vBrdgStaticPortFuncTyp and vBrdgStaticPortFuncTypInst must also be set.')
vBrdgStaticPortFuncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 4), XylanPortFuncCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticPortFuncTyp.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgStaticPortFuncTyp.setDescription('The service type of the port that vBrdgStaticAddress applies. Entering this entry allows the MAC address to set in this port. If this entry is set, vBrdgStaticPortSlot, vBrdgStaticPortIF and vBrdgStaticPortFuncTypInst must also be set.')
vBrdgStaticPortFuncTypInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticPortFuncTypInst.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgStaticPortFuncTypInst.setDescription('The service type instance of the port that vBrdgStaticAddress applies. Entering this entry allows the MAC address to set in this port. If this entry is set, vBrdgStaticPortSlot, vBrdgStaticPortIF and vBrdgStaticPortFuncTyp must also be set.')
vBrdgStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgStaticStatus.setDescription('This object indicates the status of this entry. Xylan does not support other(1). The default value is permenent(3). invalid(2) - writing this value to the object removes the entry. permanent(3) - this entry will never age out and remain even after next reset. deleteOnReset(4) - this entry will not age out until reset. deleteOnTimeout(5) - write this value to the entry will cause it to age out.')
vBrdgTpATVLANAgeingTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgTpATVLANAgeingTime.setStatus('mandatory')
if mibBuilder.loadTexts: vBrdgTpATVLANAgeingTime.setDescription('The AutoTracker extended ageing timer. This value indicates how long the switch will remember the mac address and its associated vlan information. The default value is 1200 secs. This means that the mac information will be remembered for (vBrdgTpATVLANAgeingTime - vBrdgTpAgingTime) seconds after the mac is aged out. This value must be set to a value greater than or equal to vBrdgTpAgingTime.')
vStpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpProtocolSpecification.setStatus('mandatory')
if mibBuilder.loadTexts: vStpProtocolSpecification.setDescription('The version of the Spanning Tree Protocol implemented for the Xylan products. The IEE 802.1d implementation is the only version supported. If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version a new value will be defined.')
vStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are given by the value of vLanBridgeAddress.')
vStpBridgeAddress = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpBridgeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vStpBridgeAddress.setDescription('The bridge identifier of this VLAN of the spanning tree as determined by the Spanning Tree Protocol as executed by this VLAN.')
vStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpTimeSinceTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: vStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the VLAN bridge entity.')
vStpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpTopChanges.setStatus('mandatory')
if mibBuilder.loadTexts: vStpTopChanges.setDescription('The total number of topology changes detected by this VLAN bridge since the management entity was last reset or initialized.')
vStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: vStpDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this VLAN. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
vStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: vStpRootCost.setDescription('The cost of the path to the root as seen from this VLAN bridge.')
vStpRootPortSlot = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vStpRootPortSlot.setDescription('The slot number of the port which offers the lowest cost path from this VLAN bridge to the root bridge.')
vStpRootPortIF = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootPortIF.setStatus('mandatory')
if mibBuilder.loadTexts: vStpRootPortIF.setDescription('The on-board interface of the port which offers the lowest cost path from this VLAN bridge to the root bridge.')
vStpRootPortFuncTyp = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 10), XylanPortFuncCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootPortFuncTyp.setStatus('mandatory')
if mibBuilder.loadTexts: vStpRootPortFuncTyp.setDescription('The service type of the port which offers the lowest cost path from this VLAN bridge to the root bridge.')
vStpRootPortFuncTypInst = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootPortFuncTypInst.setStatus('mandatory')
if mibBuilder.loadTexts: vStpRootPortFuncTypInst.setDescription('The service type instance of the port which offers the lowest cost path from this VLAN bridge to the root bridge.')
vStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: vStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
vStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: vStpHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this VLAN on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this VLAN is currently using.')
vStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: vStpHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this VLAN, in units of hundredths of a second.')
vStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: vStpForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. [Note that this value is the one that this bridge is currently using, in contrast to vStpBridgeForwardDelay which is the value that this VLAN and all others would start using if/when this bridge were to become the root.]')
vStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: vStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this VLAN is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of vStpBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
vStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: vStpBridgeHelloTime.setDescription('The value that all VLANs use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D- 1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
vStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 18), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: vStpBridgeForwardDelay.setDescription('The value that all VLANs use for ForwardDelay when this VLAN is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of vStpBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
vStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19), )
if mibBuilder.loadTexts: vStpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortTable.setDescription('A table that contains port-specific information for the Spanning Tree Protocol.')
vStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vStpPortSlot"), (0, "XYLAN-VLAN-MIB", "vStpPortIF"), (0, "XYLAN-VLAN-MIB", "vStpPortFuncTyp"), (0, "XYLAN-VLAN-MIB", "vStpPortFuncTypInst"))
if mibBuilder.loadTexts: vStpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
vStpPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortSlot.setDescription('The slot number of the port for which this entry contains Spanning Tree Protocol management information.')
vStpPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortIF.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortIF.setDescription('The on-board interface number of the port for which this entry contains Spanning Tree Protocol management information.')
vStpPortFuncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortFuncTyp.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortFuncTyp.setDescription('The service type of the port for which this entry contains Spanning Tree Protocol management information.')
vStpPortFuncTypInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortFuncTypInst.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortFuncTypInst.setDescription('The service type instance of the port for which this entry contains Spanning Tree Protocol management information.')
vStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortPriority.setDescription('The priority of this port which used originally as part of the port ID specified in 802.1D.')
vStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortState.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. For ports which are disabled (see vStpPortEnable), this object will have a value of disabled(1). Xylan does not support the broken(6) state as defined in RFC1493.")
vStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortEnable.setDescription('The enabled/disabled status of the port.')
vStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpPortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN.')
vStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
vStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
vStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
vStpPortDesignatedPtPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtPrio.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortDesignatedPtPrio.setDescription("The priority portion of the port ID on the Designated Bridge for this port's segment.")
vStpPortDesignatedPtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortDesignatedPtSlot.setDescription("The slot of the port on the Designated Bridge for this port's segment.")
vStpPortDesignatedPtIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtIF.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortDesignatedPtIF.setDescription("The on-board interface number of the port on the Designated Bridge for this port's segment.")
vStpPortDesignatedPtFuncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 15), XylanPortFuncCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtFuncTyp.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortDesignatedPtFuncTyp.setDescription("The service type of the port on the Designated Bridge for this port's segment.")
vStpPortDesignatedPtFuncTypInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtFuncTypInst.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortDesignatedPtFuncTypInst.setDescription("The service type instance of the port on the Designated Bridge for this port's segment.")
vStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: vStpPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
vStpLanMode = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee-stap", 1), ("ibm-stap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpLanMode.setStatus('mandatory')
if mibBuilder.loadTexts: vStpLanMode.setDescription('Indicates which type of spanning tree (IEEE or IBM) is to be used for the current VLAN.')
vStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 21), XylanVlanOperStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vStpStatus.setDescription('Indicates status of spanning tree for the current VLAN.')
vRipInfoTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1), )
if mibBuilder.loadTexts: vRipInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRipInfoTable.setDescription('A list of Virtual LAN instances for RIP statistics.')
vRipInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vRipInfovLanNumber"))
if mibBuilder.loadTexts: vRipInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRipInfoEntry.setDescription('A VLAN entry for RIP statistics.')
vRipInfovLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipInfovLanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vRipInfovLanNumber.setDescription('The VLAN number identifying this instance. Valid range from 1 to 65535.')
vRipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vRipInPkts.setDescription('The number of RIP routing updates and requests received on this virtual LAN.')
vRipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vRipOutPkts.setDescription('The number of RIP routing updates and requests sent on this virtual LAN.')
vRipBadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadSize.setStatus('mandatory')
if mibBuilder.loadTexts: vRipBadSize.setDescription('The number of RIP packets received on this virtual LAN whose size was incorrect.')
vRipBadVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadVersion.setStatus('mandatory')
if mibBuilder.loadTexts: vRipBadVersion.setDescription('The number of RIP packets received on this virtual LAN whose version number was incorrect.')
vRipNonZero = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipNonZero.setStatus('mandatory')
if mibBuilder.loadTexts: vRipNonZero.setDescription("The number of RIP packets received on this virtual LAN which contained a non-zero value in one of the 'must be zero' fields.")
vRipBadFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadFamily.setStatus('mandatory')
if mibBuilder.loadTexts: vRipBadFamily.setDescription('The number of RIP packets received on this virtual LAN which contained a bad value for the family type.')
vRipBadMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadMetric.setStatus('mandatory')
if mibBuilder.loadTexts: vRipBadMetric.setDescription("The number of RIP packets received on this virtual LAN which contained a bad value for a route's metric.")
vRipBadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vRipBadAddr.setDescription('The number of RIP packets received on this virtual LAN whose host portion of the source IP address is bad.')
vRipBadCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadCommand.setStatus('mandatory')
if mibBuilder.loadTexts: vRipBadCommand.setDescription('The number of RIP packets received on this virtual LAN whose command type was neither a request nor a response.')
vRipTransmitsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipTransmitsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: vRipTransmitsFailed.setDescription('The number of RIP routing updaates or requests that the OmniSwitch was unable to transmit.')
vSrTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1), )
if mibBuilder.loadTexts: vSrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vSrTable.setDescription('A table that contains information about every virtual port that is associated with this source route switch.')
vSrSapFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("turnOffAndClearAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSapFilterEnable.setDescription('A scalar value to enable or disable the SAP filtering feature in this source route switch.')
vSrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vSrSlot"), (0, "XYLAN-VLAN-MIB", "vSrInterface"), (0, "XYLAN-VLAN-MIB", "vSrFuncType"), (0, "XYLAN-VLAN-MIB", "vSrInstance"))
if mibBuilder.loadTexts: vSrPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vSrPortEntry.setDescription('A list of information for each virtual port of a source route switch.')
vSrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSlot.setDescription('The physical slot number of the port for which this entry contains Source Route management information.')
vSrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrInterface.setStatus('mandatory')
if mibBuilder.loadTexts: vSrInterface.setDescription('The on-board interface number of the port for which this entry contains Source Route management information.')
vSrFuncType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrFuncType.setStatus('mandatory')
if mibBuilder.loadTexts: vSrFuncType.setDescription('The service type of the port for which this entry contains Source Route management information.')
vSrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrInstance.setStatus('mandatory')
if mibBuilder.loadTexts: vSrInstance.setDescription(' The service type instance of the port for which this entry contains Source Route management information.')
vSrHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: vSrHopCount.setDescription('The maximum number of routing descriptors allowed in an All Paths or Spanning Tree Explorer frames.')
vSrLocalSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrLocalSegment.setStatus('mandatory')
if mibBuilder.loadTexts: vSrLocalSegment.setDescription('The segment number that uniquely identifies the segment to which this virtual port is connected. Current source routing protocols limit this value to the range: 0 through 4095. (The value 0 is used by some management applications for special test cases.) A value of 65535 signifies that no segment number is assigned to this virtual port.')
vSrBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrBridgeNum.setStatus('mandatory')
if mibBuilder.loadTexts: vSrBridgeNum.setDescription('A bridge number uniquely identifies a bridge when more than one bridge is used to span the same two segments. Current source routing protocols limit this value to the range: 0 through 15. A value of 65535 signifies that no bridge number is assigned to this bridge.')
vSrVirtualRing = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrVirtualRing.setStatus('mandatory')
if mibBuilder.loadTexts: vSrVirtualRing.setDescription('This is to indicate whether the ring that this virtual port is connected to is virtual or physical 1 = virtual 2 = physical.')
vSrLargestFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrLargestFrame.setStatus('mandatory')
if mibBuilder.loadTexts: vSrLargestFrame.setDescription('The maximum size of the INFO field (LLC and above) that this virtual port can send/receive. It does not include any MAC level (framing) octets. The value of this object is used by this bridge to determine whether a modification of the LargestFrame (LF, see [14]) field of the Routing Control field of the Routing Information Field is necessary. 64 valid values are defined by the IEEE 802.5M SRT Addendum: 516, 635, 754, 873, 993, 1112, 1231, 1350, 1470, 1542, 1615, 1688, 1761, 1833, 1906, 1979, 2052, 2345, 2638, 2932, 3225, 3518, 3812, 4105, 4399, 4865, 5331, 5798, 6264, 6730, 7197, 7663, 8130, 8539, 8949, 9358, 9768, 10178, 10587, 10997, 11407, 12199, 12992, 13785, 14578, 15370, 16163, 16956, 17749, 20730, 23711, 26693, 29674, 32655, 35637, 38618, 41600, 44591, 47583, 50575, 53567, 56559, 59551, and 65535. An illegal value will not be accepted by the bridge.')
vSrSTESpanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto-span", 1), ("disabled", 2), ("forced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSTESpanMode.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSTESpanMode.setDescription("Determines how this virtual port behaves when presented with a Spanning Tree Explorer frame. The value 'disabled(2)' indicates that the virtual port will not accept or send Spanning Tree Explorer packets; any STE packets received will be silently discarded. The value 'forced(3)' indicates the virtual port will always accept and propagate Spanning Tree Explorer frames. This allows a manually configured Spanning Tree for this class of packet to be configured. Note that unlike transparent bridging, this is not catastrophic to the network if there are loops. The value 'auto-span(1)' can only be returned by a bridge that both implements the Spanning Tree Protocol and has use of the protocol enabled on this virtual port. The behavior of the virtual port for Spanning Tree Explorer frames is determined by the state of vStpPortState. If the virtual port is in the 'forwarding' state, the frame will be accepted or propagated. Otherwise, it will be silently discarded.")
vSrSpecInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSpecInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSpecInFrames.setDescription("The number of Specifically Routed frames, also referred to as Source Routed Frames, that have been received from this virtual port's segment.")
vSrSpecOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSpecOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSpecOutFrames.setDescription('The number of Specifically Routed frames, also referred to as Source Routed Frames, that this virtual port has transmitted on its segment.')
vSrApeInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrApeInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vSrApeInFrames.setDescription('The number of All Paths Explorer frames, also referred to as All Routes Explorer frames, that have been received by this virtual port from its segment.')
vSrApeOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrApeOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vSrApeOutFrames.setDescription('The number of all Paths Explorer Frames, also referred to as All Routes Explorer frames, that have been transmitted by this virtual port on its segment.')
vSrSteInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSteInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSteInFrames.setDescription('The number of spanning tree explorer frames that have been received by this virtual port from its segment.')
vSrSteOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSteOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSteOutFrames.setDescription('The number of spanning tree explorer frames that have been transmitted by this virtual port on its segment.')
vSrInvalidRif = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrInvalidRif.setStatus('mandatory')
if mibBuilder.loadTexts: vSrInvalidRif.setDescription('The number of explorer frames that have been discarded by this virtual port because the routing Information field contained an invalid value.')
vSrDuplicateSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrDuplicateSegmentDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: vSrDuplicateSegmentDiscards.setDescription('The number of frames that have been discarded by this virtual port because the routing descriptor field contained a duplicate segment identifier.')
vSrHopCountExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrHopCountExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: vSrHopCountExceededDiscards.setDescription('The number of explorer frames that have been discarded by this virtual port because the Routing Information Field has exceeded the maximum route descriptor length.')
vSrDupLanIdOrTreeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrDupLanIdOrTreeErrors.setStatus('mandatory')
if mibBuilder.loadTexts: vSrDupLanIdOrTreeErrors.setDescription('The number of duplicate LAN IDs or Tree errors. This helps in detection of problems in networks containing older IBM Source Routing Bridges.')
vSrLanIdMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrLanIdMismatches.setStatus('mandatory')
if mibBuilder.loadTexts: vSrLanIdMismatches.setDescription('The number of ARE and STE frames that were discarded because the last LAN ID in the routing information field did not equal the LAN-in ID. This error can occur in implementations which do only a LAN-in ID and Bridge Number check instead of a LAN-in ID, Bridge Number, and LAN-out ID check before they forward broadcast frames.')
vSrBridgeLfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode3", 1), ("mode6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrBridgeLfMode.setStatus('mandatory')
if mibBuilder.loadTexts: vSrBridgeLfMode.setDescription('Indicates whether the bridge operates using older 3 bit length negotiation fields or the newer 6 bit length field in its RIF.')
vSrPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrPortType.setStatus('mandatory')
if mibBuilder.loadTexts: vSrPortType.setDescription('Indicates whether this port is a SRT or SR only SRT = 1 SR = 2 ')
vSrAREblock = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrAREblock.setStatus('mandatory')
if mibBuilder.loadTexts: vSrAREblock.setDescription('Indicates whether this port would treat ARE frames exactly like STE frames which would be blocked if the Spanning Tree mode is blocking. 1 - this port would not block ARE. 2 - this port would block ARE. ')
vSrHopCountIn = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrHopCountIn.setStatus('mandatory')
if mibBuilder.loadTexts: vSrHopCountIn.setDescription('The maximum number of routing descriptors allowed in an inbound All Paths or Spanning Tree Explorer frames.')
vSrSapDenyFilter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapDenyFilter1.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSapDenyFilter1.setDescription('Packets with this SAP value are to be discarded.')
vSrSapDenyFilter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapDenyFilter2.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSapDenyFilter2.setDescription('Packets with this SAP value are to be discarded.')
vSrSapPermitFilter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapPermitFilter1.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSapPermitFilter1.setDescription('Packets without this SAP value are to be discarded.')
vSrSapPermitFilter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapPermitFilter2.setStatus('mandatory')
if mibBuilder.loadTexts: vSrSapPermitFilter2.setDescription('Packets without this SAP value are to be discarded.')
vTrunkingServicesTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1), )
if mibBuilder.loadTexts: vTrunkingServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingServicesTable.setDescription('A list of commands to add or remove Virtual LANs from a trunking service.')
vTrunkingServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vTrunkingServicesSlot"), (0, "XYLAN-VLAN-MIB", "vTrunkingServicesStation"))
if mibBuilder.loadTexts: vTrunkingServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingServicesEntry.setDescription('A trunking services entry.')
vTrunkingServicesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingServicesSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingServicesSlot.setDescription('The slot number (1-based) of the physical port providing the trunking service.')
vTrunkingServicesStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingServicesStation.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingServicesStation.setDescription('The station number (1-based) within the physical port providing the trunking service.')
vTrunkingServicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTrunkingServicesDescription.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingServicesDescription.setDescription('A description of the trunking service being provided.')
vTrunkingServicesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingServicesBridgeID.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingServicesBridgeID.setDescription('The VLAN ID of the Virtual Bridge port for the given trunking service. A value of 0 means that the Virtual Bridge port does not exist.')
vTrunkingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2), )
if mibBuilder.loadTexts: vTrunkingVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingVlanTable.setDescription('A list of commands to add or remove Virtual LANs from a trunking service.')
vTrunkingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vTrunkingSlot"), (0, "XYLAN-VLAN-MIB", "vTrunkingStation"), (0, "XYLAN-VLAN-MIB", "vTrunkingLanNumber"))
if mibBuilder.loadTexts: vTrunkingVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingVlanEntry.setDescription('A trunking Virtual LAN entry.')
vTrunkingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingSlot.setDescription('The slot number (1-based) of the physical port providing the trunking service.')
vTrunkingStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingStation.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingStation.setDescription('The station number (1-based) within the physical port providing the trunking service.')
vTrunkingLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingLanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingLanNumber.setDescription('The VLAN ID to be added to or removed from the given trunking service.')
vTrunkingCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTrunkingCommand.setStatus('mandatory')
if mibBuilder.loadTexts: vTrunkingCommand.setDescription('The command to either add or remove the specified VLAN ID from the given trunking service.')
atportRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1), )
if mibBuilder.loadTexts: atportRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atportRuleTable.setDescription('This table is used to configure a Port Rule for a VLAN. The VLAN has to be created before any rule can be configured for it.')
atportRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atportRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atportRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atportRuleIdx"), (0, "XYLAN-VLAN-MIB", "atportRulePortId"))
if mibBuilder.loadTexts: atportRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atportRuleEntry.setDescription('An entry in the atportRuleTable. Each entry in this table identifies exactly one port that is part of the VLAN definition. Hence all the entries of this table with the same GroupId and VLANId collectively define one VLAN which is based on a Port Rule. A specific port can be included in definition of more than one vlan as long as those two vlans are part of the same VLAN group. That is to say, a port can belong to more than one vlan but can be part of atmost one VLAN group.')
atportRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atportRuleGroupId.setDescription('This object indicates the VLAN Group in which the VLAN defined by this rule is.')
atportRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atportRuleVLANId.setDescription('This object is the VLAN defined by this port-rule.')
atportRuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRuleIdx.setStatus('mandatory')
if mibBuilder.loadTexts: atportRuleIdx.setDescription('This object indicates the exact port-rule for this VLAN. There can be more than one port-rule defined for this VLAN. This object identifies the port rule of which the port is part of. When creating a VLAN using this table, this value should be set to 0 to indicate that this is a new port rule. If the port rule needs to be modified, then this object will be the port rule to modify.')
atportRulePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRulePortId.setStatus('mandatory')
if mibBuilder.loadTexts: atportRulePortId.setDescription('This object defines the Virtual port that is part of this PORT rule. The first octet gives the slot number on which the port resides, the second being the physical interface, third octet being the service and the fourth being the instance of the service.')
atportRulePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRulePortState.setStatus('mandatory')
if mibBuilder.loadTexts: atportRulePortState.setDescription('This object indicates whether this perticular rule is being used as part this VLANs definition. When set to disabled, this rule is not used as part of this vlans definition.')
atMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2), )
if mibBuilder.loadTexts: atMacRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atMacRuleTable.setDescription('This table is used to configure an Auto-Tracker VLAN based on a MAC Rule. Note the a VLAN created by using this table will not be enabled until the atVLANAdminStatus in the atVLANControlTable is not set to enabled.')
atMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atMacRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atMacRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atMacRuleIndex"), (0, "XYLAN-VLAN-MIB", "atMacRuleMacAddress"))
if mibBuilder.loadTexts: atMacRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atMacRuleEntry.setDescription('An entry in the atMacRuleTable. Each entry in this table identifies exactly one MAC address. All entries in this table with the same GroupId and VLANId collectively define a VLAN.')
atMacRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atMacRuleGroupId.setDescription('This object indicates the VLAN Group in which the VLAN defined by this rule is.')
atMacRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atMacRuleVLANId.setDescription('This object is the VLAN Id for this MAC-rule based vlan.')
atMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atMacRuleIndex.setDescription('The rule of which this MAC address list is part of. When creating a VLAN, this object must be set to 0.')
atMacRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atMacRuleMacAddress.setDescription('This object gives the value of the MAC address that is part of the MAC rule definition.')
atMacRuleMacAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleMacAddressState.setStatus('mandatory')
if mibBuilder.loadTexts: atMacRuleMacAddressState.setDescription('This object indicates whether this perticular rule is being used as part this VLANs definition. When set to disabled, this rule is not used as part of this vlans definition.')
atProtoRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3), )
if mibBuilder.loadTexts: atProtoRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atProtoRuleTable.setDescription('This table is used to configure an Auto-Tracker VLAN based on Protocol Rule. Note that any VLAN created using this table will not be enabled until the atVLANAdminStatus in the atVLANControlTable is not set to enabled.')
atProtoRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atProtoRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atProtoRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atProtoRuleIndex"))
if mibBuilder.loadTexts: atProtoRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atProtoRuleEntry.setDescription('An entry in the atProtoRuleTable. ')
atProtoRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atProtoRuleGroupId.setDescription('This object indicates the VLAN Group in which the VLAN defined by this rule is defined.')
atProtoRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atProtoRuleVLANId.setDescription('This object is the VLAN Id defined by this Protocol-rule.')
atProtoRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atProtoRuleIndex.setDescription('This object specifies the exact protocol rule for this VLAN. On creating a VLAN based on protocol rule, this object must be set to 0.')
atProtoRule = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRule.setStatus('mandatory')
if mibBuilder.loadTexts: atProtoRule.setDescription('This object is an octet string of length 5 bytes. This object specifies the protocol type that defines this vlan. The values for the different protocols are: IP - first byte = 1, IPX - first byte = 2, AppleTalk - first byte = 3, DECNet - first byte = 4, Note that, in case of IP, ARP is included as IP and need not be specified explicitly. Similarly when AppleTalk is chosen both DDP and AARP are included. If any other protocol is used, it can be defined either by using Ether-type - first byte = 5 specifying its ether-type, second and third byte = ether-type value in hex. DSAP and SSAP - first byte = 6 specifying that its SAP type second byte = DSAP, third byte = SSAP in hex. SNAP Type - first byte = 7 specifying its SNAP second through sixth byte = snap value in hex.')
atProtoRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atProtoRuleStatus.setDescription('This object indicates whether this perticular rule is being used as part this VLANs definition. When set to disabled, this rule is not used as part of this vlans definition.')
atNetRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4), )
if mibBuilder.loadTexts: atNetRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atNetRuleTable.setDescription('This table is used to configure an Auto-Tracker VLAN based on Net Addr Rule. Note that any VLAN created using this table will not be enabled until the atVLANAdminStatus in the atVLANControlTable is not set to enabled.')
atNetRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atNetRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atNetRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atNetRuleIndex"))
if mibBuilder.loadTexts: atNetRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atNetRuleEntry.setDescription('An entry in the atNetRuleTable. A VLAN can be defined using exaclty one address only except in the case of IPX where it could either be a Network number or the encapsulation.')
atNetRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atNetRuleGroupId.setDescription('This object indicates the VLAN Group in which this VLAN is defined.')
atNetRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atNetRuleVLANId.setDescription('This object is the VLAN Id for this NetAddr-rule based vlan.')
atNetRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atNetRuleIndex.setDescription('This object specifies the exact Network Address rule for this VLAN. When creating a VLAN using the Network Address rule, this object must be set to 0.')
atNetRuleProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("dec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: atNetRuleProtocolId.setDescription('This object indicates which protocols Network Address is used to define this VLAN.')
atNetRuleNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleNetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: atNetRuleNetAddr.setDescription('This object gives the network address that defines this vlan. If the protocol is IP, this object contains the four bytes of IP address followed by four bytes of IP Subnet Mask. If the protocol is IPX, this object contains the four bytes of Network Number followed by one byte of encapsulation type used on that network. The values for the encapsulation types are: byte 5 = 1 - IPX 802.3 encapsulation byte 5 = 2 - IPX Ethernet2 encapsulation byte 5 = 3 - IPX LLC encapsulation byte 5 = 4 - IPX SNAP encapsulation If the protocol is DECNet, this object contains the one byte of DEC area.')
atNetRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atNetRuleStatus.setDescription('This object indicates whether this perticular rule is being used as part this VLANs definition. When set to disabled, this rule is not used as part of this vlans definition.')
atUserRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5), )
if mibBuilder.loadTexts: atUserRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleTable.setDescription('This table is used to configure an Auto-Tracker VLAN based on a User Defined Rule.Note that any VLAN created using this table will not be enabled until the atVLANAdminStatus in the atVLANControlTable is not set to enabled.')
atUserRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atUserRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atUserRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atUserRuleIndex"))
if mibBuilder.loadTexts: atUserRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleEntry.setDescription('An entry in the atUserRuleTable. A VLAN can be defined by more than one rule. In that case, the device will belong to that VLAN if it matches atleast one of the rules defined for that VLAN.')
atUserRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleGroupId.setDescription('This object indicates the VLAN Group in which this VLAN is defined.')
atUserRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleVLANId.setDescription('This object is the VLAN Id for this User-rule based vlan.')
atUserRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleIndex.setDescription('This object indicates the exact User defined rule for this VLAN. When creating a VLAN using the user defined rules, this object must be set to 0.')
atUserRuleOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleOffset.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleOffset.setDescription('This object defines the offset into a frame where the pattern to match is located. This offset is relative to the start of the MAC header.')
atUserRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleValue.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleValue.setDescription('This object defines the value of the pattern to match in a frame. The maximum length of this value can be 8 octets and the associated mask should have the same length as this object.')
atUserRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleMask.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleMask.setDescription('This object defines the mask for the pattern to match. The Mask can be upto 8 bytes long but has to be of the same length as the Value.')
atUserRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atUserRuleStatus.setDescription('This object indicates whether this perticular rule is being used as part this VLANs definition. When set to disabled, this rule is not used as part of this vlans definition.')
atVLANRuleSumTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6), )
if mibBuilder.loadTexts: atVLANRuleSumTable.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANRuleSumTable.setDescription('This table provides the summary of vlan rule configuration.')
atVLANRuleSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atVLANRuleSumGroupId"), (0, "XYLAN-VLAN-MIB", "atVLANRuleSumVLANId"), (0, "XYLAN-VLAN-MIB", "atVLANRuleIndex"))
if mibBuilder.loadTexts: atVLANRuleSumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANRuleSumEntry.setDescription('An entry in the vlan summary table.')
atVLANRuleSumGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleSumGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANRuleSumGroupId.setDescription('The group to which the VLAN belongs.')
atVLANRuleSumVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleSumVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANRuleSumVLANId.setDescription('The VLAN Id for this rule is defined.')
atVLANRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANRuleIndex.setDescription('The exact rule identifier for this rule.')
atVLANRuleSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleSubIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANRuleSubIndex.setDescription('In case a VLAN is defined using multiple instances of the same type of rule, this object identifies the exact instance of that type of rule. This object could then be used along with the group and vlanid to get the complete definition of this rule from the appropriate rule table.')
atVLANRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("port-rule", 1), ("mac-rule", 2), ("protocol-rule", 3), ("network-rule", 4), ("user-defined-rule", 5), ("mcast-rule", 6), ("binding-rule", 7), ("dhcp-port-rule", 8), ("dhcp-mac-rule", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANRuleType.setDescription('The type of rule. This object can then be used to decide which table to lookup for the complete definition of the rule.')
atVLANControlTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7), )
if mibBuilder.loadTexts: atVLANControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANControlTable.setDescription('This table gives the control information about all Auto-Tracker VLANs.')
atVLANControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atVLANGroupId"), (0, "XYLAN-VLAN-MIB", "atVLANId"))
if mibBuilder.loadTexts: atVLANControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANControlEntry.setDescription('An entry in the control table.')
atVLANGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atVLANGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANGroupId.setDescription('This is the VLAN group to which the VLAN belongs.')
atVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANId.setDescription('The VLAN id for this VLAN.')
atVLANDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atVLANDesc.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANDesc.setDescription('The description for this vlan.')
atVLANAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atVLANAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANAdminStatus.setDescription('The Admin status of the VLAN. If set to disabled, any rules configured for this vlan will no longer be used and their status will be changed to disabled.')
atVLANOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atVLANOperStatus.setDescription('The operation status of this vlan. If there any devices learnt by this system on this vlan, the operation status of the vlan is said to be active.')
atDefaultVlan = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDefaultVlan.setStatus('mandatory')
if mibBuilder.loadTexts: atDefaultVlan.setDescription('When set to on, it allows devices to be assigned to the default vlan, else if it set to off, such devices are not assigned to any vlan, thereby preventing them from communicating to other devices.')
atmcportRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9), )
if mibBuilder.loadTexts: atmcportRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmcportRuleTable.setDescription('This table is used to configure a Port Rule for a VLAN. The VLAN has to be created before any rule can be configured for it.')
atmcportRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atmcportRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atmcportRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atmcportRuleIdx"), (0, "XYLAN-VLAN-MIB", "atmcportRulePortId"))
if mibBuilder.loadTexts: atmcportRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmcportRuleEntry.setDescription('An entry in the atportRuleTable. Each entry in this table identifies exactly one port that is part of the VLAN definition. Hence all the entries of this table with the same GroupId and VLANId collectively define one VLAN which is based on a Port Rule. A specific port can be included in definition of more than one vlan as long as those two vlans are part of the same VLAN group. That is to say, a port can belong to more than one vlan but can be part of atmost one VLAN group.')
atmcportRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcportRuleGroupId.setDescription('This object indicates the VLAN Group in which the VLAN defined by this rule is.')
atmcportRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcportRuleVLANId.setDescription('This object is the VLAN defined by this port-rule.')
atmcportRuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRuleIdx.setStatus('mandatory')
if mibBuilder.loadTexts: atmcportRuleIdx.setDescription('This object indicates the exact port-rule for this VLAN. There can be more than one port-rule defined for this VLAN. This object identifies the port rule of which the port is part of. When creating a VLAN using this table, this value should be set to 0 to indicate that this is a new port rule. If the port rule needs to be modified, then this object will be the port rule to modify.')
atmcportRulePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRulePortId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcportRulePortId.setDescription('This object defines the Virtual port that is part of this PORT rule. The first octet gives the slot number on which the port resides, the second being the physical interface, third octet being the service and the fourth being the instance of the service.')
atmcportRulePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRulePortState.setStatus('mandatory')
if mibBuilder.loadTexts: atmcportRulePortState.setDescription('This object determines whether the port is being added or deleted from this port rule definition.')
atmcMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10), )
if mibBuilder.loadTexts: atmcMacRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmcMacRuleTable.setDescription('This table is used to configure an Auto-Tracker VLAN based on a MAC Rule. Note the a VLAN created by using this table will not be enabled until the atVLANAdminStatus in the atVLANControlTable is not set to enabled.')
atmcMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atmcMacRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atmcMacRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atmcMacRuleIndex"), (0, "XYLAN-VLAN-MIB", "atmcMacRuleMacAddress"))
if mibBuilder.loadTexts: atmcMacRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmcMacRuleEntry.setDescription('An entry in the atmcMacRuleTable. Each entry in this table identifies exactly one MAC address. All entries in this table with the same GroupId and VLANId collectively define a VLAN.')
atmcMacRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcMacRuleGroupId.setDescription('This object indicates the VLAN Group in which the VLAN defined by this rule is.')
atmcMacRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcMacRuleVLANId.setDescription('This object is the VLAN Id for this MAC-rule based vlan.')
atmcMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmcMacRuleIndex.setDescription('The rule of which this MAC address list is part of. When creating a VLAN, this object must be set to 0.')
atmcMacRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atmcMacRuleMacAddress.setDescription('This object gives the value of the MAC address that is part of the MAC rule definition.')
atmcMacRuleMacAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleMacAddressState.setStatus('mandatory')
if mibBuilder.loadTexts: atmcMacRuleMacAddressState.setDescription('This object determines if the MAC address is included in the VLAN definition. If the object is set to disabled, the MAC address is removed from the VLAN definition.')
atMcastRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11), )
if mibBuilder.loadTexts: atMcastRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atMcastRuleTable.setDescription('This table is used to configure MCAST Rules for a VLAN.')
atMcastRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atMcastRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atMcastRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atMcastRuleIndex"), (0, "XYLAN-VLAN-MIB", "atMcastRuleMacAddress"))
if mibBuilder.loadTexts: atMcastRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atMcastRuleEntry.setDescription('An entry in the MCAST Rule table.')
atMcastRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atMcastRuleGroupId.setDescription('The group in which this rule is defined.')
atMcastRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atMcastRuleVLANId.setDescription('The VLAN for which this rule is defined.')
atMcastRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atMcastRuleIndex.setDescription('The rule index ( a vlan can have multiple rules defined ) which exactly identifies this rule.')
atMcastRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atMcastRuleMacAddress.setDescription('The Multicast MAC Address that makes up this rule.')
atMcastRuleMacAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleMacAddressState.setStatus('mandatory')
if mibBuilder.loadTexts: atMcastRuleMacAddressState.setDescription('The admin-state of this multicast mac address.')
atmcVLANRuleSumTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12), )
if mibBuilder.loadTexts: atmcVLANRuleSumTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANRuleSumTable.setDescription('This table provides the summary of vlan rule configuration.')
atmcVLANRuleSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atmcVLANRuleSumGroupId"), (0, "XYLAN-VLAN-MIB", "atmcVLANRuleSumVLANId"), (0, "XYLAN-VLAN-MIB", "atmcVLANRuleIndex"))
if mibBuilder.loadTexts: atmcVLANRuleSumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANRuleSumEntry.setDescription('An entry in the vlan summary table.')
atmcVLANRuleSumGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleSumGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANRuleSumGroupId.setDescription('The group to which the VLAN belongs.')
atmcVLANRuleSumVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleSumVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANRuleSumVLANId.setDescription('The VLAN Id for this rule is defined.')
atmcVLANRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANRuleIndex.setDescription('The exact rule identifier for this rule.')
atmcVLANRuleSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleSubIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANRuleSubIndex.setDescription('In case a VLAN is defined using multiple instances of the same type of rule, this object identifies the exact instance of that type of rule. This object could then be used along with the group and vlanid to get the complete definition of this rule from the appropriate rule table.')
atmcVLANRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port-rule", 1), ("mac-rule", 2), ("mcast-rule", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANRuleType.setDescription('The type of rule. This object can then be used to decide which table to lookup for the complete definition of the rule.')
atmcVLANControlTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13), )
if mibBuilder.loadTexts: atmcVLANControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANControlTable.setDescription('This table gives the control information about all Auto-Tracker VLANs.')
atmcVLANControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atmcVLANGroupId"), (0, "XYLAN-VLAN-MIB", "atmcVLANId"))
if mibBuilder.loadTexts: atmcVLANControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANControlEntry.setDescription('An entry in the control table.')
atmcVLANGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcVLANGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANGroupId.setDescription('This is the VLAN group to which the VLAN belongs.')
atmcVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANId.setDescription('The VLAN id for this VLAN.')
atmcVLANDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcVLANDesc.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANDesc.setDescription('The description for this vlan.')
atmcVLANAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcVLANAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANAdminStatus.setDescription('The Admin status of the VLAN. If set to disabled, any rules configured for this vlan will no longer be used and their status will be changed to disabled.')
atmcVLANOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmcVLANOperStatus.setDescription('The operation status of this vlan. If there any devices learnt by this system on this vlan, the operation status of the vlan is said to be active.')
gmAutoServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14), )
if mibBuilder.loadTexts: gmAutoServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceTable.setDescription('Table of Auto-Activated Services')
gmAutoServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "gmAutoServiceGroupId"), (0, "XYLAN-VLAN-MIB", "gmAutoServicePrimarySlot"), (0, "XYLAN-VLAN-MIB", "gmAutoServicePrimaryPort"), (0, "XYLAN-VLAN-MIB", "gmAutoServiceIndex"))
if mibBuilder.loadTexts: gmAutoServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceEntry.setDescription('an entry in the table')
gmAutoServiceGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceGroupId.setDescription('Group for which this service is configured')
gmAutoServicePrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServicePrimarySlot.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServicePrimarySlot.setDescription('Primary slot on which this service will be activated.')
gmAutoServicePrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServicePrimaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServicePrimaryPort.setDescription('Primary port on which this service will be activated.')
gmAutoServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceIndex.setDescription('Service index associated with this service')
gmAutoServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eth-lane", 1), ("token-ring-lane", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceType.setDescription('Type of this service - currently only lane is supported and this object should have a value of 1.')
gmAutoServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceName.setDescription('The name of the service. In case of LANE, this is the elan name.')
gmAutoServiceSecondarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceSecondarySlot.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceSecondarySlot.setDescription('Secondary slot on which this service will be activated.')
gmAutoServiceSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceSecondaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceSecondaryPort.setDescription('Secondary port on which this service will be activated.')
gmAutoServiceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceAdminState.setDescription('The admin state of this service')
gmAutoServiceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceOperState.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceOperState.setDescription('Operational state of this service.')
gmAutoServiceActiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmAutoServiceActiveSlot.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceActiveSlot.setDescription('Slot on the which the service is currently active.')
gmAutoServiceActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmAutoServiceActivePort.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceActivePort.setDescription('Physical Port on the which the service is currently active.')
gmAutoServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmAutoServiceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceNumber.setDescription('Service number assigned by the switch when this service is activated.')
gmAutoServiceTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceTranslations.setStatus('mandatory')
if mibBuilder.loadTexts: gmAutoServiceTranslations.setDescription('This parameter controls whether frame translations will be exercised for this lane service once activated.')
atBindRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16), )
if mibBuilder.loadTexts: atBindRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleTable.setDescription('The Binding Rule table.')
atBindRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atBindRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atBindRuleVlanId"), (0, "XYLAN-VLAN-MIB", "atBindRuleIndex"))
if mibBuilder.loadTexts: atBindRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleEntry.setDescription('An entry in the Binding Rule Table.')
atBindRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleGroupId.setDescription('The group id of the vlan for which this rule is configured.')
atBindRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleVlanId.setDescription('The vlan id for which this rule is configured.')
atBindRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleIndex.setDescription('The index which uniquely identifies this rule for this vlan.')
atBindRulePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRulePortId.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRulePortId.setDescription('The port ( slot/intf/srvc/inst) for which this binding is configured.')
atBindRuleIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleIPAddress.setDescription('The IP address for which this binding is configured.')
atBindRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleMacAddress.setDescription('The mac address for which this binding is configured.')
atBindRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleProtocol.setDescription('The protocol for which this binding is configured.')
atBindRuleBindParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 9, 13, 6, 3, 5))).clone(namedValues=NamedValues(("port-ip-mac", 7), ("port-protocol", 9), ("port-mac-protocol", 13), ("ip-mac", 6), ("ip-port", 3), ("mac-port", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleBindParameter.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleBindParameter.setDescription('The parameters to bind together.')
atBindRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atBindRuleStatus.setDescription('The admin status for this rule.')
gmGroupListTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17), )
if mibBuilder.loadTexts: gmGroupListTable.setStatus('mandatory')
if mibBuilder.loadTexts: gmGroupListTable.setDescription('This table lists the groups on a port.')
gmGroupListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "gmGroupListPortSlot"), (0, "XYLAN-VLAN-MIB", "gmGroupListPortInterface"), (0, "XYLAN-VLAN-MIB", "gmGroupListGroupId"))
if mibBuilder.loadTexts: gmGroupListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gmGroupListEntry.setDescription('An entry in the Group List table.')
gmGroupListPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmGroupListPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: gmGroupListPortSlot.setDescription('The slot id of the port for which the group list is requested.')
gmGroupListPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmGroupListPortInterface.setStatus('mandatory')
if mibBuilder.loadTexts: gmGroupListPortInterface.setDescription('The physical port number for which the group list is requested.')
gmGroupListGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmGroupListGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: gmGroupListGroupId.setDescription('One of the Groups to which the port belongs.')
atDHCPportRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18), )
if mibBuilder.loadTexts: atDHCPportRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPportRuleTable.setDescription('This table is used to configure a Port Rule for a VLAN. The VLAN has to be created before any rule can be configured for it.')
atDHCPportRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atDHCPportRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atDHCPportRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atDHCPportRuleIdx"), (0, "XYLAN-VLAN-MIB", "atDHCPportRulePortId"))
if mibBuilder.loadTexts: atDHCPportRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPportRuleEntry.setDescription('An entry in the atDHCPportRuleTable. Each entry in this table identifies exactly one port that is part of the VLAN definition. Hence all the entries of this table with the same GroupId and VLANId collectively define one VLAN which is based on a Port Rule. A specific port can be included in definition of more than one vlan as long as those two vlans are part of the same VLAN group. That is to say, a port can belong to more than one vlan but can be part of atmost one VLAN group.')
atDHCPportRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPportRuleGroupId.setDescription('This object indicates the VLAN Group in which the VLAN defined by this rule is.')
atDHCPportRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPportRuleVLANId.setDescription('This object is the VLAN defined by this port-rule.')
atDHCPportRuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRuleIdx.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPportRuleIdx.setDescription('This object indicates the exact port-rule for this VLAN. There can be more than one port-rule defined for this VLAN. This object identifies the port rule of which the port is part of. When creating a VLAN using this table, this value should be set to 0 to indicate that this is a new port rule. If the port rule needs to be modified, then this object will be the port rule to modify.')
atDHCPportRulePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRulePortId.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPportRulePortId.setDescription('This object defines the Virtual port that is part of this PORT rule. The first octet gives the slot number on which the port resides, the second being the physical interface, third octet being the service and the fourth being the instance of the service.')
atDHCPportRulePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRulePortState.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPportRulePortState.setDescription('This object determines whether the port is being added or deleted from this port rule definition.')
atDHCPMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19), )
if mibBuilder.loadTexts: atDHCPMacRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPMacRuleTable.setDescription('This table is used to configure an Auto-Tracker VLAN based on a MAC Rule. Note the a VLAN created by using this table will not be enabled until the atVLANAdminStatus in the atVLANControlTable is not set to enabled.')
atDHCPMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atDHCPMacRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atDHCPMacRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atDHCPMacRuleIndex"), (0, "XYLAN-VLAN-MIB", "atDHCPMacRuleMacAddress"))
if mibBuilder.loadTexts: atDHCPMacRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPMacRuleEntry.setDescription('An entry in the atDHCPMacRuleTable. Each entry in this table identifies exactly one MAC address. All entries in this table with the same GroupId and VLANId collectively define a VLAN.')
atDHCPMacRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPMacRuleGroupId.setDescription('This object indicates the VLAN Group in which the VLAN defined by this rule is.')
atDHCPMacRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleVLANId.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPMacRuleVLANId.setDescription('This object is the VLAN Id for this MAC-rule based vlan.')
atDHCPMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPMacRuleIndex.setDescription('The rule of which this MAC address list is part of. When creating a VLAN, this object must be set to 0.')
atDHCPMacRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPMacRuleMacAddress.setDescription('This object gives the value of the MAC address that is part of the MAC rule definition.')
atDHCPMacRuleMacAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleMacAddressState.setStatus('mandatory')
if mibBuilder.loadTexts: atDHCPMacRuleMacAddressState.setDescription('This object determines if the MAC address is included in the VLAN definition. If the object is set to disabled, the MAC address is removed from the VLAN definition.')
groupMobilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupMobilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: groupMobilityStatus.setDescription('This object can used to configure the global status of group-mobility feature on the switch.')
gmMoveToDefGroup = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmMoveToDefGroup.setStatus('mandatory')
if mibBuilder.loadTexts: gmMoveToDefGroup.setDescription('When this object is set on, the switch will remove the port of out of a mobile group when the last device in that group learnt on that port ages out due to inactivity. When it is set to off, the port will remain in such a group, even if all macs leant on that port in that group age out.')
gmDefGroup = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmDefGroup.setStatus('mandatory')
if mibBuilder.loadTexts: gmDefGroup.setDescription("When this object is set to on, the switch will assign the port's default group id to all such devices which are learned and do not match any policies for mobile groups. If it is set to off, such devices will get assigned to no groups and the traffic they send will be discarded by the switch.")
atvIPRouterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1), )
if mibBuilder.loadTexts: atvIPRouterTable.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterTable.setDescription('A list of Virtual Router instances in this physical OmniSwitch.')
atvIPRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atvIPRouterVLanGroup"), (0, "XYLAN-VLAN-MIB", "atvIPRouterVLan"))
if mibBuilder.loadTexts: atvIPRouterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterEntry.setDescription('A VLAN entry.')
atvIPRouterVLanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterVLanGroup.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterVLanGroup.setDescription('VLAN Group ID for this atvIPRouterEntry instance.')
atvIPRouterVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterVLan.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterVLan.setDescription('Auto Tracker VLAN Id for this router port instance.')
atvIPRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterProtocol.setDescription('The routing protocol(s) for this virtual router port. Each IP router port can carry one or more routing protocols. This will be represented by the logical ORing of each protocol number. Which are: ipOther(1), ipRip(2), ipEgp(4), ipGgp(8), ipHello(16), ipIs-is(32), ipEs-is(64), ipCiscoIgrp(128), ipBbnSpfIgp(256), ipOigp(512)')
atvIPRouterNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterNetAddress.setDescription('The IP network address for this virtual bridge instance for the purpose of allowing access from the external network management system.')
atvIPRouterSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterSubNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterSubNetMask.setDescription('The IP network subnet mask for this virtual bridge instance for the purpose of allowing access from the external network management system.')
atvIPRouterBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterBcastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterBcastAddress.setDescription('The IP broadcast address for this virtual bridge instance for the purpose of allowing access from the external network management system.')
atvIPRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterDescription.setStatus('optional')
if mibBuilder.loadTexts: atvIPRouterDescription.setDescription('Textual description of the router instance.')
atvIPRouterAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 8), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterAdmStatus.setDescription("The particular routing environment can be enable(2) or disable(1) (or delete (3)) upon user's request.")
atvIPRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 9), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvIPRouterOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterOperStatus.setDescription('Provide operating status of a particular router envirnment.')
atvIPRouterFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet-2", 1), ("ethernet-802-3", 2), ("fddi", 3), ("token-ring", 4), ("token-ring-source-routed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterFramingType.setDescription('Provides the ability to set the outbound frame type for IP traffic. The default frame type is Ethernet 2. If the frame type is incompatible with the transmitting media, appropriate translation will be performed at egress.')
atvIPRouterRipConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("deaf", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterRipConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterRipConfigMode.setDescription("RIP's operational mode. 'silent' means that RIP listens for routing updates but does not send them. 'deaf' means that RIP sends routing updates but not listen to them. 'active' means that RIP both sends and receives routing updates, and 'inactive' means that RIP is not operational on the given virtual LAN. The default is 'simple'.")
atvIPRouterRelayServicesFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterRelayServicesFwd.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPRouterRelayServicesFwd.setDescription('Each of the 8 least significant bits are assigned to a UDP Relay service as follows: 01H - bootp (Not currently allowed) 02H - NBNS 04H - NBDD 08H - Gen1 10H - Gen2 20H - Gen3 40H - Gen4 80H - Gen5 A set bit indicates that packets are being forwarded to this vlan for the service corresponding to the bit. Use bit 15 to indicate that a UDP Relay Service should be unset and packets should not be forwarded to this vlan. 8001H - bootp (Not currently allowed) 8002H - NBNS 8004H - NBDD 8008H - Gen1 8010H - Gen2 8020H - Gen3 8040H - Gen4 8080H - Gen5')
atvIPXRouterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1), )
if mibBuilder.loadTexts: atvIPXRouterTable.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterTable.setDescription('A list of Virtual Router instances in this physical OmniSwitch.')
atvIPXRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atvIPXRouterVLanGroup"), (0, "XYLAN-VLAN-MIB", "atvIPXRouterVLan"))
if mibBuilder.loadTexts: atvIPXRouterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterEntry.setDescription('A VLAN entry.')
atvIPXRouterVLanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterVLanGroup.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterVLanGroup.setDescription('VLAN Group ID for this vIPXRouterEntry instance.')
atvIPXRouterVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterVLan.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterVLan.setDescription('VLAN ID for this vIPXRouterEntry instance.')
atvIPXRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterProtocol.setDescription('The routing protocol(s) for this virtual router port. Each IPX router port can carry one or more routing protocols. This will be represented by the logical ORing of each protocol number. Which are: ipxOther(1), ipxRip(2), ipxSap(4)')
atvIPXRouterNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 4), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterNetAddress.setDescription('The IPX network address for this virtual bridge.')
atvIPXRouterFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ethernet-2", 1), ("ethernet-802-3-llc", 2), ("ethernet-802-3-snap", 3), ("ethernet-802-3-raw", 4), ("fddi-snap", 5), ("fddi-snap-sr", 6), ("fddi-llc", 7), ("fddi-llc-sr", 8), ("token-ring-snap", 9), ("token-ring-snap-sr", 10), ("token-ring-llc", 11), ("token-ring-llc-sr", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterFramingType.setDescription('Provides the ability to set the outbound frame type for IPX traffic. The default frame type is 802.2 Novell Raw. If the frame type is incompatible with the transmitting media, appropriate translation will be performed at egress.')
atvIPXRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterDescription.setStatus('optional')
if mibBuilder.loadTexts: atvIPXRouterDescription.setDescription('Textual description of the router instance.')
atvIPXRouterAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 7), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterAdmStatus.setDescription("The particular routing environment can be enabled(2) or disabled(1) upon user's request.")
atvIPXRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 8), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvIPXRouterOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXRouterOperStatus.setDescription('Provide operating status of a particular router envirnment.')
atvIPXSrcRteType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("are", 1), ("ste", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXSrcRteType.setStatus('mandatory')
if mibBuilder.loadTexts: atvIPXSrcRteType.setDescription('Provide the ability to set the type of source routing broadcasts between AllRoutesExplorer(0) and SpanningTreeExplorer(1).')
v80210ServicesTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1), )
if mibBuilder.loadTexts: v80210ServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: v80210ServicesTable.setDescription('A list of commands to add or remove Virtual LANs from a 80210 service.')
v80210ServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "v80210ServicesSlot"), (0, "XYLAN-VLAN-MIB", "v80210ServicesStation"))
if mibBuilder.loadTexts: v80210ServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: v80210ServicesEntry.setDescription('A 80210 services entry.')
v80210ServicesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210ServicesSlot.setStatus('mandatory')
if mibBuilder.loadTexts: v80210ServicesSlot.setDescription('The slot number (1-based) of the physical port providing the 80210 service.')
v80210ServicesStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210ServicesStation.setStatus('mandatory')
if mibBuilder.loadTexts: v80210ServicesStation.setDescription('The station number (1-based) within the physical port providing the 80210 service.')
v80210ServicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v80210ServicesDescription.setStatus('mandatory')
if mibBuilder.loadTexts: v80210ServicesDescription.setDescription('A description of the 80210 service being provided.')
v80210ServicesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210ServicesBridgeID.setStatus('mandatory')
if mibBuilder.loadTexts: v80210ServicesBridgeID.setDescription('The VLAN ID of the Virtual Bridge port for the given 80210 service. A value of 0 means that the Virtual Bridge port does not exist.')
v80210VlanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2), )
if mibBuilder.loadTexts: v80210VlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: v80210VlanTable.setDescription('A list of commands to add or remove Virtual LANs from a 80210 service.')
v80210VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "v80210Slot"), (0, "XYLAN-VLAN-MIB", "v80210Station"), (0, "XYLAN-VLAN-MIB", "v80210LanNumber"))
if mibBuilder.loadTexts: v80210VlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: v80210VlanEntry.setDescription('A 80210trunking Virtual LAN entry.')
v80210Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210Slot.setStatus('mandatory')
if mibBuilder.loadTexts: v80210Slot.setDescription('The slot number (1-based) of the physical port providing the 80210 service.')
v80210Station = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210Station.setStatus('mandatory')
if mibBuilder.loadTexts: v80210Station.setDescription('The station number (1-based) within the physical port providing the 80210 service.')
v80210LanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210LanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: v80210LanNumber.setDescription('The VLAN ID to be added to or removed from the given 80210 service.')
v80210Command = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v80210Command.setStatus('mandatory')
if mibBuilder.loadTexts: v80210Command.setDescription('The command to either add or remove the specified VLAN ID from the given 80210 service.')
vDBrServicesTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1), )
if mibBuilder.loadTexts: vDBrServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrServicesTable.setDescription('A list of commands to add or remove Virtual LANs from an DBr service.')
vDBrServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vDBrServicesSlot"), (0, "XYLAN-VLAN-MIB", "vDBrServicesStation"))
if mibBuilder.loadTexts: vDBrServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrServicesEntry.setDescription('An DBr services entry.')
vDBrServicesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrServicesSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrServicesSlot.setDescription('The slot number (1-based) of the physical port providing the DBr service.')
vDBrServicesStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrServicesStation.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrServicesStation.setDescription('The station number (1-based) within the physical port providing the DBr service.')
vDBrServicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vDBrServicesDescription.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrServicesDescription.setDescription('A description of the DBr service being provided.')
vDBrServicesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrServicesBridgeID.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrServicesBridgeID.setDescription('The VLAN ID of the Virtual Bridge port for the given DBr service. A value of 0 means that the Virtual Bridge port does not exist.')
vDBrVlanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2), )
if mibBuilder.loadTexts: vDBrVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrVlanTable.setDescription('A list of commands to add or remove Virtual LANs from the DBr service.')
vDBrVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vDBrSlot"), (0, "XYLAN-VLAN-MIB", "vDBrStation"), (0, "XYLAN-VLAN-MIB", "vDBrLanNumber"))
if mibBuilder.loadTexts: vDBrVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrVlanEntry.setDescription('An DBr trunking Virtual LAN entry.')
vDBrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrSlot.setDescription('The slot number (1-based) of the physical port providing the DBr service.')
vDBrStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrStation.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrStation.setDescription('The station number (1-based) within the physical port providing the DBr service.')
vDBrLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrLanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrLanNumber.setDescription('The VLAN ID to be added to or removed from the given DBr service.')
vDBrCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vDBrCommand.setStatus('mandatory')
if mibBuilder.loadTexts: vDBrCommand.setDescription('The command to either add or remove the specified VLAN ID from the given DBr service.')
vDupMacMac = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 16, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDupMacMac.setStatus('mandatory')
if mibBuilder.loadTexts: vDupMacMac.setDescription("The router port's MAC address for which the last duplicate MAC address was detected .")
vDupMacSlot = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDupMacSlot.setStatus('mandatory')
if mibBuilder.loadTexts: vDupMacSlot.setDescription('The slot number (1-based) where duplicate MAC address was last received.')
vDupMacIntf = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDupMacIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vDupMacIntf.setDescription('The interface number (1-based) where duplicate MAC address was last received.')
vDupMacTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDupMacTime.setStatus('mandatory')
if mibBuilder.loadTexts: vDupMacTime.setDescription('The time in seconds that the duplicate MAC address was detected.')
qGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1), )
if mibBuilder.loadTexts: qGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupTable.setDescription('This table lists the 802.1q groups on a port.')
qGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "qGroupSlot"), (0, "XYLAN-VLAN-MIB", "qGroupPort"), (0, "XYLAN-VLAN-MIB", "qGroupGroupId"))
if mibBuilder.loadTexts: qGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupEntry.setDescription('An entry in 802.1q group table.')
qGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupSlot.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupSlot.setDescription('The slot id of the required port.')
qGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupPort.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupPort.setDescription('The physical port number.')
qGroupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupGroupId.setDescription('Group Id on the particular port.')
qGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gstsxylan", 1), ("gstsieee", 2), ("msts", 3), ("ssts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupMode.setDescription('gstsxylan(1) indicates spanning tree support on a gigabit port by proprietary mode and gstsieee(2) indicates spanning tree on a gigabit port by IEEE mode, msts(3) indicates multiple spanning tree support on a 10/100 Mammoth Ethernet port, and ssts(4) indicates single spanning tree support on a 10/100 Mammoth Ethernet port.')
qGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupDescription.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupDescription.setDescription('Textual description of multiple spanning tree.')
qGroupTag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupTag.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupTag.setDescription('Tag used for support multiple spanning tree.')
qGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupPriority.setDescription('Priority used for support multiple spanning tree.')
qGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("delete", 0), ("create", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupAdminStatus.setDescription('Value of 0 indicates the service should be deleted, value of 1 indicates the service should be created.')
qGroupTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGroupTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupTxPkts.setDescription('Gives the number of transmitteded packets.')
qGroupRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGroupRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupRxPkts.setDescription('Gives the number of received packets.')
qGroupTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGroupTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupTxOctets.setDescription('Gives the number of transmitted bytes.')
qGroupRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGroupRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: qGroupRxOctets.setDescription('Gives the number of received bytes.')
vPmapIngressTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1), )
if mibBuilder.loadTexts: vPmapIngressTable.setStatus('mandatory')
if mibBuilder.loadTexts: vPmapIngressTable.setDescription('A list of Port Mapping Ingress port table instance on this physical OmniSwitch or OSR.')
vPmapIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "pMapIngressId"), (0, "XYLAN-VLAN-MIB", "pMapIngressSlot"), (0, "XYLAN-VLAN-MIB", "pMapIngressPort"), (0, "XYLAN-VLAN-MIB", "pMapIngressSrvc"), (0, "XYLAN-VLAN-MIB", "pMapIngressInst"))
if mibBuilder.loadTexts: vPmapIngressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vPmapIngressEntry.setDescription('A Port Mapping Ingress Port entry.')
pMapIngressId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressId.setStatus('mandatory')
if mibBuilder.loadTexts: pMapIngressId.setDescription('A unique number that identifies this Port Mapping on the OmniSwitch or OSR.')
pMapIngressSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pMapIngressSlot.setDescription('A physical slot number on which the Port Mapping Ingress Port is configured.')
pMapIngressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressPort.setStatus('mandatory')
if mibBuilder.loadTexts: pMapIngressPort.setDescription('A physical port number that is associated with the Port Mapping Ingress Port.')
pMapIngressSrvc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressSrvc.setStatus('mandatory')
if mibBuilder.loadTexts: pMapIngressSrvc.setDescription('A service type that is associated with this Port Mapping Ingress Port.')
pMapIngressInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressInst.setStatus('mandatory')
if mibBuilder.loadTexts: pMapIngressInst.setDescription('A Instance that is associated with this Port Mapping Ingress Port.')
pMapIngressAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pMapIngressAdminStatus.setDescription('This object indicates whether to add(1) to or delete(2) from the Port Mapping Ingress List.')
vPmapEgressTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2), )
if mibBuilder.loadTexts: vPmapEgressTable.setStatus('mandatory')
if mibBuilder.loadTexts: vPmapEgressTable.setDescription('A list of Port Mapping Egress port table instance on this physical OmniSwitch or OSR.')
vPmapEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "pMapEgressId"), (0, "XYLAN-VLAN-MIB", "pMapEgressSlot"), (0, "XYLAN-VLAN-MIB", "pMapEgressPort"), (0, "XYLAN-VLAN-MIB", "pMapEgressSrvc"), (0, "XYLAN-VLAN-MIB", "pMapEgressInst"))
if mibBuilder.loadTexts: vPmapEgressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vPmapEgressEntry.setDescription('A Port Mapping Egress Port entry.')
pMapEgressId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressId.setStatus('mandatory')
if mibBuilder.loadTexts: pMapEgressId.setDescription('A unique number that identifies this Port Mapping on the physical OmniSwitch or OSR.')
pMapEgressSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pMapEgressSlot.setDescription('A physical slot number on whitch the Port Mapping Egress Port is configured.')
pMapEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressPort.setStatus('mandatory')
if mibBuilder.loadTexts: pMapEgressPort.setDescription('A physical port number that is associated with the Port Mapping Egress Port.')
pMapEgressSrvc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressSrvc.setStatus('mandatory')
if mibBuilder.loadTexts: pMapEgressSrvc.setDescription('A service type that is associated with this Port Mapping Egress Port.')
pMapEgressInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressInst.setStatus('mandatory')
if mibBuilder.loadTexts: pMapEgressInst.setDescription('A Instance that is associated with this Port Mapping Egress Port.')
pMapEgressAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pMapEgressAdminStatus.setDescription('This object indicates whether to add(1) to or delete(2) from the Port Mapping Egress Port.')
vPmapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 3), )
if mibBuilder.loadTexts: vPmapConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: vPmapConfigTable.setDescription('A list of Port Mapping config table instance on this physical OmniSwitch or OSR.')
vPmapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 3, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "pMapConfigId"))
if mibBuilder.loadTexts: vPmapConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vPmapConfigEntry.setDescription('A Port Mapping configuration table entry.')
pMapConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pMapConfigId.setStatus('mandatory')
if mibBuilder.loadTexts: pMapConfigId.setDescription('A unique number that identifies this Port Mapping with the physical OmniSwitch or OSR.')
pMapConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pMapConfigStatus.setDescription('This object indicates whether to set (1) or delete (2) the port mapping configeration..')
vPmapNextId = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPmapNextId.setStatus('mandatory')
if mibBuilder.loadTexts: vPmapNextId.setDescription('The unique number that identifiers the next Port Mapping Table.')
mibBuilder.exportSymbols("XYLAN-VLAN-MIB", qGroupPriority=qGroupPriority, vBrdgTpFdbRcvPortIF=vBrdgTpFdbRcvPortIF, atmcVLANRuleIndex=atmcVLANRuleIndex, v80210VlanTable=v80210VlanTable, vDBrServicesDescription=vDBrServicesDescription, vStpPortDesignatedPtFuncTyp=vStpPortDesignatedPtFuncTyp, atVLANControlEntry=atVLANControlEntry, vStpPortDesignatedPtSlot=vStpPortDesignatedPtSlot, atvIPRouterProtocol=atvIPRouterProtocol, atProtoRuleGroupId=atProtoRuleGroupId, vIPXRouterNetAddress=vIPXRouterNetAddress, atProtoRuleIndex=atProtoRuleIndex, vSrSapPermitFilter2=vSrSapPermitFilter2, vDBrVlanEntry=vDBrVlanEntry, atBindRuleProtocol=atBindRuleProtocol, atBindRuleBindParameter=atBindRuleBindParameter, qGroupPort=qGroupPort, atvIPRouterVLanGroup=atvIPRouterVLanGroup, qGroupEntry=qGroupEntry, atmcMacRuleTable=atmcMacRuleTable, vStpForwardDelay=vStpForwardDelay, vRipTransmitsFailed=vRipTransmitsFailed, vBrdgTpFdbAddress=vBrdgTpFdbAddress, vRipBadCommand=vRipBadCommand, vTrunkingVlanTable=vTrunkingVlanTable, vStpBridgeHelloTime=vStpBridgeHelloTime, atportRuleGroupId=atportRuleGroupId, vLanInfo=vLanInfo, vIPRouterBcastAddress=vIPRouterBcastAddress, vSrTable=vSrTable, atMacRuleMacAddress=atMacRuleMacAddress, qGroupDescription=qGroupDescription, atUserRuleEntry=atUserRuleEntry, atUserRuleMask=atUserRuleMask, vTrunkingServicesStation=vTrunkingServicesStation, atDHCPMacRuleMacAddressState=atDHCPMacRuleMacAddressState, atportRuleEntry=atportRuleEntry, vLanBridgeType=vLanBridgeType, atmcMacRuleVLANId=atmcMacRuleVLANId, vStpRootPortFuncTyp=vStpRootPortFuncTyp, atUserRuleStatus=atUserRuleStatus, atmcVLANRuleType=atmcVLANRuleType, gmGroupListPortInterface=gmGroupListPortInterface, v80210Slot=v80210Slot, vIPRouterRelayTable=vIPRouterRelayTable, atUserRuleGroupId=atUserRuleGroupId, vRipInfovLanNumber=vRipInfovLanNumber, vStpTopChanges=vStpTopChanges, vPmapIngressEntry=vPmapIngressEntry, vIPRouterRelayParam1=vIPRouterRelayParam1, vStpRootPortFuncTypInst=vStpRootPortFuncTypInst, atDefaultVlan=atDefaultVlan, vIPRouterInfo=vIPRouterInfo, vSrSpecOutFrames=vSrSpecOutFrames, pMapIngressSlot=pMapIngressSlot, pMapEgressAdminStatus=pMapEgressAdminStatus, vIPXRouterDescription=vIPXRouterDescription, XylanVlanAdminStatCodes=XylanVlanAdminStatCodes, vDupMac=vDupMac, atDHCPMacRuleGroupId=atDHCPMacRuleGroupId, pMapIngressSrvc=pMapIngressSrvc, vStpPortEntry=vStpPortEntry, vRipBadVersion=vRipBadVersion, vStpMaxAge=vStpMaxAge, vSrSapFilterEnable=vSrSapFilterEnable, vStpHoldTime=vStpHoldTime, vLanBrdgTpExtendedAgeingTime=vLanBrdgTpExtendedAgeingTime, vIPXRouterFramingType=vIPXRouterFramingType, atDHCPportRuleGroupId=atDHCPportRuleGroupId, qGroupAdminStatus=qGroupAdminStatus, vBrdgStaticPortFuncTypInst=vBrdgStaticPortFuncTypInst, atVLANOperStatus=atVLANOperStatus, atVLANRuleSumTable=atVLANRuleSumTable, vStpPortFuncTyp=vStpPortFuncTyp, vSrSapDenyFilter2=vSrSapDenyFilter2, v80210ServicesStation=v80210ServicesStation, atVLANAdminStatus=atVLANAdminStatus, atvIPRouterAdmStatus=atvIPRouterAdmStatus, vRipInPkts=vRipInPkts, atVLANId=atVLANId, vSrInstance=vSrInstance, vLanOperStatus=vLanOperStatus, atProtoRuleTable=atProtoRuleTable, v80210ServicesDescription=v80210ServicesDescription, vPmapNextId=vPmapNextId, vBrdgTpAgingTime=vBrdgTpAgingTime, atvIPRouterNetAddress=atvIPRouterNetAddress, gmAutoServiceAdminState=gmAutoServiceAdminState, gmGroupListTable=gmGroupListTable, atvIPRouterSubNetMask=atvIPRouterSubNetMask, gmAutoServiceSecondaryPort=gmAutoServiceSecondaryPort, vIPRouterEntry=vIPRouterEntry, atvIPRouterFramingType=atvIPRouterFramingType, atvIPXRouterVLanGroup=atvIPXRouterVLanGroup, v80210Command=v80210Command, atProtoRuleStatus=atProtoRuleStatus, atVLANDesc=atVLANDesc, atUserRuleTable=atUserRuleTable, gmAutoServicePrimarySlot=gmAutoServicePrimarySlot, qGroupTxPkts=qGroupTxPkts, vBrdgStaticPortIF=vBrdgStaticPortIF, vSrSapPermitFilter1=vSrSapPermitFilter1, atvIPXRouterOperStatus=atvIPXRouterOperStatus, atvIPXRouterAdmStatus=atvIPXRouterAdmStatus, atvIPXSrcRteType=atvIPXSrcRteType, vBrdgTpFdbRcvStatus=vBrdgTpFdbRcvStatus, vBrdgTpFdbRcvVLANMembership=vBrdgTpFdbRcvVLANMembership, vPmapIngressTable=vPmapIngressTable, vDupMacMac=vDupMacMac, atVLANControlTable=atVLANControlTable, vSrPortEntry=vSrPortEntry, vIPRouterRelayMode=vIPRouterRelayMode, atNetRuleGroupId=atNetRuleGroupId, atmcMacRuleGroupId=atmcMacRuleGroupId, atVLANRuleSumGroupId=atVLANRuleSumGroupId, vStpPortForwardTransitions=vStpPortForwardTransitions, vStpHelloTime=vStpHelloTime, vSrLargestFrame=vSrLargestFrame, atNetRuleNetAddr=atNetRuleNetAddr, vLanMobileGroup=vLanMobileGroup, gmAutoServiceEntry=gmAutoServiceEntry, atmcMacRuleMacAddressState=atmcMacRuleMacAddressState, vIPXRouterEntry=vIPXRouterEntry, atBindRulePortId=atBindRulePortId, vTrunkingStation=vTrunkingStation, vSrDuplicateSegmentDiscards=vSrDuplicateSegmentDiscards, vLanCurrentNumber=vLanCurrentNumber, vStpPortDesignatedRoot=vStpPortDesignatedRoot, vBrdgInfo=vBrdgInfo, atDHCPportRuleVLANId=atDHCPportRuleVLANId, vBrdgTpFdbDupStatus=vBrdgTpFdbDupStatus, vStpPortPathCost=vStpPortPathCost, atmcVLANAdminStatus=atmcVLANAdminStatus, v80210LanNumber=v80210LanNumber, atUserRuleValue=atUserRuleValue, vLanTable=vLanTable, atportRuleVLANId=atportRuleVLANId, qGroupMode=qGroupMode, vStpPortDesignatedPtPrio=vStpPortDesignatedPtPrio, atDHCPportRuleTable=atDHCPportRuleTable, atvIPXRouterProtocol=atvIPXRouterProtocol, atMacRuleVLANId=atMacRuleVLANId, atMacRuleTable=atMacRuleTable, atmcportRuleIdx=atmcportRuleIdx, atMcastRuleIndex=atMcastRuleIndex, vSrFuncType=vSrFuncType, atMcastRuleVLANId=atMcastRuleVLANId, vIPXRouterVLan=vIPXRouterVLan, vIPRouterFramingType=vIPRouterFramingType, atProtoRuleEntry=atProtoRuleEntry, vIPXRouterTable=vIPXRouterTable, pMapIngressAdminStatus=pMapIngressAdminStatus, atBindRuleIndex=atBindRuleIndex, vSrAREblock=vSrAREblock, vLanAuthGroup=vLanAuthGroup, vIPRouterRelayDescription=vIPRouterRelayDescription, vStpRootPortSlot=vStpRootPortSlot, pMapEgressSlot=pMapEgressSlot, atvIPXRouterEntry=atvIPXRouterEntry, atDHCPportRulePortState=atDHCPportRulePortState, vLanFloodOverride=vLanFloodOverride, vLanBridgeAddress=vLanBridgeAddress, vStpPortTable=vStpPortTable, atDHCPportRuleEntry=atDHCPportRuleEntry, gmDefGroup=gmDefGroup, atMcastRuleGroupId=atMcastRuleGroupId, atmcportRulePortState=atmcportRulePortState, vPmapEgressEntry=vPmapEgressEntry, pMapEgressPort=pMapEgressPort, groupMobilityStatus=groupMobilityStatus, vIPRouterRelayService=vIPRouterRelayService, atMcastRuleMacAddressState=atMcastRuleMacAddressState, vRipInfo=vRipInfo, atportRuleTable=atportRuleTable, atDHCPportRulePortId=atDHCPportRulePortId, XylanVlanModes=XylanVlanModes, v80210ServicesTable=v80210ServicesTable, pMapIngressInst=pMapIngressInst, vBrdgStaticPortFuncTyp=vBrdgStaticPortFuncTyp, atMacRuleEntry=atMacRuleEntry, vIPRouterProtocol=vIPRouterProtocol, vIPXSrcRteType=vIPXSrcRteType, vSrSTESpanMode=vSrSTESpanMode, gmAutoServiceNumber=gmAutoServiceNumber, atportRuleIdx=atportRuleIdx, atmcportRuleEntry=atmcportRuleEntry, atmcportRuleTable=atmcportRuleTable, vSrApeOutFrames=vSrApeOutFrames, vTrunking=vTrunking, vSrInvalidRif=vSrInvalidRif, vIPRouterOperStatus=vIPRouterOperStatus, vRipBadSize=vRipBadSize, atportRulePortId=atportRulePortId, v80210ServicesEntry=v80210ServicesEntry, pMapEgressId=pMapEgressId, vIPXRouterProtocol=vIPXRouterProtocol, atVLANRuleType=atVLANRuleType, vIPXRouterInfo=vIPXRouterInfo, vSrSapDenyFilter1=vSrSapDenyFilter1, vStpProtocolSpecification=vStpProtocolSpecification, vBrdgTpFdbLastSeenTime=vBrdgTpFdbLastSeenTime, vBrdgTpFdbGroupId=vBrdgTpFdbGroupId, vIPRouterAdmStatus=vIPRouterAdmStatus, atmcportRuleGroupId=atmcportRuleGroupId, qGroupRxPkts=qGroupRxPkts, vLanRouterAddress=vLanRouterAddress, atvIPRouterOperStatus=atvIPRouterOperStatus, vSrHopCountExceededDiscards=vSrHopCountExceededDiscards, atVLANGroupId=atVLANGroupId, vLanAuthGroupProtocol=vLanAuthGroupProtocol, vIPXRouterOperStatus=vIPXRouterOperStatus, atmcMacRuleIndex=atmcMacRuleIndex, vDBrStation=vDBrStation, atBindRuleTable=atBindRuleTable, gmAutoServiceActivePort=gmAutoServiceActivePort, vBrdgTpFdbEntry=vBrdgTpFdbEntry, v80210VlanEntry=v80210VlanEntry, vDBrLanNumber=vDBrLanNumber, vLanMode=vLanMode, vBrdgStaticTable=vBrdgStaticTable, atMacRuleMacAddressState=atMacRuleMacAddressState, vLanEntry=vLanEntry, atvIPRouterTable=atvIPRouterTable, vIPRouterNetAddress=vIPRouterNetAddress, VIPRouterRelayServType=VIPRouterRelayServType, vStpPortState=vStpPortState, vStpRootPortIF=vStpRootPortIF, atmcVLANGroupId=atmcVLANGroupId, atBindRuleEntry=atBindRuleEntry, vDBr=vDBr, gmAutoServiceOperState=gmAutoServiceOperState, atvIPXRouterTable=atvIPXRouterTable, vSrPortType=vSrPortType, vStpPortDesignatedPtFuncTypInst=vStpPortDesignatedPtFuncTypInst, vSrHopCountIn=vSrHopCountIn, v8021Q=v8021Q, vPmap=vPmap, atmcMacRuleMacAddress=atmcMacRuleMacAddress, vDupMacIntf=vDupMacIntf, vSrLanIdMismatches=vSrLanIdMismatches, v80210ServicesSlot=v80210ServicesSlot, vStpBridgeMaxAge=vStpBridgeMaxAge, atvIPXRouterDescription=atvIPXRouterDescription, atNetRuleProtocolId=atNetRuleProtocolId, vTrunkingServicesEntry=vTrunkingServicesEntry, atmcVLANId=atmcVLANId, vAutoTracker=vAutoTracker, vBrdgTpFdbTable=vBrdgTpFdbTable, vStpPortPriority=vStpPortPriority, atBindRuleMacAddress=atBindRuleMacAddress, vStpBridgeForwardDelay=vStpBridgeForwardDelay, vIPRouterSubNetMask=vIPRouterSubNetMask, vDBrServicesTable=vDBrServicesTable, vStpPortDesignatedBridge=vStpPortDesignatedBridge)
mibBuilder.exportSymbols("XYLAN-VLAN-MIB", gmAutoServicePrimaryPort=gmAutoServicePrimaryPort, vTrunkingLanNumber=vTrunkingLanNumber, atNetRuleEntry=atNetRuleEntry, atmcVLANRuleSumTable=atmcVLANRuleSumTable, gmAutoServiceGroupId=gmAutoServiceGroupId, qGroupGroupId=qGroupGroupId, atmcMacRuleEntry=atmcMacRuleEntry, vSrBridgeNum=vSrBridgeNum, vSrHopCount=vSrHopCount, qGroupSlot=qGroupSlot, gmAutoServiceType=gmAutoServiceType, pMapIngressId=pMapIngressId, atmcVLANDesc=atmcVLANDesc, atVLANRuleIndex=atVLANRuleIndex, atvIPRouterEntry=atvIPRouterEntry, pMapConfigStatus=pMapConfigStatus, NetNumber=NetNumber, qGroupTxOctets=qGroupTxOctets, vStpPortIF=vStpPortIF, vLanDescription=vLanDescription, atVLANRuleSumEntry=atVLANRuleSumEntry, vDupMacSlot=vDupMacSlot, vLanAdmStatus=vLanAdmStatus, atmcVLANControlTable=atmcVLANControlTable, vDBrSlot=vDBrSlot, vSrSteOutFrames=vSrSteOutFrames, vSrBridgeLfMode=vSrBridgeLfMode, pMapIngressPort=pMapIngressPort, vPmapConfigEntry=vPmapConfigEntry, vIPRouterRelayEntry=vIPRouterRelayEntry, vStpPortSlot=vStpPortSlot, atBindRuleIPAddress=atBindRuleIPAddress, atBindRuleGroupId=atBindRuleGroupId, vRipInfoTable=vRipInfoTable, atvIPRouterDescription=atvIPRouterDescription, vSrDupLanIdOrTreeErrors=vSrDupLanIdOrTreeErrors, vRipBadMetric=vRipBadMetric, atNetRuleVLANId=atNetRuleVLANId, atProtoRuleVLANId=atProtoRuleVLANId, gmAutoServiceName=gmAutoServiceName, vDBrServicesEntry=vDBrServicesEntry, vStpInfo=vStpInfo, XylanVlanOperStatCodes=XylanVlanOperStatCodes, gmAutoServiceSecondarySlot=gmAutoServiceSecondarySlot, vTrunkingServicesDescription=vTrunkingServicesDescription, gmAutoServiceActiveSlot=gmAutoServiceActiveSlot, vStpTimeSinceTopologyChange=vStpTimeSinceTopologyChange, atBindRuleStatus=atBindRuleStatus, atDHCPMacRuleMacAddress=atDHCPMacRuleMacAddress, atmcVLANRuleSumEntry=atmcVLANRuleSumEntry, vTrunkingServicesTable=vTrunkingServicesTable, vBrdgTpATVLANAgeingTime=vBrdgTpATVLANAgeingTime, atmcVLANRuleSumGroupId=atmcVLANRuleSumGroupId, vTrunkingCommand=vTrunkingCommand, vBrdgStaticAddress=vBrdgStaticAddress, vTrunkingServicesSlot=vTrunkingServicesSlot, vBrdgTpLearnEntryDiscards=vBrdgTpLearnEntryDiscards, vSrInterface=vSrInterface, atUserRuleOffset=atUserRuleOffset, atDHCPMacRuleTable=atDHCPMacRuleTable, vPmapConfigTable=vPmapConfigTable, vSrLocalSegment=vSrLocalSegment, vSrSpecInFrames=vSrSpecInFrames, gmGroupListEntry=gmGroupListEntry, atVLANRuleSubIndex=atVLANRuleSubIndex, vLanPriority=vLanPriority, atportRulePortState=atportRulePortState, atDHCPMacRuleVLANId=atDHCPMacRuleVLANId, atNetRuleTable=atNetRuleTable, gmAutoServiceTranslations=gmAutoServiceTranslations, vLanNextFreeNumber=vLanNextFreeNumber, vBrdgStaticPortSlot=vBrdgStaticPortSlot, vRipBadAddr=vRipBadAddr, atNetRuleStatus=atNetRuleStatus, qGroupTable=qGroupTable, vTrunkingVlanEntry=vTrunkingVlanEntry, vIPRouterDescription=vIPRouterDescription, vLanStpStatus=vLanStpStatus, v80210Station=v80210Station, vTrunkingSlot=vTrunkingSlot, vRipNonZero=vRipNonZero, atVLANRuleSumVLANId=atVLANRuleSumVLANId, atmcportRulePortId=atmcportRulePortId, atMcastRuleTable=atMcastRuleTable, atvIPXRouterFramingType=atvIPXRouterFramingType, atvIPRouterInfo=atvIPRouterInfo, vRipInfoEntry=vRipInfoEntry, vStpPortEnable=vStpPortEnable, vBrdgStaticEntry=vBrdgStaticEntry, vDBrServicesBridgeID=vDBrServicesBridgeID, atMacRuleGroupId=atMacRuleGroupId, atDHCPMacRuleIndex=atDHCPMacRuleIndex, v80210=v80210, qGroupRxOctets=qGroupRxOctets, vStpLanMode=vStpLanMode, vBrdgTpFdbRcvPortFuncTyp=vBrdgTpFdbRcvPortFuncTyp, atvIPRouterVLan=atvIPRouterVLan, atMcastRuleMacAddress=atMcastRuleMacAddress, vStpPriority=vStpPriority, vDBrCommand=vDBrCommand, atmcVLANOperStatus=atmcVLANOperStatus, atvIPRouterRelayServicesFwd=atvIPRouterRelayServicesFwd, vBrdgStaticStatus=vBrdgStaticStatus, vStpDesignatedRoot=vStpDesignatedRoot, vIPXRouterAdmStatus=vIPXRouterAdmStatus, vSrVirtualRing=vSrVirtualRing, vBrdgTpFdbRcvPortFuncTypInst=vBrdgTpFdbRcvPortFuncTypInst, v80210ServicesBridgeID=v80210ServicesBridgeID, vRipOutPkts=vRipOutPkts, atmcVLANRuleSubIndex=atmcVLANRuleSubIndex, vSrSteInFrames=vSrSteInFrames, vSrSlot=vSrSlot, vPmapEgressTable=vPmapEgressTable, vBrdgTpFdbRcvPortSlot=vBrdgTpFdbRcvPortSlot, atvIPXRouterNetAddress=atvIPXRouterNetAddress, atMcastRuleEntry=atMcastRuleEntry, atBindRuleVlanId=atBindRuleVlanId, vIPRouterRelayParam2=vIPRouterRelayParam2, vStpStatus=vStpStatus, vLanNumber=vLanNumber, vDBrServicesStation=vDBrServicesStation, vIPRouterVLan=vIPRouterVLan, atUserRuleIndex=atUserRuleIndex, gmAutoServiceTable=gmAutoServiceTable, atDHCPportRuleIdx=atDHCPportRuleIdx, vStpBridgeAddress=vStpBridgeAddress, vIPRouterTable=vIPRouterTable, qGroupTag=qGroupTag, vRipBadFamily=vRipBadFamily, vDBrServicesSlot=vDBrServicesSlot, pMapConfigId=pMapConfigId, vTrunkingServicesBridgeID=vTrunkingServicesBridgeID, atUserRuleVLANId=atUserRuleVLANId, atmcVLANControlEntry=atmcVLANControlEntry, vIPRouterRipConfigMode=vIPRouterRipConfigMode, vStpPortDesignatedPtIF=vStpPortDesignatedPtIF, vIPRouterRelayNextHop=vIPRouterRelayNextHop, vStpRootCost=vStpRootCost, vStpPortDesignatedCost=vStpPortDesignatedCost, atvIPRouterBcastAddress=atvIPRouterBcastAddress, atvIPRouterRipConfigMode=atvIPRouterRipConfigMode, atvIPXRouterVLan=atvIPXRouterVLan, gmGroupListGroupId=gmGroupListGroupId, atMacRuleIndex=atMacRuleIndex, atmcVLANRuleSumVLANId=atmcVLANRuleSumVLANId, pMapEgressInst=pMapEgressInst, vStpPortFuncTypInst=vStpPortFuncTypInst, pMapEgressSrvc=pMapEgressSrvc, vDBrVlanTable=vDBrVlanTable, gmMoveToDefGroup=gmMoveToDefGroup, vSr=vSr, atNetRuleIndex=atNetRuleIndex, atDHCPMacRuleEntry=atDHCPMacRuleEntry, vDupMacTime=vDupMacTime, gmGroupListPortSlot=gmGroupListPortSlot, atvIPXRouterInfo=atvIPXRouterInfo, vSrApeInFrames=vSrApeInFrames, atProtoRule=atProtoRule, gmAutoServiceIndex=gmAutoServiceIndex, atmcportRuleVLANId=atmcportRuleVLANId)
