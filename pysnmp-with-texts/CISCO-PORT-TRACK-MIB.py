#
# PySNMP MIB module CISCO-PORT-TRACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PORT-TRACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:09:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
VsanIndex, = mibBuilder.importSymbols("CISCO-ST-TC", "VsanIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, ObjectIdentity, IpAddress, Counter32, NotificationType, MibIdentifier, iso, Counter64, ModuleIdentity, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "ObjectIdentity", "IpAddress", "Counter32", "NotificationType", "MibIdentifier", "iso", "Counter64", "ModuleIdentity", "TimeTicks", "Integer32")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
ciscoPortTrackMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 437))
ciscoPortTrackMIB.setRevisions(('2005-04-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPortTrackMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoPortTrackMIB.setLastUpdated('200504270000Z')
if mibBuilder.loadTexts: ciscoPortTrackMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoPortTrackMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoPortTrackMIB.setDescription("A MIB to configure the Port-Track feature. When a link goes down, all the services which depend on the link are notified of the outage. The loss of this link may be an indirect failure to the end devices attached to the switch. The concept behind the Port-Track feature is to create a direct failure on the ports connected to end devices on event of such indirect failures. One more ports can be 'tracked' in terms of their operational status. The cptPortTrackTable lets the user associate which port(s) need to be tracked to the ports that will be tracking them. cptPortForceShutTable, lets the user configure the forced-shut mode of the linked-port.")
ciscoPortTrackObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 437, 1))
cptMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 437, 2))
cptConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1))
cptPortTrackTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 1), )
if mibBuilder.loadTexts: cptPortTrackTable.setStatus('current')
if mibBuilder.loadTexts: cptPortTrackTable.setDescription('A table listing the linked ports and the configurations of their associated tracked ports. The configuration of each tracked port includes its interface index as well as a VSAN index if only one VSAN is to be tracked.')
cptPortTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-PORT-TRACK-MIB", "cptPortTrackLinkedPort"), (0, "CISCO-PORT-TRACK-MIB", "cptPortTrackTrackedPort"))
if mibBuilder.loadTexts: cptPortTrackEntry.setStatus('current')
if mibBuilder.loadTexts: cptPortTrackEntry.setDescription('An entry in the cptPortTrack Table.')
cptPortTrackLinkedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cptPortTrackLinkedPort.setStatus('current')
if mibBuilder.loadTexts: cptPortTrackLinkedPort.setDescription('The ifIndex of the port that will be tracking the cptPortTrackTrackedPort.')
cptPortTrackTrackedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cptPortTrackTrackedPort.setStatus('current')
if mibBuilder.loadTexts: cptPortTrackTrackedPort.setDescription('The ifIndex of the port that needs to be tracked.')
cptPortTrackVsanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleVsan", 1), ("allVsans", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cptPortTrackVsanType.setStatus('current')
if mibBuilder.loadTexts: cptPortTrackVsanType.setDescription("This objects denotes whether a single VSAN is being tracked on cptPortTrackTrackedPort or all the VSANs on that port are tracked. If the set to 'singleVsan', then the VSAN that will be tracked will be denoted by the instance of cptPortTrackVsanIndex.")
cptPortTrackVsanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 1, 1, 4), VsanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cptPortTrackVsanIndex.setStatus('current')
if mibBuilder.loadTexts: cptPortTrackVsanIndex.setDescription("Valid only if the instance of cptPortTrackVsanType is 'singleVsan'. If cptPortTrackVsanType is 'allVsans', the instance of this object is irrelevant. ")
cptPortTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cptPortTrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: cptPortTrackRowStatus.setDescription("This object is used to create or delete the row. When creating a row, the object cptPortTrackVsanType must be specified. If the value of cptPortTrackVsanType is 'singleVsan' then the object cptPortTrackVsanIndex also must be specified. If the value of cptPortTrackVsanType is 'allVsans', then cptPortTrackVsanIndex should not be specified in the create request.")
cptPortForceShutTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 2), )
if mibBuilder.loadTexts: cptPortForceShutTable.setStatus('current')
if mibBuilder.loadTexts: cptPortForceShutTable.setDescription('A table to configure the forced-shut state for each linked port.')
cptPortForceShutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-PORT-TRACK-MIB", "cptPortTrackLinkedPort"))
if mibBuilder.loadTexts: cptPortForceShutEntry.setStatus('current')
if mibBuilder.loadTexts: cptPortForceShutEntry.setDescription('An entry in the cptPortForceShutTable.')
cptPortForceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 437, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cptPortForceState.setStatus('current')
if mibBuilder.loadTexts: cptPortForceState.setDescription("The forced-shut state of the linked port. When all the tracked ports corresponding to cptPortTrackLinkedPort, go down, cptPortTrackLinkedPort is brought down. The cptPortForceState, determines the manner in which this operation is performed. If 'false', cptPortTrackLinkedPort is brought down operationally only and is brought up again as soon as any one of the tracked ports comes up. If 'true', cptPortTrackLinkedPort is brought down administratively as well and the user has to manually bring the port up. i.e. the ifAdminStatus cptPortTrackLinkedPort needs to be set to 'up' by the user.")
cptMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 437, 2, 1))
cptMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 437, 2, 2))
cptMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 437, 2, 1, 1)).setObjects(("CISCO-PORT-TRACK-MIB", "cptTrackGroup"), ("CISCO-PORT-TRACK-MIB", "cptShutGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cptMIBCompliance = cptMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cptMIBCompliance.setDescription('The compliance statement for entities which implement the portrack management mib.')
cptTrackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 437, 2, 2, 1)).setObjects(("CISCO-PORT-TRACK-MIB", "cptPortTrackVsanType"), ("CISCO-PORT-TRACK-MIB", "cptPortTrackVsanIndex"), ("CISCO-PORT-TRACK-MIB", "cptPortTrackRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cptTrackGroup = cptTrackGroup.setStatus('current')
if mibBuilder.loadTexts: cptTrackGroup.setDescription('Object group for the porttrack feature.')
cptShutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 437, 2, 2, 2)).setObjects(("CISCO-PORT-TRACK-MIB", "cptPortForceState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cptShutGroup = cptShutGroup.setStatus('current')
if mibBuilder.loadTexts: cptShutGroup.setDescription('Object group for the forced-shut feature.')
mibBuilder.exportSymbols("CISCO-PORT-TRACK-MIB", PYSNMP_MODULE_ID=ciscoPortTrackMIB, ciscoPortTrackObjects=ciscoPortTrackObjects, cptTrackGroup=cptTrackGroup, ciscoPortTrackMIB=ciscoPortTrackMIB, cptPortForceShutEntry=cptPortForceShutEntry, cptPortTrackTrackedPort=cptPortTrackTrackedPort, cptMIBCompliance=cptMIBCompliance, cptPortTrackVsanType=cptPortTrackVsanType, cptShutGroup=cptShutGroup, cptConfig=cptConfig, cptPortTrackEntry=cptPortTrackEntry, cptPortForceShutTable=cptPortForceShutTable, cptMIBGroups=cptMIBGroups, cptMIBConformance=cptMIBConformance, cptPortTrackVsanIndex=cptPortTrackVsanIndex, cptPortTrackRowStatus=cptPortTrackRowStatus, cptPortForceState=cptPortForceState, cptPortTrackLinkedPort=cptPortTrackLinkedPort, cptMIBCompliances=cptMIBCompliances, cptPortTrackTable=cptPortTrackTable)
