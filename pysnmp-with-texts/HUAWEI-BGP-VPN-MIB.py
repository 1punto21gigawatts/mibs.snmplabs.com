#
# PySNMP MIB module HUAWEI-BGP-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-BGP-VPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
mplsL3VpnVrfPerfCurrNumRoutes, mplsL3VpnVrfConfMidRteThresh = mibBuilder.importSymbols("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes", "mplsL3VpnVrfConfMidRteThresh")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, ModuleIdentity, Gauge32, NotificationType, iso, Counter32, MibIdentifier, IpAddress, TimeTicks, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "ModuleIdentity", "Gauge32", "NotificationType", "iso", "Counter32", "MibIdentifier", "IpAddress", "TimeTicks", "Integer32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hwBgpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177))
hwBgpMIB.setRevisions(('2015-02-10 10:10', '2015-01-31 14:35', '2015-01-19 11:15', '2014-11-20 11:15', '2014-06-18 11:40', '2014-05-30 15:40', '2014-03-18 15:02', '2014-03-10 09:55', '2008-12-26 09:55',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwBgpMIB.setRevisionsDescriptions(("Modify trap nodes name, include: 'hwBgpPeerSessionMaxNum', 'hwBgpPeerSessionExceed', 'hwBgpPeerSessionExceedClear'", "Add two trap node for sending the number threshold alarms of BGP peers, include: 'hwBgpPeerSessionNumMaxNum', 'hwBgpPeerSessionNumMaxExceed', 'hwBgpPeerSessionNumMaxClear' ", 'Update', 'Update', "Add some trap nodes for sending BGP routes threshold alarms, include: 'hwBgpRouteThresholdExceed', 'hwBgpRouteThresholdClear', 'hwBgpRouteMaxExceed', 'hwBgpRouteMaxClear'. ", "Add some MIB nodes for getting BGP protocol resource information, include: 'hwBgpPeerSessionNum', 'hwIBgpPeerSessionNum', 'hwEBgpPeerSessionNum', 'hwConfiguredVrfs', 'hwConfiguredIpv4Vrfs','hwConfiguredIpv6Vrfs'.", 'Update', 'Update', 'Update',))
if mibBuilder.loadTexts: hwBgpMIB.setLastUpdated('201502101010Z')
if mibBuilder.loadTexts: hwBgpMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwBgpMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwBgpMIB.setDescription('The Mib module for management of BGP/VPN. Huawei Technologies co.,Ltd. Supplementary information may be available at: http://www.huawei.com')
class HWBgpAfi(TextualConvention, Integer32):
    description = 'Address Family Identifier(AFI) for BGP peer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 25, 196))
    namedValues = NamedValues(("ipv4", 1), ("ipv6", 2), ("vpls", 25), ("l2vpn", 196))

class HWBgpSafi(TextualConvention, Integer32):
    description = 'Subsequent Address Family Identifier(SAFI) for BGP peer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 65, 66, 128, 132))
    namedValues = NamedValues(("unicast", 1), ("multicast", 2), ("mpls", 4), ("mcast-vpn", 5), ("vpls", 65), ("mdt", 66), ("vpn", 128), ("route-target", 132))

class MplsL3VpnName(TextualConvention, OctetString):
    reference = "RFC 2685 Fox B., et al, 'Virtual Private Networks Identifier', September 1999."
    description = 'An identifier that is assigned to each MPLS/BGP VPN and is used to uniquely identify it. This is assigned by the system operator or NMS and SHOULD be unique throughout the MPLS domain. If this is the case, then this identifier can then be used at any LSR within a specific MPLS domain to identify this MPLS/BGP VPN. It may also be possible to preserve the uniqueness of this identifier across MPLS domain boundaries, in which case this identifier can then be used to uniquely identify MPLS/BGP VPNs on a more global basis. This object MAY be set to the VPN ID as defined in RFC 2685.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

hwBgpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1))
hwBgpPeers = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1))
hwBgpPeerAddrFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 1), )
if mibBuilder.loadTexts: hwBgpPeerAddrFamilyTable.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerAddrFamilyTable.setDescription('BGP Peer Address Family Table. This table contains information about the address family for BGP peers.')
hwBgpPeerAddrFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-BGP-VPN-MIB", "hwBgpPeerInstanceId"), (0, "HUAWEI-BGP-VPN-MIB", "hwBgpPeerAddrFamilyAfi"), (0, "HUAWEI-BGP-VPN-MIB", "hwBgpPeerAddrFamilySafi"), (0, "HUAWEI-BGP-VPN-MIB", "hwBgpPeerType"), (0, "HUAWEI-BGP-VPN-MIB", "hwBgpPeerIPAddr"))
if mibBuilder.loadTexts: hwBgpPeerAddrFamilyEntry.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerAddrFamilyEntry.setDescription('The information about the address family for BGP peers.')
hwBgpPeerInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwBgpPeerInstanceId.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerInstanceId.setDescription('The index of the instance for the remote BGP peer.')
hwBgpPeerAddrFamilyAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 1, 1, 2), HWBgpAfi())
if mibBuilder.loadTexts: hwBgpPeerAddrFamilyAfi.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerAddrFamilyAfi.setDescription('The index of the address family for the remote BGP peer.')
hwBgpPeerAddrFamilySafi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 1, 1, 3), HWBgpSafi())
if mibBuilder.loadTexts: hwBgpPeerAddrFamilySafi.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerAddrFamilySafi.setDescription('The index of the sub-address family for the remote peer.')
hwBgpPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 1, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hwBgpPeerType.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerType.setDescription('The type of the address family for the remote BGP peer.')
hwBgpPeerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 1, 1, 5), InetAddress())
if mibBuilder.loadTexts: hwBgpPeerIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerIPAddr.setDescription('The IP address of the remote BGP peer.')
hwBgpPeerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerVrfName.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerVrfName.setDescription('The name of the VPN instance.')
hwBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2), )
if mibBuilder.loadTexts: hwBgpPeerTable.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerTable.setDescription('BGP Peer Table. This table contains information about the connections for BGP peers.')
hwBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1), )
hwBgpPeerAddrFamilyEntry.registerAugmentions(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerEntry"))
hwBgpPeerEntry.setIndexNames(*hwBgpPeerAddrFamilyEntry.getIndexNames())
if mibBuilder.loadTexts: hwBgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerEntry.setDescription('The information about the connections with BGP peers.')
hwBgpPeerNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerNegotiatedVersion.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerNegotiatedVersion.setDescription('The version negotiated with the remote BGP peer.')
hwBgpPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerRemoteAs.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRemoteAs.setDescription('The AS number of the remote BGP peer.')
hwBgpPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRemoteAddr.setDescription('The IP address of the remote BGP peer.')
hwBgpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerState.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerState.setDescription('The status of the remote BGP peer, including: 1: Idle(1) 2: Connect(2) 3: Active(3) 4: Opensent(4) 5: Openconfirm(5) 6: Established(6) ')
hwBgpPeerFsmEstablishedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBgpPeerFsmEstablishedCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerFsmEstablishedCounter.setDescription('The Counter That Records the Times the Remote BGP Peer Is Correctly Connected The counter is increased by one if the remote BGP peer is correctly connected once. The counter could be set to zero.')
hwBgpPeerFsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerFsmEstablishedTime.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerFsmEstablishedTime.setDescription('The counter that records the times the remote BGP peer is correctly connected.')
hwBgpPeerGRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("peerNotBeingHelped", 1), ("peerRestarting", 2), ("peerFinishRestart", 3), ("peerHelping", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBgpPeerGRStatus.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerGRStatus.setDescription('Graceful restart status of the BGP peer, including: 1: peerNotBeingHelped, indicating that the BGP peer will not be helped during restarting. 2: peerRestarting, indicating that the BGP peer is detected restarting. 3: peerFinishRestart, indicating that the BGP peer finishes the latest GR. 4: peerHelping, indicating that the BGP peer is helping the local end to perform GR.')
hwBgpPeerLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerLastError.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerLastError.setDescription('The last error code and subcode seen by this peer on this connection. If no error has occurred, this field is zero. Otherwise, the first byte of this two byte OCTET STRING contains the error code, and the second byte contains the subcode.')
hwBgpPeerUnAvaiReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerUnAvaiReason.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerUnAvaiReason.setDescription('Bgp peer down reason including: 1: Configuration lead peer down(1) 2: Receive notification(2) 3: Receive error packet(3) 4: Hold timer expire(4) 5: Remote peer not reachable(5) 6: Direct connect-interface down(6) 7: Route limit(7)')
hwBgpPeerRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 3), )
if mibBuilder.loadTexts: hwBgpPeerRouteTable.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRouteTable.setDescription('Route table for BGP Peers This table contains routing information about the BGP peers.')
hwBgpPeerRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 3, 1), )
hwBgpPeerAddrFamilyEntry.registerAugmentions(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerRouteEntry"))
hwBgpPeerRouteEntry.setIndexNames(*hwBgpPeerAddrFamilyEntry.getIndexNames())
if mibBuilder.loadTexts: hwBgpPeerRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRouteEntry.setDescription('The routing information about the BGP peers.')
hwBgpPeerPrefixRcvCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerPrefixRcvCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerPrefixRcvCounter.setDescription('The number of prefixes received from the remote BGP peer.')
hwBgpPeerPrefixActiveCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerPrefixActiveCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerPrefixActiveCounter.setDescription('The number of active prefixes received from the remote BGP peer.')
hwBgpPeerPrefixAdvCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerPrefixAdvCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerPrefixAdvCounter.setDescription('The number of prefixes sent to the remote BGP peer.')
hwBgpPeerMessageTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4), )
if mibBuilder.loadTexts: hwBgpPeerMessageTable.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerMessageTable.setDescription('Protocol Packet Table for BGP Peers This table contains information about the protocol packets of BGP peers.')
hwBgpPeerMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1), )
hwBgpPeerAddrFamilyEntry.registerAugmentions(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerMessageEntry"))
hwBgpPeerMessageEntry.setIndexNames(*hwBgpPeerAddrFamilyEntry.getIndexNames())
if mibBuilder.loadTexts: hwBgpPeerMessageEntry.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerMessageEntry.setDescription('The information about the protocol packets of the BGP peers.')
hwBgpPeerInTotalMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerInTotalMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerInTotalMsgCounter.setDescription('The total number of protocol packets received from the remote BGP peer.')
hwBgpPeerOutTotalMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerOutTotalMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerOutTotalMsgCounter.setDescription('The total number of protocol packets sent to the remote BGP peer.')
hwBgpPeerInOpenMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerInOpenMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerInOpenMsgCounter.setDescription('The total number of Open packets received from the remote BGP peer.')
hwBgpPeerInUpdateMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerInUpdateMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerInUpdateMsgCounter.setDescription('The total number of Update packets received from the remote BGP peer.')
hwBgpPeerInNotificationMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerInNotificationMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerInNotificationMsgCounter.setDescription('The total number of Notification packets received from the remote BGP peer.')
hwBgpPeerInKeepAliveMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerInKeepAliveMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerInKeepAliveMsgCounter.setDescription('The total number of Keepalive packets received from the remote BGP peer.')
hwBgpPeerInRouteFreshMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerInRouteFreshMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerInRouteFreshMsgCounter.setDescription('The total number of Route-Refresh packets received from the remote BGP peer.')
hwBgpPeerOutOpenMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerOutOpenMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerOutOpenMsgCounter.setDescription('The total number of Open packets sent to the remote BGP peer.')
hwBgpPeerOutUpdateMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerOutUpdateMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerOutUpdateMsgCounter.setDescription('The total number of Update packets sent to the remote BGP peer.')
hwBgpPeerOutNotificationMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerOutNotificationMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerOutNotificationMsgCounter.setDescription('The total number of Notification packets sent to the remote BGP peer.')
hwBgpPeerOutKeepAliveMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerOutKeepAliveMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerOutKeepAliveMsgCounter.setDescription('The total number of Keepalive packets sent to the remote BGP peer.')
hwBgpPeerOutRouteFreshMsgCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerOutRouteFreshMsgCounter.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerOutRouteFreshMsgCounter.setDescription('The total number of Route-Refresh packets sent to the remote BGP peer.')
hwBgpPeerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 5), )
if mibBuilder.loadTexts: hwBgpPeerConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerConfigTable.setDescription('BGP Peer Configuration Table. This table contains the configurations of BGP peers.')
hwBgpPeerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 5, 1), )
hwBgpPeerAddrFamilyEntry.registerAugmentions(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigEntry"))
hwBgpPeerConfigEntry.setIndexNames(*hwBgpPeerAddrFamilyEntry.getIndexNames())
if mibBuilder.loadTexts: hwBgpPeerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerConfigEntry.setDescription('This object indicates the configurations of BGP peers.')
hwBgpPeerConfigRouteLimitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerConfigRouteLimitNum.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerConfigRouteLimitNum.setDescription('This object indicates the maximum number of routes received from the BGP peer.')
hwBgpPeerConfigRouteLimitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerConfigRouteLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerConfigRouteLimitThreshold.setDescription('This object indicates the alarm threshold (%) of the maximum number of routes received from the BGP peer.')
hwBgpPeerSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6), )
if mibBuilder.loadTexts: hwBgpPeerSessionTable.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionTable.setDescription('BGP Peer Session Table. This table contains BGP peer session informations.')
hwBgpPeerSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionVrfName"), (0, "HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionRemoteAddrType"), (0, "HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionRemoteAddr"))
if mibBuilder.loadTexts: hwBgpPeerSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionEntry.setDescription('The information about the BGP peer sessions.')
hwBgpPeerSessionVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBgpPeerSessionVrfName.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionVrfName.setDescription('Bgp Vrf id.')
hwBgpPeerSessionRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBgpPeerSessionRemoteAddrType.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionRemoteAddrType.setDescription('Bgp peer session remote address type.')
hwBgpPeerSessionRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBgpPeerSessionRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionRemoteAddr.setDescription('Bgp peer session remote address.')
hwBgpPeerSessionLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerSessionLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionLocalAddrType.setDescription('Bgp peer session local address type.')
hwBgpPeerSessionLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerSessionLocalAddr.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionLocalAddr.setDescription('Bgp peer session local address.')
hwBgpPeerSessionUnavailableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uptodown", 1), ("alwaysdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerSessionUnavailableType.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionUnavailableType.setDescription('Bgp peer unavailable type including: 1: Up To Down(1) 2: Always Down(2)')
hwBgpPeerSessionLocalIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerSessionLocalIfName.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionLocalIfName.setDescription('Bgp peer session local IFName.')
hwBgpPeerSessionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 100))).clone(namedValues=NamedValues(("configurationLeadPeerDown", 1), ("receiveNotification", 2), ("receiveErrorPacket", 3), ("holdTimerExpire", 4), ("remotePeerNotReachable", 5), ("directConnectInterfaceDown", 6), ("routeLimit", 7), ("peerIsNotUpForASpecifiedPeriodOfTime", 8), ("alarmClear", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerSessionReason.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionReason.setDescription('Bgp peer down reason including: 1: Configuration lead peer down(1) 2: Receive notification(2) 3: Receive error packet(3) 4: Hold timer expire(4) 5: Remote peer not reachable(5) 6: Direct connect-interface down(6) 7: Route limit(7) 8: Peer is not up for a specified long time(8) 100: Alarm clear(100)')
hwBgpRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 2))
hwBgpRouteLimitTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 2, 1))
hwBgpRouteLimitindex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("ipv4vrf", 3), ("ipv6vrf", 4), ("ipv4public", 5), ("ipv6public", 6), ("l2ad", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBgpRouteLimitindex.setStatus('current')
if mibBuilder.loadTexts: hwBgpRouteLimitindex.setDescription('The index of bgp route limit, including: 1.ipv4(1): total ipv4 routes number. 2.ipv6(2): total ipv6 routes number. 3.ipv4vrf(3): ipv4 vrf routes number. 4.ipv6vrf(4): ipv6 vrf routes number. 5.ipv4public(5): ipv4 public routes number. 6.ipv6public(6): ipv6 public routes number. 7.l2ad(7): l2ad routes number.')
hwBgpRouteCurNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 2, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBgpRouteCurNum.setStatus('current')
if mibBuilder.loadTexts: hwBgpRouteCurNum.setDescription('The current number of bgp routes.')
hwBgpRouteMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 2, 1, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBgpRouteMaxNum.setStatus('current')
if mibBuilder.loadTexts: hwBgpRouteMaxNum.setDescription('The maximum number of bgp routes.')
hwBgpRouteThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 2, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBgpRouteThreshold.setStatus('current')
if mibBuilder.loadTexts: hwBgpRouteThreshold.setDescription('The threshold number of bgp routes.')
hwBgpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3))
hwBgpPeerRouteNumThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitNum"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitThreshold"))
if mibBuilder.loadTexts: hwBgpPeerRouteNumThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRouteNumThresholdExceed.setDescription('This notification is generated when the number of routes received from the BGP peer exceeds the alarm threshold.')
hwBgpPeerRouteNumThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 2)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitNum"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitThreshold"))
if mibBuilder.loadTexts: hwBgpPeerRouteNumThresholdClear.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRouteNumThresholdClear.setDescription('This notification is generated when the number of routes received from the BGP peer decreases below the alarm threshold.')
hwBgpPeerGRStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 3)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerGRStatus"))
if mibBuilder.loadTexts: hwBgpPeerGRStatusChange.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerGRStatusChange.setDescription('This notification is generated when the graceful restart status described by hwBgpPeerGRStatus changes.')
hwBgpPeerUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 4)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionLocalAddrType"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionLocalAddr"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionUnavailableType"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionLocalIfName"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionReason"))
if mibBuilder.loadTexts: hwBgpPeerUnavailable.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerUnavailable.setDescription('This notification is generated when bgp peer session state change from up to down.')
hwBgpPeerAvailable = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 5)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionLocalAddrType"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionLocalAddr"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionUnavailableType"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionLocalIfName"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionReason"))
if mibBuilder.loadTexts: hwBgpPeerAvailable.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerAvailable.setDescription('This notification is generated when bgp peer session state change from down to up.')
hwBgpPeerRouteExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 6)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitNum"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitThreshold"))
if mibBuilder.loadTexts: hwBgpPeerRouteExceed.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRouteExceed.setDescription('This notification is generated when bgp peer session route number exceed.')
hwBgpPeerRouteExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 7)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitNum"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitThreshold"))
if mibBuilder.loadTexts: hwBgpPeerRouteExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRouteExceedClear.setDescription('This notification is generated when bgp peer session route number exceed clear.')
hwL3vpnVrfRouteMidThreshCleared = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 8)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMidRteThresh"))
if mibBuilder.loadTexts: hwL3vpnVrfRouteMidThreshCleared.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnVrfRouteMidThreshCleared.setDescription('This notification is generated when the number of routes contained by the specified VRF exceeds the value indicated by mplsL3VpnVrfMidRouteThreshold, and then falls below this value. A single notification MUST be generated when this threshold is exceeded, and no other notifications of this type should be issued until the value of mplsL3VpnVrfPerfCurrNumRoutes has fallen below that of mplsL3VpnVrfConfMidRteThresh.')
hwBgpPeerEstablished = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 9)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerLastError"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerState"))
if mibBuilder.loadTexts: hwBgpPeerEstablished.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerEstablished.setDescription('The BGP Established event is generated when the BGP FSM enters the ESTABLISHED state.')
hwBgpPeerBackwardTransition = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 10)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerLastError"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerState"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerUnAvaiReason"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwBgpPeerBackwardTransition.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerBackwardTransition.setDescription('The BGPBackwardTransition Event is generated when the BGP FSM moves from a higher numbered state to a lower numbered state.')
hwBgpRouteThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 11)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpRouteLimitindex"), ("HUAWEI-BGP-VPN-MIB", "hwBgpRouteCurNum"), ("HUAWEI-BGP-VPN-MIB", "hwBgpRouteThreshold"), ("HUAWEI-BGP-VPN-MIB", "hwBgpRouteMaxNum"))
if mibBuilder.loadTexts: hwBgpRouteThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwBgpRouteThresholdExceed.setDescription('This notification is generated when the number of bgp routes exceeds the threshold.')
hwBgpRouteThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 12)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpRouteLimitindex"))
if mibBuilder.loadTexts: hwBgpRouteThresholdClear.setStatus('current')
if mibBuilder.loadTexts: hwBgpRouteThresholdClear.setDescription('This notification is generated when the number of routes decreases below the threshold.')
hwBgpRouteMaxExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 13)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpRouteLimitindex"), ("HUAWEI-BGP-VPN-MIB", "hwBgpRouteMaxNum"))
if mibBuilder.loadTexts: hwBgpRouteMaxExceed.setStatus('current')
if mibBuilder.loadTexts: hwBgpRouteMaxExceed.setDescription('This notification is generated when the number of routes exceeds the maximum number.')
hwBgpRouteMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 14)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpRouteLimitindex"))
if mibBuilder.loadTexts: hwBgpRouteMaxClear.setStatus('current')
if mibBuilder.loadTexts: hwBgpRouteMaxClear.setDescription('This notification is generated when the number of routes decreases below the maximum number.')
hwBgpPeerSessionExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 15)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionMaxNum"))
if mibBuilder.loadTexts: hwBgpPeerSessionExceed.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionExceed.setDescription('This notification is generated when the number of peer sessions exceeds the maximum number.')
hwBgpPeerSessionExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 3, 16)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionMaxNum"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerSessionNum"))
if mibBuilder.loadTexts: hwBgpPeerSessionExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionExceedClear.setDescription('This notification is generated when the number of peer sessions decreases below the maximum number.')
hwBgpScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 4))
hwBgpPeerSessionNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerSessionNum.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionNum.setDescription('The total number of BGP peer sessions configured.')
hwIBgpPeerSessionNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIBgpPeerSessionNum.setStatus('current')
if mibBuilder.loadTexts: hwIBgpPeerSessionNum.setDescription('The total number of Internal BGP peer sessions configured.')
hwEBgpPeerSessionNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEBgpPeerSessionNum.setStatus('current')
if mibBuilder.loadTexts: hwEBgpPeerSessionNum.setDescription('The total number of External BGP peer sessions configured.')
hwBgpPeerSessionMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpPeerSessionMaxNum.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerSessionMaxNum.setDescription('The max number of BGP peer sessions configured.')
hwBgpVpnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2))
hwBgpVpnTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1), )
if mibBuilder.loadTexts: hwBgpVpnTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelTable.setDescription('This object indicates the VPN-tunnel bearing relation table that shows detailed information about the tunnel that bears the VPN service.')
hwBgpVpnTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1), ).setIndexNames((0, "HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelVrfName"), (0, "HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelPublicNetNextHop"), (0, "HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelId"))
if mibBuilder.loadTexts: hwBgpVpnTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelEntry.setDescription('This object indicates detailed information about the tunnel bearing VPN services. This object can be queried, but not be set or created.')
hwBgpVpnTunnelVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwBgpVpnTunnelVrfName.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelVrfName.setDescription('This object indicates the VRF name.')
hwBgpVpnTunnelPublicNetNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwBgpVpnTunnelPublicNetNextHop.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelPublicNetNextHop.setDescription('This object indicates the next hop in the public network.')
hwBgpVpnTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwBgpVpnTunnelId.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelId.setDescription('The value of this object identifies the tunnel ID.')
hwBgpVpnTunnelDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelDestAddr.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelDestAddr.setDescription('This object indicates the destination address of the tunnel.')
hwBgpVpnTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelType.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelType.setDescription('The value of this object identifies the tunnel type.')
hwBgpVpnTunnelSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelSrcAddr.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelSrcAddr.setDescription('This object indicates the source address of the tunnel.')
hwBgpVpnTunnelOutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelOutIfName.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelOutIfName.setDescription('This object indicates the name of the outgoing interface for the tunnel.')
hwBgpVpnTunnelIsLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelIsLoadBalance.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelIsLoadBalance.setDescription('The value of this object identifies whether load balancing is performed.')
hwBgpVpnTunnelLspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelLspIndex.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelLspIndex.setDescription('The value of this object identifies the index of the primary LSP for the tunnel.')
hwBgpVpnTunnelLspOutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelLspOutIfName.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelLspOutIfName.setDescription('This object indicates the name of the outgoing interface for the primary LSP of the tunnel.')
hwBgpVpnTunnelLspOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelLspOutLabel.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelLspOutLabel.setDescription('The value of this object identifies the outgoing label for the primary LSP of the tunnel.')
hwBgpVpnTunnelLspNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelLspNextHop.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelLspNextHop.setDescription('This object indicates the next hop for the primary LSP of the tunnel.')
hwBgpVpnTunnelLspFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelLspFec.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelLspFec.setDescription('This object indicates the FEC for the primary LSP of the tunnel.')
hwBgpVpnTunnelLspFecPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelLspFecPfxLen.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelLspFecPfxLen.setDescription('This object indicates the length of the FEC for the primary LSP of the tunnel.')
hwBgpVpnTunnelLspIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelLspIsBackup.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelLspIsBackup.setDescription('The value of this object identifies whether the LSP is the backup LSP.')
hwBgpVpnTunnelSignalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelSignalProtocol.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelSignalProtocol.setDescription('The value of this object identifies signaling protocol type of the tunnel.')
hwBgpVpnTunnelSessionTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelSessionTunnelId.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelSessionTunnelId.setDescription('The value of this object identifies ID of the tunnel configured through the command.')
hwBgpVpnTunnelTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpVpnTunnelTunnelName.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelTunnelName.setDescription('This object indicates the tunnel name.')
hwBgpVpnServiceIdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 2), )
if mibBuilder.loadTexts: hwBgpVpnServiceIdTable.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnServiceIdTable.setDescription('This object indicates the Service-id of the L3VPN services.')
hwBgpVpnServiceIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 2, 1), ).setIndexNames((0, "HUAWEI-BGP-VPN-MIB", "hwBgpVpnServiceIdVrfName"))
if mibBuilder.loadTexts: hwBgpVpnServiceIdEntry.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnServiceIdEntry.setDescription('This object indicates detailed information about the Service-id of L3VPN services. This object can be queried, set but not created.')
hwBgpVpnServiceIdVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwBgpVpnServiceIdVrfName.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnServiceIdVrfName.setDescription('This object indicates the VRF name.')
hwBgpVpnServiceIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 2, 1, 2), Unsigned32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBgpVpnServiceIdValue.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnServiceIdValue.setDescription('The value of this object identifies the Service-id.')
hwBgpVpnScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 3))
hwConfiguredVrfs = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConfiguredVrfs.setStatus('current')
if mibBuilder.loadTexts: hwConfiguredVrfs.setDescription('The number of VRFs that are configured on this node.')
hwConfiguredIpv4Vrfs = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConfiguredIpv4Vrfs.setStatus('current')
if mibBuilder.loadTexts: hwConfiguredIpv4Vrfs.setDescription('The number of IPv4-family VRFs that are configured on this node.')
hwConfiguredIpv6Vrfs = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 2, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConfiguredIpv6Vrfs.setStatus('current')
if mibBuilder.loadTexts: hwConfiguredIpv6Vrfs.setDescription('The number of IPv6-family VRFs that are configured on this node.')
hwBgpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3))
hwBgpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 1))
hwBgpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 1, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeer"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerRoute"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerMessage"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpCompliance = hwBgpCompliance.setStatus('current')
if mibBuilder.loadTexts: hwBgpCompliance.setDescription('The compliance statement for Huawei-BGP-VPN MIB')
hwBgpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 2))
hwBgpPeerAddrFamily = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 2, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpPeerAddrFamily = hwBgpPeerAddrFamily.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerAddrFamily.setDescription('Address Family Group for BGP peers This table contains members of the address family for BGP peers')
hwBgpPeer = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 2, 2)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerNegotiatedVersion"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerRemoteAs"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerRemoteAddr"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerState"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerFsmEstablishedCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerGRStatus"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerFsmEstablishedTime"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerLastError"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerUnAvaiReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpPeer = hwBgpPeer.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeer.setDescription('BGP Peer Group. This table contains members of the connections with BGP peers.')
hwBgpPeerRoute = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 2, 3)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerPrefixRcvCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerPrefixActiveCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerPrefixAdvCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpPeerRoute = hwBgpPeerRoute.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerRoute.setDescription('Route Group for BGP Peers This table contains members of the routes with BGP peers.')
hwBgpPeerMessage = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 2, 4)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerInTotalMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerOutTotalMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerInOpenMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerInUpdateMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerInNotificationMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerInKeepAliveMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerInRouteFreshMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerOutOpenMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerOutUpdateMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerOutNotificationMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerOutKeepAliveMsgCounter"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerOutRouteFreshMsgCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpPeerMessage = hwBgpPeerMessage.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerMessage.setDescription('Protocol Packet Group for BGP Peers This table contains members of the protocol packets with BGP peers.')
hwBgpPeerConfig = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 2, 5)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitNum"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerConfigRouteLimitThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpPeerConfig = hwBgpPeerConfig.setStatus('current')
if mibBuilder.loadTexts: hwBgpPeerConfig.setDescription('Configuration Group for BGP Peers. This table contains members of the configurations of BGP peers.')
hwBgpTrap = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 3, 2, 6)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpPeerRouteNumThresholdExceed"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerRouteNumThresholdClear"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerGRStatusChange"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerEstablished"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerBackwardTransition"), ("HUAWEI-BGP-VPN-MIB", "hwL3vpnVrfRouteMidThreshCleared"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerUnavailable"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerRouteExceed"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerRouteExceedClear"), ("HUAWEI-BGP-VPN-MIB", "hwBgpPeerAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpTrap = hwBgpTrap.setStatus('current')
if mibBuilder.loadTexts: hwBgpTrap.setDescription('Trap Group for BGP Peers. This table contains members of the traps of BGP peers.')
hwBgpVpnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 5))
hwBgpVpnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 5, 1))
hwBgpVpnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 5, 1, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelGroup"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnServiceIdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpVpnCompliance = hwBgpVpnCompliance.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnCompliance.setDescription('The compliance statement for Route Management MIB.')
hwBgpVpnExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 5, 2))
hwBgpVpnTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 5, 2, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelDestAddr"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelType"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelSrcAddr"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelIsLoadBalance"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelLspIndex"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelLspOutLabel"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelLspNextHop"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelLspFec"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelLspFecPfxLen"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelOutIfName"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelLspOutIfName"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelLspIsBackup"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelTunnelName"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelSessionTunnelId"), ("HUAWEI-BGP-VPN-MIB", "hwBgpVpnTunnelSignalProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpVpnTunnelGroup = hwBgpVpnTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnTunnelGroup.setDescription('Description.')
hwBgpVpnServiceIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 5, 2, 2)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwBgpVpnServiceIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBgpVpnServiceIdGroup = hwBgpVpnServiceIdGroup.setStatus('current')
if mibBuilder.loadTexts: hwBgpVpnServiceIdGroup.setDescription('This object indicates the Service-id of the L3VPN services.')
hwTnl2VpnTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 6))
hwTnl2VpnTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 6, 1), )
if mibBuilder.loadTexts: hwTnl2VpnTrapTable.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VpnTrapTable.setDescription('Tnl2Vpn Trap table. This table contains the trap information. This table is only used for sending trap messages and does not support the get/getnext/set operation.')
hwTnl2VpnTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 6, 1, 1), ).setIndexNames((0, "HUAWEI-BGP-VPN-MIB", "hwVpnId"))
if mibBuilder.loadTexts: hwTnl2VpnTrapEntry.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VpnTrapEntry.setDescription('This object indicates detailed information about the trap message.')
hwVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 6, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVpnId.setStatus('current')
if mibBuilder.loadTexts: hwVpnId.setDescription('This object indicates the VPN index.')
hwVpnPublicNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 6, 1, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVpnPublicNextHop.setStatus('current')
if mibBuilder.loadTexts: hwVpnPublicNextHop.setDescription('This object indicates the public next-hop address.')
hwTunnelReachablityEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 6, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTunnelReachablityEvent.setStatus('current')
if mibBuilder.loadTexts: hwTunnelReachablityEvent.setDescription('This object indicates whether the tunnel is reachable. 1--tunnel reachable. 2--tunnel unreachable.')
hwVpnTrapCkeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 6, 1, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwVpnTrapCkeyValue.setStatus('current')
if mibBuilder.loadTexts: hwVpnTrapCkeyValue.setDescription('This object indicates the ckey value. This value is used for getting next-hop information.')
hwTnl2VpnTrapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 7))
hwTnl2VpnTrapConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 7, 1))
hwTnl2VpnTrapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 7, 1, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwTnl2VpnTrapGroup"), ("HUAWEI-BGP-VPN-MIB", "hwTnl2VpnTrapNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnl2VpnTrapCompliance = hwTnl2VpnTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VpnTrapCompliance.setDescription('The compliance statement for Huawei-BGP-VPN MIB.')
hwTnl2VpnTrapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 7, 2))
hwTnl2VpnTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 7, 2, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwVpnId"), ("HUAWEI-BGP-VPN-MIB", "hwVpnPublicNextHop"), ("HUAWEI-BGP-VPN-MIB", "hwVpnTrapCkeyValue"), ("HUAWEI-BGP-VPN-MIB", "hwTunnelReachablityEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnl2VpnTrapGroup = hwTnl2VpnTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VpnTrapGroup.setDescription('Description.')
hwTnl2VpnTrapNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 7, 2, 2)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwTnl2VpnTrapEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnl2VpnTrapNotificationGroup = hwTnl2VpnTrapNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VpnTrapNotificationGroup.setDescription('Description.')
hwTnl2VpnTrapNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 8))
hwTnl2VpnTrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 8, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwVpnId"), ("HUAWEI-BGP-VPN-MIB", "hwVpnPublicNextHop"), ("HUAWEI-BGP-VPN-MIB", "hwVpnTrapCkeyValue"), ("HUAWEI-BGP-VPN-MIB", "hwTunnelReachablityEvent"))
if mibBuilder.loadTexts: hwTnl2VpnTrapEvent.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VpnTrapEvent.setDescription('This trap indicates whether the tunnel used by a VPN is reachable, If the tunnel is unreachable, a trap is sent to notify the user, hwTunnelReachablityEvent is 2. If the tunnel is reachable, a trap is sent to notify the user, hwTunnelReachablityEvent is 1.')
hwPeerDistributeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9))
hwBgpTotalRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBgpTotalRouteNumber.setStatus('current')
if mibBuilder.loadTexts: hwBgpTotalRouteNumber.setDescription('The total number of BGP routes.')
hwOsNodeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 2), )
if mibBuilder.loadTexts: hwOsNodeTable.setStatus('current')
if mibBuilder.loadTexts: hwOsNodeTable.setDescription('Table contains some statistic information entries orgnized by os-node.')
hwOsNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwOsNodeEntry.setStatus('current')
if mibBuilder.loadTexts: hwOsNodeEntry.setDescription('Every entry contains some statistic infomation on specific os-node.')
hwCurrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCurrSlot.setStatus('current')
if mibBuilder.loadTexts: hwCurrSlot.setDescription('The index of specific slot.')
hwPeerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPeerNumber.setStatus('current')
if mibBuilder.loadTexts: hwPeerNumber.setDescription('The number of the neighbors on the specific os-group.')
hwRouteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouteNumber.setStatus('current')
if mibBuilder.loadTexts: hwRouteNumber.setDescription('The number of the routes on the specific os-group.')
hwDistributeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 3), )
if mibBuilder.loadTexts: hwDistributeTable.setStatus('current')
if mibBuilder.loadTexts: hwDistributeTable.setDescription('Table contains some information entries orgnized by distribute-instance.')
hwDistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 3, 1), ).setIndexNames((0, "HUAWEI-BGP-VPN-MIB", "hwDistributeName"))
if mibBuilder.loadTexts: hwDistributeEntry.setStatus('current')
if mibBuilder.loadTexts: hwDistributeEntry.setDescription('Every entry contains some infomation on specific distribute-instance.')
hwDistributeLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 3, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDistributeLocId.setStatus('current')
if mibBuilder.loadTexts: hwDistributeLocId.setDescription('The id of specific distribute-instance.')
hwDistributeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDistributeName.setStatus('current')
if mibBuilder.loadTexts: hwDistributeName.setDescription('The name of specific distribute-instance.')
hwMigrateSrcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMigrateSrcSlot.setStatus('current')
if mibBuilder.loadTexts: hwMigrateSrcSlot.setDescription('The source slot name the distribute-instances is from when migration happens.')
hwMigrateDestSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMigrateDestSlot.setStatus('current')
if mibBuilder.loadTexts: hwMigrateDestSlot.setDescription('The destination slot name the distribute-instances is aboute to go when migration happens.')
hwMigrateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memoryoverload", 1), ("cpuoverload", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMigrateReason.setStatus('current')
if mibBuilder.loadTexts: hwMigrateReason.setDescription('The reason of a migration when it happens.')
hwPeerDistributeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 9, 4))
hwRpkiObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11))
hwRpkiSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 1))
hwRpkiSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 1, 1), )
if mibBuilder.loadTexts: hwRpkiSessionTable.setStatus('current')
if mibBuilder.loadTexts: hwRpkiSessionTable.setDescription('RPKI Session Table. This table contains information about the RPKI sessions.')
hwRpkiSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 1, 1, 1), ).setIndexNames((0, "HUAWEI-BGP-VPN-MIB", "hwRpkiSessionVrfName"), (0, "HUAWEI-BGP-VPN-MIB", "hwRpkiSessionType"), (0, "HUAWEI-BGP-VPN-MIB", "hwSessionIPAddr"))
if mibBuilder.loadTexts: hwRpkiSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hwRpkiSessionEntry.setDescription('The information about the RPKI session.')
hwRpkiSessionVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 1, 1, 1, 1), MplsL3VpnName())
if mibBuilder.loadTexts: hwRpkiSessionVrfName.setStatus('current')
if mibBuilder.loadTexts: hwRpkiSessionVrfName.setDescription('The index of the instance for the session.')
hwRpkiSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 1, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hwRpkiSessionType.setStatus('current')
if mibBuilder.loadTexts: hwRpkiSessionType.setDescription('The type of the address family for the remote session.')
hwSessionIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 1, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: hwSessionIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwSessionIPAddr.setDescription('The IP address of the session.')
hwRpkiSessionRoaLimitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRpkiSessionRoaLimitNum.setStatus('current')
if mibBuilder.loadTexts: hwRpkiSessionRoaLimitNum.setDescription('The IP address of the session.')
hwRpkiTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 2))
hwRpkiSessionRoaExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 2, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwRpkiSessionRoaLimitNum"))
if mibBuilder.loadTexts: hwRpkiSessionRoaExceed.setStatus('current')
if mibBuilder.loadTexts: hwRpkiSessionRoaExceed.setDescription('This notification is generated when rpki session ROA number exceed.')
hwRpkiSessionRoaExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 2, 2)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwRpkiSessionRoaLimitNum"))
if mibBuilder.loadTexts: hwRpkiSessionRoaExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwRpkiSessionRoaExceedClear.setDescription('This notification is generated when rpki session ROA number exceed clear.')
hwRpkiConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 3))
hwRpkiCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 3, 1))
hwRpkiCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 3, 1, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwRpkiSession"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRpkiCompliance = hwRpkiCompliance.setStatus('current')
if mibBuilder.loadTexts: hwRpkiCompliance.setDescription('The compliance statement for Huawei-BGP-VPN MIB')
hwRpkiGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 3, 2))
hwRpkiSession = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 3, 2, 1)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwRpkiSessionVrfName"), ("HUAWEI-BGP-VPN-MIB", "hwRpkiSessionType"), ("HUAWEI-BGP-VPN-MIB", "hwSessionIPAddr"), ("HUAWEI-BGP-VPN-MIB", "hwRpkiSessionRoaLimitNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRpkiSession = hwRpkiSession.setStatus('current')
if mibBuilder.loadTexts: hwRpkiSession.setDescription('Session Group for RPKI sessions This table contains members of session for RPKI')
hwRpkiTrap = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 177, 11, 3, 2, 2)).setObjects(("HUAWEI-BGP-VPN-MIB", "hwRpkiSessionRoaExceed"), ("HUAWEI-BGP-VPN-MIB", "hwRpkiSessionRoaExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRpkiTrap = hwRpkiTrap.setStatus('current')
if mibBuilder.loadTexts: hwRpkiTrap.setDescription('Trap Group for RPKI Sessions. This table contains members of the traps of RPKI Sessions.')
mibBuilder.exportSymbols("HUAWEI-BGP-VPN-MIB", hwMigrateDestSlot=hwMigrateDestSlot, hwBgpPeerPrefixRcvCounter=hwBgpPeerPrefixRcvCounter, hwBgpPeerSessionVrfName=hwBgpPeerSessionVrfName, hwBgpPeerInRouteFreshMsgCounter=hwBgpPeerInRouteFreshMsgCounter, hwBgpPeerSessionLocalAddrType=hwBgpPeerSessionLocalAddrType, hwTnl2VpnTrapEvent=hwTnl2VpnTrapEvent, hwBgpPeerRouteNumThresholdExceed=hwBgpPeerRouteNumThresholdExceed, hwRpkiSessionVrfName=hwRpkiSessionVrfName, hwRpkiTrap=hwRpkiTrap, hwBgpPeerAddrFamilySafi=hwBgpPeerAddrFamilySafi, hwBgpMIB=hwBgpMIB, hwBgpPeerEstablished=hwBgpPeerEstablished, hwEBgpPeerSessionNum=hwEBgpPeerSessionNum, hwBgpVpnTunnelLspOutLabel=hwBgpVpnTunnelLspOutLabel, hwBgpPeerRouteExceedClear=hwBgpPeerRouteExceedClear, hwBgpVpnTunnelId=hwBgpVpnTunnelId, hwTnl2VpnTrapConformance=hwTnl2VpnTrapConformance, hwBgpPeerSessionExceed=hwBgpPeerSessionExceed, hwRpkiSessionRoaExceedClear=hwRpkiSessionRoaExceedClear, hwRpkiSession=hwRpkiSession, hwBgpRouteThreshold=hwBgpRouteThreshold, hwBgpTrap=hwBgpTrap, hwRpkiSessionEntry=hwRpkiSessionEntry, hwBgpVpnTunnelIsLoadBalance=hwBgpVpnTunnelIsLoadBalance, hwIBgpPeerSessionNum=hwIBgpPeerSessionNum, hwBgpPeerConfigRouteLimitNum=hwBgpPeerConfigRouteLimitNum, hwBgpVpnConformance=hwBgpVpnConformance, hwBgpPeerConfigRouteLimitThreshold=hwBgpPeerConfigRouteLimitThreshold, hwBgpVpnObjects=hwBgpVpnObjects, hwConfiguredIpv6Vrfs=hwConfiguredIpv6Vrfs, hwBgpPeerAddrFamilyAfi=hwBgpPeerAddrFamilyAfi, hwBgpPeerSessionReason=hwBgpPeerSessionReason, hwBgpVpnTunnelType=hwBgpVpnTunnelType, hwBgpVpnServiceIdGroup=hwBgpVpnServiceIdGroup, hwBgpPeerGRStatusChange=hwBgpPeerGRStatusChange, hwBgpVpnTunnelTunnelName=hwBgpVpnTunnelTunnelName, hwBgpPeerPrefixAdvCounter=hwBgpPeerPrefixAdvCounter, hwTnl2VpnTrapTable=hwTnl2VpnTrapTable, hwOsNodeEntry=hwOsNodeEntry, hwBgpPeerOutTotalMsgCounter=hwBgpPeerOutTotalMsgCounter, hwBgpPeerInNotificationMsgCounter=hwBgpPeerInNotificationMsgCounter, hwBgpPeerInOpenMsgCounter=hwBgpPeerInOpenMsgCounter, hwRpkiConformance=hwRpkiConformance, hwBgpVpnTunnelLspFecPfxLen=hwBgpVpnTunnelLspFecPfxLen, hwBgpVpnCompliance=hwBgpVpnCompliance, hwBgpPeerNegotiatedVersion=hwBgpPeerNegotiatedVersion, hwBgpVpnTunnelOutIfName=hwBgpVpnTunnelOutIfName, hwBgpPeerUnAvaiReason=hwBgpPeerUnAvaiReason, hwBgpConformance=hwBgpConformance, hwRpkiSessionRoaLimitNum=hwRpkiSessionRoaLimitNum, hwBgpPeerRoute=hwBgpPeerRoute, hwBgpPeerOutUpdateMsgCounter=hwBgpPeerOutUpdateMsgCounter, hwBgpPeerRouteNumThresholdClear=hwBgpPeerRouteNumThresholdClear, HWBgpAfi=HWBgpAfi, hwCurrSlot=hwCurrSlot, hwBgpTraps=hwBgpTraps, hwRpkiObjects=hwRpkiObjects, hwBgpPeerOutOpenMsgCounter=hwBgpPeerOutOpenMsgCounter, hwBgpVpnTunnelLspIndex=hwBgpVpnTunnelLspIndex, hwBgpVpnScalars=hwBgpVpnScalars, HWBgpSafi=HWBgpSafi, hwDistributeTable=hwDistributeTable, hwBgpPeerMessage=hwBgpPeerMessage, hwBgpRouteMaxExceed=hwBgpRouteMaxExceed, hwTnl2VpnTrapCompliance=hwTnl2VpnTrapCompliance, hwTnl2VpnTrapNotificationGroup=hwTnl2VpnTrapNotificationGroup, hwBgpPeerOutRouteFreshMsgCounter=hwBgpPeerOutRouteFreshMsgCounter, hwBgpPeerSessionEntry=hwBgpPeerSessionEntry, hwRpkiSessionTable=hwRpkiSessionTable, hwBgpVpnTunnelSessionTunnelId=hwBgpVpnTunnelSessionTunnelId, hwBgpCompliance=hwBgpCompliance, hwBgpVpnTunnelLspIsBackup=hwBgpVpnTunnelLspIsBackup, hwBgpRouteThresholdClear=hwBgpRouteThresholdClear, hwBgpPeerRemoteAddr=hwBgpPeerRemoteAddr, hwBgpPeerType=hwBgpPeerType, hwBgpPeerAvailable=hwBgpPeerAvailable, hwRouteNumber=hwRouteNumber, hwRpkiTraps=hwRpkiTraps, hwBgpPeerOutKeepAliveMsgCounter=hwBgpPeerOutKeepAliveMsgCounter, MplsL3VpnName=MplsL3VpnName, hwTnl2VpnTrapEntry=hwTnl2VpnTrapEntry, hwBgpPeerSessionUnavailableType=hwBgpPeerSessionUnavailableType, hwBgpPeerRemoteAs=hwBgpPeerRemoteAs, hwBgpPeerAddrFamilyTable=hwBgpPeerAddrFamilyTable, hwRpkiSessions=hwRpkiSessions, hwBgpPeerSessionRemoteAddr=hwBgpPeerSessionRemoteAddr, hwBgpRouteCurNum=hwBgpRouteCurNum, hwBgpRouteMaxNum=hwBgpRouteMaxNum, hwDistributeEntry=hwDistributeEntry, hwPeerDistributeTraps=hwPeerDistributeTraps, hwTnl2VpnTrapNotification=hwTnl2VpnTrapNotification, hwRpkiSessionRoaExceed=hwRpkiSessionRoaExceed, hwBgpPeerAddrFamily=hwBgpPeerAddrFamily, hwBgpCompliances=hwBgpCompliances, hwBgpPeerInstanceId=hwBgpPeerInstanceId, hwTunnelReachablityEvent=hwTunnelReachablityEvent, hwBgpVpnTunnelVrfName=hwBgpVpnTunnelVrfName, hwBgpTotalRouteNumber=hwBgpTotalRouteNumber, hwBgpVpnTunnelGroup=hwBgpVpnTunnelGroup, hwBgpVpnServiceIdValue=hwBgpVpnServiceIdValue, hwTnl2VpnTrapConformances=hwTnl2VpnTrapConformances, hwBgpPeerFsmEstablishedCounter=hwBgpPeerFsmEstablishedCounter, hwConfiguredVrfs=hwConfiguredVrfs, hwConfiguredIpv4Vrfs=hwConfiguredIpv4Vrfs, hwBgpPeerIPAddr=hwBgpPeerIPAddr, hwL3vpnVrfRouteMidThreshCleared=hwL3vpnVrfRouteMidThreshCleared, hwRpkiCompliance=hwRpkiCompliance, hwBgpPeers=hwBgpPeers, hwBgpVpnServiceIdVrfName=hwBgpVpnServiceIdVrfName, hwBgpPeerConfig=hwBgpPeerConfig, hwBgpPeerState=hwBgpPeerState, hwBgpPeerSessionLocalIfName=hwBgpPeerSessionLocalIfName, hwBgpVpnServiceIdEntry=hwBgpVpnServiceIdEntry, hwRpkiSessionType=hwRpkiSessionType, hwVpnTrapCkeyValue=hwVpnTrapCkeyValue, hwTnl2VpnTrapGroup=hwTnl2VpnTrapGroup, hwBgpRouteLimitindex=hwBgpRouteLimitindex, hwBgpPeerTable=hwBgpPeerTable, hwBgpPeerRouteEntry=hwBgpPeerRouteEntry, hwBgpVpnExtGroups=hwBgpVpnExtGroups, hwBgpGroups=hwBgpGroups, hwBgpPeerFsmEstablishedTime=hwBgpPeerFsmEstablishedTime, hwBgpPeerMessageTable=hwBgpPeerMessageTable, hwBgpPeerSessionLocalAddr=hwBgpPeerSessionLocalAddr, hwBgpPeer=hwBgpPeer, hwBgpVpnTunnelDestAddr=hwBgpVpnTunnelDestAddr, hwBgpPeerRouteExceed=hwBgpPeerRouteExceed, hwBgpPeerBackwardTransition=hwBgpPeerBackwardTransition, hwBgpPeerPrefixActiveCounter=hwBgpPeerPrefixActiveCounter, hwBgpRouteMaxClear=hwBgpRouteMaxClear, hwBgpPeerMessageEntry=hwBgpPeerMessageEntry, hwVpnPublicNextHop=hwVpnPublicNextHop, hwPeerDistributeObjects=hwPeerDistributeObjects, hwBgpObjects=hwBgpObjects, hwBgpVpnTunnelSrcAddr=hwBgpVpnTunnelSrcAddr, hwBgpPeerConfigTable=hwBgpPeerConfigTable, hwBgpPeerVrfName=hwBgpPeerVrfName, hwBgpRouteThresholdExceed=hwBgpRouteThresholdExceed, hwBgpPeerRouteTable=hwBgpPeerRouteTable, hwSessionIPAddr=hwSessionIPAddr, hwBgpVpnTunnelLspOutIfName=hwBgpVpnTunnelLspOutIfName, hwDistributeName=hwDistributeName, hwBgpPeerSessionMaxNum=hwBgpPeerSessionMaxNum, hwRpkiGroups=hwRpkiGroups, hwBgpVpnTunnelEntry=hwBgpVpnTunnelEntry, hwBgpPeerInUpdateMsgCounter=hwBgpPeerInUpdateMsgCounter, hwBgpPeerInKeepAliveMsgCounter=hwBgpPeerInKeepAliveMsgCounter, hwBgpVpnTunnelLspNextHop=hwBgpVpnTunnelLspNextHop, hwBgpPeerSessionExceedClear=hwBgpPeerSessionExceedClear, hwBgpScalars=hwBgpScalars, hwBgpPeerSessionNum=hwBgpPeerSessionNum, hwRpkiCompliances=hwRpkiCompliances, hwBgpPeerAddrFamilyEntry=hwBgpPeerAddrFamilyEntry, hwBgpVpnTunnelPublicNetNextHop=hwBgpVpnTunnelPublicNetNextHop, hwBgpPeerGRStatus=hwBgpPeerGRStatus, hwBgpRoute=hwBgpRoute, hwTnl2VpnTrapGroups=hwTnl2VpnTrapGroups, hwBgpVpnTunnelSignalProtocol=hwBgpVpnTunnelSignalProtocol, hwVpnId=hwVpnId, hwBgpPeerInTotalMsgCounter=hwBgpPeerInTotalMsgCounter, hwBgpPeerLastError=hwBgpPeerLastError, hwBgpPeerOutNotificationMsgCounter=hwBgpPeerOutNotificationMsgCounter, hwOsNodeTable=hwOsNodeTable, hwPeerNumber=hwPeerNumber, hwBgpPeerSessionRemoteAddrType=hwBgpPeerSessionRemoteAddrType, hwBgpPeerEntry=hwBgpPeerEntry, hwBgpPeerUnavailable=hwBgpPeerUnavailable, hwBgpVpnTunnelLspFec=hwBgpVpnTunnelLspFec, hwMigrateReason=hwMigrateReason, hwMigrateSrcSlot=hwMigrateSrcSlot, PYSNMP_MODULE_ID=hwBgpMIB, hwBgpPeerSessionTable=hwBgpPeerSessionTable, hwBgpVpnServiceIdTable=hwBgpVpnServiceIdTable, hwBgpVpnTunnelTable=hwBgpVpnTunnelTable, hwDistributeLocId=hwDistributeLocId, hwBgpVpnCompliances=hwBgpVpnCompliances, hwBgpPeerConfigEntry=hwBgpPeerConfigEntry, hwBgpRouteLimitTable=hwBgpRouteLimitTable, hwTnl2VpnTrapObjects=hwTnl2VpnTrapObjects)
