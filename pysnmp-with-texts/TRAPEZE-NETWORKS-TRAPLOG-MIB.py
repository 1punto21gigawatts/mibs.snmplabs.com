#
# PySNMP MIB module TRAPEZE-NETWORKS-TRAPLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRAPEZE-NETWORKS-TRAPLOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, iso, MibIdentifier, TimeTicks, Bits, Gauge32, ObjectIdentity, IpAddress, Integer32, ModuleIdentity, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "iso", "MibIdentifier", "TimeTicks", "Bits", "Gauge32", "ObjectIdentity", "IpAddress", "Integer32", "ModuleIdentity", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TimeStamp, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "DateAndTime", "TextualConvention")
trpzMibs, = mibBuilder.importSymbols("TRAPEZE-NETWORKS-ROOT-MIB", "trpzMibs")
trpzTraplogMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 14525, 4, 13))
trpzTraplogMib.setRevisions(('2009-03-22 00:09',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: trpzTraplogMib.setRevisionsDescriptions(('v1.0.9: Initial version, for 7.1 release',))
if mibBuilder.loadTexts: trpzTraplogMib.setLastUpdated('200903220009Z')
if mibBuilder.loadTexts: trpzTraplogMib.setOrganization('Trapeze Networks')
if mibBuilder.loadTexts: trpzTraplogMib.setContactInfo('Trapeze Networks Technical Support www.trapezenetworks.com US: 866.TRPZ.TAC International: 925.474.2400 support@trapezenetworks.com')
if mibBuilder.loadTexts: trpzTraplogMib.setDescription("Trap Log MIB: information about most recent traps generated by an Access Controller (wireless switch). A trap occurrence that could be logged corresponds to an event detected by the Access Controller (wireless switch). Not all kinds of events will cause a Trap Log entry to be added. The list of accepted notification types should be configurable. This MIB does _not_ specify any means for configuring the notification types accepted for logging (the ''filter''). Configuration options for filtering (not necessarily SNMP-based) should be described in the manuals for the wireless switch. There is _no_ guarantee that the Trap Log will be preserved in part or in total across restarts of the SNMP agent. The Trap Log as a whole operates like a circular buffer: if adding a new entry (trap occurrence) would exhaust the available resources, the oldest entry (or entries) will be discarded. This MIB does _not_ specify any means for configuring any of the resource limits applicable to trap logging. Copyright 2009 Trapeze Networks, Inc. All rights reserved. This Trapeze Networks SNMP Management Information Base Specification (Specification) embodies Trapeze Networks' confidential and proprietary intellectual property. Trapeze Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS' and Trapeze Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
class TrpzTraplogTrapOccurrenceIndex(TextualConvention, Unsigned32):
    description = 'Trap Occurrence Index (in the Trap Log). A monotonically increasing integer for the sole purpose of indexing entries within the trap log. When it reaches the maximum value, an extremely unlikely event, the agent wraps the value back to 1.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class TrpzTraplogTrapOccurrenceIndexOrZero(TextualConvention, Unsigned32):
    description = "This textual convention is an extension of the TrpzTraplogTrapOccurrenceIndex convention. The latter defines a greater than zero value used to identify each trap occurrence recorded in the trap log. This extension permits the additional value of zero. A zero value means 'none', 'there is no such trap occurrence'."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), )
trpzTraplogMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1))
trpzTraplogGuideObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 2))
trpzTraplogOldestTrapIndex = MibScalar((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 2, 1), TrpzTraplogTrapOccurrenceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogOldestTrapIndex.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogOldestTrapIndex.setDescription('Index of the Oldest Trap occurrence currently stored in the Trap Log. This will be the first entry overwritten when the Trap Log gets full. A zero value means that no trap was logged yet (possibly because trap logging is disabled).')
trpzTraplogNewestTrapIndex = MibScalar((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 2, 2), TrpzTraplogTrapOccurrenceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogNewestTrapIndex.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogNewestTrapIndex.setDescription('Index of the Newest Trap occurrence currently stored in the Trap Log. A zero value means that no trap was logged yet (possibly because trap logging is disabled).')
trpzTraplogNewestTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 2, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogNewestTrapTime.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogNewestTrapTime.setDescription('The value of sysUpTime when the latest entry was placed in the log. If the entry occurred before the most recent management system initialization this object value MUST be set to zero. If no trap was logged yet this object value MUST be set to zero. Otherwise should be same as the value of trpzTraplogTrapTime for the latest entry in trpzTraplogTrapTable, _if_ these objects were read at exactly same time.')
trpzTraplogNewestTrapDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 2, 4), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogNewestTrapDateAndTime.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogNewestTrapDateAndTime.setDescription("The local date and time of the latest trap occurrence. Instantiated only by systems that have date and time capability. A value of '0000000000000000'H (all zeros, length 8 octets) means that no trap was logged yet (possibly because trap logging is disabled). Otherwise should be same as the value of trpzTraplogTrapDateAndTime for the latest entry in trpzTraplogTrapTable, _if_ these objects were read at exactly same time.")
trpzTraplogTrapTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 3), )
if mibBuilder.loadTexts: trpzTraplogTrapTable.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapTable.setDescription('The main Trap Log table: contains the most recent traps generated. The index of the oldest entry is specified by trpzTraplogOldestTrapIndex and the index of the youngest entry is specified by trpzTraplogNewestTrapIndex. It is an implementation-specific matter whether entries in this table are preserved across initializations of the management system. In general one would expect that they are not. Note that keeping entries across initializations of the management system leads to some confusion with counters and TimeStamps, since both of those are based on sysUpTime, which resets on management initialization. In this situation, counters apply only after the reset and trpzTraplogTrapTime for entries made before the reset MUST be set to 0.')
trpzTraplogTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 3, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogTrapIndex"))
if mibBuilder.loadTexts: trpzTraplogTrapEntry.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapEntry.setDescription('A Trap Log entry corresponds to a trap occurrence. Entries appear in this table when notifications occur and pass any filtering rules that may be configured on the switch. They are removed to make way for new entries due to lack of resources or when the configured limits are reached. If adding an entry would exceed the configured limits or system resources in general, the oldest entry (or entries) must be removed to make room for the new one. The index for an existing entry is not affected when a entry is added or removed from this table.')
trpzTraplogTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 3, 1, 1), TrpzTraplogTrapOccurrenceIndex())
if mibBuilder.loadTexts: trpzTraplogTrapIndex.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing entries within this log. When it reaches the maximum value, an extremely unlikely event, the agent wraps the value back to 1.')
trpzTraplogTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogTrapTime.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapTime.setDescription('The value of sysUpTime when the entry was placed in the log. If the entry occurred before the most recent management system initialization this object value MUST be set to zero.')
trpzTraplogTrapDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogTrapDateAndTime.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapDateAndTime.setDescription('The local date and time when the entry was logged, instantiated only by systems that have date and time capability.')
trpzTraplogTrapNotificationID = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 3, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogTrapNotificationID.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapNotificationID.setDescription('The NOTIFICATION-TYPE object identifier of the Notification that occurred.')
trpzTraplogTrapNumVars = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogTrapNumVars.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapNumVars.setDescription('The Number of Variable bindings that should have been logged (in trpzTraplogVarTable) for this trap occurrence.')
trpzTraplogVarTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4), )
if mibBuilder.loadTexts: trpzTraplogVarTable.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarTable.setDescription('The Trap Log detail table: Variable bindings for the currently stored trap occurrences (existing entries in trpzTraplogTrapTable).')
trpzTraplogVarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarTrapIndex"), (0, "TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarIndex"))
if mibBuilder.loadTexts: trpzTraplogVarEntry.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarEntry.setDescription('Trap Log Variable binding entry. Entries appear in this table when there are variables in the varbind list of a trap occurrence that is currently stored (has an entry in trpzTraplogTrapTable).')
trpzTraplogVarTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 1), TrpzTraplogTrapOccurrenceIndex())
if mibBuilder.loadTexts: trpzTraplogVarTrapIndex.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarTrapIndex.setDescription("The index of a logged trap, see 'trpzTraplogTrapIndex' above.")
trpzTraplogVarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: trpzTraplogVarIndex.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarIndex.setDescription('A monotonically increasing integer, starting at 1 for a given trpzTraplogTrapIndex, for indexing variables within the logged trap.')
trpzTraplogVarID = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarID.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarID.setDescription("The variable's object identifier.")
trpzTraplogVarValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("counter32", 1), ("unsigned32", 2), ("timeTicks", 3), ("integer32", 4), ("ipAddress", 5), ("octetString", 6), ("objectId", 7), ("counter64", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarValueType.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarValueType.setDescription('The type of the value. One and only one of the value objects that follow must be instantiated, based on this type.')
trpzTraplogVarCounter32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarCounter32Val.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarCounter32Val.setDescription("The value when trpzTraplogVarType is 'counter32'.")
trpzTraplogVarUnsigned32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarUnsigned32Val.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarUnsigned32Val.setDescription("The value when trpzTraplogVarType is 'unsigned32'.")
trpzTraplogVarTimeTicksVal = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarTimeTicksVal.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarTimeTicksVal.setDescription("The value when trpzTraplogVarType is 'timeTicks'.")
trpzTraplogVarInteger32Val = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarInteger32Val.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarInteger32Val.setDescription("The value when trpzTraplogVarType is 'integer32'.")
trpzTraplogVarOctetStringVal = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarOctetStringVal.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarOctetStringVal.setDescription("The value when trpzTraplogVarType is 'octetString'.")
trpzTraplogVarIpAddressVal = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarIpAddressVal.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarIpAddressVal.setDescription("The value when trpzTraplogVarType is 'ipAddress'. This is an IPv4 format address, known as IpAddress. IPv6 addresses are represented using TAddress or InetAddress, and so the underlying datatype is OCTET STRING, and their value would be stored in the trpzTraplogVarOctetStringVal column.")
trpzTraplogVarOidVal = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarOidVal.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarOidVal.setDescription("The value when trpzTraplogVarType is 'objectId'.")
trpzTraplogVarCounter64Val = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 13, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzTraplogVarCounter64Val.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarCounter64Val.setDescription("The value when trpzTraplogVarType is 'counter64'.")
trpzTraplogConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2))
trpzTraplogCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2, 1))
trpzTraplogGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2, 2))
trpzTraplogCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2, 1, 1)).setObjects(("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogGuideGroup"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogTrapGroup"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarGroup"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogGuideDateGroup"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogTrapDateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzTraplogCompliance = trpzTraplogCompliance.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogCompliance.setDescription('The compliance statement for devices that implement the Traplog MIB.')
trpzTraplogGuideGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2, 2, 1)).setObjects(("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogOldestTrapIndex"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogNewestTrapIndex"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogNewestTrapTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzTraplogGuideGroup = trpzTraplogGuideGroup.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogGuideGroup.setDescription('Mandatory group of global objects for managing the Trap Log.')
trpzTraplogGuideDateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2, 2, 2)).setObjects(("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogNewestTrapDateAndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzTraplogGuideDateGroup = trpzTraplogGuideDateGroup.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogGuideDateGroup.setDescription('Conditionally mandatory global objects for managing the Trap Log. This group is mandatory on systems that keep wall clock date and time and should not be implemented on systems that do not have a wall clock date.')
trpzTraplogTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2, 2, 3)).setObjects(("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogTrapTime"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogTrapNotificationID"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogTrapNumVars"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzTraplogTrapGroup = trpzTraplogTrapGroup.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapGroup.setDescription('Mandatory group of objects implemented to provide info on Trap occurrences.')
trpzTraplogTrapDateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2, 2, 4)).setObjects(("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogTrapDateAndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzTraplogTrapDateGroup = trpzTraplogTrapDateGroup.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogTrapDateGroup.setDescription('Conditionally mandatory Trap occurrence info. This group is mandatory on systems that keep wall clock date and time and should not be implemented on systems that do not have a wall clock date.')
trpzTraplogVarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 13, 2, 2, 5)).setObjects(("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarID"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarValueType"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarCounter32Val"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarUnsigned32Val"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarTimeTicksVal"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarInteger32Val"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarOctetStringVal"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarIpAddressVal"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarOidVal"), ("TRAPEZE-NETWORKS-TRAPLOG-MIB", "trpzTraplogVarCounter64Val"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzTraplogVarGroup = trpzTraplogVarGroup.setStatus('current')
if mibBuilder.loadTexts: trpzTraplogVarGroup.setDescription('Mandatory group of objects implemented to provide info on Variable bindings.')
mibBuilder.exportSymbols("TRAPEZE-NETWORKS-TRAPLOG-MIB", trpzTraplogNewestTrapDateAndTime=trpzTraplogNewestTrapDateAndTime, trpzTraplogVarOidVal=trpzTraplogVarOidVal, trpzTraplogNewestTrapIndex=trpzTraplogNewestTrapIndex, trpzTraplogCompliances=trpzTraplogCompliances, trpzTraplogVarID=trpzTraplogVarID, trpzTraplogTrapDateGroup=trpzTraplogTrapDateGroup, trpzTraplogTrapNumVars=trpzTraplogTrapNumVars, trpzTraplogVarIndex=trpzTraplogVarIndex, trpzTraplogTrapDateAndTime=trpzTraplogTrapDateAndTime, trpzTraplogGroups=trpzTraplogGroups, TrpzTraplogTrapOccurrenceIndexOrZero=TrpzTraplogTrapOccurrenceIndexOrZero, trpzTraplogTrapEntry=trpzTraplogTrapEntry, trpzTraplogConformance=trpzTraplogConformance, trpzTraplogVarUnsigned32Val=trpzTraplogVarUnsigned32Val, TrpzTraplogTrapOccurrenceIndex=TrpzTraplogTrapOccurrenceIndex, trpzTraplogVarOctetStringVal=trpzTraplogVarOctetStringVal, trpzTraplogTrapNotificationID=trpzTraplogTrapNotificationID, trpzTraplogVarEntry=trpzTraplogVarEntry, trpzTraplogVarValueType=trpzTraplogVarValueType, trpzTraplogVarCounter64Val=trpzTraplogVarCounter64Val, trpzTraplogVarTimeTicksVal=trpzTraplogVarTimeTicksVal, trpzTraplogTrapTable=trpzTraplogTrapTable, trpzTraplogOldestTrapIndex=trpzTraplogOldestTrapIndex, trpzTraplogMibObjects=trpzTraplogMibObjects, trpzTraplogVarCounter32Val=trpzTraplogVarCounter32Val, trpzTraplogCompliance=trpzTraplogCompliance, trpzTraplogVarTable=trpzTraplogVarTable, trpzTraplogVarTrapIndex=trpzTraplogVarTrapIndex, trpzTraplogVarIpAddressVal=trpzTraplogVarIpAddressVal, trpzTraplogTrapGroup=trpzTraplogTrapGroup, trpzTraplogNewestTrapTime=trpzTraplogNewestTrapTime, trpzTraplogGuideDateGroup=trpzTraplogGuideDateGroup, trpzTraplogVarGroup=trpzTraplogVarGroup, trpzTraplogTrapIndex=trpzTraplogTrapIndex, trpzTraplogTrapTime=trpzTraplogTrapTime, trpzTraplogVarInteger32Val=trpzTraplogVarInteger32Val, trpzTraplogMib=trpzTraplogMib, trpzTraplogGuideGroup=trpzTraplogGuideGroup, trpzTraplogGuideObjects=trpzTraplogGuideObjects, PYSNMP_MODULE_ID=trpzTraplogMib)
