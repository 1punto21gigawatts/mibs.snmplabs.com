#
# PySNMP MIB module CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ctDynamicArpInspectionExpMib, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctDynamicArpInspectionExpMib")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Bits, Counter32, IpAddress, MibIdentifier, Gauge32, ModuleIdentity, TimeTicks, Unsigned32, ObjectIdentity, Counter64, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Counter32", "IpAddress", "MibIdentifier", "Gauge32", "ModuleIdentity", "TimeTicks", "Unsigned32", "ObjectIdentity", "Counter64", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, StorageType, MacAddress, TruthValue, RowPointer, PhysAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "StorageType", "MacAddress", "TruthValue", "RowPointer", "PhysAddress", "TextualConvention", "RowStatus")
ctFastPathDynamicArpInspectionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1))
if mibBuilder.loadTexts: ctFastPathDynamicArpInspectionMIB.setLastUpdated('200807231519Z')
if mibBuilder.loadTexts: ctFastPathDynamicArpInspectionMIB.setOrganization('Enterasys Networks, Inc.')
if mibBuilder.loadTexts: ctFastPathDynamicArpInspectionMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: ctFastPathDynamicArpInspectionMIB.setDescription('The Enterasys MIB for FASTPATH Dynamic ARP INspection')
ctAgentDaiConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1))
ctAgentDaiSrcMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiSrcMacValidate.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiSrcMacValidate.setDescription("This object indicates whether Sender MAC validation in the ARP packets is enabled. If this object is set to 'true', validation is enabled. If this object is set to 'false', validation is disabled.")
ctAgentDaiDstMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiDstMacValidate.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiDstMacValidate.setDescription("This object indicates whether Target MAC validation in the ARP Response packets is enabled. If this object is set to 'true', validation is enabled. If this object is set to 'false', validation is disabled.")
ctAgentDaiIPValidate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiIPValidate.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiIPValidate.setDescription("This object indicates whether IP address validation in the ARP packets is enabled. If this object is set to 'true', validation is enabled. If this object is set to 'false', validation is disabled.")
ctAgentDaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4), )
if mibBuilder.loadTexts: ctAgentDaiVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanConfigTable.setDescription('A table provides the mechanism to control Dynamic ARP Inspection per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
ctAgentDaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1), ).setIndexNames((0, "CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB", "ctAgentDaiVlanIndex"))
if mibBuilder.loadTexts: ctAgentDaiVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanConfigEntry.setDescription('A row instance contains the configuration for Dynamic ARP Inspection at each existing VLAN.')
ctAgentDaiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: ctAgentDaiVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanIndex.setDescription('This object indicates the VLAN number on which Dynamic ARP Inspection feature is configured.')
ctAgentDaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiVlanDynArpInspEnable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanDynArpInspEnable.setDescription("This object indicates whether Dynamic ARP Inspection is enabled in this VLAN. If this object is set to 'true', Dynamic ARP Inspection is enabled. If this object is set to 'false', Dynamic ARP Inspection is disabled.")
ctAgentDaiVlanLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiVlanLoggingEnable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanLoggingEnable.setDescription("This object indicates whether the Dynamic ARP Inspection logging is enabled on this VlAN. If this object is set to 'true', Dynamic ARP Inspection logging is enabled. If this object is set to 'false', Dynamic ARP Inspection loging is disabled.")
ctAgentDaiVlanArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiVlanArpAclName.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanArpAclName.setDescription('This object indicates the ARP ACL name set for this VLAN.')
ctAgentDaiVlanArpAclStaticFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiVlanArpAclStaticFlag.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanArpAclStaticFlag.setDescription("This object indicates whether the ARP ACL set for this VLAN has static flag set. If this object is set to 'true', static flag is enabled. If this object is set to 'false', static flag is disabled.")
ctAagentDaiStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAagentDaiStatsReset.setStatus('current')
if mibBuilder.loadTexts: ctAagentDaiStatsReset.setDescription('Clear the DAI statistics on all vlans. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
ctAgentDaiVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6), )
if mibBuilder.loadTexts: ctAgentDaiVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanStatsTable.setDescription('A table provides the mechanism to control Dynamic ARP Inspection per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
ctAgentDaiVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1), ).setIndexNames((0, "CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB", "ctAgentDaiVlanStatsIndex"))
if mibBuilder.loadTexts: ctAgentDaiVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanStatsEntry.setDescription('A row instance contains the Dynamic ARP Inspection statistics per VLAN.')
ctAgentDaiVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 1), VlanIndex())
if mibBuilder.loadTexts: ctAgentDaiVlanStatsIndex.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanStatsIndex.setDescription('This object indicates the VLAN number on which Dynamic ARP Inspection statistics are retrieved.')
ctAgentDaiVlanPktsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanPktsForwarded.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanPktsForwarded.setDescription('Number of valid ARP packets forwarded by DAI.')
ctAgentDaiVlanPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanPktsDropped.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanPktsDropped.setDescription('Number of invalid ARP packets dropped by DAI.')
ctAgentDaiVlanDhcpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanDhcpDrops.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanDhcpDrops.setDescription('Number of ARP packets that were dropped by DAI as there is no matching DHCP Snooping binding entry found.')
ctAgentDaiVlanDhcpPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanDhcpPermits.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanDhcpPermits.setDescription('Number of ARP packets that were forwarded by DAI as there is a matching DHCP Snooping binding entry found.')
ctAgentDaiVlanAclDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanAclDrops.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanAclDrops.setDescription('Number of ARP packets that were dropped by DAI as there is no matching ARP ACL rule found for this Vlan and the static flag is set on this vlan.')
ctAgentDaiVlanAclPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanAclPermits.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanAclPermits.setDescription('Number of ARP packets that were permitted by DAI as there is a matching ARP ACL rule found for this Vlan.')
ctAgentDaiVlanSrcMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanSrcMacFailures.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanSrcMacFailures.setDescription("Number of ARP packets that were dropped by DAI as the sender mac address in ARP packet didn't match the source mac in ethernet header.")
ctAgentDaiVlanDstMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanDstMacFailures.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanDstMacFailures.setDescription("Number of ARP packets that were dropped by DAI as the target mac address in ARP reply packet didn't match the destination mac in ethernet header.")
ctAgentDaiVlanIpValidFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDaiVlanIpValidFailures.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiVlanIpValidFailures.setDescription('Number of ARP packets that were dropped by DAI as the sender IP address in ARP packet or target IP address in ARP reply packet is invalid. Invalid addresses include 0.0.0.0, 255.255.255.255, IP multicast addresses, class E addresses (240.0.0.0/4), loopback addresses (127.0.0.0/8).')
ctAgentDaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7), )
if mibBuilder.loadTexts: ctAgentDaiIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for Dynamic ARP Inspection purpose at each physical interface capable of this feature.')
ctAgentDaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctAgentDaiIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiIfConfigEntry.setDescription('A row instance contains the configuration for Dynamic ARP Inspection at each physical interface capable of this feature.')
ctAgentDaiIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiIfTrustEnable.setDescription("This object indicates whether the interface is trusted for Dynamic ARP Inspection purpose. If this object is set to 'true', the interface is trusted. ARP packets coming to this interface will be forwarded without checking. If this object is set to 'false', the interface is not trusted. ARP packets coming to this interface will be subjected to ARP inspection.")
ctAgentDaiIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(15)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiIfRateLimit.setDescription('This object indicates rate limit value for Dynamic ARP Inspection purpose. If the incoming rate of ARP packets exceeds the value of this object for consecutively burst interval seconds, ARP packets will be dropped. ')
ctAgentDaiIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 36, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDaiIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: ctAgentDaiIfBurstInterval.setDescription('This object indicates the burst interval value for rate limiting purpose on this interface.')
mibBuilder.exportSymbols("CT-FASTPATH-DYNAMIC-ARP-INSPECTION-MIB", ctAgentDaiVlanDhcpPermits=ctAgentDaiVlanDhcpPermits, ctAagentDaiStatsReset=ctAagentDaiStatsReset, ctAgentDaiVlanArpAclName=ctAgentDaiVlanArpAclName, ctAgentDaiVlanDstMacFailures=ctAgentDaiVlanDstMacFailures, ctAgentDaiVlanStatsTable=ctAgentDaiVlanStatsTable, ctAgentDaiVlanDynArpInspEnable=ctAgentDaiVlanDynArpInspEnable, ctAgentDaiIfRateLimit=ctAgentDaiIfRateLimit, ctAgentDaiVlanPktsDropped=ctAgentDaiVlanPktsDropped, ctAgentDaiIPValidate=ctAgentDaiIPValidate, ctAgentDaiIfConfigTable=ctAgentDaiIfConfigTable, ctAgentDaiConfigGroup=ctAgentDaiConfigGroup, ctAgentDaiVlanIndex=ctAgentDaiVlanIndex, ctAgentDaiVlanConfigTable=ctAgentDaiVlanConfigTable, ctAgentDaiVlanConfigEntry=ctAgentDaiVlanConfigEntry, ctAgentDaiDstMacValidate=ctAgentDaiDstMacValidate, ctAgentDaiIfBurstInterval=ctAgentDaiIfBurstInterval, ctAgentDaiVlanAclDrops=ctAgentDaiVlanAclDrops, ctAgentDaiVlanArpAclStaticFlag=ctAgentDaiVlanArpAclStaticFlag, ctAgentDaiVlanPktsForwarded=ctAgentDaiVlanPktsForwarded, ctAgentDaiVlanLoggingEnable=ctAgentDaiVlanLoggingEnable, ctAgentDaiVlanSrcMacFailures=ctAgentDaiVlanSrcMacFailures, ctAgentDaiVlanIpValidFailures=ctAgentDaiVlanIpValidFailures, ctAgentDaiSrcMacValidate=ctAgentDaiSrcMacValidate, ctAgentDaiIfTrustEnable=ctAgentDaiIfTrustEnable, PYSNMP_MODULE_ID=ctFastPathDynamicArpInspectionMIB, ctFastPathDynamicArpInspectionMIB=ctFastPathDynamicArpInspectionMIB, ctAgentDaiVlanStatsIndex=ctAgentDaiVlanStatsIndex, ctAgentDaiVlanAclPermits=ctAgentDaiVlanAclPermits, ctAgentDaiVlanStatsEntry=ctAgentDaiVlanStatsEntry, ctAgentDaiVlanDhcpDrops=ctAgentDaiVlanDhcpDrops, ctAgentDaiIfConfigEntry=ctAgentDaiIfConfigEntry)
