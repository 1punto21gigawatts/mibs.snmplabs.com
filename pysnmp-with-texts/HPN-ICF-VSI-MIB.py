#
# PySNMP MIB module HPN-ICF-VSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-VSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, TimeTicks, MibIdentifier, iso, Counter64, Gauge32, Bits, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "TimeTicks", "MibIdentifier", "iso", "Counter64", "Gauge32", "Bits", "NotificationType", "ModuleIdentity")
MacAddress, TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
hpnicfVsi = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105))
hpnicfVsi.setRevisions(('2009-08-08 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfVsi.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hpnicfVsi.setLastUpdated('200908081000Z')
if mibBuilder.loadTexts: hpnicfVsi.setOrganization('')
if mibBuilder.loadTexts: hpnicfVsi.setContactInfo('')
if mibBuilder.loadTexts: hpnicfVsi.setDescription('The MIB for VSI (Virtual Switch Instance).')
hpnicfVsiObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1))
hpnicfVsiScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 1))
hpnicfVsiNextAvailableVsiIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVsiNextAvailableVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiNextAvailableVsiIndex.setDescription('Next available VSI entry index for creating VSI. Its value ranges from 0x1 to 0xFFFFFFFF. The invalid value 0xFFFFFFFF indicates that no VSI entry can be created.')
hpnicfVsiL2vpnStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVsiL2vpnStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiL2vpnStatus.setDescription('The global configuration of L2VPN.')
hpnicfVsiTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2), )
if mibBuilder.loadTexts: hpnicfVsiTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiTable.setDescription('A table for configuring VSI parameters.')
hpnicfVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-VSI-MIB", "hpnicfVsiIndex"))
if mibBuilder.loadTexts: hpnicfVsiEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiEntry.setDescription('An entry for configuring VSI parameters.')
hpnicfVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiIndex.setDescription('Index of VSI. Its value ranges from 0x1 to 0xFFFFFFFE.')
hpnicfVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiName.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiName.setDescription('Name of VSI. Max string length of VSI name is 31.')
hpnicfVsiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("default", 0), ("martini", 1), ("minm", 2), ("martiniAndMinm", 3), ("kompella", 4), ("kompellaAndMinm", 5), ("minmpxp", 6), ("martiniAndMinmpxp", 7), ("kompellaAndMinmpxp", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiMode.setDescription('Mode of VSI. Martini mode indicated this VSI supports VPLS service signalled using LDP. Kompella indicated this VSI supports VPLS service signalled using BGP. Minm indicated this VSI supports MAC-in-MAC service. Default indicated this VSI supports all services.')
hpnicfMinmIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMinmIsid.setStatus('current')
if mibBuilder.loadTexts: hpnicfMinmIsid.setDescription('The PBB I-SID of VSI in minm or martiniAndMinm mode. It must be different for every VSI. Its value ranges from 0x1 to 0xFFFFFF. In other VSI modes, its value is invalid value 0x0.')
hpnicfVsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiId.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiId.setDescription("Identifier of VSI in martini or martiniAndMinm mode, by default, it's the PW ID of this VSI. Its value ranges from 1 to 4294967295. In other VSI modes, its value is invalid value 0.")
hpnicfVsiTransMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("ethernet", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiTransMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiTransMode.setDescription('Transit Mode of VSI.')
hpnicfVsiEnableHubSpoke = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiEnableHubSpoke.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiEnableHubSpoke.setDescription('Config HubSpoke property of this VSI.')
hpnicfVsiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adminUp", 1), ("adminDown", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiAdminState.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiAdminState.setDescription('Set VSI admin state as adminUp or adminDown.')
hpnicfVsiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiRowStatus.setDescription('Operation status of this table entry.')
hpnicfVsiSpbIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiSpbIsid.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiSpbIsid.setDescription('The SPB I-SID of VSI in minm or martiniAndMinm mode. It must be different for every VSI. Its value ranges from 0xFF to 0xFFFFFF. In other VSI modes, its value is invalid value 0x0.')
hpnicfVsiVxlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVsiVxlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiVxlanID.setDescription('VXLAN ID, in the range of 0x0 to 0xFFFFFF. Value 0xFFFFFFFF means this VSI does not enable VXLAN service.')
hpnicfVsiArpSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiArpSuppression.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiArpSuppression.setDescription('The capability of ARP suppression.')
hpnicfVsiFlooding = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiFlooding.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiFlooding.setDescription('The capability of MAC(Media Access Control) flooding.')
hpnicfVsiLocalMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVsiLocalMacCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiLocalMacCount.setDescription('The number of VSI local MAC addresses.')
hpnicfVsiXconnectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 3), )
if mibBuilder.loadTexts: hpnicfVsiXconnectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiXconnectTable.setDescription('A table for configuring xconnect parameters.')
hpnicfVsiXconnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-VSI-MIB", "hpnicfVsiXconnectIfIndex"), (0, "HPN-ICF-VSI-MIB", "hpnicfVsiXconnectEvcSrvInstId"))
if mibBuilder.loadTexts: hpnicfVsiXconnectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiXconnectEntry.setDescription('An entry for configuring xconnect parameters. Each entry means connecting a service instance of a interface to a VSI.')
hpnicfVsiXconnectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfVsiXconnectIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiXconnectIfIndex.setDescription('Index of the interface associated with the VSI.')
hpnicfVsiXconnectEvcSrvInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfVsiXconnectEvcSrvInstId.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiXconnectEvcSrvInstId.setDescription('Index of the service instance associated with the VSI.')
hpnicfVsiXconnectVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiXconnectVsiName.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiXconnectVsiName.setDescription('Name of VSI. Max string length of VSI name is 31.')
hpnicfVsiXconnectAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("ethernet", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiXconnectAccessMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiXconnectAccessMode.setDescription('Access mode of this service instance.')
hpnicfVsiXconnectHubSpoke = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hub", 2), ("spoke", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiXconnectHubSpoke.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiXconnectHubSpoke.setDescription('Config HubSpoke property of this service instance.')
hpnicfVsiXconnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiXconnectRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiXconnectRowStatus.setDescription('Operation status of this table entry.')
hpnicfVsiPwBindTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 4), )
if mibBuilder.loadTexts: hpnicfVsiPwBindTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiPwBindTable.setDescription('A table for PW(PseudoWire) mapping to VSI.')
hpnicfVsiPwBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-VSI-MIB", "hpnicfVsiIndex"), (0, "HPN-ICF-VSI-MIB", "hpnicfVsiPwIndex"))
if mibBuilder.loadTexts: hpnicfVsiPwBindEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiPwBindEntry.setDescription('Each entry means a PW mapping to a VSI.')
hpnicfVsiPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfVsiPwIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiPwIndex.setDescription('A unique index for the conceptual row identifying a PW in the pwTable.')
hpnicfVsiPwBindAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 4, 1, 2), Bits().clone(namedValues=NamedValues(("noSplitHorizon", 0), ("hub", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiPwBindAttributes.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiPwBindAttributes.setDescription('This bit mask indicates optional values for this PW. The following describes these bit fields: noSplitHorizon flag indicates that the PW disable split horizon forwarding. hub flag indicates that the PW as the hub link the VSI.')
hpnicfVsiPwBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiPwBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiPwBindRowStatus.setDescription("Operation status of this table entry. A row entry cannot be modified when the value of this object is 'active'.")
hpnicfVsiFloodMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 5), )
if mibBuilder.loadTexts: hpnicfVsiFloodMacTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiFloodMacTable.setDescription('A table of MAC addresses enabled with selective flooding.')
hpnicfVsiFloodMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-VSI-MIB", "hpnicfVsiIndex"), (0, "HPN-ICF-VSI-MIB", "hpnicfVsiFloodMac"))
if mibBuilder.loadTexts: hpnicfVsiFloodMacEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiFloodMacEntry.setDescription('Each entry represents a selective flooding MAC.')
hpnicfVsiFloodMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfVsiFloodMac.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiFloodMac.setDescription('MAC address.')
hpnicfVsiFloodMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVsiFloodMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiFloodMacRowStatus.setDescription('Operation status of this table entry.')
hpnicfVsiLocalMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 6), )
if mibBuilder.loadTexts: hpnicfVsiLocalMacTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiLocalMacTable.setDescription('A table for VSI local MAC addresses.')
hpnicfVsiLocalMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-VSI-MIB", "hpnicfVsiIndex"), (0, "HPN-ICF-VSI-MIB", "hpnicfVsiLocalMacAddr"))
if mibBuilder.loadTexts: hpnicfVsiLocalMacEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiLocalMacEntry.setDescription('A local MAC address of VSI.')
hpnicfVsiLocalMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfVsiLocalMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiLocalMacAddr.setDescription('MAC address.')
hpnicfVsiLocalMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVsiLocalMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiLocalMacIfIndex.setDescription('Index of the interface associated with the MAC address.')
hpnicfVsiLocalMacSrvID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 105, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVsiLocalMacSrvID.setStatus('current')
if mibBuilder.loadTexts: hpnicfVsiLocalMacSrvID.setDescription('Index of the service instance associated with the MAC address.')
mibBuilder.exportSymbols("HPN-ICF-VSI-MIB", hpnicfVsiXconnectVsiName=hpnicfVsiXconnectVsiName, hpnicfVsiTable=hpnicfVsiTable, hpnicfVsiPwBindEntry=hpnicfVsiPwBindEntry, hpnicfVsiSpbIsid=hpnicfVsiSpbIsid, hpnicfVsi=hpnicfVsi, hpnicfVsiLocalMacSrvID=hpnicfVsiLocalMacSrvID, hpnicfVsiXconnectRowStatus=hpnicfVsiXconnectRowStatus, hpnicfVsiLocalMacIfIndex=hpnicfVsiLocalMacIfIndex, hpnicfVsiName=hpnicfVsiName, hpnicfVsiXconnectTable=hpnicfVsiXconnectTable, hpnicfVsiXconnectIfIndex=hpnicfVsiXconnectIfIndex, hpnicfVsiRowStatus=hpnicfVsiRowStatus, hpnicfVsiAdminState=hpnicfVsiAdminState, hpnicfVsiFlooding=hpnicfVsiFlooding, hpnicfVsiXconnectHubSpoke=hpnicfVsiXconnectHubSpoke, hpnicfVsiNextAvailableVsiIndex=hpnicfVsiNextAvailableVsiIndex, hpnicfVsiL2vpnStatus=hpnicfVsiL2vpnStatus, hpnicfVsiLocalMacEntry=hpnicfVsiLocalMacEntry, hpnicfVsiMode=hpnicfVsiMode, hpnicfVsiId=hpnicfVsiId, hpnicfVsiScalarGroup=hpnicfVsiScalarGroup, hpnicfVsiFloodMacTable=hpnicfVsiFloodMacTable, hpnicfVsiPwBindAttributes=hpnicfVsiPwBindAttributes, hpnicfVsiXconnectEvcSrvInstId=hpnicfVsiXconnectEvcSrvInstId, hpnicfVsiXconnectAccessMode=hpnicfVsiXconnectAccessMode, PYSNMP_MODULE_ID=hpnicfVsi, hpnicfVsiFloodMac=hpnicfVsiFloodMac, hpnicfVsiArpSuppression=hpnicfVsiArpSuppression, hpnicfVsiPwIndex=hpnicfVsiPwIndex, hpnicfVsiXconnectEntry=hpnicfVsiXconnectEntry, hpnicfMinmIsid=hpnicfMinmIsid, hpnicfVsiLocalMacAddr=hpnicfVsiLocalMacAddr, hpnicfVsiFloodMacEntry=hpnicfVsiFloodMacEntry, hpnicfVsiFloodMacRowStatus=hpnicfVsiFloodMacRowStatus, hpnicfVsiPwBindRowStatus=hpnicfVsiPwBindRowStatus, hpnicfVsiLocalMacTable=hpnicfVsiLocalMacTable, hpnicfVsiTransMode=hpnicfVsiTransMode, hpnicfVsiEnableHubSpoke=hpnicfVsiEnableHubSpoke, hpnicfVsiPwBindTable=hpnicfVsiPwBindTable, hpnicfVsiIndex=hpnicfVsiIndex, hpnicfVsiLocalMacCount=hpnicfVsiLocalMacCount, hpnicfVsiObjects=hpnicfVsiObjects, hpnicfVsiEntry=hpnicfVsiEntry, hpnicfVsiVxlanID=hpnicfVsiVxlanID)
