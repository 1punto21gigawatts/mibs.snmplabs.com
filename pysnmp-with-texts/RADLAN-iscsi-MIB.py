#
# PySNMP MIB module RADLAN-iscsi-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-iscsi-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:50:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibIdentifier, Unsigned32, Bits, NotificationType, IpAddress, TimeTicks, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Bits", "NotificationType", "IpAddress", "TimeTicks", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "ModuleIdentity", "Counter64")
TruthValue, RowStatus, DateAndTime, TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DateAndTime", "TextualConvention", "TimeStamp", "DisplayString")
rlIscsiSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 126))
rlIscsiSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 126, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopEnable.setDescription('Enable/Disable iSCSI Snooping in the switch.')
rlIscsiSnoopAgingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 126, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2592000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopAgingTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopAgingTimeOut.setDescription('The time in seconds that should pass before session aging out after the last frame transmitted for the session.')
class QosType(TextualConvention, Integer32):
    description = 'Type of QoS: VPT or DSCP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("vpt", 0), ("dscp", 1))

rlIscsiSnoopQosTable = MibTable((1, 3, 6, 1, 4, 1, 89, 126, 3), )
if mibBuilder.loadTexts: rlIscsiSnoopQosTable.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopQosTable.setDescription('The (conceptual) table for configuration of iSCSI QOS.')
rlIscsiSnoopQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 126, 3, 1), ).setIndexNames((0, "RADLAN-iscsi-MIB", "rlIscsiSnoopQosKey"))
if mibBuilder.loadTexts: rlIscsiSnoopQosEntry.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopQosEntry.setDescription('An entry (conceptual row) in the rlIscsiSnoopQosTable.')
rlIscsiSnoopQosKey = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: rlIscsiSnoopQosKey.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopQosKey.setDescription('Key of the rlIscsiSnoopQosTable table')
rlIscsiSnoopQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 3, 1, 2), QosType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopQosType.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopQosType.setDescription('Current type of QoS of iSCSI packets')
rlIscsiSnoopQosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopQosValue.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopQosValue.setDescription('The value of VPT or DSCP, depends on rlIscsiSnoopQosType, that will be assigned to each iSCSI packet. The range of VPT value is 0..7. The range of DSCP value is 0..63')
rlIscsiSnoopQosRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopQosRemark.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopQosRemark.setDescription('Whether iSCSI frames with the configured VPT/DSCP when egressing the switch.')
rlIscsiSnoopTargetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 89, 126, 4), )
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigTable.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigTable.setDescription('The (conceptual) table for configuration of iSCSI target TCP port number IP address and name.')
rlIscsiSnoopTargetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 126, 4, 1), ).setIndexNames((0, "RADLAN-iscsi-MIB", "rlIscsiSnoopTargetConfigTcpPort"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopTargetConfigAddr"))
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigEntry.setDescription('An entry (conceptual row) in the rlIscsiSnoopTargetPortConfigTable.')
rlIscsiSnoopTargetConfigTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigTcpPort.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigTcpPort.setDescription('The TCP port of configured target.')
rlIscsiSnoopTargetConfigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigAddr.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigAddr.setDescription('Specifies the target address. If the target address is ignored the address should be 0.0.0.0')
rlIscsiSnoopTargetConfigName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigName1.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigName1.setDescription('The first part of target name')
rlIscsiSnoopTargetConfigName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigName2.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigName2.setDescription('The second part of target name')
rlIscsiSnoopTargetConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigStatus.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetConfigStatus.setDescription("The status of the target. It's used to add/delete a target")
rlIscsiSnoopTargetNameTable = MibTable((1, 3, 6, 1, 4, 1, 89, 126, 5), )
if mibBuilder.loadTexts: rlIscsiSnoopTargetNameTable.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetNameTable.setDescription('A table that contains iSCSI target names. It is indexed by Target Name ID.')
rlIscsiSnoopTargetNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 126, 5, 1), ).setIndexNames((0, "RADLAN-iscsi-MIB", "rlIscsiSnoopTargetNameId"))
if mibBuilder.loadTexts: rlIscsiSnoopTargetNameEntry.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetNameEntry.setDescription('An entry (conceptual row) in the rlIscsiSnoopTargetNameTable.')
rlIscsiSnoopTargetNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: rlIscsiSnoopTargetNameId.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetNameId.setDescription('Numerical ID of target name assigned by system. ')
rlIscsiSnoopTargetName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopTargetName1.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetName1.setDescription('The first part of target name')
rlIscsiSnoopTargetName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopTargetName2.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopTargetName2.setDescription('The second part of target name')
rlIscsiSnoopInitiatorNameTable = MibTable((1, 3, 6, 1, 4, 1, 89, 126, 6), )
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorNameTable.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorNameTable.setDescription('A table that contains iSCSI initiator names. It is indexed by Target Name ID.')
rlIscsiSnoopInitiatorNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 126, 6, 1), ).setIndexNames((0, "RADLAN-iscsi-MIB", "rlIscsiSnoopInitiatorNameId"))
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorNameEntry.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorNameEntry.setDescription('An entry (conceptual row) in the rlIscsiSnoopInitiatorNameTable.')
rlIscsiSnoopInitiatorNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorNameId.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorNameId.setDescription('Numerical ID of initiator name assigned by system. ')
rlIscsiSnoopInitiatorName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorName1.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorName1.setDescription('The first part of initiator name')
rlIscsiSnoopInitiatorName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorName2.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopInitiatorName2.setDescription('The second part of initiator name')
rlIscsiSnoopSessionTable = MibTable((1, 3, 6, 1, 4, 1, 89, 126, 7), )
if mibBuilder.loadTexts: rlIscsiSnoopSessionTable.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopSessionTable.setDescription('A table that contains iSCSI sessions. It is indexed by Target Name ID, Initiator Name ID and ISID.')
rlIscsiSnoopSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 126, 7, 1), ).setIndexNames((0, "RADLAN-iscsi-MIB", "rlIscsiSnoopTargetNameId"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopInitiatorNameId"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopSessionISID"))
if mibBuilder.loadTexts: rlIscsiSnoopSessionEntry.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopSessionEntry.setDescription('An entry (conceptual row) in the rlIscsiSnoopSessionTable.')
rlIscsiSnoopSessionISID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopSessionISID.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopSessionISID.setDescription('The ISID of current session.')
rlIscsiSnoopSessAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopSessAgingTime.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopSessAgingTime.setDescription('The aging time of current session in seconds For session not under monitor it is equal max aging time. ')
rlIscsiSnoopSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopSessionUpTime.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopSessionUpTime.setDescription('Time the session exists, in seconds.')
rlIscsiSnoopConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 89, 126, 8), )
if mibBuilder.loadTexts: rlIscsiSnoopConnectionTable.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionTable.setDescription('A table that contains iSCSI connections. This is indexed by Session ID and TCP connection parameters.')
rlIscsiSnoopConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 126, 8, 1), ).setIndexNames((0, "RADLAN-iscsi-MIB", "rlIscsiSnoopTargetNameId"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopInitiatorNameId"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopSessionISID"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopConnectionTargetAddr"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopConnectionTargetPort"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopConnectionInitiatorAddr"), (0, "RADLAN-iscsi-MIB", "rlIscsiSnoopConnectionInitiatorPort"))
if mibBuilder.loadTexts: rlIscsiSnoopConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionEntry.setDescription('An entry (conceptual row) in the rlIscsiSnoopConnectionTable.')
rlIscsiSnoopConnectionTargetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: rlIscsiSnoopConnectionTargetAddr.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionTargetAddr.setDescription('Specifies the connection target address.')
rlIscsiSnoopConnectionTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 3), Integer32())
if mibBuilder.loadTexts: rlIscsiSnoopConnectionTargetPort.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionTargetPort.setDescription('The TCP port of connection target.')
rlIscsiSnoopConnectionInitiatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 5), IpAddress())
if mibBuilder.loadTexts: rlIscsiSnoopConnectionInitiatorAddr.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionInitiatorAddr.setDescription('Specifies the connection initiator address.')
rlIscsiSnoopConnectionInitiatorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopConnectionInitiatorPort.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionInitiatorPort.setDescription('The TCP port of connection initiator.')
rlIscsiSnoopConnectionCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopConnectionCreationTime.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionCreationTime.setDescription('The value of SysUpTime at which the connection was created.')
rlIscsiSnoopConnectionLastActTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopConnectionLastActTime.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionLastActTime.setDescription('The value of SysUpTime on the most recent occasion at which the counter object indexed with the value of rlIscsiSnoopConnectionCounterIndex was incremented')
rlIscsiSnoopConnectionLastPollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopConnectionLastPollTime.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionLastPollTime.setDescription('The value of SysUpTime on the most recent occasion at which the counter object indexed with the value of rlIscsiSnoopConnectionCounterIndex was sampled')
rlIscsiSnoopConnectionExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopConnectionExpiryTime.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionExpiryTime.setDescription('The value of SysUpTime at which the connection should be discarded as a result of inactivity elapsed at least rlIscsiSnoopAgingTimeOut.')
rlIscsiSnoopConnectionCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 126, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopConnectionCounterIndex.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopConnectionCounterIndex.setDescription('The index into the the connection counters table of the counter object bound to this rlIscsiSnoopConnectionEntry object.')
rlIscsiSnoopCosEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 126, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopCosEnable.setStatus('current')
if mibBuilder.loadTexts: rlIscsiSnoopCosEnable.setDescription('Enable/Disable iSCSI Snooping COS in the switch.')
mibBuilder.exportSymbols("RADLAN-iscsi-MIB", rlIscsiSnoopTargetConfigName1=rlIscsiSnoopTargetConfigName1, rlIscsiSnoopSessionISID=rlIscsiSnoopSessionISID, rlIscsiSnoopConnectionLastPollTime=rlIscsiSnoopConnectionLastPollTime, rlIscsiSnoopTargetConfigTable=rlIscsiSnoopTargetConfigTable, rlIscsiSnoopInitiatorNameId=rlIscsiSnoopInitiatorNameId, rlIscsiSnoopQosType=rlIscsiSnoopQosType, rlIscsiSnoopAgingTimeOut=rlIscsiSnoopAgingTimeOut, rlIscsiSnoopTargetConfigName2=rlIscsiSnoopTargetConfigName2, rlIscsiSnoopSessionUpTime=rlIscsiSnoopSessionUpTime, rlIscsiSnoopQosTable=rlIscsiSnoopQosTable, rlIscsiSnoopConnectionLastActTime=rlIscsiSnoopConnectionLastActTime, rlIscsiSnoop=rlIscsiSnoop, rlIscsiSnoopConnectionInitiatorAddr=rlIscsiSnoopConnectionInitiatorAddr, rlIscsiSnoopTargetName2=rlIscsiSnoopTargetName2, rlIscsiSnoopInitiatorNameEntry=rlIscsiSnoopInitiatorNameEntry, rlIscsiSnoopConnectionCounterIndex=rlIscsiSnoopConnectionCounterIndex, rlIscsiSnoopConnectionTable=rlIscsiSnoopConnectionTable, rlIscsiSnoopTargetConfigTcpPort=rlIscsiSnoopTargetConfigTcpPort, rlIscsiSnoopQosValue=rlIscsiSnoopQosValue, rlIscsiSnoopTargetNameTable=rlIscsiSnoopTargetNameTable, QosType=QosType, rlIscsiSnoopTargetNameEntry=rlIscsiSnoopTargetNameEntry, rlIscsiSnoopConnectionExpiryTime=rlIscsiSnoopConnectionExpiryTime, rlIscsiSnoopEnable=rlIscsiSnoopEnable, rlIscsiSnoopInitiatorName1=rlIscsiSnoopInitiatorName1, rlIscsiSnoopConnectionTargetAddr=rlIscsiSnoopConnectionTargetAddr, rlIscsiSnoopSessAgingTime=rlIscsiSnoopSessAgingTime, rlIscsiSnoopConnectionTargetPort=rlIscsiSnoopConnectionTargetPort, rlIscsiSnoopTargetName1=rlIscsiSnoopTargetName1, rlIscsiSnoopConnectionEntry=rlIscsiSnoopConnectionEntry, rlIscsiSnoopTargetNameId=rlIscsiSnoopTargetNameId, rlIscsiSnoopQosEntry=rlIscsiSnoopQosEntry, rlIscsiSnoopTargetConfigAddr=rlIscsiSnoopTargetConfigAddr, rlIscsiSnoopQosRemark=rlIscsiSnoopQosRemark, rlIscsiSnoopTargetConfigEntry=rlIscsiSnoopTargetConfigEntry, rlIscsiSnoopTargetConfigStatus=rlIscsiSnoopTargetConfigStatus, rlIscsiSnoopInitiatorNameTable=rlIscsiSnoopInitiatorNameTable, rlIscsiSnoopCosEnable=rlIscsiSnoopCosEnable, rlIscsiSnoopConnectionInitiatorPort=rlIscsiSnoopConnectionInitiatorPort, rlIscsiSnoopConnectionCreationTime=rlIscsiSnoopConnectionCreationTime, rlIscsiSnoopQosKey=rlIscsiSnoopQosKey, rlIscsiSnoopSessionEntry=rlIscsiSnoopSessionEntry, rlIscsiSnoopSessionTable=rlIscsiSnoopSessionTable, rlIscsiSnoopInitiatorName2=rlIscsiSnoopInitiatorName2)
