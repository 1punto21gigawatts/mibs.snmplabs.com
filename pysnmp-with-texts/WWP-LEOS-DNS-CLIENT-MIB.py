#
# PySNMP MIB module WWP-LEOS-DNS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-DNS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, NotificationType, MibIdentifier, Counter32, ObjectIdentity, Counter64, Integer32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "NotificationType", "MibIdentifier", "Counter32", "ObjectIdentity", "Counter64", "Integer32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Unsigned32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosDnsClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16))
wwpLeosDnsClientMIB.setRevisions(('2012-03-20 07:00', '2003-03-19 10:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosDnsClientMIB.setRevisionsDescriptions(('Add new MIB OIDs to support IP protocol version independent Inet addressing. New attributes include: wwpLeosDnsServerInetAddr, wwpLeosDnsServerInetAddrType.', 'Initial Creation',))
if mibBuilder.loadTexts: wwpLeosDnsClientMIB.setLastUpdated('201203200700Z')
if mibBuilder.loadTexts: wwpLeosDnsClientMIB.setOrganization(' Ciena Inc')
if mibBuilder.loadTexts: wwpLeosDnsClientMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosDnsClientMIB.setDescription('A MIB module to manage dns client on the WWP products.')
wwpLeosDnsClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1))
wwpLeosDnsClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1))
wwpLeosDnsClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 2))
wwpLeosDnsClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 2, 0))
wwpLeosDnsClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3))
wwpLeosDnsClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3, 1))
wwpLeosDnsClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3, 2))
wwpLeosDnsClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsClientStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsClientStatus.setDescription('Specifies whether or not the DNS client resolver is enabled or disabled.')
wwpLeosDnsClientDhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsClientDhcpDomainName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsClientDhcpDomainName.setDescription('Specifies the admin domain name configured by dhcp for this device.')
wwpLeosDnsClientDhcpDomainNameState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsClientDhcpDomainNameState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsClientDhcpDomainNameState.setDescription('Specifies if wwpLeosDnsClientDhcpDomainName is enabled or disabled.')
wwpLeosDnsClientUserDomainName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsClientUserDomainName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsClientUserDomainName.setDescription('Specifies the admin domain name configured by user for this device.')
wwpLeosDnsClientUserDomainNameState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsClientUserDomainNameState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsClientUserDomainNameState.setDescription('Specifies if wwpLeosDnsClientUserDomainName is enabled or disabled.')
wwpLeosDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosDnsServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerTable.setDescription('A table containing configured DNS Servers information. To create entry in this table use SNMP multiple set operation. Following mib objects must be set to create valid entry wwpLeosDnsServerAddr, wwpLeosDnsServerStatus')
wwpLeosDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerIndex"))
if mibBuilder.loadTexts: wwpLeosDnsServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerEntry.setDescription('Defines the information pertaining to a configured DNS Server.')
wwpLeosDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: wwpLeosDnsServerIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerIndex.setDescription('The unique index in DNS server table.')
wwpLeosDnsServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerAddr.setDescription('The IP address for the configured DNS Server. wwpLeosDnsServerInetAddr cannot be set at the same time. This OID will be set to 0.0.0.0 when the server has an IPv6 address, which is shown in the wwpLeosDnsServerInetAddr and the wwpLeosDnsServerInetAddrType is set to ipv6. For a server with an IPv4 address, the ip address will be shown in this OID and the wwpLeosDnsServerInetAddr with the wwpLeosDnsServerInetAddrType set to ipv4.')
wwpLeosDnsServerUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerUserPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerUserPriority.setDescription('The priority of the dns server configured by user.')
wwpLeosDnsServerDhcpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsServerDhcpPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerDhcpPriority.setDescription('The priority of the dns server configured by DHCP.')
wwpLeosDnsServerScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("dhcp", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsServerScope.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerScope.setDescription('The object specifies the scope of this entry. Scope of the entry means who configured this entry. dhcp or user or both')
wwpLeosDnsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDnsServerStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerStatus.setDescription("This object is used to create and delete rows in the wwpLeosDnsServerTable. To create a new row the management station must set the object to 'CreateAndGo'.")
wwpLeosDnsServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerInetAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerInetAddrType.setDescription('The Inet address type for the configured DNS Server. Used in conjunction with wwpLeosDnsServerInetAddr. When set to: ipv4 : wwpLeosDnsServerInetAddr should be compliant with InetAddressIPv4 from RFC 4001 ipv6 : wwpLeosDnsServerInetAddr should be compliant with InetAddressIPv6 from RFC 4001')
wwpLeosDnsServerInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerInetAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerInetAddr.setDescription('The Inet address for the configured DNS Server. This OID must be used in conjunction with wwpLeosDnsServerInetAddrType. The InetAddress specified here will be compliant with RFC 4001.')
wwpLeosDnsServerExtTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosDnsServerExtTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerExtTable.setDescription('This table is an extension for wwpLeosDnsServerTable table. This table allows to set more attributes for DNS wwpLeosDnsServerTable table')
wwpLeosDnsServerExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerIndex"))
if mibBuilder.loadTexts: wwpLeosDnsServerExtEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerExtEntry.setDescription('Defines the information pertaining to a configured DNS Server.')
wwpLeosDnsServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerAdminState.setDescription('The object specifies the user admin state of this entry. User can configure this to enable | disable.')
wwpLeosDnsServerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsServerOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerOperState.setDescription('The object specifies the operational state of this entry.')
wwpLeosDnsServerEntryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3, 1, 1)).setObjects(("WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerEntryIpv6Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosDnsServerEntryCompliance = wwpLeosDnsServerEntryCompliance.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerEntryCompliance.setDescription('The compliance statement of the wwpLeosDnsClient MIB.')
wwpLeosDnsServerEntryIpv6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3, 2, 1)).setObjects(("WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerInetAddrType"), ("WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerInetAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosDnsServerEntryIpv6Group = wwpLeosDnsServerEntryIpv6Group.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDnsServerEntryIpv6Group.setDescription('DNS server entry objects for IPv6 address.')
mibBuilder.exportSymbols("WWP-LEOS-DNS-CLIENT-MIB", wwpLeosDnsServerScope=wwpLeosDnsServerScope, wwpLeosDnsClientMIBConformance=wwpLeosDnsClientMIBConformance, PYSNMP_MODULE_ID=wwpLeosDnsClientMIB, wwpLeosDnsServerDhcpPriority=wwpLeosDnsServerDhcpPriority, wwpLeosDnsServerInetAddrType=wwpLeosDnsServerInetAddrType, wwpLeosDnsServerEntry=wwpLeosDnsServerEntry, wwpLeosDnsServerTable=wwpLeosDnsServerTable, wwpLeosDnsServerEntryCompliance=wwpLeosDnsServerEntryCompliance, wwpLeosDnsServerExtEntry=wwpLeosDnsServerExtEntry, wwpLeosDnsServerIndex=wwpLeosDnsServerIndex, wwpLeosDnsClientMIBObjects=wwpLeosDnsClientMIBObjects, wwpLeosDnsClientMIBCompliances=wwpLeosDnsClientMIBCompliances, wwpLeosDnsServerAddr=wwpLeosDnsServerAddr, wwpLeosDnsClientStatus=wwpLeosDnsClientStatus, wwpLeosDnsClientDhcpDomainName=wwpLeosDnsClientDhcpDomainName, wwpLeosDnsClientUserDomainName=wwpLeosDnsClientUserDomainName, wwpLeosDnsClient=wwpLeosDnsClient, wwpLeosDnsServerOperState=wwpLeosDnsServerOperState, wwpLeosDnsClientMIB=wwpLeosDnsClientMIB, wwpLeosDnsClientDhcpDomainNameState=wwpLeosDnsClientDhcpDomainNameState, wwpLeosDnsServerInetAddr=wwpLeosDnsServerInetAddr, wwpLeosDnsServerAdminState=wwpLeosDnsServerAdminState, wwpLeosDnsClientMIBGroups=wwpLeosDnsClientMIBGroups, wwpLeosDnsServerEntryIpv6Group=wwpLeosDnsServerEntryIpv6Group, wwpLeosDnsServerStatus=wwpLeosDnsServerStatus, wwpLeosDnsServerExtTable=wwpLeosDnsServerExtTable, wwpLeosDnsClientUserDomainNameState=wwpLeosDnsClientUserDomainNameState, wwpLeosDnsServerUserPriority=wwpLeosDnsServerUserPriority, wwpLeosDnsClientMIBNotificationPrefix=wwpLeosDnsClientMIBNotificationPrefix, wwpLeosDnsClientMIBNotifications=wwpLeosDnsClientMIBNotifications)
