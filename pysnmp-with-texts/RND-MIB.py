#
# PySNMP MIB module RND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RND-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ipAddrEntry, = mibBuilder.importSymbols("IP-MIB", "ipAddrEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, ModuleIdentity, TimeTicks, NotificationType, Bits, MibIdentifier, enterprises, Integer32, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "ModuleIdentity", "TimeTicks", "NotificationType", "Bits", "MibIdentifier", "enterprises", "Integer32", "Counter64", "Unsigned32")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

rnd = MibIdentifier((1, 3, 6, 1, 4, 1, 89))
rndMng = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 1))
rndSysId = MibScalar((1, 3, 6, 1, 4, 1, 89, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("reb", 1), ("ceb", 2), ("ceblb", 3), ("xeb", 4), ("xeb1", 5), ("rebsx", 6), ("rtb", 7), ("ltb", 8), ("lte", 9), ("iprouter", 10), ("ielb", 11), ("leb", 12), ("openGate12", 13), ("openGate4", 14), ("ran", 15), ("itlb", 16), ("gatelinx", 17), ("openGate2", 18), ("ogRanTR", 19), ("stc", 20), ("ftc", 21), ("armon", 22), ("fccs1004", 23), ("fccs1012", 24), ("rdapter", 25), ("ogvan", 26), ("wanGate", 27), ("ogRubE", 28), ("ogRubT", 29), ("elX", 30), ("vGate4", 31), ("mrt", 32), ("ogSrubET", 33), ("vanXS", 34), ("lre", 35), ("vGate2", 36), ("serverDispatcher4", 37), ("serverDispatcher2", 38), ("vGate2Fast", 39), ("serverDispatcher2Fast", 40), ("prt", 41), ("mlm", 42), ("prt11", 43), ("quickOffice", 44), ("apollo", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndSysId.setStatus('mandatory')
if mibBuilder.loadTexts: rndSysId.setDescription('Identification of an RND device. The device type for each integer clarifies the sysObjectID in MIB - II.')
rndAction = MibScalar((1, 3, 6, 1, 4, 1, 89, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("reset", 1), ("sendNetworkTab", 2), ("deleteNetworkTab", 3), ("sendRoutingTab", 4), ("deleteRoutingTab", 5), ("sendLanTab", 6), ("deleteLanTab", 7), ("deleteArpTab", 8), ("sendArpTab", 9), ("deleteRouteTab", 10), ("sendRouteTab", 11), ("backupSPFRoutingTab", 12), ("backupIPRoutingTab", 13), ("backupNetworkTab", 14), ("backupLanTab", 15), ("backupArpTab", 16), ("backupIPXRipTab", 17), ("backupIPXSAPTab", 18), ("resetCDB", 19), ("eraseCDB", 20), ("deleteZeroHopRoutingAllocTab", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAction.setStatus('mandatory')
if mibBuilder.loadTexts: rndAction.setDescription('This variable enables the operator to perform one of the specified actions on the tables maintained by the network device. Send actions require support of proprietery File exchange protocol.')
rndFileName = MibScalar((1, 3, 6, 1, 4, 1, 89, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFileName.setStatus('mandatory')
if mibBuilder.loadTexts: rndFileName.setDescription('The name of the file used internally by RND for transferring tables maintained by network devices, using a prorietary File exchange protocol.')
rndDeviceParams = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2))
rndBridgeType = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("reb", 1), ("ceb", 2), ("ceblb", 3), ("xeb", 4), ("xeb1", 5), ("rebsx", 6), ("rtb", 7), ("ltb", 8), ("tre", 9), ("rtre", 10), ("xtb", 11), ("ete", 12), ("rete", 13), ("ielb", 30), ("leb", 31), ("openGate12", 32), ("openGate4", 33), ("ran", 34), ("itlb", 35), ("gatelinx", 36), ("openGate2", 37), ("ogRanTR", 38), ("rdapter", 39), ("ogVan", 40), ("wanGate", 41), ("ogRubE", 42), ("ogRubT", 43), ("wanGateI", 44), ("vGate4", 45), ("lre", 46), ("mrt", 47), ("vGate2", 48)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBridgeType.setStatus('mandatory')
if mibBuilder.loadTexts: rndBridgeType.setDescription('Identification of the RND bridge type.')
rndInactiveArpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndInactiveArpTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: rndInactiveArpTimeOut.setDescription('This variable defines the maximum time period that can pass between ARP requests concerning an entry in the ARP table. After this time period, the entry is deleted from the table.')
rndBridgeAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 3))
rndErrorDesc = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: rndErrorDesc.setDescription('A textual description of the enterprise-specific trap sent to the Network Management Station by the RND managed device.')
rndErrorSeverity = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndErrorSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: rndErrorSeverity.setDescription('The severity type of the enterprise-specific trap sent to the Network Management Station by the RND managed device.')
rndBrgVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBrgVersion.setStatus('mandatory')
if mibBuilder.loadTexts: rndBrgVersion.setDescription('The bridge version.')
rndBrgFeatures = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBrgFeatures.setStatus('mandatory')
if mibBuilder.loadTexts: rndBrgFeatures.setDescription('A bit mask that defines the features supported by a particular configuration of this network element: __________________________________________ | Byte 1|Byte 2 |Byte 3 | ....|Byte 20 | |87654321| | 87654321| |________|_______________________________| Byte1 : bit1: TX Block mask bit2: Source Routing Encapulation bit3: SNA/SDLC bit4: Frame Relay bit5: SNMP bit6: LAN Manager bit7: High Performance bit8: Translation Byte2 : bit1: DEC Router bit2: IPX Router bit3: IP Router Byte3 : bit1: Dial Up Backup bit2: COD bit3: FACS bit4: Load Balance bit5: Remote Configuration bit6: RIP 2 bit7: OSPF bit8: IPX RIP/SAP Filter Byte4 : bit1: BootP Server bit2: BootP Client bit3: Compression bit4: V25.bis bit5: ISDN bit6: CODv2 bit7: NSPF bit8: UDP Relay Byte5 bit1:VirtualLAN bit2:Static IP Multicast bit3:IP Redundancy bit4:CCM2 bit5:ISDN Bonding bit6:Backup Link Selection -- for the VAN/Rdapter ver 4.0 bit7:IP/IPX Forwarding -- for the WANgate ver 4.0 bit8:Improved COD Byte6 bit1: Server Disptacher bit2: ISDN_US -- for the VANSX/WANGATE ver 5.0 bit3: PPP bit4: IP Rip Filter -- for Vgate3 bit5: Zero Hop Routing -- for Vgate3 bit6: ISDN Japan Byte7 bit1: With unmanaged Switch bit2: 2 LANs bit3: OSPF Ver 2.0 bit4: FACS Ver 2.0 bit5: Multiple WEB Farm bit6: Backup Server')
rndBrgLicense = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndBrgLicense.setStatus('mandatory')
if mibBuilder.loadTexts: rndBrgLicense.setDescription('This parameter is used for entering a s/w license number for a device. A separate license number is supplied for each device.')
rndIpHost = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 7))
rndICMPTransmitionEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndICMPTransmitionEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rndICMPTransmitionEnable.setDescription('This variable controlls the ability to transmit ICMP frames')
rndCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 89, 2, 7, 2), )
if mibBuilder.loadTexts: rndCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndCommunityTable.setDescription('The community table of the agent')
rndCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1), ).setIndexNames((0, "RND-MIB", "rndCommunityMngStationAddr"), (1, "RND-MIB", "rndCommunityString"))
if mibBuilder.loadTexts: rndCommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndCommunityEntry.setDescription(' The row definition for this table.')
rndCommunityMngStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndCommunityMngStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rndCommunityMngStationAddr.setDescription('The management station that will be allowed to communicate with the agent IP address')
rndCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: rndCommunityString.setDescription('The community string with which the management station will communicate with the agent')
rndCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("super", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndCommunityAccess.setStatus('mandatory')
if mibBuilder.loadTexts: rndCommunityAccess.setDescription('The allowed access to this management station')
rndCommunityTrapsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapsEnable", 1), ("trapsDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndCommunityTrapsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rndCommunityTrapsEnable.setDescription('Should the agent send traps to the management station')
rndCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndCommunityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndCommunityStatus.setDescription('The status of this entry. If the status is invalid the community entry will be deleted')
rndManagedTime = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndManagedTime.setStatus('mandatory')
if mibBuilder.loadTexts: rndManagedTime.setDescription('The time will be sent in the format hhmmss')
rndManagedDate = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndManagedDate.setStatus('mandatory')
if mibBuilder.loadTexts: rndManagedDate.setDescription('The date will be sent in the format ddmmyyyy')
genGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 11))
genGroupHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupHWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genGroupHWVersion.setDescription('Defines the HW version of the product.')
genGroupConfigurationSymbol = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupConfigurationSymbol.setStatus('mandatory')
if mibBuilder.loadTexts: genGroupConfigurationSymbol.setDescription('Defines the Configuration Symbol attached to any hardware module manufactured by LANNET. One single character A..Z defines the CS version.')
genGroupHWStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("hardwareProblems", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupHWStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genGroupHWStatus.setDescription('This attribute describes the status of the group hardware as detected by the sensors software.')
rndInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 4))
rndIfTable = MibTable((1, 3, 6, 1, 4, 1, 89, 4, 1), )
if mibBuilder.loadTexts: rndIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfTable.setDescription('RND-specific interface table. Each table entry includes an index, Board number, Network Address, interface status, clock indicator and interface cost.')
rndIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 4, 1, 1), ).setIndexNames((0, "RND-MIB", "rndIfIndex"))
if mibBuilder.loadTexts: rndIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfEntry.setDescription(' The row definition for this table.')
rndIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfIndex.setDescription('Index to the RND Interface Table. The interface defined by a particular value of this index is the same interface as identified by the same value of ifIndex (MIBII).')
rndIfBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIfBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfBoardNum.setDescription('The interface defined by this entry correspTnds to the board defined by the same value of rndSlotBoardNum in the rndSlotTab.')
rndIfNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIfNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfNetAddress.setDescription('The IP address of the interface defined by the particular value of rndIfIndex.')
rndIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("okSingleBrg", 2), ("okMultiBrg", 3), ("connctFault", 4), ("rxFault", 5), ("txFault", 6), ("channelLoopback", 7), ("rxClockFault", 8), ("t1Alarm", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfStatus.setDescription('The current status of the interface.')
rndIfClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("t1", 3), ("g703", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIfClockType.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfClockType.setDescription('rndIfClockType defines the type of clock each interface uses: internal or external.')
rndIfBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIfBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfBaudRate.setDescription(' Defines the baud rate of use by the interface. The valid rates are determined by the type of the media for which this baud rate is defined.')
rndIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIfCost.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfCost.setDescription('This variable assigns a transmission cost to the interface (channel or LAN). These costs are used in Level II routing. The costs aretypically inversly proportional to the channel quality.')
rndIfCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIfCompression.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfCompression.setDescription('Defines whether data compression is enabled or disabled for the interface.')
rndIfCompressionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-inserted", 1), ("active", 2), ("not-active", 3), ("disable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIfCompressionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfCompressionStatus.setDescription('Defines the status of the compression component: not-inserted - Compression component is not in the device active - Compression is enabled and operates correctly not-active - Compression is enables but does not operate. The reason may be that there is no compression component on the device connected to this interface. disabled - Compression was disabled by management, using variable rndCompression.')
rndIfCompressionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIfCompressionRate.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfCompressionRate.setDescription('Percentage of compression. This variable applies only if rndCompressionStatus is active.')
rndIfLATCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIfLATCompression.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfLATCompression.setDescription('Enable/Disable the LAT Compression.')
rndIfCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("lowSpeed", 2), ("highSpeed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIfCompressionType.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfCompressionType.setDescription('This parameter indicates the type of compression option available in the device. none(1) - indicates that there is no compression option in the device lowSpeed(2) - indicates a compression option which is operational up to line speed sof 64 kbps. highSpeed(3)- indicates a compression option which is operational up to line speeds of 2 Mbps.')
rndIfFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("destinationOnly", 1), ("sourceAndDestination", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIfFilterMode.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfFilterMode.setDescription('This parameter indicates the type of filtering in the device. ')
rndIfChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wanChannel", 1), ("ogRanPort", 2), ("routerToBridge", 3), ("spsFramRelay", 4), ("dialBackup", 5), ("snar", 6), ("lan", 7), ("spsX25", 8), ("frameRelay1490", 9), ("frameRelay1490CAR", 10), ("frameRelayCAR", 11), ("ppp", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIfChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfChannelType.setDescription(' The type of the WAN channel ')
rndIfBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIfBridge.setStatus('mandatory')
if mibBuilder.loadTexts: rndIfBridge.setDescription(' This variable indicates whether this interface forward Layer II pakages.')
rndHighPriorityIf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndHighPriorityIf.setStatus('mandatory')
if mibBuilder.loadTexts: rndHighPriorityIf.setDescription(' This variable indicates whether this interface will forward pakages that fit HighPriority set by the manager.')
rndWanHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("short", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndWanHeader.setStatus('mandatory')
if mibBuilder.loadTexts: rndWanHeader.setDescription(" This variable indicates the RND WAN header type used for frames which pass through this interface. 'regular' specifies a 14 bytes header compatible with older OG versions and 'short' a 4 byte header compatible with the RND adapter product family.")
rndDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndDuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: rndDuplexMode.setDescription(' This variable indicates whether this interface operates in half duplex full duplex or auto negotiation mode.')
rndIPX = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12))
rndIPXdriver = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 1))
rndIPXRip = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 2))
rndIPXRipFilterGlbTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 2, 10), )
if mibBuilder.loadTexts: rndIPXRipFilterGlbTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterGlbTable.setDescription('The table of RIP global filters per IPX router.')
rndIPXRipFilterGlbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 2, 10, 1), ).setIndexNames((0, "RND-MIB", "rndIPXRipFilterGlbFLtype"), (0, "RND-MIB", "rndIPXRipFilterGlbFLnumber"))
if mibBuilder.loadTexts: rndIPXRipFilterGlbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterGlbEntry.setDescription(' An entry in the RIP global filter table ')
rndIPXRipFilterGlbFLtype = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLtype.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLtype.setDescription(' Type of filter - input/output ')
rndIPXRipFilterGlbFLnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLnumber.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLnumber.setDescription(' Number of RIP filter. ')
rndIPXRipFilterGlbFLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("underCreation", 3))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLStatus.setDescription(" The validity of this entry. An entry with this value set to invalid may be deleted from the table with IPX implementation's discretion.")
rndIPXRipFilterGlbFLnetworkPatern = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLnetworkPatern.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLnetworkPatern.setDescription('Number of filtered network. Value 0xFFFFFFFF applies for any network. ')
rndIPXRipFilterGlbFLnetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLnetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLnetworkMask.setDescription('Network mask')
rndIPXRipFilterGlbFLaction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLaction.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterGlbFLaction.setDescription(' Filter action - permit/deny for this network')
rndIPXRipFilterCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 2, 11), )
if mibBuilder.loadTexts: rndIPXRipFilterCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircuitTable.setDescription('Table of input/output RIP filters used per IPX circuit number.')
rndIPXRipFilterCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 2, 11, 1), ).setIndexNames((0, "RND-MIB", "rndIPXRipFilterCircFLIfIndex"), (0, "RND-MIB", "rndIPXRipFilterCircFLType"), (0, "RND-MIB", "rndIPXRipFilterCircFLnumber"))
if mibBuilder.loadTexts: rndIPXRipFilterCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircuitEntry.setDescription(' An entry in the Circuit RIP filter table')
rndIPXRipFilterCircFLIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXRipFilterCircFLIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircFLIfIndex.setDescription(' The Interface identifier for this filter. This value correspond to rndIPXIfIndex or ipxCircIndex for ET16')
rndIPXRipFilterCircFLType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXRipFilterCircFLType.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircFLType.setDescription(' Type of filter - input/output ')
rndIPXRipFilterCircFLnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXRipFilterCircFLnumber.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircFLnumber.setDescription(' Number of RIP filter for this circuit')
rndIPXRipFilterCircFLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("underCreation", 3))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXRipFilterCircFLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircFLStatus.setDescription(" The validity of this entry. An entry with this value set to invalid may be deleted from the table with IPX implementation's discretion.")
rndIPXRipFilterCircFLnetworkPatern = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXRipFilterCircFLnetworkPatern.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircFLnetworkPatern.setDescription('Number of filtered network. Value 0xFFFFFFFF applies for any network. ')
rndIPXRipFilterCircFLnetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXRipFilterCircFLnetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircFLnetworkMask.setDescription('Network mask')
rndIPXRipFilterCircFLaction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXRipFilterCircFLaction.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXRipFilterCircFLaction.setDescription(' Filter action - permit/deny ')
rndIPXSap = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 3))
rndIPXSapFilterGlbTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 3, 10), )
if mibBuilder.loadTexts: rndIPXSapFilterGlbTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbTable.setDescription('The table of SAP global filter susedper IPX router.')
rndIPXSapFilterGlbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1), ).setIndexNames((0, "RND-MIB", "rndIPXSapFilterGlbFLtype"), (0, "RND-MIB", "rndIPXSapFilterGlbFLnumber"))
if mibBuilder.loadTexts: rndIPXSapFilterGlbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbEntry.setDescription('An entry in the SAP global filter table')
rndIPXSapFilterGlbFLtype = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLtype.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLtype.setDescription('Type of filter-input/output')
rndIPXSapFilterGlbFLnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLnumber.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLnumber.setDescription('Number of SAP filter.')
rndIPXSapFilterGlbFLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("underCreation", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLStatus.setDescription("The validity of this entry. An entry with this value set to invalid may be deleted from the table with IPX implementation's discretion.")
rndIPXSapFilterGlbFLnetworkPatern = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLnetworkPatern.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLnetworkPatern.setDescription('Number network of the filter edservice. Value 0xFFFFFFFF applies for any network.')
rndIPXSapFilterGlbFLnetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLnetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLnetworkMask.setDescription('Network mask')
rndIPXSapFilterGlbFLserviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1, 6), Integer32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLserviceType.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLserviceType.setDescription("The type of the service which may be filtered ;value0xFFFF applies for all types of service and it's default")
rndIPXSapFilterGlbFLserviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)).clone('*')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLserviceName.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLserviceName.setDescription('The name of the service which may be filtered; wild cardas * may be used in end of the name.')
rndIPXSapFilterGlbFLaction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLaction.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterGlbFLaction.setDescription('Filter mode - permit/deny for this service')
rndIPXSapFilterCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 3, 11), )
if mibBuilder.loadTexts: rndIPXSapFilterCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircuitTable.setDescription('Table of input/output SAP filter susedper IPX circuit number.')
rndIPXSapFilterCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1), ).setIndexNames((0, "RND-MIB", "rndIPXSapFilterCircFLIfIndex"), (0, "RND-MIB", "rndIPXSapFilterCircFLtype"), (0, "RND-MIB", "rndIPXSapFilterCircFLnumber"))
if mibBuilder.loadTexts: rndIPXSapFilterCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircuitEntry.setDescription('An entry in the Circuit SAP filter table')
rndIPXSapFilterCircFLIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLIfIndex.setDescription('The Interface identifier for this filter. This value correspondtornd IPXIfIndex or ipxCircIndex for ET16')
rndIPXSapFilterCircFLtype = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLtype.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLtype.setDescription('Type of filter-input/output')
rndIPXSapFilterCircFLnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLnumber.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLnumber.setDescription('Number of SAP filter. Th is value correspondto rndIPXSapFilterNumber')
rndIPXSapFilterCircFLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("underCreation", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLStatus.setDescription("The validity of this entry. An entry with this value set to invalid may be deleted from the table with IPX implementation's discretion.")
rndIPXSapFilterCircFLnetworkPatern = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLnetworkPatern.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLnetworkPatern.setDescription('Number network of the filtered service. Value 0xFFFFFFFF applies for any network.')
rndIPXSapFilterCircFLnetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLnetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLnetworkMask.setDescription('Network mask')
rndIPXSapFilterCircFLserviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 7), Integer32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLserviceType.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLserviceType.setDescription("The type of the service which may be filtered; value 0xFFFF applies for all types of service and it's default")
rndIPXSapFilterCircFLserviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)).clone('*')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLserviceName.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLserviceName.setDescription('The name of the service which may be filtered; wild cardas * may be used i n end of the name.')
rndIPXSapFilterCircFLaction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 3, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIPXSapFilterCircFLaction.setStatus('mandatory')
if mibBuilder.loadTexts: rndIPXSapFilterCircFLaction.setDescription('Filter mode-permit/deny')
ipxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 4))
ipxBasicSysTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 4, 1), )
if mibBuilder.loadTexts: ipxBasicSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysTable.setDescription('The IPX System table - basic information.')
ipxBasicSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1), ).setIndexNames((0, "RND-MIB", "ipxBasicSysInstance"))
if mibBuilder.loadTexts: ipxBasicSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysEntry.setDescription('Each entry corresponds to one instance of IPX running on the system.')
ipxBasicSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInstance.setDescription('The unique identifier of the instance of IPX to which this row corresponds. This value may be written only when creating a new entry in the table.')
ipxBasicSysExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysExistState.setDescription("The validity of this entry in the IPX system table. Setting this field to off indicates that this entry may be deleted from the system table at the IPX implementation's discretion.")
ipxBasicSysInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInReceives.setDescription('The total number of IPX packets received, including those received in error.')
ipxBasicSysInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInHdrErrors.setDescription('The number of IPX packets discarded due to errors in their headers, including any IPX packet with a size less than the minimum of 30 bytes.')
ipxBasicSysInUnknownSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInUnknownSockets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInUnknownSockets.setDescription('The number of IPX packets discarded because the destination socket was not open.')
ipxBasicSysInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInDiscards.setDescription('The number of IPX packets received but discarded due to reasons other than those accounted for by ipxBasicSysInHdrErrors, ipxBasicSysInUnknownSockets, ipxAdvSysInDiscards, and ipxAdvSysInCompressDiscards.')
ipxBasicSysInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysInDelivers.setDescription('The total number of IPX packets delivered locally, including packets from local applications.')
ipxBasicSysNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysNoRoutes.setDescription('The number of times no route to a destination was found.')
ipxBasicSysOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOutRequests.setDescription('The number of IPX packets supplied locally for transmission, not including any packets counted in ipxAdvForwPackets.')
ipxBasicSysOutMalformedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutMalformedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOutMalformedRequests.setDescription('The number of IPX packets supplied locally that contained errors in their structure.')
ipxBasicSysOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOutDiscards.setDescription('The number of outgoing IPX packets discarded due to reasons other than those accounted for in ipxBasicSysOutMalformedRequests, ipxAdvSysOutFiltered, and ipxAdvSysOutCompressDiscards.')
ipxBasicSysOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxBasicSysOutPackets.setDescription('The total number of IPX packets transmitted.')
ipxCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 5))
ipxCircTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 5, 1), )
if mibBuilder.loadTexts: ipxCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircTable.setDescription('The Circuit table.')
ipxCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1), ).setIndexNames((0, "RND-MIB", "ipxCircSysInstance"), (0, "RND-MIB", "ipxCircIndex"))
if mibBuilder.loadTexts: ipxCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircEntry.setDescription('Each entry corresponds to one circuit known to the system.')
ipxCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds. This value may be written only when creating a new entry in the table.')
ipxCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircIndex.setDescription('The identifier of this circuit, unique within the instance of IPX. This value may be written only when creating a new entry in the table.')
ipxCircExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("sleeping", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircExistState.setDescription("The validity of this circuit entry. A circuit with this value set to off may be deleted from the table at the IPX implementation's discretion.")
ipxCircOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircOperState.setDescription('The operational state of the circuit.')
ipxCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircIfIndex.setDescription('The value of ifIndex for the interface used by this circuit. This value may be written only when creating a new entry in the table.')
ipxCircNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 6), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircNetNumber.setDescription('The IPX network number of this circuit. This value may be written only when creating a new entry in the table.')
ipxCircTimeToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircTimeToNet.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircTimeToNet.setDescription('The time to net value associated with this interface, in term of 1/18ths of a second.')
ipxCircEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("novell", 1), ("ethernet", 2), ("llc", 3), ("snap", 4), ("none", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircEncaps.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircEncaps.setDescription(' The encapsulation method associated with this interface.')
ipxCircNetbiosDeliver = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircNetbiosDeliver.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircNetbiosDeliver.setDescription(' Deliver NetBios All Networks Broadcast Packets ')
ipxForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 6))
ipxDestTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 6, 1), )
if mibBuilder.loadTexts: ipxDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestTable.setDescription('The Destination table contains information about all known destinations.')
ipxDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1), ).setIndexNames((0, "RND-MIB", "ipxDestSysInstance"), (0, "RND-MIB", "ipxDestNetNum"), (0, "RND-MIB", "ipxDestNextHopCircIndex"))
if mibBuilder.loadTexts: ipxDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestEntry.setDescription('Each entry corresponds to one destination.')
ipxDestSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestSysInstance.setDescription('The unique identifier of the instance of IPX to which this row corresponds.')
ipxDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNetNum.setDescription('The IPX network number of the destination.')
ipxDestNextHopCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopCircIndex.setDescription('The unique identifier of the circuit used to reach the next hop.')
ipxDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestProtocol.setDescription('The routing protocol from which knowledge of this destination was obtained.')
ipxDestTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestTicks.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestTicks.setDescription('The delay in ticks to reach this destination.')
ipxDestHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestHopCount.setDescription('The number of hops necessary to reach the destination.')
ipxDestNextHopNICAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 7), PhysAddress().clone(hexValue="A102B304C506")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopNICAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopNICAddress.setDescription('The NIC address of the next hop.')
ipxDestNextHopNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 8), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopNetNum.setDescription('The IPX network number of the next hop.')
ipxDestExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestExistState.setDescription("The validity of this entry. An entry with this value set to off may be deleted from the table at the IPX implementation's discretion.")
ipxServices = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 7))
ipxServTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 7, 1), )
if mibBuilder.loadTexts: ipxServTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServTable.setDescription('The table of services, indexed by name and type.')
ipxServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1), ).setIndexNames((0, "RND-MIB", "ipxServSysInstance"), (0, "RND-MIB", "ipxServType"), (1, "RND-MIB", "ipxServName"))
if mibBuilder.loadTexts: ipxServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServEntry.setDescription('Each entry corresponds to one service.')
ipxServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
ipxServType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServType.setDescription('The service type.')
ipxServName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServName.setDescription('The service name.')
ipxServProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServProtocol.setDescription('The protocol from which knowledge of this service was obtained.')
ipxServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 5), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServNetNum.setDescription('The IPX network number portion of the IPX address of the service.')
ipxServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServNode.setDescription('The node portion of the IPX address of the service.')
ipxServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServSocket.setDescription('The socket portion of the IPX address of the service.')
ipxServHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServHopCount.setDescription('The number of hops to the service.')
ipxServExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServExistState.setDescription("The validity of this entry. An entry with this value set to off may be deleted from the table at the IPX implementation's discretion.")
ripsap = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 8))
ripsapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 8, 1))
ripSysTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 1), )
if mibBuilder.loadTexts: ripSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysTable.setDescription('The RIP system table.')
ripSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 1, 1), ).setIndexNames((0, "RND-MIB", "ripSysInstance"))
if mibBuilder.loadTexts: ripSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysEntry.setDescription('Each entry corresponds to one instance of RIP running on the system.')
ripSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysInstance.setDescription('The unique identifier of the instance of RIP to which this row corresponds. This value links the instance of RIP to an instance of IPX running on the system (i.e. the value of ripSysInstance should be the same as a value of ipxSysInstance). This value may be written only when creating a new entry in the table.')
ripSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSysState.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysState.setDescription('Indicates the operational state of this instance of RIP.')
ripSysIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripSysIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ripSysIncorrectPackets.setDescription('The number of times that an incorrectly formatted RIP packet was received.')
sapSysTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 2), )
if mibBuilder.loadTexts: sapSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysTable.setDescription('The SAP system table.')
sapSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 2, 1), ).setIndexNames((0, "RND-MIB", "sapSysInstance"))
if mibBuilder.loadTexts: sapSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysEntry.setDescription('Each entry corresponds to one instance of SAP running on the system.')
sapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysInstance.setDescription('The unique identifier of the instance of SAP to which this row corresponds. This value links the instance of SAP to an instance of IPX running on the system (i.e. the value of SApSysInstance should be the same as a value of ipxSysInstance). This value may be written only when creating a new entry in the table.')
sapSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapSysState.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysState.setDescription('Indicates the operational state of this instance of SAP.')
sapSysIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapSysIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sapSysIncorrectPackets.setDescription('The number of times that an incorrectly formatted SAP packet was received.')
ripsapCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 12, 8, 2))
ripCircTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1), )
if mibBuilder.loadTexts: ripCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircTable.setDescription('The RIP Circuit table.')
ripCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1, 1), ).setIndexNames((0, "RND-MIB", "ripCircSysInstance"), (0, "RND-MIB", "ripCircIndex"))
if mibBuilder.loadTexts: ripCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircEntry.setDescription('Each entry corresponds to one circuit known to the system.')
ripCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircSysInstance.setDescription('The unique identifier of the instance of RIP and IPX (via ipxSysInstance) to which this entry corresponds. This value may be written only when creating a new entry in the table.')
ripCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the circuit identifier found in ipxCircIndex. This value may be written only when creating a new entry in the table.')
ripCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircState.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircState.setDescription('Indicates whether RIP information may be sent/received over this circuit.')
ripCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircUpdate.setDescription('The RIP periodic update interval, in seconds.')
ripCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1, 1, 5), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircAgeMultiplier.setDescription('The holding multiplier for information received in RIP periodic updates.')
ripCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCircOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircOutPackets.setDescription('The number of RIP packets sent on this circuit.')
ripCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCircInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ripCircInPackets.setDescription('The number of RIP packets received on this circuit.')
sapCircTable = MibTable((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2), )
if mibBuilder.loadTexts: sapCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircTable.setDescription('The SAP Circuit table.')
sapCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1), ).setIndexNames((0, "RND-MIB", "sapCircSysInstance"), (0, "RND-MIB", "sapCircIndex"))
if mibBuilder.loadTexts: sapCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircEntry.setDescription('Each entry corresponds to one circuit known to the system.')
sapCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircSysInstance.setDescription('The unique identifier of the instance of SAP and IPX (via ipxSysInstance) to which this entry corresponds. This value may be written only when creating a new entry in the table.')
sapCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircIndex.setDescription('The identifier of this circuit, unique within the instance of SAP. This value corresponds to the circuit identifier found in ipxCircIndex. This value may be written only when creating a new entry in the table.')
sapCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircState.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircState.setDescription('Indicates whether SAP information may be sent/received over this circuit.')
sapCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircUpdate.setDescription('The SAP periodic update interval, in seconds.')
sapCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1, 5), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircAgeMultiplier.setDescription('The holding multiplier for information received in SAP periodic updates.')
sapCircGetNearestServerReply = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircGetNearestServerReply.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircGetNearestServerReply.setDescription('Indicates whether to respond to SAP get nearest server requests received on this circuit.')
sapCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCircOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircOutPackets.setDescription('The number of SAP packets sent on this circuit.')
sapCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 12, 8, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCircInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sapCircInPackets.setDescription('The number of SAP packets received on this circuit.')
rndFACS = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 16))
rndFACSDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 89, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 129))).clone(namedValues=NamedValues(("block", 1), ("forward", 2), ("enable", 3), ("disable", 4), ("blockAndReport", 129))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSDefaultAction.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSDefaultAction.setDescription('Used to define the default action for the device, when no FACS statements applicable to a given frame are defined.')
rndFACSActTable = MibTable((1, 3, 6, 1, 4, 1, 89, 16, 2), )
if mibBuilder.loadTexts: rndFACSActTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSActTable.setDescription('The table of FACS action.')
rndFACSActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 16, 2, 1), ).setIndexNames((0, "RND-MIB", "rndFACSActType"), (0, "RND-MIB", "rndFACSActIfIndex"))
if mibBuilder.loadTexts: rndFACSActEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSActEntry.setDescription('Each rndFACSActEntry consist of the following parameters')
rndFACSActType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("activeDB", 4), ("tempDB", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndFACSActType.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSActType.setDescription('This parameter indicate on which FACS Table the FACS action will preform.')
rndFACSActIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndFACSActIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSActIfIndex.setDescription('The interface to which this FACS entry is applicable.')
rndFACSAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("eraseIP", 2), ("eraseDECnet", 3), ("eraseIPX", 4), ("eraseBrg", 5), ("replaceIP", 6), ("replaceIPX", 8), ("replaceBrg", 9), ("backupIP", 10), ("backupIPX", 12), ("backupBrg", 13))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSAction.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSAction.setDescription('The management station that sends a SET request for one of these actions with indexes rndFACSType and rndFACSIfIndex defines the type and the interface Id for which all FACS statements are to be erased. If no interface or no type is specified, all FACS statements for a protocol are erased.')
rndFACSTable = MibTable((1, 3, 6, 1, 4, 1, 89, 16, 3), )
if mibBuilder.loadTexts: rndFACSTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSTable.setDescription('The table of FACS statment.')
rndFACSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 16, 3, 1), ).setIndexNames((0, "RND-MIB", "rndFACSIfIndex"), (0, "RND-MIB", "rndFACSProtocolType"), (0, "RND-MIB", "rndFACSType"), (0, "RND-MIB", "rndFACSIndex"))
if mibBuilder.loadTexts: rndFACSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSEntry.setDescription('Each FACS statment consist of the following parameters')
rndFACSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndFACSIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSIfIndex.setDescription('The interface to which this FACS entry is applicable.')
rndFACSProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("dec", 3), ("bridge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndFACSProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSProtocolType.setDescription('This parameter define the protocol the Security Access Control is applicable.')
rndFACSType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("cod", 3), ("activeDB", 4), ("tempDB", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndFACSType.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSType.setDescription(' The Mode of in which this FACS statement operates.')
rndFACSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndFACSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSIndex.setDescription('Index to the FACS Table. ')
rndFACSSrcAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSSrcAdd.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSSrcAdd.setDescription('The size of the octet string will be according to the protocol type define in rndFACSProtocolType.')
rndFACSSrcAddMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSSrcAddMask.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSSrcAddMask.setDescription('Source-address mask .')
rndFACSDesAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSDesAdd.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSDesAdd.setDescription('Destination-address The size of the octet string will be according to the protocol type define in rndFACSProtocolType .')
rndFACSDesAddMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSDesAddMask.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSDesAddMask.setDescription('Destination-address mask .')
rndFACSOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 129))).clone(namedValues=NamedValues(("block", 1), ("forward", 2), ("permit", 3), ("deny", 4), ("blockZHRP", 5), ("blockAndReport", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSOperation.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSOperation.setDescription('... .')
rndFACSNetFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("l2multicast", 2), ("arp", 3), ("icmp", 4), ("ip", 5), ("udp", 6), ("tcp", 7), ("decnet", 8), ("ipx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSNetFiltering.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSNetFiltering.setDescription('... .')
rndFACSSoketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSSoketNum.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSSoketNum.setDescription(' Port/socket number for different applications 0 is default meaning not applicable.')
rndFACSMask1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSMask1Id.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSMask1Id.setDescription(' Index into RND mask table FACS/COD Type) .')
rndFACSMask2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSMask2Id.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSMask2Id.setDescription(' Index into RND mask table FACS/COD according to the value of rndFACSType .')
rndFACSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 16, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFACSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndFACSStatus.setDescription('The status of a table entry.')
rndBootP = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 24))
rndBootPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 89, 24, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndBootPServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rndBootPServerAddress.setDescription(' The IPAddress of the BOOTP server. the OpenGate will act as a BootP relay if this parameter is not equale to 0.0.0.0.')
rndBootPRelaySecThreshold = MibScalar((1, 3, 6, 1, 4, 1, 89, 24, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndBootPRelaySecThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rndBootPRelaySecThreshold.setDescription('BootP requests are relayed only if their SEC field is greater or equal to the threshold value in order to allow local BootP Servers to answer first.')
ipSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26))
rsIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 1), )
if mibBuilder.loadTexts: rsIpAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAddrTable.setDescription('This table is parralel to MIB II IpAddrTable, and is used to add/delete entries to/from that table. In addition it contains private objects.')
rsIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 1, 1), ).setIndexNames((0, "RND-MIB", "rsIpAdEntAddr"))
if mibBuilder.loadTexts: rsIpAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAddrEntry.setDescription("The addressing information for one of this entity's IP addresses.")
rsIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAdEntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAdEntAddr.setDescription("The IP address to which this entry's addressing information pertains.")
rsIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAdEntIfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
rsIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAdEntNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
rsIpAdEntForwardIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntForwardIpBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAdEntForwardIpBroadcast.setDescription(' This variable controls forwarding of IP (sub)net-directed broadcasts destined for an attached sub(net). ')
rsIpAdEntBackupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntBackupAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAdEntBackupAddr.setDescription(' ')
rsIpAdEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAdEntStatus.setDescription(' The validity of this entry. Invalid indicates that this entry is invalid in IpAddrTable (MIB II).')
rsIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpAdEntBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpAdEntBcastAddr.setDescription(' Indicates how the host part of ip subnet broadcast messages will be filled: 0 - host part will be filled by 0 1 - host part will be filled by 1.')
icmpSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 2))
rsIcmpGenErrMsgEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpGenErrMsgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpGenErrMsgEnable.setDescription('This variable controlls the ability to generate ICMP error messages')
rsIcmpRdTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 2, 2), )
if mibBuilder.loadTexts: rsIcmpRdTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdTable.setDescription('This table contains ICMP Router Discovery parameters configurated per IP interface.')
rsIcmpRdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1), ).setIndexNames((0, "RND-MIB", "rsIcmpRdIpAddr"))
if mibBuilder.loadTexts: rsIcmpRdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdEntry.setDescription('The ICMP parameters configurated for IP interface.')
rsIcmpRdIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIcmpRdIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdIpAddr.setDescription("The IP address to which this entry's information pertains.")
rsIcmpRdIpAdvertAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 2), IpAddress().clone(hexValue="E0000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdIpAdvertAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdIpAdvertAddr.setDescription(' The IP destination address to be used for multicast Router Advertisements sent from the interface. The only permissible values are the all-systems multicast address, 224.0.0.1, or the limited-broadcast address, 255.255.255.255.')
rsIcmpRdMaxAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdMaxAdvertInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdMaxAdvertInterval.setDescription('The maximum time allowed between sending multicast Router Advertisements from the interface, in seconds. Must be no less than 4 seconds and no greater than 1800 seconds.')
rsIcmpRdMinAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdMinAdvertInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdMinAdvertInterval.setDescription('The minimum time allowed between sending unsolicited multicast Router Advertisements from the interface, in seconds. Must be no less than 3 seconds and no greater than rsIcmpRdMaxAdvertInterval. Default: 0.75 * rsIcmpRdMaxAdvertInterval.')
rsIcmpRdAdvertLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdAdvertLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdAdvertLifetime.setDescription('The maximum length of time that the advertised addresses are to be considered as valid. Must be no less than rsIcmpRdMaxAdvertInterval and no greater than 9000 seconds. Default: 3 * rsIcmpRdMaxAdvertInterval.')
rsIcmpRdAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdAdvertise.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdAdvertise.setDescription('A flag indicating whether or not the address is to be advertised.')
rsIcmpRdPreferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdPreferenceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdPreferenceLevel.setDescription('The preferability of the address as a default router address, relative to other router addresses on the same subnet.')
rsIcmpRdEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIcmpRdEntStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIcmpRdEntStatus.setDescription('Setting of any value to this object set values of all fields to the default values.')
rip2Spec = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 3))
rsRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 3, 1), )
if mibBuilder.loadTexts: rsRip2IfConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsRip2IfConfTable.setDescription('This table is extension of rip2IfConfTable (RFC 1389 ,RIP 2)')
rsRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 3, 1, 1), ).setIndexNames((0, "RND-MIB", "rsRip2IfConfAddress"))
if mibBuilder.loadTexts: rsRip2IfConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsRip2IfConfEntry.setDescription(' ')
rsRip2IfConfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRip2IfConfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsRip2IfConfAddress.setDescription(' The IP Address of this system on the indicated subnet. ')
rsRip2IfConfVirtualDis = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 3, 1, 1, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRip2IfConfVirtualDis.setStatus('mandatory')
if mibBuilder.loadTexts: rsRip2IfConfVirtualDis.setDescription('This variable defines the virtual number of hops assigned to the interface specified by rsIfIpAddrIndex. This enables fine-tuning of the RIP routing algorithm.')
rsRip2IfConfAutoSend = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRip2IfConfAutoSend.setStatus('mandatory')
if mibBuilder.loadTexts: rsRip2IfConfAutoSend.setDescription('This variable controls RIP automatic send behavior. If enabled and no routers were heard on the interface, RIP will only send default route with high metric. Otherwise RIP will send updates according to configuration. ')
arpSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 4))
rsArpDeleteTable = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsArpDeleteTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsArpDeleteTable.setDescription('Setting this object to any not-null value has the effect of deleting all entries of the ARP table.')
rsArpInactiveTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 2), Integer32().clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsArpInactiveTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: rsArpInactiveTimeOut.setDescription('This variable defines the maximum time period (in second) that can pass between ARP requests concerning an entry in the ARP table. After this time period, the entry is deleted from the table.')
rsArpProxy = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsArpProxy.setStatus('mandatory')
if mibBuilder.loadTexts: rsArpProxy.setDescription('When ARP Proxy is enabled, the router can respond to ARP requests for nodes located on a different sub-net, provided they are it its network table. The router responds with its own MAC address. When ARP Proxy is disabled, the router responds only to ARP requests for its own IP addresses.')
tftp = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 5))
rsTftpRetryTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 1), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTftpRetryTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: rsTftpRetryTimeOut.setDescription(' General Retransmission time-out value (seconds) ')
rsTftpTotalTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 2), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTftpTotalTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: rsTftpTotalTimeOut.setDescription(' Total Retransmission time-out value (seconds) ')
rsSendConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsSendConfigFile.setStatus('mandatory')
if mibBuilder.loadTexts: rsSendConfigFile.setDescription('The file name include path where the Router Server will put the full configuration. The default destination address will be the sender address.')
rsGetConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsGetConfigFile.setStatus('mandatory')
if mibBuilder.loadTexts: rsGetConfigFile.setDescription('The file name include path where the Router Server will get the configuration. The default source address will be the sender address.')
rsLoadSoftware = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLoadSoftware.setStatus('mandatory')
if mibBuilder.loadTexts: rsLoadSoftware.setDescription('The file name include path where the Router Server will get the software. The source address will the sender address.')
rsFileServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsFileServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsFileServerAddress.setDescription('The IP address of the configuration / sw server.')
ipRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 6))
ipRedundAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRedundAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundAdminStatus.setDescription('This parameter controle the IP Redundancy in the device. In case the the parameter in Enable and second router down. all the traffic hendle by this element.')
ipRedundOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRedundOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundOperStatus.setDescription(' obsolete ')
ipRedundRoutersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 6, 3), )
if mibBuilder.loadTexts: ipRedundRoutersTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundRoutersTable.setDescription('List of IP addresses backed up by this router.')
ipRedundRoutersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 6, 3, 1), ).setIndexNames((0, "RND-MIB", "ipRedundRoutersIfAddr"), (0, "RND-MIB", "ipRedundRoutersMainRouterAddr"))
if mibBuilder.loadTexts: ipRedundRoutersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundRoutersEntry.setDescription(' The row definition for this table.')
ipRedundRoutersIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 6, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRedundRoutersIfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundRoutersIfAddr.setDescription('The Ip address of the IP interface on which the redundancy feature is operational.')
ipRedundRoutersMainRouterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 6, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRedundRoutersMainRouterAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundRoutersMainRouterAddr.setDescription('The Ip address of the polled main router.')
ipRedundRoutersOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRedundRoutersOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundRoutersOperStatus.setDescription('If active, the main router is considered inoperational and the IP interface operates as its backup.')
ipRedundRoutersPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 6, 3, 1, 4), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRedundRoutersPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundRoutersPollInterval.setDescription('Polling interval for this router (in seconds). If 0 the router is not polled.')
ipRedundRoutersTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 6, 3, 1, 5), Integer32().clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRedundRoutersTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundRoutersTimeout.setDescription('Interval in seconds during which the backed-up router must signal. If it does not signal, it is considered inoperational and the IP interface starts operating as backup.')
ipRedundRoutersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRedundRoutersStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipRedundRoutersStatus.setDescription('Entry status')
ipRouteLeaking = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 7))
ipLeakStaticToRip = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLeakStaticToRip.setStatus('mandatory')
if mibBuilder.loadTexts: ipLeakStaticToRip.setDescription('This parameter controls leaking (redistribution) of static routes to RIP. When enabled, all routes inserted to the IP routing table via SNMP are advertised into RIP.')
ipLeakStaticToOspf = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLeakStaticToOspf.setStatus('mandatory')
if mibBuilder.loadTexts: ipLeakStaticToOspf.setDescription('This parameter controls leaking (redistribution) of static routes into OSPF. When enabled, all routes inserted to the IP routing table via SNMP are advertised into OSPF as external routes.')
ipLeakOspfToRip = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLeakOspfToRip.setStatus('mandatory')
if mibBuilder.loadTexts: ipLeakOspfToRip.setDescription('This parameter controls leaking (redistribution) of routes from OSPF to RIP. If enabled, all routes learned via OSPF are advertised into RIP.')
ipLeakRipToOspf = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLeakRipToOspf.setStatus('mandatory')
if mibBuilder.loadTexts: ipLeakRipToOspf.setDescription('This parameter controls leaking (redistribution) of routes from RIP to OSPF. If enabled, all routes learned via RIP are advertised into OSPF as external routes.')
ipLeakExtDirectToOspf = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLeakExtDirectToOspf.setStatus('mandatory')
if mibBuilder.loadTexts: ipLeakExtDirectToOspf.setDescription('This parameter controls leaking (redistribution) into OSPF of direct routes external to OSPF, i.e. routes to local network corresponding to IP interfaces on which OSPF is disabled. When enabled, all such direct routes are advertised into OSPF as external routes.')
ipRipFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 26, 8))
rsIpRipFilterGlbTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 8, 1), )
if mibBuilder.loadTexts: rsIpRipFilterGlbTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbTable.setDescription('The table of RIP global filters per IP router.')
rsIpRipFilterGlbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 8, 1, 1), ).setIndexNames((0, "RND-MIB", "rsIpRipFilterGlbType"), (0, "RND-MIB", "rsIpRipFilterGlbNumber"))
if mibBuilder.loadTexts: rsIpRipFilterGlbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbEntry.setDescription(' An entry in the RIP global filter table ')
rsIpRipFilterGlbType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRipFilterGlbType.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbType.setDescription(' Type of filter - input/output ')
rsIpRipFilterGlbNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRipFilterGlbNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbNumber.setDescription(' Number of RIP filter. ')
rsIpRipFilterGlbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("underCreation", 3))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterGlbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbStatus.setDescription(' The validity of this entry. Setting this value to invalid deletes the entry, and the entry may be actualy removed from the table.')
rsIpRipFilterGlbIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterGlbIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbIpAddr.setDescription(' network prefix IP address, as in the forwarding table. ')
rsIpRipFilterGlbNetworkMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterGlbNetworkMaskBits.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbNetworkMaskBits.setDescription(' the number of bits in the IP Network mask, called network-prefix-length in Router Requirements terminology. for example: the value 16 means mask 255.255.0.0 ')
rsIpRipFilterGlbMatchBits = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 1, 1, 6), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterGlbMatchBits.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbMatchBits.setDescription(' the number of bits to match in the Network IP address. A value smaller than 32 defines a wildcard. for example: the value 8 means all routes whose leftmost 8 bits are equal to those of the network IP address. If this variable has a value other than 32, than rsIpRipFilterGlbNetworkMaskBits must be 0 and is ignored. ')
rsIpRipFilterGlbAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterGlbAction.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterGlbAction.setDescription(' Filter action - permit/deny for this network')
rsIpRipFilterLclTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 8, 2), )
if mibBuilder.loadTexts: rsIpRipFilterLclTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclTable.setDescription('Table of input/output RIP filters used per IP Interface.')
rsIpRipFilterLclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1), ).setIndexNames((0, "RND-MIB", "rsIpRipFilterLclIpIntf"), (0, "RND-MIB", "rsIpRipFilterLclType"), (0, "RND-MIB", "rsIpRipFilterLclNumber"))
if mibBuilder.loadTexts: rsIpRipFilterLclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclEntry.setDescription(' An entry in the Intf RIP filter table')
rsIpRipFilterLclIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRipFilterLclIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclIpIntf.setDescription(' The IP address identifying the RIP interface for this filter. This value corresponds to rsIpAdEntAddr. ')
rsIpRipFilterLclType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRipFilterLclType.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclType.setDescription(' Type of filter - input/output ')
rsIpRipFilterLclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRipFilterLclNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclNumber.setDescription(' Number of RIP filter for this Interface')
rsIpRipFilterLclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("underCreation", 3))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterLclStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclStatus.setDescription(' The validity of this entry. Setting this value to invalid deletes the entry, and the entry may be actualy removed from the table.')
rsIpRipFilterLclIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterLclIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclIpAddr.setDescription(' network prefix IP address, as in the forwarding table. ')
rsIpRipFilterLclNetworkMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterLclNetworkMaskBits.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclNetworkMaskBits.setDescription(' the number of bits in the IP Network mask, called network-prefix-length in Router Requirements terminology. for example: the value 16 means mask 255.255.0.0 ')
rsIpRipFilterLclMatchBits = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1, 7), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterLclMatchBits.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclMatchBits.setDescription(' the number of bits to match in the Network IP address. A value smaller than 32 defines a wildcard. for example: the value 8 means all routes whose leftmost 8 bits are equal to those of the network IP address. If this variable has a value other than 32, than rsIpRipFilterLclNetworkMaskBits must be 0 and is ignored. ')
rsIpRipFilterLclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRipFilterLclAction.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpRipFilterLclAction.setDescription(' Filter action - permit/deny ')
rsRipEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRipEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rsRipEnable.setDescription('Enables or disables RIP.')
lreBoxAgentIP = MibScalar((1, 3, 6, 1, 4, 1, 89, 26, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreBoxAgentIP.setStatus('mandatory')
if mibBuilder.loadTexts: lreBoxAgentIP.setDescription('')
virtualLan = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 27))
virtualLanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 27, 1), )
if mibBuilder.loadTexts: virtualLanTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanTable.setDescription('An entry of this table specifies an new ifIndex with a type of propVirtual(53).')
virtualLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 27, 1, 1), ).setIndexNames((0, "RND-MIB", "vlIfIndex"))
if mibBuilder.loadTexts: virtualLanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanEntry.setDescription('A list of information for each virtual LAN.')
vlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vlIfIndex.setDescription('An logical interface number, corresponded this VL')
vlProto = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("ipmulticast", 3), ("ipxRaw", 4), ("ipxET", 5), ("ipxLLC", 6), ("ipxSNAP", 7), ("decNET", 8), ("decLAT", 9), ("netBios", 10), ("appleTalk", 11), ("xns", 12), ("sna", 13), ("userDefined", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlProto.setStatus('mandatory')
if mibBuilder.loadTexts: vlProto.setDescription("The protocol, supported by this VL. The meanings of the values are: other: none of the following. This VL includes any protocol except the following protocols. It is a bridging VL. RS relies on a third-party router to exchange traffic between nodes on different virtual LANs of this type. IP: This is a routing VL, RS will route between nodes on different virtual LANs. IPmulticast: RS will broadcast the message to all the VL's ports. Used for video-conferencing applications. ipxRaw: This is a Routing VL, RS will route between nodes on different virtual LANs. ipxET: This is a routing VL, RS will route between nodes on different virtual LANs. ipxLLC: This is a routing VL, RS will route between nodes on different virtual LANs. ipxSNAP: This is a routing VL, RS will route between nodes on different virtual LANs. decNET: This is a bridging VL, RS relies on a third-party router to exchange traffic between nodes on different DECnet virtual LANs of this type. netBios: This is a Bridging VL, RS relies on a third-party router to exchange traffic between nodes on different NetBIOS virtual LANs of this type. appleTalk: This is a bridging VL, RS relies on a third-party router to exchange traffic between nodes on different AppleTalk virtual LANs of this type.")
vlAutoConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlAutoConfigEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vlAutoConfigEnable.setDescription("It is used only in the case of IP. The meanings of the values are: true(1): Autolearning is used for this VL false(2): Autolearning isn't used for this VL from ports, specified in the table virtualLanAutoConfTable.")
vlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlStatus.setDescription('It is used to delete an entry')
vlType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("regular", 1), ("specBroadcast", 2), ("specArpReq", 3), ("specBroadcastAndUnicast", 4), ("specArpReqAndUnicast", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlType.setStatus('mandatory')
if mibBuilder.loadTexts: vlType.setDescription("regular - ordinary type specBroadcast - for switches that support VLANs as a set of ports and only as a broadcast domain: broadcast frames do not cross VLAN's bounders, but unicast frames may be transmitted between different VLANs. Permits passing of broadcast frames between Vgate's VLANs. specArpReq - for switches that support VLANs as a set of ports and only as a broadcast domain: broadcast frames do not cross VLAN's bounders, but unicast frames may be transmitted between different VLANs. Permits passing of ARP request frames between Vgate's VLANs. specBroadcastAndUnicast - for switches that support VLANs as a set of ports but no frame crosses VLAN's bounders. Permits passing of IP/ARP request broadcast and IP unicast frames between Vgate's VLANs. specArpReqAndUnicast - for switches that support VLANs as a set of ports but no frame crosses VLAN's bounders. Permits passing of ARP request broadcast and IP unicast frames between Vgate's VLANs. This type can be used only for IP VLANs.")
virtualLanPortsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 27, 2), )
if mibBuilder.loadTexts: virtualLanPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanPortsTable.setDescription('For each VL (a ifIndex with a type of propVirtual(53)) an entry of this table specifies a set of ports, which it contains.')
virtualLanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 27, 2, 1), ).setIndexNames((0, "RND-MIB", "vLIfIndex"), (0, "RND-MIB", "vLPortIfIndex"))
if mibBuilder.loadTexts: virtualLanPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanPortEntry.setDescription('A entry of this table specifies a VL and a port belonging to it')
vLIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vLIfIndex.setDescription('An logical interface number, corresponding to this VL')
vLPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vLPortIfIndex.setDescription('A physical port belonging to the VL specified by vlIfIndex.')
vLPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLPortType.setStatus('mandatory')
if mibBuilder.loadTexts: vLPortType.setDescription('static means configured by user dynamic means autoconfigured by the RS')
vLPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vLPortStatus.setDescription('It is used to delete an entry')
virtualLanAutoConfTable = MibTable((1, 3, 6, 1, 4, 1, 89, 27, 3), )
if mibBuilder.loadTexts: virtualLanAutoConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanAutoConfTable.setDescription('This table specifies per a routing protocol a set of ports, from which RS will automatically learning VL in accordance with rules, defined by the protocol.')
virtualLanAutoConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 27, 3, 1), ).setIndexNames((0, "RND-MIB", "vlAutoConfPortIfIndex"), (0, "RND-MIB", "vlAutoConfProto"))
if mibBuilder.loadTexts: virtualLanAutoConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanAutoConfEntry.setDescription('One port, specified by vlAutoConfPortIfIndex, for which the RS will automatically learn its VL in accordance with rules, defined by the protocol specified in vlAutoConfProto.')
vlAutoConfPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlAutoConfPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vlAutoConfPortIfIndex.setDescription('Port on which the autoconfig option should be supported')
vlAutoConfProto = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("ip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlAutoConfProto.setStatus('mandatory')
if mibBuilder.loadTexts: vlAutoConfProto.setDescription('Protocol for which the autoconfig option is supported for the port specified by vlAutoConfPortIfIndex ')
vlAutoConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 27, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlAutoConfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlAutoConfStatus.setDescription('It is used to delete an entry')
virtualLanAutoConfAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 27, 4), Integer32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualLanAutoConfAgingTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanAutoConfAgingTimeout.setDescription('The units of this MIB object is seconds. Its value can be either 0 or in range 10..65535 .')
virtualLanProtocolVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 27, 5))
virtualLanUserEtherType = MibScalar((1, 3, 6, 1, 4, 1, 89, 27, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualLanUserEtherType.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanUserEtherType.setDescription('')
virtualLanUserMask = MibScalar((1, 3, 6, 1, 4, 1, 89, 27, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualLanUserMask.setStatus('mandatory')
if mibBuilder.loadTexts: virtualLanUserMask.setDescription('')
rsConf = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 28))
class RsIfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(23, 32, 500, 1000, 1001, 1002, 1003, 1010, 1011, 1100))
    namedValues = NamedValues(("ppp", 23), ("frameRelay", 32), ("virtualNet", 500), ("rndWan", 1000), ("cod", 1001), ("backup", 1002), ("fr1490", 1003), ("b1isdn", 1010), ("b2isdn", 1011), ("unknown", 1100))

rsIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 89, 28, 1), )
if mibBuilder.loadTexts: rsIfConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIfConfTable.setDescription('This table enable the user to add interface to the RS. RS will automatically add the new interface to the interface Table ')
rsIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 28, 1, 1), ).setIndexNames((0, "RND-MIB", "rsIfConfIndex"))
if mibBuilder.loadTexts: rsIfConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIfConfEntry.setDescription('Each entry defines a configured interface.')
rsIfConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 28, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfConfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rsIfConfIndex.setDescription('This variable uniquely identifies the interface. It is used as a cross reference in other system tables')
rsIfConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 28, 1, 1, 2), RsIfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIfConfType.setStatus('mandatory')
if mibBuilder.loadTexts: rsIfConfType.setDescription('This variable identifies the type of the specific entry in the rsIfConfTable. This field is writable only at creation time (i.e., when value of status is underCreation).')
rsIfConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 28, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIfConfName.setStatus('mandatory')
if mibBuilder.loadTexts: rsIfConfName.setDescription('This variable provides a logical name to a specific entry in rsIfConfTable')
rsIfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 28, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIfConfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIfConfStatus.setDescription('The status of the ConfigEntry. The choices are those defined in SNMPv2-TC. Only: active, createAndWait, and destroy will be used. active - The conceptual row is available for use by the managed device. createAndWait - A new instance of a conceptual row is desired, but not to have it available for use by the managed device. destroy - Delete all instances associated with an existing conceptual row.')
rsTunning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29))
rsHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsHighPriority.setStatus('mandatory')
if mibBuilder.loadTexts: rsHighPriority.setDescription('This variable indicates the time interval the forwarding task inside the RS works in High Priority Mode.')
rsLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLowPriority.setStatus('mandatory')
if mibBuilder.loadTexts: rsLowPriority.setDescription('This variable indicates the time interval the forwarding task inside the RS works in Low Priority Mode.')
rsDbgLevel = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDbgLevel.setStatus('mandatory')
if mibBuilder.loadTexts: rsDbgLevel.setDescription('This variable indicates the debug level the Router Server works. the range of this variable is 1..100 ')
rsDiagnostic = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: rsDiagnostic.setDescription('This variable will contain some dignostic information in case on a problem ocurs in the RS functinality.')
rsConfirmMessagTab = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsConfirmMessagTab.setStatus('mandatory')
if mibBuilder.loadTexts: rsConfirmMessagTab.setDescription('This variable enables the operator to confirm all the message in the event Message Table.')
eventMessageTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 6), )
if mibBuilder.loadTexts: eventMessageTable.setStatus('mandatory')
if mibBuilder.loadTexts: eventMessageTable.setDescription('The Event Message table of the agent')
eventMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 6, 1), ).setIndexNames((0, "RND-MIB", "eventNum"))
if mibBuilder.loadTexts: eventMessageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eventMessageEntry.setDescription(' The row definition for this table.')
eventNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventNum.setStatus('mandatory')
if mibBuilder.loadTexts: eventNum.setDescription('The event number,the index of this table.')
eventDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDesc.setStatus('mandatory')
if mibBuilder.loadTexts: eventDesc.setDescription('The event discription, this text will include time and severity.')
reaTunning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 7))
reaIpRemoteAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaIpRemoteAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpRemoteAgingTime.setDescription('This variable specifies aging time used by the REA for remote entries in the Ip Fast Forwarding Table.')
reaFftHashMaxChain = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaFftHashMaxChain.setStatus('mandatory')
if mibBuilder.loadTexts: reaFftHashMaxChain.setDescription('This variable specifies the maximum length of hash chains in the Fast Forwarding Tables.')
reaMltcstBitOn = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaMltcstBitOn.setStatus('mandatory')
if mibBuilder.loadTexts: reaMltcstBitOn.setDescription('')
reaIpForwardEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaIpForwardEnable.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpForwardEnable.setDescription("The Platform will perform fast IP forwarding if only if this variable's value is enable.")
reaIpxForwardEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaIpxForwardEnable.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxForwardEnable.setDescription("The Platform will perform fast IPX forwarding if only if this variable's value is enable.")
reaBridgeEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaBridgeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: reaBridgeEnable.setDescription("The Platform will perform bridging if only if this variable's value is enable.")
reaFacsEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaFacsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: reaFacsEnable.setDescription("The RS and Platform will perform FASC if only if this variable's value is enable.")
reaIpForwardDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpForwardDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpForwardDatagrams.setDescription('The number of IP datagrams have been forwarded by the Platform.')
reaIpInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpInDiscards.setDescription('The number of IP datagrams have been dicarded by the Platform.')
reaIpxForwardDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxForwardDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxForwardDatagrams.setDescription('The number of IPX datagrams have been forwarded by the Platform.')
reaIpxInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxInDiscards.setDescription('The number of IP datagrams have been dicarded by the Platform.')
reaBridgeFftTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 7, 12), )
if mibBuilder.loadTexts: reaBridgeFftTable.setStatus('mandatory')
if mibBuilder.loadTexts: reaBridgeFftTable.setDescription('The Bridge Fast Forwarding Table')
reaBridgeFftEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 7, 12, 1), ).setIndexNames((0, "RND-MIB", "reaBrgFftEntryNum"))
if mibBuilder.loadTexts: reaBridgeFftEntry.setStatus('mandatory')
if mibBuilder.loadTexts: reaBridgeFftEntry.setDescription(' The row definition for this table.')
reaBrgFftEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBrgFftEntryNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaBrgFftEntryNum.setDescription('')
reaBrgFftMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 12, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBrgFftMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: reaBrgFftMacAddr.setDescription('')
reaBrgFftReNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBrgFftReNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaBrgFftReNum.setDescription('')
reaBrgFftPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBrgFftPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaBrgFftPortNum.setDescription('')
reaBrgFftFacsSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBrgFftFacsSrcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: reaBrgFftFacsSrcIndex.setDescription('')
reaBrgFftFacsDstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBrgFftFacsDstIndex.setStatus('mandatory')
if mibBuilder.loadTexts: reaBrgFftFacsDstIndex.setDescription('')
reaBrgDiscards = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBrgDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: reaBrgDiscards.setDescription('The number of bridging datagrams have been discarded by the Platform.')
reaBrgForwards = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBrgForwards.setStatus('mandatory')
if mibBuilder.loadTexts: reaBrgForwards.setDescription('The number of bridging datagrams have been forwarded by the Platform.')
reaIpFftTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 7, 15), )
if mibBuilder.loadTexts: reaIpFftTable.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftTable.setDescription('The IP Fast Forwarding Table')
reaIpFftEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1), ).setIndexNames((0, "RND-MIB", "reaIpFftEntryNum"))
if mibBuilder.loadTexts: reaIpFftEntry.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftEntry.setDescription(' The row definition for this table.')
reaIpFftEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftEntryNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftEntryNum.setDescription('')
reaIpFftDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftDstIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftDstIpAddr.setDescription('')
reaIpFftDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftDstIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftDstIpMask.setDescription('')
reaIpFftRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftRangeType.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftRangeType.setDescription('')
reaIpFftSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftSrcMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftSrcMacAddr.setDescription('')
reaIpFftDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftDstMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftDstMacAddr.setDescription('')
reaIpFftReNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftReNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftReNum.setDescription('')
reaIpFftPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftPortNum.setDescription('')
reaIpFftFacsSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftFacsSrcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftFacsSrcIndex.setDescription('')
reaIpFftFacsDstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftFacsDstIndex.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftFacsDstIndex.setDescription('')
reaIpFftApplFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 15, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpFftApplFlags.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpFftApplFlags.setDescription('A bit mask that defines the applications associated with this entry: __________________________________________ | Byte 1|Byte 2 |Byte 3 | ....|Byte 20 | |87654321| | 87654321| |________|_______________________________| Byte1 : bit1: Server Dispatcher Client')
reaIpxFftTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 7, 16), )
if mibBuilder.loadTexts: reaIpxFftTable.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftTable.setDescription('The IPX Fast Forwarding Table')
reaIpxFftEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1), ).setIndexNames((0, "RND-MIB", "reaIpxFftEntryNum"))
if mibBuilder.loadTexts: reaIpxFftEntry.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftEntry.setDescription(' The row definition for this table.')
reaIpxFftEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftEntryNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftEntryNum.setDescription('')
reaIpxFftDstNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftDstNetid.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftDstNetid.setDescription('')
reaIpxFftRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftRangeType.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftRangeType.setDescription('')
reaIpxFftSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftSrcMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftSrcMacAddr.setDescription('')
reaIpxFftDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftDstMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftDstMacAddr.setDescription('')
reaIpxFftReNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftReNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftReNum.setDescription('')
reaIpxFftPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftPortNum.setDescription('')
reaIpxFftFacsSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftFacsSrcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftFacsSrcIndex.setDescription('')
reaIpxFftFacsDstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaIpxFftFacsDstIndex.setStatus('mandatory')
if mibBuilder.loadTexts: reaIpxFftFacsDstIndex.setDescription('')
lreVnResposibilityTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 7, 17), )
if mibBuilder.loadTexts: lreVnResposibilityTable.setStatus('mandatory')
if mibBuilder.loadTexts: lreVnResposibilityTable.setDescription('The Bridge Responsibility Table')
lreVnResposibilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 7, 17, 1), ).setIndexNames((0, "RND-MIB", "lreVnRespVn"))
if mibBuilder.loadTexts: lreVnResposibilityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lreVnResposibilityEntry.setDescription(' The row definition for this table.')
lreVnRespVn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 17, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreVnRespVn.setStatus('mandatory')
if mibBuilder.loadTexts: lreVnRespVn.setDescription('')
lreVnRespStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 7, 17, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreVnRespStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lreVnRespStatus.setDescription('')
reaSrcViolationEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaSrcViolationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: reaSrcViolationEnable.setDescription("The Platform will perform the Source Port Violation Procedure if only if this variable's value is enable.")
reaSrcViolationTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaSrcViolationTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: reaSrcViolationTrapEnable.setDescription("The RS will send the Source Port Violation TRAP messages if only if this variable's value is enable.")
reaSrcAddrValidationEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaSrcAddrValidationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: reaSrcAddrValidationEnable.setDescription('The Platform will verify the source address of incoming IP datagram.')
reaRsQueueDiscards = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaRsQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: reaRsQueueDiscards.setDescription('')
reaBufFree = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reaBufFree.setStatus('mandatory')
if mibBuilder.loadTexts: reaBufFree.setDescription('The number of free buffers.')
lreResetDstMacBit46 = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreResetDstMacBit46.setStatus('mandatory')
if mibBuilder.loadTexts: lreResetDstMacBit46.setDescription('')
lreQueSourceSelect = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vNET", 1), ("dstMac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreQueSourceSelect.setStatus('mandatory')
if mibBuilder.loadTexts: lreQueSourceSelect.setDescription('')
lreResetDstMacBit47 = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreResetDstMacBit47.setStatus('mandatory')
if mibBuilder.loadTexts: lreResetDstMacBit47.setDescription('')
rsMaxEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8))
rsMaxBridgeForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 1))
rsMaxBrgFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxBrgFrwEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxBrgFrwEntries.setDescription('Maximal number of entries in bridge forwarding table.')
rsMaxBrgFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxBrgFrwEntriesAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxBrgFrwEntriesAfterReset.setDescription('Future maximal number of entries in bridge forwarding table.')
rsMaxIpForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 2))
rsMaxIpFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpFrwEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxIpFrwEntries.setDescription('Maximal number of entries in Ip forwarding table.')
rsMaxIpFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpFrwEntriesAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxIpFrwEntriesAfterReset.setDescription('Future maximal number of entries in Ip forwarding table.')
rsMaxArpEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 3))
rsMaxArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxArpEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxArpEntries.setDescription('Maximal number of entries in Arp forwarding table.')
rsMaxArpEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxArpEntriesAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxArpEntriesAfterReset.setDescription('Future maximal number of entries in Arp forwarding table.')
rsMaxIpxForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 4))
rsMaxIpxFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxFrwEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxIpxFrwEntries.setDescription('Maximal number of entries in Ipx forwarding table.')
rsMaxIpxFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxFrwEntriesAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxIpxFrwEntriesAfterReset.setDescription('Future maximal number of entries in Ipx forwarding table.')
rsMaxIpxSapEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 5))
rsMaxIpxSapEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxSapEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxIpxSapEntries.setDescription('Maximal number of entries in IpxSap table.')
rsMaxIpxSapEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxSapEntriesAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxIpxSapEntriesAfterReset.setDescription('Future maximal number of entries in IpxSap table.')
rsMaxDspClntEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 6))
rsMaxDspClntEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDspClntEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxDspClntEntries.setDescription('Maximal number of entries in rsSdClientsTable.')
rsMaxDspClntEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDspClntEntriesAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxDspClntEntriesAfterReset.setDescription('Future maximal number of entries in rsSdClientsTable.')
rsMaxZeroHopRoutEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 7))
rsMaxZhrConns = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxZhrConns.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxZhrConns.setDescription('The current maximal number of direct Zero-hop routing connections.')
rsMaxZhrConnsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxZhrConnsAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxZhrConnsAfterReset.setDescription('The future (after reset) maximal number of direct Zero-hop routing connections.')
rsMaxDspFrmEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 8))
rsMaxDspFrmEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDspFrmEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxDspFrmEntries.setDescription('Maximal number of entries in rsSdClientsTable.')
rsMaxDspFrmEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDspFrmEntriesAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMaxDspFrmEntriesAfterReset.setDescription('Future maximal number of entries in rsSdClientsTable.')
rndApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35))
rsServerDispatcher = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 1))
rndMidLevelManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 2))
rndAlarmOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 2, 2))
rndAlarmEnabling = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAlarmEnabling.setStatus('mandatory')
if mibBuilder.loadTexts: rndAlarmEnabling.setDescription('Indicates whether alarms should be issued to the high-level NMS ')
rndAlarmInterval = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rndAlarmInterval.setDescription('Indicates the minimal period of time which must pass after issuing an alarm before issuing the same alarm again.')
rndMonitoredElementsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 3), )
if mibBuilder.loadTexts: rndMonitoredElementsTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredElementsTable.setDescription('The table of monitored elements of the network')
rndMonitoredElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1), ).setIndexNames((0, "RND-MIB", "rndMonitoredElementAddress"))
if mibBuilder.loadTexts: rndMonitoredElementEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredElementEntry.setDescription(' The row definition for this table.')
rndMonitoredElementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndMonitoredElementAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredElementAddress.setDescription('The IP address of the monitored element')
rndMonitoredElementCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredElementCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredElementCommunity.setDescription('The community of the monitored element')
rndMonitoredElementLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredElementLabel.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredElementLabel.setDescription('The label assigned by the network manager to the monitored element')
rndDefaultPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndDefaultPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rndDefaultPollingInterval.setDescription('The default period of time between two consecutive pollings of the monitored element for the value of an object instance. If no other polling interval is specifically assigned to the monitored object instance, this one will be used')
rndDefaultLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndDefaultLogFile.setStatus('mandatory')
if mibBuilder.loadTexts: rndDefaultLogFile.setDescription('The default file path of the log-file which will contain the polling results for the monitored element. If no other file path is specifically assigned to the monitored object instance, this log-file will be used.')
rndMonitoredElementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredElementStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredElementStatus.setDescription('It is used to manage the monitored elements table and indicates the current monitoring status of an element.')
rndMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 4), )
if mibBuilder.loadTexts: rndMonitoringTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoringTable.setDescription('The table of monitored object instances. Each monitored object instance belongs to a monitored element previously entered in the rndMonitoredElementsTable. ')
rndMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1), ).setIndexNames((0, "RND-MIB", "rndMonitoredElement"), (0, "RND-MIB", "rndMonitoredObjectInstanceLabel"))
if mibBuilder.loadTexts: rndMonitoringEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoringEntry.setDescription(' The row definition for this table.')
rndMonitoredElement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndMonitoredElement.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredElement.setDescription('A label assigned by the network manager to a monitored element to which this monitored object instance belongs. This label must have been previously entered in an instance of rndMonitoredElementLabel')
rndMonitoredObjectInstanceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndMonitoredObjectInstanceLabel.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredObjectInstanceLabel.setDescription('The label assigned by the network manager to the monitored object instance')
rndMonitoredObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredObjectName.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredObjectName.setDescription('The symbolic object type name of the object to which the monitored object instance belongs (as it appears the MIB module definition). In case of ambiguity the <MIB module name> : <object type name> format should be used. An instance of rndMonitoredObjectName need not be assigned any value, if the corresponding instance of rndMonitoredObjectIdentifier is assigned a value, since any one of these, together with the object instance identifier, suffices to unambigously identify the monitored object instance.')
rndMonitoredObjectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredObjectIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredObjectIdentifier.setDescription('The object identifier of the object to which the monitored object instance belongs. An instance of rndMonitoredObjectIdentifier need not be assigned any value, if the corresponding instance of rndMonitoredObjectName is assigned a value, since any one of these, together with the object instance identifier, suffices to unambigously identify the monitored object instance.')
rndMonitoredObjectInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 5), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredObjectInstance.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredObjectInstance.setDescription('The instance identifier (key) of the monitored object instance.')
rndMonitoredObjectSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("integer", 1), ("octet-string", 2), ("ip-address", 3), ("object-identifier", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredObjectSyntax.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoredObjectSyntax.setDescription('The syntax of the monitored object instance (i.e., the syntax of the object type of the object to which the monitored instance belongs). Need not be assigned any value if the corresponding instance of rndMonitoredObjectName has been assigned a value')
rndMonitoringInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoringInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoringInterval.setDescription("The period of time between two consecutive retrievals of the monitored object instance's value.")
rndAlarmMaxTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAlarmMaxTreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rndAlarmMaxTreshold.setDescription('The value of the monitored object instance, the exceeding of which will cause the generation of an alarm to the high-level management station.')
rndAlarmMinTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAlarmMinTreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rndAlarmMinTreshold.setDescription('If the value of the monitored object instance falls below the value assigned to rndAlarmMinTreshold, an alarm to the high-level management station will be issued.')
rndMonitoringLogfile = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoringLogfile.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoringLogfile.setDescription('The entire path of the file in which the results of the monitoring of this object instance should be recorded.')
rndMonitoringEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoringEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndMonitoringEntryStatus.setDescription('It is used to manage the monitored object instances table and indicates the current monitoring status of an object instance.')
rndMibFilesTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 5), )
if mibBuilder.loadTexts: rndMibFilesTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndMibFilesTable.setDescription('The table of monitored object instances. Each monitored object instance belongs to a monitored element previously entered in the rndMonitoredElementsTable. ')
rndMibFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1), ).setIndexNames((0, "RND-MIB", "rndMibFileIndex"))
if mibBuilder.loadTexts: rndMibFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndMibFileEntry.setDescription(' The row definition for this table.')
rndMibFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndMibFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rndMibFileIndex.setDescription('The number of the MIB file in the list MIB files supported by the Mid-Level management station. The order of the MIB files in this list must reflect the the IMPORT relation between the MIBS contained in the MIB files, i.e., if MIB A IMPORTS FROM MIB B, the file containing MIB A must have a lesser index in this table than the file containing MIB B.')
rndMibFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMibFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: rndMibFilePath.setDescription('The path of the MIB file in the MIB file server.')
rndMibFileRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMibFileRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: rndMibFileRefresh.setDescription('Indicates if the file should be fetched after setting this entry from the MIB file server.')
rndMibFileEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMibFileEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndMibFileEntryStatus.setDescription('It is used to manage the MIB files table.')
rndHardwareConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndHardwareConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: rndHardwareConfiguration.setDescription('Indicates whether the current SET SNMP PDU contains hardware configuration (i.e., normally read-only variables). SET of such variables in the Mid-level management station will be allowed only if this variable is included in the SNMP PDU and its value is true. Its value as returned in a GET SNMP PDU will always be false.')
rndEraseSimulatedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eraseSimulatedConfiguration", 1), ("simulatedConfigurationPresent", 2), ("simulatedConfigurationErased", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndEraseSimulatedConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: rndEraseSimulatedConfiguration.setDescription('eraseSimulatedConfiguration instructs the MLNMS to erase all the simulated configuration from its configuration data-base (CDB). This the only accepted value for SNMP SET statements and will never be returned in SNMP GET statements. simulatedConfigurationPresent indicates that the MLNMS currently has a simulated configuration. simulatedConfigurationErased indicates that the MLNMS currently has no simulated configuration.')
rndDeleteValuesTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 8), )
if mibBuilder.loadTexts: rndDeleteValuesTable.setStatus('mandatory')
if mibBuilder.loadTexts: rndDeleteValuesTable.setDescription('This table indicates which MIB variables are row status fields which control the status of the entry to which they belong. This table also indicates which (integer!) value of these MIB variables will cause, if present in a SNMP SET PDU, the deletion of the conceptual row instance to which the SET MIB variable instance belongs.')
rndDeleteValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1), ).setIndexNames((1, "RND-MIB", "rndRowStatusVariableName"))
if mibBuilder.loadTexts: rndDeleteValuesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rndDeleteValuesEntry.setDescription(' The row definition for the rndDeleteValuesTable table.')
rndRowStatusVariableName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndRowStatusVariableName.setStatus('mandatory')
if mibBuilder.loadTexts: rndRowStatusVariableName.setDescription('The name of the row status field. This name may not necessarily be any name which is present in the MIBs loaded into the MLNMS station.')
rndRowStatusObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndRowStatusObjectId.setStatus('mandatory')
if mibBuilder.loadTexts: rndRowStatusObjectId.setDescription('The object id of the row status field. If the rndRowStatusVariableName is a name present in the MIBs loaded into the MLNMS, this MIB variable is not required, but if given, it must match the object id known to the MLNMS. The variable identified by rndRowStatusVariableName and/or rndRowStatusObjectId must be a read-write MIB variable of type INTEGER which belongs to an entry (i.e, is a child of a MIB variable of type SEQUENCE).')
rndRowDeleteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndRowDeleteValue.setStatus('mandatory')
if mibBuilder.loadTexts: rndRowDeleteValue.setDescription('The value of the variable identified by rndRowStatusVariableName and/or rndRowStatusObjectId, which, if present in a SNMP SET PDU, will cause the deletion of the conceptual row instance which the SET MIB variable instance belongs.')
rndDeleteValueEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndDeleteValueEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rndDeleteValueEntryStatus.setDescription('It is used to delete an entry from this table.')
rsIpZeroHopRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 3))
rsIpZhrGeneralStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpZhrGeneralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrGeneralStatus.setDescription('This parameter enables or disables the IP Zero Hop Routing feature for all IP interfaces. The IP Zero Hop Routing feature can also be enabled or disabled on each IP interface through the rsIpZhrStatusTable.')
rsIpZhrAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 3, 2), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpZhrAgingTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrAgingTimeout.setDescription('This parameter controls the aging time-out in seconds of direct connections which were allocated. The virtual IP address of a direct connection whose time-out has expired is eligible for allocation to a different connection.')
rsIpZhrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 3, 3), )
if mibBuilder.loadTexts: rsIpZhrStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrStatusTable.setDescription('The administrative status of the ZHR feature per ip interface.')
rsIpZhrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 3, 3, 1), ).setIndexNames((0, "RND-MIB", "rsIpZhrStatusIpIntf"))
if mibBuilder.loadTexts: rsIpZhrStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrStatusEntry.setDescription(' An entry in the ZHR status table. ')
rsIpZhrStatusIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrStatusIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrStatusIpIntf.setDescription(' The Ip interface whose ZHR feature status is accessed. ')
rsIpZhrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpZhrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrAdminStatus.setDescription('It is used to control whether ZHR will operate on the interface. ')
rsIpZhrVirtAddressTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 3, 4), )
if mibBuilder.loadTexts: rsIpZhrVirtAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrVirtAddressTable.setDescription('The table of free virtual IP addresses which may be allocated to establish direct connections - Per IP Interface.')
rsIpZhrVirtAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 3, 4, 1), ).setIndexNames((0, "RND-MIB", "rsIpZhrVirtAddressIpIntf"), (0, "RND-MIB", "rsIpZhrVirtAddressTo"))
if mibBuilder.loadTexts: rsIpZhrVirtAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrVirtAddressEntry.setDescription(' An entry in the ZHR virtual IP addresses table ')
rsIpZhrVirtAddressIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrVirtAddressIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrVirtAddressIpIntf.setDescription(' The Ip Interface to which the IP addresses in this entry are allocated.')
rsIpZhrVirtAddressTo = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrVirtAddressTo.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrVirtAddressTo.setDescription(' The last free IP address in the block. ')
rsIpZhrVirtAddressFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpZhrVirtAddressFrom.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrVirtAddressFrom.setDescription(' The first free IP address in the block. ')
rsIpZhrVirtAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 4, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpZhrVirtAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrVirtAddressStatus.setDescription('It is used to manage the virtual address table. The supported actions will be active, createAndGo and destroy. ')
rsIpZhrConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 3, 5), )
if mibBuilder.loadTexts: rsIpZhrConnectionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionsTable.setDescription('Table of the currently active direct connections.')
rsIpZhrConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 3, 5, 1), ).setIndexNames((0, "RND-MIB", "rsIpZhrConnectionIpIntf"), (0, "RND-MIB", "rsIpZhrConnectionSrcIp"), (0, "RND-MIB", "rsIpZhrConnectionDestIp"))
if mibBuilder.loadTexts: rsIpZhrConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionEntry.setDescription(' An entry in the ZHR Connection table')
rsIpZhrConnectionIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrConnectionIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionIpIntf.setDescription(' The IP Interface for which this direct connection was established. ')
rsIpZhrConnectionSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrConnectionSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionSrcIp.setDescription(' The source IP Address of this direct connection. ')
rsIpZhrConnectionDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrConnectionDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionDestIp.setDescription(' The destination IP Address of this direct connection. ')
rsIpZhrConnectionVirtualIp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrConnectionVirtualIp.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionVirtualIp.setDescription(' The virtual IP address allocated for this direct connection. ')
rsIpZhrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionType.setDescription(" The type of this direct connection. dynamic - established by the RS. disabled - established by the RS. The RS detected that the virtual address is already used as destination by the source BEFORE its allocation, and therefore marked this connection as 'disabled' to prevent a future allocation of this virtual address to this source. static - established by user.")
rsIpZhrConnectionAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpZhrConnectionAge.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionAge.setDescription(' The age of the connection in seconds.')
rsIpZhrConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 3, 5, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpZhrConnectionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsIpZhrConnectionStatus.setDescription('It is used to manage the connections table. The supported actions will be active, createAndGo and destroy. ')
routeTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,5)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: routeTableOverflow.setDescription('An overflow condition has occurred in the Routing Table. The Routing Table is used for IP routing algorithm (RIP).')
resetRequired = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,10)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: resetRequired.setDescription('This trap indicates that in order to perform the last SET request, a reset operation of the router/bridge is required. This occurs when the layer 2 routing algorithm is changed between SPF and Spanning Tree. The reset can be performed manually or using the variable rndAction.')
endTftp = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,12)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: endTftp.setDescription('This trap indicates that in the device finished a TFTP transaction with the management station. variable rndErrorDesc and rndErrorSeverity provides the actual message text and severity respectively.')
abortTftp = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,13)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: abortTftp.setDescription('This trap indicates that in the device aborted a TFTP session with the management station. variable rndErrorDesc and rndErrorSeverity provides the actual message text and severity respectively.')
startTftp = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,14)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: startTftp.setDescription('Informational trap indicating that the device has intiated a TFTP session. rndErrorDesc will contain the file type in question')
ipxRipTblOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,36)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: ipxRipTblOverflow.setDescription('This trap indicates that in an OpenGate IPX RIP table overflow. The bound variable rndErrorDesc, rndErrorSeverity provides the actual message text and severity respectively.')
ipxSapTblOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,37)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: ipxSapTblOverflow.setDescription('This trap indicates that in an OpenGate IPX SAP table overflow. The bound variable rndErrorDesc, rndErrorSeverity provides the actual message text and severity respectively.')
facsAccessVoilation = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,49)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: facsAccessVoilation.setDescription('This trap indicates that message that fits FACS statenebt with operation blockAndReport was forward to the interface.The bound variable rndErrorDesc, rndErrorSeverity(== info ) and interface Number.')
autoConfigurationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,50)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: autoConfigurationCompleted.setDescription('This trap indicates that auto comfiguration completetd succssefully. The bound variable rndErrorDesc, rndErrorSeverity(== info )')
forwardingTabOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,51)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: forwardingTabOverflow.setDescription('This trap indicates that an overflow condition has occurred in the layer II Forward Table. The bound variable rndErrorDesc, rndErrorSeverity(== warning )')
errorsDuringInit = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,61)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: errorsDuringInit.setDescription('')
vlanDynPortAdded = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,66)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: vlanDynPortAdded.setDescription('')
vlanDynPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,67)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: vlanDynPortRemoved.setDescription('')
rsSDclientsTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,68)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsSDclientsTableOverflow.setDescription('This warning is generated when an overflow occurs in the clients table.')
rsSDinactiveServer = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,69)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsSDinactiveServer.setDescription('This warning is generated when a server does not respond to the dispatchers polling and is thought to be inactive.')
rsIpZhrConnectionsTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,70)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsIpZhrConnectionsTableOverflow.setDescription('The Zero Hop Routing connections Table has been overflown.')
rsIpZhrReqStaticConnNotAccepted = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,71)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsIpZhrReqStaticConnNotAccepted.setDescription('The requested static connection was not accepted because there is no available IP virtual address to allocate to it.')
rsIpZhrVirtualIpAsSource = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,72)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsIpZhrVirtualIpAsSource.setDescription('The virtual IP address appeared as a source IP. All the connections using it will be deleted and it will not be further allocated to new connections.')
rsIpZhrNotAllocVirtualIp = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,73)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsIpZhrNotAllocVirtualIp.setDescription('The source IP address sent an ARP specifying a virtual IP which was not allocated for this source. This virtual IP will not be allocated to connections of this specific source IP.')
rsSnmpSetRequestInSpecialCfgState = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,74)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsSnmpSetRequestInSpecialCfgState.setDescription('An incoming SNMP SET request was rejected because no such requests (except action requests) are accepted after start of new configuration reception or during sending the current configuration to an NMS.')
rsWSDRedundancySwitch = NotificationType((1, 3, 6, 1, 4, 1, 89) + (0,141)).setObjects(("RND-MIB", "rndErrorDesc"), ("RND-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rsWSDRedundancySwitch.setDescription('Whenever main server fails and backup takes over or server comes up after failure a trap of this type is issued.')
mibBuilder.exportSymbols("RND-MIB", rndIPXSapFilterGlbFLserviceType=rndIPXSapFilterGlbFLserviceType, rsMaxIpxForwardingEntriesTuning=rsMaxIpxForwardingEntriesTuning, rsIpRipFilterLclAction=rsIpRipFilterLclAction, rsMaxZhrConns=rsMaxZhrConns, rndIPXSap=rndIPXSap, rndIPXSapFilterGlbEntry=rndIPXSapFilterGlbEntry, rndIPXSapFilterCircuitTable=rndIPXSapFilterCircuitTable, lreVnResposibilityEntry=lreVnResposibilityEntry, ipxDestSysInstance=ipxDestSysInstance, ipxServSocket=ipxServSocket, reaRsQueueDiscards=reaRsQueueDiscards, ripsapCircuit=ripsapCircuit, rsIpAdEntBackupAddr=rsIpAdEntBackupAddr, reaIpFftDstIpMask=reaIpFftDstIpMask, ripCircTable=ripCircTable, rsMaxArpEntriesTuning=rsMaxArpEntriesTuning, rsIpZhrVirtAddressTo=rsIpZhrVirtAddressTo, rsSDclientsTableOverflow=rsSDclientsTableOverflow, rsMaxDspClntEntriesAfterReset=rsMaxDspClntEntriesAfterReset, reaIpxFftSrcMacAddr=reaIpxFftSrcMacAddr, rsIpRipFilterGlbNetworkMaskBits=rsIpRipFilterGlbNetworkMaskBits, reaBrgFftReNum=reaBrgFftReNum, rsSendConfigFile=rsSendConfigFile, ipxSystem=ipxSystem, rndFACSDefaultAction=rndFACSDefaultAction, rndIPXRipFilterGlbTable=rndIPXRipFilterGlbTable, sapCircInPackets=sapCircInPackets, rndIPXSapFilterGlbTable=rndIPXSapFilterGlbTable, reaIpForwardEnable=reaIpForwardEnable, rsMaxIpxSapEntries=rsMaxIpxSapEntries, rsMaxDspFrmEntriesAfterReset=rsMaxDspFrmEntriesAfterReset, virtualLanUserEtherType=virtualLanUserEtherType, rsMaxZeroHopRoutEntriesTuning=rsMaxZeroHopRoutEntriesTuning, rsIpZhrConnectionEntry=rsIpZhrConnectionEntry, reaIpxFftReNum=reaIpxFftReNum, sapSysEntry=sapSysEntry, rsIcmpRdPreferenceLevel=rsIcmpRdPreferenceLevel, rndIfIndex=rndIfIndex, rndIPXSapFilterGlbFLnumber=rndIPXSapFilterGlbFLnumber, rsMaxEntriesTuning=rsMaxEntriesTuning, rndCommunityTable=rndCommunityTable, rndFACSDesAdd=rndFACSDesAdd, rndErrorSeverity=rndErrorSeverity, eventMessageEntry=eventMessageEntry, rndBootP=rndBootP, rsIpRipFilterLclNumber=rsIpRipFilterLclNumber, rsIcmpRdAdvertLifetime=rsIcmpRdAdvertLifetime, routeTableOverflow=routeTableOverflow, rsIpZhrVirtAddressIpIntf=rsIpZhrVirtAddressIpIntf, rndIPXSapFilterGlbFLserviceName=rndIPXSapFilterGlbFLserviceName, rndIPXRipFilterGlbFLnetworkMask=rndIPXRipFilterGlbFLnetworkMask, ipxServHopCount=ipxServHopCount, ipxCircEncaps=ipxCircEncaps, rndManagedDate=rndManagedDate, reaBrgFftMacAddr=reaBrgFftMacAddr, ipRipFilter=ipRipFilter, rsIcmpRdIpAddr=rsIcmpRdIpAddr, ipxBasicSysExistState=ipxBasicSysExistState, rnd=rnd, rndCommunityEntry=rndCommunityEntry, rndIPXSapFilterCircFLtype=rndIPXSapFilterCircFLtype, ipLeakStaticToRip=ipLeakStaticToRip, lreResetDstMacBit47=lreResetDstMacBit47, ripCircEntry=ripCircEntry, rndDeleteValuesEntry=rndDeleteValuesEntry, lreBoxAgentIP=lreBoxAgentIP, reaIpRemoteAgingTime=reaIpRemoteAgingTime, reaBrgFftPortNum=reaBrgFftPortNum, forwardingTabOverflow=forwardingTabOverflow, rsIpAdEntAddr=rsIpAdEntAddr, rsTftpTotalTimeOut=rsTftpTotalTimeOut, ipRedundancy=ipRedundancy, reaIpForwardDatagrams=reaIpForwardDatagrams, ripCircInPackets=ripCircInPackets, rndMibFilesTable=rndMibFilesTable, rndIPXRip=rndIPXRip, rsIpRipFilterLclIpAddr=rsIpRipFilterLclIpAddr, rndFACSActTable=rndFACSActTable, reaBufFree=reaBufFree, ipxCircuit=ipxCircuit, rndIPX=rndIPX, rndIPXSapFilterCircFLnumber=rndIPXSapFilterCircFLnumber, ipxDestHopCount=ipxDestHopCount, reaSrcViolationEnable=reaSrcViolationEnable, rsRip2IfConfTable=rsRip2IfConfTable, reaBrgDiscards=reaBrgDiscards, rndIPXRipFilterGlbFLStatus=rndIPXRipFilterGlbFLStatus, virtualLanTable=virtualLanTable, rndMonitoredElementsTable=rndMonitoredElementsTable, rsMaxDspClntEntries=rsMaxDspClntEntries, reaIpxFftFacsSrcIndex=reaIpxFftFacsSrcIndex, rndMibFileEntry=rndMibFileEntry, vlanDynPortAdded=vlanDynPortAdded, rsIpZeroHopRouting=rsIpZeroHopRouting, rndMonitoredElementAddress=rndMonitoredElementAddress, reaIpFftEntryNum=reaIpFftEntryNum, rsIcmpRdMinAdvertInterval=rsIcmpRdMinAdvertInterval, ipxServName=ipxServName, rsRip2IfConfEntry=rsRip2IfConfEntry, ipxForwarding=ipxForwarding, virtualLanAutoConfAgingTimeout=virtualLanAutoConfAgingTimeout, rndManagedTime=rndManagedTime, ipxBasicSysOutRequests=ipxBasicSysOutRequests, ipLeakExtDirectToOspf=ipLeakExtDirectToOspf, rsRip2IfConfVirtualDis=rsRip2IfConfVirtualDis, reaIpFftReNum=reaIpFftReNum, reaIpxForwardDatagrams=reaIpxForwardDatagrams, reaBridgeFftEntry=reaBridgeFftEntry, reaFftHashMaxChain=reaFftHashMaxChain, ripCircState=ripCircState, rsIcmpRdEntStatus=rsIcmpRdEntStatus, rsIpZhrGeneralStatus=rsIpZhrGeneralStatus, ripSysEntry=ripSysEntry, ipxCircTimeToNet=ipxCircTimeToNet, virtualLan=virtualLan, rsIfConfIndex=rsIfConfIndex, reaIpxFftTable=reaIpxFftTable, rndHighPriorityIf=rndHighPriorityIf, rsIpZhrConnectionAge=rsIpZhrConnectionAge, rndIfNetAddress=rndIfNetAddress, vLPortIfIndex=vLPortIfIndex, vLPortStatus=vLPortStatus, rsDiagnostic=rsDiagnostic, rndFACSActType=rndFACSActType, ipxBasicSysInstance=ipxBasicSysInstance, rndMonitoredObjectSyntax=rndMonitoredObjectSyntax, ipxDestNextHopCircIndex=ipxDestNextHopCircIndex, ipLeakOspfToRip=ipLeakOspfToRip, rsMaxDspClntEntriesTuning=rsMaxDspClntEntriesTuning, reaTunning=reaTunning, ipxBasicSysEntry=ipxBasicSysEntry, ipRouteLeaking=ipRouteLeaking, rsGetConfigFile=rsGetConfigFile, lreQueSourceSelect=lreQueSourceSelect, rndIfBridge=rndIfBridge, rndFACSSoketNum=rndFACSSoketNum, ipxCircNetbiosDeliver=ipxCircNetbiosDeliver, ipLeakRipToOspf=ipLeakRipToOspf, rndIfEntry=rndIfEntry, ipxBasicSysInDelivers=ipxBasicSysInDelivers, rsIpRipFilterLclTable=rsIpRipFilterLclTable, rndMonitoredElementLabel=rndMonitoredElementLabel, rndMonitoredElementEntry=rndMonitoredElementEntry, ipxDestProtocol=ipxDestProtocol, rndMonitoringEntry=rndMonitoringEntry, rndFileName=rndFileName, rndIPXRipFilterGlbEntry=rndIPXRipFilterGlbEntry, rndFACSIndex=rndFACSIndex, reaIpxFftEntry=reaIpxFftEntry, rndMonitoredObjectName=rndMonitoredObjectName, virtualLanPortsTable=virtualLanPortsTable, vlProto=vlProto, ipRedundOperStatus=ipRedundOperStatus, vlAutoConfProto=vlAutoConfProto, rsIpZhrConnectionDestIp=rsIpZhrConnectionDestIp, rndIfBaudRate=rndIfBaudRate, ipxServices=ipxServices, rsIpRipFilterGlbStatus=rsIpRipFilterGlbStatus, reaFacsEnable=reaFacsEnable, rndDefaultPollingInterval=rndDefaultPollingInterval, ipxCircExistState=ipxCircExistState, virtualLanAutoConfTable=virtualLanAutoConfTable, rsIpZhrVirtAddressEntry=rsIpZhrVirtAddressEntry, rndFACSIfIndex=rndFACSIfIndex, rndIfCost=rndIfCost, rndIPXSapFilterCircFLIfIndex=rndIPXSapFilterCircFLIfIndex, rndFACSActEntry=rndFACSActEntry, rndIPXRipFilterCircuitTable=rndIPXRipFilterCircuitTable, rsIpZhrVirtAddressTable=rsIpZhrVirtAddressTable, reaMltcstBitOn=reaMltcstBitOn, ipxServEntry=ipxServEntry, reaIpInDiscards=reaIpInDiscards, rndAlarmMaxTreshold=rndAlarmMaxTreshold, vlType=vlType, ipxServNode=ipxServNode, rndMonitoringInterval=rndMonitoringInterval, rsIpAdEntBcastAddr=rsIpAdEntBcastAddr, ipxServSysInstance=ipxServSysInstance, ipxDestEntry=ipxDestEntry, rndAlarmMinTreshold=rndAlarmMinTreshold, reaSrcAddrValidationEnable=reaSrcAddrValidationEnable, rndErrorDesc=rndErrorDesc, rsMaxArpEntriesAfterReset=rsMaxArpEntriesAfterReset, reaIpFftDstMacAddr=reaIpFftDstMacAddr, ipxCircNetNumber=ipxCircNetNumber, rndIfCompressionStatus=rndIfCompressionStatus, rndFACSSrcAdd=rndFACSSrcAdd, vlAutoConfigEnable=vlAutoConfigEnable, rndFACS=rndFACS, rndApplications=rndApplications, vlAutoConfPortIfIndex=vlAutoConfPortIfIndex, rndIPXSapFilterCircFLnetworkMask=rndIPXSapFilterCircFLnetworkMask, reaIpxFftDstNetid=reaIpxFftDstNetid, rndIPXSapFilterCircFLnetworkPatern=rndIPXSapFilterCircFLnetworkPatern, rndIPXSapFilterCircFLserviceType=rndIPXSapFilterCircFLserviceType, rndIPXRipFilterGlbFLnetworkPatern=rndIPXRipFilterGlbFLnetworkPatern, rsIpZhrVirtAddressFrom=rsIpZhrVirtAddressFrom, rndIpHost=rndIpHost, rndIPXSapFilterCircFLStatus=rndIPXSapFilterCircFLStatus, rsIpAddrTable=rsIpAddrTable, rndRowStatusVariableName=rndRowStatusVariableName, sapCircGetNearestServerReply=sapCircGetNearestServerReply, rndMng=rndMng, rndIPXRipFilterGlbFLnumber=rndIPXRipFilterGlbFLnumber, rndIfCompressionType=rndIfCompressionType, rsMaxIpForwardingEntriesTuning=rsMaxIpForwardingEntriesTuning, rndICMPTransmitionEnable=rndICMPTransmitionEnable, rsIpRipFilterGlbAction=rsIpRipFilterGlbAction, rndFACSActIfIndex=rndFACSActIfIndex, eventMessageTable=eventMessageTable, rsIfConfEntry=rsIfConfEntry, ipxCircSysInstance=ipxCircSysInstance, ipxBasicSysOutMalformedRequests=ipxBasicSysOutMalformedRequests, rndBridgeAlarm=rndBridgeAlarm, rndRowDeleteValue=rndRowDeleteValue, sapSysIncorrectPackets=sapSysIncorrectPackets, rsIpZhrStatusEntry=rsIpZhrStatusEntry, rsIpZhrStatusTable=rsIpZhrStatusTable, ipLeakStaticToOspf=ipLeakStaticToOspf, arpSpec=arpSpec, rsIpRipFilterGlbNumber=rsIpRipFilterGlbNumber, reaIpFftTable=reaIpFftTable, rndMonitoredElement=rndMonitoredElement, rsIpZhrConnectionIpIntf=rsIpZhrConnectionIpIntf, reaIpFftFacsDstIndex=reaIpFftFacsDstIndex, rsIfConfStatus=rsIfConfStatus, rsIfConfType=rsIfConfType, reaBridgeFftTable=reaBridgeFftTable, ipxBasicSysInDiscards=ipxBasicSysInDiscards, rsMaxBridgeForwardingEntriesTuning=rsMaxBridgeForwardingEntriesTuning, reaIpxFftDstMacAddr=reaIpxFftDstMacAddr, reaBrgFftFacsSrcIndex=reaBrgFftFacsSrcIndex, tftp=tftp, rsIpZhrConnectionsTable=rsIpZhrConnectionsTable, rsIpZhrConnectionSrcIp=rsIpZhrConnectionSrcIp, sapCircSysInstance=sapCircSysInstance, ripCircOutPackets=ripCircOutPackets, rsIpAdEntForwardIpBroadcast=rsIpAdEntForwardIpBroadcast, rndIPXSapFilterGlbFLtype=rndIPXSapFilterGlbFLtype, sapCircUpdate=sapCircUpdate, rndFACSStatus=rndFACSStatus, rndIPXRipFilterGlbFLtype=rndIPXRipFilterGlbFLtype, rndFACSDesAddMask=rndFACSDesAddMask, rndBrgLicense=rndBrgLicense, rndInactiveArpTimeOut=rndInactiveArpTimeOut, rsMaxBrgFrwEntries=rsMaxBrgFrwEntries, ripSysTable=ripSysTable, rndIfCompressionRate=rndIfCompressionRate, rsFileServerAddress=rsFileServerAddress, rndBootPServerAddress=rndBootPServerAddress, ipxBasicSysInReceives=ipxBasicSysInReceives, rndIfCompression=rndIfCompression, rsSnmpSetRequestInSpecialCfgState=rsSnmpSetRequestInSpecialCfgState, virtualLanAutoConfEntry=virtualLanAutoConfEntry)
mibBuilder.exportSymbols("RND-MIB", vlIfIndex=vlIfIndex, rndIPXRipFilterCircFLnumber=rndIPXRipFilterCircFLnumber, rndIPXRipFilterCircFLaction=rndIPXRipFilterCircFLaction, ipxBasicSysInUnknownSockets=ipxBasicSysInUnknownSockets, rndBootPRelaySecThreshold=rndBootPRelaySecThreshold, rsIfConfTable=rsIfConfTable, rsIpZhrReqStaticConnNotAccepted=rsIpZhrReqStaticConnNotAccepted, rsIpRipFilterGlbTable=rsIpRipFilterGlbTable, virtualLanUserMask=virtualLanUserMask, ipRedundRoutersOperStatus=ipRedundRoutersOperStatus, sapCircAgeMultiplier=sapCircAgeMultiplier, rndFACSEntry=rndFACSEntry, rndFACSType=rndFACSType, rsIcmpRdEntry=rsIcmpRdEntry, rndCommunityStatus=rndCommunityStatus, rsIpRipFilterLclType=rsIpRipFilterLclType, rndIPXSapFilterCircuitEntry=rndIPXSapFilterCircuitEntry, vlStatus=vlStatus, rndFACSSrcAddMask=rndFACSSrcAddMask, rndIPXRipFilterCircFLIfIndex=rndIPXRipFilterCircFLIfIndex, rsWSDRedundancySwitch=rsWSDRedundancySwitch, rndBridgeType=rndBridgeType, rsTunning=rsTunning, facsAccessVoilation=facsAccessVoilation, ipSpec=ipSpec, rsArpInactiveTimeOut=rsArpInactiveTimeOut, rndMibFileRefresh=rndMibFileRefresh, reaBrgFftFacsDstIndex=reaBrgFftFacsDstIndex, rsIpRipFilterLclEntry=rsIpRipFilterLclEntry, vlanDynPortRemoved=vlanDynPortRemoved, rsIpRipFilterGlbIpAddr=rsIpRipFilterGlbIpAddr, rndFACSMask2Id=rndFACSMask2Id, rsMaxIpFrwEntries=rsMaxIpFrwEntries, rndMonitoredObjectIdentifier=rndMonitoredObjectIdentifier, rndIPXRipFilterGlbFLaction=rndIPXRipFilterGlbFLaction, rndCommunityString=rndCommunityString, rsIpZhrVirtualIpAsSource=rsIpZhrVirtualIpAsSource, rsIpRipFilterGlbEntry=rsIpRipFilterGlbEntry, rndIPXSapFilterCircFLaction=rndIPXSapFilterCircFLaction, rndDeviceParams=rndDeviceParams, rndIfChannelType=rndIfChannelType, rndIPXRipFilterCircFLType=rndIPXRipFilterCircFLType, rsHighPriority=rsHighPriority, rndHardwareConfiguration=rndHardwareConfiguration, rndAlarmInterval=rndAlarmInterval, rndIfLATCompression=rndIfLATCompression, rndMonitoringEntryStatus=rndMonitoringEntryStatus, virtualLanProtocolVlan=virtualLanProtocolVlan, reaIpxFftFacsDstIndex=reaIpxFftFacsDstIndex, reaIpFftRangeType=reaIpFftRangeType, rsIpZhrNotAllocVirtualIp=rsIpZhrNotAllocVirtualIp, rndIfStatus=rndIfStatus, rndMonitoredObjectInstance=rndMonitoredObjectInstance, sapSysState=sapSysState, ipxCircOperState=ipxCircOperState, rndSysId=rndSysId, rsIfConfName=rsIfConfName, rsIpZhrAgingTimeout=rsIpZhrAgingTimeout, reaBrgFftEntryNum=reaBrgFftEntryNum, ipxServNetNum=ipxServNetNum, ripCircIndex=ripCircIndex, rndMonitoredElementStatus=rndMonitoredElementStatus, ipRedundRoutersPollInterval=ipRedundRoutersPollInterval, reaIpxFftRangeType=reaIpxFftRangeType, rndIPXRipFilterCircuitEntry=rndIPXRipFilterCircuitEntry, ipxCircEntry=ipxCircEntry, resetRequired=resetRequired, reaIpFftFacsSrcIndex=reaIpFftFacsSrcIndex, rndIPXRipFilterCircFLnetworkMask=rndIPXRipFilterCircFLnetworkMask, rndDeleteValuesTable=rndDeleteValuesTable, rsIcmpRdTable=rsIcmpRdTable, rndWanHeader=rndWanHeader, rndCommunityMngStationAddr=rndCommunityMngStationAddr, ipxBasicSysOutDiscards=ipxBasicSysOutDiscards, sapCircEntry=sapCircEntry, ipRedundRoutersTable=ipRedundRoutersTable, ipxDestNextHopNICAddress=ipxDestNextHopNICAddress, ipRedundRoutersIfAddr=ipRedundRoutersIfAddr, ipxServTable=ipxServTable, ipxServType=ipxServType, rsIpAdEntIfIndex=rsIpAdEntIfIndex, ipxBasicSysNoRoutes=ipxBasicSysNoRoutes, ipRedundRoutersStatus=ipRedundRoutersStatus, rsMaxIpxFrwEntries=rsMaxIpxFrwEntries, genGroupConfigurationSymbol=genGroupConfigurationSymbol, rndRowStatusObjectId=rndRowStatusObjectId, sapCircOutPackets=sapCircOutPackets, rndMibFileEntryStatus=rndMibFileEntryStatus, rsMaxIpFrwEntriesAfterReset=rsMaxIpFrwEntriesAfterReset, rsDbgLevel=rsDbgLevel, reaBridgeEnable=reaBridgeEnable, reaIpFftApplFlags=reaIpFftApplFlags, rsMaxDspFrmEntries=rsMaxDspFrmEntries, rsArpDeleteTable=rsArpDeleteTable, rndAlarmEnabling=rndAlarmEnabling, ipxServProtocol=ipxServProtocol, rndMonitoringLogfile=rndMonitoringLogfile, rsMaxBrgFrwEntriesAfterReset=rsMaxBrgFrwEntriesAfterReset, rsRip2IfConfAddress=rsRip2IfConfAddress, ripSysIncorrectPackets=ripSysIncorrectPackets, sapCircState=sapCircState, ipxDestNextHopNetNum=ipxDestNextHopNetNum, ipxRipTblOverflow=ipxRipTblOverflow, rndAlarmOptions=rndAlarmOptions, rndIPXSapFilterGlbFLnetworkPatern=rndIPXSapFilterGlbFLnetworkPatern, rsIcmpRdMaxAdvertInterval=rsIcmpRdMaxAdvertInterval, rndMibFileIndex=rndMibFileIndex, sapSysTable=sapSysTable, ipxCircIfIndex=ipxCircIfIndex, rndDefaultLogFile=rndDefaultLogFile, rndBrgVersion=rndBrgVersion, genGroupHWStatus=genGroupHWStatus, ripCircAgeMultiplier=ripCircAgeMultiplier, rsIcmpRdAdvertise=rsIcmpRdAdvertise, rndBrgFeatures=rndBrgFeatures, ipRedundAdminStatus=ipRedundAdminStatus, rsIpZhrAdminStatus=rsIpZhrAdminStatus, rsIpZhrStatusIpIntf=rsIpZhrStatusIpIntf, reaIpFftEntry=reaIpFftEntry, ipxSapTblOverflow=ipxSapTblOverflow, rndFACSNetFiltering=rndFACSNetFiltering, sapSysInstance=sapSysInstance, sapCircTable=sapCircTable, rip2Spec=rip2Spec, rndIPXdriver=rndIPXdriver, rndFACSProtocolType=rndFACSProtocolType, reaSrcViolationTrapEnable=reaSrcViolationTrapEnable, virtualLanEntry=virtualLanEntry, rndIPXSapFilterCircFLserviceName=rndIPXSapFilterCircFLserviceName, ipxBasicSysTable=ipxBasicSysTable, ipxDestTable=ipxDestTable, genGroupHWVersion=genGroupHWVersion, rndMonitoredObjectInstanceLabel=rndMonitoredObjectInstanceLabel, reaIpFftPortNum=reaIpFftPortNum, rsIpRipFilterGlbType=rsIpRipFilterGlbType, ipxDestTicks=ipxDestTicks, autoConfigurationCompleted=autoConfigurationCompleted, rndEraseSimulatedConfiguration=rndEraseSimulatedConfiguration, rndFACSTable=rndFACSTable, rsIpRipFilterLclStatus=rsIpRipFilterLclStatus, rndIfFilterMode=rndIfFilterMode, ripCircSysInstance=ripCircSysInstance, rsMaxIpxFrwEntriesAfterReset=rsMaxIpxFrwEntriesAfterReset, ipRedundRoutersEntry=ipRedundRoutersEntry, rndMibFilePath=rndMibFilePath, endTftp=endTftp, rndCommunityTrapsEnable=rndCommunityTrapsEnable, ipRedundRoutersTimeout=ipRedundRoutersTimeout, TruthValue=TruthValue, ripCircUpdate=ripCircUpdate, rndIfBoardNum=rndIfBoardNum, rndDeleteValueEntryStatus=rndDeleteValueEntryStatus, lreVnRespVn=lreVnRespVn, icmpSpec=icmpSpec, ripSysInstance=ripSysInstance, lreVnRespStatus=lreVnRespStatus, reaIpFftSrcMacAddr=reaIpFftSrcMacAddr, RowStatus=RowStatus, genGroup=genGroup, rsIpRipFilterLclNetworkMaskBits=rsIpRipFilterLclNetworkMaskBits, rsIpZhrConnectionType=rsIpZhrConnectionType, NetNumber=NetNumber, ipxDestExistState=ipxDestExistState, vLIfIndex=vLIfIndex, ripsapSystem=ripsapSystem, virtualLanPortEntry=virtualLanPortEntry, rndFACSAction=rndFACSAction, rsIpZhrConnectionStatus=rsIpZhrConnectionStatus, rsMaxIpxSapEntriesTuning=rsMaxIpxSapEntriesTuning, startTftp=startTftp, rsIpZhrVirtAddressStatus=rsIpZhrVirtAddressStatus, rsIcmpGenErrMsgEnable=rsIcmpGenErrMsgEnable, rndMonitoringTable=rndMonitoringTable, rsIcmpRdIpAdvertAddr=rsIcmpRdIpAdvertAddr, rndFACSOperation=rndFACSOperation, rsSDinactiveServer=rsSDinactiveServer, reaIpxForwardEnable=reaIpxForwardEnable, rsIpRipFilterGlbMatchBits=rsIpRipFilterGlbMatchBits, rndFACSMask1Id=rndFACSMask1Id, ipxBasicSysOutPackets=ipxBasicSysOutPackets, ipxServExistState=ipxServExistState, RsIfType=RsIfType, rsArpProxy=rsArpProxy, sapCircIndex=sapCircIndex, ripsap=ripsap, rndMonitoredElementCommunity=rndMonitoredElementCommunity, reaIpxFftPortNum=reaIpxFftPortNum, rsConf=rsConf, rndDuplexMode=rndDuplexMode, ipxBasicSysInHdrErrors=ipxBasicSysInHdrErrors, rndIPXSapFilterGlbFLStatus=rndIPXSapFilterGlbFLStatus, rsIpAdEntStatus=rsIpAdEntStatus, ipxDestNetNum=ipxDestNetNum, eventNum=eventNum, reaIpFftDstIpAddr=reaIpFftDstIpAddr, rndIfClockType=rndIfClockType, rsRipEnable=rsRipEnable, rsMaxZhrConnsAfterReset=rsMaxZhrConnsAfterReset, lreResetDstMacBit46=lreResetDstMacBit46, rndAction=rndAction, errorsDuringInit=errorsDuringInit, rndIPXRipFilterCircFLStatus=rndIPXRipFilterCircFLStatus, reaIpxInDiscards=reaIpxInDiscards, rsIpRipFilterLclIpIntf=rsIpRipFilterLclIpIntf, lreVnResposibilityTable=lreVnResposibilityTable, rsIpAdEntNetMask=rsIpAdEntNetMask, rndInterface=rndInterface, rsIpZhrConnectionVirtualIp=rsIpZhrConnectionVirtualIp, ipxCircIndex=ipxCircIndex, rndIPXSapFilterGlbFLnetworkMask=rndIPXSapFilterGlbFLnetworkMask, reaBrgForwards=reaBrgForwards, vLPortType=vLPortType, rsLoadSoftware=rsLoadSoftware, rsMaxDspFrmEntriesTuning=rsMaxDspFrmEntriesTuning, rndIPXSapFilterGlbFLaction=rndIPXSapFilterGlbFLaction, rsRip2IfConfAutoSend=rsRip2IfConfAutoSend, eventDesc=eventDesc, rndCommunityAccess=rndCommunityAccess, rndIfTable=rndIfTable, ipxCircTable=ipxCircTable, rndIPXRipFilterCircFLnetworkPatern=rndIPXRipFilterCircFLnetworkPatern, ipRedundRoutersMainRouterAddr=ipRedundRoutersMainRouterAddr, rsIpRipFilterLclMatchBits=rsIpRipFilterLclMatchBits, rsMaxIpxSapEntriesAfterReset=rsMaxIpxSapEntriesAfterReset, reaIpxFftEntryNum=reaIpxFftEntryNum, rsIpAddrEntry=rsIpAddrEntry, vlAutoConfStatus=vlAutoConfStatus, rsLowPriority=rsLowPriority, ripSysState=ripSysState, rndMidLevelManagement=rndMidLevelManagement, rsConfirmMessagTab=rsConfirmMessagTab, abortTftp=abortTftp, rsMaxArpEntries=rsMaxArpEntries, rsIpZhrConnectionsTableOverflow=rsIpZhrConnectionsTableOverflow, rsServerDispatcher=rsServerDispatcher, rsTftpRetryTimeOut=rsTftpRetryTimeOut)
