#
# PySNMP MIB module ONS15501-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ONS15501-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:34:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, ObjectIdentity, Integer32, TimeTicks, iso, Counter64, NotificationType, Counter32, Gauge32, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Integer32", "TimeTicks", "iso", "Counter64", "NotificationType", "Counter32", "Gauge32", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
TimeStamp, DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DateAndTime", "TextualConvention", "DisplayString")
ons15501MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1869, 11, 11))
ons15501MIB.setRevisions(('2002-08-29 16:00', '2002-03-18 12:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ons15501MIB.setRevisionsDescriptions(('The MIB definition for software release 4.0 of ONS15501. This release adds support for the AC model. Changes to the MIB include 1. The power supply status attributes (2 new attributes) 2. New OIDs for AC chassis and AC power supplies and system 3. Object groups have been modified 4. Conformance statements changed 5. ons15501SysSwDownload expanded to support abort 6. Definitions added for ons15501SysDateAndTime object ', 'The first release for the MIB.',))
if mibBuilder.loadTexts: ons15501MIB.setLastUpdated('200208291600Z')
if mibBuilder.loadTexts: ons15501MIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ons15501MIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dwdm@cisco.com')
if mibBuilder.loadTexts: ons15501MIB.setDescription('The MIB definitions for ONS-15501 Optical Amplifier.')
synchronous = MibIdentifier((1, 3, 6, 1, 4, 1, 1869))
synEmbLx = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11))
ons15501Sys = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1))
ons15501Attr = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2))
ons15501Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3))
ons15501Notification = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 4))
ons15501OIDs = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5))
ons15501MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6))
ons15501OIDSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 1))
ons15501OIDSystemAC = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 3))
ons15501OIDEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 2))
ons15501OIDChasiss = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 2, 1))
ons15501OIDInPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 2, 2))
ons15501OIDOutPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 2, 3))
ons15501OIDPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 2, 4))
ons15501OIDChassisAC = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 2, 5))
ons15501OIDPowerSupplyAC = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 5, 2, 6))
class Ons15501ImageDnLoadStatus(TextualConvention, Integer32):
    description = 'The operational states for software image download. This enumerates all possible failure conditions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("notInitiated", 1), ("inProgress", 2), ("failedUnknownErr", 3), ("failedFileNotFound", 4), ("failedAccessDenied", 5), ("failedTimedOut", 6), ("completedSuccessfully", 7), ("failedInDownload", 8), ("failedTimeoutInDownload", 9), ("failedToConnectToServer", 10), ("failedWhileWritingToFlash", 11), ("failedIllegalOperation", 12), ("failedFileExists", 13), ("failedUnknownTransferId", 14), ("failedUnknownUser", 15))

class Ons15501AdminStatus(TextualConvention, Integer32):
    description = 'The Administrative state for a configured object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class Ons15501NTPStatus(TextualConvention, Integer32):
    description = "The operational state for NTP client. It may be 'unknown' if the NTP client has just started."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("disabled", 1), ("bothServersBad", 2), ("usingPrimary", 3), ("usingSecondary", 4), ("unknown", 5))

class Ons15501TenthVolt(TextualConvention, Integer32):
    description = 'This data type represents voltage levels that are normally expressed in volts. Units are in tenths of a volt; for example, -48.1 volts will be represented as -481.'
    status = 'current'
    displayHint = 'd-1'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1000, 0)

class Ons15501TenthdB(TextualConvention, Integer32):
    description = 'This data type represents power levels (or power gain) that are normally expressed in dBm (dB). Units are in tenths of a dBm (db); for example, -5.1 dB will be represented as -51'
    status = 'current'
    displayHint = 'd-1'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1000, 500)

class Ons15501TenthCentigrade(TextualConvention, Integer32):
    description = 'This data type represents temperature values that are normally expressed in Centigrade. Units are in tenths of a Centigrade; for example, -5.1 Centigrade will be represented as -51.'
    status = 'current'
    displayHint = 'd-1'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-500, 1000)

class Ons15501AlarmStatus(TextualConvention, Integer32):
    description = 'Represents a alarm level'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("noAlarm", 5))

class Ons15501TrapTypeEnumeration(TextualConvention, Integer32):
    description = 'This provides the details on type of alarm none - No exception unacceptableAmbientTemperature, - the temperature measured by thermal sensor shows value outside the operational limits. unacceptableElectricalPower, - the measured power supply level(s) are not within range. inputSignalPowerTooLow, - the measured input signal power is not within range. unacceptableOutputSignalPower, - the measured output signal power is not within range. embeddedControllerCommFailure, - the communication with embedded controller has failed. softwareUpgradeInitiated, - a TFTP/FTP request has been launched softwareUpgradeFailed, - a TFTP/FTP request that was launched has failed softwareUpgradeCompleted, - a TFTP/FTP request that was launched has completed softwareRebootInitiated, - a reboot has been requested on the unit softwareRolledBack, - the unit has booted from a bank that is not the programmed bank. This is possibly because the image from programmed bank was bad or because the boot loader was explicitly asked to boot from another bank (using the console). configurationChanged, - a writeable attribute has been modified (through any of the management interface exposed by the system - e.g. CLI. SNMP etc.) unacceptableGain, - equipment is unable to achieve the planned level for gain. laserPumpBad, - the measured parameters for the laser show that a laser pump has gone bad. eEPROMBad, - the writes / reads from EEPROM have problems. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 32767))
    namedValues = NamedValues(("unacceptableAmbientTemperature", 1), ("unacceptableElectricalPower", 2), ("inputSignalPowerTooLow", 3), ("unacceptableOutputSignalPower", 4), ("embeddedControllerCommFailure", 5), ("softwareUpgradeInitiated", 6), ("softwareUpgradeFailed", 7), ("softwareUpgradeCompleted", 8), ("softwareRebootInitiated", 9), ("softwareRolledBack", 10), ("configurationChanged", 11), ("unacceptableGain", 12), ("laserPumpBad", 13), ("eEPROMBad", 14), ("unknown", 32767))

class Ons15501TrapDirectionEnumeration(TextualConvention, Integer32):
    description = 'Represents a alarm level'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("dontCare", 1), ("asserted", 2), ("cleared", 3))

ons15501SysDevFlash1Image = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501SysDevFlash1Image.setStatus('current')
if mibBuilder.loadTexts: ons15501SysDevFlash1Image.setDescription('Gives the name of the software programmed on flash bank one.')
ons15501SysDevFlash2Image = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501SysDevFlash2Image.setStatus('current')
if mibBuilder.loadTexts: ons15501SysDevFlash2Image.setDescription('Gives the name of the software programmed on flash bank two.')
ons15501SysDevFlash3Image = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501SysDevFlash3Image.setStatus('current')
if mibBuilder.loadTexts: ons15501SysDevFlash3Image.setDescription('Gives the name of the software programmed on flash bank three.')
ons15501SysSwDownload = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501SysSwDownload.setStatus('current')
if mibBuilder.loadTexts: ons15501SysSwDownload.setDescription("Used to control the image download to the flash banks. NOTE: Read on this attribute returns the last t/ftp command, without login/password. For s/w release 4.0 and above, the value read back includes the Kilo-Bytes downloaded for last download command. It is the size of file downloaded (in KB), if the download has completed. If a download is in progress this value would correspond to Kilo-Bytes successfully downloaded so far. For set the string syntax is one of the following a. abort - Aborts the current download b. ftp:<svr-IP>:<login>:<pass>:<path>:<fName>:<flash#>[:passive] - Download image using ftp c. tftp:<srvr-IP>:<fName>:<flashNo> - Download image using tftp where <svr-IP> - is t/ftp server name <login> - is login to be used for ftp (default anonymous) <pass> - password for the login name for ftp (default - no passwd - passwd is empty string) <path> - path to be given on ftp prompt for cd (default - skip cd command ) <fName> - name of the file to be downloaded and burnt to the flash - NO DEFAULTS - because the filename is used as distinguishing versions there are no defaults for this command. For TFTP Path information is part of the filename <flash#> - which flash has to be burnt [1|2|3] NOTE: Burn to active bank fails passive - if `passive` is specified, ftp is done using passive mode (provided for FTP download across firewall). NOTE: None of the fields should contain ':' within them, as it is used as field separator.")
ons15501SysDevActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501SysDevActiveImage.setStatus('current')
if mibBuilder.loadTexts: ons15501SysDevActiveImage.setDescription("Show currently active image's bank number. This may be different from ons15501SysConfiguredActiveImage, if a. The image on ons15501SysConfiguredActiveImage did not boot properly. b. User chose another bank during bootup, using the serial console port. ")
ons15501SysDeviceManagerList = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501SysDeviceManagerList.setStatus('current')
if mibBuilder.loadTexts: ons15501SysDeviceManagerList.setDescription("A ',' separated list of managers that will receive the Traps. If a specific host should receive the traps sent from this unit, it should be added to the list using CLI. Up to 16 managers can be present in this list.")
ons15501SysSwDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 7), Ons15501ImageDnLoadStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501SysSwDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: ons15501SysSwDownloadStatus.setDescription('Denotes the FTP/TFTP status. Please refer to the description of Ons15501ImageDnLoadStatus for a list of supported values')
ons15501SysConfiguredImage = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501SysConfiguredImage.setStatus('current')
if mibBuilder.loadTexts: ons15501SysConfiguredImage.setDescription('Set/Show configured value for flash-bank number to be used on reboot. A set on this attribute will result in a reboot of the system. To restart the system, write back the same value as the one read from it (or from ons15501SysDevActiveImage).')
ons15501CLEICode = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501CLEICode.setReference('Bellcore Technical Reference GR-485-CORE, COMMON LANGUAGE Equipment Processes and Guidelines, Issue 2, October, 1995.')
if mibBuilder.loadTexts: ons15501CLEICode.setStatus('current')
if mibBuilder.loadTexts: ons15501CLEICode.setDescription('This attribute represents the CLEI (Common Language Equipment Identifier) code for the ONS15501.')
ons15501PrimaryNTP = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501PrimaryNTP.setStatus('current')
if mibBuilder.loadTexts: ons15501PrimaryNTP.setDescription('The IP address for the primary NTP server.')
ons15501SecondaryNTP = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501SecondaryNTP.setStatus('current')
if mibBuilder.loadTexts: ons15501SecondaryNTP.setDescription('The IP address for the secondary NTP server.')
ons15501NTPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 12), Ons15501AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501NTPAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ons15501NTPAdminStatus.setDescription('The configured administrative status for NTP.')
ons15501NTPOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 13), Ons15501NTPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501NTPOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: ons15501NTPOperationalStatus.setDescription('The operational status for NTP.')
ons15501ActiveSoftwareVer = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501ActiveSoftwareVer.setStatus('current')
if mibBuilder.loadTexts: ons15501ActiveSoftwareVer.setDescription('This attribute provides the active software version. This will be same as the entPhysicalSoftwareRev for the entry corresponding to the chassis.')
ons15501LastConfigChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501LastConfigChangeTime.setStatus('current')
if mibBuilder.loadTexts: ons15501LastConfigChangeTime.setDescription('The value of sysUpTime when last configuration change was done. NMS may use this information to synchronize if some configuration has changed on the unit.')
ons15501InRemoteInfoUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501InRemoteInfoUpdateTime.setStatus('current')
if mibBuilder.loadTexts: ons15501InRemoteInfoUpdateTime.setDescription('This attribute gives the time-stamp when one or more of ons15501InRemoteChassisName, ons15501InRemotePortName, or ons15501InRemoteAgentIpAddr was changed. NMS may use this information to find the latest information if data from remote unit does not match that of this unit.')
ons15501InRemoteChassisName = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501InRemoteChassisName.setStatus('current')
if mibBuilder.loadTexts: ons15501InRemoteChassisName.setDescription('Manager initialized string value to identify the chassis associated with remote connection for optical input. ons15501InRemoteChassisName would be a ZERO length string if the input link is disabled. To disable the input link details set ons15501InRemoteChassisName to ZERO length string and ons15501InRemoteAgentIpAddr to 0.0.0.0.')
ons15501InRemotePortName = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501InRemotePortName.setStatus('current')
if mibBuilder.loadTexts: ons15501InRemotePortName.setDescription('Manager initialized string value to identify the the port (on remote chassis) associated with remote connection for optical input. ons15501InRemotePortName would be a ZERO length string if the input link is disabled. To disable the input link details set ons15501InRemoteChassisName to ZERO length string and ons15501InRemoteAgentIpAddr to 0.0.0.0.')
ons15501InRemoteAgentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501InRemoteAgentIpAddr.setStatus('current')
if mibBuilder.loadTexts: ons15501InRemoteAgentIpAddr.setDescription('Manager initialized string value to identify the network address to be used to reach the SNMP agent entity containing information about the port and chassis providing optical input. ons15501InRemoteAgentIpAddr would be a 0.0.0.0 if the input link is disabled. To disable the input link entry set ons15501InRemoteChassisName to ZERO length string and ons15501InRemoteAgentIpAddr to 0.0.0.0.')
ons15501OutRemoteInfoUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501OutRemoteInfoUpdateTime.setStatus('current')
if mibBuilder.loadTexts: ons15501OutRemoteInfoUpdateTime.setDescription('This attribute gives the time-stamp when one or more of ons15501OutRemoteChassisName, ons15501OutRemotePortName, or ons15501OutRemoteAgentIpAddr was changed. NMS may use this information to find the latest information if data from remote unit does not match that of this unit.')
ons15501OutRemoteChassisName = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501OutRemoteChassisName.setStatus('current')
if mibBuilder.loadTexts: ons15501OutRemoteChassisName.setDescription('Manager initialized string value to identify the chassis associated with remote connection for optical output. ons15501OutRemoteChassisName would be a ZERO length string if the output link is disabled. To disable the output link details set ons15501OutRemoteChassisName to ZERO length string and ons15501OutRemoteAgentIpAddr to 0.0.0.0.')
ons15501OutRemotePortName = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501OutRemotePortName.setStatus('current')
if mibBuilder.loadTexts: ons15501OutRemotePortName.setDescription('Manager initialized string value to identify the the port (on remote chassis) associated with remote connection for optical output. ons15501OutRemotePortName would be a ZERO length string if the output link is disabled. To disable the output link details set ons15501OutRemoteChassisName to ZERO length string and ons15501OutRemoteAgentIpAddr to 0.0.0.0.')
ons15501OutRemoteAgentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501OutRemoteAgentIpAddr.setStatus('current')
if mibBuilder.loadTexts: ons15501OutRemoteAgentIpAddr.setDescription('Manager initialized string value to identify the network address to be used to reach the SNMP agent entity containing information about the port and chassis using optical output. ons15501OutRemoteAgentIpAddr would be a 0.0.0.0 if the output link is disabled. To disable the output link entry set ons15501OutRemoteChassisName to ZERO length string and ons15501OutRemoteAgentIpAddr to 0.0.0.0.')
ons15501SysAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 24), Ons15501AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501SysAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: ons15501SysAlarmStatus.setDescription('Provides the highest severity alarm currently active.')
ons15501SysDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 1, 25), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501SysDateAndTime.setStatus('current')
if mibBuilder.loadTexts: ons15501SysDateAndTime.setDescription("The date and time of the System. The write will not succeed if the administrative state for NTP (ons15501NTPAdminStatus) is 'enabled'. Setting this attribute will autmatically change values for ons15501TrapLogEntryDateAndTime and ons15501ActAlarmDateAndTime.")
ons15501LastTrapIndex = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501LastTrapIndex.setStatus('current')
if mibBuilder.loadTexts: ons15501LastTrapIndex.setDescription('The value of ons15501TrapLogEntryIndex, used while logging the most recent trap. Goes back to 1, after reaching the max value. The trap log table is a circular list with the most recent entry at index given by this attribute. On restart of the unit, the value is reset to 1.')
ons15501TrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2), )
if mibBuilder.loadTexts: ons15501TrapLogTable.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogTable.setDescription('Table for last N traps (N = 100 in most cases). Please refer to ons15501LastTrapIndex for details on how this table is organized.')
ons15501TrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2, 1), ).setIndexNames((0, "ONS15501-MIB", "ons15501TrapLogEntryIndex"))
if mibBuilder.loadTexts: ons15501TrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogEntry.setDescription('Entry for a trap')
ons15501TrapLogEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)))
if mibBuilder.loadTexts: ons15501TrapLogEntryIndex.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogEntryIndex.setDescription('index field for this entry. Actual range at run time is ons15501TrapCounter to ons15501TrapCounter - N + 1 or 1 (whichever is higher)')
ons15501TrapLogEntryTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2, 1, 2), Ons15501TrapTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501TrapLogEntryTrapType.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogEntryTrapType.setDescription('The type of trap. See the definition of Ons15501TrapTypeEnumeration for possible values.')
ons15501TrapLogEntryDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2, 1, 3), Ons15501TrapDirectionEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501TrapLogEntryDirection.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogEntryDirection.setDescription("Whether the trap is being asserted or cleared. Please note that some traps don't have a direction. (e.g. configuration changed).")
ons15501TrapLogEntryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501TrapLogEntryTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogEntryTimeStamp.setDescription('The value of sysUpTime when the entry was placed in the log.')
ons15501TrapLogEntryDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501TrapLogEntryDateAndTime.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogEntryDateAndTime.setDescription('The local date and time at which the entry was placed in the log.')
ons15501TrapLogEntryPhyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2, 1, 6), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501TrapLogEntryPhyIndex.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogEntryPhyIndex.setDescription('Provides entPhysicalIndex value for the physical entity corresponding to the trap entry.')
ons15501TrapLogEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 2, 1, 7), Ons15501AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501TrapLogEntrySeverity.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogEntrySeverity.setDescription('Provides the severity level corresponding to this trap entry.')
ons15501ActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 3), )
if mibBuilder.loadTexts: ons15501ActiveAlarmTable.setStatus('current')
if mibBuilder.loadTexts: ons15501ActiveAlarmTable.setDescription('Table for currently active alarm conditions. This table is effectively the list of traps that have been asserted but not cleared.')
ons15501ActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 3, 1), ).setIndexNames((0, "ONS15501-MIB", "ons15501ActAlarmType"))
if mibBuilder.loadTexts: ons15501ActiveAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: ons15501ActiveAlarmEntry.setDescription('Entry for an active alarm condition. For each alarm condition present on the equipment, there would be an entry in the table.')
ons15501ActAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 3, 1, 1), Ons15501TrapTypeEnumeration())
if mibBuilder.loadTexts: ons15501ActAlarmType.setStatus('current')
if mibBuilder.loadTexts: ons15501ActAlarmType.setDescription('Index field for ons15501ActiveAlarmTable. Presence of an entry implies that the specific alarm type is active on the unit.')
ons15501ActAlarmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501ActAlarmTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ons15501ActAlarmTimeStamp.setDescription('The time since when the alarm is active.')
ons15501ActAlarmDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501ActAlarmDateAndTime.setStatus('current')
if mibBuilder.loadTexts: ons15501ActAlarmDateAndTime.setDescription('The local date and time since when the alarm is active')
ons15501ActAlarmPhyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 3, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501ActAlarmPhyIndex.setStatus('current')
if mibBuilder.loadTexts: ons15501ActAlarmPhyIndex.setDescription('Provides entPhysicalIndex value for the physical entity corresponding to the alarm entry.')
ons15501ActAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 3, 1, 5), Ons15501AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501ActAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: ons15501ActAlarmSeverity.setDescription('Provides the severity level corresponding to this alarm entry.')
ons15501TrapDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 4), )
if mibBuilder.loadTexts: ons15501TrapDescriptionTable.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapDescriptionTable.setDescription('Table for mapping the Ons15501TrapTypeEnumeration values to their textual information.')
ons15501TrapDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 4, 1), ).setIndexNames((0, "ONS15501-MIB", "ons15501TrapTypeValue"))
if mibBuilder.loadTexts: ons15501TrapDescriptionEntry.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapDescriptionEntry.setDescription('Entry for textual information about traps.')
ons15501TrapTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 4, 1, 1), Ons15501TrapTypeEnumeration())
if mibBuilder.loadTexts: ons15501TrapTypeValue.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapTypeValue.setDescription('Index field for this entry.')
ons15501TrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501TrapDescription.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapDescription.setDescription('The textual information corresponding to the ons15501TrapTypeValue.')
ons15501TrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1869, 11, 11, 3, 4, 1, 3), Ons15501AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501TrapSeverity.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapSeverity.setDescription('Provides the default severity level corresponding to the ons15501TrapTypeValue.')
ons15501NotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 4, 0))
ons15501GenericNotificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 1869, 11, 11, 4, 0, 1)).setObjects(("ONS15501-MIB", "ons15501LastTrapIndex"), ("ONS15501-MIB", "ons15501TrapLogEntryTrapType"), ("ONS15501-MIB", "ons15501TrapLogEntryDirection"), ("ONS15501-MIB", "ons15501TrapLogEntryPhyIndex"), ("ONS15501-MIB", "ons15501TrapLogEntrySeverity"))
if mibBuilder.loadTexts: ons15501GenericNotificationTrap.setStatus('current')
if mibBuilder.loadTexts: ons15501GenericNotificationTrap.setDescription('This notification is generated whenever a bitmap change is observed on any of the monitored equipment, or when a change has to be notified.')
ons15501InputOpticalPower = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 1), Ons15501TenthdB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501InputOpticalPower.setStatus('current')
if mibBuilder.loadTexts: ons15501InputOpticalPower.setDescription('The optical power being fed into the Amplifier.')
ons15501InputOpticalPowerMean = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 2), Ons15501TenthdB().subtype(subtypeSpec=ValueRangeConstraint(-100, 0))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501InputOpticalPowerMean.setStatus('current')
if mibBuilder.loadTexts: ons15501InputOpticalPowerMean.setDescription('Mean value for input optical power. If the input optical power falls below the mean value by more than trigger (see ons15501InputOpticalPowerTrigger) an alarm is generated. The alarm is cleared when the input optical power is back within 90% of trigger from the mean.')
ons15501InputOpticalPowerTrigger = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 3), Ons15501TenthdB().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501InputOpticalPowerTrigger.setStatus('current')
if mibBuilder.loadTexts: ons15501InputOpticalPowerTrigger.setDescription('Trigger defines the max deviation allowed from the mean, without an alarm being generated. Once an alarm is generated, it is not cleared until the input optical power falls back within 90% of the trigger value from the mean. Please also refer to ons15501InputOpticalPowerMean above. ')
ons15501OutputOpticalPower = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 4), Ons15501TenthdB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501OutputOpticalPower.setStatus('current')
if mibBuilder.loadTexts: ons15501OutputOpticalPower.setDescription('The measured value for raw optical power being generated at the output of the Amplifier.')
ons15501OutputSignalPower = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 5), Ons15501TenthdB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501OutputSignalPower.setStatus('current')
if mibBuilder.loadTexts: ons15501OutputSignalPower.setDescription("The optical signal power at the output of the Amplifier. The value of this attribute triggers the alarm, based on mean value and trigger as defined by ons15501OutputSignalPowerMean and ons15501OutputSignalPowerTrigger. This value is internally calculated using the following formula. ons15501OutputSignalPower = ons15501OpticalPowerGain + ons15501InputOpticalPower At very low ons15501InputOpticalPower (below -16 dBm), the ons15501OutputSignalPower has significant difference from ons15501OutputOpticalPower while at higher input power (ons15501InputOpticalPower) they are closer. Following graph captures the difference (for a 17 dBm EDFA) (dashes '-'/'_' denote optical output power while dots '.' denote signal output power) ^ | .- | .- | .- +5 dBm | .- | .- Optical | _.- power / | _ -. Signal |_ _ - . power | . | . | . -17 dBm +-----------------------+--------------> -29 dBm -10 dBm Input Optical Power ")
ons15501OutputSignalPowerMean = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 6), Ons15501TenthdB().subtype(subtypeSpec=ValueRangeConstraint(-60, 0))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501OutputSignalPowerMean.setStatus('current')
if mibBuilder.loadTexts: ons15501OutputSignalPowerMean.setDescription('Mean value for output optical power. If the output signal power falls below (or goes above) the mean value by more than trigger (see ons15501OutputSignalPowerTrigger) an alarm is generated. The alarm is cleared when the output optical power is back within 90% of trigger from the mean.')
ons15501OutputSignalPowerTrigger = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 7), Ons15501TenthdB().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501OutputSignalPowerTrigger.setStatus('current')
if mibBuilder.loadTexts: ons15501OutputSignalPowerTrigger.setDescription('Trigger defines the max deviation allowed from the mean, without an alarm being generated. Once an alarm is generated, it is not cleared until the output signal power falls back within 90% of the trigger value from the mean. Please also refer to ons15501OutputSignalPowerMean above. ')
ons15501ConfigOpticalGain = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 8), Ons15501TenthdB().subtype(subtypeSpec=ValueRangeConstraint(70, 175))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501ConfigOpticalGain.setStatus('current')
if mibBuilder.loadTexts: ons15501ConfigOpticalGain.setDescription('The configured value for power gain.')
ons15501OpticalPowerGain = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 9), Ons15501TenthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501OpticalPowerGain.setStatus('current')
if mibBuilder.loadTexts: ons15501OpticalPowerGain.setDescription('The measured value for power gain. This value does not include the amplification noise that is significant for low input signals.')
ons15501GainTrigger = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 10), Ons15501TenthdB().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501GainTrigger.setStatus('current')
if mibBuilder.loadTexts: ons15501GainTrigger.setDescription('The gain deviation allowed from the configured gain before an alarm is asserted. The alarm is not cleared, until measured gain(ons15501OpticalPowerGain) is back within 90% of ons15501GainTrigger from configured gain (ons15501ConfigOpticalGain). ')
ons15501PowerSupply1Level = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 11), Ons15501TenthVolt()).setUnits('volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501PowerSupply1Level.setStatus('current')
if mibBuilder.loadTexts: ons15501PowerSupply1Level.setDescription('The voltage fed through power supply 1. The value of the attribute is 10 times the the value in volts.')
ons15501PowerSupply2Level = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 12), Ons15501TenthVolt()).setUnits('volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501PowerSupply2Level.setStatus('current')
if mibBuilder.loadTexts: ons15501PowerSupply2Level.setDescription('The voltage fed through power supply 2. The value of the attribute is 10 times the the value in volts.')
ons15501LaserStatus = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 13), Ons15501AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501LaserStatus.setStatus('current')
if mibBuilder.loadTexts: ons15501LaserStatus.setDescription('Gives the status of the laser pumps.')
ons15501DevAmbTemp = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 14), Ons15501TenthCentigrade()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501DevAmbTemp.setStatus('current')
if mibBuilder.loadTexts: ons15501DevAmbTemp.setDescription('The ambient temperature for the device. ')
ons15501DevAmbTempMean = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 15), Ons15501TenthCentigrade().subtype(subtypeSpec=ValueRangeConstraint(200, 400))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501DevAmbTempMean.setStatus('current')
if mibBuilder.loadTexts: ons15501DevAmbTempMean.setDescription('Mean value for temperature. If the temperature falls below (or goes above) the mean value by more than trigger level (see ons15501DevAmbTempTrigger) an alarm is generated. The alarm is cleared when the temperature is back within 90% of trigger value, from the mean. ')
ons15501DevAmbTempTrigger = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 16), Ons15501TenthCentigrade().subtype(subtypeSpec=ValueRangeConstraint(200, 300))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ons15501DevAmbTempTrigger.setStatus('current')
if mibBuilder.loadTexts: ons15501DevAmbTempTrigger.setDescription('Please refer to ons15501DevAmbTempMean above. Trigger defines the max deviation allowed from the mean, without an alarm being generated. Once an alarm is generated, it is not cleared until the temperature falls back within 90% of the value. ')
ons15501PowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 17), Ons15501AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501PowerSupply1Status.setStatus('current')
if mibBuilder.loadTexts: ons15501PowerSupply1Status.setDescription('Gives the status of power supply one.')
ons15501PowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 1869, 11, 11, 2, 18), Ons15501AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ons15501PowerSupply2Status.setStatus('current')
if mibBuilder.loadTexts: ons15501PowerSupply2Status.setDescription('Gives the status of power supply two.')
ons15501MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 1))
ons15501MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2))
ons15501FinalCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 1, 1)).setObjects(("ONS15501-MIB", "ons15501SysInfoGroup"), ("ONS15501-MIB", "ons15501FinalAttrGroup"), ("ONS15501-MIB", "ons15501TrapLogGroup"), ("ONS15501-MIB", "ons15501ActiveAlarmGroup"), ("ONS15501-MIB", "ons15501TrapDescriptionGroup"), ("ONS15501-MIB", "ons15501FinalNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501FinalCompliance = ons15501FinalCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ons15501FinalCompliance.setDescription('The compliance statement for final release ONS15501.')
ons15501Rel4Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 1, 2)).setObjects(("ONS15501-MIB", "ons15501SysInfoGroup2"), ("ONS15501-MIB", "ons15501CoreAttrGroup"), ("ONS15501-MIB", "ons15501TrapLogGroup"), ("ONS15501-MIB", "ons15501ActiveAlarmGroup"), ("ONS15501-MIB", "ons15501TrapDescriptionGroup"), ("ONS15501-MIB", "ons15501FinalNotificationsGroup"), ("ONS15501-MIB", "ons15501PowerSupplyStatusGroup"), ("ONS15501-MIB", "ons15501PowerSupplyLevelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501Rel4Compliance = ons15501Rel4Compliance.setStatus('current')
if mibBuilder.loadTexts: ons15501Rel4Compliance.setDescription('The compliance statement for 4.0 release ONS15501.')
ons15501SysInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 1)).setObjects(("ONS15501-MIB", "ons15501SysDevFlash1Image"), ("ONS15501-MIB", "ons15501SysDevFlash2Image"), ("ONS15501-MIB", "ons15501SysDevFlash3Image"), ("ONS15501-MIB", "ons15501SysSwDownload"), ("ONS15501-MIB", "ons15501SysSwDownloadStatus"), ("ONS15501-MIB", "ons15501SysConfiguredImage"), ("ONS15501-MIB", "ons15501SysDevActiveImage"), ("ONS15501-MIB", "ons15501SysAlarmStatus"), ("ONS15501-MIB", "ons15501PrimaryNTP"), ("ONS15501-MIB", "ons15501SecondaryNTP"), ("ONS15501-MIB", "ons15501NTPAdminStatus"), ("ONS15501-MIB", "ons15501NTPOperationalStatus"), ("ONS15501-MIB", "ons15501CLEICode"), ("ONS15501-MIB", "ons15501InRemoteInfoUpdateTime"), ("ONS15501-MIB", "ons15501InRemoteChassisName"), ("ONS15501-MIB", "ons15501InRemotePortName"), ("ONS15501-MIB", "ons15501InRemoteAgentIpAddr"), ("ONS15501-MIB", "ons15501OutRemoteInfoUpdateTime"), ("ONS15501-MIB", "ons15501OutRemoteChassisName"), ("ONS15501-MIB", "ons15501OutRemotePortName"), ("ONS15501-MIB", "ons15501OutRemoteAgentIpAddr"), ("ONS15501-MIB", "ons15501LastConfigChangeTime"), ("ONS15501-MIB", "ons15501ActiveSoftwareVer"), ("ONS15501-MIB", "ons15501SysDeviceManagerList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501SysInfoGroup = ons15501SysInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ons15501SysInfoGroup.setDescription('The basic group defines objects which are common to all Embedded Linux product series of Synchronous equipment.')
ons15501TrapLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 2)).setObjects(("ONS15501-MIB", "ons15501LastTrapIndex"), ("ONS15501-MIB", "ons15501TrapLogEntryTrapType"), ("ONS15501-MIB", "ons15501TrapLogEntryDirection"), ("ONS15501-MIB", "ons15501TrapLogEntryTimeStamp"), ("ONS15501-MIB", "ons15501TrapLogEntryDateAndTime"), ("ONS15501-MIB", "ons15501TrapLogEntryPhyIndex"), ("ONS15501-MIB", "ons15501TrapLogEntrySeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501TrapLogGroup = ons15501TrapLogGroup.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapLogGroup.setDescription('The trap attribute group provides the trap logs. These attributes are also used in trap notifications.')
ons15501ActiveAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 3)).setObjects(("ONS15501-MIB", "ons15501ActAlarmPhyIndex"), ("ONS15501-MIB", "ons15501ActAlarmTimeStamp"), ("ONS15501-MIB", "ons15501ActAlarmDateAndTime"), ("ONS15501-MIB", "ons15501ActAlarmSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501ActiveAlarmGroup = ons15501ActiveAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: ons15501ActiveAlarmGroup.setDescription('The alarm attribute group provides the list of active alarms')
ons15501TrapDescriptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 4)).setObjects(("ONS15501-MIB", "ons15501TrapDescription"), ("ONS15501-MIB", "ons15501TrapSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501TrapDescriptionGroup = ons15501TrapDescriptionGroup.setStatus('current')
if mibBuilder.loadTexts: ons15501TrapDescriptionGroup.setDescription('The trap description attribute group provides the mapping from trap type to textual information about the trap.')
ons15501FinalAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 5)).setObjects(("ONS15501-MIB", "ons15501InputOpticalPower"), ("ONS15501-MIB", "ons15501InputOpticalPowerMean"), ("ONS15501-MIB", "ons15501InputOpticalPowerTrigger"), ("ONS15501-MIB", "ons15501OutputOpticalPower"), ("ONS15501-MIB", "ons15501OutputSignalPower"), ("ONS15501-MIB", "ons15501OutputSignalPowerMean"), ("ONS15501-MIB", "ons15501OutputSignalPowerTrigger"), ("ONS15501-MIB", "ons15501ConfigOpticalGain"), ("ONS15501-MIB", "ons15501OpticalPowerGain"), ("ONS15501-MIB", "ons15501PowerSupply1Level"), ("ONS15501-MIB", "ons15501PowerSupply2Level"), ("ONS15501-MIB", "ons15501DevAmbTemp"), ("ONS15501-MIB", "ons15501DevAmbTempMean"), ("ONS15501-MIB", "ons15501DevAmbTempTrigger"), ("ONS15501-MIB", "ons15501LaserStatus"), ("ONS15501-MIB", "ons15501GainTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501FinalAttrGroup = ons15501FinalAttrGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ons15501FinalAttrGroup.setDescription('The ons15501 group of attributes models the parameters in the EDFA.')
ons15501FinalNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 6)).setObjects(("ONS15501-MIB", "ons15501GenericNotificationTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501FinalNotificationsGroup = ons15501FinalNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ons15501FinalNotificationsGroup.setDescription('The notification that carries all the exception information.')
ons15501CoreAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 7)).setObjects(("ONS15501-MIB", "ons15501InputOpticalPower"), ("ONS15501-MIB", "ons15501InputOpticalPowerMean"), ("ONS15501-MIB", "ons15501InputOpticalPowerTrigger"), ("ONS15501-MIB", "ons15501OutputOpticalPower"), ("ONS15501-MIB", "ons15501OutputSignalPower"), ("ONS15501-MIB", "ons15501OutputSignalPowerMean"), ("ONS15501-MIB", "ons15501OutputSignalPowerTrigger"), ("ONS15501-MIB", "ons15501ConfigOpticalGain"), ("ONS15501-MIB", "ons15501OpticalPowerGain"), ("ONS15501-MIB", "ons15501DevAmbTemp"), ("ONS15501-MIB", "ons15501DevAmbTempMean"), ("ONS15501-MIB", "ons15501DevAmbTempTrigger"), ("ONS15501-MIB", "ons15501LaserStatus"), ("ONS15501-MIB", "ons15501GainTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501CoreAttrGroup = ons15501CoreAttrGroup.setStatus('current')
if mibBuilder.loadTexts: ons15501CoreAttrGroup.setDescription('The ons15501 group of attributes models the parameters in the EDFA. The power supply related attributes are not part of this group.')
ons15501PowerSupplyStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 8)).setObjects(("ONS15501-MIB", "ons15501PowerSupply1Status"), ("ONS15501-MIB", "ons15501PowerSupply2Status"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501PowerSupplyStatusGroup = ons15501PowerSupplyStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ons15501PowerSupplyStatusGroup.setDescription('The ons15501 group of attributes models the status of power supplies. The support for status was introduced in version 4.0.')
ons15501PowerSupplyLevelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 9)).setObjects(("ONS15501-MIB", "ons15501PowerSupply1Level"), ("ONS15501-MIB", "ons15501PowerSupply2Level"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501PowerSupplyLevelGroup = ons15501PowerSupplyLevelGroup.setStatus('current')
if mibBuilder.loadTexts: ons15501PowerSupplyLevelGroup.setDescription('The ons15501 group of attributes provides the voltage level of power supplies. It is available only for DC series of ONS15501.')
ons15501SysInfoGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 1869, 11, 11, 6, 2, 10)).setObjects(("ONS15501-MIB", "ons15501SysDevFlash1Image"), ("ONS15501-MIB", "ons15501SysDevFlash2Image"), ("ONS15501-MIB", "ons15501SysDevFlash3Image"), ("ONS15501-MIB", "ons15501SysSwDownload"), ("ONS15501-MIB", "ons15501SysSwDownloadStatus"), ("ONS15501-MIB", "ons15501SysConfiguredImage"), ("ONS15501-MIB", "ons15501SysDevActiveImage"), ("ONS15501-MIB", "ons15501SysAlarmStatus"), ("ONS15501-MIB", "ons15501PrimaryNTP"), ("ONS15501-MIB", "ons15501SecondaryNTP"), ("ONS15501-MIB", "ons15501NTPAdminStatus"), ("ONS15501-MIB", "ons15501NTPOperationalStatus"), ("ONS15501-MIB", "ons15501CLEICode"), ("ONS15501-MIB", "ons15501InRemoteInfoUpdateTime"), ("ONS15501-MIB", "ons15501InRemoteChassisName"), ("ONS15501-MIB", "ons15501InRemotePortName"), ("ONS15501-MIB", "ons15501InRemoteAgentIpAddr"), ("ONS15501-MIB", "ons15501OutRemoteInfoUpdateTime"), ("ONS15501-MIB", "ons15501OutRemoteChassisName"), ("ONS15501-MIB", "ons15501OutRemotePortName"), ("ONS15501-MIB", "ons15501OutRemoteAgentIpAddr"), ("ONS15501-MIB", "ons15501LastConfigChangeTime"), ("ONS15501-MIB", "ons15501ActiveSoftwareVer"), ("ONS15501-MIB", "ons15501SysDeviceManagerList"), ("ONS15501-MIB", "ons15501SysDateAndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ons15501SysInfoGroup2 = ons15501SysInfoGroup2.setStatus('current')
if mibBuilder.loadTexts: ons15501SysInfoGroup2.setDescription('The basic group defines objects which are common to all Embedded Linux product series of Synchronous equipment.')
mibBuilder.exportSymbols("ONS15501-MIB", ons15501OIDOutPort=ons15501OIDOutPort, ons15501ActAlarmType=ons15501ActAlarmType, ons15501TrapDescriptionEntry=ons15501TrapDescriptionEntry, ons15501SysDevFlash3Image=ons15501SysDevFlash3Image, ons15501DevAmbTempTrigger=ons15501DevAmbTempTrigger, ons15501TrapDescriptionGroup=ons15501TrapDescriptionGroup, ons15501TrapLogEntryDateAndTime=ons15501TrapLogEntryDateAndTime, ons15501PowerSupply2Status=ons15501PowerSupply2Status, ons15501ActAlarmDateAndTime=ons15501ActAlarmDateAndTime, ons15501InRemoteChassisName=ons15501InRemoteChassisName, ons15501LastConfigChangeTime=ons15501LastConfigChangeTime, ons15501LastTrapIndex=ons15501LastTrapIndex, ons15501GenericNotificationTrap=ons15501GenericNotificationTrap, ons15501OutputSignalPowerMean=ons15501OutputSignalPowerMean, ons15501OIDSystemAC=ons15501OIDSystemAC, ons15501OpticalPowerGain=ons15501OpticalPowerGain, ons15501InRemotePortName=ons15501InRemotePortName, ons15501SysInfoGroup2=ons15501SysInfoGroup2, ons15501Rel4Compliance=ons15501Rel4Compliance, ons15501OIDChasiss=ons15501OIDChasiss, PYSNMP_MODULE_ID=ons15501MIB, ons15501TrapDescription=ons15501TrapDescription, ons15501InRemoteInfoUpdateTime=ons15501InRemoteInfoUpdateTime, ons15501ConfigOpticalGain=ons15501ConfigOpticalGain, Ons15501AdminStatus=Ons15501AdminStatus, ons15501InputOpticalPowerMean=ons15501InputOpticalPowerMean, Ons15501NTPStatus=Ons15501NTPStatus, ons15501TrapTypeValue=ons15501TrapTypeValue, ons15501MIBCompliances=ons15501MIBCompliances, ons15501Alarms=ons15501Alarms, ons15501TrapLogEntrySeverity=ons15501TrapLogEntrySeverity, ons15501PowerSupplyStatusGroup=ons15501PowerSupplyStatusGroup, ons15501ActiveSoftwareVer=ons15501ActiveSoftwareVer, ons15501Notification=ons15501Notification, ons15501SysDevFlash1Image=ons15501SysDevFlash1Image, ons15501SysDevActiveImage=ons15501SysDevActiveImage, ons15501TrapSeverity=ons15501TrapSeverity, ons15501OutputOpticalPower=ons15501OutputOpticalPower, ons15501TrapLogEntryDirection=ons15501TrapLogEntryDirection, ons15501InputOpticalPower=ons15501InputOpticalPower, ons15501GainTrigger=ons15501GainTrigger, ons15501FinalNotificationsGroup=ons15501FinalNotificationsGroup, ons15501OIDEntity=ons15501OIDEntity, Ons15501TenthVolt=Ons15501TenthVolt, ons15501Sys=ons15501Sys, ons15501DevAmbTemp=ons15501DevAmbTemp, ons15501InputOpticalPowerTrigger=ons15501InputOpticalPowerTrigger, Ons15501TrapDirectionEnumeration=Ons15501TrapDirectionEnumeration, ons15501OutRemotePortName=ons15501OutRemotePortName, ons15501LaserStatus=ons15501LaserStatus, ons15501SysDeviceManagerList=ons15501SysDeviceManagerList, ons15501FinalAttrGroup=ons15501FinalAttrGroup, ons15501SysInfoGroup=ons15501SysInfoGroup, ons15501NTPAdminStatus=ons15501NTPAdminStatus, ons15501ActiveAlarmEntry=ons15501ActiveAlarmEntry, ons15501TrapLogEntryIndex=ons15501TrapLogEntryIndex, ons15501MIB=ons15501MIB, ons15501CLEICode=ons15501CLEICode, Ons15501TenthdB=Ons15501TenthdB, ons15501DevAmbTempMean=ons15501DevAmbTempMean, ons15501OIDSystem=ons15501OIDSystem, ons15501TrapLogEntryTrapType=ons15501TrapLogEntryTrapType, ons15501Attr=ons15501Attr, synEmbLx=synEmbLx, ons15501OIDPowerSupply=ons15501OIDPowerSupply, ons15501SysConfiguredImage=ons15501SysConfiguredImage, ons15501CoreAttrGroup=ons15501CoreAttrGroup, ons15501OutRemoteChassisName=ons15501OutRemoteChassisName, ons15501OutRemoteInfoUpdateTime=ons15501OutRemoteInfoUpdateTime, ons15501OutputSignalPower=ons15501OutputSignalPower, ons15501OutRemoteAgentIpAddr=ons15501OutRemoteAgentIpAddr, ons15501PowerSupply1Status=ons15501PowerSupply1Status, ons15501OIDs=ons15501OIDs, ons15501NTPOperationalStatus=ons15501NTPOperationalStatus, ons15501TrapDescriptionTable=ons15501TrapDescriptionTable, ons15501ActAlarmPhyIndex=ons15501ActAlarmPhyIndex, Ons15501AlarmStatus=Ons15501AlarmStatus, ons15501SysAlarmStatus=ons15501SysAlarmStatus, ons15501MIBGroups=ons15501MIBGroups, ons15501FinalCompliance=ons15501FinalCompliance, ons15501TrapLogTable=ons15501TrapLogTable, ons15501MIBConformance=ons15501MIBConformance, Ons15501TrapTypeEnumeration=Ons15501TrapTypeEnumeration, ons15501TrapLogEntryPhyIndex=ons15501TrapLogEntryPhyIndex, synchronous=synchronous, ons15501TrapLogEntry=ons15501TrapLogEntry, ons15501OIDChassisAC=ons15501OIDChassisAC, Ons15501ImageDnLoadStatus=Ons15501ImageDnLoadStatus, ons15501SysSwDownloadStatus=ons15501SysSwDownloadStatus, ons15501ActiveAlarmGroup=ons15501ActiveAlarmGroup, ons15501PrimaryNTP=ons15501PrimaryNTP, ons15501SysSwDownload=ons15501SysSwDownload, ons15501PowerSupplyLevelGroup=ons15501PowerSupplyLevelGroup, ons15501TrapLogEntryTimeStamp=ons15501TrapLogEntryTimeStamp, ons15501PowerSupply1Level=ons15501PowerSupply1Level, ons15501ActiveAlarmTable=ons15501ActiveAlarmTable, ons15501OIDInPort=ons15501OIDInPort, ons15501SecondaryNTP=ons15501SecondaryNTP, ons15501SysDateAndTime=ons15501SysDateAndTime, ons15501ActAlarmSeverity=ons15501ActAlarmSeverity, ons15501NotificationPrefix=ons15501NotificationPrefix, ons15501ActAlarmTimeStamp=ons15501ActAlarmTimeStamp, ons15501InRemoteAgentIpAddr=ons15501InRemoteAgentIpAddr, ons15501PowerSupply2Level=ons15501PowerSupply2Level, Ons15501TenthCentigrade=Ons15501TenthCentigrade, ons15501OutputSignalPowerTrigger=ons15501OutputSignalPowerTrigger, ons15501SysDevFlash2Image=ons15501SysDevFlash2Image, ons15501TrapLogGroup=ons15501TrapLogGroup, ons15501OIDPowerSupplyAC=ons15501OIDPowerSupplyAC)
