#
# PySNMP MIB module NOKIA-UNITTYPES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOKIA-UNITTYPES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ntcHWUnitTypeMibs, ntcCommonModules = mibBuilder.importSymbols("NOKIA-COMMON-MIB-OID-REGISTRATION-MIB", "ntcHWUnitTypeMibs", "ntcCommonModules")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, Bits, iso, Unsigned32, NotificationType, MibIdentifier, TimeTicks, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "Bits", "iso", "Unsigned32", "NotificationType", "MibIdentifier", "TimeTicks", "IpAddress", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ntcHWUnitTypeModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 94, 1, 16, 5, 3))
ntcHWUnitTypeModule.setRevisions(('1998-09-24 00:00', '1998-10-04 00:00', '1998-11-25 00:00', '1998-12-03 00:00', '1999-10-18 00:00', '1901-03-14 00:00', '1902-02-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ntcHWUnitTypeModule.setRevisionsDescriptions(('Rev 0.1 Initial release', 'Rev 0.2 Updated anchors to use values registered by Mika Kiikkila.', 'Rev 0.3 Updated for BBAN units by Andreas Terstegge', 'Rev 0.4 Updated with general slot and backplane definitions by Andreas Terstegge', 'Rev 0.5 Comment for usage of this module and for OIDs 21 and 22 added by Anna-Kaisa Lindfors.', 'Rev 0.6 Updated for IPRG units by Petri Jarre (added by Heinz-Guenter Boettger)', 'Rev 0.7 Hard Disk and Crypto Accelerator, Jeffrey Lampert (added by Heinz-Guenter Boettger)',))
if mibBuilder.loadTexts: ntcHWUnitTypeModule.setLastUpdated('9808270000Z')
if mibBuilder.loadTexts: ntcHWUnitTypeModule.setOrganization('Nokia')
if mibBuilder.loadTexts: ntcHWUnitTypeModule.setContactInfo('Mika Kiikkila Nokia Telecommunications Oy Hiomotie 5, FIN-0380 Helsinki, Finland +358 9 51121 mika.kiikkila@ntc.nokia.com')
if mibBuilder.loadTexts: ntcHWUnitTypeModule.setDescription('This module contains the OID values for the different types of circuit cards that are produced for use in Nokia equipment.')
ntcHWUnitNone = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 1))
ntcHWUnitAny = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 2))
ntcHWSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 21))
ntcHWBackplane = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 22))
ntcHWUnitIanNcaStm1Electrical = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 3))
ntcHWUnitNcaStm1SingleModeOptical = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 4))
ntcHWUnitNcaStm1MultiModeOptical = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 5))
ntcHWUnitIanASU = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 6))
ntcHWUnitIan4PortV35 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 7))
ntcHWUnitIan4PortE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 8))
ntcHWUnitIan4PortMsdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 9))
ntcHWUnitIanIpFwrdingUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 10))
ntcHWUnitBbanAlbaStm1E = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 11))
ntcHWUnitBbanAlbaStm1Om = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 12))
ntcHWUnitBbanAlbaStm1Os = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 13))
ntcHWUnitBbanAlbaE3 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 14))
ntcHWUnitBbanSliuAdslMiDmt = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 15))
ntcHWUnitBbanSliuAdslAdDmt = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 16))
ntcHWUnitBbanSliuE1I75 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 17))
ntcHWUnitBbanSliuE1I120 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 18))
ntcHWUnitBbanBackplane8 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 19))
ntcHWUnitBbanBackplane17 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 20))
ntcHWUnitIprgSeqCrp = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 23))
ntcHWUnitIprgSeqGplc1 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 24))
ntcHWUnitIprgSeqGplc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 25))
ntcHWUnitIprgSeqWslc = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 26))
ntcHWUnitIprgEth1 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 27))
ntcHWUnitIprgEth2 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 28))
ntcHWUnitIprgEth4 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 29))
ntcHWUnitIprgAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 30))
ntcHWUnitIprgX211 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 31))
ntcHWUnitIprgV351 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 32))
ntcHWUnitIprgX212 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 33))
ntcHWUnitIprgV352 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 34))
ntcHWUnitIprgHssi = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 35))
ntcHWUnitIprgE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 36))
ntcHWUnitIprgT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 37))
ntcHWUnitIprgFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 38))
ntcHWUnitIprgTok = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 39))
ntcHWUnitIprgIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 40))
ntcHWUnitIpsoGigEth1 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 57))
ntcHWUnitIpsoSs7 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 58))
ntcHWUnitIpsoCryptoAccelerator = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 59))
ntcHWUnitIprgBackplaneIP110 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 41))
ntcHWUnitIprgBackplaneIP330 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 42))
ntcHWUnitIprgBackplaneIP440 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 43))
ntcHWUnitIprgBackplaneIP530 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 44))
ntcHWUnitIprgBackplaneIP650 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 45))
ntcHWUnitIprgBackplaneIP730 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 46))
ntcHWUnitIprgBackplaneSeq9 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 47))
ntcHWUnitIprgBackplaneSeq18 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 48))
ntcHWUnitIprgChassisIP110 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 49))
ntcHWUnitIprgChassisIP330 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 50))
ntcHWUnitIprgChassisIP440 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 51))
ntcHWUnitIprgChassisIP530 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 52))
ntcHWUnitIprgChassisIP650 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 53))
ntcHWUnitIprgChassisIP730 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 54))
ntcHWUnitIprgChassisSeq9 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 55))
ntcHWUnitIprgChassisSeq18 = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 56))
ntcHWUnitIpsoHardDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 94, 1, 16, 7, 3, 60))
mibBuilder.exportSymbols("NOKIA-UNITTYPES-MIB", ntcHWUnitBbanAlbaStm1E=ntcHWUnitBbanAlbaStm1E, ntcHWUnitBbanSliuE1I75=ntcHWUnitBbanSliuE1I75, ntcHWUnitIpsoHardDisk=ntcHWUnitIpsoHardDisk, ntcHWUnitIprgBackplaneSeq9=ntcHWUnitIprgBackplaneSeq9, ntcHWUnitIprgSeqGplc2=ntcHWUnitIprgSeqGplc2, ntcHWUnitIprgBackplaneSeq18=ntcHWUnitIprgBackplaneSeq18, ntcHWUnitIprgEth2=ntcHWUnitIprgEth2, ntcHWSlot=ntcHWSlot, ntcHWUnitIprgTok=ntcHWUnitIprgTok, ntcHWUnitIprgV352=ntcHWUnitIprgV352, ntcHWUnitIprgFddi=ntcHWUnitIprgFddi, ntcHWUnitIprgBackplaneIP440=ntcHWUnitIprgBackplaneIP440, ntcHWUnitIprgX212=ntcHWUnitIprgX212, ntcHWUnitNcaStm1MultiModeOptical=ntcHWUnitNcaStm1MultiModeOptical, ntcHWUnitIprgEth1=ntcHWUnitIprgEth1, ntcHWUnitIprgChassisSeq18=ntcHWUnitIprgChassisSeq18, ntcHWUnitIpsoGigEth1=ntcHWUnitIpsoGigEth1, ntcHWUnitBbanSliuE1I120=ntcHWUnitBbanSliuE1I120, ntcHWUnitIprgBackplaneIP330=ntcHWUnitIprgBackplaneIP330, ntcHWUnitIprgBackplaneIP650=ntcHWUnitIprgBackplaneIP650, ntcHWUnitIanIpFwrdingUnit=ntcHWUnitIanIpFwrdingUnit, ntcHWUnitIpsoCryptoAccelerator=ntcHWUnitIpsoCryptoAccelerator, ntcHWUnitIprgEth4=ntcHWUnitIprgEth4, ntcHWUnitIprgChassisIP110=ntcHWUnitIprgChassisIP110, ntcHWUnitAny=ntcHWUnitAny, PYSNMP_MODULE_ID=ntcHWUnitTypeModule, ntcHWUnitBbanAlbaE3=ntcHWUnitBbanAlbaE3, ntcHWUnitIan4PortV35=ntcHWUnitIan4PortV35, ntcHWUnitBbanSliuAdslAdDmt=ntcHWUnitBbanSliuAdslAdDmt, ntcHWUnitIanASU=ntcHWUnitIanASU, ntcHWUnitBbanAlbaStm1Om=ntcHWUnitBbanAlbaStm1Om, ntcHWUnitIprgSeqGplc1=ntcHWUnitIprgSeqGplc1, ntcHWUnitNone=ntcHWUnitNone, ntcHWUnitIprgChassisIP330=ntcHWUnitIprgChassisIP330, ntcHWUnitIprgSeqCrp=ntcHWUnitIprgSeqCrp, ntcHWUnitIprgAtm=ntcHWUnitIprgAtm, ntcHWUnitBbanBackplane8=ntcHWUnitBbanBackplane8, ntcHWUnitIprgIsdn=ntcHWUnitIprgIsdn, ntcHWUnitBbanSliuAdslMiDmt=ntcHWUnitBbanSliuAdslMiDmt, ntcHWUnitIprgBackplaneIP530=ntcHWUnitIprgBackplaneIP530, ntcHWUnitIprgChassisIP440=ntcHWUnitIprgChassisIP440, ntcHWUnitIprgE1=ntcHWUnitIprgE1, ntcHWUnitIprgChassisIP530=ntcHWUnitIprgChassisIP530, ntcHWUnitIprgT1=ntcHWUnitIprgT1, ntcHWUnitIprgChassisSeq9=ntcHWUnitIprgChassisSeq9, ntcHWUnitBbanAlbaStm1Os=ntcHWUnitBbanAlbaStm1Os, ntcHWBackplane=ntcHWBackplane, ntcHWUnitIprgSeqWslc=ntcHWUnitIprgSeqWslc, ntcHWUnitIprgX211=ntcHWUnitIprgX211, ntcHWUnitIprgV351=ntcHWUnitIprgV351, ntcHWUnitIanNcaStm1Electrical=ntcHWUnitIanNcaStm1Electrical, ntcHWUnitIprgHssi=ntcHWUnitIprgHssi, ntcHWUnitIprgBackplaneIP110=ntcHWUnitIprgBackplaneIP110, ntcHWUnitIprgChassisIP730=ntcHWUnitIprgChassisIP730, ntcHWUnitBbanBackplane17=ntcHWUnitBbanBackplane17, ntcHWUnitTypeModule=ntcHWUnitTypeModule, ntcHWUnitNcaStm1SingleModeOptical=ntcHWUnitNcaStm1SingleModeOptical, ntcHWUnitIprgChassisIP650=ntcHWUnitIprgChassisIP650, ntcHWUnitIan4PortE1=ntcHWUnitIan4PortE1, ntcHWUnitIprgBackplaneIP730=ntcHWUnitIprgBackplaneIP730, ntcHWUnitIpsoSs7=ntcHWUnitIpsoSs7, ntcHWUnitIan4PortMsdsl=ntcHWUnitIan4PortMsdsl)
