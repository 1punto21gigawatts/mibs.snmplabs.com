#
# PySNMP MIB module CYCLADES-ACS-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYCLADES-ACS-INFO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:34:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
cyACSMgmt, = mibBuilder.importSymbols("CYCLADES-ACS-MIB", "cyACSMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, Integer32, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, ObjectIdentity, Bits, iso, TimeTicks, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "Integer32", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "ObjectIdentity", "Bits", "iso", "TimeTicks", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cyACSInfo = ModuleIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 3))
cyACSInfo.setRevisions(('2005-08-29 00:00', '2002-09-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cyACSInfo.setRevisionsDescriptions(('Changed the Contact-Info', 'First Draft',))
if mibBuilder.loadTexts: cyACSInfo.setLastUpdated('200508290000Z')
if mibBuilder.loadTexts: cyACSInfo.setOrganization('Cyclades Corporation')
if mibBuilder.loadTexts: cyACSInfo.setContactInfo('postal : Cyclades Corporation 3541 Gateway Boulevard Fremont, CA 94538, USA e-mail : Technical Support support@cyclades.com')
if mibBuilder.loadTexts: cyACSInfo.setDescription('This module defines objects of the ACS/TS information')
cyInfoSerialTable = MibTable((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1), )
if mibBuilder.loadTexts: cyInfoSerialTable.setStatus('current')
if mibBuilder.loadTexts: cyInfoSerialTable.setDescription('This is the information of the specific serial port')
cyisPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1), ).setIndexNames((0, "CYCLADES-ACS-INFO-MIB", "cyISPortNumber"))
if mibBuilder.loadTexts: cyisPortEntry.setStatus('current')
if mibBuilder.loadTexts: cyisPortEntry.setDescription('One particular serial port ')
cyISPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortNumber.setStatus('current')
if mibBuilder.loadTexts: cyISPortNumber.setDescription('number to identifier the serial port.')
cyISPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortTty.setStatus('current')
if mibBuilder.loadTexts: cyISPortTty.setDescription('The device name for the serial port.')
cyISPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortName.setStatus('current')
if mibBuilder.loadTexts: cyISPortName.setDescription('Alias name given to the server connected to the serial port.')
cyISPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortSpeed.setStatus('current')
if mibBuilder.loadTexts: cyISPortSpeed.setDescription('The speed for serial port.')
cyISPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortTxBytes.setStatus('current')
if mibBuilder.loadTexts: cyISPortTxBytes.setDescription('The number of transmited bytes by the serial port.')
cyISPortRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortRXBytes.setStatus('current')
if mibBuilder.loadTexts: cyISPortRXBytes.setDescription('The number of received bytes by the serial port.')
cyISPortErrFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortErrFrame.setStatus('current')
if mibBuilder.loadTexts: cyISPortErrFrame.setDescription('The number of frame error.')
cyISPortErrParity = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortErrParity.setStatus('current')
if mibBuilder.loadTexts: cyISPortErrParity.setDescription('The number of parity error.')
cyISPortErrBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortErrBreaks.setStatus('current')
if mibBuilder.loadTexts: cyISPortErrBreaks.setDescription('The number of breaks error.')
cyISPortErrOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortErrOverrun.setStatus('current')
if mibBuilder.loadTexts: cyISPortErrOverrun.setDescription('The number of overrun error.')
cyISPortSigDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortSigDTR.setStatus('current')
if mibBuilder.loadTexts: cyISPortSigDTR.setDescription('The state of DTR signal.')
cyISPortSigCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortSigCD.setStatus('current')
if mibBuilder.loadTexts: cyISPortSigCD.setDescription('The state of DCD signal.')
cyISPortSigDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortSigDSR.setStatus('current')
if mibBuilder.loadTexts: cyISPortSigDSR.setDescription('The state of DSR signal.')
cyISPortSigRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortSigRTS.setStatus('current')
if mibBuilder.loadTexts: cyISPortSigRTS.setDescription('The state of RTS signal.')
cyISPortSigCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortSigCTS.setStatus('current')
if mibBuilder.loadTexts: cyISPortSigCTS.setDescription('The state of CTS signal.')
cyISPortSigRI = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyISPortSigRI.setStatus('current')
if mibBuilder.loadTexts: cyISPortSigRI.setDescription('The state of RI signal.')
mibBuilder.exportSymbols("CYCLADES-ACS-INFO-MIB", cyISPortSigDTR=cyISPortSigDTR, cyISPortSigRTS=cyISPortSigRTS, cyISPortErrBreaks=cyISPortErrBreaks, cyISPortSpeed=cyISPortSpeed, PYSNMP_MODULE_ID=cyACSInfo, cyInfoSerialTable=cyInfoSerialTable, cyISPortNumber=cyISPortNumber, cyISPortSigDSR=cyISPortSigDSR, cyISPortSigRI=cyISPortSigRI, cyISPortTxBytes=cyISPortTxBytes, cyISPortErrParity=cyISPortErrParity, cyISPortSigCTS=cyISPortSigCTS, cyisPortEntry=cyisPortEntry, cyISPortErrFrame=cyISPortErrFrame, cyISPortRXBytes=cyISPortRXBytes, cyISPortSigCD=cyISPortSigCD, cyACSInfo=cyACSInfo, cyISPortTty=cyISPortTty, cyISPortErrOverrun=cyISPortErrOverrun, cyISPortName=cyISPortName)
