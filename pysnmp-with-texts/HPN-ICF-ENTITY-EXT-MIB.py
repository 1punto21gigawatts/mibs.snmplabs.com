#
# PySNMP MIB module HPN-ICF-ENTITY-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-ENTITY-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
entPhysicalDescr, entPhysicalIndex, entPhysicalName = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalDescr", "entPhysicalIndex", "entPhysicalName")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Bits, Counter64, Gauge32, Counter32, ModuleIdentity, ObjectIdentity, TimeTicks, Unsigned32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Counter64", "Gauge32", "Counter32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Unsigned32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier")
DisplayString, TextualConvention, DateAndTime, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "MacAddress")
hpnicfEntityExtend = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6))
if mibBuilder.loadTexts: hpnicfEntityExtend.setLastUpdated('201111260000Z')
if mibBuilder.loadTexts: hpnicfEntityExtend.setOrganization('')
if mibBuilder.loadTexts: hpnicfEntityExtend.setContactInfo('')
if mibBuilder.loadTexts: hpnicfEntityExtend.setDescription('The private MIB file includes the general extent information of the device.')
class HpnicfAdminState(TextualConvention, Integer32):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = 'The administrative state for this object, and it is possible to set the state when needed. A value of locked means the resource is administratively prohibited from use. A value of shuttingDown means that usage is administratively limited to current instances of use. A value of unlocked means the resource is not administratively prohibited from use.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notSupported", 1), ("locked", 2), ("shuttingDown", 3), ("unlocked", 4))

class HpnicfOperState(TextualConvention, Integer32):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = ' Represents the possible values of operational states. A value of disabled means the resource is totally inoperable. A value of enabled means the resource is partially or fully operable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notSupported", 1), ("disabled", 2), ("enabled", 3), ("dangerous", 4))

class HpnicfAlarmStatus(TextualConvention, Bits):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = 'Represents the possible values of alarm status. When no bits of this attribute are set, then none of the status conditions described below are present. When the value of under repair is set, the resource is currently being repaired. When the value of critical is set, one or more critical alarms are active against the resource. When the value of major is set, one or more major alarms are active against the resource. When the value of minor is set, one or more minor alarms are active against the resource. When the value of warning is set, one or more warning alarms are active against the resource. When the value of indeterminate is set, one or more alarms of indeterminate severity are active against the resource. When the value of alarm outstanding is set, one or more alarms is active against the resource. The fault may or may not be disabling.'
    status = 'current'
    namedValues = NamedValues(("notSupported", 0), ("underRepair", 1), ("critical", 2), ("major", 3), ("minor", 4), ("alarmOutstanding", 5), ("warning", 6), ("indeterminate", 7))

class HpnicfStandbyStatus(TextualConvention, Integer32):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = ' Represents the possible values of standby status. A value of hotStandby means the resource is not providing service, but is will be immediately able to take over the role of the resource to be backed-up, without the need for initialization activity, and will contain the same information as the resource to be backed up. A value of coldStandy means that the resource is to back-up another resource, but will not be immediately able to take over the role of a resource to be backed up, and will require some initialization activity. A value of providingService means the resource is providing service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notSupported", 1), ("hotStandby", 2), ("coldStandby", 3), ("providingService", 4))

hpnicfEntityExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1))
hpnicfEntityExtState = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1))
hpnicfEntityExtStateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfEntityExtStateTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtStateTable.setDescription("This table contains one row per physical entity, There is always at least one row for an 'overall' physical entity. The information in each row may be not include all the object in this table, because of the entity need not some of the information here.")
hpnicfEntityExtStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"))
if mibBuilder.loadTexts: hpnicfEntityExtStateEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtStateEntry.setDescription('The information about a particular physical entity.')
hpnicfEntityExtPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEntityExtPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtPhysicalIndex.setDescription('The index of hpnicfEntityExtStateTable. This index is identical to entPhysicalIndex in ENTITY-MIB')
hpnicfEntityExtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 2), HpnicfAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtAdminStatus.setDescription('The administrative state for this object.')
hpnicfEntityExtOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 3), HpnicfOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtOperStatus.setDescription('The operate state for this object.')
hpnicfEntityExtStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 4), HpnicfStandbyStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtStandbyStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtStandbyStatus.setDescription('This object is used for monitoring standby status. Not all entities support this object.')
hpnicfEntityExtAlarmLight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 5), HpnicfAlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtAlarmLight.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtAlarmLight.setDescription('The alarm status for this entity. It does not include the severity of alarms raised on child components. In this condition, there will be a alarm light on the entity, the object should have the same status with it.')
hpnicfEntityExtCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsage.setDescription('The CPU usage for this entity. Generally, the overall CPU usage on the entity is calculated, independent of the number of CPUs on the entity.')
hpnicfEntityExtCpuUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageThreshold.setDescription('The threshold for the CPU usage. When the CPU usage exceeds the threshold, a notification will be sent.')
hpnicfEntityExtMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtMemUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemUsage.setDescription('The memory usage for the entity. This object indicates what percent of memory are used.')
hpnicfEntityExtMemUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThreshold.setDescription('The threshold for the Memory usage, When the memory usage exceeds the threshold, a notification will be sent.')
hpnicfEntityExtMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 10), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtMemSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemSize.setDescription('The size of memory for the entity. If the amount of memory exceeds 4,294,967,295 bytes, the value remains 4,294,967,295 bytes.')
hpnicfEntityExtUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 11), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtUpTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtUpTime.setDescription('The uptime for the entity. The meaning of uptime is when the entity is up, and the value of the object will add 1 seconds while the entity is running.')
hpnicfEntityExtTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtTemperature.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtTemperature.setDescription('The temperature for the entity.')
hpnicfEntityExtTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureThreshold.setDescription('The threshold for the temperature. When the temperature exceeds the threshold, a notification will be sent.')
hpnicfEntityExtVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtVoltage.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtVoltage.setDescription('The voltage for the entity.')
hpnicfEntityExtVoltageLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtVoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtVoltageLowThreshold.setDescription('The low-threshold for the voltage. When voltage is lower than low-threshold, a notification will be sent.')
hpnicfEntityExtVoltageHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtVoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtVoltageHighThreshold.setDescription('The high-threshold for the voltage. When voltage greater than high-threshold, a notification will be sent.')
hpnicfEntityExtCriticalTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtCriticalTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCriticalTemperatureThreshold.setDescription(' The threshold for the critical Temperature. When temperature exceeds the critical temperature, a notification will be sent.')
hpnicfEntityExtMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMacAddress.setDescription('MAC Address of the entity.')
hpnicfEntityExtErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 11, 21, 22, 23, 31, 32, 33, 41, 51, 61, 71, 81, 91))).clone(namedValues=NamedValues(("notSupported", 1), ("normal", 2), ("postFailure", 3), ("entityAbsent", 4), ("poeError", 11), ("stackError", 21), ("stackPortBlocked", 22), ("stackPortFailed", 23), ("sfpRecvError", 31), ("sfpSendError", 32), ("sfpBothError", 33), ("fanError", 41), ("psuError", 51), ("rpsError", 61), ("moduleFaulty", 71), ("sensorError", 81), ("hardwareFaulty", 91)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtErrorStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtErrorStatus.setDescription("Indicate the error state of this entity object. Now it only supports Port, general power supply, RPS power supply and board/Subcard. It may have one of these values. The following four values can be used for all kinds of entities. notSupported(1) means this entity cannot support this function. normal(2) means the statement of this entity is normal. for ports, it doesn't differentiate 10M/s, 100M/s, 1000M/s, duplex and half-duplex. For fan, power supply and board-Subcard, it means their states are normal. postFailure(3) means the entity fails to POST. entityAbsent(4) means the entity is absent now. The following values is depended on the entity . For Port entities, it may have the following values. If its POST is failure, then the value of the instance will be postFailure(3), otherwise the value will be normal(2). If enable power supply over Ethernet on this port is failure, the value of this instance will be poeError(11), otherwise it will be normal(2). For stack port, if it connects to another stack port normally, and these two units merge into one stack, then the value of this instance will be normal(2). If something wrong occurs and the unit cannot merge into stack, the value of this instance will be stackPortFailed(23). If the stack port forms resilient daisy chain with another stack port on the other unit, the value of this instance will be stackPortBlocked(22). For SFP ports, if it fail to receive, the value of this instance will be sfpRecvError(31), if it fail to send, the value is sfpSendError(32), if it fail to send and receive, the value is sfpBothError(33), otherwise it will be normal(2). fanError(41) means that the fan stops working. psuError(51) means that the Power Supply Unit is in the state of fault. rpsError(61) means the RPS is in the state of fault. moduleFaulty(71) means the Module is in the state of fault. sensorError(81) means the sensor is in the state of fault. hardwareFaulty(91) means the hardware of specified entity is in the state of fault. NMS must be compatible with the states which may be added in the future.")
hpnicfEntityExtCpuMaxUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtCpuMaxUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuMaxUsage.setDescription('The maximal CPU usage for the entity in the period of time.')
hpnicfEntityExtLowerTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtLowerTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtLowerTemperatureThreshold.setDescription('The threshold for the lower Temperature. When temperature runs under the threshold, a notification will be sent.')
hpnicfEntityExtShutdownTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtShutdownTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtShutdownTemperatureThreshold.setDescription('The threshold for the shutdown Temperature. When temperature exceeds the threshold, a notification will be sent and the entity will be shutdown.')
hpnicfEntityExtPhyMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtPhyMemSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtPhyMemSize.setDescription('The memory size of entity. This is the physical attribute of entity.')
hpnicfEntityExtPhyCpuFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtPhyCpuFrequency.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtPhyCpuFrequency.setDescription('The CPU frequency of entity. Unit of measure is MHZ.')
hpnicfEntityExtFirstUsedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 25), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtFirstUsedDate.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtFirstUsedDate.setDescription('The first used date of the entity.')
hpnicfEntityExtCpuAvgUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtCpuAvgUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuAvgUsage.setDescription('The average CPU usage for the entity in a period of time.')
hpnicfEntityExtMemAvgUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtMemAvgUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemAvgUsage.setDescription('The average memory usage for the entity in a period of time.')
hpnicfEntityExtMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtMemType.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemType.setDescription('The memory type of entity.')
hpnicfEntityExtCriticalLowerTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtCriticalLowerTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCriticalLowerTemperatureThreshold.setDescription('The threshold for the critical Temperature. When temperature exceeds the critical lower temperature, a notification will be sent.')
hpnicfEntityExtShutdownLowerTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtShutdownLowerTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtShutdownLowerTemperatureThreshold.setDescription('The threshold for the shutdown Temperature. When temperature exceeds the lower threshold, a notification will be sent and the entity will be shutdown.')
hpnicfEntityExtCpuUsageRecoverThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageRecoverThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageRecoverThreshold.setDescription('The recover threshold for the CPU usage. When the CPU usage falls down to the threshold, a notification is sent. The hpnicfEntityExtCpuUsageRecoverThreshold must be less than or equal to the hpnicfEntityExtCpuUsageThreshold.')
hpnicfEntityExtMemSizeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 32), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtMemSizeRev.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemSizeRev.setDescription('Size of memory space for the entity. This node is used to replace hpnicfEntityExtMemSize.')
hpnicfEntityExtCpuUsageIn1Minute = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageIn1Minute.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageIn1Minute.setDescription('The CPU usage in last one minute for this entity. Generally, the overall CPU usage on the entity is calculated, independent of the number of CPUs on the entity.')
hpnicfEntityExtCpuUsageIn5Minutes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageIn5Minutes.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageIn5Minutes.setDescription('The CPU usage in last five minutes for this entity. Generally, the overall CPU usage on the entity is calculated, independent of the number of CPUs on the entity.')
hpnicfEntityExtManu = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 2))
hpnicfEntityExtManuTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfEntityExtManuTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtManuTable.setDescription('The table about device manufacture information.')
hpnicfEntityExtManuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtManuPhysicalIndex"))
if mibBuilder.loadTexts: hpnicfEntityExtManuEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtManuEntry.setDescription('The device manufacture information about a particular physical entity.')
hpnicfEntityExtManuPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEntityExtManuPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtManuPhysicalIndex.setDescription('The index of hpnicfEntityExtManuTable. This index is identical to entPhysicalIndex in ENTITY-MIB.')
hpnicfEntityExtManuSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtManuSerialNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtManuSerialNum.setDescription('Manufacture serial number. The manufacture serial number of the entity such as chassis, module, and so on. It is got from the device when manufacturing. For low level box-device, the manufacture serial number is the device-number of System Control Board(SCB for short), it is written into the SCB directly; for middle level or high level frame-device, the manufacture serial number is the device-numbers of SCB and Service Board, because the SCB, Service Board and chassis are separate to sale and the device-number of chassis cannot be written into board.')
hpnicfEntityExtManuBuildInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtManuBuildInfo.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtManuBuildInfo.setDescription('Device version information. The device version information of the entity such as chassis, module, and so on. It consists of software version information and hardware version information.')
hpnicfEntityExtManuBOM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtManuBOM.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtManuBOM.setDescription('Device BOM code. The device BOM code of the entity such as chassis, module, and so on. It is the component code of ERP system, which can be disassembled from device-number.')
hpnicfEntityExtMacAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtMacAddressCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMacAddressCount.setDescription('MAC address count. The count of MAC addresses of the entity, such as chassis, module, or port, and so on.')
hpnicfEntityExtPower = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 3))
hpnicfEntityExtPowerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 3, 1), )
if mibBuilder.loadTexts: hpnicfEntityExtPowerTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtPowerTable.setDescription('This table describes the power information of all the physical entity on the device, such as the fans, the subcards, the boards, etc.')
hpnicfEntityExtPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPowerPhysicalIndex"))
if mibBuilder.loadTexts: hpnicfEntityExtPowerEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtPowerEntry.setDescription('The entity power information about a particular physical entity.')
hpnicfEntityExtPowerPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEntityExtPowerPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtPowerPhysicalIndex.setDescription('The index of hpnicfEntityExtPowerTable. This index is identical to entPhysicalIndex in ENTITY-MIB.')
hpnicfEntityExtNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtNominalPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtNominalPower.setDescription('The nominal power of the entity expressed in milliWatts.')
hpnicfEntityExtCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEntityExtCurrentPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCurrentPower.setDescription('The measured usage power of the entity expressed in milliWatts.')
hpnicfEntityExtAveragePower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtAveragePower.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtAveragePower.setDescription('The average power consumed by the entity expressed in milliWatts. Writing a value of zero to this object resets its value to zero. Writing any other value to this object has no effect on its value and an error is returned.')
hpnicfEntityExtPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEntityExtPeakPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtPeakPower.setDescription('The peak power consumed by the entity expressed in milliWatts. Writing a value of zero to this object resets its value to zero. Writing any other value to this object has no effect on its value and an error is returned.')
hpnicfProcessObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 4))
hpnicfProcessTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 4, 1), )
if mibBuilder.loadTexts: hpnicfProcessTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfProcessTable.setDescription('The Table describes the information about a particular process, namely a task.')
hpnicfProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 4, 1, 1), ).setIndexNames((0, "HPN-ICF-ENTITY-EXT-MIB", "hpnicfProcessID"))
if mibBuilder.loadTexts: hpnicfProcessEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfProcessEntry.setDescription('The information about a particular process, namely a task.')
hpnicfProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProcessID.setStatus('current')
if mibBuilder.loadTexts: hpnicfProcessID.setDescription('This object indicates the identifier of process, namely task ID in system.')
hpnicfProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProcessName.setStatus('current')
if mibBuilder.loadTexts: hpnicfProcessName.setDescription('This object indicates the process name.')
hpnicfProcessUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProcessUtil5Min.setStatus('current')
if mibBuilder.loadTexts: hpnicfProcessUtil5Min.setDescription('This object provides a general idea of how busy a process caused the processor to be over a 5 minute period. The ratio is calculated by the overall CPU usage caused by the process.')
hpnicfEntityExtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2))
hpnicfEntityExtTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0))
hpnicfEntityExtTrapsInfor = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 1))
hpnicfEntityExtTemperatureThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 1)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperature"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureThresholdNotification.setDescription('The hpnicfEntityExtTemperatureThresholdNotification indicates the temperature exceeded the threshold. In this condition, user should check the status and the environment of the entity, sometimes it happens because of the failure of air-condition.')
hpnicfEntityExtVoltageLowThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 2)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltageLowThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtVoltageLowThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtVoltageLowThresholdNotification.setDescription('The hpnicfEntityExtVoltageLowThresholdNotification indicates the voltage is lower than the threshold. If the voltage is lower too much than the entity needs, the entity will halt.')
hpnicfEntityExtVoltageHighThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 3)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltageHighThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtVoltageHighThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtVoltageHighThresholdNotification.setDescription('The hpnicfEntityExtVoltageHighThresholdNotification indicates the voltage is higher than the threshold. If the voltage is higher too much than the entity needs, The entity may be damaged by the high voltage.')
hpnicfEntityExtCpuUsageThresholdNotfication = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 4)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageRecoverThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageThresholdNotfication.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageThresholdNotfication.setDescription('The hpnicfEntityExtCpuUsageThresholdNotfication indicates the entity is overloaded.')
hpnicfEntityExtMemUsageThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 5)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemSize"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThresholdNotification.setDescription('The hpnicfEntityExtMemUsageThresholdNotification indicates the entity is overloaded.')
hpnicfEntityExtOperEnabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 6)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtOperEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtOperEnabled.setDescription('The trap indicates the entity is operable at present.')
hpnicfEntityExtOperDisabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 7)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtOperDisabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtOperDisabled.setDescription('The trap indicates the entity is not operable at present.')
hpnicfEntityExtCriticalTemperatureThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 8)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperature"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCriticalTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtCriticalTemperatureThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCriticalTemperatureThresholdNotification.setDescription('The hpnicfEntityExtCriticalTemperatureThresholdNotification indicates the temperature exceeds the critical temperature. In this condition, user should check the status and the environment of the entity, sometimes it happens because of the failure of air-condition.')
hpnicfEntityExtSFPAlarmOn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 9)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtErrorStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtSFPAlarmOn.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtSFPAlarmOn.setDescription('The trap is generated when the SFP module fails or runs abnormally for some particular reason.')
hpnicfEntityExtSFPAlarmOff = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 10)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtErrorStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtSFPAlarmOff.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtSFPAlarmOff.setDescription('The trap is generated when the SFP module restores to normal status.')
hpnicfEntityExtSFPPhony = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 11)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtSFPPhony.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtSFPPhony.setDescription('This module is NOT sold by authorized manufacturer. The normal function of the device or assume the maintenance responsibility thereof will NOT be guaranteed. The trap is generated periodically after a phony module has been found.')
hpnicfEntityInsert = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 12)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtOperStatus"))
if mibBuilder.loadTexts: hpnicfEntityInsert.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityInsert.setDescription('The trap is generated when a removable entity inserting to device.')
hpnicfEntityRemove = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 13)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtOperStatus"))
if mibBuilder.loadTexts: hpnicfEntityRemove.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityRemove.setDescription('The trap is generated when a removable entity removing from device.')
hpnicfEntityExtForcedPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 14)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtForcedPowerOff.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtForcedPowerOff.setDescription('The trap indicates the entity is forced to power off.')
hpnicfEntityExtForcedPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 15)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtForcedPowerOn.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtForcedPowerOn.setDescription('The trap indicates the entity is forced to power on.')
hpnicfEntityExtFaultAlarmOn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 16)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtErrorStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtFaultAlarmOn.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtFaultAlarmOn.setDescription('The trap indicates a fault occurs on the specified entity.')
hpnicfEntityExtFaultAlarmOff = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 17)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtErrorStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtFaultAlarmOff.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtFaultAlarmOff.setDescription('The trap indicates a fault disappears on the specified entity.')
hpnicfEntityExtResourceLack = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 18)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hpnicfEntityExtResourceLack.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtResourceLack.setDescription('The trap indicates that a kind of resource is not enough on the specified entity.')
hpnicfEntityExtResourceEnough = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 19)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hpnicfEntityExtResourceEnough.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtResourceEnough.setDescription('The trap indicates that the entity recovers from the status of no enough resource.')
hpnicfEntityExtTemperatureLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 20)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperature"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtLowerTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"))
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureLower.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureLower.setDescription('The trap indicates the temperature of a specified entity is under the lower threshold. In this condition, user should check the status and the environment of the entity, sometimes it goes wrong for some reason.')
hpnicfEntityExtTemperatureTooUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 21)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperature"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtShutdownTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"))
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureTooUp.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureTooUp.setDescription('The trap indicates the temperature of a specified entity exceeded the shutdown threshold. In this condition, user should check the status and the environment of the entity, sometimes it goes wrong for some reason.')
hpnicfEntityExtTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 22)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperature"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtLowerTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"))
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureNormal.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureNormal.setDescription('The trap indicates the temperature of a specified entity recover from abnormal status.')
hpnicfEntityExternalAlarmOccur = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 23)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hpnicfEntityExternalAlarmOccur.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExternalAlarmOccur.setDescription('The trap is generated when the monitored device connected to the specified entity fails.')
hpnicfEntityExternalAlarmRecover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 24)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hpnicfEntityExternalAlarmRecover.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExternalAlarmRecover.setDescription('The trap is generated when the failed device connected to the specified entity returns to normal.')
hpnicfEntityExtCpuUsageThresholdRecover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 25)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageRecoverThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageThresholdRecover.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCpuUsageThresholdRecover.setDescription('The trap indicates the CPU usage descends the threshold.')
hpnicfEntityExtMemUsageThresholdRecover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 26)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemSize"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThresholdRecover.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThresholdRecover.setDescription('The trap indicates the memory usage descends the threshold.')
hpnicfEntityExtMemAllocatedFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 27)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTrapDescription"))
if mibBuilder.loadTexts: hpnicfEntityExtMemAllocatedFailed.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemAllocatedFailed.setDescription('The trap indicates the memory allocated failed.')
hpnicfEntityExtECCParityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 28)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtECCParityAlarmStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTrapDescription"))
if mibBuilder.loadTexts: hpnicfEntityExtECCParityAlarm.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtECCParityAlarm.setDescription('The trap indicates the ECC(Error Correction Code) parity error alarm.')
hpnicfEntityExtCritLowerTempThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 29)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperature"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCriticalLowerTemperatureThreshold"))
if mibBuilder.loadTexts: hpnicfEntityExtCritLowerTempThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCritLowerTempThresholdNotification.setDescription('The hpnicfEntityExtCritLowerTempThresholdNotification indicates the temperature is lower than the threshold. If the temperature is lower too much than the entity needs, the entity will halt.')
hpnicfEntityExtTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 30)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperature"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtShutdownLowerTemperatureThreshold"))
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureTooLow.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtTemperatureTooLow.setDescription('The hpnicfEntityExtTemperatureTooLow indicates the temperature is lower than the threshold. If the temperature is lower too much than the entity needs, the entity halts now.')
hpnicfEntityExtFanDirectionNotPreferred = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 31)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hpnicfEntityExtFanDirectionNotPreferred.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtFanDirectionNotPreferred.setDescription("This trap indicates the specified fan's direction does not accord with preferred. The two parameters indicate the entity index and physical name of fan.")
hpnicfEntityExtFanDirectionNotAccord = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 32)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hpnicfEntityExtFanDirectionNotAccord.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtFanDirectionNotAccord.setDescription('This trap indicates the direction of fans does not accord with each other. The two parameters indicate the parent entity of the fans.')
hpnicfEntityExtSFPInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 33)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtSFPInvalidInDays"))
if mibBuilder.loadTexts: hpnicfEntityExtSFPInvalid.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtSFPInvalid.setDescription('The transceiver module is not compatible with the interface card. The authorized manufacturer therefore shall NOT guarantee the normal function of the transceiver. The transceiver module will be invalidated in days. Please replace it with a compatible one as soon as possible. The trap is generated periodically after a phony transceiver module has been found.')
hpnicfEntityExtSFPInvalidNow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 34)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hpnicfEntityExtSFPInvalidNow.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtSFPInvalidNow.setDescription('This transceiver module is not compatible with the interface card. The authorized manufacturer therefore shall NOT guarantee the normal function of the transceiver. The trap is generated after a phony transceiver module has been found.')
hpnicfEntityExtMemUsageThresholdOverTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 35)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemSizeRev"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThresholdOverTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThresholdOverTrap.setDescription('This trap indicates that the memory usage of the entity is overloaded. This trap is used to replace hpnicfEntityExtMemUsageThresholdNotification.')
hpnicfEntityExtMemUsageThresholdRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 0, 36)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemSizeRev"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"))
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThresholdRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtMemUsageThresholdRecoverTrap.setDescription('This trap indicates that the memory usage decreased below the threshold. This trap is used to replace hpnicfEntityExtMemUsageThresholdRecover.')
hpnicfEntityExtTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEntityExtTrapDescription.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtTrapDescription.setDescription('The information of trap.')
hpnicfEntityExtECCParityAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("l1cache", 2), ("l2cache", 3), ("sdram", 4), ("mac", 5), ("tcam", 6), ("ingressbuffer", 7), ("egressbuffer", 8), ("lpm", 9), ("controlmemory", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEntityExtECCParityAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtECCParityAlarmStatus.setDescription('ECC parity error.')
hpnicfEntityExtSFPInvalidInDays = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEntityExtSFPInvalidInDays.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtSFPInvalidInDays.setDescription('The days when the transceiver module is still valid, but after those days, it will be invalidated.')
hpnicfEntityExtFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 2, 1, 4), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEntityExtFirstTrapTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtFirstTrapTime.setDescription('Represents the first trap time.')
hpnicfEntityExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 3))
hpnicfEntityExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 3, 1))
hpnicfEntityExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 3, 1, 1)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtGroup"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtNotificationGroup"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtManuGroup"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPowerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfEntityExtCompliance = hpnicfEntityExtCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtCompliance.setDescription('The compliance statement for systems supporting this MIB.')
hpnicfEntityExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 3, 2))
hpnicfEntityExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 3, 2, 1)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAdminStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtOperStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtStandbyStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAlarmLight"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemSize"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtUpTime"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperature"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltageLowThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltageHighThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCriticalTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMacAddress"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtErrorStatus"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuMaxUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtLowerTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtShutdownTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhyMemSize"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPhyCpuFrequency"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFirstUsedDate"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuAvgUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemAvgUsage"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemType"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCriticalLowerTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtShutdownLowerTemperatureThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageRecoverThreshold"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemSizeRev"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageIn1Minute"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageIn5Minutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfEntityExtGroup = hpnicfEntityExtGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtGroup.setDescription('Entity Extend group.')
hpnicfEntityExtNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 3, 2, 2)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperatureThresholdNotification"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltageLowThresholdNotification"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtVoltageHighThresholdNotification"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageThresholdNotfication"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThresholdNotification"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtOperEnabled"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtOperDisabled"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCriticalTemperatureThresholdNotification"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtSFPAlarmOn"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtSFPAlarmOff"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtSFPPhony"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityInsert"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityRemove"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtForcedPowerOff"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtForcedPowerOn"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFaultAlarmOn"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFaultAlarmOff"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtResourceLack"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtResourceEnough"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperatureLower"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperatureTooUp"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperatureNormal"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExternalAlarmOccur"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExternalAlarmRecover"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCpuUsageThresholdRecover"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThresholdRecover"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemAllocatedFailed"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtECCParityAlarm"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCritLowerTempThresholdNotification"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtTemperatureTooLow"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFanDirectionNotPreferred"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtFanDirectionNotAccord"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtSFPInvalid"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtSFPInvalidNow"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThresholdOverTrap"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMemUsageThresholdRecoverTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfEntityExtNotificationGroup = hpnicfEntityExtNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtNotificationGroup.setDescription('Entity Extend Notification group.')
hpnicfEntityExtManuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 3, 2, 3)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtManuPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtManuSerialNum"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtManuBuildInfo"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtManuBOM"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtMacAddressCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfEntityExtManuGroup = hpnicfEntityExtManuGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtManuGroup.setDescription('Standard Device Manufacture Information group.')
hpnicfEntityExtPowerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 6, 3, 2, 4)).setObjects(("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPowerPhysicalIndex"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtNominalPower"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtCurrentPower"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtAveragePower"), ("HPN-ICF-ENTITY-EXT-MIB", "hpnicfEntityExtPeakPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfEntityExtPowerGroup = hpnicfEntityExtPowerGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfEntityExtPowerGroup.setDescription('Standard Entity Power Information group.')
mibBuilder.exportSymbols("HPN-ICF-ENTITY-EXT-MIB", hpnicfEntityExtTemperatureTooLow=hpnicfEntityExtTemperatureTooLow, hpnicfEntityExtPowerPhysicalIndex=hpnicfEntityExtPowerPhysicalIndex, hpnicfEntityExtVoltageLowThresholdNotification=hpnicfEntityExtVoltageLowThresholdNotification, hpnicfEntityExtMemSize=hpnicfEntityExtMemSize, hpnicfEntityExtErrorStatus=hpnicfEntityExtErrorStatus, hpnicfEntityExtUpTime=hpnicfEntityExtUpTime, hpnicfProcessID=hpnicfProcessID, hpnicfEntityExtNominalPower=hpnicfEntityExtNominalPower, hpnicfEntityExtTemperatureTooUp=hpnicfEntityExtTemperatureTooUp, hpnicfEntityExtSFPPhony=hpnicfEntityExtSFPPhony, hpnicfEntityExtShutdownTemperatureThreshold=hpnicfEntityExtShutdownTemperatureThreshold, hpnicfEntityExtSFPInvalid=hpnicfEntityExtSFPInvalid, hpnicfEntityExtTemperatureThresholdNotification=hpnicfEntityExtTemperatureThresholdNotification, hpnicfEntityExtMacAddressCount=hpnicfEntityExtMacAddressCount, hpnicfProcessUtil5Min=hpnicfProcessUtil5Min, hpnicfEntityExtForcedPowerOff=hpnicfEntityExtForcedPowerOff, hpnicfEntityExternalAlarmRecover=hpnicfEntityExternalAlarmRecover, hpnicfEntityExtTemperature=hpnicfEntityExtTemperature, hpnicfEntityExtCurrentPower=hpnicfEntityExtCurrentPower, hpnicfEntityExtMemUsageThresholdNotification=hpnicfEntityExtMemUsageThresholdNotification, hpnicfEntityExtOperEnabled=hpnicfEntityExtOperEnabled, hpnicfEntityExtCriticalLowerTemperatureThreshold=hpnicfEntityExtCriticalLowerTemperatureThreshold, hpnicfEntityExtMemUsageThresholdOverTrap=hpnicfEntityExtMemUsageThresholdOverTrap, hpnicfEntityExtTemperatureNormal=hpnicfEntityExtTemperatureNormal, hpnicfEntityExtShutdownLowerTemperatureThreshold=hpnicfEntityExtShutdownLowerTemperatureThreshold, hpnicfEntityExtFirstTrapTime=hpnicfEntityExtFirstTrapTime, hpnicfEntityExtCpuUsageRecoverThreshold=hpnicfEntityExtCpuUsageRecoverThreshold, hpnicfEntityExtSFPAlarmOff=hpnicfEntityExtSFPAlarmOff, hpnicfEntityExtFanDirectionNotPreferred=hpnicfEntityExtFanDirectionNotPreferred, hpnicfEntityExtManuGroup=hpnicfEntityExtManuGroup, hpnicfEntityExtOperDisabled=hpnicfEntityExtOperDisabled, PYSNMP_MODULE_ID=hpnicfEntityExtend, hpnicfEntityExtMemUsageThreshold=hpnicfEntityExtMemUsageThreshold, hpnicfEntityExtObjects=hpnicfEntityExtObjects, hpnicfEntityExtLowerTemperatureThreshold=hpnicfEntityExtLowerTemperatureThreshold, hpnicfEntityExtManuBOM=hpnicfEntityExtManuBOM, hpnicfEntityExtManuEntry=hpnicfEntityExtManuEntry, hpnicfEntityExtStateTable=hpnicfEntityExtStateTable, hpnicfEntityExtCpuMaxUsage=hpnicfEntityExtCpuMaxUsage, hpnicfEntityExtForcedPowerOn=hpnicfEntityExtForcedPowerOn, hpnicfEntityExtCpuUsageThresholdRecover=hpnicfEntityExtCpuUsageThresholdRecover, hpnicfEntityExtSFPAlarmOn=hpnicfEntityExtSFPAlarmOn, hpnicfEntityExternalAlarmOccur=hpnicfEntityExternalAlarmOccur, hpnicfEntityExtStateEntry=hpnicfEntityExtStateEntry, hpnicfEntityExtMemUsageThresholdRecoverTrap=hpnicfEntityExtMemUsageThresholdRecoverTrap, hpnicfEntityExtNotificationGroup=hpnicfEntityExtNotificationGroup, hpnicfEntityExtTrapsPrefix=hpnicfEntityExtTrapsPrefix, hpnicfEntityExtCpuUsageThreshold=hpnicfEntityExtCpuUsageThreshold, hpnicfEntityExtECCParityAlarm=hpnicfEntityExtECCParityAlarm, hpnicfEntityExtStandbyStatus=hpnicfEntityExtStandbyStatus, hpnicfEntityExtManu=hpnicfEntityExtManu, hpnicfEntityExtFirstUsedDate=hpnicfEntityExtFirstUsedDate, hpnicfProcessTable=hpnicfProcessTable, hpnicfEntityExtFanDirectionNotAccord=hpnicfEntityExtFanDirectionNotAccord, hpnicfEntityExtTemperatureThreshold=hpnicfEntityExtTemperatureThreshold, hpnicfEntityExtPhyMemSize=hpnicfEntityExtPhyMemSize, HpnicfAdminState=HpnicfAdminState, hpnicfEntityExtTrapDescription=hpnicfEntityExtTrapDescription, hpnicfProcessName=hpnicfProcessName, hpnicfEntityExtAdminStatus=hpnicfEntityExtAdminStatus, hpnicfEntityExtPower=hpnicfEntityExtPower, hpnicfEntityExtECCParityAlarmStatus=hpnicfEntityExtECCParityAlarmStatus, hpnicfEntityExtManuBuildInfo=hpnicfEntityExtManuBuildInfo, hpnicfEntityExtCpuUsage=hpnicfEntityExtCpuUsage, hpnicfEntityExtResourceLack=hpnicfEntityExtResourceLack, hpnicfEntityExtConformance=hpnicfEntityExtConformance, hpnicfEntityExtPhysicalIndex=hpnicfEntityExtPhysicalIndex, hpnicfEntityExtCompliance=hpnicfEntityExtCompliance, hpnicfEntityExtPhyCpuFrequency=hpnicfEntityExtPhyCpuFrequency, hpnicfEntityExtMemSizeRev=hpnicfEntityExtMemSizeRev, hpnicfEntityExtSFPInvalidInDays=hpnicfEntityExtSFPInvalidInDays, hpnicfEntityExtPowerGroup=hpnicfEntityExtPowerGroup, hpnicfEntityExtCpuAvgUsage=hpnicfEntityExtCpuAvgUsage, hpnicfEntityExtFaultAlarmOn=hpnicfEntityExtFaultAlarmOn, hpnicfEntityInsert=hpnicfEntityInsert, hpnicfEntityExtTrapsInfor=hpnicfEntityExtTrapsInfor, hpnicfEntityExtCriticalTemperatureThreshold=hpnicfEntityExtCriticalTemperatureThreshold, hpnicfEntityExtCpuUsageIn5Minutes=hpnicfEntityExtCpuUsageIn5Minutes, HpnicfAlarmStatus=HpnicfAlarmStatus, hpnicfEntityExtFaultAlarmOff=hpnicfEntityExtFaultAlarmOff, hpnicfEntityExtMemAllocatedFailed=hpnicfEntityExtMemAllocatedFailed, hpnicfEntityExtMacAddress=hpnicfEntityExtMacAddress, hpnicfProcessObjects=hpnicfProcessObjects, hpnicfEntityExtMemType=hpnicfEntityExtMemType, hpnicfEntityExtCpuUsageIn1Minute=hpnicfEntityExtCpuUsageIn1Minute, hpnicfEntityExtCritLowerTempThresholdNotification=hpnicfEntityExtCritLowerTempThresholdNotification, hpnicfEntityExtManuSerialNum=hpnicfEntityExtManuSerialNum, hpnicfEntityRemove=hpnicfEntityRemove, hpnicfEntityExtVoltageLowThreshold=hpnicfEntityExtVoltageLowThreshold, hpnicfEntityExtSFPInvalidNow=hpnicfEntityExtSFPInvalidNow, hpnicfEntityExtVoltage=hpnicfEntityExtVoltage, hpnicfEntityExtMemUsage=hpnicfEntityExtMemUsage, hpnicfEntityExtPowerTable=hpnicfEntityExtPowerTable, HpnicfStandbyStatus=HpnicfStandbyStatus, hpnicfEntityExtVoltageHighThreshold=hpnicfEntityExtVoltageHighThreshold, hpnicfEntityExtend=hpnicfEntityExtend, hpnicfEntityExtPeakPower=hpnicfEntityExtPeakPower, hpnicfEntityExtState=hpnicfEntityExtState, hpnicfProcessEntry=hpnicfProcessEntry, hpnicfEntityExtMemUsageThresholdRecover=hpnicfEntityExtMemUsageThresholdRecover, hpnicfEntityExtGroups=hpnicfEntityExtGroups, hpnicfEntityExtVoltageHighThresholdNotification=hpnicfEntityExtVoltageHighThresholdNotification, hpnicfEntityExtCompliances=hpnicfEntityExtCompliances, hpnicfEntityExtGroup=hpnicfEntityExtGroup, hpnicfEntityExtCpuUsageThresholdNotfication=hpnicfEntityExtCpuUsageThresholdNotfication, HpnicfOperState=HpnicfOperState, hpnicfEntityExtOperStatus=hpnicfEntityExtOperStatus, hpnicfEntityExtManuPhysicalIndex=hpnicfEntityExtManuPhysicalIndex, hpnicfEntityExtAveragePower=hpnicfEntityExtAveragePower, hpnicfEntityExtTraps=hpnicfEntityExtTraps, hpnicfEntityExtResourceEnough=hpnicfEntityExtResourceEnough, hpnicfEntityExtMemAvgUsage=hpnicfEntityExtMemAvgUsage, hpnicfEntityExtPowerEntry=hpnicfEntityExtPowerEntry, hpnicfEntityExtTemperatureLower=hpnicfEntityExtTemperatureLower, hpnicfEntityExtManuTable=hpnicfEntityExtManuTable, hpnicfEntityExtCriticalTemperatureThresholdNotification=hpnicfEntityExtCriticalTemperatureThresholdNotification, hpnicfEntityExtAlarmLight=hpnicfEntityExtAlarmLight)
