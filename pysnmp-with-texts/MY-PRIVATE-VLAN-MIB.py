#
# PySNMP MIB module MY-PRIVATE-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-PRIVATE-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, Integer32, TimeTicks, Counter64, IpAddress, Gauge32, ObjectIdentity, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "Integer32", "TimeTicks", "Counter64", "IpAddress", "Gauge32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "iso")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
myPrivateVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44))
myPrivateVlanMIB.setRevisions(('2009-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: myPrivateVlanMIB.setRevisionsDescriptions((' The Initial version of this MIB module.',))
if mibBuilder.loadTexts: myPrivateVlanMIB.setLastUpdated('200903230000Z')
if mibBuilder.loadTexts: myPrivateVlanMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: myPrivateVlanMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: myPrivateVlanMIB.setDescription('The MIB module to support Private VLAN feature on switching devices.')
class PrivateVlanType(TextualConvention, Integer32):
    description = "The VLAN type as defined for Private VLAN feature. 'normal' -- this VLAN is a normal VLAN (i.e., not a private VLAN or private group). 'primary' -- this VLAN is the primary VLAN as defined for Private VLAN feature. 'isolated' -- this VLAN is the isolated VLAN as defined for Private VLAN feature. All the ports in the isolated VLAN can only talk to the specifically designated ports configured as promiscuous ports, i.e., the ports even in the same isolated VLAN can not talk to each other. 'community' -- this VLAN is the community VLAN as defined for Private VLAN feature. All the ports in this community VLAN can behave like ports in normal VLAN type except that they can also receive egress packets tagged with its associated primary VLAN ID. A VLAN of isolated(3), community(4) type is also called a secondary VLAN."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("normal", 1), ("primary", 2), ("isolated", 3), ("community", 4))

class VlanIndexOrZero(TextualConvention, Integer32):
    description = 'The VLAN ID or zero as defined for Private VLAN feature. If the value is between 1 and 4095 inclusive, it represents an IEEE 802.1Q VLAN-ID. If the value is zero, it is object-specific and must therefore be defined as part of the description of any object which uses this syntax.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class VlanIndexBitmap(TextualConvention, OctetString):
    description = "A string of octets containing one bit per VLAN for a total of 1024 VLANs in the management domain. The most significant bit of the octet string is the lowest value VLAN of 1024 VLANs. Refer to the description on the MIB object that uses this textual convention to determine the meaning of bits that are set ('1') or cleared ('0'). The most significant bit of the bitmap is transmitted first. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

mypvlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1))
mypvlanVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 1))
mypvlanPortObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2))
mypvlanSVIObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 3))
mypvlanVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 1, 1), )
if mibBuilder.loadTexts: mypvlanVlanTable.setStatus('current')
if mibBuilder.loadTexts: mypvlanVlanTable.setDescription('A table containing Private VLAN information on the VLANs which currently exist.')
mypvlanVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 1, 1, 1), ).setIndexNames((0, "MY-PRIVATE-VLAN-MIB", "mypvlanVlanIndex"))
if mibBuilder.loadTexts: mypvlanVlanEntry.setStatus('current')
if mibBuilder.loadTexts: mypvlanVlanEntry.setDescription('A conceptual row containing the Private VLAN information on the VLANs for a particular management domain.')
mypvlanVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 1, 1, 1, 1), VlanIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mypvlanVlanIndex.setStatus('current')
if mibBuilder.loadTexts: mypvlanVlanIndex.setDescription('Indicated the VLAN id.')
mypvlanVlanPrivateVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 1, 1, 1, 2), PrivateVlanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mypvlanVlanPrivateVlanType.setStatus('current')
if mibBuilder.loadTexts: mypvlanVlanPrivateVlanType.setDescription('Indicated the VLAN type as defined for Private VLAN feature.')
mypvlanVlanAssociatedPrimaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 1, 1, 1, 3), VlanIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mypvlanVlanAssociatedPrimaryVlan.setStatus('current')
if mibBuilder.loadTexts: mypvlanVlanAssociatedPrimaryVlan.setDescription("The VLAN ID of The associated primary VLAN used for the Private VLAN feature if pvlanVlanPrivateVlanType has the value of isolated(3), community(4). If pvlanVlanPrivateVlanType has the value of normal(1) or primary(2), then this object has the value of 0. The value should be 0 when configuring 'private-vlan type'. When configuring 'private-vlan association',the value of 0 means deleting the association, otherwise means configure association on this primary vlan.")
mypvlanIfAssociatedPrimaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 1, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mypvlanIfAssociatedPrimaryVlan.setStatus('current')
if mibBuilder.loadTexts: mypvlanIfAssociatedPrimaryVlan.setDescription("It indicate if the vlan assiociate with primary vlan when get the mib, and indicate if setting the assiociate with primary vlan when set the mib, 0 means configure 'private-vlan type', not 0 means configure 'private-vlan association'.")
mypvlanPrivatePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 1), )
if mibBuilder.loadTexts: mypvlanPrivatePortTable.setStatus('current')
if mibBuilder.loadTexts: mypvlanPrivatePortTable.setDescription('A table containing information of the configuration of VLAN on the host ports of the device.')
mypvlanPrivatePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mypvlanPrivatePortEntry.setStatus('current')
if mibBuilder.loadTexts: mypvlanPrivatePortEntry.setDescription('A conceptual row containing information of the configuration of VLAN for each host port. When pvlanPrivatePortSecondaryVlan and pvlanPrivatePortPrimaryVlan are both zero, it means deleting the configuration on the port, when they are both nonzero, it means configuring the host port, otherwise are invalid input. This table is valid only for host port.')
mypvlanPrivatePortPrimaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 1, 1, 1), VlanIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanPrivatePortPrimaryVlan.setStatus('current')
if mibBuilder.loadTexts: mypvlanPrivatePortPrimaryVlan.setDescription('The VLAN ID of the primary VLAN configured on this private port. If mypvlanPrivatePortPrimaryVlan and mypvlanPrivatePortSecondaryVlan are both zero when set the mib, it means delete the private-vlan configuration on the host port.')
mypvlanPrivatePortSecondaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 1, 1, 2), VlanIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanPrivatePortSecondaryVlan.setStatus('current')
if mibBuilder.loadTexts: mypvlanPrivatePortSecondaryVlan.setDescription('The VLAN ID of the secondary VLAN configured on this private port.If mypvlanPrivatePortPrimaryVlan and mypvlanPrivatePortSecondaryVlan are both zero when set the mib, it means delete the private-vlan configuration on the host port.')
mypvlanPromPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 2), )
if mibBuilder.loadTexts: mypvlanPromPortTable.setStatus('current')
if mibBuilder.loadTexts: mypvlanPromPortTable.setDescription('A table containing information of secondary VLAN to primary VLAN remapping on ports of the device.')
mypvlanPromPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mypvlanPromPortEntry.setStatus('current')
if mibBuilder.loadTexts: mypvlanPromPortEntry.setDescription('A conceptual row containing information of secondary VLAN to primary VLAN remapping for each port. An entry is created by the managed system for each interface which can be configured as a promiscuous port for Private VLAN feature.This table is valid only for promiscuous port.')
mypvlanPrivatePortPrimaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 2, 1, 1), VlanIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanPrivatePortPrimaryVlanId.setStatus('current')
if mibBuilder.loadTexts: mypvlanPrivatePortPrimaryVlanId.setDescription('Primary Vlan Id configured on the promiscuous port, it is zero when delete the remapping on the port.')
mypvlanPromPortSecondaryRemap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanPromPortSecondaryRemap.setStatus('current')
if mibBuilder.loadTexts: mypvlanPromPortSecondaryRemap.setDescription("A string of octets containing one bit per VLAN in the management domain on this port. The first octet corresponds to VLANs with VlanIndexOrZero values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndexOrZero in that octet. A bit can only be set to '1' when the bit is corresponding to a VLAN of Private VLAN isolated, community type which has already been associated with a primary VLAN. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs.")
mypvlanPromPortSecondaryRemap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanPromPortSecondaryRemap2k.setStatus('current')
if mibBuilder.loadTexts: mypvlanPromPortSecondaryRemap2k.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndexOrZero values of 1024 through 2047 in the management domain on this port. The first octet corresponds to VLANs with VlanIndexOrZero values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndexOrZero in that octet. A bit can only be set to '1' when the bit is corresponding to a VLAN of Private VLAN isolated or community type which has already been associated with a primary VLAN. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs. This object is only instantiated on devices which support the range of VlanIndexOrZero up to 4095.")
mypvlanPromPortSecondaryRemap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanPromPortSecondaryRemap3k.setStatus('current')
if mibBuilder.loadTexts: mypvlanPromPortSecondaryRemap3k.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndexOrZero values of 2048 through 3071 in the management domain on this port. The first octet corresponds to VLANs with VlanIndexOrZero values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndexOrZero in that octet. A bit can only be set to '1' when the bit is corresponding to a VLAN of Private VLAN isolated or community type which has already been associated with a primary VLAN. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs. This object is only instantiated on devices which support the range of VlanIndexOrZero up to 4095.")
mypvlanPromPortSecondaryRemap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanPromPortSecondaryRemap4k.setStatus('current')
if mibBuilder.loadTexts: mypvlanPromPortSecondaryRemap4k.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndexOrZero values of 3072 through 4095 in the management domain on this port. The first octet corresponds to VLANs with VlanIndexOrZero values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndexOrZero in that octet. A bit can only be set to '1' when the bit is corresponding to a VLAN of Private VLAN isolated or community type which has already been associated with a primary VLAN. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs. This object is only instantiated on devices which support the range of VlanIndexOrZero up to 4095.")
mypvlanPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 3), )
if mibBuilder.loadTexts: mypvlanPortModeTable.setStatus('current')
if mibBuilder.loadTexts: mypvlanPortModeTable.setDescription('A table containing information of the configuration of port mode for the Private VLAN feature.')
mypvlanPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mypvlanPortModeEntry.setStatus('current')
if mibBuilder.loadTexts: mypvlanPortModeEntry.setDescription('A conceptual row containing information of the configuration of port mode on each port for the Private VLAN feature. An entry of this table is created by the managed system when the capability to be a Private VLAN port is detected on an interface.')
mypvlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonPrivateVlan", 1), ("host", 2), ("promiscuous", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanPortMode.setStatus('current')
if mibBuilder.loadTexts: mypvlanPortMode.setDescription('The Private VLAN port mode on this port. nonPrivateVlan(1) -- this port is configured to be a non-Private-VLAN port. host(2) -- this port is configured to be a Private-VLAN host port, i.e., private port. promiscuous(3) -- this port is configured to be a Private-VLAN promiscuous port.')
mypvlanSVIMappingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 3, 1), )
if mibBuilder.loadTexts: mypvlanSVIMappingTable.setStatus('current')
if mibBuilder.loadTexts: mypvlanSVIMappingTable.setDescription('A table containing the configuration of primary VLAN SVI (Switch Virtual Interfaces) mapping for the secondary VLANs for the Private VLAN feature.')
mypvlanSVIMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 3, 1, 1), ).setIndexNames((0, "MY-PRIVATE-VLAN-MIB", "mypvlanSVIMappingVlanIndex"))
if mibBuilder.loadTexts: mypvlanSVIMappingEntry.setStatus('current')
if mibBuilder.loadTexts: mypvlanSVIMappingEntry.setDescription("A conceptual row containing the Primary VLAN SVI mapping configuration for the existing secondary VLANs. An entry is created by the managed system for each VLAN with corresponding VLAN's pvlanVlanPrivateVlanType of isolated(3), community(4).")
mypvlanSVIMappingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 3, 1, 1, 1), VlanIndexOrZero())
if mibBuilder.loadTexts: mypvlanSVIMappingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: mypvlanSVIMappingVlanIndex.setDescription('An index value that uniquely identifies the Virtual LAN associated with this information.')
mypvlanSVIMappingPrimarySVI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 1, 3, 1, 1, 2), VlanIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mypvlanSVIMappingPrimarySVI.setStatus('current')
if mibBuilder.loadTexts: mypvlanSVIMappingPrimarySVI.setDescription('The Vlan ID of the primary VLAN SVI this secondary VLAN is mapped to for the Private VLAN feature. This object has the value of zero if this secondary VLAN is not mapped to any primary VLAN SVI.')
mypvlanMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2))
mypvlanMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2, 1))
mypvlanMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2, 2))
mypvlanMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2, 1, 1)).setObjects(("MY-PRIVATE-VLAN-MIB", "mypvlanVlanGroup"), ("MY-PRIVATE-VLAN-MIB", "mypvlanPrivatePortGroup"), ("MY-PRIVATE-VLAN-MIB", "mypvlanPromPortGroup"), ("MY-PRIVATE-VLAN-MIB", "mypvlanPortModeGroup"), ("MY-PRIVATE-VLAN-MIB", "mypvlanSVIGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mypvlanMIBCompliance = mypvlanMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mypvlanMIBCompliance.setDescription('The compliance statement for Private VLAN feature implementation.')
mypvlanVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2, 2, 1)).setObjects(("MY-PRIVATE-VLAN-MIB", "mypvlanVlanIndex"), ("MY-PRIVATE-VLAN-MIB", "mypvlanVlanPrivateVlanType"), ("MY-PRIVATE-VLAN-MIB", "mypvlanVlanAssociatedPrimaryVlan"), ("MY-PRIVATE-VLAN-MIB", "mypvlanIfAssociatedPrimaryVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mypvlanVlanGroup = mypvlanVlanGroup.setStatus('current')
if mibBuilder.loadTexts: mypvlanVlanGroup.setDescription('A collection of objects providing basic VLAN configuration for Private VLAN feature.')
mypvlanPrivatePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2, 2, 2)).setObjects(("MY-PRIVATE-VLAN-MIB", "mypvlanPrivatePortPrimaryVlan"), ("MY-PRIVATE-VLAN-MIB", "mypvlanPrivatePortSecondaryVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mypvlanPrivatePortGroup = mypvlanPrivatePortGroup.setStatus('current')
if mibBuilder.loadTexts: mypvlanPrivatePortGroup.setDescription('A collection of objects providing basic private port configuration for Private VLAN feature.')
mypvlanPromPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2, 2, 3)).setObjects(("MY-PRIVATE-VLAN-MIB", "mypvlanPrivatePortPrimaryVlan"), ("MY-PRIVATE-VLAN-MIB", "mypvlanPromPortSecondaryRemap"), ("MY-PRIVATE-VLAN-MIB", "mypvlanPromPortSecondaryRemap2k"), ("MY-PRIVATE-VLAN-MIB", "mypvlanPromPortSecondaryRemap3k"), ("MY-PRIVATE-VLAN-MIB", "mypvlanPromPortSecondaryRemap4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mypvlanPromPortGroup = mypvlanPromPortGroup.setStatus('current')
if mibBuilder.loadTexts: mypvlanPromPortGroup.setDescription('A collection of objects providing basic promiscuous port configuration for Private VLAN feature.')
mypvlanPortModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2, 2, 4)).setObjects(("MY-PRIVATE-VLAN-MIB", "mypvlanPortMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mypvlanPortModeGroup = mypvlanPortModeGroup.setStatus('current')
if mibBuilder.loadTexts: mypvlanPortModeGroup.setDescription('A collection of objects providing basic port mode configuration for Private VLAN feature.')
mypvlanSVIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 44, 2, 2, 5)).setObjects(("MY-PRIVATE-VLAN-MIB", "mypvlanSVIMappingPrimarySVI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mypvlanSVIGroup = mypvlanSVIGroup.setStatus('current')
if mibBuilder.loadTexts: mypvlanSVIGroup.setDescription('A collection of objects providing svi mapping configuration for Private VLAN feature.')
mibBuilder.exportSymbols("MY-PRIVATE-VLAN-MIB", mypvlanPromPortEntry=mypvlanPromPortEntry, mypvlanVlanTable=mypvlanVlanTable, mypvlanVlanGroup=mypvlanVlanGroup, VlanIndexBitmap=VlanIndexBitmap, mypvlanPromPortSecondaryRemap3k=mypvlanPromPortSecondaryRemap3k, mypvlanSVIMappingVlanIndex=mypvlanSVIMappingVlanIndex, mypvlanMIBConformance=mypvlanMIBConformance, VlanIndexOrZero=VlanIndexOrZero, mypvlanMIBCompliances=mypvlanMIBCompliances, myPrivateVlanMIB=myPrivateVlanMIB, mypvlanPromPortSecondaryRemap2k=mypvlanPromPortSecondaryRemap2k, mypvlanVlanEntry=mypvlanVlanEntry, mypvlanPrivatePortPrimaryVlan=mypvlanPrivatePortPrimaryVlan, mypvlanSVIMappingTable=mypvlanSVIMappingTable, mypvlanVlanObjects=mypvlanVlanObjects, mypvlanPromPortSecondaryRemap4k=mypvlanPromPortSecondaryRemap4k, mypvlanVlanIndex=mypvlanVlanIndex, mypvlanVlanPrivateVlanType=mypvlanVlanPrivateVlanType, mypvlanPrivatePortEntry=mypvlanPrivatePortEntry, mypvlanPrivatePortGroup=mypvlanPrivatePortGroup, mypvlanSVIMappingPrimarySVI=mypvlanSVIMappingPrimarySVI, mypvlanPrivatePortPrimaryVlanId=mypvlanPrivatePortPrimaryVlanId, mypvlanPrivatePortSecondaryVlan=mypvlanPrivatePortSecondaryVlan, mypvlanPromPortTable=mypvlanPromPortTable, mypvlanMIBGroups=mypvlanMIBGroups, mypvlanPromPortGroup=mypvlanPromPortGroup, mypvlanIfAssociatedPrimaryVlan=mypvlanIfAssociatedPrimaryVlan, mypvlanPortModeGroup=mypvlanPortModeGroup, mypvlanPromPortSecondaryRemap=mypvlanPromPortSecondaryRemap, mypvlanSVIMappingEntry=mypvlanSVIMappingEntry, mypvlanMIBCompliance=mypvlanMIBCompliance, mypvlanPortObjects=mypvlanPortObjects, mypvlanPrivatePortTable=mypvlanPrivatePortTable, mypvlanSVIGroup=mypvlanSVIGroup, mypvlanPortMode=mypvlanPortMode, PrivateVlanType=PrivateVlanType, PYSNMP_MODULE_ID=myPrivateVlanMIB, mypvlanSVIObjects=mypvlanSVIObjects, mypvlanPortModeTable=mypvlanPortModeTable, mypvlanVlanAssociatedPrimaryVlan=mypvlanVlanAssociatedPrimaryVlan, mypvlanMIBObjects=mypvlanMIBObjects, mypvlanPortModeEntry=mypvlanPortModeEntry)
