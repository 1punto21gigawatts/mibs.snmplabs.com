#
# PySNMP MIB module DLGR4DEV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLGR4DEV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:47:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
dlgR4Resources, = mibBuilder.importSymbols("DLGC-GLOBAL-REG", "dlgR4Resources")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, iso, TimeTicks, NotificationType, ModuleIdentity, MibIdentifier, Counter64, ObjectIdentity, Unsigned32, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "iso", "TimeTicks", "NotificationType", "ModuleIdentity", "MibIdentifier", "Counter64", "ObjectIdentity", "Unsigned32", "IpAddress", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dlgR4ResObj = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1))
dlgR4MibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 1))
dlgR4DeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2))
dlgR4SrlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3))
dlgR4MibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4MibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4MibRevMajor.setDescription('The Major Revision level. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
dlgR4MibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4MibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4MibRevMinor.setDescription('The Minor Revision level. A change in the minor revision level may represent some minor additional support. no changes to any pre-existing information has occurred.')
dlgR4DeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: dlgR4DeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceTable.setDescription('Table of Attributes common to all Release 4 style port level devices. This covers devices like the Voice Channel, DTI Timeslot, ISDN line device, MSI station set device, etc.')
dlgR4DeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "DLGR4DEV-MIB", "dlgR4DeviceIndex"))
if mibBuilder.loadTexts: dlgR4DeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceEntry.setDescription('A description of the attributes common to all Release 4 style port level devices. This covers devices like the Voice Channel, DTI Timeslot, ISDN line device, MSI station set device, etc.')
dlgR4DeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceIndex.setDescription('A unique value for each Release 4 device contained by the host. The value for each Release 4 device must remain constant at least from one re-initialization of the agent to the next re-initialization.')
dlgR4DeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceName.setDescription('Release 4 Device Name. This is the name the application will use when opening the device (e.g. dxxxB1C1, dtiB1T1, msiB1C1)')
dlgR4DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("voice", 2), ("dti", 3), ("isdn", 4), ("msi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceType.setDescription('An indication of the type of the device. other(1) - some other type of device unknown to the agent. voice(2) - A voice channel device. An entry exits in the dlgR4VoiceTable for this device. dti(3) - A DTI timeslot device. An entry exits in the dlgR4DTITable for this device. isdn(4) - An ISDN B-Channel device. An entry exits in the dlgR4ISDNTable for this device. msi(5) - An MSI station set device. An entry exits in the dlgR4MSITable for this device. ')
dlgR4DeviceHiIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DeviceHiIdentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceHiIdentIndex.setDescription('Index into the Hardware information table for the board to which the Release 4 device is bound to. This can be used to determine the relationship between a release 4 device and the hardware platform on which the corresponding firmware implementing the resource is resident. For example, if this value is a 1, then performing a get of the table entry dlgHiIdentTable columnar objects with index 1 will retrieve the physical hardware identification information')
dlgR4DeviceOpenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DeviceOpenCount.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceOpenCount.setDescription('An indication of how many instances of this device is currently opened')
dlgR4DeviceXmitCTbusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DeviceXmitCTbusSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceXmitCTbusSlot.setDescription('An indication of which timeslot on the CTbus this device is currently transmitting on.')
dlgR4DeviceRcvrCTbusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DeviceRcvrCTbusSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DeviceRcvrCTbusSlot.setDescription('An indication of which timeslot on the CTbus this device is currently receiving from (listening to). A value of -1 indicates this information is not available')
dlgR4VoiceTable = MibTable((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: dlgR4VoiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4VoiceTable.setDescription("Table of Attributes for Release 4 voice channel devices. This tables 'augments' the R4DeviceTable by sharing a common index")
dlgR4VoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "DLGR4DEV-MIB", "dlgR4VoiceChannelIndex"))
if mibBuilder.loadTexts: dlgR4VoiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4VoiceEntry.setDescription('A description of the attributes for Release 4 voice channel devices.')
dlgR4VoiceChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4VoiceChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4VoiceChannelIndex.setDescription('A unique value for each Release 4 voice device contained by the host. This is the same as dlgR4DeviceIndex in the device table')
dlgR4VoiceChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16))).clone(namedValues=NamedValues(("idle", 1), ("playing", 2), ("recording", 3), ("dialing", 4), ("gettingDigits", 5), ("playTone", 6), ("sendingFax", 8), ("receivingFax", 9), ("betweenFAXPages", 10), ("hookState", 11), ("winking", 12), ("callProgess", 13), ("gettingR2MF", 14), ("blocked", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4VoiceChannelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4VoiceChannelStatus.setDescription('Indicates current activity status on the channel: idle(1) - Channel not active playing(2) - Playing Audio Data recording(3) - Recording Audio Data dialing(4) - Dialing Digits gettingDigits(5) - Collecting DTMF digits playTone(6) - Playing a tone sendingFax(8) - Sending a FAX (VFX boards) receivingFax(9) - Receiving a FAX (VFX boards) betweenFAXPages(10) - Between FAX pages (VFX boards) hookState(11) - Changing hook status to onhook or offhook winking(12) - Performing a wink callProgess(13) - Performing Call progress analysis gettingR2MF(14) - retrieving R2MF digits blocked(16) - Blocked')
dlgR4VoiceLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("onhook", 1), ("offhook", 2), ("lcDetected", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgR4VoiceLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4VoiceLineStatus.setDescription('Indicates current line status of the channel unknown(0) - indicates no analog frontend or status unknown onhook(1) - indicates channel is onhook. Setting the variable to this value will initiate putting the channel onhook offhook(2) - indicates channel is offhook. Setting the variable to this value initiates setting the channel offhook. lcDetected(3)- indicates loop current detected and the channel is offhook.')
dlgR4VoiceNumberOfDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4VoiceNumberOfDigits.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4VoiceNumberOfDigits.setDescription("Indicates number of uncollected digits in this channel's digit queue.")
dlgR4VoiceE2PROMFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4VoiceE2PROMFeatures.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4VoiceE2PROMFeatures.setDescription('Indicates some static features for this channel enabled in the E2PROM. This value is actually a bit mask as follows where a value of 1 indicates the feature is present: 0x0001 - Not used 0x0002 - Call Progress 0x0004 - MF Digit Detection/Generation 0x0008 - Not used 0x0010 - Not used 0x0020 - Dial Pulse Digit Detection 0x0040 - reserved bit 0x0080 - Echo Cancellation Resource ')
dlgR4DTITable = MibTable((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: dlgR4DTITable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DTITable.setDescription("Table of Attributes for Release 4 DTI timeslot devices. This tables 'augments' the R4DeviceTable by sharing a common index")
dlgR4DTIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "DLGR4DEV-MIB", "d"))
if mibBuilder.loadTexts: dlgR4DTIEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DTIEntry.setDescription('A description of the attributes for Release 4 DTI timeslot devices.')
dlgR4DTITimeslotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DTITimeslotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DTITimeslotIndex.setDescription('A unique value for each Release 4 DTI device contained by the host. This is the same as dlgR4DeviceIndex in the device table')
dlgR4DTIProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DTIProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DTIProtocol.setDescription('Indicates active protocol on this timeslot T-1 - indicates T1 protocol E-1 - indicates E1 protocol')
dlgR4DTITimeslotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("dialing", 1), ("winking", 2), ("waitingForCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DTITimeslotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DTITimeslotStatus.setDescription('Indicates current activity status on the timeslot idle(0) - no DTI multitasking function active dialing(1) - Dialing digits using dt_dial() function. winking(2) - performing a wink using dt_xmitwink() function. waitingForCall(3) - waiting for a call using dt_mtfcn(..,DEMT_WTCALL ..)')
dlgR4DTIRcvSigBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4DTIRcvSigBits.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DTIRcvSigBits.setDescription('Indicates current state of the Receive signaling bits Bit 0 (0x01) - A Receive signaling bit Bit 1 (0x02) - B Receive signaling bit Bit 2 (0x04) - C Receive signaling bit Bit 3 (0x08) - D Receive signaling bit ')
dlgR4DTIXmitSigBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgR4DTIXmitSigBits.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4DTIXmitSigBits.setDescription("Indicates current state of the Transmit signaling bits Bit 0 (0x01) - A Transmit signaling bit Bit 1 (0x02) - B Transmit signaling bit Bit 2 (0x04) - C Transmit signaling bit Bit 3 (0x08) - D Transmit signaling bit This variable may also be written to using the following bit mask values (multiple values may be OR'ed together). In order to leave a bit unaffected don't specify either the ON or OFF value 0x10 - Turn A Transmit signaling bit off 0x11 - turn A Transmit signaling bit on 0x20 - Turn B Transmit signaling bit off 0x22 - turn B Transmit signaling bit on 0x40 - Turn C Transmit signaling bit off 0x44 - turn C Transmit signaling bit on 0x80 - Turn D Transmit signaling bit off 0x88 - turn D Transmit signaling bit on As an example to turn the A bit off and the B bit on at the same time 'OR' 0x10 with 0x22 to get 0x32. This will turn A off and B on")
dlgR4ISDNTable = MibTable((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 4), )
if mibBuilder.loadTexts: dlgR4ISDNTable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4ISDNTable.setDescription("Table of Attributes for Release 4 ISDN B-channel devices. This tables 'augments' the R4DeviceTable by sharing a common index")
dlgR4ISDNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 4, 1), ).setIndexNames((0, "DLGR4DEV-MIB", "dlgR4ISDNBChannelIndex"))
if mibBuilder.loadTexts: dlgR4ISDNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4ISDNEntry.setDescription('A description of the attributes for Release 4 ISDN B-channel devices')
dlgR4ISDNBChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4ISDNBChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4ISDNBChannelIndex.setDescription('A unique value for each Release 4 ISDN device contained by the host. This is the same as dlgR4DeviceIndex in the device table')
dlgR4ISDNProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgR4ISDNProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4ISDNProtocol.setDescription('Indicates active protocol on this timeslot')
dlgR4ISDNBChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inService", 0), ("maintenance", 1), ("outOfService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgR4ISDNBChannelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4ISDNBChannelStatus.setDescription('Indicates current B Channel status: inService(0) - B Channel is in service maintenance(1) - B Channel is in maintenance mode outOfService(2) - B Channel is out of service This variable may also be written to. Writing to this variable will fail if the board is not connected to the Central Office.')
dlgR4MSITable = MibTable((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 5), )
if mibBuilder.loadTexts: dlgR4MSITable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4MSITable.setDescription("Table of Attributes for Release 4 MSI Station devices. This tables 'augments' the R4DeviceTable by sharing a common index")
dlgR4MSIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 5, 1), ).setIndexNames((0, "DLGR4DEV-MIB", "dlgR4MSIStationIndex"))
if mibBuilder.loadTexts: dlgR4MSIEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4MSIEntry.setDescription('A description of the attributes for Release 4 MSI Station devices.')
dlgR4MSIStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4MSIStationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4MSIStationIndex.setDescription('A unique value for each Release 4 MSI device contained by the host. This is the same as dlgR4DeviceIndex in the device table')
dlgR4MSIStationLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16))).clone(namedValues=NamedValues(("onhook", 0), ("offhook", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4MSIStationLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4MSIStationLineStatus.setDescription('Indicates current MSI Station line status onhook(0) - Station is onhook (agent not connected) offhook(16) - Station if offhook (agent connected)')
dlgR4SrlTable = MibTable((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: dlgR4SrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlTable.setDescription('A Table of attributes related to the Dialogic Standard Runtime Eventing library. This is the library used by many Dialogic based CT applications providing an interface for collecting events from the various CT technologies. Each active process which has the SRL loaded and which have enabled SRL statistics monitoring will have an entry in this table')
dlgR4SrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "DLGR4DEV-MIB", "dlgR4SrlIndex"))
if mibBuilder.loadTexts: dlgR4SrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlEntry.setDescription('A description of the attributes related to the Dialogic Standard Runtime Eventing library.')
dlgR4SrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlIndex.setDescription('Index into the table. Each process with a copy of the SRL DLL loaded will get a unique index')
dlgR4SrlApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlApplicationName.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlApplicationName.setDescription('Application or Process Name which the SRL DLL is attached')
dlgR4SrlNumberOfOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlNumberOfOpens.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlNumberOfOpens.setDescription('Total Number of times any Dialogic Release 4 device was opened by the application using the SRL. To calculate the number of currently opened devices subtract the dlgR4SrlNumberOfCloses value from this value. ')
dlgR4SrlNumberOfCloses = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlNumberOfCloses.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlNumberOfCloses.setDescription('Total Number of times any Dialogic Release 4 device was closed. To calculate the number of currently opened devices subtract this value from the dlgR4SrlNumberOfOpens value')
dlgR4SrlEventQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlEventQSize.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlEventQSize.setDescription('This is the current size of the Dialogic SRL event Queue')
dlgR4SrlCurrentEventsOnQ = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlCurrentEventsOnQ.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlCurrentEventsOnQ.setDescription('This is the number of events that are currently on the Queue. If this value keeps growing it indicates that the application is not properly removing events from the Queue. This may occur in applications written using the Synchronous multithreaded programming model')
dlgR4SrlMaxEventsOnQ = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlMaxEventsOnQ.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlMaxEventsOnQ.setDescription('This is the maximum number of events that was ever on the queue at a particular instance while the application using the SRL is running.')
dlgR4SrlTotalQueuedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlTotalQueuedEvents.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlTotalQueuedEvents.setDescription('This indicates the total number of events queued since the agents started gathering statistics for this application')
dlgR4SrlNumberOfHandlers = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 2, 1, 1, 3, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgR4SrlNumberOfHandlers.setStatus('mandatory')
if mibBuilder.loadTexts: dlgR4SrlNumberOfHandlers.setDescription('This indicates the number of SRL callback event handlers that are currently enabled')
mibBuilder.exportSymbols("DLGR4DEV-MIB", dlgR4ResObj=dlgR4ResObj, dlgR4MibRevMajor=dlgR4MibRevMajor, dlgR4VoiceChannelIndex=dlgR4VoiceChannelIndex, dlgR4DTIRcvSigBits=dlgR4DTIRcvSigBits, dlgR4ISDNTable=dlgR4ISDNTable, dlgR4DeviceInfo=dlgR4DeviceInfo, dlgR4SrlTable=dlgR4SrlTable, dlgR4SrlCurrentEventsOnQ=dlgR4SrlCurrentEventsOnQ, dlgR4SrlMaxEventsOnQ=dlgR4SrlMaxEventsOnQ, dlgR4MSIEntry=dlgR4MSIEntry, dlgR4SrlIndex=dlgR4SrlIndex, dlgR4MSITable=dlgR4MSITable, dlgR4DeviceIndex=dlgR4DeviceIndex, dlgR4ISDNEntry=dlgR4ISDNEntry, dlgR4MibRev=dlgR4MibRev, dlgR4VoiceEntry=dlgR4VoiceEntry, dlgR4MSIStationLineStatus=dlgR4MSIStationLineStatus, dlgR4DeviceRcvrCTbusSlot=dlgR4DeviceRcvrCTbusSlot, dlgR4ISDNBChannelStatus=dlgR4ISDNBChannelStatus, dlgR4SrlEntry=dlgR4SrlEntry, dlgR4DeviceType=dlgR4DeviceType, dlgR4SrlApplicationName=dlgR4SrlApplicationName, dlgR4SrlNumberOfCloses=dlgR4SrlNumberOfCloses, dlgR4SrlTotalQueuedEvents=dlgR4SrlTotalQueuedEvents, dlgR4VoiceTable=dlgR4VoiceTable, dlgR4SrlNumberOfOpens=dlgR4SrlNumberOfOpens, dlgR4DeviceName=dlgR4DeviceName, dlgR4VoiceLineStatus=dlgR4VoiceLineStatus, dlgR4SrlInfo=dlgR4SrlInfo, dlgR4DeviceXmitCTbusSlot=dlgR4DeviceXmitCTbusSlot, dlgR4DeviceOpenCount=dlgR4DeviceOpenCount, dlgR4DTITable=dlgR4DTITable, dlgR4MSIStationIndex=dlgR4MSIStationIndex, dlgR4VoiceChannelStatus=dlgR4VoiceChannelStatus, dlgR4DTIXmitSigBits=dlgR4DTIXmitSigBits, dlgR4DTIProtocol=dlgR4DTIProtocol, dlgR4SrlEventQSize=dlgR4SrlEventQSize, dlgR4DeviceEntry=dlgR4DeviceEntry, dlgR4VoiceNumberOfDigits=dlgR4VoiceNumberOfDigits, dlgR4ISDNProtocol=dlgR4ISDNProtocol, dlgR4MibRevMinor=dlgR4MibRevMinor, dlgR4DTITimeslotStatus=dlgR4DTITimeslotStatus, dlgR4ISDNBChannelIndex=dlgR4ISDNBChannelIndex, dlgR4VoiceE2PROMFeatures=dlgR4VoiceE2PROMFeatures, dlgR4DTITimeslotIndex=dlgR4DTITimeslotIndex, dlgR4DTIEntry=dlgR4DTIEntry, dlgR4SrlNumberOfHandlers=dlgR4SrlNumberOfHandlers, dlgR4DeviceHiIdentIndex=dlgR4DeviceHiIdentIndex, dlgR4DeviceTable=dlgR4DeviceTable)
