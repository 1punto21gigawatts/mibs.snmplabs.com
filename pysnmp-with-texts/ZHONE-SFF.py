#
# PySNMP MIB module ZHONE-SFF (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-SFF
# Produced by pysmi-0.3.4 at Wed May  1 15:47:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, MibIdentifier, Bits, ObjectIdentity, iso, Gauge32, IpAddress, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibIdentifier", "Bits", "ObjectIdentity", "iso", "Gauge32", "IpAddress", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Integer32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
zhoneModules, zhoneSFF = mibBuilder.importSymbols("Zhone", "zhoneModules", "zhoneSFF")
ZhoneAdminString, = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString")
zhoneSFFModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 114))
zhoneSFFModule.setRevisions(('2014-04-07 12:13', '2009-04-27 16:52', '2008-05-21 12:47', '2008-02-13 10:49', '2007-11-07 19:07',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneSFFModule.setRevisionsDescriptions(('Add DDM status', 'Add some values for XFP', 'allow zero values for enum fields.', 'Add/modify some fields.', 'Version 1.0.0 - initial creation of Zhone SFF MIB.',))
if mibBuilder.loadTexts: zhoneSFFModule.setLastUpdated('201404071205Z')
if mibBuilder.loadTexts: zhoneSFFModule.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhoneSFFModule.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: zhoneSFFModule.setDescription('Zhone MIB support for SFF module (SFP, SFF and XFP).')
zhoneSFFObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1))
if mibBuilder.loadTexts: zhoneSFFObjects.setStatus('current')
if mibBuilder.loadTexts: zhoneSFFObjects.setDescription('Zhone small form factor devices')
zhoneSFPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1), )
if mibBuilder.loadTexts: zhoneSFPTable.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPTable.setDescription('Small form pluggable table')
zhoneSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneSFPEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPEntry.setDescription('Row in SFP table.')
zhoneSFPVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPVendorName.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPVendorName.setDescription('SFP transceiver vendor name (ASCII)')
zhoneSFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 2), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPVendorOUI.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPVendorOUI.setDescription('SFP transceiver vendor IEEE company ID')
zhoneSFPVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPVendorPartNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPVendorPartNumber.setDescription('Part number provided by SFP transceiver vendor (ASCII)')
zhoneSFPVendorRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 4), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPVendorRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPVendorRevisionLevel.setDescription('Revision level for part number provided by vendor (ASCII)')
zhoneSFPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 5), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPSerialNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPSerialNumber.setDescription('Serial number provided by vendor (ASCII)')
zhoneSFPManufacturingDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 6), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPManufacturingDateCode.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPManufacturingDateCode.setDescription('YYMMDD ASCII')
zhoneSFPGigeComplianceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("base-1000-SX", 0), ("base-1000-LX", 1), ("base-1000-CX", 2), ("base-1000-T", 3), ("base-100-LX", 4), ("base-100-FX", 5), ("base-100-BX", 6), ("base-PX", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPGigeComplianceCode.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPGigeComplianceCode.setDescription('gigabit ethernet compliance codes')
zhoneSFPConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknownOrUnspecified", 0), ("sc", 1), ("fibreStyle1Copper", 2), ("fibreStyle2Copper", 3), ("bnc-tnc", 4), ("fibreCoaxialHeaders", 5), ("fiberJack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdc-II", 32), ("copperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPConnectorType.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPConnectorType.setDescription('code for connector type.')
zhoneSFPIdTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknownOrUnspecified", 0), ("gbic", 1), ("connector", 2), ("sfp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPIdTransceiverType.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPIdTransceiverType.setDescription('Code for electronic compatibility or optical compatibility.')
zhoneSFPExtendedIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPExtendedIdentifier.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPExtendedIdentifier.setDescription('Extended ID fields')
zhoneSFPSerialEncodingAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("eightB10B", 1), ("fourB5B", 2), ("nrz", 3), ("manchester", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPSerialEncodingAlgorithm.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPSerialEncodingAlgorithm.setDescription('Code for serial encoding algorithm')
zhoneSFPFiberChannelLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 12), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("longDistance", 4), ("intermediateDistance", 5), ("shortDistance", 6), ("veryLongDistance", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPFiberChannelLinkLength.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPFiberChannelLinkLength.setDescription('Code for fiber channel link length.')
zhoneSFPFiberChannelTransmitterTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 13), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("longwaveLaserLL", 4), ("shortwaveLaserWithOFC", 5), ("shortwaveLaserWithoutOFC", 6), ("electrical-Intra-Enclosure", 7), ("electrical-Inter-Enclosure", 8), ("longwabeLaserLC", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPFiberChannelTransmitterTechnology.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPFiberChannelTransmitterTechnology.setDescription('Fiber channel transmitter technology')
zhoneSFPFiberChannelTransmissionMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 14), Bits().clone(namedValues=NamedValues(("singleMode", 0), ("unused1", 1), ("multiMode-50m", 2), ("multiMode-62dot5m", 3), ("videoCoax", 4), ("miniatureCoax", 5), ("shieldedTwistedPair", 6), ("twinAxialPair", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPFiberChannelTransmissionMedia.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPFiberChannelTransmissionMedia.setDescription('Fiber channel transmission media')
zhoneSFPFiberChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 15), Bits().clone(namedValues=NamedValues(("oneHundredMbytesperSec", 0), ("unused1", 1), ("twoHundredMbytesperSec", 2), ("fourHundredMbytesperSec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPFiberChannelSpeed.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPFiberChannelSpeed.setDescription('Fiber channel speed')
zhoneSFP9To125mmFiberLinkLengthKm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 16), Unsigned32()).setUnits('Km').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFP9To125mmFiberLinkLengthKm.setStatus('current')
if mibBuilder.loadTexts: zhoneSFP9To125mmFiberLinkLengthKm.setDescription('Link length supported for 9/125 mm fiber, units of km')
zhoneSFP9To125mmFiberLinkLength100m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 17), Unsigned32()).setUnits('100m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFP9To125mmFiberLinkLength100m.setStatus('current')
if mibBuilder.loadTexts: zhoneSFP9To125mmFiberLinkLength100m.setDescription('Link length supported for 9/125 mm fiber, units of 100 m')
zhoneSFP50To125mmFiberLinkLength10m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 18), Unsigned32()).setUnits('10m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFP50To125mmFiberLinkLength10m.setStatus('current')
if mibBuilder.loadTexts: zhoneSFP50To125mmFiberLinkLength10m.setDescription('Link length supported for 50/125 mm fiber, units of 10 m')
zhoneSFP62Dot5To125FiberLinkLength10m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 19), Unsigned32()).setUnits('10m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFP62Dot5To125FiberLinkLength10m.setStatus('current')
if mibBuilder.loadTexts: zhoneSFP62Dot5To125FiberLinkLength10m.setDescription('Link length supported for 62.5/125 mm fiber, units of 10 m')
zhoneSFPNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 20), Unsigned32()).setUnits('100 Mbits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPNominalBitRate.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPNominalBitRate.setDescription('Nominal bit rate, units of 100 MBits/sec')
zhoneSFPUpperBitRateMarginPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 21), Unsigned32()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPUpperBitRateMarginPercentage.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPUpperBitRateMarginPercentage.setDescription('Upper bit rate margin, units of %')
zhoneSFPLowerBitRatePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 22), Unsigned32()).setUnits('Percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPLowerBitRatePercentage.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPLowerBitRatePercentage.setDescription('Lower bit rate margin, units of %')
zhoneSFPCopperLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPCopperLinkLength.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPCopperLinkLength.setDescription('Link length supported for copper, units of meters')
zhoneSFPIsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSFPIsPresent.setStatus('current')
if mibBuilder.loadTexts: zhoneSFPIsPresent.setDescription('TRUE if SFP transceiver is present, otherwise other values in this entry are not meaningful.')
zhoneXFPTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2), )
if mibBuilder.loadTexts: zhoneXFPTable.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPTable.setDescription('10 Gigabit small form factor pluggable table.')
zhoneXFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneXFPEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPEntry.setDescription('Row in zhoneXFP table.')
zhoneXFPVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPVendorName.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPVendorName.setDescription('SFP transceiver vendor name (ASCII)')
zhoneXFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 2), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPVendorOUI.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPVendorOUI.setDescription('SFP transceiver vendor IEEE company ID')
zhoneXFPManufacturingDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPManufacturingDateCode.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPManufacturingDateCode.setDescription('YYMMDD ASCII')
zhoneXFPComplianceCode10GbEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("unused", 0), ("ew", 1), ("lw", 2), ("sw", 3), ("lrm", 4), ("er", 5), ("lr", 6), ("sr", 7)))).setUnits('10Gb').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPComplianceCode10GbEthernet.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPComplianceCode10GbEthernet.setDescription('Compliance code for 10 gigabit ethernet')
zhoneXFPComplianceCode10GbFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("intReach100nmFp", 4), ("extReach1550nm", 5), ("sM-LL-L-1200", 6), ("mX-SN-I-1200", 7)))).setUnits('10Gb').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPComplianceCode10GbFiber.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPComplianceCode10GbFiber.setDescription('Compliance code for 10 gigabit fiber')
zhoneXFPLowerSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("unused0", 0), ("oC-48-LR", 1), ("oC-48-IR", 2), ("oC-48-SR", 3), ("sMF-2xFC", 4), ("sMFM-2xFC", 5), ("base100Lx-1xFcSmf", 6), ("base100Sx-1xFcMmf", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPLowerSpeed.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPLowerSpeed.setDescription('Description.')
zhoneXFPConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknownOrUnspecified", 0), ("sc", 1), ("fibreStyle1Copper", 2), ("fibreStyle2Copper", 3), ("bnc-tnc", 4), ("fibreCoaxialHeaders", 5), ("fiberJack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdc-ii", 32), ("copperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPConnectorType.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPConnectorType.setDescription('Description.')
zhoneXFPIdTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownOrUnspecified", 0), ("gbic", 1), ("connector", 2), ("sfp", 3), ("xpi300Pin", 4), ("xenpak", 5), ("xfp", 6), ("xff", 7), ("xfpE", 8), ("xpak", 9), ("x2", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPIdTransceiverType.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPIdTransceiverType.setDescription('Description.')
zhoneXFPExtendedIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPExtendedIdentifier.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPExtendedIdentifier.setDescription('Description.')
zhoneXFPEncodingSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 10), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("rz", 3), ("nrz", 4), ("sonetScrambled", 5), ("eightB10B", 6), ("sixtyFourBper66B", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPEncodingSupport.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPEncodingSupport.setDescription('Description.')
zhoneXFPDeviceTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPDeviceTechnology.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPDeviceTechnology.setDescription('Description.')
zhoneXFPSMFiberLinkLength1Km = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 12), Unsigned32()).setUnits('Km').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPSMFiberLinkLength1Km.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPSMFiberLinkLength1Km.setDescription('Description.')
zhoneXFPMMExtendedFiberLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 13), Unsigned32()).setUnits('2m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMMExtendedFiberLinkLength.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPMMExtendedFiberLinkLength.setDescription('Description.')
zhoneXFPMM50umFiberLinkLength1m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 14), Unsigned32()).setUnits('1m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMM50umFiberLinkLength1m.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPMM50umFiberLinkLength1m.setDescription('Description.')
zhoneXFPMM62Dot5umFiberLinkLength1m = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 15), Unsigned32()).setUnits('1m').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMM62Dot5umFiberLinkLength1m.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPMM62Dot5umFiberLinkLength1m.setDescription('Description.')
zhoneXFPMinimumBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 16), Unsigned32()).setUnits('100Mbits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMinimumBitRate.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPMinimumBitRate.setDescription('Description.')
zhoneXFPMaximumBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 17), Unsigned32()).setUnits('100Mbits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPMaximumBitRate.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPMaximumBitRate.setDescription('Description.')
zhoneXFPEnhancedOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 18), Bits().clone(namedValues=NamedValues(("cMU-Support", 0), ("wavelengthTurnability", 1), ("activeFEC-Control", 2), ("vPS-BypassedRegulator", 3), ("vPS-LVRegulator", 4), ("soft-P-Down", 5), ("soft-Tx-Disable", 6), ("vps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPEnhancedOptions.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPEnhancedOptions.setDescription('Description.')
zhoneXFPVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 19), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPVendorPartNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPVendorPartNumber.setDescription('Description.')
zhoneXFPVendorRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 20), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPVendorRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPVendorRevisionLevel.setDescription('Description.')
zhoneXFPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 21), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPSerialNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPSerialNumber.setDescription('Description.')
zhoneXFPIsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneXFPIsPresent.setStatus('current')
if mibBuilder.loadTexts: zhoneXFPIsPresent.setDescription('TRUE if XFP transceiver is present. Otherwise, the values in this row are not meaningful.')
zhoneDDMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3), )
if mibBuilder.loadTexts: zhoneDDMStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMStatusTable.setDescription('Digital diagnostic monitoring status from the SFPs.')
zhoneDDMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneDDMStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMStatusEntry.setDescription('A row in the DDM table')
zhoneDDMTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 128))).setUnits('Degrees celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMTemperature.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMTemperature.setDescription('Internally measured transceiver temperature. ')
zhoneDDMVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 655))).setUnits('Hundredths of volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMVoltage.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMVoltage.setDescription('Internally measured tranceiver supply voltage.')
zhoneDDMTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131))).setUnits('milliamperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMTxBiasCurrent.setDescription('Measured Tx Bias current.')
zhoneDDMTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 200))).setUnits('tenths of dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMTxPower.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMTxPower.setDescription('Measured Tx output power.')
zhoneDDMRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 200))).setUnits('tenths of dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMRxPower.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMRxPower.setDescription('Measured received power.')
zhoneDDMStatusWord = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("alarm", 4), ("sfpnotpresent", 8), ("ddmnotsupported", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMStatusWord.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMStatusWord.setDescription('Indicates current status of line with respect to DDM.')
zhoneDDMAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 12, 1, 3, 1, 7), Bits().clone(namedValues=NamedValues(("tempHigh", 0), ("tempLow", 1), ("vccHigh", 2), ("vccLow", 3), ("txBiasHigh", 4), ("txBiasLow", 5), ("txPwrHigh", 6), ("txPwrLow", 7), ("rxPwrHigh", 8), ("rxPwrLow", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDDMAlarms.setStatus('current')
if mibBuilder.loadTexts: zhoneDDMAlarms.setDescription('Bitmap of alarm conditions present, as reported by the SFP.')
mibBuilder.exportSymbols("ZHONE-SFF", zhoneXFPMinimumBitRate=zhoneXFPMinimumBitRate, zhoneXFPComplianceCode10GbFiber=zhoneXFPComplianceCode10GbFiber, zhoneXFPDeviceTechnology=zhoneXFPDeviceTechnology, zhoneXFPMaximumBitRate=zhoneXFPMaximumBitRate, zhoneSFPSerialNumber=zhoneSFPSerialNumber, zhoneSFFObjects=zhoneSFFObjects, zhoneSFPTable=zhoneSFPTable, zhoneXFPIsPresent=zhoneXFPIsPresent, zhoneSFPLowerBitRatePercentage=zhoneSFPLowerBitRatePercentage, zhoneSFPIsPresent=zhoneSFPIsPresent, zhoneSFPGigeComplianceCode=zhoneSFPGigeComplianceCode, zhoneSFPUpperBitRateMarginPercentage=zhoneSFPUpperBitRateMarginPercentage, PYSNMP_MODULE_ID=zhoneSFFModule, zhoneXFPTable=zhoneXFPTable, zhoneXFPVendorName=zhoneXFPVendorName, zhoneXFPComplianceCode10GbEthernet=zhoneXFPComplianceCode10GbEthernet, zhoneDDMVoltage=zhoneDDMVoltage, zhoneSFP62Dot5To125FiberLinkLength10m=zhoneSFP62Dot5To125FiberLinkLength10m, zhoneXFPExtendedIdentifier=zhoneXFPExtendedIdentifier, zhoneXFPEncodingSupport=zhoneXFPEncodingSupport, zhoneXFPSMFiberLinkLength1Km=zhoneXFPSMFiberLinkLength1Km, zhoneSFPConnectorType=zhoneSFPConnectorType, zhoneDDMTxBiasCurrent=zhoneDDMTxBiasCurrent, zhoneSFPFiberChannelSpeed=zhoneSFPFiberChannelSpeed, zhoneDDMStatusTable=zhoneDDMStatusTable, zhoneDDMAlarms=zhoneDDMAlarms, zhoneSFPNominalBitRate=zhoneSFPNominalBitRate, zhoneDDMTxPower=zhoneDDMTxPower, zhoneSFPManufacturingDateCode=zhoneSFPManufacturingDateCode, zhoneSFP50To125mmFiberLinkLength10m=zhoneSFP50To125mmFiberLinkLength10m, zhoneXFPConnectorType=zhoneXFPConnectorType, zhoneXFPMM50umFiberLinkLength1m=zhoneXFPMM50umFiberLinkLength1m, zhoneSFPVendorName=zhoneSFPVendorName, zhoneXFPMM62Dot5umFiberLinkLength1m=zhoneXFPMM62Dot5umFiberLinkLength1m, zhoneXFPVendorRevisionLevel=zhoneXFPVendorRevisionLevel, zhoneXFPSerialNumber=zhoneXFPSerialNumber, zhoneSFPFiberChannelLinkLength=zhoneSFPFiberChannelLinkLength, zhoneSFPFiberChannelTransmitterTechnology=zhoneSFPFiberChannelTransmitterTechnology, zhoneDDMTemperature=zhoneDDMTemperature, zhoneSFPFiberChannelTransmissionMedia=zhoneSFPFiberChannelTransmissionMedia, zhoneXFPManufacturingDateCode=zhoneXFPManufacturingDateCode, zhoneSFPVendorOUI=zhoneSFPVendorOUI, zhoneXFPEnhancedOptions=zhoneXFPEnhancedOptions, zhoneXFPIdTransceiverType=zhoneXFPIdTransceiverType, zhoneXFPVendorPartNumber=zhoneXFPVendorPartNumber, zhoneDDMStatusEntry=zhoneDDMStatusEntry, zhoneXFPMMExtendedFiberLinkLength=zhoneXFPMMExtendedFiberLinkLength, zhoneSFPVendorPartNumber=zhoneSFPVendorPartNumber, zhoneSFPEntry=zhoneSFPEntry, zhoneSFPExtendedIdentifier=zhoneSFPExtendedIdentifier, zhoneXFPLowerSpeed=zhoneXFPLowerSpeed, zhoneSFFModule=zhoneSFFModule, zhoneXFPVendorOUI=zhoneXFPVendorOUI, zhoneSFPVendorRevisionLevel=zhoneSFPVendorRevisionLevel, zhoneDDMRxPower=zhoneDDMRxPower, zhoneDDMStatusWord=zhoneDDMStatusWord, zhoneSFP9To125mmFiberLinkLengthKm=zhoneSFP9To125mmFiberLinkLengthKm, zhoneSFP9To125mmFiberLinkLength100m=zhoneSFP9To125mmFiberLinkLength100m, zhoneXFPEntry=zhoneXFPEntry, zhoneSFPSerialEncodingAlgorithm=zhoneSFPSerialEncodingAlgorithm, zhoneSFPCopperLinkLength=zhoneSFPCopperLinkLength, zhoneSFPIdTransceiverType=zhoneSFPIdTransceiverType)
