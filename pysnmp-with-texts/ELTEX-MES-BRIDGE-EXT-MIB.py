#
# PySNMP MIB module ELTEX-MES-BRIDGE-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-BRIDGE-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:00:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
eltMesBridgeExtMIB, = mibBuilder.importSymbols("ELTEX-MES-MNG-MIB", "eltMesBridgeExtMIB")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
rldot1sMstpInstanceEntry, = mibBuilder.importSymbols("RADLAN-BRIDGEMIBOBJECTS-MIB", "rldot1sMstpInstanceEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, ObjectIdentity, Counter64, Counter32, ModuleIdentity, IpAddress, NotificationType, MibIdentifier, iso, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "ObjectIdentity", "Counter64", "Counter32", "ModuleIdentity", "IpAddress", "NotificationType", "MibIdentifier", "iso", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
eltMesBridgeExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0))
eltMesBridgeExtMacLearning = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 0))
eltMesBridgeMstp = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3))
eltMesdot1dTp = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 4))
eltMesBridgeStp = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 5))
class EltBridgeStpGroupMacAddressType(TextualConvention, Integer32):
    description = 'Type of STP BPDU destination MAC address'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dot1d", 1), ("dot1ad", 2))

eltBridgeExtMacLearningVlanTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 0, 1), )
if mibBuilder.loadTexts: eltBridgeExtMacLearningVlanTable.setStatus('current')
if mibBuilder.loadTexts: eltBridgeExtMacLearningVlanTable.setDescription('Per VLAN MAC learning table.')
eltBridgeExtMacLearningVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 0, 1, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-EXT-MIB", "eltBridgeExtMacLearningVlanIndex"))
if mibBuilder.loadTexts: eltBridgeExtMacLearningVlanEntry.setStatus('current')
if mibBuilder.loadTexts: eltBridgeExtMacLearningVlanEntry.setDescription('VLAN MAC learning entry.')
eltBridgeExtMacLearningVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 0, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: eltBridgeExtMacLearningVlanIndex.setStatus('current')
if mibBuilder.loadTexts: eltBridgeExtMacLearningVlanIndex.setDescription('Indicates the VLAN number.')
eltBridgeExtMacLearningVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 0, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eltBridgeExtMacLearningVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: eltBridgeExtMacLearningVlanEnabled.setDescription('Indicates whether the MAC addresses learning is enabled in this VLAN or not.')
eltdot1sMstpPendingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 3), )
if mibBuilder.loadTexts: eltdot1sMstpPendingGroupTable.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpPendingGroupTable.setDescription('A table that contains information about the alocation of vlans to groups.')
eltdot1sMstpPendingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 3, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-EXT-MIB", "eltdot1sMstpPendingGroup"))
if mibBuilder.loadTexts: eltdot1sMstpPendingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpPendingGroupEntry.setDescription('Entry of eltdot1sMstpPendingGroupTable')
eltdot1sMstpPendingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltdot1sMstpPendingGroup.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpPendingGroup.setDescription('The pending group number.')
eltdot1sMstpVlanId1To1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltdot1sMstpVlanId1To1024.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpVlanId1To1024.setDescription('first VlanId List of specific group number.')
eltdot1sMstpVlanId1025To2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltdot1sMstpVlanId1025To2048.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpVlanId1025To2048.setDescription('second VlanId List of specific group number.')
eltdot1sMstpVlanId2049To3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltdot1sMstpVlanId2049To3072.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpVlanId2049To3072.setDescription('third VlanId List of specific group number.')
eltdot1sMstpVlanId3073To4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltdot1sMstpVlanId3073To4094.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpVlanId3073To4094.setDescription('fourth VlanId List of specific group number.')
eltdot1dTpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 4, 1), )
if mibBuilder.loadTexts: eltdot1dTpVlanTable.setStatus('current')
if mibBuilder.loadTexts: eltdot1dTpVlanTable.setDescription('Table that contains configuration of mac aging time for each VLAN.')
eltdot1dTpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 4, 1, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-EXT-MIB", "eltdot1dTpVlanIndex"))
if mibBuilder.loadTexts: eltdot1dTpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: eltdot1dTpVlanEntry.setDescription('Each entry contains the aging out configuration and the configuration source of the aging out value applied for each VLAN.')
eltdot1dTpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: eltdot1dTpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: eltdot1dTpVlanIndex.setDescription('VLAN number.')
eltdot1dTpVlanAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 4, 1, 1, 2), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltdot1dTpVlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: eltdot1dTpVlanAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned mac address at this VLAN.')
eltdot1dTpVlanAgingFromGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 4, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltdot1dTpVlanAgingFromGlobal.setStatus('current')
if mibBuilder.loadTexts: eltdot1dTpVlanAgingFromGlobal.setDescription('Indicates whether the aging time applied at this VLAN is from dot1dTpAgingTime object or not.')
eltdot1sMstpInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 4), )
if mibBuilder.loadTexts: eltdot1sMstpInstanceTable.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpInstanceTable.setDescription('A table that contains Mstp instance specific information for the Multiple Spanning Tree Protocol.')
eltdot1sMstpInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 4, 1), )
rldot1sMstpInstanceEntry.registerAugmentions(("ELTEX-MES-BRIDGE-EXT-MIB", "eltdot1sMstpInstanceEntry"))
eltdot1sMstpInstanceEntry.setIndexNames(*rldot1sMstpInstanceEntry.getIndexNames())
if mibBuilder.loadTexts: eltdot1sMstpInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpInstanceEntry.setDescription('A list of information maintained by every instance about the multiple Spanning Tree Protocol state for that instance.')
eltdot1sMstpInstanceLastTopologyChangePort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltdot1sMstpInstanceLastTopologyChangePort.setStatus('current')
if mibBuilder.loadTexts: eltdot1sMstpInstanceLastTopologyChangePort.setDescription("This value contain port ifIndex from which the request about the last change of topology came. If value is 0 - topology wasn't changed yet.")
eltBridgeStpConfigPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 5, 1), )
if mibBuilder.loadTexts: eltBridgeStpConfigPortTable.setStatus('current')
if mibBuilder.loadTexts: eltBridgeStpConfigPortTable.setDescription('Port configuration table for Spanning Tree Protocol.')
eltBridgeStpConfigPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 5, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: eltBridgeStpConfigPortEntry.setStatus('current')
if mibBuilder.loadTexts: eltBridgeStpConfigPortEntry.setDescription('Port configuration entry for Spanning Tree Protocol.')
eltBridgeStpConfigPortGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 5, 1, 1, 1), EltBridgeStpGroupMacAddressType().clone('dot1d')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltBridgeStpConfigPortGroupMacAddress.setStatus('current')
if mibBuilder.loadTexts: eltBridgeStpConfigPortGroupMacAddress.setDescription('Sets destination MAC address for Bridge PDUs. A port sends and receives BPDUs only with specified group MAC address.')
eltBridgeStpConfigPortRestrictedTcn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 5, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltBridgeStpConfigPortRestrictedTcn.setStatus('current')
if mibBuilder.loadTexts: eltBridgeStpConfigPortRestrictedTcn.setDescription('Configure filtering of Spanning Tree BPDUs with TC flag set.')
eltdot1dStpLastTopologyChangePort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 401, 0, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltdot1dStpLastTopologyChangePort.setStatus('current')
if mibBuilder.loadTexts: eltdot1dStpLastTopologyChangePort.setDescription("This value contain port ifIndex from which the request about the last change of topology came. If value is 0 - topology wasn't changed yet.")
mibBuilder.exportSymbols("ELTEX-MES-BRIDGE-EXT-MIB", eltMesBridgeStp=eltMesBridgeStp, eltdot1sMstpVlanId2049To3072=eltdot1sMstpVlanId2049To3072, eltdot1sMstpPendingGroupEntry=eltdot1sMstpPendingGroupEntry, eltdot1dTpVlanAgingFromGlobal=eltdot1dTpVlanAgingFromGlobal, eltdot1sMstpInstanceEntry=eltdot1sMstpInstanceEntry, eltBridgeStpConfigPortGroupMacAddress=eltBridgeStpConfigPortGroupMacAddress, eltdot1dTpVlanEntry=eltdot1dTpVlanEntry, eltMesdot1dTp=eltMesdot1dTp, eltBridgeStpConfigPortTable=eltBridgeStpConfigPortTable, eltMesBridgeExtMacLearning=eltMesBridgeExtMacLearning, eltdot1dTpVlanTable=eltdot1dTpVlanTable, eltBridgeStpConfigPortRestrictedTcn=eltBridgeStpConfigPortRestrictedTcn, EltBridgeStpGroupMacAddressType=EltBridgeStpGroupMacAddressType, eltdot1sMstpVlanId3073To4094=eltdot1sMstpVlanId3073To4094, eltBridgeExtMacLearningVlanTable=eltBridgeExtMacLearningVlanTable, eltBridgeExtMacLearningVlanEnabled=eltBridgeExtMacLearningVlanEnabled, eltBridgeStpConfigPortEntry=eltBridgeStpConfigPortEntry, eltMesBridgeMstp=eltMesBridgeMstp, eltdot1sMstpInstanceTable=eltdot1sMstpInstanceTable, eltdot1sMstpVlanId1To1024=eltdot1sMstpVlanId1To1024, eltdot1sMstpPendingGroup=eltdot1sMstpPendingGroup, eltdot1dStpLastTopologyChangePort=eltdot1dStpLastTopologyChangePort, eltBridgeExtMacLearningVlanIndex=eltBridgeExtMacLearningVlanIndex, eltMesBridgeExtMIBObjects=eltMesBridgeExtMIBObjects, eltdot1sMstpPendingGroupTable=eltdot1sMstpPendingGroupTable, eltdot1dTpVlanAgingTime=eltdot1dTpVlanAgingTime, eltBridgeExtMacLearningVlanEntry=eltBridgeExtMacLearningVlanEntry, eltdot1sMstpInstanceLastTopologyChangePort=eltdot1sMstpInstanceLastTopologyChangePort, eltdot1dTpVlanIndex=eltdot1dTpVlanIndex, eltdot1sMstpVlanId1025To2048=eltdot1sMstpVlanId1025To2048)
