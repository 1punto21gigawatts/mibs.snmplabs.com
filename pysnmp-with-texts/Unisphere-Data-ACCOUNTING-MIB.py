#
# PySNMP MIB module Unisphere-Data-ACCOUNTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-ACCOUNTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acctngFileEntry, acctngSelectionEntry, acctngSelectionIndex = mibBuilder.importSymbols("ACCOUNTING-CONTROL-MIB", "acctngFileEntry", "acctngSelectionEntry", "acctngSelectionIndex")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Counter64, Bits, ObjectIdentity, iso, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, MibIdentifier, Integer32, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Bits", "ObjectIdentity", "iso", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "MibIdentifier", "Integer32", "Counter32", "TimeTicks")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
usdIfType, = mibBuilder.importSymbols("Unisphere-Data-IF-MIB", "usdIfType")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdPolicyAttachmentType, = mibBuilder.importSymbols("Unisphere-Data-POLICY-MIB", "UsdPolicyAttachmentType")
UsdAcctngAdminType, UsdAcctngOperType = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdAcctngAdminType", "UsdAcctngOperType")
usdAcctngMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24))
usdAcctngMIB.setRevisions(('2001-12-05 14:16', '2001-11-19 19:00', '2001-03-26 13:22', '2000-11-07 19:00', '2000-07-21 00:00', '2000-03-20 00:00', '2000-01-17 00:00', '1999-10-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdAcctngMIB.setRevisionsDescriptions(('Key revisions include: o Added usdAcctngSelectionPolicyName and usdAcctngSelectionPolicyType objects to usdAcctngSelectionTable o Added usdAcctngSelectionSchemaPolicy and associated policy statistic OIDs', 'Key revisions include: o Added usdAcctngifInMulticastPkts o Added usdAcctngifInBroadcastPkts o Added usdAcctngifOutMulticastPkts o Added usdAcctngifOutBroadcastPkts', 'Key revisions include: o Added usdAcctngSelectionSchemaSystem o Deprecated usdAcctngSelectionSubtreeType', 'Key revisions include: o Added usdAcctngIfTimeOffset', 'Key revisions include: o Added usdAcctngIfCorrelator o Added usdAcctngIfInPolicedOctets o Added usdAcctngIfInPolicedPkts o Added usdAcctngIfInSpoofedPkts o Added usdAcctngIfOutPolicedOctets o Added usdAcctngIfOutPolicedPkts o Added usdAcctngIfOutSchedulerDropOctets o Added usdAcctngIfOutSchedulerDropPkts o Added usdAcctngIfLowerInterface', 'Key revisions include: o Moved usdAcctngSelectionMaxIfStackLevels o Added usdAcctngSelectionSubtreeType o Added usdAcctngIfCorrelator o Removed usdAcctngSelectionSchemaPpp', 'Key revisions include: o Added usdAcctngSelectionMaxIfStackLevels o Added usdAcctngSelectionIfStackStartTable o Added usdAcctngSelectionSchemaIfStack', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdAcctngMIB.setLastUpdated('200112051416Z')
if mibBuilder.loadTexts: usdAcctngMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdAcctngMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdAcctngMIB.setDescription('The accounting MIB for the Unisphere Networks enterprise. This MIB augments the Connection Oriented Accounting MIB (ACCOUNTING-CONTROL- MIB) specified in RFC2513.')
usdAcctngMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1))
usdAcctngSelectionControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1))
usdAcctngFileControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2))
usdAcctngInterfaceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3))
usdAcctngSelectionTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1), )
if mibBuilder.loadTexts: usdAcctngSelectionTable.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionTable.setDescription("A list of accounting information selection entries. Note that additions, modifications and deletions of entries in this table can occur at any time, but such changes only take effect on the next occasion when collection begins into a new interval. Thus, between modification and the next 'swap', the content of this table does not reflect the current selection.")
usdAcctngSelectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1), )
acctngSelectionEntry.registerAugmentions(("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionEntry"))
usdAcctngSelectionEntry.setIndexNames(*acctngSelectionEntry.getIndexNames())
if mibBuilder.loadTexts: usdAcctngSelectionEntry.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionEntry.setDescription('An entry used to extend the the selection entry in acctngSelectionEntry. This conceptual row extension is used for Unisphere accounting extensions for connectionless data collection.')
usdAcctngSelectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("ietfAccountControl", 0), ("connectionLessLayer2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAcctngSelectionType.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionType.setDescription('Indicates the types of connections for which the information selected by this entry are to be collected. The ietfAccountControl(0) bit position indicates that the ACCOUNTING-CONTROL-MIB.acctngSelectionType in the base conceptual row determines the selection type. All other bit positions for this object over-ride the acctngSelectionType in the base conceptual row. When the value of this object over-rides the acctngSelectionType object, the following objects have no meaning: ACCOUNTING-CONTROL-MIB.acctngFileCollectFailedAttempts ACCOUNTING-CONTROL-MIB.acctngFileMinAge because they control or are related to connection oriented accounting.')
usdAcctngSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteCounterValues", 1), ("deltaCounterValues", 2))).clone('deltaCounterValues')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAcctngSelectionMode.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionMode.setDescription('Indicates the data collection mode.')
usdAcctngSelectionSubtreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("lineCard", 1), ("systemController", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAcctngSelectionSubtreeType.setStatus('deprecated')
if mibBuilder.loadTexts: usdAcctngSelectionSubtreeType.setDescription("Indicates the origin of the collection, given the row's subtree. The architecture implementation for statistics collection imposes that rows with distinct usdAcctngSelectionSubtreeType may not be collected into the same accounting file. Conversely, different files (configured from acctngSelectionFile) entries are necessary in order to collect from subtrees (configured from acctngSelectionSubtree) that imply into different subtree types (usdAcctngSelectionSubtreeType).")
usdAcctngSelectionMaxIfStackLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAcctngSelectionMaxIfStackLevels.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionMaxIfStackLevels.setDescription('Indicates the maximum number of levels in the ifStack table to be returned when using the ifStack accounting schema. This object is ignored if acctngSelectionSubtree is not set to usdAcctngSelectionSchemaIfStack. When this object is zero, the entire stack above the starting point(s) given will be returned. When this object is set to 1, only ifIndexes stacked above the starting point(s) given will be returned.')
usdAcctngSelectionPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAcctngSelectionPolicyName.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionPolicyName.setDescription('Specifies the name of the policy associated with the statistics collected when using the policy accounting schema. This object is ignored if acctngSelectionSubtree is not set to usdAcctngSelectionSchemaPolicy.')
usdAcctngSelectionPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 6), UsdPolicyAttachmentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAcctngSelectionPolicyType.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionPolicyType.setDescription('Specifies the attachment point for the policy associated with the statistics collected when using the policy accounting schema. This object is ignored if acctngSelectionSubtree is not set to usdAcctngSelectionSchemaPolicy.')
usdAcctngSelectionIfStackStartTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 3), )
if mibBuilder.loadTexts: usdAcctngSelectionIfStackStartTable.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionIfStackStartTable.setDescription("A list of ifIndexes to be used as starting point when using the ifStack selection schema. Note that additions, modifications and deletions of entries in this table can occur at any time, but such changes only take effect on the next occasion when collection begins into a new interval. Thus, between modification and the next 'swap', the content of this table does not reflect the current selection.")
usdAcctngSelectionIfStackStartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 3, 1), ).setIndexNames((0, "ACCOUNTING-CONTROL-MIB", "acctngSelectionIndex"), (0, "Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionIfStackIfIndex"))
if mibBuilder.loadTexts: usdAcctngSelectionIfStackStartEntry.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionIfStackStartEntry.setDescription('An entry used to determine the starting point entry when using the ifStack schema.')
usdAcctngSelectionIfStackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdAcctngSelectionIfStackIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionIfStackIfIndex.setDescription('The ifIndex to be used as a starting point in the interface stack configuration. The interfaces to be returned in the ifStack schema will start from this value, going up.')
usdAcctngSelectionIfStackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAcctngSelectionIfStackRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionIfStackRowStatus.setDescription('Controls creation/deletion of entries in this table.')
usdAcctngFileTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1), )
if mibBuilder.loadTexts: usdAcctngFileTable.setStatus('current')
if mibBuilder.loadTexts: usdAcctngFileTable.setDescription('A unique value identifying the file transfer behavior and the the file to where accounting data is to be stored.')
usdAcctngFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1, 1), )
acctngFileEntry.registerAugmentions(("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileEntry"))
usdAcctngFileEntry.setIndexNames(*acctngFileEntry.getIndexNames())
if mibBuilder.loadTexts: usdAcctngFileEntry.setStatus('current')
if mibBuilder.loadTexts: usdAcctngFileEntry.setDescription('An entry used to extend the file management of acctngFileEntry. This conceptual row extension is used for Unisphere accounting extensions to automate the transfer of accounting data to remote hosts.')
usdAcctngFileXferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("usdAcctngManualTransfer", 1), ("usdAcctngAutomatedTransfer", 2), ("usdAcctngTransferOnFileFull", 3), ("usdAcctngRedundantTransfer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAcctngFileXferMode.setStatus('current')
if mibBuilder.loadTexts: usdAcctngFileXferMode.setDescription('Indicates the mode to use for transfering accounting data to remote client. usdAcctngManualTransfer - Administrator is responsible for manually transfering collected accounting data off of the system. usdAcctngAutomatedTransfer - The agent will automatically transfer the collected accounting data based at a acctngFileIntervals using an entry in the usdFileXferTable pointed to by usdAcctngFileXferIndex. If a manager sets this object to this value, a corresponding row in the usdFileXferTable must exist, otherwise the set command will fail. usdActngTransferOnFileFull - The agent will automatically transfer the collected accounting data when the file reaches the maximum size defined by acctngFileMaximumSize. If a manager sets this object to this value, a corresponding row in the usdFileXferTable must exist, otherwise the set command will fail. usdAcctngRedundantTransfer - The agent will automatically transfer two copies of the accounting data based on the acctngFileInterval. One copy will go to the usdFileXferTable entry identified by usdAcctngFileXferIndex and one copy will go the the usdFileXferTable entry identified by usdAcctngFileXferSecondaryIndex')
usdAcctngFileXferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAcctngFileXferIndex.setStatus('current')
if mibBuilder.loadTexts: usdAcctngFileXferIndex.setDescription('Identifies an entry in the usdFileXferTable, which defines the file transfer parameters to use when the agent is configured to automatically transfer collected accounting data files. A set to this object will fail if a corresponding entry in the usdFileXferTable does not exist or it is not set to usdFileXferAcctngStatistics.')
usdAcctngFileXferSecondaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAcctngFileXferSecondaryIndex.setStatus('current')
if mibBuilder.loadTexts: usdAcctngFileXferSecondaryIndex.setDescription('Identifies a backup or secondary entry in the usdFileXferTable, which defines the file transfer parameters to use when the agent is configured to automatically transfer collected accounting data files. A set to this object will fail if a corresponding entry in the usdFileXferTable does not exist or it is not set to usdFileXferAcctngStatistics.')
usdAcctngInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1), )
if mibBuilder.loadTexts: usdAcctngInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: usdAcctngInterfaceTable.setDescription('A table controlling the collection of accounting data on specific interfaces types. This table provides an efficient mechanism to enable and/or disable data collection on all interfaces of a specified type.')
usdAcctngInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-IF-MIB", "usdIfType"))
if mibBuilder.loadTexts: usdAcctngInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: usdAcctngInterfaceEntry.setDescription('An entry which controls whether accounting data is to be collected on interfaces of a specific type.')
usdAcctngInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1, 1), UsdAcctngAdminType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAcctngInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdAcctngInterfaceAdminStatus.setDescription('The desired administrative state for accounting data collection for interfaces defined by the type of this entry. The administrative scope is for all interfaces of the type defined by the corresponding usdIfType for this entry.')
usdAcctngInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1, 2), UsdAcctngOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAcctngInterfaceOperStatus.setStatus('current')
if mibBuilder.loadTexts: usdAcctngInterfaceOperStatus.setDescription('The operational state for accounting data collection on for all interfaces corresponding to this entries type.')
usdAcctngInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAcctngInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAcctngInterfaceRowStatus.setDescription('Controls creation/deletion of entries in this table.')
usdAcctngInterfaceAccntgFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAcctngInterfaceAccntgFileIndex.setStatus('current')
if mibBuilder.loadTexts: usdAcctngInterfaceAccntgFileIndex.setDescription('This object selects the acctngFileTable entry for the collection statistics for this interface type. If there is not an entry in the acctngFileTable with the index indicated by this object, the usdAcctngInterface row will be ignored, unless the following conditions are met: (1) usdAcctngInterfaceAccntgFileIndex is set to zero, which is its default value, and (2) there is only one entry in the acctngFileTable. When the two conditions are met, the interface type will apply to the one existing acctngFileTable entry.')
usdAcctngSelectionSchema = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2))
if mibBuilder.loadTexts: usdAcctngSelectionSchema.setStatus('current')
if mibBuilder.loadTexts: usdAcctngSelectionSchema.setDescription('The root OBJECT IDENTIFIER under which accounting selection tree objects are assigned.')
usdAcctngSelectionSchemaIf = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1))
usdAcctngIfInOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 1))
usdAcctngIfInUcastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 2))
usdAcctngIfInDiscards = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 3))
usdAcctngIfInErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 4))
usdAcctngIfInUnknownProtos = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 5))
usdAcctngIfOutOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 6))
usdAcctngIfOutUcastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 7))
usdAcctngIfOutDiscards = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 8))
usdAcctngIfOutErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 9))
usdAcctngIfCorrelator = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 10))
usdAcctngIfInPolicedOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 11))
usdAcctngIfInPolicedPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 12))
usdAcctngIfInSpoofedPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 13))
usdAcctngIfOutPolicedOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 14))
usdAcctngIfOutPolicedPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 15))
usdAcctngIfOutSchedulerDropOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 16))
usdAcctngIfOutSchedulerDropPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 17))
usdAcctngIfLowerInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 18))
usdAcctngIfTimeOffset = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 19))
usdAcctngifInMulticastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 20))
usdAcctngifInBroadcastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 21))
usdAcctngifOutMulticastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 22))
usdAcctngifOutBroadcastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 23))
usdAcctngSelectionSchemaIfStack = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 3))
usdAcctngSelectionSchemaSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 4))
usdAcctngSelectionSchemaPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5))
usdAcctngGreenPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 1))
usdAcctngUpperGreenPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 2))
usdAcctngYellowPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 3))
usdAcctngUpperYellowPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 4))
usdAcctngRedPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 5))
usdAcctngUpperRedPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 6))
usdAcctngGreenBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 7))
usdAcctngUpperGreenBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 8))
usdAcctngYellowBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 9))
usdAcctngUpperYellowBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 10))
usdAcctngRedBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 11))
usdAcctngUpperRedBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 12))
usdAcctngConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3))
usdAcctngGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1))
usdAcctngCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2))
usdAcctngCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 1)).setObjects(("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAcctngCompliance = usdAcctngCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdAcctngCompliance.setDescription('Obsolete compliance statement for switches that implement the RedStone Accounting Control MIB. This statement became obsolete when the usdAcctngSelectionSubtreeType object was deprecated.')
usdAcctngCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 2)).setObjects(("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngBasicGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAcctngCompliance2 = usdAcctngCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAcctngCompliance2.setDescription('Obsolete compliance statement for switches that implement the RedStone Accounting Control MIB. This statement became obsolete when selection policy name and type objects were added.')
usdAcctngCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 3)).setObjects(("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngBasicGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAcctngCompliance3 = usdAcctngCompliance3.setStatus('current')
if mibBuilder.loadTexts: usdAcctngCompliance3.setDescription('The compliance statement for switches that implement the RedStone Accounting Control MIB.')
usdAcctngBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 1)).setObjects(("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionType"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionMode"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionSubtreeType"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionMaxIfStackLevels"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionIfStackRowStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferMode"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferIndex"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferSecondaryIndex"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceAdminStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceOperStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceRowStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceAccntgFileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAcctngBasicGroup = usdAcctngBasicGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdAcctngBasicGroup.setDescription('Obsolete collection of objects providing control of the basic collection of accounting data for connection-less networks. This group became obsolete when usdAcctngSelectionSubtreeType was deprecated.')
usdAcctngBasicGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 2)).setObjects(("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionType"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionMode"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionMaxIfStackLevels"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionIfStackRowStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferMode"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferIndex"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferSecondaryIndex"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceAdminStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceOperStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceRowStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceAccntgFileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAcctngBasicGroup2 = usdAcctngBasicGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAcctngBasicGroup2.setDescription('Obsolete collection of objects providing control of the basic collection of accounting data for connection-less networks. This group became obsolete when selection policy name and type objects were added.')
usdAcctngBasicGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 3)).setObjects(("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionType"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionMode"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionMaxIfStackLevels"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionPolicyName"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionPolicyType"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngSelectionIfStackRowStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferMode"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferIndex"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngFileXferSecondaryIndex"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceAdminStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceOperStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceRowStatus"), ("Unisphere-Data-ACCOUNTING-MIB", "usdAcctngInterfaceAccntgFileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAcctngBasicGroup3 = usdAcctngBasicGroup3.setStatus('current')
if mibBuilder.loadTexts: usdAcctngBasicGroup3.setDescription('A collection of objects providing control of the basic collection of accounting data for connection-less networks.')
mibBuilder.exportSymbols("Unisphere-Data-ACCOUNTING-MIB", usdAcctngIfOutSchedulerDropPkts=usdAcctngIfOutSchedulerDropPkts, usdAcctngRedBytes=usdAcctngRedBytes, usdAcctngSelectionSchemaIf=usdAcctngSelectionSchemaIf, usdAcctngSelectionControl=usdAcctngSelectionControl, usdAcctngSelectionPolicyName=usdAcctngSelectionPolicyName, usdAcctngSelectionMaxIfStackLevels=usdAcctngSelectionMaxIfStackLevels, usdAcctngUpperRedBytes=usdAcctngUpperRedBytes, usdAcctngInterfaceTable=usdAcctngInterfaceTable, usdAcctngSelectionIfStackStartTable=usdAcctngSelectionIfStackStartTable, usdAcctngSelectionEntry=usdAcctngSelectionEntry, PYSNMP_MODULE_ID=usdAcctngMIB, usdAcctngFileXferSecondaryIndex=usdAcctngFileXferSecondaryIndex, usdAcctngSelectionSchemaPolicy=usdAcctngSelectionSchemaPolicy, usdAcctngYellowBytes=usdAcctngYellowBytes, usdAcctngIfInPolicedPkts=usdAcctngIfInPolicedPkts, usdAcctngifOutBroadcastPkts=usdAcctngifOutBroadcastPkts, usdAcctngSelectionIfStackRowStatus=usdAcctngSelectionIfStackRowStatus, usdAcctngBasicGroup=usdAcctngBasicGroup, usdAcctngUpperYellowPackets=usdAcctngUpperYellowPackets, usdAcctngGroups=usdAcctngGroups, usdAcctngSelectionIfStackStartEntry=usdAcctngSelectionIfStackStartEntry, usdAcctngSelectionPolicyType=usdAcctngSelectionPolicyType, usdAcctngCompliance3=usdAcctngCompliance3, usdAcctngInterfaceControl=usdAcctngInterfaceControl, usdAcctngMIBObjects=usdAcctngMIBObjects, usdAcctngIfInSpoofedPkts=usdAcctngIfInSpoofedPkts, usdAcctngIfOutErrors=usdAcctngIfOutErrors, usdAcctngBasicGroup3=usdAcctngBasicGroup3, usdAcctngSelectionIfStackIfIndex=usdAcctngSelectionIfStackIfIndex, usdAcctngIfInUnknownProtos=usdAcctngIfInUnknownProtos, usdAcctngMIB=usdAcctngMIB, usdAcctngifInMulticastPkts=usdAcctngifInMulticastPkts, usdAcctngConformance=usdAcctngConformance, usdAcctngCompliance=usdAcctngCompliance, usdAcctngIfLowerInterface=usdAcctngIfLowerInterface, usdAcctngGreenPackets=usdAcctngGreenPackets, usdAcctngIfInUcastPkts=usdAcctngIfInUcastPkts, usdAcctngifOutMulticastPkts=usdAcctngifOutMulticastPkts, usdAcctngInterfaceEntry=usdAcctngInterfaceEntry, usdAcctngIfInOctets=usdAcctngIfInOctets, usdAcctngUpperGreenPackets=usdAcctngUpperGreenPackets, usdAcctngSelectionSchemaSystem=usdAcctngSelectionSchemaSystem, usdAcctngIfCorrelator=usdAcctngIfCorrelator, usdAcctngUpperRedPackets=usdAcctngUpperRedPackets, usdAcctngIfInErrors=usdAcctngIfInErrors, usdAcctngYellowPackets=usdAcctngYellowPackets, usdAcctngIfOutSchedulerDropOctets=usdAcctngIfOutSchedulerDropOctets, usdAcctngIfTimeOffset=usdAcctngIfTimeOffset, usdAcctngIfOutUcastPkts=usdAcctngIfOutUcastPkts, usdAcctngInterfaceOperStatus=usdAcctngInterfaceOperStatus, usdAcctngRedPackets=usdAcctngRedPackets, usdAcctngBasicGroup2=usdAcctngBasicGroup2, usdAcctngifInBroadcastPkts=usdAcctngifInBroadcastPkts, usdAcctngSelectionTable=usdAcctngSelectionTable, usdAcctngCompliance2=usdAcctngCompliance2, usdAcctngFileControl=usdAcctngFileControl, usdAcctngIfInPolicedOctets=usdAcctngIfInPolicedOctets, usdAcctngInterfaceAccntgFileIndex=usdAcctngInterfaceAccntgFileIndex, usdAcctngSelectionMode=usdAcctngSelectionMode, usdAcctngFileTable=usdAcctngFileTable, usdAcctngSelectionType=usdAcctngSelectionType, usdAcctngIfOutPolicedOctets=usdAcctngIfOutPolicedOctets, usdAcctngInterfaceRowStatus=usdAcctngInterfaceRowStatus, usdAcctngUpperYellowBytes=usdAcctngUpperYellowBytes, usdAcctngIfInDiscards=usdAcctngIfInDiscards, usdAcctngFileXferMode=usdAcctngFileXferMode, usdAcctngSelectionSubtreeType=usdAcctngSelectionSubtreeType, usdAcctngSelectionSchemaIfStack=usdAcctngSelectionSchemaIfStack, usdAcctngSelectionSchema=usdAcctngSelectionSchema, usdAcctngUpperGreenBytes=usdAcctngUpperGreenBytes, usdAcctngCompliances=usdAcctngCompliances, usdAcctngIfOutPolicedPkts=usdAcctngIfOutPolicedPkts, usdAcctngInterfaceAdminStatus=usdAcctngInterfaceAdminStatus, usdAcctngIfOutOctets=usdAcctngIfOutOctets, usdAcctngFileEntry=usdAcctngFileEntry, usdAcctngFileXferIndex=usdAcctngFileXferIndex, usdAcctngGreenBytes=usdAcctngGreenBytes, usdAcctngIfOutDiscards=usdAcctngIfOutDiscards)
