#
# PySNMP MIB module PCA-Alert-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCA-Alert-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, enterprises, iso, Counter32, NotificationType, IpAddress, ModuleIdentity, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, MibIdentifier, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "enterprises", "iso", "Counter32", "NotificationType", "IpAddress", "ModuleIdentity", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "MibIdentifier", "NotificationType", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
symantec = MibIdentifier((1, 3, 6, 1, 4, 1, 393))
pcanywhere = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100))
pcaversionnine = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9))
pcaHost = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 1))
pcaRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 2))
pcaFileXfer = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 3))
pcaGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 4))
pcaMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 5))
pcaInstall = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 6))
pcaReset = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 7))
pcaLDAP = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 8))
pcaObject = MibIdentifier((1, 3, 6, 1, 4, 1, 393, 100, 9, 9))
hostComputerName = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostComputerName.setStatus('optional')
if mibBuilder.loadTexts: hostComputerName.setDescription('The computer that is running the PCA Host')
remoteComputerName = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteComputerName.setStatus('optional')
if mibBuilder.loadTexts: remoteComputerName.setDescription('The computer that is running the PCA Remote')
callerName = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerName.setStatus('optional')
if mibBuilder.loadTexts: callerName.setDescription('The name of the remote caller.')
hostConnectionObject = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConnectionObject.setStatus('optional')
if mibBuilder.loadTexts: hostConnectionObject.setDescription('The name of the connection object used to start the PCA Host')
remoteConnectionObject = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteConnectionObject.setStatus('optional')
if mibBuilder.loadTexts: remoteConnectionObject.setDescription('The name of the connection object used to start the PCA Remote')
xferFiles = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferFiles.setStatus('optional')
if mibBuilder.loadTexts: xferFiles.setDescription('Number of files transferred by file transfer')
xferBytes = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferBytes.setStatus('optional')
if mibBuilder.loadTexts: xferBytes.setDescription('Number of bytes transferred by this file transfer operation')
xferOperation = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferOperation.setStatus('optional')
if mibBuilder.loadTexts: xferOperation.setDescription('The operation last performed by file transfer')
xferVirusFlag = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferVirusFlag.setStatus('optional')
if mibBuilder.loadTexts: xferVirusFlag.setDescription('This is the file transfer virus flag.')
xferSourceFile = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferSourceFile.setStatus('optional')
if mibBuilder.loadTexts: xferSourceFile.setDescription('The name of the source file in a file transfer operation')
xferDestFile = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xferDestFile.setStatus('optional')
if mibBuilder.loadTexts: xferDestFile.setDescription('The name of the destination file in a file transfer operation')
hostEncryptionLevel = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostEncryptionLevel.setStatus('optional')
if mibBuilder.loadTexts: hostEncryptionLevel.setDescription('The desired encryption level of the PCA Host')
remoteEncryptionLevel = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteEncryptionLevel.setStatus('optional')
if mibBuilder.loadTexts: remoteEncryptionLevel.setDescription('The desired encryption level of the PCA Remote')
hostEndedReason = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostEndedReason.setStatus('optional')
if mibBuilder.loadTexts: hostEndedReason.setDescription('The reason a PCA Host was terminated')
deviceType = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('optional')
if mibBuilder.loadTexts: deviceType.setDescription('This represents the type of device in which a connection was made.')
xFerFailedFlag = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xFerFailedFlag.setStatus('optional')
if mibBuilder.loadTexts: xFerFailedFlag.setDescription('This flag will be set if a file transfer event had failed.')
encryptionErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionErrorMessage.setStatus('optional')
if mibBuilder.loadTexts: encryptionErrorMessage.setDescription('Encryption error message')
p3SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p3SerialNumber.setStatus('optional')
if mibBuilder.loadTexts: p3SerialNumber.setDescription('Processor serial number')
systemName = MibScalar((1, 3, 6, 1, 4, 1, 393, 100, 9, 9, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemName.setStatus('optional')
if mibBuilder.loadTexts: systemName.setDescription('Name of the system generating the event.')
pcaHostStarted = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,1)).setObjects(("PCA-Alert-MIB", "deviceType"), ("PCA-Alert-MIB", "hostConnectionObject"), ("PCA-Alert-MIB", "p3SerialNumber"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostStarted.setDescription('PCA Host was started')
pcaHostEndSession = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,2)).setObjects(("PCA-Alert-MIB", "hostEndedReason"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostEndSession.setDescription('PCA Host has shut down')
pcaHostAbnormalEnd = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,3))
if mibBuilder.loadTexts: pcaHostAbnormalEnd.setDescription('PCA Host has shut down abnormally')
pcaHostConnFailDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,4)).setObjects(("PCA-Alert-MIB", "deviceType"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostConnFailDeviceError.setDescription('PCA Host connection failed - device error')
pcaHostStopped = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,5)).setObjects(("PCA-Alert-MIB", "hostEndedReason"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostStopped.setDescription('PCA Host was stopped')
pcaHostInSession = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,6)).setObjects(("PCA-Alert-MIB", "remoteComputerName"), ("PCA-Alert-MIB", "callerName"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostInSession.setDescription('PCA Host is in session')
pcaHostConnFailAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,7)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostConnFailAccessDenied.setDescription('PCA Host connection failed - access denied')
pcaHostConnFailEncrypt = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,8)).setObjects(("PCA-Alert-MIB", "encryptionErrorMessage"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostConnFailEncrypt.setDescription('PCA Host connection failed - encryption error')
pcaHostUnsecuredHostStarted = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,9)).setObjects(("PCA-Alert-MIB", "hostConnectionObject"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostUnsecuredHostStarted.setDescription('Unsecure launch of PCA Host')
pcaHostRebooting = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,10)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostRebooting.setDescription('PCA Host rebooting the system')
pcaHostLockingWorkstation = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,11)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostLockingWorkstation.setDescription('PCA Host locking workstation')
pcaHostLoggingOffUser = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 1) + (0,12)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaHostLoggingOffUser.setDescription('PCA Host is logging off the current user')
pcaRemoteStarted = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,1)).setObjects(("PCA-Alert-MIB", "deviceType"), ("PCA-Alert-MIB", "remoteConnectionObject"), ("PCA-Alert-MIB", "p3SerialNumber"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteStarted.setDescription('PCA Remote was started')
pcaRemoteInSession = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,2)).setObjects(("PCA-Alert-MIB", "hostComputerName"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteInSession.setDescription('PCA Remote is in session')
pcaRemoteEndSession = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,3)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteEndSession.setDescription('PCA Remote has ended the session')
pcaRemoteAbnormalEndSession = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,4)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteAbnormalEndSession.setDescription('PCA Remote has ended the session abnormally')
pcaRemoteConnFailDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,5)).setObjects(("PCA-Alert-MIB", "deviceType"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteConnFailDeviceError.setDescription('PCA Remote connection failure - device error')
pcaRemoteConnFailHostBusy = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,6)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteConnFailHostBusy.setDescription('PCA Remote connection failure - host busy')
pcaRemoteConnFailHostNotFound = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,7)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteConnFailHostNotFound.setDescription('PCA Remote connection failure - host not found')
pcaRemoteConnFailBadPassword = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,8)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteConnFailBadPassword.setDescription('PCA Remote connection failure - bad password')
pcaRemoteConnFailEncryption = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 2) + (0,9)).setObjects(("PCA-Alert-MIB", "encryptionErrorMessage"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaRemoteConnFailEncryption.setDescription('PCA Remote connection failure - encryption error')
pcaFileXferStarted = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 3) + (0,1)).setObjects(("PCA-Alert-MIB", "hostComputerName"), ("PCA-Alert-MIB", "remoteComputerName"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaFileXferStarted.setDescription('PCA File Transfer started')
pcaFileXferEnded = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 3) + (0,2)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaFileXferEnded.setDescription('PCA File Transfer ended')
pcaFileXferAbnormalEnd = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 3) + (0,3)).setObjects(("PCA-Alert-MIB", "hostComputerName"), ("PCA-Alert-MIB", "remoteComputerName"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaFileXferAbnormalEnd.setDescription('PCA File Transfer ended abnormally')
pcaFileXferOperationCancelled = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 3) + (0,4)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaFileXferOperationCancelled.setDescription('PCA File Transfer operation cancelled')
pcaFileXferOperation = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 3) + (0,5)).setObjects(("PCA-Alert-MIB", "xferOperation"), ("PCA-Alert-MIB", "xferSourceFile"), ("PCA-Alert-MIB", "xferDestFile"), ("PCA-Alert-MIB", "xferBytes"), ("PCA-Alert-MIB", "xferVirusFlag"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaFileXferOperation.setDescription('PCA File Transfer detailed operation notice')
pcaFileXferVirusFound = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 3) + (0,6)).setObjects(("PCA-Alert-MIB", "xferSourceFile"), ("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaFileXferVirusFound.setDescription('PCA File Transfer has detected a virus.')
pcaMonitorFullProductNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 5) + (0,1)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaMonitorFullProductNotInstalled.setDescription('PCA Monitor - The PCA Full product is not installed')
pcaMonitorHostNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 5) + (0,2)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaMonitorHostNotInstalled.setDescription('PCA Monitor - The PCA Host is not installed')
pcaMonitorRemoteNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 5) + (0,3)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaMonitorRemoteNotInstalled.setDescription('PCA Monitor - The PCA Remote is not installed')
pcaMonitorHostNotWaiting = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 5) + (0,4)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaMonitorHostNotWaiting.setDescription('PCA Monitor - The PCA Host is not waiting for a connection')
pcaMonitorHostNotAutoStart = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 5) + (0,5)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaMonitorHostNotAutoStart.setDescription('PCA Monitor - The PCA Host is not set to auto start')
pcaMonitorHostNotWaitingOnDialup = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 5) + (0,6)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaMonitorHostNotWaitingOnDialup.setDescription('PCA Monitor - The PCA Host is not waiting on a dialup')
pcaMonitorHostLanOnlyNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 5) + (0,7)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaMonitorHostLanOnlyNotInstalled.setDescription('PCA Monitor - The PCA Host LAN only is not installed')
pcaMonitorLiveUpdateNotRun = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 5) + (0,8)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaMonitorLiveUpdateNotRun.setDescription('PCA Monitor - Live Update was not run on this host')
pcaResetNotInstalledReset = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 7) + (0,1)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaResetNotInstalledReset.setDescription('PCA Monitor - Reset install traps')
pcaResetHostNotWaitingReset = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 7) + (0,2)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaResetHostNotWaitingReset.setDescription('PCA Monitor - Reset Host not waiting traps')
pcaResetHostNotAutoStartReset = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 7) + (0,3)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaResetHostNotAutoStartReset.setDescription('PCA Monitor - Reset Host not auto start traps')
pcaResetHostWaitingOnDialupReset = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 7) + (0,4)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaResetHostWaitingOnDialupReset.setDescription('PCA Monitor - Reset Host waiting on dialup traps')
pcaResetLiveUpdateNotRunReset = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 7) + (0,5)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaResetLiveUpdateNotRunReset.setDescription('PCA Monitor - Reset Live Update not run traps')
pcaInstallRebootRequired = NotificationType((1, 3, 6, 1, 4, 1, 393, 100, 9, 6) + (0,1)).setObjects(("PCA-Alert-MIB", "systemName"))
if mibBuilder.loadTexts: pcaInstallRebootRequired.setDescription('PCA Install - A reboot is required')
mibBuilder.exportSymbols("PCA-Alert-MIB", pcaRemoteAbnormalEndSession=pcaRemoteAbnormalEndSession, pcaResetLiveUpdateNotRunReset=pcaResetLiveUpdateNotRunReset, hostComputerName=hostComputerName, p3SerialNumber=p3SerialNumber, pcaReset=pcaReset, pcaHostInSession=pcaHostInSession, systemName=systemName, pcaHostConnFailAccessDenied=pcaHostConnFailAccessDenied, pcaHostConnFailEncrypt=pcaHostConnFailEncrypt, pcaFileXferAbnormalEnd=pcaFileXferAbnormalEnd, remoteConnectionObject=remoteConnectionObject, pcaRemoteConnFailBadPassword=pcaRemoteConnFailBadPassword, pcaRemoteInSession=pcaRemoteInSession, pcaHostUnsecuredHostStarted=pcaHostUnsecuredHostStarted, pcaFileXferOperationCancelled=pcaFileXferOperationCancelled, pcaRemoteConnFailDeviceError=pcaRemoteConnFailDeviceError, hostEndedReason=hostEndedReason, pcaHostEndSession=pcaHostEndSession, pcaFileXfer=pcaFileXfer, pcaRemoteConnFailHostNotFound=pcaRemoteConnFailHostNotFound, pcaMonitorHostLanOnlyNotInstalled=pcaMonitorHostLanOnlyNotInstalled, remoteEncryptionLevel=remoteEncryptionLevel, xFerFailedFlag=xFerFailedFlag, xferFiles=xferFiles, pcaMonitorFullProductNotInstalled=pcaMonitorFullProductNotInstalled, xferSourceFile=xferSourceFile, pcaObject=pcaObject, pcaGateway=pcaGateway, hostConnectionObject=hostConnectionObject, pcaversionnine=pcaversionnine, hostEncryptionLevel=hostEncryptionLevel, pcaHostConnFailDeviceError=pcaHostConnFailDeviceError, pcaHostLoggingOffUser=pcaHostLoggingOffUser, pcaMonitorHostNotWaiting=pcaMonitorHostNotWaiting, xferDestFile=xferDestFile, pcaRemote=pcaRemote, pcaInstall=pcaInstall, pcaFileXferVirusFound=pcaFileXferVirusFound, pcaHostAbnormalEnd=pcaHostAbnormalEnd, pcaFileXferOperation=pcaFileXferOperation, pcaMonitorHostNotInstalled=pcaMonitorHostNotInstalled, xferVirusFlag=xferVirusFlag, pcaHostLockingWorkstation=pcaHostLockingWorkstation, pcaMonitorLiveUpdateNotRun=pcaMonitorLiveUpdateNotRun, pcaRemoteEndSession=pcaRemoteEndSession, pcaHostRebooting=pcaHostRebooting, symantec=symantec, pcaHostStarted=pcaHostStarted, pcaHostStopped=pcaHostStopped, pcaMonitor=pcaMonitor, callerName=callerName, pcaFileXferStarted=pcaFileXferStarted, pcaResetNotInstalledReset=pcaResetNotInstalledReset, pcaRemoteStarted=pcaRemoteStarted, pcaResetHostNotAutoStartReset=pcaResetHostNotAutoStartReset, pcaLDAP=pcaLDAP, pcaRemoteConnFailHostBusy=pcaRemoteConnFailHostBusy, pcaFileXferEnded=pcaFileXferEnded, pcanywhere=pcanywhere, pcaMonitorHostNotWaitingOnDialup=pcaMonitorHostNotWaitingOnDialup, remoteComputerName=remoteComputerName, pcaResetHostNotWaitingReset=pcaResetHostNotWaitingReset, xferOperation=xferOperation, pcaMonitorHostNotAutoStart=pcaMonitorHostNotAutoStart, pcaResetHostWaitingOnDialupReset=pcaResetHostWaitingOnDialupReset, xferBytes=xferBytes, encryptionErrorMessage=encryptionErrorMessage, pcaRemoteConnFailEncryption=pcaRemoteConnFailEncryption, pcaHost=pcaHost, pcaInstallRebootRequired=pcaInstallRebootRequired, deviceType=deviceType, pcaMonitorRemoteNotInstalled=pcaMonitorRemoteNotInstalled)
