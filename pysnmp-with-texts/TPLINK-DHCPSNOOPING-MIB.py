#
# PySNMP MIB module TPLINK-DHCPSNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-DHCPSNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:24:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Gauge32, IpAddress, Counter32, Bits, ModuleIdentity, Counter64, iso, MibIdentifier, ObjectIdentity, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Gauge32", "IpAddress", "Counter32", "Bits", "ModuleIdentity", "Counter64", "iso", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
tplinkDhcpSnoopingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 27))
tplinkDhcpSnoopingMIB.setRevisions(('2012-12-17 10:14',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkDhcpSnoopingMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkDhcpSnoopingMIB.setLastUpdated('201212171014Z')
if mibBuilder.loadTexts: tplinkDhcpSnoopingMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkDhcpSnoopingMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkDhcpSnoopingMIB.setDescription('Private MIB for DHCP Snooping configuration.')
tplinkDhcpSnoopingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1))
tplinkDhcpSnoopingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 27, 2))
dhcpSnoopingGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 1))
dhcpSnoopingOption82Config = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2))
dhcpSnoopingPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3))
dhcpSnoopingEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingEnable.setDescription('0. disable 1. enable Enable or disable the DHCP Snooping function globally.')
dhcpSnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 1, 2), )
if mibBuilder.loadTexts: dhcpSnoopingVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanConfigTable.setDescription('Here you can view and modify the DHCP Snooping VLAN config table.')
dhcpSnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 1, 2, 1), ).setIndexNames((0, "TPLINK-DHCPSNOOPING-MIB", "dhcpSnoopingVlanId"))
if mibBuilder.loadTexts: dhcpSnoopingVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanConfigEntry.setDescription('An entry contains of the DHCP Snooping function enable status information of a VLAN.')
dhcpSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanId.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanId.setDescription('Enter the ID number of VLAN,1-4094.')
dhcpSnoopingVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanStatus.setDescription('0. disable 1. enable Enable or disable DHCP Snooping function in specified VLAN. ')
dhcpSnoopingOption82ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1), )
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigTable.setDescription('A list of DHCP Snooping option 82 config entries. Here you can configure the port parameters for the DHCP Snooping option 82 feature.')
dhcpSnoopingOption82ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigEntry.setDescription('An entry contains of the information of dhcp snooping option 82 config.')
dhcpSnoopingOption82ConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigPort.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigPort.setDescription('Port number')
dhcpSnoopingOption82ConfigSupportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigSupportStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigSupportStatus.setDescription('0. disable 1. enable Select Enable/Disable the port to support the Option 82 feature. ')
dhcpSnoopingOption82ConfigOperationStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("keep", 0), ("replace", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigOperationStrategy.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigOperationStrategy.setDescription('Select the operation for the Option 82 filed of the DHCP request packets from the Host. 0. keep: Indicates to keep the Option 82 field of the packets. 1. replace: Indicates to replace the Option 82 field of the packets with the switch defined one. 2. drop: Indicates to discard the packets including the Option 82 field.')
dhcpSnoopingOption82ConfigCircuitCustomization = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigCircuitCustomization.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigCircuitCustomization.setDescription('0. disable 1. enable Enable/Disable the switch to define the Option 82 circuit id.')
dhcpSnoopingOption82ConfigCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigCircuitID.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigCircuitID.setDescription('The sub-option Circuit ID for the customized Option 82.(1-64 characters)')
dhcpSnoopingOption82ConfigRemoteCustomization = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigRemoteCustomization.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigRemoteCustomization.setDescription('0. disable 1. enable Enable/Disable the switch to define the Option 82 remote id. ')
dhcpSnoopingOption82ConfigRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigRemoteID.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigRemoteID.setDescription('The sub-option Remote ID for the customized Option 82.(1-64 characters)')
dhcpSnoopingOption82ConfigLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigLag.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82ConfigLag.setDescription('The LAG to which the port belongs to.')
dhcpSnoopingPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3, 1), )
if mibBuilder.loadTexts: dhcpSnoopingPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigTable.setDescription('A list of DHCP Snooping port config entries. Here you can configure the port parameters for the DHCP Snooping.')
dhcpSnoopingPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopingPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigEntry.setDescription('An entry contains of the information of DHCP Snooping port config.')
dhcpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPort.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPort.setDescription('Display port number')
dhcpSnoopingPortConfigTrustedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPortConfigTrustedPort.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigTrustedPort.setDescription('0. disable 1. enable Select Enable/Disable the port to be a Trusted Port. Only the Trusted Port can receive the DHCP packets from DHCP servers.')
dhcpSnoopingPortConfigMacVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPortConfigMacVerify.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigMacVerify.setDescription('0. disable 1. enable Select Enable/Disable the MAC Verify feature. There are two fields of the DHCP packet containing the MAC address of the Host. The MAC Verify feature is to compare the two fields and discard the packet if the two fields are different. ')
dhcpSnoopingPortConfigRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 10, 15, 20, 25, 30))).clone(namedValues=NamedValues(("disable", 0), ("value5pps", 5), ("value10pps", 10), ("value15pps", 15), ("value20pps", 20), ("value25pps", 25), ("value30pps", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPortConfigRateLimit.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigRateLimit.setDescription('0. disable 1. 5pps 2. 10pps 3. 15pps 4. 20pps 5. 25pps 6. 30pps Select Enable/Disable the Flow Control feature for the DHCP packets. The excessive DHCP packets will be discarded. ')
dhcpSnoopingPortConfigDeclineRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 10, 15, 20, 25, 30))).clone(namedValues=NamedValues(("disable", 0), ("value5pps", 5), ("value10pps", 10), ("value15pps", 15), ("value20pps", 20), ("value25pps", 25), ("value30pps", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPortConfigDeclineRateLimit.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigDeclineRateLimit.setDescription('0. disable 1. 5pps 2. 10pps 3. 15pps 4. 20pps 5. 25pps 6. 30pps Select Enable/Disable the Flow Control feature for the DHCP decline packets. The excessive DHCP decline packets will be discarded. ')
dhcpSnoopingPortConfigPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 27, 1, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortConfigPortLag.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortConfigPortLag.setDescription('The LAG to which the port belongs to.')
mibBuilder.exportSymbols("TPLINK-DHCPSNOOPING-MIB", dhcpSnoopingPortConfig=dhcpSnoopingPortConfig, dhcpSnoopingPortConfigTable=dhcpSnoopingPortConfigTable, dhcpSnoopingPortConfigPortLag=dhcpSnoopingPortConfigPortLag, tplinkDhcpSnoopingMIBObjects=tplinkDhcpSnoopingMIBObjects, dhcpSnoopingOption82ConfigCircuitCustomization=dhcpSnoopingOption82ConfigCircuitCustomization, dhcpSnoopingOption82ConfigRemoteCustomization=dhcpSnoopingOption82ConfigRemoteCustomization, dhcpSnoopingEnable=dhcpSnoopingEnable, dhcpSnoopingPortConfigMacVerify=dhcpSnoopingPortConfigMacVerify, dhcpSnoopingVlanConfigEntry=dhcpSnoopingVlanConfigEntry, PYSNMP_MODULE_ID=tplinkDhcpSnoopingMIB, dhcpSnoopingVlanId=dhcpSnoopingVlanId, dhcpSnoopingOption82Config=dhcpSnoopingOption82Config, dhcpSnoopingPortConfigTrustedPort=dhcpSnoopingPortConfigTrustedPort, dhcpSnoopingGlobalConfig=dhcpSnoopingGlobalConfig, dhcpSnoopingVlanConfigTable=dhcpSnoopingVlanConfigTable, tplinkDhcpSnoopingNotifications=tplinkDhcpSnoopingNotifications, dhcpSnoopingPortConfigEntry=dhcpSnoopingPortConfigEntry, dhcpSnoopingOption82ConfigCircuitID=dhcpSnoopingOption82ConfigCircuitID, dhcpSnoopingPort=dhcpSnoopingPort, dhcpSnoopingOption82ConfigTable=dhcpSnoopingOption82ConfigTable, dhcpSnoopingOption82ConfigPort=dhcpSnoopingOption82ConfigPort, dhcpSnoopingOption82ConfigLag=dhcpSnoopingOption82ConfigLag, dhcpSnoopingOption82ConfigRemoteID=dhcpSnoopingOption82ConfigRemoteID, dhcpSnoopingOption82ConfigOperationStrategy=dhcpSnoopingOption82ConfigOperationStrategy, tplinkDhcpSnoopingMIB=tplinkDhcpSnoopingMIB, dhcpSnoopingPortConfigDeclineRateLimit=dhcpSnoopingPortConfigDeclineRateLimit, dhcpSnoopingOption82ConfigEntry=dhcpSnoopingOption82ConfigEntry, dhcpSnoopingPortConfigRateLimit=dhcpSnoopingPortConfigRateLimit, dhcpSnoopingOption82ConfigSupportStatus=dhcpSnoopingOption82ConfigSupportStatus, dhcpSnoopingVlanStatus=dhcpSnoopingVlanStatus)
