#
# PySNMP MIB module MPLS-FRR-ONE2ONE-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-FRR-ONE2ONE-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:14:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
mplsFrrGeneralScalarGroup, mplsFrrGeneralTunnelARHopGroup, mplsFrrGeneralConstraintsGroup = mibBuilder.importSymbols("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralScalarGroup", "mplsFrrGeneralTunnelARHopGroup", "mplsFrrGeneralConstraintsGroup")
MplsLsrIdentifier, MplsTunnelInstanceIndex, MplsTunnelIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLsrIdentifier", "MplsTunnelInstanceIndex", "MplsTunnelIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Unsigned32, NotificationType, ObjectIdentity, Counter32, IpAddress, TimeTicks, Bits, iso, Counter64, Integer32, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Unsigned32", "NotificationType", "ObjectIdentity", "Counter32", "IpAddress", "TimeTicks", "Bits", "iso", "Counter64", "Integer32", "MibIdentifier", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
mplsFrrOne2OneMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 203))
mplsFrrOne2OneMIB.setRevisions(('2011-11-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mplsFrrOne2OneMIB.setRevisionsDescriptions(('Initial version. Published as RFC 6445.',))
if mibBuilder.loadTexts: mplsFrrOne2OneMIB.setLastUpdated('201111030000Z')
if mibBuilder.loadTexts: mplsFrrOne2OneMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
if mibBuilder.loadTexts: mplsFrrOne2OneMIB.setContactInfo(' Riza Cetin Email: riza.cetin@alcatel.be Thomas D. Nadeau Email: thomas.nadeau@ca.com A S Kiran Koushik Email: kkoushik@cisco.com Stefaan De Cnodder Email: Stefaan.de_cnodder@alcatel.be Der-Hwa Gan Email: dhg@juniper.net ')
if mibBuilder.loadTexts: mplsFrrOne2OneMIB.setDescription("Copyright (c) 2011 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info). This MIB module contains object definitions for the MPLS Traffic Engineering one-to-one backup method for Fast Reroute as defined in RFC 4090.")
mplsFrrOne2OneObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 203, 1))
mplsFrrOne2OneConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 203, 2))
mplsFrrIncomingDetourLSPs = MibScalar((1, 3, 6, 1, 2, 1, 203, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrIncomingDetourLSPs.setStatus('current')
if mibBuilder.loadTexts: mplsFrrIncomingDetourLSPs.setDescription('The number of detour LSPs entering the device.')
mplsFrrOutgoingDetourLSPs = MibScalar((1, 3, 6, 1, 2, 1, 203, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOutgoingDetourLSPs.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOutgoingDetourLSPs.setDescription('The number of detour LSPs leaving the device.')
mplsFrrOne2OneDetourOriginating = MibScalar((1, 3, 6, 1, 2, 1, 203, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OneDetourOriginating.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneDetourOriginating.setDescription('The number of detour LSPs originating at this PLR.')
mplsFrrActiveProtectedLSPs = MibScalar((1, 3, 6, 1, 2, 1, 203, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrActiveProtectedLSPs.setStatus('current')
if mibBuilder.loadTexts: mplsFrrActiveProtectedLSPs.setDescription('Indicates the number of LSPs currently protected by the FRR feature where this device acts as the PLR for those LSPs.')
mplsFrrOne2OnePlrTable = MibTable((1, 3, 6, 1, 2, 1, 203, 1, 5), )
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTable.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTable.setDescription('This table shows a list of protected TE tunnels with the corresponding protecting tunnel, as well as the PLR where the protecting tunnel that initiated the detour LSPs traverses this node.')
mplsFrrOne2OnePlrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 203, 1, 5, 1), ).setIndexNames((0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelIndex"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelDetourInstance"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelIngressLSRId"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelEgressLSRId"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrId"))
if mibBuilder.loadTexts: mplsFrrOne2OnePlrEntry.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrEntry.setDescription('An entry in this table represents a protected tunnel LSP together with its detour tunnel instance. An entry in this table is only created by an SNMP engine as instructed by an MPLS signaling protocol. The entries of this table are present in all LSRs on the path of the detour LSP. The objects mplsFrrOne2OnePlrSenderAddrType and mplsFrrOne2OnePlrSenderAddr can be modified after the row is created. The objects mplsFrrOne2OnePlrTunnelIndex, mplsFrrOne2OnePlrTunnelDetourInstance, mplsFrrOne2OnePlrTunnelIngressLSRId, and mplsFrrOne2OnePlrTunnelEgressLSRId have the same values as the objects mplsTunnelIndex, mplsTunnelInstance, mplsTunnelIngressLSRId, and mplsTunnelEgressLSRId of the detour tunnel instance created in the mplsTunnelTable (MPLS-TE-STD-MIB). The entries in this table will be deleted when the corresponding entries in the mplsTunnelTable are deleted.')
mplsFrrOne2OnePlrTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelIndex.setDescription('Uniquely identifies a tunnel between a pair of LSRs from the mplsTunnelEntry.')
mplsFrrOne2OnePlrTunnelDetourInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelDetourInstance.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelDetourInstance.setDescription('Uniquely identifies a detour instance of a tunnel from the mplsTunnelEntry. - lower 16 bits : protected tunnel instance - higher 16 bits: detour instance')
mplsFrrOne2OnePlrTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 3), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelIngressLSRId.setReference('Section 4.7 of RFC 3209.')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelIngressLSRId.setDescription('The purpose of this object is to uniquely identify a tunnel within a network. When the MPLS signaling protocol is rsvp(2), this object SHOULD contain the same value as the Extended Tunnel ID field in the SESSION object. When the MPLS signaling protocol is crldp(3), this object SHOULD contain the same value as the Ingress LSR Router ID field in the LSPID TLV object. This value represents the head-end of the protected tunnel instance.')
mplsFrrOne2OnePlrTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 4), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrTunnelEgressLSRId.setDescription('Specifies the egress LSR ID of the protected tunnel instance.')
mplsFrrOne2OnePlrId = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 5), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsFrrOne2OnePlrId.setReference('Section 4.2 of RFC 4090.')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrId.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrId.setDescription('This value represents the PLR that has initiated a detour LSP to protect a tunnel instance. This value is signaled via the DETOUR object defined in MPLS RSVP.')
mplsFrrOne2OnePlrSenderAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 6), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsFrrOne2OnePlrSenderAddrType.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrSenderAddrType.setDescription("Denotes the address type of this detour instance's sender address.")
mplsFrrOne2OnePlrSenderAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsFrrOne2OnePlrSenderAddr.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrSenderAddr.setDescription('The IP address of the PLR that has initiated the detour LSP. The type of this address is determined by the value of the mplsFrrOne2OnePlrSenderAddrType object.')
mplsFrrOne2OnePlrAvoidNodeAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 8), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OnePlrAvoidNodeAddrType.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrAvoidNodeAddrType.setDescription('Denotes the address type of the node that this PLR tries to avoid.')
mplsFrrOne2OnePlrAvoidNodeAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 5, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OnePlrAvoidNodeAddr.setReference('Section 4.2 of RFC 4090.')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrAvoidNodeAddr.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrAvoidNodeAddr.setDescription('The IP address of the node that this PLR tries to avoid. The type of this address is determined by the value of the mplsFrrOne2OnePlrAvoidNodeAddrType object. This value is signaled via the DETOUR object defined in MPLS RSVP.')
mplsFrrOne2OneDetourTable = MibTable((1, 3, 6, 1, 2, 1, 203, 1, 6), )
if mibBuilder.loadTexts: mplsFrrOne2OneDetourTable.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneDetourTable.setDescription('This table shows detour LSPs.')
mplsFrrOne2OneDetourEntry = MibTableRow((1, 3, 6, 1, 2, 1, 203, 1, 6, 1), ).setIndexNames((0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelIndex"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelDetourInstance"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelIngressLSRId"), (0, "MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrTunnelEgressLSRId"))
if mibBuilder.loadTexts: mplsFrrOne2OneDetourEntry.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneDetourEntry.setDescription('An entry in this table represents a detour. An entry in this table is only created by an SNMP engine as instructed by an MPLS signaling protocol.')
mplsFrrOne2OneDetourActive = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OneDetourActive.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneDetourActive.setDescription("Indicates whether or not the main LSP has switched over to this detour LSP. If the value of this object is 'true', then it means that the main LSP has switched over to this detour LSP. Otherwise, it contains a value of 'false'. This is only relevant for detours originated by this node.")
mplsFrrOne2OneDetourMergedStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notMerged", 1), ("mergedWithProtectedTunnel", 2), ("mergedWithDetour", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OneDetourMergedStatus.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneDetourMergedStatus.setDescription('This value represents whether or not this detour is merged. This value is set to notMerged(1) if this detour is not merged. This value is set to mergedWithProtectedTunnel(2) if this detour is merged with the protected tunnel. This value is mergedWithDetour(3) if this detour is merged with another detour protecting the same tunnel.')
mplsFrrOne2OneDetourMergedDetourInst = MibTableColumn((1, 3, 6, 1, 2, 1, 203, 1, 6, 1, 3), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrOne2OneDetourMergedDetourInst.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneDetourMergedDetourInst.setDescription('This value represents the mplsTunnelInstance of the detour with which this detour is merged. This object is only valid when mplsFrrOne2OneDetourMergedStatus is set to mergedWithDetour(3). - lower 16 bits : protected tunnel instance - higher 16 bits: detour instance')
mplsFrrOne2OneCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 203, 2, 1))
mplsFrrOne2OneGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 203, 2, 2))
mplsFrrOne2OneModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 203, 2, 1, 1)).setObjects(("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralScalarGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneScalarsGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePLRDetourGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OneModuleFullCompliance = mplsFrrOne2OneModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneModuleFullCompliance.setDescription('Compliance statements for SNMP engines that support the MPLS-FRR-ONE2ONE-STD-MIB module.')
mplsFrrOne2OneModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 203, 2, 1, 2)).setObjects(("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneScalarsGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePLRDetourGroup"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OneModuleReadOnlyCompliance = mplsFrrOne2OneModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneModuleReadOnlyCompliance.setDescription('Compliance statements for SNMP engines that support the MPLS-FRR-ONE2ONE-STD-MIB module.')
mplsFrrOne2OneScalarsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 203, 2, 2, 1)).setObjects(("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrIncomingDetourLSPs"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOutgoingDetourLSPs"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneDetourOriginating"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrActiveProtectedLSPs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OneScalarsGroup = mplsFrrOne2OneScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OneScalarsGroup.setDescription('Objects that are required for general One-to-One PLR information.')
mplsFrrOne2OnePLRDetourGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 203, 2, 2, 2)).setObjects(("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneDetourActive"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneDetourMergedStatus"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OneDetourMergedDetourInst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OnePLRDetourGroup = mplsFrrOne2OnePLRDetourGroup.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePLRDetourGroup.setDescription('Objects that are required to present the detour LSP information at the detour ingress, transit, and egress LSRs.')
mplsFrrOne2OnePlrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 203, 2, 2, 3)).setObjects(("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrSenderAddrType"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrSenderAddr"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrAvoidNodeAddrType"), ("MPLS-FRR-ONE2ONE-STD-MIB", "mplsFrrOne2OnePlrAvoidNodeAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrOne2OnePlrGroup = mplsFrrOne2OnePlrGroup.setStatus('current')
if mibBuilder.loadTexts: mplsFrrOne2OnePlrGroup.setDescription('Objects that are required to represent the FRR One-to-One PLR information.')
mibBuilder.exportSymbols("MPLS-FRR-ONE2ONE-STD-MIB", mplsFrrOne2OnePLRDetourGroup=mplsFrrOne2OnePLRDetourGroup, mplsFrrOne2OnePlrEntry=mplsFrrOne2OnePlrEntry, mplsFrrOne2OneDetourActive=mplsFrrOne2OneDetourActive, mplsFrrOne2OnePlrTunnelDetourInstance=mplsFrrOne2OnePlrTunnelDetourInstance, mplsFrrOne2OnePlrId=mplsFrrOne2OnePlrId, mplsFrrOne2OnePlrTunnelEgressLSRId=mplsFrrOne2OnePlrTunnelEgressLSRId, mplsFrrOne2OnePlrAvoidNodeAddrType=mplsFrrOne2OnePlrAvoidNodeAddrType, mplsFrrOne2OneObjects=mplsFrrOne2OneObjects, mplsFrrOne2OneMIB=mplsFrrOne2OneMIB, mplsFrrOne2OneGroups=mplsFrrOne2OneGroups, mplsFrrOne2OnePlrTunnelIndex=mplsFrrOne2OnePlrTunnelIndex, mplsFrrOutgoingDetourLSPs=mplsFrrOutgoingDetourLSPs, mplsFrrOne2OneModuleReadOnlyCompliance=mplsFrrOne2OneModuleReadOnlyCompliance, mplsFrrOne2OnePlrSenderAddr=mplsFrrOne2OnePlrSenderAddr, mplsFrrOne2OneConformance=mplsFrrOne2OneConformance, mplsFrrOne2OneModuleFullCompliance=mplsFrrOne2OneModuleFullCompliance, mplsFrrActiveProtectedLSPs=mplsFrrActiveProtectedLSPs, mplsFrrIncomingDetourLSPs=mplsFrrIncomingDetourLSPs, mplsFrrOne2OneDetourMergedDetourInst=mplsFrrOne2OneDetourMergedDetourInst, mplsFrrOne2OneDetourTable=mplsFrrOne2OneDetourTable, mplsFrrOne2OnePlrTunnelIngressLSRId=mplsFrrOne2OnePlrTunnelIngressLSRId, mplsFrrOne2OnePlrGroup=mplsFrrOne2OnePlrGroup, mplsFrrOne2OnePlrAvoidNodeAddr=mplsFrrOne2OnePlrAvoidNodeAddr, mplsFrrOne2OneDetourOriginating=mplsFrrOne2OneDetourOriginating, mplsFrrOne2OneDetourMergedStatus=mplsFrrOne2OneDetourMergedStatus, PYSNMP_MODULE_ID=mplsFrrOne2OneMIB, mplsFrrOne2OneCompliances=mplsFrrOne2OneCompliances, mplsFrrOne2OnePlrSenderAddrType=mplsFrrOne2OnePlrSenderAddrType, mplsFrrOne2OneDetourEntry=mplsFrrOne2OneDetourEntry, mplsFrrOne2OnePlrTable=mplsFrrOne2OnePlrTable, mplsFrrOne2OneScalarsGroup=mplsFrrOne2OneScalarsGroup)
