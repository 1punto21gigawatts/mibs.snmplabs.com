#
# PySNMP MIB module CISCO-SNA-LLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SNA-LLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, IpAddress, ModuleIdentity, NotificationType, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, ObjectIdentity, Counter32, TimeTicks, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "ModuleIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "ObjectIdentity", "Counter32", "TimeTicks", "iso", "Gauge32")
TextualConvention, RowStatus, TimeStamp, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeStamp", "DisplayString", "MacAddress")
ciscoSnaLlcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 8))
ciscoSnaLlcMIB.setRevisions(('1995-05-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSnaLlcMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSnaLlcMIB.setLastUpdated('9505100000Z')
if mibBuilder.loadTexts: ciscoSnaLlcMIB.setOrganization('cisco IBM engineering Working Group')
if mibBuilder.loadTexts: ciscoSnaLlcMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSnaLlcMIB.setDescription('This is the MIB module for objects used to manage LLC devices.')
ciscoSnaLlcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 1))
llcPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1))
llcSapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2))
llcCcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3))
llcPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1), )
if mibBuilder.loadTexts: llcPortAdminTable.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminTable.setDescription('This table contains objects that can be changed to manage an LLC port. Changing one of these parameters may take effect in the operating port immediately or may wait until the interface is restarted depending on the details of the implementation.')
llcPortAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"))
if mibBuilder.loadTexts: llcPortAdminEntry.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminEntry.setDescription('A list of configured values for an LLC port.')
llcPortVirtualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: llcPortVirtualIndex.setStatus('current')
if mibBuilder.loadTexts: llcPortVirtualIndex.setDescription('This value represents a virtual LLC port. It is assigned by the agent. This value is set to 0 by the agent for interfaces identified by the ifIndex value that do not support virtual interfaces.')
llcPortAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminName.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminName.setDescription('An octet string that defines the virtual port to which this interface is assigned. Its value shall be unique within the administered system. It must contain only ASCII printable characters. A write operation shall not take effect until the port is cycled inactive.')
llcPortAdminMaxSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxSaps.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminMaxSaps.setDescription('This parameter specifies the maximum number of SAPs that can be defined for this port.')
llcPortAdminMaxCcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxCcs.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminMaxCcs.setDescription('This parameter specifies the maximum number of connection components that can be administratively defined for this port.')
llcPortAdminMaxPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 5), Integer32()).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxPDUOctets.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.8.3 Maximum Number of Octets in an I PDU, N1.')
if mibBuilder.loadTexts: llcPortAdminMaxPDUOctets.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminMaxPDUOctets.setDescription("This object denotes the default maximum I PDU size, in octets, that LLCs on this port may send to their remote LLC partners. This count is referred to as 'N1' in the IEEE 802.2 specification [5]. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxIPDUOctetsSend object or by a non-zero value in the llcCcAdminMaxIPDUOctetsSend object. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect this in the llcCcOperMaxIPDUOctetsSend object for the connection component. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link header.")
llcPortAdminMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsSend.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.8.4 Maximum Number of Outstanding I PDUs, k.')
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsSend.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsSend.setDescription("This object denotes the default maximum consecutive unacknowledged I PDU frames that LLCs on this port may send to their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [5]. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxUnackedIPDUsSend object or by a non-zero value in the llcCcAdminMaxUnackedIPDUsSend object. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamically learned value and should reflect this in the llcCcOperMaxUnackedIPDUsSend object for the connection component.")
llcPortAdminMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsRcv.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.8.4 Maximum Number of Outstanding I PDUs, k.')
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsRcv.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsRcv.setDescription("This object denotes the default maximum number of unacknowledged I PDUs that LLCs on this port can expect to receive from their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [5]. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxUnackedIPDUsRcv object or by a non-zero value in the llcCcAdminMaxUnackedIPDUsRcvd object. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame.")
llcPortAdminMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 8), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxRetransmits.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.8.2 Maximum Number of Transmissions, N2.')
if mibBuilder.loadTexts: llcPortAdminMaxRetransmits.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminMaxRetransmits.setDescription("This object denotes the default value for the maximum number of times which LLCs on this port shall retry a PDU following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [5]. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminMaxretransmits object or by a non-zero value in the llcCcAdminMaxRetransmits object.")
llcPortAdminAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 9), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminAckTimer.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.8.1.1 Acknowledgment Timer')
if mibBuilder.loadTexts: llcPortAdminAckTimer.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminAckTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the unacknowledged frames to be retransmitted (up to N2 times). For Implementations that only use a single 'T1' Value (ref. IBM Token-Ring Network technical reference Chapter 11). This object will be used to control/read the value. This port default value may be overridden by a non-zero value in the llcSapAdminAckTimer object or by a non-zero value in the llcCcAdminAckTimer object.")
llcPortAdminPbitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 10), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminPbitTimer.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.8.1.2 P-Bit Timer')
if mibBuilder.loadTexts: llcPortAdminPbitTimer.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminPbitTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the command with the poll bit to be retransmitted (up to N2 times). This port default value may be overridden by a non-zero SAP default value in the llcSapAdminPbitTimer object or by a non-zero value in the llcCcAdminPbitTimer object.")
llcPortAdminRejTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 11), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminRejTimer.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.8.1.3 Reject Timer')
if mibBuilder.loadTexts: llcPortAdminRejTimer.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminRejTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). This port default value may be overridden by a non-zero SAP default value in the llcSapAdminRejTimer object or by a non-zero value in the llcCcAdminRejTimer object.')
llcPortAdminBusyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 12), TimeTicks().clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminBusyTimer.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.8.1.4 Busy-State Timer')
if mibBuilder.loadTexts: llcPortAdminBusyTimer.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminBusyTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer shall cause the link to be declared inactive. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminBusyTimer object or by a non-zero value in the llcCcAdminBusyTimer object.')
llcPortAdminInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 13), TimeTicks().clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminInactTimer.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Inactivity Timer (Ti)')
if mibBuilder.loadTexts: llcPortAdminInactTimer.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminInactTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [5]. It is listed in the IBM Token-Ring Network Architecture [6] Reference as the Ti parameter and is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. The value for llcPortAdminInactTimer must be much greater than the value for llcPortAdminDelayAckTimer. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminInactTimer object or by a non-zero value in the llcCcAdminInactTimer object. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcPortAdminDelayAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 14), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminDelayAckCount.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Number of I-Format LPDUs Received before Sending Acknowledgment (N3)')
if mibBuilder.loadTexts: llcPortAdminDelayAckCount.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminDelayAckCount.setDescription('This object denotes the default value for the maximum number of consecutive I PDUs which the LLCs on this port shall receive during the interval defined by llcCcOperDelayTimertime without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDURcv. This function is not described in the IEEE 802.2 specification [5]. It is listed in the IBM Token-Ring Network Architecture Reference [6] as the N3 parameter and is widely implemented. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminDelayAckCount object or by a non-zero value in the llcCcAdminDelayCount object. A value of one indicates that acknowledgments will be sent immediately and that the value of llcPortAdminDelayAckTimer shall be ignored.')
llcPortAdminDelayAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 15), TimeTicks().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminDelayAckTimer.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Receiver Acknowledgment Timer (T2)')
if mibBuilder.loadTexts: llcPortAdminDelayAckTimer.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminDelayAckTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [5]. It is listed in the IBM Token-Ring Network Architecture Reference [6] as the T2 parameter and is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object is associated with the llcSapAdminDelayAckCount object and is only defined if that object has a value greater than one.')
llcPortAdminNw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 1, 1, 16), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminNw.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Number of Acknowledgments Needed to Increment Ww (Nw)')
if mibBuilder.loadTexts: llcPortAdminNw.setStatus('current')
if mibBuilder.loadTexts: llcPortAdminNw.setDescription('This object denotes the default value for the number of IPDUs that must be acknowledged before the working window size (Ww) can be incremented by 1 when the working window is not equal to the maximum transmit window size (TW). It controls the gradual incrementing of Ww in congestion situations. This function is not described in the IEEE 802.2 specification [5]. However, it is listed in the IBM Token-Ring Network Architecture Reference [6] as the Nw parameter and is widely implemented. This port default value may be overridden by a non-zero SAP default value in the llcSapAdminNw object.')
llcPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 2), )
if mibBuilder.loadTexts: llcPortOperTable.setStatus('current')
if mibBuilder.loadTexts: llcPortOperTable.setDescription('This table contains current LLC port parameters. Many of these objects have corresponding objects in the llcPortAdminTable.')
llcPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"))
if mibBuilder.loadTexts: llcPortOperEntry.setStatus('current')
if mibBuilder.loadTexts: llcPortOperEntry.setDescription('Currently set parameters for a specific LLC port.')
llcPortOperMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperMacAddress.setStatus('current')
if mibBuilder.loadTexts: llcPortOperMacAddress.setDescription('This is the MAC Address for this local port.')
llcPortOperNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperNumSaps.setStatus('current')
if mibBuilder.loadTexts: llcPortOperNumSaps.setDescription("This object defines the number of SAPs on this port that are currently enabled. In other words, this object is a count of the number of instances of llcSapOperEntry that have a llcSapOperStatus value of 'active(2)'.")
llcPortOperHiWaterNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperHiWaterNumSaps.setStatus('current')
if mibBuilder.loadTexts: llcPortOperHiWaterNumSaps.setDescription('This object reflects the highest number of SAPs active on this Port simultaneously. In other words, this object is a count of the number of instances of llcSapOperEntry on this Port.')
llcPortOperSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperSimRim.setStatus('current')
if mibBuilder.loadTexts: llcPortOperSimRim.setDescription('This object reflects support for transmission and receipt of SIM and RIM control frames for this port. SIM and RIM are not defined in the ANSI/IEEE 802.2 specification [5] nor in the IBM Token Ring Architecture Reference [6]. These control frames are used for the remote program load of IBM communications processors.')
llcPortOperLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperLastModifyTime.setStatus('current')
if mibBuilder.loadTexts: llcPortOperLastModifyTime.setDescription('This object describes the value of sysUpTime when this port definition was last modified. If the port has not been modified, then this value shall be zero.')
llcPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3), )
if mibBuilder.loadTexts: llcPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsTable.setDescription('Each entry in this table contains statistics for a specific LLC port.')
llcPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"))
if mibBuilder.loadTexts: llcPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsEntry.setDescription('A list of statistics for an LLC port.')
llcPortStatsPDUsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsPDUsIn.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsPDUsIn.setDescription('This object reflects the total number of PDUs that have been received on this port. This object is initialized to zero when the port is created.')
llcPortStatsPDUsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsPDUsOut.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsPDUsOut.setDescription('This object reflects the total number of PDUs that have been transmitted on this port. This object is initialized to zero when the port is created.')
llcPortStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1, 3), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsOctetsIn.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsOctetsIn.setDescription('This object reflects the total octets received on this port. This object is initialized to zero when the port is created.')
llcPortStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1, 4), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsOctetsOut.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsOctetsOut.setDescription('This object reflects the total octets transmitted on this port. This object is initialized to zero when the port is created.')
llcPortStatsTESTCommandsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsTESTCommandsIn.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsTESTCommandsIn.setDescription('This object reflects the total number of TEST commands received on this port.')
llcPortStatsTESTResponsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsTESTResponsesOut.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsTESTResponsesOut.setDescription('This object reflects the total number of TEST responses transmitted on this port in response to TEST commands received.')
llcPortStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsLocalBusies.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsLocalBusies.setDescription('This object reflects the total number of times that the local connection components on this port have entered a busy state (RNR). This object is initialized to zero when the port is created.')
llcPortStatsUnknownSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortStatsUnknownSaps.setStatus('current')
if mibBuilder.loadTexts: llcPortStatsUnknownSaps.setDescription('This object reflects the total number of times that a connection attempt, from a remote LLC station, for an unknown SAP was detected on this port.')
llcSapAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1), )
if mibBuilder.loadTexts: llcSapAdminTable.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminTable.setDescription('This table contains objects that can be changed to manage a local SAP. Changing one of these parameters may take effect in the operating CC immediately or may wait until the interface is restarted depending on the details of the implementation.')
llcSapAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"), (0, "CISCO-SNA-LLC-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapAdminEntry.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminEntry.setDescription('A list of configured values for a local SAP.')
llcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: llcSapNumber.setStatus('current')
if mibBuilder.loadTexts: llcSapNumber.setDescription('The address of this local SAP.')
llcSapAdminMaxPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 2), Integer32()).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxPDUOctets.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminMaxPDUOctets.setDescription("This object denotes the default maximum I PDU size, in octets, that LLCs on this SAP may send to their remote connection component partners. This count is referred to as 'N1' in the IEEE 802.2 specification [5]. A zero value for this object indicates that the port default, llcPortAdminMaxIPDUOctetsSend, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxIPDUOctetsSend object. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect this in the llcCcOperMaxIPDUOctetsSend object for the connection component. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link header.")
llcSapAdminMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxUnackedIPDUsSend.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminMaxUnackedIPDUsSend.setDescription("This object denotes the default maximum consecutive unacknowledged I PDU frames that LLCs on this SAP may send to their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [5]. A zero value for this object indicates that the port default, llcPortAdminMaxUnackedIPDUsSend, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxUnackedIPDUsSend object. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamically learned value and should reflect this in the llcCcOperMaxUnackedIPDUsSend object for the connection component.")
llcSapAdminMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxUnackedIPDUsRcv.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminMaxUnackedIPDUsRcv.setDescription("This object denotes the default maximum number of unacknowledged I PDUs that LLCs on this SAP can expect to receive from their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [5]. A zero value for this object indicates that the port default, llcPortAdminMaxUnackedIPDUsRcv, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxUnackedIPDUsRcv object. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame.")
llcSapAdminMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminMaxRetransmits.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminMaxRetransmits.setDescription("This object denotes the default value for the maximum number of times that LLCs on this SAP shall retry PDUs following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [5]. A zero value for this object indicates that the port default, llcPortAdminMaxRetransmits, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminMaxRetransmits.")
llcSapAdminAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminAckTimer.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminAckTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this SAP shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the frame unacknowledged frames to be retransmitted (up to N2 times). A zero value for this object indicates that the port default, llcPortAdminAckTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminAckTimer.')
llcSapAdminPbitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminPbitTimer.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminPbitTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). A zero value for this object indicates that the port default, llcPortAdminPbitTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminPbitTimer.")
llcSapAdminRejTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminRejTimer.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminRejTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this SAP shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). A zero value for this object indicates that the port default, llcPortAdminRejTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminRejTimer.')
llcSapAdminBusyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminBusyTimer.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminBusyTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this SAP shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer shall cause the link to be declared inactive. A zero value for this object indicates that the port default, llcPortAdminBusyTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminBusyTimer.')
llcSapAdminInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminInactTimer.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminInactTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this SAP shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [5] but is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. A zero value for this object indicates that the port default, llcPortAdminInactTimer, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminInactTimer. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcSapAdminDelayAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminDelayAckCount.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminDelayAckCount.setDescription('This object denotes the default value for the maximum number of consecutive I PDUs which the LLCs on this SAP shall receive during the interval defined by llcCcOperDelayTimer without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDURcv. This function is not described in the IEEE 802.2 specification [5] but is widely implemented. A zero value for this object indicates that the port default, llcPortAdminDelayAck, shall be used as the SAP default. This SAP default value may be overridden by a non-zero value in the llcCcAdminDelayAckCount. A value of one indicates that acknowledgments will be sent immediately and that the value of llcSapAdminDelayAckTimer shall be ignored.')
llcSapAdminDelayAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminDelayAckTimer.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Receiver Acknowledgment Timer (T2)')
if mibBuilder.loadTexts: llcSapAdminDelayAckTimer.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminDelayAckTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this SAP shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [5]. It is listed in the IBM Token-Ring Network Architecture Reference [6] as the T2 parameter and is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object is associated with the llcSapAdminDelayAckCount object and is only defined if that object has a value greater than one.')
llcSapAdminNw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcSapAdminNw.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Number of Acknowledgments Needed to Increment Ww (Nw)')
if mibBuilder.loadTexts: llcSapAdminNw.setStatus('current')
if mibBuilder.loadTexts: llcSapAdminNw.setDescription('This object denotes the default value for the number of IPDUs that must be acknowledged before the working window size (Ww) can be incremented by 1 when the working window is not equal to the maximum transmit window size (TW). It controls the gradual incrementing of Ww in congestion situations. This function is not described in the IEEE 802.2 specification [5]. However, it is listed in the IBM Token-Ring Network Architecture Reference [6] as the Nw parameter and is widely implemented. This SAP default value may be overridden by a non-zero Cc default value in the llcCcAdminNw object.')
llcSapOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 2), )
if mibBuilder.loadTexts: llcSapOperTable.setStatus('current')
if mibBuilder.loadTexts: llcSapOperTable.setDescription('This table contains objects that reflect the current operational parameters of a local SAP.')
llcSapOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"), (0, "CISCO-SNA-LLC-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapOperEntry.setStatus('current')
if mibBuilder.loadTexts: llcSapOperEntry.setDescription('A list of configured values for a local SAP.')
llcSapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperStatus.setStatus('current')
if mibBuilder.loadTexts: llcSapOperStatus.setDescription('This parameter describes the actual state of this local SAP.')
llcSapOperNumCcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperNumCcs.setStatus('current')
if mibBuilder.loadTexts: llcSapOperNumCcs.setDescription("This object defines the number of connection components on this SAP that are currently in one of the 'connected' states. In other words, this object is a count of the number of instances of llcCcOperEntry that have a llcCcOperState value greater than or equal to 'normal(3)'.")
llcSapOperHiWaterNumCcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperHiWaterNumCcs.setStatus('current')
if mibBuilder.loadTexts: llcSapOperHiWaterNumCcs.setDescription("This object reflects the highest number of connection components on this SAP simultaneously in one of the 'connected' states. In other words, this object is a count of the number of instances of llcCcOperEntry that have a llcCcOperState value greater than or equal to 'normal(3)' concurrently on this SAP.")
llcSapOperLlc2Support = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperLlc2Support.setStatus('current')
if mibBuilder.loadTexts: llcSapOperLlc2Support.setDescription('This parameter describes whether or not the LLC implementation supports LLC2 connection components.')
llcSapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3), )
if mibBuilder.loadTexts: llcSapStatsTable.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsTable.setDescription('This table contains objects that reflect the current operational parameters of a local SAP.')
llcSapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"), (0, "CISCO-SNA-LLC-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapStatsEntry.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsEntry.setDescription('A list of configured values for a local SAP.')
llcSapStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsLocalBusies.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsLocalBusies.setDescription('This object reflects the total number of times that the local connection components on this SAP have entered a busy state (RNR). This object is initialized to zero when the SAP is created.')
llcSapStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsRemoteBusies.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsRemoteBusies.setDescription('This object reflects the total number of times that the adjacent (i.e. remote) connection components on this SAP have entered a busy state (RNR). This object is initialized to zero when the SAP is created.')
llcSapStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIFramesIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsIFramesIn.setDescription('This object reflects the total number of I-Frames that have been received by connection components on this SAP. This object is initialized to zero when the SAP is created.')
llcSapStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIFramesOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsIFramesOut.setDescription('This object reflects the total number of I-Frames that have been transmitted by connection components on this SAP. This object is initialized to zero when the SAP is created.')
llcSapStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIOctetsIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsIOctetsIn.setDescription('This object reflects the total octets received from adjacent connection components on this SAP. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the SAP is created.')
llcSapStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIOctetsOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsIOctetsOut.setDescription('This object reflects the total octets transmitted to adjacent connection components on this SAP. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the SAP is created.')
llcSapStatsSFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsSFramesIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsSFramesIn.setDescription('This object reflects the total number of S-Frames that have been received by connection components on this SAP. This object is initialized to zero when the SAP is created. Note - the ratio of the number of I-Frames to S-Frames might serve as a measure of link efficiency and, for instance, could be used to tune the acknowledgement timer.')
llcSapStatsSFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsSFramesOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsSFramesOut.setDescription('This object reflects the total number of S-Frames that have been transmitted by connection components on this SAP. This object is initialized to zero when the SAP is created. Note - the ratio of the number of I-Frames to S-Frames might serve as a measure of link efficiency and, for instance, could be used to tune the acknowledgement timer.')
llcSapStatsRetransmitsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsRetransmitsOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsRetransmitsOut.setDescription('This object reflects the total number of I-Frames retransmitted by all local connection components on this SAP. This object is initialized to zero when the SAP is created.')
llcSapStatsREJsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsREJsIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsREJsIn.setDescription('This object reflects the total REJ frames received from all adjacent LLC connection components on this SAP since it was created.')
llcSapStatsREJsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsREJsOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsREJsOut.setDescription('This object reflects the total REJ frames transmitted to an adjacent LLC connection components on this SAP since it was created.')
llcSapStatsWwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsWwCount.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsWwCount.setDescription('This object reflects the total number of times, since this SAP was created, that the dynamic window algorithm has been invoked to reduce the value of Ww on any of the connection components of this SAP. This object is initialized to zero when the SAP is created. This function is not described in the IEEE 802.2 specification [5], but is widely implemented.')
llcSapStatsTESTCommandsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTCommandsIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsTESTCommandsIn.setDescription('This object denotes the number of TEST commands this SAP has received and is a measure of the number of stations in the network trying to connect up. This object is initialized to zero when the SAP is created.')
llcSapStatsTESTCommandsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTCommandsOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsTESTCommandsOut.setDescription('This object denotes the number of TEST commands this SAP has sent and is a measure of the number of other stations we are trying to connect to. This object is initialized to zero when the SAP is created.')
llcSapStatsTESTResponsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTResponsesIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsTESTResponsesIn.setDescription('This object denotes the number of TEST responses this SAP has received and is a measure of the number of stations in the network responding to TEST commands this SAP has sent. This object is initialized to zero when the SAP is created.')
llcSapStatsTESTResponsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTResponsesOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsTESTResponsesOut.setDescription('This object denotes the number of TEST responses this SAP has sent and is a measure of the number of other stations trying to connect to this SAP. This object is initialized to zero when the SAP is created.')
llcSapStatsXIDCommandsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDCommandsIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsXIDCommandsIn.setDescription('This object denotes the number of XID commands this SAP has received and is a measure of the number of stations in the network trying to connect to this SAP. This object is a count of all XIDs, including SNA XID, IEEE XID, null XID, and non-activation XIDs. This object is initialized to zero when the SAP is created.')
llcSapStatsXIDCommandsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDCommandsOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsXIDCommandsOut.setDescription('This object denotes the number of XID commands this SAP has sent and is a measure of the number of other stations this SAP is trying to connect to. This object is a count of all XIDs, including SNA XID, IEEE XID, null XID, and non-activation XIDs. This object is initialized to zero when the SAP is created.')
llcSapStatsXIDResponsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDResponsesIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsXIDResponsesIn.setDescription('This object denotes the number of XID responses this SAP has received and is a measure of the number of stations in the network responding to TEST commands this SAP has sent. This object is a count of all XIDs, including SNA XID, IEEE XID, null XID, and non-activation XIDs. This object is initialized to zero when the SAP is created.')
llcSapStatsXIDResponsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDResponsesOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsXIDResponsesOut.setDescription('This object denotes the number of XID responses this SAP has sent and is a measure of the number of other stations trying to connect to this SAP. This object is a count of all XIDs, including SNA XID, IEEE XID, null XID, and non-activation XIDs. This object is initialized to zero when the SAP is created.')
llcSapStatsUIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIFramesIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsUIFramesIn.setDescription('This object reflects the total number of unnumbered information (UI) frames received on a local SAP.')
llcSapStatsUIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIFramesOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsUIFramesOut.setDescription('This object reflects the total number of unnumbered information (UI) frames sent on a local SAP.')
llcSapStatsUIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIOctetsIn.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsUIOctetsIn.setDescription('This object reflects the total octets received from adjacent connection components on this SAP. This object covers the address, control, and information field of UI-Frames only. This object is initialized to zero when the SAP is created.')
llcSapStatsUIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIOctetsOut.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsUIOctetsOut.setDescription('This object reflects the total octets transmitted to adjacent connection components on this SAP. This object covers the address, control, and information field of UI-Frames only. This object is initialized to zero when the SAP is created.')
llcSapStatsConnectOk = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsConnectOk.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsConnectOk.setDescription('This object reflects the total number of successful connections that have been established on this SAP since the SAP was created. A successful connection is indicated by a successful SABME/UA exchange.')
llcSapStatsConnectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsConnectFail.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsConnectFail.setDescription('This object reflects the total number of unsuccessful connections that have been attempted on this SAP since the SAP was created. An unsuccessful connection attempt is indicated by a SABME/DM exchange or a SABME/timeout.')
llcSapStatsDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnect.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsDisconnect.setDescription('This object reflects the total number of normal disconnections that have been performed on this SAP since the SAP was created. A normal disconnection is indicated by a successful DISC/UA exchange or merely a DISC sent or received.')
llcSapStatsDisconnectFRMRSend = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRSend.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRSend.setDescription('This object reflects the total number of abnormal disconnections (resulting from a FRMR being sent) that have been performed on this SAP since the SAP was created.')
llcSapStatsDisconnectFRMRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRRcv.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRRcv.setDescription('This object reflects the total number of abnormal disconnections (resulting from a FRMR being received) that have been performed on this SAP since the SAP was created.')
llcSapStatsDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectTimer.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsDisconnectTimer.setDescription('This object reflects the total number of abnormal disconnections (resulting from a timer expiration) that have been performed on this SAP since the SAP was created.')
llcSapStatsDMsInABM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDMsInABM.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsDMsInABM.setDescription('This object reflects the total number of Disconnect Mode responses that have been received for CCs in ABM mode on this SAP since the SAP was created.')
llcSapStatsSABMEsInABM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsSABMEsInABM.setStatus('current')
if mibBuilder.loadTexts: llcSapStatsSABMEsInABM.setDescription('This object reflects the total number of SABMEs that have been received for CCs in already in ABM mode on this SAP since the SAP was created.')
llcCcAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1), )
if mibBuilder.loadTexts: llcCcAdminTable.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminTable.setDescription('This table contains objects that can be changed to manage an LLC connection component. Changing one of these parameters may take effect in the operating link immediately or may wait until the link is restarted depending on the details of the implementation. The entries in llcCcAdminTable can be created either by an agent or a management station. The management station can create an entry in llcCcAdminTable by setting the appropriate value in llcCcAdminRowStatus. Most of the objects in this read-create table have corresponding read-only objects in the llcCcOperTable that reflect the current operating value. The operating values may be different from these configured values if changed by XID negotiation or if a configured parameter was changed after the link was started.')
llcCcAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"), (0, "CISCO-SNA-LLC-MIB", "llcSapNumber"), (0, "CISCO-SNA-LLC-MIB", "llcCcRMac"), (0, "CISCO-SNA-LLC-MIB", "llcCcRSap"))
if mibBuilder.loadTexts: llcCcAdminEntry.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminEntry.setDescription('A list of configured values for an LLC connection component.')
llcCcRMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: llcCcRMac.setStatus('current')
if mibBuilder.loadTexts: llcCcRMac.setDescription('This value is the remote MAC address for this Connection Component. This value is provided by the SNMP agent.')
llcCcRSap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: llcCcRSap.setStatus('current')
if mibBuilder.loadTexts: llcCcRSap.setDescription('This value is the address of the remote SAP for this Connection Component. This value is provided by the SNMP agent.')
llcCcAdminBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminBounce.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminBounce.setDescription('This object controls the resetting of the connection component. Setting this value to yes(2) results in the connection component being reset, llcCcOperState transitioning to a value of aDm(1), and the value of llcCcAdminBounce being set back to no(1).')
llcCcAdminMaxPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 4), Integer32()).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminMaxPDUOctets.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminMaxPDUOctets.setDescription("This object denotes the maximum I PDU size, in octets, that this LLC SAP may send to its remote connection component partner. This count is referred to as 'N1' in the IEEE 802.2 specification [5]. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxIPDUOctetsSend, shall be used. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect this in the llcCcOperMaxIPDUOctetsSend object for the connection component. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link header.")
llcCcAdminMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminMaxUnackedIPDUsSend.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminMaxUnackedIPDUsSend.setDescription("This object denotes the maximum consecutive unacknowledged I PDU frames that this LLC may send to its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [5]. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxUnackedIPDUsSend, shall be used. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamically learned value and should reflect this in the llcCcOperMaxUnackedIPDUsSend object for the connection component.")
llcCcAdminMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminMaxUnackedIPDUsRcv.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminMaxUnackedIPDUsRcv.setDescription("This object denotes the maximum number of unacknowledged I PDUs that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [5]. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxUnackedIPDUsRcv, shall be used. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame.")
llcCcAdminMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminMaxRetransmits.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminMaxRetransmits.setDescription("This object denotes the value for the maximum number of times that this LLC shall retry PDUs following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [5]. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminMaxRetransmits, shall be used.")
llcCcAdminAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 8), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminAckTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the frame unacknowledged frames to be retransmitted (up to N2 times). This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminAckTimer, shall be used.')
llcCcAdminPbitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 9), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminPbitTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminPbitTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminPbitTimer, shall be used.")
llcCcAdminRejTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 10), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminRejTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminRejTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times). This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminRejTimer, shall be used.')
llcCcAdminBusyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 11), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminBusyTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminBusyTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer shall cause the link to be declared inactive. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminBusyTimer, shall be used.')
llcCcAdminInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 12), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminInactTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminInactTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [5] but is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminInactTimer, shall be used. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcCcAdminDelayAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminDelayAckCount.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminDelayAckCount.setDescription('This object denotes the value for the maximum number of consecutive I PDUs which this LLC shall receive during the interval defined by llcCcOperDelayTimer without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDURcv. This function is not described in the IEEE 802.2 specification [5] but is widely implemented. This object contains an administrative value which will be applied the next time this connection is established. A zero value for this object indicates that the SAP default, llcSapAdminDelayAck, shall be used. A value of one indicates that acknowledgments will be sent immediately and that the value of llcCcAdminDelayAckTimer shall be ignored.')
llcCcAdminDelayAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 14), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminDelayAckTimer.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Receiver Acknowledgment Timer (T2)')
if mibBuilder.loadTexts: llcCcAdminDelayAckTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminDelayAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [5]. It is listed in the IBM Token-Ring Network Architecture Reference [6] as the T2 parameter and is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object contains an administrative value which will be applied the next time this connection is established. This object is associated with the llcCcAdminDelayAckCount object and is only defined if that object has a value greater than one.')
llcCcAdminNw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminNw.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Number of Acknowledgments Needed to Increment Ww (Nw)')
if mibBuilder.loadTexts: llcCcAdminNw.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminNw.setDescription('This object denotes the value for the number of IPDUs that must be acknowledged before the working window size (Ww) can be incremented by 1 when the working window is not equal to the maximum transmit window size (TW). It controls the gradual incrementing of Ww in congestion situations. This function is not described in the IEEE 802.2 specification [5]. However, it is listed in the IBM Token-Ring Network Architecture Reference [6] as the Nw parameter and is widely implemented.')
llcCcAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llcCcAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: llcCcAdminRowStatus.setDescription("This object is used by a management station to create or delete the row entry in llcCcAdminTable following the RowStatus textual convention. Upon successful creation of the row, an agent automatically creates a corresponding entry in the llcCcOperTable with llcCcOperState equal to 'aDM (1)'.")
llcCcOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2), )
if mibBuilder.loadTexts: llcCcOperTable.setStatus('current')
if mibBuilder.loadTexts: llcCcOperTable.setDescription('This table contains current LLC link parameters. Many of these objects have corresponding objects in the llcCcAdminTable.')
llcCcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"), (0, "CISCO-SNA-LLC-MIB", "llcSapNumber"), (0, "CISCO-SNA-LLC-MIB", "llcCcRMac"), (0, "CISCO-SNA-LLC-MIB", "llcCcRSap"))
if mibBuilder.loadTexts: llcCcOperEntry.setStatus('current')
if mibBuilder.loadTexts: llcCcOperEntry.setDescription('A list of status and control values for an LLC connection component.')
llcCcOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("aDM", 1), ("setup", 2), ("normal", 3), ("busy", 4), ("reject", 5), ("await", 6), ("awaitBusy", 7), ("awaitReject", 8), ("dConn", 9), ("reset", 10), ("error", 11), ("conn", 12), ("resetCheck", 13), ("resetWait", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperState.setReference('ISO 8802-2 : 1989, ANSI/IEEE 802.2 - 1989 Section 7.9.2.1. Connection Component State Descriptions')
if mibBuilder.loadTexts: llcCcOperState.setStatus('current')
if mibBuilder.loadTexts: llcCcOperState.setDescription('This object describes the operational state of the LLC connection. If the connection component is disabled, llcCcOperState will transition to aDM(1). If the connection component is enabled, llcCcOperState will transition to normal(3).')
llcCcOperMaxIPDUOctetsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsSend.setStatus('current')
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsSend.setDescription("This object denotes the maximum I PDU size, in octets, that this LLC SAP may send to its remote connection component partner. This count is referred to as 'N1' in the IEEE 802.2 specification [5]. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect that in this object. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link header.")
llcCcOperMaxIPDUOctetsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsRcv.setStatus('current')
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsRcv.setDescription("This object denotes the maximum I PDU size, in octets, that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'N1' in the IEEE 802.2 specification [5] The I PDU size includes all octets in a frame with the exception of the framing characters, the MAC header and the link header.")
llcCcOperMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsSend.setStatus('current')
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsSend.setDescription("This object denotes the maximum consecutive unacknowledged I PDU frames that this LLC may send to its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [5]. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamically learned value and should reflect that in this object.")
llcCcOperMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsRcv.setStatus('current')
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsRcv.setDescription("This object denotes the maximum number of unacknowledged I PDUs that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [5].")
llcCcOperMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxRetransmits.setStatus('current')
if mibBuilder.loadTexts: llcCcOperMaxRetransmits.setDescription("This object denotes the value for the maximum number of times that this LLC shall retry PDUs following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [5].")
llcCcOperAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperAckTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcOperAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the frame unacknowledged frames to be retransmitted (up to N2 times).')
llcCcOperPbitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperPbitTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcOperPbitTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times).")
llcCcOperRejTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperRejTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcOperRejTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times).')
llcCcOperBusyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperBusyTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcOperBusyTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer shall cause the link to be declared inactive.')
llcCcOperInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperInactTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcOperInactTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [5] but is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcCcOperDelayAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperDelayAckCount.setStatus('current')
if mibBuilder.loadTexts: llcCcOperDelayAckCount.setDescription('This object denotes the value for the maximum number of consecutive I PDUs which this LLC shall receive during the interval defined by llcCcOperDelayTimer without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDURcv. This function is not described in the IEEE 802.2 specification [5] but is widely implemented. A value of one indicates that acknowledgments will be sent immediately and that the value of llcCcOperDelayAckTimer should be ignored.')
llcCcOperDelayAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperDelayAckTimer.setStatus('current')
if mibBuilder.loadTexts: llcCcOperDelayAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [5] but is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object is associated with the llcCcOperDelayAckCount object and only has meaning if that object has a value greater than one.')
llcCcOperNw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperNw.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations Number of Acknowledgments Needed to Increment Ww (Nw)')
if mibBuilder.loadTexts: llcCcOperNw.setStatus('current')
if mibBuilder.loadTexts: llcCcOperNw.setDescription('This object denotes the value for the number of IPDUs that must be acknowledged before the working window size (Ww) can be incremented by 1 when the working window is not equal to the maximum transmit window size (TW). It controls the gradual incrementing of Ww in congestion situations. This function is not described in the IEEE 802.2 specification [5], but is widely implemented.')
llcCcOperWw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperWw.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 8: LLC Frames Working Window Size, Ww')
if mibBuilder.loadTexts: llcCcOperWw.setStatus('current')
if mibBuilder.loadTexts: llcCcOperWw.setDescription('Maximum number of sequentially numbered IPDUs that the connection component may have outstanding (unacknowledged) at any given time. Ww is initialized to the value of llcCcOperMaxUnackedIPDUsSend when the link is established. When the dynamic window algorithm is invoked, Ww varies from 1 up to llcCcOperMaxUnackedIPDUsSend. Each time the llcCcOperWw value is decreased, the reason is recorded in llcCcOperLastWwCause, and llcCcStatWwCount is incremented by 1. This function is not described in the IEEE 802.2 specification [5], but is widely implemented.')
llcCcOperCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperCreateTime.setStatus('current')
if mibBuilder.loadTexts: llcCcOperCreateTime.setDescription('This object describes the value of sysUpTime when this connection was created.')
llcCcOperLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastModifyTime.setStatus('current')
if mibBuilder.loadTexts: llcCcOperLastModifyTime.setDescription('This object describes the value of sysUpTime the last time this connection component was modified. If the connection has not been modified, then this value shall be zero.')
llcCcOperLastFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailTime.setStatus('current')
if mibBuilder.loadTexts: llcCcOperLastFailTime.setDescription('This object describes the value of sysUpTime when this LLC connection component last failed. If the connection component has not failed, then this value shall be zero.')
llcCcOperLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("rxFRMR", 2), ("txFRMR", 3), ("discReceived", 4), ("discSent", 5), ("retriesExpired", 6), ("forcedShutdown", 7))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailCause.setStatus('current')
if mibBuilder.loadTexts: llcCcOperLastFailCause.setDescription('This enumerated object reflects the cause of the last failure of this LLC connection component. If the connection component has not failed, then this object will have a value of undefined(1).')
llcCcOperLastFailFRMRInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailFRMRInfo.setStatus('current')
if mibBuilder.loadTexts: llcCcOperLastFailFRMRInfo.setDescription('This object reflects the information field of the FRMR frame if the last failure for this LLC connection component was as a result of an invalid frame. Otherwise, this field has no meaning.')
llcCcOperLastWwCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("neverInvoked", 1), ("lostData", 2), ("macLayerCongestion", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastWwCause.setReference('IBM Token-Ring Network Architecture Ref. SC30-3374 Chapter 11: Operation of Link Stations The Dynamic Window Algorithm.')
if mibBuilder.loadTexts: llcCcOperLastWwCause.setStatus('current')
if mibBuilder.loadTexts: llcCcOperLastWwCause.setDescription('This object indicates the reason that the llcCcOperWw was reduced the last time this occurred.')
llcCcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3), )
if mibBuilder.loadTexts: llcCcStatsTable.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsTable.setDescription('Each entry in this table contains statistics for a specific LLC connection component.')
llcCcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"), (0, "CISCO-SNA-LLC-MIB", "llcSapNumber"), (0, "CISCO-SNA-LLC-MIB", "llcCcRMac"), (0, "CISCO-SNA-LLC-MIB", "llcCcRSap"))
if mibBuilder.loadTexts: llcCcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsEntry.setDescription('A list of statistics for an LLC connection component.')
llcCcStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsLocalBusies.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsLocalBusies.setDescription('This object reflects the total number of times that the local connection component has entered a busy state (RNR). This object is initialized to zero when the connection component is created.')
llcCcStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRemoteBusies.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsRemoteBusies.setDescription('This object reflects the total number of times that the adjacent (i.e. remote) connection component has entered a busy state (RNR). This object is initialized to zero when the connection component is created.')
llcCcStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIFramesIn.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsIFramesIn.setDescription('This object reflects the total number of I-Frames that have been received by the connection component. This object is initialized to zero when the connection component is created.')
llcCcStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIFramesOut.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsIFramesOut.setDescription('This object reflects the total number of I-Frames that have been transmitted by this connection component. This object is initialized to zero when the connection component is created.')
llcCcStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIOctetsIn.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsIOctetsIn.setDescription('This object reflects the total octets received from the adjacent connection component. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the connection component is created.')
llcCcStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIOctetsOut.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsIOctetsOut.setDescription('This object reflects the total octets transmitted to the adjacent connection component. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the connection component is created.')
llcCcStatsSFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsSFramesIn.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsSFramesIn.setDescription('This object reflects the total number of S-Frames that have been received by this connection component. This object is initialized to zero when the connection component is created. Note - the ratio of the number of I-Frames to S-Frames might serve as a measure of link efficiency and, for instance, could be used to tune the acknowledgement timer.')
llcCcStatsSFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsSFramesOut.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsSFramesOut.setDescription('This object reflects the total number of S-Frames that have been transmitted by this connection component. This object is initialized to zero when the connection component is created. Note - the ratio of the number of I-Frames to S-Frames might serve as a measure of link efficiency and, for instance, could be used to tune the acknowledgement timer.')
llcCcStatsRetransmitsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRetransmitsOut.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsRetransmitsOut.setDescription('This object reflects the total number of I-Frames retransmitted the local connection component. This object is initialized to zero when the connection component is created.')
llcCcStatsREJsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsREJsIn.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsREJsIn.setDescription('This object reflects the total REJ frames received from an adjacent LLC connection component since connection component startup.')
llcCcStatsREJsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsREJsOut.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsREJsOut.setDescription('This object reflects the total REJ frames transmitted to an adjacent LLC connection component since connection component startup.')
llcCcStatsWwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 8, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsWwCount.setStatus('current')
if mibBuilder.loadTexts: llcCcStatsWwCount.setDescription('This object reflects the total number of times, since connection component startup, that the dynamic window algorithm has been invoked to reduce the value of Ww. At connection component startupm this object must be initialized to zero. This function is not described in the IEEE 802.2 specification [5], but is widely implemented.')
snaLlcMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 2))
snaLlcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 2, 0))
llcCcStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 8, 2, 0, 1)).setObjects(("CISCO-SNA-LLC-MIB", "llcCcOperState"), ("CISCO-SNA-LLC-MIB", "llcCcOperLastFailTime"), ("CISCO-SNA-LLC-MIB", "llcCcOperLastFailCause"), ("CISCO-SNA-LLC-MIB", "llcCcOperLastFailFRMRInfo"))
if mibBuilder.loadTexts: llcCcStatusChange.setStatus('current')
if mibBuilder.loadTexts: llcCcStatusChange.setDescription('This trap indicates that the state of an LLC connection component has transitioned to normal(3) or aDM(1).')
snaLlcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 3))
snaLlcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 3, 1))
snaLlcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 8, 3, 2))
llcCoreCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 8, 3, 1, 1)).setObjects(("CISCO-SNA-LLC-MIB", "llcCorePortGroup"), ("CISCO-SNA-LLC-MIB", "llcCoreSapGroup"), ("CISCO-SNA-LLC-MIB", "llcCoreCcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    llcCoreCompliance = llcCoreCompliance.setStatus('current')
if mibBuilder.loadTexts: llcCoreCompliance.setDescription('The core compliance statement for all LLC nodes.')
llcCorePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 8, 3, 2, 1)).setObjects(("CISCO-SNA-LLC-MIB", "llcPortAdminName"), ("CISCO-SNA-LLC-MIB", "llcPortAdminMaxSaps"), ("CISCO-SNA-LLC-MIB", "llcPortAdminMaxCcs"), ("CISCO-SNA-LLC-MIB", "llcPortAdminMaxPDUOctets"), ("CISCO-SNA-LLC-MIB", "llcPortAdminMaxUnackedIPDUsSend"), ("CISCO-SNA-LLC-MIB", "llcPortAdminMaxUnackedIPDUsRcv"), ("CISCO-SNA-LLC-MIB", "llcPortAdminMaxRetransmits"), ("CISCO-SNA-LLC-MIB", "llcPortAdminAckTimer"), ("CISCO-SNA-LLC-MIB", "llcPortAdminPbitTimer"), ("CISCO-SNA-LLC-MIB", "llcPortAdminRejTimer"), ("CISCO-SNA-LLC-MIB", "llcPortAdminBusyTimer"), ("CISCO-SNA-LLC-MIB", "llcPortAdminInactTimer"), ("CISCO-SNA-LLC-MIB", "llcPortAdminDelayAckCount"), ("CISCO-SNA-LLC-MIB", "llcPortAdminDelayAckTimer"), ("CISCO-SNA-LLC-MIB", "llcPortAdminNw"), ("CISCO-SNA-LLC-MIB", "llcPortOperMacAddress"), ("CISCO-SNA-LLC-MIB", "llcPortOperNumSaps"), ("CISCO-SNA-LLC-MIB", "llcPortOperHiWaterNumSaps"), ("CISCO-SNA-LLC-MIB", "llcPortOperSimRim"), ("CISCO-SNA-LLC-MIB", "llcPortOperLastModifyTime"), ("CISCO-SNA-LLC-MIB", "llcPortStatsPDUsIn"), ("CISCO-SNA-LLC-MIB", "llcPortStatsPDUsOut"), ("CISCO-SNA-LLC-MIB", "llcPortStatsOctetsIn"), ("CISCO-SNA-LLC-MIB", "llcPortStatsOctetsOut"), ("CISCO-SNA-LLC-MIB", "llcPortStatsTESTCommandsIn"), ("CISCO-SNA-LLC-MIB", "llcPortStatsTESTResponsesOut"), ("CISCO-SNA-LLC-MIB", "llcPortStatsLocalBusies"), ("CISCO-SNA-LLC-MIB", "llcPortStatsUnknownSaps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    llcCorePortGroup = llcCorePortGroup.setStatus('current')
if mibBuilder.loadTexts: llcCorePortGroup.setDescription('The llcCorePortGroup defines objects which are common to the LLC Port of all compliant connections.')
llcCoreSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 8, 3, 2, 2)).setObjects(("CISCO-SNA-LLC-MIB", "llcSapAdminMaxPDUOctets"), ("CISCO-SNA-LLC-MIB", "llcSapAdminMaxUnackedIPDUsSend"), ("CISCO-SNA-LLC-MIB", "llcSapAdminMaxUnackedIPDUsRcv"), ("CISCO-SNA-LLC-MIB", "llcSapAdminMaxRetransmits"), ("CISCO-SNA-LLC-MIB", "llcSapAdminAckTimer"), ("CISCO-SNA-LLC-MIB", "llcSapAdminPbitTimer"), ("CISCO-SNA-LLC-MIB", "llcSapAdminRejTimer"), ("CISCO-SNA-LLC-MIB", "llcSapAdminBusyTimer"), ("CISCO-SNA-LLC-MIB", "llcSapAdminInactTimer"), ("CISCO-SNA-LLC-MIB", "llcSapAdminDelayAckCount"), ("CISCO-SNA-LLC-MIB", "llcSapAdminDelayAckTimer"), ("CISCO-SNA-LLC-MIB", "llcSapAdminNw"), ("CISCO-SNA-LLC-MIB", "llcSapOperStatus"), ("CISCO-SNA-LLC-MIB", "llcSapOperNumCcs"), ("CISCO-SNA-LLC-MIB", "llcSapOperHiWaterNumCcs"), ("CISCO-SNA-LLC-MIB", "llcSapOperLlc2Support"), ("CISCO-SNA-LLC-MIB", "llcSapStatsLocalBusies"), ("CISCO-SNA-LLC-MIB", "llcSapStatsRemoteBusies"), ("CISCO-SNA-LLC-MIB", "llcSapStatsIFramesIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsIFramesOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsIOctetsIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsIOctetsOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsSFramesIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsSFramesOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsRetransmitsOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsREJsIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsREJsOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsWwCount"), ("CISCO-SNA-LLC-MIB", "llcSapStatsTESTCommandsIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsTESTCommandsOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsTESTResponsesIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsTESTResponsesOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsXIDCommandsIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsXIDCommandsOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsXIDResponsesIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsXIDResponsesOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsUIFramesIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsUIFramesOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsUIOctetsIn"), ("CISCO-SNA-LLC-MIB", "llcSapStatsUIOctetsOut"), ("CISCO-SNA-LLC-MIB", "llcSapStatsConnectOk"), ("CISCO-SNA-LLC-MIB", "llcSapStatsConnectFail"), ("CISCO-SNA-LLC-MIB", "llcSapStatsDisconnect"), ("CISCO-SNA-LLC-MIB", "llcSapStatsDisconnectFRMRSend"), ("CISCO-SNA-LLC-MIB", "llcSapStatsDisconnectFRMRRcv"), ("CISCO-SNA-LLC-MIB", "llcSapStatsDisconnectTimer"), ("CISCO-SNA-LLC-MIB", "llcSapStatsDMsInABM"), ("CISCO-SNA-LLC-MIB", "llcSapStatsSABMEsInABM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    llcCoreSapGroup = llcCoreSapGroup.setStatus('current')
if mibBuilder.loadTexts: llcCoreSapGroup.setDescription('The llcCoreSapGroup defines objects which are common to the LLC SAP of all compliant connections.')
llcCoreCcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 8, 3, 2, 3)).setObjects(("CISCO-SNA-LLC-MIB", "llcCcAdminBounce"), ("CISCO-SNA-LLC-MIB", "llcCcAdminMaxPDUOctets"), ("CISCO-SNA-LLC-MIB", "llcCcAdminMaxUnackedIPDUsSend"), ("CISCO-SNA-LLC-MIB", "llcCcAdminMaxUnackedIPDUsRcv"), ("CISCO-SNA-LLC-MIB", "llcCcAdminMaxRetransmits"), ("CISCO-SNA-LLC-MIB", "llcCcAdminAckTimer"), ("CISCO-SNA-LLC-MIB", "llcCcAdminPbitTimer"), ("CISCO-SNA-LLC-MIB", "llcCcAdminRejTimer"), ("CISCO-SNA-LLC-MIB", "llcCcAdminBusyTimer"), ("CISCO-SNA-LLC-MIB", "llcCcAdminInactTimer"), ("CISCO-SNA-LLC-MIB", "llcCcAdminDelayAckCount"), ("CISCO-SNA-LLC-MIB", "llcCcAdminDelayAckTimer"), ("CISCO-SNA-LLC-MIB", "llcCcAdminNw"), ("CISCO-SNA-LLC-MIB", "llcCcAdminRowStatus"), ("CISCO-SNA-LLC-MIB", "llcCcOperState"), ("CISCO-SNA-LLC-MIB", "llcCcOperMaxIPDUOctetsSend"), ("CISCO-SNA-LLC-MIB", "llcCcOperMaxIPDUOctetsRcv"), ("CISCO-SNA-LLC-MIB", "llcCcOperMaxUnackedIPDUsSend"), ("CISCO-SNA-LLC-MIB", "llcCcOperMaxUnackedIPDUsRcv"), ("CISCO-SNA-LLC-MIB", "llcCcOperMaxRetransmits"), ("CISCO-SNA-LLC-MIB", "llcCcOperAckTimer"), ("CISCO-SNA-LLC-MIB", "llcCcOperPbitTimer"), ("CISCO-SNA-LLC-MIB", "llcCcOperRejTimer"), ("CISCO-SNA-LLC-MIB", "llcCcOperBusyTimer"), ("CISCO-SNA-LLC-MIB", "llcCcOperInactTimer"), ("CISCO-SNA-LLC-MIB", "llcCcOperDelayAckCount"), ("CISCO-SNA-LLC-MIB", "llcCcOperDelayAckTimer"), ("CISCO-SNA-LLC-MIB", "llcCcOperNw"), ("CISCO-SNA-LLC-MIB", "llcCcOperWw"), ("CISCO-SNA-LLC-MIB", "llcCcOperCreateTime"), ("CISCO-SNA-LLC-MIB", "llcCcOperLastModifyTime"), ("CISCO-SNA-LLC-MIB", "llcCcOperLastFailTime"), ("CISCO-SNA-LLC-MIB", "llcCcOperLastFailCause"), ("CISCO-SNA-LLC-MIB", "llcCcOperLastFailFRMRInfo"), ("CISCO-SNA-LLC-MIB", "llcCcOperLastWwCause"), ("CISCO-SNA-LLC-MIB", "llcCcStatsLocalBusies"), ("CISCO-SNA-LLC-MIB", "llcCcStatsRemoteBusies"), ("CISCO-SNA-LLC-MIB", "llcCcStatsIFramesIn"), ("CISCO-SNA-LLC-MIB", "llcCcStatsIFramesOut"), ("CISCO-SNA-LLC-MIB", "llcCcStatsIOctetsIn"), ("CISCO-SNA-LLC-MIB", "llcCcStatsIOctetsOut"), ("CISCO-SNA-LLC-MIB", "llcCcStatsSFramesIn"), ("CISCO-SNA-LLC-MIB", "llcCcStatsSFramesOut"), ("CISCO-SNA-LLC-MIB", "llcCcStatsRetransmitsOut"), ("CISCO-SNA-LLC-MIB", "llcCcStatsREJsIn"), ("CISCO-SNA-LLC-MIB", "llcCcStatsREJsOut"), ("CISCO-SNA-LLC-MIB", "llcCcStatsWwCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    llcCoreCcGroup = llcCoreCcGroup.setStatus('current')
if mibBuilder.loadTexts: llcCoreCcGroup.setDescription('The llcCoreCcGroup defines objects which are common to the LLC CC of all compliant connections.')
mibBuilder.exportSymbols("CISCO-SNA-LLC-MIB", llcSapAdminAckTimer=llcSapAdminAckTimer, llcSapGroup=llcSapGroup, llcSapAdminBusyTimer=llcSapAdminBusyTimer, llcCcOperState=llcCcOperState, llcPortStatsPDUsOut=llcPortStatsPDUsOut, llcCcOperLastFailCause=llcCcOperLastFailCause, llcSapStatsXIDCommandsIn=llcSapStatsXIDCommandsIn, llcCoreCompliance=llcCoreCompliance, llcCcStatsRemoteBusies=llcCcStatsRemoteBusies, llcCcOperMaxUnackedIPDUsRcv=llcCcOperMaxUnackedIPDUsRcv, llcPortVirtualIndex=llcPortVirtualIndex, llcCcOperMaxIPDUOctetsSend=llcCcOperMaxIPDUOctetsSend, llcCcAdminBusyTimer=llcCcAdminBusyTimer, llcPortStatsOctetsOut=llcPortStatsOctetsOut, llcCcAdminTable=llcCcAdminTable, llcPortOperEntry=llcPortOperEntry, llcCcStatsTable=llcCcStatsTable, llcCcAdminRejTimer=llcCcAdminRejTimer, snaLlcMIBGroups=snaLlcMIBGroups, llcCcOperWw=llcCcOperWw, llcSapStatsDMsInABM=llcSapStatsDMsInABM, snaLlcMIBConformance=snaLlcMIBConformance, llcCcStatsIFramesOut=llcCcStatsIFramesOut, llcPortAdminDelayAckCount=llcPortAdminDelayAckCount, llcSapStatsDisconnectFRMRSend=llcSapStatsDisconnectFRMRSend, llcSapAdminTable=llcSapAdminTable, llcCcOperLastWwCause=llcCcOperLastWwCause, llcCoreSapGroup=llcCoreSapGroup, llcSapStatsSFramesOut=llcSapStatsSFramesOut, llcCcOperPbitTimer=llcCcOperPbitTimer, llcPortOperTable=llcPortOperTable, llcSapAdminDelayAckCount=llcSapAdminDelayAckCount, llcCcAdminMaxRetransmits=llcCcAdminMaxRetransmits, llcPortStatsTESTResponsesOut=llcPortStatsTESTResponsesOut, llcCcOperDelayAckTimer=llcCcOperDelayAckTimer, llcSapAdminPbitTimer=llcSapAdminPbitTimer, llcCcOperMaxUnackedIPDUsSend=llcCcOperMaxUnackedIPDUsSend, llcSapOperNumCcs=llcSapOperNumCcs, llcCcAdminBounce=llcCcAdminBounce, llcSapStatsIOctetsIn=llcSapStatsIOctetsIn, llcSapStatsSABMEsInABM=llcSapStatsSABMEsInABM, llcPortStatsTable=llcPortStatsTable, llcSapStatsTable=llcSapStatsTable, llcPortAdminMaxSaps=llcPortAdminMaxSaps, llcPortStatsTESTCommandsIn=llcPortStatsTESTCommandsIn, llcSapOperLlc2Support=llcSapOperLlc2Support, llcSapStatsDisconnectTimer=llcSapStatsDisconnectTimer, llcCcOperRejTimer=llcCcOperRejTimer, llcSapStatsTESTResponsesIn=llcSapStatsTESTResponsesIn, llcPortAdminRejTimer=llcPortAdminRejTimer, llcSapStatsIFramesOut=llcSapStatsIFramesOut, llcSapStatsEntry=llcSapStatsEntry, llcSapStatsDisconnect=llcSapStatsDisconnect, llcSapAdminDelayAckTimer=llcSapAdminDelayAckTimer, llcCcStatsIOctetsOut=llcCcStatsIOctetsOut, llcPortAdminMaxUnackedIPDUsSend=llcPortAdminMaxUnackedIPDUsSend, llcSapStatsXIDCommandsOut=llcSapStatsXIDCommandsOut, llcCcStatsIFramesIn=llcCcStatsIFramesIn, llcCcStatsSFramesIn=llcCcStatsSFramesIn, llcCcStatsREJsOut=llcCcStatsREJsOut, llcPortAdminMaxCcs=llcPortAdminMaxCcs, llcSapStatsREJsIn=llcSapStatsREJsIn, llcSapOperHiWaterNumCcs=llcSapOperHiWaterNumCcs, PYSNMP_MODULE_ID=ciscoSnaLlcMIB, llcCcOperMaxRetransmits=llcCcOperMaxRetransmits, llcPortAdminBusyTimer=llcPortAdminBusyTimer, llcSapStatsLocalBusies=llcSapStatsLocalBusies, llcCcStatusChange=llcCcStatusChange, llcCcOperCreateTime=llcCcOperCreateTime, llcPortAdminName=llcPortAdminName, llcCcAdminEntry=llcCcAdminEntry, llcSapStatsRemoteBusies=llcSapStatsRemoteBusies, snaLlcMIBNotifications=snaLlcMIBNotifications, llcPortAdminTable=llcPortAdminTable, llcPortStatsUnknownSaps=llcPortStatsUnknownSaps, llcPortOperNumSaps=llcPortOperNumSaps, llcCcAdminPbitTimer=llcCcAdminPbitTimer, llcSapAdminRejTimer=llcSapAdminRejTimer, llcSapAdminMaxRetransmits=llcSapAdminMaxRetransmits, llcPortAdminEntry=llcPortAdminEntry, llcCcStatsWwCount=llcCcStatsWwCount, llcCcOperEntry=llcCcOperEntry, llcPortAdminNw=llcPortAdminNw, llcSapOperTable=llcSapOperTable, llcCoreCcGroup=llcCoreCcGroup, llcPortAdminMaxUnackedIPDUsRcv=llcPortAdminMaxUnackedIPDUsRcv, llcSapOperEntry=llcSapOperEntry, llcCcAdminAckTimer=llcCcAdminAckTimer, llcSapStatsUIFramesIn=llcSapStatsUIFramesIn, llcSapStatsREJsOut=llcSapStatsREJsOut, llcPortStatsEntry=llcPortStatsEntry, llcSapStatsTESTCommandsOut=llcSapStatsTESTCommandsOut, llcSapStatsDisconnectFRMRRcv=llcSapStatsDisconnectFRMRRcv, llcCcAdminRowStatus=llcCcAdminRowStatus, llcSapStatsXIDResponsesOut=llcSapStatsXIDResponsesOut, llcPortStatsPDUsIn=llcPortStatsPDUsIn, llcSapStatsSFramesIn=llcSapStatsSFramesIn, llcSapStatsUIOctetsIn=llcSapStatsUIOctetsIn, llcCcOperAckTimer=llcCcOperAckTimer, llcPortAdminMaxPDUOctets=llcPortAdminMaxPDUOctets, llcPortGroup=llcPortGroup, llcCcOperTable=llcCcOperTable, llcCcRSap=llcCcRSap, ciscoSnaLlcMIBObjects=ciscoSnaLlcMIBObjects, llcPortOperHiWaterNumSaps=llcPortOperHiWaterNumSaps, llcCcOperLastFailTime=llcCcOperLastFailTime, llcCcAdminNw=llcCcAdminNw, llcCcStatsLocalBusies=llcCcStatsLocalBusies, llcCcAdminMaxUnackedIPDUsSend=llcCcAdminMaxUnackedIPDUsSend, llcSapAdminEntry=llcSapAdminEntry, llcSapAdminInactTimer=llcSapAdminInactTimer, llcCcOperLastFailFRMRInfo=llcCcOperLastFailFRMRInfo, llcSapStatsConnectOk=llcSapStatsConnectOk, llcCcOperDelayAckCount=llcCcOperDelayAckCount, llcPortOperMacAddress=llcPortOperMacAddress, llcCcOperInactTimer=llcCcOperInactTimer, llcSapStatsConnectFail=llcSapStatsConnectFail, llcSapStatsUIOctetsOut=llcSapStatsUIOctetsOut, llcPortAdminPbitTimer=llcPortAdminPbitTimer, llcCcStatsSFramesOut=llcCcStatsSFramesOut, llcSapAdminMaxPDUOctets=llcSapAdminMaxPDUOctets, llcPortAdminMaxRetransmits=llcPortAdminMaxRetransmits, llcSapStatsTESTCommandsIn=llcSapStatsTESTCommandsIn, llcSapStatsXIDResponsesIn=llcSapStatsXIDResponsesIn, llcPortStatsLocalBusies=llcPortStatsLocalBusies, llcCcOperBusyTimer=llcCcOperBusyTimer, llcSapStatsWwCount=llcSapStatsWwCount, llcCcAdminDelayAckTimer=llcCcAdminDelayAckTimer, llcPortAdminDelayAckTimer=llcPortAdminDelayAckTimer, llcSapStatsIOctetsOut=llcSapStatsIOctetsOut, llcCcStatsRetransmitsOut=llcCcStatsRetransmitsOut, ciscoSnaLlcMIB=ciscoSnaLlcMIB, llcCcAdminInactTimer=llcCcAdminInactTimer, llcCcAdminMaxUnackedIPDUsRcv=llcCcAdminMaxUnackedIPDUsRcv, llcCcAdminDelayAckCount=llcCcAdminDelayAckCount, llcCorePortGroup=llcCorePortGroup, llcCcRMac=llcCcRMac, llcPortStatsOctetsIn=llcPortStatsOctetsIn, llcPortAdminAckTimer=llcPortAdminAckTimer, llcPortAdminInactTimer=llcPortAdminInactTimer, llcPortOperLastModifyTime=llcPortOperLastModifyTime, llcPortOperSimRim=llcPortOperSimRim, llcSapAdminMaxUnackedIPDUsSend=llcSapAdminMaxUnackedIPDUsSend, llcSapAdminNw=llcSapAdminNw, llcSapOperStatus=llcSapOperStatus, llcSapStatsIFramesIn=llcSapStatsIFramesIn, llcCcOperMaxIPDUOctetsRcv=llcCcOperMaxIPDUOctetsRcv, llcCcStatsEntry=llcCcStatsEntry, llcCcAdminMaxPDUOctets=llcCcAdminMaxPDUOctets, llcSapNumber=llcSapNumber, llcSapStatsTESTResponsesOut=llcSapStatsTESTResponsesOut, llcCcStatsREJsIn=llcCcStatsREJsIn, llcSapStatsRetransmitsOut=llcSapStatsRetransmitsOut, snaLlcMIBNotificationPrefix=snaLlcMIBNotificationPrefix, llcCcOperNw=llcCcOperNw, llcCcGroup=llcCcGroup, llcSapStatsUIFramesOut=llcSapStatsUIFramesOut, snaLlcMIBCompliances=snaLlcMIBCompliances, llcSapAdminMaxUnackedIPDUsRcv=llcSapAdminMaxUnackedIPDUsRcv, llcCcOperLastModifyTime=llcCcOperLastModifyTime, llcCcStatsIOctetsIn=llcCcStatsIOctetsIn)
