#
# PySNMP MIB module AcGateway (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AcGateway
# Produced by pysmi-0.3.4 at Wed May  1 11:33:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
acRegistrations, acGeneric, acBoardMibs, audioCodes, acProducts = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acRegistrations", "acGeneric", "acBoardMibs", "audioCodes", "acProducts")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, iso, Counter32, NotificationType, MibIdentifier, ModuleIdentity, ObjectIdentity, Counter64, Unsigned32, enterprises, Integer32, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "iso", "Counter32", "NotificationType", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Counter64", "Unsigned32", "enterprises", "Integer32", "Gauge32", "TimeTicks")
DisplayString, TAddress, TextualConvention, RowPointer, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TAddress", "TextualConvention", "RowPointer", "DateAndTime", "RowStatus")
acGateway = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3))
if mibBuilder.loadTexts: acGateway.setLastUpdated('201003161503Z')
if mibBuilder.loadTexts: acGateway.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acGateway.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 ISRAEL Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acGateway.setDescription('')
gwConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1))
channelsSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1))
channelsSettingSelectMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("byDestPhoneNumber", 0), ("cyclicAscending", 1), ("ascendingAlways", 2), ("cyclicDescending", 3), ("descendingAlways", 4), ("byDestinationPhoneNumberCyclicAscending", 5), ("bySourcePhoneNumber", 6), ("trunkCyclicAscending", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelsSettingSelectMode.setStatus('current')
if mibBuilder.loadTexts: channelsSettingSelectMode.setDescription('Default method to use for trunk B-channel allocation (IP to Tel calls). Access: Instant. AC INI-Param: CHANNELSELECTMODE')
channelsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21), )
if mibBuilder.loadTexts: channelsTable.setStatus('current')
if mibBuilder.loadTexts: channelsTable.setDescription('The table defines trunk/hunt groups and phone numbers for gateway endpoints. The endpoints that arent defined will be disabled.')
channelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1), ).setIndexNames((0, "AcGateway", "channelsIndex"))
if mibBuilder.loadTexts: channelsEntry.setStatus('current')
if mibBuilder.loadTexts: channelsEntry.setDescription('')
channelsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: channelsIndex.setStatus('current')
if mibBuilder.loadTexts: channelsIndex.setDescription('Channel numbers, starting at 0. AC INI-Param: TrunkGroup_Index')
channelsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsRowStatus.setStatus('current')
if mibBuilder.loadTexts: channelsRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
channelsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelsAction.setStatus('current')
if mibBuilder.loadTexts: channelsAction.setDescription('Development Impending. AC INI-Param: N/A')
channelsActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelsActionResult.setStatus('current')
if mibBuilder.loadTexts: channelsActionResult.setDescription('Development Impending. AC INI-Param: N/A')
channelsTrunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsTrunkID.setStatus('current')
if mibBuilder.loadTexts: channelsTrunkID.setDescription('Trunk/Hunt group ID. Access: Instant. AC INI-Param: TrunkGroup_FirstTrunkId')
channelsStartingCh = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2016))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsStartingCh.setStatus('current')
if mibBuilder.loadTexts: channelsStartingCh.setDescription('Starting Channel for this trunk/hunt group. Access: Instant. AC INI-Param: TrunkGroup_FirstBChannel')
channelsLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2016))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsLastCh.setStatus('current')
if mibBuilder.loadTexts: channelsLastCh.setDescription('Last Channel for the trunk/hunt group. Access: Instant. AC INI-Param: TrunkGroup_LastBChannel')
channelsStartingPhoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsStartingPhoneNum.setStatus('current')
if mibBuilder.loadTexts: channelsStartingPhoneNum.setDescription('Starting Phone Number. Access: Instant. AC INI-Param: TrunkGroup_FirstPhoneNumber')
channelsTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: channelsTrunkGroupID.setDescription('Trunk/Hunt group ID. Access: Instant. AC INI-Param: TrunkGroup_TrunkGroupNum')
channelsProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsProfileID.setStatus('current')
if mibBuilder.loadTexts: channelsProfileID.setDescription('Profile ID. Access: Instant. AC INI-Param: TrunkGroup_ProfileId')
channelsLastTrunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsLastTrunkID.setStatus('current')
if mibBuilder.loadTexts: channelsLastTrunkID.setDescription('Last Trunk/Hunt group ID. Access: Instant. AC INI-Param: TrunkGroup_LastTrunkId')
channelsModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 21, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: channelsModule.setStatus('current')
if mibBuilder.loadTexts: channelsModule.setDescription('Channels Module. Access: Instant. AC INI-Param: TrunkGroup_Module')
trunkGroupSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22), )
if mibBuilder.loadTexts: trunkGroupSettingsTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsTable.setDescription('The table defines trunk/hunt groups configuration')
trunkGroupSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1), ).setIndexNames((0, "AcGateway", "trunkGroupSettingsIndex"))
if mibBuilder.loadTexts: trunkGroupSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsEntry.setDescription('')
trunkGroupSettingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: trunkGroupSettingsIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsIndex.setDescription('Trunk numbers, starting at 0. AC INI-Param: TrunkGroupSettings_Index')
trunkGroupSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupSettingsRowStatus.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
trunkGroupSettingsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupSettingsAction.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsAction.setDescription('Development Impending. AC INI-Param: N/A')
trunkGroupSettingsActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupSettingsActionResult.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsActionResult.setDescription('Development Impending. AC INI-Param: N/A')
trunkGroupSettingsTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupSettingsTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsTrunkGroupID.setDescription('Trunk/Hunt group ID. Access: Instant. AC INI-Param: TrunkGroupSettings_TrunkGroupId')
trunkGroupSettingsChannelSelectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("byPhoneNumber", 0), ("cyclicAscending", 1), ("ascendingAlways", 2), ("cyclicDescending", 3), ("descendingAlways", 4), ("byPhoneNumberCyclicAscending", 5), ("bySourcePhoneNumber", 6), ("trunkCyclicAscending", 7), ("trunkAndChannelCyclicAscending", 8), ("valueNotSet", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupSettingsChannelSelectMode.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsChannelSelectMode.setDescription('Selects the next available (free) Gateway port, FXO/PSTN: affects outgoing calls chanel selection FXS:affects incoming call channel selection. Access: Instant. AC INI-Param: TrunkGroupSettings_ChannelSelectMode')
trunkGroupSettingsRegistrationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 255))).clone(namedValues=NamedValues(("perEndpoint", 0), ("perGateway", 1), ("notApplicable", 2), ("doNotRegister", 4), ("perAccount", 5), ("valueNotSet", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupSettingsRegistrationMode.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsRegistrationMode.setDescription(' Access: Instant. AC INI-Param: TrunkGroupSettings_RegistrationMode')
trunkGroupSettingsGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupSettingsGatewayName.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsGatewayName.setDescription(' Access: Instant. AC INI-Param: TrunkGroupSettings_GatewayName')
trunkGroupSettingsContactUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupSettingsContactUser.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsContactUser.setDescription(' Access: Instant. AC INI-Param: TrunkGroupSettings_ContactUser')
trunkGroupSettingsServingIPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupSettingsServingIPGroup.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsServingIPGroup.setDescription(' Access: Instant. AC INI-Param: TrunkGroupSettings_ServingIPGroup')
trunkGroupSettingsMwiInterrogationType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 1, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("none", 0), ("useActivateOnly", 1), ("resultNotUsed", 2), ("useResult", 3), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupSettingsMwiInterrogationType.setStatus('current')
if mibBuilder.loadTexts: trunkGroupSettingsMwiInterrogationType.setDescription(' Access: Instant. AC INI-Param: TrunkGroupSettings_MWIInterrogationType')
manipulationAndRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2))
manipulationAndRoutingModeTel2Ip = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("routeBeforeMap", 0), ("routeAfterMap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingModeTel2Ip.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingModeTel2Ip.setDescription('Defines order between routing incoming calls from Tel side and performing manipulations. Access: Instant. AC INI-Param: ROUTEMODETEL2IP')
manipulationAndRoutingModeIp2Tel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("routeBeforeMap", 0), ("routeAfterMap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingModeIp2Tel.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingModeIp2Tel.setDescription('Defines order between routing incoming calls from IP side and performing manipulations. Access: Instant. AC INI-Param: ROUTEMODEIP2TEL')
manipulationAndRoutingFilterCalls2Ip = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingFilterCalls2Ip.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingFilterCalls2Ip.setDescription('When Gatekeeper/Proxy is enabled, do not start session if called number is not listed or restricted in Tel to IP routing table. Access: Instant. AC INI-Param: FILTERCALLS2IP')
manipulationAndRoutingAltRoutingTel2IpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("statusOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpEnable.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpEnable.setDescription('Enable Tel to IP Alternative Routing. Can be enabled for status only without affecting routing. Access: Instant. AC INI-Param: ALTROUTINGTEL2IPENABLE')
manipulationAndRoutingAltRoutingTel2IpMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("conn", 1), ("qos", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpMode.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpMode.setDescription('Methods used for Alternative Routing operation. Access: Instant. AC INI-Param: ALTROUTINGTEL2IPMODE')
manipulationAndRoutingAltRoutingTel2IpQosAllowTheNCall = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpQosAllowTheNCall.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpQosAllowTheNCall.setDescription('in case of QOS problem, a call has this probability (in percents) to continue, in order to reevaluate the QOS. Access: Instant. AC INI-Param: ALTROUTINGTEL2IPQOSALLOWPROB')
manipulationAndRoutingPreferRouteTable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingPreferRouteTable.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingPreferRouteTable.setDescription('Prefer Routing Table. Access: Instant. AC INI-Param: PREFERROUTETABLE')
manipulationAndRoutingRedundantRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("routingTable", 1), ("proxy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingRedundantRoutingMode.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingRedundantRoutingMode.setDescription('Mode of redundant routing. 0 - Disabled, 1 - Use routing table, 2 - Use proxies list. Access: Instant. AC INI-Param: REDUNDANTROUTINGMODE')
manipulationAndRoutingAltRoutingTel2IpConnMethod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ping", 0), ("options", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpConnMethod.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpConnMethod.setDescription('Tel to IP Alternative Routing Connectivity Method. Access: Instant. AC INI-Param: ALTROUTINGTEL2IPCONNMETHOD')
manipulationAndRoutingSIPReRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standardMode", 0), ("sendInviteToProxy", 1), ("useRoutingTable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingSIPReRoutingMode.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingSIPReRoutingMode.setDescription('Defines the routing mode after receiving 3xx response or transfer 0 - standard mode 1 - send invite to proxy 2 - use routing table. Access: Instant. AC INI-Param: SIPREROUTINGMODE')
manipulationAndRoutingAltRoutingToneDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingToneDuration.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingToneDuration.setDescription('Alternative Routing Tone Duration. 0 - disabled (milliseconds). Access: Instant. AC INI-Param: ALTROUTINGTONEDURATION')
manipulationAndRoutingAltRoutingTel2IpKeepAliveTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: manipulationAndRoutingAltRoutingTel2IpKeepAliveTime.setDescription('Time interval between OPTIONS Keep-Alive messages for IP connectivity (seconds). Access: Instant. AC INI-Param: ALTROUTINGTEL2IPKEEPALIVETIME')
routing = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20))
tel2IPRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1), )
if mibBuilder.loadTexts: tel2IPRoutingTable.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingTable.setDescription('Phone prefix to IP address routing table. The table is used for routing incoming PSTN to IP calls, if Gatekeeper is not used.')
tel2IPRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1), ).setIndexNames((0, "AcGateway", "tel2IPRoutingIndex"))
if mibBuilder.loadTexts: tel2IPRoutingEntry.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingEntry.setDescription('')
tel2IPRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 199)))
if mibBuilder.loadTexts: tel2IPRoutingIndex.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingIndex.setDescription('Entry number, starting at 0. AC INI-Param: PREFIX_Index')
tel2IPRoutingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingRowStatus.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
tel2IPRoutingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tel2IPRoutingAction.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingAction.setDescription('Development Impending. AC INI-Param: N/A')
tel2IPRoutingActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tel2IPRoutingActionResult.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingActionResult.setDescription('Development Impending. AC INI-Param: N/A')
tel2IPRoutingPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingPrefix.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingPrefix.setDescription('Phone number prefix. up to 50 digits. can be used for defining range of phone numbers. Access: Instant. AC INI-Param: PREFIX_DestinationPrefix')
tel2IPRoutingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 69))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingAddress.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingAddress.setDescription('Address (IP or DNS name). Access: Instant. AC INI-Param: PREFIX_DestAddress')
tel2IPRoutingSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingSrcPrefix.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingSrcPrefix.setDescription('Calling Phone number prefix. up to 50 digits. can be used for defining range of phone numbers. Access: Instant. AC INI-Param: PREFIX_SourcePrefix')
tel2IPRoutingProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingProfileID.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingProfileID.setDescription('Profile ID. Access: Instant. AC INI-Param: PREFIX_ProfileId')
tel2IPRoutingChargeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingChargeCode.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingChargeCode.setDescription('Charge code to use for generating metering tones. Access: Instant. AC INI-Param: PREFIX_MeteringCode')
tel2IPRoutingDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingDestPort.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingDestPort.setDescription('Destination port. Access: Instant. AC INI-Param: PREFIX_DestPort')
tel2IPRoutingSourceIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingSourceIPGroupID.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingSourceIPGroupID.setDescription(' Access: Instant. AC INI-Param: PREFIX_SrcIPGroupID')
tel2IPRoutingDestHostPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingDestHostPrefix.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingDestHostPrefix.setDescription(' Access: Instant. AC INI-Param: PREFIX_DestHostPrefix')
tel2IPRoutingDestIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingDestIPGroupID.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingDestIPGroupID.setDescription(' Access: Instant. AC INI-Param: PREFIX_DestIPGroupID')
tel2IPRoutingSourceHostPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingSourceHostPrefix.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingSourceHostPrefix.setDescription(' Access: Instant. AC INI-Param: PREFIX_SrcHostPrefix')
tel2IPRoutingTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("udp", 0), ("tcp", 1), ("tls", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingTransportType.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingTransportType.setDescription(' Access: Instant. AC INI-Param: PREFIX_TransportType')
tel2IPRoutingSourceTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tel2IPRoutingSourceTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: tel2IPRoutingSourceTrunkGroupID.setDescription(' Access: Instant. AC INI-Param: PREFIX_SrcTrunkGroupID')
iP2TelRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2), )
if mibBuilder.loadTexts: iP2TelRoutingTable.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingTable.setDescription('Phone prefix to Trunk group (or Hunt Group for MP-1xx)routing table. The table is used for routing outgoing IP Telco calls, according to received from IP destination phone number.')
iP2TelRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1), ).setIndexNames((0, "AcGateway", "iP2TelRoutingIndex"))
if mibBuilder.loadTexts: iP2TelRoutingEntry.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingEntry.setDescription('')
iP2TelRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 119)))
if mibBuilder.loadTexts: iP2TelRoutingIndex.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingIndex.setDescription('Entry number, starting at 0. AC INI-Param: PstnPrefix_Index')
iP2TelRoutingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingRowStatus.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
iP2TelRoutingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iP2TelRoutingAction.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingAction.setDescription('Development Impending. AC INI-Param: N/A')
iP2TelRoutingActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iP2TelRoutingActionResult.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingActionResult.setDescription('Development Impending. AC INI-Param: N/A')
iP2TelRoutingPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingPrefix.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingPrefix.setDescription('Phone number prefix. up to 80 digits. can be used for defining range of phone numbers. Access: Instant. AC INI-Param: PstnPrefix_DestPrefix')
iP2TelRoutingTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingTrunkGroupID.setDescription('Trunk/Hunt group ID. Access: Instant. AC INI-Param: PstnPrefix_TrunkGroupId')
iP2TelRoutingSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingSrcPrefix.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingSrcPrefix.setDescription('Calling Phone number prefix. up to 49 digits. can be used for defining range of phone numbers. Access: Instant. AC INI-Param: PstnPrefix_SourcePrefix')
iP2TelRoutingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingAddress.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingAddress.setDescription('Address (IP or DNS name). Access: Instant. AC INI-Param: PstnPrefix_SourceAddress')
iP2TelRoutingProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingProfileID.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingProfileID.setDescription('Profile ID. Access: Instant. AC INI-Param: PstnPrefix_ProfileId')
iP2TelRoutingSourceIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingSourceIPGroupID.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingSourceIPGroupID.setDescription(' Access: Instant. AC INI-Param: PstnPrefix_SrcIPGroupID')
iP2TelRoutingDestHostPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingDestHostPrefix.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingDestHostPrefix.setDescription(' Access: Instant. AC INI-Param: PstnPrefix_DestHostPrefix')
iP2TelRoutingSourceHostPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 2, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iP2TelRoutingSourceHostPrefix.setStatus('current')
if mibBuilder.loadTexts: iP2TelRoutingSourceHostPrefix.setDescription(' Access: Instant. AC INI-Param: PstnPrefix_SrcHostPrefix')
dnsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3), )
if mibBuilder.loadTexts: dnsInfoTable.setStatus('current')
if mibBuilder.loadTexts: dnsInfoTable.setDescription('')
dnsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1), ).setIndexNames((0, "AcGateway", "dnsInfoIndex"))
if mibBuilder.loadTexts: dnsInfoEntry.setStatus('current')
if mibBuilder.loadTexts: dnsInfoEntry.setDescription('')
dnsInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: dnsInfoIndex.setStatus('current')
if mibBuilder.loadTexts: dnsInfoIndex.setDescription('Entry number, starting at 0. AC INI-Param: Dns2Ip_Index')
dnsInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsInfoRowStatus.setStatus('current')
if mibBuilder.loadTexts: dnsInfoRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
dnsInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsInfoAction.setStatus('current')
if mibBuilder.loadTexts: dnsInfoAction.setDescription('Development Impending. AC INI-Param: N/A')
dnsInfoActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsInfoActionResult.setStatus('current')
if mibBuilder.loadTexts: dnsInfoActionResult.setDescription('Development Impending. AC INI-Param: N/A')
dnsInfoDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 69))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsInfoDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsInfoDomainName.setDescription('Domain Name. Access: Instant. AC INI-Param: Dns2Ip_DomainName')
dnsInfoFirstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsInfoFirstIPAddress.setStatus('current')
if mibBuilder.loadTexts: dnsInfoFirstIPAddress.setDescription('IP Address. Access: Instant. AC INI-Param: Dns2Ip_FirstIpAddress')
dnsInfoSecondIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsInfoSecondIPAddress.setStatus('current')
if mibBuilder.loadTexts: dnsInfoSecondIPAddress.setDescription('IP Address. Access: Instant. AC INI-Param: Dns2Ip_SecondIpAddress')
dnsInfoThirdIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsInfoThirdIPAddress.setStatus('current')
if mibBuilder.loadTexts: dnsInfoThirdIPAddress.setDescription('IP Address. Access: Instant. AC INI-Param: Dns2Ip_ThirdIpAddress')
dnsInfoFourthIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 3, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsInfoFourthIPAddress.setStatus('current')
if mibBuilder.loadTexts: dnsInfoFourthIPAddress.setDescription('IP Address. Access: Instant. AC INI-Param: Dns2Ip_FourthIpAddress')
srvInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4), )
if mibBuilder.loadTexts: srvInfoTable.setStatus('current')
if mibBuilder.loadTexts: srvInfoTable.setDescription('')
srvInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1), ).setIndexNames((0, "AcGateway", "srvInfoIndex"))
if mibBuilder.loadTexts: srvInfoEntry.setStatus('current')
if mibBuilder.loadTexts: srvInfoEntry.setDescription('')
srvInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: srvInfoIndex.setStatus('current')
if mibBuilder.loadTexts: srvInfoIndex.setDescription('Entry number, starting at 0. AC INI-Param: Srv2Ip_Index')
srvInfoRecordNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: srvInfoRecordNum.setStatus('current')
if mibBuilder.loadTexts: srvInfoRecordNum.setDescription('Equals to the entry number. AC INI-Param: Srv2Ip_Index')
srvInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoRowStatus.setStatus('current')
if mibBuilder.loadTexts: srvInfoRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
srvInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvInfoAction.setStatus('current')
if mibBuilder.loadTexts: srvInfoAction.setDescription('Development Impending. AC INI-Param: N/A')
srvInfoActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvInfoActionResult.setStatus('current')
if mibBuilder.loadTexts: srvInfoActionResult.setDescription('Development Impending. AC INI-Param: N/A')
srvInfoInternalDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoInternalDomainName.setStatus('current')
if mibBuilder.loadTexts: srvInfoInternalDomainName.setDescription('the Domain name for the SRV query. Access: Instant. AC INI-Param: Srv2Ip_InternalDomain')
srvInfoTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("uDP", 0), ("tCP", 1), ("tLS", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoTransportType.setStatus('current')
if mibBuilder.loadTexts: srvInfoTransportType.setDescription('the transport type. Access: Instant. AC INI-Param: Srv2Ip_TransportType')
srvInfoDNSName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoDNSName.setStatus('current')
if mibBuilder.loadTexts: srvInfoDNSName.setDescription('the DNS in the SRV Query Result. Access: Instant. AC INI-Param: Srv2Ip_Dns1')
srvInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoPriority.setStatus('current')
if mibBuilder.loadTexts: srvInfoPriority.setDescription('the Priority of this SRV Query. Access: Instant. AC INI-Param: Srv2Ip_Priority1')
srvInfoWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoWeight.setStatus('current')
if mibBuilder.loadTexts: srvInfoWeight.setDescription('the Weight of this SRV Query. Access: Instant. AC INI-Param: Srv2Ip_Weight1')
srvInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoPort.setStatus('current')
if mibBuilder.loadTexts: srvInfoPort.setDescription('the port of the DNS. Access: Instant. AC INI-Param: Srv2Ip_Port1')
srvInfoDNSName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoDNSName2.setStatus('current')
if mibBuilder.loadTexts: srvInfoDNSName2.setDescription('the DNS in the SRV Query Result. Access: Instant. AC INI-Param: Srv2Ip_Dns2')
srvInfoPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoPriority2.setStatus('current')
if mibBuilder.loadTexts: srvInfoPriority2.setDescription('the Priority of this SRV Query. Access: Instant. AC INI-Param: Srv2Ip_Priority2')
srvInfoWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoWeight2.setStatus('current')
if mibBuilder.loadTexts: srvInfoWeight2.setDescription('the Weight of this SRV Query. Access: Instant. AC INI-Param: Srv2Ip_Weight2')
srvInfoPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoPort2.setStatus('current')
if mibBuilder.loadTexts: srvInfoPort2.setDescription('the port of the DNS. Access: Instant. AC INI-Param: Srv2Ip_Port2')
srvInfoDNSName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoDNSName3.setStatus('current')
if mibBuilder.loadTexts: srvInfoDNSName3.setDescription('the DNS in the SRV Query Result. Access: Instant. AC INI-Param: Srv2Ip_Dns3')
srvInfoPriority3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoPriority3.setStatus('current')
if mibBuilder.loadTexts: srvInfoPriority3.setDescription('the Priority of this SRV Query. Access: Instant. AC INI-Param: Srv2Ip_Priority3')
srvInfoWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoWeight3.setStatus('current')
if mibBuilder.loadTexts: srvInfoWeight3.setDescription('the Weight of this SRV Query. Access: Instant. AC INI-Param: Srv2Ip_Weight3')
srvInfoPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 4, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srvInfoPort3.setStatus('current')
if mibBuilder.loadTexts: srvInfoPort3.setDescription('the port of the DNS. Access: Instant. AC INI-Param: Srv2Ip_Port3')
forwardOnBusyTrunkDestTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 5), )
if mibBuilder.loadTexts: forwardOnBusyTrunkDestTable.setStatus('current')
if mibBuilder.loadTexts: forwardOnBusyTrunkDestTable.setDescription('GwApp Forward On Busy Trunk Destination Table')
forwardOnBusyTrunkDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 5, 1), ).setIndexNames((0, "AcGateway", "forwardOnBusyTrunkDestIndex"))
if mibBuilder.loadTexts: forwardOnBusyTrunkDestEntry.setStatus('current')
if mibBuilder.loadTexts: forwardOnBusyTrunkDestEntry.setDescription('')
forwardOnBusyTrunkDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: forwardOnBusyTrunkDestIndex.setStatus('current')
if mibBuilder.loadTexts: forwardOnBusyTrunkDestIndex.setDescription('Entry number, starting at 0. AC INI-Param: ForwardOnBusyTrunkDest_Index')
forwardOnBusyTrunkDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: forwardOnBusyTrunkDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: forwardOnBusyTrunkDestRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
forwardOnBusyTrunkDestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardOnBusyTrunkDestAction.setStatus('current')
if mibBuilder.loadTexts: forwardOnBusyTrunkDestAction.setDescription('Development Impending. AC INI-Param: N/A')
forwardOnBusyTrunkDestActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardOnBusyTrunkDestActionResult.setStatus('current')
if mibBuilder.loadTexts: forwardOnBusyTrunkDestActionResult.setDescription('Development Impending. AC INI-Param: N/A')
forwardOnBusyTrunkDestTrunkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: forwardOnBusyTrunkDestTrunkGroupId.setStatus('current')
if mibBuilder.loadTexts: forwardOnBusyTrunkDestTrunkGroupId.setDescription('GwApp Forward On Busy Trunk Destination Table. Access: Instant. AC INI-Param: ForwardOnBusyTrunkDest_TrunkGroupId')
forwardOnBusyTrunkDestForwardDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 5, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: forwardOnBusyTrunkDestForwardDestination.setStatus('current')
if mibBuilder.loadTexts: forwardOnBusyTrunkDestForwardDestination.setDescription('GwApp Forward On Busy Trunk Destination Table. Access: Instant. AC INI-Param: ForwardOnBusyTrunkDest_ForwardDestination')
routingEnableDigitDelivery2IP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingEnableDigitDelivery2IP.setStatus('current')
if mibBuilder.loadTexts: routingEnableDigitDelivery2IP.setDescription('Enable automatic digit delivery to IP side after call is connected. Access: Offline. AC INI-Param: ENABLEDIGITDELIVERY2IP')
routingSourceIPAddressInput = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("sIPContactHeader", 0), ("layer3SourceIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingSourceIPAddressInput.setStatus('current')
if mibBuilder.loadTexts: routingSourceIPAddressInput.setDescription('Decides the origin of the source ip address looked at when routing using the IP --> Tel table. 0 - Contact 1 - Recieved packet source IP address. Access: Instant. AC INI-Param: SOURCEIPADDRESSINPUT')
altRouteCause = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10))
altRouteCauseIP2TELTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 21), )
if mibBuilder.loadTexts: altRouteCauseIP2TELTable.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseIP2TELTable.setDescription('')
altRouteCauseIP2TELEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 21, 1), ).setIndexNames((0, "AcGateway", "altRouteCauseIP2TELIndex"))
if mibBuilder.loadTexts: altRouteCauseIP2TELEntry.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseIP2TELEntry.setDescription('')
altRouteCauseIP2TELIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: altRouteCauseIP2TELIndex.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseIP2TELIndex.setDescription('Entry number, starting at 0. AC INI-Param: AltRouteCauseIp2Tel_Index')
altRouteCauseIP2TELRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: altRouteCauseIP2TELRowStatus.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseIP2TELRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
altRouteCauseIP2TELAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: altRouteCauseIP2TELAction.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseIP2TELAction.setDescription('Development Impending. AC INI-Param: N/A')
altRouteCauseIP2TELActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: altRouteCauseIP2TELActionResult.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseIP2TELActionResult.setDescription('Development Impending. AC INI-Param: N/A')
altRouteCauseIP2TELReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 232))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: altRouteCauseIP2TELReleaseCause.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseIP2TELReleaseCause.setDescription('Release Cause. Access: Instant. AC INI-Param: AltRouteCauseIp2Tel_ReleaseCause')
altRouteCauseTEL2IPTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 22), )
if mibBuilder.loadTexts: altRouteCauseTEL2IPTable.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseTEL2IPTable.setDescription('')
altRouteCauseTEL2IPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 22, 1), ).setIndexNames((0, "AcGateway", "altRouteCauseTEL2IPIndex"))
if mibBuilder.loadTexts: altRouteCauseTEL2IPEntry.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseTEL2IPEntry.setDescription('')
altRouteCauseTEL2IPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: altRouteCauseTEL2IPIndex.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseTEL2IPIndex.setDescription('Entry number, starting at 0. AC INI-Param: AltRouteCauseTel2Ip_Index')
altRouteCauseTEL2IPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: altRouteCauseTEL2IPRowStatus.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseTEL2IPRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
altRouteCauseTEL2IPAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: altRouteCauseTEL2IPAction.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseTEL2IPAction.setDescription('Development Impending. AC INI-Param: N/A')
altRouteCauseTEL2IPActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: altRouteCauseTEL2IPActionResult.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseTEL2IPActionResult.setDescription('Development Impending. AC INI-Param: N/A')
altRouteCauseTEL2IPReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 20, 10, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: altRouteCauseTEL2IPReleaseCause.setStatus('current')
if mibBuilder.loadTexts: altRouteCauseTEL2IPReleaseCause.setDescription('Release Cause. Access: Instant. AC INI-Param: AltRouteCauseTel2Ip_ReleaseCause')
manipulation = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21))
manipulationRemovePrefix = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationRemovePrefix.setStatus('current')
if mibBuilder.loadTexts: manipulationRemovePrefix.setDescription('Remove prefix defined in IP to Trunk Group table (IP to Tel calls). Access: Instant. AC INI-Param: REMOVEPREFIX')
manipulationAddTrunkGroupAsPrefix = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAddTrunkGroupAsPrefix.setStatus('current')
if mibBuilder.loadTexts: manipulationAddTrunkGroupAsPrefix.setDescription('Add Trunk Group ID on which the call was received as the called number prefix. Access: Instant. AC INI-Param: ADDTRUNKGROUPASPREFIX')
manipulationAddPortAsPrefix = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAddPortAsPrefix.setStatus('current')
if mibBuilder.loadTexts: manipulationAddPortAsPrefix.setDescription('Add port number (Analog gateway) / Trunk ID (Digital gateway) as called number prefix. Access: Instant. AC INI-Param: ADDPORTASPREFIX')
manipulationReplaceEmptyDstWithPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationReplaceEmptyDstWithPortNumber.setStatus('current')
if mibBuilder.loadTexts: manipulationReplaceEmptyDstWithPortNumber.setDescription('Replace empty destination number (received from Tel side) with port number. Access: Instant. AC INI-Param: REPLACEEMPTYDSTWITHPORTNUMBER')
manipulationCIDNotification = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationCIDNotification.setStatus('current')
if mibBuilder.loadTexts: manipulationCIDNotification.setDescription('If NO PRESENTATION arrived from PSTN and this parameter enabled,than the presentation will be allowed. If this parameter disabled, the, presentation will be restricted. Access: Instant. AC INI-Param: CIDNOTIFICATION')
manipulationUseSourceNumberAsDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("overwrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationUseSourceNumberAsDisplayName.setStatus('current')
if mibBuilder.loadTexts: manipulationUseSourceNumberAsDisplayName.setDescription('if set to 1 Use source number as display name if empty. if set to 2 always use source number as display name . Access: Instant. AC INI-Param: USESOURCENUMBERASDISPLAYNAME')
manipulationAddNPIandTON2CalledNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAddNPIandTON2CalledNumber.setStatus('current')
if mibBuilder.loadTexts: manipulationAddNPIandTON2CalledNumber.setDescription('Add NPI and TON as prefix to called number. Access: Instant. AC INI-Param: ADDNPIANDTON2CALLEDNUMBER')
manipulationAddNPIandTON2CallingNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAddNPIandTON2CallingNumber.setStatus('current')
if mibBuilder.loadTexts: manipulationAddNPIandTON2CallingNumber.setDescription('Add NPI and TON as prefix to calling number. Access: Instant. AC INI-Param: ADDNPIANDTON2CALLINGNUMBER')
manipulationUseDisplayNameAsSourceNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationUseDisplayNameAsSourceNumber.setStatus('current')
if mibBuilder.loadTexts: manipulationUseDisplayNameAsSourceNumber.setDescription('when set to 1 then If display name exists, use it as source number. If not, set presentation as restricted. Access: Instant. AC INI-Param: USEDISPLAYNAMEASSOURCENUMBER')
manipulationAddPrefixToRedirectNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAddPrefixToRedirectNumber.setStatus('current')
if mibBuilder.loadTexts: manipulationAddPrefixToRedirectNumber.setDescription('Prefix which added to redirect phone number. Access: Instant. AC INI-Param: PREFIX2REDIRECTNUMBER')
manipulationAddPhoneContextAsPrefix = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAddPhoneContextAsPrefix.setStatus('current')
if mibBuilder.loadTexts: manipulationAddPhoneContextAsPrefix.setDescription('add the phone context to src/dest phone number as prefix. Access: Instant. AC INI-Param: ADDPHONECONTEXTASPREFIX')
manipulationBlindTransferAddPrefix = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationBlindTransferAddPrefix.setStatus('current')
if mibBuilder.loadTexts: manipulationBlindTransferAddPrefix.setDescription('Add keying sequence for performing blind transfer as transfer number prefix. Access: Instant. AC INI-Param: KEYBLINDTRANSFERADDPREFIX')
manipulationSourceMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fromAndPai", 0), ("fromOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationSourceMode.setStatus('current')
if mibBuilder.loadTexts: manipulationSourceMode.setDescription('Describes the headers containing source number after manipulation: (0) both FROM and P-Asserted contain src number after manipulations (1) only FROM contains src number after manipulation. Access: Instant. AC INI-Param: SOURCEMANIPULATIONMODE')
manipulationAddTrunkGroupAsPrefixToSource = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationAddTrunkGroupAsPrefixToSource.setStatus('current')
if mibBuilder.loadTexts: manipulationAddTrunkGroupAsPrefixToSource.setDescription('Add Trunk Group ID on which the call was received as the calling number prefix. Access: Instant. AC INI-Param: ADDTRUNKGROUPASPREFIXTOSOURCE')
manipulationSetTel2IpRedirectReason = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 9, 10, 13, 14, 15))).clone(namedValues=NamedValues(("notConfigured", -1), ("unknown", 0), ("bust", 1), ("noReply", 2), ("networkBusy", 3), ("deflection", 4), ("dTEOutOfOrder", 9), ("forwardingDTE", 10), ("transfer", 13), ("pickUp", 14), ("systematicOrUnconditional", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationSetTel2IpRedirectReason.setStatus('current')
if mibBuilder.loadTexts: manipulationSetTel2IpRedirectReason.setDescription('If redirect (diversion) data is received from the PSTN interface, the redirect reason is set to the value of this parameter, before transferring it to the IP. default value is -1 --> not change the received value. . Access: Instant. AC INI-Param: SetTel2IpRedirectReason')
manipulationSetIp2TelRedirectReason = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 9, 10, 13, 14, 15))).clone(namedValues=NamedValues(("notConfigured", -1), ("unknown", 0), ("bust", 1), ("noReply", 2), ("networkBusy", 3), ("deflection", 4), ("dTEOutOfOrder", 9), ("forwardingDTE", 10), ("transfer", 13), ("pickUp", 14), ("systematicOrUnconditional", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationSetIp2TelRedirectReason.setStatus('current')
if mibBuilder.loadTexts: manipulationSetIp2TelRedirectReason.setDescription('If redirect (diversion) data is received from the IP side, the redirect reason is set to the value of this parameter, before transferring it to the PSTN interface. default value is -1 --> not change the received value. . Access: Instant. AC INI-Param: SetIp2TelRedirectReason')
manipulationSetIp2TelRedirectScreeningIndicator = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", -1), ("userProvided", 0), ("userPassed", 1), ("userFailed", 2), ("networkProvided", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manipulationSetIp2TelRedirectScreeningIndicator.setStatus('current')
if mibBuilder.loadTexts: manipulationSetIp2TelRedirectScreeningIndicator.setDescription('Override screening indicator value of the redirect number in Setup messages to PSTN interface. Access: Instant. AC INI-Param: SetIp2TelRedirectScreeningInd')
dstIP2TELTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21), )
if mibBuilder.loadTexts: dstIP2TELTable.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELTable.setDescription('')
dstIP2TELEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1), ).setIndexNames((0, "AcGateway", "dstIP2TELIndex"))
if mibBuilder.loadTexts: dstIP2TELEntry.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELEntry.setDescription('')
dstIP2TELIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: dstIP2TELIndex.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELIndex.setDescription('Destination number, starting at 0. AC INI-Param: NumberMapIp2Tel_Index')
dstIP2TELRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELRowStatus.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
dstIP2TELAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstIP2TELAction.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELAction.setDescription('Development Impending. AC INI-Param: N/A')
dstIP2TELActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstIP2TELActionResult.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELActionResult.setDescription('Development Impending. AC INI-Param: N/A')
dstIP2TELPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELPrefix.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELPrefix.setDescription(' Access: Instant. AC INI-Param: NumberMapIp2Tel_DestinationPrefix')
dstIP2TELNumOfStrippedDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELNumOfStrippedDigits.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELNumOfStrippedDigits.setDescription('Num of stripped digits, Remove from left. Access: Instant. AC INI-Param: NumberMapIp2Tel_RemoveFromLeft')
dstIP2TELPrefixToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELPrefixToAdd.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELPrefixToAdd.setDescription('Prefix to Add. Access: Instant. AC INI-Param: NumberMapIp2Tel_Prefix2Add')
dstIP2TELNumOfDigitsToLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELNumOfDigitsToLeave.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELNumOfDigitsToLeave.setDescription('Number of digits to leave. Access: Instant. AC INI-Param: NumberMapIp2Tel_LeaveFromRight')
dstIP2TELNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9, 255))).clone(namedValues=NamedValues(("unknown", 0), ("e164Public", 1), ("private", 9), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELNumberPlan.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELNumberPlan.setDescription('Number Plan. Access: Instant. AC INI-Param: NumberMapIp2Tel_NumberPlan')
dstIP2TELNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 255))).clone(namedValues=NamedValues(("unknown", 0), ("international-Level2Regional", 1), ("national-Level1Regional", 2), ("networkSpecific-NetworkPISN", 3), ("subscriber-Level0Regional", 4), ("abbreviated", 6), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELNumberType.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELNumberType.setDescription('Number Type. Access: Instant. AC INI-Param: NumberMapIp2Tel_NumberType')
dstIP2TELSourcePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELSourcePrefix.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELSourcePrefix.setDescription('Source Prefix. Access: Instant. AC INI-Param: NumberMapIp2Tel_SourcePrefix')
dstIP2TELSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELSourceIP.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELSourceIP.setDescription('Source IP. Access: Instant. AC INI-Param: NumberMapIp2Tel_SourceAddress')
dstIP2TELNumOfDigitsToRemFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELNumOfDigitsToRemFromRight.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELNumOfDigitsToRemFromRight.setDescription('Num Of digits To Remove from Right. Access: Instant. AC INI-Param: NumberMapIp2Tel_RemoveFromRight')
dstIP2TELSuffix2Add = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELSuffix2Add.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELSuffix2Add.setDescription('Suffix To Add. Access: Instant. AC INI-Param: NumberMapIp2Tel_Suffix2Add')
dstIP2TELIsPresentationRestricted = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 21, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIP2TELIsPresentationRestricted.setStatus('current')
if mibBuilder.loadTexts: dstIP2TELIsPresentationRestricted.setDescription('Is Presentation Restricted. Access: Instant. AC INI-Param: NumberMapIp2Tel_IsPresentationRestricted')
dstTEL2IPTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22), )
if mibBuilder.loadTexts: dstTEL2IPTable.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPTable.setDescription('')
dstTEL2IPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1), ).setIndexNames((0, "AcGateway", "dstTEL2IPIndex"))
if mibBuilder.loadTexts: dstTEL2IPEntry.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPEntry.setDescription('')
dstTEL2IPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 119)))
if mibBuilder.loadTexts: dstTEL2IPIndex.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPIndex.setDescription('Destination number, starting at 0. AC INI-Param: NumberMapTel2Ip_Index')
dstTEL2IPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPRowStatus.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
dstTEL2IPAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstTEL2IPAction.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPAction.setDescription('Development Impending. AC INI-Param: N/A')
dstTEL2IPActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstTEL2IPActionResult.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPActionResult.setDescription('Development Impending. AC INI-Param: N/A')
dstTEL2IPPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPPrefix.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPPrefix.setDescription(' Access: Instant. AC INI-Param: NumberMapTel2Ip_DestinationPrefix')
dstTEL2IPNumOfStrippedDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPNumOfStrippedDigits.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPNumOfStrippedDigits.setDescription('Num of stripped digits. Access: Instant. AC INI-Param: NumberMapTel2Ip_RemoveFromLeft')
dstTEL2IPPrefixToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPPrefixToAdd.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPPrefixToAdd.setDescription('Prefix to Add. Access: Instant. AC INI-Param: NumberMapTel2Ip_Prefix2Add')
dstTEL2IPNumOfDigitsToLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPNumOfDigitsToLeave.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPNumOfDigitsToLeave.setDescription('Number of digits to leave. Access: Instant. AC INI-Param: NumberMapTel2Ip_LeaveFromRight')
dstTEL2IPNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9, 255))).clone(namedValues=NamedValues(("unknown", 0), ("e164Public", 1), ("private", 9), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPNumberPlan.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPNumberPlan.setDescription('Number Plan. Access: Instant. AC INI-Param: NumberMapTel2Ip_NumberPlan')
dstTEL2IPNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 255))).clone(namedValues=NamedValues(("unknown", 0), ("international-Level2Regional", 1), ("national-Level1Regional", 2), ("networkSpecific-NetworkPISN", 3), ("subscriber-Level0Regional", 4), ("abbreviated", 6), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPNumberType.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPNumberType.setDescription('Number Type. Access: Instant. AC INI-Param: NumberMapTel2Ip_NumberType')
dstTEL2IPSourcePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPSourcePrefix.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPSourcePrefix.setDescription(' Access: Instant. AC INI-Param: NumberMapTel2Ip_SourcePrefix')
dstTEL2IPNumOfDigitsToRemFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPNumOfDigitsToRemFromRight.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPNumOfDigitsToRemFromRight.setDescription('Num Of digits To Remove from Right. Access: Instant. AC INI-Param: NumberMapTel2Ip_RemoveFromRight')
dstTEL2IPSuffix2Add = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPSuffix2Add.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPSuffix2Add.setDescription('Suffix To Add. Access: Instant. AC INI-Param: NumberMapTel2Ip_Suffix2Add')
dstTEL2IPIsPresentationRestricted = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPIsPresentationRestricted.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPIsPresentationRestricted.setDescription('Is Presentation Restricted. Access: Instant. AC INI-Param: NumberMapTel2Ip_IsPresentationRestricted')
dstTEL2IPSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPSourceIPAddress.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPSourceIPAddress.setDescription('Source Address. Access: Instant. AC INI-Param: NumberMapTel2Ip_SourceAddress')
dstTEL2IPSourceTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPSourceTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPSourceTrunkGroupID.setDescription('GwApp Tel-to-IP Destination Phone Number Manipulation Rules Table. Access: Instant. AC INI-Param: NumberMapTel2Ip_SrcTrunkGroupID')
dstTEL2IPSourceIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstTEL2IPSourceIPGroupID.setStatus('current')
if mibBuilder.loadTexts: dstTEL2IPSourceIPGroupID.setDescription('GwApp Tel-to-IP Destination Phone Number Manipulation Rules Table. Access: Instant. AC INI-Param: NumberMapTel2Ip_SrcIPGroupID')
srcIP2TELTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23), )
if mibBuilder.loadTexts: srcIP2TELTable.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELTable.setDescription('')
srcIP2TELEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1), ).setIndexNames((0, "AcGateway", "srcIP2TELIndex"))
if mibBuilder.loadTexts: srcIP2TELEntry.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELEntry.setDescription('')
srcIP2TELIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: srcIP2TELIndex.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELIndex.setDescription('Source number, starting at 0. AC INI-Param: SourceNumberMapIp2Tel_Index')
srcIP2TELRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELRowStatus.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
srcIP2TELAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcIP2TELAction.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELAction.setDescription('Development Impending. AC INI-Param: N/A')
srcIP2TELActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcIP2TELActionResult.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELActionResult.setDescription('Development Impending. AC INI-Param: N/A')
srcIP2TELPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELPrefix.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELPrefix.setDescription(' Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_SourcePrefix')
srcIP2TELNumOfStrippedDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELNumOfStrippedDigits.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELNumOfStrippedDigits.setDescription('Num of stripped digits. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_RemoveFromLeft')
srcIP2TELPrefixToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELPrefixToAdd.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELPrefixToAdd.setDescription('Prefix to Add. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_Prefix2Add')
srcIP2TELNumOfDigitsToLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELNumOfDigitsToLeave.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELNumOfDigitsToLeave.setDescription('Number of digits to leave. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_LeaveFromRight')
srcIP2TELNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9, 255))).clone(namedValues=NamedValues(("unknown", 0), ("e164Public", 1), ("private", 9), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELNumberPlan.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELNumberPlan.setDescription('Number Plan. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_NumberPlan')
srcIP2TELNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 255))).clone(namedValues=NamedValues(("unknown", 0), ("international-Level2Regional", 1), ("national-Level1Regional", 2), ("networkSpecific-NetworkPISN", 3), ("subscriber-Level0Regional", 4), ("abbreviated", 6), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELNumberType.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELNumberType.setDescription('Number Type. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_NumberType')
srcIP2TELDestPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELDestPrefix.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELDestPrefix.setDescription(' Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_DestinationPrefix')
srcIP2TELPresentation = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("notBlocked", 0), ("blocked", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELPresentation.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELPresentation.setDescription('Presentation. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_IsPresentationRestricted')
srcIP2TELNumOfDigitsToRemFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELNumOfDigitsToRemFromRight.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELNumOfDigitsToRemFromRight.setDescription('Num Of digits To Remove from Right. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_RemoveFromRight')
srcIP2TELSuffix2Add = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELSuffix2Add.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELSuffix2Add.setDescription('Suffix To Add. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_Suffix2Add')
srcIP2TELSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 23, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIP2TELSourceIPAddress.setStatus('current')
if mibBuilder.loadTexts: srcIP2TELSourceIPAddress.setDescription('Source Address. Access: Instant. AC INI-Param: SourceNumberMapIp2Tel_SourceAddress')
srcTEL2IPTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24), )
if mibBuilder.loadTexts: srcTEL2IPTable.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPTable.setDescription('')
srcTEL2IPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1), ).setIndexNames((0, "AcGateway", "srcTEL2IPIndex"))
if mibBuilder.loadTexts: srcTEL2IPEntry.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPEntry.setDescription('')
srcTEL2IPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 119)))
if mibBuilder.loadTexts: srcTEL2IPIndex.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPIndex.setDescription('Source number, starting at 0. AC INI-Param: SourceNumberMapTel2Ip_Index')
srcTEL2IPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPRowStatus.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
srcTEL2IPAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcTEL2IPAction.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPAction.setDescription('Development Impending. AC INI-Param: N/A')
srcTEL2IPActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcTEL2IPActionResult.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPActionResult.setDescription('Development Impending. AC INI-Param: N/A')
srcTEL2IPPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPPrefix.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPPrefix.setDescription(' Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_SourcePrefix')
srcTEL2IPNumOfStrippedDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPNumOfStrippedDigits.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPNumOfStrippedDigits.setDescription('Num of stripped digits, Remove from left. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_RemoveFromLeft')
srcTEL2IPPrefixToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPPrefixToAdd.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPPrefixToAdd.setDescription('Prefix to Add. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_Prefix2Add')
srcTEL2IPNumOfDigitsToLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPNumOfDigitsToLeave.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPNumOfDigitsToLeave.setDescription('Number of digits to leave. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_LeaveFromRight')
srcTEL2IPNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9, 255))).clone(namedValues=NamedValues(("unknown", 0), ("e164Public", 1), ("private", 9), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPNumberPlan.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPNumberPlan.setDescription('Number Plan. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_NumberPlan')
srcTEL2IPNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 255))).clone(namedValues=NamedValues(("unknown", 0), ("international-Level2Regional", 1), ("national-Level1Regional", 2), ("networkSpecific-NetworkPISN", 3), ("subscriber-Level0Regional", 4), ("abbreviated", 6), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPNumberType.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPNumberType.setDescription('Number Type. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_NumberType')
srcTEL2IPDestPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPDestPrefix.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPDestPrefix.setDescription(' Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_DestinationPrefix')
srcTEL2IPPresentation = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("notBlocked", 0), ("blocked", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPPresentation.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPPresentation.setDescription('Presentation. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_IsPresentationRestricted')
srcTEL2IPNumOfDigitsToRemFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPNumOfDigitsToRemFromRight.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPNumOfDigitsToRemFromRight.setDescription('Num Of digits To Remove from Right. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_RemoveFromRight')
srcTEL2IPSuffix2Add = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPSuffix2Add.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPSuffix2Add.setDescription('Suffix To Add. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_Suffix2Add')
srcTEL2IPSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPSourceIPAddress.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPSourceIPAddress.setDescription('Source Address. Access: Instant. AC INI-Param: SourceNumberMapTel2Ip_SourceAddress')
srcTEL2IPSourceTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPSourceTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPSourceTrunkGroupID.setDescription('GwApp IP-toTel Destination Phone Number Manipulation Rules Table. Access: Instant. AC INI-Param: NumberMapIp2Tel_SrcTrunkGroupID')
srcTEL2IPSourceIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 24, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcTEL2IPSourceIPGroupID.setStatus('current')
if mibBuilder.loadTexts: srcTEL2IPSourceIPGroupID.setDescription('GwApp IP-toTel Destination Phone Number Manipulation Rules Table. Access: Instant. AC INI-Param: NumberMapIp2Tel_SrcIPGroupID')
phoneContextTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25), )
if mibBuilder.loadTexts: phoneContextTable.setStatus('current')
if mibBuilder.loadTexts: phoneContextTable.setDescription('')
phoneContextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25, 1), ).setIndexNames((0, "AcGateway", "phoneContextIndex"))
if mibBuilder.loadTexts: phoneContextEntry.setStatus('current')
if mibBuilder.loadTexts: phoneContextEntry.setDescription('')
phoneContextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: phoneContextIndex.setStatus('current')
if mibBuilder.loadTexts: phoneContextIndex.setDescription('Entry number, starting at 0. AC INI-Param: PhoneContext_Index')
phoneContextRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phoneContextRowStatus.setStatus('current')
if mibBuilder.loadTexts: phoneContextRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
phoneContextAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneContextAction.setStatus('current')
if mibBuilder.loadTexts: phoneContextAction.setDescription('Development Impending. AC INI-Param: N/A')
phoneContextActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phoneContextActionResult.setStatus('current')
if mibBuilder.loadTexts: phoneContextActionResult.setDescription('Development Impending. AC INI-Param: N/A')
phoneContextNPI = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 9))).clone(namedValues=NamedValues(("notConfigured", -1), ("unknown", 0), ("e164Public", 1), ("private", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phoneContextNPI.setStatus('current')
if mibBuilder.loadTexts: phoneContextNPI.setDescription('Number Plan. Access: Instant. AC INI-Param: PhoneContext_Npi')
phoneContextTON = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("notConfigured", -1), ("unknown", 0), ("international-Level2Regional", 1), ("national-Level1Regional", 2), ("networkSpecific-NetworkPISN", 3), ("subscriber-Level0Regional", 4), ("abbreviated", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phoneContextTON.setStatus('current')
if mibBuilder.loadTexts: phoneContextTON.setDescription('Number Type. Access: Instant. AC INI-Param: PhoneContext_Ton')
phoneContextPhoneContext = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 25, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: phoneContextPhoneContext.setStatus('current')
if mibBuilder.loadTexts: phoneContextPhoneContext.setDescription('Phone-Context. Access: Instant. AC INI-Param: PhoneContext_Context')
redirectNumberMapIp2TelTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26), )
if mibBuilder.loadTexts: redirectNumberMapIp2TelTable.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelTable.setDescription('GwApp IP-to-Tel Redirect Phone Number Manipulation Rules Table')
redirectNumberMapIp2TelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1), ).setIndexNames((0, "AcGateway", "redirectNumberMapIp2TelIndex"))
if mibBuilder.loadTexts: redirectNumberMapIp2TelEntry.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelEntry.setDescription('')
redirectNumberMapIp2TelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: redirectNumberMapIp2TelIndex.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelIndex.setDescription('Entry number, starting at 0. AC INI-Param: RedirectNumberMapIp2Tel_Index')
redirectNumberMapIp2TelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelRowStatus.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
redirectNumberMapIp2TelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirectNumberMapIp2TelAction.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelAction.setDescription('Development Impending. AC INI-Param: N/A')
redirectNumberMapIp2TelActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirectNumberMapIp2TelActionResult.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelActionResult.setDescription('Development Impending. AC INI-Param: N/A')
redirectNumberMapIp2TelDestinationPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelDestinationPrefix.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelDestinationPrefix.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_DestinationPrefix')
redirectNumberMapIp2TelRedirectPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelRedirectPrefix.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelRedirectPrefix.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_RedirectPrefix')
redirectNumberMapIp2TelSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelSourceAddress.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelSourceAddress.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_SourceAddress')
redirectNumberMapIp2TelNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("notConfigured", 255), ("unknown", 0), ("international", 1), ("national", 2), ("networkSpecific", 3), ("subscriber", 4), ("abbreviated", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelNumberType.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelNumberType.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_NumberType')
redirectNumberMapIp2TelNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 9))).clone(namedValues=NamedValues(("notConfigured", 255), ("unknown", 0), ("e164Public", 1), ("private", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelNumberPlan.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelNumberPlan.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_NumberPlan')
redirectNumberMapIp2TelRemoveFromLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelRemoveFromLeft.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelRemoveFromLeft.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_RemoveFromLeft')
redirectNumberMapIp2TelRemoveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelRemoveFromRight.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelRemoveFromRight.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_RemoveFromRight')
redirectNumberMapIp2TelLeaveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelLeaveFromRight.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelLeaveFromRight.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_LeaveFromRight')
redirectNumberMapIp2TelPrefixToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelPrefixToAdd.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelPrefixToAdd.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_Prefix2Add')
redirectNumberMapIp2TelSuffixToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelSuffixToAdd.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelSuffixToAdd.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_Suffix2Add')
redirectNumberMapIp2TelIsPresentationRestricted = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1))).clone(namedValues=NamedValues(("notConfigured", 255), ("allowed", 0), ("restricted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelIsPresentationRestricted.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelIsPresentationRestricted.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_IsPresentationRestricted')
redirectNumberMapIp2TelSrcTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelSrcTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelSrcTrunkGroupID.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_SrcTrunkGroupID')
redirectNumberMapIp2TelSrcIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 26, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapIp2TelSrcIPGroupID.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapIp2TelSrcIPGroupID.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapIp2Tel_SrcIPGroupID')
redirectNumberMapTel2IpTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27), )
if mibBuilder.loadTexts: redirectNumberMapTel2IpTable.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpTable.setDescription('GwApp Tel-to-IP Redirect Phone Number Manipulation Rules Table')
redirectNumberMapTel2IpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1), ).setIndexNames((0, "AcGateway", "redirectNumberMapTel2IpIndex"))
if mibBuilder.loadTexts: redirectNumberMapTel2IpEntry.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpEntry.setDescription('')
redirectNumberMapTel2IpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: redirectNumberMapTel2IpIndex.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpIndex.setDescription('Entry number, starting at 0. AC INI-Param: RedirectNumberMapTel2Ip_Index')
redirectNumberMapTel2IpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpRowStatus.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
redirectNumberMapTel2IpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirectNumberMapTel2IpAction.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpAction.setDescription('Development Impending. AC INI-Param: N/A')
redirectNumberMapTel2IpActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirectNumberMapTel2IpActionResult.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpActionResult.setDescription('Development Impending. AC INI-Param: N/A')
redirectNumberMapTel2IpDestinationPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpDestinationPrefix.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpDestinationPrefix.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_DestinationPrefix')
redirectNumberMapTel2IpRedirectPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpRedirectPrefix.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpRedirectPrefix.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_RedirectPrefix')
redirectNumberMapTel2IpSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpSourceAddress.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpSourceAddress.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_SourceAddress')
redirectNumberMapTel2IpNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpNumberType.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpNumberType.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_NumberType')
redirectNumberMapTel2IpNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpNumberPlan.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpNumberPlan.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_NumberPlan')
redirectNumberMapTel2IpRemoveFromLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpRemoveFromLeft.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpRemoveFromLeft.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_RemoveFromLeft')
redirectNumberMapTel2IpRemoveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 211))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpRemoveFromRight.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpRemoveFromRight.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_RemoveFromRight')
redirectNumberMapTel2IpLeaveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpLeaveFromRight.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpLeaveFromRight.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_LeaveFromRight')
redirectNumberMapTel2IpPrefixToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpPrefixToAdd.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpPrefixToAdd.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_Prefix2Add')
redirectNumberMapTel2IpSuffixToAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpSuffixToAdd.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpSuffixToAdd.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_Suffix2Add')
redirectNumberMapTel2IpIsPresentationRestricted = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1))).clone(namedValues=NamedValues(("notConfigured", 255), ("allowed", 0), ("restricted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpIsPresentationRestricted.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpIsPresentationRestricted.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_IsPresentationRestricted')
redirectNumberMapTel2IpSrcTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpSrcTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpSrcTrunkGroupID.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_SrcTrunkGroupID')
redirectNumberMapTel2IpSrcIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 21, 27, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redirectNumberMapTel2IpSrcIPGroupID.setStatus('current')
if mibBuilder.loadTexts: redirectNumberMapTel2IpSrcIPGroupID.setDescription(' Access: Instant. AC INI-Param: RedirectNumberMapTel2Ip_SrcIPGroupID')
connectivityQos = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 22))
connectivityQosMaxAllowedPL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 22, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectivityQosMaxAllowedPL.setStatus('current')
if mibBuilder.loadTexts: connectivityQosMaxAllowedPL.setDescription('The maximum percentage of packet loss that will not prevent normal routing. Access: Instant. AC INI-Param: IPCONNQOSMAXALLOWEDPL')
connectivityQosMaxAllowedDelay = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 22, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectivityQosMaxAllowedDelay.setStatus('current')
if mibBuilder.loadTexts: connectivityQosMaxAllowedDelay.setDescription('The maximum delay that will not prevent normal routing (msec). Access: Instant. AC INI-Param: IPCONNQOSMAXALLOWEDDELAY')
connectivityQosEffectivePeriod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 22, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectivityQosEffectivePeriod.setStatus('current')
if mibBuilder.loadTexts: connectivityQosEffectivePeriod.setDescription('if during this period [in seconds], no updated qos info received, theold qos info is discarded. if qos poor, and no calls alowed, after this period, calls will be allowed again. Access: Instant. AC INI-Param: IPCONNQOSEFFECTIVEPERIOD')
connectivityQosSamplesToAvarage = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 2, 22, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectivityQosSamplesToAvarage.setStatus('current')
if mibBuilder.loadTexts: connectivityQosSamplesToAvarage.setDescription('number of samples to avarage. in other words define the weiught of the new sample. Access: Instant. AC INI-Param: IPCONNQOSSAMPLESTOAVARAGE')
digitalGW = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3))
digitalGWBChannelNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("any", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWBChannelNegotiation.setStatus('current')
if mibBuilder.loadTexts: digitalGWBChannelNegotiation.setDescription('ISDN B-Channel negotiation mode. Access: Instant. AC INI-Param: BCHANNELNEGOTIATION')
digitalGWSwapRedirectNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWSwapRedirectNumber.setStatus('current')
if mibBuilder.loadTexts: digitalGWSwapRedirectNumber.setDescription('Swap Redirect and Called numbers. Access: Instant. AC INI-Param: SWAPREDIRECTNUMBER')
digitalGWEnableTransferCap = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWEnableTransferCap.setStatus('current')
if mibBuilder.loadTexts: digitalGWEnableTransferCap.setDescription('Select Transfer Capabilities method between H.323/Q.931 and ISDN/Q.931. Access: Instant. AC INI-Param: ENABLETRANSFERCAP')
digitalGWR2Category = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWR2Category.setStatus('current')
if mibBuilder.loadTexts: digitalGWR2Category.setDescription("MFC\\R2 Calling Party's category. Access: Instant. AC INI-Param: R2CATEGORY")
digitalGWISDNRxOverlap = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWISDNRxOverlap.setStatus('obsolete')
if mibBuilder.loadTexts: digitalGWISDNRxOverlap.setDescription('Enable reception of overlap dialing from ISDN side. Access: Instant. AC INI-Param: ISDNRXOVERLAP')
digitalGWCASSendHookFlash = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWCASSendHookFlash.setStatus('current')
if mibBuilder.loadTexts: digitalGWCASSendHookFlash.setDescription('0 (default): Hookflash not forwarded 1:HookFlash forwarded - Testing. Access: Instant. AC INI-Param: CASSENDHOOKFLASH')
digitalGWISDNTransferCapability = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("doNotOverwrite", -1), ("modem", 0), ("voice", 1), ("data", 2), ("audio", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWISDNTransferCapability.setStatus('obsolete')
if mibBuilder.loadTexts: digitalGWISDNTransferCapability.setDescription('Send transfer capability to ISDN side on setup message -1:Do not Overwrite 0:Audio 3.1 1:Speech 2:Data 3:Audio. Access: Instant. AC INI-Param: ISDNTRANSFERCAPABILITY')
digitalGWEnableTDMOverIp = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWEnableTDMOverIp.setStatus('current')
if mibBuilder.loadTexts: digitalGWEnableTDMOverIp.setDescription('Enable gateway to maintain a permanent RTP connection. Access: Offline. AC INI-Param: ENABLETDMOVERIP')
digitalGWTransparentCoderOnDataCall = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWTransparentCoderOnDataCall.setStatus('current')
if mibBuilder.loadTexts: digitalGWTransparentCoderOnDataCall.setDescription('In case the transfer capability of a call from ISDN is data open with transparent coder. Access: Instant. AC INI-Param: TRANSPARENTCODERONDATACALL')
digitalGWSupportRedirectInFacility = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWSupportRedirectInFacility.setStatus('current')
if mibBuilder.loadTexts: digitalGWSupportRedirectInFacility.setDescription('Search for redirect number in facility IE. Access: Instant. AC INI-Param: SUPPORTREDIRECTINFACILITY')
digitalGWPIForDisconnectMsg = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWPIForDisconnectMsg.setStatus('obsolete')
if mibBuilder.loadTexts: digitalGWPIForDisconnectMsg.setDescription('Configure PIForDisconnectMsg in order to overwrite PI value received in ISDN Disconnect message. Access: Instant. AC INI-Param: PIFORDISCONNECTMSG')
digitalGWConnectOnProgressInd = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWConnectOnProgressInd.setStatus('current')
if mibBuilder.loadTexts: digitalGWConnectOnProgressInd.setDescription('FXS:generate CallerId siganls during ringing FXO:collect CallerId and use it in Setup message. Access: Instant. AC INI-Param: CONNECTONPROGRESSIND')
digitalGWLocalISDNRBSource = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pbx", 0), ("gateway", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWLocalISDNRBSource.setStatus('obsolete')
if mibBuilder.loadTexts: digitalGWLocalISDNRBSource.setDescription('If the ringback tone source is not IP, who should supply the Ringback tone. 0 - PBX/PSTN (default) ; 1- GW. Access: Instant. AC INI-Param: LOCALISDNRBSOURCE')
digitalGWEnableUuiTel2Ip = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWEnableUuiTel2Ip.setStatus('current')
if mibBuilder.loadTexts: digitalGWEnableUuiTel2Ip.setDescription('Enable User-User IE to pass in Setup from ISDN to IP. Access: Instant. AC INI-Param: ENABLEUUITEL2IP')
digitalGWEnableUuiIp2Tel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWEnableUuiIp2Tel.setStatus('current')
if mibBuilder.loadTexts: digitalGWEnableUuiIp2Tel.setDescription('Enable User-User IE to pass in Setup from IP to ISDN. Access: Instant. AC INI-Param: ENABLEUUIIP2TEL')
digitalGWSendISDNTransferOnConnect = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWSendISDNTransferOnConnect.setStatus('current')
if mibBuilder.loadTexts: digitalGWSendISDNTransferOnConnect.setDescription('Send TBCT/ECT/RLT request only when second leg call is connected. Access: Instant. AC INI-Param: SENDISDNTRANSFERONCONNECT')
digitalGWEnableISDNTunnelingTel2Ip = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("usingHeader", 1), ("usingBody", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWEnableISDNTunnelingTel2Ip.setStatus('current')
if mibBuilder.loadTexts: digitalGWEnableISDNTunnelingTel2Ip.setDescription('Enable ISDN tunneling to pass Setup and Facility messages from ISDN to IP. Access: Instant. AC INI-Param: ENABLEISDNTUNNELINGTEL2IP')
digitalGWEnableISDNTunnelingIp2Tel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("usingHeader", 1), ("usingBody", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWEnableISDNTunnelingIp2Tel.setStatus('current')
if mibBuilder.loadTexts: digitalGWEnableISDNTunnelingIp2Tel.setDescription('Enable ISDN tunneling to pass Setup and Facility messages from IP to ISDN. Access: Instant. AC INI-Param: ENABLEISDNTUNNELINGIP2TEL')
digitalGWEnableCallingPartyCategory = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWEnableCallingPartyCategory.setStatus('current')
if mibBuilder.loadTexts: digitalGWEnableCallingPartyCategory.setDescription('Enables NI2 calling party category translation to SIP. Access: Instant. AC INI-Param: ENABLECALLINGPARTYCATEGORY')
digitalGWPlayRBTOnISDNTransfer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWPlayRBTOnISDNTransfer.setStatus('current')
if mibBuilder.loadTexts: digitalGWPlayRBTOnISDNTransfer.setDescription('Play local RBT on TBCT/ECT/RLT transfer. Access: Instant. AC INI-Param: PLAYRBTONISDNTRANSFER')
iSDNRxOverlapTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 21), )
if mibBuilder.loadTexts: iSDNRxOverlapTable.setStatus('current')
if mibBuilder.loadTexts: iSDNRxOverlapTable.setDescription("Choose either: Disabled or Enabled (default). Any number bigger than one = Number of digits to receive. Note 1: If enabled, the Mediant 2000 receives ISDN called number that is sent in the 'Overlap' mode. Note 2: The SETUP to IP is sent only after the number (including 'Sending Complete' Info Element) was fully received (via SETUP and/or subsequent INFO Q.931 messages).")
iSDNRxOverlapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 21, 1), ).setIndexNames((0, "AcGateway", "iSDNRxOverlapIndex"))
if mibBuilder.loadTexts: iSDNRxOverlapEntry.setStatus('current')
if mibBuilder.loadTexts: iSDNRxOverlapEntry.setDescription('')
iSDNRxOverlapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: iSDNRxOverlapIndex.setStatus('current')
if mibBuilder.loadTexts: iSDNRxOverlapIndex.setDescription('Trunk number. AC INI-Param: N/A')
iSDNRxOverlapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("localReceiving", 1), ("throughSIP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iSDNRxOverlapEnable.setStatus('current')
if mibBuilder.loadTexts: iSDNRxOverlapEnable.setDescription('Receive overlap from ISDN side. Access: Instant. AC INI-Param: ISDNRXOVERLAP')
trunkTransferTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 22), )
if mibBuilder.loadTexts: trunkTransferTable.setStatus('current')
if mibBuilder.loadTexts: trunkTransferTable.setDescription('Trunk Transfer Mode table.')
trunkTransferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 22, 1), ).setIndexNames((0, "AcGateway", "trunkTransferIndex"))
if mibBuilder.loadTexts: trunkTransferEntry.setStatus('current')
if mibBuilder.loadTexts: trunkTransferEntry.setDescription('')
trunkTransferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: trunkTransferIndex.setStatus('current')
if mibBuilder.loadTexts: trunkTransferIndex.setDescription('Trunk number. AC INI-Param: N/A')
trunkTransferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("casNFA", 1), ("iSDN", 2), ("casNormal", 3), ("qSIGSingleStep", 4), ("qSIGPathReplacement", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkTransferMode.setStatus('current')
if mibBuilder.loadTexts: trunkTransferMode.setDescription('The type of transfer the PSTN/PBX supports. Access: Instant. AC INI-Param: TRUNKTRANSFERMODE')
progressIndicatorToISDNTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 23), )
if mibBuilder.loadTexts: progressIndicatorToISDNTable.setStatus('current')
if mibBuilder.loadTexts: progressIndicatorToISDNTable.setDescription('Progress Indicator To ISDN table.')
progressIndicatorToISDNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 23, 1), ).setIndexNames((0, "AcGateway", "progressIndicatorToISDNIndex"))
if mibBuilder.loadTexts: progressIndicatorToISDNEntry.setStatus('current')
if mibBuilder.loadTexts: progressIndicatorToISDNEntry.setDescription('')
progressIndicatorToISDNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: progressIndicatorToISDNIndex.setStatus('current')
if mibBuilder.loadTexts: progressIndicatorToISDNIndex.setDescription('Trunk number. AC INI-Param: N/A')
progressIndicatorToISDNValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 8))).clone(namedValues=NamedValues(("notSet", -1), ("localRB", 0), ("remoteRB1", 1), ("remoteRB8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: progressIndicatorToISDNValue.setStatus('current')
if mibBuilder.loadTexts: progressIndicatorToISDNValue.setDescription('Override the value of progress indicator to ISDN side in ALERT PROGRESS and PROCEEDING messages. Access: Instant. AC INI-Param: PROGRESSINDICATOR2ISDN')
playRBToneToTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 24), )
if mibBuilder.loadTexts: playRBToneToTrunkTable.setStatus('current')
if mibBuilder.loadTexts: playRBToneToTrunkTable.setDescription('Play RB Tone To Trunk table.')
playRBToneToTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 24, 1), ).setIndexNames((0, "AcGateway", "playRBToneToTrunkIndex"))
if mibBuilder.loadTexts: playRBToneToTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: playRBToneToTrunkEntry.setDescription('')
playRBToneToTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: playRBToneToTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: playRBToneToTrunkIndex.setDescription('Trunk number. AC INI-Param: N/A')
playRBToneToTrunkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", -1), ("doNotPlay", 0), ("playOnLocal", 1), ("preferIp", 2), ("playLocalUntilRemoteMediaArrives", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: playRBToneToTrunkValue.setStatus('current')
if mibBuilder.loadTexts: playRBToneToTrunkValue.setDescription("Enable ringback tone playing towards trunk side. Refer to User's Manual for details. Access: Instant. AC INI-Param: PLAYRBTONE2TRUNK")
iSDNTransferCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 25), )
if mibBuilder.loadTexts: iSDNTransferCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: iSDNTransferCapabilityTable.setDescription('ISDN Transfer Capability Trunk table.')
iSDNTransferCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 25, 1), ).setIndexNames((0, "AcGateway", "iSDNTransferCapabilityIndex"))
if mibBuilder.loadTexts: iSDNTransferCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: iSDNTransferCapabilityEntry.setDescription('')
iSDNTransferCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: iSDNTransferCapabilityIndex.setStatus('current')
if mibBuilder.loadTexts: iSDNTransferCapabilityIndex.setDescription('Trunk number. AC INI-Param: N/A')
iSDNTransferCapabilityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("doNotOverwrite", -1), ("modem", 0), ("voice", 1), ("data", 2), ("audio", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iSDNTransferCapabilityValue.setStatus('current')
if mibBuilder.loadTexts: iSDNTransferCapabilityValue.setDescription('Send transfer capability to ISDN side on setup message -1:Do not Overwrite 0:Audio 3.1 1:Speech 2:Data 3:Audio. Access: Instant. AC INI-Param: ISDNTRANSFERCAPABILITY')
localISDNRBSourceTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 26), )
if mibBuilder.loadTexts: localISDNRBSourceTable.setStatus('current')
if mibBuilder.loadTexts: localISDNRBSourceTable.setDescription('Play RB Tone To Trunk table.')
localISDNRBSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 26, 1), ).setIndexNames((0, "AcGateway", "localISDNRBSourceIndex"))
if mibBuilder.loadTexts: localISDNRBSourceEntry.setStatus('current')
if mibBuilder.loadTexts: localISDNRBSourceEntry.setDescription('')
localISDNRBSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 26, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: localISDNRBSourceIndex.setStatus('current')
if mibBuilder.loadTexts: localISDNRBSourceIndex.setDescription('Trunk number. AC INI-Param: N/A')
localISDNRBSourceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pbx", 0), ("gateway", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localISDNRBSourceValue.setStatus('current')
if mibBuilder.loadTexts: localISDNRBSourceValue.setDescription('If the ringback tone source is not IP, who should supply the Ringback tone. 0 - PBX/PSTN (default) ; 1- GW. Access: Instant. AC INI-Param: LOCALISDNRBSOURCE')
pIForDisconnectMsgTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 27), )
if mibBuilder.loadTexts: pIForDisconnectMsgTable.setStatus('current')
if mibBuilder.loadTexts: pIForDisconnectMsgTable.setDescription('PI For Disconnect Message Trunk table.')
pIForDisconnectMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 27, 1), ).setIndexNames((0, "AcGateway", "pIForDisconnectMsgIndex"))
if mibBuilder.loadTexts: pIForDisconnectMsgEntry.setStatus('current')
if mibBuilder.loadTexts: pIForDisconnectMsgEntry.setDescription('')
pIForDisconnectMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 27, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: pIForDisconnectMsgIndex.setStatus('current')
if mibBuilder.loadTexts: pIForDisconnectMsgIndex.setDescription('Trunk number. AC INI-Param: N/A')
pIForDisconnectMsgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pIForDisconnectMsgValue.setStatus('current')
if mibBuilder.loadTexts: pIForDisconnectMsgValue.setDescription('Configure PIForDisconnectMsg in order to overwrite PI value received in ISDN Disconnect message. Access: Instant. AC INI-Param: PIFORDISCONNECTMSG')
pSTNAlertTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 28), )
if mibBuilder.loadTexts: pSTNAlertTimeoutTable.setStatus('current')
if mibBuilder.loadTexts: pSTNAlertTimeoutTable.setDescription('PSTN Alert Timeout')
pSTNAlertTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 28, 1), ).setIndexNames((0, "AcGateway", "pSTNAlertTimeoutIndex"))
if mibBuilder.loadTexts: pSTNAlertTimeoutEntry.setStatus('current')
if mibBuilder.loadTexts: pSTNAlertTimeoutEntry.setDescription('')
pSTNAlertTimeoutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 28, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: pSTNAlertTimeoutIndex.setStatus('current')
if mibBuilder.loadTexts: pSTNAlertTimeoutIndex.setDescription('Trunk number. AC INI-Param: N/A')
pSTNAlertTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSTNAlertTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: pSTNAlertTimeoutValue.setDescription('Max time (in seconds) to wait for connect from PSTN. Access: Instant. AC INI-Param: TRUNKPSTNALERTTIMEOUT')
iE = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 20))
iEAddIEInSetup = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 20, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iEAddIEInSetup.setStatus('current')
if mibBuilder.loadTexts: iEAddIEInSetup.setDescription('Additional information element to send in ISDN Setup message. Access: Instant. AC INI-Param: ADDIEINSETUP')
iESendIEOnTG = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 20, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iESendIEOnTG.setStatus('current')
if mibBuilder.loadTexts: iESendIEOnTG.setDescription('Configure trunk groups on which to send additional IE. Access: Instant. AC INI-Param: SENDIEONTG')
mlpp = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29))
mlppCallPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("mLPP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppCallPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mlppCallPriorityMode.setDescription('Priority mode: 0-disable 1-MLPP. Access: Instant. AC INI-Param: CALLPRIORITYMODE')
mlppDefaultNamespace = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dSN", 1), ("dOD", 2), ("dRSN", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppDefaultNamespace.setStatus('current')
if mibBuilder.loadTexts: mlppDefaultNamespace.setDescription('MLPP Default Namespace. Access: Instant. AC INI-Param: MLPPDEFAULTNAMESPACE')
mlppDefaultCallPriority = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppDefaultCallPriority.setStatus('current')
if mibBuilder.loadTexts: mlppDefaultCallPriority.setDescription('SIP Default Call Priority. Access: Instant. AC INI-Param: SIPDEFAULTCALLPRIORITY')
mlppDiffServ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppDiffServ.setStatus('current')
if mibBuilder.loadTexts: mlppDiffServ.setDescription('DiffServ value for MLPP calls. Access: Instant. AC INI-Param: MLPPDIFFSERV')
mlppPreemptionToneDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppPreemptionToneDuration.setStatus('current')
if mibBuilder.loadTexts: mlppPreemptionToneDuration.setDescription('Preemption Tone Duration, 0-60 seconds. Access: Instant. AC INI-Param: PreemptionToneDuration')
mlppDefaultServiceDomain = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppDefaultServiceDomain.setStatus('current')
if mibBuilder.loadTexts: mlppDefaultServiceDomain.setDescription('MLPP Default Service Domain String (6 Hex Digits). Access: Instant. AC INI-Param: MLPPDefaultServiceDomain')
mlppNormalizedServiceDomain = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppNormalizedServiceDomain.setStatus('current')
if mibBuilder.loadTexts: mlppNormalizedServiceDomain.setDescription('MLPP Normalized Service Domain String (6 Hex Digits). Access: Instant. AC INI-Param: MLPPNormalizedServiceDomain')
mlppRoutineRTPDSCP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppRoutineRTPDSCP.setStatus('current')
if mibBuilder.loadTexts: mlppRoutineRTPDSCP.setDescription('Defines the RTP DSCP for MLPP Routine call. Access: Instant. AC INI-Param: MLPPROUTINERTPDSCP')
mlppPriorityRTPDSCP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppPriorityRTPDSCP.setStatus('current')
if mibBuilder.loadTexts: mlppPriorityRTPDSCP.setDescription('Defines the RTP DSCP for MLPP Priority call. Access: Instant. AC INI-Param: MLPPPRIORITYRTPDSCP')
mlppImmediateRTPDSCP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppImmediateRTPDSCP.setStatus('current')
if mibBuilder.loadTexts: mlppImmediateRTPDSCP.setDescription('Defines the RTP DSCP for MLPP Immediate call. Access: Instant. AC INI-Param: MLPPIMMEDIATERTPDSCP')
mlppFlashRTPDSCP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppFlashRTPDSCP.setStatus('current')
if mibBuilder.loadTexts: mlppFlashRTPDSCP.setDescription('Defines the RTP DSCP for MLPP Flash call. Access: Instant. AC INI-Param: MLPPFLASHRTPDSCP')
mlppFlashOverRTPDSCP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppFlashOverRTPDSCP.setStatus('current')
if mibBuilder.loadTexts: mlppFlashOverRTPDSCP.setDescription('Defines the RTP DSCP for MLPP Flash-Override call. Access: Instant. AC INI-Param: MLPPFLASHOVERRTPDSCP')
mlppFlashOverOverRTPDSCP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppFlashOverOverRTPDSCP.setStatus('current')
if mibBuilder.loadTexts: mlppFlashOverOverRTPDSCP.setDescription('Defines the RTP DSCP for MLPP Flash-Override-Override call. Access: Instant. AC INI-Param: MLPPFLASHOVEROVERRTPDSCP')
mlppE911Behavior = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 3, 29, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standardMode", 0), ("routineMode", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlppE911Behavior.setStatus('current')
if mibBuilder.loadTexts: mlppE911Behavior.setDescription('Defines the MLPP E911 Preemption mode: (0)-Standard Mode (ets calls will have the highest priority and can preemt any mlpp call), (1)-Treat as routine mode (ets calls are treated as routine calls). Access: Instant. AC INI-Param: E911MLPPBEHAVIOR')
analogGW = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4))
analogGWEnableReversalPolarity = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogGWEnableReversalPolarity.setStatus('current')
if mibBuilder.loadTexts: analogGWEnableReversalPolarity.setDescription('FXO: CONNECT/DISCONNECT calls upon detection of polarity signal. FXS: generate the signal. Access: Instant. AC INI-Param: ENABLEREVERSALPOLARITY')
analogGWEnableCurrentDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogGWEnableCurrentDisconnect.setStatus('current')
if mibBuilder.loadTexts: analogGWEnableCurrentDisconnect.setDescription('Disconnect call upon detection of current disconnect signal. Access: Instant. AC INI-Param: ENABLECURRENTDISCONNECT')
analogGWRegretTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogGWRegretTime.setStatus('current')
if mibBuilder.loadTexts: analogGWRegretTime.setDescription('Time to wait between phone hang up and call termination. Access: Instant. AC INI-Param: REGRETTIME')
analogGWHotLineToneDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogGWHotLineToneDuration.setStatus('current')
if mibBuilder.loadTexts: analogGWHotLineToneDuration.setDescription('Duration of played hotline tone, after the gateway seizes the line in response to ringing. Access: Instant. AC INI-Param: HOTLINETONEDURATION')
enableCallWaitingPerPortTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21), )
if mibBuilder.loadTexts: enableCallWaitingPerPortTable.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortTable.setDescription('')
enableCallWaitingPerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21, 1), ).setIndexNames((0, "AcGateway", "enableCallWaitingPerPortIndex"))
if mibBuilder.loadTexts: enableCallWaitingPerPortEntry.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortEntry.setDescription('table')
enableCallWaitingPerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableCallWaitingPerPortIndex.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortIndex.setDescription('. AC INI-Param: CallWaitingPerPort_Index')
enableCallWaitingPerPortIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableCallWaitingPerPortIsUsed.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortIsUsed.setDescription('Is this index used. Access: Instant. AC INI-Param: CallWaitingPerPort_IsUsed')
enableCallWaitingPerPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableCallWaitingPerPortModule.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortModule.setDescription('module. AC INI-Param: CallWaitingPerPort_Module')
enableCallWaitingPerPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableCallWaitingPerPortPort.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortPort.setDescription('port. AC INI-Param: CallWaitingPerPort_Port')
enableCallWaitingPerPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableCallWaitingPerPortAction.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortAction.setDescription('Development Impending. AC INI-Param: N/A')
enableCallWaitingPerPortActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableCallWaitingPerPortActionResult.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortActionResult.setDescription('Development Impending. AC INI-Param: N/A')
enableCallWaitingPerPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("valueNotSet", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableCallWaitingPerPortEnable.setStatus('current')
if mibBuilder.loadTexts: enableCallWaitingPerPortEnable.setDescription('Enable. Access: Instant. AC INI-Param: CallWaitingPerPort_IsEnabled')
fxs = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10))
fxsCutThrough = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsCutThrough.setStatus('current')
if mibBuilder.loadTexts: fxsCutThrough.setDescription("Enable call connection without On-Hook/Off-Hook process 'Cut-Through'. Access: Instant. AC INI-Param: CUTTHROUGH")
fxsMeteringMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("routingTable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsMeteringMode.setStatus('current')
if mibBuilder.loadTexts: fxsMeteringMode.setDescription('Method of automatic generation of payphone metering pulses. Access: Instant. AC INI-Param: PAYPHONEMETERINGMODE')
fxsFXSOOSBehavior = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("reorderTone", 1), ("polarityReversal", 2), ("currentDisconnect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsFXSOOSBehavior.setStatus('current')
if mibBuilder.loadTexts: fxsFXSOOSBehavior.setDescription('FxsOosBehavior control how the fxs endpoints of a gateway, will behave in case of Out of Service. OutofService state may be result of two scenarios: a. EndPoint not configured in trunkgroup (Disabled) b. runtime busy out situation 0: NONE - no special activity. Disabled endpoint not responses, bsyout endpoint responses as usual 1: Play ReOrder tone 2: Reverse Polarity 3: Play ReOrder tone and Reverse Polarity. Access: Instant. AC INI-Param: FXSOOSBEHAVIOR')
fxsSetOOSOnRegistrationFail = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsSetOOSOnRegistrationFail.setStatus('current')
if mibBuilder.loadTexts: fxsSetOOSOnRegistrationFail.setDescription('Should deactivate endpoint service on registration failure. Access: Instant. AC INI-Param: OOSONREGISTRATIONFAIL')
chargeCodesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21), )
if mibBuilder.loadTexts: chargeCodesTable.setStatus('current')
if mibBuilder.loadTexts: chargeCodesTable.setDescription('')
chargeCodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1), ).setIndexNames((0, "AcGateway", "chargeCodesIndex"))
if mibBuilder.loadTexts: chargeCodesEntry.setStatus('current')
if mibBuilder.loadTexts: chargeCodesEntry.setDescription('')
chargeCodesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: chargeCodesIndex.setStatus('current')
if mibBuilder.loadTexts: chargeCodesIndex.setDescription('Charge code index. AC INI-Param: ChargeCode_Index')
chargeCodesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesRowStatus.setStatus('current')
if mibBuilder.loadTexts: chargeCodesRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
chargeCodesAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargeCodesAction.setStatus('current')
if mibBuilder.loadTexts: chargeCodesAction.setDescription('Development Impending. AC INI-Param: N/A')
chargeCodesActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chargeCodesActionResult.setStatus('current')
if mibBuilder.loadTexts: chargeCodesActionResult.setDescription('Development Impending. AC INI-Param: N/A')
chargeCodesPeriod1EndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod1EndTime.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod1EndTime.setDescription(' Access: Instant. AC INI-Param: ChargeCode_EndTime1')
chargeCodesPeriod1PulseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod1PulseInterval.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod1PulseInterval.setDescription(' Access: Instant. AC INI-Param: ChargeCode_PulseInterval1')
chargeCodesPeriod1PulsesOnAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod1PulsesOnAnswer.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod1PulsesOnAnswer.setDescription(' Access: Instant. AC INI-Param: ChargeCode_PulsesOnAnswer1')
chargeCodesPeriod2EndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod2EndTime.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod2EndTime.setDescription(' Access: Instant. AC INI-Param: ChargeCode_EndTime2')
chargeCodesPeriod2PulseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod2PulseInterval.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod2PulseInterval.setDescription(' Access: Instant. AC INI-Param: ChargeCode_PulseInterval2')
chargeCodesPeriod2PulsesOnAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod2PulsesOnAnswer.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod2PulsesOnAnswer.setDescription(' Access: Instant. AC INI-Param: ChargeCode_PulsesOnAnswer2')
chargeCodesPeriod3EndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod3EndTime.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod3EndTime.setDescription(' Access: Instant. AC INI-Param: ChargeCode_EndTime3')
chargeCodesPeriod3PulseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod3PulseInterval.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod3PulseInterval.setDescription(' Access: Instant. AC INI-Param: ChargeCode_PulseInterval3')
chargeCodesPeriod3PulsesOnAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod3PulsesOnAnswer.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod3PulsesOnAnswer.setDescription(' Access: Instant. AC INI-Param: ChargeCode_PulsesOnAnswer3')
chargeCodesPeriod4EndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod4EndTime.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod4EndTime.setDescription(' Access: Instant. AC INI-Param: ChargeCode_EndTime4')
chargeCodesPeriod4PulseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod4PulseInterval.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod4PulseInterval.setDescription(' Access: Instant. AC INI-Param: ChargeCode_PulseInterval4')
chargeCodesPeriod4PulsesOnAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 21, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chargeCodesPeriod4PulsesOnAnswer.setStatus('current')
if mibBuilder.loadTexts: chargeCodesPeriod4PulsesOnAnswer.setDescription(' Access: Instant. AC INI-Param: ChargeCode_PulsesOnAnswer4')
toneIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22), )
if mibBuilder.loadTexts: toneIndexTable.setStatus('current')
if mibBuilder.loadTexts: toneIndexTable.setDescription('')
toneIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1), ).setIndexNames((0, "AcGateway", "toneIndexIndex"))
if mibBuilder.loadTexts: toneIndexEntry.setStatus('current')
if mibBuilder.loadTexts: toneIndexEntry.setDescription('')
toneIndexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: toneIndexIndex.setStatus('current')
if mibBuilder.loadTexts: toneIndexIndex.setDescription('Charge code index. AC INI-Param: ToneIndex_Index')
toneIndexRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: toneIndexRowStatus.setStatus('current')
if mibBuilder.loadTexts: toneIndexRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
toneIndexAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: toneIndexAction.setStatus('current')
if mibBuilder.loadTexts: toneIndexAction.setDescription('Development Impending. AC INI-Param: N/A')
toneIndexActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: toneIndexActionResult.setStatus('current')
if mibBuilder.loadTexts: toneIndexActionResult.setDescription('Development Impending. AC INI-Param: N/A')
toneIndexFXSPortFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: toneIndexFXSPortFirst.setStatus('current')
if mibBuilder.loadTexts: toneIndexFXSPortFirst.setDescription('Staring Range of FXS Port. Access: Instant. AC INI-Param: ToneIndex_FXSPort_First')
toneIndexFXSPortLast = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: toneIndexFXSPortLast.setStatus('current')
if mibBuilder.loadTexts: toneIndexFXSPortLast.setDescription('End Range of FXS Port. Access: Instant. AC INI-Param: ToneIndex_FXSPort_Last')
toneIndexSourcePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: toneIndexSourcePrefix.setStatus('current')
if mibBuilder.loadTexts: toneIndexSourcePrefix.setDescription('Source Prefix. Access: Instant. AC INI-Param: ToneIndex_SourcePrefix')
toneIndexPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 10, 22, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: toneIndexPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: toneIndexPriorityIndex.setDescription('Index used for distinctive ringing and call waiting tones. Access: Instant. AC INI-Param: ToneIndex_PriorityIndex')
fxo = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11))
fxoIsTwoStageDial = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oneStage", 0), ("twoStages", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoIsTwoStageDial.setStatus('current')
if mibBuilder.loadTexts: fxoIsTwoStageDial.setDescription('Dialing Mode - One-Stage (PBX Pass-thru) or Two-Stage. Access: Instant. AC INI-Param: ISTWOSTAGEDIAL')
fxoWaitForDialTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoWaitForDialTone.setStatus('current')
if mibBuilder.loadTexts: fxoWaitForDialTone.setDescription('Wait for dial tone before initiating an outgoing call to PBX/PSTN (FXO one-stage dialing mode). Access: Instant. AC INI-Param: ISWAITFORDIALTONE')
fxoWaitForDialTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoWaitForDialTime.setStatus('current')
if mibBuilder.loadTexts: fxoWaitForDialTime.setDescription('Time delay between seizing the line and start dialing (if ISWAITFORDIALTONE disabled) or after hookflash before dialing. Access: Instant. AC INI-Param: WAITFORDIALTIME')
fxoBetweenRingTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoBetweenRingTime.setStatus('current')
if mibBuilder.loadTexts: fxoBetweenRingTime.setDescription("Timeout for releasing FXO to IP call, if FXO port doesn't detect ringing signal for this timeout. Access: Instant. AC INI-Param: FXOBETWEENRINGTIME")
fxoEnableVoiceDetection = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoEnableVoiceDetection.setStatus('current')
if mibBuilder.loadTexts: fxoEnableVoiceDetection.setDescription('On FXO GWs enables sending of connect/200 OK message on speech/fax/modem detection [default 0]. In order to activate feature DSPVersionTemplateNumber should be 2 or 3. Access: Instant. AC INI-Param: ENABLEVOICEDETECTION')
fxoRingsBeforeCallerID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoRingsBeforeCallerID.setStatus('current')
if mibBuilder.loadTexts: fxoRingsBeforeCallerID.setDescription('Number of rings after which the Caller ID is detected. Access: Instant. AC INI-Param: RINGSBEFORECALLERID')
fxoGuardTimeBetweenCalls = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoGuardTimeBetweenCalls.setStatus('current')
if mibBuilder.loadTexts: fxoGuardTimeBetweenCalls.setDescription('Only for FXO: the time between the time that the EP execute OnHook, to the time that this EP is capable to except new IP2TEL call (and execute OfHook). Access: Instant. AC INI-Param: GUARDTIMEBETWEENCALLS')
fxoAutoDialPlayBusyTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 11, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoAutoDialPlayBusyTone.setStatus('current')
if mibBuilder.loadTexts: fxoAutoDialPlayBusyTone.setDescription('Only for FXO, Tel2IP calls: If enable (1) - On receiving release, if autodial is used, the FXO seize the line and play Busy/Reorder tone toward the PSTN for Reorder-time duration. . Access: Instant. AC INI-Param: FXOAutoDialPlayBusyTone')
dialing = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12))
dialingMaxDigits = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialingMaxDigits.setStatus('current')
if mibBuilder.loadTexts: dialingMaxDigits.setDescription('Maximum number of digits before dialing starts. Access: Instant. AC INI-Param: MAXDIGITS')
dialingTimeBetweenDigits = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialingTimeBetweenDigits.setStatus('current')
if mibBuilder.loadTexts: dialingTimeBetweenDigits.setDescription('Timeout in seconds between dialed digits. Access: Instant. AC INI-Param: TIMEBETWEENDIGITS')
dialingIsSpecialDigits = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialingIsSpecialDigits.setStatus('current')
if mibBuilder.loadTexts: dialingIsSpecialDigits.setDescription('When disabled, pressing special digits (* or #) will terminate digit collection. When enabled, special digits can be received as part of the dialed number or Endpoint phone number. Access: Instant. AC INI-Param: ISSPECIALDIGITS')
dialingDigitMapping = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 152))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialingDigitMapping.setStatus('current')
if mibBuilder.loadTexts: dialingDigitMapping.setDescription('The digit map patterns separated by a vertical bar (|), as defined in the MEGACO RFC. Access: Instant. AC INI-Param: DIGITMAPPING')
dialingEnableDigitDelivery = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialingEnableDigitDelivery.setStatus('current')
if mibBuilder.loadTexts: dialingEnableDigitDelivery.setDescription('Enable automatic digit delivery to Tel side after line is off-hooked or seized. Access: Offline. AC INI-Param: ENABLEDIGITDELIVERY')
dialingDialPlanIndex = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialingDialPlanIndex.setStatus('current')
if mibBuilder.loadTexts: dialingDialPlanIndex.setDescription('Defines the plan index to be used from the external Dial Plan file. Access: Instant. AC INI-Param: DIALPLANINDEX')
autoDialTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21), )
if mibBuilder.loadTexts: autoDialTable.setStatus('current')
if mibBuilder.loadTexts: autoDialTable.setDescription('')
autoDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1), ).setIndexNames((0, "AcGateway", "autoDialIndex"))
if mibBuilder.loadTexts: autoDialEntry.setStatus('current')
if mibBuilder.loadTexts: autoDialEntry.setDescription('')
autoDialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoDialIndex.setStatus('current')
if mibBuilder.loadTexts: autoDialIndex.setDescription('Entry number, starting at 0. AC INI-Param: TargetOfChannel_Index')
autoDialIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoDialIsUsed.setStatus('current')
if mibBuilder.loadTexts: autoDialIsUsed.setDescription('Is this index used. AC INI-Param: TargetOfChannel_IsUsed ')
autoDialAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoDialAction.setStatus('current')
if mibBuilder.loadTexts: autoDialAction.setDescription('Development Impending. AC INI-Param: N/A')
autoDialActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoDialActionResult.setStatus('current')
if mibBuilder.loadTexts: autoDialActionResult.setDescription('Development Impending. AC INI-Param: N/A')
autoDialDestPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoDialDestPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: autoDialDestPhoneNumber.setDescription(' Access: Instant. AC INI-Param: TargetOfChannel_Destination')
autoDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("autoDial", 1), ("delayHotLine", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoDialType.setStatus('current')
if mibBuilder.loadTexts: autoDialType.setDescription('Choose auto dial type. Access: Instant. AC INI-Param: TargetOfChannel_Type')
autoDialModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoDialModule.setStatus('current')
if mibBuilder.loadTexts: autoDialModule.setDescription('Channels Module. AC INI-Param: TargetOfChannel_Module')
autoDialPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 12, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoDialPort.setStatus('current')
if mibBuilder.loadTexts: autoDialPort.setDescription('Channels Port. AC INI-Param: TargetOfChannel_Port')
callerID = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13))
callerIDEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callerIDEnable.setStatus('current')
if mibBuilder.loadTexts: callerIDEnable.setDescription('FXS:generate CallerId siganls during ringing FXO:collect CallerId and use it in Setup message. Access: Instant. AC INI-Param: ENABLECALLERID')
callerDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21), )
if mibBuilder.loadTexts: callerDisplayTable.setStatus('current')
if mibBuilder.loadTexts: callerDisplayTable.setDescription('')
callerDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1), ).setIndexNames((0, "AcGateway", "callerDisplayIndex"))
if mibBuilder.loadTexts: callerDisplayEntry.setStatus('current')
if mibBuilder.loadTexts: callerDisplayEntry.setDescription('')
callerDisplayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerDisplayIndex.setStatus('current')
if mibBuilder.loadTexts: callerDisplayIndex.setDescription('Entry number, starting at 0. AC INI-Param: CallerDisplayInfo_Index')
callerDisplayIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callerDisplayIsUsed.setStatus('current')
if mibBuilder.loadTexts: callerDisplayIsUsed.setDescription('Is this index used. AC INI-Param: CallerDisplayInfo_IsUsed')
callerDisplayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerDisplayAction.setStatus('current')
if mibBuilder.loadTexts: callerDisplayAction.setDescription('Development Impending. AC INI-Param: N/A')
callerDisplayActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerDisplayActionResult.setStatus('current')
if mibBuilder.loadTexts: callerDisplayActionResult.setDescription('Development Impending. AC INI-Param: N/A')
callerDisplayCallerDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callerDisplayCallerDisplay.setStatus('current')
if mibBuilder.loadTexts: callerDisplayCallerDisplay.setDescription('Caller Name. Access: Instant. AC INI-Param: CallerDisplayInfo_DisplayString')
callerDisplayRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notBlocked", 0), ("blocked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callerDisplayRestriction.setStatus('current')
if mibBuilder.loadTexts: callerDisplayRestriction.setDescription('Restriction. Access: Instant. AC INI-Param: CallerDisplayInfo_IsCidRestricted')
callerDisplayModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerDisplayModule.setStatus('current')
if mibBuilder.loadTexts: callerDisplayModule.setDescription('Channels Module. AC INI-Param: CallerDisplayInfo_Module')
callerDisplayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerDisplayPort.setStatus('current')
if mibBuilder.loadTexts: callerDisplayPort.setDescription('Channels Port. AC INI-Param: CallerDisplayInfo_Port')
callerIDperPortTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22), )
if mibBuilder.loadTexts: callerIDperPortTable.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortTable.setDescription('')
callerIDperPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22, 1), ).setIndexNames((0, "AcGateway", "callerIDperPortIndex"))
if mibBuilder.loadTexts: callerIDperPortEntry.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortEntry.setDescription('')
callerIDperPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerIDperPortIndex.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortIndex.setDescription('. AC INI-Param: EnableCallerId_Index')
callerIDperPortIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callerIDperPortIsUsed.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortIsUsed.setDescription('Is this index used. Access: Offline. AC INI-Param: EnableCallerId_IsUsed')
callerIDperPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerIDperPortAction.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortAction.setDescription('Development Impending. AC INI-Param: N/A')
callerIDperPortActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerIDperPortActionResult.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortActionResult.setDescription('Development Impending. AC INI-Param: N/A')
callerIDperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("valueNotSet", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callerIDperPortEnable.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortEnable.setDescription('Enable. Access: Instant. AC INI-Param: EnableCallerId_IsEnabled')
callerIDperPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerIDperPortModule.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortModule.setDescription('Channels Module. AC INI-Param: EnableCallerId_Module')
callerIDperPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 13, 22, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callerIDperPortPort.setStatus('current')
if mibBuilder.loadTexts: callerIDperPortPort.setDescription('Channels Port. AC INI-Param: EnableCallerId_Port')
keypadFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14))
keypadFeaturesCFUncond = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesCFUncond.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesCFUncond.setDescription('Keying sequence for activating immediate Call Forward. Access: Instant. AC INI-Param: KEYCFUNCOND')
keypadFeaturesCFDeact = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesCFDeact.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesCFDeact.setDescription('Keying sequence for deactivating Call Forward. Access: Instant. AC INI-Param: KEYCFDEACT')
keypadFeaturesCFNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesCFNoAnswer.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesCFNoAnswer.setDescription('Keying sequence for activating Call Forward on no answer. Access: Instant. AC INI-Param: KEYCFNOANSWER')
keypadFeaturesCFBusy = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesCFBusy.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesCFBusy.setDescription('Keying sequence for activating Call Forward on busy. Access: Instant. AC INI-Param: KEYCFBUSY')
keypadFeaturesCLIR = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesCLIR.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesCLIR.setDescription('Keying sequence for activating restricted Caller ID. Access: Instant. AC INI-Param: KEYCLIR')
keypadFeaturesCLIRDeact = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesCLIRDeact.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesCLIRDeact.setDescription('Keying sequence for deactivating restricted Caller ID. Access: Instant. AC INI-Param: KEYCLIRDEACT')
keypadFeaturesHotLine = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesHotLine.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesHotLine.setDescription('Keying sequence for activating delayed Hot-line. Access: Instant. AC INI-Param: KEYHOTLINE')
keypadFeaturesHotLineDeact = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesHotLineDeact.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesHotLineDeact.setDescription('Keying sequence for deactivating delayed Hot-line. Access: Instant. AC INI-Param: KEYHOTLINEDEACT')
keypadFeaturesCFBusyOrNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesCFBusyOrNoAnswer.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesCFBusyOrNoAnswer.setDescription('Keying sequence for activating Call Forward on busy or no answer. Access: Instant. AC INI-Param: KEYCFBUSYORNOANSWER')
keypadFeaturesCFDoNotDisturb = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesCFDoNotDisturb.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesCFDoNotDisturb.setDescription('Keying sequence for activating Do Not Disturb. Access: Instant. AC INI-Param: KEYCFDONOTDISTURB')
keypadFeaturesBlindTransfer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesBlindTransfer.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesBlindTransfer.setDescription('Keying sequence for performing blind transfer. Access: Instant. AC INI-Param: KEYBLINDTRANSFER')
keypadFeaturesKeypadFeaturesCW = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesKeypadFeaturesCW.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesKeypadFeaturesCW.setDescription('Keying sequence for activating call waiting. Access: Instant. AC INI-Param: KEYCALLWAITINGDEACT')
keypadFeaturesKeypadFeaturesCWDeact = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesKeypadFeaturesCWDeact.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesKeypadFeaturesCWDeact.setDescription('Keying sequence for deactivating call waiting. Access: Instant. AC INI-Param: KEYCALLWAITINGDEACT')
keypadFeaturesRejectAnonymousCall = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesRejectAnonymousCall.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesRejectAnonymousCall.setDescription('Key pad pattern for rejecting anonymous call. Access: Instant. AC INI-Param: KeyRejectAnonymousCall')
keypadFeaturesRejectAnonymousCallDeact = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 14, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keypadFeaturesRejectAnonymousCallDeact.setStatus('current')
if mibBuilder.loadTexts: keypadFeaturesRejectAnonymousCallDeact.setDescription('Key pad pattern for accepting anonymous call. Access: Instant. AC INI-Param: KeyRejectAnonymousCallDeact')
portName = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15))
namesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21), )
if mibBuilder.loadTexts: namesTable.setStatus('current')
if mibBuilder.loadTexts: namesTable.setDescription('')
namesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21, 1), ).setIndexNames((0, "AcGateway", "namesIndex"))
if mibBuilder.loadTexts: namesEntry.setStatus('current')
if mibBuilder.loadTexts: namesEntry.setDescription('')
namesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namesIndex.setStatus('current')
if mibBuilder.loadTexts: namesIndex.setDescription('Entry number, starting at 0. AC INI-Param: PortName_Index')
namesIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namesIsUsed.setStatus('current')
if mibBuilder.loadTexts: namesIsUsed.setDescription('Is this index used. AC INI-Param: PortName_IsUsed')
namesAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namesAction.setStatus('current')
if mibBuilder.loadTexts: namesAction.setDescription('Development Impending. AC INI-Param: N/A')
namesActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namesActionResult.setStatus('current')
if mibBuilder.loadTexts: namesActionResult.setDescription('Development Impending. AC INI-Param: N/A')
namesPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namesPortName.setStatus('current')
if mibBuilder.loadTexts: namesPortName.setDescription(' Access: Instant. AC INI-Param: PortName_Name')
namesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namesModule.setStatus('current')
if mibBuilder.loadTexts: namesModule.setDescription('Module. AC INI-Param: PortName_Module')
namesPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 15, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namesPort.setStatus('current')
if mibBuilder.loadTexts: namesPort.setDescription('Port. AC INI-Param: PortName_Port')
dID = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16))
dIDEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dIDEnable.setStatus('current')
if mibBuilder.loadTexts: dIDEnable.setDescription('Enable DID support. Access: Instant. AC INI-Param: ENABLEDID')
dIDEnableWink = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dIDEnableWink.setStatus('current')
if mibBuilder.loadTexts: dIDEnableWink.setDescription('Enable support for DID lines using Wink. Access: Instant. AC INI-Param: ENABLEDIDWINK')
dIDDelayBeforeDidWink = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dIDDelayBeforeDidWink.setStatus('current')
if mibBuilder.loadTexts: dIDDelayBeforeDidWink.setDescription('delay between Off-Hook detection and Wink generation (relevant only for FXS). unit - ms. Access: Instant. AC INI-Param: DELAYBEFOREDIDWINK')
enableDidPortTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21), )
if mibBuilder.loadTexts: enableDidPortTable.setStatus('current')
if mibBuilder.loadTexts: enableDidPortTable.setDescription('')
enableDidPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21, 1), ).setIndexNames((0, "AcGateway", "enableDidPortIndex"))
if mibBuilder.loadTexts: enableDidPortEntry.setStatus('current')
if mibBuilder.loadTexts: enableDidPortEntry.setDescription('')
enableDidPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableDidPortIndex.setStatus('current')
if mibBuilder.loadTexts: enableDidPortIndex.setDescription('. AC INI-Param: EnableDid_Index')
enableDidPortIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDidPortIsUsed.setStatus('current')
if mibBuilder.loadTexts: enableDidPortIsUsed.setDescription('Is this index used. Access: Offline. AC INI-Param: EnableDid_IsUsed')
enableDidPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableDidPortAction.setStatus('current')
if mibBuilder.loadTexts: enableDidPortAction.setDescription('Development Impending. AC INI-Param: N/A')
enableDidPortActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableDidPortActionResult.setStatus('current')
if mibBuilder.loadTexts: enableDidPortActionResult.setDescription('Development Impending. AC INI-Param: N/A')
enableDidPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDidPortEnable.setStatus('current')
if mibBuilder.loadTexts: enableDidPortEnable.setDescription('Enable. Access: Instant. AC INI-Param: EnableDid_IsEnable')
enableDidPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableDidPortModule.setStatus('current')
if mibBuilder.loadTexts: enableDidPortModule.setDescription('Channels Module. AC INI-Param: EnableDid_Module')
enableDidPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 4, 16, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enableDidPortPort.setStatus('current')
if mibBuilder.loadTexts: enableDidPortPort.setDescription('Channels Port. AC INI-Param: EnableDid_Port')
mediaGW = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5))
mediaGWMediaChannels = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2016))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mediaGWMediaChannels.setStatus('current')
if mibBuilder.loadTexts: mediaGWMediaChannels.setDescription('Number of channels associated with media services (announcements, conferencing). Access: Offline. AC INI-Param: MEDIACHANNELS')
conference = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10))
conferenceID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conferenceID.setStatus('current')
if mibBuilder.loadTexts: conferenceID.setDescription('Identification of conference call (To be used by SIP INVITE). Access: Instant. AC INI-Param: CONFERENCEID')
conferenceBipOnConference = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conferenceBipOnConference.setStatus('current')
if mibBuilder.loadTexts: conferenceBipOnConference.setDescription('Beep when a new participant joins a conference. Access: Instant. AC INI-Param: BIPONCONFERENCE')
conferenceEnableDTMFReporting = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conferenceEnableDTMFReporting.setStatus('current')
if mibBuilder.loadTexts: conferenceEnableDTMFReporting.setDescription('EnableConferenceDTMFReporting- if enable report in out of band format about detected DTMF digits (values 1-Report,0 - Not Report). Access: Instant. AC INI-Param: EnableConferenceDTMFReporting')
conferenceEnableDTMFClamping = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conferenceEnableDTMFClamping.setStatus('current')
if mibBuilder.loadTexts: conferenceEnableDTMFClamping.setDescription('EnableConferenceDTMFClamp - if enable remove detected DTMF digits from the audio stream on simple conference participant. Access: Instant. AC INI-Param: EnableConferenceDTMFClamp')
conference3WayMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("audioCodesMediaServer", 0), ("noneAudioCodesMediaServer", 1), ("onBoard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conference3WayMode.setStatus('current')
if mibBuilder.loadTexts: conference3WayMode.setDescription('If 3wayConferenceMode=0, the usual conference mode will be used, this mode wil be compatible with our IPmedia server. The INVITE messages that are used to form a conference call, all will contain the same conIfD in sip INVITE requests. If 3wayConferenceMode=1, only the first INVITE send to conference server will use the confID. In contact header of 200OK response, the conference server returns a conference URI. This conference URI will be included (by our MP gateway) in REFER-TO header in the REFER messages, send by the MP GW to other sip clients. The sip client will join to conference by sending INVITEs to the conference server using this conference URI . 3wayConferenceMode = 2: InBoard 3w Conference. Access: Instant. AC INI-Param: 3WAYCONFERENCEMODE')
conferenceMaxInBoardCalls = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conferenceMaxInBoardCalls.setStatus('current')
if mibBuilder.loadTexts: conferenceMaxInBoardCalls.setDescription('Max InBoard Conference Calls. Access: Offline. AC INI-Param: MaxInBoardConferenceCalls')
acTWCnonAllocateablePortsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 21), )
if mibBuilder.loadTexts: acTWCnonAllocateablePortsTable.setStatus('current')
if mibBuilder.loadTexts: acTWCnonAllocateablePortsTable.setDescription('')
acTWCnonAllocateablePortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 21, 1), ).setIndexNames((0, "AcGateway", "acTWCnonAllocateablePortsIndex"))
if mibBuilder.loadTexts: acTWCnonAllocateablePortsEntry.setStatus('current')
if mibBuilder.loadTexts: acTWCnonAllocateablePortsEntry.setDescription('')
acTWCnonAllocateablePortsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: acTWCnonAllocateablePortsIndex.setStatus('current')
if mibBuilder.loadTexts: acTWCnonAllocateablePortsIndex.setDescription('Line index. AC INI-Param: N/A')
acTWCnonAllocateablePortsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 10, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTWCnonAllocateablePortsNumber.setStatus('current')
if mibBuilder.loadTexts: acTWCnonAllocateablePortsNumber.setDescription('Define the Ports that are not hit by 3w conference feature. Access: Instant. AC INI-Param: 3WayConfNoneAllocateablePorts')
announcement = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11))
announcementID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announcementID.setStatus('current')
if mibBuilder.loadTexts: announcementID.setDescription('Identification of a play voice prompt call (To be used by SIP INVITE). Access: Instant. AC INI-Param: ANNOUNCEMENTID')
announcementNumOfEndPoints = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announcementNumOfEndPoints.setStatus('current')
if mibBuilder.loadTexts: announcementNumOfEndPoints.setDescription('Number of Annuncment endpoints. Access: Offline. AC INI-Param: NUMOFANNOUNCENDPOINTS')
announcementToneID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announcementToneID.setStatus('current')
if mibBuilder.loadTexts: announcementToneID.setDescription('Identification of a play call progress tone call (To be used by SIP INVITE). Access: Instant. AC INI-Param: TONEID')
streaming = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10))
streamingID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingID.setStatus('current')
if mibBuilder.loadTexts: streamingID.setDescription('Identification of HTTP played voice prompt (To be used by SIP INVITE). Access: Instant. AC INI-Param: STREAMINGID')
streamingNumOfEndPoints = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingNumOfEndPoints.setStatus('current')
if mibBuilder.loadTexts: streamingNumOfEndPoints.setDescription('Number of Streaming endpoints. Access: Offline. AC INI-Param: NUMOFSTREAMINGENDPOINTS')
streamingRecordScriptPath = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingRecordScriptPath.setStatus('obsolete')
if mibBuilder.loadTexts: streamingRecordScriptPath.setDescription('Identification of HTTP Record Script (To be used by FOR RECORD). Access: Offline. AC INI-Param: RecordScriptPath')
streamingMediaID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingMediaID.setStatus('current')
if mibBuilder.loadTexts: streamingMediaID.setDescription('Identification of HTTP played voice prompt (To be used by SIP INVITE). Access: Instant. AC INI-Param: MediaStreamingID')
streamingStopRecordingOnNoSpeachTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingStopRecordingOnNoSpeachTimeout.setStatus('current')
if mibBuilder.loadTexts: streamingStopRecordingOnNoSpeachTimeout.setDescription('Timeout for no speech detection used to stop recording. Access: Instant. AC INI-Param: STOPRECORDINGONNOSPEACHTIMEOUT')
streamingPlayFromID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingPlayFromID.setStatus('current')
if mibBuilder.loadTexts: streamingPlayFromID.setDescription('Identification of voice stream play location (To be used by SIP INVITE). Access: Instant. AC INI-Param: PLAYFROMID')
streamingRecordToID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingRecordToID.setStatus('current')
if mibBuilder.loadTexts: streamingRecordToID.setDescription('Identification of voice stream recording location (To be used by SIP INVITE). Access: Instant. AC INI-Param: RECORDTOID')
streamingNetAnnAnncID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingNetAnnAnncID.setStatus('current')
if mibBuilder.loadTexts: streamingNetAnnAnncID.setDescription('NetAnn Announcement ID. Access: Instant. AC INI-Param: NETANNANNCID')
streamingMscmlID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingMscmlID.setStatus('current')
if mibBuilder.loadTexts: streamingMscmlID.setDescription('Identification of HTTP played voice prompt using mscml(To be used by SIP INVITE). Access: Instant. AC INI-Param: MSCMLID')
streamingMonitorID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 11, 10, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: streamingMonitorID.setStatus('current')
if mibBuilder.loadTexts: streamingMonitorID.setDescription('Identification of Calea call (To be used by SIP INVITE). Access: Instant. AC INI-Param: MONITORID')
vxml = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 12))
vxmlID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 12, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxmlID.setStatus('current')
if mibBuilder.loadTexts: vxmlID.setDescription('Identification of VoiceXML call (To be used by SIP INVITE). Access: Instant. AC INI-Param: VXMLID')
vxmlNumOfEndPoints = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 12, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxmlNumOfEndPoints.setStatus('current')
if mibBuilder.loadTexts: vxmlNumOfEndPoints.setDescription('Number of VXML endpoints. Access: Offline. AC INI-Param: NUMOFVXMLENDPOINTS')
calea = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 13))
caleaInterceptionDirection = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("outgoing", 0), ("incoming", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caleaInterceptionDirection.setStatus('current')
if mibBuilder.loadTexts: caleaInterceptionDirection.setDescription('Defines the direction of interception of a BCT listener. Access: Offline. AC INI-Param: INTERCEPTIONDIRECTION')
transcoding = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 14))
transcodingID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 5, 14, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transcodingID.setStatus('current')
if mibBuilder.loadTexts: transcodingID.setDescription('SIP Transcoding ID. Access: Instant. AC INI-Param: TRANSCODINGID')
coders = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6))
codersTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1), )
if mibBuilder.loadTexts: codersTable.setStatus('current')
if mibBuilder.loadTexts: codersTable.setDescription('The names of the five possible coders.')
codersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1), ).setIndexNames((0, "AcGateway", "codersIndex"))
if mibBuilder.loadTexts: codersEntry.setStatus('current')
if mibBuilder.loadTexts: codersEntry.setDescription('')
codersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: codersIndex.setStatus('deprecated')
if mibBuilder.loadTexts: codersIndex.setDescription('Entry number, starting at 0. AC INI-Param: CoderName_Index')
codersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: codersRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
codersAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codersAction.setStatus('deprecated')
if mibBuilder.loadTexts: codersAction.setDescription('Development Impending. AC INI-Param: N/A')
codersActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codersActionResult.setStatus('deprecated')
if mibBuilder.loadTexts: codersActionResult.setDescription('Development Impending. AC INI-Param: N/A')
codersName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 99))).clone(namedValues=NamedValues(("g7231", 0), ("g711Alaw64k", 1), ("g711Ulaw64k", 2), ("g729", 3), ("g726", 5), ("g726r16", 6), ("g726r24", 7), ("g726r32", 8), ("g726r40", 9), ("netCoder8", 10), ("netCoder6-4", 11), ("netCoder7-2", 12), ("netCoder8-8", 13), ("gWTransparent", 14), ("g729AnnexB", 17), ("eVRC", 22), ("amr", 23), ("gsm-fr", 24), ("gsm-ms", 25), ("gsmEfr", 26), ("iLBC", 27), ("qCELP", 28), ("t38", 29), ("g711Alaw64k-VBD", 30), ("g711Ulaw64k-VBD", 31), ("eVRC-B", 32), ("g722", 33), ("aMR-WB", 34), ("eg711Alaw", 35), ("eg711Ulaw", 36), ("g7291", 37), ("v1501mr", 38), ("ms-rta-nb", 39), ("invalideCoder", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersName.setStatus('deprecated')
if mibBuilder.loadTexts: codersName.setDescription('Coder Name. Access: Offline. AC INI-Param: N/A')
codersInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersInterval.setStatus('deprecated')
if mibBuilder.loadTexts: codersInterval.setDescription('Coder Interval. Access: Offline. AC INI-Param: CoderName_PacketInterval')
codersRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersRate.setStatus('deprecated')
if mibBuilder.loadTexts: codersRate.setDescription('Rate in bit per second. Access: Offline. AC INI-Param: CoderName_rate')
codersPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersPayloadType.setStatus('deprecated')
if mibBuilder.loadTexts: codersPayloadType.setDescription('Payload type. Access: Offline. AC INI-Param: CoderName_PayloadType')
codersSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("enableAdaptations", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersSilenceSuppression.setStatus('deprecated')
if mibBuilder.loadTexts: codersSilenceSuppression.setDescription('Silence Suppression. Access: Offline. AC INI-Param: CoderName_Sce')
codersGroup0Table = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2), )
if mibBuilder.loadTexts: codersGroup0Table.setStatus('current')
if mibBuilder.loadTexts: codersGroup0Table.setDescription('')
codersGroup0Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1), ).setIndexNames((0, "AcGateway", "codersGroup0Index"))
if mibBuilder.loadTexts: codersGroup0Entry.setStatus('current')
if mibBuilder.loadTexts: codersGroup0Entry.setDescription('')
codersGroup0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: codersGroup0Index.setStatus('current')
if mibBuilder.loadTexts: codersGroup0Index.setDescription('Index Field for line. AC INI-Param: CodersGroup0_Index')
codersGroup0RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup0RowStatus.setStatus('current')
if mibBuilder.loadTexts: codersGroup0RowStatus.setDescription('ROWSTATUS field for line. AC INI-Param: N/A')
codersGroup0Action = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup0Action.setStatus('current')
if mibBuilder.loadTexts: codersGroup0Action.setDescription('Mangement Field for ACTIONS. AC INI-Param: N/A')
codersGroup0ActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codersGroup0ActionRes.setStatus('current')
if mibBuilder.loadTexts: codersGroup0ActionRes.setDescription('Mangement Field for ACTIONS RESULT. AC INI-Param: N/A')
codersGroup0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 99))).clone(namedValues=NamedValues(("g7231", 0), ("g711Alaw64k", 1), ("g711Ulaw64k", 2), ("g729", 3), ("g726", 5), ("g726r16", 6), ("g726r24", 7), ("g726r32", 8), ("g726r40", 9), ("netCoder8", 10), ("netCoder6-4", 11), ("netCoder7-2", 12), ("netCoder8-8", 13), ("gWTransparent", 14), ("g729AnnexB", 17), ("eVRC", 22), ("amr", 23), ("gsm-fr", 24), ("gsm-ms", 25), ("gsmEfr", 26), ("iLBC", 27), ("qCELP", 28), ("t38", 29), ("g711Alaw64k-VBD", 30), ("g711Ulaw64k-VBD", 31), ("eVRC-B", 32), ("g722", 33), ("aMR-WB", 34), ("eg711Alaw", 35), ("eg711Ulaw", 36), ("g7291", 37), ("v1501mr", 38), ("ms-rta-nb", 39), ("invalideCoder", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup0Name.setStatus('current')
if mibBuilder.loadTexts: codersGroup0Name.setDescription('Coders Group name. Access: Instant. AC INI-Param: CodersGroup0_Name')
codersGroup0PacketizationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup0PacketizationTime.setStatus('current')
if mibBuilder.loadTexts: codersGroup0PacketizationTime.setDescription('Coders Group packetization time. Access: Instant. AC INI-Param: CodersGroup0_pTime')
codersGroup0Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup0Rate.setStatus('current')
if mibBuilder.loadTexts: codersGroup0Rate.setDescription('Coders Group rate. Access: Instant. AC INI-Param: CodersGroup0_rate')
codersGroup0PayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup0PayloadType.setStatus('current')
if mibBuilder.loadTexts: codersGroup0PayloadType.setDescription('Coders Group payload type. Access: Instant. AC INI-Param: CodersGroup0_PayloadType')
codersGroup0SilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("enableAdaptations", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup0SilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: codersGroup0SilenceSuppression.setDescription('Coders Group silence suppression. Access: Instant. AC INI-Param: CodersGroup0_Sce')
codersGroup1Table = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3), )
if mibBuilder.loadTexts: codersGroup1Table.setStatus('current')
if mibBuilder.loadTexts: codersGroup1Table.setDescription('')
codersGroup1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1), ).setIndexNames((0, "AcGateway", "codersGroup1Index"))
if mibBuilder.loadTexts: codersGroup1Entry.setStatus('current')
if mibBuilder.loadTexts: codersGroup1Entry.setDescription('')
codersGroup1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: codersGroup1Index.setStatus('current')
if mibBuilder.loadTexts: codersGroup1Index.setDescription('Index Field for line. AC INI-Param: CodersGroup1_Index')
codersGroup1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup1RowStatus.setStatus('current')
if mibBuilder.loadTexts: codersGroup1RowStatus.setDescription('ROWSTATUS field for line. AC INI-Param: N/A')
codersGroup1Action = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup1Action.setStatus('current')
if mibBuilder.loadTexts: codersGroup1Action.setDescription('Mangement Field for ACTIONS. AC INI-Param: N/A')
codersGroup1ActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codersGroup1ActionRes.setStatus('current')
if mibBuilder.loadTexts: codersGroup1ActionRes.setDescription('Mangement Field for ACTIONS RESULT. AC INI-Param: N/A')
codersGroup1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 99))).clone(namedValues=NamedValues(("g7231", 0), ("g711Alaw64k", 1), ("g711Ulaw64k", 2), ("g729", 3), ("g726", 5), ("g726r16", 6), ("g726r24", 7), ("g726r32", 8), ("g726r40", 9), ("netCoder8", 10), ("netCoder6-4", 11), ("netCoder7-2", 12), ("netCoder8-8", 13), ("gWTransparent", 14), ("g729AnnexB", 17), ("eVRC", 22), ("amr", 23), ("gsm-fr", 24), ("gsm-ms", 25), ("gsmEfr", 26), ("iLBC", 27), ("qCELP", 28), ("t38", 29), ("g711Alaw64k-VBD", 30), ("g711Ulaw64k-VBD", 31), ("eVRC-B", 32), ("g722", 33), ("aMR-WB", 34), ("eg711Alaw", 35), ("eg711Ulaw", 36), ("g7291", 37), ("v1501mr", 38), ("ms-rta-nb", 39), ("invalideCoder", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup1Name.setStatus('current')
if mibBuilder.loadTexts: codersGroup1Name.setDescription('Coders Group name. Access: Instant. AC INI-Param: CodersGroup1_Name')
codersGroup1PacketizationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup1PacketizationTime.setStatus('current')
if mibBuilder.loadTexts: codersGroup1PacketizationTime.setDescription('Coders Group packetization time. Access: Instant. AC INI-Param: CodersGroup1_pTime')
codersGroup1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup1Rate.setStatus('current')
if mibBuilder.loadTexts: codersGroup1Rate.setDescription('Coders Group rate. Access: Instant. AC INI-Param: CodersGroup1_rate')
codersGroup1PayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup1PayloadType.setStatus('current')
if mibBuilder.loadTexts: codersGroup1PayloadType.setDescription('Coders Group payload type. Access: Instant. AC INI-Param: CodersGroup1_PayloadType')
codersGroup1SilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("enableAdaptations", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup1SilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: codersGroup1SilenceSuppression.setDescription('Coders Group silence suppression. Access: Instant. AC INI-Param: CodersGroup1_Sce')
codersGroup2Table = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4), )
if mibBuilder.loadTexts: codersGroup2Table.setStatus('current')
if mibBuilder.loadTexts: codersGroup2Table.setDescription('')
codersGroup2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1), ).setIndexNames((0, "AcGateway", "codersGroup2Index"))
if mibBuilder.loadTexts: codersGroup2Entry.setStatus('current')
if mibBuilder.loadTexts: codersGroup2Entry.setDescription('')
codersGroup2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: codersGroup2Index.setStatus('current')
if mibBuilder.loadTexts: codersGroup2Index.setDescription('Index Field for line. AC INI-Param: CodersGroup2_Index')
codersGroup2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup2RowStatus.setStatus('current')
if mibBuilder.loadTexts: codersGroup2RowStatus.setDescription('ROWSTATUS field for line. AC INI-Param: N/A')
codersGroup2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup2Action.setStatus('current')
if mibBuilder.loadTexts: codersGroup2Action.setDescription('Mangement Field for ACTIONS. AC INI-Param: N/A')
codersGroup2ActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codersGroup2ActionRes.setStatus('current')
if mibBuilder.loadTexts: codersGroup2ActionRes.setDescription('Mangement Field for ACTIONS RESULT. AC INI-Param: N/A')
codersGroup2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 99))).clone(namedValues=NamedValues(("g7231", 0), ("g711Alaw64k", 1), ("g711Ulaw64k", 2), ("g729", 3), ("g726", 5), ("g726r16", 6), ("g726r24", 7), ("g726r32", 8), ("g726r40", 9), ("netCoder8", 10), ("netCoder6-4", 11), ("netCoder7-2", 12), ("netCoder8-8", 13), ("gWTransparent", 14), ("g729AnnexB", 17), ("eVRC", 22), ("amr", 23), ("gsm-fr", 24), ("gsm-ms", 25), ("gsmEfr", 26), ("iLBC", 27), ("qCELP", 28), ("t38", 29), ("g711Alaw64k-VBD", 30), ("g711Ulaw64k-VBD", 31), ("eVRC-B", 32), ("g722", 33), ("aMR-WB", 34), ("eg711Alaw", 35), ("eg711Ulaw", 36), ("g7291", 37), ("v1501mr", 38), ("ms-rta-nb", 39), ("invalideCoder", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup2Name.setStatus('current')
if mibBuilder.loadTexts: codersGroup2Name.setDescription('Coders Group name. Access: Instant. AC INI-Param: CodersGroup2_Name')
codersGroup2PacketizationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup2PacketizationTime.setStatus('current')
if mibBuilder.loadTexts: codersGroup2PacketizationTime.setDescription('Coders Group packetization time. Access: Instant. AC INI-Param: CodersGroup2_pTime')
codersGroup2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup2Rate.setStatus('current')
if mibBuilder.loadTexts: codersGroup2Rate.setDescription('Coders Group rate. Access: Instant. AC INI-Param: CodersGroup2_rate')
codersGroup2PayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup2PayloadType.setStatus('current')
if mibBuilder.loadTexts: codersGroup2PayloadType.setDescription('Coders Group payload type. Access: Instant. AC INI-Param: CodersGroup2_PayloadType')
codersGroup2SilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("enableAdaptations", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup2SilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: codersGroup2SilenceSuppression.setDescription('Coders Group silence suppression. Access: Instant. AC INI-Param: CodersGroup2_Sce')
codersGroup3Table = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5), )
if mibBuilder.loadTexts: codersGroup3Table.setStatus('current')
if mibBuilder.loadTexts: codersGroup3Table.setDescription('')
codersGroup3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1), ).setIndexNames((0, "AcGateway", "codersGroup3Index"))
if mibBuilder.loadTexts: codersGroup3Entry.setStatus('current')
if mibBuilder.loadTexts: codersGroup3Entry.setDescription('')
codersGroup3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: codersGroup3Index.setStatus('current')
if mibBuilder.loadTexts: codersGroup3Index.setDescription('Index Field for line. AC INI-Param: CodersGroup3_Index')
codersGroup3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup3RowStatus.setStatus('current')
if mibBuilder.loadTexts: codersGroup3RowStatus.setDescription('ROWSTATUS field for line. AC INI-Param: N/A')
codersGroup3Action = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup3Action.setStatus('current')
if mibBuilder.loadTexts: codersGroup3Action.setDescription('Mangement Field for ACTIONS. AC INI-Param: N/A')
codersGroup3ActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codersGroup3ActionRes.setStatus('current')
if mibBuilder.loadTexts: codersGroup3ActionRes.setDescription('Mangement Field for ACTIONS RESULT. AC INI-Param: N/A')
codersGroup3Name = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 99))).clone(namedValues=NamedValues(("g7231", 0), ("g711Alaw64k", 1), ("g711Ulaw64k", 2), ("g729", 3), ("g726", 5), ("g726r16", 6), ("g726r24", 7), ("g726r32", 8), ("g726r40", 9), ("netCoder8", 10), ("netCoder6-4", 11), ("netCoder7-2", 12), ("netCoder8-8", 13), ("gWTransparent", 14), ("g729AnnexB", 17), ("eVRC", 22), ("amr", 23), ("gsm-fr", 24), ("gsm-ms", 25), ("gsmEfr", 26), ("iLBC", 27), ("qCELP", 28), ("t38", 29), ("g711Alaw64k-VBD", 30), ("g711Ulaw64k-VBD", 31), ("eVRC-B", 32), ("g722", 33), ("aMR-WB", 34), ("eg711Alaw", 35), ("eg711Ulaw", 36), ("g7291", 37), ("v1501mr", 38), ("ms-rta-nb", 39), ("invalideCoder", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup3Name.setStatus('current')
if mibBuilder.loadTexts: codersGroup3Name.setDescription('Coders Group name. Access: Instant. AC INI-Param: CodersGroup3_Name')
codersGroup3PacketizationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup3PacketizationTime.setStatus('current')
if mibBuilder.loadTexts: codersGroup3PacketizationTime.setDescription('Coders Group packetization time. Access: Instant. AC INI-Param: CodersGroup3_pTime')
codersGroup3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup3Rate.setStatus('current')
if mibBuilder.loadTexts: codersGroup3Rate.setDescription('Coders Group rate. Access: Instant. AC INI-Param: CodersGroup3_rate')
codersGroup3PayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup3PayloadType.setStatus('current')
if mibBuilder.loadTexts: codersGroup3PayloadType.setDescription('Coders Group payload type. Access: Instant. AC INI-Param: CodersGroup3_PayloadType')
codersGroup3SilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("enableAdaptations", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup3SilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: codersGroup3SilenceSuppression.setDescription('Coders Group silence suppression. Access: Instant. AC INI-Param: CodersGroup3_Sce')
codersGroup4Table = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6), )
if mibBuilder.loadTexts: codersGroup4Table.setStatus('current')
if mibBuilder.loadTexts: codersGroup4Table.setDescription('')
codersGroup4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1), ).setIndexNames((0, "AcGateway", "codersGroup4Index"))
if mibBuilder.loadTexts: codersGroup4Entry.setStatus('current')
if mibBuilder.loadTexts: codersGroup4Entry.setDescription('')
codersGroup4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: codersGroup4Index.setStatus('current')
if mibBuilder.loadTexts: codersGroup4Index.setDescription('Index Field for line. AC INI-Param: CodersGroup4_Index')
codersGroup4RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup4RowStatus.setStatus('current')
if mibBuilder.loadTexts: codersGroup4RowStatus.setDescription('ROWSTATUS field for line. AC INI-Param: N/A')
codersGroup4Action = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup4Action.setStatus('current')
if mibBuilder.loadTexts: codersGroup4Action.setDescription('Mangement Field for ACTIONS. AC INI-Param: N/A')
codersGroup4ActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codersGroup4ActionRes.setStatus('current')
if mibBuilder.loadTexts: codersGroup4ActionRes.setDescription('Mangement Field for ACTIONS RESULT. AC INI-Param: N/A')
codersGroup4Name = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 99))).clone(namedValues=NamedValues(("g7231", 0), ("g711Alaw64k", 1), ("g711Ulaw64k", 2), ("g729", 3), ("g726", 5), ("g726r16", 6), ("g726r24", 7), ("g726r32", 8), ("g726r40", 9), ("netCoder8", 10), ("netCoder6-4", 11), ("netCoder7-2", 12), ("netCoder8-8", 13), ("gWTransparent", 14), ("g729AnnexB", 17), ("eVRC", 22), ("amr", 23), ("gsm-fr", 24), ("gsm-ms", 25), ("gsmEfr", 26), ("iLBC", 27), ("qCELP", 28), ("t38", 29), ("g711Alaw64k-VBD", 30), ("g711Ulaw64k-VBD", 31), ("eVRC-B", 32), ("g722", 33), ("aMR-WB", 34), ("eg711Alaw", 35), ("eg711Ulaw", 36), ("g7291", 37), ("v1501mr", 38), ("ms-rta-nb", 39), ("invalideCoder", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup4Name.setStatus('current')
if mibBuilder.loadTexts: codersGroup4Name.setDescription('Coders Group name. Access: Instant. AC INI-Param: CodersGroup4_Name')
codersGroup4PacketizationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup4PacketizationTime.setStatus('current')
if mibBuilder.loadTexts: codersGroup4PacketizationTime.setDescription('Coders Group packetization time. Access: Instant. AC INI-Param: CodersGroup4_pTime')
codersGroup4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup4Rate.setStatus('current')
if mibBuilder.loadTexts: codersGroup4Rate.setDescription('Coders Group rate. Access: Instant. AC INI-Param: CodersGroup4_rate')
codersGroup4PayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup4PayloadType.setStatus('current')
if mibBuilder.loadTexts: codersGroup4PayloadType.setDescription('Coders Group payload type. Access: Instant. AC INI-Param: CodersGroup4_PayloadType')
codersGroup4SilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 6, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("enableAdaptations", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: codersGroup4SilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: codersGroup4SilenceSuppression.setDescription('Coders Group silence suppression. Access: Instant. AC INI-Param: CodersGroup4_Sce')
supServices = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7))
supServicesEnableHold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesEnableHold.setStatus('current')
if mibBuilder.loadTexts: supServicesEnableHold.setDescription('Enable Call Hold service. Access: Instant. AC INI-Param: ENABLEHOLD')
supServicesNameID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesNameID.setStatus('current')
if mibBuilder.loadTexts: supServicesNameID.setDescription('Enable Name Identification service. Access: Instant. AC INI-Param: ENABLENAMEIDENTIFICATION')
supServicesHoldFormat = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("connectionIP", 0), ("sDPattributesSendonly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesHoldFormat.setStatus('current')
if mibBuilder.loadTexts: supServicesHoldFormat.setDescription("Call Hold format - Zero IP or 'sendonly' SDP attribute. Access: Instant. AC INI-Param: HOLDFORMAT")
supServicesSendMeteringMessageToIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesSendMeteringMessageToIP.setStatus('current')
if mibBuilder.loadTexts: supServicesSendMeteringMessageToIP.setDescription('Send metering messages to IP on detection of analog metering pulses. Access: Instant. AC INI-Param: SENDMETERING2IP')
supServicesHeldTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesHeldTimeout.setStatus('current')
if mibBuilder.loadTexts: supServicesHeldTimeout.setDescription('Maximum time allowed for call to be retreived from IP (seconds). Access: Instant. AC INI-Param: HELDTIMEOUT')
supServicesHookFlashCode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesHookFlashCode.setStatus('current')
if mibBuilder.loadTexts: supServicesHookFlashCode.setDescription('If this code received during session, act as if hook flash received from the TEL side. This parameter can use DIGIT MAP syntax. Access: Instant. AC INI-Param: HookFlashCode')
supServicesCHRRTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesCHRRTimeout.setStatus('current')
if mibBuilder.loadTexts: supServicesCHRRTimeout.setDescription('Call hold reminder ring maximum ringing time (in seconds). Access: Instant. AC INI-Param: CHRRTIMEOUT')
supServicesEnableHold2ISDN = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesEnableHold2ISDN.setStatus('current')
if mibBuilder.loadTexts: supServicesEnableHold2ISDN.setDescription('Enable Hold/retrieve from and to ISDN. Access: Instant. AC INI-Param: ENABLEHOLD2ISDN')
supServicesEnableMOH = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesEnableMOH.setStatus('current')
if mibBuilder.loadTexts: supServicesEnableMOH.setDescription('FXS: enable playing Music On Hold (instead of Held tone to the PSTN side). Access: Instant. AC INI-Param: EnableMOH')
supServicesBlindTransferDisconnectTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesBlindTransferDisconnectTimeout.setStatus('current')
if mibBuilder.loadTexts: supServicesBlindTransferDisconnectTimeout.setDescription('Maximum time (milliseconds) to wait for disconnect from tel before performing blind transfer. Access: Instant. AC INI-Param: BLINDTRANSFERDISCONNECTTIMEOUT')
transfer = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 10))
transferEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferEnable.setStatus('current')
if mibBuilder.loadTexts: transferEnable.setDescription('Enable Call Transfer service. Access: Instant. AC INI-Param: ENABLETRANSFER')
transferXferPrefix = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 10, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferXferPrefix.setStatus('current')
if mibBuilder.loadTexts: transferXferPrefix.setDescription('Prefix added to the called number of a transferred call. Access: Instant. AC INI-Param: XFERPREFIX')
callWaiting = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 11))
callWaitingEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callWaitingEnable.setStatus('current')
if mibBuilder.loadTexts: callWaitingEnable.setDescription('Enable Call Waiting service. Access: Instant. AC INI-Param: ENABLECALLWAITING')
callWaitingNumberOfIndications = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 11, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callWaitingNumberOfIndications.setStatus('current')
if mibBuilder.loadTexts: callWaitingNumberOfIndications.setDescription('Number of Call Waiting indications to be played to the user. Access: Instant. AC INI-Param: NUMBEROFWAITINGINDICATIONS')
callWaitingTimeBetweenIndications = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 11, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callWaitingTimeBetweenIndications.setStatus('current')
if mibBuilder.loadTexts: callWaitingTimeBetweenIndications.setDescription('Time between one call waiting indication to the next (seconds). Access: Instant. AC INI-Param: TIMEBETWEENWAITINGINDICATIONS')
callWaitingWaitingBeepDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 11, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callWaitingWaitingBeepDuration.setStatus('current')
if mibBuilder.loadTexts: callWaitingWaitingBeepDuration.setDescription('Call Waiting tone beep length (msec). Access: Instant. AC INI-Param: WAITINGBEEPDURATION')
callWaitingTimeBeforeWaitingIndications = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 11, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callWaitingTimeBeforeWaitingIndications.setStatus('current')
if mibBuilder.loadTexts: callWaitingTimeBeforeWaitingIndications.setDescription('Time before call waiting indication is sent to a busy line (seconds). Access: Instant. AC INI-Param: TIMEBEFOREWAITINGINDICATIONS')
forwardSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12))
forwardSettingsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardSettingsEnable.setStatus('current')
if mibBuilder.loadTexts: forwardSettingsEnable.setDescription('Enable Call Forward service. Access: Instant. AC INI-Param: ENABLEFORWARD')
forwardTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21), )
if mibBuilder.loadTexts: forwardTable.setStatus('current')
if mibBuilder.loadTexts: forwardTable.setDescription('')
forwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1), ).setIndexNames((0, "AcGateway", "forwardIndex"))
if mibBuilder.loadTexts: forwardEntry.setStatus('current')
if mibBuilder.loadTexts: forwardEntry.setDescription('')
forwardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardIndex.setStatus('current')
if mibBuilder.loadTexts: forwardIndex.setDescription('Entry number, starting at 0. AC INI-Param: FwdInfo_Index')
forwardIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardIsUsed.setStatus('current')
if mibBuilder.loadTexts: forwardIsUsed.setDescription('Is this index used. AC INI-Param: FwdInfo_IsUsed')
forwardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardAction.setStatus('current')
if mibBuilder.loadTexts: forwardAction.setDescription('Development Impending. AC INI-Param: N/A')
forwardActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardActionResult.setStatus('current')
if mibBuilder.loadTexts: forwardActionResult.setDescription('Development Impending. AC INI-Param: N/A')
forwardForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("busy", 1), ("immediate", 2), ("noAnswer", 3), ("busyOrNoAnswer", 4), ("dontDisturb", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardForwardType.setStatus('current')
if mibBuilder.loadTexts: forwardForwardType.setDescription(' Access: Instant. AC INI-Param: FwdInfo_Type')
forwardForwardedToNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardForwardedToNumber.setStatus('current')
if mibBuilder.loadTexts: forwardForwardedToNumber.setDescription(' Access: Instant. AC INI-Param: FwdInfo_Destination')
forwardTimeForNoReply = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardTimeForNoReply.setStatus('current')
if mibBuilder.loadTexts: forwardTimeForNoReply.setDescription(' Access: Instant. AC INI-Param: FwdInfo_NoReplyTime')
forwardModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardModule.setStatus('current')
if mibBuilder.loadTexts: forwardModule.setDescription('Module. AC INI-Param: FwdInfo_Module')
forwardPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 12, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardPort.setStatus('current')
if mibBuilder.loadTexts: forwardPort.setDescription('Port. AC INI-Param: FwdInfo_Port')
mWI = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 13))
mWIEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mWIEnable.setStatus('current')
if mibBuilder.loadTexts: mWIEnable.setDescription('Enable MWI support (Message Waiting Indicator). Access: Instant. AC INI-Param: ENABLEMWI')
mWIAnalogLamp = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mWIAnalogLamp.setStatus('current')
if mibBuilder.loadTexts: mWIAnalogLamp.setDescription('Enable MWI support using an analog lamp (110 Volt). Access: Instant. AC INI-Param: MWIANALOGLAMP')
mWIDisplay = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mWIDisplay.setStatus('current')
if mibBuilder.loadTexts: mWIDisplay.setDescription('Enable MWI support using Caller ID interface. Access: Instant. AC INI-Param: MWIDISPLAY')
mWIServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 13, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mWIServerIP.setStatus('current')
if mibBuilder.loadTexts: mWIServerIP.setDescription('MWI server IP address. Access: Instant. AC INI-Param: MWISERVERIP')
mWIExpirationTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 13, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mWIExpirationTime.setStatus('current')
if mibBuilder.loadTexts: mWIExpirationTime.setDescription('MWI service subscription expiration time (seconds). Access: Instant. AC INI-Param: MWIEXPIRATIONTIME')
mWIServerTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("uDP", 0), ("tCP", 1), ("tLS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mWIServerTransportType.setStatus('current')
if mibBuilder.loadTexts: mWIServerTransportType.setDescription('MWI server transport type. Access: Instant. AC INI-Param: MWISERVERTRANSPORTTYPE')
supServicesConference = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 14))
supServicesConferenceEnable3Way = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesConferenceEnable3Way.setStatus('current')
if mibBuilder.loadTexts: supServicesConferenceEnable3Way.setDescription('Enable 3 way conference feature. Access: Offline. AC INI-Param: ENABLE3WAYCONFERENCE')
supServicesConferenceEstablishCode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 7, 14, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supServicesConferenceEstablishCode.setStatus('current')
if mibBuilder.loadTexts: supServicesConferenceEstablishCode.setDescription('Control Key activation of the 3 way conference. Access: Instant. AC INI-Param: CONFERENCECODE')
tones = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8))
tonesTimeForReorderTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesTimeForReorderTone.setStatus('current')
if mibBuilder.loadTexts: tonesTimeForReorderTone.setDescription('Duration of reorder tone playing before FXO releases line. Access: Instant. AC INI-Param: TIMEFORREORDERTONE')
tonesTimeForDialTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesTimeForDialTone.setStatus('current')
if mibBuilder.loadTexts: tonesTimeForDialTone.setDescription('Duration of played dial tone after the gateway seizes the line in response to ringing. Access: Instant. AC INI-Param: TIMEFORDIALTONE')
tonesPlayRBTone2Ip = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesPlayRBTone2Ip.setStatus('current')
if mibBuilder.loadTexts: tonesPlayRBTone2Ip.setDescription("Enable ringback tone playing towards IP. Refer to User's Manual for details. Access: Instant. AC INI-Param: PLAYRBTONE2IP")
tonesPlayRBTone2Tel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("doNotPlay", 0), ("playOnLocal", 1), ("preferIp", 2), ("playLocalUntilRemoteMediaArrives", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesPlayRBTone2Tel.setStatus('current')
if mibBuilder.loadTexts: tonesPlayRBTone2Tel.setDescription("Enable ringback tone playing towards Tel side. Refer to User's Manual for details. Access: Instant. AC INI-Param: PLAYRBTONE2TEL")
tonesStutterToneDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesStutterToneDuration.setStatus('current')
if mibBuilder.loadTexts: tonesStutterToneDuration.setDescription('Time for playing confirmation tone before normal dial tone is played (msec). Access: Instant. AC INI-Param: STUTTERTONEDURATION')
tonesPlayRBToneXferSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesPlayRBToneXferSuccess.setStatus('current')
if mibBuilder.loadTexts: tonesPlayRBToneXferSuccess.setDescription('Play RB tone on transfer success. Access: Instant. AC INI-Param: PLAYRBTONEONXFER')
tonesFirstCallRBTId = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesFirstCallRBTId.setStatus('current')
if mibBuilder.loadTexts: tonesFirstCallRBTId.setDescription('the index of the first Call RB tone in the call-progress tones file. Access: Instant. AC INI-Param: FIRSTCALLRBTID')
tonesPrecedenceRingingType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesPrecedenceRingingType.setStatus('current')
if mibBuilder.loadTexts: tonesPrecedenceRingingType.setDescription('the index of the first Call RB tone in the call-progress tones file. Access: Instant. AC INI-Param: PRECEDENCERINGINGTYPE')
tonesFirstCallWaitingToneID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesFirstCallWaitingToneID.setStatus('current')
if mibBuilder.loadTexts: tonesFirstCallWaitingToneID.setDescription('The index of the first Call Waiting tone in the call-progress tones file. Access: Instant. AC INI-Param: FIRSTCALLWAITINGTONEID')
tonesEnableComfortTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tonesEnableComfortTone.setStatus('current')
if mibBuilder.loadTexts: tonesEnableComfortTone.setDescription('Enable Comfort Tone for playing a patience comfort tone between Invite and 18x response. [0] - Disabled [1] - Enabled. Comfort Tone will be played. Access: Instant. AC INI-Param: ENABLECOMFORTTONE')
logger = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 9))
loggerGwAppCdrReportLevel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 0), ("endCall", 1), ("startAndEndCall", 2), ("connectAndEndCall", 3), ("startConnectAndEndCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggerGwAppCdrReportLevel.setStatus('current')
if mibBuilder.loadTexts: loggerGwAppCdrReportLevel.setDescription('CDR reports timing. Access: Instant. AC INI-Param: N/A')
loggerGwDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 100, 200))).clone(namedValues=NamedValues(("logLevel0", 0), ("logLevel1", 1), ("logLevel2", 2), ("logLevel3", 3), ("logLevel4", 4), ("logLevel5", 5), ("logLevel100", 100), ("logLevel200", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggerGwDebugLevel.setStatus('current')
if mibBuilder.loadTexts: loggerGwDebugLevel.setDescription('Configure different debug level. Access: Instant. AC INI-Param: N/A')
loggerCDRSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggerCDRSyslogServerIP.setStatus('current')
if mibBuilder.loadTexts: loggerCDRSyslogServerIP.setDescription('Syslog server IP address for sending CDRs. Access: Instant. AC INI-Param: CDRSYSLOGSERVERIP')
progressIndicators = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 10))
progressIndicators2ISDN = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 8))).clone(namedValues=NamedValues(("notSet", -1), ("localRB", 0), ("remoteRB1", 1), ("remoteRB8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: progressIndicators2ISDN.setStatus('obsolete')
if mibBuilder.loadTexts: progressIndicators2ISDN.setDescription('Override the value of progress indicator to ISDN side in ALERT PROGRESS and PROCEEDING messages. Access: Instant. AC INI-Param: PROGRESSINDICATOR2ISDN')
progressIndicators2IP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 8))).clone(namedValues=NamedValues(("notSet", -1), ("localRB", 0), ("remoteRB1", 1), ("remoteRB8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: progressIndicators2IP.setStatus('current')
if mibBuilder.loadTexts: progressIndicators2IP.setDescription('Determine whether to send the Progress Indicator to IP. Access: Instant. AC INI-Param: PROGRESSINDICATOR2IP')
screeningIndicators = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 10, 20))
screeningIndicators2Ip = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 10, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notOverwrited", -1), ("userProvided", 0), ("userPassed", 1), ("userFailed", 2), ("networkProvided", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: screeningIndicators2Ip.setStatus('current')
if mibBuilder.loadTexts: screeningIndicators2Ip.setDescription('Override screening indicator value in Setup messages to IP. Access: Instant. AC INI-Param: SCREENINGIND2IP')
screeningIndicators2ISDN = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 10, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notOverwrited", -1), ("userProvided", 0), ("userPassed", 1), ("userFailed", 2), ("networkProvided", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: screeningIndicators2ISDN.setStatus('current')
if mibBuilder.loadTexts: screeningIndicators2ISDN.setDescription('Override screening indicator value in Setup messages to ISDN. Access: Instant. AC INI-Param: SCREENINGIND2ISDN')
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11))
miscDisconnectOnBusyTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscDisconnectOnBusyTone.setStatus('current')
if mibBuilder.loadTexts: miscDisconnectOnBusyTone.setDescription('Release call if gateway receives busy or fast busy tone before the call is answered. Access: Instant. AC INI-Param: DISCONNECTONBUSYTONE')
miscDisconnectOnSilence = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscDisconnectOnSilence.setStatus('current')
if mibBuilder.loadTexts: miscDisconnectOnSilence.setDescription('Disconnect calls on a configured silence timeout. Access: Offline. AC INI-Param: ENABLESILENCEDISCONNECT')
miscEnableBusyOut = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscEnableBusyOut.setStatus('current')
if mibBuilder.loadTexts: miscEnableBusyOut.setDescription('Take trunks out of service in case of LAN down. Access: Instant. AC INI-Param: ENABLEBUSYOUT')
miscSecureCallsFromIp = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscSecureCallsFromIp.setStatus('current')
if mibBuilder.loadTexts: miscSecureCallsFromIp.setDescription('Gateway will only accept calls from IP addresses that are defined in the Tel to IP Routing table. Access: Instant. AC INI-Param: SECURECALLSFROMIP')
miscStaticNATIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStaticNATIP.setStatus('current')
if mibBuilder.loadTexts: miscStaticNATIP.setDescription('static NAT IP, to be supported by the gateway. Access: Instant. AC INI-Param: STATICNATIP')
miscSilenceDisconnectTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 28800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscSilenceDisconnectTimeout.setStatus('current')
if mibBuilder.loadTexts: miscSilenceDisconnectTimeout.setDescription('Defines the Silence period to be detected. Access: Offline. AC INI-Param: FarEndDisconnectSilencePeriod')
miscIsFaxUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noFax", 0), ("t38", 1), ("g711", 2), ("fallBack", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscIsFaxUsed.setStatus('current')
if mibBuilder.loadTexts: miscIsFaxUsed.setDescription('Enable T.38 Fax signaling. Access: Instant. AC INI-Param: IsFaxUsed')
miscDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscDelayTime.setStatus('current')
if mibBuilder.loadTexts: miscDelayTime.setDescription('Gateway delay time after reset (seconds). Access: Instant. AC INI-Param: GWAPPDelayTime')
miscDetFaxOnAnswerTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscDetFaxOnAnswerTone.setStatus('current')
if mibBuilder.loadTexts: miscDetFaxOnAnswerTone.setDescription('Start T.38 fax procedure after fax answer tone detection or after HDLC preamble signal detection. Access: Instant. AC INI-Param: DETFAXONANSWERTONE')
miscDefaultReleaseCause = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscDefaultReleaseCause.setStatus('current')
if mibBuilder.loadTexts: miscDefaultReleaseCause.setDescription('The release cause that will be sent to IP or to Tel when gateway initiates release by itself. Access: Instant. AC INI-Param: DEFAULTRELEASECAUSE')
miscT38UseRTPPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscT38UseRTPPort.setStatus('current')
if mibBuilder.loadTexts: miscT38UseRTPPort.setDescription('T.38 packets will be received on RTP port. Access: Instant. AC INI-Param: T38USERTPPORT')
miscRFC2833PayloadType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(96, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscRFC2833PayloadType.setStatus('current')
if mibBuilder.loadTexts: miscRFC2833PayloadType.setDescription('control the RFC 2833 Relay RTP Payload type. Access: Instant. AC INI-Param: RFC2833PayloadType')
miscIsCiscoSceMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscIsCiscoSceMode.setStatus('current')
if mibBuilder.loadTexts: miscIsCiscoSceMode.setDescription('In use with G.729 - if enabled and SCE=2 then AnnexB=no. Access: Instant. AC INI-Param: ISCISCOSCEMODE')
miscDisconnectOnDialTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscDisconnectOnDialTone.setStatus('current')
if mibBuilder.loadTexts: miscDisconnectOnDialTone.setDescription('Release call if gateway receives dial tone before the call is answered or during voice session. Access: Instant. AC INI-Param: DISCONNECTONDIALTONE')
miscEnableSemiAttendedTransfer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscEnableSemiAttendedTransfer.setStatus('obsolete')
if mibBuilder.loadTexts: miscEnableSemiAttendedTransfer.setDescription(' Access: Instant. AC INI-Param: ENABLESEMIATTENDEDTRANSFER')
miscHookFlashCodeIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscHookFlashCodeIP.setStatus('current')
if mibBuilder.loadTexts: miscHookFlashCodeIP.setDescription('The string represent HookFlash, when reported to or from IP. Currently used in H.323 only (H245UserOutput, H245Signal or Q931UserInfo). Access: Instant. AC INI-Param: HookFlashCodeIP')
miscEnableFaxRerouting = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscEnableFaxRerouting.setStatus('current')
if mibBuilder.loadTexts: miscEnableFaxRerouting.setDescription('Enable rerouting of FAX calls to FAX destination. Access: Instant. AC INI-Param: ENABLEFAXREROUTING')
miscT38MaxDatagramSize = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(122, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscT38MaxDatagramSize.setStatus('current')
if mibBuilder.loadTexts: miscT38MaxDatagramSize.setDescription('T.38 coder - Max Datagram Size. Access: Instant. AC INI-Param: T38MAXDATAGRAMSIZE')
miscIsdnDisconnectOnBusyTone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscIsdnDisconnectOnBusyTone.setStatus('current')
if mibBuilder.loadTexts: miscIsdnDisconnectOnBusyTone.setDescription("1 - Release call if gateway receives busy or fast busy tone. 0 - don't release. Access: Instant. AC INI-Param: ISDNDISCONNECTONBUSYTONE")
miscFaxCNGMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscFaxCNGMode.setStatus('current')
if mibBuilder.loadTexts: miscFaxCNGMode.setDescription('Enables sending of ReInvite on detection of FAX CNG tone when CNGDetectorMode=1. Access: Instant. AC INI-Param: FAXCNGMODE')
miscGracefulBusyOutTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscGracefulBusyOutTimeout.setStatus('current')
if mibBuilder.loadTexts: miscGracefulBusyOutTimeout.setDescription('Graceful Busy Out Timeout in seconds. Sets the time before a busy out signal will be sent to a trunk even if there are still active calls on the trunk. Access: Instant. AC INI-Param: GRACEFULBUSYOUTTIMEOUT')
miscT38FaxMaxBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscT38FaxMaxBufferSize.setStatus('current')
if mibBuilder.loadTexts: miscT38FaxMaxBufferSize.setDescription('Defines the fax max buffer size in T38 SDP negotiation. Access: Instant. AC INI-Param: T38FAXMAXBUFFERSIZE')
miscReliableConnectionPersistentMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReliableConnectionPersistentMode.setStatus('current')
if mibBuilder.loadTexts: miscReliableConnectionPersistentMode.setDescription('if set to 1 - All TCP/TLS connections will be set as persistent and will not be released. Access: Instant. AC INI-Param: RELIABLECONNECTIONPERSISTENTMODE')
miscWANIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 24), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscWANIPAddress.setStatus('current')
if mibBuilder.loadTexts: miscWANIPAddress.setDescription('Sets the WAN address to be used by VOIP signalling applications. Range = IPv4 address in dotted decimal notation xxx.xxx.xxx.xxx Default = 0.0.0.0. Access: Instant. AC INI-Param: WANIPAddress')
miscEnableDelayedOffer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscEnableDelayedOffer.setStatus('current')
if mibBuilder.loadTexts: miscEnableDelayedOffer.setDescription('Send INVITE message with/without sdp offer. [0] - (default) means SDP will be offered in the INVITE message. [1] - means SDP will be offered by the other side in the first reliable response(1xx or 200 OK INVITE). Access: Instant. AC INI-Param: ENABLEDELAYEDOFFER')
miscEnableNRTSubscription = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscEnableNRTSubscription.setStatus('current')
if mibBuilder.loadTexts: miscEnableNRTSubscription.setDescription('Enable subscription for Call forward ringtone Indicator service. Access: Instant. AC INI-Param: ENABLENRTSUBSCRIPTION')
miscASSubscribeIPGroupID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65525))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscASSubscribeIPGroupID.setStatus('current')
if mibBuilder.loadTexts: miscASSubscribeIPGroupID.setDescription('IPGroup ID for AS server subscribe purposes. Access: Instant. AC INI-Param: ASSUBSCRIBEIPGROUPID')
miscNRTSubscriptionRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscNRTSubscriptionRetryTime.setStatus('current')
if mibBuilder.loadTexts: miscNRTSubscriptionRetryTime.setDescription('NRT service subscription retry time after last subscription failure (in seconds). Access: Instant. AC INI-Param: NRTSUBSCRIBERETRYTIME')
miscCallForwardRingToneID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65525))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscCallForwardRingToneID.setStatus('current')
if mibBuilder.loadTexts: miscCallForwardRingToneID.setDescription('Ringtone type for Call forward notification. Access: Instant. AC INI-Param: CALLFORWARDRINGTONEID')
miscKeyCallPickup = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 30), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscKeyCallPickup.setStatus('current')
if mibBuilder.loadTexts: miscKeyCallPickup.setDescription('Keying sequence for performing call pickup. Access: Instant. AC INI-Param: KEYCALLPICKUP')
miscEnableRFC4117Transcoding = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscEnableRFC4117Transcoding.setStatus('current')
if mibBuilder.loadTexts: miscEnableRFC4117Transcoding.setDescription('Enable transcoding call RFC4117. Access: Offline. AC INI-Param: ENABLERFC4117TRANSCODING')
miscEnableSingleDSPTranscoding = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscEnableSingleDSPTranscoding.setStatus('current')
if mibBuilder.loadTexts: miscEnableSingleDSPTranscoding.setDescription('Enable/Disable using single DSP for g711 <--> LBR coder. Access: Instant. AC INI-Param: ENABLESINGLEDSPTRANSCODING')
miscEnableNetworkISDNTransfer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscEnableNetworkISDNTransfer.setStatus('current')
if mibBuilder.loadTexts: miscEnableNetworkISDNTransfer.setDescription('if set to 0 reject ISDN transfer request. Access: Instant. AC INI-Param: ENABLENETWORKISDNTRANSFER')
miscLDAPocsNumberAttributeName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 34), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscLDAPocsNumberAttributeName.setStatus('current')
if mibBuilder.loadTexts: miscLDAPocsNumberAttributeName.setDescription('The name of the attribute which represents the user OCS number in the Microsoft AD data base. Access: Instant. AC INI-Param: MSLDAPOCSNUMATTRIBUTENAME')
miscLDAPpbxNumberAttributeName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscLDAPpbxNumberAttributeName.setStatus('current')
if mibBuilder.loadTexts: miscLDAPpbxNumberAttributeName.setDescription('The name of the attribute which represents the user PBX number in the Microsoft AD data base. Access: Instant. AC INI-Param: MSLDAPPBXNUMATTRIBUTENAME')
miscLDAPMobileNumberAttributeName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 11, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscLDAPMobileNumberAttributeName.setStatus('current')
if mibBuilder.loadTexts: miscLDAPMobileNumberAttributeName.setDescription('The name of the attribute which represents the user Mobile number in the Microsoft AD data base. Access: Instant. AC INI-Param: MSLDAPMOBILENUMATTRIBUTENAME')
resourceManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 12))
resourceManagementMaxActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 12, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2016))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resourceManagementMaxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: resourceManagementMaxActiveCalls.setDescription('Limit the number of calls that the gateway can handle at the same time. Access: Instant. AC INI-Param: MAXACTIVECALLS')
resourceManagementIsSelfCheckAuditUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resourceManagementIsSelfCheckAuditUsed.setStatus('current')
if mibBuilder.loadTexts: resourceManagementIsSelfCheckAuditUsed.setDescription('defines whether the resources self check audit is used. Access: Instant. AC INI-Param: ISSELFCHECKAUDITUSED')
resourceManagementRejectCallsOnOverload = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resourceManagementRejectCallsOnOverload.setStatus('obsolete')
if mibBuilder.loadTexts: resourceManagementRejectCallsOnOverload.setDescription('Defines whether new calls will be rejected during overload period. Access: Instant. AC INI-Param: REJECTCALLSONOVERLOAD')
resourceManagementDisconnectOnBrokenConnection = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resourceManagementDisconnectOnBrokenConnection.setStatus('current')
if mibBuilder.loadTexts: resourceManagementDisconnectOnBrokenConnection.setDescription('Disconnect calls on receiving RTP broken notification. Access: Instant. AC INI-Param: DISCONNECTONBROKENCONNECTION')
resourceManagementMaxCallDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 12, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35791))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resourceManagementMaxCallDuration.setStatus('current')
if mibBuilder.loadTexts: resourceManagementMaxCallDuration.setDescription('Limit the call time duration (minutes) 0 = no limit. Access: Instant. AC INI-Param: MAXCALLDURATION')
resourceManagementOverloadSensitivityLevel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("never", 0), ("highUtil", 1), ("medUtil", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resourceManagementOverloadSensitivityLevel.setStatus('current')
if mibBuilder.loadTexts: resourceManagementOverloadSensitivityLevel.setDescription('Defines when to enter overload state: 0:never 1:on very high utilization 2:on medium utilization. Access: Instant. AC INI-Param: OverloadSensitivityLevel')
aMD = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 13))
aMDTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 13, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMDTimeOut.setStatus('current')
if mibBuilder.loadTexts: aMDTimeOut.setDescription('Amd Detection Timeout <mSec>. Access: Instant. AC INI-Param: AMDTIMEOUT')
aaa = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 14))
aaaIndications = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("authorizeAndAuthenticate", 1), ("fullReport", 2), ("accountingOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaIndications.setStatus('current')
if mibBuilder.loadTexts: aaaIndications.setDescription('Which Authentication, Authorization and Accounting indications to use. Access: Instant. AC INI-Param: AAAINDICATIONS')
aaaRadiusAccountingType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("release", 0), ("connectAndRelease", 1), ("setupAndRelease", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaRadiusAccountingType.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusAccountingType.setDescription('When will Radius Acounting messages be sent. Access: Instant. AC INI-Param: RADIUSACCOUNTINGTYPE')
profile = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15))
iPProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21), )
if mibBuilder.loadTexts: iPProfileTable.setStatus('current')
if mibBuilder.loadTexts: iPProfileTable.setDescription('')
iPProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1), ).setIndexNames((0, "AcGateway", "iPProfileIndex"))
if mibBuilder.loadTexts: iPProfileEntry.setStatus('current')
if mibBuilder.loadTexts: iPProfileEntry.setDescription('')
iPProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: iPProfileIndex.setStatus('current')
if mibBuilder.loadTexts: iPProfileIndex.setDescription('Entry number, starting at 1. AC INI-Param: IpProfile_Index')
iPProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: iPProfileRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
iPProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPProfileAction.setStatus('current')
if mibBuilder.loadTexts: iPProfileAction.setDescription('Development Impending. AC INI-Param: N/A')
iPProfileActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPProfileActionResult.setStatus('current')
if mibBuilder.loadTexts: iPProfileActionResult.setDescription('Development Impending. AC INI-Param: N/A')
iPProfilePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfilePreference.setStatus('current')
if mibBuilder.loadTexts: iPProfilePreference.setDescription('Preference. Access: Instant. AC INI-Param: IpProfile_IpPreference')
iPProfileProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileProfileName.setStatus('current')
if mibBuilder.loadTexts: iPProfileProfileName.setDescription('Profile Name. Access: Instant. AC INI-Param: IpProfile_ProfileName')
iPProfileCodersGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileCodersGroupID.setStatus('current')
if mibBuilder.loadTexts: iPProfileCodersGroupID.setDescription('Coders Group ID. Access: Instant. AC INI-Param: IpProfile_CodersGroupID')
iPProfileFaxTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPProfileFaxTransportMode.setStatus('obsolete')
if mibBuilder.loadTexts: iPProfileFaxTransportMode.setDescription('Fax Transport Mode. Access: Instant. AC INI-Param: N/A')
iPProfileIsFaxUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("noFax", 0), ("t38", 1), ("g711", 2), ("fallBack", 3), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileIsFaxUsed.setStatus('current')
if mibBuilder.loadTexts: iPProfileIsFaxUsed.setDescription('Use H.323/Annex D procedure for real time FAX relay. To use this feature, disable inband DTMF by setting the FaxTransportMode to 1. Access: Instant. AC INI-Param: IpProfile_IsFaxUsed')
iPProfileDJBufMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileDJBufMinDelay.setStatus('current')
if mibBuilder.loadTexts: iPProfileDJBufMinDelay.setDescription('Dynamic Jitter Buffer Minimum Delay (msec). Access: Instant. AC INI-Param: IpProfile_JitterBufMinDelay')
iPProfileDJBufOptFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileDJBufOptFactor.setStatus('current')
if mibBuilder.loadTexts: iPProfileDJBufOptFactor.setDescription('Dynamic jitter buffer frame error/delay optimization. Access: Instant. AC INI-Param: IpProfile_JitterBufOptFactor')
iPProfileIPDiffServ = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileIPDiffServ.setStatus('current')
if mibBuilder.loadTexts: iPProfileIPDiffServ.setDescription('IP DiffServ byte value. Access: Instant. AC INI-Param: IpProfile_IPDiffServ')
iPProfileSigIPDiffServ = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileSigIPDiffServ.setStatus('current')
if mibBuilder.loadTexts: iPProfileSigIPDiffServ.setDescription('Type Of Service bits in IP header of signalling messages. Access: Instant. AC INI-Param: IpProfile_SigIPDiffServ')
iPProfileSCE = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("enableWithoutAdaptation", 2), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileSCE.setStatus('current')
if mibBuilder.loadTexts: iPProfileSCE.setDescription('Silence Suppression mode. Access: Instant. AC INI-Param: IpProfile_SCE')
iPProfileRTPRedundancyDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileRTPRedundancyDepth.setStatus('current')
if mibBuilder.loadTexts: iPProfileRTPRedundancyDepth.setDescription('Enables or disables generation of RFC 2198 redundancy packets. Access: Instant. AC INI-Param: IpProfile_RTPRedundancyDepth')
iPProfileRemoteBaseUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileRemoteBaseUDPPort.setStatus('current')
if mibBuilder.loadTexts: iPProfileRemoteBaseUDPPort.setDescription('Remote Base UDP Port For Aggregation. Access: Instant. AC INI-Param: IpProfile_RemoteBaseUDPPort')
iPProfileCngDetectorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("disable", 0), ("relay", 1), ("eventsOnly", 2), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileCngDetectorMode.setStatus('current')
if mibBuilder.loadTexts: iPProfileCngDetectorMode.setDescription(' Access: Instant. AC INI-Param: IpProfile_CNGmode')
iPProfileVxxModemTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("disable", 0), ("enableRelay", 1), ("enableBypass", 2), ("eventsOnly", 3), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileVxxModemTransportType.setStatus('current')
if mibBuilder.loadTexts: iPProfileVxxModemTransportType.setDescription(' Access: Instant. AC INI-Param: IpProfile_VxxTransportType')
iPProfileNSEMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileNSEMode.setStatus('current')
if mibBuilder.loadTexts: iPProfileNSEMode.setDescription(' Access: Instant. AC INI-Param: IpProfile_NSEMode')
iPProfilePlayRingbackToneToIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("notPlay", 0), ("play", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfilePlayRingbackToneToIP.setStatus('current')
if mibBuilder.loadTexts: iPProfilePlayRingbackToneToIP.setDescription(' Access: Instant. AC INI-Param: IpProfile_PlayRBTone2IP')
iPProfileEnableEarlyMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileEnableEarlyMedia.setStatus('current')
if mibBuilder.loadTexts: iPProfileEnableEarlyMedia.setDescription(' Access: Instant. AC INI-Param: IpProfile_EnableEarlyMedia')
iPProfileProgressIndicatorToIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 8, 255))).clone(namedValues=NamedValues(("noPI", 0), ("pI1", 1), ("pI8", 8), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileProgressIndicatorToIP.setStatus('current')
if mibBuilder.loadTexts: iPProfileProgressIndicatorToIP.setDescription(' Access: Instant. AC INI-Param: IpProfile_ProgressIndicator2IP')
iPProfileECE = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileECE.setStatus('current')
if mibBuilder.loadTexts: iPProfileECE.setDescription('Enables or disables the echo canceler. Access: Instant. AC INI-Param: IpProfile_EnableEchoCanceller')
iPProfileMediaSecurityBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("preferable", 0), ("mandatory", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileMediaSecurityBehavior.setStatus('current')
if mibBuilder.loadTexts: iPProfileMediaSecurityBehavior.setDescription(' Access: Instant. AC INI-Param: IpProfile_MediaSecurityBehaviour')
iPProfileCallLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 200000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileCallLimit.setStatus('current')
if mibBuilder.loadTexts: iPProfileCallLimit.setDescription(' Access: Instant. AC INI-Param: IpProfile_CallLimit')
iPProfileDisconnectOnBrokenConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileDisconnectOnBrokenConnection.setStatus('current')
if mibBuilder.loadTexts: iPProfileDisconnectOnBrokenConnection.setDescription(' Access: Instant. AC INI-Param: IpProfile_DisconnectOnBrokenConnection')
iPProfileCopyDest2RedirectNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("afterManipulation", 1), ("beforeManipulation", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileCopyDest2RedirectNumber.setStatus('current')
if mibBuilder.loadTexts: iPProfileCopyDest2RedirectNumber.setDescription(' Access: Instant. AC INI-Param: IpProfile_CopyDest2RedirectNumber')
iPProfileAddIEInSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 98))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileAddIEInSetup.setStatus('current')
if mibBuilder.loadTexts: iPProfileAddIEInSetup.setDescription(' Access: Instant. AC INI-Param: IpProfile_AddIEInSetup')
iPProfileRxDTMFOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("notDeclared", 0), ("declareRFC2833InSDP", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileRxDTMFOption.setStatus('current')
if mibBuilder.loadTexts: iPProfileRxDTMFOption.setDescription(' Access: Instant. AC INI-Param: IpProfile_RxDTMFOption')
iPProfileFirstTxDtmfOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", -1), ("notSupported", 0), ("infoNortel", 1), ("notify", 2), ("infoCisco", 3), ("rFC2833", 4), ("infoKorea", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileFirstTxDtmfOption.setStatus('current')
if mibBuilder.loadTexts: iPProfileFirstTxDtmfOption.setDescription(' Access: Instant. AC INI-Param: IpProfile_FirstTxDtmfOption')
iPProfileSecondTxDtmfOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", -1), ("notSupported", 0), ("infoNortel", 1), ("notify", 2), ("infoCisco", 3), ("rFC2833", 4), ("infoKorea", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileSecondTxDtmfOption.setStatus('current')
if mibBuilder.loadTexts: iPProfileSecondTxDtmfOption.setDescription(' Access: Instant. AC INI-Param: IpProfile_SecondTxDtmfOption')
iPProfileMediaIPVersionPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", -1), ("onlyIPv4", 0), ("onlyIPv6", 1), ("preferIPv4", 2), ("preferIPv6", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileMediaIPVersionPreference.setStatus('current')
if mibBuilder.loadTexts: iPProfileMediaIPVersionPreference.setDescription(' Access: Instant. AC INI-Param: IpProfile_MediaIPVersionPreference')
iPProfileSBCAllowedCodersGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", -1), ("codersGroup0", 0), ("codersGroup1", 1), ("codersGroup2", 2), ("codersGroup3", 3), ("codersGroup4", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileSBCAllowedCodersGroupID.setStatus('current')
if mibBuilder.loadTexts: iPProfileSBCAllowedCodersGroupID.setDescription(' Access: Instant. AC INI-Param: IpProfile_SBCAllowedCodersGroupID')
iPProfileSBCAllowedCodersMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("restriction", 0), ("preference", 1), ("restictionAndPreference", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileSBCAllowedCodersMode.setStatus('current')
if mibBuilder.loadTexts: iPProfileSBCAllowedCodersMode.setDescription(' Access: Instant. AC INI-Param: IpProfile_SBCAllowedCodersMode')
iPProfileSBCMediaSecurityBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 21, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("asIs", 0), ("srtp", 1), ("rtp", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPProfileSBCMediaSecurityBehaviour.setStatus('current')
if mibBuilder.loadTexts: iPProfileSBCMediaSecurityBehaviour.setDescription(' Access: Instant. AC INI-Param: IpProfile_SBCMediaSecurityBehaviour')
telProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22), )
if mibBuilder.loadTexts: telProfileTable.setStatus('current')
if mibBuilder.loadTexts: telProfileTable.setDescription('')
telProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1), ).setIndexNames((0, "AcGateway", "telProfileIndex"))
if mibBuilder.loadTexts: telProfileEntry.setStatus('current')
if mibBuilder.loadTexts: telProfileEntry.setDescription('')
telProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: telProfileIndex.setStatus('current')
if mibBuilder.loadTexts: telProfileIndex.setDescription('Entry number, starting at 1. AC INI-Param: TelProfile_Index')
telProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: telProfileRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
telProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProfileAction.setStatus('current')
if mibBuilder.loadTexts: telProfileAction.setDescription('Development Impending. AC INI-Param: N/A')
telProfileActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProfileActionResult.setStatus('current')
if mibBuilder.loadTexts: telProfileActionResult.setDescription('Development Impending. AC INI-Param: N/A')
telProfilePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfilePreference.setStatus('current')
if mibBuilder.loadTexts: telProfilePreference.setDescription('Preference. Access: Instant. AC INI-Param: TelProfile_TelPreference')
telProfileProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileProfileName.setStatus('current')
if mibBuilder.loadTexts: telProfileProfileName.setDescription('Profile Name. Access: Instant. AC INI-Param: TelProfile_ProfileName')
telProfileCodersGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileCodersGroupID.setStatus('current')
if mibBuilder.loadTexts: telProfileCodersGroupID.setDescription('Coders Group ID. Access: Instant. AC INI-Param: TelProfile_CodersGroupID')
telProfileFaxTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telProfileFaxTransportMode.setStatus('obsolete')
if mibBuilder.loadTexts: telProfileFaxTransportMode.setDescription('Fax Transport Mode. Access: Instant. AC INI-Param: N/A')
telProfileIsFaxUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("noFax", 0), ("t38", 1), ("g711", 2), ("fallBack", 3), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileIsFaxUsed.setStatus('current')
if mibBuilder.loadTexts: telProfileIsFaxUsed.setDescription('Use H.323/Annex D procedure for real time FAX relay. To use this feature, disable inband DTMF by setting the FaxTransportMode to 1.0 - No fax , 1- T.38 , 2- Fax Fallback (G.711 with optimization). Access: Instant. AC INI-Param: TelProfile_IsFaxUsed')
telProfileDJBufMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileDJBufMinDelay.setStatus('current')
if mibBuilder.loadTexts: telProfileDJBufMinDelay.setDescription('Dynamic Jitter Buffer Minimum Delay (msec). Access: Instant. AC INI-Param: TelProfile_JitterBufMinDelay')
telProfileDJBufOptFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileDJBufOptFactor.setStatus('current')
if mibBuilder.loadTexts: telProfileDJBufOptFactor.setDescription('Dynamic jitter buffer frame error/delay optimization. Access: Instant. AC INI-Param: TelProfile_JitterBufOptFactor')
telProfileIPDiffServ = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileIPDiffServ.setStatus('current')
if mibBuilder.loadTexts: telProfileIPDiffServ.setDescription('IP DiffServ byte value. Access: Instant. AC INI-Param: TelProfile_IPDiffServ')
telProfileSigIPDiffServ = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileSigIPDiffServ.setStatus('current')
if mibBuilder.loadTexts: telProfileSigIPDiffServ.setDescription('Type Of Service bits in IP header of signalling messages. Access: Instant. AC INI-Param: TelProfile_SigIPDiffServ')
telProfileVoiceVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileVoiceVolume.setStatus('current')
if mibBuilder.loadTexts: telProfileVoiceVolume.setDescription('Voice Volume. Access: Instant. AC INI-Param: TelProfile_VoiceVolume')
telProfileDTMFVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-31, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileDTMFVolume.setStatus('current')
if mibBuilder.loadTexts: telProfileDTMFVolume.setDescription('DTMF Volume. Access: Instant. AC INI-Param: TelProfile_DtmfVolume')
telProfileInputGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileInputGain.setStatus('current')
if mibBuilder.loadTexts: telProfileInputGain.setDescription('Input Gain. Access: Instant. AC INI-Param: TelProfile_InputGain')
telProfileEnableReversalPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileEnableReversalPolarity.setStatus('current')
if mibBuilder.loadTexts: telProfileEnableReversalPolarity.setDescription('FXO: Connect/Disconnect calls upon detection of polarity reversal signal. FXS: generate the signal. Access: Instant. AC INI-Param: TelProfile_EnableReversePolarity')
telProfileEnableCurrentDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileEnableCurrentDisconnect.setStatus('current')
if mibBuilder.loadTexts: telProfileEnableCurrentDisconnect.setDescription('Disconnect call upon detection of current disconnect signal. Access: Instant. AC INI-Param: TelProfile_EnableCurrentDisconnect')
telProfileEnableDigitDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileEnableDigitDelivery.setStatus('current')
if mibBuilder.loadTexts: telProfileEnableDigitDelivery.setDescription('Enables Digit delivery to TEL side. Access: Instant. AC INI-Param: TelProfile_EnableDigitDelivery')
telProfileECE = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileECE.setStatus('current')
if mibBuilder.loadTexts: telProfileECE.setDescription('Enables or disables the echo canceler. Access: Instant. AC INI-Param: TelProfile_EnableEC')
telProfileMWIanalogLamp = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileMWIanalogLamp.setStatus('current')
if mibBuilder.loadTexts: telProfileMWIanalogLamp.setDescription('Enable MWI support using an analog lamp (110 Volt). Access: Instant. AC INI-Param: TelProfile_MWIAnalog')
telProfileMWIDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileMWIDisplay.setStatus('current')
if mibBuilder.loadTexts: telProfileMWIDisplay.setDescription('Enable MWI support using Caller ID interface. Access: Instant. AC INI-Param: TelProfile_MWIDisplay')
telProfileMaxFlashHookDetectionPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileMaxFlashHookDetectionPeriod.setStatus('current')
if mibBuilder.loadTexts: telProfileMaxFlashHookDetectionPeriod.setDescription(' Access: Instant. AC INI-Param: TelProfile_FlashHookPeriod')
telProfileEnableEarlyMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileEnableEarlyMedia.setStatus('current')
if mibBuilder.loadTexts: telProfileEnableEarlyMedia.setDescription('Enable Early Media. Access: Instant. AC INI-Param: TelProfile_EnableEarlyMedia')
telProfileProgressIndicatorToIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 8, 255))).clone(namedValues=NamedValues(("noPI", 0), ("pI1", 1), ("pI8", 8), ("notConfigured", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileProgressIndicatorToIP.setStatus('current')
if mibBuilder.loadTexts: telProfileProgressIndicatorToIP.setDescription('Determine whether to send the Progress Indicator to IP. Access: Instant. AC INI-Param: TelProfile_ProgressIndicator2IP')
telProfileTimeForReorderTone = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileTimeForReorderTone.setStatus('current')
if mibBuilder.loadTexts: telProfileTimeForReorderTone.setDescription('Duration of reorder tone playing before FXO releases line. Access: Instant. AC INI-Param: TelProfile_TimeForReorderTone')
telProfileEnableDIDWink = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileEnableDIDWink.setStatus('current')
if mibBuilder.loadTexts: telProfileEnableDIDWink.setDescription(' Access: Instant. AC INI-Param: TelProfile_EnableDIDWink')
telProfileIsTwoStageDial = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileIsTwoStageDial.setStatus('current')
if mibBuilder.loadTexts: telProfileIsTwoStageDial.setDescription(' Access: Instant. AC INI-Param: TelProfile_IsTwoStageDial')
telProfileDisconnectOnBusyTone = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileDisconnectOnBusyTone.setStatus('current')
if mibBuilder.loadTexts: telProfileDisconnectOnBusyTone.setDescription(' Access: Instant. AC INI-Param: TelProfile_DisconnectOnBusyTone')
telProfileEnableVoiceMailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileEnableVoiceMailDelay.setStatus('current')
if mibBuilder.loadTexts: telProfileEnableVoiceMailDelay.setDescription(' Access: Instant. AC INI-Param: TelProfile_EnableVoiceMailDelay')
telProfileDialPlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileDialPlanIndex.setStatus('current')
if mibBuilder.loadTexts: telProfileDialPlanIndex.setDescription('Defines the plan index to be used from the external Dial Plan file. Access: Instant. AC INI-Param: TelProfile_DialPlanIndex')
telProfileEnable911PSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileEnable911PSAP.setStatus('current')
if mibBuilder.loadTexts: telProfileEnable911PSAP.setDescription('GwApp Tel Profile Table. Access: Instant. AC INI-Param: TelProfile_Enable911PSAP')
telProfileSwapTelToIpPhoneNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileSwapTelToIpPhoneNumbers.setStatus('current')
if mibBuilder.loadTexts: telProfileSwapTelToIpPhoneNumbers.setDescription('GwApp Tel Profile Table. Access: Instant. AC INI-Param: TelProfile_SwapTelToIpPhoneNumbers')
telProfileEnableAGC = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileEnableAGC.setStatus('current')
if mibBuilder.loadTexts: telProfileEnableAGC.setDescription(' Access: Instant. AC INI-Param: TelProfile_EnableAGC')
telProfileECNlpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 15, 22, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("adaptiveNLP", 0), ("disabledNLP", 1), ("silenceOutputNLP", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telProfileECNlpMode.setStatus('current')
if mibBuilder.loadTexts: telProfileECNlpMode.setDescription(' Access: Instant. AC INI-Param: TelProfile_ECNlpMode')
voiceMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16))
voiceMailLineTransferMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ip", 0), ("pbxblindtransfer", 1), ("pbxsemisupervised", 2), ("pbxsupervisedtransfer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceMailLineTransferMode.setStatus('current')
if mibBuilder.loadTexts: voiceMailLineTransferMode.setDescription('LineTransferMode: 0-ip 1-pbx blind transfer 2-pbx semi supv transfer 3-supervised transfer (also known as warm transfer). (in TP, feature key and parameter EnableIPMDetectors needed). Access: Instant. AC INI-Param: LineTransferMode')
voiceMailInterface = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("dtmf", 1), ("smdi", 2), ("qsig", 3), ("isdnsetup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceMailInterface.setStatus('current')
if mibBuilder.loadTexts: voiceMailInterface.setDescription('Selects the method of communication between PBX and the Gateway, that is used instead of legacy voicemail. Access: Instant. AC INI-Param: VoiceMailInterface')
digitalGWext = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17))
digitalGWextEnableQSIGTunneling = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWextEnableQSIGTunneling.setStatus('current')
if mibBuilder.loadTexts: digitalGWextEnableQSIGTunneling.setDescription('Enables QSIG Tunneling over SIP. Access: Instant. AC INI-Param: ENABLEQSIGTUNNELING')
digitalGWextRemoveCLIWhenRestricted = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWextRemoveCLIWhenRestricted.setStatus('current')
if mibBuilder.loadTexts: digitalGWextRemoveCLIWhenRestricted.setDescription('Removes CLI from IP->TEL calls if received CLI is restricted. Access: Instant. AC INI-Param: REMOVECLIWHENRESTRICTED')
digitalGWextDefaultCauseMapISDN2IP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWextDefaultCauseMapISDN2IP.setStatus('current')
if mibBuilder.loadTexts: digitalGWextDefaultCauseMapISDN2IP.setDescription('All ISDN release causes except normal, busy, no user responding, and no answer will be mapped to this cause, if set. Access: Instant. AC INI-Param: DEFAULTCAUSEMAPISDN2IP')
digitalGWextISDNSubaddressFormat = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ascii", 0), ("bcd", 1), ("userSpecified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWextISDNSubaddressFormat.setStatus('current')
if mibBuilder.loadTexts: digitalGWextISDNSubaddressFormat.setDescription('ISDN SubAdress format. Access: Instant. AC INI-Param: ISDNSUBADDRESSFORMAT')
digitalGWextEnableAoC = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWextEnableAoC.setStatus('current')
if mibBuilder.loadTexts: digitalGWextEnableAoC.setDescription('Enable AoC-D and AoC-E from ISDN to SIP. Access: Instant. AC INI-Param: ENABLEAOC')
digitalGWextRemoveCallingName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWextRemoveCallingName.setStatus('current')
if mibBuilder.loadTexts: digitalGWextRemoveCallingName.setDescription('If set to 1 - Removes Calling Name from IP->TEL calls. Access: Instant. AC INI-Param: REMOVECALLINGNAME')
digitalGWextCopyDest2RedirectNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("afterManipulation", 1), ("beforeManipulation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWextCopyDest2RedirectNumber.setStatus('current')
if mibBuilder.loadTexts: digitalGWextCopyDest2RedirectNumber.setDescription('0 - Redirect N not affected,1- Called N after manipulation from TEL2IP call will also be used as Redirect N,2 - the Called N before manipulation - as Redirect N. Access: Instant. AC INI-Param: COPYDEST2REDIRECTNUMBER')
digitalGWextTDMOverIPMinCallsForTrunkActivation = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalGWextTDMOverIPMinCallsForTrunkActivation.setStatus('current')
if mibBuilder.loadTexts: digitalGWextTDMOverIPMinCallsForTrunkActivation.setDescription('Minimum connected calls for trunk activation while in TDMOverIPMode if 0 - trunk is always active. Access: Instant. AC INI-Param: TDMOVERIPMINCALLSFORTRUNKACTIVATION')
rtpOnlyModeForTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 21), )
if mibBuilder.loadTexts: rtpOnlyModeForTrunkTable.setStatus('current')
if mibBuilder.loadTexts: rtpOnlyModeForTrunkTable.setDescription('')
rtpOnlyModeForTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 21, 1), ).setIndexNames((0, "AcGateway", "rtpOnlyModeForTrunkIndex"))
if mibBuilder.loadTexts: rtpOnlyModeForTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: rtpOnlyModeForTrunkEntry.setDescription('')
rtpOnlyModeForTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: rtpOnlyModeForTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: rtpOnlyModeForTrunkIndex.setDescription('Trunk number. AC INI-Param: N/A')
rtpOnlyModeForTrunkRtpOnlyModeForTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("transmitReceive", 1), ("transmitOnly", 2), ("receiveOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtpOnlyModeForTrunkRtpOnlyModeForTrunk.setStatus('current')
if mibBuilder.loadTexts: rtpOnlyModeForTrunkRtpOnlyModeForTrunk.setDescription('immediately. -1 - takes the RTPONLYMODE global value per gatewa 0 - regular call establishment. 1 - The RTP channel open for Rx & Tx. 2-The RTP channel open only for Tx 3 -The RTP channel open only fo Rx. Access: Instant. AC INI-Param: RTPONLYMODEFORTRUNK')
acBChannelNegotiationForTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 22), )
if mibBuilder.loadTexts: acBChannelNegotiationForTrunkTable.setStatus('current')
if mibBuilder.loadTexts: acBChannelNegotiationForTrunkTable.setDescription('B-Channel Negotiation for Trunk table.')
acBChannelNegotiationForTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 22, 1), ).setIndexNames((0, "AcGateway", "acBChannelNegotiationForTrunkIndex"))
if mibBuilder.loadTexts: acBChannelNegotiationForTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: acBChannelNegotiationForTrunkEntry.setDescription('')
acBChannelNegotiationForTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acBChannelNegotiationForTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: acBChannelNegotiationForTrunkIndex.setDescription('Trunk number starting at 0. AC INI-Param: N/A')
acBChannelNegotiationForTrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("preferred", 0), ("exclusive", 1), ("any", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acBChannelNegotiationForTrunkMode.setStatus('current')
if mibBuilder.loadTexts: acBChannelNegotiationForTrunkMode.setDescription('ISDN B-Channel negotiation mode for trunk put MODE_NOT_SET (-1) to use BCHANNELNEGOTIATION per Gateway. Access: Instant. AC INI-Param: BCHANNELNEGOTIATIONFORTRUNK')
acDigitalOOSBehaviorForTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 23), )
if mibBuilder.loadTexts: acDigitalOOSBehaviorForTrunkTable.setStatus('current')
if mibBuilder.loadTexts: acDigitalOOSBehaviorForTrunkTable.setDescription('Digital OOS Behavior for Trunk table.')
acDigitalOOSBehaviorForTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 23, 1), ).setIndexNames((0, "AcGateway", "acDigitalOOSBehaviorForTrunkIndex"))
if mibBuilder.loadTexts: acDigitalOOSBehaviorForTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: acDigitalOOSBehaviorForTrunkEntry.setDescription('')
acDigitalOOSBehaviorForTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acDigitalOOSBehaviorForTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: acDigitalOOSBehaviorForTrunkIndex.setDescription('Trunk number starting at 0. AC INI-Param: N/A')
acDigitalOOSBehaviorForTrunkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", -1), ("default", 0), ("service", 1), ("dChannel", 2), ("alarm", 3), ("block", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDigitalOOSBehaviorForTrunkValue.setStatus('current')
if mibBuilder.loadTexts: acDigitalOOSBehaviorForTrunkValue.setDescription('Digital OOS Behavior for trunk put OOS_NOT_SET (-1) to use DIGITALOOSBEHAVIOR per Gateway. Access: Instant. AC INI-Param: DIGITALOOSBEHAVIORFORTRUNK')
acRemoveCallingNameForTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 24), )
if mibBuilder.loadTexts: acRemoveCallingNameForTrunkTable.setStatus('current')
if mibBuilder.loadTexts: acRemoveCallingNameForTrunkTable.setDescription('Remove Calling Name For Trunk table.')
acRemoveCallingNameForTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 24, 1), ).setIndexNames((0, "AcGateway", "acRemoveCallingNameForTrunkIndex"))
if mibBuilder.loadTexts: acRemoveCallingNameForTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: acRemoveCallingNameForTrunkEntry.setDescription('')
acRemoveCallingNameForTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acRemoveCallingNameForTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: acRemoveCallingNameForTrunkIndex.setDescription('Trunk number starting at 0. AC INI-Param: N/A')
acRemoveCallingNameForTrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 17, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notConfigured", -1), ("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acRemoveCallingNameForTrunkMode.setStatus('current')
if mibBuilder.loadTexts: acRemoveCallingNameForTrunkMode.setDescription('Remove Calling Name For Trunk table .Set (-1) to use the global parameter digitalGWextRemoveCallingName. Access: Instant. AC INI-Param: RemoveCallingNameForTrunk')
gwSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 18))
gwSecurityMediaSecurityBehavior = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("mandatory", 1), ("preferable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwSecurityMediaSecurityBehavior.setStatus('current')
if mibBuilder.loadTexts: gwSecurityMediaSecurityBehavior.setDescription('Gateway behavior when recieving offer/response for media encryption. Access: Instant. AC INI-Param: MEDIASECURITYBEHAVIOUR')
gwSecuritySIPSRequireClientCertificate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwSecuritySIPSRequireClientCertificate.setStatus('current')
if mibBuilder.loadTexts: gwSecuritySIPSRequireClientCertificate.setDescription('Should require client certificate upon TLS connection request arrival. Access: Offline. AC INI-Param: SIPSREQUIRECLIENTCERTIFICATE')
gwSecurityTLSReHandshakeInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 18, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwSecurityTLSReHandshakeInterval.setStatus('current')
if mibBuilder.loadTexts: gwSecurityTLSReHandshakeInterval.setDescription('The interval between consequent TLS re-handshakes (Minutes). 0 - Disables re-handshakes. Access: Instant. AC INI-Param: TLSREHANDSHAKEINTERVAL')
gwSecurityPeerHostNameVerificationMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("serverOnly", 1), ("serverAndClient", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwSecurityPeerHostNameVerificationMode.setStatus('current')
if mibBuilder.loadTexts: gwSecurityPeerHostNameVerificationMode.setDescription('While using TLS, defines the verification behavior of the host name sent in the certificate. Access: Instant. AC INI-Param: PEERHOSTNAMEVERIFICATIONMODE')
gwSecurityVerifyServerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwSecurityVerifyServerCertificate.setStatus('current')
if mibBuilder.loadTexts: gwSecurityVerifyServerCertificate.setDescription('Certificate validation behavior 0 No certificate validation. 1 Server certificate validation. Access: Instant. AC INI-Param: VERIFYSERVERCERTIFICATE')
gwSecurityTLSRemoteSubjectName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 18, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwSecurityTLSRemoteSubjectName.setStatus('current')
if mibBuilder.loadTexts: gwSecurityTLSRemoteSubjectName.setDescription('used to verify the remote peer Common Name (at certificate) when using TLS. Access: Instant. AC INI-Param: TLSREMOTESUBJECTNAME')
gwSecuritySRTPofferedSuites = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 18, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("aesCm128HmacShaOne80", 1), ("aesCm128HmacShaOne32", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwSecuritySRTPofferedSuites.setStatus('current')
if mibBuilder.loadTexts: gwSecuritySRTPofferedSuites.setDescription('Offered SRTP Cipher Suites. Access: Instant. AC INI-Param: SRTPOFFEREDSUITES')
acGWRtcpXr = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 19))
acGWRtcpXrEscIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 19, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acGWRtcpXrEscIP.setStatus('current')
if mibBuilder.loadTexts: acGWRtcpXrEscIP.setDescription('RTCP-XR server IP address. Access: Instant. AC INI-Param: RtcpXrEscIP')
acGWRtcpXrReportMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("endCall", 1), ("endCallPeriodic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acGWRtcpXrReportMode.setStatus('current')
if mibBuilder.loadTexts: acGWRtcpXrReportMode.setDescription('0:rtcpxr is not sent over SIP at all 1:rtcpxr is sent over sip when call ended 2:rtcpxr is sent over sip when on periodic interval and when call ended . Access: Instant. AC INI-Param: RtcpXrReportMode')
acGWRtcpXrEscTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("uDP", 0), ("tCP", 1), ("tLS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acGWRtcpXrEscTransportType.setStatus('current')
if mibBuilder.loadTexts: acGWRtcpXrEscTransportType.setDescription('RtcpXrEsc transport type. Access: Instant. AC INI-Param: RTCPXRESCTRANSPORTTYPE')
acTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 20))
acTimersIPAlertTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 20, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTimersIPAlertTimeout.setStatus('current')
if mibBuilder.loadTexts: acTimersIPAlertTimeout.setDescription('Maximal time to wait for connect from IP (seconds). Access: Instant. AC INI-Param: IPALERTTIMEOUT')
acTimersPSTNAlertTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 20, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTimersPSTNAlertTimeout.setStatus('current')
if mibBuilder.loadTexts: acTimersPSTNAlertTimeout.setDescription('Max time (in seconds) to wait for connect from PSTN. Access: Instant. AC INI-Param: PSTNALERTTIMEOUT')
acEmergency = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 21))
acEmergencyRegretTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 21, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEmergencyRegretTimeout.setStatus('current')
if mibBuilder.loadTexts: acEmergencyRegretTimeout.setDescription('[min] Regret time for call that is marked as Emergency. Access: Instant. AC INI-Param: EmergencyRegretTimeout')
acEmergencyNumbersTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 21, 21), )
if mibBuilder.loadTexts: acEmergencyNumbersTable.setStatus('current')
if mibBuilder.loadTexts: acEmergencyNumbersTable.setDescription('Emergency numbers table.')
acEmergencyNumbersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 21, 21, 1), ).setIndexNames((0, "AcGateway", "acEmergencyNumbersIndex"))
if mibBuilder.loadTexts: acEmergencyNumbersEntry.setStatus('current')
if mibBuilder.loadTexts: acEmergencyNumbersEntry.setDescription('')
acEmergencyNumbersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 21, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: acEmergencyNumbersIndex.setStatus('current')
if mibBuilder.loadTexts: acEmergencyNumbersIndex.setDescription('Emergency numbers, starting at 0. AC INI-Param: N/A')
acEmergencyNumbersNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 21, 21, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEmergencyNumbersNumbers.setStatus('current')
if mibBuilder.loadTexts: acEmergencyNumbersNumbers.setDescription('Emergency numbers. Access: Instant. AC INI-Param: EmergencyNumbers')
vmDigitPattern = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20))
vmDigitPatternNoReason = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternNoReason.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternNoReason.setDescription('Digit pattern used to indicate Call Forward with no reason (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternForwardNoReason')
vmDigitPatternOnBusy = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternOnBusy.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternOnBusy.setDescription('Digit pattern used to indicate Call Forward on busy (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternForwardOnBusy')
vmDigitPatternOnNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternOnNoAnswer.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternOnNoAnswer.setDescription('Digit pattern used to indicate Call Forward on no answer (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternForwardOnNoAnswer')
vmDigitPatternOnDND = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternOnDND.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternOnDND.setDescription('Digit pattern used to indicate Call Forward on Do Not Disturb (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternForwardOnDND')
vmDigitPatternInternalCall = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternInternalCall.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternInternalCall.setDescription('Digit pattern used to indicate internal call (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternInternalCall')
vmDigitPatternExternalCall = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternExternalCall.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternExternalCall.setDescription('Digit pattern used to indicate external call (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternExternalCall')
vmDigitPatternDisconnectCode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternDisconnectCode.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternDisconnectCode.setDescription('Disconnect call if digit string is received from the TEL side during session. Access: Instant. AC INI-Param: TelDisconnectCode')
vmDigitPatternConnectCode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternConnectCode.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternConnectCode.setDescription('Play Code string to Tel side when connect message recieved from IP side. Access: Instant. AC INI-Param: TELCONNECTCODE')
vmDigitPatternVmDigitPatternOnBusyExternal = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternVmDigitPatternOnBusyExternal.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternVmDigitPatternOnBusyExternal.setDescription('Digit pattern used to indicate Call Forward on busy (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternForwardOnBusyExt')
vmDigitPatternVmDigitPatternOnNoAnswerExternal = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternVmDigitPatternOnNoAnswerExternal.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternVmDigitPatternOnNoAnswerExternal.setDescription('Digit pattern used to indicate Call Forward on no answer (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternForwardOnNoAnswerExt')
vmDigitPatternVmDigitPatternOnDNDExternal = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternVmDigitPatternOnDNDExternal.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternVmDigitPatternOnDNDExternal.setDescription('Digit pattern used to indicate Call Forward on Do Not Disturb (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternForwardOnDNDExt')
vmDigitPatternVmDigitPatternNoReasonExternal = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternVmDigitPatternNoReasonExternal.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternVmDigitPatternNoReasonExternal.setDescription('Digit pattern used to indicate Call Forward with no reason (PBX to VoiceMail). Access: Instant. AC INI-Param: DigitPatternForwardNoReasonExt')
vmDigitPatternDigitToIgnore = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 20, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmDigitPatternDigitToIgnore.setStatus('current')
if mibBuilder.loadTexts: vmDigitPatternDigitToIgnore.setDescription('A digit (0-9,A-D,* or #) that if received as Src (S) or Redirect (R), the digit is ignored and not added to that number. Used in DTMF VoiceMail. Access: Instant. AC INI-Param: DigitPatternDigitToIgnore')
vmMWI = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 21))
vmMWIOnCode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 21, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmMWIOnCode.setStatus('current')
if mibBuilder.loadTexts: vmMWIOnCode.setDescription('Digit pattern used to notify PBX about messages waiting for extension (added as prefix). Access: Instant. AC INI-Param: MWIOnCode')
vmMWIOffCode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 21, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmMWIOffCode.setStatus('current')
if mibBuilder.loadTexts: vmMWIOffCode.setDescription('Digit pattern used to notify PBX about no messages waiting for extension (added as prefix). Access: Instant. AC INI-Param: MWIOffCode')
vmMWISuffixCode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 21, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmMWISuffixCode.setStatus('current')
if mibBuilder.loadTexts: vmMWISuffixCode.setDescription('MWI suffix code used to notify PBX about messages waiting for extension (added as suffix to the extention number). Access: Instant. AC INI-Param: MWISuffixCode')
vmMWISourceNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 21, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmMWISourceNumber.setStatus('current')
if mibBuilder.loadTexts: vmMWISourceNumber.setDescription('The phone number sent as source number toward PSTN for MWI setup. Access: Instant. AC INI-Param: MWISOURCENUMBER')
vmSMDI = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 22))
vmSMDIEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmSMDIEnable.setStatus('current')
if mibBuilder.loadTexts: vmSMDIEnable.setDescription('Enables the Simplified Message Desk Interface (SMDI). SMDI defines a method whereby telephony systems can provide voice-messaging systems with data required by those telephony systems to process incoming calls intelligently. Whenever the phone system routes a call, it sends an SMDI message through an EIA/TIA-232 connection to the voice-messaging system that tells it the line that it is using, the type of call that it is forwarding, and information about the source and destination of the call. 0 = Normal Serial 1 = Serial SMDI. Access: Offline. AC INI-Param: SMDI')
vmSMDITimeOut = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 16, 22, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmSMDITimeOut.setStatus('current')
if mibBuilder.loadTexts: vmSMDITimeOut.setDescription('Time out <mSec> for: 1. From SMDI Info until SETUP 2. From SETUP until SMDI event. Access: Instant. AC INI-Param: SMDITimeOut')
accounts = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22))
accountTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21), )
if mibBuilder.loadTexts: accountTable.setStatus('current')
if mibBuilder.loadTexts: accountTable.setDescription('GwApp Accounts table')
accountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1), ).setIndexNames((0, "AcGateway", "accountIndex"))
if mibBuilder.loadTexts: accountEntry.setStatus('current')
if mibBuilder.loadTexts: accountEntry.setDescription('table')
accountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accountIndex.setStatus('current')
if mibBuilder.loadTexts: accountIndex.setDescription('. AC INI-Param: Account_Index')
accountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountRowStatus.setStatus('current')
if mibBuilder.loadTexts: accountRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
accountAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accountAction.setStatus('current')
if mibBuilder.loadTexts: accountAction.setDescription('Development Impending. AC INI-Param: N/A')
accountActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accountActionResult.setStatus('current')
if mibBuilder.loadTexts: accountActionResult.setDescription('Development Impending. AC INI-Param: N/A')
accountServedTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountServedTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: accountServedTrunkGroup.setDescription('GwApp Accounts table. Access: Instant. AC INI-Param: Account_ServedTrunkGroup')
accountServedIPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountServedIPGroup.setStatus('current')
if mibBuilder.loadTexts: accountServedIPGroup.setDescription('GwApp Accounts table. Access: Instant. AC INI-Param: Account_ServedIPGroup')
accountServingIPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountServingIPGroup.setStatus('current')
if mibBuilder.loadTexts: accountServingIPGroup.setDescription('GwApp Accounts table. Access: Instant. AC INI-Param: Account_ServingIPGroup')
accountUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountUsername.setStatus('current')
if mibBuilder.loadTexts: accountUsername.setDescription('GwApp Accounts table. Access: Instant. AC INI-Param: Account_Username')
accountPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountPassword.setStatus('current')
if mibBuilder.loadTexts: accountPassword.setDescription('GwApp Accounts table. Access: Instant. AC INI-Param: Account_Password')
accountHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountHostName.setStatus('current')
if mibBuilder.loadTexts: accountHostName.setDescription('GwApp Accounts table. Access: Instant. AC INI-Param: Account_HostName')
accountRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountRegister.setStatus('current')
if mibBuilder.loadTexts: accountRegister.setDescription('GwApp Accounts table. Access: Instant. AC INI-Param: Account_Register')
accountContactUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 22, 21, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accountContactUser.setStatus('current')
if mibBuilder.loadTexts: accountContactUser.setDescription('GwApp Accounts table. Access: Instant. AC INI-Param: Account_ContactUser')
ipGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23))
ipGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21), )
if mibBuilder.loadTexts: ipGroupTable.setStatus('current')
if mibBuilder.loadTexts: ipGroupTable.setDescription('GwApp IP Group Table')
ipGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1), ).setIndexNames((0, "AcGateway", "ipGroupIndex"))
if mibBuilder.loadTexts: ipGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ipGroupEntry.setDescription('table')
ipGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGroupIndex.setStatus('current')
if mibBuilder.loadTexts: ipGroupIndex.setDescription('. AC INI-Param: IPGroup_Index')
ipGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipGroupRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
ipGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGroupAction.setStatus('current')
if mibBuilder.loadTexts: ipGroupAction.setDescription('Development Impending. AC INI-Param: N/A')
ipGroupActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGroupActionResult.setStatus('current')
if mibBuilder.loadTexts: ipGroupActionResult.setDescription('Development Impending. AC INI-Param: N/A')
ipGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("server", 0), ("user", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupType.setStatus('current')
if mibBuilder.loadTexts: ipGroupType.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_Type')
ipGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupDescription.setStatus('current')
if mibBuilder.loadTexts: ipGroupDescription.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_Description')
ipGroupProxySetId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupProxySetId.setStatus('current')
if mibBuilder.loadTexts: ipGroupProxySetId.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_ProxySetId')
ipGroupSIPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupSIPGroupName.setStatus('current')
if mibBuilder.loadTexts: ipGroupSIPGroupName.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_SIPGroupName')
ipGroupContactUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupContactUser.setStatus('current')
if mibBuilder.loadTexts: ipGroupContactUser.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_ContactUser')
ipGroupEnableSurvivability = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableIfNecessary", 1), ("alwaysEnable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupEnableSurvivability.setStatus('current')
if mibBuilder.loadTexts: ipGroupEnableSurvivability.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_EnableSurvivability')
ipGroupServingIPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupServingIPGroup.setStatus('current')
if mibBuilder.loadTexts: ipGroupServingIPGroup.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_ServingIPGroup')
ipGroupSipReRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("standard", 0), ("proxy", 1), ("routingTable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupSipReRoutingMode.setStatus('current')
if mibBuilder.loadTexts: ipGroupSipReRoutingMode.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_SipReRoutingMode')
ipGroupAlwaysUseRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupAlwaysUseRouteTable.setStatus('current')
if mibBuilder.loadTexts: ipGroupAlwaysUseRouteTable.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_AlwaysUseRouteTable')
ipGroupRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("useRoutingTable", 0), ("sendToServingIPGroup", 1), ("routeToRequestURI", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupRoutingMode.setStatus('current')
if mibBuilder.loadTexts: ipGroupRoutingMode.setDescription('GwApp IP Group Table. Access: Instant. AC INI-Param: IPGroup_RoutingMode')
ipGroupProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupProfileId.setStatus('current')
if mibBuilder.loadTexts: ipGroupProfileId.setDescription(' Access: Instant. AC INI-Param: IPGroup_ProfileId')
ipGroupMediaRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupMediaRealm.setStatus('current')
if mibBuilder.loadTexts: ipGroupMediaRealm.setDescription(' Access: Instant. AC INI-Param: IPGroup_MediaRealm')
ipGroupMaxNumOfRegUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 23, 21, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipGroupMaxNumOfRegUsers.setStatus('current')
if mibBuilder.loadTexts: ipGroupMaxNumOfRegUsers.setDescription('Max Number Of Registered Users. MP1xx - 25 M1K - 200 M2K- 250 M3K - 3000. Access: Offline. AC INI-Param: IPGroup_MaxNumOfRegUsers')
sbc = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24))
sbcEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcEnable.setStatus('deprecated')
if mibBuilder.loadTexts: sbcEnable.setDescription('Enables SBC functionality. Access: Instant. AC INI-Param: ENABLESBC')
sbcRegistrationTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcRegistrationTime.setStatus('current')
if mibBuilder.loadTexts: sbcRegistrationTime.setDescription('Expires value SBC responds to user with. Used when server is offline or when the user is behind NAT. Otherwise expires is defined by the server. Access: Instant. AC INI-Param: SBCREGISTRATIONTIME')
sbcEnableISBCApplication = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcEnableISBCApplication.setStatus('current')
if mibBuilder.loadTexts: sbcEnableISBCApplication.setDescription('Enables SBC functionality. Access: Offline. AC INI-Param: ENABLESBCAPPLICATION')
sbcEnableIIP2IPApplication = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbcEnableIIP2IPApplication.setStatus('current')
if mibBuilder.loadTexts: sbcEnableIIP2IPApplication.setDescription('Enables IP2IP functionality. Access: Offline. AC INI-Param: ENABLEIP2IPAPPLICATION')
sbcClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21), )
if mibBuilder.loadTexts: sbcClassificationTable.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationTable.setDescription('GwApp Classification Table')
sbcClassificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1), ).setIndexNames((0, "AcGateway", "sbcClassificationIndex"))
if mibBuilder.loadTexts: sbcClassificationEntry.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationEntry.setDescription('')
sbcClassificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcClassificationIndex.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationIndex.setDescription('. AC INI-Param: Classification_Index')
sbcClassificationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcClassificationRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sbcClassificationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcClassificationAction.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationAction.setDescription('Development Impending. AC INI-Param: N/A')
sbcClassificationActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcClassificationActionResult.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sbcClassificationSrcIPGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcClassificationSrcIPGroupId.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationSrcIPGroupId.setDescription('Source IP group ID. Access: Instant. AC INI-Param: Classification_SrcIPGroupID')
sbcClassificationSrcSRDId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcClassificationSrcSRDId.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationSrcSRDId.setDescription('Source SRD ID. Access: Instant. AC INI-Param: Classification_SrcSRDID')
sbcClassificationSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcClassificationSrcAddress.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationSrcAddress.setDescription('Source address. Access: Instant. AC INI-Param: Classification_SrcAddress')
sbcClassificationSrcUsernamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcClassificationSrcUsernamePrefix.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationSrcUsernamePrefix.setDescription('Source username prefix. Access: Instant. AC INI-Param: Classification_SrcUsernamePrefix')
sbcClassificationSrcHost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcClassificationSrcHost.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationSrcHost.setDescription('Source host. Access: Instant. AC INI-Param: Classification_SrcHost')
sbcClassificationDestUsernamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcClassificationDestUsernamePrefix.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationDestUsernamePrefix.setDescription('Destination username prefix. Access: Instant. AC INI-Param: Classification_DestUsernamePrefix')
sbcClassificationDestHost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 21, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcClassificationDestHost.setStatus('current')
if mibBuilder.loadTexts: sbcClassificationDestHost.setDescription('Destination host. Access: Instant. AC INI-Param: Classification_DestHost')
sbcRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22), )
if mibBuilder.loadTexts: sbcRoutingTable.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingTable.setDescription('GwApp SBC Routing Table')
sbcRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1), ).setIndexNames((0, "AcGateway", "sbcRoutingIndex"))
if mibBuilder.loadTexts: sbcRoutingEntry.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingEntry.setDescription('')
sbcRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 119))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcRoutingIndex.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingIndex.setDescription('. AC INI-Param: IP2IPRouting_Index')
sbcRoutingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sbcRoutingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcRoutingAction.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingAction.setDescription('Development Impending. AC INI-Param: N/A')
sbcRoutingActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcRoutingActionResult.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sbcRoutingSrcIPGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingSrcIPGroupId.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingSrcIPGroupId.setDescription('Source IP group ID. Access: Instant. AC INI-Param: IP2IPRouting_SrcIPGroupID')
sbcRoutingSrcUsernamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingSrcUsernamePrefix.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingSrcUsernamePrefix.setDescription('Source username prefix. Access: Instant. AC INI-Param: IP2IPRouting_SrcUsernamePrefix')
sbcRoutingSrcHost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingSrcHost.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingSrcHost.setDescription('Source host. Access: Instant. AC INI-Param: IP2IPRouting_SrcHost')
sbcRoutingDestUsernamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingDestUsernamePrefix.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingDestUsernamePrefix.setDescription('Destination username prefix. Access: Instant. AC INI-Param: IP2IPRouting_DestUsernamePrefix')
sbcRoutingDestHost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingDestHost.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingDestHost.setDescription('Destination host. Access: Instant. AC INI-Param: IP2IPRouting_DestHost')
sbcRoutingDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ipGroup", 0), ("dest", 1), ("requestURI", 2), ("enumTranslate", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingDestType.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingDestType.setDescription('Destination type. Access: Instant. AC INI-Param: IP2IPRouting_DestType')
sbcRoutingDestIPGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingDestIPGroupId.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingDestIPGroupId.setDescription('Destination IP group ID. Access: Instant. AC INI-Param: IP2IPRouting_DestIPGroupID')
sbcRoutingDestSRDId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingDestSRDId.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingDestSRDId.setDescription('Destination SRD ID. Access: Instant. AC INI-Param: IP2IPRouting_DestSRDID')
sbcRoutingDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingDestAddress.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingDestAddress.setDescription('Destination Address. Access: Instant. AC INI-Param: IP2IPRouting_DestAddress')
sbcRoutingDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingDestPort.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingDestPort.setDescription('Destination Port number. Access: Instant. AC INI-Param: IP2IPRouting_DestPort')
sbcRoutingDestTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("udp", 0), ("tcp", 1), ("tls", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingDestTransportType.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingDestTransportType.setDescription('Destination transport type. Access: Instant. AC INI-Param: IP2IPRouting_DestTransportType')
sbcRoutingAltRouteOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("routeRow", 0), ("ignoreInputs", 1), ("considerInputs", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingAltRouteOptions.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingAltRouteOptions.setDescription('Alternative Route Options. Access: Instant. AC INI-Param: IP2IPRouting_AltRouteOptions')
sbcRoutingRequestType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 22, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 0), ("invite", 1), ("register", 2), ("subscribe", 3), ("inviteAndRegister", 4), ("inviteAndSubscribe", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcRoutingRequestType.setStatus('current')
if mibBuilder.loadTexts: sbcRoutingRequestType.setDescription('Request Type. Access: Instant. AC INI-Param: IP2IPRouting_RequestType')
sbcIP2IPInboundManipulationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23), )
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationTable.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationTable.setDescription('GwApp IP Inbound Manipulation Table ')
sbcIP2IPInboundManipulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1), ).setIndexNames((0, "AcGateway", "sbcIP2IPInboundManipulationIndex"))
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationEntry.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationEntry.setDescription('')
sbcIP2IPInboundManipulationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationIndex.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationIndex.setDescription('. AC INI-Param: IPInboundManipulation_Index')
sbcIP2IPInboundManipulationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sbcIP2IPInboundManipulationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationAction.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationAction.setDescription('Development Impending. AC INI-Param: N/A')
sbcIP2IPInboundManipulationActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationActionResult.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sbcIP2IPInboundManipulationIsAdditionalManipulation = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationIsAdditionalManipulation.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationIsAdditionalManipulation.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_IsAdditionalManipulation')
sbcIP2IPInboundManipulationManipulatedURI = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationManipulatedURI.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationManipulatedURI.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_ManipulatedURI')
sbcIP2IPInboundManipulationSrcIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationSrcIPGroupID.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationSrcIPGroupID.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_SrcIPGroupID')
sbcIP2IPInboundManipulationSrcUsernamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationSrcUsernamePrefix.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationSrcUsernamePrefix.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_SrcUsernamePrefix')
sbcIP2IPInboundManipulationSrcHost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationSrcHost.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationSrcHost.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_SrcHost')
sbcIP2IPInboundManipulationDestUsernamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationDestUsernamePrefix.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationDestUsernamePrefix.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_DestUsernamePrefix')
sbcIP2IPInboundManipulationDestHost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationDestHost.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationDestHost.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_DestHost')
sbcIP2IPInboundManipulationRemoveFromLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationRemoveFromLeft.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationRemoveFromLeft.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_RemoveFromLeft')
sbcIP2IPInboundManipulationRemoveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationRemoveFromRight.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationRemoveFromRight.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_RemoveFromRight')
sbcIP2IPInboundManipulationLeaveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationLeaveFromRight.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationLeaveFromRight.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_LeaveFromRight')
sbcIP2IPInboundManipulationPrefix2Add = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationPrefix2Add.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationPrefix2Add.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_Prefix2Add')
sbcIP2IPInboundManipulationSuffix2Add = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationSuffix2Add.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationSuffix2Add.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_Suffix2Add')
sbcIP2IPInboundManipulationRequestType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 23, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 0), ("invite", 1), ("register", 2), ("subscribe", 3), ("inviteAndRegister", 4), ("inviteAndSubscribe", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationRequestType.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPInboundManipulationRequestType.setDescription(' Access: Instant. AC INI-Param: IPInboundManipulation_RequestType')
sbcIP2IPOutboundManipulationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24), )
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationTable.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationTable.setDescription('GwApp IP Outbound Manipulation Table')
sbcIP2IPOutboundManipulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1), ).setIndexNames((0, "AcGateway", "sbcIP2IPOutboundManipulationIndex"))
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationEntry.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationEntry.setDescription('')
sbcIP2IPOutboundManipulationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationIndex.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationIndex.setDescription('. AC INI-Param: IPOutboundManipulation_Index')
sbcIP2IPOutboundManipulationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sbcIP2IPOutboundManipulationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationAction.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationAction.setDescription('Development Impending. AC INI-Param: N/A')
sbcIP2IPOutboundManipulationActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationActionResult.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sbcIP2IPOutboundManipulationIsAdditionalManipulation = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationIsAdditionalManipulation.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationIsAdditionalManipulation.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_IsAdditionalManipulation')
sbcIP2IPOutboundManipulationManipulatedURI = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationManipulatedURI.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationManipulatedURI.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_ManipulatedURI')
sbcIP2IPOutboundManipulationSrcIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationSrcIPGroupID.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationSrcIPGroupID.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_SrcIPGroupID')
sbcIP2IPOutboundManipulationDestIPGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationDestIPGroupID.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationDestIPGroupID.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_DestIPGroupID')
sbcIP2IPOutboundManipulationSrcUsernamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationSrcUsernamePrefix.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationSrcUsernamePrefix.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_SrcUsernamePrefix')
sbcIP2IPOutboundManipulationSrcHost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationSrcHost.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationSrcHost.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_SrcHost')
sbcIP2IPOutboundManipulationDestUsernamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationDestUsernamePrefix.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationDestUsernamePrefix.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_DestUsernamePrefix')
sbcIP2IPOutboundManipulationDestHost = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationDestHost.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationDestHost.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_DestHost')
sbcIP2IPOutboundManipulationRemoveFromLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationRemoveFromLeft.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationRemoveFromLeft.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_RemoveFromLeft')
sbcIP2IPOutboundManipulationRemoveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationRemoveFromRight.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationRemoveFromRight.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_RemoveFromRight')
sbcIP2IPOutboundManipulationLeaveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationLeaveFromRight.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationLeaveFromRight.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_LeaveFromRight')
sbcIP2IPOutboundManipulationPrefix2Add = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationPrefix2Add.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationPrefix2Add.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_Prefix2Add')
sbcIP2IPOutboundManipulationSuffix2Add = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationSuffix2Add.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationSuffix2Add.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_Suffix2Add')
sbcIP2IPOutboundManipulationRequestType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 24, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 0), ("invite", 1), ("register", 2), ("subscribe", 3), ("inviteAndRegister", 4), ("inviteAndSubscribe", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationRequestType.setStatus('current')
if mibBuilder.loadTexts: sbcIP2IPOutboundManipulationRequestType.setDescription(' Access: Instant. AC INI-Param: IPOutboundManipulation_RequestType')
sbcAdmissionControlTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25), )
if mibBuilder.loadTexts: sbcAdmissionControlTable.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlTable.setDescription('GwApp SBC SIP Admission Control Table')
sbcAdmissionControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1), ).setIndexNames((0, "AcGateway", "sbcAdmissionControlIndex"))
if mibBuilder.loadTexts: sbcAdmissionControlEntry.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlEntry.setDescription('')
sbcAdmissionControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcAdmissionControlIndex.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlIndex.setDescription('. AC INI-Param: SBCAdmissionControl_Index')
sbcAdmissionControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAdmissionControlRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sbcAdmissionControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcAdmissionControlAction.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlAction.setDescription('Development Impending. AC INI-Param: N/A')
sbcAdmissionControlActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcAdmissionControlActionResult.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sbcAdmissionControlLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ipGroup", 0), ("sRD", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAdmissionControlLimitType.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlLimitType.setDescription(' Access: Instant. AC INI-Param: SBCAdmissionControl_LimitType')
sbcAdmissionControlIpGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAdmissionControlIpGroupID.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlIpGroupID.setDescription(' Access: Instant. AC INI-Param: SBCAdmissionControl_IPGroupID')
sbcAdmissionControlSrdID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAdmissionControlSrdID.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlSrdID.setDescription(' Access: Instant. AC INI-Param: SBCAdmissionControl_SRDID')
sbcAdmissionControlRequestType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("all", 0), ("invite", 1), ("subscribe", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAdmissionControlRequestType.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlRequestType.setDescription(' Access: Instant. AC INI-Param: SBCAdmissionControl_RequestType')
sbcAdmissionControlRequestDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAdmissionControlRequestDirection.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlRequestDirection.setDescription(' Access: Instant. AC INI-Param: SBCAdmissionControl_RequestDirection')
sbcAdmissionControlLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAdmissionControlLimit.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlLimit.setDescription(' Access: Instant. AC INI-Param: SBCAdmissionControl_Limit')
sbcAdmissionControlLimitPerUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 25, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAdmissionControlLimitPerUser.setStatus('current')
if mibBuilder.loadTexts: sbcAdmissionControlLimitPerUser.setDescription(' Access: Instant. AC INI-Param: SBCAdmissionControl_LimitPerUser')
sbcMessageManipulationsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26), )
if mibBuilder.loadTexts: sbcMessageManipulationsTable.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsTable.setDescription('SBC Message Manipulations Table.')
sbcMessageManipulationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1), ).setIndexNames((0, "AcGateway", "sbcMessageManipulationsIndex"))
if mibBuilder.loadTexts: sbcMessageManipulationsEntry.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsEntry.setDescription('')
sbcMessageManipulationsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcMessageManipulationsIndex.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsIndex.setDescription('. AC INI-Param: MessageManipulations_Index')
sbcMessageManipulationsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcMessageManipulationsRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sbcMessageManipulationsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcMessageManipulationsAction.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsAction.setDescription('Development Impending. AC INI-Param: N/A')
sbcMessageManipulationsActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcMessageManipulationsActionResult.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sbcMessageManipulationsManipulationSetID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcMessageManipulationsManipulationSetID.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsManipulationSetID.setDescription('Manipulation Set ID. Access: Instant. AC INI-Param: MessageManipulations_ManSetID')
sbcMessageManipulationsMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcMessageManipulationsMessageType.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsMessageType.setDescription('Message type. Access: Instant. AC INI-Param: MessageManipulations_MessageType')
sbcMessageManipulationsCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcMessageManipulationsCondition.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsCondition.setDescription('Message manipulation Condition. Access: Instant. AC INI-Param: MessageManipulations_Condition')
sbcMessageManipulationsActionSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcMessageManipulationsActionSubject.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsActionSubject.setDescription('Message manipulation Action Subject. Access: Instant. AC INI-Param: MessageManipulations_ActionSubject')
sbcMessageManipulationsActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("add", 0), ("remove", 1), ("modify", 2), ("addPrefix", 3), ("addSuffix", 4), ("removeSuffix", 5), ("removePrefix", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcMessageManipulationsActionType.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsActionType.setDescription('Message manipulation Action type. Access: Instant. AC INI-Param: MessageManipulations_ActionType')
sbcMessageManipulationsActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcMessageManipulationsActionValue.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsActionValue.setDescription('Message manipulation Action value. Access: Instant. AC INI-Param: MessageManipulations_ActionValue')
sbcMessageManipulationsRowRole = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 26, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("matchAndAction", 0), ("actionOnly", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcMessageManipulationsRowRole.setStatus('current')
if mibBuilder.loadTexts: sbcMessageManipulationsRowRole.setDescription('Message manipulation row rule. Access: Instant. AC INI-Param: MessageManipulations_RowRole')
sbcAlternativeRoutingReasonsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 27), )
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsTable.setStatus('current')
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsTable.setDescription('GwApp Reasons For Alternative Routing For SBC Application(IP to IP) Table')
sbcAlternativeRoutingReasonsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 27, 1), ).setIndexNames((0, "AcGateway", "sbcAlternativeRoutingReasonsIndex"))
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsEntry.setStatus('current')
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsEntry.setDescription('')
sbcAlternativeRoutingReasonsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 27, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsIndex.setStatus('current')
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsIndex.setDescription('. AC INI-Param: SBCAlternativeRoutingReasons_Index')
sbcAlternativeRoutingReasonsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 27, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sbcAlternativeRoutingReasonsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsAction.setStatus('current')
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsAction.setDescription('Development Impending. AC INI-Param: N/A')
sbcAlternativeRoutingReasonsActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsActionResult.setStatus('current')
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sbcAlternativeRoutingReasonsReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 24, 27, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsReleaseCause.setStatus('current')
if mibBuilder.loadTexts: sbcAlternativeRoutingReasonsReleaseCause.setDescription('Release Cause. Access: Instant. AC INI-Param: SBCAlternativeRoutingReasons_ReleaseCause')
gwIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 25))
gwIPv6GwAppDualIPStackSDPMethod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nONE", 0), ("aNAT", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwIPv6GwAppDualIPStackSDPMethod.setStatus('current')
if mibBuilder.loadTexts: gwIPv6GwAppDualIPStackSDPMethod.setDescription('0. Always offer a single (preferrable) media IP address. 1. ANAT - Construct offer using ANAT semantics (RFC 4091 & RFC 4092) . Access: Instant. AC INI-Param: DUALIPSTACKSDPMETHOD')
gwIPv6GwAppPrimaryMediaInterface = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwIPv6GwAppPrimaryMediaInterface.setStatus('current')
if mibBuilder.loadTexts: gwIPv6GwAppPrimaryMediaInterface.setDescription('Primary media interface to be used within SDP. Access: Instant. AC INI-Param: PRIMARYMEDIAINTERFACE')
gwIPv6GwAppSecondaryMediaInterface = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwIPv6GwAppSecondaryMediaInterface.setStatus('current')
if mibBuilder.loadTexts: gwIPv6GwAppSecondaryMediaInterface.setDescription('Secondary media interface to be used within SDP. Access: Instant. AC INI-Param: SECONDARYMEDIAINTERFACE')
gwIPv6MediaIPVersionPreference = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("onlyIPv4", 0), ("onlyIPv6", 1), ("preferIPv4", 2), ("preferIPv6", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwIPv6MediaIPVersionPreference.setStatus('current')
if mibBuilder.loadTexts: gwIPv6MediaIPVersionPreference.setDescription('Select the preferred Media IP version. Access: Instant. AC INI-Param: MEDIAIPVERSIONPREFERENCE')
srdSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26))
srdTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21), )
if mibBuilder.loadTexts: srdTable.setStatus('current')
if mibBuilder.loadTexts: srdTable.setDescription('GwApp Signaling Routing Domain (SRD) Table')
srdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1), ).setIndexNames((0, "AcGateway", "srdIndex"))
if mibBuilder.loadTexts: srdEntry.setStatus('current')
if mibBuilder.loadTexts: srdEntry.setDescription('')
srdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srdIndex.setStatus('current')
if mibBuilder.loadTexts: srdIndex.setDescription('. AC INI-Param: SRD_Index')
srdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srdRowStatus.setStatus('current')
if mibBuilder.loadTexts: srdRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
srdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srdAction.setStatus('current')
if mibBuilder.loadTexts: srdAction.setDescription('Development Impending. AC INI-Param: N/A')
srdActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srdActionResult.setStatus('current')
if mibBuilder.loadTexts: srdActionResult.setDescription('Development Impending. AC INI-Param: N/A')
srdName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srdName.setStatus('current')
if mibBuilder.loadTexts: srdName.setDescription('GwApp Signaling Routing Domain name. Access: Instant. AC INI-Param: SRD_Name')
srdMediaRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srdMediaRealm.setStatus('current')
if mibBuilder.loadTexts: srdMediaRealm.setDescription('GwApp Signaling Routing Domain media realm. Access: Instant. AC INI-Param: SRD_MediaRealm')
srdIntraSRDMediaAnchoring = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("anchorMedia", 0), ("dontAnchorMedia", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srdIntraSRDMediaAnchoring.setStatus('current')
if mibBuilder.loadTexts: srdIntraSRDMediaAnchoring.setDescription('Internal SRD Media Anchoring. Access: Offline. AC INI-Param: SRD_IntraSRDMediaAnchoring')
srdBlockUnRegUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srdBlockUnRegUsers.setStatus('current')
if mibBuilder.loadTexts: srdBlockUnRegUsers.setDescription('Block Calls From Unregistered User. Access: Offline. AC INI-Param: SRD_BlockUnRegUsers')
srdMaxNumOfRegUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 26, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srdMaxNumOfRegUsers.setStatus('current')
if mibBuilder.loadTexts: srdMaxNumOfRegUsers.setDescription('Max Number Of Registered Users. MP1xx - 25 M1K - 200 M2K- 250 M3K - 3000. Access: Offline. AC INI-Param: SRD_MaxNumOfRegUsers')
sipInterfaceSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27))
sipInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21), )
if mibBuilder.loadTexts: sipInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceTable.setDescription('GwApp SIP Interface Table')
sipInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1), ).setIndexNames((0, "AcGateway", "sipInterfaceIndex"))
if mibBuilder.loadTexts: sipInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceEntry.setDescription('')
sipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceIndex.setDescription('. AC INI-Param: SIPInterface_Index')
sipInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sipInterfaceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipInterfaceAction.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceAction.setDescription('Development Impending. AC INI-Param: N/A')
sipInterfaceActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipInterfaceActionResult.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sipInterfaceNetworkInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipInterfaceNetworkInterface.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceNetworkInterface.setDescription('Network Interface. Access: Instant. AC INI-Param: SIPInterface_NetworkInterface')
sipInterfaceApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("gwIP2IP", 0), ("sas", 1), ("sbc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipInterfaceApplicationType.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceApplicationType.setDescription('Application Type. Access: Instant. AC INI-Param: SIPInterface_ApplicationType')
sipInterfaceUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipInterfaceUDPPort.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceUDPPort.setDescription('UDP Port number. Access: Instant. AC INI-Param: SIPInterface_UDPPort')
sipInterfaceTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipInterfaceTCPPort.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceTCPPort.setDescription('TCP Port number. Access: Instant. AC INI-Param: SIPInterface_TCPPort')
sipInterfaceTLSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipInterfaceTLSPort.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceTLSPort.setDescription('TLS Port number. Access: Instant. AC INI-Param: SIPInterface_TLSPort')
sipInterfaceSRD = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 1, 27, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipInterfaceSRD.setStatus('current')
if mibBuilder.loadTexts: sipInterfaceSRD.setDescription(' Access: Instant. AC INI-Param: SIPInterface_SRD')
sip = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2))
sipProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1))
sipProxyUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyUsed.setStatus('current')
if mibBuilder.loadTexts: sipProxyUsed.setDescription('Is SIP Proxy used. Access: Instant. AC INI-Param: ISPROXYUSED')
sipProxyEnableKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("usingOptions", 1), ("usingRegister", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyEnableKeepAlive.setStatus('current')
if mibBuilder.loadTexts: sipProxyEnableKeepAlive.setDescription('Enable Proxy Keep-Alive over OPTIONS method or REGISTER method. Access: Instant. AC INI-Param: ENABLEPROXYKEEPALIVE')
sipProxyName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyName.setStatus('current')
if mibBuilder.loadTexts: sipProxyName.setDescription('SIP Proxy name. Access: Instant. AC INI-Param: PROXYNAME')
sipProxyIsHotSwap = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyIsHotSwap.setStatus('current')
if mibBuilder.loadTexts: sipProxyIsHotSwap.setDescription('Enable Proxy Hot-Swap mode. Access: Instant. AC INI-Param: ISPROXYHOTSWAP')
sipProxyHotSwapRtx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyHotSwapRtx.setStatus('current')
if mibBuilder.loadTexts: sipProxyHotSwapRtx.setDescription('Number of Rtx before Hotswap is performed. Access: Instant. AC INI-Param: PROXYHOTSWAPRTX')
sipProxyRedundancyMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("parking", 0), ("homing", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyRedundancyMode.setStatus('current')
if mibBuilder.loadTexts: sipProxyRedundancyMode.setDescription('Redundancy Mode - Parking on active proxy or switching to main Proxy whenever online. Access: Instant. AC INI-Param: PROXYREDUNDANCYMODE')
sipProxyAlwaysUseRouteTable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyAlwaysUseRouteTable.setStatus('current')
if mibBuilder.loadTexts: sipProxyAlwaysUseRouteTable.setDescription('Always use routing table even though proxy is available. Access: Instant. AC INI-Param: ALWAYSUSEROUTETABLE')
sipProxyAlwaysSendToProxy = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyAlwaysSendToProxy.setStatus('current')
if mibBuilder.loadTexts: sipProxyAlwaysSendToProxy.setDescription('Send all messages to Proxy server. Access: Instant. AC INI-Param: ALWAYSSENDTOPROXY')
sipProxyKeepAliveTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: sipProxyKeepAliveTime.setDescription('Time interval between Proxy Keep-Alive messages (seconds). Access: Instant. AC INI-Param: ProxyKeepAliveTime')
sipProxyIsFallbackUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyIsFallbackUsed.setStatus('current')
if mibBuilder.loadTexts: sipProxyIsFallbackUsed.setDescription('Allow fallback to internal Tel to IP routing table if Proxy is not responding. Access: Instant. AC INI-Param: IsFallbackUsed')
sipProxySendInviteToProxy = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxySendInviteToProxy.setStatus('current')
if mibBuilder.loadTexts: sipProxySendInviteToProxy.setDescription('Always send INVITE messages to Proxy server. Access: Instant. AC INI-Param: SENDINVITETOPROXY')
sipProxyIsTrustedProxy = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyIsTrustedProxy.setStatus('current')
if mibBuilder.loadTexts: sipProxyIsTrustedProxy.setDescription('Determine whether the proxy is a trusted node. Access: Instant. AC INI-Param: ISTRUSTEDPROXY')
sipProxyUseGatewayNameForOptions = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyUseGatewayNameForOptions.setStatus('current')
if mibBuilder.loadTexts: sipProxyUseGatewayNameForOptions.setDescription('Use Gateway name (instead of IP address) in Keep-Alive OPTIONS messages. Access: Instant. AC INI-Param: USEGATEWAYNAMEFOROPTIONS')
sipProxyEnableSRVQuery = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyEnableSRVQuery.setStatus('obsolete')
if mibBuilder.loadTexts: sipProxyEnableSRVQuery.setDescription('Enable DNS SRV queries for Proxy domain name. Access: Instant. AC INI-Param: ENABLEPROXYSRVQUERY')
sipProxyDNSQueryType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("aRecord", 0), ("sRV", 1), ("nAPTR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyDNSQueryType.setStatus('current')
if mibBuilder.loadTexts: sipProxyDNSQueryType.setDescription('DNS Query Type: 0-ARecord, 1-SRV, 2-NAPTR . Has effect on every DNS query in the system. Access: Instant. AC INI-Param: DNSQUERYTYPE')
sipProxyLoadBalancingMethod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("roundRobin", 1), ("randomWeights", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyLoadBalancingMethod.setStatus('current')
if mibBuilder.loadTexts: sipProxyLoadBalancingMethod.setDescription('Method of the proxies load balancing: 0 - Disabled (default) 1 - RoundRobin 2 - Random SRV Weights. Access: Instant. AC INI-Param: PROXYLOADBALANCINGMETHOD')
sipProxyIPListRefreshTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxyIPListRefreshTime.setStatus('current')
if mibBuilder.loadTexts: sipProxyIPListRefreshTime.setDescription('Time interval between refresh of proxies list (seconds). For example SRV query will be done every ProxyIPListRefreshTime seconds. Access: Instant. AC INI-Param: PROXYIPLISTREFRESHTIME')
proxyIPTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 21), )
if mibBuilder.loadTexts: proxyIPTable.setStatus('current')
if mibBuilder.loadTexts: proxyIPTable.setDescription('The table defines phone numbers for gateway endpoints. The endpoints that arent defined will be disabled.')
proxyIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 21, 1), ).setIndexNames((0, "AcGateway", "proxyIPIndex"))
if mibBuilder.loadTexts: proxyIPEntry.setStatus('current')
if mibBuilder.loadTexts: proxyIPEntry.setDescription('')
proxyIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: proxyIPIndex.setStatus('current')
if mibBuilder.loadTexts: proxyIPIndex.setDescription('Entry number, starting at 0. AC INI-Param: ProxyIp_Index')
proxyIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: proxyIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: proxyIPRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
proxyIPAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proxyIPAction.setStatus('current')
if mibBuilder.loadTexts: proxyIPAction.setDescription('Development Impending. AC INI-Param: N/A')
proxyIPActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proxyIPActionResult.setStatus('current')
if mibBuilder.loadTexts: proxyIPActionResult.setDescription('Development Impending. AC INI-Param: N/A')
proxyIPProxyIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: proxyIPProxyIP.setStatus('current')
if mibBuilder.loadTexts: proxyIPProxyIP.setDescription(' Access: Instant. AC INI-Param: ProxyIp_IpAddress')
sipProxySetTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22), )
if mibBuilder.loadTexts: sipProxySetTable.setStatus('current')
if mibBuilder.loadTexts: sipProxySetTable.setDescription('GwApp Proxy Set Table')
sipProxySetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1), ).setIndexNames((0, "AcGateway", "sipProxySetIndex"))
if mibBuilder.loadTexts: sipProxySetEntry.setStatus('current')
if mibBuilder.loadTexts: sipProxySetEntry.setDescription('')
sipProxySetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: sipProxySetIndex.setStatus('current')
if mibBuilder.loadTexts: sipProxySetIndex.setDescription(' AC INI-Param: ProxySet_Index')
sipProxySetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProxySetRowStatus.setStatus('current')
if mibBuilder.loadTexts: sipProxySetRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
sipProxySetAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipProxySetAction.setStatus('current')
if mibBuilder.loadTexts: sipProxySetAction.setDescription('Development Impending. AC INI-Param: N/A')
sipProxySetActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipProxySetActionResult.setStatus('current')
if mibBuilder.loadTexts: sipProxySetActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sipProxySetEnableProxyKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("usingOptions", 1), ("usingRegister", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProxySetEnableProxyKeepAlive.setStatus('current')
if mibBuilder.loadTexts: sipProxySetEnableProxyKeepAlive.setDescription('GwApp Proxy Set Table. Access: Instant. AC INI-Param: ProxySet_EnableProxyKeepAlive')
sipProxySetProxyKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProxySetProxyKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: sipProxySetProxyKeepAliveTime.setDescription('GwApp Proxy Set Table. Access: Instant. AC INI-Param: ProxySet_ProxyKeepAliveTime')
sipProxySetProxyLoadBalancingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("roundRobin", 1), ("randomWeights", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProxySetProxyLoadBalancingMethod.setStatus('current')
if mibBuilder.loadTexts: sipProxySetProxyLoadBalancingMethod.setDescription('GwApp Proxy Set Table. Access: Instant. AC INI-Param: ProxySet_ProxyLoadBalancingMethod')
sipProxySetIsProxyHotSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProxySetIsProxyHotSwap.setStatus('current')
if mibBuilder.loadTexts: sipProxySetIsProxyHotSwap.setDescription('GwApp Proxy Set Table. Access: Instant. AC INI-Param: ProxySet_IsProxyHotSwap')
sipDTMF = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2))
sipDTMFIsHookFlashUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFIsHookFlashUsed.setStatus('obsolete')
if mibBuilder.loadTexts: sipDTMFIsHookFlashUsed.setDescription('Detect and send Hook-Flash as Out-of-Band message. Access: Instant. AC INI-Param: ISHOOKFLASHUSED')
sipDTMFIsDTMFUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFIsDTMFUsed.setStatus('obsolete')
if mibBuilder.loadTexts: sipDTMFIsDTMFUsed.setDescription('Send DTMFs on the Signaling path (not on the Media path). Access: Instant. AC INI-Param: ISDTMFUSED')
sipDTMFOutOfBandDtmfFormat = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("info-Nortel", 1), ("info-Cisco", 2), ("notify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFOutOfBandDtmfFormat.setStatus('obsolete')
if mibBuilder.loadTexts: sipDTMFOutOfBandDtmfFormat.setDescription('DTMF Out-of-Band transport method. Access: Instant. AC INI-Param: OUTOFBANDDTMFFORMAT')
sipDTMFDisableAutoMute = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFDisableAutoMute.setStatus('current')
if mibBuilder.loadTexts: sipDTMFDisableAutoMute.setDescription('Disables inband auto mute of DTMFs when signalling is used for sending DTMFs. Access: Instant. AC INI-Param: DISABLEAUTODTMFMUTE')
sipDTMFRxDTMFOption = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("noSupportRFC2833inSDP", 0), ("supportRFC2833inSDP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFRxDTMFOption.setStatus('current')
if mibBuilder.loadTexts: sipDTMFRxDTMFOption.setDescription('Declare support for RFC 2833 in SDP. Access: Instant. AC INI-Param: RXDTMFOPTION')
sipDTMFHookFlashOption = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("notSupported", 0), ("iNFO", 1), ("rFC2833", 4), ("infoLucent", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFHookFlashOption.setStatus('current')
if mibBuilder.loadTexts: sipDTMFHookFlashOption.setDescription('Detect and send Hook-Flash using the selected method. Access: Instant. AC INI-Param: HOOKFLASHOPTION')
sipDTMFUseDigitForSpecialDTMF = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("special", 0), ("numeric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFUseDigitForSpecialDTMF.setStatus('current')
if mibBuilder.loadTexts: sipDTMFUseDigitForSpecialDTMF.setDescription('Indicates whether a special DTMF, sent with INFO(Cisco), is sent using its digit representation or not. Access: Instant. AC INI-Param: USEDIGITFORSPECIALDTMF')
sipDTMFMinRoutingOverlapDigits = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFMinRoutingOverlapDigits.setStatus('current')
if mibBuilder.loadTexts: sipDTMFMinRoutingOverlapDigits.setDescription('Minimum number of overlap digits before routing. Access: Instant. AC INI-Param: MINOVERLAPDIGITSFORROUTING')
sipDTMFISDNOverlapIPtoTelDialing = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDTMFISDNOverlapIPtoTelDialing.setStatus('current')
if mibBuilder.loadTexts: sipDTMFISDNOverlapIPtoTelDialing.setDescription('Enable ISDN Overlap IP to Tel Dialing. Access: Instant. AC INI-Param: ISDNTXOVERLAP')
sipTxDTMFOptionTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 21), )
if mibBuilder.loadTexts: sipTxDTMFOptionTable.setStatus('current')
if mibBuilder.loadTexts: sipTxDTMFOptionTable.setDescription('The names of the five possible coders.')
sipTxDTMFOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 21, 1), ).setIndexNames((0, "AcGateway", "sipTxDTMFOptionIndex"))
if mibBuilder.loadTexts: sipTxDTMFOptionEntry.setStatus('current')
if mibBuilder.loadTexts: sipTxDTMFOptionEntry.setDescription('')
sipTxDTMFOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: sipTxDTMFOptionIndex.setStatus('current')
if mibBuilder.loadTexts: sipTxDTMFOptionIndex.setDescription('Entry number, starting at 0. AC INI-Param: TxDtmfOption_Index')
sipTxDTMFOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipTxDTMFOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: sipTxDTMFOptionRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
sipTxDTMFOptionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipTxDTMFOptionAction.setStatus('current')
if mibBuilder.loadTexts: sipTxDTMFOptionAction.setDescription('Development Impending. AC INI-Param: N/A')
sipTxDTMFOptionActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipTxDTMFOptionActionResult.setStatus('current')
if mibBuilder.loadTexts: sipTxDTMFOptionActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sipTxDTMFOptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 0), ("nortelINFO", 1), ("nOTIFY", 2), ("ciscoINFO", 3), ("rFC2833", 4), ("koreaTelecomINFO", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipTxDTMFOptionValue.setStatus('current')
if mibBuilder.loadTexts: sipTxDTMFOptionValue.setDescription('Transmit DTMF option. Access: Instant. AC INI-Param: TxDtmfOption_Type')
sipPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 3))
sipPortsDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPortsDestinationPort.setStatus('current')
if mibBuilder.loadTexts: sipPortsDestinationPort.setDescription('Default SIP destination port (usually 5060). Access: Instant. AC INI-Param: SIPDESTINATIONPORT')
sipPortsLocalSipPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPortsLocalSipPort.setStatus('current')
if mibBuilder.loadTexts: sipPortsLocalSipPort.setDescription('Local SIP port used for signaling. Access: Instant. AC INI-Param: LOCALSIPPORT')
sipPortsTCPLocalSipPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPortsTCPLocalSipPort.setStatus('current')
if mibBuilder.loadTexts: sipPortsTCPLocalSipPort.setDescription('Local SIP port used for signaling. Access: Instant. AC INI-Param: TCPLOCALSIPPORT')
sipPortsTLSLocalSipPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPortsTLSLocalSipPort.setStatus('current')
if mibBuilder.loadTexts: sipPortsTLSLocalSipPort.setDescription('Local TLS SIP port used for signaling. Access: Instant. AC INI-Param: TLSLOCALSIPPORT')
sipAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4))
sipAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("perEP", 0), ("perGW", 1), ("perFXSOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipAuthMode.setStatus('current')
if mibBuilder.loadTexts: sipAuthMode.setDescription('Authentication mode. Access: Instant. AC INI-Param: AUTHENTICATIONMODE')
sipAuthUserName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipAuthUserName.setStatus('current')
if mibBuilder.loadTexts: sipAuthUserName.setDescription('User Name used for authentication. Access: Instant. AC INI-Param: USERNAME')
sipAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipAuthPassword.setStatus('current')
if mibBuilder.loadTexts: sipAuthPassword.setDescription('Password used for authentication. Access: Instant. AC INI-Param: PASSWORD')
sipAuthCnonce = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipAuthCnonce.setStatus('current')
if mibBuilder.loadTexts: sipAuthCnonce.setDescription('Cnonce parameter used for authentication. Access: Instant. AC INI-Param: CNONCE')
sipAuthMutualAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("optional", 0), ("mandatory", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipAuthMutualAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: sipAuthMutualAuthenticationMode.setDescription('Mutual Authentication Mode: 0 - Optional, 1 - Mandatory. Access: Instant. AC INI-Param: MUTUALAUTHENTICATIONMODE')
sipAuthChallengeCachingMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noCaching", 0), ("inviteOnly", 1), ("fullCaching", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipAuthChallengeCachingMode.setStatus('current')
if mibBuilder.loadTexts: sipAuthChallengeCachingMode.setDescription("0. No caching mode don't cache any challenges. Every new request will be sent without preliminary authorization. If the request is challenged new request with authorization data will be sent. 1. Cache for INVITE mode challenges issued for INVITE request and within the session will be cached. This will prevent the mixture of REGISTER and INVITE authorizations. 2. Full cache mode cache any challenges from the proxies. . Access: Instant. AC INI-Param: SIPCHALLENGECACHINGMODE")
authTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21), )
if mibBuilder.loadTexts: authTable.setStatus('current')
if mibBuilder.loadTexts: authTable.setDescription('')
authEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1), ).setIndexNames((0, "AcGateway", "authIndex"))
if mibBuilder.loadTexts: authEntry.setStatus('current')
if mibBuilder.loadTexts: authEntry.setDescription('')
authIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authIndex.setStatus('current')
if mibBuilder.loadTexts: authIndex.setDescription('Entry number, starting at 0. AC INI-Param: Authentication_Index')
authIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authIsUsed.setStatus('current')
if mibBuilder.loadTexts: authIsUsed.setDescription('Is this index used. Access: Offline. AC INI-Param: Authentication_IsUsed')
authAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authAction.setStatus('current')
if mibBuilder.loadTexts: authAction.setDescription('Development Impending. AC INI-Param: N/A')
authActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authActionResult.setStatus('current')
if mibBuilder.loadTexts: authActionResult.setDescription('Development Impending. AC INI-Param: N/A')
authUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authUserID.setStatus('current')
if mibBuilder.loadTexts: authUserID.setDescription(' Access: Instant. AC INI-Param: Authentication_UserId')
authUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authUserPassword.setStatus('current')
if mibBuilder.loadTexts: authUserPassword.setDescription(' Access: Instant. AC INI-Param: Authentication_UserPassword')
authModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authModule.setStatus('current')
if mibBuilder.loadTexts: authModule.setDescription('Module. AC INI-Param: Authentication_Module')
authPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 4, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authPort.setStatus('current')
if mibBuilder.loadTexts: authPort.setDescription('Port. AC INI-Param: Authentication_Port')
sipRetransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 5))
sipRetransmissionT1Rtx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRetransmissionT1Rtx.setStatus('current')
if mibBuilder.loadTexts: sipRetransmissionT1Rtx.setDescription('SIP T1 timeout for retransmission. Access: Instant. AC INI-Param: SIPT1RTX')
sipRetransmissionT2Rtx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRetransmissionT2Rtx.setStatus('current')
if mibBuilder.loadTexts: sipRetransmissionT2Rtx.setDescription('SIP T2 timeout for retransmission. Access: Instant. AC INI-Param: SIPT2RTX')
sipRetransmissionSipMaxRtx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 5, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRetransmissionSipMaxRtx.setStatus('current')
if mibBuilder.loadTexts: sipRetransmissionSipMaxRtx.setDescription('Maximum number of retransmissions. Access: Instant. AC INI-Param: SipMaxRtx')
sipRetransmissionIsRtxEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRetransmissionIsRtxEnable.setStatus('current')
if mibBuilder.loadTexts: sipRetransmissionIsRtxEnable.setDescription('is Rtx timer enabled. Access: Instant. AC INI-Param: ISRTXENABLE')
sipRetransmissionEnablePTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRetransmissionEnablePTime.setStatus('current')
if mibBuilder.loadTexts: sipRetransmissionEnablePTime.setDescription('is ptime parameter needed in sdp. Access: Instant. AC INI-Param: ENABLEPTIME')
sipRetransmissionTCPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 5, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRetransmissionTCPTimeout.setStatus('current')
if mibBuilder.loadTexts: sipRetransmissionTCPTimeout.setDescription('SIP TCP time out (influence timerB and Timer F). Access: Instant. AC INI-Param: SIPTCPTIMEOUT')
sipRetransmissionRetryAfterTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 5, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRetransmissionRetryAfterTime.setStatus('current')
if mibBuilder.loadTexts: sipRetransmissionRetryAfterTime.setDescription('Retry After time for the proxy to be in state Unavailable. Access: Instant. AC INI-Param: RETRYAFTERTIME')
sipRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6))
sipRegistrationIsNeeded = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationIsNeeded.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationIsNeeded.setDescription('Is Proxy registration necessary. Access: Instant. AC INI-Param: ISREGISTERNEEDED')
sipRegistrationIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationIP.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationIP.setDescription('SIP Registrar IP address. Access: Instant. AC INI-Param: REGISTRARIP')
sipRegistrationTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationTime.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationTime.setDescription('Time for which registration to Gatekeeper/Proxy is valid. Causes periodic registration (seconds). Access: Instant. AC INI-Param: RegistrationTime')
sipRegistrationRegistrationRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationRegistrationRetryTime.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationRegistrationRetryTime.setDescription('Time in which the gateway will try to register after last registration failure (seconds). Access: Instant. AC INI-Param: REGISTRATIONRETRYTIME')
sipRegistrationRegistrarName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationRegistrarName.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationRegistrarName.setDescription('SIP Registrar name. Access: Instant. AC INI-Param: REGISTRARNAME')
sipRegistrationTimeDivider = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationTimeDivider.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationTimeDivider.setDescription('Percentage of RegistrationTime when the actual new REGISTER request will be sent out. Access: Instant. AC INI-Param: REGISTRATIONTIMEDIVIDER')
sipRegistrationName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationName.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationName.setDescription('Gateway registration name. Access: Instant. AC INI-Param: GWREGISTRATIONNAME')
sipRegistrationRegisterOnInviteFailure = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationRegisterOnInviteFailure.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationRegisterOnInviteFailure.setDescription('Enable ReRegister upon INVITE transaction failure. Access: Instant. AC INI-Param: REGISTERONINVITEFAILURE')
sipRegistrationTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationTimeThreshold.setDescription('If (REGISTRATIONTIMETHRESHOLD > 0) and (REGISTRATIONTIMETHRESHOLD < computed registration time using existing logic) then new registration time will be (Registration time from expires header REGISTRATIONTIMETHRESHOLD). Access: Instant. AC INI-Param: REGISTRATIONTIMETHRESHOLD')
sipRegistrationRegistrarTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notConfigured", -1), ("uDP", 0), ("tCP", 1), ("tLS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationRegistrarTransportType.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationRegistrarTransportType.setDescription('Registrar transport type. Access: Instant. AC INI-Param: REGISTRARTRANSPORTTYPE')
sipRegistrationReRegisterOnConnectionFailure = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistrationReRegisterOnConnectionFailure.setStatus('current')
if mibBuilder.loadTexts: sipRegistrationReRegisterOnConnectionFailure.setDescription('Enables GW to perform Re-Registeration on TCP/TLS connection failure. Access: Instant. AC INI-Param: REREGISTERONCONNECTIONFAILURE')
sipMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7))
sipMiscEnableEarlyMedia = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableEarlyMedia.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableEarlyMedia.setDescription('Enable Early Media. Access: Instant. AC INI-Param: ENABLEEARLYMEDIA')
sipMiscSipSessionExpires = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscSipSessionExpires.setStatus('current')
if mibBuilder.loadTexts: sipMiscSipSessionExpires.setDescription('The SIP session will be refreshed (using INVITE) each time this timer expires (seconds). Access: Instant. AC INI-Param: SIPSESSIONEXPIRES')
sipMiscIsUserPhone = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscIsUserPhone.setStatus('current')
if mibBuilder.loadTexts: sipMiscIsUserPhone.setDescription('Add User=Phone parameter to SIP URL. Access: Instant. AC INI-Param: ISUSERPHONE')
sipMiscGatewayName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscGatewayName.setStatus('current')
if mibBuilder.loadTexts: sipMiscGatewayName.setDescription('Gateway name. Access: Instant. AC INI-Param: SIPGATEWAYNAME')
sipMiscPrackMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("supported", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscPrackMode.setStatus('current')
if mibBuilder.loadTexts: sipMiscPrackMode.setDescription('PRACK mechanism mode for 1XX reliable responses: 0- Disabled , 1- Supported , 2- Required. Access: Instant. AC INI-Param: PrackMode')
sipMiscEnableRpiHeader = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableRpiHeader.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableRpiHeader.setDescription('Enable Remote-Party-ID header. Access: Instant. AC INI-Param: ENABLERPIHEADER')
sipMiscXChannelHeader = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscXChannelHeader.setStatus('current')
if mibBuilder.loadTexts: sipMiscXChannelHeader.setDescription('0 (default): No special header 1:Add special header for trunk and B-Channel. Access: Instant. AC INI-Param: XCHANNELHEADER')
sipMiscAssertedIDMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noHeaderAdded", 0), ("pAssertedIdRFC3325", 1), ("pPreferreddIdRFC3325", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscAssertedIDMode.setStatus('current')
if mibBuilder.loadTexts: sipMiscAssertedIDMode.setDescription('Select Asserted Identity header method. Access: Instant. AC INI-Param: ASSERTEDIDMODE')
sipMiscIsUserPhoneInFrom = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscIsUserPhoneInFrom.setStatus('current')
if mibBuilder.loadTexts: sipMiscIsUserPhoneInFrom.setDescription("Add 'User=Phone' to From header. Access: Instant. AC INI-Param: ISUSERPHONEINFROM")
sipMiscAddTon2Rpi = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscAddTon2Rpi.setStatus('current')
if mibBuilder.loadTexts: sipMiscAddTon2Rpi.setDescription('Add Number Type and Plan to Remote-Party-ID header. Access: Instant. AC INI-Param: ADDTON2RPI')
sipMiscEnableCIC = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableCIC.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableCIC.setDescription('Enables CIC -> ISDN TNS IE interworking. Access: Instant. AC INI-Param: ENABLECIC')
sipMiscTransportType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("udp", 0), ("tcp", 1), ("tls", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscTransportType.setStatus('current')
if mibBuilder.loadTexts: sipMiscTransportType.setDescription('SIP transport type. Access: Instant. AC INI-Param: SIPTRANSPORTTYPE')
sipMiscISubNumberOfDigits = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscISubNumberOfDigits.setStatus('current')
if mibBuilder.loadTexts: sipMiscISubNumberOfDigits.setDescription('Number of digits that will be taken from end of phone number as Subaddress. Access: Instant. AC INI-Param: ISUBNUMBEROFDIGITS')
sipMiscSIP183Behaviour = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscSIP183Behaviour.setStatus('current')
if mibBuilder.loadTexts: sipMiscSIP183Behaviour.setDescription('If this parameter set to 1, ALERT to ISDN will be sent upon 183 receive. Access: Instant. AC INI-Param: SIP183BEHAVIOUR')
sipMiscUseToHeaderAsCalledNum = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscUseToHeaderAsCalledNum.setStatus('current')
if mibBuilder.loadTexts: sipMiscUseToHeaderAsCalledNum.setDescription('Use the user part of To header URL as called number (IP->TEL). Access: Instant. AC INI-Param: ISUSETOHEADERASCALLEDNUMBER')
sipMiscEnableSIPS = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableSIPS.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableSIPS.setDescription('Enable SIP secured URI usage. Access: Instant. AC INI-Param: ENABLESIPS')
sipMiscEnableSRVQuery = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableSRVQuery.setStatus('obsolete')
if mibBuilder.loadTexts: sipMiscEnableSRVQuery.setDescription('Enable DNS SRV queries. Access: Instant. AC INI-Param: ENABLESRVQUERY')
sipMiscSubject = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscSubject.setStatus('current')
if mibBuilder.loadTexts: sipMiscSubject.setDescription('User-defined sip subject. Access: Instant. AC INI-Param: SIPSUBJECT')
sipMiscUseSIPTgrp = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("sendOnly", 1), ("sendAndReceive", 2), ("nortelHotline", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscUseSIPTgrp.setStatus('current')
if mibBuilder.loadTexts: sipMiscUseSIPTgrp.setDescription('Use TGRP parameter 0 - disable [Default] , 1 - send only , 2 - send and use if in the RequestURI when receiving INVITE, 3 - Nortel Hotline. Access: Instant. AC INI-Param: USESIPTGRP')
sipMiscSend180ForCallWaiting = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscSend180ForCallWaiting.setStatus('current')
if mibBuilder.loadTexts: sipMiscSend180ForCallWaiting.setDescription('Send 180 for call waiting. Used for parties that do not support 182. Access: Instant. AC INI-Param: SEND180FORCALLWAITING')
sipMiscUserAgentDisplayInfo = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscUserAgentDisplayInfo.setStatus('current')
if mibBuilder.loadTexts: sipMiscUserAgentDisplayInfo.setDescription("String that will be displayed in the SIP Header 'User-Agent' or 'Server'. Access: Instant. AC INI-Param: USERAGENTDISPLAYINFO")
sipMiscSessionExpiresMethod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invite", 0), ("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscSessionExpiresMethod.setStatus('current')
if mibBuilder.loadTexts: sipMiscSessionExpiresMethod.setDescription('Determines the Method which the SIP session will be using to referesh the session. Access: Instant. AC INI-Param: SESSIONEXPIRESMETHOD')
sipMiscEnableGRUU = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableGRUU.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableGRUU.setDescription('Obtain and use GRUU (Global Routable UserAgentURIs). Access: Instant. AC INI-Param: ENABLEGRUU')
sipMiscDNSQueryType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("aRecord", 0), ("sRV", 1), ("nAPTR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscDNSQueryType.setStatus('current')
if mibBuilder.loadTexts: sipMiscDNSQueryType.setDescription('DNS Query Type: 0-ARecord, 1-SRV, 2-NAPTR . Has effect on every DNS query in the system. Access: Instant. AC INI-Param: DNSQUERYTYPE')
sipMiscEnableHistoryInfo = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableHistoryInfo.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableHistoryInfo.setDescription('Enable History-Info header support. Access: Instant. AC INI-Param: ENABLEHISTORYINFO')
sipMiscEnableTCPConnectionReuse = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableTCPConnectionReuse.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableTCPConnectionReuse.setDescription('Enable reuse of TCP connection. Access: Instant. AC INI-Param: ENABLETCPCONNECTIONREUSE')
sipMiscComfortNoiseNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscComfortNoiseNegotiation.setStatus('current')
if mibBuilder.loadTexts: sipMiscComfortNoiseNegotiation.setDescription('is CN payload type is used and being negotiate. Access: Instant. AC INI-Param: COMFORTNOISENEGOTIATION')
sipMiscMultiPtimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("packetCable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscMultiPtimeFormat.setStatus('current')
if mibBuilder.loadTexts: sipMiscMultiPtimeFormat.setDescription('Format of multiple ptime (ptime per coder) in outgoing SDP. Access: Instant. AC INI-Param: MULTIPTIMEFORMAT')
sipMiscRTPOnlyMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("transmitNReceive", 1), ("transmitOnly", 2), ("receiveOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscRTPOnlyMode.setStatus('current')
if mibBuilder.loadTexts: sipMiscRTPOnlyMode.setDescription('On RTP only mode their is no signalling protocol (for media parameters negotiation with the remote side). The channel is open immediately. The IP for the media is taken from the routing table. The RTP ports are corresponding to the local side ports. RTP-Only mode Values: 0 - regular call establishment 1 - No Signalling. The RTP channel open for Rx & Tx 2- No Signalling. The RTP channel open only for Tx 3 - No Signalling. The RTP channel open only for Rx. Access: Instant. AC INI-Param: RTPONLYMODE')
sipMiscEnableReasonHeader = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableReasonHeader.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableReasonHeader.setDescription('Enable Reason header in the outgoing messages. Access: Instant. AC INI-Param: ENABLEREASONHEADER')
sipMisc3xxBehavior = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("redirect", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMisc3xxBehavior.setStatus('current')
if mibBuilder.loadTexts: sipMisc3xxBehavior.setDescription('3xx response behavior: Forwarding behavior - use different call identifiers Redirect behavior - use the same call identifiers: From, To & CallID. Access: Instant. AC INI-Param: 3XXBEHAVIOR')
sipMiscEnableSemiAttendedTransfer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableSemiAttendedTransfer.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableSemiAttendedTransfer.setDescription('Semi-Attended Transfer when the session to the Target is not established. false - Use REFER with Replaces. true - Use CANCEL and REFER without Replaces if session is not established. Access: Instant. AC INI-Param: ENABLESEMIATTENDEDTRANSFER')
sipMiscUseSIPURIForDiversionHeader = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tel", 0), ("sip", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscUseSIPURIForDiversionHeader.setStatus('current')
if mibBuilder.loadTexts: sipMiscUseSIPURIForDiversionHeader.setDescription('Use Tel uri or Sip uri for Diversion header. Access: Instant. AC INI-Param: UseSIPURIForDiversionHeader')
sipMiscEnableVMURI = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableVMURI.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableVMURI.setDescription('Enable History-Info header support. Access: Instant. AC INI-Param: ENABLEVMURI')
sipMiscEnablePChargingVector = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnablePChargingVector.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnablePChargingVector.setDescription('Generate P-Charging-Vector header [0] - disabled [1] - enabled. Access: Instant. AC INI-Param: ENABLEPCHARGINGVECTOR')
sipMiscPAssertedUserName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscPAssertedUserName.setStatus('current')
if mibBuilder.loadTexts: sipMiscPAssertedUserName.setDescription('Digit pattern used to indicate Call Forward on Do Not Disturb (PBX to VoiceMail). Access: Instant. AC INI-Param: PASSERTEDUSERNAME')
sipMiscSDPSessionOwner = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 37), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscSDPSessionOwner.setStatus('current')
if mibBuilder.loadTexts: sipMiscSDPSessionOwner.setDescription('The SDP owner string. Access: Instant. AC INI-Param: SIPSDPSESSIONOWNER')
sipMiscResetOnINIFileDownload = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscResetOnINIFileDownload.setStatus('obsolete')
if mibBuilder.loadTexts: sipMiscResetOnINIFileDownload.setDescription('Determine if Reset after INI File Download is execute. Access: Instant. AC INI-Param: ResetOnINIFileDownload')
sipMiscSetDefaultOnIniFileProcess = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscSetDefaultOnIniFileProcess.setStatus('current')
if mibBuilder.loadTexts: sipMiscSetDefaultOnIniFileProcess.setDescription('Determine if all parameters are set to their defaults before processing updated INI File. Access: Instant. AC INI-Param: SetDefaultOnIniFileProcess')
sipMiscEnableContactRestriction = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnableContactRestriction.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnableContactRestriction.setDescription('Hides the user part of the URI in the Contact Header 0 - Disable 1 - Enable. Access: Instant. AC INI-Param: ENABLECONTACTRESTRICTION')
sipMiscEnablePAssociatedURIHeader = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscEnablePAssociatedURIHeader.setStatus('current')
if mibBuilder.loadTexts: sipMiscEnablePAssociatedURIHeader.setDescription('Handles the P-Associated-URI header in a 200OK response for a REGISTER request. Access: Instant. AC INI-Param: ENABLEPASSOCIATEDURIHEADER')
sipMiscMinSE = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscMinSE.setStatus('current')
if mibBuilder.loadTexts: sipMiscMinSE.setDescription('Minimal value for session refresh. Access: Instant. AC INI-Param: MINSE')
sipMiscApplicationProfile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscApplicationProfile.setStatus('current')
if mibBuilder.loadTexts: sipMiscApplicationProfile.setDescription('ApplicationProfile, read it later for validating that the board is theirs. Access: Offline. AC INI-Param: APPLICATIONPROFILE')
sipMiscOPTIONSUserPart = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 44), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscOPTIONSUserPart.setStatus('current')
if mibBuilder.loadTexts: sipMiscOPTIONSUserPart.setDescription("Allow to configure the OPTIONS userpart string for all gateways. The default value should be empty string which means that we don't use this parameter. Another special value is 'empty' which means that the we don't populate the user part of the OPTIONS request URI. Any other value will be taken as is and used as the user part of the OPTIONS request URI. Access: Instant. AC INI-Param: OPTIONSUSERPART")
sipMiscUseAORInReferToHeader = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscUseAORInReferToHeader.setStatus('current')
if mibBuilder.loadTexts: sipMiscUseAORInReferToHeader.setDescription('If enabled, we will use URI from To/From headers in Refer-To header. If disabled, we will take the URI from Contact. Access: Instant. AC INI-Param: USEAORINREFERTOHEADER')
sipMiscForkingHandlingMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sequential", 0), ("parallel", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscForkingHandlingMode.setStatus('current')
if mibBuilder.loadTexts: sipMiscForkingHandlingMode.setDescription('Decides the handling method to 18X response to forking 0 - Parallel handling - only the first 18X response is handled 1 - Sequential handling - all the 18X responses are handled. Access: Instant. AC INI-Param: FORKINGHANDLINGMODE')
sipMiscOfferUnencryptedSRTCP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscOfferUnencryptedSRTCP.setStatus('obsolete')
if mibBuilder.loadTexts: sipMiscOfferUnencryptedSRTCP.setDescription("If set to 1, the 'crypto' attribute includes the UNENCRYPTED_SRTCP parameter. If set to 1, the UNENCRYPTED_SRTCP parameter is not included. Access: Instant. AC INI-Param: OFFERUNENCRYPTEDSRTCP")
sipMiscSourceNumberPreference = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 7, 48), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMiscSourceNumberPreference.setStatus('current')
if mibBuilder.loadTexts: sipMiscSourceNumberPreference.setDescription("Determines from where the source number shall be taken from (in an incoming INVITE request). Parameter values: - NULL: no changes in current logic - FROM: source number is taken from 'FROM' field. Access: Instant. AC INI-Param: SOURCENUMBERPREFERENCE")
sipSubscribe = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 8))
sipSubscribeEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSubscribeEnable.setStatus('current')
if mibBuilder.loadTexts: sipSubscribeEnable.setDescription('This parameter related to Subscribe/UnSubscribe buttons. Access: Instant. AC INI-Param: SHOULDSUBSCRIBE')
sipSubscribeRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSubscribeRetryTime.setStatus('current')
if mibBuilder.loadTexts: sipSubscribeRetryTime.setDescription('MWI service subscription retry time after last subscription failure (seconds). Access: Instant. AC INI-Param: SUBSCRIBERETRYTIME')
sipSubscribeEnableMWISubscription = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSubscribeEnableMWISubscription.setStatus('current')
if mibBuilder.loadTexts: sipSubscribeEnableMWISubscription.setDescription('Enable subscription for Message Waiting Indicator service. Access: Instant. AC INI-Param: ENABLEMWISUBSCRIPTION')
sipSubscribeSubscriptionMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perEndpoint", 0), ("perGateway", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSubscribeSubscriptionMode.setStatus('current')
if mibBuilder.loadTexts: sipSubscribeSubscriptionMode.setDescription('Subscription Mode: 0 - Per Endpoint, 1 - Per Gateway. Access: Instant. AC INI-Param: SUBSCRIPTIONMODE')
sipDigitalGW = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9))
causeMapSIP2ISDNTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 21), )
if mibBuilder.loadTexts: causeMapSIP2ISDNTable.setStatus('current')
if mibBuilder.loadTexts: causeMapSIP2ISDNTable.setDescription('Cause Map SIP to ISDN Table.')
causeMapSIP2ISDNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 21, 1), ).setIndexNames((0, "AcGateway", "causeMapSIP2ISDNIndex"))
if mibBuilder.loadTexts: causeMapSIP2ISDNEntry.setStatus('current')
if mibBuilder.loadTexts: causeMapSIP2ISDNEntry.setDescription('')
causeMapSIP2ISDNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: causeMapSIP2ISDNIndex.setStatus('current')
if mibBuilder.loadTexts: causeMapSIP2ISDNIndex.setDescription(' AC INI-Param: CauseMapSip2Isdn_Index')
causeMapSIP2ISDNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: causeMapSIP2ISDNRowStatus.setStatus('current')
if mibBuilder.loadTexts: causeMapSIP2ISDNRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
causeMapSIP2ISDNAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: causeMapSIP2ISDNAction.setStatus('current')
if mibBuilder.loadTexts: causeMapSIP2ISDNAction.setDescription('Development Impending. AC INI-Param: N/A')
causeMapSIP2ISDNActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: causeMapSIP2ISDNActionResult.setStatus('current')
if mibBuilder.loadTexts: causeMapSIP2ISDNActionResult.setDescription('Development Impending. AC INI-Param: N/A')
causeMapSIP2ISDNSIPResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: causeMapSIP2ISDNSIPResponse.setStatus('current')
if mibBuilder.loadTexts: causeMapSIP2ISDNSIPResponse.setDescription(' Access: Instant. AC INI-Param: CauseMapSip2Isdn_SipResponse')
causeMapSIP2ISDNQ850Cause = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: causeMapSIP2ISDNQ850Cause.setStatus('current')
if mibBuilder.loadTexts: causeMapSIP2ISDNQ850Cause.setDescription(' Access: Instant. AC INI-Param: CauseMapSip2Isdn_IsdnReleaseCause')
causeMapISDN2SIPTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 22), )
if mibBuilder.loadTexts: causeMapISDN2SIPTable.setStatus('current')
if mibBuilder.loadTexts: causeMapISDN2SIPTable.setDescription('Cause Map SIP to ISDN Table.')
causeMapISDN2SIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 22, 1), ).setIndexNames((0, "AcGateway", "causeMapISDN2SIPIndex"))
if mibBuilder.loadTexts: causeMapISDN2SIPEntry.setStatus('current')
if mibBuilder.loadTexts: causeMapISDN2SIPEntry.setDescription('')
causeMapISDN2SIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: causeMapISDN2SIPIndex.setStatus('current')
if mibBuilder.loadTexts: causeMapISDN2SIPIndex.setDescription(' AC INI-Param: CauseMapIsdn2Sip_Index')
causeMapISDN2SIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: causeMapISDN2SIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: causeMapISDN2SIPRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. Access: Instant. AC INI-Param: N/A')
causeMapISDN2SIPAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: causeMapISDN2SIPAction.setStatus('current')
if mibBuilder.loadTexts: causeMapISDN2SIPAction.setDescription('Development Impending. AC INI-Param: N/A')
causeMapISDN2SIPActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: causeMapISDN2SIPActionResult.setStatus('current')
if mibBuilder.loadTexts: causeMapISDN2SIPActionResult.setDescription('Development Impending. AC INI-Param: N/A')
causeMapISDN2SIPQ850Cause = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: causeMapISDN2SIPQ850Cause.setStatus('current')
if mibBuilder.loadTexts: causeMapISDN2SIPQ850Cause.setDescription(' Access: Instant. AC INI-Param: CauseMapIsdn2Sip_IsdnReleaseCause')
causeMapISDN2SIPSIPResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 9, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: causeMapISDN2SIPSIPResponse.setStatus('current')
if mibBuilder.loadTexts: causeMapISDN2SIPSIPResponse.setDescription(' Access: Instant. AC INI-Param: CauseMapIsdn2Sip_SipResponse')
sipSAS = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10))
sipSASEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASEnable.setStatus('current')
if mibBuilder.loadTexts: sipSASEnable.setDescription('Enables SAS functionality. Access: Offline. AC INI-Param: ENABLESAS')
sipSASLocalSIPUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASLocalSIPUdpPort.setStatus('current')
if mibBuilder.loadTexts: sipSASLocalSIPUdpPort.setDescription('Local SAS SIP port used for signaling over UDP. Access: Instant. AC INI-Param: SASLOCALSIPUDPPORT')
sipSASDefaultGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASDefaultGatewayIP.setStatus('current')
if mibBuilder.loadTexts: sipSASDefaultGatewayIP.setDescription('SIP SAS default IP address for incoming requests in emergency mode. Access: Instant. AC INI-Param: SASDEFAULTGATEWAYIP')
sipSASLocalSIPTlsPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASLocalSIPTlsPort.setStatus('current')
if mibBuilder.loadTexts: sipSASLocalSIPTlsPort.setDescription('Local SAS SIP port used for signaling over TLS. Access: Instant. AC INI-Param: SASLOCALSIPTLSPORT')
sipSASRegistrationTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASRegistrationTime.setStatus('current')
if mibBuilder.loadTexts: sipSASRegistrationTime.setDescription('SAS will send this value in expires header while working in emergency mode. Access: Instant. AC INI-Param: SASREGISTRATIONTIME')
sipSASShortNumberLength = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASShortNumberLength.setStatus('deprecated')
if mibBuilder.loadTexts: sipSASShortNumberLength.setDescription('Upon incoming request the user info in the request is compared to the registered one. SAS performs comparison of the arrived user info with the suffix of the registered one. The length of the suffix is determined by this parameter. Access: Instant. AC INI-Param: SASSHORTNUMBERLENGTH')
sipSASLocalSIPTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASLocalSIPTcpPort.setStatus('current')
if mibBuilder.loadTexts: sipSASLocalSIPTcpPort.setDescription('Local SAS SIP port used for signaling over TCP. Access: Instant. AC INI-Param: SASLOCALSIPTCPPORT')
sipSASProxySet = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASProxySet.setStatus('current')
if mibBuilder.loadTexts: sipSASProxySet.setDescription('Proxy Set Id for SAS. Access: Instant. AC INI-Param: SASPROXYSET')
sipSASRedundantProxySet = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASRedundantProxySet.setStatus('current')
if mibBuilder.loadTexts: sipSASRedundantProxySet.setDescription('Proxy Set Id for Redundant SAS. Access: Instant. AC INI-Param: REDUNDANTSASPROXYSET')
sipSASBindingMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uRI", 0), ("userPartOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASBindingMode.setStatus('current')
if mibBuilder.loadTexts: sipSASBindingMode.setDescription('Defines the SAS database binding mode: 0 - URI dependant 1 - according to user part. Access: Instant. AC INI-Param: SASBINDINGMODE')
sipSASSurvivabilityMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standard", 0), ("alwaysEmergency", 1), ("ignoreRegister", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASSurvivabilityMode.setStatus('current')
if mibBuilder.loadTexts: sipSASSurvivabilityMode.setDescription('Defines the SAS working mode: 0 Standard Mode (working with configured proxy set) 1 Always emergency mode (working without proxy) 2 Ignore REGISTER in normal mode. Access: Instant. AC INI-Param: SASSURVIVABILITYMODE')
sipSASEnableENUM = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASEnableENUM.setStatus('current')
if mibBuilder.loadTexts: sipSASEnableENUM.setDescription('Enables SAS to perform ENUM query when receiving INVITE messages in emergency mode. Access: Instant. AC INI-Param: SASENABLEENUM')
sipSASEnableRecordRoute = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSASEnableRecordRoute.setStatus('current')
if mibBuilder.loadTexts: sipSASEnableRecordRoute.setDescription('Enables SAS to add record-Route header to requests. Access: Instant. AC INI-Param: SASENABLERECORDROUTE')
sasRegistrationManipulationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 21), )
if mibBuilder.loadTexts: sasRegistrationManipulationTable.setStatus('current')
if mibBuilder.loadTexts: sasRegistrationManipulationTable.setDescription('GWAPP SAS Registration Manipulation Table.')
sasRegistrationManipulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 21, 1), ).setIndexNames((0, "AcGateway", "sasRegistrationManipulationIndex"))
if mibBuilder.loadTexts: sasRegistrationManipulationEntry.setStatus('current')
if mibBuilder.loadTexts: sasRegistrationManipulationEntry.setDescription('')
sasRegistrationManipulationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: sasRegistrationManipulationIndex.setStatus('current')
if mibBuilder.loadTexts: sasRegistrationManipulationIndex.setDescription(' AC INI-Param: SASRegistrationManipulation_Index')
sasRegistrationManipulationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sasRegistrationManipulationRowStatus.setStatus('current')
if mibBuilder.loadTexts: sasRegistrationManipulationRowStatus.setDescription('Row-Status Textual Conventions as defined in RFC 2579: Textual Conventions for SMIv2. AC INI-Param: N/A')
sasRegistrationManipulationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasRegistrationManipulationAction.setStatus('current')
if mibBuilder.loadTexts: sasRegistrationManipulationAction.setDescription('Development Impending. AC INI-Param: N/A')
sasRegistrationManipulationActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasRegistrationManipulationActionResult.setStatus('current')
if mibBuilder.loadTexts: sasRegistrationManipulationActionResult.setDescription('Development Impending. AC INI-Param: N/A')
sasRegistrationManipulationRemoveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sasRegistrationManipulationRemoveFromRight.setStatus('current')
if mibBuilder.loadTexts: sasRegistrationManipulationRemoveFromRight.setDescription(' Access: Instant. AC INI-Param: SASRegistrationManipulation_RemoveFromRight')
sasRegistrationManipulationLeaveFromRight = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 2, 10, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sasRegistrationManipulationLeaveFromRight.setStatus('current')
if mibBuilder.loadTexts: sasRegistrationManipulationLeaveFromRight.setDescription(' Access: Instant. AC INI-Param: SASRegistrationManipulation_LeaveFromRight')
h323 = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3))
h323SourceEncodType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("e164", 0), ("h323-Id", 1), ("h323-IdAndE164", 2), ("nPIAndTON", 3), ("nPIAndTONAndH323-Id", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323SourceEncodType.setStatus('obsolete')
if mibBuilder.loadTexts: h323SourceEncodType.setDescription('Calling number coding type in Setup message. Access: Instant. AC INI-Param: SOURCEENCODTYPE')
h323DestEncodType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("e164", 0), ("h323-Id", 1), ("h323-IdAndE164", 2), ("nPIAndTON", 3), ("nPIAndTONAndH323-Id", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323DestEncodType.setStatus('obsolete')
if mibBuilder.loadTexts: h323DestEncodType.setDescription('Called number coding type in Setup message. Access: Instant. AC INI-Param: DESTENCODTYPE')
h323H323IDString = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323H323IDString.setStatus('obsolete')
if mibBuilder.loadTexts: h323H323IDString.setDescription('Definition of Gateway H.323-ID source field. Access: Instant. AC INI-Param: H323IDSTRING')
h323ConnectionModes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 10))
h323ConnectionModesIsTunnelingUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323ConnectionModesIsTunnelingUsed.setStatus('obsolete')
if mibBuilder.loadTexts: h323ConnectionModesIsTunnelingUsed.setDescription('Use H.323 Tunneling call setup procedure. Access: Instant. AC INI-Param: ISTUNNELINGUSED')
fastStart = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 10, 5))
fastStartIsFastConnectUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastStartIsFastConnectUsed.setStatus('obsolete')
if mibBuilder.loadTexts: fastStartIsFastConnectUsed.setDescription('Use H.323 Fast Start call setup procedure. Access: Instant. AC INI-Param: ISFASTCONNECTUSED')
fastStartOpenH245OnFS = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 10, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastStartOpenH245OnFS.setStatus('obsolete')
if mibBuilder.loadTexts: fastStartOpenH245OnFS.setDescription('Open H.245 when using Fast Start call setup procedure. Access: Instant. AC INI-Param: OPENH245ONFS')
fastStartIsFSMediaInfoSendOnConnect = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 10, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastStartIsFSMediaInfoSendOnConnect.setStatus('obsolete')
if mibBuilder.loadTexts: fastStartIsFSMediaInfoSendOnConnect.setDescription('Is Fast start Media sent in in Connect or in Alert. Access: Instant. AC INI-Param: ISFSMEDIAINFOSENDONCONNECT')
fastStartIsFSOpenMediaOnConnect = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 10, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastStartIsFSOpenMediaOnConnect.setStatus('obsolete')
if mibBuilder.loadTexts: fastStartIsFSOpenMediaOnConnect.setDescription('Open voice channel afer sending Connect or after sending Alert. Access: Instant. AC INI-Param: ISFSOPENMEDIAONCONNECT')
h323GK = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11))
h323GKIsGateKeeperUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKIsGateKeeperUsed.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKIsGateKeeperUsed.setDescription('Is gateway using a H.323 Gatekeeper. Access: Offline. AC INI-Param: ISGATEKEEPERUSED')
h323GKGwRegistrType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("e164", 0), ("h323-Id", 1), ("h323-IdAndE164", 2), ("nPIAndTON", 3), ("nPIAndTONAndH323-Id", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKGwRegistrType.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKGwRegistrType.setDescription('Type of Gatekeeper registration. Access: Instant. AC INI-Param: GWREGISTRTYPE')
h323GKIsGkFallbackUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKIsGkFallbackUsed.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKIsGkFallbackUsed.setDescription('Allow fallback to internal Tel to IP routing table if Gatekeeper/Proxy is not responding. Access: Offline. AC INI-Param: ISFALLBACKUSED')
h323GKCanMapAliases = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKCanMapAliases.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKCanMapAliases.setDescription('If enabled, Gatekeeper can change gateway destination number using the Alias parameter in ACF message. Access: Instant. AC INI-Param: CANMAPALIASES')
h323GKResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKResponseTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKResponseTimeout.setDescription('Time in which the gateway waits for a RAS response from the Gatekeeper before retransmission (seconds). Access: Instant. AC INI-Param: RESPONSETIMEOUT')
h323GKMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKMaxRetries.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKMaxRetries.setDescription('Maximum number of retransmissions of RAS messages to Gatekeeper. Access: Instant. AC INI-Param: MAXRETRIES')
h323GKRegistrationTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKRegistrationTime.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKRegistrationTime.setDescription('Time in seconds for which registration to Gatekeeper/Proxy is valid. cause periodic registration. Access: Offline. AC INI-Param: REGISTRATIONTIME')
h323GKIsTerminal = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKIsTerminal.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKIsTerminal.setDescription('The gateway registers as a H.323 terminal with multiple aliases. Otherwise, the gateway behaves as an H.323 gateway. Access: Instant. AC INI-Param: ISTERMINAL')
h323GKGatekeeperID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKGatekeeperID.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKGatekeeperID.setDescription('Gatekeeper Identification name, to be used in Registration Request (RRQ) messages. Access: Instant. AC INI-Param: GATEKEEPERID')
h323GKEnablePregrantARQ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKEnablePregrantARQ.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKEnablePregrantARQ.setDescription("ARQ message won't be sent if the Gatekeeper has pre-granted admission. Access: Instant. AC INI-Param: ENABLEPREGRANTARQ")
h323GKRegister = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKRegister.setStatus('current')
if mibBuilder.loadTexts: h323GKRegister.setDescription('This parameter related to Register/UnRegister buttons. Access: Instant. AC INI-Param: SHOULDREGISTER')
h323GKAlternativeGKUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKAlternativeGKUsed.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKAlternativeGKUsed.setDescription('Allows working with Alternative GK that should be provided by GK. Access: Offline. AC INI-Param: ALTERNATIVEGKUSED')
h323GKUseRedundantGKOnRRJ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKUseRedundantGKOnRRJ.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKUseRedundantGKOnRRJ.setDescription('Useredundant Gatekeeper on receiving RRJ message. Access: Offline. AC INI-Param: USEREDUNDANTGKONRRJ')
h323GKEnableGKAutoDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKEnableGKAutoDiscovery.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKEnableGKAutoDiscovery.setDescription('Enables GK automatic discovery mechanism. Access: Offline. AC INI-Param: ENABLEGKAUTODISCOVERY')
h323GKGKAutoDiscoveryIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323GKGKAutoDiscoveryIP.setStatus('obsolete')
if mibBuilder.loadTexts: h323GKGKAutoDiscoveryIP.setDescription('Multicast IP Address for GK automatic discovery. Access: Offline. AC INI-Param: GKAUTODISCOVERYIP')
gkIPTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 21), )
if mibBuilder.loadTexts: gkIPTable.setStatus('obsolete')
if mibBuilder.loadTexts: gkIPTable.setDescription('')
gkIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 21, 1), ).setIndexNames((0, "AcGateway", "gkIPIndex"))
if mibBuilder.loadTexts: gkIPEntry.setStatus('obsolete')
if mibBuilder.loadTexts: gkIPEntry.setDescription('')
gkIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: gkIPIndex.setStatus('obsolete')
if mibBuilder.loadTexts: gkIPIndex.setDescription('Entry number, starting at 0. AC INI-Param: GateKeeperIp_Index')
gkIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gkIPRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: gkIPRowStatus.setDescription('This object allows entries to be created and deleted from the table. For Reference: RFC 1903, Textual Conventions for Version 2 of the Simple Network Management Protocol (SNMPv2). Access: Instant. AC INI-Param: N/A')
gkIPAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gkIPAction.setStatus('obsolete')
if mibBuilder.loadTexts: gkIPAction.setDescription('Development Impending. AC INI-Param: N/A')
gkIPActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gkIPActionResult.setStatus('obsolete')
if mibBuilder.loadTexts: gkIPActionResult.setDescription('Development Impending. AC INI-Param: N/A')
gkIPGatekeeperIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gkIPGatekeeperIP.setStatus('obsolete')
if mibBuilder.loadTexts: gkIPGatekeeperIP.setDescription('IP of GK. Access: Offline. AC INI-Param: GateKeeperIp_IpAddress')
gkIPGateleeperID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 21, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gkIPGateleeperID.setStatus('obsolete')
if mibBuilder.loadTexts: gkIPGateleeperID.setDescription('ID of GK. Access: Offline. AC INI-Param: GateKeeperIp_Id')
registerPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22), )
if mibBuilder.loadTexts: registerPrefixTable.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixTable.setDescription('The registration prefixes are applicable for Digital E1/T1 and FXO gateways for registration to Gatekeeper. If not used the gateway will register with its endpoint phone numbers. ')
registerPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22, 1), ).setIndexNames((0, "AcGateway", "registerPrefixIndex"))
if mibBuilder.loadTexts: registerPrefixEntry.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixEntry.setDescription('')
registerPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: registerPrefixIndex.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixIndex.setDescription('Entry number, starting at 0. AC INI-Param: RegistrationPrefix_Index')
registerPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: registerPrefixRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixRowStatus.setDescription('This object allows entries to be created and deleted from the table. For Reference: RFC 1903, Textual Conventions for Version 2 of the Simple Network Management Protocol (SNMPv2). Access: Instant. AC INI-Param: N/A')
registerPrefixAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: registerPrefixAction.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixAction.setDescription('Development Impending. AC INI-Param: N/A')
registerPrefixActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: registerPrefixActionResult.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixActionResult.setDescription('Development Impending. AC INI-Param: N/A')
registerPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: registerPrefixPrefix.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixPrefix.setDescription('Usually the prefixes will define range of PSTN/PBX phone numbers that the gateway can handle. Access: Offline. AC INI-Param: RegistrationPrefix_Prefix')
registerPrefixNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("unknown", 0), ("e164Public", 1), ("private", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: registerPrefixNumberPlan.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixNumberPlan.setDescription('Number Plan that will be used when Registration Type is PartyNumber. Access: Instant. AC INI-Param: RegistrationPrefix_NumberPlan')
registerPrefixNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("unknown", 0), ("international-Level2Regional", 1), ("national-Level1Regional", 2), ("networkSpecific-NetworkPISN", 3), ("subscriber-Level0Regional", 4), ("abbreviated", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: registerPrefixNumberType.setStatus('obsolete')
if mibBuilder.loadTexts: registerPrefixNumberType.setDescription('Number Type that will be used when Registration Type is PartyNumber. Access: Instant. AC INI-Param: RegistrationPrefix_NumberType')
gkRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 30))
gkRedundancyUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gkRedundancyUsed.setStatus('obsolete')
if mibBuilder.loadTexts: gkRedundancyUsed.setDescription('Allow Gatekeeper redundancy. At least one redundant Gatekeeper should be defined. Access: Instant. AC INI-Param: ISREDUNDANTGKUSED')
gkRedundancyTimeBetweenGKsLoops = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 30, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gkRedundancyTimeBetweenGKsLoops.setStatus('obsolete')
if mibBuilder.loadTexts: gkRedundancyTimeBetweenGKsLoops.setDescription('Time between the gateway retries to connect to Gatekeeper if connection was lost (seconds). Access: Instant. AC INI-Param: TIMEBETWEENGKSLOOPS')
gkRAI = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 31))
gkRAIEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gkRAIEnable.setStatus('obsolete')
if mibBuilder.loadTexts: gkRAIEnable.setDescription('Enable sending of H.323 Resource Avaialable Indication message to Gatekeeper due to overload. Access: Instant. AC INI-Param: ENABLERAI')
gkRAIHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 31, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gkRAIHighThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: gkRAIHighThreshold.setDescription("Percentage of active calls in order to send 'Almost out of resources' RAI. Access: Instant. AC INI-Param: RAIHIGHTHRESHOLD")
gkRAILowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 31, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gkRAILowThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: gkRAILowThreshold.setDescription("percentage of active calls to send 'Resources OK' RAI. Access: Instant. AC INI-Param: RAILOWTHRESHOLD")
gkRAILoopTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 11, 31, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gkRAILoopTime.setStatus('obsolete')
if mibBuilder.loadTexts: gkRAILoopTime.setDescription('Time period to check call resources (seconds). Access: Instant. AC INI-Param: RAILOOPTIME')
h323DTMF = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12))
h323DTMFHookFlashOption = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("h245UserInput", 1), ("h245Signal", 2), ("q931UserInfo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323DTMFHookFlashOption.setStatus('obsolete')
if mibBuilder.loadTexts: h323DTMFHookFlashOption.setDescription('Detect and send Hook-Flash using the selected method. Access: Instant. AC INI-Param: HOOKFLASHOPTION')
h323DTMFRxDtmfOption = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("h245UserInput", 1), ("h245Signal", 2), ("rFC2833", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323DTMFRxDtmfOption.setStatus('obsolete')
if mibBuilder.loadTexts: h323DTMFRxDtmfOption.setDescription('Declare support for RFC 2833 in SDP. Access: Instant. AC INI-Param: ISFALLBACKUSED')
dTMFOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 21), )
if mibBuilder.loadTexts: dTMFOptionsTable.setStatus('obsolete')
if mibBuilder.loadTexts: dTMFOptionsTable.setDescription('The names of the five possible coders.')
dTMFOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 21, 1), ).setIndexNames((0, "AcGateway", "dTMFOptionsIndex"))
if mibBuilder.loadTexts: dTMFOptionsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dTMFOptionsEntry.setDescription('')
dTMFOptionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: dTMFOptionsIndex.setStatus('obsolete')
if mibBuilder.loadTexts: dTMFOptionsIndex.setDescription('Entry number, starting at 0. AC INI-Param: N/A')
dTMFOptionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dTMFOptionsRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: dTMFOptionsRowStatus.setDescription('This object allows entries to be created and deleted from the table. For Reference: RFC 1903, Textual Conventions for Version 2 of the Simple Network Management Protocol (SNMPv2). Access: Instant. AC INI-Param: N/A')
dTMFOptionsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dTMFOptionsAction.setStatus('obsolete')
if mibBuilder.loadTexts: dTMFOptionsAction.setDescription('Development Impending. AC INI-Param: N/A')
dTMFOptionsActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("developmentImpending", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dTMFOptionsActionResult.setStatus('obsolete')
if mibBuilder.loadTexts: dTMFOptionsActionResult.setDescription('Development Impending. AC INI-Param: N/A')
dTMFOptionsTxDTMFOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 12, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("h245UserInput", 1), ("h245Signal", 2), ("q931UserInfo", 3), ("rFC2833", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dTMFOptionsTxDTMFOption.setStatus('obsolete')
if mibBuilder.loadTexts: dTMFOptionsTxDTMFOption.setDescription('Transmit DTMF option. Access: Instant. AC INI-Param: N/A')
h323Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 13))
h323PortsH225ListenPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 13, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323PortsH225ListenPort.setStatus('obsolete')
if mibBuilder.loadTexts: h323PortsH225ListenPort.setDescription('Port on which the gateway expects to receive H.225 Setup messages. (Usually 1720). Access: Offline. AC INI-Param: H225LISTENPORT')
h323PortsH225DialPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 13, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323PortsH225DialPort.setStatus('obsolete')
if mibBuilder.loadTexts: h323PortsH225DialPort.setDescription('Port on which the gateway sends H.225 Setup messages. (Usually 1720). Access: Offline. AC INI-Param: H225DIALPORT')
h323PortsH323BasePort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 13, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323PortsH323BasePort.setStatus('obsolete')
if mibBuilder.loadTexts: h323PortsH323BasePort.setDescription('Defines range for gateway H.225/H.245 local port messages. Access: Offline. AC INI-Param: H323BASEPORT')
h323PortsRasSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 13, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323PortsRasSourcePort.setStatus('obsolete')
if mibBuilder.loadTexts: h323PortsRasSourcePort.setDescription('RAS requests source port. Access: Instant. AC INI-Param: RASSOURCEPORT')
h323PortsRasDestPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 13, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323PortsRasDestPort.setStatus('obsolete')
if mibBuilder.loadTexts: h323PortsRasDestPort.setDescription('RAS requests destination port. Access: Instant. AC INI-Param: RASDESTPORT')
h323Auth = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 14))
h323AuthEnableH235Security = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323AuthEnableH235Security.setStatus('obsolete')
if mibBuilder.loadTexts: h323AuthEnableH235Security.setDescription('Enable H.235 security. Access: Offline. AC INI-Param: ENABLEH235SECURITY')
h323AuthUserName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 14, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323AuthUserName.setStatus('obsolete')
if mibBuilder.loadTexts: h323AuthUserName.setDescription('User Name used for authentication. Access: Instant. AC INI-Param: USERNAME')
h323AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 14, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323AuthPassword.setStatus('obsolete')
if mibBuilder.loadTexts: h323AuthPassword.setDescription('Password used for authentication. Access: Instant. AC INI-Param: PASSWORD')
h323Misc = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15))
h323MiscIsSetupIncludeNum = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323MiscIsSetupIncludeNum.setStatus('obsolete')
if mibBuilder.loadTexts: h323MiscIsSetupIncludeNum.setDescription('Setup message contains called party number. Access: Instant. AC INI-Param: ISSETUPINCLUDENUM')
h323MiscIsSetupAckUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323MiscIsSetupAckUsed.setStatus('obsolete')
if mibBuilder.loadTexts: h323MiscIsSetupAckUsed.setDescription('Enable SetupAck messages for overlap mode. Access: Instant. AC INI-Param: ISSETUPACKUSED')
h323MiscH245InitTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323MiscH245InitTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: h323MiscH245InitTimeOut.setDescription('h245.channelsTimeout value. Access: Offline. AC INI-Param: H245INITTIMEOUT')
h323MiscEnableQ931Cause = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323MiscEnableQ931Cause.setStatus('obsolete')
if mibBuilder.loadTexts: h323MiscEnableQ931Cause.setDescription('H.225 Reason / Q.931 Cause is sent in H.323 Release Complete message. Access: Instant. AC INI-Param: ENABLEQ931CAUSE')
h323MiscEnableQ931Multiplexing = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323MiscEnableQ931Multiplexing.setStatus('obsolete')
if mibBuilder.loadTexts: h323MiscEnableQ931Multiplexing.setDescription('Use same socket for all H.225 messages. Access: Instant. AC INI-Param: ENABLEQ931MULTIPLEXING')
h323MiscSendChannelNonStandard = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323MiscSendChannelNonStandard.setStatus('obsolete')
if mibBuilder.loadTexts: h323MiscSendChannelNonStandard.setDescription('Send trunk and bchannel numbers on setup and call proceeding messages as nonStandard data. Access: Instant. AC INI-Param: SENDCHANNELNONSTANDARD')
h323MiscH245RoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323MiscH245RoundTripTime.setStatus('obsolete')
if mibBuilder.loadTexts: h323MiscH245RoundTripTime.setDescription('Time between H.245 Round Trip Delay messages (seconds). Access: Instant. AC INI-Param: H245ROUNDTRIPTIME')
h323MiscProgressBehavior = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 3, 1, 3, 15, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alert", 0), ("progress", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323MiscProgressBehavior.setStatus('obsolete')
if mibBuilder.loadTexts: h323MiscProgressBehavior.setDescription('Interworking behavior of Progress message (0-Alert, 1-Progress). Access: Instant. AC INI-Param: H323PROGRESSBEHAVIOR')
mibBuilder.exportSymbols("AcGateway", sbcRoutingSrcHost=sbcRoutingSrcHost, registerPrefixIndex=registerPrefixIndex, dnsInfoActionResult=dnsInfoActionResult, accountContactUser=accountContactUser, codersGroup2Entry=codersGroup2Entry, sasRegistrationManipulationAction=sasRegistrationManipulationAction, forwardTable=forwardTable, acEmergency=acEmergency, namesAction=namesAction, resourceManagementOverloadSensitivityLevel=resourceManagementOverloadSensitivityLevel, sipMiscAddTon2Rpi=sipMiscAddTon2Rpi, srcTEL2IPAction=srcTEL2IPAction, sipMisc=sipMisc, h323GKGwRegistrType=h323GKGwRegistrType, PYSNMP_MODULE_ID=acGateway, autoDialTable=autoDialTable, sbcRegistrationTime=sbcRegistrationTime, sipSASEnableRecordRoute=sipSASEnableRecordRoute, causeMapSIP2ISDNActionResult=causeMapSIP2ISDNActionResult, announcementToneID=announcementToneID, supServicesHookFlashCode=supServicesHookFlashCode, analogGWHotLineToneDuration=analogGWHotLineToneDuration, telProfileEnableAGC=telProfileEnableAGC, sbcIP2IPInboundManipulationRemoveFromRight=sbcIP2IPInboundManipulationRemoveFromRight, h323GKIsGateKeeperUsed=h323GKIsGateKeeperUsed, forwardTimeForNoReply=forwardTimeForNoReply, digitalGWLocalISDNRBSource=digitalGWLocalISDNRBSource, proxyIPProxyIP=proxyIPProxyIP, srvInfoDNSName3=srvInfoDNSName3, enableDidPortTable=enableDidPortTable, trunkGroupSettingsAction=trunkGroupSettingsAction, redirectNumberMapTel2IpTable=redirectNumberMapTel2IpTable, channelsStartingCh=channelsStartingCh, miscSecureCallsFromIp=miscSecureCallsFromIp, manipulationAndRoutingAltRoutingToneDuration=manipulationAndRoutingAltRoutingToneDuration, iPProfileVxxModemTransportType=iPProfileVxxModemTransportType, digitalGWConnectOnProgressInd=digitalGWConnectOnProgressInd, keypadFeaturesRejectAnonymousCall=keypadFeaturesRejectAnonymousCall, sipMiscSetDefaultOnIniFileProcess=sipMiscSetDefaultOnIniFileProcess, redirectNumberMapTel2IpSrcIPGroupID=redirectNumberMapTel2IpSrcIPGroupID, sipMiscMinSE=sipMiscMinSE, sipProxySetIsProxyHotSwap=sipProxySetIsProxyHotSwap, acTWCnonAllocateablePortsTable=acTWCnonAllocateablePortsTable, gkRAILowThreshold=gkRAILowThreshold, trunkGroupSettingsServingIPGroup=trunkGroupSettingsServingIPGroup, chargeCodesTable=chargeCodesTable, miscKeyCallPickup=miscKeyCallPickup, sipMiscEnableEarlyMedia=sipMiscEnableEarlyMedia, iPProfileCngDetectorMode=iPProfileCngDetectorMode, h323GKGKAutoDiscoveryIP=h323GKGKAutoDiscoveryIP, codersGroup4Rate=codersGroup4Rate, sipDTMFHookFlashOption=sipDTMFHookFlashOption, sipTxDTMFOptionTable=sipTxDTMFOptionTable, sipProxyName=sipProxyName, chargeCodesActionResult=chargeCodesActionResult, altRouteCauseIP2TELRowStatus=altRouteCauseIP2TELRowStatus, srdTable=srdTable, redirectNumberMapTel2IpSourceAddress=redirectNumberMapTel2IpSourceAddress, vmDigitPatternVmDigitPatternOnDNDExternal=vmDigitPatternVmDigitPatternOnDNDExternal, sipProxyUseGatewayNameForOptions=sipProxyUseGatewayNameForOptions, srcIP2TELDestPrefix=srcIP2TELDestPrefix, sbcMessageManipulationsIndex=sbcMessageManipulationsIndex, tonesEnableComfortTone=tonesEnableComfortTone, voiceMailLineTransferMode=voiceMailLineTransferMode, codersGroup1Rate=codersGroup1Rate, sasRegistrationManipulationTable=sasRegistrationManipulationTable, codersGroup0PacketizationTime=codersGroup0PacketizationTime, sipMiscSipSessionExpires=sipMiscSipSessionExpires, sipMiscEnableCIC=sipMiscEnableCIC, sbcAlternativeRoutingReasonsAction=sbcAlternativeRoutingReasonsAction, srcIP2TELTable=srcIP2TELTable, codersGroup2Name=codersGroup2Name, srcTEL2IPPrefixToAdd=srcTEL2IPPrefixToAdd, gwIPv6=gwIPv6, tel2IPRoutingSourceIPGroupID=tel2IPRoutingSourceIPGroupID, causeMapSIP2ISDNRowStatus=causeMapSIP2ISDNRowStatus, iPProfileAction=iPProfileAction, srcTEL2IPSuffix2Add=srcTEL2IPSuffix2Add, sipSAS=sipSAS, manipulationSetIp2TelRedirectReason=manipulationSetIp2TelRedirectReason, miscT38FaxMaxBufferSize=miscT38FaxMaxBufferSize, miscASSubscribeIPGroupID=miscASSubscribeIPGroupID, digitalGWextISDNSubaddressFormat=digitalGWextISDNSubaddressFormat, altRouteCause=altRouteCause, sipTxDTMFOptionValue=sipTxDTMFOptionValue, iE=iE, iPProfileCallLimit=iPProfileCallLimit, h323AuthPassword=h323AuthPassword, sbcRoutingDestUsernamePrefix=sbcRoutingDestUsernamePrefix, h323GKAlternativeGKUsed=h323GKAlternativeGKUsed, srcIP2TELAction=srcIP2TELAction, dstIP2TELTable=dstIP2TELTable, h323MiscEnableQ931Multiplexing=h323MiscEnableQ931Multiplexing, keypadFeaturesCFDeact=keypadFeaturesCFDeact, tel2IPRoutingRowStatus=tel2IPRoutingRowStatus, redirectNumberMapIp2TelNumberPlan=redirectNumberMapIp2TelNumberPlan, routing=routing, dstIP2TELNumOfDigitsToLeave=dstIP2TELNumOfDigitsToLeave, sipInterfaceAction=sipInterfaceAction, redirectNumberMapIp2TelEntry=redirectNumberMapIp2TelEntry, gwSecurityTLSReHandshakeInterval=gwSecurityTLSReHandshakeInterval, fastStart=fastStart, connectivityQosEffectivePeriod=connectivityQosEffectivePeriod, iPProfileProgressIndicatorToIP=iPProfileProgressIndicatorToIP, sbcAdmissionControlRequestDirection=sbcAdmissionControlRequestDirection, sipMiscGatewayName=sipMiscGatewayName, manipulationAndRoutingSIPReRoutingMode=manipulationAndRoutingSIPReRoutingMode, srdBlockUnRegUsers=srdBlockUnRegUsers, sipProxySetActionResult=sipProxySetActionResult, iPProfileSBCAllowedCodersGroupID=iPProfileSBCAllowedCodersGroupID, trunkGroupSettingsGatewayName=trunkGroupSettingsGatewayName, acDigitalOOSBehaviorForTrunkTable=acDigitalOOSBehaviorForTrunkTable, mlppFlashRTPDSCP=mlppFlashRTPDSCP, fxo=fxo, h323Auth=h323Auth, resourceManagementMaxCallDuration=resourceManagementMaxCallDuration, sasRegistrationManipulationEntry=sasRegistrationManipulationEntry, srvInfoAction=srvInfoAction, dstTEL2IPSuffix2Add=dstTEL2IPSuffix2Add, supServicesHeldTimeout=supServicesHeldTimeout, sipInterfaceTLSPort=sipInterfaceTLSPort, sbcIP2IPOutboundManipulationEntry=sbcIP2IPOutboundManipulationEntry, tel2IPRoutingAction=tel2IPRoutingAction, sbcIP2IPOutboundManipulationSrcIPGroupID=sbcIP2IPOutboundManipulationSrcIPGroupID, gkRAIHighThreshold=gkRAIHighThreshold, srdSettings=srdSettings, gwSecurityPeerHostNameVerificationMode=gwSecurityPeerHostNameVerificationMode, registerPrefixEntry=registerPrefixEntry, sipAuthUserName=sipAuthUserName, telProfileEnable911PSAP=telProfileEnable911PSAP, codersGroup4Table=codersGroup4Table, codersGroup2ActionRes=codersGroup2ActionRes, dnsInfoEntry=dnsInfoEntry, digitalGWextRemoveCallingName=digitalGWextRemoveCallingName, ipGroupAction=ipGroupAction, redirectNumberMapTel2IpRemoveFromRight=redirectNumberMapTel2IpRemoveFromRight, gwIPv6GwAppSecondaryMediaInterface=gwIPv6GwAppSecondaryMediaInterface, callerIDperPortTable=callerIDperPortTable, codersRowStatus=codersRowStatus, aMDTimeOut=aMDTimeOut, sipPortsTLSLocalSipPort=sipPortsTLSLocalSipPort, fastStartIsFastConnectUsed=fastStartIsFastConnectUsed, vmDigitPatternOnBusy=vmDigitPatternOnBusy, iSDNRxOverlapTable=iSDNRxOverlapTable, sbcRoutingIndex=sbcRoutingIndex, dialingEnableDigitDelivery=dialingEnableDigitDelivery, srvInfoRecordNum=srvInfoRecordNum, mWI=mWI, sipMiscSessionExpiresMethod=sipMiscSessionExpiresMethod, dstIP2TELActionResult=dstIP2TELActionResult, digitalGWSupportRedirectInFacility=digitalGWSupportRedirectInFacility, h323PortsRasSourcePort=h323PortsRasSourcePort, srvInfoPort2=srvInfoPort2, dstIP2TELPrefixToAdd=dstIP2TELPrefixToAdd, sbcAdmissionControlLimitType=sbcAdmissionControlLimitType, miscEnableSingleDSPTranscoding=miscEnableSingleDSPTranscoding, announcement=announcement, vmMWIOffCode=vmMWIOffCode, localISDNRBSourceIndex=localISDNRBSourceIndex, iP2TelRoutingEntry=iP2TelRoutingEntry, analogGW=analogGW, redirectNumberMapTel2IpIsPresentationRestricted=redirectNumberMapTel2IpIsPresentationRestricted, telProfileVoiceVolume=telProfileVoiceVolume, srcIP2TELEntry=srcIP2TELEntry, h323MiscIsSetupAckUsed=h323MiscIsSetupAckUsed, srvInfoPriority=srvInfoPriority, supServicesSendMeteringMessageToIP=supServicesSendMeteringMessageToIP, sipInterfaceRowStatus=sipInterfaceRowStatus, playRBToneToTrunkEntry=playRBToneToTrunkEntry, sipProxyEnableKeepAlive=sipProxyEnableKeepAlive, sipInterfaceActionResult=sipInterfaceActionResult, namesActionResult=namesActionResult, sipRegistrationIP=sipRegistrationIP, accountUsername=accountUsername, sipMiscUseSIPTgrp=sipMiscUseSIPTgrp, sbcEnableIIP2IPApplication=sbcEnableIIP2IPApplication, redirectNumberMapIp2TelDestinationPrefix=redirectNumberMapIp2TelDestinationPrefix, dstTEL2IPAction=dstTEL2IPAction, telProfileCodersGroupID=telProfileCodersGroupID, iP2TelRoutingSourceHostPrefix=iP2TelRoutingSourceHostPrefix, gwIPv6MediaIPVersionPreference=gwIPv6MediaIPVersionPreference, srvInfoIndex=srvInfoIndex, codersGroup3Action=codersGroup3Action, codersActionResult=codersActionResult, accountTable=accountTable, toneIndexSourcePrefix=toneIndexSourcePrefix, codersGroup3RowStatus=codersGroup3RowStatus, sipDTMFOutOfBandDtmfFormat=sipDTMFOutOfBandDtmfFormat, h323MiscProgressBehavior=h323MiscProgressBehavior, progressIndicatorToISDNEntry=progressIndicatorToISDNEntry, accountServedTrunkGroup=accountServedTrunkGroup, sbcRoutingDestSRDId=sbcRoutingDestSRDId, sbcIP2IPOutboundManipulationSrcHost=sbcIP2IPOutboundManipulationSrcHost, callerIDperPortEntry=callerIDperPortEntry, callerDisplayActionResult=callerDisplayActionResult, sbcAdmissionControlIpGroupID=sbcAdmissionControlIpGroupID, supServicesCHRRTimeout=supServicesCHRRTimeout, h323AuthUserName=h323AuthUserName, sbcMessageManipulationsManipulationSetID=sbcMessageManipulationsManipulationSetID, connectivityQosSamplesToAvarage=connectivityQosSamplesToAvarage, digitalGWEnableTransferCap=digitalGWEnableTransferCap, ipGroupProfileId=ipGroupProfileId, acRemoveCallingNameForTrunkEntry=acRemoveCallingNameForTrunkEntry, mWIDisplay=mWIDisplay, iPProfileCopyDest2RedirectNumber=iPProfileCopyDest2RedirectNumber, tel2IPRoutingDestIPGroupID=tel2IPRoutingDestIPGroupID, dstIP2TELSourcePrefix=dstIP2TELSourcePrefix, sipPortsDestinationPort=sipPortsDestinationPort, dnsInfoFirstIPAddress=dnsInfoFirstIPAddress, sipTxDTMFOptionIndex=sipTxDTMFOptionIndex, redirectNumberMapIp2TelRemoveFromLeft=redirectNumberMapIp2TelRemoveFromLeft, sipSASEnable=sipSASEnable, iP2TelRoutingSourceIPGroupID=iP2TelRoutingSourceIPGroupID, sbcAlternativeRoutingReasonsReleaseCause=sbcAlternativeRoutingReasonsReleaseCause, channelsEntry=channelsEntry, sipDTMFISDNOverlapIPtoTelDialing=sipDTMFISDNOverlapIPtoTelDialing, fxoGuardTimeBetweenCalls=fxoGuardTimeBetweenCalls, authPort=authPort, toneIndexFXSPortFirst=toneIndexFXSPortFirst, keypadFeaturesCLIRDeact=keypadFeaturesCLIRDeact, accountEntry=accountEntry, sbcRoutingDestHost=sbcRoutingDestHost, srcIP2TELIndex=srcIP2TELIndex, sipSASShortNumberLength=sipSASShortNumberLength, h323GKIsGkFallbackUsed=h323GKIsGkFallbackUsed, h323PortsH225ListenPort=h323PortsH225ListenPort, codersGroup1Entry=codersGroup1Entry, gkIPGateleeperID=gkIPGateleeperID, supServicesHoldFormat=supServicesHoldFormat, redirectNumberMapIp2TelTable=redirectNumberMapIp2TelTable, sbcIP2IPInboundManipulationSrcUsernamePrefix=sbcIP2IPInboundManipulationSrcUsernamePrefix, accountRowStatus=accountRowStatus, forwardOnBusyTrunkDestEntry=forwardOnBusyTrunkDestEntry, redirectNumberMapTel2IpDestinationPrefix=redirectNumberMapTel2IpDestinationPrefix, trunkGroupSettingsIndex=trunkGroupSettingsIndex, misc=misc, srvInfoWeight=srvInfoWeight, codersGroup1RowStatus=codersGroup1RowStatus, vmMWI=vmMWI, forwardOnBusyTrunkDestActionResult=forwardOnBusyTrunkDestActionResult, dstIP2TELNumberPlan=dstIP2TELNumberPlan, sipRetransmissionT1Rtx=sipRetransmissionT1Rtx, keypadFeaturesCFBusy=keypadFeaturesCFBusy, streamingNetAnnAnncID=streamingNetAnnAnncID, gwSecurityVerifyServerCertificate=gwSecurityVerifyServerCertificate, sbcAdmissionControlSrdID=sbcAdmissionControlSrdID, tonesStutterToneDuration=tonesStutterToneDuration, mlppNormalizedServiceDomain=mlppNormalizedServiceDomain, dialing=dialing, caleaInterceptionDirection=caleaInterceptionDirection, miscLDAPMobileNumberAttributeName=miscLDAPMobileNumberAttributeName, conferenceID=conferenceID, dTMFOptionsActionResult=dTMFOptionsActionResult, h323GKMaxRetries=h323GKMaxRetries)
mibBuilder.exportSymbols("AcGateway", dstTEL2IPEntry=dstTEL2IPEntry, tel2IPRoutingSourceTrunkGroupID=tel2IPRoutingSourceTrunkGroupID, codersGroup4Name=codersGroup4Name, dnsInfoTable=dnsInfoTable, gwConfiguration=gwConfiguration, autoDialActionResult=autoDialActionResult, sbcRoutingTable=sbcRoutingTable, sbcIP2IPOutboundManipulationSuffix2Add=sbcIP2IPOutboundManipulationSuffix2Add, sipRegistrationName=sipRegistrationName, trunkGroupSettingsRowStatus=trunkGroupSettingsRowStatus, sipInterfaceEntry=sipInterfaceEntry, sipProxyAlwaysSendToProxy=sipProxyAlwaysSendToProxy, miscEnableFaxRerouting=miscEnableFaxRerouting, trunkGroupSettingsContactUser=trunkGroupSettingsContactUser, sipDTMFUseDigitForSpecialDTMF=sipDTMFUseDigitForSpecialDTMF, altRouteCauseTEL2IPRowStatus=altRouteCauseTEL2IPRowStatus, phoneContextTON=phoneContextTON, telProfileDJBufMinDelay=telProfileDJBufMinDelay, resourceManagement=resourceManagement, srvInfoWeight3=srvInfoWeight3, keypadFeaturesCFNoAnswer=keypadFeaturesCFNoAnswer, forwardOnBusyTrunkDestRowStatus=forwardOnBusyTrunkDestRowStatus, iSDNTransferCapabilityEntry=iSDNTransferCapabilityEntry, channelsIndex=channelsIndex, channelsAction=channelsAction, iPProfileMediaSecurityBehavior=iPProfileMediaSecurityBehavior, enableCallWaitingPerPortIsUsed=enableCallWaitingPerPortIsUsed, iPProfileEntry=iPProfileEntry, sipAuth=sipAuth, channelsStartingPhoneNum=channelsStartingPhoneNum, namesPortName=namesPortName, manipulationAddTrunkGroupAsPrefixToSource=manipulationAddTrunkGroupAsPrefixToSource, h323ConnectionModesIsTunnelingUsed=h323ConnectionModesIsTunnelingUsed, h323MiscH245RoundTripTime=h323MiscH245RoundTripTime, codersGroup2PayloadType=codersGroup2PayloadType, autoDialEntry=autoDialEntry, codersGroup0Index=codersGroup0Index, codersGroup4PacketizationTime=codersGroup4PacketizationTime, sipProxyLoadBalancingMethod=sipProxyLoadBalancingMethod, supServicesConferenceEstablishCode=supServicesConferenceEstablishCode, sipInterfaceApplicationType=sipInterfaceApplicationType, sipAuthCnonce=sipAuthCnonce, telProfileECNlpMode=telProfileECNlpMode, sipProxyKeepAliveTime=sipProxyKeepAliveTime, streamingStopRecordingOnNoSpeachTimeout=streamingStopRecordingOnNoSpeachTimeout, manipulationAndRoutingAltRoutingTel2IpQosAllowTheNCall=manipulationAndRoutingAltRoutingTel2IpQosAllowTheNCall, sipMiscEnableReasonHeader=sipMiscEnableReasonHeader, sbcIP2IPOutboundManipulationDestHost=sbcIP2IPOutboundManipulationDestHost, sbcIP2IPOutboundManipulationRemoveFromLeft=sbcIP2IPOutboundManipulationRemoveFromLeft, gwIPv6GwAppPrimaryMediaInterface=gwIPv6GwAppPrimaryMediaInterface, pIForDisconnectMsgValue=pIForDisconnectMsgValue, iP2TelRoutingTrunkGroupID=iP2TelRoutingTrunkGroupID, sipMiscEnableSRVQuery=sipMiscEnableSRVQuery, mWIExpirationTime=mWIExpirationTime, sbcAdmissionControlRequestType=sbcAdmissionControlRequestType, conferenceEnableDTMFClamping=conferenceEnableDTMFClamping, tel2IPRoutingDestHostPrefix=tel2IPRoutingDestHostPrefix, codersPayloadType=codersPayloadType, telProfileIsFaxUsed=telProfileIsFaxUsed, causeMapSIP2ISDNSIPResponse=causeMapSIP2ISDNSIPResponse, sipMiscDNSQueryType=sipMiscDNSQueryType, chargeCodesPeriod1EndTime=chargeCodesPeriod1EndTime, sipSASEnableENUM=sipSASEnableENUM, sipSASLocalSIPTlsPort=sipSASLocalSIPTlsPort, ipGroupSIPGroupName=ipGroupSIPGroupName, streamingNumOfEndPoints=streamingNumOfEndPoints, tonesFirstCallRBTId=tonesFirstCallRBTId, srcTEL2IPEntry=srcTEL2IPEntry, gkRAILoopTime=gkRAILoopTime, authActionResult=authActionResult, vmDigitPatternOnDND=vmDigitPatternOnDND, codersEntry=codersEntry, trunkGroupSettingsActionResult=trunkGroupSettingsActionResult, pIForDisconnectMsgTable=pIForDisconnectMsgTable, acEmergencyNumbersIndex=acEmergencyNumbersIndex, gkIPGatekeeperIP=gkIPGatekeeperIP, tel2IPRoutingPrefix=tel2IPRoutingPrefix, manipulationAddPrefixToRedirectNumber=manipulationAddPrefixToRedirectNumber, portName=portName, sbcIP2IPOutboundManipulationRowStatus=sbcIP2IPOutboundManipulationRowStatus, vmSMDITimeOut=vmSMDITimeOut, enableCallWaitingPerPortAction=enableCallWaitingPerPortAction, srcIP2TELPrefix=srcIP2TELPrefix, iPProfileRTPRedundancyDepth=iPProfileRTPRedundancyDepth, digitalGWEnableTDMOverIp=digitalGWEnableTDMOverIp, sipRegistration=sipRegistration, telProfileMaxFlashHookDetectionPeriod=telProfileMaxFlashHookDetectionPeriod, playRBToneToTrunkIndex=playRBToneToTrunkIndex, sbcIP2IPOutboundManipulationRequestType=sbcIP2IPOutboundManipulationRequestType, conferenceBipOnConference=conferenceBipOnConference, dstTEL2IPIndex=dstTEL2IPIndex, enableCallWaitingPerPortPort=enableCallWaitingPerPortPort, sipProxyDNSQueryType=sipProxyDNSQueryType, causeMapISDN2SIPTable=causeMapISDN2SIPTable, sipProxyEnableSRVQuery=sipProxyEnableSRVQuery, iPProfileActionResult=iPProfileActionResult, sbcRoutingAction=sbcRoutingAction, digitalGWextDefaultCauseMapISDN2IP=digitalGWextDefaultCauseMapISDN2IP, causeMapISDN2SIPActionResult=causeMapISDN2SIPActionResult, sbcIP2IPInboundManipulationLeaveFromRight=sbcIP2IPInboundManipulationLeaveFromRight, phoneContextIndex=phoneContextIndex, phoneContextTable=phoneContextTable, srdMediaRealm=srdMediaRealm, ipGroupContactUser=ipGroupContactUser, ipGroupAlwaysUseRouteTable=ipGroupAlwaysUseRouteTable, dstTEL2IPIsPresentationRestricted=dstTEL2IPIsPresentationRestricted, phoneContextActionResult=phoneContextActionResult, iP2TelRoutingAction=iP2TelRoutingAction, sbcIP2IPInboundManipulationManipulatedURI=sbcIP2IPInboundManipulationManipulatedURI, sipRetransmissionRetryAfterTime=sipRetransmissionRetryAfterTime, sipMiscComfortNoiseNegotiation=sipMiscComfortNoiseNegotiation, forwardOnBusyTrunkDestTrunkGroupId=forwardOnBusyTrunkDestTrunkGroupId, miscDisconnectOnDialTone=miscDisconnectOnDialTone, resourceManagementMaxActiveCalls=resourceManagementMaxActiveCalls, codersName=codersName, enableDidPortIndex=enableDidPortIndex, sbcClassificationSrcAddress=sbcClassificationSrcAddress, telProfileEnableVoiceMailDelay=telProfileEnableVoiceMailDelay, acTWCnonAllocateablePortsNumber=acTWCnonAllocateablePortsNumber, codersGroup0ActionRes=codersGroup0ActionRes, sipAuthChallengeCachingMode=sipAuthChallengeCachingMode, dstTEL2IPActionResult=dstTEL2IPActionResult, tel2IPRoutingAddress=tel2IPRoutingAddress, sbcIP2IPOutboundManipulationActionResult=sbcIP2IPOutboundManipulationActionResult, codersGroup2Rate=codersGroup2Rate, sbcClassificationTable=sbcClassificationTable, chargeCodesPeriod1PulseInterval=chargeCodesPeriod1PulseInterval, rtpOnlyModeForTrunkTable=rtpOnlyModeForTrunkTable, channelsSetting=channelsSetting, callerDisplayCallerDisplay=callerDisplayCallerDisplay, sipRegistrationIsNeeded=sipRegistrationIsNeeded, h323PortsH225DialPort=h323PortsH225DialPort, h323DTMFRxDtmfOption=h323DTMFRxDtmfOption, sipMiscSubject=sipMiscSubject, sbcMessageManipulationsActionType=sbcMessageManipulationsActionType, forwardOnBusyTrunkDestIndex=forwardOnBusyTrunkDestIndex, iP2TelRoutingSrcPrefix=iP2TelRoutingSrcPrefix, manipulationSourceMode=manipulationSourceMode, h323DestEncodType=h323DestEncodType, channelsProfileID=channelsProfileID, manipulationAndRouting=manipulationAndRouting, fxoRingsBeforeCallerID=fxoRingsBeforeCallerID, codersGroup0Name=codersGroup0Name, sbcClassificationSrcIPGroupId=sbcClassificationSrcIPGroupId, srdMaxNumOfRegUsers=srdMaxNumOfRegUsers, redirectNumberMapIp2TelNumberType=redirectNumberMapIp2TelNumberType, autoDialIsUsed=autoDialIsUsed, sipMiscEnableSemiAttendedTransfer=sipMiscEnableSemiAttendedTransfer, srdIntraSRDMediaAnchoring=srdIntraSRDMediaAnchoring, channelsTrunkGroupID=channelsTrunkGroupID, dstIP2TELSuffix2Add=dstIP2TELSuffix2Add, sbcAlternativeRoutingReasonsIndex=sbcAlternativeRoutingReasonsIndex, telProfileEnableEarlyMedia=telProfileEnableEarlyMedia, sbcIP2IPInboundManipulationRemoveFromLeft=sbcIP2IPInboundManipulationRemoveFromLeft, sipProxySetProxyLoadBalancingMethod=sipProxySetProxyLoadBalancingMethod, miscWANIPAddress=miscWANIPAddress, digitalGWEnableISDNTunnelingIp2Tel=digitalGWEnableISDNTunnelingIp2Tel, sipMiscIsUserPhone=sipMiscIsUserPhone, mlppCallPriorityMode=mlppCallPriorityMode, sasRegistrationManipulationRemoveFromRight=sasRegistrationManipulationRemoveFromRight, sipAuthMode=sipAuthMode, h323DTMF=h323DTMF, manipulationAndRoutingRedundantRoutingMode=manipulationAndRoutingRedundantRoutingMode, iPProfileIPDiffServ=iPProfileIPDiffServ, srvInfoInternalDomainName=srvInfoInternalDomainName, manipulationAndRoutingModeIp2Tel=manipulationAndRoutingModeIp2Tel, codersGroup3Name=codersGroup3Name, sipPortsTCPLocalSipPort=sipPortsTCPLocalSipPort, mlppDefaultCallPriority=mlppDefaultCallPriority, codersGroup0PayloadType=codersGroup0PayloadType, sipSASProxySet=sipSASProxySet, codersGroup4RowStatus=codersGroup4RowStatus, sipSASLocalSIPTcpPort=sipSASLocalSIPTcpPort, dialingDialPlanIndex=dialingDialPlanIndex, codersGroup3Index=codersGroup3Index, dIDDelayBeforeDidWink=dIDDelayBeforeDidWink, pIForDisconnectMsgIndex=pIForDisconnectMsgIndex, sipSubscribeSubscriptionMode=sipSubscribeSubscriptionMode, srcIP2TELSourceIPAddress=srcIP2TELSourceIPAddress, iPProfileECE=iPProfileECE, sipInterfaceIndex=sipInterfaceIndex, codersGroup2RowStatus=codersGroup2RowStatus, sbc=sbc, manipulationUseSourceNumberAsDisplayName=manipulationUseSourceNumberAsDisplayName, codersGroup4PayloadType=codersGroup4PayloadType, telProfileTable=telProfileTable, enableCallWaitingPerPortActionResult=enableCallWaitingPerPortActionResult, callerIDEnable=callerIDEnable, telProfileEnableDIDWink=telProfileEnableDIDWink, authModule=authModule, pIForDisconnectMsgEntry=pIForDisconnectMsgEntry, iPProfileRemoteBaseUDPPort=iPProfileRemoteBaseUDPPort, vmSMDIEnable=vmSMDIEnable, causeMapISDN2SIPSIPResponse=causeMapISDN2SIPSIPResponse, sbcClassificationActionResult=sbcClassificationActionResult, sipRegistrationReRegisterOnConnectionFailure=sipRegistrationReRegisterOnConnectionFailure, sipProxyRedundancyMode=sipProxyRedundancyMode, sbcIP2IPInboundManipulationSrcIPGroupID=sbcIP2IPInboundManipulationSrcIPGroupID, vmDigitPatternExternalCall=vmDigitPatternExternalCall, dialingIsSpecialDigits=dialingIsSpecialDigits, iP2TelRoutingAddress=iP2TelRoutingAddress, supServicesConferenceEnable3Way=supServicesConferenceEnable3Way, forwardForwardType=forwardForwardType, dnsInfoDomainName=dnsInfoDomainName, phoneContextRowStatus=phoneContextRowStatus, acRemoveCallingNameForTrunkIndex=acRemoveCallingNameForTrunkIndex, acTimers=acTimers, srcTEL2IPPrefix=srcTEL2IPPrefix, supServicesNameID=supServicesNameID, registerPrefixAction=registerPrefixAction, codersGroup3Entry=codersGroup3Entry, acDigitalOOSBehaviorForTrunkValue=acDigitalOOSBehaviorForTrunkValue, fxoWaitForDialTime=fxoWaitForDialTime, callerIDperPortIndex=callerIDperPortIndex, connectivityQosMaxAllowedDelay=connectivityQosMaxAllowedDelay, sipMiscOPTIONSUserPart=sipMiscOPTIONSUserPart, tonesFirstCallWaitingToneID=tonesFirstCallWaitingToneID, manipulationAndRoutingFilterCalls2Ip=manipulationAndRoutingFilterCalls2Ip, sbcEnableISBCApplication=sbcEnableISBCApplication, phoneContextPhoneContext=phoneContextPhoneContext, telProfileRowStatus=telProfileRowStatus, acTWCnonAllocateablePortsIndex=acTWCnonAllocateablePortsIndex, codersRate=codersRate, mlppRoutineRTPDSCP=mlppRoutineRTPDSCP, srcTEL2IPDestPrefix=srcTEL2IPDestPrefix, telProfileDisconnectOnBusyTone=telProfileDisconnectOnBusyTone, digitalGWEnableCallingPartyCategory=digitalGWEnableCallingPartyCategory, miscCallForwardRingToneID=miscCallForwardRingToneID, dnsInfoIndex=dnsInfoIndex, sipMiscEnableSIPS=sipMiscEnableSIPS, manipulationAndRoutingPreferRouteTable=manipulationAndRoutingPreferRouteTable, codersGroup0SilenceSuppression=codersGroup0SilenceSuppression, altRouteCauseTEL2IPAction=altRouteCauseTEL2IPAction, redirectNumberMapIp2TelAction=redirectNumberMapIp2TelAction, streamingMscmlID=streamingMscmlID, h323H323IDString=h323H323IDString, h323AuthEnableH235Security=h323AuthEnableH235Security, sipRegistrationRegistrarTransportType=sipRegistrationRegistrarTransportType, fxoEnableVoiceDetection=fxoEnableVoiceDetection, acDigitalOOSBehaviorForTrunkEntry=acDigitalOOSBehaviorForTrunkEntry, accountIndex=accountIndex, srvInfoWeight2=srvInfoWeight2, codersInterval=codersInterval, autoDialDestPhoneNumber=autoDialDestPhoneNumber, sipDTMFMinRoutingOverlapDigits=sipDTMFMinRoutingOverlapDigits, sipMiscResetOnINIFileDownload=sipMiscResetOnINIFileDownload, localISDNRBSourceTable=localISDNRBSourceTable, sbcAlternativeRoutingReasonsRowStatus=sbcAlternativeRoutingReasonsRowStatus, srvInfoRowStatus=srvInfoRowStatus, manipulationSetIp2TelRedirectScreeningIndicator=manipulationSetIp2TelRedirectScreeningIndicator, chargeCodesRowStatus=chargeCodesRowStatus, digitalGWext=digitalGWext, iP2TelRoutingRowStatus=iP2TelRoutingRowStatus, tel2IPRoutingEntry=tel2IPRoutingEntry)
mibBuilder.exportSymbols("AcGateway", phoneContextAction=phoneContextAction, phoneContextEntry=phoneContextEntry, telProfilePreference=telProfilePreference, sipPorts=sipPorts, gkIPTable=gkIPTable, gwSecuritySRTPofferedSuites=gwSecuritySRTPofferedSuites, supServicesEnableHold2ISDN=supServicesEnableHold2ISDN, redirectNumberMapTel2IpRemoveFromLeft=redirectNumberMapTel2IpRemoveFromLeft, codersGroup3Table=codersGroup3Table, sipMiscEnableRpiHeader=sipMiscEnableRpiHeader, keypadFeaturesHotLine=keypadFeaturesHotLine, telProfileEntry=telProfileEntry, iPProfileSCE=iPProfileSCE, ipGroupDescription=ipGroupDescription, miscDisconnectOnBusyTone=miscDisconnectOnBusyTone, fastStartIsFSOpenMediaOnConnect=fastStartIsFSOpenMediaOnConnect, redirectNumberMapTel2IpPrefixToAdd=redirectNumberMapTel2IpPrefixToAdd, keypadFeaturesHotLineDeact=keypadFeaturesHotLineDeact, codersGroup1SilenceSuppression=codersGroup1SilenceSuppression, sipDTMFIsDTMFUsed=sipDTMFIsDTMFUsed, vmDigitPatternVmDigitPatternNoReasonExternal=vmDigitPatternVmDigitPatternNoReasonExternal, sipProxyIsHotSwap=sipProxyIsHotSwap, h323MiscH245InitTimeOut=h323MiscH245InitTimeOut, dstIP2TELEntry=dstIP2TELEntry, iESendIEOnTG=iESendIEOnTG, telProfileEnableCurrentDisconnect=telProfileEnableCurrentDisconnect, trunkGroupSettingsChannelSelectMode=trunkGroupSettingsChannelSelectMode, ipGroupEnableSurvivability=ipGroupEnableSurvivability, sbcIP2IPInboundManipulationEntry=sbcIP2IPInboundManipulationEntry, digitalGWEnableUuiTel2Ip=digitalGWEnableUuiTel2Ip, fxsSetOOSOnRegistrationFail=fxsSetOOSOnRegistrationFail, codersTable=codersTable, sipAuthMutualAuthenticationMode=sipAuthMutualAuthenticationMode, dnsInfoAction=dnsInfoAction, digitalGWISDNRxOverlap=digitalGWISDNRxOverlap, sipMiscUseToHeaderAsCalledNum=sipMiscUseToHeaderAsCalledNum, altRouteCauseIP2TELActionResult=altRouteCauseIP2TELActionResult, gkRedundancy=gkRedundancy, acTimersIPAlertTimeout=acTimersIPAlertTimeout, channelsModule=channelsModule, srcIP2TELRowStatus=srcIP2TELRowStatus, sipSubscribe=sipSubscribe, redirectNumberMapIp2TelLeaveFromRight=redirectNumberMapIp2TelLeaveFromRight, gwSecuritySIPSRequireClientCertificate=gwSecuritySIPSRequireClientCertificate, mWIServerTransportType=mWIServerTransportType, mlppPreemptionToneDuration=mlppPreemptionToneDuration, sipTxDTMFOptionEntry=sipTxDTMFOptionEntry, dstTEL2IPPrefix=dstTEL2IPPrefix, redirectNumberMapTel2IpSrcTrunkGroupID=redirectNumberMapTel2IpSrcTrunkGroupID, srvInfoPort=srvInfoPort, chargeCodesPeriod3PulsesOnAnswer=chargeCodesPeriod3PulsesOnAnswer, registerPrefixActionResult=registerPrefixActionResult, vmDigitPatternVmDigitPatternOnBusyExternal=vmDigitPatternVmDigitPatternOnBusyExternal, sbcRoutingSrcUsernamePrefix=sbcRoutingSrcUsernamePrefix, tel2IPRoutingIndex=tel2IPRoutingIndex, sbcIP2IPOutboundManipulationDestIPGroupID=sbcIP2IPOutboundManipulationDestIPGroupID, iPProfileSBCAllowedCodersMode=iPProfileSBCAllowedCodersMode, callerDisplayIsUsed=callerDisplayIsUsed, sipProxyHotSwapRtx=sipProxyHotSwapRtx, iP2TelRoutingDestHostPrefix=iP2TelRoutingDestHostPrefix, sipRetransmissionSipMaxRtx=sipRetransmissionSipMaxRtx, sbcMessageManipulationsRowStatus=sbcMessageManipulationsRowStatus, progressIndicators2IP=progressIndicators2IP, sipMiscUseAORInReferToHeader=sipMiscUseAORInReferToHeader, telProfileMWIanalogLamp=telProfileMWIanalogLamp, sbcAdmissionControlLimit=sbcAdmissionControlLimit, miscRFC2833PayloadType=miscRFC2833PayloadType, causeMapSIP2ISDNTable=causeMapSIP2ISDNTable, vmDigitPatternDigitToIgnore=vmDigitPatternDigitToIgnore, sipMiscEnablePAssociatedURIHeader=sipMiscEnablePAssociatedURIHeader, srcTEL2IPSourceIPAddress=srcTEL2IPSourceIPAddress, srcTEL2IPNumberType=srcTEL2IPNumberType, ipGroups=ipGroups, iPProfileCodersGroupID=iPProfileCodersGroupID, mediaGWMediaChannels=mediaGWMediaChannels, iP2TelRoutingActionResult=iP2TelRoutingActionResult, callWaitingTimeBetweenIndications=callWaitingTimeBetweenIndications, srcTEL2IPIndex=srcTEL2IPIndex, srdRowStatus=srdRowStatus, gkIPEntry=gkIPEntry, fxsCutThrough=fxsCutThrough, gwSecurityMediaSecurityBehavior=gwSecurityMediaSecurityBehavior, causeMapSIP2ISDNQ850Cause=causeMapSIP2ISDNQ850Cause, sipTxDTMFOptionAction=sipTxDTMFOptionAction, sipRegistrationRegistrarName=sipRegistrationRegistrarName, redirectNumberMapIp2TelSuffixToAdd=redirectNumberMapIp2TelSuffixToAdd, acEmergencyNumbersNumbers=acEmergencyNumbersNumbers, h323PortsH323BasePort=h323PortsH323BasePort, dstIP2TELIndex=dstIP2TELIndex, sbcRoutingDestAddress=sbcRoutingDestAddress, loggerCDRSyslogServerIP=loggerCDRSyslogServerIP, enableCallWaitingPerPortTable=enableCallWaitingPerPortTable, h323ConnectionModes=h323ConnectionModes, telProfileSigIPDiffServ=telProfileSigIPDiffServ, sipRegistrationRegistrationRetryTime=sipRegistrationRegistrationRetryTime, srcTEL2IPPresentation=srcTEL2IPPresentation, conferenceMaxInBoardCalls=conferenceMaxInBoardCalls, screeningIndicators2Ip=screeningIndicators2Ip, sbcMessageManipulationsActionSubject=sbcMessageManipulationsActionSubject, srcTEL2IPNumberPlan=srcTEL2IPNumberPlan, iSDNTransferCapabilityIndex=iSDNTransferCapabilityIndex, pSTNAlertTimeoutTable=pSTNAlertTimeoutTable, sbcClassificationRowStatus=sbcClassificationRowStatus, ipGroupServingIPGroup=ipGroupServingIPGroup, codersGroup0Entry=codersGroup0Entry, pSTNAlertTimeoutEntry=pSTNAlertTimeoutEntry, miscIsdnDisconnectOnBusyTone=miscIsdnDisconnectOnBusyTone, srcTEL2IPSourceTrunkGroupID=srcTEL2IPSourceTrunkGroupID, dstTEL2IPSourceIPAddress=dstTEL2IPSourceIPAddress, connectivityQosMaxAllowedPL=connectivityQosMaxAllowedPL, chargeCodesPeriod3EndTime=chargeCodesPeriod3EndTime, codersGroup1Name=codersGroup1Name, trunkTransferIndex=trunkTransferIndex, srcTEL2IPActionResult=srcTEL2IPActionResult, sipMiscUseSIPURIForDiversionHeader=sipMiscUseSIPURIForDiversionHeader, dstTEL2IPPrefixToAdd=dstTEL2IPPrefixToAdd, analogGWEnableCurrentDisconnect=analogGWEnableCurrentDisconnect, aaaIndications=aaaIndications, iPProfileProfileName=iPProfileProfileName, accounts=accounts, sipSASLocalSIPUdpPort=sipSASLocalSIPUdpPort, resourceManagementDisconnectOnBrokenConnection=resourceManagementDisconnectOnBrokenConnection, srcIP2TELActionResult=srcIP2TELActionResult, registerPrefixPrefix=registerPrefixPrefix, sipRetransmissionTCPTimeout=sipRetransmissionTCPTimeout, vmDigitPatternConnectCode=vmDigitPatternConnectCode, tonesPlayRBToneXferSuccess=tonesPlayRBToneXferSuccess, redirectNumberMapIp2TelActionResult=redirectNumberMapIp2TelActionResult, loggerGwDebugLevel=loggerGwDebugLevel, toneIndexTable=toneIndexTable, iPProfileEnableEarlyMedia=iPProfileEnableEarlyMedia, srcTEL2IPNumOfDigitsToLeave=srcTEL2IPNumOfDigitsToLeave, miscIsCiscoSceMode=miscIsCiscoSceMode, miscHookFlashCodeIP=miscHookFlashCodeIP, miscLDAPpbxNumberAttributeName=miscLDAPpbxNumberAttributeName, telProfileIndex=telProfileIndex, sipSASRegistrationTime=sipSASRegistrationTime, acBChannelNegotiationForTrunkEntry=acBChannelNegotiationForTrunkEntry, trunkTransferMode=trunkTransferMode, acTimersPSTNAlertTimeout=acTimersPSTNAlertTimeout, h323GKRegister=h323GKRegister, acDigitalOOSBehaviorForTrunkIndex=acDigitalOOSBehaviorForTrunkIndex, digitalGWSendISDNTransferOnConnect=digitalGWSendISDNTransferOnConnect, callerIDperPortPort=callerIDperPortPort, sipProxySetIndex=sipProxySetIndex, sipRegistrationTimeThreshold=sipRegistrationTimeThreshold, fastStartIsFSMediaInfoSendOnConnect=fastStartIsFSMediaInfoSendOnConnect, channelsSettingSelectMode=channelsSettingSelectMode, dnsInfoSecondIPAddress=dnsInfoSecondIPAddress, sbcMessageManipulationsAction=sbcMessageManipulationsAction, gkRedundancyUsed=gkRedundancyUsed, profile=profile, sbcIP2IPInboundManipulationSuffix2Add=sbcIP2IPInboundManipulationSuffix2Add, ipGroupType=ipGroupType, rtpOnlyModeForTrunkEntry=rtpOnlyModeForTrunkEntry, srcIP2TELNumberType=srcIP2TELNumberType, sbcIP2IPOutboundManipulationAction=sbcIP2IPOutboundManipulationAction, tel2IPRoutingDestPort=tel2IPRoutingDestPort, srvInfoActionResult=srvInfoActionResult, sbcClassificationSrcUsernamePrefix=sbcClassificationSrcUsernamePrefix, fxoAutoDialPlayBusyTone=fxoAutoDialPlayBusyTone, dstIP2TELPrefix=dstIP2TELPrefix, digitalGWTransparentCoderOnDataCall=digitalGWTransparentCoderOnDataCall, ipGroupActionResult=ipGroupActionResult, codersGroup2Index=codersGroup2Index, redirectNumberMapTel2IpActionResult=redirectNumberMapTel2IpActionResult, authIsUsed=authIsUsed, sbcIP2IPOutboundManipulationIndex=sbcIP2IPOutboundManipulationIndex, iPProfilePlayRingbackToneToIP=iPProfilePlayRingbackToneToIP, sbcIP2IPInboundManipulationIsAdditionalManipulation=sbcIP2IPInboundManipulationIsAdditionalManipulation, toneIndexEntry=toneIndexEntry, sbcIP2IPInboundManipulationAction=sbcIP2IPInboundManipulationAction, codersIndex=codersIndex, sbcAdmissionControlActionResult=sbcAdmissionControlActionResult, sbcClassificationSrcHost=sbcClassificationSrcHost, sipInterfaceSettings=sipInterfaceSettings, acEmergencyNumbersTable=acEmergencyNumbersTable, vmDigitPattern=vmDigitPattern, h323GKEnableGKAutoDiscovery=h323GKEnableGKAutoDiscovery, srvInfoTable=srvInfoTable, redirectNumberMapTel2IpRowStatus=redirectNumberMapTel2IpRowStatus, sipRetransmissionIsRtxEnable=sipRetransmissionIsRtxEnable, sipMiscRTPOnlyMode=sipMiscRTPOnlyMode, mlpp=mlpp, sbcClassificationIndex=sbcClassificationIndex, forwardOnBusyTrunkDestTable=forwardOnBusyTrunkDestTable, sipProxySendInviteToProxy=sipProxySendInviteToProxy, miscIsFaxUsed=miscIsFaxUsed, iPProfileAddIEInSetup=iPProfileAddIEInSetup, codersGroup3PacketizationTime=codersGroup3PacketizationTime, iPProfileSecondTxDtmfOption=iPProfileSecondTxDtmfOption, telProfileProfileName=telProfileProfileName, dstTEL2IPNumOfStrippedDigits=dstTEL2IPNumOfStrippedDigits, digitalGWEnableUuiIp2Tel=digitalGWEnableUuiIp2Tel, calea=calea, miscDefaultReleaseCause=miscDefaultReleaseCause, dstIP2TELNumOfDigitsToRemFromRight=dstIP2TELNumOfDigitsToRemFromRight, vmDigitPatternVmDigitPatternOnNoAnswerExternal=vmDigitPatternVmDigitPatternOnNoAnswerExternal, trunkGroupSettingsMwiInterrogationType=trunkGroupSettingsMwiInterrogationType, callerIDperPortActionResult=callerIDperPortActionResult, srcTEL2IPSourceIPGroupID=srcTEL2IPSourceIPGroupID, srvInfoPriority3=srvInfoPriority3, accountRegister=accountRegister, proxyIPEntry=proxyIPEntry, sbcMessageManipulationsEntry=sbcMessageManipulationsEntry, telProfileIsTwoStageDial=telProfileIsTwoStageDial, miscReliableConnectionPersistentMode=miscReliableConnectionPersistentMode, iPProfileDJBufOptFactor=iPProfileDJBufOptFactor, srvInfoDNSName=srvInfoDNSName, dstIP2TELAction=dstIP2TELAction, redirectNumberMapTel2IpIndex=redirectNumberMapTel2IpIndex, channelsLastCh=channelsLastCh, sbcIP2IPInboundManipulationDestHost=sbcIP2IPInboundManipulationDestHost, sipProxy=sipProxy, iPProfileMediaIPVersionPreference=iPProfileMediaIPVersionPreference, h323Misc=h323Misc, manipulationAddTrunkGroupAsPrefix=manipulationAddTrunkGroupAsPrefix, sipInterfaceSRD=sipInterfaceSRD, dstIP2TELIsPresentationRestricted=dstIP2TELIsPresentationRestricted, ipGroupEntry=ipGroupEntry, enableCallWaitingPerPortModule=enableCallWaitingPerPortModule, sipRetransmissionEnablePTime=sipRetransmissionEnablePTime, sbcMessageManipulationsMessageType=sbcMessageManipulationsMessageType, h323MiscSendChannelNonStandard=h323MiscSendChannelNonStandard, redirectNumberMapTel2IpNumberType=redirectNumberMapTel2IpNumberType, ipGroupMediaRealm=ipGroupMediaRealm, manipulationCIDNotification=manipulationCIDNotification, autoDialType=autoDialType, forwardOnBusyTrunkDestAction=forwardOnBusyTrunkDestAction, sbcAdmissionControlAction=sbcAdmissionControlAction, toneIndexActionResult=toneIndexActionResult, enableDidPortEntry=enableDidPortEntry, dstTEL2IPNumOfDigitsToRemFromRight=dstTEL2IPNumOfDigitsToRemFromRight, iPProfileFirstTxDtmfOption=iPProfileFirstTxDtmfOption, sipProxySetEnableProxyKeepAlive=sipProxySetEnableProxyKeepAlive, tel2IPRoutingSrcPrefix=tel2IPRoutingSrcPrefix, screeningIndicators=screeningIndicators, namesPort=namesPort, authUserID=authUserID, screeningIndicators2ISDN=screeningIndicators2ISDN, fastStartOpenH245OnFS=fastStartOpenH245OnFS, aaaRadiusAccountingType=aaaRadiusAccountingType, causeMapISDN2SIPQ850Cause=causeMapISDN2SIPQ850Cause, sbcRoutingDestType=sbcRoutingDestType, sipRetransmissionT2Rtx=sipRetransmissionT2Rtx, gkIPRowStatus=gkIPRowStatus, digitalGWISDNTransferCapability=digitalGWISDNTransferCapability, iPProfileDJBufMinDelay=iPProfileDJBufMinDelay, telProfileAction=telProfileAction, dstTEL2IPNumberPlan=dstTEL2IPNumberPlan, keypadFeaturesCFBusyOrNoAnswer=keypadFeaturesCFBusyOrNoAnswer, sipMiscMultiPtimeFormat=sipMiscMultiPtimeFormat, rtpOnlyModeForTrunkRtpOnlyModeForTrunk=rtpOnlyModeForTrunkRtpOnlyModeForTrunk, gkIPActionResult=gkIPActionResult)
mibBuilder.exportSymbols("AcGateway", manipulationRemovePrefix=manipulationRemovePrefix, sipProxySetEntry=sipProxySetEntry, dstIP2TELNumberType=dstIP2TELNumberType, mlppPriorityRTPDSCP=mlppPriorityRTPDSCP, acGWRtcpXrEscTransportType=acGWRtcpXrEscTransportType, sipProxyIsFallbackUsed=sipProxyIsFallbackUsed, gwSecurity=gwSecurity, keypadFeaturesKeypadFeaturesCWDeact=keypadFeaturesKeypadFeaturesCWDeact, h323Ports=h323Ports, h323GK=h323GK, ipGroupProxySetId=ipGroupProxySetId, miscEnableNetworkISDNTransfer=miscEnableNetworkISDNTransfer, redirectNumberMapTel2IpNumberPlan=redirectNumberMapTel2IpNumberPlan, authAction=authAction, sipDTMFDisableAutoMute=sipDTMFDisableAutoMute, telProfileProgressIndicatorToIP=telProfileProgressIndicatorToIP, sipMisc3xxBehavior=sipMisc3xxBehavior, acGWRtcpXr=acGWRtcpXr, codersGroup1PayloadType=codersGroup1PayloadType, namesEntry=namesEntry, keypadFeaturesCLIR=keypadFeaturesCLIR, callWaitingTimeBeforeWaitingIndications=callWaitingTimeBeforeWaitingIndications, acGWRtcpXrEscIP=acGWRtcpXrEscIP, sipMiscEnableGRUU=sipMiscEnableGRUU, dialingDigitMapping=dialingDigitMapping, vxml=vxml, sbcRoutingActionResult=sbcRoutingActionResult, iP2TelRoutingTable=iP2TelRoutingTable, enableCallWaitingPerPortIndex=enableCallWaitingPerPortIndex, srdActionResult=srdActionResult, digitalGW=digitalGW, iP2TelRoutingPrefix=iP2TelRoutingPrefix, dTMFOptionsTxDTMFOption=dTMFOptionsTxDTMFOption, iPProfileRxDTMFOption=iPProfileRxDTMFOption, accountHostName=accountHostName, sipProxyIsTrustedProxy=sipProxyIsTrustedProxy, ipGroupIndex=ipGroupIndex, sip=sip, phoneContextNPI=phoneContextNPI, redirectNumberMapTel2IpEntry=redirectNumberMapTel2IpEntry, iPProfileDisconnectOnBrokenConnection=iPProfileDisconnectOnBrokenConnection, transferXferPrefix=transferXferPrefix, sipProxySetProxyKeepAliveTime=sipProxySetProxyKeepAliveTime, sasRegistrationManipulationIndex=sasRegistrationManipulationIndex, iSDNRxOverlapEntry=iSDNRxOverlapEntry, sipInterfaceTCPPort=sipInterfaceTCPPort, srcIP2TELSuffix2Add=srcIP2TELSuffix2Add, pSTNAlertTimeoutValue=pSTNAlertTimeoutValue, sipMiscUserAgentDisplayInfo=sipMiscUserAgentDisplayInfo, manipulationUseDisplayNameAsSourceNumber=manipulationUseDisplayNameAsSourceNumber, dstTEL2IPRowStatus=dstTEL2IPRowStatus, tel2IPRoutingTransportType=tel2IPRoutingTransportType, redirectNumberMapTel2IpLeaveFromRight=redirectNumberMapTel2IpLeaveFromRight, channelsLastTrunkID=channelsLastTrunkID, playRBToneToTrunkValue=playRBToneToTrunkValue, sbcAdmissionControlLimitPerUser=sbcAdmissionControlLimitPerUser, vxmlID=vxmlID, manipulationAndRoutingAltRoutingTel2IpConnMethod=manipulationAndRoutingAltRoutingTel2IpConnMethod, digitalGWextRemoveCLIWhenRestricted=digitalGWextRemoveCLIWhenRestricted, dstTEL2IPSourceTrunkGroupID=dstTEL2IPSourceTrunkGroupID, sbcAdmissionControlEntry=sbcAdmissionControlEntry, telProfileMWIDisplay=telProfileMWIDisplay, digitalGWR2Category=digitalGWR2Category, sipMiscSourceNumberPreference=sipMiscSourceNumberPreference, miscT38MaxDatagramSize=miscT38MaxDatagramSize, progressIndicators2ISDN=progressIndicators2ISDN, toneIndexAction=toneIndexAction, vmSMDI=vmSMDI, sipMiscTransportType=sipMiscTransportType, forwardActionResult=forwardActionResult, sipMiscEnableContactRestriction=sipMiscEnableContactRestriction, srdAction=srdAction, sipMiscEnableTCPConnectionReuse=sipMiscEnableTCPConnectionReuse, srcTEL2IPNumOfDigitsToRemFromRight=srcTEL2IPNumOfDigitsToRemFromRight, sbcIP2IPOutboundManipulationLeaveFromRight=sbcIP2IPOutboundManipulationLeaveFromRight, h323GKGatekeeperID=h323GKGatekeeperID, sbcClassificationAction=sbcClassificationAction, accountActionResult=accountActionResult, transferEnable=transferEnable, sbcIP2IPInboundManipulationTable=sbcIP2IPInboundManipulationTable, dstIP2TELNumOfStrippedDigits=dstIP2TELNumOfStrippedDigits, miscStaticNATIP=miscStaticNATIP, keypadFeatures=keypadFeatures, chargeCodesEntry=chargeCodesEntry, telProfileTimeForReorderTone=telProfileTimeForReorderTone, trunkGroupSettingsTrunkGroupID=trunkGroupSettingsTrunkGroupID, autoDialIndex=autoDialIndex, causeMapISDN2SIPIndex=causeMapISDN2SIPIndex, srvInfoDNSName2=srvInfoDNSName2, srcTEL2IPTable=srcTEL2IPTable, forwardModule=forwardModule, tel2IPRoutingActionResult=tel2IPRoutingActionResult, dnsInfoThirdIPAddress=dnsInfoThirdIPAddress, dialingMaxDigits=dialingMaxDigits, sbcRoutingSrcIPGroupId=sbcRoutingSrcIPGroupId, digitalGWSwapRedirectNumber=digitalGWSwapRedirectNumber, sbcIP2IPInboundManipulationIndex=sbcIP2IPInboundManipulationIndex, coders=coders, acBChannelNegotiationForTrunkMode=acBChannelNegotiationForTrunkMode, tonesTimeForDialTone=tonesTimeForDialTone, digitalGWCASSendHookFlash=digitalGWCASSendHookFlash, digitalGWPIForDisconnectMsg=digitalGWPIForDisconnectMsg, streamingMonitorID=streamingMonitorID, redirectNumberMapIp2TelRedirectPrefix=redirectNumberMapIp2TelRedirectPrefix, codersGroup1PacketizationTime=codersGroup1PacketizationTime, registerPrefixRowStatus=registerPrefixRowStatus, acTWCnonAllocateablePortsEntry=acTWCnonAllocateablePortsEntry, codersGroup1Index=codersGroup1Index, vmDigitPatternInternalCall=vmDigitPatternInternalCall, sbcClassificationDestHost=sbcClassificationDestHost, progressIndicatorToISDNTable=progressIndicatorToISDNTable, acBChannelNegotiationForTrunkTable=acBChannelNegotiationForTrunkTable, sbcClassificationDestUsernamePrefix=sbcClassificationDestUsernamePrefix, sbcMessageManipulationsActionResult=sbcMessageManipulationsActionResult, transfer=transfer, trunkTransferEntry=trunkTransferEntry, manipulationAndRoutingAltRoutingTel2IpEnable=manipulationAndRoutingAltRoutingTel2IpEnable, codersGroup0RowStatus=codersGroup0RowStatus, iSDNTransferCapabilityTable=iSDNTransferCapabilityTable, miscLDAPocsNumberAttributeName=miscLDAPocsNumberAttributeName, digitalGWextEnableQSIGTunneling=digitalGWextEnableQSIGTunneling, sipProxySetRowStatus=sipProxySetRowStatus, loggerGwAppCdrReportLevel=loggerGwAppCdrReportLevel, sipRegistrationRegisterOnInviteFailure=sipRegistrationRegisterOnInviteFailure, enableDidPortAction=enableDidPortAction, miscEnableSemiAttendedTransfer=miscEnableSemiAttendedTransfer, vmDigitPatternDisconnectCode=vmDigitPatternDisconnectCode, digitalGWextTDMOverIPMinCallsForTrunkActivation=digitalGWextTDMOverIPMinCallsForTrunkActivation, sipSubscribeEnable=sipSubscribeEnable, rtpOnlyModeForTrunkIndex=rtpOnlyModeForTrunkIndex, codersGroup2Table=codersGroup2Table, vxmlNumOfEndPoints=vxmlNumOfEndPoints, proxyIPActionResult=proxyIPActionResult, dstIP2TELRowStatus=dstIP2TELRowStatus, iPProfileIsFaxUsed=iPProfileIsFaxUsed, codersGroup0Table=codersGroup0Table, telProfileEnableReversalPolarity=telProfileEnableReversalPolarity, miscEnableRFC4117Transcoding=miscEnableRFC4117Transcoding, common=common, playRBToneToTrunkTable=playRBToneToTrunkTable, callWaitingNumberOfIndications=callWaitingNumberOfIndications, h323=h323, toneIndexPriorityIndex=toneIndexPriorityIndex, chargeCodesPeriod4PulseInterval=chargeCodesPeriod4PulseInterval, authTable=authTable, h323MiscIsSetupIncludeNum=h323MiscIsSetupIncludeNum, mlppImmediateRTPDSCP=mlppImmediateRTPDSCP, chargeCodesIndex=chargeCodesIndex, srcIP2TELPresentation=srcIP2TELPresentation, keypadFeaturesRejectAnonymousCallDeact=keypadFeaturesRejectAnonymousCallDeact, sipDTMF=sipDTMF, digitalGWBChannelNegotiation=digitalGWBChannelNegotiation, digitalGWEnableISDNTunnelingTel2Ip=digitalGWEnableISDNTunnelingTel2Ip, streamingRecordToID=streamingRecordToID, streamingRecordScriptPath=streamingRecordScriptPath, sipInterfaceNetworkInterface=sipInterfaceNetworkInterface, h323GKEnablePregrantARQ=h323GKEnablePregrantARQ, altRouteCauseIP2TELEntry=altRouteCauseIP2TELEntry, altRouteCauseTEL2IPActionResult=altRouteCauseTEL2IPActionResult, telProfileDJBufOptFactor=telProfileDJBufOptFactor, callerID=callerID, sipTxDTMFOptionRowStatus=sipTxDTMFOptionRowStatus, sbcIP2IPOutboundManipulationTable=sbcIP2IPOutboundManipulationTable, sipDTMFRxDTMFOption=sipDTMFRxDTMFOption, forwardAction=forwardAction, telProfileDTMFVolume=telProfileDTMFVolume, namesIndex=namesIndex, accountServingIPGroup=accountServingIPGroup, miscEnableBusyOut=miscEnableBusyOut, chargeCodesPeriod3PulseInterval=chargeCodesPeriod3PulseInterval, gkIPIndex=gkIPIndex, causeMapISDN2SIPAction=causeMapISDN2SIPAction, forwardIndex=forwardIndex, altRouteCauseIP2TELAction=altRouteCauseIP2TELAction, redirectNumberMapTel2IpRedirectPrefix=redirectNumberMapTel2IpRedirectPrefix, toneIndexRowStatus=toneIndexRowStatus, manipulationAddNPIandTON2CallingNumber=manipulationAddNPIandTON2CallingNumber, pSTNAlertTimeoutIndex=pSTNAlertTimeoutIndex, iSDNRxOverlapIndex=iSDNRxOverlapIndex, mWIAnalogLamp=mWIAnalogLamp, dstTEL2IPSourceIPGroupID=dstTEL2IPSourceIPGroupID, iPProfileIndex=iPProfileIndex, enableDidPortPort=enableDidPortPort, sipInterfaceTable=sipInterfaceTable, dnsInfoFourthIPAddress=dnsInfoFourthIPAddress, vmMWISuffixCode=vmMWISuffixCode, accountServedIPGroup=accountServedIPGroup, redirectNumberMapIp2TelRowStatus=redirectNumberMapIp2TelRowStatus, codersGroup3Rate=codersGroup3Rate, codersGroup1Action=codersGroup1Action, sbcClassificationSrcSRDId=sbcClassificationSrcSRDId, namesIsUsed=namesIsUsed, telProfileFaxTransportMode=telProfileFaxTransportMode, callerDisplayPort=callerDisplayPort, dstTEL2IPNumOfDigitsToLeave=dstTEL2IPNumOfDigitsToLeave, callerIDperPortIsUsed=callerIDperPortIsUsed, altRouteCauseIP2TELIndex=altRouteCauseIP2TELIndex, analogGWEnableReversalPolarity=analogGWEnableReversalPolarity, h323GKCanMapAliases=h323GKCanMapAliases, sipProxyUsed=sipProxyUsed, tel2IPRoutingTable=tel2IPRoutingTable, fxoWaitForDialTone=fxoWaitForDialTone, srvInfoTransportType=srvInfoTransportType, srdIndex=srdIndex, codersGroup4ActionRes=codersGroup4ActionRes, sipSASRedundantProxySet=sipSASRedundantProxySet, sbcRoutingRowStatus=sbcRoutingRowStatus, sipMiscIsUserPhoneInFrom=sipMiscIsUserPhoneInFrom, sbcIP2IPInboundManipulationSrcHost=sbcIP2IPInboundManipulationSrcHost, trunkTransferTable=trunkTransferTable, acBChannelNegotiationForTrunkIndex=acBChannelNegotiationForTrunkIndex, forwardIsUsed=forwardIsUsed, autoDialPort=autoDialPort, causeMapSIP2ISDNAction=causeMapSIP2ISDNAction, sbcAdmissionControlTable=sbcAdmissionControlTable, iPProfileTable=iPProfileTable, srcTEL2IPNumOfStrippedDigits=srcTEL2IPNumOfStrippedDigits, altRouteCauseTEL2IPTable=altRouteCauseTEL2IPTable, redirectNumberMapIp2TelSrcTrunkGroupID=redirectNumberMapIp2TelSrcTrunkGroupID, proxyIPRowStatus=proxyIPRowStatus, sbcRoutingDestTransportType=sbcRoutingDestTransportType, sipMiscPrackMode=sipMiscPrackMode, sbcIP2IPInboundManipulationActionResult=sbcIP2IPInboundManipulationActionResult, miscGracefulBusyOutTimeout=miscGracefulBusyOutTimeout, sipMiscEnablePChargingVector=sipMiscEnablePChargingVector, mWIEnable=mWIEnable, sbcMessageManipulationsCondition=sbcMessageManipulationsCondition, acGWRtcpXrReportMode=acGWRtcpXrReportMode, digitalGWPlayRBTOnISDNTransfer=digitalGWPlayRBTOnISDNTransfer, proxyIPTable=proxyIPTable, dstTEL2IPSourcePrefix=dstTEL2IPSourcePrefix, altRouteCauseIP2TELReleaseCause=altRouteCauseIP2TELReleaseCause, tones=tones, keypadFeaturesCFDoNotDisturb=keypadFeaturesCFDoNotDisturb, iPProfileRowStatus=iPProfileRowStatus, h323DTMFHookFlashOption=h323DTMFHookFlashOption, sipMiscXChannelHeader=sipMiscXChannelHeader, miscFaxCNGMode=miscFaxCNGMode, keypadFeaturesKeypadFeaturesCW=keypadFeaturesKeypadFeaturesCW, sipSASBindingMode=sipSASBindingMode, gwSecurityTLSRemoteSubjectName=gwSecurityTLSRemoteSubjectName, gkIPAction=gkIPAction, fxsMeteringMode=fxsMeteringMode, chargeCodesPeriod2PulseInterval=chargeCodesPeriod2PulseInterval, supServices=supServices, enableDidPortModule=enableDidPortModule, miscEnableNRTSubscription=miscEnableNRTSubscription, sbcIP2IPOutboundManipulationRemoveFromRight=sbcIP2IPOutboundManipulationRemoveFromRight, h323GKUseRedundantGKOnRRJ=h323GKUseRedundantGKOnRRJ, logger=logger, sbcIP2IPOutboundManipulationSrcUsernamePrefix=sbcIP2IPOutboundManipulationSrcUsernamePrefix, channelsTable=channelsTable, gwIPv6GwAppDualIPStackSDPMethod=gwIPv6GwAppDualIPStackSDPMethod, enableCallWaitingPerPortEnable=enableCallWaitingPerPortEnable)
mibBuilder.exportSymbols("AcGateway", sipMiscOfferUnencryptedSRTCP=sipMiscOfferUnencryptedSRTCP, codersGroup4SilenceSuppression=codersGroup4SilenceSuppression, iPProfileSBCMediaSecurityBehaviour=iPProfileSBCMediaSecurityBehaviour, sbcMessageManipulationsActionValue=sbcMessageManipulationsActionValue, sbcAlternativeRoutingReasonsEntry=sbcAlternativeRoutingReasonsEntry, srcIP2TELNumOfStrippedDigits=srcIP2TELNumOfStrippedDigits, authEntry=authEntry, acGateway=acGateway, mlppFlashOverOverRTPDSCP=mlppFlashOverOverRTPDSCP, manipulationAndRoutingModeTel2Ip=manipulationAndRoutingModeTel2Ip, chargeCodesPeriod2PulsesOnAnswer=chargeCodesPeriod2PulsesOnAnswer, mlppDefaultNamespace=mlppDefaultNamespace, sbcIP2IPOutboundManipulationDestUsernamePrefix=sbcIP2IPOutboundManipulationDestUsernamePrefix, toneIndexFXSPortLast=toneIndexFXSPortLast, digitalGWextEnableAoC=digitalGWextEnableAoC, h323GKIsTerminal=h323GKIsTerminal, srcIP2TELPrefixToAdd=srcIP2TELPrefixToAdd, sbcMessageManipulationsTable=sbcMessageManipulationsTable, sbcIP2IPInboundManipulationPrefix2Add=sbcIP2IPInboundManipulationPrefix2Add, trunkGroupSettingsEntry=trunkGroupSettingsEntry, codersAction=codersAction, supServicesConference=supServicesConference, manipulationAddPhoneContextAsPrefix=manipulationAddPhoneContextAsPrefix, dstTEL2IPTable=dstTEL2IPTable, codersGroup2SilenceSuppression=codersGroup2SilenceSuppression, forwardEntry=forwardEntry, chargeCodesPeriod1PulsesOnAnswer=chargeCodesPeriod1PulsesOnAnswer, h323MiscEnableQ931Cause=h323MiscEnableQ931Cause, sipMiscISubNumberOfDigits=sipMiscISubNumberOfDigits, manipulationBlindTransferAddPrefix=manipulationBlindTransferAddPrefix, iSDNTransferCapabilityValue=iSDNTransferCapabilityValue, mlppE911Behavior=mlppE911Behavior, ipGroupRowStatus=ipGroupRowStatus, tel2IPRoutingProfileID=tel2IPRoutingProfileID, srcIP2TELNumberPlan=srcIP2TELNumberPlan, resourceManagementIsSelfCheckAuditUsed=resourceManagementIsSelfCheckAuditUsed, tel2IPRoutingSourceHostPrefix=tel2IPRoutingSourceHostPrefix, telProfileActionResult=telProfileActionResult, callerDisplayModule=callerDisplayModule, altRouteCauseTEL2IPIndex=altRouteCauseTEL2IPIndex, streamingMediaID=streamingMediaID, authUserPassword=authUserPassword, srvInfoPriority2=srvInfoPriority2, sbcRoutingDestIPGroupId=sbcRoutingDestIPGroupId, callerDisplayRestriction=callerDisplayRestriction, altRouteCauseIP2TELTable=altRouteCauseIP2TELTable, progressIndicatorToISDNValue=progressIndicatorToISDNValue, h323SourceEncodType=h323SourceEncodType, sipDTMFIsHookFlashUsed=sipDTMFIsHookFlashUsed, analogGWRegretTime=analogGWRegretTime, conferenceEnableDTMFReporting=conferenceEnableDTMFReporting, fxoIsTwoStageDial=fxoIsTwoStageDial, fxs=fxs, manipulation=manipulation, gkRedundancyTimeBetweenGKsLoops=gkRedundancyTimeBetweenGKsLoops, telProfileEnableDigitDelivery=telProfileEnableDigitDelivery, causeMapSIP2ISDNIndex=causeMapSIP2ISDNIndex, dIDEnableWink=dIDEnableWink, iP2TelRoutingIndex=iP2TelRoutingIndex, manipulationReplaceEmptyDstWithPortNumber=manipulationReplaceEmptyDstWithPortNumber, dTMFOptionsIndex=dTMFOptionsIndex, sbcRoutingRequestType=sbcRoutingRequestType, codersGroup3SilenceSuppression=codersGroup3SilenceSuppression, mediaGW=mediaGW, manipulationAddPortAsPrefix=manipulationAddPortAsPrefix, forwardOnBusyTrunkDestForwardDestination=forwardOnBusyTrunkDestForwardDestination, supServicesBlindTransferDisconnectTimeout=supServicesBlindTransferDisconnectTimeout, streamingID=streamingID, telProfileInputGain=telProfileInputGain, routingSourceIPAddressInput=routingSourceIPAddressInput, h323GKRegistrationTime=h323GKRegistrationTime, keypadFeaturesBlindTransfer=keypadFeaturesBlindTransfer, enableDidPortActionResult=enableDidPortActionResult, sasRegistrationManipulationRowStatus=sasRegistrationManipulationRowStatus, miscNRTSubscriptionRetryTime=miscNRTSubscriptionRetryTime, aaa=aaa, connectivityQos=connectivityQos, callerIDperPortEnable=callerIDperPortEnable, digitalGWextCopyDest2RedirectNumber=digitalGWextCopyDest2RedirectNumber, registerPrefixNumberPlan=registerPrefixNumberPlan, autoDialAction=autoDialAction, codersSilenceSuppression=codersSilenceSuppression, dTMFOptionsTable=dTMFOptionsTable, sipRegistrationTime=sipRegistrationTime, iEAddIEInSetup=iEAddIEInSetup, srcIP2TELNumOfDigitsToRemFromRight=srcIP2TELNumOfDigitsToRemFromRight, ipGroupRoutingMode=ipGroupRoutingMode, sasRegistrationManipulationLeaveFromRight=sasRegistrationManipulationLeaveFromRight, srcIP2TELNumOfDigitsToLeave=srcIP2TELNumOfDigitsToLeave, registerPrefixTable=registerPrefixTable, codersGroup4Action=codersGroup4Action, mlppDiffServ=mlppDiffServ, conference3WayMode=conference3WayMode, routingEnableDigitDelivery2IP=routingEnableDigitDelivery2IP, dnsInfoRowStatus=dnsInfoRowStatus, sipSubscribeRetryTime=sipSubscribeRetryTime, chargeCodesPeriod2EndTime=chargeCodesPeriod2EndTime, sbcAlternativeRoutingReasonsActionResult=sbcAlternativeRoutingReasonsActionResult, chargeCodesPeriod4EndTime=chargeCodesPeriod4EndTime, srdEntry=srdEntry, mlppDefaultServiceDomain=mlppDefaultServiceDomain, acEmergencyRegretTimeout=acEmergencyRegretTimeout, acEmergencyNumbersEntry=acEmergencyNumbersEntry, srvInfoPort3=srvInfoPort3, fxsFXSOOSBehavior=fxsFXSOOSBehavior, codersGroup4Index=codersGroup4Index, accountAction=accountAction, sbcEnable=sbcEnable, callerDisplayEntry=callerDisplayEntry, dID=dID, srcTEL2IPRowStatus=srcTEL2IPRowStatus, manipulationAndRoutingAltRoutingTel2IpMode=manipulationAndRoutingAltRoutingTel2IpMode, causeMapISDN2SIPEntry=causeMapISDN2SIPEntry, vmDigitPatternNoReason=vmDigitPatternNoReason, srvInfoEntry=srvInfoEntry, aMD=aMD, sbcAdmissionControlRowStatus=sbcAdmissionControlRowStatus, mlppFlashOverRTPDSCP=mlppFlashOverRTPDSCP, iP2TelRoutingProfileID=iP2TelRoutingProfileID, namesModule=namesModule, sipSubscribeEnableMWISubscription=sipSubscribeEnableMWISubscription, sbcIP2IPInboundManipulationDestUsernamePrefix=sbcIP2IPInboundManipulationDestUsernamePrefix, sasRegistrationManipulationActionResult=sasRegistrationManipulationActionResult, forwardForwardedToNumber=forwardForwardedToNumber, sipProxyIPListRefreshTime=sipProxyIPListRefreshTime, tonesTimeForReorderTone=tonesTimeForReorderTone, ipGroupTable=ipGroupTable, voiceMailInterface=voiceMailInterface, telProfileIPDiffServ=telProfileIPDiffServ, miscEnableDelayedOffer=miscEnableDelayedOffer, proxyIPAction=proxyIPAction, sbcIP2IPOutboundManipulationIsAdditionalManipulation=sbcIP2IPOutboundManipulationIsAdditionalManipulation, keypadFeaturesCFUncond=keypadFeaturesCFUncond, altRouteCauseTEL2IPEntry=altRouteCauseTEL2IPEntry, iSDNRxOverlapEnable=iSDNRxOverlapEnable, trunkGroupSettingsTable=trunkGroupSettingsTable, forwardSettingsEnable=forwardSettingsEnable, codersGroup0Action=codersGroup0Action, gkRAI=gkRAI, iPProfileSigIPDiffServ=iPProfileSigIPDiffServ, tonesPlayRBTone2Ip=tonesPlayRBTone2Ip, redirectNumberMapIp2TelIsPresentationRestricted=redirectNumberMapIp2TelIsPresentationRestricted, h323GKResponseTimeout=h323GKResponseTimeout, registerPrefixNumberType=registerPrefixNumberType, srdName=srdName, miscSilenceDisconnectTimeout=miscSilenceDisconnectTimeout, chargeCodesPeriod4PulsesOnAnswer=chargeCodesPeriod4PulsesOnAnswer, dTMFOptionsEntry=dTMFOptionsEntry, streaming=streaming, miscT38UseRTPPort=miscT38UseRTPPort, progressIndicatorToISDNIndex=progressIndicatorToISDNIndex, transcodingID=transcodingID, voiceMail=voiceMail, sipTxDTMFOptionActionResult=sipTxDTMFOptionActionResult, sipRetransmission=sipRetransmission, autoDialModule=autoDialModule, codersGroup1Table=codersGroup1Table, redirectNumberMapIp2TelSrcIPGroupID=redirectNumberMapIp2TelSrcIPGroupID, streamingPlayFromID=streamingPlayFromID, dialingTimeBetweenDigits=dialingTimeBetweenDigits, miscDelayTime=miscDelayTime, acRemoveCallingNameForTrunkMode=acRemoveCallingNameForTrunkMode, redirectNumberMapTel2IpAction=redirectNumberMapTel2IpAction, vmMWISourceNumber=vmMWISourceNumber, accountPassword=accountPassword, supServicesEnableHold=supServicesEnableHold, miscDetFaxOnAnswerTone=miscDetFaxOnAnswerTone, dTMFOptionsRowStatus=dTMFOptionsRowStatus, sbcIP2IPInboundManipulationRequestType=sbcIP2IPInboundManipulationRequestType, channelsRowStatus=channelsRowStatus, callWaitingWaitingBeepDuration=callWaitingWaitingBeepDuration, codersGroup2Action=codersGroup2Action, codersGroup3PayloadType=codersGroup3PayloadType, sbcIP2IPInboundManipulationRowStatus=sbcIP2IPInboundManipulationRowStatus, forwardSettings=forwardSettings, redirectNumberMapIp2TelIndex=redirectNumberMapIp2TelIndex, callWaiting=callWaiting, callerIDperPortAction=callerIDperPortAction, enableCallWaitingPerPortEntry=enableCallWaitingPerPortEntry, codersGroup1ActionRes=codersGroup1ActionRes, redirectNumberMapIp2TelRemoveFromRight=redirectNumberMapIp2TelRemoveFromRight, dIDEnable=dIDEnable, channelsActionResult=channelsActionResult, miscDisconnectOnSilence=miscDisconnectOnSilence, dstTEL2IPNumberType=dstTEL2IPNumberType, mWIServerIP=mWIServerIP, namesTable=namesTable, sipPortsLocalSipPort=sipPortsLocalSipPort, sipInterfaceUDPPort=sipInterfaceUDPPort, callerIDperPortModule=callerIDperPortModule, fxoBetweenRingTime=fxoBetweenRingTime, sipSASDefaultGatewayIP=sipSASDefaultGatewayIP, announcementNumOfEndPoints=announcementNumOfEndPoints, sipMiscSIP183Behaviour=sipMiscSIP183Behaviour, resourceManagementRejectCallsOnOverload=resourceManagementRejectCallsOnOverload, proxyIPIndex=proxyIPIndex, sipMiscPAssertedUserName=sipMiscPAssertedUserName, localISDNRBSourceValue=localISDNRBSourceValue, iPProfileNSEMode=iPProfileNSEMode, sipProxySetAction=sipProxySetAction, ipGroupSipReRoutingMode=ipGroupSipReRoutingMode, codersGroup3ActionRes=codersGroup3ActionRes, manipulationAddNPIandTON2CalledNumber=manipulationAddNPIandTON2CalledNumber, forwardPort=forwardPort, sbcMessageManipulationsRowRole=sbcMessageManipulationsRowRole, iPProfilePreference=iPProfilePreference, sbcIP2IPOutboundManipulationManipulatedURI=sbcIP2IPOutboundManipulationManipulatedURI, callerDisplayIndex=callerDisplayIndex, sipSASSurvivabilityMode=sipSASSurvivabilityMode, channelsTrunkID=channelsTrunkID, trunkGroupSettingsRegistrationMode=trunkGroupSettingsRegistrationMode, sbcAlternativeRoutingReasonsTable=sbcAlternativeRoutingReasonsTable, sbcRoutingEntry=sbcRoutingEntry, telProfileECE=telProfileECE, codersGroup0Rate=codersGroup0Rate, sipRegistrationTimeDivider=sipRegistrationTimeDivider, sipMiscForkingHandlingMode=sipMiscForkingHandlingMode, acRemoveCallingNameForTrunkTable=acRemoveCallingNameForTrunkTable, callWaitingEnable=callWaitingEnable, authIndex=authIndex, causeMapISDN2SIPRowStatus=causeMapISDN2SIPRowStatus, redirectNumberMapTel2IpSuffixToAdd=redirectNumberMapTel2IpSuffixToAdd, gkRAIEnable=gkRAIEnable, dstIP2TELSourceIP=dstIP2TELSourceIP, telProfileSwapTelToIpPhoneNumbers=telProfileSwapTelToIpPhoneNumbers, sipAuthPassword=sipAuthPassword, callerDisplayTable=callerDisplayTable, causeMapSIP2ISDNEntry=causeMapSIP2ISDNEntry, vmMWIOnCode=vmMWIOnCode, manipulationSetTel2IpRedirectReason=manipulationSetTel2IpRedirectReason, sbcAdmissionControlIndex=sbcAdmissionControlIndex, localISDNRBSourceEntry=localISDNRBSourceEntry, sbcRoutingDestPort=sbcRoutingDestPort, tel2IPRoutingChargeCode=tel2IPRoutingChargeCode, codersGroup2PacketizationTime=codersGroup2PacketizationTime, supServicesEnableMOH=supServicesEnableMOH, dTMFOptionsAction=dTMFOptionsAction, enableDidPortIsUsed=enableDidPortIsUsed, altRouteCauseTEL2IPReleaseCause=altRouteCauseTEL2IPReleaseCause, h323PortsRasDestPort=h323PortsRasDestPort, tonesPlayRBTone2Tel=tonesPlayRBTone2Tel, telProfileDialPlanIndex=telProfileDialPlanIndex, progressIndicators=progressIndicators, announcementID=announcementID, callerDisplayAction=callerDisplayAction, vmDigitPatternOnNoAnswer=vmDigitPatternOnNoAnswer, toneIndexIndex=toneIndexIndex, sipMiscApplicationProfile=sipMiscApplicationProfile, redirectNumberMapIp2TelSourceAddress=redirectNumberMapIp2TelSourceAddress, sipProxySetTable=sipProxySetTable, transcoding=transcoding, sipMiscAssertedIDMode=sipMiscAssertedIDMode, ipGroupMaxNumOfRegUsers=ipGroupMaxNumOfRegUsers, conference=conference)
mibBuilder.exportSymbols("AcGateway", sipProxyAlwaysUseRouteTable=sipProxyAlwaysUseRouteTable, iPProfileFaxTransportMode=iPProfileFaxTransportMode, codersGroup4Entry=codersGroup4Entry, sbcRoutingAltRouteOptions=sbcRoutingAltRouteOptions, redirectNumberMapIp2TelPrefixToAdd=redirectNumberMapIp2TelPrefixToAdd, sbcClassificationEntry=sbcClassificationEntry, chargeCodesAction=chargeCodesAction, sbcIP2IPOutboundManipulationPrefix2Add=sbcIP2IPOutboundManipulationPrefix2Add, sipMiscEnableVMURI=sipMiscEnableVMURI, sipMiscEnableHistoryInfo=sipMiscEnableHistoryInfo, sipMiscSend180ForCallWaiting=sipMiscSend180ForCallWaiting, manipulationAndRoutingAltRoutingTel2IpKeepAliveTime=manipulationAndRoutingAltRoutingTel2IpKeepAliveTime, sipMiscSDPSessionOwner=sipMiscSDPSessionOwner, enableDidPortEnable=enableDidPortEnable, sipDigitalGW=sipDigitalGW, tonesPrecedenceRingingType=tonesPrecedenceRingingType)
