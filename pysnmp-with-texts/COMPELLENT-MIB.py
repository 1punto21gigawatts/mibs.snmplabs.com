#
# PySNMP MIB module COMPELLENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COMPELLENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Gauge32, Counter32, ModuleIdentity, IpAddress, Counter64, MibIdentifier, iso, Bits, Integer32, enterprises, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "ModuleIdentity", "IpAddress", "Counter64", "MibIdentifier", "iso", "Bits", "Integer32", "enterprises", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Unsigned32")
DateAndTime, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "TextualConvention", "DisplayString")
compellentModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 16139, 1))
compellentModule.setRevisions(('2013-05-20 00:00', '2013-02-08 00:00', '2011-07-12 00:00', '2009-05-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: compellentModule.setRevisionsDescriptions(('Changed how productIDGlobalStatus is handled. Added model and asset tags to scCtlrTable and scEnclTable. Added new tables scDiskConfigTable and scAlertTable.', 'Added traps organized by function rather than severity, and added new mib objects to support the new traps.', 'Cleaned things up to get rid of errors and warnings reported by MIB validators.', 'Applicable for Compellent Storage Center versions 5.0 and higher.',))
if mibBuilder.loadTexts: compellentModule.setLastUpdated('201305200000Z')
if mibBuilder.loadTexts: compellentModule.setOrganization('Dell-Compellent')
if mibBuilder.loadTexts: compellentModule.setContactInfo('Dell-Compellent Technologies 7625 Smetana Lane Eden Prairie, MN 55344-3712 Tel: 952-294-3300 Fax: 952-294-3333 E-mail: support@compellent.com Web: http://www.compellent.com/')
if mibBuilder.loadTexts: compellentModule.setDescription('The MIB is for monitoring the status of Storage Center products from Dell-Compellent.')
class ScHardwareType(TextualConvention, Integer32):
    description = 'Hardware component type. Used when refering to components on the controller or enclosure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("fan", 1), ("powersupply", 2), ("tempsensor", 3), ("voltagesensor", 4), ("iomodule", 5), ("audiblealarm", 6))

class ScStatus(TextualConvention, Integer32):
    description = 'Operational Status: Up, Down, or Degraded.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("up", 1), ("down", 2), ("degraded", 3))

compellentEnterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 16139))
if mibBuilder.loadTexts: compellentEnterprise.setStatus('current')
if mibBuilder.loadTexts: compellentEnterprise.setDescription('Enterprise number for Dell-Compellent.')
compellentObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 16139, 2))
if mibBuilder.loadTexts: compellentObjects.setStatus('current')
if mibBuilder.loadTexts: compellentObjects.setDescription('Compellent Objects.')
productIDDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDDisplayName.setStatus('current')
if mibBuilder.loadTexts: productIDDisplayName.setDescription('Name of this product for display purposes.')
productIDDescription = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDDescription.setStatus('current')
if mibBuilder.loadTexts: productIDDescription.setDescription('A short description of this product.')
productIDVendor = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDVendor.setStatus('current')
if mibBuilder.loadTexts: productIDVendor.setDescription('The name of the product manufacturer.')
productIDVersion = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDVersion.setStatus('current')
if mibBuilder.loadTexts: productIDVersion.setDescription('The version of this product.')
productIDSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDSerialNumber.setStatus('current')
if mibBuilder.loadTexts: productIDSerialNumber.setDescription('The Dell Service Tag. This OID is not accessible on systems where the Service Tag is not available to the SNMP Agent.')
productIDGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: productIDGlobalStatus.setDescription('Current status of the product. This is a rollup for the entire product including any monitored devices. The status is intended to give initiative to an SNMP monitor to get further data when this status is abnormal. The value here maps from the System Status icon on the SC GUI: grey->unknown, green->ok, yellow->noncritical, red->critical. If the productIDGlobalStatus is not ok then scLastWorstAlert contains the scAlertNbr of the alert that is responsible for the negative status.')
productIDBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDBuildNumber.setStatus('current')
if mibBuilder.loadTexts: productIDBuildNumber.setDescription('The software build number of the product populating the MIB.')
productIDURL = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDURL.setStatus('current')
if mibBuilder.loadTexts: productIDURL.setDescription('The URL of the web-based application to manage this device.')
scAlertDef = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertDef.setStatus('current')
if mibBuilder.loadTexts: scAlertDef.setDescription('Alert Definition unique identifier')
scIndex = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIndex.setStatus('current')
if mibBuilder.loadTexts: scIndex.setDescription('Storage Center Index, typically the SC Hardware Serial Number.')
scTestString = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scTestString.setStatus('current')
if mibBuilder.loadTexts: scTestString.setDescription("Test String used by scTestTrap: 'SNMP server subsystem is accessible'")
scMiscAlertString = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scMiscAlertString.setStatus('current')
if mibBuilder.loadTexts: scMiscAlertString.setDescription('String used by last scMiscAlert')
scCtlrTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 13), )
if mibBuilder.loadTexts: scCtlrTable.setStatus('current')
if mibBuilder.loadTexts: scCtlrTable.setDescription('Controller Table')
scCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scCtlrIndex"))
if mibBuilder.loadTexts: scCtlrEntry.setStatus('current')
if mibBuilder.loadTexts: scCtlrEntry.setDescription('an entry in scCtlrTable')
scCtlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: scCtlrIndex.setStatus('current')
if mibBuilder.loadTexts: scCtlrIndex.setDescription('index into scCtlrTable (same value as scCtlrNbr)')
scCtlrNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrNbr.setStatus('current')
if mibBuilder.loadTexts: scCtlrNbr.setDescription('controller number (same value as scCtlrIndex)')
scCtlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrStatus.setStatus('current')
if mibBuilder.loadTexts: scCtlrStatus.setDescription('controller status')
scCtlrName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrName.setStatus('current')
if mibBuilder.loadTexts: scCtlrName.setDescription('controller name')
scCtlrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrIpAddr.setStatus('current')
if mibBuilder.loadTexts: scCtlrIpAddr.setDescription('controller IP Address')
scCtlrForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCtlrForceTrap.setStatus('current')
if mibBuilder.loadTexts: scCtlrForceTrap.setDescription("SET to 'ForceTrap' forces a scCtlrStatusChange trap. GET always returns the string 'Empty'.")
scCtlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCtlrModel.setStatus('current')
if mibBuilder.loadTexts: scCtlrModel.setDescription('controller Model')
scCtlrServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCtlrServiceTag.setStatus('current')
if mibBuilder.loadTexts: scCtlrServiceTag.setDescription('controller Dell Service Tag')
scCtlrAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 13, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCtlrAssetTag.setStatus('current')
if mibBuilder.loadTexts: scCtlrAssetTag.setDescription('controller Asset Tag')
scDiskTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 14), )
if mibBuilder.loadTexts: scDiskTable.setStatus('current')
if mibBuilder.loadTexts: scDiskTable.setDescription('Disk Table')
scDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scDiskIndex"))
if mibBuilder.loadTexts: scDiskEntry.setStatus('current')
if mibBuilder.loadTexts: scDiskEntry.setDescription('an entry in scDiskTable')
scDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: scDiskIndex.setStatus('current')
if mibBuilder.loadTexts: scDiskIndex.setDescription('index into scDiskTable (same value as scDiskNbr)')
scDiskNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskNbr.setStatus('current')
if mibBuilder.loadTexts: scDiskNbr.setDescription('disk number (same value as scDiskIndex)')
scDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskStatus.setStatus('current')
if mibBuilder.loadTexts: scDiskStatus.setDescription('disk status')
scDiskNamePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskNamePosition.setStatus('current')
if mibBuilder.loadTexts: scDiskNamePosition.setDescription('disk name: format ee-dd where ee is the enclosure number, and dd is the disk number.')
scDiskHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskHealthy.setStatus('current')
if mibBuilder.loadTexts: scDiskHealthy.setDescription('true(1) indicates that the disk is healthy')
scDiskStatusMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskStatusMsg.setStatus('current')
if mibBuilder.loadTexts: scDiskStatusMsg.setDescription("disk status message: set to 'no status message' when scDiskStatus=up")
scDiskApiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskApiIndex.setStatus('current')
if mibBuilder.loadTexts: scDiskApiIndex.setDescription('disk api index: used internal to the SC')
scDiskForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDiskForceTrap.setStatus('current')
if mibBuilder.loadTexts: scDiskForceTrap.setDescription("SET to 'ForceTrap' forces a scDiskStatusChange trap. GET always returns the string 'Empty'.")
scDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskSize.setStatus('current')
if mibBuilder.loadTexts: scDiskSize.setDescription('disk size: raw capacity in GB')
scDiskIoPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fibrechannel", 1), ("iscsi", 2), ("fibrechanneloverethernet", 3), ("sas", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskIoPortType.setStatus('current')
if mibBuilder.loadTexts: scDiskIoPortType.setDescription('disk I/O port type (bus type)')
scDiskEnclosure = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 14, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskEnclosure.setStatus('current')
if mibBuilder.loadTexts: scDiskEnclosure.setDescription('disk enclosure index')
scEnclTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 15), )
if mibBuilder.loadTexts: scEnclTable.setStatus('current')
if mibBuilder.loadTexts: scEnclTable.setDescription('Enclosure Table')
scEnclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scEnclIndex"))
if mibBuilder.loadTexts: scEnclEntry.setStatus('current')
if mibBuilder.loadTexts: scEnclEntry.setDescription('an entry in scEnclTable')
scEnclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: scEnclIndex.setStatus('current')
if mibBuilder.loadTexts: scEnclIndex.setDescription('index into scEnclTable (same value as scEnclNbr)')
scEnclNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclNbr.setStatus('current')
if mibBuilder.loadTexts: scEnclNbr.setDescription('enclosure number (same value as scEnclIndex)')
scEnclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclStatus.setStatus('current')
if mibBuilder.loadTexts: scEnclStatus.setDescription('enclosure status')
scEnclName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclName.setStatus('current')
if mibBuilder.loadTexts: scEnclName.setDescription('enclosure name')
scEnclStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclStatusDescr.setStatus('current')
if mibBuilder.loadTexts: scEnclStatusDescr.setDescription('enclosure status description')
scEnclType = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclType.setStatus('current')
if mibBuilder.loadTexts: scEnclType.setDescription('enclosure type')
scEnclModel = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclModel.setStatus('current')
if mibBuilder.loadTexts: scEnclModel.setDescription('enclosure model')
scEnclForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEnclForceTrap.setStatus('current')
if mibBuilder.loadTexts: scEnclForceTrap.setDescription("SET to 'ForceTrap' forces a scEnclStatusChange trap. GET always returns the string 'Empty'.")
scEnclServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEnclServiceTag.setStatus('current')
if mibBuilder.loadTexts: scEnclServiceTag.setDescription('enclosure Dell Service Tag')
scEnclAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 15, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEnclAssetTag.setStatus('current')
if mibBuilder.loadTexts: scEnclAssetTag.setDescription('enclosure Asset Tag')
scCtlrFanTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 16), )
if mibBuilder.loadTexts: scCtlrFanTable.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanTable.setDescription('Controller Fan Sensor Table')
scCtlrFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scCtlrIndex"), (0, "COMPELLENT-MIB", "scCtlrFanIndex"))
if mibBuilder.loadTexts: scCtlrFanEntry.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanEntry.setDescription('an entry in scCtlrFanTable')
scCtlrFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scCtlrFanIndex.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanIndex.setDescription('index into scCtlrFanTable (same value as scCtlrFanNbr)')
scCtlrFanNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanNbr.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanNbr.setDescription('Fan number (same value as scCtlrFanIndex)')
scCtlrFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanStatus.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanStatus.setDescription('Fan status')
scCtlrFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanName.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanName.setDescription('Fan name')
scCtlrFanCurrentRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanCurrentRpm.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanCurrentRpm.setDescription('Fan current rpm')
scCtlrFanNormMaxRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanNormMaxRpm.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanNormMaxRpm.setDescription('Fan normal maximum rpm')
scCtlrFanNormMinRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanNormMinRpm.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanNormMinRpm.setDescription('Fan normal minimum rpm')
scCtlrFanWarnLwrRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanWarnLwrRpm.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanWarnLwrRpm.setDescription('Fan warning lower threshold rpm')
scCtlrFanWarnUprRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanWarnUprRpm.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanWarnUprRpm.setDescription('Fan warning-level upper threshold rpm')
scCtlrFanCritLwrRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanCritLwrRpm.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanCritLwrRpm.setDescription('Fan crtical-level lower threshold rpm')
scCtlrFanCritUprRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanCritUprRpm.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanCritUprRpm.setDescription('Fan crtical-level upper threshold rpm')
scCtlrFanForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCtlrFanForceTrap.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanForceTrap.setDescription("SET to 'ForceTrap' forces a scCtlrCompStatusChange trap. GET always returns the string 'Empty'.")
scCtlrFanApiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 16, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrFanApiIndex.setStatus('current')
if mibBuilder.loadTexts: scCtlrFanApiIndex.setDescription('fan api index: used internal to the SC')
scCtlrPowerTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 17), )
if mibBuilder.loadTexts: scCtlrPowerTable.setStatus('current')
if mibBuilder.loadTexts: scCtlrPowerTable.setDescription('Controller Power Supply Table')
scCtlrPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 17, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scCtlrIndex"), (0, "COMPELLENT-MIB", "scCtlrPowerIndex"))
if mibBuilder.loadTexts: scCtlrPowerEntry.setStatus('current')
if mibBuilder.loadTexts: scCtlrPowerEntry.setDescription('an entry in scCtlrPowerTable')
scCtlrPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scCtlrPowerIndex.setStatus('current')
if mibBuilder.loadTexts: scCtlrPowerIndex.setDescription('index into scCtlrPowerTable (same value as scCtlrPowerNbr)')
scCtlrPowerNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrPowerNbr.setStatus('current')
if mibBuilder.loadTexts: scCtlrPowerNbr.setDescription('Ctlr Power Supply number (same value as scCtlrPowerIndex)')
scCtlrPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 17, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrPowerStatus.setStatus('current')
if mibBuilder.loadTexts: scCtlrPowerStatus.setDescription('Controller Power Supply status')
scCtlrPowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 17, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrPowerName.setStatus('current')
if mibBuilder.loadTexts: scCtlrPowerName.setDescription('Controller Power Supply name')
scCtlrPowerForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 17, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCtlrPowerForceTrap.setStatus('current')
if mibBuilder.loadTexts: scCtlrPowerForceTrap.setDescription("SET to 'ForceTrap' forces a scCtlrCompStatusChange trap. GET always returns the string 'Empty'.")
scCtlrVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 18), )
if mibBuilder.loadTexts: scCtlrVoltageTable.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageTable.setDescription('Voltage Sensor Table')
scCtlrVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scCtlrIndex"), (0, "COMPELLENT-MIB", "scCtlrVoltageIndex"))
if mibBuilder.loadTexts: scCtlrVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageEntry.setDescription('an entry in scCtlrVoltageTable')
scCtlrVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scCtlrVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageIndex.setDescription('index into scCtlrVoltageTable (same value as scCtlrVoltageNbr)')
scCtlrVoltageNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageNbr.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageNbr.setDescription('Ctlr Voltage Sensor number (same value as scCtlrVoltageIndex)')
scCtlrVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageStatus.setDescription('Controller Voltage Sensor status')
scCtlrVoltageName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageName.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageName.setDescription('Controller Voltage Sensor name')
scCtlrVoltageCurrentV = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageCurrentV.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageCurrentV.setDescription('Controller Voltage Current Voltage')
scCtlrVoltageNormMaxV = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageNormMaxV.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageNormMaxV.setDescription('Controller Voltage Normal Maximum')
scCtlrVoltageNormMinV = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageNormMinV.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageNormMinV.setDescription('Controller Voltage Normal Minimum')
scCtlrVoltageWarnLwrV = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageWarnLwrV.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageWarnLwrV.setDescription('Controller Voltage Warning-level Lower Threshold')
scCtlrVoltageWarnUprV = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageWarnUprV.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageWarnUprV.setDescription('Controller Voltage Warning-level Upper Threshold')
scCtlrVoltageCritLwrV = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageCritLwrV.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageCritLwrV.setDescription('Controller Voltage Critical-level Lower Threshold')
scCtlrVoltageCritUprV = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrVoltageCritUprV.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageCritUprV.setDescription('Controller Voltage Critical-level Upper Threshold')
scCtlrVoltageForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 18, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCtlrVoltageForceTrap.setStatus('current')
if mibBuilder.loadTexts: scCtlrVoltageForceTrap.setDescription("SET to 'ForceTrap' forces a scCtlrCompStatusChange trap. GET always returns the string 'Empty'.")
scCtlrTempTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 19), )
if mibBuilder.loadTexts: scCtlrTempTable.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempTable.setDescription('Temperature Sensor Table')
scCtlrTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scCtlrIndex"), (0, "COMPELLENT-MIB", "scCtlrTempIndex"))
if mibBuilder.loadTexts: scCtlrTempEntry.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempEntry.setDescription('an entry in scCtlrTempTable')
scCtlrTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scCtlrTempIndex.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempIndex.setDescription('index into scCtlrTempTable (same value as scCtlrTempNbr)')
scCtlrTempNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempNbr.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempNbr.setDescription('Ctlr Temp Sensor number (same value as scCtlrTempIndex)')
scCtlrTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempStatus.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempStatus.setDescription('Controller Temp Sensor status')
scCtlrTempName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempName.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempName.setDescription('Controller Temp Sensor name')
scCtlrTempCurrentC = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempCurrentC.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempCurrentC.setDescription('Controller Temp Sensor Current Temperature in Celcius')
scCtlrTempNormMaxC = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempNormMaxC.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempNormMaxC.setDescription('Controller Temp Sensor Normal Maximum Temp in Celcius')
scCtlrTempNormMinC = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempNormMinC.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempNormMinC.setDescription('Controller Temp Sensor Normal Minimum Temp in Celcius')
scCtlrTempWarnLwrC = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempWarnLwrC.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempWarnLwrC.setDescription('Controller Temp Sensor Warning-level Lower Threshold')
scCtlrTempWarnUprC = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempWarnUprC.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempWarnUprC.setDescription('Controller Temp Sensor Warning-level Upper Threshold')
scCtlrTempCritLwrC = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempCritLwrC.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempCritLwrC.setDescription('Controller Temp Sensor Critical-level Lower Threshold')
scCtlrTempCritUprC = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCtlrTempCritUprC.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempCritUprC.setDescription('Controller Temp Sensor Critical-level Upper Threshold')
scCtlrTempForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 19, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCtlrTempForceTrap.setStatus('current')
if mibBuilder.loadTexts: scCtlrTempForceTrap.setDescription("SET to 'ForceTrap' forces a scCtlrCompStatusChange trap. GET always returns the string 'Empty'.")
scEnclFanTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 20), )
if mibBuilder.loadTexts: scEnclFanTable.setStatus('current')
if mibBuilder.loadTexts: scEnclFanTable.setDescription('enclosure Fan Sensor Table')
scEnclFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 20, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scEnclIndex"), (0, "COMPELLENT-MIB", "scEnclFanIndex"))
if mibBuilder.loadTexts: scEnclFanEntry.setStatus('current')
if mibBuilder.loadTexts: scEnclFanEntry.setDescription('an entry in scEnclFanTable')
scEnclFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scEnclFanIndex.setStatus('current')
if mibBuilder.loadTexts: scEnclFanIndex.setDescription('index into scEnclFanTable (same value as scEnclFanNbr)')
scEnclFanNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclFanNbr.setStatus('current')
if mibBuilder.loadTexts: scEnclFanNbr.setDescription('Fan number (same value as scEnclFanIndex)')
scEnclFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 20, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclFanStatus.setStatus('current')
if mibBuilder.loadTexts: scEnclFanStatus.setDescription('Fan status')
scEnclFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 20, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclFanLocation.setStatus('current')
if mibBuilder.loadTexts: scEnclFanLocation.setDescription('Fan location')
scEnclFanCurrentS = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 20, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclFanCurrentS.setStatus('current')
if mibBuilder.loadTexts: scEnclFanCurrentS.setDescription('Fan current speed: high, Low, Medium, Off, Unknown')
scEnclFanForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 20, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEnclFanForceTrap.setStatus('current')
if mibBuilder.loadTexts: scEnclFanForceTrap.setDescription("SET to 'ForceTrap' forces a scEnclCompStatusChange trap. GET always returns the string 'Empty'.")
scEnclPowerTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 21), )
if mibBuilder.loadTexts: scEnclPowerTable.setStatus('current')
if mibBuilder.loadTexts: scEnclPowerTable.setDescription('enclosure Power Supply Table')
scEnclPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 21, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scEnclIndex"), (0, "COMPELLENT-MIB", "scEnclPowerIndex"))
if mibBuilder.loadTexts: scEnclPowerEntry.setStatus('current')
if mibBuilder.loadTexts: scEnclPowerEntry.setDescription('an entry in scEnclPowerTable')
scEnclPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scEnclPowerIndex.setStatus('current')
if mibBuilder.loadTexts: scEnclPowerIndex.setDescription('index into scEnclPowerTable (same value as scEnclPowerNbr)')
scEnclPowerNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclPowerNbr.setStatus('current')
if mibBuilder.loadTexts: scEnclPowerNbr.setDescription('Encl Power Supply number (same value as scEnclPowerIndex)')
scEnclPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 21, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclPowerStatus.setStatus('current')
if mibBuilder.loadTexts: scEnclPowerStatus.setDescription('enclosure Power Supply status')
scEnclPowerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 21, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclPowerPosition.setStatus('current')
if mibBuilder.loadTexts: scEnclPowerPosition.setDescription('enclosure Power Supply position')
scEnclPowerForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 21, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEnclPowerForceTrap.setStatus('current')
if mibBuilder.loadTexts: scEnclPowerForceTrap.setDescription("SET to 'ForceTrap' forces a scEnclCompStatusChange trap. GET always returns the string 'Empty'.")
scEnclIoModTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 22), )
if mibBuilder.loadTexts: scEnclIoModTable.setStatus('current')
if mibBuilder.loadTexts: scEnclIoModTable.setDescription('I/O Module Table')
scEnclIoModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 22, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scEnclIndex"), (0, "COMPELLENT-MIB", "scEnclIoModIndex"))
if mibBuilder.loadTexts: scEnclIoModEntry.setStatus('current')
if mibBuilder.loadTexts: scEnclIoModEntry.setDescription('an entry in scEnclIoModTable')
scEnclIoModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scEnclIoModIndex.setStatus('current')
if mibBuilder.loadTexts: scEnclIoModIndex.setDescription('index into scEnclIoModTable (same value as scEnclIoModNbr)')
scEnclIoModNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclIoModNbr.setStatus('current')
if mibBuilder.loadTexts: scEnclIoModNbr.setDescription('Encl I/O Module number (same value as scEnclIoModIndex)')
scEnclIoModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 22, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclIoModStatus.setStatus('current')
if mibBuilder.loadTexts: scEnclIoModStatus.setDescription('enclosure I/O Module status')
scEnclIoModPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 22, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclIoModPosition.setStatus('current')
if mibBuilder.loadTexts: scEnclIoModPosition.setDescription('enclosure I/O Module position')
scEnclIoModForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 22, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEnclIoModForceTrap.setStatus('current')
if mibBuilder.loadTexts: scEnclIoModForceTrap.setDescription("SET to 'ForceTrap' forces a scEnclCompStatusChange trap. GET always returns the string 'Empty'.")
scEnclTempTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 23), )
if mibBuilder.loadTexts: scEnclTempTable.setStatus('current')
if mibBuilder.loadTexts: scEnclTempTable.setDescription('Temperature Sensor Table')
scEnclTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 23, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scEnclIndex"), (0, "COMPELLENT-MIB", "scEnclTempIndex"))
if mibBuilder.loadTexts: scEnclTempEntry.setStatus('current')
if mibBuilder.loadTexts: scEnclTempEntry.setDescription('an entry in scEnclTempTable')
scEnclTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scEnclTempIndex.setStatus('current')
if mibBuilder.loadTexts: scEnclTempIndex.setDescription('index into scEnclTempTable (same value as scEnclTempNbr)')
scEnclTempNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclTempNbr.setStatus('current')
if mibBuilder.loadTexts: scEnclTempNbr.setDescription('Encl Temp Sensor number (same value as scEnclTempIndex)')
scEnclTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 23, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclTempStatus.setStatus('current')
if mibBuilder.loadTexts: scEnclTempStatus.setDescription('enclosure Temp Sensor status')
scEnclTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 23, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclTempLocation.setStatus('current')
if mibBuilder.loadTexts: scEnclTempLocation.setDescription('enclosure Temp Sensor location')
scEnclTempCurrentC = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 23, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclTempCurrentC.setStatus('current')
if mibBuilder.loadTexts: scEnclTempCurrentC.setDescription('enclosure Temp Sensor current temperature in Celcius')
scEnclTempForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 23, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEnclTempForceTrap.setStatus('current')
if mibBuilder.loadTexts: scEnclTempForceTrap.setDescription("SET to 'ForceTrap' forces a scEnclCompStatusChange trap. GET always returns the string 'Empty'.")
scEnclAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 24), )
if mibBuilder.loadTexts: scEnclAlarmTable.setStatus('current')
if mibBuilder.loadTexts: scEnclAlarmTable.setDescription('Audible Alarm Table')
scEnclAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 24, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scEnclIndex"), (0, "COMPELLENT-MIB", "scEnclAlarmIndex"))
if mibBuilder.loadTexts: scEnclAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: scEnclAlarmEntry.setDescription('an entry in scEnclAlarmTable')
scEnclAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scEnclAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: scEnclAlarmIndex.setDescription('index into scEnclAlarmTable (same value as scEnclAlarmNbr)')
scEnclAlarmNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 24, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclAlarmNbr.setStatus('current')
if mibBuilder.loadTexts: scEnclAlarmNbr.setDescription('Encl Audible Alarm number (same value as scEnclTempIndex)')
scEnclAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 24, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: scEnclAlarmStatus.setDescription('enclosure Audible Alarm status')
scEnclAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 24, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEnclAlarmName.setStatus('current')
if mibBuilder.loadTexts: scEnclAlarmName.setDescription('enclosure Audible Alarm name')
scEnclAlarmForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 24, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEnclAlarmForceTrap.setStatus('current')
if mibBuilder.loadTexts: scEnclAlarmForceTrap.setDescription("SET to 'ForceTrap' forces a scEnclCompStatusChange trap. GET always returns the string 'Empty'.")
scDiskFolderTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 25), )
if mibBuilder.loadTexts: scDiskFolderTable.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderTable.setDescription('Disk Folder Table')
scDiskFolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scDiskFolderIndex"))
if mibBuilder.loadTexts: scDiskFolderEntry.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderEntry.setDescription('an entry in scDiskFolderTable')
scDiskFolderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: scDiskFolderIndex.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderIndex.setDescription('index into scDiskFolderTable (same value as scDiskFolderNbr)')
scDiskFolderNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderNbr.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderNbr.setDescription('disk folder number (same value as scDiskFolderIndex)')
scDiskFolderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderStatus.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderStatus.setDescription('Disk Folder status')
scDiskFolderName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderName.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderName.setDescription('Disk Folder name')
scDiskFolderCapcty = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderCapcty.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderCapcty.setDescription('Disk Folder capacity')
scDiskFolderAlrtThr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderAlrtThr.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderAlrtThr.setDescription('Disk Folder alert threshold')
scDiskFolderApiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderApiIndex.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderApiIndex.setDescription('Disk Folder api index: used internal to the SC')
scDiskFolderForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 25, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDiskFolderForceTrap.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderForceTrap.setDescription("SET to 'ForceTrap' forces a scDiskFolderStatusChange trap. GET always returns the string 'Empty'.")
scVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 26), )
if mibBuilder.loadTexts: scVolumeTable.setStatus('current')
if mibBuilder.loadTexts: scVolumeTable.setDescription('Volume Table')
scVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 26, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scVolumeIndex"))
if mibBuilder.loadTexts: scVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: scVolumeEntry.setDescription('an entry in scVolumeTable')
scVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 26, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)))
if mibBuilder.loadTexts: scVolumeIndex.setStatus('current')
if mibBuilder.loadTexts: scVolumeIndex.setDescription('index into scVolumeTable (same value as scVolumeNbr)')
scVolumeNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 26, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scVolumeNbr.setStatus('current')
if mibBuilder.loadTexts: scVolumeNbr.setDescription('Volume number (same value as scVolumeIndex)')
scVolumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 26, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scVolumeStatus.setStatus('current')
if mibBuilder.loadTexts: scVolumeStatus.setDescription('Volume status')
scVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 26, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scVolumeName.setStatus('current')
if mibBuilder.loadTexts: scVolumeName.setDescription('Volume name')
scVolumeApiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 26, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scVolumeApiIndex.setStatus('current')
if mibBuilder.loadTexts: scVolumeApiIndex.setDescription('Volume api index: used internal to the SC')
scVolumeForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 26, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVolumeForceTrap.setStatus('current')
if mibBuilder.loadTexts: scVolumeForceTrap.setDescription("SET to 'ForceTrap' forces a scVolumeStatusChange trap. GET always returns the string 'Empty'.")
scServerTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 27), )
if mibBuilder.loadTexts: scServerTable.setStatus('current')
if mibBuilder.loadTexts: scServerTable.setDescription('Server Table')
scServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scServerIndex"))
if mibBuilder.loadTexts: scServerEntry.setStatus('current')
if mibBuilder.loadTexts: scServerEntry.setDescription('an entry in scServerTable')
scServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)))
if mibBuilder.loadTexts: scServerIndex.setStatus('current')
if mibBuilder.loadTexts: scServerIndex.setDescription('index into scServerTable (same value as scServerNbr)')
scServerNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scServerNbr.setStatus('current')
if mibBuilder.loadTexts: scServerNbr.setDescription('Managed Server number (same value as scServerIndex)')
scServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scServerStatus.setStatus('current')
if mibBuilder.loadTexts: scServerStatus.setDescription('Managed Server status')
scServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scServerName.setStatus('current')
if mibBuilder.loadTexts: scServerName.setDescription('Managed Server name')
scServerCnctvy = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("partial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scServerCnctvy.setStatus('current')
if mibBuilder.loadTexts: scServerCnctvy.setDescription('Managed Server connectivity')
scServerPathCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scServerPathCount.setStatus('current')
if mibBuilder.loadTexts: scServerPathCount.setDescription('Managed Server path count: the number of primary paths from the server to the SC')
scServerApiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scServerApiIndex.setStatus('current')
if mibBuilder.loadTexts: scServerApiIndex.setDescription('Server api index: used internal to the SC')
scServerForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 27, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scServerForceTrap.setStatus('current')
if mibBuilder.loadTexts: scServerForceTrap.setDescription("SET to 'ForceTrap' forces a scServerStatusChange trap. GET always returns the string 'Empty'.")
scCacheTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 28), )
if mibBuilder.loadTexts: scCacheTable.setStatus('current')
if mibBuilder.loadTexts: scCacheTable.setDescription('Ctlr Cache Table')
scCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 28, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scCacheIndex"))
if mibBuilder.loadTexts: scCacheEntry.setStatus('current')
if mibBuilder.loadTexts: scCacheEntry.setDescription('an entry in scCacheTable')
scCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 28, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scCacheIndex.setStatus('current')
if mibBuilder.loadTexts: scCacheIndex.setDescription('index into scCacheTable (same value as scCacheNbr)')
scCacheNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 28, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCacheNbr.setStatus('current')
if mibBuilder.loadTexts: scCacheNbr.setDescription('Ctlr Cache number (same value as scCacheIndex)')
scCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 28, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCacheStatus.setStatus('current')
if mibBuilder.loadTexts: scCacheStatus.setDescription('Ctlr Cache status')
scCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 28, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCacheName.setStatus('current')
if mibBuilder.loadTexts: scCacheName.setDescription('Ctlr Cache name')
scCacheBatStat = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noBattery", 0), ("normal", 1), ("expirationPending", 2), ("expired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCacheBatStat.setStatus('current')
if mibBuilder.loadTexts: scCacheBatStat.setDescription('Ctlr Cache Battery Status')
scCacheBatExpr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 28, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCacheBatExpr.setStatus('current')
if mibBuilder.loadTexts: scCacheBatExpr.setDescription('Ctlr Cache Battery Expiration Date')
scCacheForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 28, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCacheForceTrap.setStatus('current')
if mibBuilder.loadTexts: scCacheForceTrap.setDescription("SET to 'ForceTrap' forces a scCacheStatusChange trap. GET always returns the string 'Empty'.")
scScTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 29), )
if mibBuilder.loadTexts: scScTable.setStatus('current')
if mibBuilder.loadTexts: scScTable.setDescription('Storage Center Table')
scScEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scScIndex"))
if mibBuilder.loadTexts: scScEntry.setStatus('current')
if mibBuilder.loadTexts: scScEntry.setDescription('an entry in scScTable')
scScIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: scScIndex.setStatus('current')
if mibBuilder.loadTexts: scScIndex.setDescription('index into scScTable (same value as scScNbr)')
scScNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scScNbr.setStatus('current')
if mibBuilder.loadTexts: scScNbr.setDescription('Storage Center number (same value as scScIndex)')
scScStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scScStatus.setStatus('current')
if mibBuilder.loadTexts: scScStatus.setDescription('Storage Center status')
scScName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scScName.setStatus('current')
if mibBuilder.loadTexts: scScName.setDescription('Storage Center name. Can be changed via sysName.')
scScContact = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scScContact.setStatus('current')
if mibBuilder.loadTexts: scScContact.setDescription('Storage Center contact. Can be changed via sysContact.')
scScLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scScLocation.setStatus('current')
if mibBuilder.loadTexts: scScLocation.setDescription('Storage Center location. Can be changed via sysLocation.')
scScPortsBal = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scScPortsBal.setStatus('current')
if mibBuilder.loadTexts: scScPortsBal.setDescription('Storage Center ports balanced')
scScMgmtIP = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scScMgmtIP.setStatus('current')
if mibBuilder.loadTexts: scScMgmtIP.setDescription('Storage Center management IP addr')
scScSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scScSerial.setStatus('current')
if mibBuilder.loadTexts: scScSerial.setDescription('Storage Center serial number')
scScForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 29, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scScForceTrap.setStatus('current')
if mibBuilder.loadTexts: scScForceTrap.setDescription("SET to 'ForceTrap' forces a scLocalPortsStatusChange trap. GET always returns the string 'Empty'.")
scUPSTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 30), )
if mibBuilder.loadTexts: scUPSTable.setStatus('current')
if mibBuilder.loadTexts: scUPSTable.setDescription('Monitored UPS Table')
scUPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scUPSIndex"))
if mibBuilder.loadTexts: scUPSEntry.setStatus('current')
if mibBuilder.loadTexts: scUPSEntry.setDescription('an entry in scUPSTable')
scUPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: scUPSIndex.setStatus('current')
if mibBuilder.loadTexts: scUPSIndex.setDescription('index into scUPSTable (same value as scUPSNbr)')
scUPSNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUPSNbr.setStatus('current')
if mibBuilder.loadTexts: scUPSNbr.setDescription('Monitored UPS number (same value as scUPSIndex)')
scUPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1, 3), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUPSStatus.setStatus('current')
if mibBuilder.loadTexts: scUPSStatus.setDescription('Monitored UPS status')
scUPSName = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUPSName.setStatus('current')
if mibBuilder.loadTexts: scUPSName.setDescription('Monitored UPS name')
scUPSBatLife = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUPSBatLife.setStatus('current')
if mibBuilder.loadTexts: scUPSBatLife.setDescription('Monitored UPS battery life')
scUPSStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUPSStatusDescr.setStatus('current')
if mibBuilder.loadTexts: scUPSStatusDescr.setDescription('Monitored UPS status description')
scUPSApiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUPSApiIndex.setStatus('current')
if mibBuilder.loadTexts: scUPSApiIndex.setDescription('UPS api index: used internal to the SC')
scUPSForceTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 30, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scUPSForceTrap.setStatus('current')
if mibBuilder.loadTexts: scUPSForceTrap.setDescription("SET to 'ForceTrap' forces a scMonitoredUPSStatusChange trap. GET always returns the string 'Empty'.")
scObjCntTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 31), )
if mibBuilder.loadTexts: scObjCntTable.setStatus('current')
if mibBuilder.loadTexts: scObjCntTable.setDescription('Object Count Table')
scObjCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 31, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scObjCntIndex"))
if mibBuilder.loadTexts: scObjCntEntry.setStatus('current')
if mibBuilder.loadTexts: scObjCntEntry.setDescription('an entry in scObjCntTable')
scObjCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 31, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: scObjCntIndex.setStatus('current')
if mibBuilder.loadTexts: scObjCntIndex.setDescription('index into scObjCntTable (same value as scObjCntNbr)')
scObjCntNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 31, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scObjCntNbr.setStatus('current')
if mibBuilder.loadTexts: scObjCntNbr.setDescription('Object Count number (same value as scObjCntIndex)')
scObjCntDevsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 31, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scObjCntDevsInUse.setStatus('current')
if mibBuilder.loadTexts: scObjCntDevsInUse.setDescription('Number of Devices In Use')
scObjCntReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 31, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scObjCntReplays.setStatus('current')
if mibBuilder.loadTexts: scObjCntReplays.setDescription('Numbers of Replays')
scObjCntDisks = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 31, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scObjCntDisks.setStatus('current')
if mibBuilder.loadTexts: scObjCntDisks.setDescription('Numbers of Disks')
scObjCntServers = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 31, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scObjCntServers.setStatus('current')
if mibBuilder.loadTexts: scObjCntServers.setDescription('Numbers of Servers')
scObjCntVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 31, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scObjCntVolumes.setStatus('current')
if mibBuilder.loadTexts: scObjCntVolumes.setDescription('Numbers of Volumes')
scDiskFolderSUTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 32), )
if mibBuilder.loadTexts: scDiskFolderSUTable.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderSUTable.setDescription('Disk Folder Storage Usage Table')
scDiskFolderSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 32, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scDiskFolderSUIndex"))
if mibBuilder.loadTexts: scDiskFolderSUEntry.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderSUEntry.setDescription('an entry in scDiskFolderSUTable')
scDiskFolderSUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 32, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: scDiskFolderSUIndex.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderSUIndex.setDescription('index into scDiskFolderSUTable (same value as scDiskFolderSUNbr)')
scDiskFolderSUNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 32, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderSUNbr.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderSUNbr.setDescription('disk folder storage usage number (same value as scDiskFolderSUIndex)')
scDiskFolderSUTotalSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 32, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderSUTotalSpace.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderSUTotalSpace.setDescription('Disk Folder Storage Usage total space, in GB')
scDiskFolderSUUsedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 32, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskFolderSUUsedSpace.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderSUUsedSpace.setDescription('Disk Folder Storage Usage used space, in GB')
scSIDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disk", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSIDeviceType.setStatus('current')
if mibBuilder.loadTexts: scSIDeviceType.setDescription('SCSI Initiator Device Type')
scSIDeviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 34), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSIDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: scSIDeviceStatus.setDescription('SCSI Initiator Device Status')
scHWCompStatus = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 35), ScStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHWCompStatus.setStatus('current')
if mibBuilder.loadTexts: scHWCompStatus.setDescription('Last Hardware Component Status sent with scCtlrCompStatusChange and scEnclCompStatusChange.')
scHWCompName = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 36), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHWCompName.setStatus('current')
if mibBuilder.loadTexts: scHWCompName.setDescription('Last Hardware Component Name sent with scCtlrCompStatusChange and scEnclCompStatusChange.')
scHWCompPosition = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 37), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHWCompPosition.setStatus('current')
if mibBuilder.loadTexts: scHWCompPosition.setDescription('Last Hardware Component Position sent with scCtlrCompStatusChange and scEnclCompStatusChange.')
scHWCompType = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 38), ScHardwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHWCompType.setStatus('current')
if mibBuilder.loadTexts: scHWCompType.setDescription('Last Hardware Component Type sent with scCtlrCompStatusChange and scEnclCompStatusChange.')
scHWCompState = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 39), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHWCompState.setStatus('current')
if mibBuilder.loadTexts: scHWCompState.setDescription('Last Hardware Component State sent with scCtlrCompStatusChange and scEnclCompStatusChange. Has meaning only in case of ScHardwareType = tempsensor, voltagesensor, or fan.')
scTrapAction = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 40), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrapAction.setStatus('current')
if mibBuilder.loadTexts: scTrapAction.setDescription('Recommend action associated with the most recent trap.')
scAlertMsg = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 41), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertMsg.setStatus('current')
if mibBuilder.loadTexts: scAlertMsg.setDescription('Alert message associated with the most recent trap.')
scForceTrap = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 42), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scForceTrap.setStatus('current')
if mibBuilder.loadTexts: scForceTrap.setDescription('For software development use.')
scTrapNormalized = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 43), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrapNormalized.setStatus('current')
if mibBuilder.loadTexts: scTrapNormalized.setDescription('Trap-normalized boolean flag: true means that the associated alert condition is now normal, i.e., that alert has cleared.')
scLastWorstAlert = MibScalar((1, 3, 6, 1, 4, 1, 16139, 2, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scLastWorstAlert.setStatus('current')
if mibBuilder.loadTexts: scLastWorstAlert.setDescription('If the productIDGlobalStatus is not ok then scLastWorstAlert contains the scAlertNbr of the alert that is responsible for the negative status.')
scDiskConfigTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 45), )
if mibBuilder.loadTexts: scDiskConfigTable.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigTable.setDescription('Disk Configuration Table')
scDiskConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scDiskConfigIndex"))
if mibBuilder.loadTexts: scDiskConfigEntry.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigEntry.setDescription('an entry in scDiskConfigTable')
scDiskConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: scDiskConfigIndex.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigIndex.setDescription('index into scDiskConfigTable (same value as scDiskConfigNbr)')
scDiskConfigNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskConfigNbr.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigNbr.setDescription('disk config number (same value as scDiskFolderIndex)')
scDiskConfigSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskConfigSerial.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigSerial.setDescription('Disk Config serial number')
scDiskConfigVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskConfigVendor.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigVendor.setDescription('Disk Config vendor name')
scDiskConfigProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskConfigProduct.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigProduct.setDescription('Disk Config product description')
scDiskConfigModel = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskConfigModel.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigModel.setDescription('Disk vendor + product description')
scDiskConfigRev = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskConfigRev.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigRev.setDescription('Disk revision')
scDiskConfigApiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 45, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDiskConfigApiIndex.setStatus('current')
if mibBuilder.loadTexts: scDiskConfigApiIndex.setDescription('Disk Config api index: used internal to the SC')
scAlertTable = MibTable((1, 3, 6, 1, 4, 1, 16139, 2, 46), )
if mibBuilder.loadTexts: scAlertTable.setStatus('current')
if mibBuilder.loadTexts: scAlertTable.setDescription('Alert Table')
scAlertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1), ).setIndexNames((0, "COMPELLENT-MIB", "scCtlrIndex"), (0, "COMPELLENT-MIB", "scAlertIndex"))
if mibBuilder.loadTexts: scAlertEntry.setStatus('current')
if mibBuilder.loadTexts: scAlertEntry.setDescription('an entry in scAlertTable')
scAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: scAlertIndex.setStatus('current')
if mibBuilder.loadTexts: scAlertIndex.setDescription('index into scAlertTable (same value as scAlertNbr)')
scAlertNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertNbr.setStatus('current')
if mibBuilder.loadTexts: scAlertNbr.setDescription('alert number (same value as scalertIndex)')
scAlertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("complete", 0), ("critical", 1), ("degraded", 2), ("deleting", 3), ("down", 4), ("emergency", 5), ("inform", 6), ("okay", 7), ("unavailable", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertStatus.setStatus('current')
if mibBuilder.loadTexts: scAlertStatus.setDescription('Alert status')
scAlertApiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertApiIndex.setStatus('current')
if mibBuilder.loadTexts: scAlertApiIndex.setDescription('Alert api index: used internal to the SC')
scAlertDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertDefinition.setStatus('current')
if mibBuilder.loadTexts: scAlertDefinition.setDescription('Alert definition')
scAlertCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("connectivity", 0), ("disk", 1), ("hardware", 2), ("storage", 3), ("system", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertCategory.setStatus('current')
if mibBuilder.loadTexts: scAlertCategory.setDescription('Alert status')
scAlertCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertCreateTime.setStatus('current')
if mibBuilder.loadTexts: scAlertCreateTime.setDescription('Alert creation time')
scAlertMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertMessage.setStatus('current')
if mibBuilder.loadTexts: scAlertMessage.setDescription('Alert message')
scAlertType = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("alert", 0), ("indiction", 1), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertType.setStatus('current')
if mibBuilder.loadTexts: scAlertType.setDescription('Alert type')
scAlertAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertAcknowledged.setStatus('current')
if mibBuilder.loadTexts: scAlertAcknowledged.setDescription('Alert-acknowledged boolean flag tells whether alert has been acknowledged via the SC GUI')
scAlertActive = MibTableColumn((1, 3, 6, 1, 4, 1, 16139, 2, 46, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlertActive.setStatus('current')
if mibBuilder.loadTexts: scAlertActive.setDescription("Alert-active boolean flag tells whether alert is active. 'false' = alert has been cleared.")
compellentConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 16139, 3))
if mibBuilder.loadTexts: compellentConformance.setStatus('current')
if mibBuilder.loadTexts: compellentConformance.setDescription('Compellent Conformance.')
compellentCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 16139, 3, 1))
if mibBuilder.loadTexts: compellentCompliances.setStatus('current')
if mibBuilder.loadTexts: compellentCompliances.setDescription('Compellent Compliances.')
compellentCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 16139, 3, 1, 1)).setObjects(("COMPELLENT-MIB", "compellentNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compellentCompliance1 = compellentCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: compellentCompliance1.setDescription('Deprectaed compliance statement.')
compellentCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 16139, 3, 1, 2)).setObjects(("COMPELLENT-MIB", "compellentNotificationsGroup2"), ("COMPELLENT-MIB", "compellentObjectsGroup"), ("COMPELLENT-MIB", "productID"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compellentCompliance2 = compellentCompliance2.setStatus('current')
if mibBuilder.loadTexts: compellentCompliance2.setDescription('The compliance statement for Compellent SNMP entities.')
compellentGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 16139, 3, 2))
if mibBuilder.loadTexts: compellentGroups.setStatus('current')
if mibBuilder.loadTexts: compellentGroups.setDescription('Compellent Groups.')
compellentNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 16139, 3, 2, 1)).setObjects(("COMPELLENT-MIB", "trapStatusOkay"), ("COMPELLENT-MIB", "trapStatusDegraded"), ("COMPELLENT-MIB", "trapStatusDown"), ("COMPELLENT-MIB", "trapStatusInform"), ("COMPELLENT-MIB", "trapStatusCritical"), ("COMPELLENT-MIB", "trapStatusComplete"), ("COMPELLENT-MIB", "trapStatusEmergency"), ("COMPELLENT-MIB", "trapStatusUnavailable"), ("COMPELLENT-MIB", "trapStatusTest"), ("COMPELLENT-MIB", "trapStatusTestSpecific"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compellentNotificationsGroup = compellentNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: compellentNotificationsGroup.setDescription("Decrepated Traps. These traps, organized by 'severity', contain truncated alert-strings. These traps have been deprecated in favor of the traps in compellentNotificationsGroup2, organized by function.")
compellentNotificationsGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 16139, 3, 2, 2)).setObjects(("COMPELLENT-MIB", "scTestTrap"), ("COMPELLENT-MIB", "scMiscAlert"), ("COMPELLENT-MIB", "scDiskStatusChange"), ("COMPELLENT-MIB", "scCtlrStatusChange"), ("COMPELLENT-MIB", "scCtlrCompStatusChange"), ("COMPELLENT-MIB", "scEnclStatusChange"), ("COMPELLENT-MIB", "scEnclCompStatusChange"), ("COMPELLENT-MIB", "scDiskFolderStatusChange"), ("COMPELLENT-MIB", "scVolumeStatusChange"), ("COMPELLENT-MIB", "scServerStatusChange"), ("COMPELLENT-MIB", "scCacheStatusChange"), ("COMPELLENT-MIB", "scLocalPortCondStatusChange"), ("COMPELLENT-MIB", "scMonitoredUPSStatusChange"), ("COMPELLENT-MIB", "scSIDeviceStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compellentNotificationsGroup2 = compellentNotificationsGroup2.setStatus('current')
if mibBuilder.loadTexts: compellentNotificationsGroup2.setDescription('Traps organized by function. Deprecates compellentNotificationsGroup.')
compellentObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16139, 3, 2, 3)).setObjects(("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scTestString"), ("COMPELLENT-MIB", "scMiscAlertString"), ("COMPELLENT-MIB", "scDiskNbr"), ("COMPELLENT-MIB", "scDiskStatus"), ("COMPELLENT-MIB", "scDiskNamePosition"), ("COMPELLENT-MIB", "scDiskHealthy"), ("COMPELLENT-MIB", "scDiskStatusMsg"), ("COMPELLENT-MIB", "scDiskApiIndex"), ("COMPELLENT-MIB", "scDiskForceTrap"), ("COMPELLENT-MIB", "scDiskSize"), ("COMPELLENT-MIB", "scDiskIoPortType"), ("COMPELLENT-MIB", "scDiskEnclosure"), ("COMPELLENT-MIB", "scCtlrNbr"), ("COMPELLENT-MIB", "scCtlrStatus"), ("COMPELLENT-MIB", "scCtlrName"), ("COMPELLENT-MIB", "scCtlrIpAddr"), ("COMPELLENT-MIB", "scCtlrForceTrap"), ("COMPELLENT-MIB", "scCtlrModel"), ("COMPELLENT-MIB", "scCtlrServiceTag"), ("COMPELLENT-MIB", "scCtlrAssetTag"), ("COMPELLENT-MIB", "scCtlrFanNbr"), ("COMPELLENT-MIB", "scCtlrFanStatus"), ("COMPELLENT-MIB", "scCtlrFanName"), ("COMPELLENT-MIB", "scCtlrFanCurrentRpm"), ("COMPELLENT-MIB", "scCtlrFanNormMaxRpm"), ("COMPELLENT-MIB", "scCtlrFanNormMinRpm"), ("COMPELLENT-MIB", "scCtlrFanWarnLwrRpm"), ("COMPELLENT-MIB", "scCtlrFanWarnUprRpm"), ("COMPELLENT-MIB", "scCtlrFanCritLwrRpm"), ("COMPELLENT-MIB", "scCtlrFanCritUprRpm"), ("COMPELLENT-MIB", "scCtlrFanForceTrap"), ("COMPELLENT-MIB", "scCtlrFanApiIndex"), ("COMPELLENT-MIB", "scCtlrPowerNbr"), ("COMPELLENT-MIB", "scCtlrPowerStatus"), ("COMPELLENT-MIB", "scCtlrPowerName"), ("COMPELLENT-MIB", "scCtlrPowerForceTrap"), ("COMPELLENT-MIB", "scCtlrVoltageNbr"), ("COMPELLENT-MIB", "scCtlrVoltageStatus"), ("COMPELLENT-MIB", "scCtlrVoltageName"), ("COMPELLENT-MIB", "scCtlrVoltageCurrentV"), ("COMPELLENT-MIB", "scCtlrVoltageNormMaxV"), ("COMPELLENT-MIB", "scCtlrVoltageNormMinV"), ("COMPELLENT-MIB", "scCtlrVoltageWarnLwrV"), ("COMPELLENT-MIB", "scCtlrVoltageWarnUprV"), ("COMPELLENT-MIB", "scCtlrVoltageCritLwrV"), ("COMPELLENT-MIB", "scCtlrVoltageCritUprV"), ("COMPELLENT-MIB", "scCtlrVoltageForceTrap"), ("COMPELLENT-MIB", "scCtlrTempNbr"), ("COMPELLENT-MIB", "scCtlrTempStatus"), ("COMPELLENT-MIB", "scCtlrTempName"), ("COMPELLENT-MIB", "scCtlrTempCurrentC"), ("COMPELLENT-MIB", "scCtlrTempNormMaxC"), ("COMPELLENT-MIB", "scCtlrTempNormMinC"), ("COMPELLENT-MIB", "scCtlrTempWarnLwrC"), ("COMPELLENT-MIB", "scCtlrTempWarnUprC"), ("COMPELLENT-MIB", "scCtlrTempCritLwrC"), ("COMPELLENT-MIB", "scCtlrTempCritUprC"), ("COMPELLENT-MIB", "scCtlrTempForceTrap"), ("COMPELLENT-MIB", "scEnclNbr"), ("COMPELLENT-MIB", "scEnclStatus"), ("COMPELLENT-MIB", "scEnclName"), ("COMPELLENT-MIB", "scEnclStatusDescr"), ("COMPELLENT-MIB", "scEnclType"), ("COMPELLENT-MIB", "scEnclModel"), ("COMPELLENT-MIB", "scEnclForceTrap"), ("COMPELLENT-MIB", "scEnclServiceTag"), ("COMPELLENT-MIB", "scEnclAssetTag"), ("COMPELLENT-MIB", "scEnclFanNbr"), ("COMPELLENT-MIB", "scEnclFanStatus"), ("COMPELLENT-MIB", "scEnclFanLocation"), ("COMPELLENT-MIB", "scEnclFanCurrentS"), ("COMPELLENT-MIB", "scEnclFanForceTrap"), ("COMPELLENT-MIB", "scEnclPowerNbr"), ("COMPELLENT-MIB", "scEnclPowerStatus"), ("COMPELLENT-MIB", "scEnclPowerPosition"), ("COMPELLENT-MIB", "scEnclPowerForceTrap"), ("COMPELLENT-MIB", "scEnclIoModNbr"), ("COMPELLENT-MIB", "scEnclIoModStatus"), ("COMPELLENT-MIB", "scEnclIoModPosition"), ("COMPELLENT-MIB", "scEnclIoModForceTrap"), ("COMPELLENT-MIB", "scEnclTempNbr"), ("COMPELLENT-MIB", "scEnclTempStatus"), ("COMPELLENT-MIB", "scEnclTempLocation"), ("COMPELLENT-MIB", "scEnclTempCurrentC"), ("COMPELLENT-MIB", "scEnclTempForceTrap"), ("COMPELLENT-MIB", "scEnclAlarmNbr"), ("COMPELLENT-MIB", "scEnclAlarmStatus"), ("COMPELLENT-MIB", "scEnclAlarmName"), ("COMPELLENT-MIB", "scEnclAlarmForceTrap"), ("COMPELLENT-MIB", "scDiskFolderNbr"), ("COMPELLENT-MIB", "scDiskFolderStatus"), ("COMPELLENT-MIB", "scDiskFolderName"), ("COMPELLENT-MIB", "scDiskFolderCapcty"), ("COMPELLENT-MIB", "scDiskFolderAlrtThr"), ("COMPELLENT-MIB", "scDiskFolderApiIndex"), ("COMPELLENT-MIB", "scDiskFolderForceTrap"), ("COMPELLENT-MIB", "scVolumeNbr"), ("COMPELLENT-MIB", "scVolumeStatus"), ("COMPELLENT-MIB", "scVolumeName"), ("COMPELLENT-MIB", "scVolumeApiIndex"), ("COMPELLENT-MIB", "scVolumeForceTrap"), ("COMPELLENT-MIB", "scServerNbr"), ("COMPELLENT-MIB", "scServerStatus"), ("COMPELLENT-MIB", "scServerName"), ("COMPELLENT-MIB", "scServerCnctvy"), ("COMPELLENT-MIB", "scServerPathCount"), ("COMPELLENT-MIB", "scServerApiIndex"), ("COMPELLENT-MIB", "scServerForceTrap"), ("COMPELLENT-MIB", "scCacheNbr"), ("COMPELLENT-MIB", "scCacheStatus"), ("COMPELLENT-MIB", "scCacheName"), ("COMPELLENT-MIB", "scCacheBatStat"), ("COMPELLENT-MIB", "scCacheBatExpr"), ("COMPELLENT-MIB", "scCacheForceTrap"), ("COMPELLENT-MIB", "scScNbr"), ("COMPELLENT-MIB", "scScStatus"), ("COMPELLENT-MIB", "scScName"), ("COMPELLENT-MIB", "scScContact"), ("COMPELLENT-MIB", "scScLocation"), ("COMPELLENT-MIB", "scScPortsBal"), ("COMPELLENT-MIB", "scScMgmtIP"), ("COMPELLENT-MIB", "scScSerial"), ("COMPELLENT-MIB", "scScForceTrap"), ("COMPELLENT-MIB", "scUPSNbr"), ("COMPELLENT-MIB", "scUPSStatus"), ("COMPELLENT-MIB", "scUPSName"), ("COMPELLENT-MIB", "scUPSBatLife"), ("COMPELLENT-MIB", "scUPSStatusDescr"), ("COMPELLENT-MIB", "scUPSApiIndex"), ("COMPELLENT-MIB", "scUPSForceTrap"), ("COMPELLENT-MIB", "scTrapNormalized"), ("COMPELLENT-MIB", "scLastWorstAlert"), ("COMPELLENT-MIB", "scObjCntNbr"), ("COMPELLENT-MIB", "scObjCntDevsInUse"), ("COMPELLENT-MIB", "scObjCntReplays"), ("COMPELLENT-MIB", "scObjCntDisks"), ("COMPELLENT-MIB", "scObjCntServers"), ("COMPELLENT-MIB", "scObjCntVolumes"), ("COMPELLENT-MIB", "scDiskFolderSUNbr"), ("COMPELLENT-MIB", "scDiskFolderSUTotalSpace"), ("COMPELLENT-MIB", "scDiskFolderSUUsedSpace"), ("COMPELLENT-MIB", "scSIDeviceType"), ("COMPELLENT-MIB", "scSIDeviceStatus"), ("COMPELLENT-MIB", "scHWCompStatus"), ("COMPELLENT-MIB", "scHWCompType"), ("COMPELLENT-MIB", "scHWCompName"), ("COMPELLENT-MIB", "scHWCompPosition"), ("COMPELLENT-MIB", "scHWCompState"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scForceTrap"), ("COMPELLENT-MIB", "scDiskConfigNbr"), ("COMPELLENT-MIB", "scDiskConfigSerial"), ("COMPELLENT-MIB", "scDiskConfigVendor"), ("COMPELLENT-MIB", "scDiskConfigProduct"), ("COMPELLENT-MIB", "scDiskConfigModel"), ("COMPELLENT-MIB", "scDiskConfigRev"), ("COMPELLENT-MIB", "scDiskConfigApiIndex"), ("COMPELLENT-MIB", "scAlertNbr"), ("COMPELLENT-MIB", "scAlertStatus"), ("COMPELLENT-MIB", "scAlertApiIndex"), ("COMPELLENT-MIB", "scAlertDefinition"), ("COMPELLENT-MIB", "scAlertCategory"), ("COMPELLENT-MIB", "scAlertCreateTime"), ("COMPELLENT-MIB", "scAlertMessage"), ("COMPELLENT-MIB", "scAlertType"), ("COMPELLENT-MIB", "scAlertAcknowledged"), ("COMPELLENT-MIB", "scAlertActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compellentObjectsGroup = compellentObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: compellentObjectsGroup.setDescription('The objects.')
productID = ObjectGroup((1, 3, 6, 1, 4, 1, 16139, 3, 2, 4)).setObjects(("COMPELLENT-MIB", "productIDDisplayName"), ("COMPELLENT-MIB", "productIDDescription"), ("COMPELLENT-MIB", "productIDVendor"), ("COMPELLENT-MIB", "productIDVersion"), ("COMPELLENT-MIB", "productIDSerialNumber"), ("COMPELLENT-MIB", "productIDGlobalStatus"), ("COMPELLENT-MIB", "productIDBuildNumber"), ("COMPELLENT-MIB", "productIDURL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    productID = productID.setStatus('current')
if mibBuilder.loadTexts: productID.setDescription('The product identification objects.')
compellentTrapsNotif = ObjectIdentity((1, 3, 6, 1, 4, 1, 16139, 251))
if mibBuilder.loadTexts: compellentTrapsNotif.setStatus('current')
if mibBuilder.loadTexts: compellentTrapsNotif.setDescription('Compellent Traps Notif.')
trapSevPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 16139, 251, 0))
if mibBuilder.loadTexts: trapSevPrefix.setStatus('current')
if mibBuilder.loadTexts: trapSevPrefix.setDescription('trapSevPrefix.')
trapStatusOkay = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 1)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusOkay.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusOkay.setDescription('Deprecated: Compellent Trap in Okay state.')
trapStatusDegraded = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 2)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusDegraded.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusDegraded.setDescription('Deprecated: Compellent Trap in Degraded state.')
trapStatusDown = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 3)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusDown.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusDown.setDescription('Deprecated: Compellent Trap in Down state.')
trapStatusInform = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 4)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusInform.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusInform.setDescription('Deprecated: Compellent Trap in Inform state.')
trapStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 5)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusCritical.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusCritical.setDescription('Deprecated: Compellent Trap in Critical state.')
trapStatusComplete = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 6)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusComplete.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusComplete.setDescription('Deprecated: Compellent Trap in Complete state.')
trapStatusEmergency = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 7)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusEmergency.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusEmergency.setDescription('Deprecated: Compellent Trap in Emergency state.')
trapStatusUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 8)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusUnavailable.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusUnavailable.setDescription('Deprecated: Compellent Trap in Unavailable state.')
trapStatusTest = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 100)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusTest.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusTest.setDescription('Deprecated: Compellent Trap in Test state.')
trapStatusTestSpecific = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 101)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: trapStatusTestSpecific.setStatus('deprecated')
if mibBuilder.loadTexts: trapStatusTestSpecific.setDescription('Deprecated: Compellent Trap in Test Specific state.')
scTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 200)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scTestString"))
if mibBuilder.loadTexts: scTestTrap.setStatus('current')
if mibBuilder.loadTexts: scTestTrap.setDescription('Test Trap.')
scMiscAlert = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 201)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scMiscAlertString"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scMiscAlert.setStatus('current')
if mibBuilder.loadTexts: scMiscAlert.setDescription('This trap is used for all alerts that have no other specific trap definition associated with them')
scDiskStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 202)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scDiskNbr"), ("COMPELLENT-MIB", "scDiskStatus"), ("COMPELLENT-MIB", "scDiskNamePosition"), ("COMPELLENT-MIB", "scDiskHealthy"), ("COMPELLENT-MIB", "scDiskStatusMsg"), ("COMPELLENT-MIB", "scEnclName"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scDiskConfigNbr"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scDiskStatusChange.setStatus('current')
if mibBuilder.loadTexts: scDiskStatusChange.setDescription('Disk status change.')
scCtlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 203)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scCtlrNbr"), ("COMPELLENT-MIB", "scCtlrStatus"), ("COMPELLENT-MIB", "scCtlrName"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scCtlrStatusChange.setStatus('current')
if mibBuilder.loadTexts: scCtlrStatusChange.setDescription('Controller status change.')
scCtlrCompStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 204)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scCtlrNbr"), ("COMPELLENT-MIB", "scCtlrName"), ("COMPELLENT-MIB", "scHWCompType"), ("COMPELLENT-MIB", "scHWCompName"), ("COMPELLENT-MIB", "scHWCompStatus"), ("COMPELLENT-MIB", "scHWCompPosition"), ("COMPELLENT-MIB", "scHWCompState"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scCtlrCompStatusChange.setStatus('current')
if mibBuilder.loadTexts: scCtlrCompStatusChange.setDescription('Controller Component status change. scHWCompState contains current component state when scHWCompType = tempsensor, voltagesensor, or fan.')
scEnclStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 205)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scEnclNbr"), ("COMPELLENT-MIB", "scEnclName"), ("COMPELLENT-MIB", "scEnclStatus"), ("COMPELLENT-MIB", "scEnclStatusDescr"), ("COMPELLENT-MIB", "scEnclType"), ("COMPELLENT-MIB", "scEnclModel"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scEnclStatusChange.setStatus('current')
if mibBuilder.loadTexts: scEnclStatusChange.setDescription('Enclosure status change.')
scEnclCompStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 206)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scEnclNbr"), ("COMPELLENT-MIB", "scEnclName"), ("COMPELLENT-MIB", "scHWCompType"), ("COMPELLENT-MIB", "scHWCompName"), ("COMPELLENT-MIB", "scHWCompStatus"), ("COMPELLENT-MIB", "scHWCompPosition"), ("COMPELLENT-MIB", "scHWCompState"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scEnclCompStatusChange.setStatus('current')
if mibBuilder.loadTexts: scEnclCompStatusChange.setDescription('Enclosure Component status change. scHWCompState contains current temperature when scHWCompType = tempsensor.')
scDiskFolderStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 207)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scDiskFolderNbr"), ("COMPELLENT-MIB", "scDiskFolderStatus"), ("COMPELLENT-MIB", "scDiskFolderName"), ("COMPELLENT-MIB", "scDiskFolderCapcty"), ("COMPELLENT-MIB", "scDiskFolderAlrtThr"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scDiskFolderStatusChange.setStatus('current')
if mibBuilder.loadTexts: scDiskFolderStatusChange.setDescription('Disk Folder status change.')
scVolumeStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 208)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scVolumeNbr"), ("COMPELLENT-MIB", "scVolumeStatus"), ("COMPELLENT-MIB", "scVolumeName"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scVolumeStatusChange.setStatus('current')
if mibBuilder.loadTexts: scVolumeStatusChange.setDescription('Volume status change.')
scServerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 209)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scServerNbr"), ("COMPELLENT-MIB", "scServerStatus"), ("COMPELLENT-MIB", "scServerName"), ("COMPELLENT-MIB", "scServerCnctvy"), ("COMPELLENT-MIB", "scServerPathCount"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scServerStatusChange.setStatus('current')
if mibBuilder.loadTexts: scServerStatusChange.setDescription('Managed Server status change.')
scCacheStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 210)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scCacheNbr"), ("COMPELLENT-MIB", "scCacheStatus"), ("COMPELLENT-MIB", "scCacheName"), ("COMPELLENT-MIB", "scCacheBatStat"), ("COMPELLENT-MIB", "scCacheBatExpr"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scCacheStatusChange.setStatus('current')
if mibBuilder.loadTexts: scCacheStatusChange.setDescription('Cache status change.')
scLocalPortCondStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 211)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scScPortsBal"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scLocalPortCondStatusChange.setStatus('current')
if mibBuilder.loadTexts: scLocalPortCondStatusChange.setDescription('Local Front-end Port Condition status change.')
scMonitoredUPSStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 212)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scUPSNbr"), ("COMPELLENT-MIB", "scUPSStatus"), ("COMPELLENT-MIB", "scUPSName"), ("COMPELLENT-MIB", "scUPSBatLife"), ("COMPELLENT-MIB", "scUPSStatusDescr"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scMonitoredUPSStatusChange.setStatus('current')
if mibBuilder.loadTexts: scMonitoredUPSStatusChange.setDescription('Monitored UPS status change.')
scSIDeviceStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 16139, 251, 0, 213)).setObjects(("COMPELLENT-MIB", "scIndex"), ("COMPELLENT-MIB", "scAlertDef"), ("COMPELLENT-MIB", "scSIDeviceType"), ("COMPELLENT-MIB", "scSIDeviceStatus"), ("COMPELLENT-MIB", "scDiskNbr"), ("COMPELLENT-MIB", "scDiskNamePosition"), ("COMPELLENT-MIB", "scEnclNbr"), ("COMPELLENT-MIB", "scEnclName"), ("COMPELLENT-MIB", "scAlertMsg"), ("COMPELLENT-MIB", "scTrapAction"), ("COMPELLENT-MIB", "scTrapNormalized"))
if mibBuilder.loadTexts: scSIDeviceStatusChange.setStatus('current')
if mibBuilder.loadTexts: scSIDeviceStatusChange.setDescription('SCSI Initiator Device status change.')
mibBuilder.exportSymbols("COMPELLENT-MIB", scServerEntry=scServerEntry, scDiskFolderSUNbr=scDiskFolderSUNbr, scEnclFanStatus=scEnclFanStatus, productIDSerialNumber=productIDSerialNumber, scEnclPowerStatus=scEnclPowerStatus, scEnclIoModPosition=scEnclIoModPosition, scDiskFolderAlrtThr=scDiskFolderAlrtThr, trapStatusTest=trapStatusTest, scEnclTempStatus=scEnclTempStatus, scDiskFolderCapcty=scDiskFolderCapcty, scUPSStatus=scUPSStatus, scDiskConfigModel=scDiskConfigModel, scEnclIoModStatus=scEnclIoModStatus, trapStatusCritical=trapStatusCritical, scEnclPowerNbr=scEnclPowerNbr, scVolumeEntry=scVolumeEntry, scDiskIndex=scDiskIndex, scScMgmtIP=scScMgmtIP, scCtlrStatus=scCtlrStatus, scHWCompStatus=scHWCompStatus, scDiskStatusChange=scDiskStatusChange, scEnclName=scEnclName, scCacheStatusChange=scCacheStatusChange, scDiskConfigApiIndex=scDiskConfigApiIndex, scCtlrTempTable=scCtlrTempTable, scCtlrFanWarnLwrRpm=scCtlrFanWarnLwrRpm, scScTable=scScTable, scEnclFanNbr=scEnclFanNbr, scCtlrPowerForceTrap=scCtlrPowerForceTrap, scEnclForceTrap=scEnclForceTrap, scCtlrPowerStatus=scCtlrPowerStatus, scTestString=scTestString, scCtlrVoltageCritUprV=scCtlrVoltageCritUprV, scCtlrFanCritUprRpm=scCtlrFanCritUprRpm, scCtlrTempNormMaxC=scCtlrTempNormMaxC, scUPSStatusDescr=scUPSStatusDescr, scSIDeviceStatus=scSIDeviceStatus, scForceTrap=scForceTrap, scCtlrTempStatus=scCtlrTempStatus, scAlertMessage=scAlertMessage, compellentModule=compellentModule, scDiskEntry=scDiskEntry, compellentGroups=compellentGroups, scCacheEntry=scCacheEntry, scVolumeNbr=scVolumeNbr, scEnclTempForceTrap=scEnclTempForceTrap, scServerIndex=scServerIndex, scEnclIoModNbr=scEnclIoModNbr, productIDDisplayName=productIDDisplayName, scEnclAlarmNbr=scEnclAlarmNbr, scDiskFolderName=scDiskFolderName, scEnclTempNbr=scEnclTempNbr, scAlertCategory=scAlertCategory, scDiskStatus=scDiskStatus, scEnclIoModForceTrap=scEnclIoModForceTrap, scScLocation=scScLocation, scUPSTable=scUPSTable, scCacheIndex=scCacheIndex, scDiskIoPortType=scDiskIoPortType, scCtlrFanName=scCtlrFanName, scEnclStatus=scEnclStatus, scEnclPowerIndex=scEnclPowerIndex, scCtlrVoltageCritLwrV=scCtlrVoltageCritLwrV, scEnclModel=scEnclModel, scCtlrNbr=scCtlrNbr, scEnclPowerForceTrap=scEnclPowerForceTrap, scEnclFanForceTrap=scEnclFanForceTrap, scDiskApiIndex=scDiskApiIndex, scAlertApiIndex=scAlertApiIndex, scCtlrTempForceTrap=scCtlrTempForceTrap, scAlertType=scAlertType, scCtlrFanTable=scCtlrFanTable, scCacheNbr=scCacheNbr, scCtlrFanStatus=scCtlrFanStatus, scCtlrTempIndex=scCtlrTempIndex, scScName=scScName, scAlertEntry=scAlertEntry, scCtlrAssetTag=scCtlrAssetTag, scEnclAssetTag=scEnclAssetTag, scScContact=scScContact, scDiskConfigTable=scDiskConfigTable, scCtlrServiceTag=scCtlrServiceTag, scDiskFolderSUUsedSpace=scDiskFolderSUUsedSpace, scCtlrPowerName=scCtlrPowerName, scCtlrStatusChange=scCtlrStatusChange, scEnclTempIndex=scEnclTempIndex, scServerNbr=scServerNbr, scDiskConfigRev=scDiskConfigRev, scCtlrPowerIndex=scCtlrPowerIndex, scUPSApiIndex=scUPSApiIndex, scEnclFanEntry=scEnclFanEntry, scCtlrVoltageWarnLwrV=scCtlrVoltageWarnLwrV, scCtlrTempNormMinC=scCtlrTempNormMinC, scObjCntTable=scObjCntTable, scDiskFolderSUTotalSpace=scDiskFolderSUTotalSpace, scAlertMsg=scAlertMsg, scCtlrEntry=scCtlrEntry, scMiscAlertString=scMiscAlertString, scEnclFanCurrentS=scEnclFanCurrentS, scTrapAction=scTrapAction, scEnclTempTable=scEnclTempTable, scTestTrap=scTestTrap, scEnclAlarmIndex=scEnclAlarmIndex, scEnclFanIndex=scEnclFanIndex, scCtlrForceTrap=scCtlrForceTrap, scUPSForceTrap=scUPSForceTrap, scSIDeviceType=scSIDeviceType, scCtlrCompStatusChange=scCtlrCompStatusChange, scCtlrFanApiIndex=scCtlrFanApiIndex, scEnclStatusDescr=scEnclStatusDescr, compellentConformance=compellentConformance, compellentTrapsNotif=compellentTrapsNotif, scEnclServiceTag=scEnclServiceTag, scHWCompPosition=scHWCompPosition, scCtlrVoltageForceTrap=scCtlrVoltageForceTrap, scUPSIndex=scUPSIndex, scEnclFanTable=scEnclFanTable, compellentNotificationsGroup2=compellentNotificationsGroup2, scObjCntEntry=scObjCntEntry, scUPSNbr=scUPSNbr, scUPSName=scUPSName, productIDGlobalStatus=productIDGlobalStatus, scObjCntDisks=scObjCntDisks, scAlertNbr=scAlertNbr, scMonitoredUPSStatusChange=scMonitoredUPSStatusChange, scEnclTempEntry=scEnclTempEntry, scAlertIndex=scAlertIndex, scCtlrTempCurrentC=scCtlrTempCurrentC, compellentCompliance1=compellentCompliance1, scDiskForceTrap=scDiskForceTrap, scUPSBatLife=scUPSBatLife, compellentEnterprise=compellentEnterprise, scScNbr=scScNbr, compellentNotificationsGroup=compellentNotificationsGroup, scObjCntIndex=scObjCntIndex, scCacheName=scCacheName, scCtlrFanNormMinRpm=scCtlrFanNormMinRpm, scCtlrTempEntry=scCtlrTempEntry, scVolumeForceTrap=scVolumeForceTrap, scServerCnctvy=scServerCnctvy, scCacheBatExpr=scCacheBatExpr, scObjCntDevsInUse=scObjCntDevsInUse, scObjCntNbr=scObjCntNbr, productIDBuildNumber=productIDBuildNumber, scCtlrTempCritUprC=scCtlrTempCritUprC, scLastWorstAlert=scLastWorstAlert, scEnclNbr=scEnclNbr, scDiskConfigNbr=scDiskConfigNbr, scEnclIoModIndex=scEnclIoModIndex, scVolumeApiIndex=scVolumeApiIndex, scEnclPowerEntry=scEnclPowerEntry, scCacheBatStat=scCacheBatStat, scAlertTable=scAlertTable, scCtlrVoltageEntry=scCtlrVoltageEntry, scEnclType=scEnclType, scEnclIoModEntry=scEnclIoModEntry, scCtlrPowerNbr=scCtlrPowerNbr, scDiskConfigProduct=scDiskConfigProduct, scEnclCompStatusChange=scEnclCompStatusChange, scVolumeName=scVolumeName, scDiskNamePosition=scDiskNamePosition, scDiskConfigSerial=scDiskConfigSerial, scCtlrFanNormMaxRpm=scCtlrFanNormMaxRpm, scCtlrTempName=scCtlrTempName, PYSNMP_MODULE_ID=compellentModule, scEnclTempLocation=scEnclTempLocation, scCtlrFanEntry=scCtlrFanEntry, scDiskFolderApiIndex=scDiskFolderApiIndex, trapStatusComplete=trapStatusComplete, trapStatusUnavailable=trapStatusUnavailable, trapStatusInform=trapStatusInform, scEnclIndex=scEnclIndex, compellentObjectsGroup=compellentObjectsGroup, productIDVendor=productIDVendor, scServerTable=scServerTable, scCtlrTempCritLwrC=scCtlrTempCritLwrC, scServerApiIndex=scServerApiIndex, scCtlrVoltageNormMinV=scCtlrVoltageNormMinV, scDiskNbr=scDiskNbr, scCtlrIpAddr=scCtlrIpAddr, scDiskEnclosure=scDiskEnclosure, scEnclAlarmEntry=scEnclAlarmEntry, scDiskSize=scDiskSize, scEnclAlarmForceTrap=scEnclAlarmForceTrap, scScPortsBal=scScPortsBal, scVolumeIndex=scVolumeIndex, trapStatusEmergency=trapStatusEmergency, scLocalPortCondStatusChange=scLocalPortCondStatusChange, scUPSEntry=scUPSEntry, trapStatusDown=trapStatusDown, scObjCntServers=scObjCntServers, scCacheForceTrap=scCacheForceTrap, scDiskFolderStatusChange=scDiskFolderStatusChange, scMiscAlert=scMiscAlert, scAlertStatus=scAlertStatus, scCtlrVoltageIndex=scCtlrVoltageIndex, scEnclPowerTable=scEnclPowerTable, scDiskFolderSUTable=scDiskFolderSUTable, scDiskTable=scDiskTable, scCacheTable=scCacheTable, scHWCompType=scHWCompType, scHWCompState=scHWCompState, scEnclIoModTable=scEnclIoModTable, scCtlrTempWarnUprC=scCtlrTempWarnUprC, scCtlrVoltageNbr=scCtlrVoltageNbr, scServerForceTrap=scServerForceTrap, scServerStatus=scServerStatus, compellentCompliance2=compellentCompliance2, scTrapNormalized=scTrapNormalized, scEnclAlarmStatus=scEnclAlarmStatus, scEnclAlarmName=scEnclAlarmName, scDiskFolderTable=scDiskFolderTable, scScSerial=scScSerial, scObjCntVolumes=scObjCntVolumes, scAlertAcknowledged=scAlertAcknowledged, scServerStatusChange=scServerStatusChange, scCtlrModel=scCtlrModel, scCtlrFanWarnUprRpm=scCtlrFanWarnUprRpm, productIDVersion=productIDVersion, scCtlrVoltageTable=scCtlrVoltageTable, scEnclEntry=scEnclEntry, scCtlrFanNbr=scCtlrFanNbr, scCtlrVoltageStatus=scCtlrVoltageStatus, scDiskFolderNbr=scDiskFolderNbr, compellentCompliances=compellentCompliances, scCtlrPowerEntry=scCtlrPowerEntry, scScForceTrap=scScForceTrap, scDiskFolderSUIndex=scDiskFolderSUIndex, scDiskConfigVendor=scDiskConfigVendor, scAlertCreateTime=scAlertCreateTime, scCtlrVoltageName=scCtlrVoltageName, scObjCntReplays=scObjCntReplays, trapStatusDegraded=trapStatusDegraded, scEnclTempCurrentC=scEnclTempCurrentC, ScStatus=ScStatus, scDiskHealthy=scDiskHealthy, trapSevPrefix=trapSevPrefix, scDiskFolderSUEntry=scDiskFolderSUEntry, scCtlrName=scCtlrName, scCtlrVoltageWarnUprV=scCtlrVoltageWarnUprV, ScHardwareType=ScHardwareType, scDiskFolderIndex=scDiskFolderIndex, scDiskFolderStatus=scDiskFolderStatus, scServerPathCount=scServerPathCount, productIDURL=productIDURL, scVolumeStatusChange=scVolumeStatusChange, scAlertDef=scAlertDef, scEnclAlarmTable=scEnclAlarmTable, scCtlrVoltageNormMaxV=scCtlrVoltageNormMaxV, scCtlrPowerTable=scCtlrPowerTable, scScIndex=scScIndex, scAlertDefinition=scAlertDefinition, scScEntry=scScEntry, scCtlrFanCurrentRpm=scCtlrFanCurrentRpm)
mibBuilder.exportSymbols("COMPELLENT-MIB", scCtlrTempNbr=scCtlrTempNbr, scCtlrTempWarnLwrC=scCtlrTempWarnLwrC, scDiskFolderEntry=scDiskFolderEntry, scDiskConfigIndex=scDiskConfigIndex, scEnclStatusChange=scEnclStatusChange, compellentObjects=compellentObjects, trapStatusOkay=trapStatusOkay, scEnclFanLocation=scEnclFanLocation, scScStatus=scScStatus, scIndex=scIndex, scCacheStatus=scCacheStatus, scEnclPowerPosition=scEnclPowerPosition, scCtlrIndex=scCtlrIndex, scCtlrFanIndex=scCtlrFanIndex, scCtlrFanForceTrap=scCtlrFanForceTrap, scDiskConfigEntry=scDiskConfigEntry, scHWCompName=scHWCompName, scCtlrTable=scCtlrTable, scDiskStatusMsg=scDiskStatusMsg, scServerName=scServerName, scAlertActive=scAlertActive, trapStatusTestSpecific=trapStatusTestSpecific, scDiskFolderForceTrap=scDiskFolderForceTrap, scSIDeviceStatusChange=scSIDeviceStatusChange, productID=productID, scCtlrFanCritLwrRpm=scCtlrFanCritLwrRpm, scVolumeTable=scVolumeTable, productIDDescription=productIDDescription, scEnclTable=scEnclTable, scCtlrVoltageCurrentV=scCtlrVoltageCurrentV, scVolumeStatus=scVolumeStatus)
