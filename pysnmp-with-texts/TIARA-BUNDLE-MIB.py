#
# PySNMP MIB module TIARA-BUNDLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIARA-BUNDLE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, MibIdentifier, Counter32, Gauge32, ModuleIdentity, iso, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibIdentifier", "Counter32", "Gauge32", "ModuleIdentity", "iso", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Unsigned32", "NotificationType")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
tiaraMgmt, = mibBuilder.importSymbols("TIARA-NETWORKS-SMI", "tiaraMgmt")
tiaraBundleMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3174, 2, 13))
tiaraBundleMib.setRevisions(('1999-04-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tiaraBundleMib.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tiaraBundleMib.setLastUpdated('9907010000Z')
if mibBuilder.loadTexts: tiaraBundleMib.setOrganization('Tiara Networks Inc.')
if mibBuilder.loadTexts: tiaraBundleMib.setContactInfo(' Tiara Networks Customer Support 525 Race Street, Suite 100, San Jose, CA 95126 USA Tel: +1 408-216-4700 Fax: +1 408-216-4701 E-mail: support@tiaranetworks.com')
if mibBuilder.loadTexts: tiaraBundleMib.setDescription('Bundle MIB for defining bundle parameters')
bundleTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1), )
if mibBuilder.loadTexts: bundleTable.setStatus('current')
if mibBuilder.loadTexts: bundleTable.setDescription('Bundle management related parameters are defined in this table.')
bundleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1), ).setIndexNames((0, "TIARA-BUNDLE-MIB", "bundleId"))
if mibBuilder.loadTexts: bundleTableEntry.setStatus('current')
if mibBuilder.loadTexts: bundleTableEntry.setDescription('Bundle parameter entries are listed in this table.')
bundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bundleId.setStatus('current')
if mibBuilder.loadTexts: bundleId.setDescription('bundleId is the identifier of a bundle. To configure a bundle, this parameter must be used as the index. This is assigned internally by the Tiara system. Whenever a row creation needs to occur in the bundleTable, the bundleId is entered as 65535.')
bundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleName.setStatus('current')
if mibBuilder.loadTexts: bundleName.setDescription('Name of the bundle. To configure a bundle, this parameter must be set. That is, a descriptive name should be given to a bundle. The maximum length of a bundle name is 8 characters. This parameter is set once during the creation of a bundle. A bundle can not be renamed.')
bundleContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleContact.setStatus('current')
if mibBuilder.loadTexts: bundleContact.setDescription('Name of the person who can be contacted for information about the bundle. The maximum length for this parameter is 15 characters. This parameter can be set after the bundle is named and before the links are assigned.')
bundleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleDescr.setStatus('current')
if mibBuilder.loadTexts: bundleDescr.setDescription('Brief description of the bundle. The maximum length of this parameter is 25 characters. This parameter can be set after the bundle is named and before the links are assigned.')
bundleEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noEncap", 1), ("ppp", 2), ("hdlc", 3), ("frameRelay", 4))).clone('noEncap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleEncapsulation.setStatus('current')
if mibBuilder.loadTexts: bundleEncapsulation.setDescription('Specifies the type of protocol encapsulation for the bundle. To configure protocol-specific parameters for a bundle, the bundle must first be encapsulated with that protocol. To unconfigure the encapsulation type, this variable should be set to noEncap.')
bundleDropEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleDropEs.setStatus('current')
if mibBuilder.loadTexts: bundleDropEs.setDescription('The length of time in seconds that the error condition Errored Seconds exists before a link is dropped. This parameter can be configured only for multilink bundles and after the bundle is encapsulated.')
bundleDropSes = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleDropSes.setStatus('current')
if mibBuilder.loadTexts: bundleDropSes.setDescription('The length of time in seconds that the error condition Severely Errored Seconds exists before a link is dropped. This parameter can be configured only for multilink bundles and after the bundle is encapsulated.')
bundleDropUas = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleDropUas.setStatus('current')
if mibBuilder.loadTexts: bundleDropUas.setDescription('The length of time in seconds that the error condition Unavailable Seconds exists before a link is dropped. This parameter can be configured only for multilink bundles and after the bundle is encapsulated.')
bundleIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleIpAddr.setStatus('current')
if mibBuilder.loadTexts: bundleIpAddr.setDescription("The bundle's source IP address. This is one of the parameters required to set up IP multiplexing for a bundle. This parameter can be configured only when the bundle is encapsulated. Also the parameters bundleIpAddr and bundleSubnetMask have to be set together during the same request. To unconfigure the IP address, a set operation is performed with the value 0.0.0.0")
bundleSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleSubnetMask.setStatus('current')
if mibBuilder.loadTexts: bundleSubnetMask.setDescription('This parameter represents the source subnet mask address. This is one of the parameters required to set up IP multiplexing for a bundle. This parameter is set along with the bundleIpAddr parameter during the same request.')
bundleSrcForwardingAddrPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleSrcForwardingAddrPrimary.setStatus('current')
if mibBuilder.loadTexts: bundleSrcForwardingAddrPrimary.setDescription("The bundle's destination IP address. This is one of the parameters required to set up IP multiplexing for a bundle. This parameter can be configured when the bundle has been configured for IP multiplexing. To unconfigure the source forwarding address, a set operation is performed with the value 0.0.0.0. This is the primary source forwarding address")
bundleSrcForwardingAddrSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleSrcForwardingAddrSecondary.setStatus('current')
if mibBuilder.loadTexts: bundleSrcForwardingAddrSecondary.setDescription("The bundle's secondary or backup destination address. This address will be used only if the primary address uses an ethernet interface and failover is enabled on that interface and the interface goes down. The secondary source forwarding address is an optional parameter, it should be a gateway on the alternate ethernet This parameter is set along with the primary source forwarding address parameter. To unconfigure this parameter a set operation is performed with the value 0.0.0.0 for the primary address, or a primary address is set with no secondary, or both primary and secondary are set to 0.0.0.0")
bundleRestoreMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bundleRestoreMethod.setStatus('current')
if mibBuilder.loadTexts: bundleRestoreMethod.setDescription('bundleRestoreMethod defines how a dropped link of a multilink bundle will be restored. It can be done either manually or automatically. If the restore mode is automatic, the parameter bundleLinkRestoralTime should be set (in seconds) during the same request.')
bundleLinkRestoralTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 14), Integer32().clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkRestoralTime.setStatus('current')
if mibBuilder.loadTexts: bundleLinkRestoralTime.setDescription('Error-free time interval (in seconds) that must pass before a link is automatically restored. This parameter can be set when the bundleRestoreMethod is automatic.')
bundleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bundleStatus.setStatus('current')
if mibBuilder.loadTexts: bundleStatus.setDescription("bundleStatus shutdowns the bundle. Although the default is 'enable,' the bundle remains disabled until all necessary parameters are present")
bundleLinkRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bundleLinkRestore.setStatus('current')
if mibBuilder.loadTexts: bundleLinkRestore.setDescription('bundleLinkRestore specifies the links to be restored manually. This parameter is configured when the value of bundleRestoreMethod is manual. The user needs to specify the link/s to be restored. LSB in the OCTET STRING represents T1 Number 1. For example, to restore links 1-4 the value should be set to 000F')
bundleNoOfLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleNoOfLinks.setStatus('current')
if mibBuilder.loadTexts: bundleNoOfLinks.setDescription('Indicates the number of links configured in the bundle.')
bundleTotalBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 18), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleTotalBw.setStatus('current')
if mibBuilder.loadTexts: bundleTotalBw.setDescription('Indicates the total bandwidth for this bundle. The bundle bandwidth is the aggregated band- widths of all the links assigned to a particular bundle.')
bundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleRowStatus.setStatus('current')
if mibBuilder.loadTexts: bundleRowStatus.setDescription('bundleRowStatus is used to add/delete a row in the table. Adding or deleting a row corresponds to creating a bundle or deleting a bundle. In order to add a row to the bundle table, a set on this parameter should be done with the value 4 (createAndGo) and bundleId parameter set with the value of 65535. A request to create a row can be completed successfully only if a set on the bundleRowStatus and a set on the bundleName come in the same request. To delete a row this parameter has to be set with the value 6 (destroy).')
bundleLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2), )
if mibBuilder.loadTexts: bundleLinkTable.setStatus('current')
if mibBuilder.loadTexts: bundleLinkTable.setDescription('All the parameters related to the assigned links of a bundle are defined in bundleLinkTable. A row in this table can be created when a bundle with the corresponding bundleId already exists in the bundleTable.')
bundleLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1), ).setIndexNames((0, "TIARA-BUNDLE-MIB", "bundleId"), (0, "TIARA-BUNDLE-MIB", "bundleLinkT1Num"))
if mibBuilder.loadTexts: bundleLinkEntry.setStatus('current')
if mibBuilder.loadTexts: bundleLinkEntry.setDescription('Link parameters that relate to a given bundle are specified in this table.')
bundleLinkT1Num = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bundleLinkT1Num.setStatus('current')
if mibBuilder.loadTexts: bundleLinkT1Num.setDescription("bundleLinkT1Num is the number of the T1 link being added to a specific bundle. For example, to assign link number 4, the value of this parameter should be set to 4. However, the design of SNMP's link creation is different from that of the system CLI. In SNMP, only one link can be created at a time whereas in the system CLI, multiple links can be configured in a single request. This parameter is mandatory for row creation in the interfaces with CT3 and T1 link types .")
bundleLinkTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone('00ffffff')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkTimeSlots.setStatus('current')
if mibBuilder.loadTexts: bundleLinkTimeSlots.setDescription('bundleLinkTimeSlots indicates the DS0 channels in a fractional T1 link. The LSB in the OCTET STRING represents DS0 channel number 1. For example, to assign DS0 channels 1-4, the value of this parameter should be set to 000F')
bundleLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ct3", 1), ("t1", 2), ("hssi", 3), ("t3", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkType.setStatus('current')
if mibBuilder.loadTexts: bundleLinkType.setDescription('bundleLinkType specifies the interface type (i.e., CT3, T1, T3, and HSSI) of the link being assigned to the bundle. This is a mandatory parameter for Row creation in the bundleLinkTable.')
bundleLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps56", 1), ("kbps64", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: bundleLinkSpeed.setDescription('The bundleLinkSpeed specifies the transmission speed of all DS0 channels in a bundle.')
bundleLinkInvertedData = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkInvertedData.setStatus('current')
if mibBuilder.loadTexts: bundleLinkInvertedData.setDescription('Setting bundleLinkInvertedData parameter to true will have the system invert data on all DS0 channels before transmission. Data inversion is used only for HDLC-encapsulated bundles.')
bundleLinkPhysIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkPhysIfNum.setStatus('current')
if mibBuilder.loadTexts: bundleLinkPhysIfNum.setDescription('bundleLinkPhysIfNum specifies the interface number of the interface type such as CT3, HSSI, T3 on which this link is being created. This variable holds significance only for link types CT3, HSSI and T3. It is a mandatory variable for row creation for link types CT3, HSSI, and T3.')
bundleLinkDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 7), Integer32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkDiffDelay.setStatus('current')
if mibBuilder.loadTexts: bundleLinkDiffDelay.setDescription('bundleLinkDiffDelay specifies the maximum differential delay allowed on the links in a multilink bundle. If the packet delay on any link exceeds the differential delay set for a bundle, that link is dropped from the bundle.')
bundleLinkBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 8), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkBw.setStatus('current')
if mibBuilder.loadTexts: bundleLinkBw.setDescription('bundleLinkBw indicates the bandwidth of the link. The bandwidth of an individual link depends upon its configuration. For example, in a link of type T1, its bandwidth will depend upon whether the link is a full T1 or a fractional T1 consisting of 24 DS0 timeslots.')
bundleLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkStatus.setStatus('current')
if mibBuilder.loadTexts: bundleLinkStatus.setDescription('bundleLinkStatus indicates whether a particular link in a bundle is up or down. The link can go down due to various reasons such as differential delay, a broken link, or negotiation problems at the far end.')
bundleLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 13, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: bundleLinkRowStatus.setDescription('bundleLinkRowStatus is used to add or delete a row in the table. To create a row, this parameter is set to value 4(createAndGo). To delete a row, this parameter is set to a value 6(destroy).')
mibBuilder.exportSymbols("TIARA-BUNDLE-MIB", bundleTableEntry=bundleTableEntry, bundleLinkBw=bundleLinkBw, bundleLinkT1Num=bundleLinkT1Num, bundleTotalBw=bundleTotalBw, bundleLinkDiffDelay=bundleLinkDiffDelay, bundleLinkInvertedData=bundleLinkInvertedData, bundleStatus=bundleStatus, bundleDropSes=bundleDropSes, bundleLinkEntry=bundleLinkEntry, bundleId=bundleId, bundleSrcForwardingAddrSecondary=bundleSrcForwardingAddrSecondary, bundleLinkPhysIfNum=bundleLinkPhysIfNum, bundleDescr=bundleDescr, bundleLinkTable=bundleLinkTable, bundleLinkTimeSlots=bundleLinkTimeSlots, bundleName=bundleName, tiaraBundleMib=tiaraBundleMib, bundleLinkRestoralTime=bundleLinkRestoralTime, bundleSrcForwardingAddrPrimary=bundleSrcForwardingAddrPrimary, bundleIpAddr=bundleIpAddr, bundleSubnetMask=bundleSubnetMask, bundleDropEs=bundleDropEs, bundleNoOfLinks=bundleNoOfLinks, bundleLinkSpeed=bundleLinkSpeed, bundleRestoreMethod=bundleRestoreMethod, bundleRowStatus=bundleRowStatus, bundleLinkType=bundleLinkType, bundleLinkStatus=bundleLinkStatus, bundleEncapsulation=bundleEncapsulation, bundleLinkRowStatus=bundleLinkRowStatus, PYSNMP_MODULE_ID=tiaraBundleMib, bundleLinkRestore=bundleLinkRestore, bundleContact=bundleContact, bundleDropUas=bundleDropUas, bundleTable=bundleTable)
