#
# PySNMP MIB module NETSCREEN-CERTIFICATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-CERTIFICATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
netscreenVpn, netscreenVpnMibModule = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpn", "netscreenVpnMibModule")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Unsigned32, NotificationType, TimeTicks, ModuleIdentity, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Counter32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Unsigned32", "NotificationType", "TimeTicks", "ModuleIdentity", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Counter32", "Bits", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenCertificateMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 7))
netscreenCertificateMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-12 00:00', '2001-09-28 00:00', '2001-05-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenCertificateMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenCertificateMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenCertificateMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenCertificateMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenCertificateMibModule.setDescription('This module defines the object that are used to monitor VPN certificates')
nsVpnCert = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 7))
nsVpnCertDefTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 7, 1), )
if mibBuilder.loadTexts: nsVpnCertDefTable.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertDefTable.setDescription('Certificate default setting table collects the default certificates used when establish a secure VPN connection in NetScreen device.')
nsVpnCertDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 7, 1, 1), ).setIndexNames((0, "NETSCREEN-CERTIFICATE-MIB", "nsVpnCertDefIndex"))
if mibBuilder.loadTexts: nsVpnCertDefEntry.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertDefEntry.setDescription('An entry containing attributes of a certificate')
nsVpnCertDefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertDefIndex.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertDefIndex.setDescription('Table index using as primary key when retrieving the table.')
nsVpnCertDefLdap = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertDefLdap.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertDefLdap.setDescription('LDAP server name.')
nsVpnCertDefCrlUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertDefCrlUrl.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertDefCrlUrl.setDescription('URL of CRL.')
nsVpnCertDefRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertDefRefresh.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertDefRefresh.setDescription('CRL Refresh Frequency.')
nsVpnCertDefX509 = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("partial", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertDefX509.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertDefX509.setDescription('X509 Certificate Path Validation Level.')
nsVpnCertDefVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertDefVsys.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertDefVsys.setDescription('vsys the cert setting belongs to.')
nsVpnCertCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 7, 2), )
if mibBuilder.loadTexts: nsVpnCertCfgTable.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertCfgTable.setDescription('This table collects detail certificate information.')
nsVpnCertCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 7, 2, 1), ).setIndexNames((0, "NETSCREEN-CERTIFICATE-MIB", "nsVpnCertCfgIndex"))
if mibBuilder.loadTexts: nsVpnCertCfgEntry.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertCfgEntry.setDescription('Each entry in the nsVpnCertCfgTable contains a set of attributes for a certificate')
nsVpnCertCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertCfgIndex.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertCfgIndex.setDescription('A unique value for certification table. Its value ranges between 0 and 65535 and may not be contiguous.')
nsVpnCertCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ca", 0), ("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertCfgType.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertCfgType.setDescription('Certificate type.')
nsVpnCertCfgSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertCfgSubject.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertCfgSubject.setDescription('Certificate subject.')
nsVpnCertCfgExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertCfgExpire.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertCfgExpire.setDescription('Certificate expire date.')
nsVpnCertCfgIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertCfgIssuer.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertCfgIssuer.setDescription('Certificate configuration details.')
nsVpnCertCfgVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnCertCfgVsys.setStatus('current')
if mibBuilder.loadTexts: nsVpnCertCfgVsys.setDescription("Certificate's vsys.")
mibBuilder.exportSymbols("NETSCREEN-CERTIFICATE-MIB", nsVpnCertCfgIndex=nsVpnCertCfgIndex, nsVpnCertDefTable=nsVpnCertDefTable, nsVpnCertCfgExpire=nsVpnCertCfgExpire, nsVpnCertDefIndex=nsVpnCertDefIndex, nsVpnCertCfgEntry=nsVpnCertCfgEntry, nsVpnCertCfgSubject=nsVpnCertCfgSubject, nsVpnCertCfgTable=nsVpnCertCfgTable, nsVpnCert=nsVpnCert, nsVpnCertDefLdap=nsVpnCertDefLdap, nsVpnCertCfgType=nsVpnCertCfgType, nsVpnCertDefX509=nsVpnCertDefX509, nsVpnCertCfgVsys=nsVpnCertCfgVsys, nsVpnCertDefEntry=nsVpnCertDefEntry, PYSNMP_MODULE_ID=netscreenCertificateMibModule, nsVpnCertDefCrlUrl=nsVpnCertDefCrlUrl, nsVpnCertDefVsys=nsVpnCertDefVsys, nsVpnCertCfgIssuer=nsVpnCertCfgIssuer, netscreenCertificateMibModule=netscreenCertificateMibModule, nsVpnCertDefRefresh=nsVpnCertDefRefresh)
