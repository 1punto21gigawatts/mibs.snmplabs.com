#
# PySNMP MIB module CPQLINOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQLINOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
compaq, = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
iso, TimeTicks, Counter64, Unsigned32, Gauge32, ModuleIdentity, NotificationType, ObjectIdentity, Bits, IpAddress, MibIdentifier, Counter32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Counter64", "Unsigned32", "Gauge32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Bits", "IpAddress", "MibIdentifier", "Counter32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqLinOsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23))
cpqLinOsMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 1))
cpqLinOsComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2))
cpqLinOsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 1))
cpqLinOsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 2))
cpqLinOsProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 3))
cpqLinOsMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 4))
cpqLinOsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 5))
cpqLinOsPagingFile = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 6))
cpqLinOsDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 7))
cpqLinOsNetworkInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 10))
cpqLinOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 23, 2, 1, 4))
cpqLinOsMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMibRevMajor.setDescription('The Major Revision level of the MIB. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
cpqLinOsMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMibRevMinor.setDescription('The Minor Revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqLinOsMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMibCondition.setDescription('The overall condition. This object represents the overall status of the Operating System management system represented by this MIB.')
cpqLinOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqLinOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCommonPollFreq.setDescription("The Management Agent's polling frequency. The frequency, in seconds, at which the Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval. If the poll frequency is zero (0) all attempts to write to this object will fail. If the poll frequency is non-zero, setting this value will change the polling frequency of the Insight Agent. Setting the poll frequency to zero (0) will always fail, an agent may also choose to fail any request to change the poll frequency to a value that would severely impact system performance.")
cpqLinOsCommonLastObservedPollCycle = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCommonLastObservedPollCycle.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCommonLastObservedPollCycle.setDescription("The Management Agent's last polling cycle, measured in milliseconds. This quantity should be approximately the desired polling frequency, but because of scheduling variances, slight distortions are to be expected.")
cpqLinOsCommonLastObservedTimeSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCommonLastObservedTimeSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCommonLastObservedTimeSec.setDescription('The point in time where the last polling occured. This quantity counts the seconds from January 1, 1970 (UTC) on. This time stamp is implemented with the Linux gettimeofday call.')
cpqLinOsCommonLastObservedTimeMSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCommonLastObservedTimeMSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCommonLastObservedTimeMSec.setDescription('The point in time where the last polling occured. This quantity counts milliseconds of the last fraction of a second transpired. This time stamp is implemented with the Linux gettimeofday call and is only useful in conjunction with the previously described quantity.')
cpqLinOsSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsSystemUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsSystemUpTime.setDescription('Total Time that the computer has been operational since it was last started.')
cpqLinOsSysContextSwitchesPersec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsSysContextSwitchesPersec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsSysContextSwitchesPersec.setDescription('Context Switches/sec is the combined rate at which all processors on the computer are switched from one thread to another. Context switches occur when a running thread voluntarily relinquishes the processor, is preempted by a higher priority ready thread, or switches between user-mode and privileged (kernel) mode to use an Executive or subsystem service. It is the sum of Thread: Context Switches/sec for all threads running on all processors in the computer and is measured in numbers of switches. There are context switch counters on the System and Thread objects.')
cpqLinOsSysProcesses = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsSysProcesses.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsSysProcesses.setDescription('Processes is the number of processes in the computer at the time of data collection. Notice that this is an instantaneous count, not an average over the time interval. Each process represents the running of a program.')
cpqLinOsProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 23, 2, 3, 2), )
if mibBuilder.loadTexts: cpqLinOsProcessorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsProcessorTable.setDescription('A table of Processor Entries.')
cpqLinOsProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 23, 2, 3, 2, 1), ).setIndexNames((0, "CPQLINOS-MIB", "cpqLinOsCpuIndex"))
if mibBuilder.loadTexts: cpqLinOsProcessorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsProcessorEntry.setDescription('A Processor Entry.')
cpqLinOsCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCpuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCpuIndex.setDescription('This Processor Instance number.')
cpqLinOsCpuInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCpuInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCpuInstance.setDescription('This Processor Instance Name.')
cpqLinOsCpuInterruptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCpuInterruptsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCpuInterruptsPerSec.setDescription('Interrupts/sec is the average number of hardware interrupts the processor is receiving and servicing in each second. It does not include DPCs, which are counted separately. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended during interrupts. Most system clocks interrupt the processor every 10 milliseconds, creating a background of interrupt activity.')
cpqLinOsCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCpuTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCpuTimePercent.setDescription('%Processor Time is the percentage of time that the processor is executing a non-Idle thread. This counter was designed as a primary indicator of processor activity. It is calculated by measuring the time that the processor spends executing the thread of the Idle process in each sample interval, and subtracting that value from 100%. (Each processor has an Idle thread which consumes cycles when no other threads are ready to run.) It can be viewed as the fraction of the time spent doing useful work.')
cpqLinOsCpuUserTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCpuUserTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCpuUserTimePercent.setDescription('%User Time is the percentage of non-idle processor time spent in user mode. User mode is a restricted processing mode designed for applications, environment subsystems, and integral subsystems. The alternative, privileged mode, is designed for operating system components and allows direct access to hardware and all memory. The operating system switches application threads to privileged mode to obtain operating system services.')
cpqLinOsCpuPrivilegedTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsCpuPrivilegedTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsCpuPrivilegedTimePercent.setDescription('%Privileged Time is the percentage of non-idle processor time spent in privileged mode. (Privileged mode is a processing mode designed for operating system components and hardware-manipulating drivers. It allows direct access to hardware and all memory. The alternative, user mode, is a restricted processing mode designed for applications, environment subsystems, and integral subsystems. The operating system switches application threads to privileged mode to obtain operating system services.) %Privileged Time includes time servicing interrupts and DPCs. A high rate of privileged time might be attributable to a large number of interrupts generated by a failing device.')
cpqLinOsMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemTotal.setDescription("Total amount of RAM available to the operating system. This is in most cases slightly less than the total amount of system memory and might be further restricted by the boot parameter 'mem'.")
cpqLinOsMemFree = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemFree.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemFree.setDescription('Total amount of RAM that the operating system is currently not claiming.')
cpqLinOsMemHighTotal = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemHighTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemHighTotal.setDescription('Total amount of memory in the high region. Highmem is all memory above (approx) 860MB of physical RAM. The kernel uses indirect tricks to access the high memory region. Data cache can go in this memory region.')
cpqLinOsMemHighFree = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemHighFree.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemHighFree.setDescription('The amount of free memory of the high memory region.')
cpqLinOsMemLowTotal = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemLowTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemLowTotal.setDescription('The total amount of memory in the low memory region. This is the memory the kernel can address directly. All kernel datastructures need to go into low memory.')
cpqLinOsMemLowFree = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemLowFree.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemLowFree.setDescription('The amount of free memory of the low memory region.')
cpqLinOsMemSwapTotal = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemSwapTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemSwapTotal.setDescription('The total amount of swap space. This is the sum of the capacities of all swap partitions.')
cpqLinOsMemSwapFree = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemSwapFree.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemSwapFree.setDescription('The amount of free swap space.')
cpqLinOsMemCached = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemCached.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemCached.setDescription('Memory in the page cache (diskcache) minus SwapCache.')
cpqLinOsMemSwapCached = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemSwapCached.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemSwapCached.setDescription("Memory that once was swapped out, is swapped back in but still also is in the swapfile. If memory is needed it doesn't need to be swapped out again, because it is already in the swapfile. This saves I/O.")
cpqLinOsMemActive = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemActive.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemActive.setDescription('Memory that has been used more recently and usually not reclaimed unless absolutely necessary.')
cpqLinOsMemInactiveDirty = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemInactiveDirty.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemInactiveDirty.setDescription("Dirty means 'might need writing to disk or swap'. This takes more work to free. Examples might be files that have not been written to yet. They aren't written to memory too soon in order to keep the I/O down. For instance, if you're writing logs, it might be better to wait until you have a complete log ready before sending it to disk.")
cpqLinOsMemInactiveClean = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMemInactiveClean.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMemInactiveClean.setDescription('Assumed to be easily freeable. The kernel will try to keep some clean stuff around always to have a bit of breathing room.')
cpqLinOsSwapInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsSwapInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsSwapInPerSec.setDescription('The amount of memory being swapped in from swap files. This might be pages being retrieved because of a page fault or any other data. The unit is kB/s.')
cpqLinOsSwapOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsSwapOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsSwapOutPerSec.setDescription('The amount of memory being swapped out into swap files. This might be pages or any other data. The unit is kB/s.')
cpqLinOsPageSwapInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsPageSwapInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsPageSwapInPerSec.setDescription('The amount of pages being swapped in from swap files. This is in response to a major page fault.')
cpqLinOsPageSwapOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsPageSwapOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsPageSwapOutPerSec.setDescription('The amount of pages being swapped out to disk. This is usually in response to tight memory situations where sleeping processes get put out to disk.')
cpqLinOsMinFltPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMinFltPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMinFltPerSec.setDescription('The amount of minor faults per second system wide. Minor page faults are faults that trigger a page transfer from somewhere in memory as opposed to page transfer from a hard disk.')
cpqLinOsMajFltPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 23, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsMajFltPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsMajFltPerSec.setDescription('The amount of major faults per second system wide. Major page faults are faults that trigger a page transfer from a hard disk s opposed to page transfer from memory.')
cpqLinOsDiskTable = MibTable((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2), )
if mibBuilder.loadTexts: cpqLinOsDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskTable.setDescription('A table of Physical Disk Entries.')
cpqLinOsDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1), ).setIndexNames((0, "CPQLINOS-MIB", "cpqLinOsDiskMajorIndex"), (0, "CPQLINOS-MIB", "cpqLinOsDiskMinorIndex"))
if mibBuilder.loadTexts: cpqLinOsDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskEntry.setDescription('A Physical Disk Entry.')
cpqLinOsDiskMajorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskMajorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskMajorIndex.setDescription('The major number of the device (in the traditional Unix sense).')
cpqLinOsDiskMinorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskMinorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskMinorIndex.setDescription('The minor number of the device (in the traditional Unix sense).')
cpqLinOsDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskName.setDescription('The Physical Disk Instance Name.')
cpqLinOsDiskScsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskScsiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskScsiIndex.setDescription('These are the four numbers that the SCSI subsystem uses to index devices, often written as <host_no, channel, id, lun>. The index can be expressed as (id | (lun << 8) | (channel << 16) | (host_no << 24)).')
cpqLinOsDiskWriteIos = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskWriteIos.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskWriteIos.setDescription('Number of write operations that transpired within the last polling interval.')
cpqLinOsDiskWriteMerges = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskWriteMerges.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskWriteMerges.setDescription('Number of write operations that were coalesced with other operations during the last polling interval.')
cpqLinOsDiskWriteSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskWriteSectors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskWriteSectors.setDescription('Number of sectors written out to disk during the last polling interval.')
cpqLinOsDiskWriteDurationMs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskWriteDurationMs.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskWriteDurationMs.setDescription('Cumulative and concurrent count of milliseconds all write operations took to complete in the last polling interval.')
cpqLinOsDiskWriteIosPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskWriteIosPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskWriteIosPerSec.setDescription('Write operations per second within that last polling interval.')
cpqLinOsDiskWriteSectorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskWriteSectorsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskWriteSectorsPerSec.setDescription('Write sectors per second within the last polling interval.')
cpqLinOsDiskWriteDurationMsPerIos = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskWriteDurationMsPerIos.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskWriteDurationMsPerIos.setDescription('Average milliseconds it took to complete a write operation.')
cpqLinOsDiskReadIos = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskReadIos.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskReadIos.setDescription('Number of read operations that transpired within the last polling interval.')
cpqLinOsDiskReadMerges = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskReadMerges.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskReadMerges.setDescription('Number of read operations that were coalesced with other operations during the last polling interval.')
cpqLinOsDiskReadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskReadSectors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskReadSectors.setDescription('Number of sectors written out to disk during the last polling interval.')
cpqLinOsDiskReadDurationMs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskReadDurationMs.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskReadDurationMs.setDescription('Cumulative and concurrent count of milliseconds all read operations took to complete in the last polling interval.')
cpqLinOsDiskReadIosPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskReadIosPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskReadIosPerSec.setDescription('Read operations per second within that last polling interval.')
cpqLinOsDiskReadSectorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskReadSectorsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskReadSectorsPerSec.setDescription('Read sectors per second within the last polling interval.')
cpqLinOsDiskReadDurationMsPerIos = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsDiskReadDurationMsPerIos.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsDiskReadDurationMsPerIos.setDescription('Average milliseconds it took to complete a write operation.')
cpqLinOsNetworkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2), )
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTable.setDescription('A table of Network Interface Entries.')
cpqLinOsNetworkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1), ).setIndexNames((0, "CPQLINOS-MIB", "cpqLinOsNetworkInterfaceIndex"))
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceEntry.setDescription('A Network Interface Entry.')
cpqLinOsNetworkInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceIndex.setDescription('The Network Interface Instance number.')
cpqLinOsNetworkInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceName.setDescription('The Network Interface Instance Name.')
cpqLinOsNetworkInterfaceTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTxBytes.setDescription('Number of bytes that were transmitted from the network interface within the last polling interval.')
cpqLinOsNetworkInterfaceTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTxPackets.setDescription('Number of packets that were transmitted from the network interface within the last polling interval.')
cpqLinOsNetworkInterfaceTxBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTxBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTxBytesPerSec.setDescription('Number of bytes per second that were transmitted from the network interface.')
cpqLinOsNetworkInterfaceTxPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTxPacketsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceTxPacketsPerSec.setDescription('Number of packets per second that were transmitted from the network interface.')
cpqLinOsNetworkInterfaceRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceRxBytes.setDescription('Number of bytes that were received from the network interface within the last polling interval.')
cpqLinOsNetworkInterfaceRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceRxPackets.setDescription('Number of packets that were received from the network interface within the last polling interval.')
cpqLinOsNetworkInterfaceRxBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceRxBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceRxBytesPerSec.setDescription('Number of bytes per second that were received from the network interface.')
cpqLinOsNetworkInterfaceRxPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 23, 2, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceRxPacketsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqLinOsNetworkInterfaceRxPacketsPerSec.setDescription('Number of packets per second that were received from the network interface.')
mibBuilder.exportSymbols("CPQLINOS-MIB", cpqLinOsSystemUpTime=cpqLinOsSystemUpTime, cpqLinOsMajFltPerSec=cpqLinOsMajFltPerSec, cpqLinOsNetworkInterfaceTxBytesPerSec=cpqLinOsNetworkInterfaceTxBytesPerSec, cpqLinOsDiskReadIos=cpqLinOsDiskReadIos, cpqLinOsDiskReadMerges=cpqLinOsDiskReadMerges, cpqLinOsCpuUserTimePercent=cpqLinOsCpuUserTimePercent, cpqLinOsProcessorTable=cpqLinOsProcessorTable, cpqLinOsDiskReadSectorsPerSec=cpqLinOsDiskReadSectorsPerSec, cpqLinOsProcessorEntry=cpqLinOsProcessorEntry, cpqLinOsDiskEntry=cpqLinOsDiskEntry, cpqLinOsPageSwapInPerSec=cpqLinOsPageSwapInPerSec, cpqLinOsDiskReadSectors=cpqLinOsDiskReadSectors, cpqLinOsDiskMajorIndex=cpqLinOsDiskMajorIndex, cpqLinOsMemActive=cpqLinOsMemActive, cpqLinOsDiskWriteIos=cpqLinOsDiskWriteIos, cpqLinOsCache=cpqLinOsCache, cpqLinOsDiskWriteSectors=cpqLinOsDiskWriteSectors, cpqLinOsDiskWriteDurationMsPerIos=cpqLinOsDiskWriteDurationMsPerIos, cpqLinOsSysContextSwitchesPersec=cpqLinOsSysContextSwitchesPersec, cpqLinOsDiskTable=cpqLinOsDiskTable, cpqLinOsNetworkInterfaceTxPacketsPerSec=cpqLinOsNetworkInterfaceTxPacketsPerSec, cpqLinOsNetworkInterfaceRxBytes=cpqLinOsNetworkInterfaceRxBytes, cpqLinOsMibRev=cpqLinOsMibRev, cpqLinOsMemHighTotal=cpqLinOsMemHighTotal, cpqLinOsNetworkInterface=cpqLinOsNetworkInterface, cpqLinOsMibCondition=cpqLinOsMibCondition, cpqLinOsCommonPollFreq=cpqLinOsCommonPollFreq, cpqLinOsDiskReadIosPerSec=cpqLinOsDiskReadIosPerSec, cpqLinOsPagingFile=cpqLinOsPagingFile, cpqLinOsCpuInterruptsPerSec=cpqLinOsCpuInterruptsPerSec, cpqLinOsCpuTimePercent=cpqLinOsCpuTimePercent, cpqLinOsDiskWriteSectorsPerSec=cpqLinOsDiskWriteSectorsPerSec, cpqLinOsNetworkInterfaceTable=cpqLinOsNetworkInterfaceTable, cpqLinOsNetworkInterfaceRxPacketsPerSec=cpqLinOsNetworkInterfaceRxPacketsPerSec, cpqLinOsCpuInstance=cpqLinOsCpuInstance, cpqLinOsMemCached=cpqLinOsMemCached, cpqLinOsCommonLastObservedTimeSec=cpqLinOsCommonLastObservedTimeSec, cpqLinOsNetworkInterfaceName=cpqLinOsNetworkInterfaceName, cpqLinOsMemInactiveClean=cpqLinOsMemInactiveClean, cpqLinOsNetworkInterfaceRxPackets=cpqLinOsNetworkInterfaceRxPackets, cpqLinOsCpuIndex=cpqLinOsCpuIndex, cpqLinOsNetworkInterfaceIndex=cpqLinOsNetworkInterfaceIndex, cpqLinOsMemLowFree=cpqLinOsMemLowFree, cpqLinOsDisk=cpqLinOsDisk, cpqLinOsDiskWriteMerges=cpqLinOsDiskWriteMerges, cpqLinOsMemLowTotal=cpqLinOsMemLowTotal, cpqLinOsNetworkInterfaceEntry=cpqLinOsNetworkInterfaceEntry, cpqLinOsDiskScsiIndex=cpqLinOsDiskScsiIndex, cpqLinOsCommonLastObservedTimeMSec=cpqLinOsCommonLastObservedTimeMSec, cpqLinOsNetworkInterfaceTxPackets=cpqLinOsNetworkInterfaceTxPackets, cpqLinOsNetworkInterfaceTxBytes=cpqLinOsNetworkInterfaceTxBytes, cpqLinOsMinFltPerSec=cpqLinOsMinFltPerSec, cpqLinOsCommon=cpqLinOsCommon, cpqLinOsSwapInPerSec=cpqLinOsSwapInPerSec, cpqLinOsSwapOutPerSec=cpqLinOsSwapOutPerSec, cpqLinOsComponent=cpqLinOsComponent, cpqLinOsPageSwapOutPerSec=cpqLinOsPageSwapOutPerSec, cpqLinOsSystem=cpqLinOsSystem, cpqLinOsDiskName=cpqLinOsDiskName, cpqLinOsMemSwapFree=cpqLinOsMemSwapFree, cpqLinOsCommonLastObservedPollCycle=cpqLinOsCommonLastObservedPollCycle, cpqLinOsMemTotal=cpqLinOsMemTotal, cpqLinOsCpuPrivilegedTimePercent=cpqLinOsCpuPrivilegedTimePercent, cpqLinOsProcessor=cpqLinOsProcessor, cpqLinOsDiskMinorIndex=cpqLinOsDiskMinorIndex, cpqLinOsMibRevMinor=cpqLinOsMibRevMinor, cpqLinOsMemSwapTotal=cpqLinOsMemSwapTotal, cpqLinOsDiskWriteIosPerSec=cpqLinOsDiskWriteIosPerSec, cpqLinOsDiskReadDurationMsPerIos=cpqLinOsDiskReadDurationMsPerIos, cpqLinOsNetworkInterfaceRxBytesPerSec=cpqLinOsNetworkInterfaceRxBytesPerSec, cpqLinOsMibRevMajor=cpqLinOsMibRevMajor, cpqLinOsDiskWriteDurationMs=cpqLinOsDiskWriteDurationMs, cpqLinOsInterface=cpqLinOsInterface, cpqLinOsMemory=cpqLinOsMemory, cpqLinOsMemSwapCached=cpqLinOsMemSwapCached, cpqLinOsMgmt=cpqLinOsMgmt, cpqLinOsMemHighFree=cpqLinOsMemHighFree, cpqLinOsDiskReadDurationMs=cpqLinOsDiskReadDurationMs, cpqLinOsMemFree=cpqLinOsMemFree, cpqLinOsMemInactiveDirty=cpqLinOsMemInactiveDirty, cpqLinOsSysProcesses=cpqLinOsSysProcesses)
