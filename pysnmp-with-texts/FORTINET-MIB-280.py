#
# PySNMP MIB module FORTINET-MIB-280 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-MIB-280
# Produced by pysmi-0.3.4 at Wed May  1 13:14:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, TimeTicks, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, iso, ObjectIdentity, enterprises, Bits, Unsigned32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "TimeTicks", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "iso", "ObjectIdentity", "enterprises", "Bits", "Unsigned32", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class FnBoolState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class FnIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class FnOpMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nat", 1), ("transparent", 2))

class FnHaMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standalone", 1), ("active-active", 2), ("active-passive", 3))

class FnHaSchedule(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("hub", 2), ("least-connections", 3), ("round-robin", 4), ("weighted-round-robin", 5), ("random", 6), ("ip-based", 7), ("ip-port-based", 8))

class FnAdminPerm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(255, 15, 1, 0))
    namedValues = NamedValues(("super-admin", 255), ("domain-admin", 15), ("write-admin", 1), ("read-admin", 0))

class FnUserAuth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("local", 1), ("radius-single", 2), ("radius-multiple", 3), ("ldap", 4))

class FnIfAddrMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("static", 1))

class FnSessProto(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 8, 12, 17, 22, 41, 46, 47, 50, 51, 89, 103, 108, 255))
    namedValues = NamedValues(("ip", 0), ("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("ipv6", 41), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("ospf", 89), ("pim", 103), ("comp", 108), ("raw", 255))

fortinet = MibIdentifier((1, 3, 6, 1, 4, 1, 12356))
fnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1))
fnDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2))
fnIp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4))
fnVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9))
fnIps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 12))
fnBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15))
fnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 0))
fnSysModel = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysModel.setStatus('current')
if mibBuilder.loadTexts: fnSysModel.setDescription('System model number')
fnSysSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSerial.setStatus('current')
if mibBuilder.loadTexts: fnSysSerial.setDescription('Device serial number')
fnSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysVersion.setStatus('current')
if mibBuilder.loadTexts: fnSysVersion.setDescription('Device firmware version')
fnSysVersionAv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysVersionAv.setStatus('current')
if mibBuilder.loadTexts: fnSysVersionAv.setDescription('Antivirus DB version')
fnSysVersionNids = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysVersionNids.setStatus('current')
if mibBuilder.loadTexts: fnSysVersionNids.setDescription('NIDS DB version')
fnSysHaMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 6), FnHaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysHaMode.setStatus('current')
if mibBuilder.loadTexts: fnSysHaMode.setDescription('High-availabilty mode (Standalone, A-A or A-P)')
fnSysOpMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 7), FnOpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysOpMode.setStatus('current')
if mibBuilder.loadTexts: fnSysOpMode.setDescription('Operational mode (Transparent or Nat)')
fnSysCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysCpuUsage.setStatus('current')
if mibBuilder.loadTexts: fnSysCpuUsage.setDescription('Instantaneous CPU usage')
fnSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMemUsage.setStatus('current')
if mibBuilder.loadTexts: fnSysMemUsage.setDescription('Instantaneous memory utilization')
fnSysSesCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSesCount.setStatus('current')
if mibBuilder.loadTexts: fnSysSesCount.setDescription('Instantaneous session count')
fnHa = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 100))
fnAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 101))
fnUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 102))
fnOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 103))
fnLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 104))
fnMessages = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 105))
fnHaGroupId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaGroupId.setStatus('current')
if mibBuilder.loadTexts: fnHaGroupId.setDescription('HA cluster group ID')
fnHaPriority = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaPriority.setStatus('current')
if mibBuilder.loadTexts: fnHaPriority.setDescription('HA clustering priority (default - 127)')
fnHaOverride = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 3), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaOverride.setStatus('current')
if mibBuilder.loadTexts: fnHaOverride.setDescription('Status of a master override flag')
fnHaAutoSync = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaAutoSync.setStatus('current')
if mibBuilder.loadTexts: fnHaAutoSync.setDescription('Status of an automatic configuration synchronization')
fnHaSchedule = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 5), FnHaSchedule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaSchedule.setStatus('current')
if mibBuilder.loadTexts: fnHaSchedule.setDescription('Load-balancing schedule in A-A mode')
fnHaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6), )
if mibBuilder.loadTexts: fnHaStatsTable.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsTable.setDescription('HA cluster status')
fnHaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnHaStatsIndex"))
if mibBuilder.loadTexts: fnHaStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsEntry.setDescription("Statistics for a particular HA cluster's unit")
fnHaStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsIndex.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsIndex.setDescription('An index value that uniquely identifies an unit in the HA Cluster')
fnHaStatsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsSerial.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsSerial.setDescription("Serial number of HA Cluster's unit")
fnHaStatsCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsCpuUsage.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsCpuUsage.setDescription("CPU Usage of HA Cluster's unit")
fnHaStatsMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsMemUsage.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsMemUsage.setDescription("Memory Usage of HA Cluster's unit")
fnHaStatsNetUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsNetUsage.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsNetUsage.setDescription("Network Usage of HA Cluster's unit")
fnHaStatsSesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsSesCount.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsSesCount.setDescription("Sessions Counter of HA Cluster's unit")
fnHaStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsPktCount.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsPktCount.setDescription("Packets Counter of HA Cluster's unit")
fnHaStatsByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsByteCount.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsByteCount.setDescription("Bytes Counter of HA Cluster's unit")
fnHaStatsIdsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsIdsCount.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsIdsCount.setDescription("IDS Counter of HA Cluster's unit")
fnHaStatsAvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsAvCount.setStatus('current')
if mibBuilder.loadTexts: fnHaStatsAvCount.setDescription("AV Counter of HA Cluster's unit")
fnAdminNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminNumber.setStatus('current')
if mibBuilder.loadTexts: fnAdminNumber.setDescription('The number of admin accounts in fnAdminTable')
fnAdminTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2), )
if mibBuilder.loadTexts: fnAdminTable.setStatus('current')
if mibBuilder.loadTexts: fnAdminTable.setDescription('A list of admin accounts')
fnAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnAdminIndex"))
if mibBuilder.loadTexts: fnAdminEntry.setStatus('current')
if mibBuilder.loadTexts: fnAdminEntry.setDescription('An entry containing information applicable to a particular admin account')
fnAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminIndex.setStatus('current')
if mibBuilder.loadTexts: fnAdminIndex.setDescription('An index of admin account')
fnAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminName.setStatus('current')
if mibBuilder.loadTexts: fnAdminName.setDescription('A username of an account')
fnAdminAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminAddr.setStatus('current')
if mibBuilder.loadTexts: fnAdminAddr.setDescription('An address of a subnet where this admin account can be used from')
fnAdminMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminMask.setStatus('current')
if mibBuilder.loadTexts: fnAdminMask.setDescription('A mask of a subnet where this admin account can be used from')
fnAdminPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 5), FnAdminPerm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminPerm.setStatus('current')
if mibBuilder.loadTexts: fnAdminPerm.setDescription('Access level of this admin account')
fnUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 102, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserNumber.setStatus('current')
if mibBuilder.loadTexts: fnUserNumber.setDescription('The number of user accounts in fnUserTable')
fnUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2), )
if mibBuilder.loadTexts: fnUserTable.setStatus('current')
if mibBuilder.loadTexts: fnUserTable.setDescription('A list of local and proxied (Radius server) user accounts')
fnUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnUserIndex"))
if mibBuilder.loadTexts: fnUserEntry.setStatus('current')
if mibBuilder.loadTexts: fnUserEntry.setDescription('An entry containing information applicable to a particular user account')
fnUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserIndex.setStatus('current')
if mibBuilder.loadTexts: fnUserIndex.setDescription('An index of user account')
fnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserName.setStatus('current')
if mibBuilder.loadTexts: fnUserName.setDescription('A name of user account')
fnUserAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1, 3), FnUserAuth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserAuth.setStatus('current')
if mibBuilder.loadTexts: fnUserAuth.setDescription('Authentication type of the account')
fnUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserState.setStatus('current')
if mibBuilder.loadTexts: fnUserState.setDescription('Status of the user account')
fnOptIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 103, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnOptIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: fnOptIdleTimeout.setDescription('Idle period after which the administrator is automatically logged out off the system')
fnLogOption = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 104, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogOption.setStatus('current')
if mibBuilder.loadTexts: fnLogOption.setDescription('Logging preferences')
fnMesgNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 105, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnMesgNumber.setStatus('current')
if mibBuilder.loadTexts: fnMesgNumber.setDescription('The number of custom messages in sysMesgTable')
fnVdNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVdNumber.setStatus('current')
if mibBuilder.loadTexts: fnVdNumber.setDescription('The number of virtual fnDomains in vdTable')
fnVdTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 2), )
if mibBuilder.loadTexts: fnVdTable.setStatus('current')
if mibBuilder.loadTexts: fnVdTable.setDescription('A list of virtual fnDomains')
fnVdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnVdIndex"))
if mibBuilder.loadTexts: fnVdEntry.setStatus('current')
if mibBuilder.loadTexts: fnVdEntry.setDescription('An entry containing information applicable to a particular virtual domain')
fnVdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVdIndex.setStatus('current')
if mibBuilder.loadTexts: fnVdIndex.setDescription('Internal virtual domain index')
fnVdName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVdName.setStatus('current')
if mibBuilder.loadTexts: fnVdName.setDescription('Virtual domain name')
fnIpSessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 2), )
if mibBuilder.loadTexts: fnIpSessTable.setStatus('current')
if mibBuilder.loadTexts: fnIpSessTable.setDescription('IP Sessions Info')
fnIpSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnIpSessIndex"))
if mibBuilder.loadTexts: fnIpSessEntry.setStatus('current')
if mibBuilder.loadTexts: fnIpSessEntry.setDescription('Particular IP Session info')
fnIpSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessIndex.setStatus('current')
if mibBuilder.loadTexts: fnIpSessIndex.setDescription('An index value that uniquely identifies an IP session')
fnIpSessProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 2), FnSessProto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessProto.setStatus('current')
if mibBuilder.loadTexts: fnIpSessProto.setDescription('The protocol of the connection')
fnIpSessFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessFromAddr.setStatus('current')
if mibBuilder.loadTexts: fnIpSessFromAddr.setDescription('Source IP address')
fnIpSessFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessFromPort.setStatus('current')
if mibBuilder.loadTexts: fnIpSessFromPort.setDescription('Source Port number')
fnIpSessToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessToAddr.setStatus('current')
if mibBuilder.loadTexts: fnIpSessToAddr.setDescription('Destination IP address')
fnIpSessToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessToPort.setStatus('current')
if mibBuilder.loadTexts: fnIpSessToPort.setDescription('Destination Port number')
fnIpSessExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessExp.setStatus('current')
if mibBuilder.loadTexts: fnIpSessExp.setDescription('Time (in seconds) before connection expires')
fnVpnDialupTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 9, 1), )
if mibBuilder.loadTexts: fnVpnDialupTable.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupTable.setDescription('Dialup VPN peers info')
fnVpnDialupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnVpnDialupIndex"))
if mibBuilder.loadTexts: fnVpnDialupEntry.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupEntry.setDescription('Dialup VPN peer info')
fnVpnDialupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupIndex.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupIndex.setDescription('An index value that uniquely identifies an VPN dialup peer')
fnVpnDialupGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupGateway.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupGateway.setDescription('Remote gateway IP address')
fnVpnDialupLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupLifetime.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupLifetime.setDescription('Tunnel life time (seconds)')
fnVpnDialupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupTimeout.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupTimeout.setDescription('Time before the next key exchange (seconds)')
fnVpnDialupSrcBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupSrcBegin.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupSrcBegin.setDescription('Remote subnet address')
fnVpnDialupSrcEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupSrcEnd.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupSrcEnd.setDescription('Remote subnet mask')
fnVpnDialupDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupDstAddr.setStatus('current')
if mibBuilder.loadTexts: fnVpnDialupDstAddr.setDescription('Local subnet address')
fnBridgeFgtFailure = MibScalar((1, 3, 6, 1, 4, 1, 12356, 15, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnBridgeFgtFailure.setStatus('current')
if mibBuilder.loadTexts: fnBridgeFgtFailure.setDescription('FortiGate failure detected by FortiBridge')
fnIpsSigId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 12, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpsSigId.setStatus('current')
if mibBuilder.loadTexts: fnIpsSigId.setDescription('ID of IPS signature')
fnIpsSigSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 12, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpsSigSrcIp.setStatus('current')
if mibBuilder.loadTexts: fnIpsSigSrcIp.setDescription('Source IP Address of the IPS signature trigger')
mibBuilder.exportSymbols("FORTINET-MIB-280", fnHaStatsNetUsage=fnHaStatsNetUsage, fnIpsSigId=fnIpsSigId, fnHaStatsIdsCount=fnHaStatsIdsCount, FnIndex=FnIndex, fnIpSessExp=fnIpSessExp, fnVpnDialupEntry=fnVpnDialupEntry, fnHaGroupId=fnHaGroupId, fnVdIndex=fnVdIndex, fnAdminEntry=fnAdminEntry, fnAdminPerm=fnAdminPerm, fnMessages=fnMessages, fnVpnDialupSrcBegin=fnVpnDialupSrcBegin, fnSysOpMode=fnSysOpMode, fnIpSessFromPort=fnIpSessFromPort, fnSysSerial=fnSysSerial, fnOptIdleTimeout=fnOptIdleTimeout, fnSystem=fnSystem, fnHaStatsMemUsage=fnHaStatsMemUsage, fnUserEntry=fnUserEntry, fnIpSessEntry=fnIpSessEntry, fnIpSessFromAddr=fnIpSessFromAddr, fnLogging=fnLogging, fnUserNumber=fnUserNumber, fnHaStatsTable=fnHaStatsTable, fnUsers=fnUsers, fnHaStatsSerial=fnHaStatsSerial, fnUserTable=fnUserTable, fnMesgNumber=fnMesgNumber, fnIpSessTable=fnIpSessTable, fnAdminAddr=fnAdminAddr, fnOptions=fnOptions, fnAdminName=fnAdminName, fnSysVersion=fnSysVersion, fnVpnDialupDstAddr=fnVpnDialupDstAddr, fnAdminTable=fnAdminTable, FnOpMode=FnOpMode, fnHaAutoSync=fnHaAutoSync, fnIps=fnIps, fnSysMemUsage=fnSysMemUsage, FnHaSchedule=FnHaSchedule, fnHaStatsIndex=fnHaStatsIndex, fnVdEntry=fnVdEntry, fnHaStatsCpuUsage=fnHaStatsCpuUsage, fnSysCpuUsage=fnSysCpuUsage, fnHaStatsPktCount=fnHaStatsPktCount, fnSysSesCount=fnSysSesCount, fnHaSchedule=fnHaSchedule, fnVpn=fnVpn, fnBridge=fnBridge, fnHaPriority=fnHaPriority, fnVpnDialupIndex=fnVpnDialupIndex, fnHaStatsEntry=fnHaStatsEntry, fnAdminIndex=fnAdminIndex, fnUserIndex=fnUserIndex, fnDomains=fnDomains, fnHaStatsAvCount=fnHaStatsAvCount, fnVdName=fnVdName, fnTraps=fnTraps, fnVpnDialupSrcEnd=fnVpnDialupSrcEnd, FnSessProto=FnSessProto, fnVpnDialupLifetime=fnVpnDialupLifetime, fnAdmin=fnAdmin, fortinet=fortinet, fnIpSessToAddr=fnIpSessToAddr, fnSysHaMode=fnSysHaMode, fnUserAuth=fnUserAuth, fnSysVersionNids=fnSysVersionNids, fnAdminNumber=fnAdminNumber, fnIpSessIndex=fnIpSessIndex, FnAdminPerm=FnAdminPerm, fnHaStatsByteCount=fnHaStatsByteCount, FnHaMode=FnHaMode, FnIfAddrMode=FnIfAddrMode, fnUserState=fnUserState, fnHaStatsSesCount=fnHaStatsSesCount, fnVdNumber=fnVdNumber, fnIpSessProto=fnIpSessProto, fnVpnDialupGateway=fnVpnDialupGateway, fnVpnDialupTimeout=fnVpnDialupTimeout, fnLogOption=fnLogOption, fnVpnDialupTable=fnVpnDialupTable, fnIp=fnIp, fnBridgeFgtFailure=fnBridgeFgtFailure, fnIpSessToPort=fnIpSessToPort, fnAdminMask=fnAdminMask, fnUserName=fnUserName, fnIpsSigSrcIp=fnIpsSigSrcIp, FnBoolState=FnBoolState, fnHa=fnHa, fnHaOverride=fnHaOverride, fnSysVersionAv=fnSysVersionAv, fnVdTable=fnVdTable, fnSysModel=fnSysModel, FnUserAuth=FnUserAuth)
