#
# PySNMP MIB module INKTOMI-TS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INKTOMI-TS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:53:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, Gauge32, ModuleIdentity, iso, enterprises, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, ObjectIdentity, Bits, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Gauge32", "ModuleIdentity", "iso", "enterprises", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "ObjectIdentity", "Bits", "Counter32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vendorInktomi = MibIdentifier((1, 3, 6, 1, 4, 1, 1967))
inktomiReg = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 1))
inktomiModules = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 1, 1))
inktomiGlobalRegModule = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 1, 1, 1))
inktomiGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 2))
inktomiProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 3))
inktomiExpr = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 6))
inktomiTSMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 3, 1))
inktomiTSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 3, 1, 1))
inktomiTSObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2))
inktomiTSEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3))
inktomiTrafficServerMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 1967, 1, 1, 2))
inktomiTrafficServerMibModule.setRevisions(('1901-03-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: inktomiTrafficServerMibModule.setRevisionsDescriptions(('Simple Traffic Server MIB',))
if mibBuilder.loadTexts: inktomiTrafficServerMibModule.setLastUpdated('0103120000Z')
if mibBuilder.loadTexts: inktomiTrafficServerMibModule.setOrganization('Inktomi Corporation')
if mibBuilder.loadTexts: inktomiTrafficServerMibModule.setContactInfo('...')
if mibBuilder.loadTexts: inktomiTrafficServerMibModule.setDescription('The MIB module for Traffic Server $Id: inktomi-ts-mib.my,v 1.11 2001/04/30 22:58:50 ambles Exp $')
tSProtocols = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1))
if mibBuilder.loadTexts: tSProtocols.setStatus('current')
if mibBuilder.loadTexts: tSProtocols.setDescription('subtree')
tsProtocolSummary = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 1))
if mibBuilder.loadTexts: tsProtocolSummary.setStatus('current')
if mibBuilder.loadTexts: tsProtocolSummary.setDescription('subtree')
tsClientThroughputOutKBit = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 1, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClientThroughputOutKBit.setStatus('current')
if mibBuilder.loadTexts: tsClientThroughputOutKBit.setDescription(' Client Throughput all protocols (KBit/sec) proxyvar: proxy.node.client-throughput-out-kbit ')
tsDocumentHitRate = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 1, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsDocumentHitRate.setStatus('current')
if mibBuilder.loadTexts: tsDocumentHitRate.setDescription(' Document Hit Rate all protocols average over 10 seconds(%) proxyvar: proxy.node.cache-hit-ratio-int-pct ')
tsBandwidthSavingsRatio = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 1, 3), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsBandwidthSavingsRatio.setStatus('current')
if mibBuilder.loadTexts: tsBandwidthSavingsRatio.setDescription(' The bandwidth hit rate in % for all protocols. Proxyvar: proxy.node.bandwidth-hit-ratio-int-pct ')
tsServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 1, 4), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServerConnections.setStatus('current')
if mibBuilder.loadTexts: tsServerConnections.setDescription(' The current number of connections to servers Proxyvar: proxy.node.current-server-connections ')
tsClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 1, 5), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClientConnections.setStatus('current')
if mibBuilder.loadTexts: tsClientConnections.setDescription(' The current number of connections to clients Proxyvar: proxy.node.current-client-connections ')
tsProtocolClusterSummary = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 2))
if mibBuilder.loadTexts: tsProtocolClusterSummary.setStatus('current')
if mibBuilder.loadTexts: tsProtocolClusterSummary.setDescription('subtree')
tsClusterClientThroughputOutKBit = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 2, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClusterClientThroughputOutKBit.setStatus('current')
if mibBuilder.loadTexts: tsClusterClientThroughputOutKBit.setDescription(' Client Throughput (KBit/sec) (cluster aggregate) proxyvar: proxy.cluster.client-throughput-out-kbit ')
tsClusterDocumentHitRate = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 2, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClusterDocumentHitRate.setStatus('current')
if mibBuilder.loadTexts: tsClusterDocumentHitRate.setDescription(' Document Hit Rate (%) (cluster aggregate) proxyvar: proxy.cluster.cache-hit-ratio-int-pct ')
tsClusterBandwidthSavingsRatio = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 2, 3), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClusterBandwidthSavingsRatio.setStatus('current')
if mibBuilder.loadTexts: tsClusterBandwidthSavingsRatio.setDescription(' The bandwidth hit rate in % for all protocols. (cluster aggregate) Proxyvar: proxy.cluster.bandwidth-hit-ratio-int-pct ')
tsClusterServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 2, 4), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClusterServerConnections.setStatus('current')
if mibBuilder.loadTexts: tsClusterServerConnections.setDescription(' The current number of connections to servers (cluster aggregate) Proxyvar: proxy.cluster.current-server-connections ')
tsClusterClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 2, 5), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClusterClientConnections.setStatus('current')
if mibBuilder.loadTexts: tsClusterClientConnections.setDescription(' The current number of connections to clients (cluster aggregate) Proxyvar: proxy.cluster.current-client-connections ')
tsProtocolHTTP = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3))
if mibBuilder.loadTexts: tsProtocolHTTP.setStatus('current')
if mibBuilder.loadTexts: tsProtocolHTTP.setDescription('subtree')
tsHttpStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1))
if mibBuilder.loadTexts: tsHttpStats.setStatus('current')
if mibBuilder.loadTexts: tsHttpStats.setDescription('subtree')
httpXacts = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpXacts.setStatus('current')
if mibBuilder.loadTexts: httpXacts.setDescription(' The rate of documents served per second. Proxyvar: proxy.node.http.user-agent-xacts-per-second ')
httpThroughput = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpThroughput.setStatus('current')
if mibBuilder.loadTexts: httpThroughput.setDescription(' throughput bytes/sec proxyvar: proxy.node.http.throughput ')
httpCurrentlyOpenUA = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 3), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpCurrentlyOpenUA.setStatus('current')
if mibBuilder.loadTexts: httpCurrentlyOpenUA.setDescription(' current open client connections proxyvar: proxy.node.http.user-agent-current-connections-count ')
httpHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 4), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHitRatio.setStatus('current')
if mibBuilder.loadTexts: httpHitRatio.setDescription(' The hit rate in % for HTTP requests. Proxyvar: proxy.node.http.cache-hit-ratio-int-pct ')
httpBandwidthSavingsRatio = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 5), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpBandwidthSavingsRatio.setStatus('current')
if mibBuilder.loadTexts: httpBandwidthSavingsRatio.setDescription(' The bandwidth hit rate in % for HTTP requests. Proxyvar: proxy.node.http.bandwidth-hit-ratio-int-pct ')
httpCurrentlyOpenOrigin = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 6), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpCurrentlyOpenOrigin.setStatus('current')
if mibBuilder.loadTexts: httpCurrentlyOpenOrigin.setDescription(' Open Origin Server Connections proxyvar: proxy.node.http.origin-server-current-connections-count ')
httpUserAgentDocumentBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 7), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpUserAgentDocumentBytes.setStatus('current')
if mibBuilder.loadTexts: httpUserAgentDocumentBytes.setDescription(' Total Document Bytes (sent to HTTP user agents) proxyvar: proxy.process.http.user-agent-response-document-total-size ')
httpUserAgentHeaderBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 8), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpUserAgentHeaderBytes.setStatus('current')
if mibBuilder.loadTexts: httpUserAgentHeaderBytes.setDescription(' Total Header Bytes (sent to HTTP user agents) proxyvar: proxy.process.http.user-agent-response-header-total-size ')
httpUserAgentConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 9), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpUserAgentConnections.setStatus('current')
if mibBuilder.loadTexts: httpUserAgentConnections.setDescription(' Total Connections from HTTP user agents proxyvar: proxy.process.http.current-client-connections ')
httpUserAgentTransactionsInProgress = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 10), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpUserAgentTransactionsInProgress.setStatus('current')
if mibBuilder.loadTexts: httpUserAgentTransactionsInProgress.setDescription(' Transactions In Progress from HTTP user agents proxyvar: proxy.process.http.current-client-transactions ')
httpOriginServerTotalTransactions = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 11), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpOriginServerTotalTransactions.setStatus('current')
if mibBuilder.loadTexts: httpOriginServerTotalTransactions.setDescription(' total Origin Server Transactions proxyvar: proxy.node.http.origin-server-total-transactions-count ')
httpOriginServerTransactionsInProgress = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 12), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpOriginServerTransactionsInProgress.setStatus('current')
if mibBuilder.loadTexts: httpOriginServerTransactionsInProgress.setDescription(' Transactions In Progress to HTTP origin servers proxyvar: proxy.process.http.current-server-transactions ')
httpOriginServerDocumentBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 13), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpOriginServerDocumentBytes.setStatus('current')
if mibBuilder.loadTexts: httpOriginServerDocumentBytes.setDescription(' Total Document Bytes (received from HTTP origin servers) proxyvar: proxy.process.http.origin-server-response-document-total-size ')
httpOriginServerHeaderBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 14), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpOriginServerHeaderBytes.setStatus('current')
if mibBuilder.loadTexts: httpOriginServerHeaderBytes.setDescription(' Total Header Bytes (received from HTTP origin servers) proxyvar: proxy.process.http.origin-server-response-header-total-size ')
httpOriginServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 15), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpOriginServerConnections.setStatus('current')
if mibBuilder.loadTexts: httpOriginServerConnections.setDescription(' Total Connections to HTTP origin servers proxyvar: proxy.process.http.current-server-connections ')
httpOriginServerResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 16), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpOriginServerResponseBytes.setStatus('current')
if mibBuilder.loadTexts: httpOriginServerResponseBytes.setDescription(' total Bytes from Origin Servers proxyvar: proxy.node.http.origin-server-total-response-bytes ')
httpUserAgentResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 17), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpUserAgentResponseBytes.setStatus('current')
if mibBuilder.loadTexts: httpUserAgentResponseBytes.setDescription(' total bytes to user agents proxyvar: proxy.node.http.user-agent-total-response-bytes ')
httpUserAgentTransactions = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 18), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpUserAgentTransactions.setStatus('current')
if mibBuilder.loadTexts: httpUserAgentTransactions.setDescription(' total Client Transactions proxyvar: proxy.node.http.user-agents-total-transactions-count ')
httpTransactionErrorsPossbileAbortsMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 19), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsPossbileAbortsMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsPossbileAbortsMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.errors.possible-aborts ')
httpTransactionMissChangedMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 20), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionMissChangedMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionMissChangedMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.miss-changed ')
httpTransactionHitRevalidatedMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 21), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionHitRevalidatedMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionHitRevalidatedMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.hit-revalidated ')
httpTransactionErrorsOtherMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 22), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsOtherMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsOtherMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.errors.other ')
httpTransactionErrorsAbortsMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 23), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsAbortsMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsAbortsMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.errors.aborts ')
httpTransactionErrorsEarlyHangupsMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 24), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsEarlyHangupsMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsEarlyHangupsMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.errors.early-hangups ')
httpTransactionErrorsEmptyHangupsMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 25), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsEmptyHangupsMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsEmptyHangupsMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.errors.empty-hangups ')
httpTransactionOtherUnclassifiedMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 26), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionOtherUnclassifiedMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionOtherUnclassifiedMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.other.unclassified ')
httpTransactionErrorsPreAcceptHangupsMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 27), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsPreAcceptHangupsMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsPreAcceptHangupsMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.errors.pre-accept-hangups ')
httpTransactionMissClientNoCacheMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 28), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionMissClientNoCacheMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionMissClientNoCacheMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.miss-client-no-cache ')
httpTransactionMissNotCachableMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 29), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionMissNotCachableMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionMissNotCachableMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.miss-not-cacheable ')
httpTransactionHitFreshMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 30), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionHitFreshMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionHitFreshMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.hit-fresh ')
httpTransactionErrorsConnectFailedMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 31), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsConnectFailedMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsConnectFailedMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.errors.connect-failed ')
httpTransactionMissColdMsec = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 32), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionMissColdMsec.setStatus('current')
if mibBuilder.loadTexts: httpTransactionMissColdMsec.setDescription(' proxyvar: proxy.node.http.transaction-msec-avg-10s.miss-cold ')
httpTransactionErrorsPossibleAbortsPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 33), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsPossibleAbortsPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsPossibleAbortsPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.errors.possible-aborts-int-pct ')
httpTransactionErrorsPreAcceptHangupsPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 34), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsPreAcceptHangupsPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsPreAcceptHangupsPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.errors.pre-accept-hangups-int-pct ')
httpTransactionMissChangedPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 35), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionMissChangedPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionMissChangedPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.miss-changed-int-pct ')
httpTransactionErrorsOtherPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 36), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsOtherPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsOtherPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.errors.other-int-pct ')
httpTransactionHitFreshPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 37), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionHitFreshPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionHitFreshPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.hit-fresh-int-pct ')
httpTransactionErrorsConnectFailedPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 38), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsConnectFailedPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsConnectFailedPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.errors.connect-failed-int-pct ')
httpTransactionErrorsEarlyHangupsPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 39), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsEarlyHangupsPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsEarlyHangupsPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.errors.early-hangups-int-pct ')
httpTransactionErrorsEmptyHangupsPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 40), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsEmptyHangupsPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsEmptyHangupsPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.errors.empty-hangups-int-pct ')
httpTransactionMissColdPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 41), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionMissColdPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionMissColdPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.miss-cold-int-pct ')
httpTransactionOtherUnclassifiedPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 42), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionOtherUnclassifiedPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionOtherUnclassifiedPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.other.unclassified-int-pct ')
httpTransactionHitRevalidatedPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 43), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionHitRevalidatedPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionHitRevalidatedPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.hit-revalidated-int-pct ')
httpTransactionMissClientNoCachePct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 44), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionMissClientNoCachePct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionMissClientNoCachePct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.miss-client-no-cache-int-pct ')
httpTransactionMissNotCachablePct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 45), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionMissNotCachablePct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionMissNotCachablePct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.miss-not-cacheable-int-pct ')
httpTransactionErrorsAbortsPct = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 46), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransactionErrorsAbortsPct.setStatus('current')
if mibBuilder.loadTexts: httpTransactionErrorsAbortsPct.setDescription(' proxyvar: proxy.node.http.transaction-frac-avg-10s.errors.aborts-int-pct ')
httpCurrentlyParentProxy = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 1, 47), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: httpCurrentlyParentProxy.setStatus('current')
if mibBuilder.loadTexts: httpCurrentlyParentProxy.setDescription(' Currently open parent proxy connections proxyvar: proxy.node.http.current-parent-proxy-connections ')
tsHttpClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2))
if mibBuilder.loadTexts: tsHttpClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsHttpClusterStats.setDescription('subtree')
clusterHttpHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpHitRatio.setStatus('current')
if mibBuilder.loadTexts: clusterHttpHitRatio.setDescription(' The hit rate in % for HTTP requests (cluster aggregate). Proxyvar: proxy.cluster.http.cache-hit-ratio-int-pct ')
clusterBandwidthSavingsRatio = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterBandwidthSavingsRatio.setStatus('current')
if mibBuilder.loadTexts: clusterBandwidthSavingsRatio.setDescription(' The bandwidth hit rate in % for HTTP requests (cluster aggregate). Proxyvar: proxy.cluster.http.bandwidth-hit-ratio-int-pct ')
clusterHttpCurrentlyOpenUA = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 3), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpCurrentlyOpenUA.setStatus('current')
if mibBuilder.loadTexts: clusterHttpCurrentlyOpenUA.setDescription(' current open client connections (cluster aggregate) proxyvar: proxy.cluster.http.user-agent-current-connections-count ')
clusterHttpCurrentlyOpenOrigin = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 4), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpCurrentlyOpenOrigin.setStatus('current')
if mibBuilder.loadTexts: clusterHttpCurrentlyOpenOrigin.setDescription(' Open Origin Server Connections (cluster aggregate) proxyvar: proxy.cluster.http.origin-server-current-connections-count ')
clusterHttpThroughput = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 5), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpThroughput.setStatus('current')
if mibBuilder.loadTexts: clusterHttpThroughput.setDescription(' throughput bytes/sec (cluster aggregate) proxyvar: proxy.cluster.http.throughput ')
clusterHttpXacts = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 6), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpXacts.setStatus('current')
if mibBuilder.loadTexts: clusterHttpXacts.setDescription(' The rate of documents served per second (cluster aggregate) Proxyvar: proxy.cluster.http.user-agent-xacts-per-second ')
clusterHttpUserAgentResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 7), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpUserAgentResponseBytes.setStatus('current')
if mibBuilder.loadTexts: clusterHttpUserAgentResponseBytes.setDescription(' total bytes to user agents (cluster aggregate) proxyvar: proxy.cluster.http.user-agent-total-response-bytes ')
clusterHttpOriginServerResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 8), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpOriginServerResponseBytes.setStatus('current')
if mibBuilder.loadTexts: clusterHttpOriginServerResponseBytes.setDescription(' total Bytes from Origin Servers (cluster aggregate) proxyvar: proxy.cluster.http.origin-server-total-response-bytes ')
clusterHttpOriginServerTransactions = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 9), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpOriginServerTransactions.setStatus('current')
if mibBuilder.loadTexts: clusterHttpOriginServerTransactions.setDescription(' total Origin Server Transactions (cluster aggregate) proxyvar: proxy.cluster.http.origin-server-total-transactions-count ')
clusterHttpUserAgentTransactions = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 10), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpUserAgentTransactions.setStatus('current')
if mibBuilder.loadTexts: clusterHttpUserAgentTransactions.setDescription(' total Client Transactions (cluster aggregate) proxyvar: proxy.cluster.http.user-agents-total-transactions-count ')
clusterHttpCurrentlyParentProxy = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 3, 2, 11), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpCurrentlyParentProxy.setStatus('current')
if mibBuilder.loadTexts: clusterHttpCurrentlyParentProxy.setDescription(' Currently open parent proxy connections (cluster aggregate) proxyvar: proxy.cluster.http.current-parent-proxy-connections ')
tsProtocolFTP = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4))
if mibBuilder.loadTexts: tsProtocolFTP.setStatus('current')
if mibBuilder.loadTexts: tsProtocolFTP.setDescription('subtree')
tsFTPStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1))
if mibBuilder.loadTexts: tsFTPStats.setStatus('current')
if mibBuilder.loadTexts: tsFTPStats.setDescription('subtree')
ftpCurrentlyOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpCurrentlyOpenConnections.setStatus('current')
if mibBuilder.loadTexts: ftpCurrentlyOpenConnections.setDescription(' Currently Open Connections proxyvar: proxy.process.ftp.connections-currently-open ')
ftpSuccessfulPASV = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSuccessfulPASV.setStatus('current')
if mibBuilder.loadTexts: ftpSuccessfulPASV.setDescription(' Successful PASV Connections proxyvar: proxy.process.ftp.connections-successful-pasv ')
ftpUnsuccessfulPASV = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUnsuccessfulPASV.setStatus('current')
if mibBuilder.loadTexts: ftpUnsuccessfulPASV.setDescription(' Unsuccessful PASV Connections proxyvar: proxy.process.ftp.connections-failed-pasv ')
ftpSuccessfulPORT = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSuccessfulPORT.setStatus('current')
if mibBuilder.loadTexts: ftpSuccessfulPORT.setDescription(' Successful PORT Connections proxyvar: proxy.process.ftp.connections-successful-port ')
ftpUnsuccessfulPORT = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUnsuccessfulPORT.setStatus('current')
if mibBuilder.loadTexts: ftpUnsuccessfulPORT.setDescription(' Unsuccessful PORT Connections proxyvar: proxy.process.ftp.connections-failed-port ')
ftpClientOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 6), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpClientOpenConnections.setStatus('current')
if mibBuilder.loadTexts: ftpClientOpenConnections.setDescription(' The current # of open FTP client connections Proxyvar: proxy.process.ftp.current-client-connections ')
ftpClientBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 7), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpClientBytesRead.setStatus('current')
if mibBuilder.loadTexts: ftpClientBytesRead.setDescription(' The # of bytes read from FTP client connections Proxyvar: proxy.process.ftp.downstream.request-bytes ')
ftpClientBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 8), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpClientBytesWritten.setStatus('current')
if mibBuilder.loadTexts: ftpClientBytesWritten.setDescription(' The # of bytes written to FTP client connections Proxyvar: proxy.process.ftp.downstream.response-bytes ')
ftpServerOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 9), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpServerOpenConnections.setStatus('current')
if mibBuilder.loadTexts: ftpServerOpenConnections.setDescription(' The current # of open FTP server connections Proxyvar: proxy.process.ftp.current-server-connections ')
ftpServerBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 10), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpServerBytesRead.setStatus('current')
if mibBuilder.loadTexts: ftpServerBytesRead.setDescription(' The # of bytes read from FTP server connections Proxyvar: proxy.process.ftp.upstream.request-bytes ')
ftpServerBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 11), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpServerBytesWritten.setStatus('current')
if mibBuilder.loadTexts: ftpServerBytesWritten.setDescription(' The # of bytes written to FTP server connections Proxyvar: proxy.process.ftp.upstream.response-bytes ')
ftpFileHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 12), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpFileHits.setStatus('current')
if mibBuilder.loadTexts: ftpFileHits.setDescription(' File hits Proxyvar: proxy.process.ftp.file-hits ')
ftpFileMisses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 13), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpFileMisses.setStatus('current')
if mibBuilder.loadTexts: ftpFileMisses.setDescription(' File misses Proxyvar: proxy.process.ftp.file-misses ')
ftpCwdHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 14), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpCwdHits.setStatus('current')
if mibBuilder.loadTexts: ftpCwdHits.setDescription(' Change working directory hits Proxyvar: proxy.process.ftp.cwd-hits ')
ftpCwdMisses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 15), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpCwdMisses.setStatus('current')
if mibBuilder.loadTexts: ftpCwdMisses.setDescription(' Change working directoyr misses Proxyvar: proxy.process.ftp.cwd-misses ')
ftpDirectoryHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 16), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpDirectoryHits.setStatus('current')
if mibBuilder.loadTexts: ftpDirectoryHits.setDescription(' List directory hits Proxyvar: proxy.process.ftp.directory-hits ')
ftpDirectoryMisses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 1, 17), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpDirectoryMisses.setStatus('current')
if mibBuilder.loadTexts: ftpDirectoryMisses.setDescription(' List directoyr misses Proxyvar: proxy.process.ftp.directory-misses ')
tsFTPClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 4, 2))
if mibBuilder.loadTexts: tsFTPClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsFTPClusterStats.setDescription('subtree')
tsProtocolSOCKS = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 5))
if mibBuilder.loadTexts: tsProtocolSOCKS.setStatus('current')
if mibBuilder.loadTexts: tsProtocolSOCKS.setDescription('subtree')
tsSOCKSStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 5, 1))
if mibBuilder.loadTexts: tsSOCKSStats.setStatus('current')
if mibBuilder.loadTexts: tsSOCKSStats.setDescription('subtree')
socksUnsuccessfulConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 5, 1, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: socksUnsuccessfulConnections.setStatus('current')
if mibBuilder.loadTexts: socksUnsuccessfulConnections.setDescription(' The # of unsuccessful connections to SOCKS server Proxyvar: proxy.process.socks.connections-unsuccessful ')
socksSuccessfulConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 5, 1, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: socksSuccessfulConnections.setStatus('current')
if mibBuilder.loadTexts: socksSuccessfulConnections.setDescription(' The # of successful connections to SOCKS server Proxyvar: proxy.process.socks.connections-successful ')
socksOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 5, 1, 3), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: socksOpenConnections.setStatus('current')
if mibBuilder.loadTexts: socksOpenConnections.setDescription(' The current # of open connections to SOCKS server Proxyvar: proxy.process.socks.connections-currently-open ')
tsSOCKSClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 5, 2))
if mibBuilder.loadTexts: tsSOCKSClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsSOCKSClusterStats.setDescription('subtree')
tsProtocolNNTP = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6))
if mibBuilder.loadTexts: tsProtocolNNTP.setStatus('current')
if mibBuilder.loadTexts: tsProtocolNNTP.setDescription('subtree')
tsNNTPStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1))
if mibBuilder.loadTexts: tsNNTPStats.setStatus('current')
if mibBuilder.loadTexts: tsNNTPStats.setDescription('subtree')
nntpClientOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpClientOpenConnections.setStatus('current')
if mibBuilder.loadTexts: nntpClientOpenConnections.setDescription(' The current # of open NNTP client connections Proxyvar: proxy.node.nntp.current-client-connections ')
nntpServerOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpServerOpenConnections.setStatus('current')
if mibBuilder.loadTexts: nntpServerOpenConnections.setDescription(' The current # of open connections to NNTP servers Proxyvar: proxy.node.nntp.current-server-connections ')
nntpArticleHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpArticleHits.setStatus('current')
if mibBuilder.loadTexts: nntpArticleHits.setDescription(' The # of articles served from cache Proxyvar: proxy.process.nntp.article-hits ')
nntpArticleMisses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpArticleMisses.setStatus('current')
if mibBuilder.loadTexts: nntpArticleMisses.setDescription(' The # of articles retreived from backing server Proxyvar: proxy.process.nntp.article-misses ')
nntpClientBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpClientBytesWritten.setStatus('current')
if mibBuilder.loadTexts: nntpClientBytesWritten.setDescription(' The # of bytes written to NNTP client connections Proxyvar: proxy.process.nntp.client-bytes-written ')
nntpClientBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 6), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpClientBytesRead.setStatus('current')
if mibBuilder.loadTexts: nntpClientBytesRead.setDescription(' The # of bytes read from NNTP client connections Proxyvar: proxy.process.nntp.client-bytes-read ')
nntpFeedBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 7), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpFeedBytes.setStatus('current')
if mibBuilder.loadTexts: nntpFeedBytes.setDescription(' The # of bytes read from NNTP feed Proxyvar: proxy.process.nntp.feed-bytes ')
nntpPullBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 8), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpPullBytes.setStatus('current')
if mibBuilder.loadTexts: nntpPullBytes.setDescription(' The # of bytes pulled from backing server Proxyvar: proxy.process.nntp.pull-bytes ')
nntpGroupHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 9), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpGroupHits.setStatus('current')
if mibBuilder.loadTexts: nntpGroupHits.setDescription(' group hits Proxyvar: proxy.process.nntp.group-hits ')
nntpGroupRefreshes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 10), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpGroupRefreshes.setStatus('current')
if mibBuilder.loadTexts: nntpGroupRefreshes.setDescription(' group refreshes Proxyvar: proxy.process.nntp.group-refreshes ')
nntpOverviewHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 11), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpOverviewHits.setStatus('current')
if mibBuilder.loadTexts: nntpOverviewHits.setDescription(' overview hits Proxyvar: proxy.process.nntp.overview-hits ')
nntpOverviewRefreshes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 12), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpOverviewRefreshes.setStatus('current')
if mibBuilder.loadTexts: nntpOverviewRefreshes.setDescription(' overview refreshes Proxyvar: proxy.process.nntp.overview-refreshes ')
nntpPostBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 13), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpPostBytes.setStatus('current')
if mibBuilder.loadTexts: nntpPostBytes.setDescription(' The # of bytes posted Proxyvar: proxy.process.nntp.post-bytes ')
nntpPosts = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 14), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpPosts.setStatus('current')
if mibBuilder.loadTexts: nntpPosts.setDescription(' The # of articles posted Proxyvar: proxy.process.nntp.posts ')
nntpServerBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 15), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpServerBytesRead.setStatus('current')
if mibBuilder.loadTexts: nntpServerBytesRead.setDescription(' The # of bytes read from backing server Proxyvar: proxy.process.nntp.server-bytes-read ')
nntpServerBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 16), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpServerBytesWritten.setStatus('current')
if mibBuilder.loadTexts: nntpServerBytesWritten.setDescription(' The # of bytes written from backing server Proxyvar: proxy.process.nntp.server-bytes-written ')
nntpUpstreamTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 17), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpUpstreamTotalBytes.setStatus('current')
if mibBuilder.loadTexts: nntpUpstreamTotalBytes.setDescription(' The # of bytes read/written to backing server Proxyvar: proxy.node.nntp.upstream-total-bytes ')
nntpDownstreamTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 1, 18), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpDownstreamTotalBytes.setStatus('current')
if mibBuilder.loadTexts: nntpDownstreamTotalBytes.setDescription(' The # of bytes read/written to clients Proxyvar: proxy.node.nntp.downstream-total-bytes ')
tsNNTPClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 2))
if mibBuilder.loadTexts: tsNNTPClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsNNTPClusterStats.setDescription('subtree')
nntpClusterUpstreamTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 2, 1), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpClusterUpstreamTotalBytes.setStatus('current')
if mibBuilder.loadTexts: nntpClusterUpstreamTotalBytes.setDescription(' The # of bytes read/written to backing server. (cluster aggregate) Proxyvar: proxy.cluster.nntp.upstream-total-bytes ')
nntpClusterDownstreamTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 2, 2), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpClusterDownstreamTotalBytes.setStatus('current')
if mibBuilder.loadTexts: nntpClusterDownstreamTotalBytes.setDescription(' The # of bytes read/written to clients Proxyvar: proxy.cluster.nntp.downstream-total-bytes ')
nntpClusterClientOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 2, 3), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpClusterClientOpenConnections.setStatus('current')
if mibBuilder.loadTexts: nntpClusterClientOpenConnections.setDescription(' The current # of open NNTP client connections. (cluster aggregate) Proxyvar: proxy.cluster.nntp.current-client-connections ')
nntpClusterServerOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 6, 2, 4), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: nntpClusterServerOpenConnections.setStatus('current')
if mibBuilder.loadTexts: nntpClusterServerOpenConnections.setDescription(' The current # of open connections to NNTP servers. (cluster aggregate) Proxyvar: proxy.cluster.nntp.current-server-connections ')
tsProtocolRNI = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7))
if mibBuilder.loadTexts: tsProtocolRNI.setStatus('current')
if mibBuilder.loadTexts: tsProtocolRNI.setDescription('subtree')
tsRNIStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1))
if mibBuilder.loadTexts: tsRNIStats.setStatus('current')
if mibBuilder.loadTexts: tsRNIStats.setDescription('subtree')
rniObjectCount = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniObjectCount.setStatus('current')
if mibBuilder.loadTexts: rniObjectCount.setDescription(' The total # of rni objects served Proxyvar: proxy.process.rni.object-count ')
rniBlockHitCount = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniBlockHitCount.setStatus('current')
if mibBuilder.loadTexts: rniBlockHitCount.setDescription(' The total # of rni block hits Proxyvar: proxy.process.rni.block-hit-count ')
rniBlockMissCount = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniBlockMissCount.setStatus('current')
if mibBuilder.loadTexts: rniBlockMissCount.setDescription(' The total # of rni block misses Proxyvar: proxy.process.rni.block-miss-count ')
rniByteHitSum = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniByteHitSum.setStatus('current')
if mibBuilder.loadTexts: rniByteHitSum.setDescription(' The total # of rni bytes hit Proxyvar: proxy.process.rni.byte-hit-sum ')
rniByteMissSum = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniByteMissSum.setStatus('current')
if mibBuilder.loadTexts: rniByteMissSum.setDescription(' The total # of rni bytes missed Proxyvar: proxy.process.rni.byte-miss-sum ')
rniCurrentClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 6), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: rniCurrentClientConnections.setDescription(' The current # of open rni client connections Proxyvar: proxy.process.rni.current-client-connections ')
rniDownstreamRequests = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 7), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniDownstreamRequests.setStatus('current')
if mibBuilder.loadTexts: rniDownstreamRequests.setDescription(' The total # of rni downstream requests Proxyvar: proxy.process.rni.downstream-requests ')
rniDownstreamRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 8), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniDownstreamRequestBytes.setStatus('current')
if mibBuilder.loadTexts: rniDownstreamRequestBytes.setDescription(' The total # of rni downstream request bytes Proxyvar: proxy.process.rni.downstream.request-bytes ')
rniDownstreamResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 9), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniDownstreamResponseBytes.setStatus('current')
if mibBuilder.loadTexts: rniDownstreamResponseBytes.setDescription(' The total # of rni downstream response bytes Proxyvar: proxy.process.rni.downstream.response-bytes ')
rniCurrentServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 10), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniCurrentServerConnections.setStatus('current')
if mibBuilder.loadTexts: rniCurrentServerConnections.setDescription(' The current # of open rni server connections Proxyvar: proxy.process.rni.current-server-connections ')
rniUpstreamRequests = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 11), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniUpstreamRequests.setStatus('current')
if mibBuilder.loadTexts: rniUpstreamRequests.setDescription(' The total # of rni upstream requests Proxyvar: proxy.process.rni.upstream-requests ')
rniUpstreamRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 12), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniUpstreamRequestBytes.setStatus('current')
if mibBuilder.loadTexts: rniUpstreamRequestBytes.setDescription(' The total # of rni upstream request bytes Proxyvar: proxy.process.rni.upstream.request-bytes ')
rniUpstreamResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 1, 13), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniUpstreamResponseBytes.setStatus('current')
if mibBuilder.loadTexts: rniUpstreamResponseBytes.setDescription(' The total # of rni upstream response bytes Proxyvar: proxy.process.rni.upstream.response-bytes ')
tsRNIClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 2))
if mibBuilder.loadTexts: tsRNIClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsRNIClusterStats.setDescription('subtree')
rniClusterUpstreamTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 2, 1), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniClusterUpstreamTotalBytes.setStatus('current')
if mibBuilder.loadTexts: rniClusterUpstreamTotalBytes.setDescription(' The total # of byte sent/received from RNI servers. (cluster aggregate) Proxyvar: proxy.cluster.rni.upstream-total-bytes ')
rniClusterDownstreamTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 2, 2), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniClusterDownstreamTotalBytes.setStatus('current')
if mibBuilder.loadTexts: rniClusterDownstreamTotalBytes.setDescription(' The total # of byte sent/received from clients. (cluster aggregate) Proxyvar: proxy.cluster.rni.downstream-total-bytes ')
rniClusterCurrentServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 2, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniClusterCurrentServerConnections.setStatus('current')
if mibBuilder.loadTexts: rniClusterCurrentServerConnections.setDescription(' The current # of RNI server connections. (cluster aggregate) Proxyvar: proxy.cluster.rni.current-server-connections ')
rniClusterCurrentClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 2, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniClusterCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: rniClusterCurrentClientConnections.setDescription(' The current # of RNI client connections. (cluster aggregate) Proxyvar: proxy.cluster.rni.current-client-connections ')
rniClusterUserAgentXactsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 2, 5), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniClusterUserAgentXactsPerSecond.setStatus('current')
if mibBuilder.loadTexts: rniClusterUserAgentXactsPerSecond.setDescription(' The rate of RNI documents served per second (cluster aggregate) Proxyvar: proxy.cluster.rni.user-agent-xacts-per-second ')
rniClusterUserAgentsTotalDocumentsServed = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 7, 2, 6), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: rniClusterUserAgentsTotalDocumentsServed.setStatus('current')
if mibBuilder.loadTexts: rniClusterUserAgentsTotalDocumentsServed.setDescription(' The total # of RNI documents served to clients. (cluster aggregate) Proxyvar: proxy.cluster.rni.user-agents-total-documents-served ')
tsProtocolQT = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8))
if mibBuilder.loadTexts: tsProtocolQT.setStatus('current')
if mibBuilder.loadTexts: tsProtocolQT.setDescription('subtree')
tsQTStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1))
if mibBuilder.loadTexts: tsQTStats.setStatus('current')
if mibBuilder.loadTexts: tsQTStats.setDescription('subtree')
qtClientRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClientRequestBytes.setStatus('current')
if mibBuilder.loadTexts: qtClientRequestBytes.setDescription(' The total # of client Quick Time request bytes Proxyvar: proxy.process.qt.downstream.request-bytes ')
qtClientResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClientResponseBytes.setStatus('current')
if mibBuilder.loadTexts: qtClientResponseBytes.setDescription(' The total # of client Quick Time response bytes Proxyvar: proxy.process.qt.downstream.response-bytes ')
qtServerRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtServerRequestBytes.setStatus('current')
if mibBuilder.loadTexts: qtServerRequestBytes.setDescription(' The total # of server Quick Time request bytes Proxyvar: proxy.process.qt.upstream.request-bytes ')
qtServerResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtServerResponseBytes.setStatus('current')
if mibBuilder.loadTexts: qtServerResponseBytes.setDescription(' The total # of server Quick Time response bytes Proxyvar: proxy.process.qt.upstream.response-bytes ')
qtCurrentClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: qtCurrentClientConnections.setDescription(' The total # of open Quick Time client connections Proxyvar: proxy.process.qt.current-client-connections ')
qtCurrentServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 6), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtCurrentServerConnections.setStatus('current')
if mibBuilder.loadTexts: qtCurrentServerConnections.setDescription(' The total # of open Quick Time server connections Proxyvar: proxy.process.qt.current-server-connections ')
qtCurrentLiveStreams = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 7), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtCurrentLiveStreams.setStatus('current')
if mibBuilder.loadTexts: qtCurrentLiveStreams.setDescription(' The total # of live Quick Time connections Proxyvar: proxy.process.qt.current-unique-live-streams ')
qtClientServerBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 8), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClientServerBytesRead.setStatus('current')
if mibBuilder.loadTexts: qtClientServerBytesRead.setDescription(' Proxyvar: proxy.process.qt.client.server-bytes-read The # of bytes read from Quick Time server connections ')
qtClientCacheBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 1, 9), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClientCacheBytesRead.setStatus('current')
if mibBuilder.loadTexts: qtClientCacheBytesRead.setDescription(' The # of bytes read from Quick Time cache Proxyvar: proxy.process.qt.client.cache-bytes-read ')
tsQTClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 2))
if mibBuilder.loadTexts: tsQTClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsQTClusterStats.setDescription('subtree')
qtClusterServerTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 2, 1), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClusterServerTotalBytes.setStatus('current')
if mibBuilder.loadTexts: qtClusterServerTotalBytes.setDescription(' The total # of byte sent/received from QT servers. (cluster aggregate) Proxyvar: proxy.cluster.qt.upstream-total-bytes ')
qtClusterClientTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 2, 2), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClusterClientTotalBytes.setStatus('current')
if mibBuilder.loadTexts: qtClusterClientTotalBytes.setDescription(' The total # of byte sent/received from clients. (cluster aggregate) Proxyvar: proxy.cluster.qt.downstream-total-bytes ')
qtClusterCurrentServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 2, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClusterCurrentServerConnections.setStatus('current')
if mibBuilder.loadTexts: qtClusterCurrentServerConnections.setDescription(' The current # of QT server connections. (cluster aggregate) Proxyvar: proxy.cluster.qt.current-server-connections ')
qtClusterCurrentClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 2, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClusterCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: qtClusterCurrentClientConnections.setDescription(' The current # of QT client connections. (cluster aggregate) Proxyvar: proxy.cluster.qt.current-client-connections ')
qtClusterUserAgentXactsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 2, 5), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClusterUserAgentXactsPerSecond.setStatus('current')
if mibBuilder.loadTexts: qtClusterUserAgentXactsPerSecond.setDescription(' The rate of QT documents served per second (cluster aggregate) Proxyvar: proxy.cluster.qt.user-agent-xacts-per-second ')
qtClusterUserAgentsTotalDocumentsServed = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 8, 2, 6), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: qtClusterUserAgentsTotalDocumentsServed.setStatus('current')
if mibBuilder.loadTexts: qtClusterUserAgentsTotalDocumentsServed.setDescription(' The total # of QT documents served to clients. (cluster aggregate) Proxyvar: proxy.cluster.qt.user-agents-total-documents-served ')
tsProtocolWMT = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9))
if mibBuilder.loadTexts: tsProtocolWMT.setStatus('current')
if mibBuilder.loadTexts: tsProtocolWMT.setDescription('subtree')
tsWMTStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 1))
if mibBuilder.loadTexts: tsWMTStats.setStatus('current')
if mibBuilder.loadTexts: tsWMTStats.setDescription('subtree')
wmtClientRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 1, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtClientRequestBytes.setStatus('current')
if mibBuilder.loadTexts: wmtClientRequestBytes.setDescription(' The total # of client Windows Media request bytes Proxyvar: proxy.process.wmt.downstream.request-bytes ')
wmtClientResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 1, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtClientResponseBytes.setStatus('current')
if mibBuilder.loadTexts: wmtClientResponseBytes.setDescription(' The total # of client Windows Media response bytes Proxyvar: proxy.process.wmt.downstream.response-bytes ')
wmtServerRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 1, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtServerRequestBytes.setStatus('current')
if mibBuilder.loadTexts: wmtServerRequestBytes.setDescription(' The total # of server Windows Media request bytes Proxyvar: proxy.process.wmt.upstream.request-bytes ')
wmtServerResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 1, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtServerResponseBytes.setStatus('current')
if mibBuilder.loadTexts: wmtServerResponseBytes.setDescription(' The total # of server Windows Media response bytes Proxyvar: proxy.process.wmt.upstream.response-bytes ')
wmtCurrentClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 1, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: wmtCurrentClientConnections.setDescription(' The total # of open Windows Media client connections Proxyvar: proxy.process.wmt.current-client-connections ')
wmtCurrentServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 1, 6), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtCurrentServerConnections.setStatus('current')
if mibBuilder.loadTexts: wmtCurrentServerConnections.setDescription(' The total # of open Windows Media server connections Proxyvar: proxy.process.wmt.current-server-connections ')
tsWMTClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 2))
if mibBuilder.loadTexts: tsWMTClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsWMTClusterStats.setDescription('subtree')
wmtClusterServerTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 2, 1), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtClusterServerTotalBytes.setStatus('current')
if mibBuilder.loadTexts: wmtClusterServerTotalBytes.setDescription(' The total # of byte sent/received from WMT servers. (cluster aggregate) Proxyvar: proxy.cluster.wmt.upstream-total-bytes ')
wmtClusterClientTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 2, 2), Counter64()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtClusterClientTotalBytes.setStatus('current')
if mibBuilder.loadTexts: wmtClusterClientTotalBytes.setDescription(' The total # of byte sent/received from clients. (cluster aggregate) Proxyvar: proxy.cluster.wmt.downstream-total-bytes ')
wmtClusterCurrentServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 2, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtClusterCurrentServerConnections.setStatus('current')
if mibBuilder.loadTexts: wmtClusterCurrentServerConnections.setDescription(' The current # of WMT server connections. (cluster aggregate) Proxyvar: proxy.cluster.wmt.current-server-connections ')
wmtClusterCurrentClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 2, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtClusterCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: wmtClusterCurrentClientConnections.setDescription(' The current # of WMT client connections. (cluster aggregate) Proxyvar: proxy.cluster.wmt.current-client-connections ')
wmtClusterUserAgentXactsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 2, 5), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtClusterUserAgentXactsPerSecond.setStatus('current')
if mibBuilder.loadTexts: wmtClusterUserAgentXactsPerSecond.setDescription(' The rate of WMT documents served per second (cluster aggregate) Proxyvar: proxy.cluster.wmt.user-agent-xacts-per-second ')
wmtClusterUserAgentsTotalDocumentsServed = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 1, 9, 2, 6), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: wmtClusterUserAgentsTotalDocumentsServed.setStatus('current')
if mibBuilder.loadTexts: wmtClusterUserAgentsTotalDocumentsServed.setDescription(' The total # of WMT documents served to clients. (cluster aggregate) Proxyvar: proxy.cluster.wmt.user-agents-total-documents-served ')
tSEventSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 2))
if mibBuilder.loadTexts: tSEventSubsystem.setStatus('current')
if mibBuilder.loadTexts: tSEventSubsystem.setDescription('subtree')
tSCacheSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3))
if mibBuilder.loadTexts: tSCacheSubsystem.setStatus('current')
if mibBuilder.loadTexts: tSCacheSubsystem.setDescription('subtree')
tSICPStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1))
if mibBuilder.loadTexts: tSICPStats.setStatus('current')
if mibBuilder.loadTexts: tSICPStats.setDescription('subtree')
tsICPRemoteQuery = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPRemoteQuery.setStatus('current')
if mibBuilder.loadTexts: tsICPRemoteQuery.setDescription(' ICP Remote Query Requests proxyvar: proxy.process.icp.icp-remote-query-requests ')
tsICPRemoteResponses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPRemoteResponses.setStatus('current')
if mibBuilder.loadTexts: tsICPRemoteResponses.setDescription(' ICP Remote Responses proxyvar: proxy.process.icp.icp-remote-responses ')
tsICPCacheLookupSuccess = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPCacheLookupSuccess.setStatus('current')
if mibBuilder.loadTexts: tsICPCacheLookupSuccess.setDescription(' Cache Lookup Success proxyvar: proxy.process.icp.cache-lookup-success ')
tsICPCacheLookupFail = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPCacheLookupFail.setStatus('current')
if mibBuilder.loadTexts: tsICPCacheLookupFail.setDescription(' Cache Lookup Failures proxyvar: proxy.process.icp.cache-lookup-fail ')
tsICPQueryResponseWrite = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPQueryResponseWrite.setStatus('current')
if mibBuilder.loadTexts: tsICPQueryResponseWrite.setDescription(' Query Response Writes proxyvar: proxy.process.icp.query-response-write ')
tsICPQueryHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 6), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPQueryHits.setStatus('current')
if mibBuilder.loadTexts: tsICPQueryHits.setDescription(' ICP Query hits proxyvar: proxy.process.icp.icp-query-hits ')
tsICPQueryMisses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 7), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPQueryMisses.setStatus('current')
if mibBuilder.loadTexts: tsICPQueryMisses.setDescription(' ICP Query misses proxyvar: proxy.process.icp.icp-query-misses ')
tsICPQueryRequests = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 8), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPQueryRequests.setStatus('current')
if mibBuilder.loadTexts: tsICPQueryRequests.setDescription(' ICP Query requests proxyvar: proxy.process.icp.icp-query-requests ')
tsICPResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 9), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPResponseTime.setStatus('current')
if mibBuilder.loadTexts: tsICPResponseTime.setDescription(' Total ICP Response Time proxyvar: proxy.process.icp.total-icp-response-time ')
tsICPUDPSendQueries = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 10), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPUDPSendQueries.setStatus('current')
if mibBuilder.loadTexts: tsICPUDPSendQueries.setDescription(' Total UDP Send Queries proxyvar: proxy.process.icp.total-udp-send-queries ')
tsICPRequestTime = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 1, 11), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsICPRequestTime.setStatus('current')
if mibBuilder.loadTexts: tsICPRequestTime.setDescription(' Total ICP Request Time proxyvar: proxy.process.icp.total-icp-request-time ')
tSCacheStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2))
if mibBuilder.loadTexts: tSCacheStats.setStatus('current')
if mibBuilder.loadTexts: tSCacheStats.setDescription('subtree')
tSCachePercentFree = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCachePercentFree.setStatus('current')
if mibBuilder.loadTexts: tSCachePercentFree.setDescription(' % free bytes in cache (cluster aggregate). proxyvar: proxy.node.cache.percent-free-int-pct ')
tSCacheHTTPHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheHTTPHits.setStatus('current')
if mibBuilder.loadTexts: tSCacheHTTPHits.setDescription(' Objects Served From Cache (HTTP only) proxyvar: proxy.node.http.cache-total-hits ')
tSCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheHits.setStatus('current')
if mibBuilder.loadTexts: tSCacheHits.setDescription(' Objects Served From Cache (all protocols) proxyvar: proxy.node.cache-total-hits ')
tSCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheMisses.setStatus('current')
if mibBuilder.loadTexts: tSCacheMisses.setDescription(' Objects Not Found in Cache (all protocols) proxyvar: proxy.node.cache-total-misses ')
tSCacheCurrentXfers = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 5), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheCurrentXfers.setStatus('current')
if mibBuilder.loadTexts: tSCacheCurrentXfers.setDescription(' Cache Xfers In Progress (HTTP only) proxyvar: proxy.node.http.cache-current-connections-count ')
tSCacheBytesTotalMB = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 6), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheBytesTotalMB.setStatus('current')
if mibBuilder.loadTexts: tSCacheBytesTotalMB.setDescription(' Cache Size (in MB) proxyvar: proxy.node.cache.bytes-total-mb ')
tSCacheLinkActive = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 7), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheLinkActive.setStatus('obsolete')
if mibBuilder.loadTexts: tSCacheLinkActive.setDescription(' Link operations in progress proxyvar: proxy.process.cache.link.active ')
tSCacheLinkFailures = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 8), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheLinkFailures.setStatus('obsolete')
if mibBuilder.loadTexts: tSCacheLinkFailures.setDescription(' Link operations failed proxyvar: proxy.process.cache.link.failure ')
tSCacheLinkSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 9), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheLinkSuccesses.setStatus('obsolete')
if mibBuilder.loadTexts: tSCacheLinkSuccesses.setDescription(' Link operations suceeded proxyvar: proxy.process.cache.link.success ')
tSCacheLookupActive = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 10), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheLookupActive.setStatus('current')
if mibBuilder.loadTexts: tSCacheLookupActive.setDescription(' lookup operations in progress proxyvar: proxy.process.cache.lookup.active ')
tSCacheLookupFailures = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 11), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheLookupFailures.setStatus('current')
if mibBuilder.loadTexts: tSCacheLookupFailures.setDescription(' lookup operations failed proxyvar: proxy.process.cache.lookup.failure ')
tSCacheLookupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 12), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheLookupSuccesses.setStatus('current')
if mibBuilder.loadTexts: tSCacheLookupSuccesses.setDescription(' Lookup operations suceeded proxyvar: proxy.process.cache.lookup.success ')
tSCacheReadActive = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 13), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheReadActive.setStatus('current')
if mibBuilder.loadTexts: tSCacheReadActive.setDescription(' Read operations in progress proxyvar: proxy.process.cache.read.active ')
tSCacheReadFailures = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 14), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheReadFailures.setStatus('current')
if mibBuilder.loadTexts: tSCacheReadFailures.setDescription(' Read operations failed proxyvar: proxy.process.cache.read.failure ')
tSCacheReadSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 15), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheReadSuccesses.setStatus('current')
if mibBuilder.loadTexts: tSCacheReadSuccesses.setDescription(' Read operations suceeded proxyvar: proxy.process.cache.read.success ')
tSCacheRemoveActive = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 16), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheRemoveActive.setStatus('current')
if mibBuilder.loadTexts: tSCacheRemoveActive.setDescription(' Remove operations in progress proxyvar: proxy.process.cache.remove.active ')
tSCacheRemoveFailures = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 17), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheRemoveFailures.setStatus('current')
if mibBuilder.loadTexts: tSCacheRemoveFailures.setDescription(' Remove operations failed proxyvar: proxy.process.cache.remove.failure ')
tSCacheRemoveSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 18), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheRemoveSuccesses.setStatus('current')
if mibBuilder.loadTexts: tSCacheRemoveSuccesses.setDescription(' Remove operations suceeded proxyvar: proxy.process.cache.remove.success ')
tSCacheUpdateActive = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 19), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheUpdateActive.setStatus('current')
if mibBuilder.loadTexts: tSCacheUpdateActive.setDescription(' Update operations in progress proxyvar: proxy.process.cache.update.active ')
tSCacheUpdateFailures = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 20), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheUpdateFailures.setStatus('current')
if mibBuilder.loadTexts: tSCacheUpdateFailures.setDescription(' Update operations failed proxyvar: proxy.process.cache.update.failure ')
tSCacheUpdateSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 21), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheUpdateSuccesses.setStatus('current')
if mibBuilder.loadTexts: tSCacheUpdateSuccesses.setDescription(' Update operations suceeded proxyvar: proxy.process.cache.update.success ')
tSCacheWriteActive = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 22), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheWriteActive.setStatus('current')
if mibBuilder.loadTexts: tSCacheWriteActive.setDescription(' Write operations in progress proxyvar: proxy.process.cache.write.active ')
tSCacheWriteFailures = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 23), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheWriteFailures.setStatus('current')
if mibBuilder.loadTexts: tSCacheWriteFailures.setDescription(' Write operations failed proxyvar: proxy.process.cache.write.failure ')
tSCacheWriteSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 24), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheWriteSuccesses.setStatus('current')
if mibBuilder.loadTexts: tSCacheWriteSuccesses.setDescription(' Write operations suceeded proxyvar: proxy.process.cache.write.success ')
tSCacheConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 2, 25), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSCacheConnections.setStatus('current')
if mibBuilder.loadTexts: tSCacheConnections.setDescription(' The current number of connections to the cache. proxyvar: proxy.node.current-cache-connections ')
tSCacheClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 3))
if mibBuilder.loadTexts: tSCacheClusterStats.setStatus('current')
if mibBuilder.loadTexts: tSCacheClusterStats.setDescription('subtree')
tSClusterCacheFreeMB = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 3, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSClusterCacheFreeMB.setStatus('current')
if mibBuilder.loadTexts: tSClusterCacheFreeMB.setDescription(' # of free MB in cache (cluster aggregate). proxyvar: proxy.cluster.cache.bytes-free-mb ')
tSClusterCachePercentFree = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 3, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSClusterCachePercentFree.setStatus('current')
if mibBuilder.loadTexts: tSClusterCachePercentFree.setDescription(' % free bytes in cache (cluster aggregate). proxyvar: proxy.cluster.cache.percent-free-int-pct ')
tSClusterCacheHTTPHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 3, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSClusterCacheHTTPHits.setStatus('current')
if mibBuilder.loadTexts: tSClusterCacheHTTPHits.setDescription(' Objects Served From Cache (HTTP only) (cluster aggregate). proxyvar: proxy.cluster.http.cache-total-hits ')
tSClusterCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 3, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSClusterCacheHits.setStatus('current')
if mibBuilder.loadTexts: tSClusterCacheHits.setDescription(' Objects Served From Cache (all protocols) (cluster aggregate). proxyvar: proxy.cluster.cache-total-hits ')
tSClusterCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 3, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSClusterCacheMisses.setStatus('current')
if mibBuilder.loadTexts: tSClusterCacheMisses.setDescription(' Objects Not Found in Cache (all protocols) (cluster aggregate). proxyvar: proxy.cluster.cache-total-misses ')
tSClusterCacheCurrentXfers = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 3, 6), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSClusterCacheCurrentXfers.setStatus('current')
if mibBuilder.loadTexts: tSClusterCacheCurrentXfers.setDescription(' Cache Xfers In Progress (HTTP only) (cluster aggregate) proxyvar: proxy.cluster.http.cache-current-connections-count ')
tSClusterCacheConnections = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 3, 7), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSClusterCacheConnections.setStatus('current')
if mibBuilder.loadTexts: tSClusterCacheConnections.setDescription(' The current number of connections to the cache. (cluster aggregate) proxyvar: proxy.cluster.current-cache-connections ')
tSCacheGCSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 4))
if mibBuilder.loadTexts: tSCacheGCSubsystem.setStatus('current')
if mibBuilder.loadTexts: tSCacheGCSubsystem.setDescription('subtree')
tSCacheEngineSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 3, 5))
if mibBuilder.loadTexts: tSCacheEngineSubsystem.setStatus('current')
if mibBuilder.loadTexts: tSCacheEngineSubsystem.setDescription('subtree')
tSDiskSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 4))
if mibBuilder.loadTexts: tSDiskSubsystem.setStatus('current')
if mibBuilder.loadTexts: tSDiskSubsystem.setDescription('subtree')
tSHostDBSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5))
if mibBuilder.loadTexts: tSHostDBSubsystem.setStatus('current')
if mibBuilder.loadTexts: tSHostDBSubsystem.setDescription('subtree')
tsDNSStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 1))
if mibBuilder.loadTexts: tsDNSStats.setStatus('current')
if mibBuilder.loadTexts: tsDNSStats.setDescription('subtree')
dnsTotalLookups = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 1, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotalLookups.setStatus('current')
if mibBuilder.loadTexts: dnsTotalLookups.setDescription(' Total # of DNS lookups performed. proxyvar: proxy.process.dns.total-dns-lookups ')
dnsLookupRate = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 1, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsLookupRate.setStatus('current')
if mibBuilder.loadTexts: dnsLookupRate.setDescription(' # of DNS lookups per second (cluster aggregate) proxyvar: proxy.node.dns.lookups-per-second ')
dnsTotalLookupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 1, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotalLookupSuccesses.setStatus('current')
if mibBuilder.loadTexts: dnsTotalLookupSuccesses.setDescription(' Total # of successful DNS lookups performed. proxyvar: proxy.process.dns.lookup-successes ')
dnsLookupTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 1, 4), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsLookupTimeMs.setStatus('current')
if mibBuilder.loadTexts: dnsLookupTimeMs.setDescription(' Average time for DNS lookups to respond in milliseconds proxyvar: proxy.process.dns.lookup-avg-time ')
tsClusterDNSStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 2))
if mibBuilder.loadTexts: tsClusterDNSStats.setStatus('current')
if mibBuilder.loadTexts: tsClusterDNSStats.setDescription('subtree')
tsClusterDNSTotalLookups = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 2, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClusterDNSTotalLookups.setStatus('current')
if mibBuilder.loadTexts: tsClusterDNSTotalLookups.setDescription(' Total # of DNS lookups performed (cluster aggregate) proxyvar: proxy.cluster.dns.total-dns-lookups ')
tsClusterDNSLookupRate = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 2, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsClusterDNSLookupRate.setStatus('current')
if mibBuilder.loadTexts: tsClusterDNSLookupRate.setDescription(' # of DNS lookups per second (cluster aggregate) proxyvar: proxy.cluster.dns.lookups-per-second ')
tsHostDBStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 3))
if mibBuilder.loadTexts: tsHostDBStats.setStatus('current')
if mibBuilder.loadTexts: tsHostDBStats.setDescription('subtree')
hostDBTotalLookups = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 3, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostDBTotalLookups.setStatus('current')
if mibBuilder.loadTexts: hostDBTotalLookups.setDescription(' proxyvar: proxy.process.hostdb.total-lookups ')
hostDBTotalHits = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 3, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostDBTotalHits.setStatus('current')
if mibBuilder.loadTexts: hostDBTotalHits.setDescription(' Total Hits proxyvar: proxy.process.hostdb.total-hits ')
hostDBAverageTTL = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 3, 3), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostDBAverageTTL.setStatus('current')
if mibBuilder.loadTexts: hostDBAverageTTL.setDescription(' Average TTL of host entries in minutes proxyvar: proxy.process.hostdb.ttl ')
tSClusterHostDBStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 4))
if mibBuilder.loadTexts: tSClusterHostDBStats.setStatus('current')
if mibBuilder.loadTexts: tSClusterHostDBStats.setDescription('subtree')
clusterHostdbHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 5, 4, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHostdbHitRatio.setStatus('current')
if mibBuilder.loadTexts: clusterHostdbHitRatio.setDescription(' HostDB Hit Rate% (cluster aggregate) proxyvar: proxy.cluster.hostdb.hit-ratio-int-pct ')
tSClusterSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6))
if mibBuilder.loadTexts: tSClusterSubsystem.setStatus('current')
if mibBuilder.loadTexts: tSClusterSubsystem.setDescription('subtree')
tsClusterNodeStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6, 1))
if mibBuilder.loadTexts: tsClusterNodeStats.setStatus('current')
if mibBuilder.loadTexts: tsClusterNodeStats.setDescription('subtree')
clusterBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6, 1, 1), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterBytesRead.setStatus('current')
if mibBuilder.loadTexts: clusterBytesRead.setDescription(' proxyvar: proxy.process.cluster.read-bytes ')
clusterBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6, 1, 2), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterBytesWritten.setStatus('current')
if mibBuilder.loadTexts: clusterBytesWritten.setDescription(' proxyvar: proxy.process.cluster.write-bytes ')
clusterConnectionsOpen = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6, 1, 3), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterConnectionsOpen.setStatus('current')
if mibBuilder.loadTexts: clusterConnectionsOpen.setDescription(' Number of connections currently open. proxyvar: proxy.process.cluster.connections-open ')
clusterConnectionsOpened = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6, 1, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterConnectionsOpened.setStatus('current')
if mibBuilder.loadTexts: clusterConnectionsOpened.setDescription(' Number of connections opened. proxyvar: proxy.process.cluster.connections-opened ')
clusterNetBackups = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6, 1, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNetBackups.setStatus('current')
if mibBuilder.loadTexts: clusterNetBackups.setDescription(' proxyvar: proxy.process.cluster.net-backup ')
clusterNodeCount = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6, 1, 6), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNodeCount.setStatus('current')
if mibBuilder.loadTexts: clusterNodeCount.setDescription(' proxyvar: proxy.process.cluster.nodes ')
tsClusterClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 6, 2))
if mibBuilder.loadTexts: tsClusterClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsClusterClusterStats.setDescription('subtree')
tsLoggingSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 7))
if mibBuilder.loadTexts: tsLoggingSubsystem.setStatus('current')
if mibBuilder.loadTexts: tsLoggingSubsystem.setDescription('subtree')
tsLogStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 7, 1))
if mibBuilder.loadTexts: tsLogStats.setStatus('current')
if mibBuilder.loadTexts: tsLogStats.setDescription('subtree')
tsLogOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 7, 1, 1), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLogOpenFiles.setStatus('current')
if mibBuilder.loadTexts: tsLogOpenFiles.setDescription(' Currently Open Log Files proxyvar: proxy.process.log2.log-files-open ')
tsLogSpaceUsed = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 7, 1, 2), Gauge32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLogSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: tsLogSpaceUsed.setDescription(' Space Used For Log Files proxyvar: proxy.process.log2.log-files-space-used ')
tsLogAccessesLogged = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 7, 1, 3), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLogAccessesLogged.setStatus('current')
if mibBuilder.loadTexts: tsLogAccessesLogged.setDescription(' Number of Access Events Logged proxyvar: proxy.process.log2.event-log-access ')
tsLogAccessesSkipped = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 7, 1, 4), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLogAccessesSkipped.setStatus('current')
if mibBuilder.loadTexts: tsLogAccessesSkipped.setDescription(' Number of Access Events Skipped proxyvar: proxy.process.log2.event-log-access-skip ')
tsLogErrorsLogged = MibScalar((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 7, 1, 5), Counter32()).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLogErrorsLogged.setStatus('current')
if mibBuilder.loadTexts: tsLogErrorsLogged.setDescription(' Number of Error Events Logged proxyvar: proxy.process.log2.event-log-error ')
tsNetworkSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 8))
if mibBuilder.loadTexts: tsNetworkSubsystem.setStatus('current')
if mibBuilder.loadTexts: tsNetworkSubsystem.setDescription('subtree')
tsNetworkStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 8, 1))
if mibBuilder.loadTexts: tsNetworkStats.setStatus('current')
if mibBuilder.loadTexts: tsNetworkStats.setDescription('subtree')
tsNetworkClusterStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 8, 2))
if mibBuilder.loadTexts: tsNetworkClusterStats.setStatus('current')
if mibBuilder.loadTexts: tsNetworkClusterStats.setDescription('subtree')
tsIOSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 9))
if mibBuilder.loadTexts: tsIOSubsystem.setStatus('current')
if mibBuilder.loadTexts: tsIOSubsystem.setDescription('subtree')
tsOSSubsystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 2, 10))
if mibBuilder.loadTexts: tsOSSubsystem.setStatus('current')
if mibBuilder.loadTexts: tsOSSubsystem.setDescription('subtree')
inktomiTSLogEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 1))
if mibBuilder.loadTexts: inktomiTSLogEvents.setStatus('current')
if mibBuilder.loadTexts: inktomiTSLogEvents.setDescription('subtree')
loggingError = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 1, 0, 1))
if mibBuilder.loadTexts: loggingError.setStatus('current')
if mibBuilder.loadTexts: loggingError.setDescription(' Warning. An error with logging occurred. mgralarm: MGMT-ALARM-PROXY-LOGGING-ERROR ')
loggingWarning = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 1, 0, 2))
if mibBuilder.loadTexts: loggingWarning.setStatus('current')
if mibBuilder.loadTexts: loggingWarning.setDescription(' Warning. An error with logging occurred. mgralarm: MGMT-ALARM-PROXY-LOGGING-WARNING ')
logSpaceCrisis = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 1, 0, 3))
if mibBuilder.loadTexts: logSpaceCrisis.setStatus('current')
if mibBuilder.loadTexts: logSpaceCrisis.setDescription(' Warning. An error with logging occurred. mgralarm: MGMT-ALARM-PROXY-LOG-SPACE-CRISIS ')
inktomiTSCacheEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 2))
if mibBuilder.loadTexts: inktomiTSCacheEvents.setStatus('current')
if mibBuilder.loadTexts: inktomiTSCacheEvents.setDescription('subtree')
cacheError = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 2, 0, 1))
if mibBuilder.loadTexts: cacheError.setStatus('current')
if mibBuilder.loadTexts: cacheError.setDescription(' Warning. An error with the cache occurred. mgralarm: MGMT-ALARM-PROXY-CACHE-ERROR ')
cacheWarning = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 2, 0, 2))
if mibBuilder.loadTexts: cacheWarning.setStatus('current')
if mibBuilder.loadTexts: cacheWarning.setDescription(' Warning. An error with the cache occurred. mgralarm: MGMT-ALARM-PROXY-CACHE-WARNING ')
inktomiTSProtocolEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 3))
if mibBuilder.loadTexts: inktomiTSProtocolEvents.setStatus('current')
if mibBuilder.loadTexts: inktomiTSProtocolEvents.setDescription('subtree')
nntpError = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 3, 0, 1))
if mibBuilder.loadTexts: nntpError.setStatus('current')
if mibBuilder.loadTexts: nntpError.setDescription(' Warning. mgralarm: MGMT-ALARM-PROXY-NNTP-ERROR ')
inktomiTSGeneralEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 4))
if mibBuilder.loadTexts: inktomiTSGeneralEvents.setStatus('current')
if mibBuilder.loadTexts: inktomiTSGeneralEvents.setDescription('subtree')
configurationUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 4, 0, 1))
if mibBuilder.loadTexts: configurationUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: configurationUpdateFailed.setDescription(' Warning. Configuration files were not written properly. mgralarm: MGMT-ALARM-CONFIG-UPDATE-FAILED ')
managerUIInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 4, 0, 2))
if mibBuilder.loadTexts: managerUIInitFailed.setStatus('current')
if mibBuilder.loadTexts: managerUIInitFailed.setDescription(' Warning. Management UI was not enabled on startup. mgralarm: MGMT-ALARM-WEB-ERROR ')
invalidConfig = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 4, 0, 3))
if mibBuilder.loadTexts: invalidConfig.setStatus('current')
if mibBuilder.loadTexts: invalidConfig.setDescription(' Warning. Traffic server was started with an invalid configuration. mgralarm: MGMT-ALARM-PROXY-CONFIG-ERROR ')
processBorn = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 4, 0, 4))
if mibBuilder.loadTexts: processBorn.setStatus('current')
if mibBuilder.loadTexts: processBorn.setDescription(' Warning. Traffic manager started traffic server. mgralarm: MGMT-ALARM-PROXY-PROCESS-BORN ')
systemError = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 4, 0, 5))
if mibBuilder.loadTexts: systemError.setStatus('current')
if mibBuilder.loadTexts: systemError.setDescription(' Warning. Miscellaneous error. mgralarm: MGMT-ALARM-PROXY-SYSTEM-ERROR ')
testAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 4, 0, 6))
if mibBuilder.loadTexts: testAlarm.setStatus('current')
if mibBuilder.loadTexts: testAlarm.setDescription(' Debug. Test alarm generated by CLI mgralarm: MGMT-ALARM-MGMT-TEST ')
inktomiTSClusterEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 5))
if mibBuilder.loadTexts: inktomiTSClusterEvents.setStatus('current')
if mibBuilder.loadTexts: inktomiTSClusterEvents.setDescription('subtree')
peerDied = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 5, 0, 1))
if mibBuilder.loadTexts: peerDied.setStatus('current')
if mibBuilder.loadTexts: peerDied.setDescription(' Warning. Traffic manager noticed that a peer node went down. mgralarm: MGMT-ALARM-PROXY-PEER-DIED ')
peerBorn = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 5, 0, 2))
if mibBuilder.loadTexts: peerBorn.setStatus('current')
if mibBuilder.loadTexts: peerBorn.setDescription(' Warning. Traffic manager noticed that a peer node came up. mgralarm: MGMT-ALARM-PROXY-PEER-BORN ')
pingFailure = NotificationType((1, 3, 6, 1, 4, 1, 1967, 3, 1, 3, 5, 0, 3))
if mibBuilder.loadTexts: pingFailure.setStatus('current')
if mibBuilder.loadTexts: pingFailure.setDescription(' Warning. Problem in bringing up virtual IP interface. mgralarm: MGMT-ALARM-PING-FAILURE ')
mibBuilder.exportSymbols("INKTOMI-TS-MIB", httpTransactionMissColdPct=httpTransactionMissColdPct, clusterHttpOriginServerTransactions=clusterHttpOriginServerTransactions, nntpArticleHits=nntpArticleHits, ftpServerOpenConnections=ftpServerOpenConnections, qtClusterServerTotalBytes=qtClusterServerTotalBytes, httpUserAgentDocumentBytes=httpUserAgentDocumentBytes, rniClusterUserAgentXactsPerSecond=rniClusterUserAgentXactsPerSecond, tsClusterClientConnections=tsClusterClientConnections, clusterNodeCount=clusterNodeCount, tsICPQueryMisses=tsICPQueryMisses, PYSNMP_MODULE_ID=inktomiTrafficServerMibModule, nntpClusterClientOpenConnections=nntpClusterClientOpenConnections, tSCacheReadActive=tSCacheReadActive, tsProtocolRNI=tsProtocolRNI, tsHttpStats=tsHttpStats, inktomiProducts=inktomiProducts, rniCurrentClientConnections=rniCurrentClientConnections, tsICPQueryRequests=tsICPQueryRequests, tSCacheLinkFailures=tSCacheLinkFailures, httpUserAgentTransactions=httpUserAgentTransactions, nntpArticleMisses=nntpArticleMisses, tsProtocolHTTP=tsProtocolHTTP, ftpServerBytesWritten=ftpServerBytesWritten, httpOriginServerHeaderBytes=httpOriginServerHeaderBytes, tsQTClusterStats=tsQTClusterStats, ftpClientBytesRead=ftpClientBytesRead, tSCacheEngineSubsystem=tSCacheEngineSubsystem, clusterConnectionsOpened=clusterConnectionsOpened, nntpClientBytesRead=nntpClientBytesRead, tSCacheRemoveFailures=tSCacheRemoveFailures, logSpaceCrisis=logSpaceCrisis, nntpServerBytesWritten=nntpServerBytesWritten, httpCurrentlyParentProxy=httpCurrentlyParentProxy, rniDownstreamResponseBytes=rniDownstreamResponseBytes, nntpServerBytesRead=nntpServerBytesRead, tsRNIClusterStats=tsRNIClusterStats, tsNetworkStats=tsNetworkStats, inktomiTSClusterEvents=inktomiTSClusterEvents, tsFTPClusterStats=tsFTPClusterStats, httpUserAgentTransactionsInProgress=httpUserAgentTransactionsInProgress, httpTransactionHitFreshMsec=httpTransactionHitFreshMsec, tsDocumentHitRate=tsDocumentHitRate, httpTransactionErrorsPossibleAbortsPct=httpTransactionErrorsPossibleAbortsPct, tsNNTPStats=tsNNTPStats, rniDownstreamRequests=rniDownstreamRequests, tsLogAccessesLogged=tsLogAccessesLogged, tsHttpClusterStats=tsHttpClusterStats, tsICPQueryResponseWrite=tsICPQueryResponseWrite, tSClusterCachePercentFree=tSClusterCachePercentFree, httpTransactionErrorsOtherPct=httpTransactionErrorsOtherPct, tsLogOpenFiles=tsLogOpenFiles, httpTransactionErrorsEmptyHangupsPct=httpTransactionErrorsEmptyHangupsPct, httpHitRatio=httpHitRatio, wmtClusterClientTotalBytes=wmtClusterClientTotalBytes, wmtClusterCurrentClientConnections=wmtClusterCurrentClientConnections, tSCacheWriteSuccesses=tSCacheWriteSuccesses, httpTransactionErrorsAbortsMsec=httpTransactionErrorsAbortsMsec, tsNetworkSubsystem=tsNetworkSubsystem, nntpGroupHits=nntpGroupHits, nntpError=nntpError, wmtClusterCurrentServerConnections=wmtClusterCurrentServerConnections, tsICPCacheLookupSuccess=tsICPCacheLookupSuccess, tSCacheStats=tSCacheStats, tsProtocolSummary=tsProtocolSummary, nntpClusterServerOpenConnections=nntpClusterServerOpenConnections, rniClusterUserAgentsTotalDocumentsServed=rniClusterUserAgentsTotalDocumentsServed, tsQTStats=tsQTStats, tSCacheGCSubsystem=tSCacheGCSubsystem, tSCacheReadFailures=tSCacheReadFailures, httpTransactionMissClientNoCachePct=httpTransactionMissClientNoCachePct, tsICPQueryHits=tsICPQueryHits, tSClusterCacheHTTPHits=tSClusterCacheHTTPHits, ftpServerBytesRead=ftpServerBytesRead, tSICPStats=tSICPStats, inktomiTSCacheEvents=inktomiTSCacheEvents, httpTransactionErrorsEmptyHangupsMsec=httpTransactionErrorsEmptyHangupsMsec, tsLogSpaceUsed=tsLogSpaceUsed, qtClientRequestBytes=qtClientRequestBytes, tsClientConnections=tsClientConnections, rniObjectCount=rniObjectCount, tsICPResponseTime=tsICPResponseTime, tSCacheLookupSuccesses=tSCacheLookupSuccesses, tsServerConnections=tsServerConnections, inktomiExpr=inktomiExpr, clusterHttpUserAgentResponseBytes=clusterHttpUserAgentResponseBytes, tSCacheConnections=tSCacheConnections, tSCacheRemoveSuccesses=tSCacheRemoveSuccesses, processBorn=processBorn, inktomiTSLogEvents=inktomiTSLogEvents, wmtCurrentClientConnections=wmtCurrentClientConnections, nntpOverviewRefreshes=nntpOverviewRefreshes, rniClusterDownstreamTotalBytes=rniClusterDownstreamTotalBytes, tSCacheUpdateFailures=tSCacheUpdateFailures, httpTransactionMissNotCachableMsec=httpTransactionMissNotCachableMsec, systemError=systemError, httpTransactionMissClientNoCacheMsec=httpTransactionMissClientNoCacheMsec, httpUserAgentConnections=httpUserAgentConnections, tsRNIStats=tsRNIStats, tsSOCKSStats=tsSOCKSStats, qtClientCacheBytesRead=qtClientCacheBytesRead, rniClusterCurrentServerConnections=rniClusterCurrentServerConnections, httpTransactionOtherUnclassifiedPct=httpTransactionOtherUnclassifiedPct, tSClusterCacheHits=tSClusterCacheHits, tsWMTStats=tsWMTStats, rniUpstreamRequests=rniUpstreamRequests, nntpFeedBytes=nntpFeedBytes, inktomiModules=inktomiModules, tSCachePercentFree=tSCachePercentFree, tSClusterCacheCurrentXfers=tSClusterCacheCurrentXfers, tSCacheLookupActive=tSCacheLookupActive, qtCurrentLiveStreams=qtCurrentLiveStreams, configurationUpdateFailed=configurationUpdateFailed, peerDied=peerDied, httpXacts=httpXacts, httpOriginServerResponseBytes=httpOriginServerResponseBytes, tSDiskSubsystem=tSDiskSubsystem, tSCacheRemoveActive=tSCacheRemoveActive, dnsTotalLookupSuccesses=dnsTotalLookupSuccesses, clusterHostdbHitRatio=clusterHostdbHitRatio, inktomiTSMIBs=inktomiTSMIBs, wmtClusterServerTotalBytes=wmtClusterServerTotalBytes, httpTransactionMissColdMsec=httpTransactionMissColdMsec, rniBlockMissCount=rniBlockMissCount, httpTransactionHitRevalidatedMsec=httpTransactionHitRevalidatedMsec, nntpPullBytes=nntpPullBytes, tsICPRequestTime=tsICPRequestTime, qtClientResponseBytes=qtClientResponseBytes, managerUIInitFailed=managerUIInitFailed, rniCurrentServerConnections=rniCurrentServerConnections, clusterHttpOriginServerResponseBytes=clusterHttpOriginServerResponseBytes, wmtClusterUserAgentsTotalDocumentsServed=wmtClusterUserAgentsTotalDocumentsServed, hostDBTotalHits=hostDBTotalHits, httpTransactionErrorsOtherMsec=httpTransactionErrorsOtherMsec, qtClusterClientTotalBytes=qtClusterClientTotalBytes, cacheError=cacheError, tsProtocolClusterSummary=tsProtocolClusterSummary, httpTransactionErrorsAbortsPct=httpTransactionErrorsAbortsPct, peerBorn=peerBorn, wmtCurrentServerConnections=wmtCurrentServerConnections, rniByteMissSum=rniByteMissSum, tsClusterServerConnections=tsClusterServerConnections, rniBlockHitCount=rniBlockHitCount, socksOpenConnections=socksOpenConnections, qtServerResponseBytes=qtServerResponseBytes, httpTransactionMissChangedMsec=httpTransactionMissChangedMsec, httpUserAgentHeaderBytes=httpUserAgentHeaderBytes, nntpClientOpenConnections=nntpClientOpenConnections, testAlarm=testAlarm, tSClusterCacheConnections=tSClusterCacheConnections, rniClusterCurrentClientConnections=rniClusterCurrentClientConnections, tsNetworkClusterStats=tsNetworkClusterStats, clusterConnectionsOpen=clusterConnectionsOpen, tsProtocolQT=tsProtocolQT, nntpServerOpenConnections=nntpServerOpenConnections, nntpClusterDownstreamTotalBytes=nntpClusterDownstreamTotalBytes, clusterBytesRead=clusterBytesRead, qtCurrentClientConnections=qtCurrentClientConnections, httpOriginServerConnections=httpOriginServerConnections, tSCacheCurrentXfers=tSCacheCurrentXfers, clusterNetBackups=clusterNetBackups, inktomiTSGeneralEvents=inktomiTSGeneralEvents, httpTransactionHitRevalidatedPct=httpTransactionHitRevalidatedPct, nntpPostBytes=nntpPostBytes, inktomiTrafficServerMibModule=inktomiTrafficServerMibModule, tsLogAccessesSkipped=tsLogAccessesSkipped, tsProtocolNNTP=tsProtocolNNTP, cacheWarning=cacheWarning, ftpDirectoryHits=ftpDirectoryHits, tsIOSubsystem=tsIOSubsystem, tsProtocolWMT=tsProtocolWMT, httpTransactionErrorsConnectFailedMsec=httpTransactionErrorsConnectFailedMsec, httpTransactionErrorsPreAcceptHangupsMsec=httpTransactionErrorsPreAcceptHangupsMsec, nntpDownstreamTotalBytes=nntpDownstreamTotalBytes, httpTransactionErrorsPreAcceptHangupsPct=httpTransactionErrorsPreAcceptHangupsPct, inktomiTSConformance=inktomiTSConformance, rniDownstreamRequestBytes=rniDownstreamRequestBytes, tSClusterHostDBStats=tSClusterHostDBStats, tsOSSubsystem=tsOSSubsystem, httpTransactionMissChangedPct=httpTransactionMissChangedPct, tSCacheLinkActive=tSCacheLinkActive, tsClusterDocumentHitRate=tsClusterDocumentHitRate, clusterHttpCurrentlyParentProxy=clusterHttpCurrentlyParentProxy, dnsLookupTimeMs=dnsLookupTimeMs, tsDNSStats=tsDNSStats, tsClusterDNSLookupRate=tsClusterDNSLookupRate, hostDBTotalLookups=hostDBTotalLookups, tsClusterDNSTotalLookups=tsClusterDNSTotalLookups, tSCacheReadSuccesses=tSCacheReadSuccesses, tSClusterCacheFreeMB=tSClusterCacheFreeMB, httpTransactionErrorsEarlyHangupsPct=httpTransactionErrorsEarlyHangupsPct, tsProtocolFTP=tsProtocolFTP, wmtServerResponseBytes=wmtServerResponseBytes, tSEventSubsystem=tSEventSubsystem, ftpSuccessfulPORT=ftpSuccessfulPORT, rniUpstreamRequestBytes=rniUpstreamRequestBytes, invalidConfig=invalidConfig, ftpClientBytesWritten=ftpClientBytesWritten, httpOriginServerDocumentBytes=httpOriginServerDocumentBytes, qtClusterUserAgentXactsPerSecond=qtClusterUserAgentXactsPerSecond, tSCacheLookupFailures=tSCacheLookupFailures, tsSOCKSClusterStats=tsSOCKSClusterStats, qtCurrentServerConnections=qtCurrentServerConnections, tSCacheWriteFailures=tSCacheWriteFailures, httpUserAgentResponseBytes=httpUserAgentResponseBytes, ftpUnsuccessfulPASV=ftpUnsuccessfulPASV, tsClusterNodeStats=tsClusterNodeStats, wmtClusterUserAgentXactsPerSecond=wmtClusterUserAgentXactsPerSecond, httpTransactionMissNotCachablePct=httpTransactionMissNotCachablePct, tsHostDBStats=tsHostDBStats, qtClusterCurrentClientConnections=qtClusterCurrentClientConnections, tSCacheUpdateActive=tSCacheUpdateActive, tsBandwidthSavingsRatio=tsBandwidthSavingsRatio, httpBandwidthSavingsRatio=httpBandwidthSavingsRatio, socksSuccessfulConnections=socksSuccessfulConnections, tsLogErrorsLogged=tsLogErrorsLogged, clusterHttpHitRatio=clusterHttpHitRatio, tSCacheSubsystem=tSCacheSubsystem, tsClusterClusterStats=tsClusterClusterStats, httpOriginServerTotalTransactions=httpOriginServerTotalTransactions, tSCacheBytesTotalMB=tSCacheBytesTotalMB, ftpClientOpenConnections=ftpClientOpenConnections, httpCurrentlyOpenOrigin=httpCurrentlyOpenOrigin, qtServerRequestBytes=qtServerRequestBytes, tSCacheHits=tSCacheHits, tSCacheMisses=tSCacheMisses, tsClientThroughputOutKBit=tsClientThroughputOutKBit, httpTransactionHitFreshPct=httpTransactionHitFreshPct, httpThroughput=httpThroughput, ftpCwdMisses=ftpCwdMisses, ftpDirectoryMisses=ftpDirectoryMisses, inktomiReg=inktomiReg, nntpOverviewHits=nntpOverviewHits, nntpPosts=nntpPosts, httpOriginServerTransactionsInProgress=httpOriginServerTransactionsInProgress, nntpClusterUpstreamTotalBytes=nntpClusterUpstreamTotalBytes, rniUpstreamResponseBytes=rniUpstreamResponseBytes, tsICPRemoteResponses=tsICPRemoteResponses, tsFTPStats=tsFTPStats, ftpUnsuccessfulPORT=ftpUnsuccessfulPORT, clusterHttpCurrentlyOpenOrigin=clusterHttpCurrentlyOpenOrigin, inktomiGlobalRegModule=inktomiGlobalRegModule, tSHostDBSubsystem=tSHostDBSubsystem, qtClientServerBytesRead=qtClientServerBytesRead, clusterHttpUserAgentTransactions=clusterHttpUserAgentTransactions, nntpUpstreamTotalBytes=nntpUpstreamTotalBytes, clusterHttpXacts=clusterHttpXacts, qtClusterUserAgentsTotalDocumentsServed=qtClusterUserAgentsTotalDocumentsServed, inktomiTSObjs=inktomiTSObjs, tsClusterBandwidthSavingsRatio=tsClusterBandwidthSavingsRatio, ftpFileMisses=ftpFileMisses, tSCacheWriteActive=tSCacheWriteActive, tsWMTClusterStats=tsWMTClusterStats, inktomiTSProtocolEvents=inktomiTSProtocolEvents, nntpClientBytesWritten=nntpClientBytesWritten)
mibBuilder.exportSymbols("INKTOMI-TS-MIB", rniClusterUpstreamTotalBytes=rniClusterUpstreamTotalBytes, tSCacheLinkSuccesses=tSCacheLinkSuccesses, ftpSuccessfulPASV=ftpSuccessfulPASV, tsICPRemoteQuery=tsICPRemoteQuery, tSCacheUpdateSuccesses=tSCacheUpdateSuccesses, tSClusterCacheMisses=tSClusterCacheMisses, httpTransactionErrorsEarlyHangupsMsec=httpTransactionErrorsEarlyHangupsMsec, rniByteHitSum=rniByteHitSum, clusterBandwidthSavingsRatio=clusterBandwidthSavingsRatio, ftpCwdHits=ftpCwdHits, tsClusterDNSStats=tsClusterDNSStats, httpTransactionErrorsPossbileAbortsMsec=httpTransactionErrorsPossbileAbortsMsec, wmtClientResponseBytes=wmtClientResponseBytes, tSClusterSubsystem=tSClusterSubsystem, nntpGroupRefreshes=nntpGroupRefreshes, vendorInktomi=vendorInktomi, tSProtocols=tSProtocols, tSCacheHTTPHits=tSCacheHTTPHits, loggingWarning=loggingWarning, httpTransactionOtherUnclassifiedMsec=httpTransactionOtherUnclassifiedMsec, httpTransactionErrorsConnectFailedPct=httpTransactionErrorsConnectFailedPct, clusterHttpCurrentlyOpenUA=clusterHttpCurrentlyOpenUA, socksUnsuccessfulConnections=socksUnsuccessfulConnections, hostDBAverageTTL=hostDBAverageTTL, tsLogStats=tsLogStats, tsNNTPClusterStats=tsNNTPClusterStats, ftpCurrentlyOpenConnections=ftpCurrentlyOpenConnections, wmtClientRequestBytes=wmtClientRequestBytes, wmtServerRequestBytes=wmtServerRequestBytes, tsICPCacheLookupFail=tsICPCacheLookupFail, dnsTotalLookups=dnsTotalLookups, clusterBytesWritten=clusterBytesWritten, tsICPUDPSendQueries=tsICPUDPSendQueries, tsClusterClientThroughputOutKBit=tsClusterClientThroughputOutKBit, clusterHttpThroughput=clusterHttpThroughput, tSCacheClusterStats=tSCacheClusterStats, pingFailure=pingFailure, inktomiTSEvents=inktomiTSEvents, tsLoggingSubsystem=tsLoggingSubsystem, httpCurrentlyOpenUA=httpCurrentlyOpenUA, tsProtocolSOCKS=tsProtocolSOCKS, inktomiGeneric=inktomiGeneric, qtClusterCurrentServerConnections=qtClusterCurrentServerConnections, ftpFileHits=ftpFileHits, loggingError=loggingError, dnsLookupRate=dnsLookupRate)
