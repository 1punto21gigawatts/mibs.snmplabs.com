#
# PySNMP MIB module NEMO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NEMO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
mip6MnBLEntry, mip6BindingHomeAddressType, mip6MnBLCOA, mip6BindingHomeAddress, mip6BindingCacheEntry, mip6MnBLCOAType = mibBuilder.importSymbols("MOBILEIPV6-MIB", "mip6MnBLEntry", "mip6BindingHomeAddressType", "mip6MnBLCOA", "mip6BindingHomeAddress", "mip6BindingCacheEntry", "mip6MnBLCOAType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter64, Gauge32, Integer32, NotificationType, MibIdentifier, Bits, ModuleIdentity, IpAddress, ObjectIdentity, mib_2, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter64", "Gauge32", "Integer32", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "IpAddress", "ObjectIdentity", "mib-2", "Counter32", "Unsigned32")
DateAndTime, TimeStamp, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TimeStamp", "DisplayString", "TextualConvention", "TruthValue")
nemoMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 184))
nemoMIB.setRevisions(('2009-03-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nemoMIB.setRevisionsDescriptions(('Initial version, published as RFC 5488.',))
if mibBuilder.loadTexts: nemoMIB.setLastUpdated('200903100000Z')
if mibBuilder.loadTexts: nemoMIB.setOrganization('IETF MEXT Working Group')
if mibBuilder.loadTexts: nemoMIB.setContactInfo(' Sri Gundavelli Postal: Cisco 170 W.Tasman Drive, San Jose, CA 95134 USA Tel: +1-408-527-6109 Email: sgundave@cisco.com Glenn Mansfield Keeni Postal: Cyber Solutions Inc. 6-6-3, Minami Yoshinari Aoba-ku, Sendai, Japan 989-3204. Tel: +81-22-303-4012 Fax: +81-22-303-4015 E-mail: glenn@cysols.com Kenichi Nagami Postal: INTEC NetCore Inc. 1-3-3, Shin-suna Koto-ku, Tokyo, 135-0075 Japan Tel: +81-3-5665-5069 E-mail: nagami@inetcore.com Kazuhide Koide Postal: KDDI CORPORATION GARDEN AIR TOWER 3-10-10, Iidabashi Chiyoda-ku, Tokyo, 102-8460 Japan Tel: +81-3-6678-3378 E-mail: ka-koide@kddi.com Support Group E-mail: mext@ietf.org ')
if mibBuilder.loadTexts: nemoMIB.setDescription("Copyright (c) 2009 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. This version of this MIB module is part of RFC 5488; see the RFC itself for full legal notices.")
nemoNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 0))
nemoObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1))
nemoConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 2))
nemoCore = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 1))
nemoMr = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 2))
nemoCn = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 3))
nemoHa = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 4))
nemoSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 1, 1))
nemoBindings = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 1, 2))
nemoConfiguration = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 1, 3))
nemoStats = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 1, 4))
nemoMrSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 2, 1))
nemoMrConf = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 2, 2))
nemoMrRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 2, 3))
nemoMrGlobalStats = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 2, 4))
nemoHaAdvertisement = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 4, 1))
nemoHaStats = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 4, 2))
nemoHaRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 4, 3))
nemoHaGlobalStats = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 1))
class NemoBURequestRejectionCode(TextualConvention, Integer32):
    reference = 'RFC 3963: Section 4.2'
    description = 'The value of the status field in the Binding Acknowledgment message when the Binding Update was rejected for NEMO-specific reasons. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(140, 141, 142, 143))
    namedValues = NamedValues(("mobileRouterOperationNotPermitted", 140), ("invalidPrefix", 141), ("notAuthorizedForPrefix", 142), ("forwardingSetupFailed", 143))

nemoCapabilities = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("mobileRouter", 0), ("homeAgentSupport", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoCapabilities.setReference('RFC 3963: Section 3')
if mibBuilder.loadTexts: nemoCapabilities.setStatus('current')
if mibBuilder.loadTexts: nemoCapabilities.setDescription('This object indicates the NEMO functions that are supported by this managed entity. Multiple NEMO functions may be supported by a single entity. ')
nemoStatus = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nemoStatus.setStatus('current')
if mibBuilder.loadTexts: nemoStatus.setDescription('This object indicates whether the NEMO function is enabled for the managed entity. If it is enabled, the agent discovery and registration functions will be operational. Changing the status from enabled(1) to disabled(2) will terminate the agent discovery and registration functions. On the other hand, changing the status from disabled(2) to enabled(1) will start the agent discovery and registration functions. The value of this object MUST remain unchanged across reboots of the managed entity. ')
nemoCounterDiscontinuityTime = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 1, 4, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: nemoCounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this NEMO entity's counters, viz., counters with OID prefix 'nemoMrConf', 'nemoMrRegnCounters', 'nemoMrGlobalStats', or 'nemoHaGlobalStats', suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object will have a zero value. ")
nemoMrBLTable = MibTable((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 1), )
if mibBuilder.loadTexts: nemoMrBLTable.setReference('RFC 3775: Sections 4.5, 11.1 RFC 3963: Section 5.2')
if mibBuilder.loadTexts: nemoMrBLTable.setStatus('current')
if mibBuilder.loadTexts: nemoMrBLTable.setDescription('This table corresponds to the Binding Update List (BL) that includes NEMO-related information and that is maintained by the mobile router. The table holds a row for every binding that the mobile router has established or is trying to establish. Entries from the table are deleted as the lifetime of the binding expires. ')
nemoMrBLEntry = MibTableRow((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 1, 1), )
mip6MnBLEntry.registerAugmentions(("NEMO-MIB", "nemoMrBLEntry"))
nemoMrBLEntry.setIndexNames(*mip6MnBLEntry.getIndexNames())
if mibBuilder.loadTexts: nemoMrBLEntry.setStatus('current')
if mibBuilder.loadTexts: nemoMrBLEntry.setDescription('An entry pertaining to NEMO-related information contained in a Binding Update sent by a NEMO-enabled mobile router to its home agent. ')
nemoMrBLMode = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("implicitMode", 1), ("explicitMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBLMode.setReference('RFC 3963: Section 5.2')
if mibBuilder.loadTexts: nemoMrBLMode.setStatus('current')
if mibBuilder.loadTexts: nemoMrBLMode.setDescription('implicitMode(1): the Mobile Network Prefix Option is not included in the Binding Update by the mobile router. explicitMode(2): the mobile router included one or more Mobile Network Prefix Options in the Binding Update. ')
nemoMrBLMrFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBLMrFlag.setReference('RFC 3963: Sections 4.1, 5.1')
if mibBuilder.loadTexts: nemoMrBLMrFlag.setStatus('current')
if mibBuilder.loadTexts: nemoMrBLMrFlag.setDescription('true(1): the mobile router sent the Binding Update with Mobile Router Flag set. false(2): the mobile router did not send the Binding Update with Mobile Router Flag set. This implies that the mobile router is acting as a mobile node. ')
nemoMrBLHomeAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 1, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBLHomeAddressPrefixLength.setReference('RFC 3963: Section 3')
if mibBuilder.loadTexts: nemoMrBLHomeAddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: nemoMrBLHomeAddressPrefixLength.setDescription("The prefix length of the mobile router's home network. ")
nemoMrBLCareofAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 1, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBLCareofAddressPrefixLength.setReference('RFC 3963: Section 3')
if mibBuilder.loadTexts: nemoMrBLCareofAddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: nemoMrBLCareofAddressPrefixLength.setDescription('The prefix length of the care-of address of the mobile router. ')
nemoMrBLActiveEgressIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBLActiveEgressIfIndex.setReference('RFC 3963: Section 5.5')
if mibBuilder.loadTexts: nemoMrBLActiveEgressIfIndex.setStatus('current')
if mibBuilder.loadTexts: nemoMrBLActiveEgressIfIndex.setDescription('The interface index of the currently active egress interface. ')
nemoMrBLEstablishedHomeTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBLEstablishedHomeTunnelIfIndex.setReference('RFC 3963: Section 5.5')
if mibBuilder.loadTexts: nemoMrBLEstablishedHomeTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: nemoMrBLEstablishedHomeTunnelIfIndex.setDescription('The interface index of the tunnel established between the mobile router and the home agent for NEMO traffic. ')
nemoMrRegnCounters = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 2))
nemoMrMobilityMessagesSent = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrMobilityMessagesSent.setReference('RFC 3775: Sections 4.2, 6.1 RFC 3963: Section 4.1')
if mibBuilder.loadTexts: nemoMrMobilityMessagesSent.setStatus('current')
if mibBuilder.loadTexts: nemoMrMobilityMessagesSent.setDescription('The total number of mobility messages, i.e., IPv6 datagrams with Mobility Header, sent by the mobile node. This will include Binding Updates sent by a mobile router with the Mobile Router Flag set. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrMobilityMessagesRecd = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrMobilityMessagesRecd.setReference('RFC 3775: Sections 4.2, 6.1 RFC 3963: Sections 4.1, 4.2')
if mibBuilder.loadTexts: nemoMrMobilityMessagesRecd.setStatus('current')
if mibBuilder.loadTexts: nemoMrMobilityMessagesRecd.setDescription('The total number of mobility messages, i.e., IPv6 datagrams with Mobility Header, received by the mobile node. This will include Binding Acknowledgements with Mobile Router Flag set that are sent to a mobile router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrPrefixRegMode = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("implicitMode", 1), ("explicitMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nemoMrPrefixRegMode.setReference('RFC 3963: Section 5.2')
if mibBuilder.loadTexts: nemoMrPrefixRegMode.setStatus('current')
if mibBuilder.loadTexts: nemoMrPrefixRegMode.setDescription('This object indicates the mode in which the mobile network prefixes will be registered with the home agent. implicitMode(1): the Mobile Network Prefix Option will not be included in the Binding Update by the mobile router. explicitMode(2): the mobile router will include one or more Mobile Network Prefix Options in the Binding Update. The value of this object MUST remain unchanged across reboots of the managed entity. ')
nemoHaMobileNetworkPrefixTable = MibTable((1, 3, 6, 1, 2, 1, 184, 1, 4, 3, 1), )
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixTable.setReference('RFC 3963: Section 6.1.2')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixTable.setStatus('current')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixTable.setDescription('This table contains the mobile network prefixes that the home agent maintains for the mobile router. The mobile network prefixes in this table are registered by Binding Updates or are manually pre-configured. ')
nemoHaMobileNetworkPrefixEntry = MibTableRow((1, 3, 6, 1, 2, 1, 184, 1, 4, 3, 1, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"), (0, "NEMO-MIB", "nemoHaMobileNetworkPrefixSeqNo"))
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixEntry.setDescription('An entry for a mobile network prefix. The instances of the columnar objects in this entry pertain to an interface for a particular value of mip6BindingHomeAddressType, mip6BindingHomeAddress, and nemoHaMobileNetworkPrefixSeqNo. The nemoHaMobileNetworkPrefixSeqNo object is used to distinguish between multiple instances of the mobile network prefix in the same Binding Update for the same set of mip6BindingHomeAddressType and mip6BindingHomeAddress. There is no upper-bound on the maximum number of mobile network prefixes in a Binding Update but, for practical purposes, the upper bound of the value nemoHaMobileNetworkPrefixSeqNo is set to 1024. Implementers need to be aware that if the total number of octets in mip6BindingHomeAddress exceeds 112, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
nemoHaMobileNetworkPrefixSeqNo = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixSeqNo.setReference('RFC 3963: Sections 2, 6.1, 6.2')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixSeqNo.setStatus('current')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixSeqNo.setDescription('A Binding Update may have multiple mobile network prefixes. This object, along with mip6BindingHomeAddressType and mip6BindingHomeAddress, uniquely identifies a row containing a single mobile network prefix for a mobile router in this table. ')
nemoHaMobileNetworkPrefixType = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 3, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixType.setStatus('current')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixType.setDescription('The address type for the mobile network prefix that follows. ')
nemoHaMobileNetworkPrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 3, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefix.setReference('RFC 3963: Sections 2, 6.1, 6.2')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefix.setStatus('current')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefix.setDescription('A mobile network prefix related to the corresponding Binding Update. The type of the address represented by this object is specified by the corresponding nemoHaMobileNetworkPrefixType object. ')
nemoHaMobileNetworkPrefixLength = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixLength.setReference('RFC 3963: Sections 4.3, 6.1, 6.2')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixLength.setStatus('current')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixLength.setDescription('The length of the prefix specified by the corresponding nemoHaMobileNetworkPrefix object. ')
nemoHaMobileNetworkPrefixSource = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("bindingUpdate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixSource.setReference('RFC 3963: Sections 4.3, 6.1, 6.2')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixSource.setStatus('current')
if mibBuilder.loadTexts: nemoHaMobileNetworkPrefixSource.setDescription('The information source of the mobile network prefix configured with the Binding Update. configured(1): indicates that the mobile network prefix has been manually pre-configured. bindingUpdate(2): indicates that the information is introduced to the home agent by the Mobile Network Prefix Option in the Binding Updates received by the home agent. ')
nemoBindingCacheTable = MibTable((1, 3, 6, 1, 2, 1, 184, 1, 1, 2, 1), )
if mibBuilder.loadTexts: nemoBindingCacheTable.setReference('RFC 3775: Sections 4.5, 9.1, 10.1, RFC 3963: Section 6.1')
if mibBuilder.loadTexts: nemoBindingCacheTable.setStatus('current')
if mibBuilder.loadTexts: nemoBindingCacheTable.setDescription('This table models the Binding Cache that includes NEMO-related information and that is maintained by the home agent. Entries in this table are not required to survive a reboot of the home agent. ')
nemoBindingCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 184, 1, 1, 2, 1, 1), )
mip6BindingCacheEntry.registerAugmentions(("NEMO-MIB", "nemoBindingCacheEntry"))
nemoBindingCacheEntry.setIndexNames(*mip6BindingCacheEntry.getIndexNames())
if mibBuilder.loadTexts: nemoBindingCacheEntry.setStatus('current')
if mibBuilder.loadTexts: nemoBindingCacheEntry.setDescription('An entry containing additional information related to NEMO-enabled entries in the Binding Cache table of the home agent. ')
nemoBindingMrFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoBindingMrFlag.setReference('RFC 3963: Sections 6.1.1, 6.2')
if mibBuilder.loadTexts: nemoBindingMrFlag.setStatus('current')
if mibBuilder.loadTexts: nemoBindingMrFlag.setDescription('true(1): indicates that the Binding Cache entry is from an entity acting as a mobile router. false(2): implies that the Binding Cache entry is from an entity acting as a mobile node. ')
nemoBindingMrMode = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("implicitMode", 1), ("explicitMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoBindingMrMode.setReference('RFC 3963: Sections 5.2, 6.1.1, 6.2')
if mibBuilder.loadTexts: nemoBindingMrMode.setStatus('current')
if mibBuilder.loadTexts: nemoBindingMrMode.setDescription('implicitMode(1): the Mobile Network Prefix Option is not included in the Binding Update by the mobile router. explicitMode(2): the mobile router included one or more Mobile Network Prefix Options in the Binding Update. ')
nemoMrEgressIfTable = MibTable((1, 3, 6, 1, 2, 1, 184, 1, 2, 1, 1), )
if mibBuilder.loadTexts: nemoMrEgressIfTable.setStatus('current')
if mibBuilder.loadTexts: nemoMrEgressIfTable.setDescription('A table representing the egress interfaces that will be used by the mobile router for roaming to foreign networks. Each entry in this table represents a configured egress interface. ')
nemoMrEgressIfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 184, 1, 2, 1, 1, 1), ).setIndexNames((0, "NEMO-MIB", "nemoMrEgressIfIndex"))
if mibBuilder.loadTexts: nemoMrEgressIfEntry.setStatus('current')
if mibBuilder.loadTexts: nemoMrEgressIfEntry.setDescription('An entry in the egress interface table. It represents a single egress interface entry. ')
nemoMrEgressIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nemoMrEgressIfIndex.setStatus('current')
if mibBuilder.loadTexts: nemoMrEgressIfIndex.setDescription('The index of the interface on the mobile router. ')
nemoMrEgressIfPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrEgressIfPriority.setStatus('current')
if mibBuilder.loadTexts: nemoMrEgressIfPriority.setDescription('The priority configured to the egress interface. This value will be configured to a value between 0 and 255. ')
nemoMrEgressIfDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrEgressIfDescription.setStatus('current')
if mibBuilder.loadTexts: nemoMrEgressIfDescription.setDescription('A human-readable textual description of the egress interface on the mobile router. ')
nemoMrEgressIfRoamHoldDownTime = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 2, 1, 1, 1, 4), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrEgressIfRoamHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: nemoMrEgressIfRoamHoldDownTime.setDescription('This object indicates the time for which the egress interface will be held down during roaming to avoid interface flapping. ')
nemoMrDiscoveryRequests = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrDiscoveryRequests.setReference('RFC 3775: Sections 10.5, 11.4.1 RFC 3963: Section 7.1')
if mibBuilder.loadTexts: nemoMrDiscoveryRequests.setStatus('current')
if mibBuilder.loadTexts: nemoMrDiscoveryRequests.setDescription('Total number of Modified Dynamic Home Agent Address Discovery Requests, with Mobile Router Support Flag set, sent by the mobile router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrDiscoveryReplies = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrDiscoveryReplies.setReference('RFC 3775: Sections 10.5, 11.4.1 RFC 3963: Section 7.2')
if mibBuilder.loadTexts: nemoMrDiscoveryReplies.setStatus('current')
if mibBuilder.loadTexts: nemoMrDiscoveryReplies.setDescription('Total number of Modified Dynamic Home Agent Address Discovery Replies, with Mobile Router Support Flag set, received by the mobile router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrDiscoveryRepliesRouterFlagZero = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrDiscoveryRepliesRouterFlagZero.setReference('RFC 3775: Sections 10.5, 11.4.1 RFC 3963: Section 7.2')
if mibBuilder.loadTexts: nemoMrDiscoveryRepliesRouterFlagZero.setStatus('current')
if mibBuilder.loadTexts: nemoMrDiscoveryRepliesRouterFlagZero.setDescription('Total number of Modified Dynamic Home Agent Address Discovery Replies, with Mobile Router Support Flag set to 0 although the flag in the corresponding request is set to 1. It implies that there is no home agent that supports mobile router functionality in the home network. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrMovedHome = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrMovedHome.setReference('RFC 3963: Section 3')
if mibBuilder.loadTexts: nemoMrMovedHome.setStatus('current')
if mibBuilder.loadTexts: nemoMrMovedHome.setDescription('Number of times the mobile router has detected movement from a foreign network to its home network. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrMovedOutofHome = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrMovedOutofHome.setReference('RFC 3963: Section 3')
if mibBuilder.loadTexts: nemoMrMovedOutofHome.setStatus('current')
if mibBuilder.loadTexts: nemoMrMovedOutofHome.setDescription('Number of times the mobile router has detected movement to a foreign network from the home network, has acquired a care-of address, and has initiated the care-of address registration process. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrMovedFNtoFN = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrMovedFNtoFN.setReference('RFC 3963: Section 3')
if mibBuilder.loadTexts: nemoMrMovedFNtoFN.setStatus('current')
if mibBuilder.loadTexts: nemoMrMovedFNtoFN.setDescription("Number of times the mobile router has detected movement to/from a foreign network from/to another foreign network. Note that 'movement' implies movement in layer 3, i.e., the mobile router's care-of address changed, and it initiated the care-of address registration process. If there are multiple egress interfaces, this counter counts the total number of movements. The movement as a mobile node of the mobile entity is not counted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoMrBetterIfDetected = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBetterIfDetected.setStatus('current')
if mibBuilder.loadTexts: nemoMrBetterIfDetected.setDescription('Number of times the NEMO entity has found an egress interface with better priority. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrBindingAcksWONemoSupport = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBindingAcksWONemoSupport.setReference('RFC 3963: Section 5.3')
if mibBuilder.loadTexts: nemoMrBindingAcksWONemoSupport.setStatus('current')
if mibBuilder.loadTexts: nemoMrBindingAcksWONemoSupport.setDescription('The total number of Binding Acknowledgements without NEMO support received by the mobile router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoMrBindingAcksRegTypeChangeDisallowed = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBindingAcksRegTypeChangeDisallowed.setReference('RFC 3775: Section 9.5.1 RFC 3963: Section 6.2')
if mibBuilder.loadTexts: nemoMrBindingAcksRegTypeChangeDisallowed.setStatus('current')
if mibBuilder.loadTexts: nemoMrBindingAcksRegTypeChangeDisallowed.setDescription("The total number of Binding Acknowledgements received by the mobile router with status code indicating 'Registration type change disallowed' (Code 139). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoMrBindingAcksOperationNotPermitted = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBindingAcksOperationNotPermitted.setReference('RFC 3963: Section 6.6')
if mibBuilder.loadTexts: nemoMrBindingAcksOperationNotPermitted.setStatus('current')
if mibBuilder.loadTexts: nemoMrBindingAcksOperationNotPermitted.setDescription("The total number of Binding Acknowledgements received by the mobile router with status code indicating 'Mobile Router Operation not permitted' (Code 140). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoMrBindingAcksInvalidPrefix = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBindingAcksInvalidPrefix.setReference('RFC 3963: Section 6.6')
if mibBuilder.loadTexts: nemoMrBindingAcksInvalidPrefix.setStatus('current')
if mibBuilder.loadTexts: nemoMrBindingAcksInvalidPrefix.setDescription("The total number of Binding Acknowledgements received by the mobile router with status code indicating 'Invalid Prefix' (Code 141). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoMrBindingAcksNotAuthorizedForPrefix = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBindingAcksNotAuthorizedForPrefix.setReference('RFC 3963 : Section 6.6')
if mibBuilder.loadTexts: nemoMrBindingAcksNotAuthorizedForPrefix.setStatus('current')
if mibBuilder.loadTexts: nemoMrBindingAcksNotAuthorizedForPrefix.setDescription("The total number of Binding Acknowledgements received by the mobile router with status code indicating 'Not Authorized for Prefix' (Code 142). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoMrBindingAcksForwardingSetupFailed = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBindingAcksForwardingSetupFailed.setReference('RFC 3963: Section 6.6')
if mibBuilder.loadTexts: nemoMrBindingAcksForwardingSetupFailed.setStatus('current')
if mibBuilder.loadTexts: nemoMrBindingAcksForwardingSetupFailed.setDescription("The total number of Binding Acknowledgements received by the mobile router with status code indicating 'Forwarding Setup failed' (Code 143). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoMrBindingAcksOtherError = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 2, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoMrBindingAcksOtherError.setReference('RFC 3963 : Section 6.6')
if mibBuilder.loadTexts: nemoMrBindingAcksOtherError.setStatus('current')
if mibBuilder.loadTexts: nemoMrBindingAcksOtherError.setDescription('The total number of Binding Acknowledgements received by the mobile router (Mobile Router Flag is set) with status code other than: successfully processed --(Code 0 ) mobileRouterOperationNotPermitted (140) --(Code 140) invalidPrefix (141) --(Code 141) notAuthorizedForPrefix (142) --(Code 142) forwardingSetupFailed (143) --(Code 143) Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoHaBUAcksWONemoSupport = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBUAcksWONemoSupport.setReference('RFC 3963: Section 5.3')
if mibBuilder.loadTexts: nemoHaBUAcksWONemoSupport.setStatus('current')
if mibBuilder.loadTexts: nemoHaBUAcksWONemoSupport.setDescription('The total number of Binding Acknowledgements without NEMO support sent by the home agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoHaBUAcksRegTypeChangeDisallowed = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBUAcksRegTypeChangeDisallowed.setReference('RFC 3775: Section 9.5.1 RFC 3963: Section 6.2')
if mibBuilder.loadTexts: nemoHaBUAcksRegTypeChangeDisallowed.setStatus('current')
if mibBuilder.loadTexts: nemoHaBUAcksRegTypeChangeDisallowed.setDescription("The total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgement indicating 'Registration type change disallowed' (Code 139). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoHaBUAcksOperationNotPermitted = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBUAcksOperationNotPermitted.setReference('RFC 3963: Section 6.6')
if mibBuilder.loadTexts: nemoHaBUAcksOperationNotPermitted.setStatus('current')
if mibBuilder.loadTexts: nemoHaBUAcksOperationNotPermitted.setDescription("The total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgement indicating 'Mobile Router Operation not permitted' (Code 140). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoHaBUAcksInvalidPrefix = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBUAcksInvalidPrefix.setReference('RFC 3963: Section 6.6')
if mibBuilder.loadTexts: nemoHaBUAcksInvalidPrefix.setStatus('current')
if mibBuilder.loadTexts: nemoHaBUAcksInvalidPrefix.setDescription("The total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgement indicating 'Invalid Prefix' (Code 141). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoHaBUAcksNotAuthorizedForPrefix = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBUAcksNotAuthorizedForPrefix.setReference('RFC 3963: Section 6.6')
if mibBuilder.loadTexts: nemoHaBUAcksNotAuthorizedForPrefix.setStatus('current')
if mibBuilder.loadTexts: nemoHaBUAcksNotAuthorizedForPrefix.setDescription("The total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgement indicating 'Not Authorized for Prefix' (Code 142). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoHaBUAcksForwardingSetupFailed = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBUAcksForwardingSetupFailed.setReference('RFC 3963: Section 6.6')
if mibBuilder.loadTexts: nemoHaBUAcksForwardingSetupFailed.setStatus('current')
if mibBuilder.loadTexts: nemoHaBUAcksForwardingSetupFailed.setDescription("The total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgement indicating 'Forwarding Setup failed' (Code 143). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ")
nemoHaBUAcksOtherError = MibScalar((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBUAcksOtherError.setReference('RFC 3963: Section 6.6')
if mibBuilder.loadTexts: nemoHaBUAcksOtherError.setStatus('current')
if mibBuilder.loadTexts: nemoHaBUAcksOtherError.setDescription('The total number of Binding Update requests from mobile routers (Mobile Router Flag is set) rejected by the home agent with status code other than: mobileRouterOperationNotPermitted (140) invalidPrefix (141) notAuthorizedForPrefix (142) forwardingSetupFailed (143) Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoCounterDiscontinuityTime. ')
nemoHaCounterTable = MibTable((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2), )
if mibBuilder.loadTexts: nemoHaCounterTable.setStatus('current')
if mibBuilder.loadTexts: nemoHaCounterTable.setDescription('A table containing registration statistics for all mobile routers registered with the home agent. ')
nemoHaCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: nemoHaCounterEntry.setStatus('current')
if mibBuilder.loadTexts: nemoHaCounterEntry.setDescription('Home agent registration statistics for a mobile router. Implementers need to be aware that if the total number of octets in mip6BindingHomeAddress exceeds 113, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
nemoHaBURequestsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBURequestsAccepted.setStatus('current')
if mibBuilder.loadTexts: nemoHaBURequestsAccepted.setDescription('Total number of Binding Update requests from the mobile router accepted by the home agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoHaCtrDiscontinuityTime. ')
nemoHaBURequestsDenied = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBURequestsDenied.setStatus('current')
if mibBuilder.loadTexts: nemoHaBURequestsDenied.setDescription('Total number of Binding Update requests from the mobile router rejected by the home agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of nemoHaCtrDiscontinuityTime. ')
nemoHaBCEntryCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2, 1, 3), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBCEntryCreationTime.setStatus('current')
if mibBuilder.loadTexts: nemoHaBCEntryCreationTime.setDescription('The time when the current Binding Cache entry was created for the mobile router. An implementation MUST return all 11 bytes of the DateAndTime textual-convention so that a manager may retrieve the offset from GMT time. ')
nemoHaBUAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2, 1, 4), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBUAcceptedTime.setStatus('current')
if mibBuilder.loadTexts: nemoHaBUAcceptedTime.setDescription('The time at which the last Binding Update was accepted by the home agent for this mobile router. An implementation MUST return all 11 bytes of the DateAndTime textual-convention so that a manager may retrieve the offset from GMT time. ')
nemoHaBURejectionTime = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2, 1, 5), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaBURejectionTime.setStatus('current')
if mibBuilder.loadTexts: nemoHaBURejectionTime.setDescription('The time at which the last Binding Update was rejected by the home agent for this mobile router. If there have been no rejections, then this object will be inaccessible. An implementation MUST return all 11 bytes of the DateAndTime textual-convention so that a manager may retrieve the offset from GMT time. ')
nemoHaRecentBURejectionCode = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2, 1, 6), NemoBURequestRejectionCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaRecentBURejectionCode.setStatus('current')
if mibBuilder.loadTexts: nemoHaRecentBURejectionCode.setDescription('The Status code (>= 128) in the latest Binding Acknowledgment indicating a rejection, sent to this mobile router. If a Binding Update request is rejected and a Binding Acknowledgment is not sent to this mobile router, then this will be the value of the Status code that corresponds to the reason of the rejection. If there have been no Binding Update request rejections, then this object will be inaccessible. ')
nemoHaCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 184, 1, 4, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemoHaCtrDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: nemoHaCtrDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of the counters in this row, viz., instances of 'nemoHaBURequestsAccepted' and 'nemoHaBURequestsDenied', suffered a discontinuity. If no such discontinuity has occurred since the last re-initialization of the local management subsystem, then this object will have a zero value. ")
nemoHomeTunnelEstablished = NotificationType((1, 3, 6, 1, 2, 1, 184, 0, 1)).setObjects(("NEMO-MIB", "nemoMrBLActiveEgressIfIndex"), ("NEMO-MIB", "nemoMrBLEstablishedHomeTunnelIfIndex"), ("MOBILEIPV6-MIB", "mip6MnBLCOAType"), ("MOBILEIPV6-MIB", "mip6MnBLCOA"), ("NEMO-MIB", "nemoMrBLHomeAddressPrefixLength"), ("NEMO-MIB", "nemoMrBLCareofAddressPrefixLength"))
if mibBuilder.loadTexts: nemoHomeTunnelEstablished.setStatus('current')
if mibBuilder.loadTexts: nemoHomeTunnelEstablished.setDescription('This notification is sent by the mobile router every time the tunnel is established between the home agent and the mobile router. ')
if mibBuilder.loadTexts: nemoHomeTunnelEstablished.setReference('RFC 3963: Section 5.5')
nemoHomeTunnelReleased = NotificationType((1, 3, 6, 1, 2, 1, 184, 0, 2)).setObjects(("NEMO-MIB", "nemoMrBLActiveEgressIfIndex"), ("NEMO-MIB", "nemoMrBLEstablishedHomeTunnelIfIndex"), ("MOBILEIPV6-MIB", "mip6MnBLCOAType"), ("MOBILEIPV6-MIB", "mip6MnBLCOA"), ("NEMO-MIB", "nemoMrBLHomeAddressPrefixLength"), ("NEMO-MIB", "nemoMrBLCareofAddressPrefixLength"))
if mibBuilder.loadTexts: nemoHomeTunnelReleased.setStatus('current')
if mibBuilder.loadTexts: nemoHomeTunnelReleased.setDescription('This notification is sent by the mobile router every time the tunnel is deleted between the home agent and the mobile router. ')
if mibBuilder.loadTexts: nemoHomeTunnelReleased.setReference('RFC 3963: Section 5.5')
nemoGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 2, 1))
nemoCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 184, 2, 2))
nemoSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 1)).setObjects(("NEMO-MIB", "nemoCapabilities"), ("NEMO-MIB", "nemoStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoSystemGroup = nemoSystemGroup.setStatus('current')
if mibBuilder.loadTexts: nemoSystemGroup.setDescription('A collection of objects for basic NEMO monitoring. ')
nemoBindingCacheGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 2)).setObjects(("NEMO-MIB", "nemoBindingMrFlag"), ("NEMO-MIB", "nemoBindingMrMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoBindingCacheGroup = nemoBindingCacheGroup.setStatus('current')
if mibBuilder.loadTexts: nemoBindingCacheGroup.setDescription('A collection of objects for monitoring the NEMO extensions of the Binding Cache. ')
nemoStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 3)).setObjects(("NEMO-MIB", "nemoCounterDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoStatsGroup = nemoStatsGroup.setStatus('current')
if mibBuilder.loadTexts: nemoStatsGroup.setDescription('A collection of objects for monitoring NEMO statistics. ')
nemoMrConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 4)).setObjects(("NEMO-MIB", "nemoMrEgressIfPriority"), ("NEMO-MIB", "nemoMrEgressIfDescription"), ("NEMO-MIB", "nemoMrEgressIfRoamHoldDownTime"), ("NEMO-MIB", "nemoMrDiscoveryRequests"), ("NEMO-MIB", "nemoMrDiscoveryReplies"), ("NEMO-MIB", "nemoMrDiscoveryRepliesRouterFlagZero"), ("NEMO-MIB", "nemoMrMovedHome"), ("NEMO-MIB", "nemoMrMovedOutofHome"), ("NEMO-MIB", "nemoMrMovedFNtoFN"), ("NEMO-MIB", "nemoMrBetterIfDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoMrConfGroup = nemoMrConfGroup.setStatus('current')
if mibBuilder.loadTexts: nemoMrConfGroup.setDescription('A collection of objects for monitoring the configuration-related information on the mobile router. ')
nemoMrRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 5)).setObjects(("NEMO-MIB", "nemoMrBLMode"), ("NEMO-MIB", "nemoMrBLMrFlag"), ("NEMO-MIB", "nemoMrBLHomeAddressPrefixLength"), ("NEMO-MIB", "nemoMrBLCareofAddressPrefixLength"), ("NEMO-MIB", "nemoMrBLActiveEgressIfIndex"), ("NEMO-MIB", "nemoMrBLEstablishedHomeTunnelIfIndex"), ("NEMO-MIB", "nemoMrMobilityMessagesSent"), ("NEMO-MIB", "nemoMrMobilityMessagesRecd"), ("NEMO-MIB", "nemoMrPrefixRegMode"), ("NEMO-MIB", "nemoMrBindingAcksWONemoSupport"), ("NEMO-MIB", "nemoMrBindingAcksRegTypeChangeDisallowed"), ("NEMO-MIB", "nemoMrBindingAcksOperationNotPermitted"), ("NEMO-MIB", "nemoMrBindingAcksInvalidPrefix"), ("NEMO-MIB", "nemoMrBindingAcksNotAuthorizedForPrefix"), ("NEMO-MIB", "nemoMrBindingAcksForwardingSetupFailed"), ("NEMO-MIB", "nemoMrBindingAcksOtherError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoMrRegistrationGroup = nemoMrRegistrationGroup.setStatus('current')
if mibBuilder.loadTexts: nemoMrRegistrationGroup.setDescription('A collection of objects for monitoring the registration details and statistics for the mobile router. ')
nemoHaSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 6)).setObjects(("NEMO-MIB", "nemoHaMobileNetworkPrefixType"), ("NEMO-MIB", "nemoHaMobileNetworkPrefix"), ("NEMO-MIB", "nemoHaMobileNetworkPrefixLength"), ("NEMO-MIB", "nemoHaMobileNetworkPrefixSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoHaSystemGroup = nemoHaSystemGroup.setStatus('current')
if mibBuilder.loadTexts: nemoHaSystemGroup.setDescription('A collection of objects for basic NEMO configuration monitoring at the home agent. ')
nemoHaStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 7)).setObjects(("NEMO-MIB", "nemoHaBURequestsAccepted"), ("NEMO-MIB", "nemoHaBURequestsDenied"), ("NEMO-MIB", "nemoHaBCEntryCreationTime"), ("NEMO-MIB", "nemoHaBUAcceptedTime"), ("NEMO-MIB", "nemoHaBURejectionTime"), ("NEMO-MIB", "nemoHaRecentBURejectionCode"), ("NEMO-MIB", "nemoHaCtrDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoHaStatsGroup = nemoHaStatsGroup.setStatus('current')
if mibBuilder.loadTexts: nemoHaStatsGroup.setDescription('A collection of objects for monitoring NEMO registration-related statistics pertaining to the mobile routers registered with the home agent. ')
nemoHaGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 8)).setObjects(("NEMO-MIB", "nemoHaBUAcksWONemoSupport"), ("NEMO-MIB", "nemoHaBUAcksRegTypeChangeDisallowed"), ("NEMO-MIB", "nemoHaBUAcksOperationNotPermitted"), ("NEMO-MIB", "nemoHaBUAcksInvalidPrefix"), ("NEMO-MIB", "nemoHaBUAcksNotAuthorizedForPrefix"), ("NEMO-MIB", "nemoHaBUAcksForwardingSetupFailed"), ("NEMO-MIB", "nemoHaBUAcksOtherError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoHaGlobalStatsGroup = nemoHaGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: nemoHaGlobalStatsGroup.setDescription('A collection of objects for monitoring basic NEMO advertisement and registration statistics on a home agent. ')
nemoNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 184, 2, 1, 9)).setObjects(("NEMO-MIB", "nemoHomeTunnelEstablished"), ("NEMO-MIB", "nemoHomeTunnelReleased"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoNotificationGroup = nemoNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: nemoNotificationGroup.setDescription('A collection of notifications from a home agent or correspondent node to the manager about the tunnel status of the mobile router. ')
nemoCoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 1)).setObjects(("NEMO-MIB", "nemoSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoCoreCompliance = nemoCoreCompliance.setStatus('current')
if mibBuilder.loadTexts: nemoCoreCompliance.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB. ')
nemoCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 2)).setObjects(("NEMO-MIB", "nemoSystemGroup"), ("NEMO-MIB", "nemoBindingCacheGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoCompliance2 = nemoCompliance2.setStatus('current')
if mibBuilder.loadTexts: nemoCompliance2.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB and support monitoring of the Binding Cache. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT-clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6BindingHomeAddress -- object. -- ')
nemoCoreReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 3)).setObjects(("NEMO-MIB", "nemoSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoCoreReadOnlyCompliance = nemoCoreReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: nemoCoreReadOnlyCompliance.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB without support for read-write (i.e., in read-only mode). ')
nemoReadOnlyCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 4)).setObjects(("NEMO-MIB", "nemoSystemGroup"), ("NEMO-MIB", "nemoBindingCacheGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoReadOnlyCompliance2 = nemoReadOnlyCompliance2.setStatus('current')
if mibBuilder.loadTexts: nemoReadOnlyCompliance2.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB without support for read-write (i.e., in read-only mode) and with support for monitoring of the Binding Cache. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT-clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6BindingHomeAddress -- object. -- ')
nemoMrCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 5)).setObjects(("NEMO-MIB", "nemoStatsGroup"), ("NEMO-MIB", "nemoMrConfGroup"), ("NEMO-MIB", "nemoMrRegistrationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoMrCompliance = nemoMrCompliance.setStatus('current')
if mibBuilder.loadTexts: nemoMrCompliance.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB for monitoring configuration- related information, registration details, and statistics on a mobile router. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT-clause form in this description: -- OBJECT mip6MnHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6MnHomeAddress -- object. -- -- OBJECT mip6MnHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6MnHomeAddress -- object. -- -- OBJECT mip6MnBLNodeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6MnBLNodeAddress -- object. -- -- OBJECT mip6MnBLNodeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6MnBLNodeAddress -- object. ')
nemoMrReadOnlyCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 6)).setObjects(("NEMO-MIB", "nemoStatsGroup"), ("NEMO-MIB", "nemoMrConfGroup"), ("NEMO-MIB", "nemoMrRegistrationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoMrReadOnlyCompliance2 = nemoMrReadOnlyCompliance2.setStatus('current')
if mibBuilder.loadTexts: nemoMrReadOnlyCompliance2.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB without support for read- write (i.e., in read-only mode) and with support for monitoring of configuration-related information, registration details, and statistics on a mobile router. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT-clause form in this description: -- OBJECT mip6MnHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6MnHomeAddress -- object. -- -- OBJECT mip6MnHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6MnHomeAddress -- object. -- -- OBJECT mip6MnBLNodeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6MnBLNodeAddress -- object. -- -- OBJECT mip6MnBLNodeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6MnBLNodeAddress -- object. ')
nemoHaCoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 7)).setObjects(("NEMO-MIB", "nemoHaSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoHaCoreCompliance = nemoHaCoreCompliance.setStatus('current')
if mibBuilder.loadTexts: nemoHaCoreCompliance.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB for configuration monitoring at the home agent. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT-clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6BindingHomeAddress -- object. -- ')
nemoHaCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 8)).setObjects(("NEMO-MIB", "nemoHaSystemGroup"), ("NEMO-MIB", "nemoHaStatsGroup"), ("NEMO-MIB", "nemoHaGlobalStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoHaCompliance2 = nemoHaCompliance2.setStatus('current')
if mibBuilder.loadTexts: nemoHaCompliance2.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB with support for monitoring of the home agent functionality, specifically the home-agent-registration-related statistics. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT-clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- IPv6 addresses for the mip6BindingHomeAddress -- object. -- ')
nemoNotificationCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 184, 2, 2, 9)).setObjects(("NEMO-MIB", "nemoNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nemoNotificationCompliance = nemoNotificationCompliance.setStatus('current')
if mibBuilder.loadTexts: nemoNotificationCompliance.setDescription('The compliance statement for SNMP entities that implement the NEMO-MIB and support Notification from the home agent. ')
mibBuilder.exportSymbols("NEMO-MIB", nemoHaSystemGroup=nemoHaSystemGroup, nemoHaGlobalStats=nemoHaGlobalStats, nemoMrEgressIfDescription=nemoMrEgressIfDescription, nemoHaBUAcksInvalidPrefix=nemoHaBUAcksInvalidPrefix, nemoMrDiscoveryRepliesRouterFlagZero=nemoMrDiscoveryRepliesRouterFlagZero, nemoHaBUAcksOperationNotPermitted=nemoHaBUAcksOperationNotPermitted, nemoMrDiscoveryReplies=nemoMrDiscoveryReplies, nemoHaMobileNetworkPrefixType=nemoHaMobileNetworkPrefixType, nemoConfiguration=nemoConfiguration, nemoMrEgressIfEntry=nemoMrEgressIfEntry, nemoHaStatsGroup=nemoHaStatsGroup, nemoHaCounterEntry=nemoHaCounterEntry, nemoCompliances=nemoCompliances, nemoHaBUAcksOtherError=nemoHaBUAcksOtherError, nemoCompliance2=nemoCompliance2, nemoStats=nemoStats, nemoMrRegistration=nemoMrRegistration, nemoCoreCompliance=nemoCoreCompliance, nemoMr=nemoMr, nemoMrRegistrationGroup=nemoMrRegistrationGroup, nemoSystem=nemoSystem, nemoHomeTunnelEstablished=nemoHomeTunnelEstablished, NemoBURequestRejectionCode=NemoBURequestRejectionCode, nemoMrBLTable=nemoMrBLTable, nemoMrBetterIfDetected=nemoMrBetterIfDetected, nemoMrBindingAcksOtherError=nemoMrBindingAcksOtherError, nemoCounterDiscontinuityTime=nemoCounterDiscontinuityTime, nemoBindingCacheGroup=nemoBindingCacheGroup, nemoMrBindingAcksInvalidPrefix=nemoMrBindingAcksInvalidPrefix, nemoHaBUAcceptedTime=nemoHaBUAcceptedTime, nemoHaRecentBURejectionCode=nemoHaRecentBURejectionCode, nemoMrMobilityMessagesSent=nemoMrMobilityMessagesSent, nemoHaMobileNetworkPrefix=nemoHaMobileNetworkPrefix, nemoMrMovedOutofHome=nemoMrMovedOutofHome, nemoHaBURejectionTime=nemoHaBURejectionTime, nemoConformance=nemoConformance, nemoMrDiscoveryRequests=nemoMrDiscoveryRequests, nemoObjects=nemoObjects, nemoMrBLCareofAddressPrefixLength=nemoMrBLCareofAddressPrefixLength, nemoNotificationCompliance=nemoNotificationCompliance, nemoNotifications=nemoNotifications, nemoMrRegnCounters=nemoMrRegnCounters, nemoHaBURequestsAccepted=nemoHaBURequestsAccepted, nemoStatsGroup=nemoStatsGroup, nemoGroups=nemoGroups, PYSNMP_MODULE_ID=nemoMIB, nemoStatus=nemoStatus, nemoMrReadOnlyCompliance2=nemoMrReadOnlyCompliance2, nemoMrBindingAcksOperationNotPermitted=nemoMrBindingAcksOperationNotPermitted, nemoHaMobileNetworkPrefixLength=nemoHaMobileNetworkPrefixLength, nemoHaCounterTable=nemoHaCounterTable, nemoCn=nemoCn, nemoBindingCacheEntry=nemoBindingCacheEntry, nemoMrPrefixRegMode=nemoMrPrefixRegMode, nemoMrConfGroup=nemoMrConfGroup, nemoHaStats=nemoHaStats, nemoMrConf=nemoMrConf, nemoHa=nemoHa, nemoMrBLEstablishedHomeTunnelIfIndex=nemoMrBLEstablishedHomeTunnelIfIndex, nemoMrEgressIfTable=nemoMrEgressIfTable, nemoHaCoreCompliance=nemoHaCoreCompliance, nemoHaGlobalStatsGroup=nemoHaGlobalStatsGroup, nemoHaMobileNetworkPrefixSource=nemoHaMobileNetworkPrefixSource, nemoHaBUAcksNotAuthorizedForPrefix=nemoHaBUAcksNotAuthorizedForPrefix, nemoMrBLHomeAddressPrefixLength=nemoMrBLHomeAddressPrefixLength, nemoBindingCacheTable=nemoBindingCacheTable, nemoMrBLEntry=nemoMrBLEntry, nemoHomeTunnelReleased=nemoHomeTunnelReleased, nemoMrMobilityMessagesRecd=nemoMrMobilityMessagesRecd, nemoHaAdvertisement=nemoHaAdvertisement, nemoHaMobileNetworkPrefixTable=nemoHaMobileNetworkPrefixTable, nemoHaCompliance2=nemoHaCompliance2, nemoMrEgressIfIndex=nemoMrEgressIfIndex, nemoHaBCEntryCreationTime=nemoHaBCEntryCreationTime, nemoHaCtrDiscontinuityTime=nemoHaCtrDiscontinuityTime, nemoCoreReadOnlyCompliance=nemoCoreReadOnlyCompliance, nemoMrMovedHome=nemoMrMovedHome, nemoHaBURequestsDenied=nemoHaBURequestsDenied, nemoMrBLMode=nemoMrBLMode, nemoMrEgressIfRoamHoldDownTime=nemoMrEgressIfRoamHoldDownTime, nemoMrBindingAcksRegTypeChangeDisallowed=nemoMrBindingAcksRegTypeChangeDisallowed, nemoHaRegistration=nemoHaRegistration, nemoBindingMrMode=nemoBindingMrMode, nemoMrBindingAcksForwardingSetupFailed=nemoMrBindingAcksForwardingSetupFailed, nemoCore=nemoCore, nemoMrSystem=nemoMrSystem, nemoMrGlobalStats=nemoMrGlobalStats, nemoNotificationGroup=nemoNotificationGroup, nemoReadOnlyCompliance2=nemoReadOnlyCompliance2, nemoMrMovedFNtoFN=nemoMrMovedFNtoFN, nemoMrEgressIfPriority=nemoMrEgressIfPriority, nemoHaBUAcksRegTypeChangeDisallowed=nemoHaBUAcksRegTypeChangeDisallowed, nemoMrBindingAcksNotAuthorizedForPrefix=nemoMrBindingAcksNotAuthorizedForPrefix, nemoMIB=nemoMIB, nemoHaMobileNetworkPrefixSeqNo=nemoHaMobileNetworkPrefixSeqNo, nemoBindingMrFlag=nemoBindingMrFlag, nemoHaBUAcksForwardingSetupFailed=nemoHaBUAcksForwardingSetupFailed, nemoSystemGroup=nemoSystemGroup, nemoCapabilities=nemoCapabilities, nemoHaMobileNetworkPrefixEntry=nemoHaMobileNetworkPrefixEntry, nemoMrBLActiveEgressIfIndex=nemoMrBLActiveEgressIfIndex, nemoHaBUAcksWONemoSupport=nemoHaBUAcksWONemoSupport, nemoMrCompliance=nemoMrCompliance, nemoBindings=nemoBindings, nemoMrBindingAcksWONemoSupport=nemoMrBindingAcksWONemoSupport, nemoMrBLMrFlag=nemoMrBLMrFlag)
