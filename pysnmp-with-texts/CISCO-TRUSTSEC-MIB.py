#
# PySNMP MIB module CISCO-TRUSTSEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TRUSTSEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:14:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CtsSecurityGroupTag, CtsGenerationId, CtsAcsAuthorityIdentity, CtsPasswordEncryptionType, CtsCredentialRecordType = mibBuilder.importSymbols("CISCO-TRUSTSEC-TC-MIB", "CtsSecurityGroupTag", "CtsGenerationId", "CtsAcsAuthorityIdentity", "CtsPasswordEncryptionType", "CtsCredentialRecordType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, MibIdentifier, Gauge32, iso, Integer32, TimeTicks, NotificationType, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "MibIdentifier", "Gauge32", "iso", "Integer32", "TimeTicks", "NotificationType", "Unsigned32", "ObjectIdentity")
TruthValue, TextualConvention, DisplayString, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus", "DateAndTime")
ciscoTrustSecMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 730))
ciscoTrustSecMIB.setRevisions(('2014-01-30 00:00', '2012-09-26 00:00', '2011-03-15 00:00', '2010-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTrustSecMIB.setRevisionsDescriptions(('Added following OBJECT-GROUP - ciscoTrustSecCrtclAuthGroup Added new compliance - ciscoTrustSecMIBCompliance4.', 'Added following OBJECT-GROUP - ciscoTrustSecSwKeystoreNotifsInfoGroup - ciscoTrustSecSwKeystoreNotifsControlGroup - ciscoTrustSecSwKeystoreNotifsGroup - ciscoTrustSecFileErrNotifsInfoGroup - ciscoTrustSecNotifsMessageStringInfoGroup - ciscoTrustSecCacheFileNotifsControlGroup - ciscoTrustSecCacheFileNotifsGroup - ciscoTrustSecCtrDrbgNotifsControlGroup - ciscoTrustSecCtrDrbgNotifsGroup Added new compliance - ciscoTrustSecMIBCompliance3.', 'Added support for ciscoTrustSecEnvSecGroupNameGroup.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoTrustSecMIB.setLastUpdated('201401300000Z')
if mibBuilder.loadTexts: ciscoTrustSecMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTrustSecMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoTrustSecMIB.setDescription('This MIB module is for the configuration of a network device on the Cisco Trusted Security (TrustSec) system. TrustSec secures a network fabric by authenticating and authorizing each device connecting to the network, allowing for the encryption, authentication and replay protection of data traffic on a hop by hop basis. Glossary : TrustSec - Cisco Trusted Security EAP-FAST - Extensible Authentication Protocol-Flexible Authentication via Secure Tunneling (RFC 4851) PAC - Protected Access Credential A credential dynamically downloaded from the Access Control Server. ACS - Access Control Server SGT - Security Group Tag A tag identifying its source, assigned to a packet on ingress to a TrustSec cloud, and used to determine security and other policy to be applied to it along its path through the cloud.')
ciscoTrustSecMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 0))
ciscoTrustSecMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 1))
ciscoTrustSecMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 2))
ctsCacheObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 1))
ctsSgtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 2))
ctsCredentialObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3))
ctsEnvironmentDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4))
ctsNotifsControlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 5))
ctsNotifsInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 6))
ctsCriticalAuthObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 7))
ctsCacheEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCacheEnabled.setStatus('current')
if mibBuilder.loadTexts: ctsCacheEnabled.setDescription('This object specifies if the TrustSec cache is enabled in the system.')
ctsCacheNvStorage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCacheNvStorage.setStatus('current')
if mibBuilder.loadTexts: ctsCacheNvStorage.setDescription('The object specifies the location on the device where TrustSec cache files will be created. The location may be specified in <device>:[directory] format, where <device> can be (but not limited to): bootdisk:, disk0:, disk1:. A zero length string for this object indicates that no location has been configured and system will decide the location of TrustSec cache files.')
ctsCacheClear = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("authzPolicies", 3), ("authzPoliciesPeer", 4), ("authzPoliciesSgt", 5), ("environmentData", 6), ("interfaceController", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCacheClear.setStatus('current')
if mibBuilder.loadTexts: ctsCacheClear.setDescription("This object allows user to clear the cache files for Cisco Trusted Security feature on this device. When read, this object always returns the value 'none'. 'none' - No operation. 'all' - Clear all the cached information 'authzPolicies' - Clear all the cached authorization policies. 'authzPoliciesPeer' - Clear the cached peer authorization policies. 'authzPoliciesSgt' - Clear the cached SGT authorization policies. 'environmentData' - Clear the cached environment data 'interfaceController' - Clear the cached interface controller data.")
ctsSecurityGroupTagId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 2, 1), CtsSecurityGroupTag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSecurityGroupTagId.setStatus('current')
if mibBuilder.loadTexts: ctsSecurityGroupTagId.setDescription('This object allows user to specify the SGT for the packets originating from this device. A value of zero for this object indicates that no SGT has been configured.')
ctsSgtAssignmentMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ingress", 2), ("egress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSgtAssignmentMethod.setStatus('current')
if mibBuilder.loadTexts: ctsSgtAssignmentMethod.setDescription("This object specifies the method used for assignment of TrustSec SGT for the line cards without TrustSec tagging capability. 'none' - assignment of TrustSec SGT is not enabled. 'ingress' - 'ingress' method is used for the assignment of TrustSec SGT. 'egress' - 'egress' method is used for the assignment of TrustSec SGT.")
ctsDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsDeviceId.setStatus('current')
if mibBuilder.loadTexts: ctsDeviceId.setDescription("This object allows user to specify the identifier for the device. This identifier and the device password (specified by ctsDevicePassword) are used together by the Cisco Trusted Security feature for authenticating the device. The value of this object must be set in the same PDU as ctsDevicePasswordType and ctsDevicePassword. The object may not be set to a zero length string. The system will return a zero length string for this object either when there is no value configured for this object or TrustSec credentials for the device have been cleared by setting ctsCredentialsClearAll to 'true'.")
ctsDevicePasswordType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 2), CtsPasswordEncryptionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsDevicePasswordType.setStatus('current')
if mibBuilder.loadTexts: ctsDevicePasswordType.setDescription("This object specifies the type of encryption employed to encrypt password in ctsDevicePassword object. Value for this object must be specified as 'clearText', 'typeSix' or 'typeSeven' in order to configure the password in ctsDevicePassword. The value of this object must be set in the same PDU as ctsDevicePassword and ctsDeviceId. When read, value of this object must be 'none' if ctsDevicePassword is a zero length string. The value of this object may not be set to 'none' or 'other'.")
ctsDevicePassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsDevicePassword.setStatus('current')
if mibBuilder.loadTexts: ctsDevicePassword.setDescription('This object allows user to specify the password for the device. This password and the device identifier (specified by ctsDeviceId) are used together by the Cisco Trusted Security feature for authenticating the device. The value of this object must be set in the same PDU as ctsDevicePasswordType and ctsDeviceId. The object may not be set to a zero length string. When read, this object always returns the value of a zero-length octet string.')
ctsKeystoreType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardwareKeystore", 1), ("softwareEmulation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystoreType.setStatus('current')
if mibBuilder.loadTexts: ctsKeystoreType.setDescription("This object indicates the type of keystore employed by the device. 'hardwareKeystore' - Keystore functionality is implemented in hardware. 'softwareEmulation' - Keystore functionality is emulated in software.")
ctsKeystoreFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystoreFwVersion.setStatus('current')
if mibBuilder.loadTexts: ctsKeystoreFwVersion.setDescription("This object indicates the firmware version of the hardware keystore. This object is only instantiated when the value of ctsKeystoreType is 'hardwareKeystore'.")
ctsKeystoreFwAlerts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystoreFwAlerts.setStatus('current')
if mibBuilder.loadTexts: ctsKeystoreFwAlerts.setDescription("This object indicates the number of hardware keystore alerts that occurred. This object is only instantiated when the value of ctsKeystoreType is 'hardwareKeystore'.")
ctsKeystoreFwResets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystoreFwResets.setStatus('current')
if mibBuilder.loadTexts: ctsKeystoreFwResets.setDescription("This object indicates the number of times the keystore firmware was reset. This object is only instantiated when the value of ctsKeystoreType is 'hardwareKeystore'.")
ctsKeystoreRxTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystoreRxTimeouts.setStatus('current')
if mibBuilder.loadTexts: ctsKeystoreRxTimeouts.setDescription("This object indicates the number of times the system timed out awaiting response from keystore firmware. This object is only instantiated when the value of ctsKeystoreType is 'hardwareKeystore'.")
ctsKeystoreRxBadChecksums = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystoreRxBadChecksums.setStatus('current')
if mibBuilder.loadTexts: ctsKeystoreRxBadChecksums.setDescription("This object indicates the number of message fragments the system received from keystore firmware that had bad checksum value. This object is only instantiated when the value of ctsKeystoreType is 'hardwareKeystore'.")
ctsKeystoreRxBadFragmentLengths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystoreRxBadFragmentLengths.setStatus('current')
if mibBuilder.loadTexts: ctsKeystoreRxBadFragmentLengths.setDescription("This object indicates the number of message fragments the system received from keystore firmware that had illegal lengths. This object is only instantiated when the value of ctsKeystoreType is 'hardwareKeystore'.")
ctsKeystoreCorruptions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystoreCorruptions.setStatus('current')
if mibBuilder.loadTexts: ctsKeystoreCorruptions.setDescription("This object indicates the number of times keystore firmware reported detection of one or more corrupted records in the hardware keystore. This object is only instantiated when the value of ctsKeystoreType is 'hardwareKeystore'.")
ctsKeystorePasswordRecordTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 13), )
if mibBuilder.loadTexts: ctsKeystorePasswordRecordTable.setStatus('current')
if mibBuilder.loadTexts: ctsKeystorePasswordRecordTable.setDescription('A list of Cisco Trusted Security password records stored in the hardware or software keystore of this device.')
ctsKeystorePasswordRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 13, 1), ).setIndexNames((1, "CISCO-TRUSTSEC-MIB", "ctsKeystorePasswordRecordName"))
if mibBuilder.loadTexts: ctsKeystorePasswordRecordEntry.setStatus('current')
if mibBuilder.loadTexts: ctsKeystorePasswordRecordEntry.setDescription('An entry describing individual password record in the keystore of this device. An entry will be created or deleted from this table when a password record is added or removed from the keystore of this device.')
ctsKeystorePasswordRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 13, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ctsKeystorePasswordRecordName.setStatus('current')
if mibBuilder.loadTexts: ctsKeystorePasswordRecordName.setDescription('This object identifies a password record.')
ctsKeystorePasswordRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 13, 1, 2), CtsCredentialRecordType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystorePasswordRecordType.setStatus('current')
if mibBuilder.loadTexts: ctsKeystorePasswordRecordType.setDescription('This object indicates the type of credential in this record.')
ctsKeystorePacRecordTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 14), )
if mibBuilder.loadTexts: ctsKeystorePacRecordTable.setStatus('current')
if mibBuilder.loadTexts: ctsKeystorePacRecordTable.setDescription('A list of Cisco Trusted Security PAC records stored in the hardware or software keystore of this device.')
ctsKeystorePacRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 14, 1), ).setIndexNames((1, "CISCO-TRUSTSEC-MIB", "ctsKeystorePacRecordName"))
if mibBuilder.loadTexts: ctsKeystorePacRecordEntry.setStatus('current')
if mibBuilder.loadTexts: ctsKeystorePacRecordEntry.setDescription('An entry describing individual PAC record in the keystore of this device. An entry will be created or deleted by the system when a PAC record is added or removed from the keystore of this device.')
ctsKeystorePacRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 14, 1, 1), CtsAcsAuthorityIdentity().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ctsKeystorePacRecordName.setStatus('current')
if mibBuilder.loadTexts: ctsKeystorePacRecordName.setDescription('The name of this PAC record.')
ctsKeystorePacRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 14, 1, 2), CtsCredentialRecordType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsKeystorePacRecordType.setStatus('current')
if mibBuilder.loadTexts: ctsKeystorePacRecordType.setDescription('This object indicates the type of credential in this record.')
ctsPacInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 15), )
if mibBuilder.loadTexts: ctsPacInfoTable.setStatus('current')
if mibBuilder.loadTexts: ctsPacInfoTable.setDescription('A list of PACs on this device.')
ctsPacInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 15, 1), ).setIndexNames((1, "CISCO-TRUSTSEC-MIB", "ctsPacAcsAuthId"))
if mibBuilder.loadTexts: ctsPacInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ctsPacInfoEntry.setDescription('An entry providing management information of a particular PAC record. An entry can only be created dynamically by the system when a new PAC is installed in the keystore. An entry will be deleted from this table when the PAC is removed from the keystore by the system or by the user.')
ctsPacAcsAuthId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 15, 1, 1), CtsAcsAuthorityIdentity().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ctsPacAcsAuthId.setStatus('current')
if mibBuilder.loadTexts: ctsPacAcsAuthId.setDescription('This object indicates the unique authority identity of the ACS server from where the PAC was downloaded.')
ctsPacAcsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 15, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsPacAcsDescription.setStatus('current')
if mibBuilder.loadTexts: ctsPacAcsDescription.setDescription('This object indicates the description of the ACS server from where the PAC was downloaded.')
ctsPacType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("tunnel", 2), ("machineAuthentication", 3), ("userAuthorization", 4), ("posture", 5), ("ciscoTrustSec", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsPacType.setStatus('current')
if mibBuilder.loadTexts: ctsPacType.setDescription("This object indicates the type of PAC this entry represents. 'unknown' - Any other type of PAC that is not covered below 'tunnel' - Distributed shared secret between the peer and ACS that is used to establish a secure tunnel and convey the policy of what must and can occur in the tunnel. 'machineAuthentication' - The Machine Authentication PAC contains information in the PAC opaque that identifies the machine. It is meant to be used by a machine when network access is required and no user is logged in. 'userAuthorization' - The User Authorization PAC contains information in the PAC opaque that identifies a user and provides authorization information. The User Authorization PAC is used to provide user information during stateless session resumption so user authentication MAY be skipped. 'posture' - Distributed posture checking and authorization result based on a previous posture validation. A posture PAC can be used to optimize posture validation in the case of frequent revalidations. This result is specific to the posture validation application and may be used outside the contents of EAP-FAST. 'ciscoTrustSec' - A credential dynamically provisioned in phase 0 of EAP-FAST. It is used by Trustsec to set up secure communications with the server.")
ctsPacExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 15, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsPacExpirationTime.setStatus('current')
if mibBuilder.loadTexts: ctsPacExpirationTime.setDescription('This object indicates the time when this PAC will be expired.')
ctsPacTimeToRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 15, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsPacTimeToRefresh.setStatus('current')
if mibBuilder.loadTexts: ctsPacTimeToRefresh.setDescription('This object indicates the time left for this PAC to be refreshed from the ACS.')
ctsPacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsPacStatus.setStatus('current')
if mibBuilder.loadTexts: ctsPacStatus.setDescription("This object is used to manage the deletion of rows in this table. This object only supports the values 'active' and 'destroy'. Setting this object to 'destroy' deletes this PAC. When read, this object will always return 'active'.")
ctsCredentialsClearAll = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 3, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCredentialsClearAll.setStatus('current')
if mibBuilder.loadTexts: ctsCredentialsClearAll.setDescription("This object allows user to clear all the PACs and Cisco Trusted Security credentials on the device. Setting the object to 'true' will clear all the PACs and credentials. When read, this object will always return 'false'.")
ctsEnvDataLastDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("succeeded", 2), ("failed", 3), ("inprogress", 4), ("incomplete", 5), ("timedout", 6), ("cleared", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvDataLastDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: ctsEnvDataLastDownloadStatus.setDescription("This object indicates the status of the last attempt to download the Environment Data. 'other' - Any other state not covered by below enumerations. 'succeeded' - Environment Data download completed successfully. 'failed' - Environment Data download failed. 'inprogress'- Environment Data download is in progress. 'incomplete'- Environment Data download is incomplete. 'timedout' - Environment Data download did not start and timed out due to no response from the ACS. 'cleared' - Environment Data has been cleared by the user.")
ctsEnvSecurityGroupTagId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 2), CtsSecurityGroupTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvSecurityGroupTagId.setStatus('current')
if mibBuilder.loadTexts: ctsEnvSecurityGroupTagId.setDescription('This object indicates the SGT for packets originating on this device downloaded from the ACS. A value of zero for this object indicates that no SGT has been downloaded from the ACS.')
ctsEnvSecurityGroupTagGenId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 3), CtsGenerationId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvSecurityGroupTagGenId.setStatus('current')
if mibBuilder.loadTexts: ctsEnvSecurityGroupTagGenId.setDescription('This object indicates the generation identifier associated with the downloaded SGT on this device.')
ctsEnvDataLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvDataLastUpdate.setStatus('current')
if mibBuilder.loadTexts: ctsEnvDataLastUpdate.setDescription('This object indicates the last time Cisco Trusted Security Environment Data was successfully updated from ACS. This object will contain 0-1-1,00:00:00:0 if Environment Data has never been successfully updated from ACS.')
ctsEnvDataRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvDataRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: ctsEnvDataRefreshInterval.setDescription('This object indicates the time interval for which Trusted Security Environment Data is valid. The Trusted Security Environment Data will be refreshed i.e. downloaded from the ACS after this time period has elapsed.')
ctsEnvDataTimeLeft = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvDataTimeLeft.setStatus('current')
if mibBuilder.loadTexts: ctsEnvDataTimeLeft.setDescription('This object indicates the time left for the currently installed Trusted Security Environment Data to expire.')
ctsEnvDataTimeToRefresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvDataTimeToRefresh.setStatus('current')
if mibBuilder.loadTexts: ctsEnvDataTimeToRefresh.setDescription('This object indicates the time interval after which Trusted Security Environment Data will be refreshed i.e. downloaded from the ACS due to Environment Data expiration or refresh failure.')
ctsEnvDataSource = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("cached", 2), ("downloaded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvDataSource.setStatus('current')
if mibBuilder.loadTexts: ctsEnvDataSource.setDescription("This object indicates the source of current Environment Data installed on the system. 'none' - No Environment Data is currently installed. 'cached' - Environment Data is installed from non-volatile storage on the system. 'downloaded' - Environment Data is downloaded from the ACS.")
ctsEnvDataAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsEnvDataAction.setStatus('current')
if mibBuilder.loadTexts: ctsEnvDataAction.setDescription("This object allows user to specify the action to be taken for all the Cisco Trusted Security Environment Data on this device. When read, this object always returns the value 'none'. 'none' - No operation. 'refresh' - Refresh all the Trusted Security Environment Data on the device.")
ctsEnvSecurityGroupNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 16), )
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameTable.setStatus('current')
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameTable.setDescription('A list of Security Group Names in Cisco Trusted Security environment.')
ctsEnvSecurityGroupNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 16, 1), ).setIndexNames((0, "CISCO-TRUSTSEC-MIB", "ctsEnvSecurityGroupNameSgt"))
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameEntry.setStatus('current')
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameEntry.setDescription('An entry listing the name assigned to each SGT in Cisco Trusted Security environment. Entries will be populated in this table when system downloads Security Group Name information as part of Trusted Security Environment Data.')
ctsEnvSecurityGroupNameSgt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 16, 1, 1), CtsSecurityGroupTag().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameSgt.setStatus('current')
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameSgt.setDescription('This object identifies a SGT in Trusted Security environment.')
ctsEnvSecurityGroupNameSgtGenId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 16, 1, 2), CtsGenerationId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameSgtGenId.setStatus('current')
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameSgtGenId.setDescription('This object indicates the Generation Identifier associated with this SGT.')
ctsEnvSecurityGroupNameSgtFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 16, 1, 3), Bits().clone(namedValues=NamedValues(("recognizedSgt", 0), ("unicastSgt", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameSgtFlag.setStatus('current')
if mibBuilder.loadTexts: ctsEnvSecurityGroupNameSgtFlag.setDescription("This object indicates the flag associated with this SGT. 'recognizedSgt' - indicates a recognized SGT when set to 1, else indicates a reserved SGT. 'unicastSgt' - indicates a unicast SGT when set to 1, else indicates a multicast SGT.")
ctsEnvSecurityGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 4, 16, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsEnvSecurityGroupName.setStatus('current')
if mibBuilder.loadTexts: ctsEnvSecurityGroupName.setDescription('This object indicates the Security Group Name assigned to this SGT.')
ctsFileErrNotifReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("openFailedForWrite", 1), ("writeFailed", 2), ("openFailedForRead", 3), ("readFailed", 4), ("badMagic", 5), ("unexpectedEof", 6), ("badHeader", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsFileErrNotifReason.setStatus('current')
if mibBuilder.loadTexts: ctsFileErrNotifReason.setDescription("This object indicates the reason file error related notification was generated. 'openFailedForWrite' - System failed to open a file to write TrustSec information. 'writeFailed' - System failed to write TrustSec information to a file. 'openFailedForRead' - System failed to open a file to read TrustSec information. 'readFailed' - System failed to read TrustSec information from a file. 'badMagic' - A bad magic number was encountered for a TrustSec file. 'unexpectedEof' - A record of unexpected length is found in TrustSec file. 'badHeader' - Bad file header was encountered for a TrustSec file.")
ctsSwKeystoreSyncFailNotifReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ipcPortCreationFailed", 1), ("ipcPortOpenFailed", 2), ("ipcConnectionFailure", 3), ("ipcSendFailure", 4), ("standbyIncompatible", 5), ("syncProcessCreationFailed", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsSwKeystoreSyncFailNotifReason.setStatus('current')
if mibBuilder.loadTexts: ctsSwKeystoreSyncFailNotifReason.setDescription("This object indicates the reason ctsSwKeystoreSyncFailNotif notification was generated. 'ipcPortCreationFailed' - Keystore information could not be synced because the system failed to create port for Inter-Process communication between the active and the standby supervisors. 'ipcPortOpenFailed' - Keystore information could not be synced because the system failed to open port for Inter-Process communication between the active and the standby supervisors. 'ipcConnectionFailure' - Keystore information could not be synced because Inter-Process communication connection failed between the active and the standby supervisors. 'ipcSendFailure' - Keystore information could not be synced because Inter-Process Communication messages could not be sent to the standby supervisor. 'standbyIncompatible' - Keystore information could not be synced because the standby supervisor is not compatible with the active supervisor. 'syncProcessCreationFailed' - Keystore information could not be synced because the system failed to create the sync process.")
ctsNotifMessageString = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 6, 3), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsNotifMessageString.setStatus('current')
if mibBuilder.loadTexts: ctsNotifMessageString.setDescription('The object indicates additional information for a TrustSec notification.')
ctsSwKeystoreFileErrNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSwKeystoreFileErrNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsSwKeystoreFileErrNotifEnable.setDescription("This object specifies if the system generates ctsSwKeystoreFileErrNotif. A value of 'false' will prevent ctsSwKeystoreFileErrNotif notifications from being generated by this system.")
ctsSwKeystoreSyncFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSwKeystoreSyncFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsSwKeystoreSyncFailNotifEnable.setDescription("This object specifies if the system generates ctsSwKeystoreSyncFailNotif. A value of 'false' will prevent ctsSwKeystoreSyncFailNotif notifications from being generated by this system.")
ctsAuthzCacheFileErrNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 5, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsAuthzCacheFileErrNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsAuthzCacheFileErrNotifEnable.setDescription("This object specifies if the system generates ctsAuthzCacheFileErrNotif. A value of 'false' will prevent ctsAuthzCacheFileErrNotif notifications from being generated by this system.")
ctsCacheFileAccessErrNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 5, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCacheFileAccessErrNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsCacheFileAccessErrNotifEnable.setDescription("This object specifies if the system generates ctsCacheFileAccessErrNotif. A value of 'false' will prevent ctsCacheFileAccessErrNotif notifications from being generated by this system.")
ctsSrcEntropyFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSrcEntropyFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsSrcEntropyFailNotifEnable.setDescription("This object specifies if the system generates ctsSrcEntropyFailNotif. A value of 'false' will prevent ctsSrcEntropyFailNotif notifications from being generated by this system.")
ctsSapRandomNumberFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 5, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsSapRandomNumberFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsSapRandomNumberFailNotifEnable.setDescription("This object specifies if the system generates ctsSapRandomNumberFailNotif. A value of 'false' will prevent ctsSapRandomNumberFailNotif notifications from being generated by this system.")
ctsCriticalAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCriticalAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: ctsCriticalAuthEnabled.setDescription("This object specifies if the Critical-Auth functionality is enabled in the system. Setting the object to 'true' will enable Critical-Auth functionality in the system and 'false' will disable the Critical-Auth functionality. Before enable ctsCriticalAuthEnable ctsCriticalAuthPeerSgt need to be configured.")
ctsCriticalAuthFallback = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("cache", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCriticalAuthFallback.setStatus('current')
if mibBuilder.loadTexts: ctsCriticalAuthFallback.setDescription('This object specifies the CTS Critical-Auth fallback policy. default - Critical-Auth fallback policy is default. cache - Critical-Auth fallback policy is cache.')
ctsCriticalAuthPeerSgt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 7, 3), CtsSecurityGroupTag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCriticalAuthPeerSgt.setStatus('current')
if mibBuilder.loadTexts: ctsCriticalAuthPeerSgt.setDescription('This object specifies the CTS Critical-Auth SGT tag of the remote peer. ctsCriticalAuthPeerSgt cannot be set to zero when ctsCriticalAuthEnable is enable. ctsCriticalAuthPeerSgtTrust will be set to untrusted by default during set operation of ctsCriticalAuthPeerSgt. User need to explicitly override the ctsCriticalAuthPeerSgtTrust to trusted if required.')
ctsCriticalAuthPeerSgtTrust = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 7, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCriticalAuthPeerSgtTrust.setStatus('current')
if mibBuilder.loadTexts: ctsCriticalAuthPeerSgtTrust.setDescription("This object specifies the CTS Critical-Auth peer's sgt trust state. This object can only be set when ctsCriticalAuthPeerSgt is non-zero.")
ctsCriticalAuthDefaultPmk = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 7, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(32, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsCriticalAuthDefaultPmk.setStatus('current')
if mibBuilder.loadTexts: ctsCriticalAuthDefaultPmk.setDescription('This object specifies the CTS Critical-Auth default PMK used by SAP. The purpose of this object is to only allow configuration of Critical-Auth PMK. The ctsCriticalAuthViewDefaultPmk object is used to display the default Critical-Auth PMK.')
ctsCriticalAuthViewDefaultPmk = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 730, 1, 7, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsCriticalAuthViewDefaultPmk.setStatus('current')
if mibBuilder.loadTexts: ctsCriticalAuthViewDefaultPmk.setDescription('This object indicates the CTS Critical-Auth default PMK. The purpose of this object is to only display the configured Critical-Auth PMK. A zero length string for this objects indicates the SAP negotiation is disabled. The ctsCriticalAuthDefaultPmk object is used to configure the PMK.')
ctsSwKeystoreFileErrNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 730, 0, 1)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsFileErrNotifReason"))
if mibBuilder.loadTexts: ctsSwKeystoreFileErrNotif.setStatus('current')
if mibBuilder.loadTexts: ctsSwKeystoreFileErrNotif.setDescription('A ctsSwKeystoreFileErrNotif is generated when system encounters an error while performing operation on the software keystore file.')
ctsSwKeystoreSyncFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 730, 0, 2)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsSwKeystoreSyncFailNotifReason"))
if mibBuilder.loadTexts: ctsSwKeystoreSyncFailNotif.setStatus('current')
if mibBuilder.loadTexts: ctsSwKeystoreSyncFailNotif.setDescription('A ctsSwKeystoreSyncFailNotifReason is generated when system fails to sync software keystore information from the active supervisor to the standby supervisor.')
ctsAuthzCacheFileErrNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 730, 0, 3)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsFileErrNotifReason"), ("CISCO-TRUSTSEC-MIB", "ctsNotifMessageString"))
if mibBuilder.loadTexts: ctsAuthzCacheFileErrNotif.setStatus('current')
if mibBuilder.loadTexts: ctsAuthzCacheFileErrNotif.setDescription('A ctsAuthzCacheFileErrNotif is generated when the system encounters error downloading TrustSec authorization related environment data to a cache file.')
ctsCacheFileAccessErrNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 730, 0, 4)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsFileErrNotifReason"), ("CISCO-TRUSTSEC-MIB", "ctsNotifMessageString"))
if mibBuilder.loadTexts: ctsCacheFileAccessErrNotif.setStatus('current')
if mibBuilder.loadTexts: ctsCacheFileAccessErrNotif.setDescription('A ctsCacheFileAccessErrNotif is generated when the system fails to perform open/read/write operation for a TrustSec cache file.')
ctsSrcEntropyFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 730, 0, 5))
if mibBuilder.loadTexts: ctsSrcEntropyFailNotif.setStatus('current')
if mibBuilder.loadTexts: ctsSrcEntropyFailNotif.setDescription('A ctsSrcEntropyFailNotif is generated when the periodic health tests for the CTR-DRBG (Counter- Deterministic Random Bit Generator) implementation fails due to issues with the source entropy.')
ctsSapRandomNumberFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 730, 0, 6)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsNotifMessageString"))
if mibBuilder.loadTexts: ctsSapRandomNumberFailNotif.setStatus('current')
if mibBuilder.loadTexts: ctsSapRandomNumberFailNotif.setDescription('A ctsSapRandomNumberFailNotif is generated when the the system fails to obtain a random number from CTR-DRBG block for SAP (Security Association Protocol) key-counter.')
ciscoTrustSecMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 1))
ciscoTrustSecMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2))
ciscoTrustSecMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 1, 1)).setObjects(("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCacheGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSgtGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCredentialsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecHwKeystoreInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecEnvDataGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSgtAssignmentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecMIBCompliance = ciscoTrustSecMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTrustSecMIBCompliance.setDescription('The compliance statement for the CISCO-TRUSTSEC-MIB.')
ciscoTrustSecMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 1, 2)).setObjects(("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCacheGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSgtGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCredentialsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecHwKeystoreInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecEnvDataGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSgtAssignmentGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecEnvSecGroupNameGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecMIBCompliance2 = ciscoTrustSecMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTrustSecMIBCompliance2.setDescription('The compliance statement for the CISCO-TRUSTSEC-MIB.')
ciscoTrustSecMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 1, 3)).setObjects(("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCacheGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSgtGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCredentialsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecHwKeystoreInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecEnvDataGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSgtAssignmentGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecEnvSecGroupNameGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSwKeystoreNotifsInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSwKeystoreNotifsControlGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSwKeystoreNotifsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecFileErrNotifsInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecNotifsMessageStringInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCacheFileNotifsControlGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCacheFileNotifsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCtrDrbgNotifsControlGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCtrDrbgNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecMIBCompliance3 = ciscoTrustSecMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTrustSecMIBCompliance3.setDescription('The compliance statement for the CISCO-TRUSTSEC-MIB.')
ciscoTrustSecMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 1, 4)).setObjects(("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCacheGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSgtGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCredentialsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecHwKeystoreInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecEnvDataGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSgtAssignmentGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecEnvSecGroupNameGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSwKeystoreNotifsInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSwKeystoreNotifsControlGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecSwKeystoreNotifsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecFileErrNotifsInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecNotifsMessageStringInfoGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCacheFileNotifsControlGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCacheFileNotifsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCtrDrbgNotifsControlGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCtrDrbgNotifsGroup"), ("CISCO-TRUSTSEC-MIB", "ciscoTrustSecCrtclAuthGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecMIBCompliance4 = ciscoTrustSecMIBCompliance4.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecMIBCompliance4.setDescription('The compliance statement for the CISCO-TRUSTSEC-MIB.')
ciscoTrustSecCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 1)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsCacheEnabled"), ("CISCO-TRUSTSEC-MIB", "ctsCacheNvStorage"), ("CISCO-TRUSTSEC-MIB", "ctsCacheClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecCacheGroup = ciscoTrustSecCacheGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecCacheGroup.setDescription('A collection of objects that provides the cache configuration for TrustSec in the system.')
ciscoTrustSecSgtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 2)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsSecurityGroupTagId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecSgtGroup = ciscoTrustSecSgtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecSgtGroup.setDescription('A collection of objects to manage SGT for TrustSec.')
ciscoTrustSecCredentialsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 3)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsDeviceId"), ("CISCO-TRUSTSEC-MIB", "ctsDevicePasswordType"), ("CISCO-TRUSTSEC-MIB", "ctsDevicePassword"), ("CISCO-TRUSTSEC-MIB", "ctsKeystoreType"), ("CISCO-TRUSTSEC-MIB", "ctsKeystorePasswordRecordType"), ("CISCO-TRUSTSEC-MIB", "ctsKeystorePacRecordType"), ("CISCO-TRUSTSEC-MIB", "ctsPacAcsDescription"), ("CISCO-TRUSTSEC-MIB", "ctsPacType"), ("CISCO-TRUSTSEC-MIB", "ctsPacExpirationTime"), ("CISCO-TRUSTSEC-MIB", "ctsPacTimeToRefresh"), ("CISCO-TRUSTSEC-MIB", "ctsPacStatus"), ("CISCO-TRUSTSEC-MIB", "ctsCredentialsClearAll"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecCredentialsGroup = ciscoTrustSecCredentialsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecCredentialsGroup.setDescription('A collection of objects to manage credentials parameters for TrustSec.')
ciscoTrustSecHwKeystoreInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 4)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsKeystoreFwVersion"), ("CISCO-TRUSTSEC-MIB", "ctsKeystoreFwAlerts"), ("CISCO-TRUSTSEC-MIB", "ctsKeystoreFwResets"), ("CISCO-TRUSTSEC-MIB", "ctsKeystoreRxTimeouts"), ("CISCO-TRUSTSEC-MIB", "ctsKeystoreRxBadChecksums"), ("CISCO-TRUSTSEC-MIB", "ctsKeystoreRxBadFragmentLengths"), ("CISCO-TRUSTSEC-MIB", "ctsKeystoreCorruptions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecHwKeystoreInfoGroup = ciscoTrustSecHwKeystoreInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecHwKeystoreInfoGroup.setDescription('A collection of objects to manage hardware keystore for TrustSec.')
ciscoTrustSecEnvDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 5)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsEnvDataLastDownloadStatus"), ("CISCO-TRUSTSEC-MIB", "ctsEnvSecurityGroupTagId"), ("CISCO-TRUSTSEC-MIB", "ctsEnvSecurityGroupTagGenId"), ("CISCO-TRUSTSEC-MIB", "ctsEnvDataLastUpdate"), ("CISCO-TRUSTSEC-MIB", "ctsEnvDataRefreshInterval"), ("CISCO-TRUSTSEC-MIB", "ctsEnvDataTimeLeft"), ("CISCO-TRUSTSEC-MIB", "ctsEnvDataTimeToRefresh"), ("CISCO-TRUSTSEC-MIB", "ctsEnvDataSource"), ("CISCO-TRUSTSEC-MIB", "ctsEnvDataAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecEnvDataGroup = ciscoTrustSecEnvDataGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecEnvDataGroup.setDescription('A collection of objects to manage Environment Data for TrustSec.')
ciscoTrustSecSgtAssignmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 6)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsSgtAssignmentMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecSgtAssignmentGroup = ciscoTrustSecSgtAssignmentGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecSgtAssignmentGroup.setDescription('A collection of objects to manage assignment of TrustSec SGT.')
ciscoTrustSecEnvSecGroupNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 7)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsEnvSecurityGroupNameSgtGenId"), ("CISCO-TRUSTSEC-MIB", "ctsEnvSecurityGroupNameSgtFlag"), ("CISCO-TRUSTSEC-MIB", "ctsEnvSecurityGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecEnvSecGroupNameGroup = ciscoTrustSecEnvSecGroupNameGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecEnvSecGroupNameGroup.setDescription('A collection of object(s) to manage Security Group Name information for TrustSec.')
ciscoTrustSecSwKeystoreNotifsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 8)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsSwKeystoreSyncFailNotifReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecSwKeystoreNotifsInfoGroup = ciscoTrustSecSwKeystoreNotifsInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecSwKeystoreNotifsInfoGroup.setDescription('A collection of object(s) to provide information regarding software keystore notifications for TrustSec.')
ciscoTrustSecSwKeystoreNotifsControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 9)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsSwKeystoreFileErrNotifEnable"), ("CISCO-TRUSTSEC-MIB", "ctsSwKeystoreSyncFailNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecSwKeystoreNotifsControlGroup = ciscoTrustSecSwKeystoreNotifsControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecSwKeystoreNotifsControlGroup.setDescription('A collection of object(s) to control software keystore notifications for TrustSec.')
ciscoTrustSecSwKeystoreNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 10)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsSwKeystoreFileErrNotif"), ("CISCO-TRUSTSEC-MIB", "ctsSwKeystoreSyncFailNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecSwKeystoreNotifsGroup = ciscoTrustSecSwKeystoreNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecSwKeystoreNotifsGroup.setDescription('A collection of software keystore related notifications for TrustSec.')
ciscoTrustSecFileErrNotifsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 11)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsFileErrNotifReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecFileErrNotifsInfoGroup = ciscoTrustSecFileErrNotifsInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecFileErrNotifsInfoGroup.setDescription('A collection of object(s) to provide information regarding file error related notifications for TrustSec.')
ciscoTrustSecNotifsMessageStringInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 12)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsNotifMessageString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecNotifsMessageStringInfoGroup = ciscoTrustSecNotifsMessageStringInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecNotifsMessageStringInfoGroup.setDescription('A collection of object(s) to provide information regarding TrustSec notification.')
ciscoTrustSecCacheFileNotifsControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 13)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsAuthzCacheFileErrNotifEnable"), ("CISCO-TRUSTSEC-MIB", "ctsCacheFileAccessErrNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecCacheFileNotifsControlGroup = ciscoTrustSecCacheFileNotifsControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecCacheFileNotifsControlGroup.setDescription('A collection of object(s) to control cache file related notifications for TrustSec.')
ciscoTrustSecCacheFileNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 14)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsAuthzCacheFileErrNotif"), ("CISCO-TRUSTSEC-MIB", "ctsCacheFileAccessErrNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecCacheFileNotifsGroup = ciscoTrustSecCacheFileNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecCacheFileNotifsGroup.setDescription('A collection of TrustSec cache file related notifications.')
ciscoTrustSecCtrDrbgNotifsControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 15)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsSrcEntropyFailNotifEnable"), ("CISCO-TRUSTSEC-MIB", "ctsSapRandomNumberFailNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecCtrDrbgNotifsControlGroup = ciscoTrustSecCtrDrbgNotifsControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecCtrDrbgNotifsControlGroup.setDescription('A collection of object(s) to control CTR-DRBG related notifications for TrustSec.')
ciscoTrustSecCtrDrbgNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 16)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsSrcEntropyFailNotif"), ("CISCO-TRUSTSEC-MIB", "ctsSapRandomNumberFailNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecCtrDrbgNotifsGroup = ciscoTrustSecCtrDrbgNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecCtrDrbgNotifsGroup.setDescription('A collection of CTR-DRBG related notifications for TrustSec.')
ciscoTrustSecCrtclAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 730, 2, 2, 17)).setObjects(("CISCO-TRUSTSEC-MIB", "ctsCriticalAuthEnabled"), ("CISCO-TRUSTSEC-MIB", "ctsCriticalAuthFallback"), ("CISCO-TRUSTSEC-MIB", "ctsCriticalAuthPeerSgt"), ("CISCO-TRUSTSEC-MIB", "ctsCriticalAuthPeerSgtTrust"), ("CISCO-TRUSTSEC-MIB", "ctsCriticalAuthDefaultPmk"), ("CISCO-TRUSTSEC-MIB", "ctsCriticalAuthViewDefaultPmk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecCrtclAuthGroup = ciscoTrustSecCrtclAuthGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecCrtclAuthGroup.setDescription('A collection of CTS Critical Auth Config objects')
mibBuilder.exportSymbols("CISCO-TRUSTSEC-MIB", ctsAuthzCacheFileErrNotif=ctsAuthzCacheFileErrNotif, ctsEnvironmentDataObjects=ctsEnvironmentDataObjects, ctsKeystoreRxTimeouts=ctsKeystoreRxTimeouts, ctsEnvDataRefreshInterval=ctsEnvDataRefreshInterval, ctsNotifsInfoObjects=ctsNotifsInfoObjects, ctsKeystorePasswordRecordName=ctsKeystorePasswordRecordName, ctsCacheClear=ctsCacheClear, ciscoTrustSecEnvSecGroupNameGroup=ciscoTrustSecEnvSecGroupNameGroup, ctsDevicePasswordType=ctsDevicePasswordType, ctsPacAcsDescription=ctsPacAcsDescription, ctsSgtObjects=ctsSgtObjects, ciscoTrustSecSgtGroup=ciscoTrustSecSgtGroup, ctsEnvDataLastUpdate=ctsEnvDataLastUpdate, ctsSwKeystoreSyncFailNotif=ctsSwKeystoreSyncFailNotif, ctsPacExpirationTime=ctsPacExpirationTime, ctsCriticalAuthObjects=ctsCriticalAuthObjects, ctsDevicePassword=ctsDevicePassword, ctsKeystorePasswordRecordTable=ctsKeystorePasswordRecordTable, ciscoTrustSecMIBCompliance2=ciscoTrustSecMIBCompliance2, ctsSwKeystoreSyncFailNotifEnable=ctsSwKeystoreSyncFailNotifEnable, ctsCriticalAuthPeerSgtTrust=ctsCriticalAuthPeerSgtTrust, ciscoTrustSecMIB=ciscoTrustSecMIB, ciscoTrustSecMIBCompliances=ciscoTrustSecMIBCompliances, ctsEnvSecurityGroupNameSgtGenId=ctsEnvSecurityGroupNameSgtGenId, ciscoTrustSecMIBCompliance=ciscoTrustSecMIBCompliance, ctsKeystoreRxBadFragmentLengths=ctsKeystoreRxBadFragmentLengths, ctsCriticalAuthPeerSgt=ctsCriticalAuthPeerSgt, ciscoTrustSecCacheGroup=ciscoTrustSecCacheGroup, ciscoTrustSecSwKeystoreNotifsGroup=ciscoTrustSecSwKeystoreNotifsGroup, ctsKeystorePasswordRecordType=ctsKeystorePasswordRecordType, ctsKeystoreType=ctsKeystoreType, ctsPacStatus=ctsPacStatus, ctsEnvSecurityGroupNameEntry=ctsEnvSecurityGroupNameEntry, ctsAuthzCacheFileErrNotifEnable=ctsAuthzCacheFileErrNotifEnable, ctsPacTimeToRefresh=ctsPacTimeToRefresh, PYSNMP_MODULE_ID=ciscoTrustSecMIB, ciscoTrustSecMIBCompliance4=ciscoTrustSecMIBCompliance4, ciscoTrustSecSwKeystoreNotifsControlGroup=ciscoTrustSecSwKeystoreNotifsControlGroup, ctsCredentialsClearAll=ctsCredentialsClearAll, ciscoTrustSecSwKeystoreNotifsInfoGroup=ciscoTrustSecSwKeystoreNotifsInfoGroup, ctsKeystoreFwResets=ctsKeystoreFwResets, ctsSrcEntropyFailNotifEnable=ctsSrcEntropyFailNotifEnable, ciscoTrustSecMIBNotifs=ciscoTrustSecMIBNotifs, ctsCacheEnabled=ctsCacheEnabled, ciscoTrustSecCacheFileNotifsGroup=ciscoTrustSecCacheFileNotifsGroup, ciscoTrustSecFileErrNotifsInfoGroup=ciscoTrustSecFileErrNotifsInfoGroup, ciscoTrustSecCtrDrbgNotifsGroup=ciscoTrustSecCtrDrbgNotifsGroup, ctsPacAcsAuthId=ctsPacAcsAuthId, ciscoTrustSecSgtAssignmentGroup=ciscoTrustSecSgtAssignmentGroup, ctsPacInfoEntry=ctsPacInfoEntry, ciscoTrustSecMIBObjects=ciscoTrustSecMIBObjects, ctsEnvDataSource=ctsEnvDataSource, ctsDeviceId=ctsDeviceId, ctsEnvSecurityGroupTagGenId=ctsEnvSecurityGroupTagGenId, ctsSwKeystoreFileErrNotif=ctsSwKeystoreFileErrNotif, ctsEnvDataTimeToRefresh=ctsEnvDataTimeToRefresh, ctsKeystorePasswordRecordEntry=ctsKeystorePasswordRecordEntry, ctsCredentialObjects=ctsCredentialObjects, ctsEnvSecurityGroupNameSgt=ctsEnvSecurityGroupNameSgt, ctsCacheFileAccessErrNotifEnable=ctsCacheFileAccessErrNotifEnable, ciscoTrustSecMIBGroups=ciscoTrustSecMIBGroups, ctsCacheFileAccessErrNotif=ctsCacheFileAccessErrNotif, ciscoTrustSecMIBCompliance3=ciscoTrustSecMIBCompliance3, ctsKeystoreFwAlerts=ctsKeystoreFwAlerts, ctsKeystoreCorruptions=ctsKeystoreCorruptions, ctsEnvDataTimeLeft=ctsEnvDataTimeLeft, ctsEnvSecurityGroupName=ctsEnvSecurityGroupName, ctsCriticalAuthEnabled=ctsCriticalAuthEnabled, ciscoTrustSecHwKeystoreInfoGroup=ciscoTrustSecHwKeystoreInfoGroup, ctsEnvSecurityGroupNameTable=ctsEnvSecurityGroupNameTable, ctsKeystorePacRecordTable=ctsKeystorePacRecordTable, ctsNotifsControlObjects=ctsNotifsControlObjects, ctsCacheNvStorage=ctsCacheNvStorage, ctsSecurityGroupTagId=ctsSecurityGroupTagId, ctsCriticalAuthFallback=ctsCriticalAuthFallback, ciscoTrustSecNotifsMessageStringInfoGroup=ciscoTrustSecNotifsMessageStringInfoGroup, ctsSwKeystoreSyncFailNotifReason=ctsSwKeystoreSyncFailNotifReason, ctsKeystorePacRecordType=ctsKeystorePacRecordType, ciscoTrustSecCacheFileNotifsControlGroup=ciscoTrustSecCacheFileNotifsControlGroup, ctsPacType=ctsPacType, ctsSrcEntropyFailNotif=ctsSrcEntropyFailNotif, ciscoTrustSecMIBConform=ciscoTrustSecMIBConform, ciscoTrustSecEnvDataGroup=ciscoTrustSecEnvDataGroup, ctsSapRandomNumberFailNotifEnable=ctsSapRandomNumberFailNotifEnable, ctsSgtAssignmentMethod=ctsSgtAssignmentMethod, ctsEnvDataLastDownloadStatus=ctsEnvDataLastDownloadStatus, ctsNotifMessageString=ctsNotifMessageString, ctsSwKeystoreFileErrNotifEnable=ctsSwKeystoreFileErrNotifEnable, ctsEnvDataAction=ctsEnvDataAction, ctsPacInfoTable=ctsPacInfoTable, ctsEnvSecurityGroupNameSgtFlag=ctsEnvSecurityGroupNameSgtFlag, ctsKeystorePacRecordName=ctsKeystorePacRecordName, ctsCriticalAuthViewDefaultPmk=ctsCriticalAuthViewDefaultPmk, ctsEnvSecurityGroupTagId=ctsEnvSecurityGroupTagId, ciscoTrustSecCredentialsGroup=ciscoTrustSecCredentialsGroup, ctsKeystorePacRecordEntry=ctsKeystorePacRecordEntry, ciscoTrustSecCrtclAuthGroup=ciscoTrustSecCrtclAuthGroup, ctsSapRandomNumberFailNotif=ctsSapRandomNumberFailNotif, ciscoTrustSecCtrDrbgNotifsControlGroup=ciscoTrustSecCtrDrbgNotifsControlGroup, ctsFileErrNotifReason=ctsFileErrNotifReason, ctsKeystoreRxBadChecksums=ctsKeystoreRxBadChecksums, ctsCacheObjects=ctsCacheObjects, ctsKeystoreFwVersion=ctsKeystoreFwVersion, ctsCriticalAuthDefaultPmk=ctsCriticalAuthDefaultPmk)
