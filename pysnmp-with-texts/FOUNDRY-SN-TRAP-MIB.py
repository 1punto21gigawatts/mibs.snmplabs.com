#
# PySNMP MIB module FOUNDRY-SN-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:15:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
snChasPwrSupplyIndex, snAgGblTrapMessage, snChasPwrSupplyStatus, snChasPwrSupplyDescription, snChasFanDescription, snChasFanIndex, snAgentBrdIndex = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex", "snAgGblTrapMessage", "snChasPwrSupplyStatus", "snChasPwrSupplyDescription", "snChasFanDescription", "snChasFanIndex", "snAgentBrdIndex")
snOspfExtLsdbLimit, snOspfVirtNbrArea, snOspfVirtIfStatusNeighbor, snOspfVirtIfStatusState, snOspfLsdbType, snOspfLsdbRouterId, snOspfLsdbAreaId, snOspfVirtNbrRtrId, snOspfPacketSrc, snOspfConfigErrorType, snOspfNbrState, snOspfIfStatusIpAddress, snOspfLsdbLsId, snOspfNbrIpAddr, snOspfVirtNbrState, snOspfRouterId, snOspfVirtIfStatusAreaID, snOspfNbrRtrId, snOspfPacketType, snOspfIfStatusState = mibBuilder.importSymbols("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfExtLsdbLimit", "snOspfVirtNbrArea", "snOspfVirtIfStatusNeighbor", "snOspfVirtIfStatusState", "snOspfLsdbType", "snOspfLsdbRouterId", "snOspfLsdbAreaId", "snOspfVirtNbrRtrId", "snOspfPacketSrc", "snOspfConfigErrorType", "snOspfNbrState", "snOspfIfStatusIpAddress", "snOspfLsdbLsId", "snOspfNbrIpAddr", "snOspfVirtNbrState", "snOspfRouterId", "snOspfVirtIfStatusAreaID", "snOspfNbrRtrId", "snOspfPacketType", "snOspfIfStatusState")
foundry, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "foundry")
snL4TrapRealServerName, snL4TcpSynLimit, snL4MaxSessionLimit, snL4TrapRealServerCurConnections, snL4TrapRealServerPort, snL4TrapRealServerIP = mibBuilder.importSymbols("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName", "snL4TcpSynLimit", "snL4MaxSessionLimit", "snL4TrapRealServerCurConnections", "snL4TrapRealServerPort", "snL4TrapRealServerIP")
snSwViolatorPortNumber, snSwViolatorMacAddress = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwViolatorPortNumber", "snSwViolatorMacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Integer32, ModuleIdentity, ObjectIdentity, Counter32, NotificationType, NotificationType, iso, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter32", "NotificationType", "NotificationType", "iso", "IpAddress", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snTrapChasPwrSupply = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,1)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyStatus"))
if mibBuilder.loadTexts: snTrapChasPwrSupply.setDescription('The SNMP trap that is generated when a power supply fails to operate normally. The value is a packed bit string; the 2 power supplies status are encoded into 4 bits (a nibble). The following shows the meaning of each bit: (bit 0 is the least significant bit). bit position meaning ------------ ------- 4-31 reserved 3 Power Supply 2 DC (0=bad, 1=good). 2 Power Supply 1 DC (0=bad, 1=good). 1 Power Supply 2 present status (0=present, 1=not-present). 0 Power Supply 1 present status (0=present, 1=not-present).')
snTrapLockedAddressViolation = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,2)).setObjects(("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwViolatorPortNumber"), ("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwViolatorMacAddress"))
if mibBuilder.loadTexts: snTrapLockedAddressViolation.setDescription('The SNMP trap that is generated when more source MAC addresses are received from a port than the maximum number of addresses configured to that port.')
snTrapOspfIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,3)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusState"))
if mibBuilder.loadTexts: snTrapOspfIfStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of a non-virtual OSPF interface. This trap should be generated when the interface state regresses (e.g., goes from Dr to Down) or progresses to a terminal state (i.e., Point-to-Point, DR Other, Dr, or Backup).')
snTrapOspfVirtIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,4)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusState"))
if mibBuilder.loadTexts: snTrapOspfVirtIfStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of an OSPF vir- tual interface. This trap should be generated when the inter- face state regresses (e.g., goes from Point- to-Point to Down) or progresses to a terminal state (i.e., Point-to-Point).')
snOspfNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,5)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfNbrIpAddr"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfNbrRtrId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfNbrState"))
if mibBuilder.loadTexts: snOspfNbrStateChange.setDescription('An ospfNbrStateChange trap signifies that there has been a change in the state of a non- virtual OSPF neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., 2-Way or Full). When an neighbor transitions from or to Full on non-broadcast multi-access and broadcast networks, the trap should be gen- erated by the designated router. A designated router transitioning to Down will be noted by ospfIfStateChange.')
snOspfVirtNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,6)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtNbrArea"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtNbrRtrId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtNbrState"))
if mibBuilder.loadTexts: snOspfVirtNbrStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of an OSPF vir- tual neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., Full).')
snOspfIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,7)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfConfigError.setDescription("An ospfIfConfigError trap signifies that a packet has been received on a non-virtual in- terface from a router whose configuration parameters conflict with this router's confi- guration parameters. Note that the event op- tionMismatch should cause a trap only if it prevents an adjacency from forming.")
snOspfVirtIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,8)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfConfigError.setDescription("An ospfConfigError trap signifies that a pack- et has been received on a virtual interface from a router whose configuration parameters conflict with this router's configuration parameters. Note that the event optionMismatch should cause a trap only if it prevents an ad- jacency from forming.")
snOspfIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,9)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfAuthFailure.setDescription("An ospfIfAuthFailure trap signifies that a packet has been received on a non-virtual in- terface from a router whose authentication key or authentication type conflicts with this router's authentication key or authentication type.")
snOspfVirtIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,10)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfAuthFailure.setDescription("An ospfVirtIfAuthFailure trap signifies that a packet has been received on a virtual interface from a router whose authentication key or au- thentication type conflicts with this router's authentication key or authentication type.")
snOspfIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,11)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfRxBadPacket.setDescription('An ospfIfRxBadPacket trap signifies that an OSPF packet has been received on a non-virtual interface that cannot be parsed.')
snOspfVirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,12)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfRxBadPacket.setDescription('An ospfRxBadPacket trap signifies that an OSPF packet has been received on a virtual interface that cannot be parsed.')
snOspfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,13)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfNbrRtrId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfTxRetransmit.setDescription('An ospfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a non- virtual interface. All packets that may be re- transmitted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
ospfVirtIfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,14)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfPacketType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: ospfVirtIfTxRetransmit.setDescription('An ospfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a virtual interface. All packets that may be retransmit- ted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
snOspfOriginateLsa = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,15)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbAreaId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfOriginateLsa.setDescription('An ospfOriginateLsa trap signifies that a new LSA has been originated by this router. This trap should not be invoked for simple refreshes of LSAs (which happesn every 30 minutes), but instead will only be invoked when an LSA is (re)originated due to a topology change. Addi- tionally, this trap does not include LSAs that are being flushed because they have reached MaxAge.')
snOspfMaxAgeLsa = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,16)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbAreaId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfMaxAgeLsa.setDescription("An ospfMaxAgeLsa trap signifies that one of the LSA in the router's link-state database has aged to MaxAge.")
snOspfLsdbOverflow = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,17)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfExtLsdbLimit"))
if mibBuilder.loadTexts: snOspfLsdbOverflow.setDescription("An ospfLsdbOverflow trap signifies that the number of LSAs in the router's link-state data- base has exceeded ospfExtLsdbLimit.")
snOspfLsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,18)).setObjects(("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("FOUNDRY-SN-OSPF-GROUP-MIB", "snOspfExtLsdbLimit"))
if mibBuilder.loadTexts: snOspfLsdbApproachingOverflow.setDescription("An ospfLsdbApproachingOverflow trap signifies that the number of LSAs in the router's link- state database has exceeded ninety percent of ospfExtLsdbLimit.")
snTrapL4MaxSessionLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,19)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4MaxSessionLimit"))
if mibBuilder.loadTexts: snTrapL4MaxSessionLimitReached.setDescription('The SNMP trap that is generated when the maximum number of connections reached.')
snTrapL4TcpSynLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,20)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TcpSynLimit"))
if mibBuilder.loadTexts: snTrapL4TcpSynLimitReached.setDescription('The SNMP trap that is generated when the number of TCP SYN limits reached.')
snTrapL4RealServerUp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,21)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"))
if mibBuilder.loadTexts: snTrapL4RealServerUp.setDescription('The SNMP trap that is generated when the load balancing real server is up.')
snTrapL4RealServerDown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,22)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"))
if mibBuilder.loadTexts: snTrapL4RealServerDown.setDescription('The SNMP trap that is generated when the load balancing real server is down.')
snTrapL4RealServerPortUp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,23)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerPort"))
if mibBuilder.loadTexts: snTrapL4RealServerPortUp.setDescription('The SNMP trap that is generated when the load balancing real server TCP port is up.')
snTrapL4RealServerPortDown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,24)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerPort"))
if mibBuilder.loadTexts: snTrapL4RealServerPortDown.setDescription('The SNMP trap that is generated when the load balancing real server TCP port is down.')
snTrapL4RealServerMaxConnectionLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,25)).setObjects(("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerIP"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerName"), ("FOUNDRY-SN-SW-L4-SWITCH-GROUP-MIB", "snL4TrapRealServerCurConnections"))
if mibBuilder.loadTexts: snTrapL4RealServerMaxConnectionLimitReached.setDescription('The SNMP trap that is generated when the real server reaches maximum number of connections.')
snTrapL4BecomeStandby = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,26))
if mibBuilder.loadTexts: snTrapL4BecomeStandby.setDescription('The SNMP trap that is generated when the server load balancing switch changes state from active to standby.')
snTrapL4BecomeActive = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,27))
if mibBuilder.loadTexts: snTrapL4BecomeActive.setDescription('The SNMP trap that is generated when the server load balancing switch changes state from standby to active.')
snTrapModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,28)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"))
if mibBuilder.loadTexts: snTrapModuleInserted.setDescription('The SNMP trap that is generated when a module was inserted to the chassis during system running.')
snTrapModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,29)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"))
if mibBuilder.loadTexts: snTrapModuleRemoved.setDescription('The SNMP trap that is generated when a module was removed from the chassis during system running.')
snTrapChasPwrSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,30)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyDescription"))
if mibBuilder.loadTexts: snTrapChasPwrSupplyFailed.setDescription('The SNMP trap that is generated when a power supply fails to operate normally.')
snTrapChasFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,31)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snChasFanIndex"), ("FOUNDRY-SN-AGENT-MIB", "snChasFanDescription"))
if mibBuilder.loadTexts: snTrapChasFanFailed.setDescription('The SNMP trap that is generated when a fan fails to operate normally.')
snTrapLockedAddressViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,32)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapLockedAddressViolation2.setDescription('The SNMP trap that is generated when more source MAC addresses are received from a port than the maximum number of addresses configured to that port.')
snTrapFsrpIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,33)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapFsrpIfStateChange.setDescription('The SNMP trap that is generated when a FSRP routing device changed state from active to standby or vice-versa.')
snTrapVrrpIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,34)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapVrrpIfStateChange.setDescription('The SNMP trap that is generated when a VRRP routing device changed state from master to backup or vice-versa.')
snTrapMgmtModuleRedunStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,35)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMgmtModuleRedunStateChange.setDescription('The SNMP trap that is generated when the management module changes redundancy state.')
snTrapTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,36)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTemperatureWarning.setDescription('The SNMP trap that is generated when the actual temperature reading is above the warning temperature threshold.')
snTrapAccessListDeny = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,37)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapAccessListDeny.setDescription('The SNMP trap that is generated when a packet was denied by an access list.')
snTrapMacFilterDeny = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,38)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapMacFilterDeny.setDescription('The SNMP trap that is generated when a packet was denied by a MAC address filter.')
snTrapL4GslbRemoteUp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,39)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbRemoteUp.setDescription('The SNMP trap that is generated when the connection to the remote SI is established.')
snTrapL4GslbRemoteDown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,40)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbRemoteDown.setDescription('The SNMP trap that is generated when the connection to the remote SI is down.')
snTrapL4GslbRemoteControllerUp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,41)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbRemoteControllerUp.setDescription('The SNMP trap that is generated when the connection to the GSLB SI is established.')
snTrapL4GslbRemoteControllerDown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,42)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbRemoteControllerDown.setDescription('The SNMP trap that is generated when the connection to the GSLB SI is down.')
snTrapL4GslbHealthCheckIpUp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,43)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpUp.setDescription('The SNMP trap that is generated when GSLB health check for an address transitions from down to active state.')
snTrapL4GslbHealthCheckIpDown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,44)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpDown.setDescription('The SNMP trap that is generated when GSLB health check for an address transitions from active to down state.')
snTrapL4GslbHealthCheckIpPortUp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,45)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpPortUp.setDescription('The SNMP trap that is generated when a given port for a health check address is up.')
snTrapL4GslbHealthCheckIpPortDown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,46)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4GslbHealthCheckIpPortDown.setDescription('The SNMP trap that is generated when a given port for a health check address is down.')
snTrapL4FirewallBecomeStandby = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,47))
if mibBuilder.loadTexts: snTrapL4FirewallBecomeStandby.setDescription('The SNMP trap that is generated when the server load balancing switch Firewall changes state from active to standby.')
snTrapL4FirewallBecomeActive = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,48))
if mibBuilder.loadTexts: snTrapL4FirewallBecomeActive.setDescription('The SNMP trap that is generated when the server load balancing switch Firewall changes state from standby to active.')
snTrapL4FirewallPathUp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,49))
if mibBuilder.loadTexts: snTrapL4FirewallPathUp.setDescription('The SNMP trap that is generated when the server load balancing switch Firewall path is up.')
snTrapL4FirewallPathDown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,50))
if mibBuilder.loadTexts: snTrapL4FirewallPathDown.setDescription('The SNMP trap that is generated when the server load balancing switch Firewall path is down.')
snTrapIcmpLocalExceedBurst = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,51)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapIcmpLocalExceedBurst.setDescription('The SNMP trap that is generated when incoming ICMP exceeds burst-MAX.')
snTrapIcmpTransitExceedBurst = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,52)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapIcmpTransitExceedBurst.setDescription('The SNMP trap that is generated when transit ICMP exceeds burst-MAX.')
snTrapTcpLocalExceedBurst = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,53)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTcpLocalExceedBurst.setDescription('The SNMP trap that is generated when incoming TCP SYN exceeds burst-MAX.')
snTrapTcpTransitExceedBurst = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,54)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapTcpTransitExceedBurst.setDescription('The SNMP trap that is generated when transit TCP exceeds burst-MAX.')
snTrapL4ContentVerification = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,55))
if mibBuilder.loadTexts: snTrapL4ContentVerification.setDescription('The SNMP trap that is generated when the HTTP match-list pattern is found.')
snTrapDuplicateIp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,56))
if mibBuilder.loadTexts: snTrapDuplicateIp.setDescription('Duplicate IP address detected.')
snTrapMplsProblem = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,57))
if mibBuilder.loadTexts: snTrapMplsProblem.setDescription('MPLS Problem Detected.')
snTrapMplsException = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,58))
if mibBuilder.loadTexts: snTrapMplsException.setDescription('MPLS Exception Detected.')
snTrapMplsAudit = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,59))
if mibBuilder.loadTexts: snTrapMplsAudit.setDescription('MPLS Audit Trap.')
snTrapMplsDeveloper = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,60))
if mibBuilder.loadTexts: snTrapMplsDeveloper.setDescription('MPLS Developer Trap.')
snTrapNoBmFreeQueue = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,61)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapNoBmFreeQueue.setDescription('The SNMP trap that is generated when no free queue is available in buffer manager.')
snTrapSmcDmaDrop = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,62)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSmcDmaDrop.setDescription('The SNMP trap that is generated when SMC DMA packet is dropped.')
snTrapSmcBpDrop = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,63)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapSmcBpDrop.setDescription('The SNMP trap that is generated when SMC BackPlane packet is dropped.')
snTrapBmWriteSeqDrop = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,64)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapBmWriteSeqDrop.setDescription('The SNMP trap that is generated when BM write sequence packet is dropped.')
snTrapBgpPeerUp = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,65)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapBgpPeerUp.setDescription('The SNMP trap that is generated when the bgp peer is up.')
snTrapBgpPeerDown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,66)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapBgpPeerDown.setDescription('The SNMP trap that is generated when the bgp peer is down.')
snTrapL4RealServerResponseTimeLowerLimit = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,67)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4RealServerResponseTimeLowerLimit.setDescription('The SNMP trap that is generated when the real server average response time exceeds lower threshold.')
snTrapL4RealServerResponseTimeUpperLimit = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,68)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4RealServerResponseTimeUpperLimit.setDescription('The SNMP trap that is generated when the real server average response time exceeds upper threshold.')
snTrapL4TcpAttackRateExceedMax = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,69)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4TcpAttackRateExceedMax.setDescription('The SNMP trap that is generated when the TCP attack rate exceeds configured maximum.')
snTrapL4TcpAttackRateExceedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,70)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4TcpAttackRateExceedThreshold.setDescription('The SNMP trap that is generated when the TCP attack rate exceeds 80% of configured maximum.')
snTrapL4ConnectionRateExceedMax = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,71)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4ConnectionRateExceedMax.setDescription('The SNMP trap that is generated when the L4 connection rate exceeds configured maximum.')
snTrapL4ConnectionRateExceedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,72)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapL4ConnectionRateExceedThreshold.setDescription('The SNMP trap that is generated when the L4 connection rate exceeds 80% of configured maximum')
snTrapRunningConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,73)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapRunningConfigChanged.setDescription('The SNMP trap that is generated when the running configuration was changed.')
snTrapStartupConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,74)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapStartupConfigChanged.setDescription('The SNMP trap that is generated when the startup configuration was changed.')
snTrapUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,75)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapUserLogin.setDescription('The SNMP trap that is generated when user login.')
snTrapUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,76)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapUserLogout.setDescription('The SNMP trap that is generated when user logout.')
snTrapPortSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,77)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPortSecurityViolation.setDescription('The SNMP trap that is generated when insecure MAC addresses are received from a port with MAC security feature enabled.')
snTrapPortSecurityShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1991) + (0,78)).setObjects(("FOUNDRY-SN-AGENT-MIB", "snAgGblTrapMessage"))
if mibBuilder.loadTexts: snTrapPortSecurityShutdown.setDescription('The SNMP trap that is generated when insecure MAC addresses are received from a port caused the port to shutdown.')
mibBuilder.exportSymbols("FOUNDRY-SN-TRAP-MIB", snTrapUserLogin=snTrapUserLogin, snTrapTemperatureWarning=snTrapTemperatureWarning, snTrapMgmtModuleRedunStateChange=snTrapMgmtModuleRedunStateChange, snTrapMplsDeveloper=snTrapMplsDeveloper, snTrapBmWriteSeqDrop=snTrapBmWriteSeqDrop, snTrapStartupConfigChanged=snTrapStartupConfigChanged, snOspfIfConfigError=snOspfIfConfigError, snOspfVirtIfRxBadPacket=snOspfVirtIfRxBadPacket, snTrapFsrpIfStateChange=snTrapFsrpIfStateChange, snTrapChasFanFailed=snTrapChasFanFailed, snTrapAccessListDeny=snTrapAccessListDeny, snTrapMplsException=snTrapMplsException, snTrapChasPwrSupplyFailed=snTrapChasPwrSupplyFailed, snTrapL4TcpSynLimitReached=snTrapL4TcpSynLimitReached, snTrapL4FirewallBecomeActive=snTrapL4FirewallBecomeActive, snTrapIcmpLocalExceedBurst=snTrapIcmpLocalExceedBurst, snTrapL4ConnectionRateExceedMax=snTrapL4ConnectionRateExceedMax, snOspfNbrStateChange=snOspfNbrStateChange, snTrapLockedAddressViolation=snTrapLockedAddressViolation, snTrapL4FirewallPathUp=snTrapL4FirewallPathUp, snTrapTcpLocalExceedBurst=snTrapTcpLocalExceedBurst, snOspfIfRxBadPacket=snOspfIfRxBadPacket, snOspfVirtIfConfigError=snOspfVirtIfConfigError, snTrapUserLogout=snTrapUserLogout, snTrapL4GslbHealthCheckIpDown=snTrapL4GslbHealthCheckIpDown, snTrapL4GslbRemoteDown=snTrapL4GslbRemoteDown, snTrapL4GslbHealthCheckIpUp=snTrapL4GslbHealthCheckIpUp, snOspfMaxAgeLsa=snOspfMaxAgeLsa, snTrapVrrpIfStateChange=snTrapVrrpIfStateChange, snOspfLsdbOverflow=snOspfLsdbOverflow, snTrapL4GslbRemoteControllerDown=snTrapL4GslbRemoteControllerDown, snTrapLockedAddressViolation2=snTrapLockedAddressViolation2, snOspfLsdbApproachingOverflow=snOspfLsdbApproachingOverflow, snTrapL4FirewallBecomeStandby=snTrapL4FirewallBecomeStandby, snOspfOriginateLsa=snOspfOriginateLsa, snTrapSmcBpDrop=snTrapSmcBpDrop, snTrapBgpPeerUp=snTrapBgpPeerUp, snOspfVirtNbrStateChange=snOspfVirtNbrStateChange, snTrapL4MaxSessionLimitReached=snTrapL4MaxSessionLimitReached, snOspfIfAuthFailure=snOspfIfAuthFailure, snTrapModuleInserted=snTrapModuleInserted, snTrapRunningConfigChanged=snTrapRunningConfigChanged, snTrapModuleRemoved=snTrapModuleRemoved, snTrapL4RealServerDown=snTrapL4RealServerDown, snTrapBgpPeerDown=snTrapBgpPeerDown, snTrapL4FirewallPathDown=snTrapL4FirewallPathDown, snTrapL4RealServerResponseTimeUpperLimit=snTrapL4RealServerResponseTimeUpperLimit, snOspfTxRetransmit=snOspfTxRetransmit, snTrapL4GslbHealthCheckIpPortDown=snTrapL4GslbHealthCheckIpPortDown, snTrapL4TcpAttackRateExceedMax=snTrapL4TcpAttackRateExceedMax, snTrapL4TcpAttackRateExceedThreshold=snTrapL4TcpAttackRateExceedThreshold, snOspfVirtIfAuthFailure=snOspfVirtIfAuthFailure, snTrapOspfVirtIfStateChange=snTrapOspfVirtIfStateChange, snTrapL4RealServerMaxConnectionLimitReached=snTrapL4RealServerMaxConnectionLimitReached, snTrapChasPwrSupply=snTrapChasPwrSupply, snTrapMplsProblem=snTrapMplsProblem, snTrapL4GslbRemoteControllerUp=snTrapL4GslbRemoteControllerUp, snTrapPortSecurityShutdown=snTrapPortSecurityShutdown, snTrapSmcDmaDrop=snTrapSmcDmaDrop, ospfVirtIfTxRetransmit=ospfVirtIfTxRetransmit, snTrapL4ContentVerification=snTrapL4ContentVerification, snTrapL4BecomeStandby=snTrapL4BecomeStandby, snTrapTcpTransitExceedBurst=snTrapTcpTransitExceedBurst, snTrapL4ConnectionRateExceedThreshold=snTrapL4ConnectionRateExceedThreshold, snTrapOspfIfStateChange=snTrapOspfIfStateChange, snTrapL4RealServerPortUp=snTrapL4RealServerPortUp, snTrapNoBmFreeQueue=snTrapNoBmFreeQueue, snTrapL4BecomeActive=snTrapL4BecomeActive, snTrapDuplicateIp=snTrapDuplicateIp, snTrapMplsAudit=snTrapMplsAudit, snTrapL4RealServerUp=snTrapL4RealServerUp, snTrapL4GslbHealthCheckIpPortUp=snTrapL4GslbHealthCheckIpPortUp, snTrapIcmpTransitExceedBurst=snTrapIcmpTransitExceedBurst, snTrapL4RealServerPortDown=snTrapL4RealServerPortDown, snTrapMacFilterDeny=snTrapMacFilterDeny, snTrapPortSecurityViolation=snTrapPortSecurityViolation, snTrapL4GslbRemoteUp=snTrapL4GslbRemoteUp, snTrapL4RealServerResponseTimeLowerLimit=snTrapL4RealServerResponseTimeLowerLimit)
