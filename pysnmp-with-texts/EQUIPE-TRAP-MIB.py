#
# PySNMP MIB module EQUIPE-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EQUIPE-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
eqFaultScope, EqAtmPvcType, eqFaultTime, eqFaultSwlm, eqHardDiskUsedLowMark, eqModuleRedOperRole, eqStratumCentRedStatus, eqModuleShelfId, EqSeverityLevel, eqFanUnitEid, EqApsLineState, eqHardDiskUsedHiMark, eqFaultModule, eqModuleSlotId, eqHardDiskEid, eqModuleEid, eqStratumCentStatus, EqIfType = mibBuilder.importSymbols("EQUIPE-SYSTEM-MIB", "eqFaultScope", "EqAtmPvcType", "eqFaultTime", "eqFaultSwlm", "eqHardDiskUsedLowMark", "eqModuleRedOperRole", "eqStratumCentRedStatus", "eqModuleShelfId", "EqSeverityLevel", "eqFanUnitEid", "EqApsLineState", "eqHardDiskUsedHiMark", "eqFaultModule", "eqModuleSlotId", "eqHardDiskEid", "eqModuleEid", "eqStratumCentStatus", "EqIfType")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, enterprises, Unsigned32, Counter32, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, NotificationType, TimeTicks, Counter64, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "enterprises", "Unsigned32", "Counter32", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "NotificationType", "TimeTicks", "Counter64", "Integer32", "ObjectIdentity")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
equipe = MibIdentifier((1, 3, 6, 1, 4, 1, 5022))
eqTraps = ModuleIdentity((1, 3, 6, 1, 4, 1, 5022, 4))
if mibBuilder.loadTexts: eqTraps.setLastUpdated('0112040000Z')
if mibBuilder.loadTexts: eqTraps.setOrganization('')
if mibBuilder.loadTexts: eqTraps.setContactInfo('Jas Parmar Equipe Communications 100 Nagog Park Acton MA 01720')
if mibBuilder.loadTexts: eqTraps.setDescription('This is the Equipe traps MIB module.')
eqTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 1))
eqSystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 2))
eqModuleTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 3))
eqIfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 4))
eqAppsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 5))
eqSrmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 5, 1))
eqSonetTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2))
eqAtmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 5, 3))
eqIpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 5, 4))
eqMplsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 4, 5, 5))
eqSystemId = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: eqSystemId.setStatus('current')
if mibBuilder.loadTexts: eqSystemId.setDescription('The unique name assigned to the system.')
eqEid = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: eqEid.setStatus('current')
if mibBuilder.loadTexts: eqEid.setDescription('The unique integer value assigned to a system resource.')
eqIfName = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 3), DisplayString())
if mibBuilder.loadTexts: eqIfName.setStatus('current')
if mibBuilder.loadTexts: eqIfName.setDescription('The textual name assigned to an interface.')
eqIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 4), IpAddress())
if mibBuilder.loadTexts: eqIpAddress.setStatus('current')
if mibBuilder.loadTexts: eqIpAddress.setDescription('An ip address representing a host.')
eqFileName = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 5), DisplayString())
if mibBuilder.loadTexts: eqFileName.setStatus('current')
if mibBuilder.loadTexts: eqFileName.setDescription('An ascii string representing name of a file.')
eqTrapDescr = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 6), DisplayString())
if mibBuilder.loadTexts: eqTrapDescr.setStatus('current')
if mibBuilder.loadTexts: eqTrapDescr.setDescription('An ascii string containing textual description for a trap.')
eqModuleFuseType = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fuseTypeA", 1), ("fuseTypeB", 2))))
if mibBuilder.loadTexts: eqModuleFuseType.setStatus('current')
if mibBuilder.loadTexts: eqModuleFuseType.setDescription('The module fuse type.')
eqApsLineState = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 8), EqApsLineState())
if mibBuilder.loadTexts: eqApsLineState.setStatus('current')
if mibBuilder.loadTexts: eqApsLineState.setDescription('The APS line state value.')
eqIfType = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 9), EqIfType())
if mibBuilder.loadTexts: eqIfType.setStatus('current')
if mibBuilder.loadTexts: eqIfType.setDescription('The equipe interface type.')
eqAtmPvcType = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 10), EqAtmPvcType())
if mibBuilder.loadTexts: eqAtmPvcType.setStatus('current')
if mibBuilder.loadTexts: eqAtmPvcType.setDescription('The equipe atm pvc type.')
eqEventTime = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 11), DateAndTime())
if mibBuilder.loadTexts: eqEventTime.setStatus('current')
if mibBuilder.loadTexts: eqEventTime.setDescription('The time of an event occurrence.')
eqThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: eqThresholdValue.setStatus('current')
if mibBuilder.loadTexts: eqThresholdValue.setDescription('The configured value of a threshold.')
eqCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: eqCurrentValue.setStatus('current')
if mibBuilder.loadTexts: eqCurrentValue.setDescription('The current value of a resource parameter.')
eqResourceId = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 14), DisplayString())
if mibBuilder.loadTexts: eqResourceId.setStatus('current')
if mibBuilder.loadTexts: eqResourceId.setDescription('The string identifying a resource.')
eqSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 5022, 4, 1, 15), EqSeverityLevel())
if mibBuilder.loadTexts: eqSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: eqSeverityLevel.setDescription('The severity level of an event occurrence.')
eqHardDiskUsedHiMarkReached = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 1)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqHardDiskEid"), ("EQUIPE-SYSTEM-MIB", "eqHardDiskUsedHiMark"))
if mibBuilder.loadTexts: eqHardDiskUsedHiMarkReached.setStatus('current')
if mibBuilder.loadTexts: eqHardDiskUsedHiMarkReached.setDescription('This trap is generated when the percentage of used disk space on the hard disk has reached the value indicated by eqHardDiskUsedHiMark. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the hard disk resides. eqModuleSlotId is the (shelf-relative) slot id in which the hard disk resides. To reduce flapping, this trap is only generated if the value for this object had previously crossed the eqHardDiskUsedLowMark.')
eqHardDiskUsedLowMarkReached = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 2)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqHardDiskEid"), ("EQUIPE-SYSTEM-MIB", "eqHardDiskUsedLowMark"))
if mibBuilder.loadTexts: eqHardDiskUsedLowMarkReached.setStatus('current')
if mibBuilder.loadTexts: eqHardDiskUsedLowMarkReached.setDescription('This trap is generated when the percentage of used disk space on the hard disk has reached the value indicated by eqHardDiskUsedLowMark. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the hard disk resides. eqModuleSlotId is the (shelf-relative) slot id in which the hard disk resides. To reduce flapping, this trap is only generated if the value for this object had previously crossed the eqHardDiskUsedHiMark.')
eqFanUnitFailed = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 3)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqFanUnitEid"))
if mibBuilder.loadTexts: eqFanUnitFailed.setStatus('current')
if mibBuilder.loadTexts: eqFanUnitFailed.setDescription('This trap indicates that a fan unit failed. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the fan unit resides. eqModuleSlotId is the (shelf-relative) slot id in which the fan unit resides.')
eqFanUnitFaulty = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 4)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqFanUnitEid"))
if mibBuilder.loadTexts: eqFanUnitFaulty.setStatus('current')
if mibBuilder.loadTexts: eqFanUnitFaulty.setDescription('This trap indicates that the RPM of a fan unit has gone below x rpm. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the fan unit resides. eqModuleSlotId is the (shelf-relative) slot id in which the fan unit resides.')
eqAcctDataWriteToDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 5)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"))
if mibBuilder.loadTexts: eqAcctDataWriteToDiskFailed.setStatus('current')
if mibBuilder.loadTexts: eqAcctDataWriteToDiskFailed.setDescription('This trap indicates that the accounting server failed to write the data to the local hard disk. eqTrapDescr provides a textual description for this trap.')
eqAcctDataFileDeletedBeforeTransfer = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 6)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-TRAP-MIB", "eqFileName"), ("EQUIPE-TRAP-MIB", "eqSystemId"))
if mibBuilder.loadTexts: eqAcctDataFileDeletedBeforeTransfer.setStatus('current')
if mibBuilder.loadTexts: eqAcctDataFileDeletedBeforeTransfer.setDescription('This trap indicates that an accounting file was deleted before it had a chance to be transferred out of the box to an accounting server. eqTrapDescr provides a textual description for this trap. eqFileName is the name of the file that was deleted before it could be transferred out of the box. eqSystemId is the id assigned to the system generating the trap.')
eqAcctDataXferError = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 7)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-TRAP-MIB", "eqIpAddress"), ("EQUIPE-TRAP-MIB", "eqFileName"), ("EQUIPE-TRAP-MIB", "eqSystemId"))
if mibBuilder.loadTexts: eqAcctDataXferError.setStatus('current')
if mibBuilder.loadTexts: eqAcctDataXferError.setDescription('This trap indicates that the accounting server encountered an error while transferring an accounting file to the accounting server. The system will retry the transfer to an alternative host if one is configured. eqTrapDescr provides a textual description for this trap. eqIpAddress is the ip address of the host to which the file was being transferred. eqFileName is the name of the file that encountered the error. eqSystemId is the id assigned to the system generating the trap.')
eqLogServerWriteToDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 8)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"))
if mibBuilder.loadTexts: eqLogServerWriteToDiskFailed.setStatus('current')
if mibBuilder.loadTexts: eqLogServerWriteToDiskFailed.setDescription('This trap indicates that the log server failed to write system log data out to the local hard disk. eqTrapDescr provides a textual description for this trap.')
eqLogDataFileDeletedBeforeTransfer = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 9)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-TRAP-MIB", "eqFileName"), ("EQUIPE-TRAP-MIB", "eqSystemId"))
if mibBuilder.loadTexts: eqLogDataFileDeletedBeforeTransfer.setStatus('current')
if mibBuilder.loadTexts: eqLogDataFileDeletedBeforeTransfer.setDescription('This trap indicates that an log file was deleted before it had a chance to be transferred out of the box to a logging server. eqTrapDescr provides a textual description for this trap. eqFileName is the name of the file that was deleted before it could be transferred out of the box. eqSystemId is the id assigned to the system generating the trap.')
eqLogDataXferError = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 10)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-TRAP-MIB", "eqIpAddress"), ("EQUIPE-TRAP-MIB", "eqFileName"), ("EQUIPE-TRAP-MIB", "eqSystemId"))
if mibBuilder.loadTexts: eqLogDataXferError.setStatus('current')
if mibBuilder.loadTexts: eqLogDataXferError.setDescription('This trap indicates that the log server failed to transfer the system log file out of the box to an external host. The system will retry the transfer to an alternative host if one is configured. eqTrapDescr provides a textual description for this trap. eqIpAddress is the ip address of the host to which the file was being transferred. eqFileName is the name of the file that encountered the error. eqSystemId is the id assigned to the system generating the trap.')
eqMidPlaneParityError = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 11)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"))
if mibBuilder.loadTexts: eqMidPlaneParityError.setStatus('current')
if mibBuilder.loadTexts: eqMidPlaneParityError.setDescription('This trap indicates that a parity error occurred on the midplane. eqTrapDescr provides a textual description for this trap.')
eqSonetTimingCfgChanged = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 12)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-TRAP-MIB", "eqEid"))
if mibBuilder.loadTexts: eqSonetTimingCfgChanged.setStatus('current')
if mibBuilder.loadTexts: eqSonetTimingCfgChanged.setDescription('This trap indicates that the sonet timing config was changed via the NMS. eqEid indicates the eid of the sonet timing node that was modified.')
eqRisingThresholdAlert = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 13)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-TRAP-MIB", "eqEid"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqEventTime"), ("EQUIPE-TRAP-MIB", "eqThresholdValue"), ("EQUIPE-TRAP-MIB", "eqCurrentValue"), ("EQUIPE-TRAP-MIB", "eqResourceId"), ("EQUIPE-TRAP-MIB", "eqSeverityLevel"))
if mibBuilder.loadTexts: eqRisingThresholdAlert.setStatus('current')
if mibBuilder.loadTexts: eqRisingThresholdAlert.setDescription('This trap indicates that the a rising threshold crossing has occurred for the specified entity. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id on which the entity exists. eqModuleSlotId is the (shelf-relative) slot id on which the entity exists. eqEid is the id of the entity. eqIfName is the name of the entity. eqEventTime is the time of the threshold crossing. eqThresholdValue is the configured value of the threshold. eqCurrentValue is the current value of the resource parameter. eqResourceId is the string identifying the resource parameter. eqSeverityLevel is the configured severity for this threshold crossing.')
eqFallingThresholdAlert = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 2, 14)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-TRAP-MIB", "eqEid"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqEventTime"), ("EQUIPE-TRAP-MIB", "eqThresholdValue"), ("EQUIPE-TRAP-MIB", "eqCurrentValue"), ("EQUIPE-TRAP-MIB", "eqResourceId"), ("EQUIPE-TRAP-MIB", "eqSeverityLevel"))
if mibBuilder.loadTexts: eqFallingThresholdAlert.setStatus('current')
if mibBuilder.loadTexts: eqFallingThresholdAlert.setDescription('This trap indicates that the a falling threshold crossing has occurred for the specified entity. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id on which the entity exists. eqModuleSlotId is the (shelf-relative) slot id on which the entity exists. eqEid is the id of the entity. eqIfName is the name of the entity. eqEventTime is the time of the threshold crossing. eqThresholdValue is the configured value of the threshold. eqCurrentValue is the current value of the resource parameter. eqResourceId is the string identifying the resource parameter. eqSeverityLevel is the configured severity for this threshold crossing.')
eqModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 1)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"))
if mibBuilder.loadTexts: eqModuleInserted.setStatus('current')
if mibBuilder.loadTexts: eqModuleInserted.setDescription('This trap indicates that a module has been inserted in a slot. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module.')
eqModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 2)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"))
if mibBuilder.loadTexts: eqModuleRemoved.setStatus('current')
if mibBuilder.loadTexts: eqModuleRemoved.setDescription('This trap indicates that a module has been removed from a slot. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module.')
eqModuleWentOffline = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 3)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"))
if mibBuilder.loadTexts: eqModuleWentOffline.setStatus('current')
if mibBuilder.loadTexts: eqModuleWentOffline.setDescription('This trap indicates that a module has been taken offline. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module.')
eqModuleReset = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 4)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"))
if mibBuilder.loadTexts: eqModuleReset.setStatus('current')
if mibBuilder.loadTexts: eqModuleReset.setDescription('This trap indicates that a module has been reset. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module.')
eqModuleFuseBlownMother = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 5)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"), ("EQUIPE-TRAP-MIB", "eqModuleFuseType"))
if mibBuilder.loadTexts: eqModuleFuseBlownMother.setStatus('current')
if mibBuilder.loadTexts: eqModuleFuseBlownMother.setDescription('This trap indicates that an A/B fuse has blown on a mother board. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module. eqModuleFuseType indicates the blown fuse (A or B).')
eqModuleFuseBlownDaughter = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 6)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"), ("EQUIPE-TRAP-MIB", "eqModuleFuseType"))
if mibBuilder.loadTexts: eqModuleFuseBlownDaughter.setStatus('current')
if mibBuilder.loadTexts: eqModuleFuseBlownDaughter.setDescription('This trap indicates that an A/B fuse has blown on a daughter board. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module. eqModuleFuseType indicates the blown fuse (A or B).')
eqModulePowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 7)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"))
if mibBuilder.loadTexts: eqModulePowerSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: eqModulePowerSupplyFailed.setDescription('This trap indicates that a power supply unit has failed. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module.')
eqModuleRedRoleChanged = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 8)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"), ("EQUIPE-SYSTEM-MIB", "eqModuleRedOperRole"))
if mibBuilder.loadTexts: eqModuleRedRoleChanged.setStatus('current')
if mibBuilder.loadTexts: eqModuleRedRoleChanged.setDescription("This trap indicates that a module's redundancy role has changed. eqTrapDescr provides a textual description for this trap. eqModuleEid is the eid of the module. eqModuleRedOperRole is the module's new redundancy role.")
eqModuleTypeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 9)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"))
if mibBuilder.loadTexts: eqModuleTypeMismatch.setStatus('current')
if mibBuilder.loadTexts: eqModuleTypeMismatch.setDescription('This trap indicates that a module has been inserted in a slot, and the module does not match the module that was there previously, eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module.')
eqModuleStratumCentStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 10)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"), ("EQUIPE-SYSTEM-MIB", "eqStratumCentStatus"))
if mibBuilder.loadTexts: eqModuleStratumCentStatusChanged.setStatus('current')
if mibBuilder.loadTexts: eqModuleStratumCentStatusChanged.setDescription('This trap indicates that the central stratum timing subsystem has changed status. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module. eqStratumCentStatus is the new status of the stratum timing subsystem.')
eqModuleStratumCentRedStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 3, 11)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-SYSTEM-MIB", "eqModuleEid"), ("EQUIPE-SYSTEM-MIB", "eqStratumCentRedStatus"))
if mibBuilder.loadTexts: eqModuleStratumCentRedStatusChanged.setStatus('current')
if mibBuilder.loadTexts: eqModuleStratumCentRedStatusChanged.setDescription('This trap indicates that the central stratum timing subsystem has changed redundancy status. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the module resides. eqModuleSlotId is the (shelf-relative) slot id in which the module resides. eqModuleEid is the eid of the module. eqStratumCentRedStatus is the new redundancy status of the stratum timing subsystem.')
eqIfAdded = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 4, 1)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqIfType"))
if mibBuilder.loadTexts: eqIfAdded.setStatus('current')
if mibBuilder.loadTexts: eqIfAdded.setDescription('This trap indicates that an interface has been added. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the interface has been added. eqModuleSlotId is the (shelf-relative) slot id in which the interface has been added. ifIndex is the id of the newly added interface. eqIfName is the name of the newly added interface. eqIfType is the interface type of the newly added interface.')
eqIfRemoved = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 4, 2)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqIfType"))
if mibBuilder.loadTexts: eqIfRemoved.setStatus('current')
if mibBuilder.loadTexts: eqIfRemoved.setDescription('This trap indicates that an interface has been deleted. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the interface has been deleted. eqModuleSlotId is the (shelf-relative) slot id in which the interface has been deleted. ifIndex is the id of the deleted interface. eqIfName is the name of the deleted interface. eqIfType is the interface type of the deleted interface.')
eqIfModified = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 4, 3)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqIfType"))
if mibBuilder.loadTexts: eqIfModified.setStatus('current')
if mibBuilder.loadTexts: eqIfModified.setDescription('This trap indicates that an interface has been modified. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the interface has been modified. eqModuleSlotId is the (shelf-relative) slot id in which the interface has been modified. ifIndex is the id of the modified interface. eqIfName is the name of the modified interface. eqIfType is the interface type of the modified interface.')
eqAtmPvcAdded = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 4, 4)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-TRAP-MIB", "eqEid"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqAtmPvcType"))
if mibBuilder.loadTexts: eqAtmPvcAdded.setStatus('current')
if mibBuilder.loadTexts: eqAtmPvcAdded.setDescription('This trap indicates that an atm pvc has been added. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the atm pvc has been added. eqModuleSlotId is the (shelf-relative) slot id in which the atm pvc has been added. ifIndex is the id of the newly added atm pvc. eqIfName is the name of the newly added atm pvc. eqAtmPvcType is the pvc type of the newly added atm pvc.')
eqAtmPvcRemoved = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 4, 5)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-TRAP-MIB", "eqEid"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqAtmPvcType"))
if mibBuilder.loadTexts: eqAtmPvcRemoved.setStatus('current')
if mibBuilder.loadTexts: eqAtmPvcRemoved.setDescription('This trap indicates that an atm pvc has been deleted. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the atm pvc has been deleted. eqModuleSlotId is the (shelf-relative) slot id in which the atm pvc has been deleted. ifIndex is the id of the deleted atm pvc. eqIfName is the name of the deleted atm pvc. eqAtmPvcIfType is the pvc type of the deleted atm pvc.')
eqAtmPvcModified = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 4, 6)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("EQUIPE-TRAP-MIB", "eqEid"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqAtmPvcType"))
if mibBuilder.loadTexts: eqAtmPvcModified.setStatus('current')
if mibBuilder.loadTexts: eqAtmPvcModified.setDescription('This trap indicates that an atm pvc has been modified. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the atm pvc has been modified. eqModuleSlotId is the (shelf-relative) slot id in which the atm pvc has been modified. ifIndex is the id of the modified atm pvc. eqIfName is the name of the modified atm pvc. eqAtmPvcIfType is the pvc type of the modified atm pvc.')
eqSonetApsSwitchEvent = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2, 1)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"), ("EQUIPE-TRAP-MIB", "eqApsLineState"))
if mibBuilder.loadTexts: eqSonetApsSwitchEvent.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsSwitchEvent.setDescription('This trap indicates that an aps protection switch event has taken place and the protecting line is now in the indicated state. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the sonet port is located. eqModuleSlotId is the (shelf-relative) slot id in which the sonet port is located. ifIndex is the eid of the sonet port. eqIfName is the name of the physical sonet port. eqApsLineState is the new state of the protecting line.')
eqSonetApsWorkingLineRestored = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2, 2)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"))
if mibBuilder.loadTexts: eqSonetApsWorkingLineRestored.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsWorkingLineRestored.setDescription('This trap indicates that a working line has resumed carrying user traffic. This could be due to an auto switch condition that has cleared or due to a problem detected on the working line. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the sonet port is located. eqModuleSlotId is the (shelf-relative) slot id in which the sonet port is located. ifIndex is the eid of the sonet port. eqIfName is the name of the physical sonet port.')
eqSonetApsModeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2, 3)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"))
if mibBuilder.loadTexts: eqSonetApsModeMismatch.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsModeMismatch.setDescription("This trap indicates that a mode mismatch has been detected based on the port's aps configuration and the received K2 byte. This can happen when one LTE is configured for 1+1 APS and the other for 1:N APS. The LTE configured for 1:N will fallback to 1+1 mode. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the sonet port is located. eqModuleSlotId is the (shelf-relative) slot id in which the sonet port is located. ifIndex is the eid of the sonet port. eqIfName is the name of the physical sonet port.")
eqSonetApsProtectLineFailure = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2, 4)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"))
if mibBuilder.loadTexts: eqSonetApsProtectLineFailure.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsProtectLineFailure.setDescription('This trap indicates that a protecting line is now in a failed state. APS switchover to the protection line will not be possible. If the protecting line was carrying user traffic, it is switched back to the working line. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the sonet port is located. eqModuleSlotId is the (shelf-relative) slot id in which the sonet port is located. ifIndex is the eid of the sonet port. eqIfName is the name of the physical sonet port.')
eqSonetApsProtectLineRestored = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2, 5)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"))
if mibBuilder.loadTexts: eqSonetApsProtectLineRestored.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsProtectLineRestored.setDescription('This trap indicates that protection line is now in an operational state and an aps switchover to protection is now possible. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the sonet port is located. eqModuleSlotId is the (shelf-relative) slot id in which the sonet port is located. ifIndex is the eid of the sonet port. eqIfName is the name of the physical sonet port.')
eqSonetApsProtectByteFailure = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2, 6)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"))
if mibBuilder.loadTexts: eqSonetApsProtectByteFailure.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsProtectByteFailure.setDescription('This trap indicates that the protection line has declared a protection byte failure. This happens when a protection byte defect or inconsistent K1 byte is received and the condition persists for 2.5 seconds. When this happens, aps switchover to protection is prohibited. If the protection line was carrying any user traffic, it is switched over to the working line. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the sonet port is located. eqModuleSlotId is the (shelf-relative) slot id in which the sonet port is located. ifIndex is the eid of the sonet port. eqIfName is the name of the physical sonet port.')
eqSonetApsFarEndProtectLineFailure = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2, 7)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"))
if mibBuilder.loadTexts: eqSonetApsFarEndProtectLineFailure.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsFarEndProtectLineFailure.setDescription('This trap indicates that a far end protection line failure has been declared. This happens when the received K1 byte indicates SF on the protection line and the condition persists for 2.5 seconds. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the sonet port is located. eqModuleSlotId is the (shelf-relative) slot id in which the sonet port is located. ifIndex is the eid of the sonet port. eqIfName is the name of the physical sonet port.')
eqSonetApsFarEndProtectLineCleared = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 2, 8)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqModuleShelfId"), ("EQUIPE-SYSTEM-MIB", "eqModuleSlotId"), ("IF-MIB", "ifIndex"), ("EQUIPE-TRAP-MIB", "eqIfName"))
if mibBuilder.loadTexts: eqSonetApsFarEndProtectLineCleared.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsFarEndProtectLineCleared.setDescription('This trap indicates that a far end protection line failure has been cleared. This happens 10 seconds after a K1 byte is received without SF indication on the protection line. eqTrapDescr provides a textual description for this trap. eqModuleShelfId is the shelf id in which the sonet port is located. eqModuleSlotId is the (shelf-relative) slot id in which the sonet port is located. ifIndex is the eid of the sonet port. eqIfName is the name of the physical sonet port.')
eqSrmFault = NotificationType((1, 3, 6, 1, 4, 1, 5022, 4, 5, 1, 1)).setObjects(("EQUIPE-TRAP-MIB", "eqTrapDescr"), ("EQUIPE-SYSTEM-MIB", "eqFaultTime"), ("EQUIPE-SYSTEM-MIB", "eqFaultScope"), ("EQUIPE-SYSTEM-MIB", "eqFaultModule"), ("EQUIPE-SYSTEM-MIB", "eqFaultSwlm"))
if mibBuilder.loadTexts: eqSrmFault.setStatus('current')
if mibBuilder.loadTexts: eqSrmFault.setDescription('This trap indicates that an srm fault has occurred. eqTrapDescr provides a textual description for this trap. eqSrmFaultDomain identifies the fault domain. eqSrmFaultHandle is the fault handle. eqSrmFaultTime contains the time at which the fault occurred.')
mibBuilder.exportSymbols("EQUIPE-TRAP-MIB", eqSonetApsFarEndProtectLineCleared=eqSonetApsFarEndProtectLineCleared, eqSonetApsProtectLineFailure=eqSonetApsProtectLineFailure, eqSystemId=eqSystemId, eqLogServerWriteToDiskFailed=eqLogServerWriteToDiskFailed, eqModuleReset=eqModuleReset, eqAtmPvcRemoved=eqAtmPvcRemoved, eqModuleTypeMismatch=eqModuleTypeMismatch, eqFallingThresholdAlert=eqFallingThresholdAlert, eqModuleFuseBlownMother=eqModuleFuseBlownMother, eqModuleStratumCentStatusChanged=eqModuleStratumCentStatusChanged, eqRisingThresholdAlert=eqRisingThresholdAlert, eqTrapDescr=eqTrapDescr, eqIfRemoved=eqIfRemoved, eqIfModified=eqIfModified, eqModuleWentOffline=eqModuleWentOffline, eqSonetTraps=eqSonetTraps, eqThresholdValue=eqThresholdValue, PYSNMP_MODULE_ID=eqTraps, eqIfAdded=eqIfAdded, eqModulePowerSupplyFailed=eqModulePowerSupplyFailed, eqAcctDataFileDeletedBeforeTransfer=eqAcctDataFileDeletedBeforeTransfer, eqApsLineState=eqApsLineState, eqCurrentValue=eqCurrentValue, eqSeverityLevel=eqSeverityLevel, eqHardDiskUsedLowMarkReached=eqHardDiskUsedLowMarkReached, eqAcctDataWriteToDiskFailed=eqAcctDataWriteToDiskFailed, eqAcctDataXferError=eqAcctDataXferError, eqModuleRedRoleChanged=eqModuleRedRoleChanged, eqSonetApsModeMismatch=eqSonetApsModeMismatch, eqHardDiskUsedHiMarkReached=eqHardDiskUsedHiMarkReached, eqFanUnitFailed=eqFanUnitFailed, eqModuleRemoved=eqModuleRemoved, eqLogDataFileDeletedBeforeTransfer=eqLogDataFileDeletedBeforeTransfer, eqFanUnitFaulty=eqFanUnitFaulty, eqIfType=eqIfType, eqSonetApsFarEndProtectLineFailure=eqSonetApsFarEndProtectLineFailure, eqEventTime=eqEventTime, eqSonetApsProtectByteFailure=eqSonetApsProtectByteFailure, eqModuleTraps=eqModuleTraps, eqAtmPvcAdded=eqAtmPvcAdded, eqAtmPvcModified=eqAtmPvcModified, eqIpTraps=eqIpTraps, eqMidPlaneParityError=eqMidPlaneParityError, eqSonetApsWorkingLineRestored=eqSonetApsWorkingLineRestored, eqIpAddress=eqIpAddress, eqModuleFuseBlownDaughter=eqModuleFuseBlownDaughter, eqTraps=eqTraps, eqEid=eqEid, eqFileName=eqFileName, eqSonetApsProtectLineRestored=eqSonetApsProtectLineRestored, eqSrmTraps=eqSrmTraps, eqLogDataXferError=eqLogDataXferError, eqAtmPvcType=eqAtmPvcType, eqIfTraps=eqIfTraps, eqSonetTimingCfgChanged=eqSonetTimingCfgChanged, eqModuleFuseType=eqModuleFuseType, eqSonetApsSwitchEvent=eqSonetApsSwitchEvent, eqModuleInserted=eqModuleInserted, eqModuleStratumCentRedStatusChanged=eqModuleStratumCentRedStatusChanged, eqAppsTraps=eqAppsTraps, eqSystemTraps=eqSystemTraps, equipe=equipe, eqAtmTraps=eqAtmTraps, eqMplsTraps=eqMplsTraps, eqSrmFault=eqSrmFault, eqTrapObjects=eqTrapObjects, eqResourceId=eqResourceId, eqIfName=eqIfName)
