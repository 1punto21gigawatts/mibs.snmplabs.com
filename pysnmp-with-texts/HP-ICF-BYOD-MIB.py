#
# PySNMP MIB module HP-ICF-BYOD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-BYOD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, NotificationType, Unsigned32, Bits, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Unsigned32", "Bits", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter32", "TimeTicks")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hpicfByodMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106))
hpicfByodMIB.setRevisions(('2014-05-19 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfByodMIB.setRevisionsDescriptions(('Initial version of BYOD MIB module.',))
if mibBuilder.loadTexts: hpicfByodMIB.setLastUpdated('201405190900Z')
if mibBuilder.loadTexts: hpicfByodMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfByodMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfByodMIB.setDescription('This MIB module describes objects for managing the Bring Your Own Device feature of devices in the HP Integrated Communication Facility product line.')
hpicfByodNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 0))
hpicfByodObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1))
hpicfByodConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 2))
hpicfByodConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1))
hpicfByodStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2))
hpicfByodScalarConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 1))
hpicfByodPortalTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfByodPortalTable.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalTable.setDescription('A table of portal servers that BYOD clients can be redirected to. The total number of servers supported is implementation-dependent.')
hpicfByodPortalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2, 1), ).setIndexNames((0, "HP-ICF-BYOD-MIB", "hpicfByodPortalName"))
if mibBuilder.loadTexts: hpicfByodPortalEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalEntry.setDescription('An entry in the hpicfByodPortalTable.')
hpicfByodPortalName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hpicfByodPortalName.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalName.setDescription('This object provides the BYOD server name.')
hpicfByodPortalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodPortalVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalVlanId.setDescription('This object provides the VLAN ID this portal is associated with. Clients on the specified VLAN will be redirected to this portal. A value of 0 indicates that this portal is not associated with any VLAN.')
hpicfByodPortalUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodPortalUrl.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalUrl.setDescription('This object provides the BYOD server URL to redirect clients to.')
hpicfByodPortalInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodPortalInetAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalInetAddrType.setDescription('This object provides the address family of the value in hpicfByodPortalInetAddr.')
hpicfByodPortalInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodPortalInetAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalInetAddr.setDescription('This object provides the IP address of the BYOD server specified in hpicfByodPortalUrl.')
hpicfByodPortalDnsCacheTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2, 1, 6), TimeTicks().clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodPortalDnsCacheTime.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalDnsCacheTime.setDescription('This object provides the DNS cache time of this portal in seconds.')
hpicfByodPortalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodPortalRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfByodPortalRowStatus.setDescription('The status of this table entry. The following columns must be set before the row can be made active: - hpicfByodPortalUrl')
hpicfByodFreeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3), )
if mibBuilder.loadTexts: hpicfByodFreeRuleTable.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleTable.setDescription('A table of rules to permit other valid traffic such as DNS and DHCP on a BYOD VLAN. The total number of entries allowed is implementation-dependent.')
hpicfByodFreeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1), ).setIndexNames((0, "HP-ICF-BYOD-MIB", "hpicfByodFreeRuleNumber"))
if mibBuilder.loadTexts: hpicfByodFreeRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleEntry.setDescription('An entry in the hpicfByodFreeRuleTable.')
hpicfByodFreeRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59)))
if mibBuilder.loadTexts: hpicfByodFreeRuleNumber.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleNumber.setDescription('This object provides the rule number.')
hpicfByodFreeRuleSourceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceProtocol.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceProtocol.setDescription('This object provides the source protocol to permit.')
hpicfByodFreeRuleSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleSourcePort.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleSourcePort.setDescription('This object provides the TCP or UDP source port to permit.')
hpicfByodFreeRuleSourceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceVlanId.setDescription('This object provides the source VLAN ID to permit.')
hpicfByodFreeRuleSourceInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceInetAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceInetAddrType.setDescription('This object provides the address family of the value in hpicfByodFreeRuleSourceInetAddr. Some agents may limit the type to IPv4 only.')
hpicfByodFreeRuleSourceInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceInetAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceInetAddr.setDescription('This object provides the source IP address to permit.')
hpicfByodFreeRuleSourceInetAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceInetAddrMask.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleSourceInetAddrMask.setDescription('This object provides the source IP address mask to apply to hpicfByodFreeRuleSourceInetAddr.')
hpicfByodFreeRuleDestinationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationProtocol.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationProtocol.setDescription('This object provides the destination protocol to permit.')
hpicfByodFreeRuleDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationPort.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationPort.setDescription('This object provides the TCP or UDP destination port to permit.')
hpicfByodFreeRuleDestinationInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 10), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationInetAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationInetAddrType.setDescription('This object provides the address family of the value in hpicfByodFreeRuleDestinationInetAddr. Some agents may limit the type to IPv4 only.')
hpicfByodFreeRuleDestinationInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 11), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationInetAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationInetAddr.setDescription('This object provides the destination IP address to permit.')
hpicfByodFreeRuleDestinationInetAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationInetAddrMask.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleDestinationInetAddrMask.setDescription('This object provides the destination IP address mask to apply to hpicfByodFreeRuleDestinationInetAddr.')
hpicfByodFreeRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 1, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfByodFreeRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfByodFreeRuleRowStatus.setDescription('The status of this table entry. The following columns must be set before the row can be made active: - hpicfByodFreeRuleSourceVlanId - hpicfByodFreeRuleSourceInetAddrType - hpicfByodFreeRuleSourceInetAddr - hpicfByodFreeRuleSourceInetAddrMask - hpicfByodFreeRuleDestinationInetAddrType - hpicfByodFreeRuleDestinationInetAddr - hpicfByodFreeRuleDestinationInetAddrMask')
hpicfByodScalarStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1))
hpicfByodTcpStatsTotalOpen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodTcpStatsTotalOpen.setStatus('current')
if mibBuilder.loadTexts: hpicfByodTcpStatsTotalOpen.setDescription('This object provides the cumulative total of TCP connections opened.')
hpicfByodTcpStatsResetConn = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodTcpStatsResetConn.setStatus('current')
if mibBuilder.loadTexts: hpicfByodTcpStatsResetConn.setDescription('This object provides the cumulative total number of TCP connections reset with RST.')
hpicfByodTcpStatsCurrentOpen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodTcpStatsCurrentOpen.setStatus('current')
if mibBuilder.loadTexts: hpicfByodTcpStatsCurrentOpen.setDescription('This object provides the number of TCP connections currently open.')
hpicfByodTcpStatsPktsReceived = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodTcpStatsPktsReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfByodTcpStatsPktsReceived.setDescription('This object provides the total number of TCP packets received.')
hpicfByodTcpStatsPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodTcpStatsPktsSent.setStatus('current')
if mibBuilder.loadTexts: hpicfByodTcpStatsPktsSent.setDescription('This object provides the total number of TCP packets sent.')
hpicfByodTcpStatsHttpPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodTcpStatsHttpPktsSent.setStatus('current')
if mibBuilder.loadTexts: hpicfByodTcpStatsHttpPktsSent.setDescription('This object provides the total number of HTTP packets sent.')
hpicfByodTcpStatsStateSynRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodTcpStatsStateSynRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfByodTcpStatsStateSynRcvd.setDescription('This object provides the number of TCP connections currently in the SYN_RCVD state.')
hpicfByodTcpStatsStateEstablished = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfByodTcpStatsStateEstablished.setStatus('current')
if mibBuilder.loadTexts: hpicfByodTcpStatsStateEstablished.setDescription('This object provides the number of TCP connections currently in the ESTABLISHED state.')
hpicfByodCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 2, 1))
hpicfByodGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 2, 2))
hpicfByodCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 2, 1, 1)).setObjects(("HP-ICF-BYOD-MIB", "hpicfByodConfigGroup"), ("HP-ICF-BYOD-MIB", "hpicfByodStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfByodCompliance1 = hpicfByodCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfByodCompliance1.setDescription('The compliance statement')
hpicfByodConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 2, 2, 1)).setObjects(("HP-ICF-BYOD-MIB", "hpicfByodPortalVlanId"), ("HP-ICF-BYOD-MIB", "hpicfByodPortalUrl"), ("HP-ICF-BYOD-MIB", "hpicfByodPortalInetAddrType"), ("HP-ICF-BYOD-MIB", "hpicfByodPortalInetAddr"), ("HP-ICF-BYOD-MIB", "hpicfByodPortalDnsCacheTime"), ("HP-ICF-BYOD-MIB", "hpicfByodPortalRowStatus"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleSourceProtocol"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleSourcePort"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleSourceVlanId"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleSourceInetAddrType"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleSourceInetAddr"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleSourceInetAddrMask"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleDestinationProtocol"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleDestinationPort"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleDestinationInetAddrType"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleDestinationInetAddr"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleDestinationInetAddrMask"), ("HP-ICF-BYOD-MIB", "hpicfByodFreeRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfByodConfigGroup = hpicfByodConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfByodConfigGroup.setDescription('A collection of objects providing configuration and status for client redirection to a portal server.')
hpicfByodStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 106, 2, 2, 2)).setObjects(("HP-ICF-BYOD-MIB", "hpicfByodTcpStatsTotalOpen"), ("HP-ICF-BYOD-MIB", "hpicfByodTcpStatsResetConn"), ("HP-ICF-BYOD-MIB", "hpicfByodTcpStatsCurrentOpen"), ("HP-ICF-BYOD-MIB", "hpicfByodTcpStatsPktsReceived"), ("HP-ICF-BYOD-MIB", "hpicfByodTcpStatsPktsSent"), ("HP-ICF-BYOD-MIB", "hpicfByodTcpStatsHttpPktsSent"), ("HP-ICF-BYOD-MIB", "hpicfByodTcpStatsStateSynRcvd"), ("HP-ICF-BYOD-MIB", "hpicfByodTcpStatsStateEstablished"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfByodStatsGroup = hpicfByodStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfByodStatsGroup.setDescription('A collection of objects providing statistics about current sessions for Byod.')
mibBuilder.exportSymbols("HP-ICF-BYOD-MIB", hpicfByodTcpStatsStateEstablished=hpicfByodTcpStatsStateEstablished, hpicfByodFreeRuleSourceProtocol=hpicfByodFreeRuleSourceProtocol, hpicfByodFreeRuleSourceInetAddrMask=hpicfByodFreeRuleSourceInetAddrMask, hpicfByodConformance=hpicfByodConformance, hpicfByodTcpStatsHttpPktsSent=hpicfByodTcpStatsHttpPktsSent, hpicfByodFreeRuleEntry=hpicfByodFreeRuleEntry, hpicfByodTcpStatsStateSynRcvd=hpicfByodTcpStatsStateSynRcvd, hpicfByodPortalDnsCacheTime=hpicfByodPortalDnsCacheTime, hpicfByodFreeRuleTable=hpicfByodFreeRuleTable, hpicfByodFreeRuleRowStatus=hpicfByodFreeRuleRowStatus, hpicfByodPortalName=hpicfByodPortalName, hpicfByodFreeRuleSourceVlanId=hpicfByodFreeRuleSourceVlanId, hpicfByodScalarConfig=hpicfByodScalarConfig, hpicfByodTcpStatsTotalOpen=hpicfByodTcpStatsTotalOpen, hpicfByodFreeRuleSourceInetAddr=hpicfByodFreeRuleSourceInetAddr, hpicfByodFreeRuleDestinationProtocol=hpicfByodFreeRuleDestinationProtocol, hpicfByodNotifications=hpicfByodNotifications, hpicfByodCompliance1=hpicfByodCompliance1, hpicfByodMIB=hpicfByodMIB, hpicfByodTcpStatsCurrentOpen=hpicfByodTcpStatsCurrentOpen, hpicfByodPortalVlanId=hpicfByodPortalVlanId, hpicfByodFreeRuleNumber=hpicfByodFreeRuleNumber, hpicfByodPortalInetAddr=hpicfByodPortalInetAddr, hpicfByodFreeRuleDestinationInetAddrType=hpicfByodFreeRuleDestinationInetAddrType, hpicfByodScalarStats=hpicfByodScalarStats, hpicfByodStatsObjects=hpicfByodStatsObjects, hpicfByodFreeRuleSourcePort=hpicfByodFreeRuleSourcePort, hpicfByodFreeRuleDestinationInetAddr=hpicfByodFreeRuleDestinationInetAddr, hpicfByodConfigGroup=hpicfByodConfigGroup, hpicfByodPortalInetAddrType=hpicfByodPortalInetAddrType, hpicfByodPortalRowStatus=hpicfByodPortalRowStatus, hpicfByodPortalUrl=hpicfByodPortalUrl, hpicfByodFreeRuleSourceInetAddrType=hpicfByodFreeRuleSourceInetAddrType, hpicfByodFreeRuleDestinationPort=hpicfByodFreeRuleDestinationPort, hpicfByodCompliances=hpicfByodCompliances, hpicfByodObjects=hpicfByodObjects, PYSNMP_MODULE_ID=hpicfByodMIB, hpicfByodGroups=hpicfByodGroups, hpicfByodConfigObjects=hpicfByodConfigObjects, hpicfByodPortalTable=hpicfByodPortalTable, hpicfByodTcpStatsPktsSent=hpicfByodTcpStatsPktsSent, hpicfByodTcpStatsResetConn=hpicfByodTcpStatsResetConn, hpicfByodPortalEntry=hpicfByodPortalEntry, hpicfByodFreeRuleDestinationInetAddrMask=hpicfByodFreeRuleDestinationInetAddrMask, hpicfByodTcpStatsPktsReceived=hpicfByodTcpStatsPktsReceived, hpicfByodStatsGroup=hpicfByodStatsGroup)
