#
# PySNMP MIB module TERAWAVE-teraIpClassification-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teraIpClassification-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Unsigned32, ModuleIdentity, Bits, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, ObjectIdentity, Integer32, enterprises, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Unsigned32", "ModuleIdentity", "Bits", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Integer32", "enterprises", "iso", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraIpClassificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 23))
teraIpClassTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 23, 1), )
if mibBuilder.loadTexts: teraIpClassTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassTable.setDescription(' table teraIpClassTable')
teraIpClassTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1), ).setIndexNames((0, "TERAWAVE-teraIpClassification-MIB", "teraIpClassField"))
if mibBuilder.loadTexts: teraIpClassTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassTableEntry.setDescription(' table entry teraIpClassTableEntry ')
teraIpClassField = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraIpClassField.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassField.setDescription('')
teraIpClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassType.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassType.setDescription('')
teraIpClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassValue.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassValue.setDescription('')
teraIpClassMinRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassMinRange.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassMinRange.setDescription('')
teraIpClassMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassMaxRange.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassMaxRange.setDescription('')
teraIpClassIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassIpAddr.setDescription('')
teraIpClassMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassMask.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassMask.setDescription('')
teraIpClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 23, 2), )
if mibBuilder.loadTexts: teraIpClassificationTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassificationTable.setDescription(' table teraIpClassificationTable')
teraIpClassificationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 23, 2, 1), ).setIndexNames((0, "TERAWAVE-teraIpClassification-MIB", "teraClassificationRule"), (0, "TERAWAVE-teraIpClassification-MIB", "teraIpClassField"))
if mibBuilder.loadTexts: teraIpClassificationTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassificationTableEntry.setDescription(' table entry teraIpClassificationTableEntry ')
teraClassificationRule = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClassificationRule.setStatus('mandatory')
if mibBuilder.loadTexts: teraClassificationRule.setDescription('')
teraIpClassificationField = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassificationField.setStatus('mandatory')
if mibBuilder.loadTexts: teraIpClassificationField.setDescription('')
mibBuilder.exportSymbols("TERAWAVE-teraIpClassification-MIB", teraClassificationRule=teraClassificationRule, terawave=terawave, teraIpClassType=teraIpClassType, teraIpClassTableEntry=teraIpClassTableEntry, teraIpClassificationField=teraIpClassificationField, teraIpClassificationGroup=teraIpClassificationGroup, teraIpClassificationTableEntry=teraIpClassificationTableEntry, teraIpClassField=teraIpClassField, teraIpClassTable=teraIpClassTable, teraIpClassIpAddr=teraIpClassIpAddr, teraIpClassMinRange=teraIpClassMinRange, teraIpClassificationTable=teraIpClassificationTable, teraIpClassValue=teraIpClassValue, teraIpClassMask=teraIpClassMask, teraIpClassMaxRange=teraIpClassMaxRange)
