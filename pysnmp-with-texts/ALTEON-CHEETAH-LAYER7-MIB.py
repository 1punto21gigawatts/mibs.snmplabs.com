#
# PySNMP MIB module ALTEON-CHEETAH-LAYER7-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-CHEETAH-LAYER7-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:20:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, ObjectIdentity, ModuleIdentity, IpAddress, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Unsigned32, Integer32, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Unsigned32", "Integer32", "TimeTicks", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
layer7 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5))
layer7.setRevisions(('2009-08-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: layer7.setRevisionsDescriptions(('Added revision clause for SMIv2 compliance.',))
if mibBuilder.loadTexts: layer7.setLastUpdated('200908050000Z')
if mibBuilder.loadTexts: layer7.setOrganization('Radware Ltd.')
if mibBuilder.loadTexts: layer7.setContactInfo('Lobby 1 (Visitors) and Lobby 2 (Deliveries) 575 Corporate Drive Mahwah, NJ 07430 support@radware.com')
if mibBuilder.loadTexts: layer7.setDescription('The MIB module for the Alteon OS layer 7 features.')
layer7Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1))
layer7Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2))
layer7Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3))
layer7Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 4))
urlCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1))
layer7GeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 2))
sdpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3))
httpModCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4))
ruleCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5))
contentClass = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6))
slbUrlRedir = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1))
slbUrlBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2))
slbUrlHttpMethods = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3))
urlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1))
connPoolingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2))
slbParsing = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1))
slbCurCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when HTTP non-GETs are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when HTTP non-GETs are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when user cookies are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when user cookies are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when no-cache header are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when no-cache header are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setDescription('Specify the number of bytes in the URI will be used to hash onto server')
slbNewCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setDescription('Specify the number of bytes in the URI will be used to hash onto server')
slbCurCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setDescription('This is for controlling if the switch should redirect packet to the cache server based on HTTP header. enabled(1) - Redirect web traffic based on HTTP header disabled(2)- Redirect web traffic based on URI')
slbNewCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setDescription('This is for controlling if the switch should redirect packet to the cache server based on HTTP header. enabled(1) - Redirect web traffic based on HTTP header disabled(2)- Redirect web traffic based on URI')
slbCurCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setDescription('The HTTP header name')
slbNewCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setDescription('The HTTP header name')
slbCurCfgUrlHashing = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlHashing.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHashing.setDescription('This is to Enable/Disable URL hashing based on URI.')
slbNewCfgUrlHashing = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlHashing.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHashing.setDescription('This is to Enable/Disable URL hashing based on URI.')
slbCurCfgUrlRedirHeaderNameType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("host", 1), ("useragent", 2), ("others", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderNameType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderNameType.setDescription('HTTP header Application type.')
slbNewCfgUrlRedirHeaderNameType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("host", 1), ("useragent", 2), ("others", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderNameType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderNameType.setDescription('HTTP header Application type.')
slbUrlLbPathTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlLbPathTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbUrlLbPathTableMaxSize.setDescription('The maximum number of entries in SLB URL load balance table.')
slbCurCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2), )
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setDescription('The table of URL path for URL load balancing in the current_config.')
slbCurCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setDescription('Information about an URL path for URL load balancing.')
slbCurCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setDescription('The URL path table index.')
slbCurCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setDescription('The SLB string or ASCII/BINARY string for pattern matching .')
slbCurCfgUrlLbBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbBwmContract.setDescription('The BW contract for the path.')
slbCurCfgUrlLbPathHTTPHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathHTTPHeader.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathHTTPHeader.setDescription('The HTTP header for URL load balancing.')
slbCurCfgUrlLbPathHTTPHeaderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathHTTPHeaderValue.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathHTTPHeaderValue.setDescription('The HTTP header value for URL load balancing.')
slbCurCfgUrlLbPathDnsQueryTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathDnsQueryTypes.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathDnsQueryTypes.setDescription('DNS Query type(s) (by number).')
slbCurCfgUrlLbPathPatternStringType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathPatternStringType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathPatternStringType.setDescription('Type of pattern string (ASCII or binary or none).')
slbCurCfgUrlLbPathOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathOffset.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathOffset.setDescription('Offset from beginning of IP packet to start matching the pattern string.')
slbCurCfgUrlLbPathDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathDepth.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathDepth.setDescription('Depth of IP packet to search and match the pattern string.')
slbCurCfgUrlLbPathOper = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eq", 1), ("gt", 2), ("lt", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathOper.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathOper.setDescription('Operation to be performed on the pattern match string. For ASCII pattern strings, only the equal (eq) operation is valid.')
slbCurCfgUrlLbPathCompleteString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathCompleteString.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathCompleteString.setDescription('The complete SLB or ASCII/BINARY string for pattern matching .')
slbCurCfgUrlLbPathAllowRegExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathAllowRegExp.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathAllowRegExp.setDescription('Allow regular expression for layer7 SLB path string.')
slbCurCfgUrlLbPathDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dns", 1), ("dnssec", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathDnsType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathDnsType.setDescription('DNS type (dns, dnssec, any).')
slbCurCfgUrlLbPathApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("http", 1), ("dns", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathApplication.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathApplication.setDescription('Type of appliction (http, dns, other).')
slbNewCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3), )
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setDescription('The table of URL path for URL load balancing in the new_config.')
slbNewCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbNewCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setDescription('Information about an URL path for URL load balancing.')
slbNewCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setDescription('The URL path table index.')
slbNewCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setDescription('The SLB string or ASCII/BINARY string for pattern matching .')
slbNewCfgUrlLbPathDnsQueryTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDnsQueryTypes.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDnsQueryTypes.setDescription('DNS Query type(s) (by number).')
slbNewCfgUrlLbBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbBwmContract.setDescription('The BW contract for the load path.')
slbNewCfgUrlLbPathHTTPHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathHTTPHeader.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathHTTPHeader.setDescription('The HTTP header for URL load balancing.')
slbNewCfgUrlLbPathHTTPHeaderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathHTTPHeaderValue.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathHTTPHeaderValue.setDescription('The HTTP header value for URL load balancing.')
slbNewCfgUrlLbPathPatternStringType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathPatternStringType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathPatternStringType.setDescription('Type of pattern string (ASCII or binary).')
slbNewCfgUrlLbPathOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathOffset.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathOffset.setDescription('Offset from beginning of IP packet to start matching the pattern string.')
slbNewCfgUrlLbPathDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDepth.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDepth.setDescription('Depth of IP packet to search and match the pattern string.')
slbNewCfgUrlLbPathOper = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eq", 1), ("gt", 2), ("lt", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathOper.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathOper.setDescription('Operation to be performed on the pattern match string. For ASCII pattern strings, only the equal (eq) operation is valid.')
slbNewCfgUrlLbPathCompleteString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathCompleteString.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathCompleteString.setDescription('The complete SLB or ASCII/BINARY string for pattern matching .')
slbNewCfgUrlLbPathAllowRegExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathAllowRegExp.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathAllowRegExp.setDescription('Allow regular expression for layer7 SLB path string.')
slbNewCfgUrlLbPathDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dns", 1), ("dnssec", 2), ("any", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDnsType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDnsType.setDescription('DNS type (dns, dnssec, any).')
slbNewCfgUrlLbPathApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("http", 1), ("dns", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathApplication.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathApplication.setDescription('Type of application (http, dns, other).')
slbNewCfgUrlLbPathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setDescription('Action object to delete an URL Path. When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
slbCurCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setDescription("Customize error message to send back to client when switch cannot bind client's request to servers.")
slbNewCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setDescription("Customize error message to send back to client when switch cannot bind client's request to servers.")
slbCurCfgUrlLbCaseSensitiveStrMatch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbCaseSensitiveStrMatch.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlLbCaseSensitiveStrMatch.setDescription('This is for controlling if the URL String matching is case sensitive or not. enabled(1) - URL String matching is case sensitive disabled(2)- URL String matching is not case sensitive')
slbNewCfgUrlLbCaseSensitiveStrMatch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbCaseSensitiveStrMatch.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlLbCaseSensitiveStrMatch.setDescription('This is for controlling if the URL String matching is case sensitive or not. enabled(1) - URL String matching is case sensitive disabled(2)- URL String matching is not case sensitive')
slbUrlHttpMethodsTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlHttpMethodsTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbUrlHttpMethodsTableMaxSize.setDescription('The maximum number of http method entries in layer7 processing engine.')
slbCurCfgUrlHttpMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 2), )
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodsTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodsTable.setDescription('The http methods table in layer7 processing engine.')
slbCurCfgUrlHttpMethodsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbCurCfgUrlHttpMethodIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodsTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodsTableEntry.setDescription('A row in the http methods table.')
slbCurCfgUrlHttpMethodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodIndex.setDescription('The http method table index.')
slbCurCfgUrlHttpMethodString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodString.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlHttpMethodString.setDescription('The http method string to process in layer7 engine.')
slbNewCfgUrlHttpMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3), )
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodsTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodsTable.setDescription('The http methods table in layer7 processing engine.')
slbNewCfgUrlHttpMethodsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbNewCfgUrlHttpMethodIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodsTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodsTableEntry.setDescription('A row in the http methods table.')
slbNewCfgUrlHttpMethodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodIndex.setDescription('The http method table index.')
slbNewCfgUrlHttpMethodString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodString.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodString.setDescription('The http method string to process in layer7 engine.')
slbNewCfgUrlHttpMethodDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlHttpMethodDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
layer7CurCfgDbindTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgDbindTimeout.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgDbindTimeout.setDescription('The timeout for incomplete delayed binding connections.')
layer7NewCfgDbindTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgDbindTimeout.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgDbindTimeout.setDescription('The timeout for incomplete delayed binding connections.')
layer7CurCfgHttpmodListTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 1), )
if mibBuilder.loadTexts: layer7CurCfgHttpmodListTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodListTable.setDescription('The table for configuring HTTP content modification rule-lists.')
layer7CurCfgHttpmodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodListNameIdIndex"))
if mibBuilder.loadTexts: layer7CurCfgHttpmodListEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodListEntry.setDescription('A row in the HTTP content modification rule-lists table.')
layer7CurCfgHttpmodListNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodListNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodListNameIdIndex.setDescription('HTTP content modification rule-lists name(key id) as an index.')
layer7CurCfgHttpmodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodListName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodListName.setDescription('HTTP content modification rule-lists name.')
layer7CurCfgHttpmodListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodListAdminStatus.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodListAdminStatus.setDescription('Status (enable/disable) of rule_list.')
layer7NewCfgHttpmodListTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 2), )
if mibBuilder.loadTexts: layer7NewCfgHttpmodListTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodListTable.setDescription('The table for configuring HTTP content modification rule-lists.')
layer7NewCfgHttpmodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodListNameIdIndex"))
if mibBuilder.loadTexts: layer7NewCfgHttpmodListEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodListEntry.setDescription('A row in the HTTP content modification rule-lists table.')
layer7NewCfgHttpmodListNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodListNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodListNameIdIndex.setDescription('HTTP content modification rule-lists name(key id) as an index, length of the string should be 32 charecters.')
layer7NewCfgHttpmodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodListName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodListName.setDescription('HTTP content modification rule-list name, length of the string should be 32 charecters.')
layer7NewCfgHttpmodListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodListAdminStatus.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodListAdminStatus.setDescription('Status (enable/disable) of rule_list.')
layer7NewCfgHttpmodListCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodListCopy.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodListCopy.setDescription('Copy rule-list.')
layer7NewCfgHttpmodListDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodListDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodListDelete.setDescription('Delete HTTP modifications rule-list.')
layer7CurCfgHttpmodRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3), )
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleTable.setDescription('The table for configuring HTTP content modification rules.')
layer7CurCfgHttpmodRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleIndex"))
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleEntry.setDescription('A row in the HTTP content modification rule table.')
layer7CurCfgHttpmodRuleListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7CurCfgHttpmodRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7CurCfgHttpmodRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleName.setDescription('The HTTP Modification Rule name.')
layer7CurCfgHttpmodRuleDirectn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("bidirectional", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleDirectn.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleDirectn.setDescription('Defines whether rule modification direction should be evaluated as Request or Response (default Request).')
layer7CurCfgHttpmodRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insert", 1), ("replace", 2), ("remove", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleAction.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleAction.setDescription('Defines rule action (default none).')
layer7CurCfgHttpmodRuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleAdminStatus.setDescription('Status (enable/disable) of rule.')
layer7CurCfgHttpmodRuleElement = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("url", 1), ("header", 2), ("cookie", 3), ("filetype", 4), ("statusline", 5), ("text", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleElement.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleElement.setDescription('Element to be modified.')
layer7CurCfgHttpmodRuleHttpBody = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHttpBody.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHttpBody.setDescription('Modifications to also be done in the HTTP body.')
layer7NewCfgHttpmodRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4), )
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleTable.setDescription('The table for configuring HTTP content modification rules.')
layer7NewCfgHttpmodRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleIndex"))
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleEntry.setDescription('A row in the HTTP content modification rule table.')
layer7NewCfgHttpmodRuleListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7NewCfgHttpmodRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7NewCfgHttpmodRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleName.setDescription('The HTTP Modification Rule name.')
layer7NewCfgHttpmodRuleDirectn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("bidirectional", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleDirectn.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleDirectn.setDescription('Defines whether rule modification direction should be evaluated as Request or Response (default Request).')
layer7NewCfgHttpmodRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insert", 1), ("replace", 2), ("remove", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleAction.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleAction.setDescription('Defines rule action (default none).')
layer7NewCfgHttpmodRuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleAdminStatus.setDescription('Status (enable/disable) of rule.')
layer7NewCfgHttpmodRuleCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCopy.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCopy.setDescription('Copy rules.')
layer7NewCfgHttpmodRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7NewCfgHttpmodRuleElement = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("url", 1), ("header", 2), ("cookie", 3), ("filetype", 4), ("statusline", 5), ("text", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleElement.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleElement.setDescription('Element to be modified.')
layer7NewCfgHttpmodRuleHttpBody = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHttpBody.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHttpBody.setDescription('Modifications to also be done in the HTTP body.')
layer7CurCfgHttpmodRuleUrlTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5), )
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlTable.setDescription('The table for configuring HTTP content modification rules.')
layer7CurCfgHttpmodRuleUrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleUrlListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleUrlIndex"))
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlEntry.setDescription('A row in the HTTP content modification rule table.')
layer7CurCfgHttpmodRuleUrlListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7CurCfgHttpmodRuleUrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7CurCfgHttpmodRuleUrlMtchProtcol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchProtcol.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchProtcol.setDescription('Match protocol.')
layer7CurCfgHttpmodRuleUrlMtchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPort.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPort.setDescription('Match port.')
layer7CurCfgHttpmodRuleUrlMtchHostTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("suffix", 1), ("prefix", 2), ("equal", 3), ("include", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchHostTyp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchHostTyp.setDescription('Host match parameters.')
layer7CurCfgHttpmodRuleUrlMtchHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchHost.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchHost.setDescription('Host to Match.')
layer7CurCfgHttpmodRuleUrlMtchPathTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("suffix", 1), ("prefix", 2), ("equal", 3), ("include", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPathTyp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPathTyp.setDescription('Path match parameters.')
layer7CurCfgHttpmodRuleUrlMtchPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPath.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPath.setDescription('Path to match.')
layer7CurCfgHttpmodRuleUrlMtchPgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPgName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPgName.setDescription('Match page.')
layer7CurCfgHttpmodRuleUrlMtchPgTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPgTyp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlMtchPgTyp.setDescription('Match page type.')
layer7CurCfgHttpmodRuleUrlActnProtcl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnProtcl.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnProtcl.setDescription('Action protocol.')
layer7CurCfgHttpmodRuleUrlActnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPort.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPort.setDescription('Action port.')
layer7CurCfgHttpmodRuleUrlActnHostTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insert", 1), ("replace", 2), ("remove", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnHostTyp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnHostTyp.setDescription('Host action parameters.')
layer7CurCfgHttpmodRuleUrlActnHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnHost.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnHost.setDescription('Host to Insert.')
layer7CurCfgHttpmodRuleUrlActnHstSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("before", 1), ("after", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnHstSec.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnHstSec.setDescription('Insert Matched Section.')
layer7CurCfgHttpmodRuleUrlActnHstRplc = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnHstRplc.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnHstRplc.setDescription('New Host to Replace.')
layer7CurCfgHttpmodRuleUrlActnPathTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insert", 1), ("replace", 2), ("remove", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPathTyp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPathTyp.setDescription('Path action parameters.')
layer7CurCfgHttpmodRuleUrlActnPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPath.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPath.setDescription('Path to Insert.')
layer7CurCfgHttpmodRuleUrlActnPthSctn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("before", 1), ("after", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPthSctn.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPthSctn.setDescription('Insert Matched Section.')
layer7CurCfgHttpmodRuleUrlActnPthRplc = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPthRplc.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPthRplc.setDescription('New Path to Replace.')
layer7CurCfgHttpmodRuleUrlActnPgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPgName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPgName.setDescription('Action page.')
layer7CurCfgHttpmodRuleUrlActnPgTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 5, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPgTyp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleUrlActnPgTyp.setDescription('Action page type.')
layer7NewCfgHttpmodRuleUrlTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6), )
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlTable.setDescription('The table for configuring HTTP content modification rules.')
layer7NewCfgHttpmodRuleUrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleUrlListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleUrlIndex"))
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlEntry.setDescription('A row in the HTTP content modification rule table.')
layer7NewCfgHttpmodRuleUrlListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7NewCfgHttpmodRuleUrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7NewCfgHttpmodRuleUrlMtchProtcol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchProtcol.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchProtcol.setDescription('Match protocol.')
layer7NewCfgHttpmodRuleUrlMtchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPort.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPort.setDescription('Match port.')
layer7NewCfgHttpmodRuleUrlMtchHostTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("suffix", 1), ("prefix", 2), ("equal", 3), ("include", 4), ("any", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchHostTyp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchHostTyp.setDescription('Host match parameters.')
layer7NewCfgHttpmodRuleUrlMtchHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchHost.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchHost.setDescription('Host to Match.')
layer7NewCfgHttpmodRuleUrlMtchPathTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("suffix", 1), ("prefix", 2), ("equal", 3), ("include", 4), ("any", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPathTyp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPathTyp.setDescription('Path match parameters.')
layer7NewCfgHttpmodRuleUrlMtchPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPath.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPath.setDescription('Path to match.')
layer7NewCfgHttpmodRuleUrlMtchPgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPgName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPgName.setDescription('Match page.')
layer7NewCfgHttpmodRuleUrlMtchPgTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPgTyp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlMtchPgTyp.setDescription('Match page type.')
layer7NewCfgHttpmodRuleUrlActnProtcl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnProtcl.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnProtcl.setDescription('Action protocol.')
layer7NewCfgHttpmodRuleUrlActnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPort.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPort.setDescription('Action port.')
layer7NewCfgHttpmodRuleUrlActnHostTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insert", 1), ("replace", 2), ("remove", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnHostTyp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnHostTyp.setDescription('Host action parameters.')
layer7NewCfgHttpmodRuleUrlActnHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnHost.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnHost.setDescription('Host to Insert.')
layer7NewCfgHttpmodRuleUrlActnHstSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("before", 1), ("after", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnHstSec.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnHstSec.setDescription('Insert Matched Section.')
layer7NewCfgHttpmodRuleUrlActnHstRplc = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnHstRplc.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnHstRplc.setDescription('New Host to Replace.')
layer7NewCfgHttpmodRuleUrlActnPathTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insert", 1), ("replace", 2), ("remove", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPathTyp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPathTyp.setDescription('Path action parameters.')
layer7NewCfgHttpmodRuleUrlActnPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPath.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPath.setDescription('Path to Insert.')
layer7NewCfgHttpmodRuleUrlActnPthSctn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("before", 1), ("after", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPthSctn.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPthSctn.setDescription('Insert Matched Section.')
layer7NewCfgHttpmodRuleUrlActnPthRplc = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPthRplc.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPthRplc.setDescription('New Path to Replace.')
layer7NewCfgHttpmodRuleUrlActnPgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPgName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPgName.setDescription('Action page.')
layer7NewCfgHttpmodRuleUrlActnPgTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 6, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPgTyp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleUrlActnPgTyp.setDescription('Action page type.')
layer7CurCfgHttpmodRuleHdrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7), )
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrTable.setDescription('The table for configuring HTTP content modification rules.')
layer7CurCfgHttpmodRuleHdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleHdrListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleHdrIndex"))
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrEntry.setDescription('A row in the HTTP content modification rule table.')
layer7CurCfgHttpmodRuleHdrListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7CurCfgHttpmodRuleHdrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7CurCfgHttpmodRuleHdrInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrInsert.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrInsert.setDescription('Header Field to Insert.')
layer7CurCfgHttpmodRuleHdrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrValue.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrValue.setDescription('Value to Insert.')
layer7CurCfgHttpmodRuleHdrElmnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("url", 1), ("header", 2), ("cookie", 3), ("filetype", 4), ("statusline", 5), ("text", 6), ("regex", 7), ("none", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmnt.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmnt.setDescription('Element to match.')
layer7CurCfgHttpmodRuleHdrElmntUrlHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntUrlHost.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntUrlHost.setDescription('Host to match.')
layer7CurCfgHttpmodRuleHdrElmntUrlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntUrlPath.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntUrlPath.setDescription('Path to match.')
layer7CurCfgHttpmodRuleHdrElmntHdrField = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntHdrField.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntHdrField.setDescription('Header Field to Match.')
layer7CurCfgHttpmodRuleHdrElmntHdrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntHdrVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntHdrVal.setDescription('Value to Match.')
layer7CurCfgHttpmodRuleHdrElmntCookey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntCookey.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntCookey.setDescription('Cookie Key to Match.')
layer7CurCfgHttpmodRuleHdrElmntCkieVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntCkieVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntCkieVal.setDescription('Cookie Value to Match.')
layer7CurCfgHttpmodRuleHdrElmntFileTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntFileTyp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntFileTyp.setDescription('File Type To Match.')
layer7CurCfgHttpmodRuleHdrElmntStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntStatusCode.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntStatusCode.setDescription('Status Code to Match.')
layer7CurCfgHttpmodRuleHdrElmntStatusTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntStatusTxt.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntStatusTxt.setDescription('Status Text to Match.')
layer7CurCfgHttpmodRuleHdrElmntTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntTxt.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntTxt.setDescription('Text to Match.')
layer7CurCfgHttpmodRuleHdrElmntRegx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntRegx.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrElmntRegx.setDescription('Regex to Match.')
layer7CurCfgHttpmodRuleHdrReplacHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrReplacHdr.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrReplacHdr.setDescription('Header Field to Replace.')
layer7CurCfgHttpmodRuleHdrReplacVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrReplacVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrReplacVal.setDescription('Value to Replace.')
layer7CurCfgHttpmodRuleHdrReplacNewHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrReplacNewHdr.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrReplacNewHdr.setDescription('New Header Field.')
layer7CurCfgHttpmodRuleHdrReplacNewVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrReplacNewVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrReplacNewVal.setDescription('New Value.')
layer7CurCfgHttpmodRuleHdrRemvHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrRemvHdr.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrRemvHdr.setDescription('Header Field to Remove.')
layer7CurCfgHttpmodRuleHdrRemvVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 7, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrRemvVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleHdrRemvVal.setDescription('Value to Remove.')
layer7NewCfgHttpmodRuleHdrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8), )
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrTable.setDescription('The table for configuring HTTP content modification rules.')
layer7NewCfgHttpmodRuleHdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleHdrListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleHdrIndex"))
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrEntry.setDescription('A row in the HTTP content modification rule table.')
layer7NewCfgHttpmodRuleHdrListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7NewCfgHttpmodRuleHdrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7NewCfgHttpmodRuleHdrInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrInsert.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrInsert.setDescription('Header Field to Insert.')
layer7NewCfgHttpmodRuleHdrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrValue.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrValue.setDescription('Value to Insert.')
layer7NewCfgHttpmodRuleHdrElmnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("url", 1), ("header", 2), ("cookie", 3), ("filetype", 4), ("statusline", 5), ("text", 6), ("regex", 7), ("none", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmnt.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmnt.setDescription('Element to match.')
layer7NewCfgHttpmodRuleHdrElmntUrlHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntUrlHost.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntUrlHost.setDescription('Host to match.')
layer7NewCfgHttpmodRuleHdrElmntUrlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntUrlPath.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntUrlPath.setDescription('Path to match.')
layer7NewCfgHttpmodRuleHdrElmntHdrField = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntHdrField.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntHdrField.setDescription('Header Field to Match.')
layer7NewCfgHttpmodRuleHdrElmntHdrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntHdrVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntHdrVal.setDescription('Value to Match.')
layer7NewCfgHttpmodRuleHdrElmntCookey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntCookey.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntCookey.setDescription('Cookie Key to Match.')
layer7NewCfgHttpmodRuleHdrElmntCkieVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntCkieVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntCkieVal.setDescription('Cookie Value to Match.')
layer7NewCfgHttpmodRuleHdrElmntFileTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntFileTyp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntFileTyp.setDescription('File Type To Match.')
layer7NewCfgHttpmodRuleHdrElmntStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntStatusCode.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntStatusCode.setDescription('Status Code to Match.')
layer7NewCfgHttpmodRuleHdrElmntStatusTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntStatusTxt.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntStatusTxt.setDescription('Status Text to Match.')
layer7NewCfgHttpmodRuleHdrElmntTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntTxt.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntTxt.setDescription('Text to Match.')
layer7NewCfgHttpmodRuleHdrElmntRegx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntRegx.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrElmntRegx.setDescription('Regex to Match.')
layer7NewCfgHttpmodRuleHdrReplacHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrReplacHdr.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrReplacHdr.setDescription('Header Field to Replace.')
layer7NewCfgHttpmodRuleHdrReplacVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrReplacVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrReplacVal.setDescription('Value to Replace.')
layer7NewCfgHttpmodRuleHdrReplacNewHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrReplacNewHdr.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrReplacNewHdr.setDescription('New Header Field.')
layer7NewCfgHttpmodRuleHdrReplacNewVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrReplacNewVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrReplacNewVal.setDescription('New Value.')
layer7NewCfgHttpmodRuleHdrRemvHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrRemvHdr.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrRemvHdr.setDescription('Header Field to Remove.')
layer7NewCfgHttpmodRuleHdrRemvVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 8, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrRemvVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleHdrRemvVal.setDescription('Value to Remove.')
layer7CurCfgHttpmodRuleCookieTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9), )
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieTable.setDescription('The table for configuring HTTP content modification rules.')
layer7CurCfgHttpmodRuleCookieEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleCookieListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleCookieIndex"))
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieEntry.setDescription('A row in the HTTP content modification rule table.')
layer7CurCfgHttpmodRuleCookieListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7CurCfgHttpmodRuleCookieIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7CurCfgHttpmodRuleCookieInsrtKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtKey.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtKey.setDescription('Cookie Key to Insert.')
layer7CurCfgHttpmodRuleCookieInsrtVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtVal.setDescription('Cookie Value to Insert.')
layer7CurCfgHttpmodRuleCookieInsrtPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtPath.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtPath.setDescription('Cookie Path to Insert.')
layer7CurCfgHttpmodRuleCookieInsrtDomn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtDomn.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtDomn.setDescription('Cookie Domain Name to Insert.')
layer7CurCfgHttpmodRuleCookieInsrtExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtExp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtExp.setDescription('Cookie Expiration Time to Insert.')
layer7CurCfgHttpmodRuleCookieInsrtElem = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("url", 1), ("header", 2), ("cookie", 3), ("filetype", 4), ("statusline", 5), ("text", 6), ("regex", 7), ("none", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtElem.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtElem.setDescription('Element to match.')
layer7CurCfgHttpmodRuleCookieInsrtUrlHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtUrlHost.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtUrlHost.setDescription('Host to Match.')
layer7CurCfgHttpmodRuleCookieInsrtUrlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtUrlPath.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtUrlPath.setDescription('Path to Match.')
layer7CurCfgHttpmodRuleCookieInsrtHdrFld = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtHdrFld.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtHdrFld.setDescription('Header Field to Match.')
layer7CurCfgHttpmodRuleCookieInsrtHdrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtHdrVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtHdrVal.setDescription('Value to Match.')
layer7CurCfgHttpmodRuleCookieInsrtCookey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtCookey.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtCookey.setDescription('Cookie Key to Match.')
layer7CurCfgHttpmodRuleCookieInsrtCookieVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtCookieVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtCookieVal.setDescription('Cookie Value to Match.')
layer7CurCfgHttpmodRuleCookieInsrtFiletyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtFiletyp.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtFiletyp.setDescription('File Type To Match.')
layer7CurCfgHttpmodRuleCookieInsrtStatsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtStatsCode.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtStatsCode.setDescription('Status Code to Match.')
layer7CurCfgHttpmodRuleCookieInsrtStatsTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtStatsTxt.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtStatsTxt.setDescription('Status Text to Match.')
layer7CurCfgHttpmodRuleCookieInsrtTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtTxt.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtTxt.setDescription('Text to Match.')
layer7CurCfgHttpmodRuleCookieInsrtRegx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtRegx.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieInsrtRegx.setDescription('Regex to Match.')
layer7CurCfgHttpmodRuleCookieReplcCookey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieReplcCookey.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieReplcCookey.setDescription('Cookie Key to Replace.')
layer7CurCfgHttpmodRuleCookieReplcVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieReplcVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieReplcVal.setDescription('Cookie Value to Replace.')
layer7CurCfgHttpmodRuleCookieReplcNewKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieReplcNewKey.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieReplcNewKey.setDescription('New Cookie Key.')
layer7CurCfgHttpmodRuleCookieReplcNewVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieReplcNewVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieReplcNewVal.setDescription('New Cookie Value.')
layer7CurCfgHttpmodRuleCookieRemvCookey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieRemvCookey.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieRemvCookey.setDescription('Cookie Key to Remove.')
layer7CurCfgHttpmodRuleCookieRemvCookieVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 9, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieRemvCookieVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleCookieRemvCookieVal.setDescription('Cookie Value to Remove.')
layer7NewCfgHttpmodRuleCookieTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10), )
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieTable.setDescription('The table for configuring HTTP content modification rules.')
layer7NewCfgHttpmodRuleCookieEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleCookieListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleCookieIndex"))
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieEntry.setDescription('A row in the HTTP content modification rule table.')
layer7NewCfgHttpmodRuleCookieListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7NewCfgHttpmodRuleCookieIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7NewCfgHttpmodRuleCookieInsrtKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtKey.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtKey.setDescription('Cookie Key to Insert.')
layer7NewCfgHttpmodRuleCookieInsrtVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtVal.setDescription('Cookie Value to Insert.')
layer7NewCfgHttpmodRuleCookieInsrtPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtPath.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtPath.setDescription('Cookie Path to Insert.')
layer7NewCfgHttpmodRuleCookieInsrtDomn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtDomn.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtDomn.setDescription('Cookie Domain Name to Insert.')
layer7NewCfgHttpmodRuleCookieInsrtExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtExp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtExp.setDescription('Cookie Expiration Time to Insert.')
layer7NewCfgHttpmodRuleCookieInsrtElem = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("url", 1), ("header", 2), ("cookie", 3), ("filetype", 4), ("statusline", 5), ("text", 6), ("regex", 7), ("none", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtElem.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtElem.setDescription('Element to match.')
layer7NewCfgHttpmodRuleCookieInsrtUrlHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtUrlHost.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtUrlHost.setDescription('Host to Match.')
layer7NewCfgHttpmodRuleCookieInsrtUrlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtUrlPath.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtUrlPath.setDescription('Path to Match.')
layer7NewCfgHttpmodRuleCookieInsrtHdrFld = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtHdrFld.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtHdrFld.setDescription('Header Field to Match.')
layer7NewCfgHttpmodRuleCookieInsrtHdrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtHdrVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtHdrVal.setDescription('Value to Match.')
layer7NewCfgHttpmodRuleCookieInsrtCookey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtCookey.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtCookey.setDescription('Cookie Key to Match.')
layer7NewCfgHttpmodRuleCookieInsrtCookieVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtCookieVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtCookieVal.setDescription('Cookie Value to Match.')
layer7NewCfgHttpmodRuleCookieInsrtFiletyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtFiletyp.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtFiletyp.setDescription('File Type To Match.')
layer7NewCfgHttpmodRuleCookieInsrtStatsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtStatsCode.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtStatsCode.setDescription('Status Code to Match.')
layer7NewCfgHttpmodRuleCookieInsrtStatsTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtStatsTxt.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtStatsTxt.setDescription('Status Text to Match.')
layer7NewCfgHttpmodRuleCookieInsrtTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtTxt.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtTxt.setDescription('Text to Match.')
layer7NewCfgHttpmodRuleCookieInsrtRegx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtRegx.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieInsrtRegx.setDescription('Regex to Match.')
layer7NewCfgHttpmodRuleCookieReplcCookey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieReplcCookey.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieReplcCookey.setDescription('Cookie Key to Replace.')
layer7NewCfgHttpmodRuleCookieReplcVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieReplcVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieReplcVal.setDescription('Cookie Value to Replace.')
layer7NewCfgHttpmodRuleCookieReplcNewKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieReplcNewKey.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieReplcNewKey.setDescription('New Cookie Key.')
layer7NewCfgHttpmodRuleCookieReplcNewVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieReplcNewVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieReplcNewVal.setDescription('New Cookie Value.')
layer7NewCfgHttpmodRuleCookieRemvCookey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieRemvCookey.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieRemvCookey.setDescription('Cookie Key to Remove.')
layer7NewCfgHttpmodRuleCookieRemvCookieVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 10, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieRemvCookieVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleCookieRemvCookieVal.setDescription('Cookie Value to Remove.')
layer7CurCfgHttpmodRuleFileLineTextTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11), )
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileLineTextTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileLineTextTable.setDescription('The table for configuring HTTP content modification rules.')
layer7CurCfgHttpmodRuleFileLineTextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleFileLineTextListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgHttpmodRuleFileLineTextIndex"))
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileLineTextEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileLineTextEntry.setDescription('A row in the HTTP content modification rule table.')
layer7CurCfgHttpmodRuleFileLineTextListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileLineTextListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileLineTextListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7CurCfgHttpmodRuleFileLineTextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileLineTextIndex.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileLineTextIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7CurCfgHttpmodRuleFileTypRep = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileTypRep.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileTypRep.setDescription('File Type to Replace.')
layer7CurCfgHttpmodRuleFileTypNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileTypNew.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleFileTypNew.setDescription('New File Type.')
layer7CurCfgHttpmodRuleStatlineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleStatlineCode.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleStatlineCode.setDescription('Status Code to Replace.')
layer7CurCfgHttpmodRuleStatlineTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleStatlineTxt.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleStatlineTxt.setDescription('Status Text to Replace.')
layer7CurCfgHttpmodRuleStatlineNewCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleStatlineNewCode.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleStatlineNewCode.setDescription('New Status Code.')
layer7CurCfgHttpmodRuleStatlineNewTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleStatlineNewTxt.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleStatlineNewTxt.setDescription('New Status Text.')
layer7CurCfgHttpmodRuleTextReplace = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleTextReplace.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleTextReplace.setDescription('Text to Replace.')
layer7CurCfgHttpmodRuleTextNewText = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleTextNewText.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleTextNewText.setDescription('New Text.')
layer7CurCfgHttpmodRuleTextRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 11, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleTextRemove.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgHttpmodRuleTextRemove.setDescription('Text to Remove.')
layer7NewCfgHttpmodRuleFileLineTextTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12), )
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileLineTextTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileLineTextTable.setDescription('The table for configuring HTTP content modification rules.')
layer7NewCfgHttpmodRuleFileLineTextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleFileLineTextListIdIndex"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgHttpmodRuleFileLineTextIndex"))
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileLineTextEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileLineTextEntry.setDescription('A row in the HTTP content modification rule table.')
layer7NewCfgHttpmodRuleFileLineTextListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileLineTextListIdIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileLineTextListIdIndex.setDescription('The HTTP Modification Rule List (key id) as an index.')
layer7NewCfgHttpmodRuleFileLineTextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileLineTextIndex.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileLineTextIndex.setDescription('The HTTP Modification Rule number as an index.')
layer7NewCfgHttpmodRuleFileTypRep = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileTypRep.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileTypRep.setDescription('File Type to Replace.')
layer7NewCfgHttpmodRuleFileTypNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileTypNew.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleFileTypNew.setDescription('New File Type.')
layer7NewCfgHttpmodRuleStatlineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleStatlineCode.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleStatlineCode.setDescription('Status Code to Replace.')
layer7NewCfgHttpmodRuleStatlineTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleStatlineTxt.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleStatlineTxt.setDescription('Status Text to Replace.')
layer7NewCfgHttpmodRuleStatlineNewCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleStatlineNewCode.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleStatlineNewCode.setDescription('New Status Code.')
layer7NewCfgHttpmodRuleStatlineNewTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleStatlineNewTxt.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleStatlineNewTxt.setDescription('New Status Text.')
layer7NewCfgHttpmodRuleTextReplace = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleTextReplace.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleTextReplace.setDescription('Text to Replace.')
layer7NewCfgHttpmodRuleTextNewText = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleTextNewText.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleTextNewText.setDescription('New Text.')
layer7NewCfgHttpmodRuleTextRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 4, 12, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleTextRemove.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgHttpmodRuleTextRemove.setDescription('Text to Remove.')
layer7CurCfgContentClassTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1), )
if mibBuilder.loadTexts: layer7CurCfgContentClassTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTable.setDescription('The table for configuring Content Class.')
layer7CurCfgContentClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassID.setDescription('The content Class ID(key id) as an index.')
layer7CurCfgContentClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassName.setDescription('Content Class name.')
layer7CurCfgContentClassLogicalExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassLogicalExpression.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassLogicalExpression.setDescription('Enter logical expression needs to be applied between classes.')
layer7CurCfgContentClassHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHostName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHostName.setDescription('URL Hostname table is not empty for current content class.')
layer7CurCfgContentClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassPath.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassPath.setDescription('URL path table is not empty for current content class.')
layer7CurCfgContentClassFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileName.setDescription('URL file name table is not empty for current content class.')
layer7CurCfgContentClassFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileType.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileType.setDescription('URL file type table is not empty for current content class.')
layer7CurCfgContentClassHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHeader.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeader.setDescription('Header table is not empty for current content class.')
layer7CurCfgContentClassCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassCookie.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookie.setDescription('Coolie table is not empty for current content class.')
layer7CurCfgContentClassText = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassText.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassText.setDescription('Text table is not empty for current content class.')
layer7CurCfgContentClassXMLTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassXMLTag.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXMLTag.setDescription('XML tag table is not empty for current content class.')
layer7NewCfgContentClassTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2), )
if mibBuilder.loadTexts: layer7NewCfgContentClassTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTable.setDescription('The table for configuring Content Class.')
layer7NewCfgContentClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassEntry.setDescription('Content Class name.')
layer7NewCfgContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassID.setDescription('The content Class ID(key id) as an index.')
layer7NewCfgContentClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassName.setDescription('Content Class name.')
layer7NewCfgContentClassLogicalExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassLogicalExpression.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassLogicalExpression.setDescription('Enter logical expression needs to be applied between classes..')
layer7NewCfgContentClassHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassHostName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHostName.setDescription('URL host name table is not empty for current content class.')
layer7NewCfgContentClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassPath.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPath.setDescription('URL path table is not empty for current content class.')
layer7NewCfgContentClassFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileName.setDescription('URL file name table is not empty for current content class.')
layer7NewCfgContentClassFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileType.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileType.setDescription('URL file type table is not empty for current content class.')
layer7NewCfgContentClassHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeader.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeader.setDescription('Header table is not empty for current content class.')
layer7NewCfgContentClassCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookie.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookie.setDescription('Coolie table is not empty for current content class.')
layer7NewCfgContentClassText = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassText.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassText.setDescription('Text table is not empty for current content class.')
layer7NewCfgContentClassXMLTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassXMLTag.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXMLTag.setDescription('XML tag table is not empty for current content class.')
layer7NewCfgContentClassDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7NewCfgContentClassCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassCopy.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCopy.setDescription('This is an action object.Enter the content Class ID(key id) to which the current content Class has to be copied. Value 1 is returned always when read this object.')
layer7CurCfgContentClassHostNameTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 3), )
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameTable.setDescription('The table for configuring Content Class Hostname.')
layer7CurCfgContentClassHostNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassHostNameContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassHostNameID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassHostNameContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameContentClassID.setDescription('The content Class HostName ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassHostNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassHostNameHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameHostName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameHostName.setDescription('Content Class Hostname to match, length of the string should be 32 characters.')
layer7CurCfgContentClassHostNameMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHostNameMatchType.setDescription('Host Name Match type.')
layer7NewCfgContentClassHostNameTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 4), )
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameTable.setDescription('The table for configuring Content Class Hostname.')
layer7NewCfgContentClassHostNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassHostNameContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassHostNameID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameEntry.setDescription('A row in the Content Class table.')
layer7NewCfgContentClassHostNameContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameContentClassID.setDescription('The content Class HostName ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassHostNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassHostNameHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameHostName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameHostName.setDescription('Content Class Hostname to match, length of the string should be 32 characters.')
layer7NewCfgContentClassHostNameMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameMatchType.setDescription('Host Name Match type.')
layer7NewCfgContentClassHostNameDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHostNameDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7CurCfgContentClassPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 5), )
if mibBuilder.loadTexts: layer7CurCfgContentClassPathTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassPathTable.setDescription('The table for configuring Content Class Path.')
layer7CurCfgContentClassPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassPathContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassPathID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassPathEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassPathEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassPathContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassPathContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassPathContentClassID.setDescription('The content Class Path ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassPathID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassPathID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassPathFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassPathFilePath.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassPathFilePath.setDescription('Content Class Path to match, length of the string should be 32 characters.')
layer7CurCfgContentClassPathMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassPathMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassPathMatchType.setDescription('Path Match type.')
layer7CurCfgContentClassPathCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassPathCase.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassPathCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 6), )
if mibBuilder.loadTexts: layer7NewCfgContentClassPathTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPathTable.setDescription('The table for configuring Content Class Path.')
layer7NewCfgContentClassPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassPathContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassPathID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassPathEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPathEntry.setDescription('A row in the Content Class table.')
layer7NewCfgContentClassPathContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassPathContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPathContentClassID.setDescription('The content Class Path ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassPathID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPathID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassPathFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassPathFilePath.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPathFilePath.setDescription('Content Class Path to match, length of the string should be 32 characters.')
layer7NewCfgContentClassPathMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassPathMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPathMatchType.setDescription('Path Match type.')
layer7NewCfgContentClassPathCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassPathCase.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPathCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassPathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassPathDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassPathDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7CurCfgContentClassFileNameTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 7), )
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameTable.setDescription('The table for configuring Content Class File Name.')
layer7CurCfgContentClassFileNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassFileNameContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassFileNameID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassFileNameContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameContentClassID.setDescription('The content Class FileName ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassFileNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassFileNameFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameFileName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameFileName.setDescription('Content Class Filename to match, length of the string should be 32 characters.')
layer7CurCfgContentClassFileNameMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameMatchType.setDescription('File Name Match type.')
layer7CurCfgContentClassFileNameCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameCase.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileNameCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassFileNameTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 8), )
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameTable.setDescription('The table for configuring Content Class File Name.')
layer7NewCfgContentClassFileNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassFileNameContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassFileNameID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameEntry.setDescription('A row in the Content Class table.')
layer7NewCfgContentClassFileNameContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameContentClassID.setDescription('The content Class FileName ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassFileNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassFileNameFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameFileName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameFileName.setDescription('Content Class Filename to match, length of the string should be 32 characters.')
layer7NewCfgContentClassFileNameMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameMatchType.setDescription('File Name Match type.')
layer7NewCfgContentClassFileNameCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameCase.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassFileNameDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileNameDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7CurCfgContentClassFileTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 9), )
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeTable.setDescription('The table for configuring Content Class File Name.')
layer7CurCfgContentClassFileTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassFileTypeContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassFileTypeID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassFileTypeContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeContentClassID.setDescription('The content Class Filetype ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassFileTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassFileTypeFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeFileType.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeFileType.setDescription('Content Class Filetype to match, length of the string should be 32 characters.')
layer7CurCfgContentClassFileTypeMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeMatchType.setDescription('Filetype Match type.')
layer7CurCfgContentClassFileTypeCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeCase.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassFileTypeCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassFileTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 10), )
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeTable.setDescription('The table for configuring Content Class File Name.')
layer7NewCfgContentClassFileTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassFileTypeContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassFileTypeID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeEntry.setDescription('A row in the Content Class table.')
layer7NewCfgContentClassFileTypeContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeContentClassID.setDescription('The content Class Filetype ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassFileTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassFileTypeFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeFileType.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeFileType.setDescription('Content Class Filetype to match, length of the string should be 32 characters.')
layer7NewCfgContentClassFileTypeMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeMatchType.setDescription('Filetype Match type.')
layer7NewCfgContentClassFileTypeCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeCase.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassFileTypeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassFileTypeDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7CurCfgContentClassHeaderTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11), )
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderTable.setDescription('The table for configuring Content Class Header.')
layer7CurCfgContentClassHeaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassHeaderContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassHeaderID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassHeaderContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderContentClassID.setDescription('The content Class Header ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassHeaderID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderName.setDescription('Content Class Header to match, length of the string should be 32 characters.')
layer7CurCfgContentClassHeaderVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderVal.setDescription('Content Class Header to match, length of the string should be 32 characters.')
layer7CurCfgContentClassHeaderMatchTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderMatchTypeName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderMatchTypeName.setDescription('Header Match type.')
layer7CurCfgContentClassHeaderMatchTypeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderMatchTypeVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderMatchTypeVal.setDescription('Header Match type.')
layer7CurCfgContentClassHeaderCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderCase.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassHeaderCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassHeaderTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12), )
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderTable.setDescription('The table for configuring Content Class Header.')
layer7NewCfgContentClassHeaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassHeaderContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassHeaderID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderEntry.setDescription('A row in the Content Class table.')
layer7NewCfgContentClassHeaderContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderContentClassID.setDescription('The content Class Header ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassHeaderID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderName.setDescription('Content Class Header to match, length of the string should be 32 characters.')
layer7NewCfgContentClassHeaderVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderVal.setDescription('Content Class Header to match, length of the string should be 32 characters.')
layer7NewCfgContentClassHeaderMatchTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderMatchTypeName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderMatchTypeName.setDescription('Header Match type.')
layer7NewCfgContentClassHeaderMatchTypeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderMatchTypeVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderMatchTypeVal.setDescription('Header Match type.')
layer7NewCfgContentClassHeaderCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderCase.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassHeaderDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassHeaderDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7CurCfgContentClassCookieTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13), )
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieTable.setDescription('The table for configuring Content Class Cookie.')
layer7CurCfgContentClassCookieEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassCookieContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassCookieID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassCookieContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieContentClassID.setDescription('The content Class Cookie ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassCookieID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassCookieKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieKey.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieKey.setDescription('Content Class Cookie to match, length of the string should be 32 characters.')
layer7CurCfgContentClassCookieVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieVal.setDescription('Content Class Cookie to match, length of the string should be 32 characters.')
layer7CurCfgContentClassCookieMatchTypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieMatchTypeKey.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieMatchTypeKey.setDescription('Header Match type.')
layer7CurCfgContentClassCookieMatchTypeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieMatchTypeVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieMatchTypeVal.setDescription('Header Match type.')
layer7CurCfgContentClassCookieCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieCase.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassCookieCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassCookieTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14), )
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieTable.setDescription('The table for configuring Content Class Cookie.')
layer7NewCfgContentClassCookieEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassCookieContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassCookieID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieEntry.setDescription('A row in the Content Class table.')
layer7NewCfgContentClassCookieContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieContentClassID.setDescription('The content Class Cookie ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassCookieID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassCookieKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieKey.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieKey.setDescription('Content Class Cookie to match, length of the string should be 32 characters.')
layer7NewCfgContentClassCookieVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieVal.setDescription('Content Class Cookie to match, length of the string should be 32 characters.')
layer7NewCfgContentClassCookieMatchTypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieMatchTypeKey.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieMatchTypeKey.setDescription('Header Match type.')
layer7NewCfgContentClassCookieMatchTypeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("equal", 3), ("include", 4), ("regex", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieMatchTypeVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieMatchTypeVal.setDescription('Header Match type.')
layer7NewCfgContentClassCookieCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieCase.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassCookieDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassCookieDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7CurCfgContentClassTextTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 15), )
if mibBuilder.loadTexts: layer7CurCfgContentClassTextTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTextTable.setDescription('The table for configuring Content Class Text.')
layer7CurCfgContentClassTextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 15, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassTextContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassTextID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassTextEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTextEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassTextContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassTextContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTextContentClassID.setDescription('The content Class Text ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassTextID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassTextID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTextID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassTextText = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassTextText.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTextText.setDescription('Content Class Text to match, length of the string should be 32 characters.')
layer7CurCfgContentClassTextMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("include", 4), ("regex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassTextMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTextMatchType.setDescription('Text Match type.')
layer7CurCfgContentClassTextLookupArea = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("header", 1), ("body", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassTextLookupArea.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTextLookupArea.setDescription('Text Match type.')
layer7CurCfgContentClassTextCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassTextCase.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassTextCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassTextTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16), )
if mibBuilder.loadTexts: layer7NewCfgContentClassTextTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextTable.setDescription('The table for configuring Content Class Text.')
layer7NewCfgContentClassTextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassTextContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassTextID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassTextEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextEntry.setDescription('A row in the Content Class table.')
layer7NewCfgContentClassTextContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassTextContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextContentClassID.setDescription('The content Class Text ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassTextID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassTextID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextID.setDescription('The content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassTextText = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassTextText.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextText.setDescription('Content Class Text to match, length of the string should be 32 characters.')
layer7NewCfgContentClassTextMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("include", 4), ("regex", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassTextMatchType.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextMatchType.setDescription('Text Match type.')
layer7NewCfgContentClassTextLookupArea = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("header", 1), ("body", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassTextLookupArea.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextLookupArea.setDescription('Text Match type.')
layer7NewCfgContentClassTextCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassTextCase.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassTextDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassTextDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassTextDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
layer7CurCfgContentClassXmlTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17), )
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTable.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTable.setDescription('The table for configuring Content Class Xml Tag.')
layer7CurCfgContentClassXmlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassXmlTagContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7CurCfgContentClassXmlTagID"))
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlEntry.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlEntry.setDescription('A row in the Content Class table.')
layer7CurCfgContentClassXmlTagContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagContentClassID.setDescription('content Class Text ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassXmlTagID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagID.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagID.setDescription('Content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7CurCfgContentClassXmlTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagName.setDescription('Content Class Xml to match, length of the string should be 32 characters.')
layer7CurCfgContentClassXmlTagVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagVal.setDescription('Content Class Xml to match, length of the string should be 32 characters.')
layer7CurCfgContentClassXmlTagMatchTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("sufx", 1), ("equal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagMatchTypeName.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagMatchTypeName.setDescription('Xml Match type.')
layer7CurCfgContentClassXmlTagMatchTypeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("sufx", 1), ("equal", 3), ("include", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagMatchTypeVal.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagMatchTypeVal.setDescription('Xml Match type.')
layer7CurCfgContentClassXmlTagCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagCase.setStatus('current')
if mibBuilder.loadTexts: layer7CurCfgContentClassXmlTagCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassXmlTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18), )
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTable.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTable.setDescription('The table for configuring Content Class Xml Tag.')
layer7NewCfgContentClassXmlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassXmlTagContentClassID"), (0, "ALTEON-CHEETAH-LAYER7-MIB", "layer7NewCfgContentClassXmlTagID"))
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlEntry.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlEntry.setDescription('A row in the Content Class table.')
layer7NewCfgContentClassXmlTagContentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagContentClassID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagContentClassID.setDescription('content Class Text ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassXmlTagID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagID.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagID.setDescription('Content Class ID(key id) as an index, length of the string should be 32 characters.')
layer7NewCfgContentClassXmlTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagName.setDescription('Content Class Xml to match, length of the string should be 32 characters.')
layer7NewCfgContentClassXmlTagVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagVal.setDescription('Content Class Xml to match, length of the string should be 32 characters.')
layer7NewCfgContentClassXmlTagMatchTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("sufx", 1), ("equal", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagMatchTypeName.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagMatchTypeName.setDescription('Xml Match type.')
layer7NewCfgContentClassXmlTagMatchTypeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("sufx", 1), ("equal", 3), ("include", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagMatchTypeVal.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagMatchTypeVal.setDescription('Xml Match type.')
layer7NewCfgContentClassXmlTagCase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagCase.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagCase.setDescription('Enable or Disable Case sensitive for String matching.')
layer7NewCfgContentClassXmlTagDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 6, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagDelete.setStatus('current')
if mibBuilder.loadTexts: layer7NewCfgContentClassXmlTagDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbSdpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSdpTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbSdpTableMaxSize.setDescription('The maximum number of SDP entries in layer7 processing engine.')
slbCurCfgSdpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2), )
if mibBuilder.loadTexts: slbCurCfgSdpTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpTable.setDescription('The SDP table in layer7 processing engine.')
slbCurCfgSdpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbCurCfgSdpIndex"))
if mibBuilder.loadTexts: slbCurCfgSdpTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpTableEntry.setDescription('A row in the table.')
slbCurCfgSdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSdpIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpIndex.setDescription('The SDP table index.')
slbCurCfgSdpPrivAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSdpPrivAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpPrivAddr.setDescription('The private IP address of SDP entry.')
slbCurCfgSdpPublicAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSdpPublicAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSdpPublicAddr.setDescription('The public IP address of SDP entry.')
slbNewCfgSdpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3), )
if mibBuilder.loadTexts: slbNewCfgSdpTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpTable.setDescription('The SDP table in layer7 processing engine.')
slbNewCfgSdpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbNewCfgSdpIndex"))
if mibBuilder.loadTexts: slbNewCfgSdpTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpTableEntry.setDescription('A row in the SDP table.')
slbNewCfgSdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgSdpIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpIndex.setDescription('The SDP table index.Maximum entries you can configure is 16')
slbNewCfgSdpPrivAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSdpPrivAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpPrivAddr.setDescription('The private IP address of SDP entry.')
slbNewCfgSdpPublicAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSdpPublicAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpPublicAddr.setDescription('The public IP address of SDP entry.')
slbNewCfgSdpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSdpDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSdpDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbCurCfgSipUdpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1), )
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleTable.setDescription('The table of SIP Udp rule configuration in the current_config.')
slbCurCfgSipUdpRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbCurCfgSipUdpRuleIndex"))
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleTableEntry.setDescription('A row in the table.')
slbCurCfgSipUdpRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleIndex.setDescription('The UDP Rule number for which the SIP UDP rule table is related.')
slbCurCfgSipUdpRuleHdrFld = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("callid", 1), ("contact", 2), ("contentlen", 3), ("cseq", 4), ("expires", 5), ("from", 6), ("replyto", 7), ("to", 8), ("via", 9), ("reqline", 10), ("method", 11), ("sdpcontent", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleHdrFld.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleHdrFld.setDescription('The name of the header field.')
slbCurCfgSipUdpRuleContent = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleContent.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleContent.setDescription('The content length of the UDP header field.')
slbCurCfgSipUdpRuleContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleContract.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleContract.setDescription('BWM contract for this rule.')
slbCurCfgSipUdpRuleMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleMsg.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleMsg.setDescription('The Alert message for this rule.')
slbCurCfgSipUdpRuleSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleSeverity.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleSeverity.setDescription('The severity of this rule.')
slbCurCfgSipUdpRuleAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleAdd.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleAdd.setDescription('The dependent rules of this rule.')
slbCurCfgSipUdpRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleState.setDescription('Enable or disable this rule.')
slbCurCfgSipUdpRuleBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleBmap.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSipUdpRuleBmap.setDescription('The SIP UDP Dependent Rules. The SIP UDP Dependent Rules are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Dependent Rule || || || ||___ Dependent Rule 4 || |____ Dependent Rule 3 || . . . ||_________ Dependent Rule 2 |__________ Dependent Rule 1 where x : 1 - The represented Dependent Rule is selected 0 - The represented Dependent Rule is not selected')
slbNewCfgSipUdpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2), )
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleTable.setDescription('The table of SIP Udp rule configuration in the current_config.')
slbNewCfgSipUdpRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "slbNewCfgSipUdpRuleIndex"))
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleTableEntry.setDescription('A row in the table.')
slbNewCfgSipUdpRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleIndex.setDescription('The UDP Rule number for which the SIP UDP rule table is related.')
slbNewCfgSipUdpRuleHdrFld = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("callid", 1), ("contact", 2), ("contentlen", 3), ("cseq", 4), ("expires", 5), ("from", 6), ("replyto", 7), ("to", 8), ("via", 9), ("reqline", 10), ("method", 11), ("sdpcontent", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleHdrFld.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleHdrFld.setDescription('The name of the header field.')
slbNewCfgSipUdpRuleContent = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleContent.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleContent.setDescription('The content length of the UDP header field.')
slbNewCfgSipUdpRuleContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleContract.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleContract.setDescription('BWM contract for this rule.')
slbNewCfgSipUdpRuleMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleMsg.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleMsg.setDescription('The Alert message for this rule.')
slbNewCfgSipUdpRuleSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleSeverity.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleSeverity.setDescription('The severity of this rule.')
slbNewCfgSipUdpRuleAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleAdd.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleAdd.setDescription("Add dependent rules to this rule. A '0' value is returned when read.")
slbNewCfgSipUdpRuleRem = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleRem.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleRem.setDescription('Remove dependent rules from this rule.')
slbNewCfgSipUdpRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleState.setDescription('Enable or disable this rule.')
slbNewCfgSipUdpRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbNewCfgSipUdpRuleBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 1, 5, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleBmap.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSipUdpRuleBmap.setDescription('The SIP UDP Dependent Rules. The SIP UDP Dependent Rules are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Dependent Rule || || || ||___ Dependent Rule 4 || |____ Dependent Rule 3 || . . . ||_________ Dependent Rule 2 |__________ Dependent Rule 1 where x : 1 - The represented Dependent Rule is selected 0 - The represented Dependent Rule is not selected')
urlRedirStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1))
urlStatRedRedirs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRedirs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedRedirs.setDescription('The number of instances that the received packet matches the specified URL expressions and redirected to specified group of real servers.')
urlStatRedOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setDescription('The number of instances that the received packet is sent to the origin server due to mis-match with the specified URL expressions or detecting of HTTP non-GETs,user cookies, and no-cache as users configuration.')
urlStatRedNonGets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNonGets.setStatus('current')
if mibBuilder.loadTexts: urlStatRedNonGets.setDescription('The number of instances that the received packet contains none GETs(POST ,HEAD ,PUT..) methods.')
urlStatRedCookie = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedCookie.setStatus('current')
if mibBuilder.loadTexts: urlStatRedCookie.setDescription("The number of instances that the received packet contains a 'Cookie: ' header.")
urlStatRedNoCache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNoCache.setStatus('current')
if mibBuilder.loadTexts: urlStatRedNoCache.setDescription('The number of instances that the received packet contains a no-cache header value.')
urlStatRedStraightOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedStraightOrigSrvs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedStraightOrigSrvs.setDescription('The number of HTTP requests forwarded straight to the origin server.')
urlStatRedRtspCacheSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRtspCacheSrvs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedRtspCacheSrvs.setDescription('The number of RTSP requests redirected to the cache server.')
urlStatRedRtspOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRtspOrigSrvs.setStatus('current')
if mibBuilder.loadTexts: urlStatRedRtspOrigSrvs.setDescription('The number of RTSP requests forwarded to the origin server.')
urlSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2))
urlStatSlbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2, 1), )
if mibBuilder.loadTexts: urlStatSlbPathTable.setStatus('current')
if mibBuilder.loadTexts: urlStatSlbPathTable.setDescription('The statistics table of instances that the URL path matched.')
urlStatSlbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "urlStatSlbPathIndex"))
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setStatus('current')
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setDescription('Information about the number of instances that are load-balanced due to match of a particular URL path.')
urlStatSlbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathIndex.setStatus('current')
if mibBuilder.loadTexts: urlStatSlbPathIndex.setDescription('The URL path table index.')
urlStatSlbPathHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathHits.setStatus('current')
if mibBuilder.loadTexts: urlStatSlbPathHits.setDescription('The number of instances that are load-balanced due to match of the particular URL path.')
urlMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3))
urlMaintStatClientReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatClientReset.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatClientReset.setDescription('The number of reset frames sent to the client by the switch during client connection termination.')
urlMaintStatServerReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatServerReset.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatServerReset.setDescription('The number of reset frames sent to the server by the switch during server connection termination.')
urlMaintStatConnSplicing = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatConnSplicing.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatConnSplicing.setDescription('The total number of connection swapping between different real servers in supporting multiple HTTP/1.1 client requests.')
urlMaintStatHalfOpens = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatHalfOpens.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatHalfOpens.setDescription('The number of outstanding TCP connections have been half opened. This statistics is valid only when URL parsing has been turned on. It is incremented when the switch respond to TCP SYN packet and decremented upon receiving TCP SYN ACK packet from the requester.')
urlMaintStatSwitchRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatSwitchRetries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatSwitchRetries.setDescription('The total number of switch retries to connect to the real server.')
urlMaintStatRandomEarlyDrops = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatRandomEarlyDrops.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatRandomEarlyDrops.setDescription('The total number of SYN frames dropped when the buffer is low.')
urlMaintStatReqTooLong = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatReqTooLong.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatReqTooLong.setDescription('The total number of GET requests that exceeded 4500 bytes.')
urlMaintStatInvalidHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatInvalidHandshakes.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatInvalidHandshakes.setDescription('The total number of dropped frames because of invalid 3-way handshakes.')
urlMaintStatCurSPMemUnits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatCurSPMemUnits.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatCurSPMemUnits.setDescription('The current available SP memory units.')
urlMaintStatCurSEQBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatCurSEQBufEntries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatCurSEQBufEntries.setDescription('The number of outstanding sequence buffers used.')
urlMaintStatHighestSEQBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatHighestSEQBufEntries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatHighestSEQBufEntries.setDescription('The highest number of sequence buffers ever used.')
urlMaintStatCurDataBufUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatCurDataBufUse.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatCurDataBufUse.setDescription('The number of outstanding data buffers used.')
urlMaintStatHighestDataBufUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatHighestDataBufUse.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatHighestDataBufUse.setDescription('The highest number of data buffers ever used.')
urlMaintStatCurSPBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatCurSPBufEntries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatCurSPBufEntries.setDescription('The number of outstanding SP buffers used.')
urlMaintStatHighestSPBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatHighestSPBufEntries.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatHighestSPBufEntries.setDescription('The number of SP buffers ever used.')
urlMaintStatTotalNonZeroSEQAlloc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalNonZeroSEQAlloc.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalNonZeroSEQAlloc.setDescription('The total number of sequence buffer allocations with non zero length.')
urlMaintStatTotalSEQBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalSEQBufAllocs.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalSEQBufAllocs.setDescription('The total number of sequence buffer allocations.')
urlMaintStatTotalSEQBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalSEQBufFrees.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalSEQBufFrees.setDescription('The total number of sequence buffer freed.')
urlMaintStatTotalDataBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalDataBufAllocs.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalDataBufAllocs.setDescription('The total number of data buffers allocated to store client request.')
urlMaintStatTotalDataBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatTotalDataBufFrees.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatTotalDataBufFrees.setDescription('The total number of data buffers freed.')
urlMaintStatSeqBufAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatSeqBufAllocFails.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatSeqBufAllocFails.setDescription('The number of times sequence buffer allocation failed.')
urlMaintStatUBufAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatUBufAllocFails.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatUBufAllocFails.setDescription('The number of times URL data buffer allocation failed.')
urlMaintStatMaxSessPerBucket = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatMaxSessPerBucket.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatMaxSessPerBucket.setDescription('The maximum number of items(sessions) allowed in the session table hash bucket chain.')
urlMaintStatMaxFramesPerSess = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatMaxFramesPerSess.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatMaxFramesPerSess.setDescription('The maximum number of frames to be buffered per session.')
urlMaintStatMaxBytesBuffered = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatMaxBytesBuffered.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatMaxBytesBuffered.setDescription('The maximum number of bytes buffered per session.')
urlMaintStatInvalidMethods = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatInvalidMethods.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatInvalidMethods.setDescription('The total number of invalid method hits.')
urlMaintStatAgedSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatAgedSessions.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatAgedSessions.setDescription('The total number of aged delayed binding sessions.')
urlMaintStatLowestSPMemUnits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 3, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlMaintStatLowestSPMemUnits.setStatus('current')
if mibBuilder.loadTexts: urlMaintStatLowestSPMemUnits.setDescription('The lowest available SP memory units.')
urlSpMaintStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4), )
if mibBuilder.loadTexts: urlSpMaintStatsTable.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsTable.setDescription('The table of URL SP maintenance statistics.')
urlSpMaintStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER7-MIB", "urlSpMaintStatsSpIndex"))
if mibBuilder.loadTexts: urlSpMaintStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsTableEntry.setDescription('A row in the URL SP maintenance statistics table.')
urlSpMaintStatsSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlSpMaintStatsSpIndex.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsSpIndex.setDescription('The SP index.')
urlSpMaintStatsCurMemUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlSpMaintStatsCurMemUnits.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsCurMemUnits.setDescription('The number of memory units available.')
urlSpMaintStatsLowestMemUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlSpMaintStatsLowestMemUnits.setStatus('current')
if mibBuilder.loadTexts: urlSpMaintStatsLowestMemUnits.setDescription('The lowest number of memory units available.')
currOpenedServerConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currOpenedServerConns.setStatus('current')
if mibBuilder.loadTexts: currOpenedServerConns.setDescription('Specifies number of current opened server connections.')
activeServerConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeServerConns.setStatus('current')
if mibBuilder.loadTexts: activeServerConns.setDescription('Specifies number of active server connections.')
availServerConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availServerConns.setStatus('current')
if mibBuilder.loadTexts: availServerConns.setDescription('Specifies number of available server connections.')
agedOutClientConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agedOutClientConns.setStatus('current')
if mibBuilder.loadTexts: agedOutClientConns.setDescription('Specifies number of aged out client connection.')
agedOutServerConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agedOutServerConns.setStatus('current')
if mibBuilder.loadTexts: agedOutServerConns.setDescription('Specifies number of aged out server connection.')
slbParsingString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 78))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbParsingString.setStatus('current')
if mibBuilder.loadTexts: slbParsingString.setDescription('The SLB Cookie to parse of length 8, 16, 24, 28 or 76 bytes and Cookie value should be in 0xXXXXXXXXXXXXXXXX format.')
slbParsingVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbParsingVip.setStatus('current')
if mibBuilder.loadTexts: slbParsingVip.setDescription('The Virtual IP address from parsed SLB Cookie.')
slbParsingRip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbParsingRip.setStatus('current')
if mibBuilder.loadTexts: slbParsingRip.setDescription('The Real IP address from parsed SLB Cookie.')
slbParsingRport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbParsingRport.setStatus('current')
if mibBuilder.loadTexts: slbParsingRport.setDescription('The Real Port Number from parsed SLB Cookie.')
slbParsingCip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbParsingCip.setStatus('current')
if mibBuilder.loadTexts: slbParsingCip.setDescription('The Client IP address from parsed SLB Cookie.')
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER7-MIB", layer7CurCfgHttpmodRuleCookieInsrtHdrFld=layer7CurCfgHttpmodRuleCookieInsrtHdrFld, urlSlbStats=urlSlbStats, layer7NewCfgContentClassText=layer7NewCfgContentClassText, layer7CurCfgContentClassPathCase=layer7CurCfgContentClassPathCase, layer7NewCfgHttpmodRuleCookieInsrtExp=layer7NewCfgHttpmodRuleCookieInsrtExp, layer7CurCfgHttpmodRuleFileTypNew=layer7CurCfgHttpmodRuleFileTypNew, layer7NewCfgHttpmodListTable=layer7NewCfgHttpmodListTable, layer7CurCfgContentClassTextEntry=layer7CurCfgContentClassTextEntry, slbNewCfgUrlRedirCookieOrigSrv=slbNewCfgUrlRedirCookieOrigSrv, layer7NewCfgHttpmodRuleAdminStatus=layer7NewCfgHttpmodRuleAdminStatus, slbCurCfgUrlLbPathString=slbCurCfgUrlLbPathString, layer7NewCfgContentClassHeaderID=layer7NewCfgContentClassHeaderID, urlMaintStatCurSEQBufEntries=urlMaintStatCurSEQBufEntries, layer7NewCfgHttpmodRuleFileTypNew=layer7NewCfgHttpmodRuleFileTypNew, layer7CurCfgHttpmodRuleHdrTable=layer7CurCfgHttpmodRuleHdrTable, layer7NewCfgContentClassFileNameMatchType=layer7NewCfgContentClassFileNameMatchType, layer7CurCfgHttpmodRuleHdrElmntUrlPath=layer7CurCfgHttpmodRuleHdrElmntUrlPath, urlMaintStatTotalDataBufFrees=urlMaintStatTotalDataBufFrees, layer7NewCfgContentClassCookieCase=layer7NewCfgContentClassCookieCase, layer7CurCfgHttpmodRuleUrlMtchProtcol=layer7CurCfgHttpmodRuleUrlMtchProtcol, layer7CurCfgContentClassID=layer7CurCfgContentClassID, urlMaintStatSeqBufAllocFails=urlMaintStatSeqBufAllocFails, layer7NewCfgContentClassTextLookupArea=layer7NewCfgContentClassTextLookupArea, layer7CurCfgContentClassHeader=layer7CurCfgContentClassHeader, layer7NewCfgContentClassHeaderMatchTypeName=layer7NewCfgContentClassHeaderMatchTypeName, layer7CurCfgHttpmodRuleUrlMtchHostTyp=layer7CurCfgHttpmodRuleUrlMtchHostTyp, slbCurCfgUrlLbErrorMsg=slbCurCfgUrlLbErrorMsg, layer7NewCfgContentClassTable=layer7NewCfgContentClassTable, slbCurCfgUrlLbPathIndex=slbCurCfgUrlLbPathIndex, slbCurCfgUrlLbPathTable=slbCurCfgUrlLbPathTable, layer7CurCfgContentClassLogicalExpression=layer7CurCfgContentClassLogicalExpression, layer7NewCfgContentClassFileNameTable=layer7NewCfgContentClassFileNameTable, layer7NewCfgContentClassCookieDelete=layer7NewCfgContentClassCookieDelete, layer7CurCfgHttpmodRuleUrlMtchPathTyp=layer7CurCfgHttpmodRuleUrlMtchPathTyp, urlMaintStatServerReset=urlMaintStatServerReset, slbNewCfgUrlRedirHeaderNameType=slbNewCfgUrlRedirHeaderNameType, slbParsingRport=slbParsingRport, layer7CurCfgHttpmodRuleHdrRemvHdr=layer7CurCfgHttpmodRuleHdrRemvHdr, slbNewCfgUrlLbPathCompleteString=slbNewCfgUrlLbPathCompleteString, layer7CurCfgContentClassXmlTagMatchTypeVal=layer7CurCfgContentClassXmlTagMatchTypeVal, urlMaintStatCurDataBufUse=urlMaintStatCurDataBufUse, layer7CurCfgHttpmodRuleCookieReplcNewKey=layer7CurCfgHttpmodRuleCookieReplcNewKey, layer7CurCfgHttpmodRuleListIdIndex=layer7CurCfgHttpmodRuleListIdIndex, layer7NewCfgHttpmodRuleCookieInsrtElem=layer7NewCfgHttpmodRuleCookieInsrtElem, slbNewCfgUrlRedirHeader=slbNewCfgUrlRedirHeader, layer7CurCfgHttpmodRuleTextRemove=layer7CurCfgHttpmodRuleTextRemove, layer7CurCfgContentClassCookieContentClassID=layer7CurCfgContentClassCookieContentClassID, slbUrlHttpMethods=slbUrlHttpMethods, layer7CurCfgHttpmodListNameIdIndex=layer7CurCfgHttpmodListNameIdIndex, slbParsing=slbParsing, layer7CurCfgContentClassFileTypeFileType=layer7CurCfgContentClassFileTypeFileType, layer7NewCfgContentClassXmlTagCase=layer7NewCfgContentClassXmlTagCase, layer7NewCfgContentClassFileTypeFileType=layer7NewCfgContentClassFileTypeFileType, layer7CurCfgContentClassEntry=layer7CurCfgContentClassEntry, layer7NewCfgHttpmodRuleHdrReplacVal=layer7NewCfgHttpmodRuleHdrReplacVal, layer7NewCfgContentClassFileTypeContentClassID=layer7NewCfgContentClassFileTypeContentClassID, layer7CurCfgHttpmodRuleHdrIndex=layer7CurCfgHttpmodRuleHdrIndex, layer7NewCfgHttpmodRuleCookieIndex=layer7NewCfgHttpmodRuleCookieIndex, layer7CurCfgHttpmodRuleCookieInsrtUrlHost=layer7CurCfgHttpmodRuleCookieInsrtUrlHost, layer7CurCfgContentClassFileNameMatchType=layer7CurCfgContentClassFileNameMatchType, slbCurCfgUrlLbPathDnsQueryTypes=slbCurCfgUrlLbPathDnsQueryTypes, layer7NewCfgHttpmodListName=layer7NewCfgHttpmodListName, layer7NewCfgHttpmodListDelete=layer7NewCfgHttpmodListDelete, layer7CurCfgContentClassXmlTable=layer7CurCfgContentClassXmlTable, layer7CurCfgHttpmodRuleUrlActnPthSctn=layer7CurCfgHttpmodRuleUrlActnPthSctn, layer7CurCfgHttpmodRuleHdrValue=layer7CurCfgHttpmodRuleHdrValue, layer7NewCfgHttpmodRuleElement=layer7NewCfgHttpmodRuleElement, layer7NewCfgHttpmodRuleHdrElmntStatusTxt=layer7NewCfgHttpmodRuleHdrElmntStatusTxt, layer7NewCfgHttpmodRuleCookieInsrtCookieVal=layer7NewCfgHttpmodRuleCookieInsrtCookieVal, slbNewCfgSipUdpRuleHdrFld=slbNewCfgSipUdpRuleHdrFld, layer7NewCfgHttpmodRuleUrlActnPthSctn=layer7NewCfgHttpmodRuleUrlActnPthSctn, layer7CurCfgHttpmodRuleCookieReplcVal=layer7CurCfgHttpmodRuleCookieReplcVal, layer7CurCfgContentClassFileNameEntry=layer7CurCfgContentClassFileNameEntry, layer7CurCfgHttpmodRuleHdrInsert=layer7CurCfgHttpmodRuleHdrInsert, slbUrlLbPathTableMaxSize=slbUrlLbPathTableMaxSize, layer7CurCfgHttpmodListAdminStatus=layer7CurCfgHttpmodListAdminStatus, layer7CurCfgContentClassHeaderContentClassID=layer7CurCfgContentClassHeaderContentClassID, layer7NewCfgContentClassPathTable=layer7NewCfgContentClassPathTable, layer7NewCfgHttpmodRuleEntry=layer7NewCfgHttpmodRuleEntry, layer7NewCfgContentClassXmlTagContentClassID=layer7NewCfgContentClassXmlTagContentClassID, layer7NewCfgHttpmodRuleCookieInsrtCookey=layer7NewCfgHttpmodRuleCookieInsrtCookey, slbCurCfgSipUdpRuleIndex=slbCurCfgSipUdpRuleIndex, layer7CurCfgHttpmodRuleCookieRemvCookieVal=layer7CurCfgHttpmodRuleCookieRemvCookieVal, agedOutServerConns=agedOutServerConns, httpModCfg=httpModCfg, layer7NewCfgHttpmodRuleCookieInsrtDomn=layer7NewCfgHttpmodRuleCookieInsrtDomn, layer7NewCfgHttpmodRuleUrlActnHost=layer7NewCfgHttpmodRuleUrlActnHost, slbNewCfgSdpPrivAddr=slbNewCfgSdpPrivAddr, layer7CurCfgContentClassPathTable=layer7CurCfgContentClassPathTable, layer7CurCfgHttpmodRuleDirectn=layer7CurCfgHttpmodRuleDirectn, slbUrlHttpMethodsTableMaxSize=slbUrlHttpMethodsTableMaxSize, layer7NewCfgHttpmodRuleUrlTable=layer7NewCfgHttpmodRuleUrlTable, layer7CurCfgContentClassFileNameTable=layer7CurCfgContentClassFileNameTable, layer7NewCfgHttpmodRuleCookieEntry=layer7NewCfgHttpmodRuleCookieEntry, slbNewCfgUrlLbPathAllowRegExp=slbNewCfgUrlLbPathAllowRegExp, slbCurCfgUrlLbPathHTTPHeaderValue=slbCurCfgUrlLbPathHTTPHeaderValue, layer7NewCfgHttpmodRuleName=layer7NewCfgHttpmodRuleName, layer7NewCfgContentClassPathMatchType=layer7NewCfgContentClassPathMatchType, slbNewCfgSipUdpRuleTableEntry=slbNewCfgSipUdpRuleTableEntry, layer7CurCfgHttpmodRuleHdrReplacVal=layer7CurCfgHttpmodRuleHdrReplacVal, layer7CurCfgHttpmodRuleTable=layer7CurCfgHttpmodRuleTable, layer7CurCfgHttpmodRuleUrlActnHostTyp=layer7CurCfgHttpmodRuleUrlActnHostTyp, layer7CurCfgHttpmodRuleUrlActnHstSec=layer7CurCfgHttpmodRuleUrlActnHstSec, layer7NewCfgHttpmodRuleStatlineCode=layer7NewCfgHttpmodRuleStatlineCode, urlStatRedNoCache=urlStatRedNoCache, layer7=layer7, layer7NewCfgHttpmodRuleUrlActnProtcl=layer7NewCfgHttpmodRuleUrlActnProtcl, layer7CurCfgContentClassTextID=layer7CurCfgContentClassTextID, layer7NewCfgHttpmodRuleUrlMtchPathTyp=layer7NewCfgHttpmodRuleUrlMtchPathTyp, contentClass=contentClass, layer7NewCfgHttpmodRuleHdrReplacNewHdr=layer7NewCfgHttpmodRuleHdrReplacNewHdr, layer7CurCfgContentClassPathFilePath=layer7CurCfgContentClassPathFilePath, layer7CurCfgHttpmodRuleUrlActnPath=layer7CurCfgHttpmodRuleUrlActnPath, layer7NewCfgHttpmodRuleUrlIndex=layer7NewCfgHttpmodRuleUrlIndex, slbNewCfgUrlLbCaseSensitiveStrMatch=slbNewCfgUrlLbCaseSensitiveStrMatch, layer7NewCfgContentClassCookieVal=layer7NewCfgContentClassCookieVal, layer7NewCfgContentClassFileTypeEntry=layer7NewCfgContentClassFileTypeEntry, slbNewCfgSipUdpRuleIndex=slbNewCfgSipUdpRuleIndex, layer7CurCfgContentClassHeaderTable=layer7CurCfgContentClassHeaderTable, layer7NewCfgHttpmodRuleUrlListIdIndex=layer7NewCfgHttpmodRuleUrlListIdIndex, layer7CurCfgContentClassHeaderMatchTypeVal=layer7CurCfgContentClassHeaderMatchTypeVal, layer7CurCfgHttpmodRuleHdrElmntUrlHost=layer7CurCfgHttpmodRuleHdrElmntUrlHost, layer7NewCfgHttpmodRuleStatlineNewCode=layer7NewCfgHttpmodRuleStatlineNewCode, layer7NewCfgHttpmodRuleHdrElmntUrlPath=layer7NewCfgHttpmodRuleHdrElmntUrlPath, urlMaintStatHighestSEQBufEntries=urlMaintStatHighestSEQBufEntries, currOpenedServerConns=currOpenedServerConns, layer7Info=layer7Info, layer7NewCfgHttpmodRuleUrlMtchHostTyp=layer7NewCfgHttpmodRuleUrlMtchHostTyp, layer7CurCfgHttpmodRuleUrlActnPort=layer7CurCfgHttpmodRuleUrlActnPort, layer7NewCfgHttpmodRuleCookieListIdIndex=layer7NewCfgHttpmodRuleCookieListIdIndex, slbParsingString=slbParsingString, layer7CurCfgContentClassFileTypeMatchType=layer7CurCfgContentClassFileTypeMatchType, layer7NewCfgHttpmodRuleHdrElmntCookey=layer7NewCfgHttpmodRuleHdrElmntCookey, slbNewCfgUrlHttpMethodDelete=slbNewCfgUrlHttpMethodDelete, layer7NewCfgHttpmodRuleCookieTable=layer7NewCfgHttpmodRuleCookieTable, slbCurCfgUrlHashing=slbCurCfgUrlHashing, layer7CurCfgContentClassHostName=layer7CurCfgContentClassHostName, layer7CurCfgContentClassTable=layer7CurCfgContentClassTable, layer7CurCfgHttpmodRuleUrlActnPgName=layer7CurCfgHttpmodRuleUrlActnPgName, layer7NewCfgContentClassXmlTagMatchTypeVal=layer7NewCfgContentClassXmlTagMatchTypeVal, slbNewCfgUrlLbBwmContract=slbNewCfgUrlLbBwmContract, layer7CurCfgHttpmodRuleCookieTable=layer7CurCfgHttpmodRuleCookieTable, layer7CurCfgHttpmodRuleHdrElmntFileTyp=layer7CurCfgHttpmodRuleHdrElmntFileTyp, layer7CurCfgHttpmodRuleHdrEntry=layer7CurCfgHttpmodRuleHdrEntry, layer7CurCfgHttpmodRuleHdrElmntHdrVal=layer7CurCfgHttpmodRuleHdrElmntHdrVal, layer7CurCfgHttpmodRuleCookieRemvCookey=layer7CurCfgHttpmodRuleCookieRemvCookey, layer7NewCfgHttpmodRuleFileLineTextEntry=layer7NewCfgHttpmodRuleFileLineTextEntry, layer7NewCfgHttpmodRuleCookieRemvCookey=layer7NewCfgHttpmodRuleCookieRemvCookey, layer7CurCfgHttpmodRuleHdrListIdIndex=layer7CurCfgHttpmodRuleHdrListIdIndex, layer7NewCfgHttpmodRuleUrlEntry=layer7NewCfgHttpmodRuleUrlEntry, slbNewCfgUrlHttpMethodsTableEntry=slbNewCfgUrlHttpMethodsTableEntry, layer7NewCfgContentClassHeaderContentClassID=layer7NewCfgContentClassHeaderContentClassID, layer7NewCfgContentClassHostNameEntry=layer7NewCfgContentClassHostNameEntry, layer7NewCfgContentClassPathContentClassID=layer7NewCfgContentClassPathContentClassID, layer7CurCfgContentClassFileTypeID=layer7CurCfgContentClassFileTypeID, urlMaintStatClientReset=urlMaintStatClientReset, layer7CurCfgHttpmodRuleUrlIndex=layer7CurCfgHttpmodRuleUrlIndex, layer7NewCfgContentClassFileTypeID=layer7NewCfgContentClassFileTypeID, layer7CurCfgHttpmodRuleCookieInsrtVal=layer7CurCfgHttpmodRuleCookieInsrtVal, layer7NewCfgContentClassPathID=layer7NewCfgContentClassPathID, layer7NewCfgHttpmodRuleUrlActnPath=layer7NewCfgHttpmodRuleUrlActnPath, layer7CurCfgContentClassXmlEntry=layer7CurCfgContentClassXmlEntry, connPoolingStats=connPoolingStats, slbNewCfgUrlLbPathOffset=slbNewCfgUrlLbPathOffset, layer7NewCfgContentClassFileTypeDelete=layer7NewCfgContentClassFileTypeDelete, layer7NewCfgContentClassTextContentClassID=layer7NewCfgContentClassTextContentClassID, layer7NewCfgContentClassFileNameCase=layer7NewCfgContentClassFileNameCase, layer7NewCfgHttpmodRuleHdrElmntUrlHost=layer7NewCfgHttpmodRuleHdrElmntUrlHost, urlMaintStatHighestDataBufUse=urlMaintStatHighestDataBufUse, layer7NewCfgContentClassXMLTag=layer7NewCfgContentClassXMLTag, slbCurCfgSdpIndex=slbCurCfgSdpIndex, layer7NewCfgContentClassFileTypeMatchType=layer7NewCfgContentClassFileTypeMatchType, layer7NewCfgContentClassCookieTable=layer7NewCfgContentClassCookieTable, slbNewCfgSipUdpRuleContract=slbNewCfgSipUdpRuleContract, layer7NewCfgHttpmodRuleUrlActnHstRplc=layer7NewCfgHttpmodRuleUrlActnHstRplc, layer7NewCfgContentClassCookieID=layer7NewCfgContentClassCookieID, slbCurCfgUrlLbPathPatternStringType=slbCurCfgUrlLbPathPatternStringType, layer7NewCfgHttpmodRuleCookieReplcNewKey=layer7NewCfgHttpmodRuleCookieReplcNewKey, layer7NewCfgContentClassFileNameFileName=layer7NewCfgContentClassFileNameFileName, slbNewCfgUrlLbPathTableEntry=slbNewCfgUrlLbPathTableEntry, layer7CurCfgContentClassFileNameCase=layer7CurCfgContentClassFileNameCase, urlStatRedStraightOrigSrvs=urlStatRedStraightOrigSrvs, layer7NewCfgHttpmodRuleCookieInsrtPath=layer7NewCfgHttpmodRuleCookieInsrtPath, layer7CurCfgHttpmodListName=layer7CurCfgHttpmodListName, urlMaintStatLowestSPMemUnits=urlMaintStatLowestSPMemUnits, slbCurCfgSdpPublicAddr=slbCurCfgSdpPublicAddr, urlMaintStatRandomEarlyDrops=urlMaintStatRandomEarlyDrops, slbCurCfgUrlLbPathApplication=slbCurCfgUrlLbPathApplication, layer7CurCfgContentClassXmlTagContentClassID=layer7CurCfgContentClassXmlTagContentClassID, layer7NewCfgHttpmodRuleUrlMtchPort=layer7NewCfgHttpmodRuleUrlMtchPort, layer7NewCfgHttpmodRuleCookieInsrtHdrFld=layer7NewCfgHttpmodRuleCookieInsrtHdrFld, layer7CurCfgHttpmodRuleCookieInsrtTxt=layer7CurCfgHttpmodRuleCookieInsrtTxt, layer7NewCfgHttpmodRuleTextReplace=layer7NewCfgHttpmodRuleTextReplace, layer7CurCfgContentClassCookieTable=layer7CurCfgContentClassCookieTable, slbCurCfgUrlHttpMethodString=slbCurCfgUrlHttpMethodString, layer7CurCfgHttpmodRuleUrlActnPathTyp=layer7CurCfgHttpmodRuleUrlActnPathTyp, layer7NewCfgContentClassFileNameDelete=layer7NewCfgContentClassFileNameDelete, layer7NewCfgHttpmodRuleHdrRemvHdr=layer7NewCfgHttpmodRuleHdrRemvHdr, layer7CurCfgContentClassCookieCase=layer7CurCfgContentClassCookieCase, urlMaintStatHighestSPBufEntries=urlMaintStatHighestSPBufEntries, slbNewCfgUrlRedirHeaderName=slbNewCfgUrlRedirHeaderName, layer7CurCfgContentClassPath=layer7CurCfgContentClassPath, slbCurCfgSipUdpRuleHdrFld=slbCurCfgSipUdpRuleHdrFld, slbNewCfgUrlLbPathDnsQueryTypes=slbNewCfgUrlLbPathDnsQueryTypes, layer7NewCfgContentClassTextID=layer7NewCfgContentClassTextID, slbCurCfgUrlRedirNonGetOrigSrv=slbCurCfgUrlRedirNonGetOrigSrv, layer7CurCfgContentClassTextText=layer7CurCfgContentClassTextText, layer7NewCfgHttpmodRuleCookieInsrtVal=layer7NewCfgHttpmodRuleCookieInsrtVal, urlSpMaintStatsLowestMemUnits=urlSpMaintStatsLowestMemUnits, urlStats=urlStats, layer7NewCfgContentClassHeaderMatchTypeVal=layer7NewCfgContentClassHeaderMatchTypeVal, layer7Oper=layer7Oper, layer7CurCfgHttpmodRuleHdrRemvVal=layer7CurCfgHttpmodRuleHdrRemvVal, layer7CurCfgHttpmodRuleStatlineNewTxt=layer7CurCfgHttpmodRuleStatlineNewTxt, urlStatRedRtspCacheSrvs=urlStatRedRtspCacheSrvs, layer7CurCfgHttpmodRuleUrlEntry=layer7CurCfgHttpmodRuleUrlEntry, layer7CurCfgContentClassHostNameEntry=layer7CurCfgContentClassHostNameEntry, urlMaintStats=urlMaintStats, layer7CurCfgHttpmodRuleHdrElmnt=layer7CurCfgHttpmodRuleHdrElmnt, layer7NewCfgHttpmodRuleTextRemove=layer7NewCfgHttpmodRuleTextRemove, layer7NewCfgHttpmodRuleCookieReplcVal=layer7NewCfgHttpmodRuleCookieReplcVal, layer7NewCfgContentClassHeaderName=layer7NewCfgContentClassHeaderName, layer7NewCfgHttpmodRuleCookieInsrtKey=layer7NewCfgHttpmodRuleCookieInsrtKey, layer7CurCfgHttpmodRuleName=layer7CurCfgHttpmodRuleName, urlStatSlbPathIndex=urlStatSlbPathIndex, urlMaintStatCurSPMemUnits=urlMaintStatCurSPMemUnits, layer7NewCfgContentClassFileTypeTable=layer7NewCfgContentClassFileTypeTable, layer7NewCfgHttpmodRuleCookieInsrtUrlPath=layer7NewCfgHttpmodRuleCookieInsrtUrlPath, layer7NewCfgContentClassTextEntry=layer7NewCfgContentClassTextEntry, layer7NewCfgHttpmodRuleHdrElmntRegx=layer7NewCfgHttpmodRuleHdrElmntRegx, layer7NewCfgHttpmodRuleHdrElmntHdrField=layer7NewCfgHttpmodRuleHdrElmntHdrField, layer7CurCfgHttpmodRuleHttpBody=layer7CurCfgHttpmodRuleHttpBody, layer7CurCfgHttpmodRuleIndex=layer7CurCfgHttpmodRuleIndex, urlStatSlbPathTable=urlStatSlbPathTable, layer7NewCfgHttpmodRuleCookieReplcNewVal=layer7NewCfgHttpmodRuleCookieReplcNewVal, layer7CurCfgContentClassXmlTagCase=layer7CurCfgContentClassXmlTagCase, layer7CurCfgHttpmodRuleUrlActnPthRplc=layer7CurCfgHttpmodRuleUrlActnPthRplc, layer7NewCfgHttpmodRuleCookieInsrtStatsCode=layer7NewCfgHttpmodRuleCookieInsrtStatsCode, layer7CurCfgHttpmodRuleUrlTable=layer7CurCfgHttpmodRuleUrlTable, slbCurCfgSipUdpRuleState=slbCurCfgSipUdpRuleState, layer7NewCfgContentClassHeaderCase=layer7NewCfgContentClassHeaderCase, slbParsingVip=slbParsingVip, layer7NewCfgHttpmodListNameIdIndex=layer7NewCfgHttpmodListNameIdIndex, layer7NewCfgContentClassXmlTagName=layer7NewCfgContentClassXmlTagName, slbNewCfgUrlRedirNonGetOrigSrv=slbNewCfgUrlRedirNonGetOrigSrv, layer7NewCfgContentClassCookieContentClassID=layer7NewCfgContentClassCookieContentClassID, layer7CurCfgHttpmodRuleCookieReplcNewVal=layer7CurCfgHttpmodRuleCookieReplcNewVal, urlStatSlbPathHits=urlStatSlbPathHits, layer7NewCfgContentClassCookieMatchTypeVal=layer7NewCfgContentClassCookieMatchTypeVal, slbCurCfgUrlRedirCookieOrigSrv=slbCurCfgUrlRedirCookieOrigSrv, slbCurCfgSdpTableEntry=slbCurCfgSdpTableEntry, slbCurCfgUrlLbPathHTTPHeader=slbCurCfgUrlLbPathHTTPHeader, layer7CurCfgHttpmodRuleUrlMtchPath=layer7CurCfgHttpmodRuleUrlMtchPath, layer7CurCfgHttpmodRuleHdrElmntCookey=layer7CurCfgHttpmodRuleHdrElmntCookey)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER7-MIB", layer7NewCfgHttpmodRuleUrlMtchProtcol=layer7NewCfgHttpmodRuleUrlMtchProtcol, layer7CurCfgContentClassPathID=layer7CurCfgContentClassPathID, layer7CurCfgContentClassFileNameContentClassID=layer7CurCfgContentClassFileNameContentClassID, layer7CurCfgHttpmodRuleStatlineNewCode=layer7CurCfgHttpmodRuleStatlineNewCode, layer7NewCfgContentClassFileType=layer7NewCfgContentClassFileType, layer7NewCfgContentClassHostNameContentClassID=layer7NewCfgContentClassHostNameContentClassID, layer7CurCfgContentClassXmlTagID=layer7CurCfgContentClassXmlTagID, ruleCfg=ruleCfg, layer7NewCfgContentClassDelete=layer7NewCfgContentClassDelete, layer7CurCfgHttpmodRuleCookieInsrtDomn=layer7CurCfgHttpmodRuleCookieInsrtDomn, layer7NewCfgHttpmodRuleCookieInsrtFiletyp=layer7NewCfgHttpmodRuleCookieInsrtFiletyp, layer7CurCfgHttpmodRuleCookieInsrtExp=layer7CurCfgHttpmodRuleCookieInsrtExp, urlMaintStatHalfOpens=urlMaintStatHalfOpens, urlStatRedRtspOrigSrvs=urlStatRedRtspOrigSrvs, layer7CurCfgHttpmodRuleCookieInsrtCookey=layer7CurCfgHttpmodRuleCookieInsrtCookey, slbNewCfgUrlLbPathString=slbNewCfgUrlLbPathString, slbNewCfgSipUdpRuleSeverity=slbNewCfgSipUdpRuleSeverity, slbNewCfgSdpIndex=slbNewCfgSdpIndex, layer7NewCfgHttpmodRuleCookieInsrtStatsTxt=layer7NewCfgHttpmodRuleCookieInsrtStatsTxt, layer7CurCfgContentClassHeaderEntry=layer7CurCfgContentClassHeaderEntry, sdpCfg=sdpCfg, layer7NewCfgContentClassPathEntry=layer7NewCfgContentClassPathEntry, slbNewCfgUrlHttpMethodIndex=slbNewCfgUrlHttpMethodIndex, layer7NewCfgContentClassTextMatchType=layer7NewCfgContentClassTextMatchType, layer7CurCfgDbindTimeout=layer7CurCfgDbindTimeout, layer7NewCfgHttpmodRuleCookieInsrtUrlHost=layer7NewCfgHttpmodRuleCookieInsrtUrlHost, slbParsingRip=slbParsingRip, layer7NewCfgHttpmodRuleUrlActnPgName=layer7NewCfgHttpmodRuleUrlActnPgName, urlMaintStatTotalNonZeroSEQAlloc=urlMaintStatTotalNonZeroSEQAlloc, layer7NewCfgHttpmodRuleHdrListIdIndex=layer7NewCfgHttpmodRuleHdrListIdIndex, layer7NewCfgHttpmodRuleStatlineTxt=layer7NewCfgHttpmodRuleStatlineTxt, slbNewCfgSipUdpRuleState=slbNewCfgSipUdpRuleState, layer7NewCfgContentClassPathDelete=layer7NewCfgContentClassPathDelete, layer7NewCfgContentClassFileTypeCase=layer7NewCfgContentClassFileTypeCase, layer7CurCfgHttpmodRuleCookieInsrtRegx=layer7CurCfgHttpmodRuleCookieInsrtRegx, layer7CurCfgContentClassPathContentClassID=layer7CurCfgContentClassPathContentClassID, urlStatRedRedirs=urlStatRedRedirs, slbNewCfgSdpTableEntry=slbNewCfgSdpTableEntry, layer7NewCfgContentClassPath=layer7NewCfgContentClassPath, slbNewCfgUrlRedirUriHashLength=slbNewCfgUrlRedirUriHashLength, layer7CurCfgHttpmodRuleHdrReplacNewVal=layer7CurCfgHttpmodRuleHdrReplacNewVal, layer7CurCfgHttpmodRuleHdrReplacHdr=layer7CurCfgHttpmodRuleHdrReplacHdr, slbNewCfgUrlLbPathDepth=slbNewCfgUrlLbPathDepth, layer7CurCfgHttpmodRuleUrlActnHost=layer7CurCfgHttpmodRuleUrlActnHost, layer7NewCfgContentClassHeaderVal=layer7NewCfgContentClassHeaderVal, layer7NewCfgHttpmodRuleHdrRemvVal=layer7NewCfgHttpmodRuleHdrRemvVal, layer7CurCfgHttpmodRuleFileLineTextEntry=layer7CurCfgHttpmodRuleFileLineTextEntry, slbCurCfgUrlLbBwmContract=slbCurCfgUrlLbBwmContract, layer7CurCfgHttpmodRuleCookieInsrtPath=layer7CurCfgHttpmodRuleCookieInsrtPath, slbCurCfgSdpPrivAddr=slbCurCfgSdpPrivAddr, slbCurCfgUrlLbPathCompleteString=slbCurCfgUrlLbPathCompleteString, slbCurCfgUrlLbPathOffset=slbCurCfgUrlLbPathOffset, layer7CurCfgContentClassName=layer7CurCfgContentClassName, layer7CurCfgHttpmodListEntry=layer7CurCfgHttpmodListEntry, layer7NewCfgContentClassHeaderDelete=layer7NewCfgContentClassHeaderDelete, layer7CurCfgHttpmodRuleUrlMtchPgName=layer7CurCfgHttpmodRuleUrlMtchPgName, slbNewCfgSipUdpRuleAdd=slbNewCfgSipUdpRuleAdd, layer7CurCfgHttpmodRuleHdrElmntStatusTxt=layer7CurCfgHttpmodRuleHdrElmntStatusTxt, layer7NewCfgHttpmodRuleFileLineTextListIdIndex=layer7NewCfgHttpmodRuleFileLineTextListIdIndex, layer7CurCfgContentClassFileNameID=layer7CurCfgContentClassFileNameID, layer7CurCfgHttpmodRuleElement=layer7CurCfgHttpmodRuleElement, layer7NewCfgContentClassCookieKey=layer7NewCfgContentClassCookieKey, layer7NewCfgContentClassXmlTagID=layer7NewCfgContentClassXmlTagID, slbCurCfgUrlRedirNoCacheOrigSrv=slbCurCfgUrlRedirNoCacheOrigSrv, layer7NewCfgContentClassTextTable=layer7NewCfgContentClassTextTable, layer7NewCfgContentClassXmlTagMatchTypeName=layer7NewCfgContentClassXmlTagMatchTypeName, layer7NewCfgHttpmodRuleAction=layer7NewCfgHttpmodRuleAction, slbCurCfgSipUdpRuleSeverity=slbCurCfgSipUdpRuleSeverity, layer7NewCfgContentClassFileNameContentClassID=layer7NewCfgContentClassFileNameContentClassID, layer7NewCfgHttpmodRuleHdrValue=layer7NewCfgHttpmodRuleHdrValue, layer7NewCfgHttpmodRuleHdrElmntHdrVal=layer7NewCfgHttpmodRuleHdrElmntHdrVal, urlRedirStats=urlRedirStats, urlStatSlbPathTableEntry=urlStatSlbPathTableEntry, layer7CurCfgContentClassTextCase=layer7CurCfgContentClassTextCase, layer7GeneralCfg=layer7GeneralCfg, layer7NewCfgContentClassHeaderTable=layer7NewCfgContentClassHeaderTable, slbNewCfgUrlRedirNoCacheOrigSrv=slbNewCfgUrlRedirNoCacheOrigSrv, slbNewCfgSdpTable=slbNewCfgSdpTable, slbNewCfgUrlLbPathIndex=slbNewCfgUrlLbPathIndex, layer7CurCfgContentClassTextTable=layer7CurCfgContentClassTextTable, layer7NewCfgHttpmodRuleHdrElmnt=layer7NewCfgHttpmodRuleHdrElmnt, layer7CurCfgContentClassCookieEntry=layer7CurCfgContentClassCookieEntry, layer7NewCfgContentClassPathCase=layer7NewCfgContentClassPathCase, layer7NewCfgContentClassCookieMatchTypeKey=layer7NewCfgContentClassCookieMatchTypeKey, urlMaintStatTotalSEQBufFrees=urlMaintStatTotalSEQBufFrees, layer7CurCfgContentClassCookieMatchTypeKey=layer7CurCfgContentClassCookieMatchTypeKey, slbCurCfgSipUdpRuleTableEntry=slbCurCfgSipUdpRuleTableEntry, layer7NewCfgContentClassHostNameHostName=layer7NewCfgContentClassHostNameHostName, layer7NewCfgHttpmodRuleUrlMtchHost=layer7NewCfgHttpmodRuleUrlMtchHost, layer7CurCfgHttpmodRuleFileLineTextListIdIndex=layer7CurCfgHttpmodRuleFileLineTextListIdIndex, layer7CurCfgHttpmodRuleUrlMtchPgTyp=layer7CurCfgHttpmodRuleUrlMtchPgTyp, urlStatRedNonGets=urlStatRedNonGets, slbCurCfgUrlHttpMethodsTableEntry=slbCurCfgUrlHttpMethodsTableEntry, layer7NewCfgDbindTimeout=layer7NewCfgDbindTimeout, layer7CurCfgContentClassFileTypeCase=layer7CurCfgContentClassFileTypeCase, layer7CurCfgContentClassCookieVal=layer7CurCfgContentClassCookieVal, layer7NewCfgHttpmodRuleHdrElmntCkieVal=layer7NewCfgHttpmodRuleHdrElmntCkieVal, layer7CurCfgHttpmodRuleUrlActnProtcl=layer7CurCfgHttpmodRuleUrlActnProtcl, slbNewCfgUrlHttpMethodsTable=slbNewCfgUrlHttpMethodsTable, layer7NewCfgContentClassHostNameID=layer7NewCfgContentClassHostNameID, slbNewCfgUrlLbPathPatternStringType=slbNewCfgUrlLbPathPatternStringType, layer7NewCfgContentClassTextText=layer7NewCfgContentClassTextText, layer7NewCfgContentClassHeaderEntry=layer7NewCfgContentClassHeaderEntry, slbNewCfgUrlLbErrorMsg=slbNewCfgUrlLbErrorMsg, layer7NewCfgContentClassXmlTagDelete=layer7NewCfgContentClassXmlTagDelete, layer7NewCfgContentClassTextDelete=layer7NewCfgContentClassTextDelete, slbUrlRedir=slbUrlRedir, layer7CurCfgHttpmodRuleCookieInsrtCookieVal=layer7CurCfgHttpmodRuleCookieInsrtCookieVal, slbCurCfgUrlLbPathAllowRegExp=slbCurCfgUrlLbPathAllowRegExp, urlSpMaintStatsSpIndex=urlSpMaintStatsSpIndex, layer7CurCfgHttpmodRuleHdrElmntRegx=layer7CurCfgHttpmodRuleHdrElmntRegx, layer7NewCfgHttpmodRuleCookieInsrtRegx=layer7NewCfgHttpmodRuleCookieInsrtRegx, layer7NewCfgContentClassID=layer7NewCfgContentClassID, slbNewCfgUrlLbPathOper=slbNewCfgUrlLbPathOper, urlSpMaintStatsCurMemUnits=urlSpMaintStatsCurMemUnits, layer7NewCfgContentClassLogicalExpression=layer7NewCfgContentClassLogicalExpression, layer7NewCfgHttpmodRuleHdrElmntStatusCode=layer7NewCfgHttpmodRuleHdrElmntStatusCode, layer7Configs=layer7Configs, layer7NewCfgHttpmodRuleHdrEntry=layer7NewCfgHttpmodRuleHdrEntry, slbCurCfgUrlHttpMethodIndex=slbCurCfgUrlHttpMethodIndex, layer7CurCfgHttpmodRuleAction=layer7CurCfgHttpmodRuleAction, layer7NewCfgHttpmodRuleUrlActnHstSec=layer7NewCfgHttpmodRuleUrlActnHstSec, layer7NewCfgContentClassXmlTagVal=layer7NewCfgContentClassXmlTagVal, layer7NewCfgHttpmodRuleCookieReplcCookey=layer7NewCfgHttpmodRuleCookieReplcCookey, layer7CurCfgHttpmodRuleFileLineTextTable=layer7CurCfgHttpmodRuleFileLineTextTable, layer7CurCfgHttpmodRuleCookieIndex=layer7CurCfgHttpmodRuleCookieIndex, slbCurCfgUrlLbCaseSensitiveStrMatch=slbCurCfgUrlLbCaseSensitiveStrMatch, layer7CurCfgContentClassTextLookupArea=layer7CurCfgContentClassTextLookupArea, layer7CurCfgContentClassCookieKey=layer7CurCfgContentClassCookieKey, slbNewCfgUrlLbPathHTTPHeaderValue=slbNewCfgUrlLbPathHTTPHeaderValue, layer7CurCfgContentClassHostNameHostName=layer7CurCfgContentClassHostNameHostName, layer7CurCfgHttpmodRuleUrlMtchPort=layer7CurCfgHttpmodRuleUrlMtchPort, layer7CurCfgContentClassPathEntry=layer7CurCfgContentClassPathEntry, slbNewCfgUrlLbPathApplication=slbNewCfgUrlLbPathApplication, layer7NewCfgHttpmodRuleIndex=layer7NewCfgHttpmodRuleIndex, slbCurCfgUrlHttpMethodsTable=slbCurCfgUrlHttpMethodsTable, urlCfg=urlCfg, slbCurCfgUrlLbPathTableEntry=slbCurCfgUrlLbPathTableEntry, layer7CurCfgContentClassCookieMatchTypeVal=layer7CurCfgContentClassCookieMatchTypeVal, slbCurCfgUrlLbPathOper=slbCurCfgUrlLbPathOper, layer7CurCfgHttpmodRuleCookieInsrtFiletyp=layer7CurCfgHttpmodRuleCookieInsrtFiletyp, layer7CurCfgContentClassFileType=layer7CurCfgContentClassFileType, slbCurCfgSipUdpRuleBmap=slbCurCfgSipUdpRuleBmap, layer7CurCfgContentClassHostNameTable=layer7CurCfgContentClassHostNameTable, layer7NewCfgHttpmodRuleUrlActnPathTyp=layer7NewCfgHttpmodRuleUrlActnPathTyp, layer7NewCfgHttpmodRuleHdrInsert=layer7NewCfgHttpmodRuleHdrInsert, urlMaintStatSwitchRetries=urlMaintStatSwitchRetries, layer7CurCfgHttpmodRuleUrlListIdIndex=layer7CurCfgHttpmodRuleUrlListIdIndex, layer7NewCfgHttpmodRuleDelete=layer7NewCfgHttpmodRuleDelete, layer7NewCfgHttpmodRuleTextNewText=layer7NewCfgHttpmodRuleTextNewText, urlMaintStatTotalDataBufAllocs=urlMaintStatTotalDataBufAllocs, layer7CurCfgContentClassHostNameID=layer7CurCfgContentClassHostNameID, layer7NewCfgContentClassCookieEntry=layer7NewCfgContentClassCookieEntry, layer7NewCfgContentClassEntry=layer7NewCfgContentClassEntry, layer7NewCfgContentClassFileNameEntry=layer7NewCfgContentClassFileNameEntry, slbUrlBalance=slbUrlBalance, layer7NewCfgContentClassHostNameMatchType=layer7NewCfgContentClassHostNameMatchType, layer7CurCfgHttpmodRuleAdminStatus=layer7CurCfgHttpmodRuleAdminStatus, layer7NewCfgHttpmodRuleFileLineTextIndex=layer7NewCfgHttpmodRuleFileLineTextIndex, layer7CurCfgContentClassXMLTag=layer7CurCfgContentClassXMLTag, layer7NewCfgHttpmodRuleHdrElmntTxt=layer7NewCfgHttpmodRuleHdrElmntTxt, layer7NewCfgHttpmodListAdminStatus=layer7NewCfgHttpmodListAdminStatus, layer7Stats=layer7Stats, layer7CurCfgContentClassCookie=layer7CurCfgContentClassCookie, PYSNMP_MODULE_ID=layer7, layer7NewCfgHttpmodListEntry=layer7NewCfgHttpmodListEntry, layer7CurCfgContentClassHostNameContentClassID=layer7CurCfgContentClassHostNameContentClassID, layer7NewCfgHttpmodRuleUrlMtchPgName=layer7NewCfgHttpmodRuleUrlMtchPgName, layer7CurCfgHttpmodRuleCookieInsrtUrlPath=layer7CurCfgHttpmodRuleCookieInsrtUrlPath, layer7CurCfgHttpmodRuleHdrReplacNewHdr=layer7CurCfgHttpmodRuleHdrReplacNewHdr, urlMaintStatInvalidMethods=urlMaintStatInvalidMethods, layer7NewCfgHttpmodRuleUrlActnPgTyp=layer7NewCfgHttpmodRuleUrlActnPgTyp, layer7NewCfgContentClassTextCase=layer7NewCfgContentClassTextCase, layer7NewCfgHttpmodRuleUrlActnPort=layer7NewCfgHttpmodRuleUrlActnPort, slbNewCfgSipUdpRuleDelete=slbNewCfgSipUdpRuleDelete, layer7NewCfgContentClassHostNameDelete=layer7NewCfgContentClassHostNameDelete, layer7CurCfgHttpmodRuleStatlineCode=layer7CurCfgHttpmodRuleStatlineCode, slbSdpTableMaxSize=slbSdpTableMaxSize, slbCurCfgUrlRedirHeaderName=slbCurCfgUrlRedirHeaderName, layer7CurCfgContentClassHostNameMatchType=layer7CurCfgContentClassHostNameMatchType, urlMaintStatMaxSessPerBucket=urlMaintStatMaxSessPerBucket, layer7NewCfgHttpmodRuleFileLineTextTable=layer7NewCfgHttpmodRuleFileLineTextTable, urlMaintStatMaxFramesPerSess=urlMaintStatMaxFramesPerSess, slbCurCfgSipUdpRuleMsg=slbCurCfgSipUdpRuleMsg, layer7NewCfgContentClassHostName=layer7NewCfgContentClassHostName, layer7CurCfgContentClassHeaderName=layer7CurCfgContentClassHeaderName, layer7CurCfgHttpmodRuleCookieInsrtKey=layer7CurCfgHttpmodRuleCookieInsrtKey, layer7NewCfgHttpmodRuleCookieInsrtHdrVal=layer7NewCfgHttpmodRuleCookieInsrtHdrVal, layer7NewCfgContentClassCopy=layer7NewCfgContentClassCopy, urlStatRedCookie=urlStatRedCookie, slbNewCfgSipUdpRuleRem=slbNewCfgSipUdpRuleRem, slbCurCfgUrlLbPathDepth=slbCurCfgUrlLbPathDepth, urlMaintStatMaxBytesBuffered=urlMaintStatMaxBytesBuffered, layer7NewCfgHttpmodRuleUrlMtchPath=layer7NewCfgHttpmodRuleUrlMtchPath, layer7CurCfgHttpmodRuleCookieInsrtStatsTxt=layer7CurCfgHttpmodRuleCookieInsrtStatsTxt, layer7CurCfgContentClassFileTypeEntry=layer7CurCfgContentClassFileTypeEntry, slbParsingCip=slbParsingCip, urlMaintStatReqTooLong=urlMaintStatReqTooLong, layer7CurCfgHttpmodRuleEntry=layer7CurCfgHttpmodRuleEntry, slbCurCfgUrlLbPathDnsType=slbCurCfgUrlLbPathDnsType, urlSpMaintStatsTable=urlSpMaintStatsTable, layer7NewCfgHttpmodRuleCopy=layer7NewCfgHttpmodRuleCopy, urlMaintStatTotalSEQBufAllocs=urlMaintStatTotalSEQBufAllocs, slbNewCfgSipUdpRuleContent=slbNewCfgSipUdpRuleContent, layer7NewCfgHttpmodRuleDirectn=layer7NewCfgHttpmodRuleDirectn, slbNewCfgSipUdpRuleTable=slbNewCfgSipUdpRuleTable, layer7NewCfgHttpmodRuleUrlActnHostTyp=layer7NewCfgHttpmodRuleUrlActnHostTyp, layer7CurCfgContentClassFileTypeTable=layer7CurCfgContentClassFileTypeTable, layer7CurCfgContentClassFileNameFileName=layer7CurCfgContentClassFileNameFileName, slbCurCfgSipUdpRuleTable=slbCurCfgSipUdpRuleTable, urlMaintStatAgedSessions=urlMaintStatAgedSessions, slbCurCfgUrlRedirHeaderNameType=slbCurCfgUrlRedirHeaderNameType, layer7CurCfgHttpmodRuleCookieInsrtStatsCode=layer7CurCfgHttpmodRuleCookieInsrtStatsCode, layer7CurCfgContentClassHeaderVal=layer7CurCfgContentClassHeaderVal, slbCurCfgSdpTable=slbCurCfgSdpTable, layer7CurCfgHttpmodRuleHdrElmntTxt=layer7CurCfgHttpmodRuleHdrElmntTxt, layer7CurCfgHttpmodRuleFileLineTextIndex=layer7CurCfgHttpmodRuleFileLineTextIndex, layer7NewCfgHttpmodRuleHdrReplacHdr=layer7NewCfgHttpmodRuleHdrReplacHdr, layer7NewCfgHttpmodRuleHttpBody=layer7NewCfgHttpmodRuleHttpBody, urlMaintStatUBufAllocFails=urlMaintStatUBufAllocFails, slbCurCfgSipUdpRuleContent=slbCurCfgSipUdpRuleContent, layer7NewCfgHttpmodRuleHdrIndex=layer7NewCfgHttpmodRuleHdrIndex, layer7CurCfgContentClassXmlTagMatchTypeName=layer7CurCfgContentClassXmlTagMatchTypeName, layer7NewCfgHttpmodRuleUrlActnPthRplc=layer7NewCfgHttpmodRuleUrlActnPthRplc, activeServerConns=activeServerConns, slbCurCfgSipUdpRuleAdd=slbCurCfgSipUdpRuleAdd, layer7CurCfgContentClassHeaderMatchTypeName=layer7CurCfgContentClassHeaderMatchTypeName, layer7NewCfgHttpmodRuleStatlineNewTxt=layer7NewCfgHttpmodRuleStatlineNewTxt, urlMaintStatInvalidHandshakes=urlMaintStatInvalidHandshakes, layer7CurCfgHttpmodRuleStatlineTxt=layer7CurCfgHttpmodRuleStatlineTxt, layer7CurCfgHttpmodRuleHdrElmntStatusCode=layer7CurCfgHttpmodRuleHdrElmntStatusCode, layer7CurCfgContentClassPathMatchType=layer7CurCfgContentClassPathMatchType, layer7CurCfgHttpmodRuleCookieInsrtElem=layer7CurCfgHttpmodRuleCookieInsrtElem, layer7CurCfgContentClassHeaderCase=layer7CurCfgContentClassHeaderCase, layer7NewCfgContentClassHostNameTable=layer7NewCfgContentClassHostNameTable, layer7CurCfgHttpmodRuleCookieReplcCookey=layer7CurCfgHttpmodRuleCookieReplcCookey, layer7CurCfgHttpmodRuleCookieEntry=layer7CurCfgHttpmodRuleCookieEntry, urlSpMaintStatsTableEntry=urlSpMaintStatsTableEntry, layer7NewCfgHttpmodRuleListIdIndex=layer7NewCfgHttpmodRuleListIdIndex, slbNewCfgUrlLbPathDelete=slbNewCfgUrlLbPathDelete, layer7NewCfgContentClassFileNameID=layer7NewCfgContentClassFileNameID, slbNewCfgSdpPublicAddr=slbNewCfgSdpPublicAddr, layer7CurCfgHttpmodRuleCookieListIdIndex=layer7CurCfgHttpmodRuleCookieListIdIndex, layer7CurCfgHttpmodRuleHdrElmntHdrField=layer7CurCfgHttpmodRuleHdrElmntHdrField, layer7NewCfgContentClassCookie=layer7NewCfgContentClassCookie, layer7CurCfgHttpmodRuleTextNewText=layer7CurCfgHttpmodRuleTextNewText, layer7CurCfgContentClassFileName=layer7CurCfgContentClassFileName, availServerConns=availServerConns, slbNewCfgUrlHttpMethodString=slbNewCfgUrlHttpMethodString, slbCurCfgUrlRedirHeader=slbCurCfgUrlRedirHeader, layer7NewCfgHttpmodListCopy=layer7NewCfgHttpmodListCopy, layer7CurCfgHttpmodListTable=layer7CurCfgHttpmodListTable, layer7CurCfgHttpmodRuleFileTypRep=layer7CurCfgHttpmodRuleFileTypRep, layer7CurCfgHttpmodRuleCookieInsrtHdrVal=layer7CurCfgHttpmodRuleCookieInsrtHdrVal)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER7-MIB", layer7NewCfgContentClassName=layer7NewCfgContentClassName, slbNewCfgSdpDelete=slbNewCfgSdpDelete, layer7CurCfgContentClassHeaderID=layer7CurCfgContentClassHeaderID, slbNewCfgUrlLbPathTable=slbNewCfgUrlLbPathTable, layer7CurCfgHttpmodRuleUrlMtchHost=layer7CurCfgHttpmodRuleUrlMtchHost, urlMaintStatConnSplicing=urlMaintStatConnSplicing, layer7CurCfgContentClassXmlTagVal=layer7CurCfgContentClassXmlTagVal, layer7CurCfgContentClassTextContentClassID=layer7CurCfgContentClassTextContentClassID, layer7NewCfgHttpmodRuleHdrTable=layer7NewCfgHttpmodRuleHdrTable, layer7NewCfgContentClassHeader=layer7NewCfgContentClassHeader, layer7NewCfgHttpmodRuleUrlMtchPgTyp=layer7NewCfgHttpmodRuleUrlMtchPgTyp, layer7CurCfgContentClassXmlTagName=layer7CurCfgContentClassXmlTagName, layer7NewCfgHttpmodRuleCookieInsrtTxt=layer7NewCfgHttpmodRuleCookieInsrtTxt, slbNewCfgSipUdpRuleBmap=slbNewCfgSipUdpRuleBmap, slbCurCfgSipUdpRuleContract=slbCurCfgSipUdpRuleContract, layer7NewCfgContentClassXmlEntry=layer7NewCfgContentClassXmlEntry, slbNewCfgUrlLbPathDnsType=slbNewCfgUrlLbPathDnsType, layer7CurCfgHttpmodRuleTextReplace=layer7CurCfgHttpmodRuleTextReplace, layer7CurCfgContentClassTextMatchType=layer7CurCfgContentClassTextMatchType, slbCurCfgUrlRedirUriHashLength=slbCurCfgUrlRedirUriHashLength, layer7NewCfgHttpmodRuleCookieRemvCookieVal=layer7NewCfgHttpmodRuleCookieRemvCookieVal, layer7NewCfgContentClassXmlTable=layer7NewCfgContentClassXmlTable, slbNewCfgUrlLbPathHTTPHeader=slbNewCfgUrlLbPathHTTPHeader, layer7CurCfgHttpmodRuleUrlActnPgTyp=layer7CurCfgHttpmodRuleUrlActnPgTyp, layer7NewCfgHttpmodRuleHdrReplacNewVal=layer7NewCfgHttpmodRuleHdrReplacNewVal, layer7CurCfgContentClassCookieID=layer7CurCfgContentClassCookieID, layer7CurCfgHttpmodRuleHdrElmntCkieVal=layer7CurCfgHttpmodRuleHdrElmntCkieVal, urlStatRedOrigSrvs=urlStatRedOrigSrvs, layer7CurCfgContentClassText=layer7CurCfgContentClassText, layer7NewCfgHttpmodRuleTable=layer7NewCfgHttpmodRuleTable, slbNewCfgUrlHashing=slbNewCfgUrlHashing, layer7CurCfgContentClassFileTypeContentClassID=layer7CurCfgContentClassFileTypeContentClassID, layer7NewCfgHttpmodRuleHdrElmntFileTyp=layer7NewCfgHttpmodRuleHdrElmntFileTyp, agedOutClientConns=agedOutClientConns, urlMaintStatCurSPBufEntries=urlMaintStatCurSPBufEntries, layer7NewCfgHttpmodRuleFileTypRep=layer7NewCfgHttpmodRuleFileTypRep, layer7NewCfgContentClassPathFilePath=layer7NewCfgContentClassPathFilePath, layer7CurCfgHttpmodRuleUrlActnHstRplc=layer7CurCfgHttpmodRuleUrlActnHstRplc, layer7NewCfgContentClassFileName=layer7NewCfgContentClassFileName, slbNewCfgSipUdpRuleMsg=slbNewCfgSipUdpRuleMsg)
