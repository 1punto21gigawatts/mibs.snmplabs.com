#
# PySNMP MIB module NAGIOS-NOTIFY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NAGIOS-NOTIFY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
HostStateType, nagios, HostStateID, ServiceStateID, NotifyType = mibBuilder.importSymbols("NAGIOS-ROOT-MIB", "HostStateType", "nagios", "HostStateID", "ServiceStateID", "NotifyType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, TimeTicks, Counter32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, IpAddress, MibIdentifier, Integer32, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "TimeTicks", "Counter32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "IpAddress", "MibIdentifier", "Integer32", "ModuleIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nagiosNotify = ModuleIdentity((1, 3, 6, 1, 4, 1, 20006, 1))
nagiosNotify.setRevisions(('2005-03-09 00:00', '2005-01-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nagiosNotify.setRevisionsDescriptions(('Spell check', 'Initial Version',))
if mibBuilder.loadTexts: nagiosNotify.setLastUpdated('200503090000Z')
if mibBuilder.loadTexts: nagiosNotify.setOrganization('Nagios')
if mibBuilder.loadTexts: nagiosNotify.setContactInfo(' Subhendu Ghosh Telephone: +1 201 232 2851 Email: sghosh@users.sourceforge.net Nagios Information: http://www.nagios.org ')
if mibBuilder.loadTexts: nagiosNotify.setDescription('Objects for Nagios(tm) events. There are 2 primary tables reflecting the division in Nagios for Host events and Service events. The event tables are extended by the HostNotifyTable and the ServiceNotifyTable to keep track of the notifications based on events. The tables entries themselves are not accessible but are used for OID entries for TRAP/INFORM notifications. These objects are based on the macros defined in Nagios v2.0 ')
nagiosHostEventTable = MibTable((1, 3, 6, 1, 4, 1, 20006, 1, 1), )
if mibBuilder.loadTexts: nagiosHostEventTable.setStatus('current')
if mibBuilder.loadTexts: nagiosHostEventTable.setDescription('Table of Nagios host events')
nagiosHostEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1), ).setIndexNames((0, "NAGIOS-NOTIFY-MIB", "nHostEventIndex"))
if mibBuilder.loadTexts: nagiosHostEventEntry.setStatus('current')
if mibBuilder.loadTexts: nagiosHostEventEntry.setDescription('Each notification event')
nHostEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nHostEventIndex.setStatus('current')
if mibBuilder.loadTexts: nHostEventIndex.setDescription('This object uniquely identifies this host event entry. It is generated by the SNMP application and is not related to any Nagios data.')
nHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostname.setStatus('current')
if mibBuilder.loadTexts: nHostname.setDescription('Hostname as specified in the Nagios configuration file.')
nHostAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostAlias.setStatus('current')
if mibBuilder.loadTexts: nHostAlias.setDescription('The host alias as specified in the Nagios configuration file')
nHostStateID = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 4), HostStateID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostStateID.setStatus('current')
if mibBuilder.loadTexts: nHostStateID.setDescription('The host state as defined by the HOSTSTATEID macro')
nHostStateType = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 5), HostStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostStateType.setStatus('current')
if mibBuilder.loadTexts: nHostStateType.setDescription('The host state as defined by the HOSTSTATETYPE macro')
nHostAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostAttempt.setStatus('current')
if mibBuilder.loadTexts: nHostAttempt.setDescription('The number of the current host check retry. For instance, if this is the second time that the host is being rechecked, this will be the number two. Current attempt number is really only useful when writing host event handlers for soft states that take a specific action based on the host retry number. The host state as defined by the HOSTSTATEID macro')
nHostDurationSec = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostDurationSec.setStatus('current')
if mibBuilder.loadTexts: nHostDurationSec.setDescription('A number indicating the number of seconds that the host has spent in its current state')
nHostGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostGroupName.setStatus('current')
if mibBuilder.loadTexts: nHostGroupName.setDescription('The short name of the hostgroup that this host belongs to. This value is taken from the hostgroup_name directive in the hostgroup definition. If the host belongs to more than one hostgroup this macro will contain the name of just one of them.')
nHostLastCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostLastCheck.setStatus('current')
if mibBuilder.loadTexts: nHostLastCheck.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which a check of the host was last performed.')
nHostLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostLastChange.setStatus('current')
if mibBuilder.loadTexts: nHostLastChange.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time the host last changed state.')
nHostLastUp = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostLastUp.setStatus('current')
if mibBuilder.loadTexts: nHostLastUp.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which the host was last detected as being in an UP state.')
nHostLastDown = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostLastDown.setStatus('current')
if mibBuilder.loadTexts: nHostLastDown.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which the host was last detected as being in an DOWN state.')
nHostLastUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostLastUnreachable.setStatus('current')
if mibBuilder.loadTexts: nHostLastUnreachable.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which the host was last detected as being in an UNREACHABLE state.')
nHostOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostOutput.setStatus('current')
if mibBuilder.loadTexts: nHostOutput.setDescription('The text output from the last host check (i.e. Ping OK).')
nHostPerfData = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostPerfData.setStatus('current')
if mibBuilder.loadTexts: nHostPerfData.setDescription('This object contains any performance data that may have been returned by the last host check.')
nagiosHostNotifyTable = MibTable((1, 3, 6, 1, 4, 1, 20006, 1, 2), )
if mibBuilder.loadTexts: nagiosHostNotifyTable.setStatus('current')
if mibBuilder.loadTexts: nagiosHostNotifyTable.setDescription('Table of Nagios host notifications')
nagiosHostNotifyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20006, 1, 2, 1), ).setIndexNames((0, "NAGIOS-NOTIFY-MIB", "nHostEventIndex"))
if mibBuilder.loadTexts: nagiosHostNotifyEntry.setStatus('current')
if mibBuilder.loadTexts: nagiosHostNotifyEntry.setDescription('Nagios host notifications extends the nagiosHostEventTable when a notification is generated for an event.')
nHostNotifyType = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 2, 1, 1), NotifyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostNotifyType.setStatus('current')
if mibBuilder.loadTexts: nHostNotifyType.setDescription('This identifies the type of notification that is being sent (PROBLEM, RECOVERY, ACKNOWLEDGEMENT, FLAPPINGSTART or FLAPPINGSTOP)')
nHostNotifyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostNotifyNum.setStatus('current')
if mibBuilder.loadTexts: nHostNotifyNum.setDescription('This identifies the current notification number for the service or host. The notification number increases by one (1) each time a new notification is sent out for a host or service (except for acknowledgements). The notification number is reset to 0 when the host or service recovers (after the recovery notification has gone out). Acknowledgements do not cause the notification number to increase.')
nHostAckAuthor = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostAckAuthor.setStatus('current')
if mibBuilder.loadTexts: nHostAckAuthor.setDescription('A string containing the name of the user who acknowledged the host problem. This macro is only valid in notifications where the $NOTIFICATIONTYPE$ macro is set to ACKNOWLEDGEMENT.')
nHostAckComment = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nHostAckComment.setStatus('current')
if mibBuilder.loadTexts: nHostAckComment.setDescription('A string containing the acknowledgement comment that was entered by the user who acknowledged the host problem. This macro is only valid in notifications where the $NOTIFICATIONTYPE$ macro is set to ACKNOWLEDGEMENT')
nagiosSvcEventTable = MibTable((1, 3, 6, 1, 4, 1, 20006, 1, 3), )
if mibBuilder.loadTexts: nagiosSvcEventTable.setStatus('current')
if mibBuilder.loadTexts: nagiosSvcEventTable.setDescription('Table of Nagios service notifications')
nagiosSvcEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1), ).setIndexNames((0, "NAGIOS-NOTIFY-MIB", "nSvcEventIndex"))
if mibBuilder.loadTexts: nagiosSvcEventEntry.setStatus('current')
if mibBuilder.loadTexts: nagiosSvcEventEntry.setDescription('Table of Nagios service events.')
nSvcEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nSvcEventIndex.setStatus('current')
if mibBuilder.loadTexts: nSvcEventIndex.setDescription('This object uniquely identifies this service event entry')
nSvcHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcHostname.setStatus('current')
if mibBuilder.loadTexts: nSvcHostname.setDescription('Hostname as specified in the Nagios configuration file.')
nSvcHostAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcHostAlias.setStatus('current')
if mibBuilder.loadTexts: nSvcHostAlias.setDescription('The host alias as specified in the Nagios configuration file')
nSvcHostStateID = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 4), HostStateID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcHostStateID.setStatus('current')
if mibBuilder.loadTexts: nSvcHostStateID.setDescription('A number that corresponds to the current state of the service: 0=OK, 1=WARNING, 2=CRITICAL, 3=UNKNOWN.')
nSvcHostStateType = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 5), HostStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcHostStateType.setStatus('current')
if mibBuilder.loadTexts: nSvcHostStateType.setDescription('Whether the host is in a hard or soft state.')
nSvcDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcDesc.setStatus('current')
if mibBuilder.loadTexts: nSvcDesc.setDescription('This value is taken from the description directive of the service definition.')
nSvcStateID = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 7), ServiceStateID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcStateID.setStatus('current')
if mibBuilder.loadTexts: nSvcStateID.setDescription(' A number that corresponds to the current state of the service: 0=OK, 1=WARNING, 2=CRITICAL, 3=UNKNOWN')
nSvcAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcAttempt.setStatus('current')
if mibBuilder.loadTexts: nSvcAttempt.setDescription('The number of the current service check retry. For instance, if this is the second time that the service is being rechecked, this will be the number two. Current attempt number is really only useful when writing service event handlers for soft states that take a specific action based on the service retry number.')
nSvcDurationSec = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcDurationSec.setStatus('current')
if mibBuilder.loadTexts: nSvcDurationSec.setDescription('A number indicating the number of seconds that the service has spent in its current state.')
nSvcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcGroupName.setStatus('current')
if mibBuilder.loadTexts: nSvcGroupName.setDescription('The short name of the servicegroup that this service belongs to. This value is taken from the servicegroup_name directive in the servicegroup definition. If the service belongs to more than one servicegroup this object will contain the name of just one of them.')
nSvcLastCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcLastCheck.setStatus('current')
if mibBuilder.loadTexts: nSvcLastCheck.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which a check of the service was last performed.')
nSvcLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcLastChange.setStatus('current')
if mibBuilder.loadTexts: nSvcLastChange.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time the service last changed state.')
nSvcLastOK = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcLastOK.setStatus('current')
if mibBuilder.loadTexts: nSvcLastOK.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which the service was last detected as being in an OK state.')
nSvcLastWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcLastWarn.setStatus('current')
if mibBuilder.loadTexts: nSvcLastWarn.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which the service was last detected as being in a WARNING state.')
nSvcLastCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcLastCrit.setStatus('current')
if mibBuilder.loadTexts: nSvcLastCrit.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which the service was last detected as being in a CRITICAL state.')
nSvcLastUnkn = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcLastUnkn.setStatus('current')
if mibBuilder.loadTexts: nSvcLastUnkn.setDescription('This is a timestamp in time_t format (seconds since the UNIX epoch) indicating the time at which the service was last detected as being in an UNKNOWN state.')
nSvcOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcOutput.setStatus('current')
if mibBuilder.loadTexts: nSvcOutput.setDescription('The text output from the last service check (i.e. Ping OK).')
nSvcPerfData = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 3, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcPerfData.setStatus('current')
if mibBuilder.loadTexts: nSvcPerfData.setDescription('This object contains any performance data that may have been returned by the last service check.')
nagiosSvcNotifyTable = MibTable((1, 3, 6, 1, 4, 1, 20006, 1, 4), )
if mibBuilder.loadTexts: nagiosSvcNotifyTable.setStatus('current')
if mibBuilder.loadTexts: nagiosSvcNotifyTable.setDescription('Table of Nagios service notifications.')
nagiosSvcNotifyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20006, 1, 4, 1), ).setIndexNames((0, "NAGIOS-NOTIFY-MIB", "nSvcEventIndex"))
if mibBuilder.loadTexts: nagiosSvcNotifyEntry.setStatus('current')
if mibBuilder.loadTexts: nagiosSvcNotifyEntry.setDescription('Nagios service notifications extends the nagiosSvcEnevtsTable when a notification is generated for an event.')
nSvcNotifyType = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 4, 1, 1), NotifyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcNotifyType.setStatus('current')
if mibBuilder.loadTexts: nSvcNotifyType.setDescription('A string identifying the type of notification that is being sent (PROBLEM, RECOVERY, ACKNOWLEDGEMENT, FLAPPINGSTART or FLAPPINGSTOP).')
nSvcNotifyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcNotifyNum.setStatus('current')
if mibBuilder.loadTexts: nSvcNotifyNum.setDescription('The current notification number for the service or host. The notification number increases by one (1) each time a new notification is sent out for a host or service (except for acknowledgements). The notification number is reset to 0 when the host or service recovers (after the recovery notification has gone out). Acknowledgements do not cause the notification number to increase.')
nSvcAckAuthor = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcAckAuthor.setStatus('current')
if mibBuilder.loadTexts: nSvcAckAuthor.setDescription('A string containing the name of the user who acknowledged the service problem. This object is only valid in notifications where the nSvcNotifyType object is set to ACKNOWLEDGEMENT.')
nSvcAckComment = MibTableColumn((1, 3, 6, 1, 4, 1, 20006, 1, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nSvcAckComment.setStatus('current')
if mibBuilder.loadTexts: nSvcAckComment.setDescription('A string containing the acknowledgement comment that was entered by the user who acknowledged the service problem. This object is only valid in notifications where the nSvcNotifyType object is set to ACKNOWLEDGEMENT.')
nHostEvent = NotificationType((1, 3, 6, 1, 4, 1, 20006, 1, 5)).setObjects(("NAGIOS-NOTIFY-MIB", "nHostname"), ("NAGIOS-NOTIFY-MIB", "nHostStateID"), ("NAGIOS-NOTIFY-MIB", "nHostStateType"), ("NAGIOS-NOTIFY-MIB", "nHostAttempt"), ("NAGIOS-NOTIFY-MIB", "nHostDurationSec"), ("NAGIOS-NOTIFY-MIB", "nHostGroupName"), ("NAGIOS-NOTIFY-MIB", "nHostLastCheck"), ("NAGIOS-NOTIFY-MIB", "nHostLastChange"), ("NAGIOS-NOTIFY-MIB", "nHostOutput"))
if mibBuilder.loadTexts: nHostEvent.setStatus('current')
if mibBuilder.loadTexts: nHostEvent.setDescription('The SNMP trap that is generated as a result of an event with the host in Nagios.')
nHostNotify = NotificationType((1, 3, 6, 1, 4, 1, 20006, 1, 6)).setObjects(("NAGIOS-NOTIFY-MIB", "nHostNotifyType"), ("NAGIOS-NOTIFY-MIB", "nHostNotifyNum"), ("NAGIOS-NOTIFY-MIB", "nHostAckAuthor"), ("NAGIOS-NOTIFY-MIB", "nHostAckComment"), ("NAGIOS-NOTIFY-MIB", "nHostname"), ("NAGIOS-NOTIFY-MIB", "nHostStateID"), ("NAGIOS-NOTIFY-MIB", "nHostStateType"), ("NAGIOS-NOTIFY-MIB", "nHostAttempt"), ("NAGIOS-NOTIFY-MIB", "nHostDurationSec"), ("NAGIOS-NOTIFY-MIB", "nHostGroupName"), ("NAGIOS-NOTIFY-MIB", "nHostLastCheck"), ("NAGIOS-NOTIFY-MIB", "nHostLastChange"), ("NAGIOS-NOTIFY-MIB", "nHostOutput"))
if mibBuilder.loadTexts: nHostNotify.setStatus('current')
if mibBuilder.loadTexts: nHostNotify.setDescription('The SNMP trap that is generated as a result of an event requiring notification for a host in Nagios.')
nSvcEvent = NotificationType((1, 3, 6, 1, 4, 1, 20006, 1, 7)).setObjects(("NAGIOS-NOTIFY-MIB", "nHostname"), ("NAGIOS-NOTIFY-MIB", "nHostStateID"), ("NAGIOS-NOTIFY-MIB", "nSvcDesc"), ("NAGIOS-NOTIFY-MIB", "nSvcStateID"), ("NAGIOS-NOTIFY-MIB", "nSvcAttempt"), ("NAGIOS-NOTIFY-MIB", "nSvcDurationSec"), ("NAGIOS-NOTIFY-MIB", "nSvcGroupName"), ("NAGIOS-NOTIFY-MIB", "nSvcLastCheck"), ("NAGIOS-NOTIFY-MIB", "nSvcLastChange"), ("NAGIOS-NOTIFY-MIB", "nSvcOutput"))
if mibBuilder.loadTexts: nSvcEvent.setStatus('current')
if mibBuilder.loadTexts: nSvcEvent.setDescription('The SNMP trap that is generated as a result of an event with the service in Nagios.')
nSvcNotify = NotificationType((1, 3, 6, 1, 4, 1, 20006, 1, 8)).setObjects(("NAGIOS-NOTIFY-MIB", "nSvcNotifyType"), ("NAGIOS-NOTIFY-MIB", "nSvcNotifyNum"), ("NAGIOS-NOTIFY-MIB", "nSvcAckAuthor"), ("NAGIOS-NOTIFY-MIB", "nSvcAckComment"), ("NAGIOS-NOTIFY-MIB", "nHostname"), ("NAGIOS-NOTIFY-MIB", "nHostStateID"), ("NAGIOS-NOTIFY-MIB", "nSvcDesc"), ("NAGIOS-NOTIFY-MIB", "nSvcStateID"), ("NAGIOS-NOTIFY-MIB", "nSvcAttempt"), ("NAGIOS-NOTIFY-MIB", "nSvcDurationSec"), ("NAGIOS-NOTIFY-MIB", "nSvcGroupName"), ("NAGIOS-NOTIFY-MIB", "nSvcLastCheck"), ("NAGIOS-NOTIFY-MIB", "nSvcLastChange"), ("NAGIOS-NOTIFY-MIB", "nSvcOutput"))
if mibBuilder.loadTexts: nSvcNotify.setStatus('current')
if mibBuilder.loadTexts: nSvcNotify.setDescription('The SNMP trap that is generated as a result of an event requiring notification for a service in Nagios.')
mibBuilder.exportSymbols("NAGIOS-NOTIFY-MIB", nHostLastChange=nHostLastChange, nSvcHostname=nSvcHostname, nSvcHostStateID=nSvcHostStateID, nHostEventIndex=nHostEventIndex, nSvcNotifyType=nSvcNotifyType, nHostNotifyNum=nHostNotifyNum, nHostLastUp=nHostLastUp, nSvcLastUnkn=nSvcLastUnkn, nHostNotify=nHostNotify, nSvcOutput=nSvcOutput, nagiosSvcNotifyTable=nagiosSvcNotifyTable, nSvcEventIndex=nSvcEventIndex, nSvcLastOK=nSvcLastOK, nSvcPerfData=nSvcPerfData, nHostname=nHostname, nagiosHostNotifyEntry=nagiosHostNotifyEntry, nagiosHostEventTable=nagiosHostEventTable, nSvcDurationSec=nSvcDurationSec, nSvcDesc=nSvcDesc, nSvcGroupName=nSvcGroupName, nSvcLastCrit=nSvcLastCrit, nHostAckComment=nHostAckComment, nHostEvent=nHostEvent, nagiosHostNotifyTable=nagiosHostNotifyTable, nSvcNotify=nSvcNotify, nHostStateType=nHostStateType, nSvcAckComment=nSvcAckComment, nHostLastDown=nHostLastDown, nSvcHostAlias=nSvcHostAlias, nagiosHostEventEntry=nagiosHostEventEntry, PYSNMP_MODULE_ID=nagiosNotify, nSvcEvent=nSvcEvent, nagiosSvcEventEntry=nagiosSvcEventEntry, nagiosSvcEventTable=nagiosSvcEventTable, nHostGroupName=nHostGroupName, nHostLastCheck=nHostLastCheck, nHostAlias=nHostAlias, nSvcLastWarn=nSvcLastWarn, nSvcLastCheck=nSvcLastCheck, nHostStateID=nHostStateID, nSvcAckAuthor=nSvcAckAuthor, nHostAckAuthor=nHostAckAuthor, nHostAttempt=nHostAttempt, nSvcAttempt=nSvcAttempt, nagiosNotify=nagiosNotify, nSvcHostStateType=nSvcHostStateType, nSvcStateID=nSvcStateID, nHostNotifyType=nHostNotifyType, nSvcLastChange=nSvcLastChange, nHostOutput=nHostOutput, nHostLastUnreachable=nHostLastUnreachable, nagiosSvcNotifyEntry=nagiosSvcNotifyEntry, nSvcNotifyNum=nSvcNotifyNum, nHostDurationSec=nHostDurationSec, nHostPerfData=nHostPerfData)
