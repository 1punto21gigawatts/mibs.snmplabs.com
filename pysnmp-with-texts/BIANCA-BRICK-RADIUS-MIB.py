#
# PySNMP MIB module BIANCA-BRICK-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Counter32, Integer32, Gauge32, NotificationType, Counter64, MibIdentifier, IpAddress, ObjectIdentity, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Counter32", "Integer32", "Gauge32", "NotificationType", "Counter64", "MibIdentifier", "IpAddress", "ObjectIdentity", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bintecsec = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 254))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 254, 8))
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 272, 254, 8, 1), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerTable.setDescription('')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-RADIUS-MIB", "radiusSrvProtocol"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: radiusServerEntry.setDescription('')
radiusSrvProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authentication", 1), ("accounting", 2), ("login", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvProtocol.setDescription('Type of authentication server. To configure the radius authentication use authentication(1), for radius accounting accounting(2), for user authentication on login shell login(3).')
radiusSrvAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvAddress.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAddress.setDescription('The Radius Server IP Address.')
radiusSrvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvPort.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvPort.setDescription('The radius server port. Please notice that RFC2138 assigns port 1812 and 1813 for authentication and accounting, respectively. Many Radius servers still use the former assigned port 1645 and 1646 instead. The default value is 1812 and 1813.')
radiusSrvSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvSecret.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvSecret.setDescription('The shared secret between radius server and Brick.')
radiusSrvPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvPriority.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvPriority.setDescription('The radius server with the lowest priority is the first used for request. If there is no response (see also the values Timeout and Retries) the radius server with the next lowest priority will be used. Default value is 0.')
radiusSrvTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 50000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvTimeout.setDescription('The amount of milliseconds (1/1000s) waiting for an outstanding request. Default is 1000 (1 second).')
radiusSrvRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvRetries.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvRetries.setDescription('The number of retries sent for each request, until the server state is set to inactive. Default value is 1. To prevent the radiusSrvState ever switch to inactive, set this value to 0.')
radiusSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("disabled", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvState.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvState.setDescription('When operational, the server state is active(1). If the radius server does not respond, its state is set to inactive(2). The administrator can set the state manually to disabled(3), or delete(4) the entry.')
radiusSrvPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authoritative", 1), ("non-authoritative", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvPolicy.setDescription('If set to authoritative(1), a negative answer to a request will be accepted. This is not necessarily true when set to non-authoritative(2), where the next radius server will be asked until there is finally an authoritative(1) server configured.')
radiusSrvValidate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvValidate.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvValidate.setDescription('This additional option is only used for bogus RADIUS servers, which send response messages with a wrong calculated MD5 checksum. All messages generated by the brick, however, will always use the proper authentication scheme. For security reasons, this option should always be set to enabled(1).')
radiusSrvDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("reload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvDialout.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvDialout.setDescription('This option provides a means for RADIUS dialout configuration. When set to enabled(1), routing information is read into the brick after system startup. This information must be configured in the RADIUS server as dialout-1 to dialout-n, where n is a value of range 1-99. The end is automatically determined when the brick gets a negative response. This means, all entrys must be consecutive. The default value is disabled(2).')
radiusSrvDefaultPW = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvDefaultPW.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvDefaultPW.setDescription('This is the default USER-PASSWORD the brick sends where no password is available (for example, in requests for the calling number or boot requests). Some RADIUS servers rely on a configured USER- or CHAP-PASSWORD for any RADIUS request. The default value is an empty string.')
radiusSrvReloadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvReloadInterval.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvReloadInterval.setDescription('Reload interval for RADIUS dialout configuration in minutes. The default is 0 (no reload is performed automatically.')
radiusSrvAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSrvAuthRequests.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAuthRequests.setDescription('Total number of access requests sent.')
radiusSrvAuthAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSrvAuthAccepts.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAuthAccepts.setDescription('Total number of access accepts received.')
radiusSrvAuthRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSrvAuthRejects.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAuthRejects.setDescription('Total number of access rejects received.')
radiusSrvAuthReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSrvAuthReqRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAuthReqRetrans.setDescription('Total number of retransmitted access requests.')
radiusSrvAuthReqFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSrvAuthReqFailed.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAuthReqFailed.setDescription('Total number of failed (not rejected) access requests.')
radiusSrvAuthReqPending = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSrvAuthReqPending.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAuthReqPending.setDescription('Total number of pending access requests.')
radiusSrvAcctStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSrvAcctStarts.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAcctStarts.setDescription('Total number of accounting starts sent.')
radiusSrvAcctStops = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSrvAcctStops.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvAcctStops.setDescription('Total number of accounting stops sent.')
radiusSrvKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 8, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSrvKeepalive.setStatus('mandatory')
if mibBuilder.loadTexts: radiusSrvKeepalive.setDescription("Enables the periodicaly keep alive check of 'inactive' (see radiusSrvState) server.")
mibBuilder.exportSymbols("BIANCA-BRICK-RADIUS-MIB", radiusSrvAuthAccepts=radiusSrvAuthAccepts, radiusSrvAuthReqRetrans=radiusSrvAuthReqRetrans, radiusSrvProtocol=radiusSrvProtocol, radiusSrvAcctStops=radiusSrvAcctStops, radiusSrvDefaultPW=radiusSrvDefaultPW, org=org, internet=internet, enterprises=enterprises, radiusSrvAuthReqFailed=radiusSrvAuthReqFailed, bintec=bintec, radiusSrvAcctStarts=radiusSrvAcctStarts, radiusSrvPolicy=radiusSrvPolicy, radiusSrvValidate=radiusSrvValidate, radiusSrvKeepalive=radiusSrvKeepalive, radius=radius, radiusSrvReloadInterval=radiusSrvReloadInterval, radiusSrvAddress=radiusSrvAddress, radiusSrvPort=radiusSrvPort, radiusSrvState=radiusSrvState, radiusSrvRetries=radiusSrvRetries, radiusSrvSecret=radiusSrvSecret, radiusSrvDialout=radiusSrvDialout, private=private, radiusServerTable=radiusServerTable, radiusSrvAuthRejects=radiusSrvAuthRejects, radiusSrvTimeout=radiusSrvTimeout, radiusSrvPriority=radiusSrvPriority, radiusServerEntry=radiusServerEntry, bintecsec=bintecsec, radiusSrvAuthRequests=radiusSrvAuthRequests, dod=dod, radiusSrvAuthReqPending=radiusSrvAuthReqPending)
