#
# PySNMP MIB module APLICENSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APLICENSE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, ModuleIdentity, iso, IpAddress, Integer32, TimeTicks, Gauge32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "ModuleIdentity", "iso", "IpAddress", "Integer32", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter64")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
apLicenseModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 5))
apLicenseModule.setRevisions(('2012-07-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apLicenseModule.setRevisionsDescriptions(('Updated contact info',))
if mibBuilder.loadTexts: apLicenseModule.setLastUpdated('201207160000Z')
if mibBuilder.loadTexts: apLicenseModule.setOrganization('Acme Packet, Inc')
if mibBuilder.loadTexts: apLicenseModule.setContactInfo(' Customer Service Postal: Acme Packet, Inc 100 Crosby Drive Bedford, MA 01730 US Tel: 1-781-328-4400 E-mail: support@acmepacket.com')
if mibBuilder.loadTexts: apLicenseModule.setDescription('The license inventory MIB for Acme Packet')
apLicenseMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1))
apLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1), )
if mibBuilder.loadTexts: apLicenseTable.setStatus('current')
if mibBuilder.loadTexts: apLicenseTable.setDescription('The table of all licenses, including the system-wide consolidated license (always index 1)')
apLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1), ).setIndexNames((0, "APLICENSE-MIB", "apLicenseIndex"))
if mibBuilder.loadTexts: apLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: apLicenseEntry.setDescription('An entry in the table of all licenses')
apLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apLicenseIndex.setStatus('current')
if mibBuilder.loadTexts: apLicenseIndex.setDescription('Unique index for the license table. Index always begins at 1, and increases by 1. The table length depends on the number of licenses installed plus 1. 1st index is always the consolidated system-wide license.')
apLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseKey.setStatus('current')
if mibBuilder.loadTexts: apLicenseKey.setDescription('key, not applicable to 1st index, which is consolidated license.')
apLicenseCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseCapacity.setStatus('current')
if mibBuilder.loadTexts: apLicenseCapacity.setDescription('Capacity')
apLicenseInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseInstallDate.setStatus('current')
if mibBuilder.loadTexts: apLicenseInstallDate.setDescription('installation date/time')
apLicenseBeginDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseBeginDate.setStatus('current')
if mibBuilder.loadTexts: apLicenseBeginDate.setDescription('begin date/time')
apLicenseExpireDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseExpireDate.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpireDate.setDescription('expiration date/time')
apLicenseSIPFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseSIPFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseSIPFeature.setDescription('true if SIP feature is allowed, false if not')
apLicenseMGCPFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseMGCPFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseMGCPFeature.setDescription('true if MGCP feature is allowed, false if not')
apLicenseH323Feature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseH323Feature.setStatus('current')
if mibBuilder.loadTexts: apLicenseH323Feature.setDescription('true if H323 feature is allowed, false if not')
apLicenseIWFFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseIWFFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseIWFFeature.setDescription('true if IWF feature is allowed, false if not')
apLicenseQOSFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseQOSFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseQOSFeature.setDescription('true if QOS feature is allowed, false if not')
apLicenseACPFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseACPFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseACPFeature.setDescription('true if ACP feature is allowed, false if not')
apLicenseLPFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseLPFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseLPFeature.setDescription('true if Routing (Local Policy) feature is allowed, false if not')
apLicenseSAGFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseSAGFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseSAGFeature.setDescription('true if Load Balancing (SAG) feature is allowed, false if not')
apLicenseACCTFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseACCTFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseACCTFeature.setDescription('true if Accounting feature is allowed, false if not')
apLicenseHAFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseHAFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseHAFeature.setDescription('true if High Availability feature is allowed, false if not')
apLicensePACFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicensePACFeature.setStatus('current')
if mibBuilder.loadTexts: apLicensePACFeature.setDescription('true if PAC feature is allowed, false if not')
apLicenseIKEFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseIKEFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseIKEFeature.setDescription('true if IKE feature is allowed, false if not')
apLicenseIPsecTunCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseIPsecTunCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseIPsecTunCap.setDescription('IPsec Tunnel Capacity')
apLicenseAuthFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseAuthFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseAuthFeature.setDescription('true if authorization/authentication feature is allowed, false if not')
apLicenseDatabaseRegFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseDatabaseRegFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseDatabaseRegFeature.setDescription('true if database registrar functionality is allowed, false if not')
apLicenseDatabaseRegCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseDatabaseRegCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseDatabaseRegCap.setDescription('Database registration contact capacity')
apLicenseSLBEndpointCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseSLBEndpointCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseSLBEndpointCap.setDescription('SLB endpoint capacity')
apLicenseNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2))
apLicenseExpirationWarningAcliIndex = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLicenseExpirationWarningAcliIndex.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningAcliIndex.setDescription('The index of the License which is going to expire as represented in the ACLI')
apLicenseExpirationWarningSnmpIndex = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLicenseExpirationWarningSnmpIndex.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningSnmpIndex.setDescription('The index of the License which is going to expire as represented in the SNMP license table')
apLicenseExpirationWarningKey = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLicenseExpirationWarningKey.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningKey.setDescription('Key which represents the license that is going to expire')
apLicenseExpirationWarningDays = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLicenseExpirationWarningDays.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningDays.setDescription('Days until the license will expire')
apLicenseNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3))
apLicenseNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3, 0))
apLicenseApproachingCapacityNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3, 0, 1))
if mibBuilder.loadTexts: apLicenseApproachingCapacityNotification.setStatus('current')
if mibBuilder.loadTexts: apLicenseApproachingCapacityNotification.setDescription('This trap is sent if the total sessions is approaching the license capacity allowed. (98% or higher)')
apLicenseNotApproachingCapacityNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3, 0, 2))
if mibBuilder.loadTexts: apLicenseNotApproachingCapacityNotification.setStatus('current')
if mibBuilder.loadTexts: apLicenseNotApproachingCapacityNotification.setDescription('This trap is sent if the total sessions is no longer approaching the license capacity allowed. (less than 90%)')
apLicenseExpirationWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3, 0, 3)).setObjects(("APLICENSE-MIB", "apLicenseExpirationWarningAcliIndex"), ("APLICENSE-MIB", "apLicenseExpirationWarningSnmpIndex"), ("APLICENSE-MIB", "apLicenseExpirationWarningKey"), ("APLICENSE-MIB", "apLicenseExpirationWarningDays"))
if mibBuilder.loadTexts: apLicenseExpirationWarningNotification.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningNotification.setDescription('This trap is sent when a license is within 7 days of expiration')
apLicenseConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4))
apLicenseCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 1))
apLicenseGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 2))
apLicenseNotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 3))
apLicenseObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 2, 1)).setObjects(("APLICENSE-MIB", "apLicenseKey"), ("APLICENSE-MIB", "apLicenseCapacity"), ("APLICENSE-MIB", "apLicenseInstallDate"), ("APLICENSE-MIB", "apLicenseBeginDate"), ("APLICENSE-MIB", "apLicenseExpireDate"), ("APLICENSE-MIB", "apLicenseSIPFeature"), ("APLICENSE-MIB", "apLicenseMGCPFeature"), ("APLICENSE-MIB", "apLicenseH323Feature"), ("APLICENSE-MIB", "apLicenseIWFFeature"), ("APLICENSE-MIB", "apLicenseQOSFeature"), ("APLICENSE-MIB", "apLicenseACPFeature"), ("APLICENSE-MIB", "apLicenseLPFeature"), ("APLICENSE-MIB", "apLicenseSAGFeature"), ("APLICENSE-MIB", "apLicenseACCTFeature"), ("APLICENSE-MIB", "apLicenseHAFeature"), ("APLICENSE-MIB", "apLicensePACFeature"), ("APLICENSE-MIB", "apLicenseIKEFeature"), ("APLICENSE-MIB", "apLicenseIPsecTunCap"), ("APLICENSE-MIB", "apLicenseSLBEndpointCap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseObjectsGroup = apLicenseObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseObjectsGroup.setDescription('A collection of objects providing the license inventory, including the consolidated system-wide license.')
apLicenseDatabaseRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 2, 2)).setObjects(("APLICENSE-MIB", "apLicenseAuthFeature"), ("APLICENSE-MIB", "apLicenseDatabaseRegFeature"), ("APLICENSE-MIB", "apLicenseDatabaseRegCap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseDatabaseRegGroup = apLicenseDatabaseRegGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseDatabaseRegGroup.setDescription('A collection of objects providing the license inventory for database registration features.')
apLicenseNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 3, 1)).setObjects(("APLICENSE-MIB", "apLicenseApproachingCapacityNotification"), ("APLICENSE-MIB", "apLicenseNotApproachingCapacityNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseNotificationsGroup = apLicenseNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseNotificationsGroup.setDescription('A collection of notifications describing license violation.')
apLicenseExpirationNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 3, 2)).setObjects(("APLICENSE-MIB", "apLicenseExpirationWarningNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseExpirationNotificationsGroup = apLicenseExpirationNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationNotificationsGroup.setDescription('A collection of notifications related to license expiration')
mibBuilder.exportSymbols("APLICENSE-MIB", apLicenseHAFeature=apLicenseHAFeature, apLicenseApproachingCapacityNotification=apLicenseApproachingCapacityNotification, apLicenseExpirationWarningNotification=apLicenseExpirationWarningNotification, apLicenseLPFeature=apLicenseLPFeature, apLicenseCompliances=apLicenseCompliances, apLicenseDatabaseRegCap=apLicenseDatabaseRegCap, apLicenseMIBObjects=apLicenseMIBObjects, apLicenseNotificationsGroup=apLicenseNotificationsGroup, apLicenseDatabaseRegFeature=apLicenseDatabaseRegFeature, PYSNMP_MODULE_ID=apLicenseModule, apLicenseExpirationWarningKey=apLicenseExpirationWarningKey, apLicenseNotifications=apLicenseNotifications, apLicenseH323Feature=apLicenseH323Feature, apLicenseExpirationWarningAcliIndex=apLicenseExpirationWarningAcliIndex, apLicenseSLBEndpointCap=apLicenseSLBEndpointCap, apLicenseKey=apLicenseKey, apLicenseACPFeature=apLicenseACPFeature, apLicenseIndex=apLicenseIndex, apLicenseQOSFeature=apLicenseQOSFeature, apLicenseModule=apLicenseModule, apLicenseInstallDate=apLicenseInstallDate, apLicenseSIPFeature=apLicenseSIPFeature, apLicenseExpirationWarningDays=apLicenseExpirationWarningDays, apLicenseNotApproachingCapacityNotification=apLicenseNotApproachingCapacityNotification, apLicenseConformance=apLicenseConformance, apLicenseNotificationPrefix=apLicenseNotificationPrefix, apLicenseGroups=apLicenseGroups, apLicenseIPsecTunCap=apLicenseIPsecTunCap, apLicenseIKEFeature=apLicenseIKEFeature, apLicenseExpireDate=apLicenseExpireDate, apLicensePACFeature=apLicensePACFeature, apLicenseEntry=apLicenseEntry, apLicenseNotificationsGroups=apLicenseNotificationsGroups, apLicenseMGCPFeature=apLicenseMGCPFeature, apLicenseDatabaseRegGroup=apLicenseDatabaseRegGroup, apLicenseObjectsGroup=apLicenseObjectsGroup, apLicenseAuthFeature=apLicenseAuthFeature, apLicenseExpirationWarningSnmpIndex=apLicenseExpirationWarningSnmpIndex, apLicenseCapacity=apLicenseCapacity, apLicenseTable=apLicenseTable, apLicenseNotificationObjects=apLicenseNotificationObjects, apLicenseExpirationNotificationsGroup=apLicenseExpirationNotificationsGroup, apLicenseSAGFeature=apLicenseSAGFeature, apLicenseIWFFeature=apLicenseIWFFeature, apLicenseACCTFeature=apLicenseACCTFeature, apLicenseBeginDate=apLicenseBeginDate)
