#
# PySNMP MIB module CXFrameRelayInterfaceModule-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXFrameRelayInterfaceModule-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
DLCI, = mibBuilder.importSymbols("CXFrameRelay-MIB", "DLCI")
cxFrameRelayInterfaceModule, Alias, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "cxFrameRelayInterfaceModule", "Alias", "SapIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibIdentifier, Integer32, Unsigned32, Gauge32, NotificationType, Bits, Counter32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Integer32", "Unsigned32", "Gauge32", "NotificationType", "Bits", "Counter32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

frimSRConnectInterval = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRConnectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRConnectInterval.setDescription('Determines the number of seconds to wait before attempting to re-establish a broken connection on a particular system route. Range of Values: 1 - 65, 535 Default Value: 30 Configuration Changed: administrative ')
frimServiceCost = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimServiceCost.setStatus('mandatory')
if mibBuilder.loadTexts: frimServiceCost.setDescription("Determines the cost of Frame Relay service to be registered in the CX 1000's Inter-Application software layer. Range of Values: 0 - 65, 535 Default Value: 10 Configuration Changed: administrative ")
frimSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3), )
if mibBuilder.loadTexts: frimSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapTable.setDescription('A table containing configuration and statistical information about each frame relay interface module service access point.')
frimSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1), ).setIndexNames((0, "CXFrameRelayInterfaceModule-MIB", "frimSapId"))
if mibBuilder.loadTexts: frimSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapEntry.setDescription('The parameters for a particular frame relay module service access point.')
frimSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapId.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapId.setDescription('Indicates the row containing objects for configuring (or monitoring) a SAP associated either with the SAP in the Inter-Application software or with the SAP in the Frame Relay software layer. Options: 0: IAM-related upper SAP 1: Frame Relay-related lower SAP Default Value: none')
frimSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapRowStatus.setDescription('Determines whether this SAP is to be removed from service (i.e. invalidated) within the FRIM software layer. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default Value: none Configuration Changed: administrative ')
frimSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapType.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapType.setDescription("Determines this SAP's type. Options: lower (1): SAP is a lower type (leads to the Frame Relay software layer) upper (2): SAP is an upper type (leads to the Inter-Application software layer) Default Value: none Configuration Changed: administrative ")
frimSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapAlias.setDescription('Determines the textual name uniquely identifying this SAP. Range of Values: CX1000: 0 - 35 alphanumeric characters beginning with a non-numeric character CX900: 0 - 16 alphanumeric characters beginning with a non-numeric character Default Value: frimUpper1 (for frimSapId 0) frimsap1 (for frimSapId 1) Configuration Changed: administrative ')
frimSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapCompanionAlias.setDescription('Determines the textual name identifying the companion SAP either in the Inter-Application software layer or the Frame Relay software layer that will communicate with this SAP. Options: undefined (for frimSapId 0) frsap41 (for frimSapId 1) Range of Values: CX1000: 0 - 35 alphanumeric characters beginning with a non-numeric character CX900: 0 - 16 alphanumeric characters beginning with a non-numeric character Configuration Changed: administrative ')
frimSapMaxDlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapMaxDlcis.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapMaxDlcis.setDescription("Determines the maximum number of virtual circuits allowed for this SAP. This object is meaningful only if 'frimSapType' for this SAP is set to 'lower'. Range of Values: 1 - 1, 022 Default Value: 32 Configuration Changed: administrative ")
frimSapMaxErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapMaxErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapMaxErrorFrames.setDescription("Determines the number of frames having FECN and/or BECN bits set that can be received within the total number of frames defined in 'frimSapMonitorFrames' before the system reports a circuit to be congested. This object is meaningful only if 'frimSapType' for this SAP is set to 'upper'. Range of Values: 1 - 14 Default Value: 10 Configuration Changed: operative ")
frimSapMonitorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapMonitorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapMonitorFrames.setDescription("Determines the total number of frames that will be monitored at any one time for frames having the FECN and/or BECN bits set. It also defines how many frames must be received without FECN and/or BECN bits set before the system decides that a congested circuit has returned to a normal state. This object is meaningful only if 'frimSapType' for this SAP is set to 'upper'. Range of Values: 1 - 14 Default Value: 14 Configuration Changed: operative ")
frimSapFrWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 300)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapFrWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapFrWindowSize.setDescription("Indicates the maximum number of outstanding data buffers supported by this SAP. This object is meaningful only if 'frimSapType' for this SAP is set to 'lower'. Range of Values: 3 - 300 Default Value: 150 Configuration Changed: administrative ")
frimSapControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearSapStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frimSapControlStats.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapControlStats.setDescription('Controls the handling of statistics for this SAP. Options: clearSapStats: clears all statistics at this SAP Default Value: none Configuration Changed: operative')
frimSapstatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatRxDataFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatRxDataFrames.setDescription('Indicates the number of data frames that have been received at this SAP across all virtual circuits since the last power-up. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
frimSapstatRxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatRxDataOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatRxDataOctets.setDescription('Indicates the number of data octets that have been received at this SAP across all virtual circuits since the last power-up. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
frimSapstatTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatTxDataFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatTxDataFrames.setDescription('Indicates the number of data frames that have been sent from this SAP across all virtual circuits since the last power-up. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
frimSapstatTxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatTxDataOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatTxDataOctets.setDescription('Indicates the number of data octets that have been sent from this SAP across all virtual circuits since the last power-up. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
frimSapstatUnopenedServiceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatUnopenedServiceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatUnopenedServiceDiscards.setDescription('Indicates the number of data frames that have been discarded at this SAP since the last power-up because the status of the PVC used by this SAP was inactive. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
frimSapstatPvcDownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatPvcDownDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatPvcDownDiscards.setDescription("Indicates the number of received data frames that have been discarded at this SAP since the last power-up due to failure of the PVC associated with this SAP. This object is meaningful only if 'frimSapType' for this SAP is set to 'upper'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
frimSapstatUserSuccessfulOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatUserSuccessfulOpens.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatUserSuccessfulOpens.setDescription("Indicates the number of services that have been opened at this SAP since the last power-up. This object is meaningful only if 'frimSapType' for this SAP is set to 'upper'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
frimSapstatUserUnsuccessfulOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatUserUnsuccessfulOpens.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatUserUnsuccessfulOpens.setDescription("Indicates the number of times the FRIM software layer was unable to open a service for a user. This object is meaningful only if 'frimSapType' for this SAP is set to 'upper'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
frimSapstatSRSuccessfulConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatSRSuccessfulConnects.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatSRSuccessfulConnects.setDescription("Indicates the number of system route connections that have been established at this SAP since the last power-up. This object is meaningful only if 'frimSapType' for this SAP is set to 'upper'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
frimSapstatSRUnsuccessfulConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatSRUnsuccessfulConnects.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatSRUnsuccessfulConnects.setDescription("Indicates the number of times the FRIM software layer attempted but failed to establish a system route connection between two Frame Relay service providers. This object is meaningful only if 'frimSapType' for this SAP is set to 'upper'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
frimSapstatTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatTxResets.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatTxResets.setDescription("Indicates the number of resets that the FRIM software layer has generated at this SAP since the last power-up. This object is meaningful only if 'frimSapType' for this SAP is set to 'upper'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
frimSapstatRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatRxBECN.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatRxBECN.setDescription("Indicates the number of data frames received with the BECN bit set at this SAP since the last power-up. This object is meaningful only if 'frimSapType' for this SAP is set to 'lower'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
frimSapstatRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatRxFECN.setStatus('mandatory')
if mibBuilder.loadTexts: frimSapstatRxFECN.setDescription("Indicates the number of data frames received with the FECN bit set at this SAP since the last power-up. This object is meaningful only if 'frimSapType' for this SAP is set to 'lower'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
frimSRTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6), )
if mibBuilder.loadTexts: frimSRTable.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRTable.setDescription(' A table containing information about each frame relay system route.')
frimSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1), ).setIndexNames((0, "CXFrameRelayInterfaceModule-MIB", "frimSRFrpCircuitSapId"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSRFrpCircuitDlci"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSRProtocolId"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSRSubRef"))
if mibBuilder.loadTexts: frimSREntry.setStatus('mandatory')
if mibBuilder.loadTexts: frimSREntry.setDescription('The information for a particular frame relay system route.')
frimSRFrpCircuitSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRFrpCircuitSapId.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRFrpCircuitSapId.setDescription("Indicates the 'frpCircuitSapNumber' of the lower SAP in the Frame Relay software layer that provides a system route. Options: 1-16: BOP- or DXI-related lower SAPs Default Value: none")
frimSRFrpCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRFrpCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRFrpCircuitDlci.setDescription("Indicates the DLCI (Data Link Connection Identifier) of the virtual circuit using the SAP specified in the 'frpCircuitSapNumber'. Range of Values: 1 - 1, 022 Default Value: none")
frimSRProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRProtocolId.setDescription('Indicates the protocol used in the current connection on the virtual circuit. Options: pidFR: Frame Relay pidLan: LAN pidX25: X.25 pidCcm: Common Console (CX 1000 only) pidGmf: Muxed traffic pidLlc2: LLC2 Note: Protocol ID values 7 to 15 are user-definable. Default Value: none')
frimSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 4), SubRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRSubRef.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRSubRef.setDescription("Indicates the reference that one user's segment of traffic will be assigned on the outbound PVC to distinguish it from traffic segments of other users of the same outbound PVC. Note: This value and the value assigned for 'frimSRRefRangeEnd', if greater, form a range of identifiers that different users' traffic segments on the same outbound PVC can use to remain distinct from each other. Range of Values: 0 - 255 Note: If set to '0', the FRIM software layer assumes an RFC 1490 header is already attached to data and therefore will not encapsulate it. Default Value: none")
frimSRRefRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 5), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRRefRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRRefRangeEnd.setDescription("Determines the upper limit of a range of identifiers that different users' traffic segments on the same outbound PVC can use to remain distinct from each other. Note: If the outbound PVC supports only a single protocol, this value must be the same as the value set in 'frimSRSubRef'. Range of Values: 0 - 255 Default Value: none (value set in 'frimSRSubRef') Configuration Changed: operative ")
frimSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRRowStatus.setDescription('Determines whether this system route is to be deleted from FRIM software layer. Range of Values: invalid (1): row is flagged; after next reset values will be disabled and row will be deleted from table valid (2): values are enabled Default Value: valid (2) Configuration Changed: operative ')
frimSRDestFrpCircuitAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 7), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRDestFrpCircuitAlias.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRDestFrpCircuitAlias.setDescription('Identifies the alias of a circuit specified in another software module that will link with the circuit being configured in the Frame Relay module. Range of Values: CX1000: 0 - 35 alphanumeric characters beginning with a non-numeric character CX900 0 - 16 alphanumeric characters beginning with a non-numeric character Default Value: none Configuration Changed: operative ')
frimSRDestSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 8), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRDestSubRef.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRDestSubRef.setDescription("Determines the identifier that one user's traffic segment will have to distinguish it from another user's traffic segment sharing the same 'frimSRDestFrpCircuitAlias'. Note: If 'frimSRSubRef' and 'frimSRRefRangeEnd' form a range of identifiers that different users' traffic segments on the same outbound PVC can use to remain distinct from each other, the first value for 'frimSRSubRef' will correspond to the first value for 'frimSRDestSubRef, the second value for the former must correspond to the second value for the latter and so on. Range of Values: 0 - 255 Default Value: none (value set in 'frimSRSubRef' Configuration Changed: operative ")
frimSRRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConnected", 1), ("inProgress", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRRouteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRRouteStatus.setDescription('Indicates the status of a connection on the system route. Options: notConnected (1): no connection (destination may not exist or has refused connection) inProgress (2): connection in progress connected (3): connected Default Value: none')
frimSRClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("localAllocFailure", 3), ("remoteAllocFailure", 4), ("localNoAccess", 5), ("remoteNoAccess", 6), ("localPvcDown", 7), ("remotePvcDown", 8), ("localPvcBusy", 9), ("remotePvcBusy", 10), ("localFcnFailure", 11), ("remoteFcnFailure", 12), ("localDsnFailure", 13), ("localRefInUse", 14), ("remoteAliasNotFound", 15), ("remoteNoPvcService", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRClearStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frimSRClearStatus.setDescription("Indicates the reason for a connection failure on the system route. This status is meaningful only between attempts to establish a system route. Successive failed attempts may or may not change the displayed value. Options: noFailure (1): no failure (connection has occurred) internalError (2): internal system error localAllocFailure (3): not enough memory in local device to establish system route at current time remoteAllocFailure (4): not enough memory in remote device to establish system route at current time localNoAccess (5): PVC in local device not configured remoteNoAccess (6): PVC in remote dcevice not configured localPvcDown (7): PVC in local device reported down remotePvcDown (8): PVC in remote device reported down localPvcBusy (9): PVC in local device is busy (PVC is SPE or PVC is MPE but 'frimSRSubRef' is in use) remotePvcBusy (10): PVC in remote device is busy (PVC is SPE or PVC is MPE but 'frimSRSubRef' is in use) localFcnFailure (11): local device does not support flow control type remoteFcnFailure (12): remote device does not support flow control type localDsnFailure (13): local device could not negotiate size of data unit because remote's maximum data unit was zero localRefInUse (14): 'frimSRSubRef' in use in local device remoteAliasNotFound (15): no PVC in the local device has this destination alias remoteNoPvcService (16): remote device does not support PVCs Default Value: none")
frimSysConTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5), )
if mibBuilder.loadTexts: frimSysConTable.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConTable.setDescription('A table containing information about current connections through the FRIM.')
frimSysConEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1), ).setIndexNames((0, "CXFrameRelayInterfaceModule-MIB", "frimSysConSapId"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSysConDlci"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSysConPid"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSysConRef"))
if mibBuilder.loadTexts: frimSysConEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConEntry.setDescription('The information for a particular connection through the FRIM.')
frimSysConSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConSapId.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConSapId.setDescription("Indicates the 'frpCircuitSapNumber' of the lower SAP in the Frame Relay software layer through which a virtual circuit has been created and a connection has been made. Options: 1 - 16 (BOP- or DXI-related lower SAPs) Default Value: none")
frimSysConDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConDlci.setDescription("Indicates the virtual circuit's DLCI (Data Link Connection Identifier) for a particular SAP. Range of Values: 1 - 1,007 Default Value: none")
frimSysConPid = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pidFr", 1), ("pidLan", 2), ("pidX25", 3), ("pidCcm", 4), ("pidGmf", 5), ("pidLlc2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConPid.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConPid.setDescription('Indicates the protocol used in the current connection on the virtual circuit. Options: pidFr (1): Frame Relay pidLan (2): LAN pidX25 (3): X.25 pidCcm (4): Common Console (CX 1000 only) pidGmf (5): Muxed traffic pidLlc2 (6): LLC2 Note: Protocol ID values 7 to 15 are user-definable. Default Value: none')
frimSysConRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 4), SubRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConRef.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConRef.setDescription("Indicates the reference that one user's segment of traffic has been assigned on the outbound PVC to distinguish it from traffic segments of other users of the same outbound PVC that are using the same protocol. Range of Values: 1 - 255 Default Value: none")
frimSysConRemoteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConRemoteSlot.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConRemoteSlot.setDescription('Indicates the physical slot of the card in the local device that is receiving Frame Relay service. Range of Values: 1 - 16 Default Value: none')
frimSysConCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConCreationTime.setDescription("Indicates the system clock's time at which this connection was created. Range of Values: system-generated Default Value: none")
frimSysConReqDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConReqDataSize.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConReqDataSize.setDescription("Indicates the data size of a frame requested at connection. If the request comes from another module in the local device, the application on that module determines the requested size. If the request comes from the Frame Relay module, 'bopSapOprPortMaxFrameSize' (default=1,600) minus overhead defined by 'frpSapAddressLength' (default=two bytes) and, if enabled, 'frpCircuitMultiProtEncaps' (six bytes if even data bytes in frame, or seven bytes if odd data bytes in frame) determines this size. Range of Values: 32 - 4,096 Default Value: none")
frimSysConNegDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConNegDataSize.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConNegDataSize.setDescription('Indicates the data size of a frame negotiated at connection when the requested size cannot be accommodated. If the requested size can be accommodated, the requested and negotiated sizes are the same. Range of Values: 32 - 4,096 Default Value: none')
frimSysConNegSizeExceededFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConNegSizeExceededFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConNegSizeExceededFrames.setDescription('Indicates the number of frames passing across the connection that have exceeded the negotiated data size. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
frimSysConRefRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 10), SubRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConRefRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: frimSysConRefRangeEnd.setDescription("Indicates the upper limit of a range of identifiers that different users' traffic segments on the same outbound PVC can use to remain distinct from each other. Range of Values: 0 - 255 Default Value: none")
mibBuilder.exportSymbols("CXFrameRelayInterfaceModule-MIB", frimSRSubRef=frimSRSubRef, frimSapTable=frimSapTable, frimSRRowStatus=frimSRRowStatus, frimSapstatPvcDownDiscards=frimSapstatPvcDownDiscards, frimSREntry=frimSREntry, frimSRProtocolId=frimSRProtocolId, frimSapAlias=frimSapAlias, frimSapstatTxResets=frimSapstatTxResets, frimSapstatUserUnsuccessfulOpens=frimSapstatUserUnsuccessfulOpens, frimSysConReqDataSize=frimSysConReqDataSize, frimSapstatUnopenedServiceDiscards=frimSapstatUnopenedServiceDiscards, frimSysConRef=frimSysConRef, frimSRFrpCircuitDlci=frimSRFrpCircuitDlci, frimSysConRemoteSlot=frimSysConRemoteSlot, frimSRDestFrpCircuitAlias=frimSRDestFrpCircuitAlias, frimSapstatRxDataFrames=frimSapstatRxDataFrames, frimSapControlStats=frimSapControlStats, frimServiceCost=frimServiceCost, frimSRRouteStatus=frimSRRouteStatus, frimSapstatSRUnsuccessfulConnects=frimSapstatSRUnsuccessfulConnects, frimSapEntry=frimSapEntry, frimSapCompanionAlias=frimSapCompanionAlias, frimSapRowStatus=frimSapRowStatus, frimSysConRefRangeEnd=frimSysConRefRangeEnd, frimSysConPid=frimSysConPid, frimSapstatTxDataFrames=frimSapstatTxDataFrames, frimSysConCreationTime=frimSysConCreationTime, frimSapMaxErrorFrames=frimSapMaxErrorFrames, frimSapMaxDlcis=frimSapMaxDlcis, frimSRDestSubRef=frimSRDestSubRef, frimSysConNegSizeExceededFrames=frimSysConNegSizeExceededFrames, frimSysConDlci=frimSysConDlci, frimSapstatRxBECN=frimSapstatRxBECN, frimSRTable=frimSRTable, frimSRConnectInterval=frimSRConnectInterval, frimSRClearStatus=frimSRClearStatus, frimSapType=frimSapType, frimSysConSapId=frimSysConSapId, frimSapFrWindowSize=frimSapFrWindowSize, frimSysConNegDataSize=frimSysConNegDataSize, SubRef=SubRef, frimSRFrpCircuitSapId=frimSRFrpCircuitSapId, frimSapstatRxFECN=frimSapstatRxFECN, frimSapMonitorFrames=frimSapMonitorFrames, frimSapstatSRSuccessfulConnects=frimSapstatSRSuccessfulConnects, frimSysConEntry=frimSysConEntry, frimSapstatUserSuccessfulOpens=frimSapstatUserSuccessfulOpens, frimSRRefRangeEnd=frimSRRefRangeEnd, frimSapId=frimSapId, frimSysConTable=frimSysConTable, frimSapstatTxDataOctets=frimSapstatTxDataOctets, frimSapstatRxDataOctets=frimSapstatRxDataOctets)
