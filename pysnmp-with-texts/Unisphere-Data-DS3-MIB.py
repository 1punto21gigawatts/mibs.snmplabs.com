#
# PySNMP MIB module Unisphere-Data-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-DS3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
PerfTotalCount, PerfIntervalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfTotalCount", "PerfIntervalCount", "PerfCurrentCount")
dsx3FarEndIntervalEntry, dsx3FarEndTotalEntry, dsx3FarEndCurrentEntry = mibBuilder.importSymbols("RFC1407-MIB", "dsx3FarEndIntervalEntry", "dsx3FarEndTotalEntry", "dsx3FarEndCurrentEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, TimeTicks, Integer32, iso, Unsigned32, Bits, Counter32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Integer32", "iso", "Unsigned32", "Bits", "Counter32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "MibIdentifier", "IpAddress")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdNextIfIndex, = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdNextIfIndex")
usdDs3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4))
usdDs3MIB.setRevisions(('2002-04-04 14:07', '2002-02-22 21:21', '2001-04-27 19:49', '2001-02-05 00:00', '1999-07-27 00:00', '1998-11-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdDs3MIB.setRevisionsDescriptions(('Added invalid seconds objects to the far end statistics tables and more configuration objects.', 'Modified the valid range for usdDsx3Ds3Channel', 'Added dynamic DS3 interface support.', 'Added following objects: usdDsx3Ds3DsuMode usdDsx3Ds3BandwidthLimit usdDsx3Ds3DsuScrambleMode', 'Added usdDsx3LineType and usdDsx3CellScramblerConfig.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdDs3MIB.setLastUpdated('200204041407Z')
if mibBuilder.loadTexts: usdDs3MIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdDs3MIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 E-mail: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdDs3MIB.setDescription('The DS3 MIB for the Unisphere Networks Inc. enterprise.')
usdDs3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1))
usdDsx3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1), )
if mibBuilder.loadTexts: usdDsx3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdDsx3ConfigTable.setDescription('This table contains entries for DS3/E3 interfaces present in the system.')
usdDsx3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: usdDsx3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdDsx3ConfigEntry.setDescription('Each entry describes the characteristics of an DS3/E3 interface.')
usdDsx3LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setUnits('meters').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3LineLength.setStatus('current')
if mibBuilder.loadTexts: usdDsx3LineLength.setDescription('The length of the DS3/E3 line in meters. This objects provides information for line build out circuitry. This object is only useful if the interface has configurable line build out circuitry.')
usdDsx3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 18, 20))).clone(namedValues=NamedValues(("usdDsx3other", 1), ("usdDsx3M23", 2), ("usdDsx3SYNTRAN", 3), ("usdDsx3CbitParity", 4), ("usdDsx3ClearChannel", 5), ("usdE3G832", 6), ("usdE3Framed", 7), ("usdE3Plcp", 8), ("usdDsx3M23Plcp", 18), ("usdDsx3CbitParityPlcp", 20)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3LineType.setStatus('current')
if mibBuilder.loadTexts: usdDsx3LineType.setDescription('This variable indicates the variety of DS3 C-bit or E3 application implementing this interface. The type of interface affects the interpretation of the usage and error statistics. The rate of DS3 is 44.736 Mbps and E3 is 34.368 Mbps. The dsx3ClearChannel value means that the C-bits are not used except for sending/receiving AIS. Note that this object represents the actual line type when the corresponding value of dsx3LineType is dsx3other(1). The values, in sequence, describe: TITLE: SPECIFICATION: dsx3M23 ANSI T1.107-1988 dsx3SYNTRAN ANSI T1.107-1988 dsx3CbitParity ANSI T1.107a-1989 dsx3ClearChannel ANSI T1.102-1987 e3G832 ITU-T G.832 e3Framed ITU-T G.751 e3Plcp ETSI T/NA(91)18. dsx3M23Plcp ATM Forum af-phy-0054.000 dsx3CbitParityPlcp ATM Forum af-phy-0054.000 ')
usdDsx3CellScramblerConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scramblerOn", 1), ("scramblerOff", 2), ("notSupported", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3CellScramblerConfig.setStatus('current')
if mibBuilder.loadTexts: usdDsx3CellScramblerConfig.setDescription('This variable indicates the state of the ATM cell scrambler for interfaces which support ATM over DS3 or E3. For interfaces which do not support ATM, this object returns the value notSupported(3).')
usdDsx3Channelization = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3Channelization.setStatus('current')
if mibBuilder.loadTexts: usdDsx3Channelization.setDescription('The channelization setting for this DS3 interface; true(1) indicates channelization, false(2) indicates no channelization.')
usdDsx3InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ds3T3", 0), ("ds3E3", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3InterfaceType.setStatus('current')
if mibBuilder.loadTexts: usdDsx3InterfaceType.setDescription('The DS3 interface type setting.')
usdDsx3Application = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ds3FrameOverDs3", 0), ("ds3AtmOverDs3", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3Application.setStatus('current')
if mibBuilder.loadTexts: usdDsx3Application.setDescription('The interface application setting.')
usdDsx3Ds3Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3Ds3Channel.setStatus('current')
if mibBuilder.loadTexts: usdDsx3Ds3Channel.setDescription('The DS3 channel setting. The range of channel settings depends on the line rate of the underlying interface.')
usdDsx3LowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3LowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDsx3LowerIfIndex.setDescription('The ifIndex of the interface over which this DS3 interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
usdDsx3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3RowStatus.setStatus('current')
if mibBuilder.loadTexts: usdDsx3RowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support setting the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdDsx3RowStatus usdDsx3LowerIfIndex In addition, when creating an entry the following conditions must hold: A value for ifIndex must have been determined previously, by reading usdDsx3NextIfIndex. The interface identified by usdDsx3LowerIfIndex must exist. A corresponding entry in ifTable/ifXTable/usdIfTable is created/destroyed as a result of creating/destroying an entry in this table.')
usdDsx3Ds3DsuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("ds3DsuModeNone", 0), ("ds3DsuLarsCom", 2), ("ds3DsuDigitalLink", 4))).clone('ds3DsuModeNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3Ds3DsuMode.setStatus('current')
if mibBuilder.loadTexts: usdDsx3Ds3DsuMode.setDescription('The DSU configuration setting for this entry.')
usdDsx3Ds3BandwidthLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3Ds3BandwidthLimit.setStatus('current')
if mibBuilder.loadTexts: usdDsx3Ds3BandwidthLimit.setDescription('The DSU bandwidth configuration for this entry.')
usdDsx3Ds3DsuScrambleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ds3DsuScrambleDisabled", 0), ("ds3DsuScrambleEnable", 1))).clone('ds3DsuScrambleDisabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3Ds3DsuScrambleMode.setStatus('current')
if mibBuilder.loadTexts: usdDsx3Ds3DsuScrambleMode.setDescription('The DSU scramble mode setting for this entry.')
usdDsx3MdlCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlCarrier.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlCarrier.setDescription('Specifies the interface is used in carrier environment.')
usdDsx3MdlTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("path", 1), ("idlesignal", 2), ("testsignal", 4), ("none", 8))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlTransmit.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlTransmit.setDescription('Specifies transmission enabling.')
usdDsx3MdlEic = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlEic.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlEic.setDescription('This is the equipment identification code.')
usdDsx3MdlLic = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlLic.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlLic.setDescription('This is the location identification code.')
usdDsx3MdlFic = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlFic.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlFic.setDescription('This is the frame identification code.')
usdDsx3MdlUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlUnit.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlUnit.setDescription('This is the unit identification code.')
usdDsx3MdlPfi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlPfi.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlPfi.setDescription('This is the facility identification code to send in the MDL path message.')
usdDsx3MdlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlPort.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlPort.setDescription('This is the equipment port number to send in the MDL idle signal message.')
usdDsx3MdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDsx3MdlGenerator.setStatus('current')
if mibBuilder.loadTexts: usdDsx3MdlGenerator.setDescription('This is the generator number to send in the MDL test signal message.')
usdDs3NextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 2), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDs3NextIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDs3NextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in usdDsx3ConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdDsx3FarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 3), )
if mibBuilder.loadTexts: usdDsx3FarEndCurrentTable.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndCurrentTable.setDescription('This table contains entries for DS3/E3 interfaces present in the system.')
usdDsx3FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 3, 1), )
dsx3FarEndCurrentEntry.registerAugmentions(("Unisphere-Data-DS3-MIB", "usdDsx3FarEndCurrentEntry"))
usdDsx3FarEndCurrentEntry.setIndexNames(*dsx3FarEndCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: usdDsx3FarEndCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndCurrentEntry.setDescription('Each entry describes the characteristics of an DS3/E3 interface.')
usdDsx3FarEndCurrentInvalidSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDsx3FarEndCurrentInvalidSeconds.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndCurrentInvalidSeconds.setDescription('The counter associated with the number of Invalid Seconds encountered by a DS3/E3 interface in the current 15 minute interval.')
usdDsx3FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 4), )
if mibBuilder.loadTexts: usdDsx3FarEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndIntervalTable.setDescription('This table contains entries for DS3/E3 interfaces present in the system.')
usdDsx3FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 4, 1), )
dsx3FarEndIntervalEntry.registerAugmentions(("Unisphere-Data-DS3-MIB", "usdDsx3FarEndIntervalEntry"))
usdDsx3FarEndIntervalEntry.setIndexNames(*dsx3FarEndIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: usdDsx3FarEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndIntervalEntry.setDescription('Each entry describes the characteristics of an DS3/E3 interface.')
usdDsx3FarEndIntervalInvalidSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDsx3FarEndIntervalInvalidSeconds.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndIntervalInvalidSeconds.setDescription('The counter associated with the number of Invalid Seconds encountered by a DS3/E3 interface in one of the previous 96 individual 15 minute intervals.')
usdDsx3FarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 5), )
if mibBuilder.loadTexts: usdDsx3FarEndTotalTable.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndTotalTable.setDescription('This table contains entries for DS3/E3 interfaces present in the system.')
usdDsx3FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 5, 1), )
dsx3FarEndTotalEntry.registerAugmentions(("Unisphere-Data-DS3-MIB", "usdDsx3FarEndTotalEntry"))
usdDsx3FarEndTotalEntry.setIndexNames(*dsx3FarEndTotalEntry.getIndexNames())
if mibBuilder.loadTexts: usdDsx3FarEndTotalEntry.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndTotalEntry.setDescription('Each entry describes the characteristics of an DS3/E3 interface.')
usdDsx3FarEndTotalInvalidSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 1, 5, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDsx3FarEndTotalInvalidSeconds.setStatus('current')
if mibBuilder.loadTexts: usdDsx3FarEndTotalInvalidSeconds.setDescription('The counter associated with the number of Invalid Seconds encountered by a DS3/E3 interface in the previous 24 hour interval.')
usdDs3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4))
usdDs3Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 1))
usdDs3Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 2))
usdDs3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 1, 1)).setObjects(("Unisphere-Data-DS3-MIB", "usdDs3Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Compliance = usdDs3Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs3Compliance.setDescription('Obsolete compliance statement for entities which implement the Unisphere DS3/E3 MIB. This statement became obsolete when support was added for line type and cell scrambler objects.')
usdDs3Compliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 1, 2)).setObjects(("Unisphere-Data-DS3-MIB", "usdDs3Group2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Compliance2 = usdDs3Compliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs3Compliance2.setDescription('Obsolete compliance statement for entities which implement the Unisphere DS3/E3 MIB. This statement became obsolete when support was added for DSU objects.')
usdDs3Compliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 1, 3)).setObjects(("Unisphere-Data-DS3-MIB", "usdDs3Group3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Compliance3 = usdDs3Compliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs3Compliance3.setDescription('Obsolete compliance statement for entities which implement the Unisphere DS3/E3 MIB. This statement became obsolete when support was added for dynamic DS3 interface objects.')
usdDs3Compliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 1, 4)).setObjects(("Unisphere-Data-DS3-MIB", "usdDs3Group4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Compliance4 = usdDs3Compliance4.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs3Compliance4.setDescription('Obsolete compliance statement for entities which implement the Unisphere DS3/E3 MIB. This statement became obsolete when far end invalid seconds objects and more configuration objects were added.')
usdDs3Compliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 1, 5)).setObjects(("Unisphere-Data-DS3-MIB", "usdDs3Group5"), ("Unisphere-Data-DS3-MIB", "usdDs3FarEndGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Compliance5 = usdDs3Compliance5.setStatus('current')
if mibBuilder.loadTexts: usdDs3Compliance5.setDescription('The compliance statement for entities which implement the Unisphere DS3/E3 MIB.')
usdDs3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 2, 1)).setObjects(("Unisphere-Data-DS3-MIB", "usdDsx3LineLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Group = usdDs3Group.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs3Group.setDescription('Obsolete collection of objects providing management of DS3/E3 interfaces in a Unisphere product. This group became obsolete when support was added for line type and cell scrambler objects.')
usdDs3Group2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 2, 2)).setObjects(("Unisphere-Data-DS3-MIB", "usdDsx3LineLength"), ("Unisphere-Data-DS3-MIB", "usdDsx3LineType"), ("Unisphere-Data-DS3-MIB", "usdDsx3CellScramblerConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Group2 = usdDs3Group2.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs3Group2.setDescription('Obsolete collection of objects providing management of DS3/E3 interfaces in a Unisphere product. This group became obsolete when support was added for DSU configuration objects.')
usdDs3Group3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 2, 3)).setObjects(("Unisphere-Data-DS3-MIB", "usdDsx3LineLength"), ("Unisphere-Data-DS3-MIB", "usdDsx3LineType"), ("Unisphere-Data-DS3-MIB", "usdDsx3CellScramblerConfig"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3DsuMode"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3BandwidthLimit"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3DsuScrambleMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Group3 = usdDs3Group3.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs3Group3.setDescription('Obsolete collection of objects providing management of DS3/E3 interfaces in a Unisphere product. This group became obsolete when support was added for dynamic DS3 interface objects.')
usdDs3Group4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 2, 4)).setObjects(("Unisphere-Data-DS3-MIB", "usdDsx3LineLength"), ("Unisphere-Data-DS3-MIB", "usdDsx3LineType"), ("Unisphere-Data-DS3-MIB", "usdDsx3CellScramblerConfig"), ("Unisphere-Data-DS3-MIB", "usdDsx3Channelization"), ("Unisphere-Data-DS3-MIB", "usdDsx3InterfaceType"), ("Unisphere-Data-DS3-MIB", "usdDsx3Application"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3Channel"), ("Unisphere-Data-DS3-MIB", "usdDsx3LowerIfIndex"), ("Unisphere-Data-DS3-MIB", "usdDsx3RowStatus"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3DsuMode"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3BandwidthLimit"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3DsuScrambleMode"), ("Unisphere-Data-DS3-MIB", "usdDs3NextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Group4 = usdDs3Group4.setStatus('obsolete')
if mibBuilder.loadTexts: usdDs3Group4.setDescription('Obsolete collection of objects providing management of DS3/E3 interfaces in a Unisphere product. This group became obsolete when more configuration objects were added.')
usdDs3Group5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 2, 5)).setObjects(("Unisphere-Data-DS3-MIB", "usdDsx3LineLength"), ("Unisphere-Data-DS3-MIB", "usdDsx3LineType"), ("Unisphere-Data-DS3-MIB", "usdDsx3CellScramblerConfig"), ("Unisphere-Data-DS3-MIB", "usdDsx3Channelization"), ("Unisphere-Data-DS3-MIB", "usdDsx3InterfaceType"), ("Unisphere-Data-DS3-MIB", "usdDsx3Application"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3Channel"), ("Unisphere-Data-DS3-MIB", "usdDsx3LowerIfIndex"), ("Unisphere-Data-DS3-MIB", "usdDsx3RowStatus"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3DsuMode"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3BandwidthLimit"), ("Unisphere-Data-DS3-MIB", "usdDsx3Ds3DsuScrambleMode"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlCarrier"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlTransmit"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlEic"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlLic"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlFic"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlUnit"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlPfi"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlPort"), ("Unisphere-Data-DS3-MIB", "usdDsx3MdlGenerator"), ("Unisphere-Data-DS3-MIB", "usdDs3NextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3Group5 = usdDs3Group5.setStatus('current')
if mibBuilder.loadTexts: usdDs3Group5.setDescription('A collection of objects providing management of DS3/E3 interfaces in a Unisphere product.')
usdDs3FarEndGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 4, 4, 2, 6)).setObjects(("Unisphere-Data-DS3-MIB", "usdDsx3FarEndCurrentInvalidSeconds"), ("Unisphere-Data-DS3-MIB", "usdDsx3FarEndIntervalInvalidSeconds"), ("Unisphere-Data-DS3-MIB", "usdDsx3FarEndTotalInvalidSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDs3FarEndGroup = usdDs3FarEndGroup.setStatus('current')
if mibBuilder.loadTexts: usdDs3FarEndGroup.setDescription('A collection of objects providing remote statistics information applicable to DS3 interfaces in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-DS3-MIB", usdDsx3MdlEic=usdDsx3MdlEic, usdDsx3MdlTransmit=usdDsx3MdlTransmit, usdDsx3FarEndIntervalTable=usdDsx3FarEndIntervalTable, usdDs3Compliances=usdDs3Compliances, usdDsx3MdlUnit=usdDsx3MdlUnit, usdDsx3MdlGenerator=usdDsx3MdlGenerator, usdDs3NextIfIndex=usdDs3NextIfIndex, usdDsx3LineType=usdDsx3LineType, usdDs3Compliance=usdDs3Compliance, usdDsx3Ds3Channel=usdDsx3Ds3Channel, usdDs3Objects=usdDs3Objects, usdDsx3MdlPfi=usdDsx3MdlPfi, usdDs3Group=usdDs3Group, usdDs3Group5=usdDs3Group5, usdDsx3LineLength=usdDsx3LineLength, usdDsx3MdlFic=usdDsx3MdlFic, usdDsx3RowStatus=usdDsx3RowStatus, usdDsx3MdlCarrier=usdDsx3MdlCarrier, usdDs3Group2=usdDs3Group2, usdDs3FarEndGroup=usdDs3FarEndGroup, usdDs3Compliance2=usdDs3Compliance2, usdDsx3Ds3BandwidthLimit=usdDsx3Ds3BandwidthLimit, usdDsx3FarEndTotalEntry=usdDsx3FarEndTotalEntry, usdDs3Conformance=usdDs3Conformance, usdDsx3LowerIfIndex=usdDsx3LowerIfIndex, usdDsx3FarEndTotalTable=usdDsx3FarEndTotalTable, usdDsx3MdlLic=usdDsx3MdlLic, usdDsx3MdlPort=usdDsx3MdlPort, usdDsx3FarEndIntervalInvalidSeconds=usdDsx3FarEndIntervalInvalidSeconds, usdDsx3FarEndIntervalEntry=usdDsx3FarEndIntervalEntry, usdDs3Compliance3=usdDs3Compliance3, usdDs3Group3=usdDs3Group3, usdDsx3InterfaceType=usdDsx3InterfaceType, usdDsx3ConfigTable=usdDsx3ConfigTable, usdDs3MIB=usdDs3MIB, usdDsx3FarEndCurrentTable=usdDsx3FarEndCurrentTable, usdDsx3ConfigEntry=usdDsx3ConfigEntry, usdDsx3Ds3DsuScrambleMode=usdDsx3Ds3DsuScrambleMode, usdDsx3FarEndCurrentInvalidSeconds=usdDsx3FarEndCurrentInvalidSeconds, usdDs3Compliance4=usdDs3Compliance4, usdDsx3FarEndCurrentEntry=usdDsx3FarEndCurrentEntry, usdDs3Compliance5=usdDs3Compliance5, usdDsx3Ds3DsuMode=usdDsx3Ds3DsuMode, usdDsx3FarEndTotalInvalidSeconds=usdDsx3FarEndTotalInvalidSeconds, usdDsx3Application=usdDsx3Application, usdDsx3CellScramblerConfig=usdDsx3CellScramblerConfig, usdDsx3Channelization=usdDsx3Channelization, usdDs3Group4=usdDs3Group4, usdDs3Groups=usdDs3Groups, PYSNMP_MODULE_ID=usdDs3MIB)
