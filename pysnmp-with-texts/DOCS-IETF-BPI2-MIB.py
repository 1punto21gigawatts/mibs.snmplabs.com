#
# PySNMP MIB module DOCS-IETF-BPI2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-IETF-BPI2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:43:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, Integer32, mib_2, IpAddress, Bits, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, TimeTicks, ObjectIdentity, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Integer32", "mib-2", "IpAddress", "Bits", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "TimeTicks", "ObjectIdentity", "NotificationType", "MibIdentifier")
MacAddress, RowStatus, StorageType, TextualConvention, TruthValue, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "StorageType", "TextualConvention", "TruthValue", "DateAndTime", "DisplayString")
docsBpi2MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 126))
docsBpi2MIB.setRevisions(('2005-07-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsBpi2MIB.setRevisionsDescriptions(('Initial version of the IETF BPI+ MIB module. This version published as RFC 4131.',))
if mibBuilder.loadTexts: docsBpi2MIB.setLastUpdated('200507200000Z')
if mibBuilder.loadTexts: docsBpi2MIB.setOrganization('IETF IP over Cable Data Network (IPCDN) Working Group')
if mibBuilder.loadTexts: docsBpi2MIB.setContactInfo('--------------------------------------- Stuart M. Green E-mail: rubbersoul3@yahoo.com --------------------------------------- Kaz Ozawa Automotive Systems Development Center TOSHIBA CORPORATION 1-1, Shibaura 1-Chome Minato-ku, Tokyo 105-8001 Japan Phone: +81-3-3457-8569 Fax: +81-3-5444-9325 E-mail: Kazuyoshi.Ozawa@toshiba.co.jp --------------------------------------- Alexander Katsnelson Postal: Tel: +1-303-680-3924 E-mail: katsnelson6@peoplepc.com --------------------------------------- Eduardo Cardona Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, CO 80027- 9750 U.S.A. Tel: +1 303 661 9100 Fax: +1 303 661 9199 E-mail: e.cardona@cablelabs.com --------------------------------------- IETF IPCDN Working Group General Discussion: ipcdn@ietf.org Subscribe: http://www.ietf.org/mailman/listinfo/ipcdn. Archive: ftp://ftp.ietf.org/ietf-mail-archive/ipcdn. Co-chairs: Richard Woundy, rwoundy@cisco.com Jean-Francois Mule, jfm@cablelabs.com')
if mibBuilder.loadTexts: docsBpi2MIB.setDescription('This is the MIB module for the DOCSIS Baseline Privacy Plus Interface (BPI+) at cable modems (CMs) and cable modem termination systems (CMTSs). Copyright (C) The Internet Society (2005). This version of this MIB module is part of RFC 4131; see the RFC itself for full legal notices.')
class DocsX509ASN1DEREncodedCertificate(TextualConvention, OctetString):
    description = 'An X509 digital certificate encoded as an ASN.1 DER object.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 4096)

class DocsSAId(TextualConvention, Integer32):
    reference = 'DOCSIS Baseline Privacy Plus Interface specification, Section 2.1.3, BPI+ Security Associations'
    description = 'Security Association identifier (SAID).'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16383)

class DocsSAIdOrZero(TextualConvention, Unsigned32):
    reference = 'DOCSIS Baseline Privacy Plus Interface specification, Section 2.1.3, BPI+ Security Associations'
    description = 'Security Association identifier (SAID). The value zero indicates that the SAID is yet to be determined.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16383), )
class DocsBpkmSAType(TextualConvention, Integer32):
    reference = 'DOCSIS Baseline Privacy Plus Interface specification, Section 4.2.2.24'
    description = "The type of security association (SA). The values of the named-numbers are associated with the BPKM SA-Type attributes: 'primary' corresponds to code '1', 'static' to code '2', and 'dynamic' to code '3'. The 'none' value must only be used if the SA type has yet to be determined."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("primary", 1), ("static", 2), ("dynamic", 3))

class DocsBpkmDataEncryptAlg(TextualConvention, Integer32):
    reference = 'DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.'
    description = "The list of data encryption algorithms defined for the DOCSIS interface in the BPKM cryptographic-suite parameter. The value 'none' indicates that the SAID being referenced has no data encryption."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2), ("t3Des128CbcMode", 3), ("aes128CbcMode", 4), ("aes256CbcMode", 5))

class DocsBpkmDataAuthentAlg(TextualConvention, Integer32):
    reference = 'DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.'
    description = "The list of data integrity algorithms defined for the DOCSIS interface in the BPKM cryptographic-suite parameter. The value 'none' indicates that no data integrity is used for the SAID being referenced."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("hmacSha196", 1))

docsBpi2MIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 1))
docsBpi2CmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 1, 1))
docsBpi2CmBaseTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 1, 1), )
if mibBuilder.loadTexts: docsBpi2CmBaseTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmBaseTable.setDescription('This table describes the basic and authorization- related Baseline Privacy Plus attributes of each CM MAC interface.')
docsBpi2CmBaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmBaseEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmBaseEntry.setDescription('Each entry contains objects describing attributes of one CM MAC interface. An entry in this table exists for each ifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmPrivacyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmPrivacyEnable.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.')
if mibBuilder.loadTexts: docsBpi2CmPrivacyEnable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmPrivacyEnable.setDescription('This object identifies whether this CM is provisioned to run Baseline Privacy Plus.')
docsBpi2CmPublicKey = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 524))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmPublicKey.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.4.')
if mibBuilder.loadTexts: docsBpi2CmPublicKey.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmPublicKey.setDescription('The value of this object is a DER-encoded RSAPublicKey ASN.1 type string, as defined in the RSA Encryption Standard (PKCS #1), corresponding to the public key of the CM.')
docsBpi2CmAuthState = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start", 1), ("authWait", 2), ("authorized", 3), ("reauthWait", 4), ("authRejectWait", 5), ("silent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthState.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.1.2.1.')
if mibBuilder.loadTexts: docsBpi2CmAuthState.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthState.setDescription('The value of this object is the state of the CM authorization FSM. The start state indicates that FSM is in its initial state.')
docsBpi2CmAuthKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthKeySequenceNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.2 and 4.2.2.10.')
if mibBuilder.loadTexts: docsBpi2CmAuthKeySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthKeySequenceNumber.setDescription('The value of this object is the most recent authorization key sequence number for this FSM.')
docsBpi2CmAuthExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresOld.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.2 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresOld.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresOld.setDescription('The value of this object is the actual clock time for expiration of the immediate predecessor of the most recent authorization key for this FSM. If this FSM has only one authorization key, then the value is the time of activation of this FSM.')
docsBpi2CmAuthExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresNew.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.2 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresNew.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresNew.setDescription('The value of this object is the actual clock time for expiration of the most recent authorization key for this FSM.')
docsBpi2CmAuthReset = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmAuthReset.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.1.2.3.4.')
if mibBuilder.loadTexts: docsBpi2CmAuthReset.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthReset.setDescription("Setting this object to 'true' generates a Reauthorize event in the authorization FSM. Reading this object always returns FALSE. This object is for testing purposes only, and therefore it is not required to be associated with a last reset object.")
docsBpi2CmAuthGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6047999))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthGraceTime.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.3.')
if mibBuilder.loadTexts: docsBpi2CmAuthGraceTime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthGraceTime.setDescription('The value of this object is the grace time for an authorization key in seconds. A CM is expected to start trying to get a new authorization key beginning AuthGraceTime seconds before the most recent authorization key actually expires.')
docsBpi2CmTEKGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 302399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKGraceTime.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.6.')
if mibBuilder.loadTexts: docsBpi2CmTEKGraceTime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKGraceTime.setDescription('The value of this object is the grace time for the TEK in seconds. The CM is expected to start trying to acquire a new TEK beginning TEK GraceTime seconds before the expiration of the most recent TEK.')
docsBpi2CmAuthWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.1.')
if mibBuilder.loadTexts: docsBpi2CmAuthWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthWaitTimeout.setDescription('The value of this object is the Authorize Wait Timeout in seconds.')
docsBpi2CmReauthWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmReauthWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.2.')
if mibBuilder.loadTexts: docsBpi2CmReauthWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmReauthWaitTimeout.setDescription('The value of this object is the Reauthorize Wait Timeout in seconds.')
docsBpi2CmOpWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmOpWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.4.')
if mibBuilder.loadTexts: docsBpi2CmOpWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmOpWaitTimeout.setDescription('The value of this object is the Operational Wait Timeout in seconds.')
docsBpi2CmRekeyWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmRekeyWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.5.')
if mibBuilder.loadTexts: docsBpi2CmRekeyWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmRekeyWaitTimeout.setDescription('The value of this object is the Rekey Wait Timeout in seconds.')
docsBpi2CmAuthRejectWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.7.')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectWaitTimeout.setDescription('The value of this object is the Authorization Reject Wait Timeout in seconds.')
docsBpi2CmSAMapWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmSAMapWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.8.')
if mibBuilder.loadTexts: docsBpi2CmSAMapWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmSAMapWaitTimeout.setDescription('The value of this object is the retransmission interval, in seconds, of SA Map Requests from the MAP Wait state.')
docsBpi2CmSAMapMaxRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmSAMapMaxRetries.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.1.1.1.9.')
if mibBuilder.loadTexts: docsBpi2CmSAMapMaxRetries.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmSAMapMaxRetries.setDescription('The value of this object is the maximum number of Map Request retries allowed.')
docsBpi2CmAuthentInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthentInfos.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.9.')
if mibBuilder.loadTexts: docsBpi2CmAuthentInfos.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthentInfos.setDescription('The value of this object is the number of times the CM has transmitted an Authentication Information message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmAuthRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.1.')
if mibBuilder.loadTexts: docsBpi2CmAuthRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRequests.setDescription('The value of this object is the number of times the CM has transmitted an Authorization Request message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmAuthReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.2.')
if mibBuilder.loadTexts: docsBpi2CmAuthReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthReplies.setDescription('The value of this object is the number of times the CM has received an Authorization Reply message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmAuthRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmAuthRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRejects.setDescription('The value of this object is the number of times the CM has received an Authorization Reject message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmAuthInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.7.')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalids.setDescription('The value of this object is the count of times the CM has received an Authorization Invalid message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmAuthRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 11))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unauthorizedSaid", 4), ("permanentAuthorizationFailure", 8), ("timeOfDayNotAcquired", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.3 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent Authorization Reject message received by the CM. This has the value unknown(2) if the last Error-Code value was 0 and none(1) if no Authorization Reject message has been received since reboot.')
docsBpi2CmAuthRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.3 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorString.setDescription('The value of this object is the text string in the most recent Authorization Reject message received by the CM. This is a zero length string if no Authorization Reject message has been received since reboot.')
docsBpi2CmAuthInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unsolicited", 5), ("invalidKeySequence", 6), ("keyRequestAuthenticationFailure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.7 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent Authorization Invalid message received by the CM. This has the value unknown(2) if the last Error-Code value was 0 and none(1) if no Authorization Invalid message has been received since reboot.')
docsBpi2CmAuthInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 1, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.7 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorString.setDescription('The value of this object is the text string in the most recent Authorization Invalid message received by the CM. This is a zero length string if no Authorization Invalid message has been received since reboot.')
docsBpi2CmTEKTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 1, 2), )
if mibBuilder.loadTexts: docsBpi2CmTEKTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKTable.setDescription('This table describes the attributes of each CM Traffic Encryption Key (TEK) association. The CM maintains (no more than) one TEK association per SAID per CM MAC interface.')
docsBpi2CmTEKEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKSAId"))
if mibBuilder.loadTexts: docsBpi2CmTEKEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKEntry.setDescription('Each entry contains objects describing the TEK association attributes of one SAID. The CM MUST create one entry per SAID, regardless of whether the SAID was obtained from a Registration Response message, from an Authorization Reply message, or from any dynamic SAID establishment mechanisms.')
docsBpi2CmTEKSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 1), DocsSAId())
if mibBuilder.loadTexts: docsBpi2CmTEKSAId.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.12.')
if mibBuilder.loadTexts: docsBpi2CmTEKSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKSAId.setDescription('The value of this object is the DOCSIS Security Association ID (SAID).')
docsBpi2CmTEKSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 2), DocsBpkmSAType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKSAType.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmTEKSAType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKSAType.setDescription('The value of this object is the type of security association.')
docsBpi2CmTEKDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 3), DocsBpkmDataEncryptAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKDataEncryptAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmTEKDataEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKDataEncryptAlg.setDescription('The value of this object is the data encryption algorithm for this SAID.')
docsBpi2CmTEKDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 4), DocsBpkmDataAuthentAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKDataAuthentAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmTEKDataAuthentAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKDataAuthentAlg.setDescription('The value of this object is the data authentication algorithm for this SAID.')
docsBpi2CmTEKState = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start", 1), ("opWait", 2), ("opReauthWait", 3), ("operational", 4), ("rekeyWait", 5), ("rekeyReauthWait", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKState.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.1.3.1.')
if mibBuilder.loadTexts: docsBpi2CmTEKState.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKState.setDescription('The value of this object is the state of the indicated TEK FSM. The start(1) state indicates that the FSM is in its initial state.')
docsBpi2CmTEKKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeySequenceNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.2.10 and 4.2.2.13.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeySequenceNumber.setDescription('The value of this object is the most recent TEK key sequence number for this TEK FSM.')
docsBpi2CmTEKExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresOld.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.5 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresOld.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresOld.setDescription('The value of this object is the actual clock time for expiration of the immediate predecessor of the most recent TEK for this FSM. If this FSM has only one TEK, then the value is the time of activation of this FSM.')
docsBpi2CmTEKExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresNew.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.5 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresNew.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresNew.setDescription('The value of this object is the actual clock time for expiration of the most recent TEK for this FSM.')
docsBpi2CmTEKKeyRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.4.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRequests.setDescription('The value of this object is the number of times the CM has transmitted a Key Request message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmTEKKeyReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.5.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyReplies.setDescription('The value of this object is the number of times the CM has received a Key Reply message, including a message whose authentication failed. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmTEKKeyRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.6.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejects.setDescription('The value of this object is the number of times the CM has received a Key Reject message, including a message whose authentication failed. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmTEKInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.8.')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalids.setDescription('The value of this object is the number of times the CM has received a TEK Invalid message, including a message whose authentication failed. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmTEKAuthPends = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKAuthPends.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.1.3.3.3.')
if mibBuilder.loadTexts: docsBpi2CmTEKAuthPends.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKAuthPends.setDescription('The value of this object is the count of times an Authorization Pending (Auth Pend) event occurred in this FSM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmTEKKeyRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedSaid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.1.2.6 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent Key Reject message received by the CM. This has the value unknown(2) if the last Error-Code value was 0 and none(1) if no Key Reject message has been received since registration.')
docsBpi2CmTEKKeyRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.1.2.6 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorString.setDescription('The value of this object is the text string in the most recent Key Reject message received by the CM. This is a zero length string if no Key Reject message has been received since registration.')
docsBpi2CmTEKInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("invalidKeySequence", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.1.2.8 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent TEK Invalid message received by the CM. This has the value unknown(2) if the last Error-Code value was 0 and none(1) if no TEK Invalid message has been received since registration.')
docsBpi2CmTEKInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 2, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.1.2.8 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorString.setDescription('The value of this object is the text string in the most recent TEK Invalid message received by the CM. This is a zero length string if no TEK Invalid message has been received since registration.')
docsBpi2CmMulticastObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 1, 1, 3))
docsBpi2CmIpMulticastMapTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1), )
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapTable.setDescription('This table maps multicast IP addresses to SAIDs per CM MAC Interface. It is intended to map multicast IP addresses associated with SA MAP Request messages.')
docsBpi2CmIpMulticastMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastIndex"))
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapEntry.setDescription('Each entry contains objects describing the mapping of one multicast IP address to one SAID, as well as associated state, message counters, and error information. An entry may be removed from this table upon the reception of an SA Map Reject.')
docsBpi2CmIpMulticastIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsBpi2CmIpMulticastIndex.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastIndex.setDescription('The index of this row.')
docsBpi2CmIpMulticastAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddressType.setDescription('The type of Internet address for docsBpi2CmIpMulticastAddress.')
docsBpi2CmIpMulticastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddress.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 5.4.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddress.setDescription('This object represents the IP multicast address to be mapped. The type of this address is determined by the value of the docsBpi2CmIpMulticastAddressType object.')
docsBpi2CmIpMulticastSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 4), DocsSAIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAId.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.12.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAId.setDescription('This object represents the SAID to which the IP multicast address has been mapped. If no SA Map Reply has been received for the IP address, this object should have the value 0.')
docsBpi2CmIpMulticastSAMapState = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("mapWait", 2), ("mapped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapState.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 5.3.1.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapState.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapState.setDescription('The value of this object is the state of the SA Mapping FSM for this IP.')
docsBpi2CmIpMulticastSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.10.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRequests.setDescription('The value of this object is the number of times the CM has transmitted an SA Map Request message for this IP. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmIpMulticastSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.11.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapReplies.setDescription('The value of this object is the number of times the CM has received an SA Map Reply message for this IP. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmIpMulticastSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.12.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejects.setDescription('The value of this object is the number of times the CM has received an SA MAP Reject message for this IP. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmIpMulticastSAMapRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("noAuthForRequestedDSFlow", 9), ("dsFlowNotMappedToSA", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.12 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent SA Map Reject message sent in response to an SA Map Request for This IP. It has the value none(1) if no SA MAP Reject message has been received since entry creation.')
docsBpi2CmIpMulticastSAMapRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 3, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.12 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorString.setDescription('The value of this object is the text string in the most recent SA Map Reject message sent in response to an SA Map Request for this IP. It is a zero length string if no SA Map Reject message has been received since entry creation.')
docsBpi2CmCertObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 1, 1, 4))
docsBpi2CmDeviceCertTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 1, 4, 1), )
if mibBuilder.loadTexts: docsBpi2CmDeviceCertTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmDeviceCertTable.setDescription('This table describes the Baseline Privacy Plus device certificates for each CM MAC interface.')
docsBpi2CmDeviceCertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmDeviceCertEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmDeviceCertEntry.setDescription('Each entry contains the device certificates of one CM MAC interface. An entry in this table exists for each ifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmDeviceCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 4, 1, 1, 1), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmDeviceCmCert.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.1.')
if mibBuilder.loadTexts: docsBpi2CmDeviceCmCert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmDeviceCmCert.setDescription("The X509 DER-encoded cable modem certificate. Note: This object can be set only when the value is the zero-length OCTET STRING; otherwise, an error of 'inconsistentValue' is returned. Once the object contains the certificate, its access MUST be read-only and persists after re-initialization of the managed system.")
docsBpi2CmDeviceManufCert = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 4, 1, 1, 2), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmDeviceManufCert.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.1.')
if mibBuilder.loadTexts: docsBpi2CmDeviceManufCert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmDeviceManufCert.setDescription('The X509 DER-encoded manufacturer certificate that signed the cable modem certificate.')
docsBpi2CmCryptoSuiteTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 1, 5), )
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteTable.setDescription('This table describes the Baseline Privacy Plus cryptographic suite capabilities for each CM MAC interface.')
docsBpi2CmCryptoSuiteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmCryptoSuiteIndex"))
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteEntry.setDescription('Each entry contains a cryptographic suite pair that this CM MAC supports.')
docsBpi2CmCryptoSuiteIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteIndex.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteIndex.setDescription('The index for a cryptographic suite row.')
docsBpi2CmCryptoSuiteDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 5, 1, 2), DocsBpkmDataEncryptAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataEncryptAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataEncryptAlg.setDescription('The value of this object is the data encryption algorithm for this cryptographic suite capability.')
docsBpi2CmCryptoSuiteDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 1, 5, 1, 3), DocsBpkmDataAuthentAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataAuthentAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataAuthentAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataAuthentAlg.setDescription('The value of this object is the data authentication algorithm for this cryptographic suite capability.')
docsBpi2CmtsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 1, 2))
docsBpi2CmtsBaseTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 2, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsBaseTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsBaseTable.setDescription('This table describes the basic Baseline Privacy attributes of each CMTS MAC interface.')
docsBpi2CmtsBaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsBaseEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsBaseEntry.setDescription('Each entry contains objects describing attributes of one CMTS MAC interface. An entry in this table exists for each ifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmtsDefaultAuthLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6048000)).clone(604800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultAuthLifetime.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.2.')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultAuthLifetime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultAuthLifetime.setDescription('The value of this object is the default lifetime, in seconds, that the CMTS assigns to a new authorization key. This object value persists after re-initialization of the managed system.')
docsBpi2CmtsDefaultTEKLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800)).clone(43200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultTEKLifetime.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Appendix A.2.')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultTEKLifetime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultTEKLifetime.setDescription('The value of this object is the default lifetime, in seconds, that the CMTS assigns to a new Traffic Encryption Key (TEK). This object value persists after re-initialization of the managed system.')
docsBpi2CmtsDefaultSelfSignedManufCertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultSelfSignedManufCertTrust.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.4.1')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultSelfSignedManufCertTrust.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultSelfSignedManufCertTrust.setDescription('This object determines the default trust of self-signed manufacturer certificate entries, contained in docsBpi2CmtsCACertTable, and created after this object is set. This object need not persist after re-initialization of the managed system.')
docsBpi2CmtsCheckCertValidityPeriods = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsCheckCertValidityPeriods.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.4.2')
if mibBuilder.loadTexts: docsBpi2CmtsCheckCertValidityPeriods.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCheckCertValidityPeriods.setDescription("Setting this object to 'true' causes all chained and root certificates in the chain to have their validity periods checked against the current time of day, when the CMTS receives an Authorization Request from the CM. A 'false' setting causes all certificates in the chain not to have their validity periods checked against the current time of day. This object need not persist after re-initialization of the managed system.")
docsBpi2CmtsAuthentInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthentInfos.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.9.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthentInfos.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthentInfos.setDescription('The value of this object is the number of times the CMTS has received an Authentication Information message from any CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.1.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRequests.setDescription('The value of this object is the number of times the CMTS has received an Authorization Request message from any CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthReplies.setDescription('The value of this object is the number of times the CMTS has transmitted an Authorization Reply message to any CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejects.setDescription('The value of this object is the number of times the CMTS has transmitted an Authorization Reject message to any CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.7.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalids.setDescription('The value of this object is the number of times the CMTS has transmitted an Authorization Invalid message to any CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.10.')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRequests.setDescription('The value of this object is the number of times the CMTS has received an SA Map Request message from any CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.11.')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapReplies.setDescription('The value of this object is the number of times the CMTS has transmitted an SA Map Reply message to any CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.12.')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRejects.setDescription('The value of this object is the number of times the CMTS has transmitted an SA Map Reject message to any CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 2, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsAuthTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthTable.setDescription('This table describes the attributes of each CM authorization association. The CMTS maintains one authorization association with each Baseline Privacy- enabled CM, registered on each CMTS MAC interface, regardless of whether the CM is authorized or rejected.')
docsBpi2CmtsAuthEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsAuthEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthEntry.setDescription('Each entry contains objects describing attributes of one authorization association. The CMTS MUST create one entry per CM per MAC interface, based on the receipt of an Authorization Request message, and MUST not delete the entry until the CM loses registration.')
docsBpi2CmtsAuthCmMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmMacAddress.setDescription('The value of this object is the physical address of the CM to which the authorization association applies.')
docsBpi2CmtsAuthCmBpiVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bpi", 0), ("bpiPlus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmBpiVersion.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.22; ANSI/SCTE 22-2 2002(formerly DSS 02-03) Data-Over-Cable Service Interface Specification DOCSIS 1.0 Baseline Privacy Interface (BPI)')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmBpiVersion.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmBpiVersion.setDescription("The value of this object is the version of Baseline Privacy for which this CM has registered. The value 'bpiplus' represents the value of BPI-Version Attribute of the Baseline Privacy Key Management BPKM attribute BPI-Version (1). The value 'bpi' is used to represent the CM registered using DOCSIS 1.0 Baseline Privacy.")
docsBpi2CmtsAuthCmPublicKey = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 524))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmPublicKey.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.4.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmPublicKey.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmPublicKey.setDescription('The value of this object is a DER-encoded RSAPublicKey ASN.1 type string, as defined in the RSA Encryption Standard (PKCS #1), corresponding to the public key of the CM. This is the zero-length OCTET STRING if the CMTS does not retain the public key.')
docsBpi2CmtsAuthCmKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmKeySequenceNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.2 and 4.2.2.10.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmKeySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmKeySequenceNumber.setDescription('The value of this object is the most recent authorization key sequence number for this CM.')
docsBpi2CmtsAuthCmExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresOld.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.2 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresOld.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresOld.setDescription('The value of this object is the actual clock time for expiration of the immediate predecessor of the most recent authorization key for this FSM. If this FSM has only one authorization key, then the value is the time of activation of this FSM. Note: This object has no meaning for CMs running in BPI mode; therefore, this object is not instantiated for entries associated to those CMs.')
docsBpi2CmtsAuthCmExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresNew.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.2 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresNew.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresNew.setDescription('The value of this object is the actual clock time for expiration of the most recent authorization key for this FSM.')
docsBpi2CmtsAuthCmLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6048000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmLifetime.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.2 and Appendix A.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmLifetime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmLifetime.setDescription('The value of this object is the lifetime, in seconds, that the CMTS assigns to an authorization key for this CM.')
docsBpi2CmtsAuthCmReset = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noResetRequested", 1), ("invalidateAuth", 2), ("sendAuthInvalid", 3), ("invalidateTeks", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReset.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.1.2.3.4, 4.1.2.3.5, and 4.1.3.3.5.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReset.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReset.setDescription("Setting this object to invalidateAuth(2) causes the CMTS to invalidate the current CM authorization key(s), but not to transmit an Authorization Invalid message nor to invalidate the primary SAID's TEKs. Setting this object to sendAuthInvalid(3) causes the CMTS to invalidate the current CM authorization key(s), and to transmit an Authorization Invalid message to the CM, but not to invalidate the primary SAID's TEKs. Setting this object to invalidateTeks(4) causes the CMTS to invalidate the current CM authorization key(s), to transmit an Authorization Invalid message to the CM, and to invalidate the TEKs associated with this CM's primary SAID. For BPI mode, substitute all of the CM's unicast TEKs for the primary SAID's TEKs in the previous paragraph. Reading this object returns the most recently set value of this object or, if the object has not been set since entry creation, returns noResetRequested(1).")
docsBpi2CmtsAuthCmInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInfos.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.9.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInfos.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInfos.setDescription('The value of this object is the number of times the CMTS has received an Authentication Information message from this CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthCmRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.1.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRequests.setDescription('The value of this object is the number of times the CMTS has received an Authorization Request message from this CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthCmReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReplies.setDescription('The value of this object is the number of times the CMTS has transmitted an Authorization Reply message to this CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthCmRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRejects.setDescription('The value of this object is the number of times the CMTS has transmitted an Authorization Reject message to this CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthCmInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.7.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInvalids.setDescription('The value of this object is the number of times the CMTS has transmitted an Authorization Invalid message to this CM. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsAuthRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 11))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unauthorizedSaid", 4), ("permanentAuthorizationFailure", 8), ("timeOfDayNotAcquired", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.3 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent Authorization Reject message transmitted to the CM. This has the value unknown(2) if the last Error-Code value was 0 and none(1) if no Authorization Reject message has been transmitted to the CM since entry creation.')
docsBpi2CmtsAuthRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.3 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorString.setDescription('The value of this object is the text string in the most recent Authorization Reject message transmitted to the CM. This is a zero length string if no Authorization Reject message has been transmitted to the CM since entry creation.')
docsBpi2CmtsAuthInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unsolicited", 5), ("invalidKeySequence", 6), ("keyRequestAuthenticationFailure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.7 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent Authorization Invalid message transmitted to the CM. This has the value unknown(2) if the last Error-Code value was 0 and none(1) if no Authorization Invalid message has been transmitted to the CM since entry creation.')
docsBpi2CmtsAuthInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.7 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorString.setDescription('The value of this object is the text string in the most recent Authorization Invalid message transmitted to the CM. This is a zero length string if no Authorization Invalid message has been transmitted to the CM since entry creation.')
docsBpi2CmtsAuthPrimarySAId = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 18), DocsSAIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthPrimarySAId.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthPrimarySAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthPrimarySAId.setDescription('The value of this object is the Primary Security Association identifier. For BPI mode, the value must be any unicast SID.')
docsBpi2CmtsAuthBpkmCmCertValid = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("validCmChained", 1), ("validCmTrusted", 2), ("invalidCmUntrusted", 3), ("invalidCAUntrusted", 4), ("invalidCmOther", 5), ("invalidCAOther", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCertValid.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.4.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCertValid.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCertValid.setDescription("Contains the reason why a CM's certificate is deemed valid or invalid. Return unknown(0) if the CM is running BPI mode. ValidCmChained(1) means the certificate is valid because it chains to a valid certificate. ValidCmTrusted(2) means the certificate is valid because it has been provisioned (in the docsBpi2CmtsProvisionedCmCert table) to be trusted. InvalidCmUntrusted(3) means the certificate is invalid because it has been provisioned (in the docsBpi2CmtsProvisionedCmCert table) to be untrusted. InvalidCAUntrusted(4) means the certificate is invalid because it chains to an untrusted certificate. InvalidCmOther(5) and InvalidCAOther(6) refer to errors in parsing, validity periods, etc., which are attributable to the CM certificate or its chain, respectively; additional information may be found in docsBpi2AuthRejectErrorString for these types of errors.")
docsBpi2CmtsAuthBpkmCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 20), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCert.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCert.setDescription('The X509 CM Certificate sent as part of a BPKM Authorization Request. Note: The zero-length OCTET STRING must be returned if the Entire certificate is not retained in the CMTS.')
docsBpi2CmtsAuthCACertIndexPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCACertIndexPtr.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCACertIndexPtr.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCACertIndexPtr.setDescription('A row index into docsBpi2CmtsCACertTable. Returns the index in docsBpi2CmtsCACertTable to which CA certificate this CM is chained to. A value of 0 means it could not be found or not applicable.')
docsBpi2CmtsTEKTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 2, 3), )
if mibBuilder.loadTexts: docsBpi2CmtsTEKTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKTable.setDescription('This table describes the attributes of each Traffic Encryption Key (TEK) association. The CMTS Maintains one TEK association per SAID on each CMTS MAC interface.')
docsBpi2CmtsTEKEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKSAId"))
if mibBuilder.loadTexts: docsBpi2CmtsTEKEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKEntry.setDescription('Each entry contains objects describing attributes of one TEK association on a particular CMTS MAC interface. The CMTS MUST create one entry per SAID per MAC interface, based on the receipt of a Key Request message, and MUST not delete the entry before the CM authorization for the SAID permanently expires.')
docsBpi2CmtsTEKSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 1), DocsSAId())
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAId.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.12.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAId.setDescription('The value of this object is the DOCSIS Security Association ID (SAID).')
docsBpi2CmtsTEKSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 2), DocsBpkmSAType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAType.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAType.setDescription("The value of this object is the type of security association. 'dynamic' does not apply to CMs running in BPI mode. Unicast BPI TEKs must utilize the 'primary' encoding, and multicast BPI TEKs must utilize the 'static' encoding.")
docsBpi2CmtsTEKDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 3), DocsBpkmDataEncryptAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataEncryptAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataEncryptAlg.setDescription('The value of this object is the data encryption algorithm for this SAID.')
docsBpi2CmtsTEKDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 4), DocsBpkmDataAuthentAlg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataAuthentAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataAuthentAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataAuthentAlg.setDescription('The value of this object is the data authentication algorithm for this SAID.')
docsBpi2CmtsTEKLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsTEKLifetime.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.5 and Appendix A.2.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKLifetime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKLifetime.setDescription('The value of this object is the lifetime, in seconds, that the CMTS assigns to keys for this TEK association.')
docsBpi2CmtsTEKKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKKeySequenceNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.2.10 and 4.2.2.13.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKKeySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKKeySequenceNumber.setDescription('The value of this object is the most recent TEK key sequence number for this SAID.')
docsBpi2CmtsTEKExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresOld.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.5 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresOld.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresOld.setDescription('The value of this object is the actual clock time for expiration of the immediate predecessor of the most recent TEK for this FSM. If this FSM has only one TEK, then the value is the time of activation of this FSM.')
docsBpi2CmtsTEKExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresNew.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.5 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresNew.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresNew.setDescription('The value of this object is the actual clock time for expiration of the most recent TEK for this FSM.')
docsBpi2CmtsTEKReset = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsTEKReset.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.1.3.3.5.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKReset.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKReset.setDescription("Setting this object to 'true' causes the CMTS to invalidate all currently active TEKs and to generate new TEKs for the associated SAID; the CMTS MAY also generate unsolicited TEK Invalid messages, to optimize the TEK synchronization between the CMTS and the CM(s). Reading this object always returns FALSE.")
docsBpi2CmtsKeyRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.4.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRequests.setDescription('The value of this object is the number of times the CMTS has received a Key Request message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsKeyReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.5.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyReplies.setDescription('The value of this object is the number of times the CMTS has transmitted a Key Reply message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsKeyRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.6.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejects.setDescription('The value of this object is the number of times the CMTS has transmitted a Key Reject message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsTEKInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.8.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalids.setDescription('The value of this object is the number of times the CMTS has transmitted a TEK Invalid message. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsKeyRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedSaid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.6 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent Key Reject message sent in response to a Key Request for this SAID. This has the value unknown(2) if the last Error-Code value was 0 and none(1) if no Key Reject message has been received since registration.')
docsBpi2CmtsKeyRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.6 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorString.setDescription('The value of this object is the text string in the most recent Key Reject message sent in response to a Key Request for this SAID. This is a zero length string if no Key Reject message has been received since registration.')
docsBpi2CmtsTEKInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("invalidKeySequence", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.8 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent TEK Invalid message sent in association with this SAID. This has the value unknown(2) if the last Error-Code value was 0 and none(1) if no TEK Invalid message has been received since registration.')
docsBpi2CmtsTEKInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 3, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.8 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorString.setDescription('The value of this object is the text string in the most recent TEK Invalid message sent in association with this SAID. This is a zero length string if no TEK Invalid message has been received since registration.')
docsBpi2CmtsMulticastObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 1, 2, 4))
docsBpi2CmtsIpMulticastMapTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapTable.setDescription('This table maps multicast IP addresses to SAIDs. If a multicast IP address is mapped by multiple rows in the table, the row with the lowest docsBpi2CmtsIpMulticastIndex must be utilized for the mapping.')
docsBpi2CmtsIpMulticastMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapEntry.setDescription('Each entry contains objects describing the mapping of a set of multicast IP address and the mask to one SAID associated to a CMTS MAC Interface, as well as associated message counters and error information.')
docsBpi2CmtsIpMulticastIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastIndex.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastIndex.setDescription("The index of this row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
docsBpi2CmtsIpMulticastAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddressType.setDescription('The type of Internet address for docsBpi2CmtsIpMulticastAddress and docsBpi2CmtsIpMulticastMask.')
docsBpi2CmtsIpMulticastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddress.setDescription('This object represents the IP multicast address to be mapped, in conjunction with docsBpi2CmtsIpMulticastMask. The type of this address is determined by the value of the object docsBpi2CmtsIpMulticastAddressType.')
docsBpi2CmtsIpMulticastMask = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMask.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMask.setDescription("This object represents the IP multicast address mask for this row. An IP multicast address matches this row if the logical AND of the address with docsBpi2CmtsIpMulticastMask is identical to the logical AND of docsBpi2CmtsIpMulticastAddr with docsBpi2CmtsIpMulticastMask. The type of this address is determined by the value of the object docsBpi2CmtsIpMulticastAddressType. Note: For IPv6, this object need not represent a contiguous netmask; e.g., to associate a SAID to a multicast group matching 'any' multicast scope. The TC InetAddressPrefixLength is not used, as it only represents contiguous netmask.")
docsBpi2CmtsIpMulticastSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 5), DocsSAIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAId.setDescription('This object represents the multicast SAID to be used in this IP multicast address mapping entry.')
docsBpi2CmtsIpMulticastSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 6), DocsBpkmSAType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAType.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAType.setDescription("The value of this object is the type of security association. 'dynamic' does not apply to CMs running in BPI mode. Unicast BPI TEKs must utilize the 'primary' encoding, and multicast BPI TEKs must utilize the 'static' encoding. By default, SNMP created entries set this object to 'static' if not set at row creation.")
docsBpi2CmtsIpMulticastDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 7), DocsBpkmDataEncryptAlg().clone('des56CbcMode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataEncryptAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataEncryptAlg.setDescription('The value of this object is the data encryption algorithm for this IP.')
docsBpi2CmtsIpMulticastDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 8), DocsBpkmDataAuthentAlg().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataAuthentAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataAuthentAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataAuthentAlg.setDescription('The value of this object is the data authentication algorithm for this IP.')
docsBpi2CmtsIpMulticastSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.10.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRequests.setDescription('The value of this object is the number of times the CMTS has received an SA Map Request message for this IP. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsIpMulticastSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.11.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapReplies.setDescription('The value of this object is the number of times the CMTS has transmitted an SA Map Reply message for this IP. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsIpMulticastSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 4.2.1.12.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejects.setDescription('The value of this object is the number of times the CMTS has transmitted an SA Map Reject message for this IP. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
docsBpi2CmtsIpMulticastSAMapRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("noAuthForRequestedDSFlow", 9), ("dsFlowNotMappedToSA", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.12 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorCode.setDescription('The value of this object is the enumerated description of the Error-Code in the most recent SA Map Reject message sent in response to an SA Map Request for this IP. It has the value unknown(2) if the last Error-Code Value was 0 and none(1) if no SA MAP Reject message has been received since entry creation.')
docsBpi2CmtsIpMulticastSAMapRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections 4.2.1.12 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorString.setDescription('The value of this object is the text string in the most recent SA Map Reject message sent in response to an SA Map Request for this IP. It is a zero length string if no SA Map Reject message has been received since entry creation.')
docsBpi2CmtsIpMulticastMapControl = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapControl.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapControl.setDescription('This object controls and reflects the IP multicast address mapping entry. There is no restriction on the ability to change values in this row while the row is active. A created row can be set to active only after the Corresponding instances of docsBpi2CmtsIpMulticastAddress, docsBpi2CmtsIpMulticastMask, docsBpi2CmtsIpMulticastSAId, and docsBpi2CmtsIpMulticastSAType have all been set.')
docsBpi2CmtsIpMulticastMapStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 1, 1, 15), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapStorageType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
docsBpi2CmtsMulticastAuthTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthTable.setDescription('This table describes the multicast SAID authorization for each CM on each CMTS MAC interface.')
docsBpi2CmtsMulticastAuthEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmtsMulticastAuthSAId"), (0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmtsMulticastAuthCmMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthEntry.setDescription('Each entry contains objects describing the key authorization of one cable modem for one multicast SAID for one CMTS MAC interface. Row entries persist after re-initialization of the managed system.')
docsBpi2CmtsMulticastAuthSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 2, 1, 1), DocsSAId())
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthSAId.setDescription('This object represents the multicast SAID for authorization.')
docsBpi2CmtsMulticastAuthCmMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthCmMacAddress.setDescription('This object represents the MAC address of the CM to which the multicast SAID authorization applies.')
docsBpi2CmtsMulticastAuthControl = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthControl.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthControl.setDescription('The status of this conceptual row for the authorization of multicast SAIDs to CMs.')
docsBpi2CmtsCertObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 1, 2, 5))
docsBpi2CmtsProvisionedCmCertTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTable.setDescription('A table of CM certificate trust entries provisioned to the CMTS. The trust object for a certificate in this table has an overriding effect on the validity object of a certificate in the authorization table, as long as the entire contents of the two certificates are identical.')
docsBpi2CmtsProvisionedCmCertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 1, 1), ).setIndexNames((0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertEntry.setReference('Data-Over-Cable Service Interface Specifications: Operations Support System Interface Specification SP-OSSIv2.0-I05-040407, Section 6.2.14')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertEntry.setDescription("An entry in the CMTS's provisioned CM certificate table. Row entries persist after re-initialization of the managed system.")
docsBpi2CmtsProvisionedCmCertMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertMacAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertMacAddress.setDescription('The index of this row.')
docsBpi2CmtsProvisionedCmCertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2))).clone('untrusted')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTrust.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.4.1.')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTrust.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTrust.setDescription('Trust state for the provisioned CM certificate entry. Note: Setting this object need only override the validity of CM certificates sent in future authorization requests; instantaneous effect need not occur.')
docsBpi2CmtsProvisionedCmCertSource = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("snmp", 1), ("configurationFile", 2), ("externalDatabase", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertSource.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.4.1.')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertSource.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertSource.setDescription('This object indicates how the certificate reached the CMTS. Other(4) means that it originated from a source not identified above.')
docsBpi2CmtsProvisionedCmCertStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertStatus.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertStatus.setDescription("The status of this conceptual row. Values in this row cannot be changed while the row is 'active'.")
docsBpi2CmtsProvisionedCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 1, 1, 5), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCert.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.2.')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCert.setDescription('An X509 DER-encoded Certificate Authority certificate. Note: The zero-length OCTET STRING must be returned, on reads, if the entire certificate is not retained in the CMTS.')
docsBpi2CmtsCACertTable = MibTable((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsCACertTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertTable.setDescription('The table of known Certificate Authority certificates acquired by this device.')
docsBpi2CmtsCACertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1), ).setIndexNames((0, "DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACertIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsCACertEntry.setReference('Data-Over-Cable Service Interface Specifications: Operations Support System Interface Specification SP-OSSIv2.0-I05-040407, Section 6.2.14')
if mibBuilder.loadTexts: docsBpi2CmtsCACertEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertEntry.setDescription("A row in the Certificate Authority certificate table. Row entries with the trust status 'trusted', 'untrusted', or 'root' persist after re-initialization of the managed system.")
docsBpi2CmtsCACertIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsBpi2CmtsCACertIndex.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertIndex.setDescription('The index for this row.')
docsBpi2CmtsCACertSubject = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSubject.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.2.4')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSubject.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSubject.setDescription("The subject name exactly as it is encoded in the X509 certificate. The organizationName portion of the certificate's subject name must be present. All other fields are optional. Any optional field present must be prepended with <CR> (carriage return, U+000D) <LF> (line feed, U+000A). Ordering of fields present must conform to the following: organizationName <CR> <LF> countryName <CR> <LF> stateOrProvinceName <CR> <LF> localityName <CR> <LF> organizationalUnitName <CR> <LF> organizationalUnitName=<Manufacturing Location> <CR> <LF> commonName")
docsBpi2CmtsCACertIssuer = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertIssuer.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.2.4')
if mibBuilder.loadTexts: docsBpi2CmtsCACertIssuer.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertIssuer.setDescription("The issuer name exactly as it is encoded in the X509 certificate. The commonName portion of the certificate's issuer name must be present. All other fields are optional. Any optional field present must be prepended with <CR> (carriage return, U+000D) <LF> (line feed, U+000A). Ordering of fields present must conform to the following: CommonName <CR><LF> countryName <CR><LF> stateOrProvinceName <CR><LF> localityName <CR><LF> organizationName <CR><LF> organizationalUnitName <CR><LF> organizationalUnitName=<Manufacturing Location>")
docsBpi2CmtsCACertSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSerialNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.2.2')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSerialNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSerialNumber.setDescription("This CA certificate's serial number, represented as an octet string.")
docsBpi2CmtsCACertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2), ("chained", 3), ("root", 4))).clone('chained')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsCACertTrust.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.4.1')
if mibBuilder.loadTexts: docsBpi2CmtsCACertTrust.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertTrust.setDescription('This object controls the trust status of this certificate. Root certificates must be given root(4) trust; manufacturer certificates must not be given root(4) trust. Trust on root certificates must not change. Note: Setting this object need only affect the validity of CM certificates sent in future authorization requests; instantaneous effect need not occur.')
docsBpi2CmtsCACertSource = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("snmp", 1), ("configurationFile", 2), ("externalDatabase", 3), ("other", 4), ("authentInfo", 5), ("compiledIntoCode", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSource.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.4.1')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSource.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSource.setDescription('This object indicates how the certificate reached the CMTS. Other(4) means that it originated from a source not identified above.')
docsBpi2CmtsCACertStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsCACertStatus.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertStatus.setDescription("The status of this conceptual row. An attempt to set writable columnar values while this row is active behaves as follows: - Sets to the object docsBpi2CmtsCACertTrust are allowed. - Sets to the object docsBpi2CmtsCACert will return an error of 'inconsistentValue'. A newly created entry cannot be set to active until the value of docsBpi2CmtsCACert is being set.")
docsBpi2CmtsCACert = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 8), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsCACert.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.2.')
if mibBuilder.loadTexts: docsBpi2CmtsCACert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACert.setDescription('An X509 DER-encoded Certificate Authority certificate. To help identify certificates, either this object or docsBpi2CmtsCACertThumbprint must be returned by a CMTS for self-signed CA certificates. Note: The zero-length OCTET STRING must be returned, on reads, if the entire certificate is not retained in the CMTS.')
docsBpi2CmtsCACertThumbprint = MibTableColumn((1, 3, 6, 1, 2, 1, 126, 1, 2, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertThumbprint.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section 9.4.3')
if mibBuilder.loadTexts: docsBpi2CmtsCACertThumbprint.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertThumbprint.setDescription('The SHA-1 hash of a CA certificate. To help identify certificates, either this object or docsBpi2CmtsCACert must be returned by a CMTS for self-signed CA certificates. Note: The zero-length OCTET STRING must be returned, on reads, if the CA certificate thumb print is not retained in the CMTS.')
docsBpi2CodeDownloadControl = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 1, 4))
docsBpi2CodeDownloadStatusCode = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("configFileCvcVerified", 1), ("configFileCvcRejected", 2), ("snmpCvcVerified", 3), ("snmpCvcRejected", 4), ("codeFileVerified", 5), ("codeFileRejected", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Sections D.3.3.2 and D.3.5.1.')
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusCode.setDescription('The value indicates the result of the latest config file CVC verification, SNMP CVC verification, or code file verification.')
docsBpi2CodeDownloadStatusString = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusString.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section D.3.7')
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusString.setDescription('The value of this object indicates the additional information to the status code. The value will include the error code and error description, which will be defined separately.')
docsBpi2CodeMfgOrgName = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgOrgName.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeMfgOrgName.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeMfgOrgName.setDescription("The value of this object is the device manufacturer's organizationName.")
docsBpi2CodeMfgCodeAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 4), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgCodeAccessStart.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeMfgCodeAccessStart.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeMfgCodeAccessStart.setDescription("The value of this object is the device manufacturer's current codeAccessStart value. This value will always refer to Greenwich Mean Time (GMT), and the value format must contain TimeZone information (fields 8-10).")
docsBpi2CodeMfgCvcAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 5), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgCvcAccessStart.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeMfgCvcAccessStart.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeMfgCvcAccessStart.setDescription("The value of this object is the device manufacturer's current cvcAccessStart value. This value will always refer to Greenwich Mean Time (GMT), and the value format must contain TimeZone information (fields 8-10).")
docsBpi2CodeCoSignerOrgName = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerOrgName.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerOrgName.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerOrgName.setDescription("The value of this object is the co-signer's organizationName. The value is a zero length string if the co-signer is not specified.")
docsBpi2CodeCoSignerCodeAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 7), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCodeAccessStart.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCodeAccessStart.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCodeAccessStart.setDescription("The value of this object is the co-signer's current codeAccessStart value. This value will always refer to Greenwich Mean Time (GMT), and the value format must contain TimeZone information (fields 8-10). If docsBpi2CodeCoSignerOrgName is a zero length string, the value of this object is meaningless.")
docsBpi2CodeCoSignerCvcAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 8), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCvcAccessStart.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCvcAccessStart.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCvcAccessStart.setDescription("The value of this object is the co-signer's current cvcAccessStart value. This value will always refer to Greenwich Mean Time (GMT), and the value format must contain TimeZone information (fields 8-10). If docsBpi2CodeCoSignerOrgName is a zero length string, the value of this object is meaningless.")
docsBpi2CodeCvcUpdate = MibScalar((1, 3, 6, 1, 2, 1, 126, 1, 4, 9), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CodeCvcUpdate.setReference('DOCSIS Baseline Privacy Plus Interface Specification, Section D.3.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeCvcUpdate.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeCvcUpdate.setDescription('Setting a CVC to this object triggers the device to verify the CVC and update the cvcAccessStart values. The content of this object is then discarded. If the device is not enabled to upgrade codefiles, or if the CVC verification fails, the CVC will be rejected. Reading this object always returns the zero-length OCTET STRING.')
docsBpi2Notification = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 0))
docsBpi2Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 2))
docsBpi2Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 2, 1))
docsBpi2Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 126, 2, 2))
docsBpi2CmCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 126, 2, 1, 1)).setObjects(("DOCS-IETF-BPI2-MIB", "docsBpi2CmGroup"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeDownloadGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2CmCompliance = docsBpi2CmCompliance.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCompliance.setDescription('This is the compliance statement for CMs that implement the DOCSIS Baseline Privacy Interface Plus.')
docsBpi2CmtsCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 126, 2, 1, 2)).setObjects(("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsGroup"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeDownloadGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2CmtsCompliance = docsBpi2CmtsCompliance.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCompliance.setDescription('This is the compliance statement for CMTSs that implement the DOCSIS Baseline Privacy Interface Plus.')
docsBpi2CmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 126, 2, 2, 1)).setObjects(("DOCS-IETF-BPI2-MIB", "docsBpi2CmPrivacyEnable"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmPublicKey"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthState"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthKeySequenceNumber"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthExpiresOld"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthExpiresNew"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthReset"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthGraceTime"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKGraceTime"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthWaitTimeout"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmReauthWaitTimeout"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmOpWaitTimeout"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmRekeyWaitTimeout"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthRejectWaitTimeout"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmSAMapWaitTimeout"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmSAMapMaxRetries"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthentInfos"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthRequests"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthReplies"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthRejects"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthInvalids"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthRejectErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthRejectErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthInvalidErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmAuthInvalidErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKSAType"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKDataEncryptAlg"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKDataAuthentAlg"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKState"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKKeySequenceNumber"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKExpiresOld"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKExpiresNew"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKKeyRequests"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKKeyReplies"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKKeyRejects"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKInvalids"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKAuthPends"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKKeyRejectErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKKeyRejectErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKInvalidErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmTEKInvalidErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastAddressType"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastAddress"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastSAId"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastSAMapState"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastSAMapRequests"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastSAMapReplies"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastSAMapRejects"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastSAMapRejectErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmIpMulticastSAMapRejectErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmDeviceCmCert"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmDeviceManufCert"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmCryptoSuiteDataEncryptAlg"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmCryptoSuiteDataAuthentAlg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2CmGroup = docsBpi2CmGroup.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmGroup.setDescription('This collection of objects provides CM BPI+ status and control.')
docsBpi2CmtsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 126, 2, 2, 2)).setObjects(("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsDefaultAuthLifetime"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsDefaultTEKLifetime"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsDefaultSelfSignedManufCertTrust"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCheckCertValidityPeriods"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthentInfos"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthRequests"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthReplies"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthRejects"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthInvalids"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsSAMapRequests"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsSAMapReplies"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsSAMapRejects"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmBpiVersion"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmPublicKey"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmKeySequenceNumber"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmExpiresOld"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmExpiresNew"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmLifetime"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmReset"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmInfos"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmRequests"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmReplies"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmRejects"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCmInvalids"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthRejectErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthRejectErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthInvalidErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthInvalidErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthPrimarySAId"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthBpkmCmCertValid"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthBpkmCmCert"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsAuthCACertIndexPtr"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKSAType"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKDataEncryptAlg"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKDataAuthentAlg"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKLifetime"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKKeySequenceNumber"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKExpiresOld"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKExpiresNew"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKReset"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsKeyRequests"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsKeyReplies"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsKeyRejects"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKInvalids"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsKeyRejectErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsKeyRejectErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKInvalidErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsTEKInvalidErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastAddressType"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastAddress"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastMask"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastSAId"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastSAType"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastDataEncryptAlg"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastDataAuthentAlg"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapRequests"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapReplies"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapRejects"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapRejectErrorCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapRejectErrorString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastMapControl"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsIpMulticastMapStorageType"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsMulticastAuthControl"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertTrust"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertSource"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertStatus"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsProvisionedCmCert"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACertSubject"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACertIssuer"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACertSerialNumber"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACertTrust"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACertSource"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACertStatus"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACert"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CmtsCACertThumbprint"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2CmtsGroup = docsBpi2CmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsGroup.setDescription('This collection of objects provides CMTS BPI+ status and control.')
docsBpi2CodeDownloadGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 126, 2, 2, 3)).setObjects(("DOCS-IETF-BPI2-MIB", "docsBpi2CodeDownloadStatusCode"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeDownloadStatusString"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeMfgOrgName"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeMfgCodeAccessStart"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeMfgCvcAccessStart"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeCoSignerOrgName"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeCoSignerCodeAccessStart"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeCoSignerCvcAccessStart"), ("DOCS-IETF-BPI2-MIB", "docsBpi2CodeCvcUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2CodeDownloadGroup = docsBpi2CodeDownloadGroup.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeDownloadGroup.setDescription('This collection of objects provides authenticated software download support.')
mibBuilder.exportSymbols("DOCS-IETF-BPI2-MIB", docsBpi2CmtsProvisionedCmCertTrust=docsBpi2CmtsProvisionedCmCertTrust, docsBpi2CmtsIpMulticastMapStorageType=docsBpi2CmtsIpMulticastMapStorageType, docsBpi2CmIpMulticastSAMapReplies=docsBpi2CmIpMulticastSAMapReplies, docsBpi2CmAuthInvalidErrorString=docsBpi2CmAuthInvalidErrorString, docsBpi2CmtsMulticastAuthCmMacAddress=docsBpi2CmtsMulticastAuthCmMacAddress, docsBpi2CmtsIpMulticastSAType=docsBpi2CmtsIpMulticastSAType, docsBpi2CmGroup=docsBpi2CmGroup, docsBpi2CmtsAuthInvalidErrorCode=docsBpi2CmtsAuthInvalidErrorCode, docsBpi2CmtsIpMulticastSAMapRejects=docsBpi2CmtsIpMulticastSAMapRejects, docsBpi2CmtsTEKInvalids=docsBpi2CmtsTEKInvalids, docsBpi2CmAuthRejectWaitTimeout=docsBpi2CmAuthRejectWaitTimeout, docsBpi2CmTEKDataAuthentAlg=docsBpi2CmTEKDataAuthentAlg, docsBpi2CmCryptoSuiteDataAuthentAlg=docsBpi2CmCryptoSuiteDataAuthentAlg, DocsBpkmSAType=DocsBpkmSAType, docsBpi2CmCryptoSuiteEntry=docsBpi2CmCryptoSuiteEntry, docsBpi2CmDeviceManufCert=docsBpi2CmDeviceManufCert, docsBpi2CmtsMulticastAuthTable=docsBpi2CmtsMulticastAuthTable, docsBpi2CmtsAuthPrimarySAId=docsBpi2CmtsAuthPrimarySAId, docsBpi2CmtsCertObjects=docsBpi2CmtsCertObjects, docsBpi2CmtsIpMulticastSAMapRejectErrorString=docsBpi2CmtsIpMulticastSAMapRejectErrorString, docsBpi2CmIpMulticastSAMapRejects=docsBpi2CmIpMulticastSAMapRejects, docsBpi2CmAuthInvalids=docsBpi2CmAuthInvalids, docsBpi2CmtsCACertIndex=docsBpi2CmtsCACertIndex, docsBpi2Groups=docsBpi2Groups, docsBpi2CmtsProvisionedCmCertEntry=docsBpi2CmtsProvisionedCmCertEntry, docsBpi2CmtsIpMulticastMask=docsBpi2CmtsIpMulticastMask, docsBpi2CmtsProvisionedCmCert=docsBpi2CmtsProvisionedCmCert, docsBpi2CmIpMulticastMapTable=docsBpi2CmIpMulticastMapTable, docsBpi2CodeMfgCodeAccessStart=docsBpi2CodeMfgCodeAccessStart, docsBpi2CmtsMulticastAuthEntry=docsBpi2CmtsMulticastAuthEntry, docsBpi2CmtsAuthInvalidErrorString=docsBpi2CmtsAuthInvalidErrorString, docsBpi2CmtsAuthCmInvalids=docsBpi2CmtsAuthCmInvalids, docsBpi2CmtsGroup=docsBpi2CmtsGroup, docsBpi2CmRekeyWaitTimeout=docsBpi2CmRekeyWaitTimeout, docsBpi2CmTEKTable=docsBpi2CmTEKTable, docsBpi2CodeCoSignerOrgName=docsBpi2CodeCoSignerOrgName, docsBpi2CmtsTEKExpiresNew=docsBpi2CmtsTEKExpiresNew, docsBpi2CmTEKSAType=docsBpi2CmTEKSAType, docsBpi2CmtsAuthCmReplies=docsBpi2CmtsAuthCmReplies, docsBpi2CmtsAuthCmMacAddress=docsBpi2CmtsAuthCmMacAddress, docsBpi2CmtsDefaultTEKLifetime=docsBpi2CmtsDefaultTEKLifetime, docsBpi2CmtsCACertIssuer=docsBpi2CmtsCACertIssuer, docsBpi2CmAuthRejectErrorString=docsBpi2CmAuthRejectErrorString, docsBpi2CmAuthRejects=docsBpi2CmAuthRejects, docsBpi2CmAuthReplies=docsBpi2CmAuthReplies, docsBpi2CmTEKKeySequenceNumber=docsBpi2CmTEKKeySequenceNumber, docsBpi2CmtsCACertSource=docsBpi2CmtsCACertSource, docsBpi2CodeCoSignerCvcAccessStart=docsBpi2CodeCoSignerCvcAccessStart, docsBpi2CmtsIpMulticastSAMapRequests=docsBpi2CmtsIpMulticastSAMapRequests, docsBpi2CmTEKInvalids=docsBpi2CmTEKInvalids, docsBpi2CmtsAuthCmRejects=docsBpi2CmtsAuthCmRejects, docsBpi2Compliances=docsBpi2Compliances, docsBpi2CmDeviceCertEntry=docsBpi2CmDeviceCertEntry, docsBpi2CmtsAuthBpkmCmCert=docsBpi2CmtsAuthBpkmCmCert, docsBpi2CmtsSAMapRequests=docsBpi2CmtsSAMapRequests, docsBpi2CmOpWaitTimeout=docsBpi2CmOpWaitTimeout, docsBpi2CmtsAuthRequests=docsBpi2CmtsAuthRequests, docsBpi2CmAuthReset=docsBpi2CmAuthReset, docsBpi2CmtsAuthCmReset=docsBpi2CmtsAuthCmReset, docsBpi2CmTEKState=docsBpi2CmTEKState, docsBpi2CmtsAuthReplies=docsBpi2CmtsAuthReplies, docsBpi2CmIpMulticastSAMapRequests=docsBpi2CmIpMulticastSAMapRequests, DocsSAId=DocsSAId, docsBpi2CmtsAuthCmKeySequenceNumber=docsBpi2CmtsAuthCmKeySequenceNumber, docsBpi2CmCryptoSuiteIndex=docsBpi2CmCryptoSuiteIndex, docsBpi2CmtsCACertTable=docsBpi2CmtsCACertTable, docsBpi2CmtsSAMapRejects=docsBpi2CmtsSAMapRejects, docsBpi2CmTEKKeyRequests=docsBpi2CmTEKKeyRequests, docsBpi2CmtsBaseEntry=docsBpi2CmtsBaseEntry, docsBpi2CmAuthWaitTimeout=docsBpi2CmAuthWaitTimeout, docsBpi2CmtsAuthCmInfos=docsBpi2CmtsAuthCmInfos, DocsSAIdOrZero=DocsSAIdOrZero, docsBpi2CmtsKeyRequests=docsBpi2CmtsKeyRequests, docsBpi2CmtsProvisionedCmCertMacAddress=docsBpi2CmtsProvisionedCmCertMacAddress, docsBpi2CmAuthExpiresNew=docsBpi2CmAuthExpiresNew, docsBpi2CmSAMapWaitTimeout=docsBpi2CmSAMapWaitTimeout, docsBpi2CmAuthRequests=docsBpi2CmAuthRequests, docsBpi2CmTEKEntry=docsBpi2CmTEKEntry, docsBpi2CodeDownloadControl=docsBpi2CodeDownloadControl, docsBpi2CmtsCACertSubject=docsBpi2CmtsCACertSubject, docsBpi2CmtsCACertThumbprint=docsBpi2CmtsCACertThumbprint, docsBpi2CmTEKKeyRejectErrorString=docsBpi2CmTEKKeyRejectErrorString, docsBpi2CmPublicKey=docsBpi2CmPublicKey, docsBpi2CmReauthWaitTimeout=docsBpi2CmReauthWaitTimeout, docsBpi2CmTEKKeyRejects=docsBpi2CmTEKKeyRejects, docsBpi2MIB=docsBpi2MIB, docsBpi2CmtsTEKExpiresOld=docsBpi2CmtsTEKExpiresOld, docsBpi2CmTEKKeyReplies=docsBpi2CmTEKKeyReplies, docsBpi2CmtsCACert=docsBpi2CmtsCACert, docsBpi2CodeMfgOrgName=docsBpi2CodeMfgOrgName, docsBpi2CmCertObjects=docsBpi2CmCertObjects, docsBpi2CmtsAuthInvalids=docsBpi2CmtsAuthInvalids, docsBpi2CmtsIpMulticastMapControl=docsBpi2CmtsIpMulticastMapControl, docsBpi2CmTEKExpiresOld=docsBpi2CmTEKExpiresOld, docsBpi2CmtsAuthTable=docsBpi2CmtsAuthTable, docsBpi2CmIpMulticastAddressType=docsBpi2CmIpMulticastAddressType, docsBpi2CmtsAuthCmExpiresNew=docsBpi2CmtsAuthCmExpiresNew, DocsX509ASN1DEREncodedCertificate=DocsX509ASN1DEREncodedCertificate, docsBpi2CmtsKeyRejects=docsBpi2CmtsKeyRejects, docsBpi2CmTEKGraceTime=docsBpi2CmTEKGraceTime, docsBpi2CmtsMulticastObjects=docsBpi2CmtsMulticastObjects, docsBpi2CmAuthRejectErrorCode=docsBpi2CmAuthRejectErrorCode, docsBpi2CmtsAuthentInfos=docsBpi2CmtsAuthentInfos, docsBpi2CmtsAuthEntry=docsBpi2CmtsAuthEntry, docsBpi2CmMulticastObjects=docsBpi2CmMulticastObjects, docsBpi2CmtsTEKTable=docsBpi2CmtsTEKTable, docsBpi2CmtsAuthCmBpiVersion=docsBpi2CmtsAuthCmBpiVersion, docsBpi2CmIpMulticastSAMapState=docsBpi2CmIpMulticastSAMapState, docsBpi2CmtsTEKKeySequenceNumber=docsBpi2CmtsTEKKeySequenceNumber, docsBpi2CmtsAuthCmPublicKey=docsBpi2CmtsAuthCmPublicKey, docsBpi2Notification=docsBpi2Notification, docsBpi2CmIpMulticastMapEntry=docsBpi2CmIpMulticastMapEntry, docsBpi2CmTEKDataEncryptAlg=docsBpi2CmTEKDataEncryptAlg, docsBpi2CmtsAuthCmLifetime=docsBpi2CmtsAuthCmLifetime, docsBpi2CmtsIpMulticastSAMapReplies=docsBpi2CmtsIpMulticastSAMapReplies, docsBpi2CmtsCACertEntry=docsBpi2CmtsCACertEntry, docsBpi2CmIpMulticastIndex=docsBpi2CmIpMulticastIndex, docsBpi2CmBaseTable=docsBpi2CmBaseTable, docsBpi2CmTEKKeyRejectErrorCode=docsBpi2CmTEKKeyRejectErrorCode, docsBpi2CmBaseEntry=docsBpi2CmBaseEntry, docsBpi2CmDeviceCmCert=docsBpi2CmDeviceCmCert, docsBpi2CmCryptoSuiteDataEncryptAlg=docsBpi2CmCryptoSuiteDataEncryptAlg, docsBpi2CmtsTEKSAId=docsBpi2CmtsTEKSAId, docsBpi2CmtsIpMulticastDataAuthentAlg=docsBpi2CmtsIpMulticastDataAuthentAlg, docsBpi2CmSAMapMaxRetries=docsBpi2CmSAMapMaxRetries, docsBpi2CmtsTEKEntry=docsBpi2CmtsTEKEntry, docsBpi2CmtsMulticastAuthControl=docsBpi2CmtsMulticastAuthControl, docsBpi2CmtsIpMulticastAddress=docsBpi2CmtsIpMulticastAddress, docsBpi2CodeMfgCvcAccessStart=docsBpi2CodeMfgCvcAccessStart, docsBpi2CmtsBaseTable=docsBpi2CmtsBaseTable, docsBpi2CmtsCACertTrust=docsBpi2CmtsCACertTrust, docsBpi2CmAuthGraceTime=docsBpi2CmAuthGraceTime, docsBpi2CmtsCACertSerialNumber=docsBpi2CmtsCACertSerialNumber, docsBpi2Conformance=docsBpi2Conformance, docsBpi2CmtsTEKLifetime=docsBpi2CmtsTEKLifetime, docsBpi2CmObjects=docsBpi2CmObjects, docsBpi2CmIpMulticastAddress=docsBpi2CmIpMulticastAddress, docsBpi2CmtsCompliance=docsBpi2CmtsCompliance, PYSNMP_MODULE_ID=docsBpi2MIB, docsBpi2CmtsAuthCACertIndexPtr=docsBpi2CmtsAuthCACertIndexPtr, docsBpi2CmtsTEKReset=docsBpi2CmtsTEKReset, docsBpi2CmtsIpMulticastIndex=docsBpi2CmtsIpMulticastIndex, docsBpi2CmtsCACertStatus=docsBpi2CmtsCACertStatus, docsBpi2CmIpMulticastSAId=docsBpi2CmIpMulticastSAId, docsBpi2CmtsAuthBpkmCmCertValid=docsBpi2CmtsAuthBpkmCmCertValid, docsBpi2CmIpMulticastSAMapRejectErrorString=docsBpi2CmIpMulticastSAMapRejectErrorString, docsBpi2CmtsKeyReplies=docsBpi2CmtsKeyReplies, docsBpi2CodeDownloadGroup=docsBpi2CodeDownloadGroup, docsBpi2CmtsTEKInvalidErrorString=docsBpi2CmtsTEKInvalidErrorString, docsBpi2CmtsAuthCmRequests=docsBpi2CmtsAuthCmRequests, docsBpi2CmtsIpMulticastMapTable=docsBpi2CmtsIpMulticastMapTable, docsBpi2CmtsAuthRejects=docsBpi2CmtsAuthRejects, docsBpi2CmtsDefaultSelfSignedManufCertTrust=docsBpi2CmtsDefaultSelfSignedManufCertTrust, docsBpi2CmtsSAMapReplies=docsBpi2CmtsSAMapReplies, docsBpi2CmtsTEKDataAuthentAlg=docsBpi2CmtsTEKDataAuthentAlg, docsBpi2CmPrivacyEnable=docsBpi2CmPrivacyEnable, docsBpi2CmtsProvisionedCmCertTable=docsBpi2CmtsProvisionedCmCertTable, docsBpi2CmDeviceCertTable=docsBpi2CmDeviceCertTable, docsBpi2CmtsCheckCertValidityPeriods=docsBpi2CmtsCheckCertValidityPeriods, docsBpi2CmAuthState=docsBpi2CmAuthState, docsBpi2CodeCoSignerCodeAccessStart=docsBpi2CodeCoSignerCodeAccessStart, docsBpi2CodeCvcUpdate=docsBpi2CodeCvcUpdate, docsBpi2CmtsTEKSAType=docsBpi2CmtsTEKSAType, docsBpi2CmIpMulticastSAMapRejectErrorCode=docsBpi2CmIpMulticastSAMapRejectErrorCode, docsBpi2CmtsProvisionedCmCertStatus=docsBpi2CmtsProvisionedCmCertStatus, docsBpi2CmtsAuthRejectErrorCode=docsBpi2CmtsAuthRejectErrorCode, DocsBpkmDataAuthentAlg=DocsBpkmDataAuthentAlg, docsBpi2CmTEKSAId=docsBpi2CmTEKSAId, docsBpi2CmtsObjects=docsBpi2CmtsObjects, docsBpi2CmCompliance=docsBpi2CmCompliance, docsBpi2CmCryptoSuiteTable=docsBpi2CmCryptoSuiteTable, docsBpi2CodeDownloadStatusCode=docsBpi2CodeDownloadStatusCode, docsBpi2CmtsIpMulticastSAMapRejectErrorCode=docsBpi2CmtsIpMulticastSAMapRejectErrorCode, docsBpi2CmtsAuthCmExpiresOld=docsBpi2CmtsAuthCmExpiresOld, docsBpi2CmTEKInvalidErrorString=docsBpi2CmTEKInvalidErrorString, docsBpi2CmtsKeyRejectErrorCode=docsBpi2CmtsKeyRejectErrorCode, docsBpi2CmtsKeyRejectErrorString=docsBpi2CmtsKeyRejectErrorString, docsBpi2CmtsIpMulticastSAId=docsBpi2CmtsIpMulticastSAId, docsBpi2CmTEKInvalidErrorCode=docsBpi2CmTEKInvalidErrorCode, docsBpi2CmAuthKeySequenceNumber=docsBpi2CmAuthKeySequenceNumber, docsBpi2CmAuthentInfos=docsBpi2CmAuthentInfos, docsBpi2CmtsTEKInvalidErrorCode=docsBpi2CmtsTEKInvalidErrorCode, docsBpi2CmtsIpMulticastMapEntry=docsBpi2CmtsIpMulticastMapEntry, docsBpi2CmtsIpMulticastAddressType=docsBpi2CmtsIpMulticastAddressType, docsBpi2CodeDownloadStatusString=docsBpi2CodeDownloadStatusString, docsBpi2CmtsProvisionedCmCertSource=docsBpi2CmtsProvisionedCmCertSource, DocsBpkmDataEncryptAlg=DocsBpkmDataEncryptAlg, docsBpi2CmAuthExpiresOld=docsBpi2CmAuthExpiresOld, docsBpi2MIBObjects=docsBpi2MIBObjects, docsBpi2CmtsAuthRejectErrorString=docsBpi2CmtsAuthRejectErrorString, docsBpi2CmAuthInvalidErrorCode=docsBpi2CmAuthInvalidErrorCode, docsBpi2CmtsDefaultAuthLifetime=docsBpi2CmtsDefaultAuthLifetime, docsBpi2CmtsTEKDataEncryptAlg=docsBpi2CmtsTEKDataEncryptAlg, docsBpi2CmtsIpMulticastDataEncryptAlg=docsBpi2CmtsIpMulticastDataEncryptAlg, docsBpi2CmtsMulticastAuthSAId=docsBpi2CmtsMulticastAuthSAId, docsBpi2CmTEKExpiresNew=docsBpi2CmTEKExpiresNew, docsBpi2CmTEKAuthPends=docsBpi2CmTEKAuthPends)
