#
# PySNMP MIB module CPQCMC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQCMC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
compaq, = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysDescr, sysLocation, sysContact, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysLocation", "sysContact", "sysName")
MibIdentifier, ModuleIdentity, TimeTicks, Counter32, ObjectIdentity, IpAddress, Unsigned32, Integer32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter32", "ObjectIdentity", "IpAddress", "Unsigned32", "Integer32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Bits", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqCmc = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153))
cpqCmcMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 1))
cpqCmcComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2))
cpqCmcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 1))
cpqCmcOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 1, 1))
cpqCmcDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2))
cpqCmcSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2))
cpqCmcSetupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1))
cpqCmcSetupGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1))
cpqCmcSetupEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2))
cpqCmcSetupTemp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 1))
cpqCmcSetupTemp2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 2))
cpqCmcSetupFan1 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 3))
cpqCmcSetupFan2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 4))
cpqCmcSetupVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 5))
cpqCmcSetupHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 6))
cpqCmcSetupInput1 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 7))
cpqCmcSetupInput2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 8))
cpqCmcSetupInput3 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 9))
cpqCmcSetupInput4 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 10))
cpqCmcSetupLock1 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11))
cpqCmcSetupLock2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12))
cpqCmcSetupSmoke = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 13))
cpqCmcSetupShock = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 14))
cpqCmcSetupAux1 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 15))
cpqCmcSetupAux2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 16))
cpqCmcSetupAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 17))
cpqCmcSetupAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 18))
cpqCmcSetupClock = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 3))
cpqCmcSetupThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2))
cpqCmcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 3))
cpqCmcValues = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 3))
cpqCmcStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4))
cpqCmcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5))
cpqCmcLog = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6))
cpqCmcMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcMibRevMajor.setDescription('The Major Revision level. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information, correct interpretation of data may require a MIB document with the same major revision level.')
cpqCmcMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcMibRevMinor.setDescription('The Minor Revision level. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqCmcMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcMibCondition.setDescription('The overall condition (status) of the system (rack(s)) represented by this MIB. (2) OK (3) a minor problem, warning condition (yellow LED on CMC) (4) a major problem (red LED on CMC)')
cpqCmcOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcOsCommonPollFreq.setDescription("The Insight Agent's polling frequency. The frequency, in seconds, at which the Insight Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval.")
cpqCmcDeviceCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("overloadDC", 3), ("fuseDC", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcDeviceCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcDeviceCondition.setDescription('Condition of CMC device, (3) an overload of the 24V DC supply to the connected accessories occurred (4) the overload-protection (fuse) has released ')
cpqCmcsetLanguage = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("english", 2), ("french", 3), ("italian", 4), ("german", 5), ("spanish", 6), ("dutch", 7), ("japanese", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcsetLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcsetLanguage.setDescription('Language of LCD')
cpqCmcsetTempUnit = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("celsius", 2), ("fahrenheit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcsetTempUnit.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcsetTempUnit.setDescription('Unit of all temperature values and thresholds, Celsius or Fahrenheit')
cpqCmcsetAudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enableSilence", 2), ("disableSilence", 3), ("off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcsetAudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcsetAudibleAlarm.setDescription('Audible alarm in CMC unit: (2): silencing with button on CMC is enabled (3): silencing with button on CMC is disabled (4): audible alarm is off (general). On/off of audible alarm for each event is possible in cpqCmcsetupEvents-group')
cpqCmcPassword = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcPassword.setDescription('Password to get access to terminal or LCD')
cpqCmcPasswordOption = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcPasswordOption.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcPasswordOption.setDescription('Enable or disable password entry to get access to terminal or LCD')
cpqCmcquitRelay1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcquitRelay1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcquitRelay1.setDescription("Enable or disable acknowledging currently active alarm relay 1 (with 'ENTER' on CMC).")
cpqCmcquitRelay2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcquitRelay2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcquitRelay2.setDescription("Enable or disable acknowledging currently active alarm relay 2 (with 'ENTER' on CMC).")
cpqCmclogicRelay1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("closeAtAlarm", 2), ("openAtAlarm", 3), ("closeAtEPO", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmclogicRelay1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmclogicRelay1.setDescription('Logic of Relay 1: (2) Relay will pick up in case of an alarm (3) Relay will release in case of an alarm (4) not used')
cpqCmclogicRelay2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("closeAtAlarm", 2), ("openAtAlarm", 3), ("closeAtEPO", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmclogicRelay2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmclogicRelay2.setDescription('Logic of Relay 2: (2) Relay will pick up in case of an alarm (3) Relay will release in case of an alarm (4) not used')
cpqCmcSetupTemp1Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp1Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp1Avail.setDescription('Temperature sensor: (2) sensor available (3) sensor not available')
cpqCmcSetupTemp1RelaysWarn = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp1RelaysWarn.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp1RelaysWarn.setDescription('Alert handling of Alarm Relays in case of warning condition of temperature sensor 1: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupTemp1RelaysMax = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp1RelaysMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp1RelaysMax.setDescription('Alert handling of Alarm Relays in case of max. alarm condition of temperature sensor 1: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupTemp1RelaysMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp1RelaysMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp1RelaysMin.setDescription('Alert handling of Alarm Relays in case of min. alarm condition of temperature sensor 1: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupTemp1AudibleAlarmWarn = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp1AudibleAlarmWarn.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp1AudibleAlarmWarn.setDescription('Alert handling of Audible Alarm of in case of warning condition of temperature sensor 1: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupTemp1AudibleAlarmMax = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp1AudibleAlarmMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp1AudibleAlarmMax.setDescription('Alert handling of Audible Alarm of in case of max. alarm condition of temperature sensor 1: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupTemp1AudibleAlarmMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp1AudibleAlarmMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp1AudibleAlarmMin.setDescription('Alert handling of Audible Alarm of in case of min. alarm condition of temperature sensor 1: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupTemp2Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp2Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp2Avail.setDescription('Temperature sensor: (2) sensor available (3) sensor not available')
cpqCmcSetupTemp2RelaysWarn = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp2RelaysWarn.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp2RelaysWarn.setDescription('Alert handling of Alarm Relays in case of warning condition of temperature sensor 2: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupTemp2RelaysMax = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp2RelaysMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp2RelaysMax.setDescription('Alert handling of Alarm Relays in case of max. alarm condition of temperature sensor 2: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupTemp2RelaysMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp2RelaysMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp2RelaysMin.setDescription('Alert handling of Alarm Relays in case of min. alarm condition of temperature sensor 2: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupTemp2AudibleAlarmWarn = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp2AudibleAlarmWarn.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp2AudibleAlarmWarn.setDescription('Alert handling of Audible Alarm of in case of warning condition of temperature sensor 2: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupTemp2AudibleAlarmMax = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp2AudibleAlarmMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp2AudibleAlarmMax.setDescription('Alert handling of Audible Alarm of in case of max. alarm condition of temperature sensor 2: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupTemp2AudibleAlarmMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTemp2AudibleAlarmMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTemp2AudibleAlarmMin.setDescription('Alert handling of Audible Alarm of in case of min. alarm condition of temperature sensor 2: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupFan1Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupFan1Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupFan1Avail.setDescription('Fan 1: (2) Fan 1 available (3) Fan 1 not available')
cpqCmcSetupFan1Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupFan1Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupFan1Relays.setDescription('Alert handling of Alarm Relays in case of alarm condition of Fan 1: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupFan1AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupFan1AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupFan1AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of alarm condition of Fan 1: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupFan2Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupFan2Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupFan2Avail.setDescription('Fan 2: (2) Fan 2 available (3) Fan 2 not available')
cpqCmcSetupFan2Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupFan2Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupFan2Relays.setDescription('Alert handling of Alarm Relays in case of alarm condition of Fan 2: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupFan2AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupFan2AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupFan2AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of alarm condition of Fan 2: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupVoltageAvail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupVoltageAvail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupVoltageAvail.setDescription('Voltage monitoring: (2) available (3) not available')
cpqCmcSetupVoltageRelaysMax = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupVoltageRelaysMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupVoltageRelaysMax.setDescription('Alert handling of Alarm Relays in case of max. alarm condition of voltage monitoring: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupVoltageRelaysMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupVoltageRelaysMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupVoltageRelaysMin.setDescription('Alert handling of Alarm Relays in case of min. alarm condition of voltage monitoring: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupVoltageAudibleAlarmMax = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupVoltageAudibleAlarmMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupVoltageAudibleAlarmMax.setDescription('Alert handling of Audible Alarm of in case of max. alarm condition of voltage monitoring: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupVoltageAudibleAlarmMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupVoltageAudibleAlarmMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupVoltageAudibleAlarmMin.setDescription('Alert handling of Audible Alarm of in case of min. alarm condition of voltage monitoring: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupHumidityAvail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupHumidityAvail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupHumidityAvail.setDescription('Humidity sensor: (2) available (3) not available')
cpqCmcSetupHumidityRelaysMax = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupHumidityRelaysMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupHumidityRelaysMax.setDescription('Alert handling of Alarm Relays in case of max. alarm condition of humidity monitoring: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupHumidityRelaysMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupHumidityRelaysMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupHumidityRelaysMin.setDescription('Alert handling of Alarm Relays in case of min. alarm condition of humidity monitoring: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupHumidityAudibleAlarmMax = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupHumidityAudibleAlarmMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupHumidityAudibleAlarmMax.setDescription('Alert handling of Audible Alarm of in case of max. alarm condition of humidity monitoring: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupHumidityAudibleAlarmMin = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupHumidityAudibleAlarmMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupHumidityAudibleAlarmMin.setDescription('Alert handling of Audible Alarm of in case of min. alarm condition of humidity monitoring: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupInput1Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput1Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput1Avail.setDescription('Input 1 sensor: (2) available (3) not available')
cpqCmcSetupInput1Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput1Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput1Relays.setDescription('Alert handling of Alarm Relays in case of a warning condition of Input 1 (Door/Sidewall open): (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupInput1AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput1AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput1AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of a warning condition of Input 1 (Door/Sidewall open): (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupInput1FansOff = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("both", 2), ("fan1", 3), ("fan2", 4), ("noFan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput1FansOff.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput1FansOff.setDescription('Fan switching off if Door/Sidewall 1 is opened: (2) both fans would be switched off (3) only fan1 will be switched off (4) only fan2 will be switched off (5) no fan will be switched off')
cpqCmcSetupInput1ShockSensor = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput1ShockSensor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput1ShockSensor.setDescription('Shock sensor function if Door/Sidewall 1 is opened: (2) Shock Sensor is off (disabled) (3) Shock Sensor is on (enabled)')
cpqCmcSetupInput1Description = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput1Description.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput1Description.setDescription('Descriptional text of Input1')
cpqCmcSetupInput1Lock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("lock1", 3), ("lock2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput1Lock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput1Lock.setDescription('Door/Sidewall 1 is locked by: (2) no locking device (3) locking device 1 (4) locking device 2 (5) both locking devices')
cpqCmcSetupInput2Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput2Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput2Avail.setDescription('Input 2 sensor: (2) available (3) not available')
cpqCmcSetupInput2Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput2Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput2Relays.setDescription('Alert handling of Alarm Relays in case of a warning condition of Input 2 (Door/Sidewall open): (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupInput2AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput2AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput2AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of a warning condition of Input 2 (Door/Sidewall open): (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupInput2FansOff = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("both", 2), ("fan1", 3), ("fan2", 4), ("noFan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput2FansOff.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput2FansOff.setDescription('Fan switching off if Door/Sidewall 2 is opened: (2) both fans would be switched off (3) only fan1 will be switched off (4) only fan2 will be switched off (5) no fan will be switched off')
cpqCmcSetupInput2ShockSensor = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput2ShockSensor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput2ShockSensor.setDescription('Shock sensor function if Door/Sidewall 2 is opened: (2) Shock Sensor is off (disabled) (3) Shock Sensor is on (enabled)')
cpqCmcSetupInput2Description = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput2Description.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput2Description.setDescription('Descriptional text of Input2')
cpqCmcSetupInput2Lock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("lock1", 3), ("lock2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput2Lock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput2Lock.setDescription('Door/Sidewall 2 is locked by: (2) no locking device (3) locking device 1 (4) locking device 2 (5) both locking devices')
cpqCmcSetupInput3Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput3Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput3Avail.setDescription('Input 3 sensor: (2) available (3) not available')
cpqCmcSetupInput3Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput3Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput3Relays.setDescription('Alert handling of Alarm Relays in case of a warning condition of Input 3 (Door/Sidewall open): (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupInput3AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput3AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput3AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of a warning condition of Input 3 (Door/Sidewall open): (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupInput3FansOff = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("both", 2), ("fan1", 3), ("fan2", 4), ("noFan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput3FansOff.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput3FansOff.setDescription('Fan switching off if Door/Sidewall 3 is opened: (2) both fans would be switched off (3) only fan1 will be switched off (4) only fan2 will be switched off (5) no fan will be switched off')
cpqCmcSetupInput3ShockSensor = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput3ShockSensor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput3ShockSensor.setDescription('Shock sensor function if Door/Sidewall 3 is opened: (2) Shock Sensor is off (disabled) (3) Shock Sensor is on (enabled)')
cpqCmcSetupInput3Description = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput3Description.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput3Description.setDescription('Descriptional text of Input3')
cpqCmcSetupInput3Lock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("lock1", 3), ("lock2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput3Lock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput3Lock.setDescription('Door/Sidewall 3 is locked by: (2) no locking device (3) locking device 1 (4) locking device 2 (5) both locking devices')
cpqCmcSetupInput4Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput4Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput4Avail.setDescription('Input 4 sensor: (2) available (3) not available')
cpqCmcSetupInput4Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput4Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput4Relays.setDescription('Alert handling of Alarm Relays in case of a warning condition of Input 4 (Door/Sidewall open): (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupInput4AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput4AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput4AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of a warning condition of Input 4 (Door/Sidewall open): (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupInput4FansOff = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("both", 2), ("fan1", 3), ("fan2", 4), ("noFan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput4FansOff.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput4FansOff.setDescription('Fan switching off if Door/Sidewall 4 is opened: (2) both fans would be switched off (3) only fan1 will be switched off (4) only fan2 will be switched off (5) no fan will be switched off')
cpqCmcSetupInput4ShockSensor = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput4ShockSensor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput4ShockSensor.setDescription('Shock sensor function if Door/Sidewall 4 is opened: (2) Shock Sensor is off (disabled) (3) Shock Sensor is on (enabled)')
cpqCmcSetupInput4Description = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 10, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput4Description.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput4Description.setDescription('Descriptional text of Input4')
cpqCmcSetupInput4Lock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("lock1", 3), ("lock2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupInput4Lock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupInput4Lock.setDescription('Door/Sidewall 4 is locked by: (2) no locking device (3) locking device 1 (4) locking device 2 (5) both locking devices')
cpqCmcSetupLock1Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1Avail.setDescription('Door locking device 1: (2) device available (3) device not available, no alarm, if door is not locked')
cpqCmcSetupLock1Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1Relays.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Lock 1 (door not locked..): (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupLock1RelaysDevice = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1RelaysDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1RelaysDevice.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Locking device 1 (power fail, low battery...): (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupLock1AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Lock 1: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupLock1AudibleAlarmDevice = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1AudibleAlarmDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1AudibleAlarmDevice.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Locking device 1 (power fail, low battery..): (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupLock1Time = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1Time.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1Time.setDescription('Time in seconds while the lock 1 is unlocked after getting an unlock-command')
cpqCmcSetupLock1PwrFailUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("auto", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1PwrFailUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1PwrFailUnlock.setDescription('Unlock door in case of power fail of locking device: (2) disabled (3) auto unlock the door (4) unlock door with remote signal')
cpqCmcSetupLock1BattLowUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("auto", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1BattLowUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1BattLowUnlock.setDescription('Unlock door in case of low battery of locking device: (2) disabled (3) auto unlock the door (4) unlock door with remote signal')
cpqCmcSetupLock1NetFailUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("auto", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1NetFailUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1NetFailUnlock.setDescription('Unlock door in case of network failure: (2) disabled (3) auto unlock the door (4) unlock door with remote signal')
cpqCmcSetupLock1LifeFailUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("auto", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock1LifeFailUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock1LifeFailUnlock.setDescription('Unlock door in case of lifecheck failure (connection CMC<->locking device): (2) disabled (3) auto unlock the door (4) unlock door with remote signal')
cpqCmcSetupLock2Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2Avail.setDescription('Door locking device 2: (2) device available (3) device not available, no alarm, if door is not locked')
cpqCmcSetupLock2Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2Relays.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Lock 2 (door not locked..): (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupLock2RelaysDevice = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2RelaysDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2RelaysDevice.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Locking device 2 (power fail, low battery...): (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupLock2AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Lock 2: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupLock2AudibleAlarmDevice = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2AudibleAlarmDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2AudibleAlarmDevice.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Locking device 2 (power fail, low battery..): (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupLock2Time = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2Time.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2Time.setDescription('Time in seconds while the lock 2 is unlocked after getting an unlock-command')
cpqCmcSetupLock2PwrFailUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("auto", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2PwrFailUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2PwrFailUnlock.setDescription('Unlock door in case of power fail of locking device: (2) disabled (3) auto unlock the door (4) unlock door with remote signal')
cpqCmcSetupLock2BattLowUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("auto", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2BattLowUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2BattLowUnlock.setDescription('Unlock door in case of low battery of locking device: (2) disabled (3) auto unlock the door (4) unlock door with remote signal')
cpqCmcSetupLock2NetFailUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("auto", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2NetFailUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2NetFailUnlock.setDescription('Unlock door in case of network failure: (2) disabled (3) auto unlock the door (4) unlock door with remote signal')
cpqCmcSetupLock2LifeFailUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("auto", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupLock2LifeFailUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupLock2LifeFailUnlock.setDescription('Unlock door in case of lifecheck failure (connection CMC<->locking device): (2) disabled (3) auto unlock the door (4) unlock door with remote signal')
cpqCmcSetupSmokeAvail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupSmokeAvail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupSmokeAvail.setDescription('Smoke sensor: (2) available (3) not available')
cpqCmcSetupSmokeRelays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupSmokeRelays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupSmokeRelays.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Smoke Sensor: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupSmokeAudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupSmokeAudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupSmokeAudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Smoke Sensor: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupSmokeFansOff = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("both", 2), ("fan1", 3), ("fan2", 4), ("noFan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupSmokeFansOff.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupSmokeFansOff.setDescription('Fan switching off if in case of smoke-alarm: (2) both fans would be switched off (3) only fan1 will be switched off (4) only fan2 will be switched off (5) no fan will be switched off')
cpqCmcSetupSmokeUnlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("both", 2), ("lock1", 3), ("lock2", 4), ("noLock", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupSmokeUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupSmokeUnlock.setDescription('Lock is unlocked in case of smoke-alarm: (2) both locks will be unlocked (3) only lock1 will be unlocked (4) only lock2 will be unlocked (5) no lock will be unlocked')
cpqCmcSetupShockAvail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupShockAvail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupShockAvail.setDescription('Shock sensor: (2) available (3) not available')
cpqCmcSetupShockRelays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupShockRelays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupShockRelays.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Shock Sensor: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupShockAudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupShockAudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupShockAudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Shock Sensor: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupShockSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupShockSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupShockSensitivity.setDescription('Sensitivity of shock-sensor. 1 = low sensitivity, 10 = high sensitivity')
cpqCmcSetupAux1Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux1Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux1Avail.setDescription('Aux 1 sensor: (2) available (3) not available')
cpqCmcSetupAux1Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux1Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux1Relays.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Aux 1: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupAux1AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux1AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux1AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Aux 1: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupAux1InputType = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normOpen", 2), ("normClosed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux1InputType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux1InputType.setDescription('Type of other digital input (used for any digital signal): (2) contact is normally open, no alarm if contact is open, alarm if contact is closed (3) contact is normally closed, no alarm if contact is closed, alarm if contact is open')
cpqCmcSetupAux1Description = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux1Description.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux1Description.setDescription('Descriptional text of the digital input (Aux1) ')
cpqCmcSetupAux1Unlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noLock", 2), ("lock1", 3), ("lock2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux1Unlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux1Unlock.setDescription('Lock will be unlocked with Aux-Input 1: (2) no lock will be unlocked (3) only lock1 will be unlocked (4) only lock2 will be unlocked (5) both locks will be unlocked')
cpqCmcSetupAux2Avail = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux2Avail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux2Avail.setDescription('Aux 2 sensor: (2) available (3) not available')
cpqCmcSetupAux2Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux2Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux2Relays.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Aux 2: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupAux2AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux2AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux2AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Aux 2: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupAux2InputType = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normOpen", 2), ("normClosed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux2InputType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux2InputType.setDescription('Type of other digital input (used for any digital signal): (2) contact is normally open, no alarm if contact is open, alarm if contact is closed (3) contact is normally closed, no alarm if contact is closed, alarm if contact is open')
cpqCmcSetupAux2Description = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 16, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux2Description.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux2Description.setDescription('Descriptional text of the digital input (Aux2) ')
cpqCmcSetupAux2Unlock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noLock", 2), ("lock1", 3), ("lock2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAux2Unlock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAux2Unlock.setDescription('Lock will be unlocked with Aux-Input 2: (2) no lock will be unlocked (3) only lock1 will be unlocked (4) only lock2 will be unlocked (5) both locks will be unlocked')
cpqCmcSetupAlarm1Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAlarm1Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAlarm1Relays.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Alarm 1: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupAlarm1AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAlarm1AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAlarm1AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Alarm 1: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupAlarm1Description = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 17, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAlarm1Description.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAlarm1Description.setDescription('Descriptional text of alarm 1')
cpqCmcSetupAlarm2Relays = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("relay1", 3), ("relay2", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAlarm2Relays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAlarm2Relays.setDescription('Alert handling of Alarm Relays in case of an alarm condition of Alarm 2: (2) no switching of Relays (3) Relay 1 will switch (4) Relay 2 will switch (5) both Relays will switch')
cpqCmcSetupAlarm2AudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAlarm2AudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAlarm2AudibleAlarm.setDescription('Alert handling of Audible Alarm of in case of an alarm condition of Alarm 2: (2) Start Audible Alarm (3) No Audible Alarm')
cpqCmcSetupAlarm2Description = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 2, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupAlarm2Description.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupAlarm2Description.setDescription('Descriptional text of alarm 2')
cpqCmcSetupDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupDate.setDescription('actual Date in format DD.MM.YYYY')
cpqCmcSetupTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetupTime.setDescription('actual Time in format HH:MM:SS, HH (0-23), MM (0-59), SS (0-59)')
cpqCmcThresholdMaxTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdMaxTemp1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdMaxTemp1.setDescription('Threshold value maximum temperature 1')
cpqCmcThresholdWarningTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdWarningTemp1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdWarningTemp1.setDescription('Threshold value warning temperature 1')
cpqCmcThresholdMinTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdMinTemp1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdMinTemp1.setDescription('Threshold value minimum temperature 1')
cpqCmcThresholdMaxTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdMaxTemp2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdMaxTemp2.setDescription('Threshold value maximum temperature 2')
cpqCmcThresholdWarningTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdWarningTemp2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdWarningTemp2.setDescription('Threshold value warning temperature 2')
cpqCmcThresholdMinTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdMinTemp2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdMinTemp2.setDescription('Threshold value minimum temperature 2')
cpqCmcThresholdFan1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdFan1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdFan1.setDescription('Threshold Fan 1 in deg F or deg C, Fan 1 will start if temperature 1 exceeds this value')
cpqCmcThresholdFan1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdFan1Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdFan1Hysteresis.setDescription('Hystersis of Fan 1, Fan 1 will stop if temperature 1 falls below value of cpqCmcThresholdFan1 minus cpqCmcThresholdFan1Hysteresis')
cpqCmcThresholdFan2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdFan2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdFan2.setDescription('Threshold Fan 2 in deg F or deg C, Fan 2 will start if temperature 2 exceeds this value')
cpqCmcThresholdFan2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdFan2Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdFan2Hysteresis.setDescription('Hystersis of Fan 2, Fan 2 will stop if temperature 2 falls below value of cpqCmcThresholdFan2 minus cpqCmcThresholdFan2Hysteresis')
cpqCmcThresholdMaxVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdMaxVoltage.setDescription('Threshold high value Voltage alarm')
cpqCmcThresholdMinVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdMinVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdMinVoltage.setDescription('Threshold low value Voltage alarm')
cpqCmcThresholdMaxHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdMaxHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdMaxHumidity.setDescription('Threshold high value Humidity alarm')
cpqCmcThresholdMinHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcThresholdMinHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcThresholdMinHumidity.setDescription('Threshold low value Humidity alarm')
cpqCmcTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcTrapTableNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcTrapTableNumber.setDescription('Number of trapTable entries. The number of trap-receivers')
cpqCmcTrapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 3, 2), )
if mibBuilder.loadTexts: cpqCmcTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcTrapTable.setDescription('A list of trap-receiver entries')
cpqCmcTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 3, 2, 1), ).setIndexNames((0, "CPQCMC-MIB", "cpqCmcTrapIndex"))
if mibBuilder.loadTexts: cpqCmcTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcTrapEntry.setDescription('Entries of trapTable')
cpqCmcTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcTrapIndex.setDescription('Index for the trap-receiver-table. Its value ranges between 1 and the value of cpqCmcTrapTableNumber ')
cpqCmcTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcTrapStatus.setDescription('Enable or disable trap receiver')
cpqCmcTrapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcTrapIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcTrapIPaddress.setDescription('IP-address of trap-receiver')
cpqCmcValueTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcValueTemp1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcValueTemp1.setDescription('Actual temperature value of temperature sensor 1 in deg C or deg F')
cpqCmcValueTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcValueTemp2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcValueTemp2.setDescription('Actual temperature value of temperature sensor 2 in deg C or deg F')
cpqCmcValueVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcValueVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcValueVoltage.setDescription('Actual value of power supply (voltage monitoring and fans) in V')
cpqCmcValueHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcValueHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcValueHumidity.setDescription('Actual value of humidity 0..100%')
cpqCmcValueOperatingTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcValueOperatingTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcValueOperatingTime.setDescription('Operating time CMC-unit')
cpqCmcStatusTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("warning", 3), ("overMax", 4), ("underMin", 5), ("noSensor", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusTemp1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusTemp1.setDescription('The status of temperature 1, see thresholds of temperature 1: (2) temperature normal (3) temperature exceeds warning threshold (4) temperature exceeds max. threshold (5) temperature drops under min. threshold (6) no sensor connected, not available (7) error, sensor disconnected')
cpqCmcStatusTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("warning", 3), ("overMax", 4), ("underMin", 5), ("noSensor", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusTemp2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusTemp2.setDescription('The status of temperature 2, see thresholds of temperature 2: (2) temperature normal (3) temperature exceeds warning threshold (4) temperature exceeds max. threshold (5) temperature drops under min. threshold (6) no sensor connected, not available (7) error, sensor disconnected')
cpqCmcStatusFan1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("autoOff", 2), ("autoOn", 3), ("manualOff", 4), ("manualOn", 5), ("smokeOff", 6), ("doorOff", 7), ("noFan", 8), ("error", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusFan1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusFan1.setDescription('The status of fan 1: (2) fan is switched off by temperature sensor 1 (3) fan is switched on by temperature sensor 1 (4) fan is switched off by Manual Control (cpqCmcSetFan1) (5) fan is switched on by Manual Control (cpqCmcSetFan1) (6) fan is switched off because of smoke alarm (7) fan is switched off because door is open (8) no fan (9) fan error, current monitoring')
cpqCmcStatusFan2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("autoOff", 2), ("autoOn", 3), ("manualOff", 4), ("manualOn", 5), ("smokeOff", 6), ("doorOff", 7), ("noFan", 8), ("error", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusFan2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusFan2.setDescription('The status of fan 2: (2) fan is switched off by temperature sensor 2 (3) fan is switched on by temperature sensor 2 (4) fan is switched off by Manual Control (cpqCmcSetFan2) (5) fan is switched on by Manual Control (cpqCmcSetFan2) (6) fan is switched off because of smoke alarm (7) fan is switched off because door is open (8) no fan (9) fan error, current monitoring')
cpqCmcStatusVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("overMax", 3), ("underMin", 4), ("noVoltage", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusVoltage.setDescription('The voltage-status, see thresholds of power supply: (2) voltage normal (3) voltage exceeds max. threshold (4) voltage drops under min. threshold (5) no power connected')
cpqCmcStatusHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("overMax", 3), ("underMin", 4), ("noSensor", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusHumidity.setDescription('The humidity-status, see thresholds of humidity: (2) humidity normal (3) humidity exceeds max. threshold (4) humidity drops under min. threshold (5) no sensor connected, not available (6) error, sensor disconnected')
cpqCmcStatusInput1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("closed", 2), ("open", 3), ("noSensor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusInput1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusInput1.setDescription('The status of door/sidepanel 1, closed (2), open (3) or no sensor connected (4)')
cpqCmcStatusInput2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("closed", 2), ("open", 3), ("noSensor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusInput2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusInput2.setDescription('The status of door/sidepanel 2, closed (2), open (3) or no sensor connected (4)')
cpqCmcStatusInput3 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("closed", 2), ("open", 3), ("noSensor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusInput3.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusInput3.setDescription('The status of door/sidepanel 3, closed (2), open (3) or no sensor connected (4)')
cpqCmcStatusInput4 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("closed", 2), ("open", 3), ("noSensor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusInput4.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusInput4.setDescription('The status of door/sidepanel 4, closed (2), open (3) or no sensor connected (4)')
cpqCmcStatusLock1Lock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("locked", 2), ("unlockedAuto", 3), ("unlockedTime", 4), ("unlockedSmoke", 5), ("unlockedKey", 6), ("unlockedPwrFail", 7), ("unlockedBattLow", 8), ("unlockedNetFail", 9), ("unlockedConnFail", 10), ("readyToLock", 11), ("alarm", 12), ("configError", 13), ("notAvail", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusLock1Lock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusLock1Lock.setDescription('The status of door locking 1 (2) Door locking-device is activated, door is locked (3) Door locking-device is not activated, door is unlocked by Network Management (4) Door locking-device is not activated for x sec, time see cpqCmcSetupLock1Time, door is unlocked by Network Management (5) Door locking-device is not activated, door is unlocked because of Smoke alarm (6) Door is unlocked from remote-signal (7) Door locking-device is not activated, door is unlocked because of Power Fail of locking device (8) Door locking-device is not activated, door is unlocked because of low Battery of locking device (9) Door locking-device is not activated, door is unlocked because of Network Fail (10)Door locking-device is not activated, door is unlocked because of connection fail, no connection locking device <-> CMC (11)Door locking-device is ready to lock, lock will be activated after doors are closed (12)Door locking-device is activated but door is not locked, alarm (13)Configuration error, association door to locking-device missing (14)Lock not installed')
cpqCmcStatusLock2Lock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("locked", 2), ("unlockedAuto", 3), ("unlockedTime", 4), ("unlockedSmoke", 5), ("unlockedKey", 6), ("unlockedPwrFail", 7), ("unlockedBattLow", 8), ("unlockedNetFail", 9), ("unlockedConnFail", 10), ("readyToLock", 11), ("alarm", 12), ("configError", 13), ("notAvail", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusLock2Lock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusLock2Lock.setDescription('The status of door locking 2 (2) Door locking-device is activated, door is locked (3) Door locking-device is not activated, door is unlocked by Network Management (4) Door locking-device is not activated for x sec, time see cpqCmcSetupLock1Time, door is unlocked by Network Management (5) Door locking-device is not activated, door is unlocked because of Smoke alarm (6) Door is unlocked from remote-signal (7) Door locking-device is not activated, door is unlocked because of Power Fail of locking device (8) Door locking-device is not activated, door is unlocked because of low Battery of locking device (9) Door locking-device is not activated, door is unlocked because of Network Fail (10)Door locking-device is not activated, door is unlocked because of connection fail, no connection locking device <-> CMC (11)Door locking-device is ready to lock, lock will be activated after doors are closed (12)Door locking-device is activated but door is not locked, alarm (13)Configuration error, association door to locking-device missing (14)Lock not installed')
cpqCmcStatusSmoke = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cleared", 2), ("present", 3), ("noSensor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusSmoke.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusSmoke.setDescription('Status smoke-sensor, OK (2), smoke detected (3) or no sensor connected (4)')
cpqCmcStatusShock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cleared", 2), ("present", 3), ("noSensor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusShock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusShock.setDescription('Status Shock sensor, OK (2), shock detected (3) or no sensor connected (4)')
cpqCmcStatusAux1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("alarm", 3), ("noSensor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusAux1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusAux1.setDescription('Status aux. digital input')
cpqCmcStatusAux2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("alarm", 3), ("noSensor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusAux2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusAux2.setDescription('Status aux. digital input')
cpqCmcStatusAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusAlarm1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusAlarm1.setDescription('Status of alarm 1, see cmpCmcsetAlarm1. This alarm can be set from the Network management system. A descriptional text for this alarm can be set in cpqCmcSetupAlarm1Description.')
cpqCmcStatusAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusAlarm2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusAlarm2.setDescription('Status of alarm 2, see cmpCmcsetAlarm2. This alarm can be set from the Network management system. A descriptional text for this alarm can be set in cpqCmcSetupAlarm2Description.')
cpqCmcStatusLock1Dev = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("powerFail", 3), ("lowBattery", 4), ("replaceBatt", 5), ("missingBatt", 6), ("noConnect", 7), ("notAvail", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusLock1Dev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusLock1Dev.setDescription('The status of door-locking device 1 (2) OK (3) Power fail of door locking-device (4) Low Battery of door locking-device (5) Battery of door locking device needs to be replaced (6) Battery missing, insert all batteries (7) Connection CMC->door locking device lost (8) Lock not installed')
cpqCmcStatusLock2Dev = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("powerFail", 3), ("lowBattery", 4), ("replaceBatt", 5), ("missingBatt", 6), ("noConnect", 7), ("notAvail", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcStatusLock2Dev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusLock2Dev.setDescription('The status of door-locking device 2 (2) OK (3) Power fail of door locking-device (4) Low Battery of door locking-device (5) Battery of door locking device needs to be replaced (6) Battery missing, insert all batteries (6) Connection CMC->door locking device lost (7) Lock not installed')
cpqCmcStatusAccess = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcStatusAccess.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcStatusAccess.setDescription('Status access, for future use')
cpqCmcSetLock1Lock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("lockDoor", 2), ("openDoorTime", 3), ("openDoor", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetLock1Lock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetLock1Lock.setDescription('Set door locking device 1, see table With this command the management-station can set the conditions for the door locking device (2) Door will be locked (3) Door will be unlocked for a defined time, time can be changed, see cpqCmcSetupLock1Time (4) Door is generally unlocked Locking and unlocking with this command can not be enabled or disabled with cpqCmcSetLock1Key-command')
cpqCmcSetLock1Key = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enableBoth", 3), ("enableKeypad", 4), ("enableRemoteInput", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetLock1Key.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetLock1Key.setDescription('Enable or disable unlocking of the rack-door with external components like keypad or remote input. With this command the management station can set the conditions for unlocking the door: (2) unlocking is disabled, no unlocking with keypad or remote input (3) unlocking with keypad or remote signal (both) is enabled (4) unlocking with keypad (only) is enabled (5) unlocking with remote input (only) is enabled Unlocking door with the cpqCmcSetLock1Lock-command does not depend on this variable')
cpqCmcSetLock2Lock = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("lockDoor", 2), ("openDoorTime", 3), ("openDoor", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetLock2Lock.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetLock2Lock.setDescription('Set door locking device 2, see table With this command the management-station can set the conditions for the door locking device (2) Door will be locked (3) Door will be unlocked for a defined time, time can be changed, see cpqCmcSetupLock2Time (4) Door is generally unlocked Locking and unlocking with this command can not be enabled or disabled with cpqCmcSetLock2Key-command')
cpqCmcSetLock2Key = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enableBoth", 3), ("enableKeypad", 4), ("enableRemoteInput", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetLock2Key.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetLock2Key.setDescription('Enable or disable unlocking of the rack-door with external components like keypad or remote input. With this command the management-station can set the conditions for unlocking the door: (2) unlocking is disabled, no unlocking with keypad or remote input (3) unlocking with keypad or remote signal (both) is enabled (4) unlocking with keypad (only) is enabled (5) unlocking with remote input (only) is enabled Unlocking door with the cpqCmcSetDoor2-command does not depend on this variable')
cpqCmcSetMessage = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetMessage.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetMessage.setDescription('Set message to CMC, for future use')
cpqCmcSetAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clearAlarm", 2), ("setAlarm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetAlarm1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetAlarm1.setDescription('Is used to set an alarm in the CMC from the management-station. With this command the management-station can i.e. switch on an alarm-relay or the AudibleAlarm of the CMC. Can be used for alert-handling')
cpqCmcSetAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clearAlarm", 2), ("setAlarm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetAlarm2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetAlarm2.setDescription('Is used to set an alarm in the CMC from the management-station. With this command the management-station can i.e. switch on an alarm-relay or the AudibleAlarm of the CMC. Can be used for alert-handling')
cpqCmcSetFan1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("on", 3), ("off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetFan1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetFan1.setDescription('Is used for run and stop control of fan1. (2) fan will run and stop according to temperature of sensor 1 and threshold of fan1 (3) fan will run independent of temperature and threshold (4) fan will stop independent of temperature and threshold (3) and (4) can be used for alert handling.')
cpqCmcSetFan2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("on", 3), ("off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetFan2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetFan2.setDescription('Is used for run and stop control of fan2. (2) fan will run and stop according to temperature of sensor 2 and threshold of fan2 (3) fan will run independent of temperature and threshold (4) fan will stop independent of temperature and threshold (3) and (4) can be used for alert handling')
cpqCmcSetQuitRelay1 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("switched", 2), ("notSwitched", 3), ("quit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetQuitRelay1.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetQuitRelay1.setDescription('Status and quit of alarm relay 1. (2) relay is switched because of an alarm (3) relay is not switched, no alarm (4) (set) will quit relay 1 in case of alarm')
cpqCmcSetQuitRelay2 = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("switched", 2), ("notSwitched", 3), ("quit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCmcSetQuitRelay2.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcSetQuitRelay2.setDescription('Status and quit of alarm relay 2. (2) relay is switched because of an alarm (3) relay is not switched, no alarm (4) (set) will quit relay 2 in case of alarm')
cpqCmcLogsNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcLogsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcLogsNumber.setDescription('Number of Log-entries')
cpqCmcLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6, 2), )
if mibBuilder.loadTexts: cpqCmcLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcLogTable.setDescription('Log-table')
cpqCmcLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6, 2, 1), ).setIndexNames((0, "CPQCMC-MIB", "cpqCmcLogIndex"))
if mibBuilder.loadTexts: cpqCmcLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcLogEntry.setDescription('Log-table entries')
cpqCmcLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcLogIndex.setDescription('Index for the Log-table. Its value ranges between 1 and the value of cpqCmcLogsNumber ')
cpqCmcLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcLogDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcLogDate.setDescription('Date of log information. ')
cpqCmcLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcLogTime.setDescription('Time of log information. ')
cpqCmcLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcLogText.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcLogText.setDescription('Log information. ')
cpqCmcLogClass = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 153, 2, 2, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCmcLogClass.setStatus('mandatory')
if mibBuilder.loadTexts: cpqCmcLogClass.setDescription('Status of log information. ')
cpqCmcalarmTemp1 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153001)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusTemp1"))
if mibBuilder.loadTexts: cpqCmcalarmTemp1.setDescription('The temperature at rack sensor 1 is outside the specified threshold. Action: Check the air handling system for the rack and refer to Trap Details for more information.')
cpqCmcalarmTemp2 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153002)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusTemp2"))
if mibBuilder.loadTexts: cpqCmcalarmTemp2.setDescription('The temperature at rack sensor 2 is outside the specified threshold. Action: Check the air handling system for the rack and refer to Trap Details for more information.')
cpqCmcalarmFan1 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153003)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusFan1"))
if mibBuilder.loadTexts: cpqCmcalarmFan1.setDescription('The status of Fan 1 has changed. Action: Refer to Trap Details for more information.')
cpqCmcalarmFan2 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153004)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusFan2"))
if mibBuilder.loadTexts: cpqCmcalarmFan2.setDescription('The status of Fan 2 has changed. Action: Refer to Trap Details for more information.')
cpqCmcalarmVoltage = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153005)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusVoltage"))
if mibBuilder.loadTexts: cpqCmcalarmVoltage.setDescription('The AC voltage of the rack is outside the specified threshold. Action: Check the incoming power source and ensure all cables are inserted correctly.')
cpqCmcalarmHumidity = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153006)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusHumidity"))
if mibBuilder.loadTexts: cpqCmcalarmHumidity.setDescription('The humidity of the rack is outside the specified threshold. Action: Check the air handling system for the rack and refer to Trap Details for more information.')
cpqCmcalarmInput1 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153007)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusInput1"))
if mibBuilder.loadTexts: cpqCmcalarmInput1.setDescription('The door or sidepanel of the rack has been opened (access point #1). Action: Check for unauthorized intrusion and refer to Trap Details for more information.')
cpqCmcalarmInput2 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153008)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusInput2"))
if mibBuilder.loadTexts: cpqCmcalarmInput2.setDescription('The door or sidepanel of the rack has been opened (access point #2). Action: Check for unauthorized intrusion and refer to Trap Details for more information.')
cpqCmcalarmInput3 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153009)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusInput3"))
if mibBuilder.loadTexts: cpqCmcalarmInput3.setDescription('The door or sidepanel of the rack has been opened (access point #3). Action: Check for unauthorized intrusion and refer to Trap Details for more information.')
cpqCmcalarmInput4 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153010)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusInput4"))
if mibBuilder.loadTexts: cpqCmcalarmInput4.setDescription('The door or sidepanel of the rack has been opened (access point #4). Action: Check for unauthorized intrusion and refer to Trap Details for more information.')
cpqCmcalarmLock1 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153011)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusLock1Lock"))
if mibBuilder.loadTexts: cpqCmcalarmLock1.setDescription('Rack door lock #1 alarm. Action: Ensure the door is completely closed and check for unauthorized intrusion and refer to Trap Details for more information.')
cpqCmcalarmLock2 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153012)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusLock2Lock"))
if mibBuilder.loadTexts: cpqCmcalarmLock2.setDescription('Rack door lock #2 alarm. Action: Ensure the door is completely closed and check for unauthorized intrusion and refer to Trap Details for more information.')
cpqCmcalarmSmoke = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153013)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusSmoke"))
if mibBuilder.loadTexts: cpqCmcalarmSmoke.setDescription('The rack smoke detector has detected smoke. Action: Investigate rack for an over temperature condition and refer to Trap Details for more information.')
cpqCmcalarmShock = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153014)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusShock"))
if mibBuilder.loadTexts: cpqCmcalarmShock.setDescription('The rack shock detector has detected a vibration to the rack. Action: Investigate rack.')
cpqCmcalarmAux1 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153015)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusAux1"))
if mibBuilder.loadTexts: cpqCmcalarmAux1.setDescription('The rack auxiliary alarm input #1 has been triggered.')
cpqCmcalarmAux2 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153016)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusAux2"))
if mibBuilder.loadTexts: cpqCmcalarmAux2.setDescription('The rack auxiliary alarm input #2 has been triggered.')
cpqCmcalarm1 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153017)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusAlarm1"))
if mibBuilder.loadTexts: cpqCmcalarm1.setDescription('Alarm 1, set from Network management')
cpqCmcalarm2 = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153018)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusAlarm2"))
if mibBuilder.loadTexts: cpqCmcalarm2.setDescription('Alarm 2, set from Network management')
cpqCmcalarmLock1Dev = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153019)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusLock1Dev"))
if mibBuilder.loadTexts: cpqCmcalarmLock1Dev.setDescription('The rack door locking device #1 has failed. Action: Check the device lock cable or failed battery and refer to Trap Details for more information.')
cpqCmcalarmLock2Dev = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153020)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQCMC-MIB", "cpqCmcStatusLock2Dev"))
if mibBuilder.loadTexts: cpqCmcalarmLock2Dev.setDescription('The rack door locking device #2 has failed. Action: Check the device lock cable or failed battery and refer to Trap Details for more information.')
cpqCmcSetupChanged = NotificationType((1, 3, 6, 1, 4, 1, 232, 153) + (0,153100)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: cpqCmcSetupChanged.setDescription('Setup of CMC has changed.')
mibBuilder.exportSymbols("CPQCMC-MIB", cpqCmcSetupFan2Avail=cpqCmcSetupFan2Avail, cpqCmcsetLanguage=cpqCmcsetLanguage, cpqCmcquitRelay2=cpqCmcquitRelay2, cpqCmcSetupLock2LifeFailUnlock=cpqCmcSetupLock2LifeFailUnlock, cpqCmcLogTime=cpqCmcLogTime, cpqCmcSetupInput3Lock=cpqCmcSetupInput3Lock, cpqCmcLogsNumber=cpqCmcLogsNumber, cpqCmcMibRev=cpqCmcMibRev, cpqCmclogicRelay1=cpqCmclogicRelay1, cpqCmcSetupInput3Description=cpqCmcSetupInput3Description, cpqCmcSetupFan1=cpqCmcSetupFan1, cpqCmcStatusShock=cpqCmcStatusShock, cpqCmcSetupInput1FansOff=cpqCmcSetupInput1FansOff, cpqCmcSetupAlarm2=cpqCmcSetupAlarm2, cpqCmcStatus=cpqCmcStatus, cpqCmcSetupInput4ShockSensor=cpqCmcSetupInput4ShockSensor, cpqCmcSetupLock1Time=cpqCmcSetupLock1Time, cpqCmcComponent=cpqCmcComponent, cpqCmcSetupHumidityRelaysMin=cpqCmcSetupHumidityRelaysMin, cpqCmcSetupInput3AudibleAlarm=cpqCmcSetupInput3AudibleAlarm, cpqCmcThresholdMaxTemp1=cpqCmcThresholdMaxTemp1, cpqCmcSetupInput2Description=cpqCmcSetupInput2Description, cpqCmcSetupInput1Avail=cpqCmcSetupInput1Avail, cpqCmcSetupInput3ShockSensor=cpqCmcSetupInput3ShockSensor, cpqCmcalarm2=cpqCmcalarm2, cpqCmcSetupAux1Unlock=cpqCmcSetupAux1Unlock, cpqCmcSetupAux1Relays=cpqCmcSetupAux1Relays, cpqCmcSetupChanged=cpqCmcSetupChanged, cpqCmcStatusLock1Dev=cpqCmcStatusLock1Dev, cpqCmcValueTemp1=cpqCmcValueTemp1, cpqCmcSetupHumidityAudibleAlarmMin=cpqCmcSetupHumidityAudibleAlarmMin, cpqCmcSetupTemp2AudibleAlarmMax=cpqCmcSetupTemp2AudibleAlarmMax, cpqCmcSetupAlarm1AudibleAlarm=cpqCmcSetupAlarm1AudibleAlarm, cpqCmcSetupInput4FansOff=cpqCmcSetupInput4FansOff, cpqCmcTrapEntry=cpqCmcTrapEntry, cpqCmcSetupLock1LifeFailUnlock=cpqCmcSetupLock1LifeFailUnlock, cpqCmcStatusHumidity=cpqCmcStatusHumidity, cpqCmcSetupFan1Avail=cpqCmcSetupFan1Avail, cpqCmcStatusInput4=cpqCmcStatusInput4, cpqCmcThresholdFan1Hysteresis=cpqCmcThresholdFan1Hysteresis, cpqCmcSetupAlarm1=cpqCmcSetupAlarm1, cpqCmcSetupSmokeUnlock=cpqCmcSetupSmokeUnlock, cpqCmcTrapIndex=cpqCmcTrapIndex, cpqCmcalarmTemp2=cpqCmcalarmTemp2, cpqCmcThresholdWarningTemp2=cpqCmcThresholdWarningTemp2, cpqCmcStatusAccess=cpqCmcStatusAccess, cpqCmcalarm1=cpqCmcalarm1, cpqCmcsetAudibleAlarm=cpqCmcsetAudibleAlarm, cpqCmcInterface=cpqCmcInterface, cpqCmcPassword=cpqCmcPassword, cpqCmcSetupInput1ShockSensor=cpqCmcSetupInput1ShockSensor, cpqCmcSetupFan2AudibleAlarm=cpqCmcSetupFan2AudibleAlarm, cpqCmcSetupThreshold=cpqCmcSetupThreshold, cpqCmcSetupTemp2AudibleAlarmWarn=cpqCmcSetupTemp2AudibleAlarmWarn, cpqCmcSetupInput2Relays=cpqCmcSetupInput2Relays, cpqCmcStatusTemp2=cpqCmcStatusTemp2, cpqCmcSetLock2Key=cpqCmcSetLock2Key, cpqCmcalarmInput4=cpqCmcalarmInput4, cpqCmcSetupAlarm2AudibleAlarm=cpqCmcSetupAlarm2AudibleAlarm, cpqCmcSetupAux2InputType=cpqCmcSetupAux2InputType, cpqCmcalarmLock2=cpqCmcalarmLock2, cpqCmcSetupSmoke=cpqCmcSetupSmoke, cpqCmcSetupAlarm2Description=cpqCmcSetupAlarm2Description, cpqCmcSetupLock1=cpqCmcSetupLock1, cpqCmcSetupVoltageAvail=cpqCmcSetupVoltageAvail, cpqCmcSetupLock1BattLowUnlock=cpqCmcSetupLock1BattLowUnlock, cpqCmcalarmLock1Dev=cpqCmcalarmLock1Dev, cpqCmcSetupSmokeFansOff=cpqCmcSetupSmokeFansOff, cpqCmcSetupInput1=cpqCmcSetupInput1, cpqCmcSetupLock1RelaysDevice=cpqCmcSetupLock1RelaysDevice, cpqCmcStatusInput2=cpqCmcStatusInput2, cpqCmcSetLock1Key=cpqCmcSetLock1Key, cpqCmcSetQuitRelay1=cpqCmcSetQuitRelay1, cpqCmcControl=cpqCmcControl, cpqCmcSetupVoltage=cpqCmcSetupVoltage, cpqCmcSetupInput4Lock=cpqCmcSetupInput4Lock, cpqCmcSetupInput4Avail=cpqCmcSetupInput4Avail, cpqCmcSetupLock1Relays=cpqCmcSetupLock1Relays, cpqCmcSetupLock2Relays=cpqCmcSetupLock2Relays, cpqCmcValueHumidity=cpqCmcValueHumidity, cpqCmcStatusInput3=cpqCmcStatusInput3, cpqCmcSetupLock1NetFailUnlock=cpqCmcSetupLock1NetFailUnlock, cpqCmcSetupVoltageRelaysMax=cpqCmcSetupVoltageRelaysMax, cpqCmcThresholdFan1=cpqCmcThresholdFan1, cpqCmcSetupShockSensitivity=cpqCmcSetupShockSensitivity, cpqCmcStatusAlarm2=cpqCmcStatusAlarm2, cpqCmcSetupAux1AudibleAlarm=cpqCmcSetupAux1AudibleAlarm, cpqCmcalarmLock1=cpqCmcalarmLock1, cpqCmcSetupTemp2RelaysWarn=cpqCmcSetupTemp2RelaysWarn, cpqCmcSetQuitRelay2=cpqCmcSetQuitRelay2, cpqCmcValueOperatingTime=cpqCmcValueOperatingTime, cpqCmcalarmSmoke=cpqCmcalarmSmoke, cpqCmcSetupTemp1RelaysWarn=cpqCmcSetupTemp1RelaysWarn, cpqCmcThresholdWarningTemp1=cpqCmcThresholdWarningTemp1, cpqCmcSetupInput1Relays=cpqCmcSetupInput1Relays, cpqCmcLogText=cpqCmcLogText, cpqCmcLogClass=cpqCmcLogClass, cpqCmcSetupTemp1=cpqCmcSetupTemp1, cpqCmcThresholdMaxVoltage=cpqCmcThresholdMaxVoltage, cpqCmcSetupLock2AudibleAlarm=cpqCmcSetupLock2AudibleAlarm, cpqCmcThresholdFan2=cpqCmcThresholdFan2, cpqCmcSetupTemp2AudibleAlarmMin=cpqCmcSetupTemp2AudibleAlarmMin, cpqCmcStatusTemp1=cpqCmcStatusTemp1, cpqCmcSetupLock2RelaysDevice=cpqCmcSetupLock2RelaysDevice, cpqCmcSetupAlarm2Relays=cpqCmcSetupAlarm2Relays, cpqCmcSetupHumidity=cpqCmcSetupHumidity, cpqCmcSetupClock=cpqCmcSetupClock, cpqCmcalarmFan1=cpqCmcalarmFan1, cpqCmcDeviceCondition=cpqCmcDeviceCondition, cpqCmcPasswordOption=cpqCmcPasswordOption, cpqCmcStatusSmoke=cpqCmcStatusSmoke, cpqCmcSetupTemp2RelaysMin=cpqCmcSetupTemp2RelaysMin, cpqCmcSetupEvents=cpqCmcSetupEvents, cpqCmcSetupAux2Relays=cpqCmcSetupAux2Relays, cpqCmcSetFan2=cpqCmcSetFan2, cpqCmcSetupSmokeAvail=cpqCmcSetupSmokeAvail, cpqCmcSetupAux1InputType=cpqCmcSetupAux1InputType, cpqCmcLogTable=cpqCmcLogTable, cpqCmcThresholdMinTemp1=cpqCmcThresholdMinTemp1, cpqCmcSetupTemp1AudibleAlarmMin=cpqCmcSetupTemp1AudibleAlarmMin, cpqCmcOsCommon=cpqCmcOsCommon, cpqCmcStatusFan2=cpqCmcStatusFan2, cpqCmcalarmHumidity=cpqCmcalarmHumidity, cpqCmcSetupTemp1AudibleAlarmMax=cpqCmcSetupTemp1AudibleAlarmMax, cpqCmcSetupInput4=cpqCmcSetupInput4, cpqCmcStatusAlarm1=cpqCmcStatusAlarm1, cpqCmcSetupLock2=cpqCmcSetupLock2, cpqCmcThresholdMinHumidity=cpqCmcThresholdMinHumidity, cpqCmcLog=cpqCmcLog, cpqCmcsetTempUnit=cpqCmcsetTempUnit, cpqCmcSetupFan2=cpqCmcSetupFan2, cpqCmcSetupHumidityAudibleAlarmMax=cpqCmcSetupHumidityAudibleAlarmMax, cpqCmcalarmFan2=cpqCmcalarmFan2, cpqCmcSetupInput3=cpqCmcSetupInput3, cpqCmcSetupTemp1RelaysMax=cpqCmcSetupTemp1RelaysMax, cpqCmcalarmInput1=cpqCmcalarmInput1, cpqCmcSetupHumidityAvail=cpqCmcSetupHumidityAvail, cpqCmcSetupLock2AudibleAlarmDevice=cpqCmcSetupLock2AudibleAlarmDevice, cpqCmcStatusLock2Dev=cpqCmcStatusLock2Dev, cpqCmcStatusLock1Lock=cpqCmcStatusLock1Lock, cpqCmcSetupInput2FansOff=cpqCmcSetupInput2FansOff, cpqCmcSetupAux2Avail=cpqCmcSetupAux2Avail, cpqCmcSetupVoltageRelaysMin=cpqCmcSetupVoltageRelaysMin, cpqCmcSetupSmokeRelays=cpqCmcSetupSmokeRelays, cpqCmcSetupLock1AudibleAlarm=cpqCmcSetupLock1AudibleAlarm, cpqCmcThresholdMaxHumidity=cpqCmcThresholdMaxHumidity, cpqCmcSetupTemp1RelaysMin=cpqCmcSetupTemp1RelaysMin, cpqCmcLogIndex=cpqCmcLogIndex, cpqCmcSetupLock2Avail=cpqCmcSetupLock2Avail, cpqCmcSetupInput4Relays=cpqCmcSetupInput4Relays, cpqCmcValues=cpqCmcValues, cpqCmcSetupAux1Avail=cpqCmcSetupAux1Avail, cpqCmcSetLock2Lock=cpqCmcSetLock2Lock, cpqCmcSetMessage=cpqCmcSetMessage, cpqCmcTrapTableNumber=cpqCmcTrapTableNumber, cpqCmcSetupSmokeAudibleAlarm=cpqCmcSetupSmokeAudibleAlarm, cpqCmcSetupDate=cpqCmcSetupDate, cpqCmcLogDate=cpqCmcLogDate, cpqCmcSetupInput2=cpqCmcSetupInput2, cpqCmcSetupVoltageAudibleAlarmMin=cpqCmcSetupVoltageAudibleAlarmMin, cpqCmcSetupTemp2Avail=cpqCmcSetupTemp2Avail, cpqCmc=cpqCmc, cpqCmcSetupAlarm1Relays=cpqCmcSetupAlarm1Relays, cpqCmcThresholdFan2Hysteresis=cpqCmcThresholdFan2Hysteresis, cpqCmcSetupTemp1Avail=cpqCmcSetupTemp1Avail, cpqCmcStatusVoltage=cpqCmcStatusVoltage, cpqCmcSetAlarm1=cpqCmcSetAlarm1, cpqCmcOsCommonPollFreq=cpqCmcOsCommonPollFreq, cpqCmcSetupHumidityRelaysMax=cpqCmcSetupHumidityRelaysMax, cpqCmcSetupTime=cpqCmcSetupTime, cpqCmcThresholdMaxTemp2=cpqCmcThresholdMaxTemp2, cpqCmcTrapTable=cpqCmcTrapTable, cpqCmcStatusLock2Lock=cpqCmcStatusLock2Lock, cpqCmcMibRevMajor=cpqCmcMibRevMajor, cpqCmcSetupInput2Lock=cpqCmcSetupInput2Lock, cpqCmcSetupInput2Avail=cpqCmcSetupInput2Avail, cpqCmcSetupShock=cpqCmcSetupShock, cpqCmcSetupAlarm1Description=cpqCmcSetupAlarm1Description, cpqCmcSetupTemp1AudibleAlarmWarn=cpqCmcSetupTemp1AudibleAlarmWarn, cpqCmcSetFan1=cpqCmcSetFan1, cpqCmcSetupConfig=cpqCmcSetupConfig, cpqCmcSetupInput3FansOff=cpqCmcSetupInput3FansOff, cpqCmcTrapStatus=cpqCmcTrapStatus, cpqCmcquitRelay1=cpqCmcquitRelay1, cpqCmcalarmInput2=cpqCmcalarmInput2, cpqCmcSetupShockAudibleAlarm=cpqCmcSetupShockAudibleAlarm, cpqCmcSetupTemp2=cpqCmcSetupTemp2, cpqCmcSetupLock2Time=cpqCmcSetupLock2Time, cpqCmcSetupTemp2RelaysMax=cpqCmcSetupTemp2RelaysMax, cpqCmcSetupAux2Unlock=cpqCmcSetupAux2Unlock, cpqCmcThresholdMinVoltage=cpqCmcThresholdMinVoltage, cpqCmcSetupInput1Lock=cpqCmcSetupInput1Lock, cpqCmcSetupInput2ShockSensor=cpqCmcSetupInput2ShockSensor, cpqCmcSetupInput3Avail=cpqCmcSetupInput3Avail, cpqCmcSetupAux2Description=cpqCmcSetupAux2Description, cpqCmcSetupLock2NetFailUnlock=cpqCmcSetupLock2NetFailUnlock, cpqCmcValueTemp2=cpqCmcValueTemp2, cpqCmcLogEntry=cpqCmcLogEntry, cpqCmcSetupGeneral=cpqCmcSetupGeneral, cpqCmcSetupFan2Relays=cpqCmcSetupFan2Relays, cpqCmcSetupInput1AudibleAlarm=cpqCmcSetupInput1AudibleAlarm, cpqCmcThresholdMinTemp2=cpqCmcThresholdMinTemp2, cpqCmcSetupAux2=cpqCmcSetupAux2, cpqCmcSetupInput4Description=cpqCmcSetupInput4Description, cpqCmcSetupAux1Description=cpqCmcSetupAux1Description, cpqCmcMibCondition=cpqCmcMibCondition, cpqCmcValueVoltage=cpqCmcValueVoltage, cpqCmcSetupInput1Description=cpqCmcSetupInput1Description, cpqCmcSetupLock1Avail=cpqCmcSetupLock1Avail, cpqCmcSetupFan1AudibleAlarm=cpqCmcSetupFan1AudibleAlarm, cpqCmcSetupShockAvail=cpqCmcSetupShockAvail, cpqCmcStatusAux1=cpqCmcStatusAux1, cpqCmcSetLock1Lock=cpqCmcSetLock1Lock, cpqCmcalarmTemp1=cpqCmcalarmTemp1, cpqCmcalarmShock=cpqCmcalarmShock, cpqCmcSetupShockRelays=cpqCmcSetupShockRelays, cpqCmcStatusInput1=cpqCmcStatusInput1, cpqCmcSetupLock2BattLowUnlock=cpqCmcSetupLock2BattLowUnlock, cpqCmcSetupLock2PwrFailUnlock=cpqCmcSetupLock2PwrFailUnlock, cpqCmcSetupVoltageAudibleAlarmMax=cpqCmcSetupVoltageAudibleAlarmMax, cpqCmcSetupAux2AudibleAlarm=cpqCmcSetupAux2AudibleAlarm, cpqCmcStatusFan1=cpqCmcStatusFan1, cpqCmcSetupFan1Relays=cpqCmcSetupFan1Relays, cpqCmcSetup=cpqCmcSetup, cpqCmcDevice=cpqCmcDevice, cpqCmcalarmInput3=cpqCmcalarmInput3, cpqCmcMibRevMinor=cpqCmcMibRevMinor, cpqCmcSetAlarm2=cpqCmcSetAlarm2, cpqCmcalarmVoltage=cpqCmcalarmVoltage, cpqCmcSetupAux1=cpqCmcSetupAux1, cpqCmcSetupInput2AudibleAlarm=cpqCmcSetupInput2AudibleAlarm, cpqCmcSetupLock1PwrFailUnlock=cpqCmcSetupLock1PwrFailUnlock, cpqCmcalarmAux2=cpqCmcalarmAux2, cpqCmcalarmLock2Dev=cpqCmcalarmLock2Dev, cpqCmcalarmAux1=cpqCmcalarmAux1, cpqCmcStatusAux2=cpqCmcStatusAux2, cpqCmcSetupInput3Relays=cpqCmcSetupInput3Relays, cpqCmcSetupLock1AudibleAlarmDevice=cpqCmcSetupLock1AudibleAlarmDevice, cpqCmcTrapIPaddress=cpqCmcTrapIPaddress, cpqCmcTraps=cpqCmcTraps, cpqCmclogicRelay2=cpqCmclogicRelay2, cpqCmcSetupInput4AudibleAlarm=cpqCmcSetupInput4AudibleAlarm)
