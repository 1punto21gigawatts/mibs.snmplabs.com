#
# PySNMP MIB module MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:14:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, MibIdentifier, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, IpAddress, Integer32, ObjectIdentity, TimeTicks, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "MibIdentifier", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "IpAddress", "Integer32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp")
mpls = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 2))
mpls.setRevisions(('2009-02-23 14:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mpls.setRevisionsDescriptions(('Second revision; Deprecated mplsLspList, mplsLspEntry and all objects in that SEQUENCE. Introduced new table mplsLspInfoList, mplsLspInfoEntry to support LSP names greater than 32 characters',))
if mibBuilder.loadTexts: mpls.setLastUpdated('200902231445Z')
if mibBuilder.loadTexts: mpls.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: mpls.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: mpls.setDescription('The MIB module for Multi-Protocol Label Switched Paths.')
mplsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 2, 1))
mplsVersion = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVersion.setStatus('current')
if mibBuilder.loadTexts: mplsVersion.setDescription('MPLS version number.')
mplsSignalingProto = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("rsvp", 3), ("ldp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsSignalingProto.setStatus('current')
if mibBuilder.loadTexts: mplsSignalingProto.setDescription('MPLS signaling protocol.')
mplsConfiguredLsps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsConfiguredLsps.setStatus('current')
if mibBuilder.loadTexts: mplsConfiguredLsps.setDescription('Number of configured LSPs.')
mplsActiveLsps = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsActiveLsps.setStatus('current')
if mibBuilder.loadTexts: mplsActiveLsps.setDescription('Number of active LSPs.')
mplsTEInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 2, 2))
mplsTEDistProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("isis", 2), ("ospf", 3), ("isis-ospf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTEDistProtocol.setStatus('current')
if mibBuilder.loadTexts: mplsTEDistProtocol.setDescription('IGP used to distribute Traffic Engineering information and topology to each LSR for the purpose of automatic path computation.')
mplsAdminGroupList = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 2, 2, 2), )
if mibBuilder.loadTexts: mplsAdminGroupList.setStatus('current')
if mibBuilder.loadTexts: mplsAdminGroupList.setDescription('List of configured administrative groups. Administrative groups are used to label links in the Traffic Engineering topology in order to place constraints (include and exclude) on LSP paths.')
mplsAdminGroup = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 2, 2, 2, 1), ).setIndexNames((0, "MPLS-MIB", "mplsAdminGroupNumber"))
if mibBuilder.loadTexts: mplsAdminGroup.setStatus('current')
if mibBuilder.loadTexts: mplsAdminGroup.setDescription('A mapping between a configured group number and its human-readable name. The group number should be between 0 and 31, inclusive.')
mplsAdminGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAdminGroupNumber.setStatus('current')
if mibBuilder.loadTexts: mplsAdminGroupNumber.setDescription('Index of the administrative group.')
mplsAdminGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAdminGroupName.setStatus('current')
if mibBuilder.loadTexts: mplsAdminGroupName.setDescription('Name of the administrative group.')
mplsLspList = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3), )
if mibBuilder.loadTexts: mplsLspList.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspList.setDescription('******* Deprecated Object ****** List of Configured Label Switched Paths. This object has been deprecated and replaced by mplsLspInfoList')
mplsLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1), ).setIndexNames((0, "MPLS-MIB", "mplsLspName"))
if mibBuilder.loadTexts: mplsLspEntry.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspEntry.setDescription('******* Deprecated Object ****** Entry containing information about a particular Label Switched Path. This object has been deprecated and replaced by mplsLspInfoEntry')
mplsLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspName.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspName.setDescription('******* Deprecated Object ****** Name of the Label Switched Path. This object has been deprecated and replaced by mplsLspInfoName')
mplsLspState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("notInService", 4), ("backupActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspState.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspState.setDescription('The operational state of the LSP.')
mplsLspOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspOctets.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspOctets.setDescription('The number of octets that have been forwarded over current LSP active path. The number reported is not realtime, may subject to several minutes delay. The delay is controllable by mpls statistics gathering interval, which by default is once every 5 minutes. If mpls statistics gathering is not enabled, this number will not increment.')
mplsLspPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPackets.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspPackets.setDescription('The number of packets that have been forwarded over current LSP active path. The number reported is not realtime, may subject to several minutes delay. The delay is controllable by mpls statistics gathering interval, which by default is once every 5 minutes. If mpls statistics gathering is not enabled, this number will not increment.')
mplsLspAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspAge.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspAge.setDescription('The age (i.e., time from creation till now) of this LSP in 10-millisecond periods.')
mplsLspTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspTimeUp.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspTimeUp.setDescription('The total time in 10-millisecond units that this LSP has been operational. For example, the percentage up time can be determined by computing (mplsLspTimeUp/mplsLspAge * 100 %).')
mplsLspPrimaryTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPrimaryTimeUp.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspPrimaryTimeUp.setDescription("The total time in 10-millisecond units that this LSP's primary path has been operational. For example, the percentage contribution of the primary path to the operational time is given by (mplsLspPrimaryTimeUp/mplsLspTimeUp * 100) %.")
mplsLspTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspTransitions.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspTransitions.setDescription('The number of state transitions (up -> down and down -> up) this LSP has undergone.')
mplsLspLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspLastTransition.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspLastTransition.setDescription('The time in 10-millisecond units since the last transition occurred on this LSP.')
mplsLspPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPathChanges.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspPathChanges.setDescription('The number of path changes this LSP has had. For every path change (path down, path up, path change), a corresponding syslog/trap (if enabled) is generated for it.')
mplsLspLastPathChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspLastPathChange.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspLastPathChange.setDescription('The time in 10-millisecond units since the last change occurred on this LSP.')
mplsLspConfiguredPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspConfiguredPaths.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspConfiguredPaths.setDescription('The number of paths configured for this LSP.')
mplsLspStandbyPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspStandbyPaths.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspStandbyPaths.setDescription('The number of standby paths configured for this LSP.')
mplsLspOperationalPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspOperationalPaths.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspOperationalPaths.setDescription('The number of operational paths for this LSP. This includes the path currently active, as well as operational standby paths.')
mplsLspFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrom.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspFrom.setDescription('Source IP address of this LSP.')
mplsLspTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspTo.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspTo.setDescription('Destination IP address of this LSP.')
mplsPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathName.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathName.setDescription('The name of the active path for this LSP, if any. If there is none, the name should be empty; in that case, the rest of the fields in mplsLspEntry are meaningless.')
mplsPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("standby", 3), ("secondary", 4), ("bypass", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathType.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathType.setDescription('The type of path that is active, i.e., a primary path, a standby path, a generic secondary path, or a bypass path. The value other, primary, standby and secondary apply to data LSPs, and are meaningful only if mplsPathName is not empty. The value bypass applies to bypass tunnels. A bypass tunnel may have an empty mplsPathName.')
mplsPathExplicitRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathExplicitRoute.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathExplicitRoute.setDescription('The explicit route used to set up this LSP. This may either be the route configured by the user, or a route automatically computed to satisfy constraints set by the user. This field is a displayable string in the format of XXX.XXX.XXX.XXX <space> S/L <newline> repeated for each explicit address. The S/L character stands for Strict/Loose route. This field is meaningless unless mplsPathName is not empty')
mplsPathRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathRecordRoute.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathRecordRoute.setDescription('The route actually used for this path, as recorded by the signaling protocol. This field is a displayable string in the format of XXX.XXX.XXX.XXX <space> repeated for each address. This field is meaningless unless mplsPathName is not empty')
mplsPathBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathBandwidth.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathBandwidth.setDescription('The configured bandwidth for this LSP, in units of thousands of bits per second (Kbps). This field is meaningless unless mplsPathName is not empty')
mplsPathCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathCOS.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathCOS.setDescription('The configured Class Of Service on this path. If the value is between 0 and 7 inclusive, this value will be inserted in the 3 bit COS field in the label. If the value is 255, the value in the COS field of the label will depend on other factors. This field is meaningless unless mplsPathName is not empty')
mplsPathInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInclude.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathInclude.setDescription("This is a configured set of colors (administrative groups) specified as a bit vector (i.e., bit n is 1 if color n is in the set, where n = 0 is the LSB). For each link that this path goes through, the link MUST have colors associated with it, and the intersection of the link's colors and the 'include' set MUST be non-null. This field is meaningless unless mplsPathName is not empty")
mplsPathExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathExclude.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathExclude.setDescription("This is a configured set of colors (administrative groups) specified as a bit vector (i.e., bit n is 1 if color n is in the set, where n = 0 is the LSB). For each link that this path goes through, the link MUST have colors associated with it, and the intersection of the link's colors and the 'exclude' set MUST be null. This field is meaningless unless mplsPathName is not empty")
mplsPathSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathSetupPriority.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathSetupPriority.setDescription('The setup priority configured for this path. This field is meaningless unless mplsPathName is not empty')
mplsPathHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathHoldPriority.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathHoldPriority.setDescription('The hold priority configured for this path. This field is meaningless unless mplsPathName is not empty')
mplsPathProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("record-route", 1), ("adaptive", 2), ("cspf", 4), ("mergeable", 8), ("preemptable", 16), ("preemptive", 32), ("fast-reroute", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathProperties.setStatus('deprecated')
if mibBuilder.loadTexts: mplsPathProperties.setDescription('The set of configured properties for this path, expressed as a bit map. For example, if the path is an adaptive path, the bit corresponding to bit value xxx is set. This field is meaningless unless mplsPathName is not empty')
mplsLspInfoList = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5), )
if mibBuilder.loadTexts: mplsLspInfoList.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoList.setDescription('List of Configured Label Switched Paths.')
mplsLspInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1), ).setIndexNames((1, "MPLS-MIB", "mplsLspInfoName"))
if mibBuilder.loadTexts: mplsLspInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoEntry.setDescription('Entry containing information about a particular Label Switched Path.')
mplsLspInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mplsLspInfoName.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoName.setDescription('Name of the Label Switched Path.')
mplsLspInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("notInService", 4), ("backupActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoState.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoState.setDescription('The operational state of the LSP.')
mplsLspInfoOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoOctets.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoOctets.setDescription('The number of octets that have been forwarded over current LSP active path. The number reported is not realtime, may subject to several minutes delay. The delay is controllable by mpls statistics gathering interval, which by default is once every 5 minutes. If mpls statistics gathering is not enabled, this number will not increment.')
mplsLspInfoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoPackets.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoPackets.setDescription('The number of packets that have been forwarded over current LSP active path. The number reported is not realtime, may subject to several minutes delay. The delay is controllable by mpls statistics gathering interval, which by default is once every 5 minutes. If mpls statistics gathering is not enabled, this number will not increment.')
mplsLspInfoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoAge.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoAge.setDescription('The age (i.e., time from creation till now) of this LSP in 10-millisecond periods.')
mplsLspInfoTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoTimeUp.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoTimeUp.setDescription('The total time in 10-millisecond units that this LSP has been operational. For example, the percentage up time can be determined by computing (mplsLspInfoTimeUp/mplsLspInfoAge * 100 %).')
mplsLspInfoPrimaryTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoPrimaryTimeUp.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoPrimaryTimeUp.setDescription("The total time in 10-millisecond units that this LSP's primary path has been operational. For example, the percentage contribution of the primary path to the operational time is given by (mplsLspInfoPrimaryTimeUp/mplsLspInfoTimeUp * 100) %.")
mplsLspInfoTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoTransitions.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoTransitions.setDescription('The number of state transitions (up -> down and down -> up) this LSP has undergone.')
mplsLspInfoLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoLastTransition.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoLastTransition.setDescription('The time in 10-millisecond units since the last transition occurred on this LSP.')
mplsLspInfoPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoPathChanges.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoPathChanges.setDescription('The number of path changes this LSP has had. For every path change (path down, path up, path change), a corresponding syslog/trap (if enabled) is generated for it.')
mplsLspInfoLastPathChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoLastPathChange.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoLastPathChange.setDescription('The time in 10-millisecond units since the last change occurred on this LSP.')
mplsLspInfoConfiguredPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoConfiguredPaths.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoConfiguredPaths.setDescription('The number of paths configured for this LSP.')
mplsLspInfoStandbyPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoStandbyPaths.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoStandbyPaths.setDescription('The number of standby paths configured for this LSP.')
mplsLspInfoOperationalPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoOperationalPaths.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoOperationalPaths.setDescription('The number of operational paths for this LSP. This includes the path currently active, as well as operational standby paths.')
mplsLspInfoFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoFrom.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoFrom.setDescription('Source IP address of this LSP.')
mplsLspInfoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoTo.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoTo.setDescription('Destination IP address of this LSP.')
mplsPathInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoName.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoName.setDescription('The name of the active path for this LSP, if any. If there is none, the name should be empty; in that case, the rest of the fields in mplsLspInfoEntry are meaningless.')
mplsPathInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("standby", 3), ("secondary", 4), ("bypass", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoType.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoType.setDescription('The type of path that is active, i.e., a primary path, a standby path, a generic secondary path, or a bypass path. The value other, primary, standby and secondary apply to data LSPs, and are meaningful only if mplsPathInfoName is not empty. The value bypass applies to bypass tunnels. A bypass tunnel may have an empty mplsPathInfoName.')
mplsPathInfoExplicitRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoExplicitRoute.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoExplicitRoute.setDescription('The explicit route used to set up this LSP. This may either be the route configured by the user, or a route automatically computed to satisfy constraints set by the user. This field is a displayable string in the format of XXX.XXX.XXX.XXX <space> S/L <newline> repeated for each explicit address. The S/L character stands for Strict/Loose route. This field is meaningless unless mplsPathInfoName is not empty')
mplsPathInfoRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoRecordRoute.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoRecordRoute.setDescription('The route actually used for this path, as recorded by the signaling protocol. This field is a displayable string in the format of XXX.XXX.XXX.XXX <space> repeated for each address. This field is meaningless unless mplsPathInfoName is not empty')
mplsPathInfoBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoBandwidth.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoBandwidth.setDescription('The configured bandwidth for this LSP, in units of thousands of bits per second (Kbps). This field is meaningless unless mplsPathInfoName is not empty')
mplsPathInfoCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoCOS.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoCOS.setDescription('The configured Class Of Service on this path. If the value is between 0 and 7 inclusive, this value will be inserted in the 3 bit COS field in the label. If the value is 255, the value in the COS field of the label will depend on other factors. This field is meaningless unless mplsPathInfoName is not empty')
mplsPathInfoInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoInclude.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoInclude.setDescription("This is a configured set of colors (administrative groups) specified as a bit vector (i.e., bit n is 1 if color n is in the set, where n = 0 is the LSB). For each link that this path goes through, the link MUST have colors associated with it, and the intersection of the link's colors and the 'include' set MUST be non-null. This field is meaningless unless mplsPathInfoName is not empty")
mplsPathInfoExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoExclude.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoExclude.setDescription("This is a configured set of colors (administrative groups) specified as a bit vector (i.e., bit n is 1 if color n is in the set, where n = 0 is the LSB). For each link that this path goes through, the link MUST have colors associated with it, and the intersection of the link's colors and the 'exclude' set MUST be null. This field is meaningless unless mplsPathInfoName is not empty")
mplsPathInfoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoSetupPriority.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoSetupPriority.setDescription('The setup priority configured for this path. This field is meaningless unless mplsPathInfoName is not empty')
mplsPathInfoHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoHoldPriority.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoHoldPriority.setDescription('The hold priority configured for this path. This field is meaningless unless mplsPathInfoName is not empty')
mplsPathInfoProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("record-route", 1), ("adaptive", 2), ("cspf", 4), ("mergeable", 8), ("preemptable", 16), ("preemptive", 32), ("fast-reroute", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoProperties.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoProperties.setDescription('The set of configured properties for this path, expressed as a bit map. For example, if the path is an adaptive path, the bit corresponding to bit value xxx is set. This field is meaningless unless mplsPathInfoName is not empty')
mplsLspInfoAggrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoAggrOctets.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoAggrOctets.setDescription('The number of octets that have beeen forwarded over current LSP. This is an aggregate count of octets forwarded over all LSP instances from the time LSP was up. The number reported is not realtime, may be subject to several minutes delay. The delay is controllable by mpls statistics gathering interval, which by default is once every 5 minutes. If mpls statistics gathering is not enabled, this number will not increment.')
mplsLspInfoAggrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspInfoAggrPackets.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoAggrPackets.setDescription('The number of packets that have been forwarded over current LSP. This is an aggregate count of packets forwarded over all LSP instances from the time LSP was up. The number reported is not realtime, may be subject to several minutes delay. The delay is controllable by mpls statistics gathering interval, which by default is once every 5 minutes. If mpls statistics gathering is not enabled, this number will not increment.')
mplsPathInfoRecordRouteWithLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 2, 5, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsPathInfoRecordRouteWithLabels.setStatus('current')
if mibBuilder.loadTexts: mplsPathInfoRecordRouteWithLabels.setDescription('The route actually used for this path, as recorded by the signaling protocol. This field is a displayable string in the format of XXX.XXX.XXX.XXX <flag/label> <space> repeated for each address. This field is meaningless unless mplsPathInfoName is not empty')
mplsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 2, 4))
mplsLspUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 4, 1)).setObjects(("MPLS-MIB", "mplsLspName"), ("MPLS-MIB", "mplsPathName"))
if mibBuilder.loadTexts: mplsLspUp.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspUp.setDescription('An mplsLspUp trap signifies that the specified LSP is up. The current active path for the LSP is mplsPathName.')
mplsLspDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 4, 2)).setObjects(("MPLS-MIB", "mplsLspName"), ("MPLS-MIB", "mplsPathName"))
if mibBuilder.loadTexts: mplsLspDown.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspDown.setDescription('An mplsLspDown trap signifies that the specified LSP is down, because the current active path mplsPathName went down.')
mplsLspChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 4, 3)).setObjects(("MPLS-MIB", "mplsLspName"), ("MPLS-MIB", "mplsPathName"))
if mibBuilder.loadTexts: mplsLspChange.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspChange.setDescription("An mplsLspChange trap signifies that the the specified LSP has switched traffic to the new active path 'toLspPath'. The LSP maintains up state before and after the switch over")
mplsLspPathDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 4, 4)).setObjects(("MPLS-MIB", "mplsLspName"), ("MPLS-MIB", "mplsPathName"))
if mibBuilder.loadTexts: mplsLspPathDown.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspPathDown.setDescription('An mplsLspPathDown trap signifies that the specified path mplsPathName for the specified LSP mplsLspName went down')
mplsLspPathUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 4, 5)).setObjects(("MPLS-MIB", "mplsLspName"), ("MPLS-MIB", "mplsPathName"))
if mibBuilder.loadTexts: mplsLspPathUp.setStatus('deprecated')
if mibBuilder.loadTexts: mplsLspPathUp.setDescription('An mplsLspPathUp trap signifies that the specified path mplsPathName for the specified LSP mplsLspName came up')
mplsLspTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 2, 0))
mplsLspInfoUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 0, 1)).setObjects(("MPLS-MIB", "mplsLspInfoName"), ("MPLS-MIB", "mplsPathInfoName"))
if mibBuilder.loadTexts: mplsLspInfoUp.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoUp.setDescription('An mplsLspInfoUp trap signifies that the specified LSP is up. The current active path for the LSP is mplsPathInfoName.')
mplsLspInfoDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 0, 2)).setObjects(("MPLS-MIB", "mplsLspInfoName"), ("MPLS-MIB", "mplsPathInfoName"))
if mibBuilder.loadTexts: mplsLspInfoDown.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoDown.setDescription('An mplsLspInfoDown trap signifies that the specified LSP is down, because the current active path mplsPathInfoName went down.')
mplsLspInfoChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 0, 3)).setObjects(("MPLS-MIB", "mplsLspInfoName"), ("MPLS-MIB", "mplsPathInfoName"))
if mibBuilder.loadTexts: mplsLspInfoChange.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoChange.setDescription("An mplsLspInfoChange trap signifies that the the specified LSP has switched traffic to the new active path 'toLspPath'. The LSP maintains up state before and after the switch over")
mplsLspInfoPathDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 0, 4)).setObjects(("MPLS-MIB", "mplsLspInfoName"), ("MPLS-MIB", "mplsPathInfoName"))
if mibBuilder.loadTexts: mplsLspInfoPathDown.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoPathDown.setDescription('An mplsLspInfoPathDown trap signifies that the specified path mplsPathName for the specified LSP mplsLspInfoName went down')
mplsLspInfoPathUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 2, 0, 5)).setObjects(("MPLS-MIB", "mplsLspInfoName"), ("MPLS-MIB", "mplsPathInfoName"))
if mibBuilder.loadTexts: mplsLspInfoPathUp.setStatus('current')
if mibBuilder.loadTexts: mplsLspInfoPathUp.setDescription('An mplsLspInfoPathUp trap signifies that the specified path mplsPathName for the specified LSP mplsLspInfoName came up')
mibBuilder.exportSymbols("MPLS-MIB", mplsPathInfoProperties=mplsPathInfoProperties, mplsLspList=mplsLspList, mplsPathInclude=mplsPathInclude, mplsLspInfoPathChanges=mplsLspInfoPathChanges, mplsPathExclude=mplsPathExclude, mplsLspState=mplsLspState, mplsLspDown=mplsLspDown, mpls=mpls, mplsLspUp=mplsLspUp, mplsTEDistProtocol=mplsTEDistProtocol, mplsLspPathChanges=mplsLspPathChanges, mplsPathType=mplsPathType, mplsLspInfoPrimaryTimeUp=mplsLspInfoPrimaryTimeUp, mplsLspConfiguredPaths=mplsLspConfiguredPaths, mplsLspInfoState=mplsLspInfoState, mplsPathInfoRecordRouteWithLabels=mplsPathInfoRecordRouteWithLabels, mplsPathExplicitRoute=mplsPathExplicitRoute, mplsLspLastPathChange=mplsLspLastPathChange, mplsLspInfoTimeUp=mplsLspInfoTimeUp, mplsLspInfoConfiguredPaths=mplsLspInfoConfiguredPaths, mplsLspChange=mplsLspChange, mplsTEInfo=mplsTEInfo, mplsPathProperties=mplsPathProperties, mplsPathName=mplsPathName, mplsLspAge=mplsLspAge, mplsPathCOS=mplsPathCOS, mplsLspInfoStandbyPaths=mplsLspInfoStandbyPaths, PYSNMP_MODULE_ID=mpls, mplsLspInfoAggrOctets=mplsLspInfoAggrOctets, mplsPathHoldPriority=mplsPathHoldPriority, mplsPathInfoCOS=mplsPathInfoCOS, mplsPathInfoName=mplsPathInfoName, mplsLspInfoAge=mplsLspInfoAge, mplsLspName=mplsLspName, mplsLspInfoLastTransition=mplsLspInfoLastTransition, mplsLspInfoChange=mplsLspInfoChange, mplsPathInfoExclude=mplsPathInfoExclude, mplsLspInfoPathDown=mplsLspInfoPathDown, mplsPathBandwidth=mplsPathBandwidth, mplsLspTimeUp=mplsLspTimeUp, mplsLspInfoTo=mplsLspInfoTo, mplsLspInfoLastPathChange=mplsLspInfoLastPathChange, mplsLspPathDown=mplsLspPathDown, mplsLspInfoUp=mplsLspInfoUp, mplsPathInfoType=mplsPathInfoType, mplsPathInfoHoldPriority=mplsPathInfoHoldPriority, mplsAdminGroup=mplsAdminGroup, mplsLspPackets=mplsLspPackets, mplsSignalingProto=mplsSignalingProto, mplsLspStandbyPaths=mplsLspStandbyPaths, mplsPathSetupPriority=mplsPathSetupPriority, mplsLspInfoName=mplsLspInfoName, mplsAdminGroupNumber=mplsAdminGroupNumber, mplsInfo=mplsInfo, mplsPathInfoBandwidth=mplsPathInfoBandwidth, mplsPathRecordRoute=mplsPathRecordRoute, mplsPathInfoExplicitRoute=mplsPathInfoExplicitRoute, mplsLspOperationalPaths=mplsLspOperationalPaths, mplsLspInfoTransitions=mplsLspInfoTransitions, mplsLspInfoEntry=mplsLspInfoEntry, mplsLspFrom=mplsLspFrom, mplsPathInfoInclude=mplsPathInfoInclude, mplsAdminGroupList=mplsAdminGroupList, mplsLspInfoList=mplsLspInfoList, mplsLspInfoOperationalPaths=mplsLspInfoOperationalPaths, mplsLspPrimaryTimeUp=mplsLspPrimaryTimeUp, mplsActiveLsps=mplsActiveLsps, mplsLspPathUp=mplsLspPathUp, mplsLspLastTransition=mplsLspLastTransition, mplsPathInfoRecordRoute=mplsPathInfoRecordRoute, mplsLspInfoAggrPackets=mplsLspInfoAggrPackets, mplsAdminGroupName=mplsAdminGroupName, mplsLspInfoOctets=mplsLspInfoOctets, mplsTraps=mplsTraps, mplsLspTransitions=mplsLspTransitions, mplsLspTraps=mplsLspTraps, mplsVersion=mplsVersion, mplsLspOctets=mplsLspOctets, mplsLspInfoDown=mplsLspInfoDown, mplsLspInfoFrom=mplsLspInfoFrom, mplsPathInfoSetupPriority=mplsPathInfoSetupPriority, mplsLspInfoPathUp=mplsLspInfoPathUp, mplsConfiguredLsps=mplsConfiguredLsps, mplsLspEntry=mplsLspEntry, mplsLspInfoPackets=mplsLspInfoPackets, mplsLspTo=mplsLspTo)
