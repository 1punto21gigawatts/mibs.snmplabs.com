#
# PySNMP MIB module AtiStackInfo-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AtiStackInfo-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, enterprises, IpAddress, ObjectIdentity, ModuleIdentity, Integer32, Counter32, Bits, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "enterprises", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Integer32", "Counter32", "Bits", "iso", "NotificationType")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
alliedTelesyn = ModuleIdentity((1, 3, 6, 1, 4, 1, 207))
if mibBuilder.loadTexts: alliedTelesyn.setLastUpdated('200407270000Z')
if mibBuilder.loadTexts: alliedTelesyn.setOrganization('Allied Telesyn International')
if mibBuilder.loadTexts: alliedTelesyn.setContactInfo('Allied Telesyn International')
if mibBuilder.loadTexts: alliedTelesyn.setDescription('Private MIB for ATI next generation layer 2 switches. This MIB contains stacking related groups.')
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
atiStackInfoMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 16))
class MACAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

atiswitchEnhancedStacking = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 16, 1))
atiswitchEnhStackMode = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unavailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchEnhStackMode.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackMode.setDescription('Enhanced stacking mode of the switch. - Master: You will be able to access the user interface of other switches from this switch and be able to configure the remote switch. Other Masters can also access this switch. - Slave: This switch will not be able to access and configure other switches but Masters can access this switch remotely. - Unavailable: It cannot access any other switches and also no Masters can access this switch. It can only be configured locally.')
atiswitchEnhStackDiscover = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discover", 1), ("do-not-discover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchEnhStackDiscover.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackDiscover.setDescription("Before accessing the enhanced stack, the stack has to be discovered by setting this object to 'discover'. The user is requested to wait for a couple of seconds before accessing the stack as it takes some time for all the remote switches to be identified. Setting the value to 'do-not-discover' has no effect.")
atiswitchEnhStackRemoteNumber = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEnhStackRemoteNumber.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackRemoteNumber.setDescription('Total number of remote switches detected by the Master. It will also be equal to the number of entries in atiswitchEnhStackTable.')
atiswitchEnhStackTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4), )
if mibBuilder.loadTexts: atiswitchEnhStackTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackTable.setDescription('This table contains the list of all remote switches accessible from a Master switch.')
atiswitchEnhStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4, 1), ).setIndexNames((0, "AtiStackInfo-MIB", "atiswitchEnhStackSwId"))
if mibBuilder.loadTexts: atiswitchEnhStackEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackEntry.setDescription('An entry in the atiswitchEnhStackTable describing the remote switch.')
atiswitchEnhStackSwId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEnhStackSwId.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackSwId.setDescription('Entry number of the remote switch in the table. It is also the index into the table.')
atiswitchEnhStackSwMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4, 1, 2), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEnhStackSwMacAddr.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackSwMacAddr.setDescription('MAC address of the remote switch.')
atiswitchEnhStackSwName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEnhStackSwName.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackSwName.setDescription('Name of the remote switch.')
atiswitchEnhStackSwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEnhStackSwMode.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackSwMode.setDescription('Mode of the remote switch - whether it is a Master or a Slave.')
atiswitchEnhStackSwSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEnhStackSwSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackSwSoftwareVersion.setDescription('Software version running in the remote switch.')
atiswitchEnhStackSwModel = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEnhStackSwModel.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackSwModel.setDescription('Model name of the remote switch.')
atiswitchEnhStackConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 16, 1, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchEnhStackConnect.setStatus('current')
if mibBuilder.loadTexts: atiswitchEnhStackConnect.setDescription("Setting this to 'true' will establish a connection with the remote switch. Only one entry in the table can have this value set to 'true' at any point of time. During a remote access, setting its value to 'false' will terminate the remote access.")
mibBuilder.exportSymbols("AtiStackInfo-MIB", atiswitchEnhStackMode=atiswitchEnhStackMode, PYSNMP_MODULE_ID=alliedTelesyn, atiStackInfoMib=atiStackInfoMib, atiswitchEnhancedStacking=atiswitchEnhancedStacking, atiswitchEnhStackConnect=atiswitchEnhStackConnect, atiswitchEnhStackEntry=atiswitchEnhStackEntry, atiswitchEnhStackTable=atiswitchEnhStackTable, mibObject=mibObject, atiswitchEnhStackSwSoftwareVersion=atiswitchEnhStackSwSoftwareVersion, atiswitchEnhStackSwModel=atiswitchEnhStackSwModel, atiswitchEnhStackSwMacAddr=atiswitchEnhStackSwMacAddr, alliedTelesyn=alliedTelesyn, atiswitchEnhStackRemoteNumber=atiswitchEnhStackRemoteNumber, atiswitchEnhStackSwMode=atiswitchEnhStackSwMode, atiswitchEnhStackDiscover=atiswitchEnhStackDiscover, MACAddress=MACAddress, atiswitchEnhStackSwId=atiswitchEnhStackSwId, atiswitchEnhStackSwName=atiswitchEnhStackSwName)
