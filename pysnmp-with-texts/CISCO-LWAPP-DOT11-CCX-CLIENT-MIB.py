#
# PySNMP MIB module CISCO-LWAPP-DOT11-CCX-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DOT11-CCX-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
cldcClientMacAddress, ciscoLwappDot11ClientCcxMIBObjects = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress", "ciscoLwappDot11ClientCcxMIBObjects")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoMilliSeconds, = mibBuilder.importSymbols("CISCO-TC", "CiscoMilliSeconds")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, Unsigned32, NotificationType, Bits, Integer32, Counter64, MibIdentifier, ObjectIdentity, ModuleIdentity, Counter32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Unsigned32", "NotificationType", "Bits", "Integer32", "Counter64", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Counter32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeStamp, DisplayString, MacAddress, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "MacAddress", "TruthValue", "TextualConvention", "RowStatus")
ciscoLwappDot11CcxClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3))
ciscoLwappDot11CcxClientMIB.setRevisions(('2006-04-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappDot11CcxClientMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoLwappDot11CcxClientMIB.setLastUpdated('200606240000Z')
if mibBuilder.loadTexts: ciscoLwappDot11CcxClientMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappDot11CcxClientMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappDot11CcxClientMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol (LWAPP) tunnel from Light-weight Access Points. Link Test is performed to learn the backhaul link quality between two mesh neighboring mesh nodes. The arrangement of the controller (referred to as CC in the diagram) and mesh nodes (RAP and MAP) LWAPP APs ,client(MN) and NMS appear as follows. +.......+ +.......+ + + + + + NMS + + NMS + + + + + +.......+ +.......+ . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ + + + + + + + + + CC + + CC + + CC + + CC + + + + + + + + + +......+ +......+ +......+ +......+ .. . . . .. . . . . . . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ +......+ + + + + + + + + + + + RAP + + RAP + + RAP + + RAP + + RAP + + + + + + + + + + + +......+ +......+ +......+ +......+ +......+ . . . . . . . . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ +......+ + + + + + + + + + + + MAP + + MN + + MAP + + MAP + + MAP + + + + + + + + + + + +......+ +......+ +......+ +......+ +......+ . . .. . . . . .. . . . . .. . . . . . . +......+ +......+ +......+ +......+. +......+ + + + + + + + + + + + MAP + + MAP + + MAP + + MAP + + MN + + + + + + + + + + + +......+ +......+ +......+ +......+ +......+ The LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. The controllers and the IDS systems exchange information through Cisco proprietary event exchange mechanisms. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity is also referred to as 'controller'. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node and client are used interchangeably. Network Management System ( NMS ) The station from which the administrator manages the wired and wireless networks. Mesh Node A mesh node is defined as a physical or logical entity in the mesh network participating in forming the mesh backhaul. There are two types of mesh nodes supported in Cisco mesh network:RAP and MAP. Root AP (RAP) The AP forming the bridge between a wired and a mesh network with an Ethernet interface to the wired network and a 802.11 radio interface to the mesh network Mesh AP (MAP). The AP extending wireless coverage similar to a repeater in a mesh network and consists of a 802.11 uplink and a 802.11 downlink. On a single-radio backhaul, both uplink and downlink exist on the same radio and are logical links only. On a multi-radio backhaul, they may exist on different radios.MAP APs associates directly with RAP APs or with another MAP AP. Each association of AP (MAP-MAP or RAP-MAP) with another AP forms parent-child relationship. Mesh Network Network starting with the wireless backhaul downlink of the RAP and all the entities below except any attached network to the Ethernet link of MAPs. A mesh network below a single RAP is also referred to as a 'Mesh Sector'.A mesh network consists of mesh nodes. A single mesh network is always augmented to a single wired network. Mesh Link A logical 802.11 link between two mesh nodes. A single link is point-to-point. All point-to-multipoint links are considered as multiple mesh links. Often referred to as mesh backhaul link. Mesh Backhaul A Mesh backhaul consists of mesh nodes and mesh links terminating at a RAP. This necessarily creates a one- to-one relationship between a 'mesh network', 'mesh sector' and a 'mesh backhaul' where these terms can be used interchangeably. SNR Signal to Noise ratio on the 802.11 radio. Bridged network The bridged network is defined as the network(s) attached to the Ethernet port of any MAP. There can be multiple such networks attached to a single mesh network. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol ")
ciscoLwappDot11CcxClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0))
ciscoClientCcxEventLogRequest = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 1))
ciscoClientCcxEventLogResponse = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2))
ciscoClientCcxEventLogStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 3))
ciscoClientCcxStatsRequest = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 4))
ciscoClientCcxStatsResponse = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5))
class CcxEventLogResponseStatus(TextualConvention, Integer32):
    description = 'This attribute represents the response of the ccx event log request.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ccx-event-log-successful", 1), ("ccx-event-log-refused", 2), ("ccx-event-log-incapable", 3))

class CcxEventLogDialogToken(TextualConvention, Unsigned32):
    description = 'This attribute represents the token generated for the request sent to a client.'
    status = 'current'

cldccEventLogsRequestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 1, 1), )
if mibBuilder.loadTexts: cldccEventLogsRequestTable.setStatus('current')
if mibBuilder.loadTexts: cldccEventLogsRequestTable.setDescription('This table contains list of clients to which the event log request has been sent for fetching the logs. The table has a column corresponding to the type of logs to be fetched for each client.The current logs supported are Roaming, RSNA and Syslog.')
cldccEventLogsRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccEventLogsRequestEntry.setStatus('current')
if mibBuilder.loadTexts: cldccEventLogsRequestEntry.setDescription('There is an entry in the table where entry is identified by the client Mac address.')
cldccEventLogsRequestLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("roaming", 0), ("rsna", 1), ("syslog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldccEventLogsRequestLogType.setStatus('current')
if mibBuilder.loadTexts: cldccEventLogsRequestLogType.setDescription('This is the type of the logs which is required from the client.This can be Roaming,RSNA or Syslogs.')
cldccEventLogsRequestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldccEventLogsRequestRowStatus.setStatus('current')
if mibBuilder.loadTexts: cldccEventLogsRequestRowStatus.setDescription('This field is used to add/remove entries from this table.To add a row in this table, createAndGo row status will be used.')
cldccSysLogsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 1), )
if mibBuilder.loadTexts: cldccSysLogsTable.setStatus('current')
if mibBuilder.loadTexts: cldccSysLogsTable.setDescription('This table contains Sys logs of the various ccxv5 clients.')
cldccSysLogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CCX-CLIENT-MIB", "cldccSysLogsIndex"))
if mibBuilder.loadTexts: cldccSysLogsEntry.setStatus('current')
if mibBuilder.loadTexts: cldccSysLogsEntry.setDescription('There is an entry in the table for each entry identified by the client mac address and dialog token.')
cldccSysLogsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccSysLogsIndex.setStatus('current')
if mibBuilder.loadTexts: cldccSysLogsIndex.setDescription('This object stores the dialog token exchanged between client and controller for the give sys log request.')
cldccSysLogsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccSysLogsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cldccSysLogsTimeStamp.setDescription('This object stores the time stamp when the syslog messages were generated.')
cldccSysLogsBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccSysLogsBuffer.setStatus('current')
if mibBuilder.loadTexts: cldccSysLogsBuffer.setDescription('This stores the syslog messages generated on the client side.')
cldccRoamingLogsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2), )
if mibBuilder.loadTexts: cldccRoamingLogsTable.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsTable.setDescription('This table contains Roaming logs of the clients.')
cldccRoamingLogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CCX-CLIENT-MIB", "cldccRoamingLogsIndex"))
if mibBuilder.loadTexts: cldccRoamingLogsEntry.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsEntry.setDescription('There is an entry in the table for where each entry is identified by the client mac address and dialog token.')
cldccRoamingLogsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRoamingLogsIndex.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsIndex.setDescription('This is the index of the roaming logs.')
cldccRoamingLogsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRoamingLogsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsTimeStamp.setDescription('This is the time stamp of the log.')
cldccRoamingLogsTargetSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRoamingLogsTargetSSID.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsTargetSSID.setDescription('This is the BSSID of the AP that is target of the attempted transition.')
cldccRoamingLogsSourceSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRoamingLogsSourceSSID.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsSourceSSID.setDescription('This is the BSSID of the associated AP prior to transition.')
cldccRoamingLogsTransitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2, 1, 5), CiscoMilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRoamingLogsTransitionTime.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsTransitionTime.setDescription('This is the difference from last time a frame could have been transmitted on the source BSS to the time when a non-802.1x data frame can be attempted on the target BSS.')
cldccRoamingLogsTransitionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("normal-roam-poor-link", 1), ("normal-roam-load-bal", 2), ("insufficient-capacity", 3), ("inf-directed-roam", 4), ("first-association-to-wlan", 5), ("roaming-from-cellular", 6), ("roaming-to-cellular", 7), ("normal-roam-better-ap", 8), ("disassociated-or-deauthenticated", 9), ("failed-8021x-eap-auth", 10), ("failed-8021x-4way-handshake", 11), ("many-replay-counters", 12), ("many-data-mic-failures", 13), ("many-mgt-mic-failures", 14), ("max-retransmissions-excedded", 15), ("excessive-interference", 16), ("many-broadcast-disassociations", 17), ("many-broadcast-deauth", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRoamingLogsTransitionReason.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsTransitionReason.setDescription('This field indicates the reason why a transition attempt occurred.')
cldccRoamingLogsTransitionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 51))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRoamingLogsTransitionResult.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsTransitionResult.setDescription('This field shows the results of the attempted transition.')
cldccRsnaDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3), )
if mibBuilder.loadTexts: cldccRsnaDataTable.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataTable.setDescription('This table contains Rsna data logs of the clients.')
cldccRsnaDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CCX-CLIENT-MIB", "cldccRsnaDataIndex"))
if mibBuilder.loadTexts: cldccRsnaDataEntry.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataEntry.setDescription('There is an entry in the table for where each entry is identified by the client mac address and dialog token.')
cldccRsnaDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccRsnaDataIndex.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataIndex.setDescription('This is the index of the Rsna Data.')
cldccRsnaDataTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataTimeStamp.setDescription('This object stores the time stamp when the rsna data were generated.')
cldccRsnaDataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataVersion.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataVersion.setDescription('This is the RSNA Data Version.')
cldccRsnaDataTargetSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataTargetSSID.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataTargetSSID.setDescription('This is the BSSID of the AP that is targeted.')
cldccRsnaDataAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("ccx-dot1x-leap", 0), ("ccx-dot1x-eap-fast", 1), ("ccx-dot1x-eap-tls", 2), ("ccx-dot1x-eap-ttls", 3), ("ccx-dot1x-peap-v0", 4), ("ccx-dot1x-peap-v1", 5), ("ccx-dot1x-eap-md5", 6), ("ccx-dot1x-eap-sim", 7), ("ccx-dot1x-psk", 8), ("ccx-dot1x-unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataAuthType.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataAuthType.setDescription('This attribute represents the authentication type used.')
cldccRsnaDataResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataResult.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataResult.setDescription('This attribute stores the result of the RSNA Data.')
cldccRsnaDataElemMultiCastOuis = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataElemMultiCastOuis.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataElemMultiCastOuis.setDescription('This attribute represents the multicast ouis of a RSNA element.')
cldccRsnaDataElemUnicastCastOuis = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataElemUnicastCastOuis.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataElemUnicastCastOuis.setDescription('This field represents the unicast ouis of a RSNA element.')
cldccRsnaDataElemAuthOuis = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataElemAuthOuis.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataElemAuthOuis.setDescription('This field represents the auth ouis of a RSNA element.')
cldccRsnaDataElemCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 2, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaDataElemCapabilities.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaDataElemCapabilities.setDescription('This field represents the capabilities of the RSNA element .')
cldccStatsReqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 4, 1), )
if mibBuilder.loadTexts: cldccStatsReqTable.setStatus('current')
if mibBuilder.loadTexts: cldccStatsReqTable.setDescription('This table contains the stats req for the ccx clients.')
cldccStatsReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccStatsReqEntry.setStatus('current')
if mibBuilder.loadTexts: cldccStatsReqEntry.setDescription('There is an entry in the table where entry is identified by the client Mac address.')
cldccStatsReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("incapable", 0), ("refused", 1), ("invalid-state", 2), ("failure", 3), ("success", 4), ("inprogress", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldccStatsReqStatus.setStatus('current')
if mibBuilder.loadTexts: cldccStatsReqStatus.setDescription('There is an entry in the table where entry is identified by the client Mac address.')
cldccStatsReqGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot11-meas", 0), ("security-meas", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldccStatsReqGroupId.setStatus('current')
if mibBuilder.loadTexts: cldccStatsReqGroupId.setDescription('There is an entry in the table where entry is identified by the client Mac address.')
cldccStatsReqDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 4, 1, 1, 3), CiscoMilliSeconds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldccStatsReqDuration.setStatus('current')
if mibBuilder.loadTexts: cldccStatsReqDuration.setDescription('This field represents the duration of the measurement.')
cldccStatsReqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldccStatsReqRowStatus.setStatus('current')
if mibBuilder.loadTexts: cldccStatsReqRowStatus.setDescription('This field is used to add/remove entries from this table.To add a row in this table, createAndGo row status will be used.')
cldccStatsDot11RespTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1), )
if mibBuilder.loadTexts: cldccStatsDot11RespTable.setStatus('current')
if mibBuilder.loadTexts: cldccStatsDot11RespTable.setDescription('This table contains the stats response for the ccx clients.')
cldccStatsDot11RespEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccStatsDot11RespEntry.setStatus('current')
if mibBuilder.loadTexts: cldccStatsDot11RespEntry.setDescription('There is an entry in the table where entry is identified by the client Mac address.')
cldccStatsRespTransmittedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespTransmittedFragmentCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespTransmittedFragmentCount.setDescription('This field represents the transmitted fragment count.')
cldccStatsRespMulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMulticastTransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMulticastTransmittedFrameCount.setDescription('This field represents the multicast transmitted frame count.')
cldccStatsRespFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespFailedCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespFailedCount.setDescription('This field represents the failed count.')
cldccStatsRespRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespRetryCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespRetryCount.setDescription('This field represents the duplicate frame count.')
cldccStatsRespMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMultipleRetryCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMultipleRetryCount.setDescription('This field represents the retry count.')
cldccStatsRespFrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespFrameDuplicateCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespFrameDuplicateCount.setDescription('This field represents the duplicate frame count.')
cldccStatsRespRtsSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespRtsSuccessCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespRtsSuccessCount.setDescription('This field represents the RTS success count.')
cldccStatsRespRtsFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespRtsFailureCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespRtsFailureCount.setDescription('This field represents the RTS failure count.')
cldccStatsRespAckFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespAckFailureCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespAckFailureCount.setDescription('This field represents the ack failure count.')
cldccStatsRespReceivedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespReceivedFragmentCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespReceivedFragmentCount.setDescription('This field represents the received fragment count.')
cldccStatsRespMulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMulticastReceivedFrameCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMulticastReceivedFrameCount.setDescription('This field represents the multicast received frame count.')
cldccStatsRespFcsErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespFcsErrorCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespFcsErrorCount.setDescription('This field represents the fcs error count.')
cldccStatsRespTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespTransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespTransmittedFrameCount.setDescription('This field represents the transmitted frame count.')
cldccStatsSecurityRespTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2), )
if mibBuilder.loadTexts: cldccStatsSecurityRespTable.setStatus('current')
if mibBuilder.loadTexts: cldccStatsSecurityRespTable.setDescription('This table contains the stats response for the ccx clients.')
cldccStatsSecurityRespEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccStatsSecurityRespEntry.setStatus('current')
if mibBuilder.loadTexts: cldccStatsSecurityRespEntry.setDescription('There is an entry in the table where entry is identified by the client Mac address.')
cldccStatsRespSelectedPairwiseCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespSelectedPairwiseCipher.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespSelectedPairwiseCipher.setDescription('This field represents the pairwise cipher.')
cldccStatsRespTkipIcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespTkipIcvErrors.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespTkipIcvErrors.setDescription('This field represents the tkip icv error count.')
cldccStatsRespTkipLocalMicFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespTkipLocalMicFailures.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespTkipLocalMicFailures.setDescription('This field represents the local tkip mic failure count.')
cldccStatsRespCcmpReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespCcmpReplays.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespCcmpReplays.setDescription('This field represents the ccmp replay count.')
cldccStatsRespCcmpDecrypErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespCcmpDecrypErrors.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespCcmpDecrypErrors.setDescription('This field represents the CCMP decrypt error count.')
cldccStatsRespTkipReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespTkipReplays.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespTkipReplays.setDescription('This field represents the tkip replay count.')
cldccStatsRespMgmtStatsTkipIcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsTkipIcvErrors.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsTkipIcvErrors.setDescription('This field represents the tkip icv error count.')
cldccStatsRespMgmtStatsTkipLocalMicFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsTkipLocalMicFailures.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsTkipLocalMicFailures.setDescription('This field represents the tkip local mic failure count.')
cldccStatsRespMgmtStatsCcmpReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsCcmpReplays.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsCcmpReplays.setDescription('This field represents the CCMP replay count.')
cldccStatsRespMgmtStatsCcmpDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsCcmpDecryptErrors.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsCcmpDecryptErrors.setDescription('This field represents the Ccmp decrypt error count.')
cldccStatsRespMgmtStatsTkipReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsTkipReplays.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsTkipReplays.setDescription('This field represents the tkip replay count.')
cldccStatsRespMgmtStatsTkipMhdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsTkipMhdrErrors.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsTkipMhdrErrors.setDescription('This field represents the tkip mhdr error count.')
cldccStatsRespMgmtStatsCcmpMhdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsCcmpMhdrErrors.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsCcmpMhdrErrors.setDescription('This field represents the Ccmp Mhdr error count.')
cldccStatsRespMgmtStatsBroadcastDisassociateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsBroadcastDisassociateCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsBroadcastDisassociateCount.setDescription('This field represents the broadcast disassociate count.')
cldccStatsRespMgmtStatsBroadcastDeauthenticateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsBroadcastDeauthenticateCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsBroadcastDeauthenticateCount.setDescription('This field represents the broadcast deauthenticate count.')
cldccStatsRespMgmtStatsBroadcastActionFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsBroadcastActionFrameCount.setStatus('current')
if mibBuilder.loadTexts: cldccStatsRespMgmtStatsBroadcastActionFrameCount.setDescription('This field represents the broadcast action frame count.')
cldccEventLogStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 3, 1), )
if mibBuilder.loadTexts: cldccEventLogStatusTable.setStatus('current')
if mibBuilder.loadTexts: cldccEventLogStatusTable.setDescription('This table contains response status of the various event log requests sent from the controller.')
cldccEventLogStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccEventLogStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cldccEventLogStatusEntry.setDescription('There is an entry in the table for each entry identified by the client mac address.')
cldccRoamingLogsResponseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 3, 1, 1, 1), CcxEventLogResponseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRoamingLogsResponseStatus.setStatus('current')
if mibBuilder.loadTexts: cldccRoamingLogsResponseStatus.setDescription('This is the status of roaming log request.')
cldccRsnaLogsResponseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 3, 1, 1, 2), CcxEventLogResponseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccRsnaLogsResponseStatus.setStatus('current')
if mibBuilder.loadTexts: cldccRsnaLogsResponseStatus.setDescription('This is the status of rsna log request.')
cldccSysLogsResponseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 3, 0, 3, 1, 1, 3), CcxEventLogResponseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccSysLogsResponseStatus.setStatus('current')
if mibBuilder.loadTexts: cldccSysLogsResponseStatus.setDescription('This is the status of sys log request.')
mibBuilder.exportSymbols("CISCO-LWAPP-DOT11-CCX-CLIENT-MIB", cldccRsnaDataTargetSSID=cldccRsnaDataTargetSSID, cldccStatsSecurityRespEntry=cldccStatsSecurityRespEntry, cldccStatsDot11RespEntry=cldccStatsDot11RespEntry, cldccSysLogsTable=cldccSysLogsTable, PYSNMP_MODULE_ID=ciscoLwappDot11CcxClientMIB, cldccStatsReqTable=cldccStatsReqTable, cldccStatsReqEntry=cldccStatsReqEntry, cldccStatsRespAckFailureCount=cldccStatsRespAckFailureCount, ciscoClientCcxEventLogResponse=ciscoClientCcxEventLogResponse, cldccRoamingLogsTable=cldccRoamingLogsTable, cldccRsnaDataElemUnicastCastOuis=cldccRsnaDataElemUnicastCastOuis, cldccStatsReqStatus=cldccStatsReqStatus, cldccEventLogsRequestRowStatus=cldccEventLogsRequestRowStatus, ciscoClientCcxEventLogStatus=ciscoClientCcxEventLogStatus, cldccSysLogsTimeStamp=cldccSysLogsTimeStamp, cldccStatsDot11RespTable=cldccStatsDot11RespTable, cldccSysLogsBuffer=cldccSysLogsBuffer, cldccStatsRespMgmtStatsTkipMhdrErrors=cldccStatsRespMgmtStatsTkipMhdrErrors, cldccRoamingLogsTransitionTime=cldccRoamingLogsTransitionTime, cldccStatsRespSelectedPairwiseCipher=cldccStatsRespSelectedPairwiseCipher, cldccStatsRespMgmtStatsTkipIcvErrors=cldccStatsRespMgmtStatsTkipIcvErrors, cldccRoamingLogsTargetSSID=cldccRoamingLogsTargetSSID, cldccStatsRespMulticastTransmittedFrameCount=cldccStatsRespMulticastTransmittedFrameCount, cldccSysLogsResponseStatus=cldccSysLogsResponseStatus, cldccRsnaDataVersion=cldccRsnaDataVersion, cldccRsnaLogsResponseStatus=cldccRsnaLogsResponseStatus, cldccStatsRespReceivedFragmentCount=cldccStatsRespReceivedFragmentCount, CcxEventLogResponseStatus=CcxEventLogResponseStatus, cldccRoamingLogsIndex=cldccRoamingLogsIndex, cldccStatsRespCcmpReplays=cldccStatsRespCcmpReplays, cldccStatsRespFcsErrorCount=cldccStatsRespFcsErrorCount, cldccRoamingLogsTransitionResult=cldccRoamingLogsTransitionResult, cldccRsnaDataTimeStamp=cldccRsnaDataTimeStamp, cldccRsnaDataAuthType=cldccRsnaDataAuthType, cldccEventLogStatusEntry=cldccEventLogStatusEntry, cldccRoamingLogsTimeStamp=cldccRoamingLogsTimeStamp, cldccRsnaDataElemAuthOuis=cldccRsnaDataElemAuthOuis, cldccStatsRespRtsSuccessCount=cldccStatsRespRtsSuccessCount, cldccStatsSecurityRespTable=cldccStatsSecurityRespTable, cldccStatsReqGroupId=cldccStatsReqGroupId, cldccStatsRespTkipLocalMicFailures=cldccStatsRespTkipLocalMicFailures, cldccSysLogsEntry=cldccSysLogsEntry, cldccRsnaDataElemMultiCastOuis=cldccRsnaDataElemMultiCastOuis, cldccRoamingLogsTransitionReason=cldccRoamingLogsTransitionReason, cldccStatsRespMultipleRetryCount=cldccStatsRespMultipleRetryCount, cldccRsnaDataEntry=cldccRsnaDataEntry, cldccEventLogsRequestLogType=cldccEventLogsRequestLogType, cldccStatsRespMgmtStatsTkipLocalMicFailures=cldccStatsRespMgmtStatsTkipLocalMicFailures, ciscoLwappDot11CcxClientMIBObjects=ciscoLwappDot11CcxClientMIBObjects, cldccStatsRespRtsFailureCount=cldccStatsRespRtsFailureCount, cldccRsnaDataTable=cldccRsnaDataTable, cldccRoamingLogsResponseStatus=cldccRoamingLogsResponseStatus, cldccStatsRespMulticastReceivedFrameCount=cldccStatsRespMulticastReceivedFrameCount, cldccStatsRespTkipIcvErrors=cldccStatsRespTkipIcvErrors, cldccStatsRespTkipReplays=cldccStatsRespTkipReplays, ciscoClientCcxStatsRequest=ciscoClientCcxStatsRequest, cldccStatsRespMgmtStatsBroadcastDeauthenticateCount=cldccStatsRespMgmtStatsBroadcastDeauthenticateCount, cldccRsnaDataResult=cldccRsnaDataResult, cldccRoamingLogsEntry=cldccRoamingLogsEntry, cldccStatsRespMgmtStatsCcmpReplays=cldccStatsRespMgmtStatsCcmpReplays, ciscoLwappDot11CcxClientMIB=ciscoLwappDot11CcxClientMIB, ciscoClientCcxStatsResponse=ciscoClientCcxStatsResponse, cldccStatsRespMgmtStatsCcmpDecryptErrors=cldccStatsRespMgmtStatsCcmpDecryptErrors, cldccStatsRespFailedCount=cldccStatsRespFailedCount, cldccStatsReqDuration=cldccStatsReqDuration, cldccStatsRespRetryCount=cldccStatsRespRetryCount, cldccSysLogsIndex=cldccSysLogsIndex, cldccRsnaDataElemCapabilities=cldccRsnaDataElemCapabilities, cldccEventLogStatusTable=cldccEventLogStatusTable, CcxEventLogDialogToken=CcxEventLogDialogToken, cldccStatsRespMgmtStatsCcmpMhdrErrors=cldccStatsRespMgmtStatsCcmpMhdrErrors, cldccStatsRespMgmtStatsBroadcastActionFrameCount=cldccStatsRespMgmtStatsBroadcastActionFrameCount, ciscoClientCcxEventLogRequest=ciscoClientCcxEventLogRequest, cldccStatsRespTransmittedFragmentCount=cldccStatsRespTransmittedFragmentCount, cldccStatsRespMgmtStatsTkipReplays=cldccStatsRespMgmtStatsTkipReplays, cldccEventLogsRequestEntry=cldccEventLogsRequestEntry, cldccStatsReqRowStatus=cldccStatsReqRowStatus, cldccStatsRespTransmittedFrameCount=cldccStatsRespTransmittedFrameCount, cldccStatsRespMgmtStatsBroadcastDisassociateCount=cldccStatsRespMgmtStatsBroadcastDisassociateCount, cldccStatsRespFrameDuplicateCount=cldccStatsRespFrameDuplicateCount, cldccEventLogsRequestTable=cldccEventLogsRequestTable, cldccStatsRespCcmpDecrypErrors=cldccStatsRespCcmpDecrypErrors, cldccRsnaDataIndex=cldccRsnaDataIndex, cldccRoamingLogsSourceSSID=cldccRoamingLogsSourceSSID)
