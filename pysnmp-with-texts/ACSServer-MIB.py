#
# PySNMP MIB module ACSServer-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACSServer-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
microsoft, software = mibBuilder.importSymbols("MSFT-MIB", "microsoft", "software")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, Counter64, ObjectIdentity, IpAddress, Integer32, enterprises, NotificationType, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Counter64", "ObjectIdentity", "IpAddress", "Integer32", "enterprises", "NotificationType", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
acsService = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 15))
acsSvcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 15, 1))
acsInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 15, 2))
acsMsidlpmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 15, 3))
acsSvcStatsIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsIfNumber.setDescription('The number of network interfaces on this system detected by ACS server.')
acsSvcStatsActiveApiSessions = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsActiveApiSessions.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsActiveApiSessions.setDescription('This is the total number of API sessions active on this ACS Server')
acsSvcStatsActiveApiSockets = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsActiveApiSockets.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsActiveApiSockets.setDescription('This is the total number of API sockets active on this ACS Server')
acsSvcStatsReceivedApiPathRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsReceivedApiPathRequests.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsReceivedApiPathRequests.setDescription('This is the total number of Path requests received from QoS aware applications by this ACS Server')
acsSvcStatsReceivedApiResvRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsReceivedApiResvRequests.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsReceivedApiResvRequests.setDescription('This is the total number of Resv requests received from QoS aware applications by this ACS Server')
acsSvcStatsFailedApiRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsFailedApiRequests.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsFailedApiRequests.setDescription('This is the total number of requests received from QoS aware applications by this ACS Server which failed')
acsSvcStatsFailedApiSends = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsFailedApiSends.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsFailedApiSends.setDescription('This is the total number of requests which could not be sent to QoS aware applications by this ACS Server')
acsSvcStatsApiNotifications = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsApiNotifications.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsApiNotifications.setDescription('This is the total number of notifications sent by this ACS Server to QoS aware applications')
acsSvcStatsApiNotificationBytes = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsApiNotificationBytes.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsApiNotificationBytes.setDescription('This is the total number of bytes in notifications sent by this ACS Server to QoS aware applications')
acsSvcStatsNetSockets = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsNetSockets.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsNetSockets.setDescription('This is the total number of network sockets opened by this ACS Server currently')
acsSvcStatsTimers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSvcStatsTimers.setStatus('mandatory')
if mibBuilder.loadTexts: acsSvcStatsTimers.setDescription('This is the total number of timer events active in this ACS Server currently')
acsIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1), )
if mibBuilder.loadTexts: acsIfStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
acsIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1), ).setIndexNames((0, "ACSServer-MIB", "acsIfStatsIndex"))
if mibBuilder.loadTexts: acsIfStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
acsIfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acsIfStatsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsIpAddr.setDescription('The IP address of the interface to which these statistics pertains.')
acsIfStatsRawIpSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsRawIpSentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsRawIpSentBytes.setDescription('This is the total number of RAW IP BYTEs sent by ACS Server')
acsIfStatsRawIpReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsRawIpReceivedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsRawIpReceivedBytes.setDescription('This is the total number of RAW IP BYTEs received by ACS Server')
acsIfStatsReceivedRsvpPathMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpPathMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpPathMsgs.setDescription('This is the total number of RSVP Path messages received by this ACS Server')
acsIfStatsReceivedRsvpResvMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpResvMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpResvMsgs.setDescription('This is the total number of RSVP Resv messages received by this ACS Server')
acsIfStatsReceivedRsvpPathErrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpPathErrMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpPathErrMsgs.setDescription('This is the total number of RSVP PathErr messages received by this ACS Server')
acsIfStatsReceivedRsvpResvErrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpResvErrMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpResvErrMsgs.setDescription('This is the total number of RSVP ResvErr messages received by this ACS Server')
acsIfStatsReceivedRsvpPathTearMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpPathTearMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpPathTearMsgs.setDescription('This is the total number of RSVP PathTear messages received by this ACS Server')
acsIfStatsReceivedRsvpResvTearMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpResvTearMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpResvTearMsgs.setDescription('This is the total number of RSVP ResvTear messages received by this ACS Server')
acsIfStatsReceivedRsvpConfirmMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpConfirmMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceivedRsvpConfirmMsgs.setDescription('This is the total number of RSVP Confirm messages received by this ACS Server')
acsIfStatsSentRsvpPathMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSentRsvpPathMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSentRsvpPathMsgs.setDescription('This is the total number of RSVP Path messages sent by this ACS Server')
acsIfStatsSentRsvpResvMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSentRsvpResvMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSentRsvpResvMsgs.setDescription('This is the total number of RSVP Resv messages sent by this ACS Server')
acsIfStatsSentRsvpPathErrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSentRsvpPathErrMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSentRsvpPathErrMsgs.setDescription('This is the total number of RSVP PathErr messages sent by this ACS Server')
acsIfStatsSentRsvpResvErrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSentRsvpResvErrMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSentRsvpResvErrMsgs.setDescription('This is the total number of RSVP ResvErr messages sent by this ACS Server')
acsIfStatsSentRsvpPathTearMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSentRsvpPathTearMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSentRsvpPathTearMsgs.setDescription('This is the total number of RSVP PathTear messages sent by this ACS Server')
acsIfStatsSentRsvpResvTearMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSentRsvpResvTearMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSentRsvpResvTearMsgs.setDescription('This is the total number of RSVP ResvTear messages sent by this ACS Server')
acsIfStatsSentRsvpConfirmMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSentRsvpConfirmMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSentRsvpConfirmMsgs.setDescription('This is the total number of RSVP Confirm messages sent by this ACS Server')
acsIfStatsAdmissionControlFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsAdmissionControlFailures.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsAdmissionControlFailures.setDescription('This is the total number of Admission Control errors generated by this ACS Server')
acsIfStatsPolicyControlFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsPolicyControlFailures.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsPolicyControlFailures.setDescription('This is the total number of Policy Control errors generated by this ACS Server')
acsIfStatsOtherFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsOtherFailures.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsOtherFailures.setDescription('This is the total number of other types errors generated by this ACS Server')
acsIfStatsInBlockadeStateResvs = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsInBlockadeStateResvs.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsInBlockadeStateResvs.setDescription('This is the total number of Resv State Blocks in blockade state in this ACS Server')
acsIfStatsResvTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsResvTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsResvTimeOuts.setDescription('This is the total number of Reservations which have timed out in this ACS Server')
acsIfStatsPathTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsPathTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsPathTimeOuts.setDescription('This is the total number of Path states which have timed out in this ACS Server')
acsIfStatsReceiveFailsBigMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceiveFailsBigMsg.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceiveFailsBigMsg.setDescription('This is the total number of RSVP messages which could not be received by this ACS Server because they are too big to fit in the message buffer')
acsIfStatsSendFailsBigMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSendFailsBigMsg.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSendFailsBigMsg.setDescription('This is the total number of RSVP messages which could not be sent by this ACS Server because they are too big to fit in the message buffer')
acsIfStatsReceiveFailsNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsReceiveFailsNoMemory.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsReceiveFailsNoMemory.setDescription('This is the total number of RSVP messages which could not be sent by this ACS Server because there was no free message buffer')
acsIfStatsSendFailsNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsSendFailsNoMemory.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsSendFailsNoMemory.setDescription('This is the total number of RSVP messages which could not be sent by this ACS Server because there was no free message buffer')
acsIfStatsActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsActiveFlows.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsActiveFlows.setDescription('This is the total number flows currently active in this ACS Server currently')
acsIfStatsAllocatedBandwidthBits = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsAllocatedBandwidthBits.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsAllocatedBandwidthBits.setDescription('This is the total bandwidth allocated currently by this ACS Server')
acsIfStatsMaxAllocatedBandwidthBits = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 2, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsIfStatsMaxAllocatedBandwidthBits.setStatus('mandatory')
if mibBuilder.loadTexts: acsIfStatsMaxAllocatedBandwidthBits.setDescription('This is the maximum bandwidth ever allocated by this ACS Server')
acsMsidlpmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1), )
if mibBuilder.loadTexts: acsMsidlpmStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmStatsTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
acsMsidlpmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1), ).setIndexNames((0, "ACSServer-MIB", "acsMsidlpmStatsIndex"))
if mibBuilder.loadTexts: acsMsidlpmStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmStatsEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
acsMsidlpmStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmStatsIndex.setDescription("A unique value for each subnet. Its value ranges between 1 and the value of ifNumber. The value for each subnet must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
acsMsidlpmStatsSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmStatsSubnetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmStatsSubnetAddr.setDescription('The IP address of the subnet to which these statistics pertains.')
acsMsidlpmSendersAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmSendersAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmSendersAccepted.setDescription('This is the total number of senders whose PATH messages were accepted')
acsMsidlpmSenderChgAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmSenderChgAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmSenderChgAccepted.setDescription('This is the total number of senders whose PATH message changes were accepted')
acsMsidlpmRejSndFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejSndFlowRate.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejSndFlowRate.setDescription('This is the total number of senders whose PATH message were rejected because of data flow rate policy')
acsMsidlpmRejSndPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejSndPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejSndPeakRate.setDescription('This is the total number of senders whose PATH message were rejected because of peak data rate policy')
acsMsidlpmRejSndSumFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejSndSumFlowRate.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejSndSumFlowRate.setDescription('This is the total number of senders whose PATH message were rejected because of aggregate data flow rate policy')
acsMsidlpmRejSndSumPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejSndSumPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejSndSumPeakRate.setDescription('This is the total number of senders whose PATH message were rejected because of aggregate peak data rate policy')
acsMsidlpmRejSndIdChange = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejSndIdChange.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejSndIdChange.setDescription('This is the total number of senders whose PATH message were rejected because of identity change')
acsMsidlpmRejSndDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejSndDuration.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejSndDuration.setDescription('This is the total number of senders whose PATH message were rejected because of flow duration policy')
acsMsidlpmRejSndCount = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejSndCount.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejSndCount.setDescription('This is the total number of senders whose PATH message were rejected because of flow count policy')
acsMsidlpmRejSndOthersPolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejSndOthersPolicies.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejSndOthersPolicies.setDescription('This is the total number of senders whose PATH message were rejected because of policies other than flow rate, peak rate, flow duration and flow count')
acsMsidlpmReceiversAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmReceiversAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmReceiversAccepted.setDescription('This is the total number of receivers whose RESV messages were accepted')
acsMsidlpmReceiverChgAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmReceiverChgAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmReceiverChgAccepted.setDescription('This is the total number of receivers whose RESV message changes were accepted')
acsMsidlpmRejRecvFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejRecvFlowRate.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejRecvFlowRate.setDescription('This is the total number of receivers whose RESV message were rejected because of data flow rate policy')
acsMsidlpmRejRecvPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejRecvPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejRecvPeakRate.setDescription('This is the total number of receivers whose RESV message were rejected because of peak data rate policy')
acsMsidlpmRejRecvSumFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejRecvSumFlowRate.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejRecvSumFlowRate.setDescription('This is the total number of receivers whose RESV message were rejected because of aggregate data flow rate policy')
acsMsidlpmRejRecvSumPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejRecvSumPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejRecvSumPeakRate.setDescription('This is the total number of receivers whose RESV message were rejected because of aggregate peak data rate policy')
acsMsidlpmRejRecvIdChange = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejRecvIdChange.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejRecvIdChange.setDescription('This is the total number of senders whose RESV message were rejected because of identity change')
acsMsidlpmRejRecvDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejRecvDuration.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejRecvDuration.setDescription('This is the total number of receivers whose RESV message were rejected because of flow duration policy')
acsMsidlpmRejRecvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejRecvCount.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejRecvCount.setDescription('This is the total number of receivers whose RESV message were rejected because of flow count policy')
acsMsidlpmRejRecvOthersPolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmRejRecvOthersPolicies.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmRejRecvOthersPolicies.setDescription('This is the total number of receivers whose RESV message were rejected because of policies other than flow rate, peak rate, flow duration and flow count')
acsMsidlpmBadIdentityPes = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmBadIdentityPes.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmBadIdentityPes.setDescription('This is the total number of Identity Policy elements which could not be cracked by the MSIDLPM')
acsMsidlpmDsCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 15, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsMsidlpmDsCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: acsMsidlpmDsCacheSize.setDescription('This is the total number of entries in the policy cache maintained by the MSIDLPM')
mibBuilder.exportSymbols("ACSServer-MIB", acsMsidlpmRejRecvIdChange=acsMsidlpmRejRecvIdChange, acsMsidlpmReceiversAccepted=acsMsidlpmReceiversAccepted, acsIfStatsOtherFailures=acsIfStatsOtherFailures, acsMsidlpmRejSndPeakRate=acsMsidlpmRejSndPeakRate, acsIfStatsReceivedRsvpPathTearMsgs=acsIfStatsReceivedRsvpPathTearMsgs, acsIfStatsInBlockadeStateResvs=acsIfStatsInBlockadeStateResvs, acsMsidlpmSendersAccepted=acsMsidlpmSendersAccepted, acsSvcStatsActiveApiSessions=acsSvcStatsActiveApiSessions, acsIfStatsSendFailsNoMemory=acsIfStatsSendFailsNoMemory, acsMsidlpmRejRecvSumPeakRate=acsMsidlpmRejRecvSumPeakRate, acsMsidlpmRejRecvDuration=acsMsidlpmRejRecvDuration, acsIfStatsReceivedRsvpConfirmMsgs=acsIfStatsReceivedRsvpConfirmMsgs, acsIfStatsResvTimeOuts=acsIfStatsResvTimeOuts, acsMsidlpmRejSndOthersPolicies=acsMsidlpmRejSndOthersPolicies, acsIfStatsMaxAllocatedBandwidthBits=acsIfStatsMaxAllocatedBandwidthBits, acsIfStatsActiveFlows=acsIfStatsActiveFlows, acsMsidlpmStats=acsMsidlpmStats, acsIfStatsSentRsvpResvErrMsgs=acsIfStatsSentRsvpResvErrMsgs, acsIfStatsReceiveFailsBigMsg=acsIfStatsReceiveFailsBigMsg, acsMsidlpmStatsSubnetAddr=acsMsidlpmStatsSubnetAddr, acsIfStatsReceivedRsvpPathErrMsgs=acsIfStatsReceivedRsvpPathErrMsgs, acsSvcStatsReceivedApiResvRequests=acsSvcStatsReceivedApiResvRequests, acsMsidlpmRejRecvOthersPolicies=acsMsidlpmRejRecvOthersPolicies, acsSvcStatsNetSockets=acsSvcStatsNetSockets, acsSvcStatsTimers=acsSvcStatsTimers, acsMsidlpmRejRecvFlowRate=acsMsidlpmRejRecvFlowRate, acsIfStatsEntry=acsIfStatsEntry, acsMsidlpmStatsIndex=acsMsidlpmStatsIndex, acsMsidlpmRejSndFlowRate=acsMsidlpmRejSndFlowRate, acsIfStatsRawIpSentBytes=acsIfStatsRawIpSentBytes, acsMsidlpmStatsEntry=acsMsidlpmStatsEntry, acsIfStatsIpAddr=acsIfStatsIpAddr, acsIfStatsReceivedRsvpResvMsgs=acsIfStatsReceivedRsvpResvMsgs, acsMsidlpmDsCacheSize=acsMsidlpmDsCacheSize, acsIfStatsSentRsvpConfirmMsgs=acsIfStatsSentRsvpConfirmMsgs, acsMsidlpmRejRecvPeakRate=acsMsidlpmRejRecvPeakRate, acsSvcStatsFailedApiRequests=acsSvcStatsFailedApiRequests, acsIfStatsPolicyControlFailures=acsIfStatsPolicyControlFailures, acsIfStatsReceivedRsvpResvErrMsgs=acsIfStatsReceivedRsvpResvErrMsgs, acsIfStatsAdmissionControlFailures=acsIfStatsAdmissionControlFailures, acsIfStatsAllocatedBandwidthBits=acsIfStatsAllocatedBandwidthBits, acsMsidlpmRejSndIdChange=acsMsidlpmRejSndIdChange, acsSvcStats=acsSvcStats, acsMsidlpmRejRecvSumFlowRate=acsMsidlpmRejRecvSumFlowRate, acsMsidlpmBadIdentityPes=acsMsidlpmBadIdentityPes, acsMsidlpmRejSndDuration=acsMsidlpmRejSndDuration, acsIfStatsSendFailsBigMsg=acsIfStatsSendFailsBigMsg, acsMsidlpmRejSndSumFlowRate=acsMsidlpmRejSndSumFlowRate, acsSvcStatsFailedApiSends=acsSvcStatsFailedApiSends, acsSvcStatsApiNotificationBytes=acsSvcStatsApiNotificationBytes, acsIfStatsRawIpReceivedBytes=acsIfStatsRawIpReceivedBytes, acsIfStatsSentRsvpResvMsgs=acsIfStatsSentRsvpResvMsgs, acsMsidlpmRejRecvCount=acsMsidlpmRejRecvCount, acsIfStatsIndex=acsIfStatsIndex, acsService=acsService, acsMsidlpmReceiverChgAccepted=acsMsidlpmReceiverChgAccepted, acsIfStatsTable=acsIfStatsTable, acsIfStatsPathTimeOuts=acsIfStatsPathTimeOuts, acsIfStatsSentRsvpPathErrMsgs=acsIfStatsSentRsvpPathErrMsgs, acsSvcStatsReceivedApiPathRequests=acsSvcStatsReceivedApiPathRequests, acsIfStatsReceiveFailsNoMemory=acsIfStatsReceiveFailsNoMemory, acsInterfaces=acsInterfaces, acsIfStatsReceivedRsvpPathMsgs=acsIfStatsReceivedRsvpPathMsgs, acsMsidlpmStatsTable=acsMsidlpmStatsTable, acsMsidlpmRejSndSumPeakRate=acsMsidlpmRejSndSumPeakRate, acsMsidlpmSenderChgAccepted=acsMsidlpmSenderChgAccepted, acsMsidlpmRejSndCount=acsMsidlpmRejSndCount, acsIfStatsSentRsvpPathTearMsgs=acsIfStatsSentRsvpPathTearMsgs, acsSvcStatsApiNotifications=acsSvcStatsApiNotifications, acsIfStatsReceivedRsvpResvTearMsgs=acsIfStatsReceivedRsvpResvTearMsgs, acsIfStatsSentRsvpPathMsgs=acsIfStatsSentRsvpPathMsgs, acsSvcStatsIfNumber=acsSvcStatsIfNumber, acsIfStatsSentRsvpResvTearMsgs=acsIfStatsSentRsvpResvTearMsgs, acsSvcStatsActiveApiSockets=acsSvcStatsActiveApiSockets)
