#
# PySNMP MIB module HM2-LICENSE-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-LICENSE-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hm2ConfigurationMibs, = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, Unsigned32, ModuleIdentity, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, iso, Gauge32, IpAddress, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Unsigned32", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "iso", "Gauge32", "IpAddress", "Integer32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hm2LicenseMgmtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 3))
hm2LicenseMgmtMib.setRevisions(('2012-08-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2LicenseMgmtMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2LicenseMgmtMib.setLastUpdated('201208030000Z')
if mibBuilder.loadTexts: hm2LicenseMgmtMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2LicenseMgmtMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2LicenseMgmtMib.setDescription('This MIB defines the objects of the Hirschmann License Management. Copyright (C) 2012. All Rights Reserved.')
class HmLmSwLvlCap(TextualConvention, Bits):
    description = '.'
    status = 'current'
    namedValues = NamedValues(("sw-lvl-default", 0), ("sw-lvl-2e", 1), ("sw-lvl-2s", 2), ("sw-lvl-2a", 3), ("sw-lvl-3s", 4), ("sw-lvl-3a", 5))

class HmLmLicenseLvlCap(TextualConvention, Bits):
    description = '.'
    status = 'current'
    namedValues = NamedValues(("none", 0), ("unicast-routing", 1), ("multicast-routing", 2))

hm2LicenseMgmtMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 0))
hm2LicenseMgmtMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1))
hm2LMLicenseKeyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 1))
hm2LMLicenseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2))
hm2LMFeatureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3))
hm2LMSwLvlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4))
hm2LMLicenseKeyUdi = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseKeyUdi.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseKeyUdi.setDescription('Unique device identifier for license generation.')
hm2LMLicenseKeyInstall = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LMLicenseKeyInstall.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseKeyInstall.setDescription('Installation of a new license key.')
hm2LMLicenseKeyDelete = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LMLicenseKeyDelete.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseKeyDelete.setDescription('Delete a license key.')
hm2LMLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1), )
if mibBuilder.loadTexts: hm2LMLicenseTable.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseTable.setDescription('This table contains objects, to get information on all licenses that are available on this device.')
hm2LMLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1), ).setIndexNames((0, "HM2-LICENSE-MGMT-MIB", "hm2LMLicenseId"))
if mibBuilder.loadTexts: hm2LMLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseEntry.setDescription('The license information objects.')
hm2LMLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LMLicenseId.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseId.setDescription('The unique identification number of this license.')
hm2LMLicenseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseDescription.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseDescription.setDescription('Description of this license.')
hm2LMLicenseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseVersion.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseVersion.setDescription('Version of this license.')
hm2LMLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseKey.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseKey.setDescription('The granted license key for this license.')
hm2LMLicenseModel = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("demo", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseModel.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseModel.setDescription('The current licensing model of this license.')
hm2LMLicenseExpiryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseExpiryPeriod.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseExpiryPeriod.setDescription('The time period in hours for which the license is still valid. The value of this object is only relevant, when the licensing model is demo.')
hm2LMLicenseOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("expired", 3), ("error", 4), ("no-license", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseOperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseOperStatus.setDescription('The current operating status of this license.')
hm2LMLicenseAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LMLicenseAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseAdminStatus.setDescription('The administrative status of this license.')
hm2LMLicenseSwLvlCap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 2, 1, 1, 11), HmLmSwLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMLicenseSwLvlCap.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseSwLvlCap.setDescription('.')
hm2LMFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1), )
if mibBuilder.loadTexts: hm2LMFeatureTable.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureTable.setDescription('This table contains objects, to get information about feature licensing.')
hm2LMFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1), ).setIndexNames((1, "HM2-LICENSE-MGMT-MIB", "hm2LMFeatureId"))
if mibBuilder.loadTexts: hm2LMFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureEntry.setDescription('The feature objects.')
hm2LMFeatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LMFeatureId.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureId.setDescription('The unique identification number of this feature.')
hm2LMFeatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureDescription.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureDescription.setDescription('Description of this feature.')
hm2LMFeatureBinaryID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureBinaryID.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureBinaryID.setDescription('The integer representation of the license ID.')
hm2LMFeatureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureCount.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureCount.setDescription('The number of licensed instances for this feature.')
hm2LMFeatureLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureLicenseId.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureLicenseId.setDescription('The unique identification number of the license which belongs to this feature.')
hm2LMFeatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("expired", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureStatus.setDescription('The current license status of this feature.')
hm2LMFeatureSwLvlCap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 10), HmLmSwLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureSwLvlCap.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureSwLvlCap.setDescription('The software level capabilities for the feature.')
hm2LMFeatureSwLicCap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 3, 1, 1, 11), HmLmLicenseLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMFeatureSwLicCap.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureSwLicCap.setDescription('The license level Cap for the feature.')
hm2LMSwLvlDescription = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMSwLvlDescription.setStatus('current')
if mibBuilder.loadTexts: hm2LMSwLvlDescription.setDescription('A textual description of the license currently applied and running on the device.')
hm2LMSwLvlCap = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4, 2), HmLmSwLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMSwLvlCap.setStatus('current')
if mibBuilder.loadTexts: hm2LMSwLvlCap.setDescription('The available software level selectable on this device.')
hm2LMSwLvlAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4, 3), HmLmSwLvlCap().clone(namedValues=NamedValues(("sw-lvl-default", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LMSwLvlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LMSwLvlAdminStatus.setDescription('The configured software level. Setting a new software Lvl requires to save the configuration and reboot the device.')
hm2LMSwLvlOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 3, 1, 4, 4), HmLmSwLvlCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LMSwLvlOperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LMSwLvlOperStatus.setDescription('The current software level applied and running on this device.')
hm2LMLicenseChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 3, 0, 1)).setObjects(("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseId"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseDescription"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseVersion"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseKey"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseModel"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseExpiryPeriod"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseOperStatus"), ("HM2-LICENSE-MGMT-MIB", "hm2LMLicenseAdminStatus"))
if mibBuilder.loadTexts: hm2LMLicenseChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hm2LMLicenseChangeTrap.setDescription('This trap is sent if one of the license information objects is changed.')
hm2LMFeatureChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 3, 0, 2)).setObjects(("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureId"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureDescription"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureBinaryID"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureCount"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureLicenseId"), ("HM2-LICENSE-MGMT-MIB", "hm2LMFeatureStatus"))
if mibBuilder.loadTexts: hm2LMFeatureChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hm2LMFeatureChangeTrap.setDescription('This trap is sent if one of the feature information objects is changed.')
mibBuilder.exportSymbols("HM2-LICENSE-MGMT-MIB", hm2LMSwLvlCap=hm2LMSwLvlCap, hm2LMSwLvlGroup=hm2LMSwLvlGroup, hm2LMLicenseEntry=hm2LMLicenseEntry, hm2LMLicenseDescription=hm2LMLicenseDescription, hm2LMLicenseVersion=hm2LMLicenseVersion, hm2LMSwLvlAdminStatus=hm2LMSwLvlAdminStatus, hm2LMFeatureSwLicCap=hm2LMFeatureSwLicCap, hm2LicenseMgmtMib=hm2LicenseMgmtMib, hm2LMFeatureBinaryID=hm2LMFeatureBinaryID, hm2LMSwLvlDescription=hm2LMSwLvlDescription, hm2LMFeatureTable=hm2LMFeatureTable, hm2LMLicenseChangeTrap=hm2LMLicenseChangeTrap, hm2LicenseMgmtMibNotifications=hm2LicenseMgmtMibNotifications, hm2LMLicenseGroup=hm2LMLicenseGroup, HmLmSwLvlCap=HmLmSwLvlCap, hm2LMLicenseSwLvlCap=hm2LMLicenseSwLvlCap, hm2LMFeatureStatus=hm2LMFeatureStatus, HmLmLicenseLvlCap=HmLmLicenseLvlCap, hm2LMFeatureSwLvlCap=hm2LMFeatureSwLvlCap, hm2LMLicenseAdminStatus=hm2LMLicenseAdminStatus, hm2LMFeatureLicenseId=hm2LMFeatureLicenseId, hm2LMFeatureDescription=hm2LMFeatureDescription, hm2LMFeatureEntry=hm2LMFeatureEntry, hm2LMLicenseKeyInstall=hm2LMLicenseKeyInstall, PYSNMP_MODULE_ID=hm2LicenseMgmtMib, hm2LMLicenseModel=hm2LMLicenseModel, hm2LMLicenseExpiryPeriod=hm2LMLicenseExpiryPeriod, hm2LMLicenseOperStatus=hm2LMLicenseOperStatus, hm2LicenseMgmtMibObjects=hm2LicenseMgmtMibObjects, hm2LMLicenseTable=hm2LMLicenseTable, hm2LMFeatureCount=hm2LMFeatureCount, hm2LMSwLvlOperStatus=hm2LMSwLvlOperStatus, hm2LMFeatureId=hm2LMFeatureId, hm2LMLicenseKey=hm2LMLicenseKey, hm2LMLicenseKeyDelete=hm2LMLicenseKeyDelete, hm2LMLicenseId=hm2LMLicenseId, hm2LMFeatureGroup=hm2LMFeatureGroup, hm2LMLicenseKeyUdi=hm2LMLicenseKeyUdi, hm2LMFeatureChangeTrap=hm2LMFeatureChangeTrap, hm2LMLicenseKeyGroup=hm2LMLicenseKeyGroup)
