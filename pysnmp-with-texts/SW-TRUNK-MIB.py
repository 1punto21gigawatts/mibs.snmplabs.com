#
# PySNMP MIB module SW-TRUNK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-TRUNK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, ModuleIdentity, MibIdentifier, Bits, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, iso, TimeTicks, Counter64, NotificationType, IpAddress, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Bits", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "iso", "TimeTicks", "Counter64", "NotificationType", "IpAddress", "Unsigned32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class TrunkSetList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
dlinkcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
es2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 3))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
marconi_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("marconi-mgmt")
es2000Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28))
swL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2))
swPortTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6))
swPortTrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 1), )
if mibBuilder.loadTexts: swPortTrunkCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlTable.setDescription('This table specifies which port trunking configuration. Trunking ID is as following : trunk 1, 3, 5, 7, 9, 11, 13, 15 - unit1, tx_module, port1~8; trunk 2, 4, 6, 8, 10, 12, 14, 16 - unit1, tx_module, port9~16')
swPortTrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 1, 1), ).setIndexNames((0, "SW-TRUNK-MIB", "swPortTrunkCtrlIndex"))
if mibBuilder.loadTexts: swPortTrunkCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlEntry.setDescription('Each entry specifies which ports are grouped as a single logical link.')
swPortTrunkCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlIndex.setDescription('The index of logical trunk of ports.')
swPortTrunkCtrlAnchorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlAnchorPort.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlAnchorPort.setDescription('Get anchor port number between trunk ports.')
swPortTrunkCtrlMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkCtrlMasterPort.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlMasterPort.setDescription('Get master port number between trunk ports.')
swPortTrunkCtrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlName.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlName.setDescription('The name of logical trunk of ports.')
swPortTrunkCtrlMember = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 1, 1, 5), TrunkSetList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlMember.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlMember.setDescription('Specifies the member ports which are grouped as a trunk.')
swPortTrunkCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlState.setDescription('This object determines whether the trunk setting is in enable/disable state.')
swPortTrunkMemberTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 2), )
if mibBuilder.loadTexts: swPortTrunkMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberTable.setDescription('A list of information provide a different view for member ports grouped as a trunk.')
swPortTrunkMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 2, 1), ).setIndexNames((0, "SW-TRUNK-MIB", "swPortTrunkMemberIndex"), (0, "SW-TRUNK-MIB", "swPortTrunkMemberUnitIndex"), (0, "SW-TRUNK-MIB", "swPortTrunkMemberModuleIndex"), (0, "SW-TRUNK-MIB", "swPortTrunkMemberPortIndex"))
if mibBuilder.loadTexts: swPortTrunkMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberEntry.setDescription('Each entry corresponds to a member port.')
swPortTrunkMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberIndex.setDescription('Indicates the trunk ID where the port is located.')
swPortTrunkMemberUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberUnitIndex.setDescription('Indicates the unit ID where the port is located.')
swPortTrunkMemberModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberModuleIndex.setDescription('Indicates the module ID where the port is located.')
swPortTrunkMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberPortIndex.setDescription('Indicates the port index relative to the module.')
mibBuilder.exportSymbols("SW-TRUNK-MIB", es2000=es2000, swPortTrunkCtrlEntry=swPortTrunkCtrlEntry, swPortTrunkCtrlMasterPort=swPortTrunkCtrlMasterPort, TrunkSetList=TrunkSetList, swL2Mgmt=swL2Mgmt, marconi=marconi, marconi_mgmt=marconi_mgmt, swPortTrunkMemberModuleIndex=swPortTrunkMemberModuleIndex, golfcommon=golfcommon, dlink=dlink, swPortTrunkCtrlState=swPortTrunkCtrlState, swPortTrunkCtrlIndex=swPortTrunkCtrlIndex, swPortTrunkMemberPortIndex=swPortTrunkMemberPortIndex, swPortTrunkMemberEntry=swPortTrunkMemberEntry, golfproducts=golfproducts, swPortTrunkCtrlName=swPortTrunkCtrlName, swPortTrunkCtrlAnchorPort=swPortTrunkCtrlAnchorPort, swPortTrunk=swPortTrunk, systems=systems, swPortTrunkMemberUnitIndex=swPortTrunkMemberUnitIndex, golf=golf, external=external, swPortTrunkCtrlTable=swPortTrunkCtrlTable, dlinkcommon=dlinkcommon, swPortTrunkMemberIndex=swPortTrunkMemberIndex, swPortTrunkMemberTable=swPortTrunkMemberTable, swPortTrunkCtrlMember=swPortTrunkCtrlMember, es2000Mgmt=es2000Mgmt)
