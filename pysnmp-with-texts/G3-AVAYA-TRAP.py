#
# PySNMP MIB module G3-AVAYA-TRAP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G3-AVAYA-TRAP
# Produced by pysmi-0.3.4 at Wed May  1 13:17:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
g3alarmsAlarmNumber, g3restartUnavailable, g3restartInterchange, g3vintageSpeBupID, g3alarmsAlarmType, g3extdevID, g3clientExternalName, g3extdevAltName, g3_products, g3alarmsMaintName, g3alarmsOnBrd, g3extdevBuilding, g3vintageSpeAupID, g3vintageSpeArelease, g3restartCraftDemand, g3restartEscalated, g3restartCarrier, g3extdevDescription, g3restartDateTime, g3alarmsPort, g3extdevAddress, g3alarmsProductID, g3restartLevel, g3restartCause, g3vintageSpeBrelease = mibBuilder.importSymbols("G3-AVAYA-MIB", "g3alarmsAlarmNumber", "g3restartUnavailable", "g3restartInterchange", "g3vintageSpeBupID", "g3alarmsAlarmType", "g3extdevID", "g3clientExternalName", "g3extdevAltName", "g3-products", "g3alarmsMaintName", "g3alarmsOnBrd", "g3extdevBuilding", "g3vintageSpeAupID", "g3vintageSpeArelease", "g3restartCraftDemand", "g3restartEscalated", "g3restartCarrier", "g3extdevDescription", "g3restartDateTime", "g3alarmsPort", "g3extdevAddress", "g3alarmsProductID", "g3restartLevel", "g3restartCause", "g3vintageSpeBrelease")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
IpAddress, iso, ObjectIdentity, MibIdentifier, Gauge32, Integer32, TimeTicks, NotificationType, Counter32, Bits, NotificationType, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "ObjectIdentity", "MibIdentifier", "Gauge32", "Integer32", "TimeTicks", "NotificationType", "Counter32", "Bits", "NotificationType", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,0)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"))
if mibBuilder.loadTexts: alarmClear.setDescription('A Cleared Alarm Notification has been issued by the switch indicating that all alarms have been cleared.')
alarmCritical = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,1)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"), ("G3-AVAYA-MIB", "g3alarmsPort"), ("G3-AVAYA-MIB", "g3alarmsMaintName"), ("G3-AVAYA-MIB", "g3alarmsOnBrd"), ("G3-AVAYA-MIB", "g3alarmsAlarmType"))
if mibBuilder.loadTexts: alarmCritical.setDescription('This trap is defined for future use.')
alarmMajor = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,2)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"), ("G3-AVAYA-MIB", "g3alarmsPort"), ("G3-AVAYA-MIB", "g3alarmsMaintName"), ("G3-AVAYA-MIB", "g3alarmsOnBrd"), ("G3-AVAYA-MIB", "g3alarmsAlarmType"))
if mibBuilder.loadTexts: alarmMajor.setDescription('A Major alarm has been issued by the switch. The MIB variables provide attributes of the alarm. The information contained in the g3alarmsPort, g3alarmsMaintName, g3alarmsOnBrd trap variables differ depending on the kind of alarm. If the alarm is a voice server alarm these fields contain, respectively, an equipment location, maintenance object name, and flag indicating whether or not the alarm was on-board. For server platform alarms and messaging alarms these fields contain, respectively, an alarm description including the source of the alarm, a string indicating the resource from which the alarm was generated, and an event ID associated with that resource. More details on the contents of these fields can be found in the appropriate product maintenance documentation.')
alarmMinor = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,3)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"), ("G3-AVAYA-MIB", "g3alarmsPort"), ("G3-AVAYA-MIB", "g3alarmsMaintName"), ("G3-AVAYA-MIB", "g3alarmsOnBrd"), ("G3-AVAYA-MIB", "g3alarmsAlarmType"))
if mibBuilder.loadTexts: alarmMinor.setDescription('A Minor alarm has been issued by the switch. The fields in this trap type has the same differences, for g3alarmsPort, g3alarmsMaintName, and g3alarmsOnBrd, as described above for the alarmMajor trap type.')
alarmWarning = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,4)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"), ("G3-AVAYA-MIB", "g3alarmsPort"), ("G3-AVAYA-MIB", "g3alarmsMaintName"), ("G3-AVAYA-MIB", "g3alarmsOnBrd"), ("G3-AVAYA-MIB", "g3alarmsAlarmType"))
if mibBuilder.loadTexts: alarmWarning.setDescription('A Warning alarm has been issued by the switch. The fields in this trap type has the same differences, for g3alarmsPort, g3alarmsMaintName, and g3alarmsOnBrd, as described above for the alarmMajor trap type.')
alarmResolved = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,12)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"), ("G3-AVAYA-MIB", "g3alarmsPort"), ("G3-AVAYA-MIB", "g3alarmsMaintName"), ("G3-AVAYA-MIB", "g3alarmsOnBrd"), ("G3-AVAYA-MIB", "g3alarmsAlarmType"))
if mibBuilder.loadTexts: alarmResolved.setDescription('An alarm has been resolved on the switch. The fields in this trap type has the same differences, for g3alarmsPort, g3alarmsMaintName, and g3alarmsOnBrd, as described above for the alarmMajor trap type.')
extalarmMajor = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,5)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"), ("G3-AVAYA-MIB", "g3alarmsPort"), ("G3-AVAYA-MIB", "g3alarmsMaintName"), ("G3-AVAYA-MIB", "g3alarmsOnBrd"), ("G3-AVAYA-MIB", "g3alarmsAlarmType"), ("G3-AVAYA-MIB", "g3extdevAltName"), ("G3-AVAYA-MIB", "g3extdevDescription"), ("G3-AVAYA-MIB", "g3extdevID"), ("G3-AVAYA-MIB", "g3extdevBuilding"), ("G3-AVAYA-MIB", "g3extdevAddress"))
if mibBuilder.loadTexts: extalarmMajor.setDescription('An external device Major alarm has been issued by the switch. The variables describe the location and nature of the alarm. This trap type only applies to voice server alarms.')
extalarmMinor = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,6)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"), ("G3-AVAYA-MIB", "g3alarmsPort"), ("G3-AVAYA-MIB", "g3alarmsMaintName"), ("G3-AVAYA-MIB", "g3alarmsOnBrd"), ("G3-AVAYA-MIB", "g3alarmsAlarmType"), ("G3-AVAYA-MIB", "g3extdevAltName"), ("G3-AVAYA-MIB", "g3extdevDescription"), ("G3-AVAYA-MIB", "g3extdevID"), ("G3-AVAYA-MIB", "g3extdevBuilding"), ("G3-AVAYA-MIB", "g3extdevAddress"))
if mibBuilder.loadTexts: extalarmMinor.setDescription('An external device Minor alarm has been issued by the switch. The variables describe the location and nature of the alarm. This trap type only applies to voice server alarms.')
alarmDispatch = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,7)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"))
if mibBuilder.loadTexts: alarmDispatch.setDescription('INADS has dispatched the alarm.')
alarmClose = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,8)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"))
if mibBuilder.loadTexts: alarmClose.setDescription('INADS has closed the alarm.')
alarmRestart = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,9)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"), ("G3-AVAYA-MIB", "g3restartDateTime"), ("G3-AVAYA-MIB", "g3restartLevel"), ("G3-AVAYA-MIB", "g3restartCarrier"), ("G3-AVAYA-MIB", "g3restartCraftDemand"), ("G3-AVAYA-MIB", "g3restartEscalated"), ("G3-AVAYA-MIB", "g3restartInterchange"), ("G3-AVAYA-MIB", "g3restartUnavailable"), ("G3-AVAYA-MIB", "g3restartCause"), ("G3-AVAYA-MIB", "g3vintageSpeArelease"), ("G3-AVAYA-MIB", "g3vintageSpeBrelease"), ("G3-AVAYA-MIB", "g3vintageSpeAupID"), ("G3-AVAYA-MIB", "g3vintageSpeBupID"))
if mibBuilder.loadTexts: alarmRestart.setDescription('A system restart has occurred on the switch. The variables describe the location and nature of the restart.')
alarmNak = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,10)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"))
if mibBuilder.loadTexts: alarmNak.setDescription('A NAK was received in an attempt to forward the alarm to INADS.')
alarmNoAck = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,11)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"), ("G3-AVAYA-MIB", "g3alarmsProductID"), ("G3-AVAYA-MIB", "g3alarmsAlarmNumber"))
if mibBuilder.loadTexts: alarmNoAck.setDescription('A response other than an ACK or NAK was received in an attempt to forward the alarm to INADS.')
connectOther = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,101)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"))
if mibBuilder.loadTexts: connectOther.setDescription('The connection status of the PBX/ECS has changed to OTHER. This status indicates that the connect is in an unknown state.')
connectOff = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,102)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"))
if mibBuilder.loadTexts: connectOff.setDescription('The connection status of the PBX/ECS has changed to OFF. This status indicates that user set the connection state to off so that the Proxy Agent will not start up a connection with the PBX/ECS.')
connectDown = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,103)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"))
if mibBuilder.loadTexts: connectDown.setDescription('The connection status of the PBX/ECS has changed to DOWN. This status indicates that the Proxy Agent attempted to establish a connection with the PBX/ECS and failed.')
connectInit = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,104)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"))
if mibBuilder.loadTexts: connectInit.setDescription('The connection status of the PBX/ECS has changed to INIT. This status indicates that the Proxy Agent is in the process of attempting to connect to the PBX/ECS.')
connectUp = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,105)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"))
if mibBuilder.loadTexts: connectUp.setDescription('The connection status of the PBX/ECS has changed to UP. This status indicates that the Proxy Agent has a connection established with the PBX/ECS.')
connectIdle = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,106)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"))
if mibBuilder.loadTexts: connectIdle.setDescription("The connection status of the PBX/ECS has changed to IDLE. This status indicates that a connection with the PBX/ECS is currently inactive due to the dynamic timeout having been reached without any activity. The connection will stay in the IDLE state until an SNMP request or alarm is received. This connection status only applies if the connection type is 'dynamic'.")
connectMax = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,110)).setObjects(("G3-AVAYA-MIB", "g3clientExternalName"))
if mibBuilder.loadTexts: connectMax.setDescription('The connection to a PBX/ECS could not be established due to the maximum allowed number of simultaneous connections already being active.')
proxyDown = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,150)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: proxyDown.setDescription('The user has issued a stop proxy-agent command to bring down the Proxy Agent.')
proxyUp = NotificationType((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1) + (0,151)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: proxyUp.setDescription('The user has issued a start proxy-agent command to bring up the Proxy Agent.')
mibBuilder.exportSymbols("G3-AVAYA-TRAP", connectDown=connectDown, alarmCritical=alarmCritical, alarmResolved=alarmResolved, proxyDown=proxyDown, connectMax=connectMax, proxyUp=proxyUp, connectOther=connectOther, alarmMajor=alarmMajor, alarmMinor=alarmMinor, alarmWarning=alarmWarning, connectOff=connectOff, alarmRestart=alarmRestart, connectUp=connectUp, connectIdle=connectIdle, alarmDispatch=alarmDispatch, extalarmMajor=extalarmMajor, extalarmMinor=extalarmMinor, alarmClose=alarmClose, alarmNoAck=alarmNoAck, connectInit=connectInit, alarmNak=alarmNak, alarmClear=alarmClear)
