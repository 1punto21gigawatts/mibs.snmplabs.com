#
# PySNMP MIB module HH3C-COMMON-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-COMMON-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:25:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
hh3cSystem, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cSystem")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, IpAddress, MibIdentifier, Unsigned32, iso, Gauge32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "IpAddress", "MibIdentifier", "Unsigned32", "iso", "Gauge32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Integer32", "Counter64")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
hh3cWriteConfig = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWriteConfig.setStatus('current')
if mibBuilder.loadTexts: hh3cWriteConfig.setDescription('Write config to router.')
hh3cStartFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cStartFtpServer.setStatus('current')
if mibBuilder.loadTexts: hh3cStartFtpServer.setDescription('Decide whether start ftp-server.enable(1) indicates to start ftp-server; disable(2) indicates to stop ftp-server.')
hh3cReboot = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cReboot.setStatus('current')
if mibBuilder.loadTexts: hh3cReboot.setDescription('Reboot router.')
hh3cSystemNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 6, 8))
hh3cWriteSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 6, 8, 1))
if mibBuilder.loadTexts: hh3cWriteSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cWriteSuccessTrap.setDescription('send a trap about write success.')
hh3cWriteFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 6, 8, 2))
if mibBuilder.loadTexts: hh3cWriteFailureTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cWriteFailureTrap.setDescription('send a trap about write failure.')
hh3cRebootSendTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 6, 8, 3))
if mibBuilder.loadTexts: hh3cRebootSendTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cRebootSendTrap.setDescription("When users restart the device with command 'reboot', this trap will be sent two seconds before the device reboots.")
hh3cSysColdStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 6, 8, 4))
if mibBuilder.loadTexts: hh3cSysColdStartTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cSysColdStartTrap.setDescription('A system cold start trap.')
hh3cSysWarmStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 6, 8, 5))
if mibBuilder.loadTexts: hh3cSysWarmStartTrap.setStatus('current')
if mibBuilder.loadTexts: hh3cSysWarmStartTrap.setDescription('A system warm start trap.')
hh3cSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: hh3cSoftwareVersion.setDescription('Software version.')
hh3cSysBootType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coldStart", 1), ("warmStart", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysBootType.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBootType.setDescription('The boot type of the system whether the last device reboot was by CLI (warm start) or power off (cold start).')
hh3cSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 6, 11))
hh3cSysStatisticPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysStatisticPeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cSysStatisticPeriod.setDescription('The statistic period. The device collects statistics within the period.')
hh3cSysSamplePeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysSamplePeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSamplePeriod.setDescription('The sampling period. The device takes samples periodically for statistics collection.')
hh3cSysTrapResendPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysTrapResendPeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cSysTrapResendPeriod.setDescription('The trap resending period. If the value is zero, the trap will not be re-sent.')
hh3cSysTrapCollectionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysTrapCollectionPeriod.setStatus('current')
if mibBuilder.loadTexts: hh3cSysTrapCollectionPeriod.setDescription('The trap collecting period. If the value is zero, the trap will not be re-sent.')
hh3cSysSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysSnmpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSnmpPort.setDescription('UDP port for SNMP protocol entity to receive messages except Trap-PDU.')
hh3cSysSnmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysSnmpTrapPort.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSnmpTrapPort.setDescription('UDP port for Trap-PDU to receive messages.')
hh3cSysNetID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 11, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysNetID.setStatus('current')
if mibBuilder.loadTexts: hh3cSysNetID.setDescription('The system Net ID.')
hh3cSysLastSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 6, 11, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysLastSampleTime.setStatus('current')
if mibBuilder.loadTexts: hh3cSysLastSampleTime.setDescription('The last sample local time of the system.')
mibBuilder.exportSymbols("HH3C-COMMON-SYSTEM-MIB", hh3cSysStatisticPeriod=hh3cSysStatisticPeriod, hh3cSysWarmStartTrap=hh3cSysWarmStartTrap, hh3cSysSamplePeriod=hh3cSysSamplePeriod, hh3cRebootSendTrap=hh3cRebootSendTrap, hh3cSysSnmpPort=hh3cSysSnmpPort, hh3cWriteFailureTrap=hh3cWriteFailureTrap, hh3cWriteConfig=hh3cWriteConfig, hh3cSysTrapCollectionPeriod=hh3cSysTrapCollectionPeriod, hh3cSoftwareVersion=hh3cSoftwareVersion, hh3cSysLastSampleTime=hh3cSysLastSampleTime, hh3cSysSnmpTrapPort=hh3cSysSnmpTrapPort, hh3cWriteSuccessTrap=hh3cWriteSuccessTrap, hh3cSysNetID=hh3cSysNetID, hh3cStartFtpServer=hh3cStartFtpServer, hh3cSystemInfo=hh3cSystemInfo, hh3cSysColdStartTrap=hh3cSysColdStartTrap, hh3cReboot=hh3cReboot, hh3cSysTrapResendPeriod=hh3cSysTrapResendPeriod, hh3cSysBootType=hh3cSysBootType, hh3cSystemNotification=hh3cSystemNotification)
