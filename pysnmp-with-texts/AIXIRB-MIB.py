#
# PySNMP MIB module AIXIRB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIXIRB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, Integer32, Counter64, Unsigned32, ObjectIdentity, IpAddress, enterprises, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "Integer32", "Counter64", "Unsigned32", "ObjectIdentity", "IpAddress", "enterprises", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Counter32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiSLC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16))
aiXirb = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 16, 5))
if mibBuilder.loadTexts: aiXirb.setLastUpdated('0006201510Z')
if mibBuilder.loadTexts: aiXirb.setOrganization('Applied Innovation Inc.')
if mibBuilder.loadTexts: aiXirb.setContactInfo(' Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, OH 43016-3271 Tel: 614/798-2000 Fax: 614/798-1770 E-mail: snmp@aiinet.com')
if mibBuilder.loadTexts: aiXirb.setDescription('SLC MIB for misc. TCP options and passive/extended link settings')
aiXirbSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 1))
aiXirbTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 2))
aiXirbTcpWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ws200", 1), ("ws512", 2), ("ws1024", 3), ("ws2048", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbTcpWindowSize.setStatus('current')
if mibBuilder.loadTexts: aiXirbTcpWindowSize.setDescription('Default window size for TCP connections. Current connections will maintain their current window sizes, but new connections will use the updated window size.')
aiXirbTcpSendAhead = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbTcpSendAhead.setStatus('current')
if mibBuilder.loadTexts: aiXirbTcpSendAhead.setDescription('Indicates whether or not TCP connections wait for data acknowledgment before sending more data (if disabled (1)), or send the maximum TCP window size before requiring data to be acknowledged (if enabled (2)).')
aiXirbX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 3))
aiXirbBx25CallDown = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbBx25CallDown.setStatus('current')
if mibBuilder.loadTexts: aiXirbBx25CallDown.setDescription('If set to off(2), a passive link will stay up after all calls are disconnected. If set to on(1), a passive link will drop and go into DMLOCK (see aiXirbBx25DMlock below) when all the incomming calls are terminated. This object is meaningful only when aiLinkX25LinkMode is set to passive(2) on a given link')
aiXirbBx25DMlock = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 6000000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbBx25DMlock.setStatus('current')
if mibBuilder.loadTexts: aiXirbBx25DMlock.setDescription('The number of seconds to wait for after a link has gone inactive before allowing an outgoing call to attemp to bring up the link. Any outgoing call attempts will be rejected until the DMLOCK timer expires and the passive link returns to the standby mode. This object is meaningful only when aiLinkX25LinkMode is set to passive(2) on a given link')
aiXirbBx25LinkUp = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 6000000)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbBx25LinkUp.setStatus('current')
if mibBuilder.loadTexts: aiXirbBx25LinkUp.setDescription('The number of seconds to wait for a passive link to become active. This object is meaningful only when aiLinkX25LinkMode is set to passive(2) on a given link')
aiXirbCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 4))
aiXirbCpuStatsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiXirbCpuStatsCurrent.setStatus('current')
if mibBuilder.loadTexts: aiXirbCpuStatsCurrent.setDescription('This indicates the average of percentage CPU utilization during last 60 seconds')
aiXirbCpuStatsMax = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiXirbCpuStatsMax.setStatus('current')
if mibBuilder.loadTexts: aiXirbCpuStatsMax.setDescription('This shows the maximum percentage CPU utilization during last 24 hours. This value is calculated from the average CPU utilization information which is found every 60 seconds.')
aiXirbCpuStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbCpuStatsReset.setStatus('current')
if mibBuilder.loadTexts: aiXirbCpuStatsReset.setDescription('This resets the CPU utilization statistics')
aiXirbEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 5))
aiXirbPpc10BaseT = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbPpc10BaseT.setStatus('current')
if mibBuilder.loadTexts: aiXirbPpc10BaseT.setDescription('Determines whether the front panel 10 BaseT interface is enabled or not on - to enable the 10 BaseT interface off - to disable the 10 BaseT interface')
aiXirb10BaseTDuplex = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirb10BaseTDuplex.setStatus('current')
if mibBuilder.loadTexts: aiXirb10BaseTDuplex.setDescription('For AIwan only. Setting this to full(1) puts the AIwan Ethernet interface into Full Duplex mode (sends and receives simultaneously). Setting this to half(2) puts the AIwan Ethernet interface into Half Duplex mode (sends OR receives, but not simultaneously -- this means that collisions are possible). In general, half duplex works fine for switches AND hubs, whereas full duplex mode should only be used with switches or other interfaces that are full duplex capable.')
mibBuilder.exportSymbols("AIXIRB-MIB", aiXirb10BaseTDuplex=aiXirb10BaseTDuplex, aiXirbCpuStatsReset=aiXirbCpuStatsReset, aiXirbCpuStatsCurrent=aiXirbCpuStatsCurrent, aiXirbBx25CallDown=aiXirbBx25CallDown, aiXirb=aiXirb, aiXirbCpuStats=aiXirbCpuStats, aiXirbTcpWindowSize=aiXirbTcpWindowSize, aiXirbEthernet=aiXirbEthernet, aiXirbPpc10BaseT=aiXirbPpc10BaseT, aiXirbTcpSendAhead=aiXirbTcpSendAhead, aiXirbTcp=aiXirbTcp, aiXirbBx25LinkUp=aiXirbBx25LinkUp, aiXirbSystem=aiXirbSystem, aiSystemOID=aiSystemOID, aiXirbX25=aiXirbX25, aiXirbCpuStatsMax=aiXirbCpuStatsMax, aiXirbBx25DMlock=aiXirbBx25DMlock, PYSNMP_MODULE_ID=aiXirb, aii=aii, aiSLC2=aiSLC2)
