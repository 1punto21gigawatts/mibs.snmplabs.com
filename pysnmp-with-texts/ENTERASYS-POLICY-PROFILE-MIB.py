#
# PySNMP MIB module ENTERASYS-POLICY-PROFILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-POLICY-PROFILE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:04:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
StationAddressType, StationAddress = mibBuilder.importSymbols("ENTERASYS-UPN-TC-MIB", "StationAddressType", "StationAddress")
ifAlias, ifName = mibBuilder.importSymbols("IF-MIB", "ifAlias", "ifName")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, IpAddress, ObjectIdentity, Gauge32, Unsigned32, TimeTicks, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, Counter64, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "ObjectIdentity", "Gauge32", "Unsigned32", "TimeTicks", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "Counter64", "Integer32", "iso")
DisplayString, RowStatus, TruthValue, StorageType, RowPointer, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "StorageType", "RowPointer", "TextualConvention")
etsysPolicyProfileMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6))
etsysPolicyProfileMIB.setRevisions(('2010-08-09 15:11', '2009-04-10 12:00', '2009-04-01 13:36', '2008-02-19 14:29', '2007-03-21 21:02', '2006-06-15 20:40', '2005-05-18 20:08', '2005-03-28 15:35', '2005-03-14 21:34', '2004-08-11 15:17', '2004-05-18 17:02', '2004-04-02 20:35', '2004-03-25 18:03', '2004-02-03 22:00', '2004-02-03 15:33', '2004-01-19 21:43', '2003-11-04 17:16', '2003-02-06 22:59', '2002-09-17 14:53', '2002-07-19 13:37', '2001-06-11 20:00', '2001-01-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysPolicyProfileMIB.setRevisionsDescriptions(('Add controls for syslogEveryTime, profile visibility of syslog/trap statistics, egress-policy controls. ICMPv6 and ACL rule types added, tcp/udp rule types augmented to support IPv6 addresses.', 'Added tri-state textual convention and modified the etsysPolicyRules group to use this convention for actions which previously used EnabledStatus. Added syslog, trap, and disable-port actions to the etsysPolicyProfileTable.', 'Modified the capabilities group to support both OverwriteTci and Mirroring. A few other small corrections.', 'Capability has been added to define a packet mirroring index for frames matching a policy profile or policy rule. Further clarification is included in DESCRIPTION field of the etsysPolicyProfileMirrorIndex and etsysPolicyRuleMirrorIndex objects.', 'An additional scalar etsysPolicyRuleSylogExtendedFormat is added to configure enabling/disabling the addition of extended data to the rule-hit syslog messages. Further clarifications are included in DESCRIPTION field of the etsysPolicyRuleSylogExtendedFormat object.', 'Grammar and typographical corrections.', 'TEXTUAL-CONVENTION PolicyRFC3580MapRadiusResponseTC includes an additional option vlanTunnelAttributeWithPolicyProfile. An additional scalar etsysPolicyRFC3580MapInvalidMapping is added to detect EtsysPolicyRFC3580MapEntry discrepancies. Further clarifications are included in DESCRIPTION fields of the etsysPolicyRFC3580Map objects.', 'Additional branch etsysPolicyNotifications properly contains trap information.', 'etsysPolicyRuleStatsDroppedNotifications and etsysPolicyRuleSylogMachineReadableFormat now allow the managing entity to track missed syslog messages and to format the messages in hexadecimal. Additional capability table to detail policy rule type lengths in bits and bytes and the maximum number of rules of each rule type the agent supports. See the description of the PolicyClassificationRuleType textual convention for additional details relating to how rule-type-lengths are to be specified.', 'Updated the range for etsysPolicyProfilePriority to (0..4095). Added objects and groups related to mapping RFC3580 vlan-tunnel-attributes to PolicyProfiles. Added the etsysPolicyRuleAutoClearOnProfile, etsysPolicyRuleStatsAutoClearInterval, and etsysPolicyRuleStatsAutoClearPorts, objects. Added etsysPolicyEnabledTable to the capabilities section, in addition to reporting capabilities, it allows one to disable policy on a given port.', 'Added the etsysPolicyRuleStatsAutoClearOnLink leaf.', 'Added the etsysPolicyRuleOperPid leaf to etsysPolicyRuleTable.', 'Added capabilities objects, status for profile assignment override, dynamic profile summary list, and notification configuration for dynamic rules.', 'Replaced StationIdentifierType with StationAddressType and StationIdentifier with StationAddress to match new revision of ENTERASYS-UPN-TC-MIB.', 'Replaced StationIdentifierTypeTC with StationIdentifierType and moved it to the ENTERASYS-UPN-TC-MIB, and replaced InetAddress with StationIdentifier from the same MIB module.', 'Added PolicyClassificationRuleType TEXTUAL-CONVENTION. Added the etsysPolicyProfileOverwriteTCI and etsysPolicyProfileRulePrecedence leaves to the EtsysPolicyProfileEntry. Added the etsysPolicyRules group for accounting of policy usage. Additionally, the range syntax of several objects has been clarified. The etsysPolicyClassificationGroup and the etsysPortPolicyProfileTable have been deprecated, as they have been replaced by the etsysPolicyRulesGroup.', 'Added etsysPolicyMap object group in support of RFC 3580 and Enterasys Technical Standard TS-07.', 'Added etsysDevicePolicyProfileDefault to provide managed entities, that cannot support complete policies on a per port basis, a global policy to augment what policies they can provide on a per port basis. Added etsysPolicyCapabilities to provide management agents a straight forward method to ascertain the capabilities of the managed entity.', 'Added Port ID information in the Station table, for ease of cross reference.', 'This version incorporates enhancements to support Station based policy provisioning, as well as other UPN related enhancements.', 'This version modified the MODULE-IDENTITY statement to resolve an issue importing this MIB into some older MIB Tools. In the SEQUENCE for the etsysPortPolicyProfileTable the first object was incorrectly defined as etsysPortPolicyProfileIndex, this was corrected to read etsysPortPolicyProfileIndexType. Several misspelled words were corrected. Finally, the INDEX for the etsysPortPolicyProfileSummaryTable was corrected to index the table by policy index as well as the type of port for each entry in the table.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysPolicyProfileMIB.setLastUpdated('201008091511Z')
if mibBuilder.loadTexts: etsysPolicyProfileMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysPolicyProfileMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysPolicyProfileMIB.setDescription('This MIB module defines a portion of the SNMP enterprise MIBs under the Enterasys enterprise OID pertaining to the mapping of per user policy profiles for Enterasys network edge devices or access products.')
class PolicyProfileIDTC(TextualConvention, Integer32):
    description = 'This textual convention maps out to the possible policyProfileIndex values. It also allows for a value of zero. A value of zero (0) indicates that the given port should not follow any policy profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), )
class PortPolicyProfileIndexTypeTC(TextualConvention, Integer32):
    description = 'This textual convention maps out to the possible port types which can be used to populate the etsysPortPolicyProfileTable, and of port IDs used in the etsysStationPolicyProfileTable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ifIndex", 1), ("dot1dBasePort", 2))

class PolicyRFC3580MapRadiusResponseTC(TextualConvention, Integer32):
    description = 'This textual convention maps out to the possible, pertinent, successful, responses which may be received from the RADIUS server after a dynamic authentication attempt. PolicyProfile(1) is returned as a proprietary filter-id and has historically been used to assign a policy profile to the authenticated entity. VlanTunnelAttribute(2) is the response defined in RFC3580 and upon which further controls are applied by the etsysPolicyRFC3580Map group. A value of - vlanTunnelAttributeWithPolicyProfile(3) is an indication that both attributes are to be used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("policyProfile", 1), ("vlanTunnelAttribute", 2), ("vlanTunnelAttributeWithPolicyProfile", 3))

class VlanList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight VIDs, with the first octet specifying VID 1 through 8, the second octet specifying VID 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered VID, and the least significant bit represents the highest numbered VID. Thus, each VID is represented by a single bit within the value of this object. If that bit has a value of '1' then that VID is included in the set of VIDs; the VID is not included if its bit has a value of '0'. This OCTET STRING will always be 512 Octets in length to accommodate all possible VIDs between (1..4094). The default value of this object is a string of all zeros."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(512, 512)
    fixedLength = 512

class PolicyClassificationRuleType(TextualConvention, Integer32):
    description = 'Enumerates the possible types of classification rules which may be referenced in the etsysPolicyRuleTable. Each type has an implied length (in bytes) associated with it. Octet-strings defined as representing one of these types will be represented in Network-Byte-Order (Big Endian) if the native representation is other than octets. The managed entity MUST support sets in which the specified rule length is less than that specified by the value the entity reports in etsysPolicyRuleAttributeByteLength, so long as the associated etsysPolicyRulePrefixBits does not imply the existence of more etsysPolicyRuleData than is present (i.e. the specified length MUST be >= ((etsysPolicyRulePrefixBits+7)/8).) Additionally, the managed entity MUST return a PolicyClassificationRuleType which carries the number of octets specified by the associated etsysPolicyRuleAttributeByteLength, regardless of the number etsysPolicyRulePrefixBits. This yields a behavior in which, on some devices, a ip4Source rule may be supported with only 4 bytes of rule data (excluding the TCP/UDP source port information), while other devices may support the full syntax using all 6 bytes. macSource(1) The source MAC address in an Ethernet frame. Length is 6 bytes. macDestination(2) The destination MAC address in an Ethernet frame. Length is 6 bytes. ipxSource(3) The source address in an IPX header. Length is 4 bytes (Network prefix). ipxDestination(4) The destination address in an IPX header. Length is 4 bytes (Network prefix). ipxSourcePort(5) The source IPX port(socket) in an IPX header. Length is 2 bytes. ipxDestinationPort(6) The destination IPX port(socket) in an IPX header. Length is 2 bytes. ipxCos(7) The CoS(HopCount) field in an IPX header. Length is 1 byte. ipxType(8) The protocol type in an IPX header. Length is 1 byte. ip6Source(9) The source address in an IPv6 header, postfixed with the source port (for TCP/UDP frames). Length is 18 bytes for IPv6+TCP/UDP, or 16 bytes for IPv6. ip6Destination(10) The destination address in an IPv6 header, postfixed with the destination port (for TCP/UDP frames). Length is 18 bytes for IPv6+TCP/UDP, or 16 bytes for IPv6. ip6FlowLabel(11) The flow label field (traffic class and flow identifier) in an IPv6 header. Length is 3 bytes, as only the first 20 bits are valid and mask-able, only the data in the first 20 bits (the first five nibbles) is considered. ip4Source(12) The source address in an IPv4 header, postfixed with the source port (for TCP/UDP frames). Length is 6 bytes for IPv4+TCP/UDP, or 4 bytes for IPv4. ip4Destination(13) The destination address in an IPv4 header, postfixed with the destination port (for TCP/UDP frames). Length is 6 bytes for IPv4+TCP/UDP, or 4 bytes for IPv4. ipFragment(14) Truth value derived from the FLAGS and FRAGMENTATION_OFFSET fields of an IP header. If the MORE bit of the flags field is set, or the FRAGMENTATION_OFFSET is non-zero, the frame is fragmented. Length is 0 bytes (there is no data, only presence). udpSourcePort(15) The source UDP port(socket) in a UDP header, optionally postfixed with a source IP address. Length is 2 bytes for UDP, 6 bytes for UDP+IPv4, or 18 bytes for UDP+IPv6. udpDestinationPort(16) The destination UDP port(socket) in a UDP header, optionally postfixed with a destination IP address. Length is 2 bytes for UDP, 6 bytes for UDP+IPv4, or 18 bytes for UDP+IPv6. tcpSourcePort(17) The source TCP port(socket) in an TCP header, optionally postfixed with a source IPv4 address. Length is 2 bytes for TCP, 6 bytes for TCP+IPv4, or 18 bytes for TCP+IPv6. tcpDestinationPort(18) The destination TCP port(socket) in an TCP header, optionally postfixed with a destination IPv4 address. Length is 2 bytes for TCP, 6 bytes for TCP+IPv4, or 18 bytes for TCP+IPv6. icmpTypeCode(19) The Type and Code fields from an ICMP frame. These are encoded in 2 bytes, network-byte-order, Type in the first (left-most) byte, Code in the second byte. ipTtl(20) The TTL(HopCount) field in an IP header. Length is 1 byte. ipTos(21) The ToS(DSCP) field in an IP header. Length is 1 byte. ipType(22) The protocol type in an IP header. Length is 1 byte. icmpTypeCodeV6(23) The Type and Code fields from an ICMP frame. These are encoded in 2 bytes, network-byte-order, Type in the first (left-most) byte, Code in the second byte. For ICMPv6, which redefines the types and codes. etherType(25) The type field in an Ethernet II frame. Length is 2 bytes. llcDsapSsap(26) The DSAP/SSAP/CTRL field in an LLC encapsulated frame, includes SNAP encapsulated frames and the associated Ethernet II type field. Length is 5 bytes. vlanId(27) The 12 bit Virtual LAN ID field present in an 802.1D Tagged frame. Length is 2 bytes, the field is represented in the FIRST (left-most, big-endian) 12 bits of the 16 bit field. A vlanId of 1 would be encoded as 00-10, a vlanId of 4094 would be encoded as FF-E0, and a vlanId of 100 would be encoded as 06-40. ieee8021dTci(28) The entire 16 bit TCI field present in an 802.1D Tagged frame (include both VLAN ID and Priority bits. Length is 2 bytes. acl(30) A numbered ACL, represented by a 4 byte integer value. This is not maskable. bridgePort(31) The dot1dBasePort on which the frame was received. Length is 2 bytes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31))
    namedValues = NamedValues(("macSource", 1), ("macDestination", 2), ("ipxSource", 3), ("ipxDestination", 4), ("ipxSourcePort", 5), ("ipxDestinationPort", 6), ("ipxCos", 7), ("ipxType", 8), ("ip6Source", 9), ("ip6Destination", 10), ("ip6FlowLabel", 11), ("ip4Source", 12), ("ip4Destination", 13), ("ipFragment", 14), ("udpSourcePort", 15), ("udpDestinationPort", 16), ("tcpSourcePort", 17), ("tcpDestinationPort", 18), ("icmpTypeCode", 19), ("ipTtl", 20), ("ipTos", 21), ("ipType", 22), ("icmpTypeCodeV6", 23), ("etherType", 25), ("llcDsapSsap", 26), ("vlanId", 27), ("ieee8021dTci", 28), ("acl", 30), ("bridgePort", 31))

class PolicyRulesSupported(TextualConvention, Bits):
    description = 'Enumerates the possible types of classification rules which may be supported. macSource(1) The source MAC address in an Ethernet frame. macDestination(2) The destination MAC address in an Ethernet frame. ipxSource(3) The source address in an IPX header. ipxDestination(4) The destination address in an IPX header. ipxSourcePort(5) The source IPX port(socket) in an IPX header. ipxDestinationPort(6) The destination IPX port(socket) in an IPX header. ipxCos(7) The CoS(HopCount) field in an IPX header. ipxType(8) The protocol type in an IPX header. ip6Source(9) The source address in an IPv6 header, postfixed with the source port (for TCP/UDP frames). ip6Destination(10) The destination address in an IPv6 header, postfixed with the destination port (for TCP/UDP frames). ip6FlowLabel(11) The flow label field (traffic class and flow identifier) in an IPv6 header. ip4Source(12) The source address in an IPv4 header, postfixed with the source port (for TCP/UDP frames). ip4Destination(13) The destination address in an IPv4 header, postfixed with the destination port (for TCP/UDP frames). ipFragment(14) Truth value derived from the FLAGS and FRAGMENTATION_OFFSET fields of an IP header. If the MORE bit of the flags field is set, or the FRAGMENTATION_OFFSET is non-zero, the frame is fragmented. udpSourcePort(15) The source UDP port(socket) in a UDP header. udpDestinationPort(16) The destination UDP port(socket) in a UDP header. tcpSourcePort(17) The source TCP port(socket) in an TCP header. tcpDestinationPort(18) The destination TCP port(socket) in an TCP header. icmpTypeCode(19) The Type and Code fields from an ICMP frame. ipTtl(20) The TTL(HopCount) field in an IP header. ipTos(21) The ToS(DSCP) field in an IP header. ipType(22) The protocol type in an IP header. icmpTypeCodeV6(23) The Type and Code fields from an ICMPv6 frame. etherType(25) The type field in an Ethernet II frame. llcDsapSsap(26) The DSAP/SSAP/CTRL field in an LLC encapsulated frame, includes SNAP encapsulated frames and the associated Ethernet II type field. vlanId(27) The 12 bit Virtual LAN ID field present in an 802.1D Tagged frame. ieee8021dTci(28) The entire 16 bit TCI field present in an 802.1D Tagged frame (include both VLAN ID and Priority bits. acl(30) A number ACL list to which the frame is applied. bridgePort(31) The dot1dBasePort on which the frame was received.'
    status = 'current'
    namedValues = NamedValues(("macSource", 1), ("macDestination", 2), ("ipxSource", 3), ("ipxDestination", 4), ("ipxSourcePort", 5), ("ipxDestinationPort", 6), ("ipxCos", 7), ("ipxType", 8), ("ip6Source", 9), ("ip6Destination", 10), ("ip6FlowLabel", 11), ("ip4Source", 12), ("ip4Destination", 13), ("ipFragment", 14), ("udpSourcePort", 15), ("udpDestinationPort", 16), ("tcpSourcePort", 17), ("tcpDestinationPort", 18), ("icmpTypeCode", 19), ("ipTtl", 20), ("ipTos", 21), ("ipType", 22), ("icmpTypeCodeV6", 23), ("etherType", 25), ("llcDsapSsap", 26), ("vlanId", 27), ("ieee8021dTci", 28), ("acl", 30), ("bridgePort", 31))

class TriStateStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object. enabled(1) indicates the action will occur disabled(2) indicates no action will be asserted prohibited(3) indicates the action will be prevented from occurring This is useful (over and above the standard EnabledStatus TC) in the context of hierachical decision trees, whereby a decision to prevent an action may revoke another, lower precedent decision to take the action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("prohibited", 3))

etsysPolicyNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 0))
etsysPolicyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1))
etsysPolicyClassification = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2))
etsysPortPolicyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3))
etsysPolicyVlanEgress = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 4))
etsysStationPolicyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5))
etsysInvalidPolicyPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 6))
etsysDevicePolicyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 8))
etsysPolicyCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9))
etsysPolicyMap = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10))
etsysPolicyRules = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11))
etsysPolicyRFC3580Map = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12))
etsysPolicyRulePortHitNotification = NotificationType((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 0, 1)).setObjects(("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHit"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileName"))
if mibBuilder.loadTexts: etsysPolicyRulePortHitNotification.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulePortHitNotification.setDescription('This notification indicates that a policy rule has matched network traffic on a particular port.')
etsysPolicyProfileMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyProfileMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileMaxEntries.setDescription('The maximum number of entries allowed in the etsysPolicyProfileTable.')
etsysPolicyProfileNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyProfileNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileNumEntries.setDescription('The current number of entries in the etsysPolicyProfileTable.')
etsysPolicyProfileLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyProfileLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileLastChange.setDescription('The sysUpTime at which the etsysPolicyProfileTable was last modified.')
etsysPolicyProfileTableNextAvailableIndex = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyProfileTableNextAvailableIndex.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileTableNextAvailableIndex.setDescription('This object indicates the numerically lowest available index within this entity, which may be used for the value of etsysPolicyProfileIndex in the creation of a new entry in the etsysPolicyProfileTable. An index is considered available if the index value falls within the range of 1 to 65535 and is not being used to index an existing entry in the etsysPolicyProfileTable contained within this entity. This value should only be considered a guideline for management creation of etsysPolicyProfileEntries, there is no requirement on management to create entries based upon this index value.')
etsysPolicyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5), )
if mibBuilder.loadTexts: etsysPolicyProfileTable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileTable.setDescription('A table containing policy profiles. A policy is a group of classification rules which may be applied on a per user basis, to ports or to stations.')
etsysPolicyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileIndex"))
if mibBuilder.loadTexts: etsysPolicyProfileEntry.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileEntry.setDescription('Conceptually defines a particular entry within the etsysPolicyProfileTable. Entries within this table MUST be considered non-volatile and MUST be maintained across entity resets.')
etsysPolicyProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: etsysPolicyProfileIndex.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileIndex.setDescription('A unique arbitrary identifier for this Policy. Since a policy will be applied to a user regardless of his or her location in the network fabric policy names SHOULD be unique within the entire network fabric. Policy IDs and policy names MUST be unique within the scope of a single managed entity.')
etsysPolicyProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileName.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileName.setDescription("Administratively assigned textual description of this Policy. This object MUST NOT be modifiable while this entry's RowStatus is active(1).")
etsysPolicyProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileRowStatus.setReference('RFC2579 (Textual Conventions for SMIv2)')
if mibBuilder.loadTexts: etsysPolicyProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileRowStatus.setDescription("This object allows for the dynamic creation and deletion of entries within the etsysPolicyProfileTable as well as the activation and deactivation of these entries. When this object's value is active(1) the corresponding row's etsysPolicyProfilePortVid, etsysPolicyProfilePriority, and all entries within the etsysPolicyClassificationTable indexed by this row's etsysPolicyProfileIndex are available to be applied to network access ports or stations on the managed entity. All ports corresponding to rows within the etsysPortPolicyProfileTable whose etsysPortPolicyProfileOperID is equal to the etsysPolicyProfileIndex, shall have the corresponding policy applied. Likewise, all stations corresponding to rows within the etsysStationPolicyProfileTable whose etsysStationPolicyProfileOperID is equal to the etsysPolicyProfileIndex, shall have the corresponding policy applied. The value of etsysPortPolicyProfileOperID for each such row in the etsysPortPolicyProfileTable will be equal to the etsysPortPolicyProfileAdminID, unless the authorization information from a source such as a RADIUS server indicates to the contrary. Refer to the specific objects within this MIB as well as well as RFC2674, the CTRON-PRIORITY-CLASSIFY-MIB, the CTRON-VLAN-CLASSIFY-MIB, and the CTRON-RATE-POLICING-MIB for a complete explanation of the application and behavior of these objects. When this object's value is set to notInService(2) this policy will not be applied to any rows within the etsysPortPolicyProfileTable. To allow policy profiles to be applied for security implementations, setting this object's value from active(1) to notInService(2) or destroy(6) SHALL fail if one or more instances of etsysPortPolicyProfileOperID or etsysStationPolicyProfileOperID currently reference this entry's associated policy due to a set by an underlying security protocol such as RADIUS. For network functionality and clarity, setting this object to destroy(6) SHALL fail if one or more instances of etsysPortPolicyProfileOperID or etsysStationPolicyProfileOperID currently references this entry's etsysPolicyProfileIndex. Refer to the RowStatus convention for further details on the behavior of this object.")
etsysPolicyProfilePortVidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 4), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfilePortVidStatus.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfilePortVidStatus.setDescription("This object defines whether a PVID override should be applied to ports which have this profile active. enabled(1) means that any port with this policy active will have this row's etsysPolicyProfilePortVid applied to untagged frames or priority-tagged frames received on this port. disabled(2) means that etsysPolicyProfilePortVid will not be applied. When this object is set to disabled(2) the value of etsysPolicyProfilePortVid has no meaning.")
etsysPolicyProfilePortVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfilePortVid.setReference('RFC2674 (Q-BRIDGE-MIB) - dot1qPortVlanTable')
if mibBuilder.loadTexts: etsysPolicyProfilePortVid.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfilePortVid.setDescription("This object defines the PVID of this profile. If a port has an active policy and the policy's etsysPolicyProfilePortVidStatus is set to enabled(1), the etsysPolicyProfilePortVid will be applied to all untagged frames arriving on the port that do not match any of the policy classification rules. Note that the 802.1Q PVID will still exist from a management view but will NEVER be applied to traffic arriving on a port that has an active policy and enabled etsysPolicyProfilePortVid defined, since policy is applied to traffic arriving on the port prior to the assignment of a VLAN using the 802.1Q PVID. The behavior of an enabled etsysPolicyProfilePortVid on any associated port SHALL be identical to the behavior of the dot1qPvid upon that port. Note that two special, otherwise illegal, values of the etsysPolicyProfilePortVid are used in defining the default forwarding actions, to be used in conjunction with policy classification rules, and do not result in packet tagging: 0 Indicates that the default forwarding action is to drop all packets that do not match an explicit rule. 4095 Indicates that the default forwarding action is to forward any packets not matching any explicit rules.")
etsysPolicyProfilePriorityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 6), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfilePriorityStatus.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfilePriorityStatus.setDescription('This object defines whether a Class of Service should be applied to ports which have this profile active. enabled(1) means that any port with this policy active will have etsysPolicyProfilePriority applied to this port. disabled(2) means that etsysPolicyProfilePriority will not be applied. When this object is set to disabled(2) the value of etsysPolicyProfilePriority has no meaning.')
etsysPolicyProfilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfilePriority.setReference('RFC2674 (P-BRIDGE-MIB) - dot1dPortPriorityTable')
if mibBuilder.loadTexts: etsysPolicyProfilePriority.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfilePriority.setDescription("This object defines the default ingress Class of Service of this profile. If a port has an active policy and the policy's etsysPolicyProfilePriorityStatus is set to enabled(1), the etsysPolicyProfilePriority will be applied to all packets arriving on the port that do not match any of the policy classification rules. Note that dot1dPortDefaultUserPriority will still exist from a management view but will NEVER be applied to traffic arriving on a port that has an active policy and enabled etsysPolicyProfilePriority defined, since policy is applied to traffic arriving on the port prior to the assignment of a priority using dot1dPortDefaultUserPriority. The behavior of an enabled etsysPolicyProfilePriority on any associated port SHALL be identical to the behavior of the dot1dPortDefaultUserPriority upon that port.")
etsysPolicyProfileEgressVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 8), VlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileEgressVlans.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileEgressVlans.setDescription("The set of VLANs which are assigned by this policy to egress on ports for which this policy is active. Changes to a bit in this object affect the per-port per-VLAN Registrar control for Registration Fixed for the relevant GVRP state machine on each port for which this policy is active. A VLAN may not be added in this set if it is already a member of the set of VLANs in etsysPolicyProfileForbiddenVlans. This object is superseded on a per-port per-VLAN basis by any 'set' bits in dot1qVlanStaticEgressPorts and dot1qVlanForbiddenEgressPorts. The default value of this object is a string of zeros.")
etsysPolicyProfileForbiddenVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 9), VlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileForbiddenVlans.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileForbiddenVlans.setDescription("The set of VLANs which are prohibited by this policy to egress on ports for which this policy is active. Changes to this object that cause a port to be included or excluded affect the per-port per-VLAN Registrar control for Registration Forbidden for the relevant GVRP state machine on each port for which this policy is active. A VLAN may not be added in this set if it is already a member of the set of VLANs in etsysPolicyProfileEgressVlans. This object is superseded on a per-port per-VLAN basis by any 'set' bits in the dot1qVlanStaticEgressPorts and dot1qVlanForbiddenEgressPorts. The default value of this object is a string of zeros.")
etsysPolicyProfileUntaggedVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 10), VlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileUntaggedVlans.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileUntaggedVlans.setDescription("The set of VLANs which should transmit egress packets as untagged on ports for which this policy is active. This object is superseded on a per-port per-VLAN basis by any 'set' bits in dot1qVlanStaticUntaggedPorts.")
etsysPolicyProfileOverwriteTCI = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 11), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileOverwriteTCI.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileOverwriteTCI.setDescription('If set, the information contained within the TCI field of inbound, tagged packets will not be used by the device after the ingress classification stage of packet relay. The net effect will be that the TCI information may be used to classify the packet, but will be overwritten (and ignored) by subsequent stages of packet relay.')
etsysPolicyProfileRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileRulePrecedence.setDescription('Each octet will contain a single value representing the rule type to be matched against, defined by the PolicyClassificationRuleType textual convention. When read, will return the currently operating rule matching precedence, ordered from first consulted (in the first octet) to last consulted (in the last octet). A set of a single octet of 0x00 will result in a reversion to the default precedence ordering. A set of any other values will result in the specified rule types being matched in the order specified, followed by the remaining rules, in default precedence order.')
etsysPolicyProfileVlanRFC3580Mappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 13), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyProfileVlanRFC3580Mappings.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileVlanRFC3580Mappings.setDescription('The set of VLANs which are currently being mapped onto this policy profile by the etsysPolicyRFC3580MapTable. This only refers to the mapping of vlan-tunnel-attributes returned from RADIUS in an RFC3580 context.')
etsysPolicyProfileMirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileMirrorIndex.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileMirrorIndex.setDescription('A reference to a packet mirror destination (defined elsewhere). A value of (-1) indicates no mirror is specified, but a mirror is not explicitly prohibitted. A value of (0) indicates that mirroring is explicitly prohibitted, unless a high precedent source (a rule) has specified a mirror.')
etsysPolicyProfileAuditSyslogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 15), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileAuditSyslogEnable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileAuditSyslogEnable.setDescription('Enables the sending of a syslog message if no rule bound to this profile has prohibited it.')
etsysPolicyProfileAuditTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 16), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileAuditTrapEnable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileAuditTrapEnable.setDescription('Enables the sending of a SNMP NOTIFICATION if no rule bound to this profile has prohibited it.')
etsysPolicyProfileDisablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 17), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyProfileDisablePort.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileDisablePort.setDescription('Will set the ifOperStatus of the port, on which the frame which used this profile was received, to disable, if if no rule bound to this profile has prohibited it.')
etsysPolicyProfileUsageList = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 1, 5, 1, 18), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyProfileUsageList.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileUsageList.setDescription("When read, a set bit indicates that this profile was used to send a syslog or trap message for corresponding port. When set, the native PortList will be bit-wise AND'ed with the set PortList, allowing the agent to clear the usage indication.")
etsysPolicyClassificationMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyClassificationMaxEntries.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationMaxEntries.setDescription('The maximum number of entries allowed in the etsysPolicyClassificationTable.')
etsysPolicyClassificationNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyClassificationNumEntries.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationNumEntries.setDescription('The current number of entries in the etsysPolicyClassificationTable.')
etsysPolicyClassificationLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyClassificationLastChange.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationLastChange.setDescription('The sysUpTime at which the etsysPolicyClassificationTable was last modified.')
etsysPolicyClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 4), )
if mibBuilder.loadTexts: etsysPolicyClassificationTable.setReference('CTRON-PRIORITY-CLASSIFY-MIB, CTRON-VLAN-CLASSIFY-MIB, CTRON-RATE-POLICING-MIB')
if mibBuilder.loadTexts: etsysPolicyClassificationTable.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationTable.setDescription('A table containing reference OIDs to entries within the classification tables. These classification tables include but may not be limited to: ctPriClassifyTable ctVlanClassifyTable ctRatePolicyingConfigTable This table is used to map a list of classification rules to an instance of the etsysPolicyProfileTable.')
etsysPolicyClassificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 4, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileIndex"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationIndex"))
if mibBuilder.loadTexts: etsysPolicyClassificationEntry.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationEntry.setDescription('Describes a particular entry within the etsysPolicyClassificationTable. Entries within this table MUST be considered non-volatile and MUST be maintained across entity resets.')
etsysPolicyClassificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: etsysPolicyClassificationIndex.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationIndex.setDescription('Administratively assigned unique value, greater than zero. Each etsysPolicyClassificationIndex instance MUST be unique within the scope of its associated etsysPolicyProfileIndex.')
etsysPolicyClassificationOID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 4, 1, 2), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyClassificationOID.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationOID.setDescription("This object follows the RowPointer textual convention and is an OID reference to a classification rule. This object MUST NOT be modifiable while this entry's etsysPolicyClassificationStatus object has a value of active(1).")
etsysPolicyClassificationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyClassificationRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationRowStatus.setDescription("The status of this row. When set to active(1) this entry's classification rule, as referenced by etsysPolicyClassificationOID, becomes one of its associated policy's set of rules. When this entry's associated policy, as defined by etsysPolicyProfileIndex, is active and assigned to a port through the etsysPortPolicyProfileTable or to a station through the etsysStationPolicyProfileTabbe, this classification rule will be applied to the port or station. The exact behavior of this application depends upon the classification rule. When this object is set to notInService(2) or notReady(3) this entry is not considered one of its associated policy's set of rules and this classification rule will not be applied. An entry MAY NOT be set to active(1) unless this row's etsysPolicyClassificationOID is set to a valid classification rule.")
etsysPolicyClassificationIngressList = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 2, 4, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyClassificationIngressList.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationIngressList.setDescription('The ports on which an active policy profile has defined this classification rule applies.')
etsysPortPolicyProfileLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPortPolicyProfileLastChange.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPortPolicyProfileLastChange.setDescription('sysUpTime at which the etsysPortPolicyProfileTable was last modified.')
etsysPortPolicyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 2), )
if mibBuilder.loadTexts: etsysPortPolicyProfileTable.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPortPolicyProfileTable.setDescription('This table allows for a one to one mapping between a dot1dBasePort or an ifIndex and a Policy Profile.')
etsysPortPolicyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 2, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileIndexType"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileIndex"))
if mibBuilder.loadTexts: etsysPortPolicyProfileEntry.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPortPolicyProfileEntry.setDescription('Describes a particular entry within the etsysPortPolicyProfileTable. Entries within this table MUST be considered non-volatile and MUST be maintained across entity resets.')
etsysPortPolicyProfileIndexType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 2, 1, 1), PortPolicyProfileIndexTypeTC())
if mibBuilder.loadTexts: etsysPortPolicyProfileIndexType.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPortPolicyProfileIndexType.setDescription('This object defines the specific type of port this entry represents.')
etsysPortPolicyProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: etsysPortPolicyProfileIndex.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPortPolicyProfileIndex.setDescription("An index value which represents a unique port of the type defined by this entry's etsysPortPolicyProfileIndexType.")
etsysPortPolicyProfileAdminID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 2, 1, 3), PolicyProfileIDTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPortPolicyProfileAdminID.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPortPolicyProfileAdminID.setDescription("This object represents the desired Policy Profile for this dot1dBasePort or this ifIndex. Setting this object to any value besides zero (0) should, if possible, immediately place this entry's dot1dBasePort or ifIndex into the given Policy Profile. This object and etsysPortPolicyProfileOperID may not be the same if this object is set to a Policy (i.e. an instance of the etsysPolicyProfileTable) which is not in an active state or if the etsysPortPolicyProfileOperID has been set by an underlying security protocol such as RADIUS.")
etsysPortPolicyProfileOperID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 2, 1, 4), PolicyProfileIDTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPortPolicyProfileOperID.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPortPolicyProfileOperID.setDescription("This object is the current policy which is being applied to this entry's dot1dBasePort. A value of zero(0) indicates there is no policy being applied to this dot1dBasePort or this ifIndex. If the value of this object has been set by an underlying security protocol such as RADIUS, sets to this entry's etsysPortPolicyProfileAdminID MUST NOT change the value of this object until such time as the security protocol releases this object by setting it to a value of zero (0).")
etsysPortPolicyProfileSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 3), )
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryTable.setStatus('current')
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryTable.setDescription('This table provides aggregate port information on a per policy, per port type basis.')
etsysPortPolicyProfileSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 3, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileIndex"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileSummaryIndexType"))
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryEntry.setDescription('Conceptually defines a particular entry within the etsysPortPolicyProfileSummaryTable.')
etsysPortPolicyProfileSummaryIndexType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 3, 1, 1), PortPolicyProfileIndexTypeTC())
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryIndexType.setStatus('current')
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryIndexType.setDescription('This object defines the specific type of port this entry represents.')
etsysPortPolicyProfileSummaryAdminID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryAdminID.setStatus('current')
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryAdminID.setDescription('An aggregate list of all Ports currently supporting rules which assign this profileIndex through administrative means. Rules of this type have a valid etsysPolicyRuleResult2 action and a profileIndex of 0.')
etsysPortPolicyProfileSummaryOperID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 3, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryOperID.setStatus('current')
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryOperID.setDescription('An aggregate list of all Ports currently supporting rules which assign this profileIndex through either an administrative or dynamic means. The profileId which will be assigned operationally, as frames are handled are too be reported here.')
etsysPortPolicyProfileSummaryDynamicID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 3, 3, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryDynamicID.setStatus('current')
if mibBuilder.loadTexts: etsysPortPolicyProfileSummaryDynamicID.setDescription('An aggregate list of all Ports currently supporting rules which assign this profileIndex through a dynamic means. For example the profileIndex returned via a successful 802.1X supplicant authentication.')
etsysStationPolicyProfileMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysStationPolicyProfileMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfileMaxEntries.setDescription('The maximum number of entries allowed in the etsysStationPolicyProfileTable. If this number is exceeded, based on stations connecting to the edge device, the oldest entries will be deleted.')
etsysStationPolicyProfileNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysStationPolicyProfileNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfileNumEntries.setDescription('The current number of entries in the etsysStationPolicyProfileTable.')
etsysStationPolicyProfileLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysStationPolicyProfileLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfileLastChange.setDescription('sysUpTime at which the etsysStationPolicyProfileTable was last modified.')
etsysStationPolicyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 4), )
if mibBuilder.loadTexts: etsysStationPolicyProfileTable.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfileTable.setDescription("This table allows for a one to one mapping between a station's identifying address and a Policy Profile.")
etsysStationPolicyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 4, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileIndex"))
if mibBuilder.loadTexts: etsysStationPolicyProfileEntry.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfileEntry.setDescription('Describes a particular entry within the etsysStationPolicyProfileTable. Entries within this table MUST be considered non-volatile and MUST be maintained across entity resets.')
etsysStationPolicyProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: etsysStationPolicyProfileIndex.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfileIndex.setDescription('An index value which represents a unique station entry.')
etsysStationIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 4, 1, 3), StationAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysStationIdentifierType.setStatus('current')
if mibBuilder.loadTexts: etsysStationIdentifierType.setDescription('Indicates the type of station identifying address contained in etsysStationIdentifier.')
etsysStationIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 4, 1, 4), StationAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysStationIdentifier.setStatus('current')
if mibBuilder.loadTexts: etsysStationIdentifier.setDescription('A value which represents a unique MAC Address, IP Address, or other identifying address for a station, or other logical and authenticatable sub-entity within a station, connected to a port.')
etsysStationPolicyProfileOperID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 4, 1, 5), PolicyProfileIDTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysStationPolicyProfileOperID.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfileOperID.setDescription("This object is the current policy which is being applied to this entry's MAC Address. A value of zero(0) indicates there is no policy being applied to this MAC Address. The value of this object reflects either the setting from an underlying AAA service such as RADIUS, or the default setting based on the etsysPortPolicyProfileAdminID for the port on which the station is connected. This object and the corresponding etsysPortPolicyProfileAdminID will not be the same if this object has been set by an underlying security protocol such as RADIUS.")
etsysStationPolicyProfilePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 4, 1, 6), PortPolicyProfileIndexTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysStationPolicyProfilePortType.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfilePortType.setDescription('A textual convention that defines the specific type of port designator the corresponding entry represents.')
etsysStationPolicyProfilePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysStationPolicyProfilePortID.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfilePortID.setDescription("A value which represents the physical port, of the type defined by this entry's etsysStationPolicyProfilePortType, on which the associated station entity is connected. This object is for convenience in cross referencing stations to ports.")
etsysInvalidPolicyAction = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyDefaultPolicy", 1), ("dropPackets", 2), ("forwardPackets", 3))).clone('applyDefaultPolicy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysInvalidPolicyAction.setStatus('current')
if mibBuilder.loadTexts: etsysInvalidPolicyAction.setDescription('Specifies the action that the edge device should take if asked to apply an invalid or unknown policy. applyDefaultPolicy(1) - Ignore the result and search for the next policy assignment rule. dropPackets(2) - Block traffic. forwardPackets(3) - Forward traffic, as if no policy had been assigned (via 802.1D/Q rules). Although dropPackets(2) is the most secure option, it may not always be desirable.')
etsysInvalidPolicyCount = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysInvalidPolicyCount.setStatus('current')
if mibBuilder.loadTexts: etsysInvalidPolicyCount.setDescription('Increments to indicate the number of times the device has detected an invalid/unknown policy.')
etsysDevicePolicyProfileDefault = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDevicePolicyProfileDefault.setStatus('current')
if mibBuilder.loadTexts: etsysDevicePolicyProfileDefault.setDescription('If this value is non-zero, the value indicates the etsysPolicyProfileEntry (and its associated etsysPolicyClassificationTable entries) which should be used by the device if the device is incapable of using the profile (or specific parts of the profile) explicitly applied to an inbound frame. A value of zero indicates that no default profile is currently active.')
etsysPolicyCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 1), Bits().clone(namedValues=NamedValues(("supportsVLANForwarding", 0), ("supportsPriority", 1), ("supportsPermit", 2), ("supportsDeny", 3), ("supportsDeviceLevelPolicy", 4), ("supportsPrecedenceReordering", 5), ("supportsTciOverwrite", 6), ("supportsRulesTable", 7), ("supportsRuleUseAccounting", 8), ("supportsRuleUseNotification", 9), ("supportsCoSTable", 10), ("supportsLongestPrefixRules", 11), ("supportsPortDisableAction", 12), ("supportsRuleUseAutoClearOnLink", 13), ("supportsRuleUseAutoClearOnInterval", 14), ("supportsRuleUseAutoClearOnProfile", 15), ("supportsPolicyRFC3580MapTable", 16), ("supportsPolicyEnabledTable", 17), ("supportsMirror", 18), ("supportsEgressPolicy", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyCapabilities.setDescription('A list of capabilities related to policies. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyDynaPIDRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 2), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyDynaPIDRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyDynaPIDRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of dynamically assigning a profile to the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyAdminPIDRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 3), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyAdminPIDRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyAdminPIDRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of administratively assigning a profile to the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyVlanRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 4), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyVlanRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyVlanRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of assigning a VlanId to the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyCosRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 5), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyCosRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyCosRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of assigning a CoS to the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyDropRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 6), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyDropRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyDropRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of discarding the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyForwardRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 7), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyForwardRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyForwardRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of forwarding the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicySyslogRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 8), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicySyslogRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicySyslogRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of issuing syslog messages when the rule is used to identify the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyTrapRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 9), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyTrapRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyTrapRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of issuing an SNMP notify (trap) messages when the rule is used to identify the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyDisablePortRuleCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 10), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyDisablePortRuleCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyDisablePortRuleCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of disabling the ingress port identified when the rule matches the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicySupportedPortList = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 11), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicySupportedPortList.setStatus('current')
if mibBuilder.loadTexts: etsysPolicySupportedPortList.setDescription('The list ports which support policy profile assignment (i.e. the ports which _do_ policy). This object may be useful to management entities which desire to scope action to only those ports which support policy. A port which appears in this list, must support, at minimum, the assignment of a policy profile to all traffic ingressing the port.')
etsysPolicyEnabledTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 12), )
if mibBuilder.loadTexts: etsysPolicyEnabledTable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyEnabledTable.setDescription('This table allows for the configuration of policy profile assignment methods, per port, including the ability to disable policy profile assignment, per port. In addition, a ports capabilities, with respect to policy profile assignment are reported.')
etsysPolicyEnabledTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 12, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: etsysPolicyEnabledTableEntry.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyEnabledTableEntry.setDescription('Describes a particular entry within the etsysPolicyEnabledTable.')
etsysPolicyEnabledSupportedRuleTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 12, 1, 1), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyEnabledSupportedRuleTypes.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyEnabledSupportedRuleTypes.setDescription('The list of rule types which the devices supports for the purpose of assigning policy profiles to network traffic ingressing this dot1dBasePort.')
etsysPolicyEnabledEnabledRuleTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 12, 1, 2), PolicyRulesSupported()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyEnabledEnabledRuleTypes.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyEnabledEnabledRuleTypes.setDescription('The list of rule types from which the device will assign policy profiles to network traffic ingressing this dot1dBasePort. Rules which have a type not enumerated here must not be used to assign policy profiles, but must still be used to interrogate the rule-set bound to the determined policy profile. A set of all cleared bits will effectively disable policy in the port.')
etsysPolicyEnabledEgressEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 12, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyEnabledEgressEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyEnabledEgressEnabled.setDescription('Controls the enabling and disabling the application of policy as packets egress the switching process on the dot1dBasePort specified in the indexing.')
etsysPolicyRuleAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 13), )
if mibBuilder.loadTexts: etsysPolicyRuleAttributeTable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleAttributeTable.setDescription('This table details each supported rule type attribute for rule data length in bytes, rule data length in bits, and the maximum number of rules that may use that type.')
etsysPolicyRuleAttributeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 13, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleType"))
if mibBuilder.loadTexts: etsysPolicyRuleAttributeTableEntry.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleAttributeTableEntry.setDescription('Describes a particular entry within the etsysPolicyRuleAttributeTable.')
etsysPolicyRuleAttributeByteLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRuleAttributeByteLength.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleAttributeByteLength.setDescription("This rule type's maximum length, in bytes of the etsysPolicyRuleData. Devices supporting this object MUST allow sets for this rule data of any valid length up to and including the length value represented by this object. Management entities must also expect to read back the maximum data length for each type regardless of the length the data was set with.")
etsysPolicyRuleAttributeBitLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRuleAttributeBitLength.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleAttributeBitLength.setDescription("This rule type's maximum bit length for traffic data. This value also represents the maximum mask that may be used for rule data. The mask MUST NOT exceed the rule data size. Masks that exceed the data size shall be considered invalid and result in an SNMP set failure.")
etsysPolicyRuleAttributeMaxCreatable = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRuleAttributeMaxCreatable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleAttributeMaxCreatable.setDescription('If this value is non-zero, the value indicates the maximum number of rules of this type the agent can support.')
etsysPolicyRuleTciOverwriteCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 14), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRuleTciOverwriteCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleTciOverwriteCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of overwriting the TCI in received packets described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyRuleMirrorCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 9, 15), PolicyRulesSupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRuleMirrorCapabilities.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleMirrorCapabilities.setDescription('A list of rule types which are supported by this device for the purpose of mirroring the network traffic described by the bit. A set bit, with the value 1, indicates support for the described functionality. A clear bit, with the value 0, indicates the described functionality is not supported.')
etsysPolicyMapMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyMapMaxEntries.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapMaxEntries.setDescription('This has been obsoleted.')
etsysPolicyMapNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyMapNumEntries.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapNumEntries.setDescription('This has been obsoleted.')
etsysPolicyMapLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyMapLastChange.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapLastChange.setDescription('This has been obsoleted.')
etsysPolicyMapPvidOverRide = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyMapPvidOverRide.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapPvidOverRide.setDescription('This has been obsoleted.')
etsysPolicyMapUnknownPvidPolicy = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("denyAccess", 1), ("applyDefaultPolicy", 2), ("applyPvid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyMapUnknownPvidPolicy.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapUnknownPvidPolicy.setDescription('This has been obsoleted.')
etsysPolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 6), )
if mibBuilder.loadTexts: etsysPolicyMapTable.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapTable.setDescription('This has been obsoleted.')
etsysPolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 6, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapIndex"))
if mibBuilder.loadTexts: etsysPolicyMapEntry.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapEntry.setDescription('This has been obsoleted.')
etsysPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: etsysPolicyMapIndex.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapIndex.setDescription('This has been obsoleted.')
etsysPolicyMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyMapRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapRowStatus.setDescription('This has been obsoleted.')
etsysPolicyMapStartVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyMapStartVid.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapStartVid.setDescription('This has been obsoleted.')
etsysPolicyMapEndVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyMapEndVid.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapEndVid.setDescription('This has been obsoleted.')
etsysPolicyMapPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 10, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyMapPolicyIndex.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapPolicyIndex.setDescription('This has been obsoleted.')
etsysPolicyRulesMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRulesMaxEntries.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulesMaxEntries.setDescription('The maximum number of entries allowed in the etsysPolicyRulesTable.')
etsysPolicyRulesNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRulesNumEntries.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulesNumEntries.setDescription('The current number of entries in the etsysPolicyRulesTable.')
etsysPolicyRulesLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRulesLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulesLastChange.setDescription('The sysUpTime at which the etsysPolicyRulesTable was last modified.')
etsysPolicyRulesAccountingEnable = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 4), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRulesAccountingEnable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulesAccountingEnable.setDescription('Controls the collection of rule usage statistics. If disabled, no usage statistics are gathered and no auditing messages will be sent. When enabled, rule will gather usage statistics, and auditing messages will be sent, if enabled for a given rule.')
etsysPolicyRulesPortDisabledList = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRulesPortDisabledList.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulesPortDisabledList.setDescription('A portlist containing bits representing the dot1dBridgePorts which have been disabled via the mechanism described in the etsysPolicyRuleDisablePort leaf. A set bit indicates a disabled port. Ports may be enabled by performing a set with the corresponding bit cleared. Bits which are set will be ignored during the set operation.')
etsysPolicyRuleTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6), )
if mibBuilder.loadTexts: etsysPolicyRuleTable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleTable.setDescription('A table containing rules bound to individual policies. A Rule is comprised of three components, a unique description of the network traffic, an associated list of actions, and an associated list of accounting and auditing controls and information. The unique description of the network traffic, defined by a PolicyClassificationRuleType together with a length, matching data and a relevant bits field, port type, and port number (port number zero is reserved to mean any port), and scoped by a etsysPolicyProfileIndex, is used as the table index.')
etsysPolicyRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleProfileIndex"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleType"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleData"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePrefixBits"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortType"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePort"))
if mibBuilder.loadTexts: etsysPolicyRuleEntry.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleEntry.setDescription('Describes a particular entry within the etsysPolicyRuleTable. Entries within this table MUST be considered non-volatile and MUST be maintained across entity resets.')
etsysPolicyRuleProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), )))
if mibBuilder.loadTexts: etsysPolicyRuleProfileIndex.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleProfileIndex.setDescription('The etsysPolicyProfileIndex for which the rule is defined. A value of zero(0) has special meaning in that it scopes rules which are used to determine the Policy Profile to which the frame belongs. See the etsysPolicyRuleResult1 and etsysPolicyRuleResult2 descriptions for specifics of how the results of a rule hit differ when the etsysPolicyRuleProfileIndex is zero.')
etsysPolicyRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 2), PolicyClassificationRuleType())
if mibBuilder.loadTexts: etsysPolicyRuleType.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleType.setDescription('The type of network traffic reference by the etsysPolicyRuleData.')
etsysPolicyRuleData = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: etsysPolicyRuleData.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleData.setDescription('The data pattern to match against, as defined by the etsysPolicyRuleType, encoded in network-byte order.')
etsysPolicyRulePrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2048), )))
if mibBuilder.loadTexts: etsysPolicyRulePrefixBits.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulePrefixBits.setDescription('The relevant number of bits defined by the etsysPolicyRuleData, to be used when matching against a frame, relevant bits are specified in longest-prefix-first style (left to right). A value of zero carries the special meaning of all bits are relevant.')
etsysPolicyRulePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 5), PortPolicyProfileIndexTypeTC())
if mibBuilder.loadTexts: etsysPolicyRulePortType.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulePortType.setDescription('The port number on which the rule will be applied. Zero(0) is a special case, indicating that the rule should be applied to all ports.')
etsysPolicyRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )))
if mibBuilder.loadTexts: etsysPolicyRulePort.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulePort.setDescription('The port number on which the rule will be applied. Zero(0) is a special case, indicating that the rule should be applied to all ports.')
etsysPolicyRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleRowStatus.setDescription("The status of this row. When set to active(1) this entry's classification rule, as referenced by etsysPolicyRulesOID, becomes one of its associated policy's set of rules. When this entry's associated policy, as defined by etsysPolicyRuleProfileIndex, is active and assigned to a port through the etsysPortPolicyProfileTable or to a station through the etsysStationPolicyProfileTabbe, this classification rule will be applied to the port or station. The exact behavior of this application depends upon the classification rule. When this object is set to notInService(2) or notReady(3) this entry is not considered one of its associated policy's set of rules and this classification rule will not be applied.")
etsysPolicyRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleStorageType.setDescription("The storage type of this row. When set to volatile(1) this entry's classification rule, as referenced by etsysPolicyRulesOID, will be removed (if present) from non-volatile storage. Rows created dynamically by the device will typically report this as their default storage type. When set to nonVolatile(1) this entry's classification rule, as referenced by etsysPolicyRulesOID, will be added to non- volatile storage. This is the default value for rows created as the result of external management. Values of other(0), permanent(4), and readOnly(5) may not be set, although they may be returned for rows created by the device.")
etsysPolicyRuleUsageList = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 9), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleUsageList.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleUsageList.setDescription("When read, a set bit indicates that this rule was used to classify traffic on the corresponding port. When set, the native PortList will be bit-wise AND'ed with the set PortList, allowing the agent to clear the usage indication.")
etsysPolicyRuleResult1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleResult1.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleResult1.setDescription('If the etsysPolicyRuleProfileIndex is 0 then this field is read-only and defines the profile ID which will assigned to frames matching this rule. This is the dynamically assigned value and may differ from the administratively configured value. If the etsysPolicyRuleProfileIndex is not 0 then this field is read-create and defines the VLAN ID with which to mark a frame matching this PolicyRule. Note that three special, otherwise illegal, values of the etsysPolicyRuleVlan are used in defining the forwarding action. -1 Indicates that no VLAN or forwarding behavior modification is desired. A rule will not be matched against for the purpose of determining a marking VID if this value is set. 0 Indicates that the default forwarding action is to drop the packets matching this rule. 4095 Indicates that the default forwarding action is to forward any packets matching this rule.')
etsysPolicyRuleResult2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 4095), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleResult2.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleResult2.setDescription('If the etsysPolicyRuleProfileIndex is 0 then this field is read-create and defines the profile ID which the managing entity desires assigned to frames matching this rule. This is the administrative value and may differ from the dynamically assigned active value. If the etsysPolicyRuleProfileIndex is not 0 then this field is The CoS with which to mark a frame matching this PolicyRule. Note that one special, otherwise illegal, values of the etsysPolicyRuleCoS are used in defining the forwarding action. -1 Indicates that no CoS or forwarding behavior modification is desired. A rule will not be matched against for the purpose of determining a CoS if this value is set.')
etsysPolicyRuleAuditSyslogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 12), TriStateStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleAuditSyslogEnable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleAuditSyslogEnable.setDescription('Controls the sending of a syslog message when a bit in the etsysPolicyRuleUsageList transitions from 0 to 1.')
etsysPolicyRuleAuditTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 13), TriStateStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleAuditTrapEnable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleAuditTrapEnable.setDescription('Controls the sending of an SNMP NOTIFICATION when a bit in the etsysPolicyRuleUsageList transitions from 0 to 1.')
etsysPolicyRuleDisablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 14), TriStateStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleDisablePort.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleDisablePort.setDescription('Controls the disabling of a port (ifOperStatus of the corresponding ifIndex will be down) when a bit in the etsysPolicyRuleUsageList transitions from 0 to 1. When set to enabled, the corresponding ifIndex will be disabled upon the transition.')
etsysPolicyRuleOperPid = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 4095), )).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRuleOperPid.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleOperPid.setDescription('If the etsysPolicyRuleProfileIndex is 0 then this field contains the currently applied profile ID for frames matching this rule. This may be either the administratively applied value or the dynamically applied value. If the etsysPolicyRuleProfileIndex is not 0, then this object does not exist and will not be returned. Note that one special, otherwise illegal, values of the etsysPolicyRuleCoS are used in defining the forwarding action. -1 Indicates that no profile ID is being applied by this rule.')
etsysPolicyRuleOverwriteTCI = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 16), TriStateStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleOverwriteTCI.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleOverwriteTCI.setDescription('If set, the information contained within the TCI field of inbound, tagged packets will not be used by the device after the ingress classification stage of packet relay. The net effect will be that the TCI information may be used to classify the packet, but will be overwritten (and ignored) by subsequent stages of packet relay.')
etsysPolicyRuleMirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysPolicyRuleMirrorIndex.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleMirrorIndex.setDescription('A reference to a packet mirror destination (defined elsewhere). A value of (-1) indicates no mirror is specified, but a mirror is not explicitly prohibitted. A value of (0) indicates that mirroring is explicitly prohibitted, unless a high precedent rule has specified a mirror.')
etsysPolicyRulePortTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 7), )
if mibBuilder.loadTexts: etsysPolicyRulePortTable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulePortTable.setDescription('The purpose of this table is to provide an agent the ability to easily determine which rules have been used on a given bridge port. A row will only be present when the rule which the instancing describes has been used. The agent may remove a row (and clear the used status) by setting the etsysPolicyRulePortHit leaf to False. PolicyClassificationRuleType together with a length, matching data and a relevant bits field, port type, and port number (port number zero is reserved to mean any port), scoped by a etsysPolicyRuleProfileIndex, and preceded by a dot1dBasePort is used as the table index.')
etsysPolicyRulePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 7, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleProfileIndex"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleType"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleData"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePrefixBits"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortType"), (0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePort"))
if mibBuilder.loadTexts: etsysPolicyRulePortEntry.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulePortEntry.setDescription('.')
etsysPolicyRulePortHit = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRulePortHit.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulePortHit.setDescription('Every row will report a value of True, indicating that the Rule described by the instancing was used on the given port. An agent may be set this leaf to False to clear remove the row and clear the Rule Use bit for the specified Rule, on the given bridgePort.')
etsysPolicyRuleDynamicProfileAssignmentOverride = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleDynamicProfileAssignmentOverride.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleDynamicProfileAssignmentOverride.setDescription('If true, administratively assigned profile assignment rules override dynamically assigned profiles assignments for a given rule. If false, the dynamically assigned value (typically created by a successful authentication attempt) overrides the administratively configured value. The agent may optionally implement this leaf as read-only.')
etsysPolicyRuleDefaultDynamicSyslogStatus = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 9), TriStateStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleDefaultDynamicSyslogStatus.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleDefaultDynamicSyslogStatus.setDescription('If enabled(1), rules dynamically created will set etsysPolicyRuleAuditSyslogEnable to enabled. If disabled(2) a dynamically created rule will have etsysPolicyRuleAuditSyslogEnable set to disabled. The agent may optionally implement this leaf as read-only.')
etsysPolicyRuleDefaultDynamicTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 10), TriStateStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleDefaultDynamicTrapStatus.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleDefaultDynamicTrapStatus.setDescription('If enabled(1), rules dynamically created will set etsysPolicyRuleAuditTrapEnable to enabled. If disabled(2) a dynamically created rule will have etsysPolicyRuleAuditTrapEnable set to disabled. The agent may optionally implement this leaf as read-only.')
etsysPolicyRuleStatsAutoClearOnLink = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 11), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleStatsAutoClearOnLink.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleStatsAutoClearOnLink.setDescription('If set to enabled(1), when operstatus up is detected on any port the agent will clear the rule usage information associated with that port. This ability is further scoped to the list of ports defined by etsysPolicyRuleStatsAutoClearPorts. This leaf is optional and will have no effect on an agent which has rule use accounting disabled or does not support rule use accounting. By default, the rule use accounting information will not be modified by operstatus transitions.')
etsysPolicyRuleStatsAutoClearInterval = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleStatsAutoClearInterval.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleStatsAutoClearInterval.setDescription('The interval at which the device will automatically clear rule usage statistics, in minutes. This ability is disabled (usage statistics will not be automatically cleared) if set to zero(0). This ability is further scoped to the list of ports defined by etsysPolicyRuleStatsAutoClearPorts. This leaf is optional and will have no effect on an agent which has rule use accounting disabled or does not support rule use accounting.')
etsysPolicyRuleStatsAutoClearPorts = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 13), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleStatsAutoClearPorts.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleStatsAutoClearPorts.setDescription("The list ports on which rule usage statistics will be cleared by one of the AutoClear actions (etsysPolicyRuleStatsAutoClearInterval, etsysPolicyRuleStatsAutoClearOnProfile, or etsysPolicyRuleStatsAutoClearOnLink). By default, no ports will be set in this list. This leaf is optional, unless the agent claims support for one of the other 'autoclear' objects, and will have no effect on an agent which has rule use accounting disabled or does not support rule use accounting.")
etsysPolicyRuleStatsAutoClearOnProfile = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 14), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleStatsAutoClearOnProfile.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleStatsAutoClearOnProfile.setDescription('If set to enabled(1), when a rule assigning a PolicyProfile (whose etsysPolicyRuleProfileIndex is zero(0)) is activated, all the rule usage bits associated with the rules bound to the PolicyProfile specified by the etsysPolicyRuleOperPid and the port specified by the etsysPolicyRulePort are cleared (if there is no port specified or no valid etsysPolicyRuleProfileIndex specified, then no action follows). This ability is further scoped to the list of ports defined by etsysPolicyRuleStatsAutoClearPorts. This leaf is optional and will have no effect on an agent which has rule use accounting disabled or does not support rule use accounting. By default, the rule use accounting information will not be modified by the creation or activation of PolicyProfile assignment rules.')
etsysPolicyRuleStatsDroppedNotifications = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRuleStatsDroppedNotifications.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleStatsDroppedNotifications.setDescription("A count of the number of times the agent has dropped notification (syslog or trap) of a etsysPolicyRuleUsageList bit transition. A management entity might use this leaf as an indication to read the etsysPolicyRuleUsageList objects for important rules. This count should be kept to the best of the device's ability, and explicitly does not cover notifications discarded by the network.")
etsysPolicyRuleSylogMachineReadableFormat = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 16), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleSylogMachineReadableFormat.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleSylogMachineReadableFormat.setDescription('If enabled, the device should format rule usage messages so that they might be processed by a machine (scripting backend, etc). If disabled, the messages should be formatted for human consumption.')
etsysPolicyRuleSylogExtendedFormat = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 17), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleSylogExtendedFormat.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleSylogExtendedFormat.setDescription('If enabled, the device should provide additional information in rule-hit syslog messages. This information MAY include what actions may have been initiated by the rule (if any) or data mined from the packet which matched the rule.')
etsysPolicyRuleSylogEveryTime = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 11, 18), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRuleSylogEveryTime.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRuleSylogEveryTime.setDescription('If enabled, the device will syslog on every rule hit (or profile hit) which specifies SYSLOG as the action, instead of only when the associated bit in the etsysPolicyProfileUsageList or the etsysPolicyRuleUsageList is clear. It should be noted that this may cause MANY messages to be generated.')
etsysPolicyRFC3580MapResolveReponseConflict = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12, 1), PolicyRFC3580MapRadiusResponseTC().clone('policyProfile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRFC3580MapResolveReponseConflict.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapResolveReponseConflict.setDescription('Indicates which field to use in the application of the RADIUS response in the event that both the proprietary filter-id indicating a policy profile and the standard (RFC3580) vlan- tunnel-attribute are present. If policyProfile(1) is selected, then the filter-id will be used, if vlanTunnelAttribute(2) is selected, then the vlan-tunnel-attribute will be used (and the policy-map will be applied, if present). A value of vlanTunnelAttributeWithPolicyProfile(3) indicates that both attributes should be applied, in the following manner: the policyProfile should be enforced, with the exception of the etsysPolicyProfilePortVid (if present), the returned vlan-tunnel-attribute will be used in its place. In this case, the policy-map will be ignored (as the policyProfile was explicitly assigned). VLAN classification rules will still be applied, as defined by the assigned policyProfile. Modifications of this value will not effect the current status of any users currently authenticated. The new state will be applied to new, successful authentications. The current status of current authentication may be modified through the individual agents or through the ENTERASYS-MULTI-AUTH-MIB, if supported.')
etsysPolicyRFC3580MapLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRFC3580MapLastChange.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapLastChange.setDescription('The value of sysUpTime when the etsysPolicyRFC3580MapTable was last modified.')
etsysPolicyRFC3580MapTableDefault = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRFC3580MapTableDefault.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapTableDefault.setDescription('If read as True, then the etsysPolicyRFC3580MapTable is in the default state (no mappings have been created), if False, then non-default mappings exist. If set to True, then the etsysPolicyRFC3580MapTable will be put into the default state (no mappings will exist). A set to False is not valid and MUST fail.')
etsysPolicyRFC3580MapTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12, 4), )
if mibBuilder.loadTexts: etsysPolicyRFC3580MapTable.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapTable.setDescription('A table containing VLAN ID to policy mappings. A policy is a group of classification rules which may be applied on a per user basis, to ports or to stations.')
etsysPolicyRFC3580MapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12, 4, 1), ).setIndexNames((0, "ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapVlanId"))
if mibBuilder.loadTexts: etsysPolicyRFC3580MapEntry.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapEntry.setDescription('Conceptually defines a particular entry within the etsysPolicyRFC3580MapTable. Entries within this table MUST be considered non-volatile and MUST be maintained across entity resets.')
etsysPolicyRFC3580MapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: etsysPolicyRFC3580MapVlanId.setReference('IEEE 802.1X RADIUS Usage Guidelines (RFC 3580)')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapVlanId.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapVlanId.setDescription('The VlanIndex which will map to the policy profile specified by the etsysPolicyRFC3580MapPolicyIndex of this row. This will be used to map the VLAN returned by value from the Tunnel- Private-Group-ID RADIUS attribute.')
etsysPolicyRFC3580MapPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12, 4, 1, 2), PolicyProfileIDTC().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysPolicyRFC3580MapPolicyIndex.setReference('IEEE 802.1X RADIUS Usage Guidelines (RFC 3580)')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapPolicyIndex.setDescription('The index of a Policy Profle as defined in the etsysPolicyProfileTable. A value of 0 indicates that the row is functionally non- operational (no mapping exists). Devices which support the ENTERASYS-VLAN-AUTHORIZATION-MIB, and for which the value of etsysVlanAuthorizationEnable is Enabled and the value of etsysVlanAuthorizationStatus is Enabled on the port referenced by the authorization request, should then use the VlanIndex provisioned (e.g. from the Tunnel-Private-Group-ID RADIUS attribute) as defined by RFC3580, otherwise, the device should treat the result as if no matching Policy Profile had been found (e.g. as a simple success). In the case where a Policy Profile is already being applied to the referenced station, but no mapping exists, the device MUST treat the Tunnel-Private-Group-ID as an override to the etsysPolicyProfilePortVid defined by that profile (any matched classification rules which explicit provision a VLAN MUST still override both the etsysPolicyProfilePortVid and the Tunnel-Private-Group-ID.) A non-zero value of this object indicates that the VlanIndex provisioned (e.g. from the Tunnel-Private-Group-ID RADIUS attribute) should be mapped to a Policy Profile as defined in the etsysPolicyProfileTable, and that policy applied as if the Policy name had been provisioned instead (e.g, in the Filter-ID RADIUS attribute). If the mapping references a non-existent row of the etsysPolicyProfileTable, or the referenced row has a etsysPolicyProfileRowStatus value other than Active, the device MUST behave as if the mapping did not exist (apply the vlan-tunnel-attribute). The etsysPolicyRFC3580MapInvalidMapping MUST then be incremented.')
etsysPolicyRFC3580MapInvalidMapping = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysPolicyRFC3580MapInvalidMapping.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapInvalidMapping.setDescription('Increments to indicate the number of times the device has detected an invalid/unknown EtsysPolicyRFC3580MapEntry (i.e. one that references an in-active or non-existent etsysPolicyProfile).')
etsysPolicyProfileConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7))
etsysPolicyProfileGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1))
etsysPolicyProfileCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 2))
etsysPolicyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 1)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileTableNextAvailableIndex"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileName"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePortVidStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePortVid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePriorityStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePriority"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileEgressVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileForbiddenVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileUntaggedVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileOverwriteTCI"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileRulePrecedence"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileVlanRFC3580Mappings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileGroup = etsysPolicyProfileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyProfileGroup.setDescription('A collection of objects providing Policy Profile Creation.')
etsysPolicyClassificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 2)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationOID"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationIngressList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyClassificationGroup = etsysPolicyClassificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyClassificationGroup.setDescription('A collection of objects providing a mapping between a set of Classification Rules and a Policy Profile.')
etsysPortPolicyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 3)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileAdminID"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileOperID"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileSummaryAdminID"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileSummaryOperID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPortPolicyProfileGroup = etsysPortPolicyProfileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPortPolicyProfileGroup.setDescription('A collection of objects providing a mapping from a specific port to a Policy Profile instance. Only the read-only portions of this group are now current. They are listed under etsysPortPolicyProfileGroup2.')
etsysStationPolicyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 5)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationIdentifierType"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationIdentifier"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileOperID"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfilePortType"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfilePortID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysStationPolicyProfileGroup = etsysStationPolicyProfileGroup.setStatus('current')
if mibBuilder.loadTexts: etsysStationPolicyProfileGroup.setDescription('A collection of objects providing a mapping from a specific station to a Policy Profile instance.')
etsysInvalidPolicyPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 6)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyAction"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysInvalidPolicyPolicyGroup = etsysInvalidPolicyPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: etsysInvalidPolicyPolicyGroup.setDescription('A collection of objects that help to define a mapping from logical authorization services outcomes to access control and policy actions.')
etsysDevicePolicyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 7)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysDevicePolicyProfileDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDevicePolicyProfileGroup = etsysDevicePolicyProfileGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDevicePolicyProfileGroup.setDescription('An object that provides a device level supplemental policy for entities that are not able to apply portions of the profile definition uniquely on individual ports.')
etsysPolicyCapabilitiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 8)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyVlanRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCosRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDropRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyForwardRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDynaPIDRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyAdminPIDRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicySyslogRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyTrapRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDisablePortRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicySupportedPortList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledSupportedRuleTypes"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledEnabledRuleTypes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyCapabilitiesGroup = etsysPolicyCapabilitiesGroup.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyCapabilitiesGroup.setDescription('An object that indicates the capabilities of the managed entity with respect to Policy Profiles.')
etsysPolicyMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 9)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapPvidOverRide"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapUnknownPvidPolicy"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapStartVid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapEndVid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyMapPolicyIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyMapGroup = etsysPolicyMapGroup.setStatus('obsolete')
if mibBuilder.loadTexts: etsysPolicyMapGroup.setDescription('This object group has been obsoleted.')
etsysPolicyRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 10)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesAccountingEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesPortDisabledList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStorageType"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleUsageList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult1"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditSyslogEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditTrapEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDisablePort"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleOperPid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHit"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDynamicProfileAssignmentOverride"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicSyslogStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicTrapStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnLink"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearInterval"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearPorts"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyRulesGroup = etsysPolicyRulesGroup.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyRulesGroup.setDescription('An object that indicates the capabilities of the managed entity with respect to Policy Profiles.')
etsysPortPolicyProfileGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 11)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileSummaryAdminID"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileSummaryOperID"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileSummaryDynamicID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPortPolicyProfileGroup2 = etsysPortPolicyProfileGroup2.setStatus('current')
if mibBuilder.loadTexts: etsysPortPolicyProfileGroup2.setDescription('A collection of objects providing a mapping from a specific port to a Policy Profile instance.')
etsysPolicyRFC3580MapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 12)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapResolveReponseConflict"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapTableDefault"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapPolicyIndex"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapInvalidMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyRFC3580MapGroup = etsysPolicyRFC3580MapGroup.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRFC3580MapGroup.setDescription('An object group that provides support for mapping between RFC 3580 style VLAN-policy and Enterasys UPN-policy based on named roles.')
etsysPolicyCapabilitiesGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 13)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyVlanRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCosRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDropRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyForwardRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDynaPIDRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyAdminPIDRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicySyslogRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyTrapRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDisablePortRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicySupportedPortList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledSupportedRuleTypes"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledEnabledRuleTypes"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeByteLength"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeBitLength"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeMaxCreatable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyCapabilitiesGroup2 = etsysPolicyCapabilitiesGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyCapabilitiesGroup2.setDescription('An object that indicates the capabilities of the managed entity with respect to Policy Profiles and defines the characteristics of policy rule data by rule type.')
etsysPolicyRulesGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 14)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesAccountingEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesPortDisabledList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStorageType"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleUsageList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult1"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditSyslogEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditTrapEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDisablePort"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleOperPid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHit"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDynamicProfileAssignmentOverride"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicSyslogStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicTrapStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnLink"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearInterval"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearPorts"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnProfile"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsDroppedNotifications"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleSylogMachineReadableFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyRulesGroup2 = etsysPolicyRulesGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyRulesGroup2.setDescription('********* THIS GROUP IS DEPRECATED ********** An object that indicates the capabilities of the managed entity with respect to Policy Profiles.')
etsysPolicyRulePortHitNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 15)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHitNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyRulePortHitNotificationGroup = etsysPolicyRulePortHitNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulePortHitNotificationGroup.setDescription('An object group that provides support for traps sent from the etsysPolicyRulePortHit event.')
etsysPolicyRulesGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 16)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesAccountingEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesPortDisabledList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStorageType"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleUsageList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult1"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditSyslogEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditTrapEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDisablePort"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleOperPid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHit"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDynamicProfileAssignmentOverride"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicSyslogStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicTrapStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnLink"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearInterval"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearPorts"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnProfile"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsDroppedNotifications"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleSylogMachineReadableFormat"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleSylogExtendedFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyRulesGroup3 = etsysPolicyRulesGroup3.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyRulesGroup3.setDescription('An object that indicates the capabilities of the managed entity with respect to Policy Profiles.')
etsysPolicyRulesGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 17)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesAccountingEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesPortDisabledList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStorageType"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleUsageList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult1"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditSyslogEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditTrapEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDisablePort"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleOperPid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHit"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDynamicProfileAssignmentOverride"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicSyslogStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicTrapStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnLink"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearInterval"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearPorts"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnProfile"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsDroppedNotifications"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleSylogMachineReadableFormat"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleSylogExtendedFormat"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleOverwriteTCI"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleMirrorIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyRulesGroup4 = etsysPolicyRulesGroup4.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulesGroup4.setDescription('An object that indicates the capabilities of the managed entity with respect to Policy Profiles.')
etsysPolicyCapabilitiesGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 18)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyVlanRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCosRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDropRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyForwardRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDynaPIDRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyAdminPIDRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicySyslogRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyTrapRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDisablePortRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicySupportedPortList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledSupportedRuleTypes"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledEnabledRuleTypes"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeByteLength"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeBitLength"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeMaxCreatable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleTciOverwriteCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleMirrorCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyCapabilitiesGroup3 = etsysPolicyCapabilitiesGroup3.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyCapabilitiesGroup3.setDescription('An object that indicates the capabilities of the managed entity with respect to Policy Profiles and defines the characteristics of policy rule data by rule type.')
etsysPolicyProfileGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 19)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileTableNextAvailableIndex"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileName"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePortVidStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePortVid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePriorityStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePriority"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileEgressVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileForbiddenVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileUntaggedVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileOverwriteTCI"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileRulePrecedence"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileVlanRFC3580Mappings"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileMirrorIndex"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileAuditSyslogEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileAuditTrapEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileDisablePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileGroup2 = etsysPolicyProfileGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyProfileGroup2.setDescription('A collection of objects providing Policy Profile Creation.')
etsysPolicyRulesGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 20)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesAccountingEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesPortDisabledList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStorageType"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleUsageList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult1"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleResult2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditSyslogEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAuditTrapEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDisablePort"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleOperPid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHit"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDynamicProfileAssignmentOverride"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicSyslogStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleDefaultDynamicTrapStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnLink"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearInterval"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearPorts"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsAutoClearOnProfile"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleStatsDroppedNotifications"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleSylogMachineReadableFormat"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleSylogExtendedFormat"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleSylogEveryTime"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleOverwriteTCI"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleMirrorIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyRulesGroup5 = etsysPolicyRulesGroup5.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyRulesGroup5.setDescription('An object that indicates the capabilities of the managed entity with respect to Policy Profiles.')
etsysPolicyCapabilitiesGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 21)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyVlanRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCosRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDropRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyForwardRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDynaPIDRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyAdminPIDRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicySyslogRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyTrapRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyDisablePortRuleCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicySupportedPortList"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledSupportedRuleTypes"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledEnabledRuleTypes"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyEnabledEgressEnabled"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeByteLength"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeBitLength"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleAttributeMaxCreatable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleTciOverwriteCapabilities"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRuleMirrorCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyCapabilitiesGroup4 = etsysPolicyCapabilitiesGroup4.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyCapabilitiesGroup4.setDescription('An object that indicates the capabilities of the managed entity with respect to Policy Profiles and defines the characteristics of policy rule data by rule type.')
etsysPolicyProfileGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 1, 22)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileMaxEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileNumEntries"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileLastChange"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileTableNextAvailableIndex"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileName"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileRowStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePortVidStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePortVid"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePriorityStatus"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfilePriority"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileEgressVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileForbiddenVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileUntaggedVlans"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileOverwriteTCI"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileRulePrecedence"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileVlanRFC3580Mappings"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileMirrorIndex"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileAuditSyslogEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileAuditTrapEnable"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileDisablePort"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileUsageList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileGroup3 = etsysPolicyProfileGroup3.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileGroup3.setDescription('A collection of objects providing Policy Profile Creation.')
etsysPolicyProfileCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 2, 1)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyPolicyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileCompliance = etsysPolicyProfileCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyProfileCompliance.setDescription('The compliance statement for devices that support Policy Profiles. This compliance statement was deprecated to add mandatory support for the etsysPolicyCapabilitiesGroup and conditionally mandatory support for the etsysDevicePolicyProfileGroup.')
etsysPolicyProfileCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 2, 2)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilitiesGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyClassificationGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyPolicyGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysDevicePolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileCompliance2 = etsysPolicyProfileCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyProfileCompliance2.setDescription('The compliance statement for devices that support Policy Profiles. This compliance state was deprecated to remove the conditional support of the etsysPolicyClassificationGroup, and add support for the etsysPolicyRFC3580MapGroup and the etsysPolicyRulesGroup.')
etsysPolicyProfileCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 2, 3)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileGroup2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilitiesGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyPolicyGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysDevicePolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileCompliance3 = etsysPolicyProfileCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyProfileCompliance3.setDescription('The compliance statement for devices that support Policy Profiles.')
etsysPolicyProfileCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 2, 4)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileGroup2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilitiesGroup2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyPolicyGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysDevicePolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesGroup2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHitNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileCompliance4 = etsysPolicyProfileCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyProfileCompliance4.setDescription('The compliance statement for devices that support Policy Profiles.')
etsysPolicyProfileCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 2, 5)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileGroup2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilitiesGroup2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyPolicyGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysDevicePolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesGroup3"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHitNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileCompliance5 = etsysPolicyProfileCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: etsysPolicyProfileCompliance5.setDescription('The compliance statement for devices that support Policy Profiles.')
etsysPolicyProfileCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 2, 6)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileGroup2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilitiesGroup3"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyPolicyGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysDevicePolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesGroup4"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHitNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileCompliance6 = etsysPolicyProfileCompliance6.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileCompliance6.setDescription('The compliance statement for devices that support Policy Profiles.')
etsysPolicyProfileCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 6, 7, 2, 7)).setObjects(("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyProfileGroup3"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPortPolicyProfileGroup2"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyCapabilitiesGroup4"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysStationPolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysInvalidPolicyPolicyGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysDevicePolicyProfileGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRFC3580MapGroup"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulesGroup5"), ("ENTERASYS-POLICY-PROFILE-MIB", "etsysPolicyRulePortHitNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysPolicyProfileCompliance7 = etsysPolicyProfileCompliance7.setStatus('current')
if mibBuilder.loadTexts: etsysPolicyProfileCompliance7.setDescription('The compliance statement for devices that support Policy Profiles.')
mibBuilder.exportSymbols("ENTERASYS-POLICY-PROFILE-MIB", etsysPolicyProfileAuditTrapEnable=etsysPolicyProfileAuditTrapEnable, etsysPolicyRuleResult2=etsysPolicyRuleResult2, etsysPortPolicyProfileGroup2=etsysPortPolicyProfileGroup2, etsysPolicyRuleStatsAutoClearInterval=etsysPolicyRuleStatsAutoClearInterval, etsysPolicyRulesGroup5=etsysPolicyRulesGroup5, etsysPolicyProfileDisablePort=etsysPolicyProfileDisablePort, etsysPortPolicyProfileGroup=etsysPortPolicyProfileGroup, etsysStationIdentifier=etsysStationIdentifier, etsysPolicyDisablePortRuleCapabilities=etsysPolicyDisablePortRuleCapabilities, etsysPolicyDropRuleCapabilities=etsysPolicyDropRuleCapabilities, etsysPolicyRFC3580MapTableDefault=etsysPolicyRFC3580MapTableDefault, etsysPolicyMapNumEntries=etsysPolicyMapNumEntries, etsysPolicyProfileNumEntries=etsysPolicyProfileNumEntries, etsysPolicyRulesPortDisabledList=etsysPolicyRulesPortDisabledList, etsysPolicyRulePortHitNotificationGroup=etsysPolicyRulePortHitNotificationGroup, etsysPolicyRuleRowStatus=etsysPolicyRuleRowStatus, etsysPortPolicyProfileEntry=etsysPortPolicyProfileEntry, PYSNMP_MODULE_ID=etsysPolicyProfileMIB, etsysPolicyClassificationIngressList=etsysPolicyClassificationIngressList, etsysPolicyRuleEntry=etsysPolicyRuleEntry, etsysPolicyMapUnknownPvidPolicy=etsysPolicyMapUnknownPvidPolicy, etsysPolicyRFC3580MapResolveReponseConflict=etsysPolicyRFC3580MapResolveReponseConflict, etsysPolicyTrapRuleCapabilities=etsysPolicyTrapRuleCapabilities, etsysPolicyRulesGroup=etsysPolicyRulesGroup, etsysPolicyProfileUntaggedVlans=etsysPolicyProfileUntaggedVlans, etsysPolicyCapabilitiesGroup=etsysPolicyCapabilitiesGroup, etsysPolicyProfileUsageList=etsysPolicyProfileUsageList, etsysPortPolicyProfileSummaryIndexType=etsysPortPolicyProfileSummaryIndexType, etsysPolicyProfileForbiddenVlans=etsysPolicyProfileForbiddenVlans, etsysPolicyEnabledTableEntry=etsysPolicyEnabledTableEntry, etsysPolicyRFC3580MapGroup=etsysPolicyRFC3580MapGroup, etsysPolicyProfileConformance=etsysPolicyProfileConformance, etsysStationPolicyProfile=etsysStationPolicyProfile, etsysPolicyRuleStatsAutoClearPorts=etsysPolicyRuleStatsAutoClearPorts, etsysPolicyRuleAttributeMaxCreatable=etsysPolicyRuleAttributeMaxCreatable, etsysPolicyRuleResult1=etsysPolicyRuleResult1, etsysPolicyRuleAttributeTable=etsysPolicyRuleAttributeTable, etsysPolicyMapPvidOverRide=etsysPolicyMapPvidOverRide, etsysPolicyProfileVlanRFC3580Mappings=etsysPolicyProfileVlanRFC3580Mappings, etsysPolicyRuleDefaultDynamicSyslogStatus=etsysPolicyRuleDefaultDynamicSyslogStatus, etsysPolicyProfileName=etsysPolicyProfileName, PolicyRFC3580MapRadiusResponseTC=PolicyRFC3580MapRadiusResponseTC, etsysPolicyEnabledSupportedRuleTypes=etsysPolicyEnabledSupportedRuleTypes, etsysPolicyRuleOperPid=etsysPolicyRuleOperPid, etsysPolicyRuleStatsDroppedNotifications=etsysPolicyRuleStatsDroppedNotifications, etsysPolicyMapStartVid=etsysPolicyMapStartVid, etsysPolicyClassification=etsysPolicyClassification, etsysPolicyProfileLastChange=etsysPolicyProfileLastChange, etsysPolicyCapability=etsysPolicyCapability, etsysDevicePolicyProfileGroup=etsysDevicePolicyProfileGroup, etsysPolicyProfileMaxEntries=etsysPolicyProfileMaxEntries, etsysPolicyRulePortHitNotification=etsysPolicyRulePortHitNotification, etsysPolicyProfileGroup2=etsysPolicyProfileGroup2, etsysPolicySyslogRuleCapabilities=etsysPolicySyslogRuleCapabilities, etsysPolicyRuleStatsAutoClearOnLink=etsysPolicyRuleStatsAutoClearOnLink, etsysPolicyRuleMirrorIndex=etsysPolicyRuleMirrorIndex, etsysPolicyRuleMirrorCapabilities=etsysPolicyRuleMirrorCapabilities, etsysPolicyRuleDynamicProfileAssignmentOverride=etsysPolicyRuleDynamicProfileAssignmentOverride, etsysStationPolicyProfilePortID=etsysStationPolicyProfilePortID, etsysStationPolicyProfileGroup=etsysStationPolicyProfileGroup, etsysPolicySupportedPortList=etsysPolicySupportedPortList, etsysPolicyRuleAuditSyslogEnable=etsysPolicyRuleAuditSyslogEnable, etsysPolicyProfileCompliances=etsysPolicyProfileCompliances, etsysPortPolicyProfileSummaryTable=etsysPortPolicyProfileSummaryTable, etsysPolicyMapRowStatus=etsysPolicyMapRowStatus, etsysPolicyProfileGroups=etsysPolicyProfileGroups, etsysPolicyClassificationMaxEntries=etsysPolicyClassificationMaxEntries, etsysPolicyRulesNumEntries=etsysPolicyRulesNumEntries, etsysPolicyRules=etsysPolicyRules, etsysPolicyCapabilitiesGroup3=etsysPolicyCapabilitiesGroup3, etsysPolicyVlanEgress=etsysPolicyVlanEgress, etsysPolicyProfileGroup3=etsysPolicyProfileGroup3, etsysPolicyProfileCompliance2=etsysPolicyProfileCompliance2, etsysPolicyVlanRuleCapabilities=etsysPolicyVlanRuleCapabilities, etsysPolicyRuleSylogExtendedFormat=etsysPolicyRuleSylogExtendedFormat, PolicyRulesSupported=PolicyRulesSupported, etsysPolicyRuleAttributeByteLength=etsysPolicyRuleAttributeByteLength, etsysPolicyProfileGroup=etsysPolicyProfileGroup, etsysPolicyProfileCompliance3=etsysPolicyProfileCompliance3, etsysPolicyRuleStorageType=etsysPolicyRuleStorageType, etsysPolicyRFC3580MapLastChange=etsysPolicyRFC3580MapLastChange, etsysPolicyProfileMirrorIndex=etsysPolicyProfileMirrorIndex, etsysPolicyRulePortHit=etsysPolicyRulePortHit, etsysPolicyNotifications=etsysPolicyNotifications, etsysPolicyRFC3580MapTable=etsysPolicyRFC3580MapTable, etsysPolicyRuleDefaultDynamicTrapStatus=etsysPolicyRuleDefaultDynamicTrapStatus, etsysPolicyProfileEgressVlans=etsysPolicyProfileEgressVlans, etsysPolicyProfilePortVid=etsysPolicyProfilePortVid, etsysPolicyRFC3580MapEntry=etsysPolicyRFC3580MapEntry, etsysPolicyProfileOverwriteTCI=etsysPolicyProfileOverwriteTCI, etsysPolicyProfileEntry=etsysPolicyProfileEntry, etsysPortPolicyProfileSummaryAdminID=etsysPortPolicyProfileSummaryAdminID, etsysPolicyMap=etsysPolicyMap, etsysPolicyProfile=etsysPolicyProfile, PolicyClassificationRuleType=PolicyClassificationRuleType, etsysPolicyRuleAttributeTableEntry=etsysPolicyRuleAttributeTableEntry, etsysPolicyRuleTciOverwriteCapabilities=etsysPolicyRuleTciOverwriteCapabilities, etsysPolicyEnabledTable=etsysPolicyEnabledTable, etsysPolicyRuleTable=etsysPolicyRuleTable, etsysPortPolicyProfile=etsysPortPolicyProfile, etsysPolicyProfileTableNextAvailableIndex=etsysPolicyProfileTableNextAvailableIndex, etsysPolicyClassificationOID=etsysPolicyClassificationOID, etsysPolicyProfileRulePrecedence=etsysPolicyProfileRulePrecedence, etsysPolicyRulePrefixBits=etsysPolicyRulePrefixBits, etsysDevicePolicyProfileDefault=etsysDevicePolicyProfileDefault, etsysPolicyMapMaxEntries=etsysPolicyMapMaxEntries, etsysInvalidPolicyAction=etsysInvalidPolicyAction, etsysPolicyClassificationLastChange=etsysPolicyClassificationLastChange, etsysPolicyMapIndex=etsysPolicyMapIndex, etsysPolicyClassificationGroup=etsysPolicyClassificationGroup, etsysInvalidPolicyCount=etsysInvalidPolicyCount, etsysPolicyRulePortType=etsysPolicyRulePortType, etsysPolicyMapGroup=etsysPolicyMapGroup, etsysPortPolicyProfileLastChange=etsysPortPolicyProfileLastChange, etsysPolicyRulesGroup2=etsysPolicyRulesGroup2, etsysPolicyEnabledEgressEnabled=etsysPolicyEnabledEgressEnabled, etsysPolicyRulePort=etsysPolicyRulePort, PortPolicyProfileIndexTypeTC=PortPolicyProfileIndexTypeTC, etsysPolicyRuleType=etsysPolicyRuleType, etsysPolicyRulesGroup4=etsysPolicyRulesGroup4, etsysPolicyCapabilitiesGroup4=etsysPolicyCapabilitiesGroup4, etsysPolicyProfileCompliance5=etsysPolicyProfileCompliance5, etsysPolicyRFC3580MapVlanId=etsysPolicyRFC3580MapVlanId, etsysStationPolicyProfilePortType=etsysStationPolicyProfilePortType, etsysPolicyRulesGroup3=etsysPolicyRulesGroup3, etsysPolicyRuleSylogEveryTime=etsysPolicyRuleSylogEveryTime, etsysPolicyClassificationRowStatus=etsysPolicyClassificationRowStatus, etsysPortPolicyProfileSummaryOperID=etsysPortPolicyProfileSummaryOperID, etsysPolicyProfilePriorityStatus=etsysPolicyProfilePriorityStatus, etsysPolicyProfileMIB=etsysPolicyProfileMIB, etsysPolicyRFC3580MapInvalidMapping=etsysPolicyRFC3580MapInvalidMapping, etsysPolicyRFC3580Map=etsysPolicyRFC3580Map, etsysPolicyRuleOverwriteTCI=etsysPolicyRuleOverwriteTCI, etsysPolicyClassificationIndex=etsysPolicyClassificationIndex, etsysPolicyCapabilitiesGroup2=etsysPolicyCapabilitiesGroup2, etsysPolicyProfileCompliance7=etsysPolicyProfileCompliance7, etsysStationPolicyProfileEntry=etsysStationPolicyProfileEntry, etsysPolicyRuleProfileIndex=etsysPolicyRuleProfileIndex, etsysPortPolicyProfileAdminID=etsysPortPolicyProfileAdminID, etsysStationPolicyProfileIndex=etsysStationPolicyProfileIndex, etsysPolicyRulePortTable=etsysPolicyRulePortTable, etsysPolicyForwardRuleCapabilities=etsysPolicyForwardRuleCapabilities, etsysPolicyProfileIndex=etsysPolicyProfileIndex, etsysPolicyRuleDisablePort=etsysPolicyRuleDisablePort, etsysPolicyRuleAuditTrapEnable=etsysPolicyRuleAuditTrapEnable, etsysStationPolicyProfileNumEntries=etsysStationPolicyProfileNumEntries, etsysPolicyMapEndVid=etsysPolicyMapEndVid, etsysPolicyClassificationTable=etsysPolicyClassificationTable, etsysStationPolicyProfileLastChange=etsysStationPolicyProfileLastChange, etsysPolicyClassificationNumEntries=etsysPolicyClassificationNumEntries, etsysPolicyProfileCompliance4=etsysPolicyProfileCompliance4, etsysPolicyProfilePriority=etsysPolicyProfilePriority, etsysStationIdentifierType=etsysStationIdentifierType, etsysPolicyMapLastChange=etsysPolicyMapLastChange, etsysPolicyMapTable=etsysPolicyMapTable, etsysPolicyProfileCompliance6=etsysPolicyProfileCompliance6, etsysStationPolicyProfileTable=etsysStationPolicyProfileTable, etsysPolicyRulePortEntry=etsysPolicyRulePortEntry, etsysPolicyMapPolicyIndex=etsysPolicyMapPolicyIndex, etsysPolicyRuleSylogMachineReadableFormat=etsysPolicyRuleSylogMachineReadableFormat, etsysInvalidPolicyPolicyGroup=etsysInvalidPolicyPolicyGroup, etsysPolicyProfileAuditSyslogEnable=etsysPolicyProfileAuditSyslogEnable, etsysPolicyProfileCompliance=etsysPolicyProfileCompliance, etsysPolicyRuleData=etsysPolicyRuleData, TriStateStatus=TriStateStatus, etsysPolicyProfileTable=etsysPolicyProfileTable, etsysPolicyRuleUsageList=etsysPolicyRuleUsageList, etsysPolicyRuleAttributeBitLength=etsysPolicyRuleAttributeBitLength, etsysPolicyMapEntry=etsysPolicyMapEntry, etsysPolicyProfileRowStatus=etsysPolicyProfileRowStatus, etsysDevicePolicyProfile=etsysDevicePolicyProfile, etsysStationPolicyProfileMaxEntries=etsysStationPolicyProfileMaxEntries, etsysPolicyRulesAccountingEnable=etsysPolicyRulesAccountingEnable, etsysInvalidPolicyPolicy=etsysInvalidPolicyPolicy, etsysPolicyClassificationEntry=etsysPolicyClassificationEntry, PolicyProfileIDTC=PolicyProfileIDTC, etsysPolicyRulesLastChange=etsysPolicyRulesLastChange, etsysPolicyCapabilities=etsysPolicyCapabilities, etsysPortPolicyProfileTable=etsysPortPolicyProfileTable, etsysPortPolicyProfileSummaryEntry=etsysPortPolicyProfileSummaryEntry, etsysPolicyRulesMaxEntries=etsysPolicyRulesMaxEntries, etsysPolicyRuleStatsAutoClearOnProfile=etsysPolicyRuleStatsAutoClearOnProfile, etsysPortPolicyProfileOperID=etsysPortPolicyProfileOperID, etsysPolicyProfilePortVidStatus=etsysPolicyProfilePortVidStatus, etsysPortPolicyProfileIndex=etsysPortPolicyProfileIndex, etsysPortPolicyProfileIndexType=etsysPortPolicyProfileIndexType, etsysPolicyEnabledEnabledRuleTypes=etsysPolicyEnabledEnabledRuleTypes, VlanList=VlanList, etsysPortPolicyProfileSummaryDynamicID=etsysPortPolicyProfileSummaryDynamicID, etsysStationPolicyProfileOperID=etsysStationPolicyProfileOperID, etsysPolicyAdminPIDRuleCapabilities=etsysPolicyAdminPIDRuleCapabilities, etsysPolicyRFC3580MapPolicyIndex=etsysPolicyRFC3580MapPolicyIndex, etsysPolicyDynaPIDRuleCapabilities=etsysPolicyDynaPIDRuleCapabilities, etsysPolicyCosRuleCapabilities=etsysPolicyCosRuleCapabilities)
