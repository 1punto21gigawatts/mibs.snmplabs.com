#
# PySNMP MIB module RING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
coriolisMibs, ring = mibBuilder.importSymbols("CORIOLIS-MIB", "coriolisMibs", "ring")
chassisIpAddr, chassisElemReachStatus = mibBuilder.importSymbols("DEVICE-MIB", "chassisIpAddr", "chassisElemReachStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Counter32, Gauge32, ModuleIdentity, Counter64, TimeTicks, NotificationType, iso, MibIdentifier, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Counter32", "Gauge32", "ModuleIdentity", "Counter64", "TimeTicks", "NotificationType", "iso", "MibIdentifier", "NotificationType", "IpAddress")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ringMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5812, 4, 8))
if mibBuilder.loadTexts: ringMIB.setLastUpdated('0007270000Z')
if mibBuilder.loadTexts: ringMIB.setOrganization('Coriolis Networks')
if mibBuilder.loadTexts: ringMIB.setContactInfo(' Shubhra Garg Postal: 330 Codman Hill Road, Boxboro MA, 01719. Tel: +1 978 264 1904 Fax: +1 978 264 1929 E-mail: shubhra@coriolisnet.com')
if mibBuilder.loadTexts: ringMIB.setDescription('The MIB module for coriolis rings')
actPhyRingCount = MibScalar((1, 3, 6, 1, 4, 1, 5812, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actPhyRingCount.setStatus('current')
if mibBuilder.loadTexts: actPhyRingCount.setDescription(' Actual number of physical rings passing through the device ')
actPhyRingTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 4, 2), )
if mibBuilder.loadTexts: actPhyRingTable.setStatus('current')
if mibBuilder.loadTexts: actPhyRingTable.setDescription('The actual physical ring table. The number of entries in this table is given by actPhyRingCount')
actPhyRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 4, 2, 1), ).setIndexNames((0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"))
if mibBuilder.loadTexts: actPhyRingEntry.setStatus('current')
if mibBuilder.loadTexts: actPhyRingEntry.setDescription('Entry containing information about the attributes of actual physical rings passing through a device ')
phyRingSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyRingSlotNo.setStatus('current')
if mibBuilder.loadTexts: phyRingSlotNo.setDescription(' The slot number for the physical ring ')
phyRingPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyRingPortNo.setStatus('current')
if mibBuilder.loadTexts: phyRingPortNo.setDescription(' The port number of the physical ring ')
actLogRingCount = MibScalar((1, 3, 6, 1, 4, 1, 5812, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actLogRingCount.setStatus('current')
if mibBuilder.loadTexts: actLogRingCount.setDescription(' Actual number of logical rings passing through the device ')
actLogRingTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 4, 4), )
if mibBuilder.loadTexts: actLogRingTable.setStatus('current')
if mibBuilder.loadTexts: actLogRingTable.setDescription('The actual logical ring table. The number of entries in this table is given by actLogRingCount')
actLogRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1), ).setIndexNames((0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"), (0, "RING-MIB", "logRingVPortNo"))
if mibBuilder.loadTexts: actLogRingEntry.setStatus('current')
if mibBuilder.loadTexts: actLogRingEntry.setDescription('Entry containing information about the attributes of actual logical rings passing through a device ')
logRingVPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingVPortNo.setStatus('current')
if mibBuilder.loadTexts: logRingVPortNo.setDescription(' The lambda number of the logical ring if applicable, else 0 ')
logRingElemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemCount.setStatus('current')
if mibBuilder.loadTexts: logRingElemCount.setDescription(' Number of Elements on this logical ring ')
logRingLambdaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noCut", 1), ("cut", 2), ("restored", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingLambdaStatus.setStatus('current')
if mibBuilder.loadTexts: logRingLambdaStatus.setDescription(' The status of the lambda for the logical ring ')
logRingProtoStatusTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingProtoStatusTxt.setStatus('current')
if mibBuilder.loadTexts: logRingProtoStatusTxt.setDescription(' The ascii text describing the protocol status of the ring ')
logRingProtoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("controlChanDn", 2), ("setError", 3), ("clrError", 4), ("setAlarm", 5), ("clrAlarm", 6), ("lowerLayerDn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingProtoStatus.setStatus('current')
if mibBuilder.loadTexts: logRingProtoStatus.setDescription(' The protocol status of the logical ring ')
logRingGneName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneName.setStatus('current')
if mibBuilder.loadTexts: logRingGneName.setDescription(' The name of the GNE on the ring. ')
logRingGneIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneIpAddr.setStatus('current')
if mibBuilder.loadTexts: logRingGneIpAddr.setDescription(' The IP address of the GNE on the ring.')
logRingGneRingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneRingSlot.setStatus('current')
if mibBuilder.loadTexts: logRingGneRingSlot.setDescription(' The slot of the connected GNE ring.')
logRingGneRingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneRingPort.setStatus('current')
if mibBuilder.loadTexts: logRingGneRingPort.setDescription(' The port of the connected GNE ring.')
logRingGneRingVport = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneRingVport.setStatus('current')
if mibBuilder.loadTexts: logRingGneRingVport.setDescription(' The virtual port of the connected GNE ring.')
logRingUpsNgbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrName.setStatus('current')
if mibBuilder.loadTexts: logRingUpsNgbrName.setDescription(' The name of the upstream neighbor on the ring. ')
logRingUpsNgbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: logRingUpsNgbrIpAddr.setDescription(' The IP address of the upstream neighbor on the ring. ')
logRingUpsNgbrRingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrRingSlot.setStatus('current')
if mibBuilder.loadTexts: logRingUpsNgbrRingSlot.setDescription(' The slot of the connected upstream neighbors ring.')
logRingUpsNgbrRingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrRingPort.setStatus('current')
if mibBuilder.loadTexts: logRingUpsNgbrRingPort.setDescription(' The port of the connected upstream neighbors ring.')
logRingUpsNgbrRingVport = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrRingVport.setStatus('current')
if mibBuilder.loadTexts: logRingUpsNgbrRingVport.setDescription(' The virtual port of the connected upstream neighbors ring.')
logRingIsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingIsConfigured.setStatus('current')
if mibBuilder.loadTexts: logRingIsConfigured.setDescription(' Whether this ring has been configured by NM')
logRingAttRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("working", 2), ("protected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingAttRingType.setStatus('current')
if mibBuilder.loadTexts: logRingAttRingType.setDescription(' This object provides the type of the ring.')
logRingCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingCapacity.setStatus('current')
if mibBuilder.loadTexts: logRingCapacity.setDescription(' The capacity of the ring.')
logRingCutLocationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingCutLocationIp.setStatus('current')
if mibBuilder.loadTexts: logRingCutLocationIp.setDescription(' IP address of the element where ring is cut.')
logRingCutLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingCutLocationName.setStatus('current')
if mibBuilder.loadTexts: logRingCutLocationName.setDescription('Name of the element where ring is cut.')
logRingIsRingMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingIsRingMaster.setStatus('current')
if mibBuilder.loadTexts: logRingIsRingMaster.setDescription(' Whether this node is master on the ring. ')
logRingOtherSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingOtherSlot.setStatus('current')
if mibBuilder.loadTexts: logRingOtherSlot.setDescription("The slot of the other(for working, it's protected or vice versa) ring.")
logRingOtherPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingOtherPort.setStatus('current')
if mibBuilder.loadTexts: logRingOtherPort.setDescription("The port of the other(for working, it's protected or vice versa) ring.")
logRingOtherVport = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingOtherVport.setStatus('current')
if mibBuilder.loadTexts: logRingOtherVport.setDescription("The vport of the other(for working, it's protected or vice versa) ring.")
actLogRingElemTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 4, 5), )
if mibBuilder.loadTexts: actLogRingElemTable.setStatus('current')
if mibBuilder.loadTexts: actLogRingElemTable.setDescription('The actual logical ring topology table. This describes the Elements on a logical ring')
actLogRingElemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1), ).setIndexNames((0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"), (0, "RING-MIB", "logRingVPortNo"), (0, "RING-MIB", "logRingElemIndex"))
if mibBuilder.loadTexts: actLogRingElemEntry.setStatus('current')
if mibBuilder.loadTexts: actLogRingElemEntry.setDescription('Entry containing information about the Elements on a logical ring ')
logRingElemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIndex.setStatus('current')
if mibBuilder.loadTexts: logRingElemIndex.setDescription(' The position of the Element on the ring starting from the transmit side of GNE')
logRingElemName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(21, 21)).setFixedLength(21)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemName.setStatus('current')
if mibBuilder.loadTexts: logRingElemName.setDescription(' The name of the Element ')
logRingElemMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemMACAddr.setStatus('current')
if mibBuilder.loadTexts: logRingElemMACAddr.setDescription(' The MAC address of the Element ')
logRingElemIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIpAddr.setStatus('current')
if mibBuilder.loadTexts: logRingElemIpAddr.setDescription(' The IP address of the Element ')
logRingElemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemPortId.setStatus('current')
if mibBuilder.loadTexts: logRingElemPortId.setDescription(' The port id for the logical ring on this NE')
logRingElemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 21))).clone(namedValues=NamedValues(("optiFlow5500", 1), ("optiFlow5000", 2), ("optiFlow3500", 3), ("optiFlow3000", 4), ("optiFlow1010", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemChassisId.setStatus('current')
if mibBuilder.loadTexts: logRingElemChassisId.setDescription(' The chassis identifier of the Element')
logRingElemActiveMM = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemActiveMM.setStatus('current')
if mibBuilder.loadTexts: logRingElemActiveMM.setDescription(' The active management module of the Element')
logRingElemIsInNeTable = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIsInNeTable.setStatus('current')
if mibBuilder.loadTexts: logRingElemIsInNeTable.setDescription(" Indicates whether this element has it's entry in the cfgNeTable")
logRingElemIsReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIsReachable.setStatus('current')
if mibBuilder.loadTexts: logRingElemIsReachable.setDescription(' Indicates whether this element is reachable on this ring. ')
logRingElemIsLambdaCutHere = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIsLambdaCutHere.setStatus('current')
if mibBuilder.loadTexts: logRingElemIsLambdaCutHere.setDescription(' Indicates whether there is a lambda cut at this element. ')
logRingElemChassisCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gne", 1), ("ne", 2), ("sne", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemChassisCharacter.setStatus('current')
if mibBuilder.loadTexts: logRingElemChassisCharacter.setDescription('The chassis character of the element.')
logRingElemNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemNodeId.setStatus('current')
if mibBuilder.loadTexts: logRingElemNodeId.setDescription("The node id of the element on the ring. Value 64 means element doesn't have node id. ")
logRingElemRxSegCutSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoss", 1), ("sonetProtection", 2), ("serviceAffecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemRxSegCutSeverity.setStatus('current')
if mibBuilder.loadTexts: logRingElemRxSegCutSeverity.setDescription("The cut severity of RX segement of this element on the ring. Cut severity indicates the effect of cutting RX segment on service level. noLoss => segment doesn't carry any user traffic sonetProtection => segment carries user traffic but 50ms restoration is available if segment is cut. serviceAffecting => segment carries user traffic but 50ms restoration is not available. This could be because of either ring is configured in unprotected mode or existing cut in the ring. ")
cfgRingCount = MibScalar((1, 3, 6, 1, 4, 1, 5812, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCount.setStatus('current')
if mibBuilder.loadTexts: cfgRingCount.setDescription('The number of configured rings')
cfgRingTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 4, 7), )
if mibBuilder.loadTexts: cfgRingTable.setStatus('current')
if mibBuilder.loadTexts: cfgRingTable.setDescription('The configured ring table. The number of entries in this table is given by cfgRingCount')
cfgRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1), ).setIndexNames((0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"), (0, "RING-MIB", "logRingVPortNo"))
if mibBuilder.loadTexts: cfgRingEntry.setStatus('current')
if mibBuilder.loadTexts: cfgRingEntry.setDescription('Entry containing information about the attributes of configured rings passing through a device ')
cfgRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("out-of-service", 2), ("createAndGo", 4), ("createAndWait", 5), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingRowStatus.setStatus('current')
if mibBuilder.loadTexts: cfgRingRowStatus.setDescription(' The row status variable. In order to modify the attributes of the ring ring has to be put in out-of-service first.')
cfgRingAdminCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 2), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingAdminCost.setStatus('current')
if mibBuilder.loadTexts: cfgRingAdminCost.setDescription(' Admin cost of the ring. In the normal case, all rings should have same admin cost. Whenever a ring is needed to be serviced, increase the admin cost of the ring. This would force the GNE to move off TCs one by one of the ring if there is alternate path available with lower admin cost. This way there will not be a sudden disruption in the case where you bring the ring down suddenly.')
cfgRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingName.setStatus('current')
if mibBuilder.loadTexts: cfgRingName.setDescription(' The name of the configured ring ')
cfgRingMeshFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingMeshFactor.setStatus('current')
if mibBuilder.loadTexts: cfgRingMeshFactor.setDescription(' Traffic pattern on ring. The value varies between 1 (in case of hub traffic pattern)and n/2 (in case of mesh traffic pattern) where n is number of nodes in ring. This describes the inter-connection topology between nodes of the ring. Internally this factor is multiplied by n-1 to get the number of inter-connections between nodes of the ring.')
cfgRingEirOverSub = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingEirOverSub.setStatus('current')
if mibBuilder.loadTexts: cfgRingEirOverSub.setDescription(' Over subscription percentage on EIR portion of BW allocated on ring')
cfgRingProtectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("upsr", 2), ("blsr", 3), ("flex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingProtectMode.setStatus('current')
if mibBuilder.loadTexts: cfgRingProtectMode.setDescription(' The protection mode of the ring')
cfgRingExceptNes = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 496))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingExceptNes.setStatus('current')
if mibBuilder.loadTexts: cfgRingExceptNes.setDescription(' Comma separated list of IP address that are physically present on the ring but no connections are allowed to be setup. This is useful for traffic management where there is a bandwidth crunch on the ring. But some of the NEs on that particular ring have alternate paths through the other rings.')
cfgRingNeTopo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 496))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingNeTopo.setStatus('current')
if mibBuilder.loadTexts: cfgRingNeTopo.setDescription(' Desired topology of the ring (starting from transmit direction) in the form of comma separated list of IP addresses. If the actual topology mismatches with the desired topology, an event get generated.')
cfgRingIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gneSupplied", 1), ("takenFromNe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingIpMode.setStatus('current')
if mibBuilder.loadTexts: cfgRingIpMode.setDescription(' Source of ip addresses of NEs. If it is gneSupplied, GNE over writes the ip address of NE from its configured tables. Otherwise it takes it from NE itself')
cfgRingFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("axson", 1), ("pos", 2), ("axsonNBOS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingFrameMode.setStatus('current')
if mibBuilder.loadTexts: cfgRingFrameMode.setDescription(' The frame mode on the ring')
cfgRingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingOperStatus.setStatus('current')
if mibBuilder.loadTexts: cfgRingOperStatus.setDescription(' The operational status of the configured ring ')
cfgRingCurNumTdmCkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurNumTdmCkts.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurNumTdmCkts.setDescription(' The number of TDM ckts traversing on the ring currently.')
cfgRingCurNumFreeChans = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurNumFreeChans.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurNumFreeChans.setDescription(' The number of free channels available on the ring currently. ')
cfgRingNeAdminCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingNeAdminCost.setStatus('current')
if mibBuilder.loadTexts: cfgRingNeAdminCost.setDescription(" The NE specific admin costs on the ring as comma separated list where list entry is of form <ip address in dotted notation>:<admin cost>. Admin costs for the NE's that are present on this ring but not specified in this list are inherited from ring admin cost. Admin cost per NE per ring is useful in traffic management")
cfgRingCurNumDataCkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurNumDataCkts.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurNumDataCkts.setDescription(' The number of data ckts traversing on the ring currently.')
cfgRingCurAllocTdmBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurAllocTdmBwKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurAllocTdmBwKbits.setDescription(' The bandwidth on the ring that is currently being reserved by TDM ckts passing through ring.')
cfgRingCurAllocCirBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurAllocCirBwKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurAllocCirBwKbits.setDescription(' The bandwidth on the ring that is currently being reserved for CIR by data ckts passing through the ring.')
cfgRingCurAllocEirBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurAllocEirBwKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurAllocEirBwKbits.setDescription(' The bandwidth on the ring that is currently being reserved for EIR by data ckts passing through the ring.')
cfgRingCurAvailBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurAvailBwKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurAvailBwKbits.setDescription(' The current available bandwidth on the ring ')
cfgRingTdmAvgUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmAvgUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingTdmAvgUtilPercent.setDescription(' Average ring utilization for TDM traffic since last reset ')
cfgRingTdmLastUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmLastUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingTdmLastUtilPercent.setDescription(' Ring utilization for TDM traffic during last period.')
cfgRingTdmMaxUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmMaxUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingTdmMaxUtilPercent.setDescription(' Max. ring utilization for TDM traffic since last reset ')
cfgRingDataAvgUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataAvgUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingDataAvgUtilPercent.setDescription(' Average ring utilization for Data traffic since last reset ')
cfgRingDataLastUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataLastUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingDataLastUtilPercent.setDescription(' Ring utilization for Data traffic during last period ')
cfgRingDataMaxUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataMaxUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingDataMaxUtilPercent.setDescription(' Max. ring utilization for Data traffic since last reset ')
cfgRingTotalAvgUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTotalAvgUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingTotalAvgUtilPercent.setDescription(' Average ring utlization for combined Data and TDM traffic ')
cfgRingTotalLastUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTotalLastUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingTotalLastUtilPercent.setDescription(' Ring utilization for TDM and Data traffic during last period ')
cfgRingTotalMaxUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTotalMaxUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingTotalMaxUtilPercent.setDescription(' Max. ring utilization for TDM and Data traffic since last reset ')
cfgRingTdmTrafficKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmTrafficKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingTdmTrafficKbits.setDescription(' TDM traffic transmitted on ring since last reset ')
cfgRingTdmLastTrafficKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmLastTrafficKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingTdmLastTrafficKbits.setDescription(' TDM traffic transmitted on ring during current period ')
cfgRingDataTrafficKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataTrafficKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingDataTrafficKbits.setDescription(' Data traffic transmitted on ring since last reset ')
cfgRingDataLastTrafficKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataLastTrafficKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingDataLastTrafficKbits.setDescription(' Data traffic trasnmitted on ring during last period ')
cfgRingDataNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataNumPkts.setStatus('current')
if mibBuilder.loadTexts: cfgRingDataNumPkts.setDescription(' Number of Data packets on ring since last reset ')
cfgRingDataLastNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataLastNumPkts.setStatus('current')
if mibBuilder.loadTexts: cfgRingDataLastNumPkts.setDescription(' Number of Data packets on ring during last period ')
cfgRingStatsCollElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 37), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingStatsCollElapsedTime.setStatus('current')
if mibBuilder.loadTexts: cfgRingStatsCollElapsedTime.setDescription(' The time elapsed since the beginning of collection of ring statistics ')
cfgRingStatsPeriodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 38), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingStatsPeriodTime.setStatus('current')
if mibBuilder.loadTexts: cfgRingStatsPeriodTime.setDescription(' The period of status collection interval')
cfgRingTimeSinceLastOperStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 39), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTimeSinceLastOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: cfgRingTimeSinceLastOperStatusChange.setDescription(' The time since the last change in the oper status of the ring ')
cfgRingTdmMinUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmMinUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingTdmMinUtilPercent.setDescription(' Mininum ring utilization for TDM traffic since last reset ')
cfgRingDataMinUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataMinUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingDataMinUtilPercent.setDescription(' Mininum ring utilization for data traffic since last reset ')
cfgRingTotalMinUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTotalMinUtilPercent.setStatus('current')
if mibBuilder.loadTexts: cfgRingTotalMinUtilPercent.setDescription('Mininum ring utilization for combined TDM and Data traffic since last reset ')
cfgRingAttUpsrSwitchCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("axsonUpsrScClear", 1), ("axsonUpsrScLockoutOfProtection", 2), ("axsonUpsrScForcedSwToProtection", 3), ("axsonUpsrScForcedSwToWorking", 4), ("axsonUpsrScManualSwToProtection", 5), ("axsonUpsrScManualSwToWorking", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingAttUpsrSwitchCmd.setStatus('current')
if mibBuilder.loadTexts: cfgRingAttUpsrSwitchCmd.setDescription('This object defines the UPSR switch commands that amy be configured. These commands are configurable and static. The priority of the commands in relation to APS and revertive switching is given in the enumeration above.')
cfgRingIsRevertiveModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingIsRevertiveModeEnabled.setStatus('current')
if mibBuilder.loadTexts: cfgRingIsRevertiveModeEnabled.setDescription('If the revertive mode is enabled and the UPSR switch command is clear, then, if the working ring gets cut, the traffic is moved to the protected ring. When the working ring is restored from the cut, traffic will be reverted to the working ring.')
cfgRingWaitToRestorePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingWaitToRestorePeriod.setStatus('current')
if mibBuilder.loadTexts: cfgRingWaitToRestorePeriod.setDescription('This object provide the time period in minutes between the time the working ring gets restored from the cut and the time when the traffic is reverted to the working ring.')
cfgRingCurTdmAvailBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurTdmAvailBwKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurTdmAvailBwKbits.setDescription(' The current tdm available bandwidth on the ring ')
cfgRingCurDataAvailBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurDataAvailBwKbits.setStatus('current')
if mibBuilder.loadTexts: cfgRingCurDataAvailBwKbits.setDescription(' The current pkt available bandwidth on the ring ')
ringOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,3)).setObjects(("RING-MIB", "cfgRingName"), ("RING-MIB", "cfgRingOperStatus"))
if mibBuilder.loadTexts: ringOperStatusChange.setDescription('change in operational status of a configured logical ring')
neReachabilityChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("DEVICE-MIB", "chassisIpAddr"), ("DEVICE-MIB", "chassisElemReachStatus"))
if mibBuilder.loadTexts: neReachabilityChange.setDescription('change in the reachability status of NE')
lambdaStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,5)).setObjects(("RING-MIB", "cfgRingName"), ("RING-MIB", "logRingLambdaStatus"), ("RING-MIB", "logRingCutLocationIp"), ("RING-MIB", "logRingCutLocationName"))
if mibBuilder.loadTexts: lambdaStatusChange.setDescription('change in the fiber status of the ring')
ringProtoErrorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,6)).setObjects(("RING-MIB", "cfgRingName"), ("RING-MIB", "logRingProtoStatusTxt"), ("RING-MIB", "logRingProtoStatus"))
if mibBuilder.loadTexts: ringProtoErrorStatusChange.setDescription('Ring error detected/cleared')
ringProtoWarnStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,7)).setObjects(("RING-MIB", "cfgRingName"), ("RING-MIB", "logRingProtoStatusTxt"), ("RING-MIB", "logRingProtoStatus"))
if mibBuilder.loadTexts: ringProtoWarnStatusChange.setDescription('Ring warning detected/cleared')
ringTopoChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,56)).setObjects(("RING-MIB", "cfgRingName"))
if mibBuilder.loadTexts: ringTopoChange.setDescription('Ring topology changed')
mibBuilder.exportSymbols("RING-MIB", cfgRingTimeSinceLastOperStatusChange=cfgRingTimeSinceLastOperStatusChange, actLogRingElemTable=actLogRingElemTable, cfgRingCurAllocTdmBwKbits=cfgRingCurAllocTdmBwKbits, cfgRingCurNumDataCkts=cfgRingCurNumDataCkts, logRingOtherVport=logRingOtherVport, cfgRingCurAllocCirBwKbits=cfgRingCurAllocCirBwKbits, cfgRingCurAllocEirBwKbits=cfgRingCurAllocEirBwKbits, cfgRingDataAvgUtilPercent=cfgRingDataAvgUtilPercent, cfgRingTdmAvgUtilPercent=cfgRingTdmAvgUtilPercent, actPhyRingEntry=actPhyRingEntry, cfgRingTotalAvgUtilPercent=cfgRingTotalAvgUtilPercent, logRingElemChassisCharacter=logRingElemChassisCharacter, logRingOtherSlot=logRingOtherSlot, logRingElemMACAddr=logRingElemMACAddr, logRingGneRingPort=logRingGneRingPort, cfgRingDataNumPkts=cfgRingDataNumPkts, cfgRingTotalMaxUtilPercent=cfgRingTotalMaxUtilPercent, logRingAttRingType=logRingAttRingType, logRingGneRingSlot=logRingGneRingSlot, cfgRingRowStatus=cfgRingRowStatus, logRingCapacity=logRingCapacity, cfgRingEirOverSub=cfgRingEirOverSub, cfgRingCurNumTdmCkts=cfgRingCurNumTdmCkts, ringProtoWarnStatusChange=ringProtoWarnStatusChange, actLogRingCount=actLogRingCount, cfgRingEntry=cfgRingEntry, cfgRingDataMinUtilPercent=cfgRingDataMinUtilPercent, phyRingSlotNo=phyRingSlotNo, logRingVPortNo=logRingVPortNo, ringTopoChange=ringTopoChange, actLogRingTable=actLogRingTable, cfgRingExceptNes=cfgRingExceptNes, ringProtoErrorStatusChange=ringProtoErrorStatusChange, cfgRingStatsPeriodTime=cfgRingStatsPeriodTime, logRingElemChassisId=logRingElemChassisId, cfgRingDataLastNumPkts=cfgRingDataLastNumPkts, cfgRingTotalLastUtilPercent=cfgRingTotalLastUtilPercent, cfgRingAdminCost=cfgRingAdminCost, cfgRingTable=cfgRingTable, cfgRingTotalMinUtilPercent=cfgRingTotalMinUtilPercent, logRingElemName=logRingElemName, cfgRingCurAvailBwKbits=cfgRingCurAvailBwKbits, cfgRingTdmTrafficKbits=cfgRingTdmTrafficKbits, actPhyRingCount=actPhyRingCount, lambdaStatusChange=lambdaStatusChange, logRingElemIsReachable=logRingElemIsReachable, logRingElemPortId=logRingElemPortId, cfgRingOperStatus=cfgRingOperStatus, logRingGneRingVport=logRingGneRingVport, logRingUpsNgbrName=logRingUpsNgbrName, logRingElemIsLambdaCutHere=logRingElemIsLambdaCutHere, cfgRingDataMaxUtilPercent=cfgRingDataMaxUtilPercent, cfgRingCount=cfgRingCount, cfgRingProtectMode=cfgRingProtectMode, logRingCutLocationIp=logRingCutLocationIp, logRingIsRingMaster=logRingIsRingMaster, logRingElemIpAddr=logRingElemIpAddr, logRingUpsNgbrIpAddr=logRingUpsNgbrIpAddr, actLogRingEntry=actLogRingEntry, logRingIsConfigured=logRingIsConfigured, logRingElemActiveMM=logRingElemActiveMM, cfgRingFrameMode=cfgRingFrameMode, cfgRingAttUpsrSwitchCmd=cfgRingAttUpsrSwitchCmd, logRingOtherPort=logRingOtherPort, cfgRingTdmLastTrafficKbits=cfgRingTdmLastTrafficKbits, actLogRingElemEntry=actLogRingElemEntry, logRingLambdaStatus=logRingLambdaStatus, logRingCutLocationName=logRingCutLocationName, cfgRingTdmMaxUtilPercent=cfgRingTdmMaxUtilPercent, logRingUpsNgbrRingVport=logRingUpsNgbrRingVport, cfgRingIpMode=cfgRingIpMode, cfgRingStatsCollElapsedTime=cfgRingStatsCollElapsedTime, cfgRingName=cfgRingName, logRingUpsNgbrRingSlot=logRingUpsNgbrRingSlot, cfgRingIsRevertiveModeEnabled=cfgRingIsRevertiveModeEnabled, cfgRingTdmMinUtilPercent=cfgRingTdmMinUtilPercent, ringMIB=ringMIB, PYSNMP_MODULE_ID=ringMIB, cfgRingCurTdmAvailBwKbits=cfgRingCurTdmAvailBwKbits, neReachabilityChange=neReachabilityChange, logRingProtoStatusTxt=logRingProtoStatusTxt, actPhyRingTable=actPhyRingTable, phyRingPortNo=phyRingPortNo, cfgRingDataLastTrafficKbits=cfgRingDataLastTrafficKbits, cfgRingDataLastUtilPercent=cfgRingDataLastUtilPercent, logRingElemIsInNeTable=logRingElemIsInNeTable, cfgRingMeshFactor=cfgRingMeshFactor, cfgRingTdmLastUtilPercent=cfgRingTdmLastUtilPercent, logRingGneName=logRingGneName, logRingGneIpAddr=logRingGneIpAddr, cfgRingCurDataAvailBwKbits=cfgRingCurDataAvailBwKbits, logRingElemRxSegCutSeverity=logRingElemRxSegCutSeverity, cfgRingCurNumFreeChans=cfgRingCurNumFreeChans, logRingElemCount=logRingElemCount, logRingProtoStatus=logRingProtoStatus, ringOperStatusChange=ringOperStatusChange, logRingUpsNgbrRingPort=logRingUpsNgbrRingPort, logRingElemIndex=logRingElemIndex, cfgRingNeAdminCost=cfgRingNeAdminCost, cfgRingWaitToRestorePeriod=cfgRingWaitToRestorePeriod, logRingElemNodeId=logRingElemNodeId, cfgRingDataTrafficKbits=cfgRingDataTrafficKbits, cfgRingNeTopo=cfgRingNeTopo)
