#
# PySNMP MIB module A3COM0073IGMP-SNOOP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM0073IGMP-SNOOP
# Produced by pysmi-0.3.4 at Wed May  1 11:08:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter32, enterprises, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Integer32, Counter64, ObjectIdentity, Unsigned32, TimeTicks, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "enterprises", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Integer32", "Counter64", "ObjectIdentity", "Unsigned32", "TimeTicks", "MibIdentifier", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
generic = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10))
igmpMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 37))
igmpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 37, 1))
igmpSnoopEnabled = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopEnabled.setDescription('Enables/disables IGMP Snooping on this device. It is set stack-wide. The defaule value is True. The range is True(1) or False(2).')
igmpSnoopRobustness = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopRobustness.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopRobustness.setDescription('This enables IGMP tuning on a lossy network if a switch is the querier. On such a network it may be increased. It is set stack-wide. The default value is 1. The range is 1 to 2. There could be a Low(1) or High(2) setting. It is used to derive a timeout interval. If no IGMP v2 queries are heard on this VLAN within this timeout interval, the local switch will take over the querier role in the VLAN, assuming the switch has no router ports: Other Switch Querier Present Interval = (Robustness x General Query Interval) + 1/2(General Max Query-Response Interval) = 65 seconds by default The Robustness is also used to derive another interval. The amount of time that must pass before the querying switch decides that there are no more hosts listening to a particular multicast in seconds: Group Membership Interval = (Robustness x General Query Interval) + General Max Query-Response Interval = 70 seconds by default.')
igmpSnoopLeaveEnabled = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopLeaveEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopLeaveEnabled.setDescription('Enables/disables the processing of IGMP v2 leave messages stack-wide. The default value is True(1). The range is True(1) or False(2).')
igmpSnoopQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setDescription('The frequency at which IGMP general query packets are transmitted on this VLAN by the querying switch in seconds. So this is the time between general periodic queries being sent out of the switch when it is acting as the IGMP querier. Large values lead to IGMP queries being sent less often. It is set stack-wide. The default is 125 seconds and the range is 60 to 125 seconds. There could be 2 settings apart from the default. Slow Query (100 secs) and Very Slow Query (125 secs).')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setDescription('The maximum query response time in seconds advertised in IGMP v2 queries on this VLAN if the switch is the querier. Smaller values allow a switch to prune groups faster. So it is the maximum response time inserted into the general periodic queries. This variable enables the tuning of the burstiness of the IGMP traffic. If it is increased the responses have a larger time span in which to be generated by the hosts. It is set stack-wide. The default is 10 seconds and the range is 10 to 100 seconds. There could be 2 settings apart from the default. Slow Response (50 secs) and Very Slow Response (100 secs).')
igmpSnoopLastMemberQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopLastMemberQueryTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopLastMemberQueryTimeout.setDescription('A timeout interval in seconds. Maximum response time inserted into the IGMP group specific queries sent in response to an IGMP Leave by a querying switch. It is also the time between IGMP group specific queries being sent. It is set stack-wide. The default is 1 second and the range is 1 to 5 seconds. There could be 2 settings apart from the default. Slow Response (3 secs) and Very Slow Response (5 secs).')
igmpSnoopLastMemberQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopLastMemberQueryCount.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopLastMemberQueryCount.setDescription('The number of group specific queries sent before the querying switch decides that there are no more hosts listening to a particular group multicast address. It is set stack-wide. The default is 2 and the range is 2 to 5. There could be 2 settings apart from the default. Low count (3) and High count (5).')
igmpSnoopRouterPortRefreshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopRouterPortRefreshTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopRouterPortRefreshTimeout.setDescription('A timeout interval in seconds. The maximum time that should elapse between multicast router protocol PDUs on a port in the VLAN. The default is 100 seconds and the range is from 70 to 100 seconds. There could be 2 settings apart from the default. Slow Refresh (85 secs) and Very Slow Refresh (100 secs).')
igmpSnoopVLANTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 9), )
if mibBuilder.loadTexts: igmpSnoopVLANTable.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopVLANTable.setDescription('The (conceptual) table listing the VLANs on which IGMP Snooping is enabled.')
igmpSnoopVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: igmpSnoopVLANEntry.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopVLANEntry.setDescription('An entry (conceptual row) representing a VLAN on which IGMP Snooping is enabled.')
igmpSnoopVLANJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVLANJoins.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopVLANJoins.setDescription('The number of times a group membership has been added on this VLAN; i.e. the number of times an entry for this VLAN has been added to the IGMP Snooping VLAN Table. This object gives an indication of the amount of IGMP activity over time. So this is the count of IGMP Reports received over time on a VLAN.')
igmpSnoopVLANLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVLANLeaves.setStatus('mandatory')
if mibBuilder.loadTexts: igmpSnoopVLANLeaves.setDescription('The number of times a group membership has been removed from this VLAN; i.e. the number of times an entry for this VLAN has been deleted from the IGMP Snooping VLAN Table. The difference between this and igmpSnoopVLANJoins indicates the number of hosts listening to multicasts. The count of IGMP Leaves received over time on a VLAN.')
igmpQueryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQueryEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: igmpQueryEnabled.setDescription('Enabled/Disables IGMP Queries for this device. The default value is True. The range is True(1) or False(2).')
igmpQueryIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 37, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQueryIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: igmpQueryIpAddress.setDescription('This is the IP address used in IGMP Queries. The default value is the management IP address. Since the root query device is determined by the lowest IP address, you can vary this value to increase or decrease the priority of the device.')
mibBuilder.exportSymbols("A3COM0073IGMP-SNOOP", generic=generic, a3Com=a3Com, igmpSnoopVLANEntry=igmpSnoopVLANEntry, igmpSnoopVLANJoins=igmpSnoopVLANJoins, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, igmpSnoopEnabled=igmpSnoopEnabled, igmpSnoopVLANTable=igmpSnoopVLANTable, TruthValue=TruthValue, igmpSnoop=igmpSnoop, igmpSnoopVLANLeaves=igmpSnoopVLANLeaves, igmpSnoopLastMemberQueryCount=igmpSnoopLastMemberQueryCount, igmpMib=igmpMib, igmpQueryEnabled=igmpQueryEnabled, igmpSnoopQueryTimeout=igmpSnoopQueryTimeout, igmpQueryIpAddress=igmpQueryIpAddress, igmpSnoopRouterPortRefreshTimeout=igmpSnoopRouterPortRefreshTimeout, igmpSnoopRobustness=igmpSnoopRobustness, igmpSnoopLastMemberQueryTimeout=igmpSnoopLastMemberQueryTimeout, igmpSnoopLeaveEnabled=igmpSnoopLeaveEnabled)
