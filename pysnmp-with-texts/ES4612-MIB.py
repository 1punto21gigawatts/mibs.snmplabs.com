#
# PySNMP MIB module ES4612-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES4612-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
BridgeId, dot1dStpPort, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "dot1dStpPort", "Timeout")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
EnabledStatus, dot1dTrafficClassPriority, dot1dTrafficClass = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus", "dot1dTrafficClassPriority", "dot1dTrafficClass")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, Unsigned32, Counter32, NotificationType, enterprises, IpAddress, Counter64, Gauge32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Unsigned32", "Counter32", "NotificationType", "enterprises", "IpAddress", "Counter64", "Gauge32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "MibIdentifier")
TruthValue, TextualConvention, DisplayString, DateAndTime, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime", "RowStatus", "MacAddress")
vrrpOperVrId, = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperVrId")
accton = MibIdentifier((1, 3, 6, 1, 4, 1, 259))
snmpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6))
cheetahSwitchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10))
es4612MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 259, 6, 10, 57))
es4612MIB.setRevisions(('2001-09-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: es4612MIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: es4612MIB.setLastUpdated('200109060000Z')
if mibBuilder.loadTexts: es4612MIB.setOrganization('Accton Technology Corp.')
if mibBuilder.loadTexts: es4612MIB.setContactInfo('Accton Technology Corp. Customer Service Postal: No. 1 Creation Rd. III, Science-based Industrial Park, Hsinchu 300-77, Taiwan, R.O.C. Tel: +886-3-5770270 E-mail: sales_ec@edge-core.com')
if mibBuilder.loadTexts: es4612MIB.setDescription('The MIB module for ES4612.')
es4612MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1))
es4612MIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2))
es4612MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 3))
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10))
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14))
qosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17))
layer3Mgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19))
lineMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24))
dnsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26))
hsrpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29))
mvrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44))
class ValidStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object to create and destroy a table entry. This is a simplified variant of RowStatus as it supports only two values. Setting it to valid(1) creates an entry. Setting it to invalid(2) destroys an entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class OspfAreaID(TextualConvention, IpAddress):
    description = 'An OSPF Area Identifier.'
    status = 'current'

class OspfBigMetric(TextualConvention, Integer32):
    description = 'The OSPF External Metric.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777214)

class HsrpState(TextualConvention, Integer32):
    description = 'The current state of the HSRP protocol for a given HSRP group entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("initial", 1), ("learn", 2), ("listen", 3), ("speak", 4), ("standby", 5), ("active", 6))

class StaPathCostMode(TextualConvention, Integer32):
    description = 'The path cost mode of a spanning tree algorithm, short(1) indicates that we retrieve/configure the spanning tree path cost as a 16 bit value and long(2) indicates that we retrieve/configure the spanning tree path cost as a 32 bit value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

switchManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchManagementVlan.setStatus('current')
if mibBuilder.loadTexts: switchManagementVlan.setDescription('The VLAN on which management is done.')
switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
if mibBuilder.loadTexts: switchNumber.setDescription('The total number of switches present on this system.')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
if mibBuilder.loadTexts: switchInfoTable.setDescription('Table of descriptive and status information about switches in this system.')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1), ).setIndexNames((0, "ES4612-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: switchInfoEntry.setDescription('An entry in the table, containing information about a single switch in this system.')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swUnitIndex.setDescription('This object identifies the switch within the system for which this entry contains information. This value can never be greater than switchNumber.')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
if mibBuilder.loadTexts: swHardwareVer.setDescription('Hardware version of the main board.')
swMicrocodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMicrocodeVer.setStatus('current')
if mibBuilder.loadTexts: swMicrocodeVer.setDescription('Microcode version of the main board.')
swLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoaderVer.setStatus('current')
if mibBuilder.loadTexts: swLoaderVer.setDescription('Loader version of the main board.')
swBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
if mibBuilder.loadTexts: swBootRomVer.setDescription('Boot ROM code version of the main board.')
swOpCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
if mibBuilder.loadTexts: swOpCodeVer.setDescription('Operation code version of the main board.')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
if mibBuilder.loadTexts: swPortNumber.setDescription('The total port number of this switch (including expansion slot).')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swPowerStatus.setDescription('Indicates the switch using internalPower(1), redundantPower(2) or both(3)')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
if mibBuilder.loadTexts: swRoleInSystem.setDescription('Indicates the switch is master(1), backupMaster(2) or slave(3) in this system.')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swSerialNumber.setDescription('Serial number of the switch.')
swExpansionSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notPresent", 1), ("other", 2), ("hundredBaseFxScMmf", 3), ("hundredBaseFxScSmf", 4), ("hundredBaseFxMtrjMmf", 5), ("thousandBaseSxScMmf", 6), ("thousandBaseSxMtrjMmf", 7), ("thousandBaseXGbic", 8), ("thousandBaseLxScSmf", 9), ("thousandBaseT", 10), ("stackingModule", 11), ("thousandBaseSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExpansionSlot1.setStatus('current')
if mibBuilder.loadTexts: swExpansionSlot1.setDescription('Type of expansion module in this switch slot 1.')
swExpansionSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notPresent", 1), ("other", 2), ("hundredBaseFxScMmf", 3), ("hundredBaseFxScSmf", 4), ("hundredBaseFxMtrjMmf", 5), ("thousandBaseSxScMmf", 6), ("thousandBaseSxMtrjMmf", 7), ("thousandBaseXGbic", 8), ("thousandBaseLxScSmf", 9), ("thousandBaseT", 10), ("stackingModule", 11), ("thousandBaseSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExpansionSlot2.setStatus('current')
if mibBuilder.loadTexts: swExpansionSlot2.setDescription('Type of expansion module in this switch slot 2.')
swServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swServiceTag.setStatus('current')
if mibBuilder.loadTexts: swServiceTag.setDescription('Service tag serial-number of the switch.')
swModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swModelNumber.setStatus('current')
if mibBuilder.loadTexts: swModelNumber.setDescription('Model number of the switch.')
switchOperState = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchOperState.setStatus('current')
if mibBuilder.loadTexts: switchOperState.setDescription('Global operation state of the switch.')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5))
swProdName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
if mibBuilder.loadTexts: swProdName.setDescription('')
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
if mibBuilder.loadTexts: swProdManufacturer.setDescription('')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
if mibBuilder.loadTexts: swProdDescription.setDescription('')
swProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdVersion.setStatus('current')
if mibBuilder.loadTexts: swProdVersion.setDescription('')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
if mibBuilder.loadTexts: swProdUrl.setDescription('')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
if mibBuilder.loadTexts: swIdentifier.setDescription('A unique identifier of which switch in the chassis is currently being looked at.')
swChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisServiceTag.setStatus('current')
if mibBuilder.loadTexts: swChassisServiceTag.setDescription('The service tag of the chassis this switch resides in.')
switchIndivPowerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6), )
if mibBuilder.loadTexts: switchIndivPowerTable.setStatus('current')
if mibBuilder.loadTexts: switchIndivPowerTable.setDescription('Table about statuses of individual powers.')
switchIndivPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6, 1), ).setIndexNames((0, "ES4612-MIB", "swIndivPowerUnitIndex"), (0, "ES4612-MIB", "swIndivPowerIndex"))
if mibBuilder.loadTexts: switchIndivPowerEntry.setStatus('current')
if mibBuilder.loadTexts: switchIndivPowerEntry.setDescription('Table about statuses of individual powers.')
swIndivPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setDescription('This is defined as swUnitIndex.')
swIndivPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerIndex.setDescription('1 means internal power. 2 means external power.')
swIndivPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("green", 2), ("red", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerStatus.setDescription('notPresent(1) means not present. green(2) means up. red(3) means down.')
switchJumboFrameStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchJumboFrameStatus.setStatus('current')
if mibBuilder.loadTexts: switchJumboFrameStatus.setDescription('enable(1) means the Jumbo Frame has enabled, disabled(2) means the Jumbo Frame has disabled.')
amtrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 8))
amtrMacAddrAgingStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 8, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setStatus('current')
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setDescription('If this is enabled(1), the MAC address table will age out according to its timer. If this is disabled(2), the MAC address table will not age out.')
switchFanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9), )
if mibBuilder.loadTexts: switchFanTable.setStatus('current')
if mibBuilder.loadTexts: switchFanTable.setDescription('The table of Fan Status.')
switchFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9, 1), ).setIndexNames((0, "ES4612-MIB", "switchUnitIndex"), (0, "ES4612-MIB", "switchFanIndex"))
if mibBuilder.loadTexts: switchFanEntry.setStatus('current')
if mibBuilder.loadTexts: switchFanEntry.setDescription('A conceptual row of the switchFanTable.')
switchUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: switchUnitIndex.setStatus('current')
if mibBuilder.loadTexts: switchUnitIndex.setDescription('the unit of the switch for stackable device.')
switchFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: switchFanIndex.setStatus('current')
if mibBuilder.loadTexts: switchFanIndex.setDescription('The unit number of the fan.')
switchFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFanStatus.setStatus('current')
if mibBuilder.loadTexts: switchFanStatus.setDescription('Indicating the status of the fan, 1:ok; 2:failure.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription("Table of descriptive and status information about configuration of each switch port (including expansion slot) in this system. This table also contains information about each trunk (similar to Cisco's EtherChannel).")
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1), ).setIndexNames((0, "ES4612-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('Indicates the port name. This is same as ifAlias in the IF-MIB (RFC2863 or later).')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('Indicates the port type.')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxCfg.setDescription('Set the port speed and duplex mode as follows: halfDuplex10(2) - 10Mbps and half duplex mode fullDuplex10(3) - 10Mbps and full duplex mode halfDuplex100(4) - 100Mbps and half duplex mode fullDuplex100(5) - 100Mbps and full duplex mode halfDuplex1000(6) - 1000Mbps and half duplex mode fullDuplex1000(7) - 1000Mbps and full duplex mode hundredBaseTX port can be set as halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) hundredBaseFX port can be set as halfDuplex100(4) fullDuplex100(5) thousandBaseSX port can be set as halfDuplex1000(6) fullDuplex1000(7) The actual operating speed and duplex of the port is given by portSpeedDpxStatus.')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlCfg.setDescription('(1) Flow control mechanism is enabled. If the port type is hundredBaseTX or thousandBaseSX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, the port uses IEEE 802.3x flow control mechanism. If the port type is hundredBaseFX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, Flow control mechanism will not function. (2) Flow control mechanism is disabled. (3) Flow control mechanism is backPressure. when the port is in fullDuplex mode.This flow control mechanism will not function. (4) Flow control mechanism is IEEE 802.3x flow control. when the port is in halfDuplex mode.This flow control mechanism will not function. hundredBaseTX and thousandBaseSX port can be set as: enabled(1), disabled(2), backPressure(3), dot3xFlowControl(4). hundredBaseFX port can be set as: enabled(1), disabled(2), backPressure(3). The actual flow control mechanism is used given by portFlowCtrlStatus.')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
if mibBuilder.loadTexts: portCapabilities.setDescription('Port capabilities.')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: portAutonegotiation.setDescription('Whether autonegotiation is enabled.')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxStatus.setDescription('The operating speed and duplex mode of the switched port. If this index is a trunk, the speed is the speed of its individual members. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlStatus.setDescription('(2) BackPressure flow control machanism is used. (3) IEEE 802.3 flow control machanism is used. (4) Flow control mechanism is disabled. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: portTrunkIndex.setDescription('The trunk to which this port belongs. A value of 0 means that this port does not belong to any trunk. A value greater than zero means that this port belongs to trunk at trunkIndex, defined by the corresponding trunkPorts.')
portComboForcedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("copperForced", 2), ("copperPreferredAuto", 3), ("sfpForced", 4), ("sfpPreferredAuto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portComboForcedMode.setStatus('current')
if mibBuilder.loadTexts: portComboForcedMode.setDescription('This determines the forced mode of a combo port. For a non-combo port, this variable has a value of none(1), and setting this variable to none(1) has no effect. For a combo port, this has its own valid values not equal to none(1), and setting this variable to none(1) is not allowed.')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
if mibBuilder.loadTexts: trunkMaxId.setDescription('The maximum number for a trunk identifier.')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
if mibBuilder.loadTexts: trunkValidNumber.setDescription('The number of valid trunks.')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
if mibBuilder.loadTexts: trunkTable.setDescription('Table of descriptive and status information about configuration of each trunk, similar to Cisco EtherChannel.')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1), ).setIndexNames((0, "ES4612-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
if mibBuilder.loadTexts: trunkEntry.setDescription('An entry in the table, containing information about configuration in one trunk of the switch.')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
if mibBuilder.loadTexts: trunkIndex.setDescription('This object identifies the trunk within the switch for which this entry contains information.')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
if mibBuilder.loadTexts: trunkPorts.setDescription('The complete set of ports currently associated with this trunk.')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
if mibBuilder.loadTexts: trunkCreation.setDescription('A value of static(1) means a statically configured trunk. A value of lacp(2) means an LACP-configured trunk.')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
if mibBuilder.loadTexts: trunkStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
if mibBuilder.loadTexts: lacpPortTable.setDescription('Table for LACP port configuration.')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4, 1, 1), ).setIndexNames((0, "ES4612-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
if mibBuilder.loadTexts: lacpPortEntry.setDescription('Entry for LACP port configuration.')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
if mibBuilder.loadTexts: lacpPortIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
if mibBuilder.loadTexts: lacpPortStatus.setDescription('Whether 802.3ad LACP is enabled.')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
if mibBuilder.loadTexts: staSystemStatus.setDescription('Global spanning tree status. (1) Spanning tree protocol is enabled. (2) Spanning tree protocol is disabled.')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setReference('IEEE 802.1d, IEEE 802.1w, IEEE 802.1s.')
if mibBuilder.loadTexts: staPortTable.setStatus('current')
if mibBuilder.loadTexts: staPortTable.setDescription('The table manages port settings for Spanning Tree Protocol 802.1d, 802.1w or 802.1s depending on the value specified by staProtocolType.')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1), ).setIndexNames((0, "ES4612-MIB", "staPortIndex"))
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
if mibBuilder.loadTexts: staPortEntry.setDescription('The conceptual entry of staPortTable.')
staPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: staPortIndex.setStatus('current')
if mibBuilder.loadTexts: staPortIndex.setDescription('The port and the trunk (excluding trunk member ports) interface of the staPortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of dot1dStpPort in the BRIDGE-MIB.')
staPortFastForward = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortFastForward.setStatus('current')
if mibBuilder.loadTexts: staPortFastForward.setDescription('Whether fast forwarding is enabled.')
staPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortProtocolMigration.setReference('IEEE 802.1w clause 14.8.2.4, 17.18.10, 17.26')
if mibBuilder.loadTexts: staPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: staPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing true(1) to this object forces this port to transmit RSTP BPDUs. Any other operation on this object has no effect and it always returns false(2) when read.')
staPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.3')
if mibBuilder.loadTexts: staPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: staPortAdminEdgePort.setDescription('The administrative value of the edge port parameter. A value of true(1) indicates that this port should be assumed as an edge-port and a value of false(2) indicates that this port should be assumed as a non-edge-port.')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.4')
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: staPortOperEdgePort.setDescription('The operational value of the edge port parameter. The object is initialized to the value of staPortAdminEdgePort and is set false when a BPDU is received.')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: staPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: staPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment attached to this port. This indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the staPortAdminPointToPoint object.')
staPortLongPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongPathCost.setStatus('current')
if mibBuilder.loadTexts: staPortLongPathCost.setDescription('The contribution of this port to the path cost (in 32 bits value) of paths towards the spanning tree root which include this port. This object is used to configure the spanning tree port path cost in the 32-bit value range when the staPathCostMethod is long(2). If the staPathCostMethod is short(1), this mib object is not instantiated.')
staPortSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 2, 1, 9), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortSystemStatus.setStatus('current')
if mibBuilder.loadTexts: staPortSystemStatus.setDescription('Per-port spanning tree status. (1) Spanning tree protocol is enabled. (2) Spanning tree protocol is disabled.')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setReference('IEEE 802.1w clause 14.8.1, 17.12, 17.16.1')
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
if mibBuilder.loadTexts: staProtocolType.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stp(1)' indicates the Spanning Tree Protocol is as specified in IEEE 802.1D,'rstp(2)' indicates that the Rapid Spanning Tree Protocol is as specified in IEEE 802.1w, and the value 'mstp(3)' indicates that the Multiple Spanning Tree Protocol is as specified in IEEE 802.1s. New values may be defined in the future as new or updated versions of the protocol become available.")
staTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTxHoldCount.setReference('IEEE 802.1w clause 17.16.6')
if mibBuilder.loadTexts: staTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: staTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate.')
staPathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 5), StaPathCostMode().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPathCostMethod.setStatus('current')
if mibBuilder.loadTexts: staPathCostMethod.setDescription("Indicates the type of spanning tree path cost mode configured on the switch. This mode applies to all instances of the spanning tree protocol running on the switch. When the value of this MIB object is changed, the path cost of all ports will be reassigned to the default path cost values based on the new spanning tree path cost mode and the ports' speed. When the value of this MIB object is set to long(2), the staPortLongPathCost MIB object must be used to retrieve/configure the spanning tree port path cost as a 32-bit value. The set operation on dot1dStpPortPathCost in BRIDGE-MIB will be rejected. While retrieving the value of dot1dStpPortPathCost, the maximum value of 65535 will be returned if the value of staPortLongPathCost for the same instance exceeds 65535. When the value of this MIB object is set to short(1), the dot1dStpPortPathCost in BRIDGE-MIB must be used.")
xstMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6))
mstName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstName.setStatus('current')
if mibBuilder.loadTexts: mstName.setDescription('The name of the Multiple Spanning Tree region.')
mstRevision = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstRevision.setStatus('current')
if mibBuilder.loadTexts: mstRevision.setDescription('The Revision number of the Multiple Spanning Tree region.')
mstMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMaxHops.setStatus('current')
if mibBuilder.loadTexts: mstMaxHops.setDescription('The max hop number counts of the Multiple Spanning Tree region.')
xstInstanceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4), )
if mibBuilder.loadTexts: xstInstanceCfgTable.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTable.setDescription('This table is used to configure the property of a specific instance in Multiple Spanning Tree or Rapid Spanning Tree. If Rapid Spanning Tree protocol is in use, the mstInstanceEditIndex is always 0.')
xstInstanceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1), ).setIndexNames((0, "ES4612-MIB", "xstInstanceCfgIndex"))
if mibBuilder.loadTexts: xstInstanceCfgEntry.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgEntry.setDescription('A conceptual row containing the property of the RST or MST instance.')
xstInstanceCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: xstInstanceCfgIndex.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
xstInstanceCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstanceCfgPriority.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgPriority.setDescription('The priority of a specific spanning tree instance. The value assigned should be in the range 0-61440 in steps of 4096.')
xstInstanceCfgTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last topology change detected by the bridge entity in RST or MST.')
xstInstanceCfgTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setDescription('The total number of topology changes detected by this bridge in RST or MST since the management entity was last reset or initialized.')
xstInstanceCfgDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setReference('IEEE 802.1w.')
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Multiple Spanning Tree Protocol. (802.1s) or Rapid Spanning Tree Protocol ( 802.1w ) executed by this node. This value is used as the root identifier parameter in all configuration bridge PDUs originated by this node.')
xstInstanceCfgRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setDescription('The cost of the path to the root as seen from this bridge of the RST or MST.')
xstInstanceCfgRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setDescription('The number of the port which offers the lowest cost path from this bridge to the root bridge of the RST or MST.')
xstInstanceCfgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setDescription('The maximum age of Multiple Spanning Tree Protocol ( 802.1s ) or Rapid Spanning Tree Protocol ( 802.1w ) information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
xstInstanceCfgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setDescription('The amount of time between the transmission of configuration bridge PDUs by this node on any port when it is the root of the specific spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using in RST or MST.')
xstInstanceCfgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setDescription('This time value determines the interval length during which no more than two configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
xstInstanceCfgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setDescription('For RST or MST protocol, this time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the forwarding state. The value determines how long the port stays in each of the listening and learning states, which precede the forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the forwarding database. This value is the current value being used by the bridge. xstInstanceCfgBridgeForwardDelay defines the value that this bridge and all others would start using if/when this bridge were to become the root.')
xstInstanceCfgBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setDescription('For RST or MST protocol, the time (in hundredths of second) that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of xstInstanceCfgBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setDescription('For RST or MST protocol,the time (in hundredths of a second) that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setDescription('For RST or MST protocol, the time (in hundredths of a second) that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of xstInstanceCfgBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setDescription('For RST or MST protocol, the value used by the port transmit state machine to limit the maximum transmission rate.')
xstInstanceCfgPathCostMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 4, 1, 16), StaPathCostMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setDescription("For RST or MST protocol, this indicates the type of spanning tree path cost mode used by the switch. The mode applies to all instances of the Spanning Tree protocol running on the switch. When the value of this MIB object is changed, the path cost of all ports will be reassigned to the default path cost values based on the new spanning tree path cost mode and the ports' speed. When the value of this MIB object is set to long(2), the xstInstancePortPathCost MIB object must be used in order to retrieve/configure the spanning tree port path cost as a 32-bit value. The set operation on dot1dStpPortPathCost in BRIDGE-MIB will be rejected. While retrieving the value of dot1dStpPortPathCost, the maximum value of 65535 will be returned if the value of xstInstancePortPathCost for the same instance exceeds 65535. When the value of this MIB object is set to short(1), the dot1dStpPortPathCost in BRIDGE-MIB must be used.")
xstInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5), )
if mibBuilder.loadTexts: xstInstancePortTable.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortTable.setDescription('The extension table for dot1dStpPortEntry to provide additional Spanning Tree information and configuration.')
xstInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1), ).setIndexNames((0, "ES4612-MIB", "xstInstancePortInstance"), (0, "ES4612-MIB", "xstInstancePortPort"))
if mibBuilder.loadTexts: xstInstancePortEntry.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortEntry.setDescription('The conceptual row for xstInstancePortTable.')
xstInstancePortInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: xstInstancePortInstance.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortInstance.setDescription('The instance of the MSTP.')
xstInstancePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: xstInstancePortPort.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPort.setDescription('The port and the trunk (excluding trunk member ports) interface of the mstInstancePortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of dot1dStpPort in the BRIDGE-MIB.')
xstInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPriority.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPriority.setDescription('Defines the priority used for this port in the Spanning Tree Algorithm. If the path cost for all ports on a switch is the same, the port with the highest priority (i.e., lowest value) will be configured as an active link in the Spanning Tree. This makes a port with higher priority less likely to be blocked if the Spanning Tree Algorithm is detecting network loops. Where more than one port is assigned the highest priority, the port with lowest numeric identifier will be enabled.')
xstInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortState.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame: discarding(1): Port receives configuration messages, but does not forward packets. learning(2): Port has transmitted configuration messages for an interval set by the Forward Delay parameter without receiving contradictory information. Port address table is cleared, and the port begins learning addresses. forwarding(3): Port forwards packets, and continues learning addresses. For ports which are disabled (see xstInstancePortEnable), this object will have a value of discarding(1).")
xstInstancePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortEnable.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortEnable.setDescription('The enabled/disabled status of the port.')
xstInstancePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPathCost.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPathCost.setDescription('The pathcost of the RST or MST in the range 1 to 200000000. This parameter is used to determine the best path between devices. Therefore, lower values should be assigned to ports attached to faster media, and higher values assigned to ports with slower media. (Path cost takes precedence over port priority).')
xstInstancePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setDescription('The unique bridge identifier of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached.')
xstInstancePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setDescription('The path cost of the designated port of the segment connected to this port. This value is compared to the root path cost field in received bridge PDUs.')
xstInstancePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setDescription("The bridge identifier of the bridge which this port considers to be the designated bridge for this port's segment.")
xstInstancePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setDescription("The port identifier of the port on the designated bridge for this port's segment.")
xstInstancePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setDescription('The number of times this port has transitioned from the learning state to the forwarding state.')
xstInstancePortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPortRole.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPortRole.setDescription('The role of the port in the RST or MST protocol: (1) The port has no role within the spanning tree (2) The port is part of the active topology connecting the bridge to the root bridge (i.e., root port) (3) The port is connecting a LAN through the bridge to the root bridge (i.e., designated port) (4) The port may provide connectivity if other bridges, bridge ports, or LANs fail or are removed. (5) The port provides backup if other bridges, bridge ports, or LANs fail or are removed. (6) For MST protocol only, indicates whether this instance is in a master role.')
mstInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6), )
if mibBuilder.loadTexts: mstInstanceEditTable.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditTable.setDescription('The Multiple Spanning Tree region instance vlan configuration table. Please read the actual instance vlan mapped in the mstInstanceOperTable.')
mstInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1), ).setIndexNames((0, "ES4612-MIB", "mstInstanceEditIndex"))
if mibBuilder.loadTexts: mstInstanceEditEntry.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditEntry.setDescription('A conceptual row containing the status of the MSTP instance.')
mstInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceEditIndex.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
mstInstanceEditVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with vlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc., The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with vlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with vlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with vlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setDescription('The remaining hop count for this MST instance.')
mstInstanceOperTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7), )
if mibBuilder.loadTexts: mstInstanceOperTable.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperTable.setDescription('The Multiple Spanning Tree region instance vlan mapped table.')
mstInstanceOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1), ).setIndexNames((0, "ES4612-MIB", "mstInstanceOperIndex"))
if mibBuilder.loadTexts: mstInstanceOperEntry.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperEntry.setDescription('A conceptual row containing the status of the MSTP instance.')
mstInstanceOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceOperIndex.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
mstInstanceOperVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with vlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc., The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with vlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with vlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 5, 6, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with vlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
if mibBuilder.loadTexts: restartOpCodeFile.setDescription('Name of op-code file for start-up.')
restartConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfigFile.setStatus('current')
if mibBuilder.loadTexts: restartConfigFile.setDescription('Name of configuration file for start-up.')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
if mibBuilder.loadTexts: restartControl.setDescription('Setting this object to warmBoot(2) causes the device to restart the application software with current configuration parameters saved in non-volatile memory. Setting this object to coldBoot(3) causes the device to reinitialize configuration parameters in non-volatile memory to default values and restart the application software. When the device is running normally, this variable has a value of running(1).')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
if mibBuilder.loadTexts: mirrorTable.setDescription('Table of descriptive and status information about switches in this system.')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1), ).setIndexNames((0, "ES4612-MIB", "mirrorDestinationPort"), (0, "ES4612-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorEntry.setDescription('An entry in the table, containing information about a single switch in this system. ')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
if mibBuilder.loadTexts: mirrorDestinationPort.setDescription('Destination port for mirrored packets. This is defined as ifIndex in the IF-MIB.')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
if mibBuilder.loadTexts: mirrorSourcePort.setDescription('Source port for mirrored packets. This is defined as ifIndex in the IF-MIB.')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
if mibBuilder.loadTexts: mirrorType.setDescription('If this value is rx(1), receive packets will be mirrored. If this value is tx(2), transmit packets will be mirrored. If this value is both(3), both receive and transmit packets.')
mirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStatus.setDescription('Parameter to enable or disable IGMP snooping on the device. When enabled, the device will examine IGMP packets and set up filters for IGMP ports. ')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQuerier.setDescription('Whether to act as querier.')
igmpSnoopQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryCount.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryCount.setDescription('Maximum number of queries that have not been heard on the system before the system starts taking action to solicit reports.')
igmpSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setDescription('Query interval.')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setDescription('Timeout value (seconds) between IGMP reports received on a port for an IP Multicast Address that can pass before the system sends an IGMP Query out the port and removes it from the list.')
igmpSnoopQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setDescription('Query time-out.')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVersion.setDescription('Version.')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setDescription('Table for current router ports.')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8, 1), ).setIndexNames((0, "ES4612-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setDescription('Entry for current router ports.')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setDescription('The set of ports which are current router ports. Within this list, some router ports are static router ports. Please refer to igmpSnoopRouterStaticTable.')
igmpSnoopRouterCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 8, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setDescription('The set of ports which are static router ports.')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setDescription('Table for static router ports.')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9, 1), ).setIndexNames((0, "ES4612-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setDescription('Entry for static router ports.')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setDescription('The set of ports which are static router ports.')
igmpSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
igmpSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10), )
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setDescription('Table for current multicast addresses.')
igmpSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1), ).setIndexNames((0, "ES4612-MIB", "igmpSnoopMulticastCurrentVlanIndex"), (0, "ES4612-MIB", "igmpSnoopMulticastCurrentIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setDescription('Entry for current multicast addresses.')
igmpSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setDescription('IP address of multicast group.')
igmpSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setDescription('The set of ports which are members.')
igmpSnoopMulticastCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 10, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentStatus.setDescription('The set of ports which are static members.')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setDescription('Table for static multicast addresses.')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1), ).setIndexNames((0, "ES4612-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "ES4612-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setDescription('Entry for static multicast addresses.')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setDescription('IP address of multicast group.')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setDescription('The set of ports which are members.')
igmpSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 9, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: netDefaultGateway.setDescription('The IP Address of the default gateway. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
if mibBuilder.loadTexts: ipHttpState.setDescription('Whether HTTP is enabled.')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
if mibBuilder.loadTexts: ipHttpPort.setDescription('The port number for HTTP.')
ipDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpRestart.setStatus('current')
if mibBuilder.loadTexts: ipDhcpRestart.setDescription('Write it to restart(1) to restart DHCP. When read, this value always returns noRestart(2).')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
if mibBuilder.loadTexts: ipHttpsState.setDescription('Whether HTTPS is enabled.')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
if mibBuilder.loadTexts: ipHttpsPort.setDescription('The port number for HTTPS.')
iPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16), )
if mibBuilder.loadTexts: iPAddrTable.setStatus('current')
if mibBuilder.loadTexts: iPAddrTable.setDescription('A table of iPAddrEntry.')
iPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1), ).setIndexNames((0, "ES4612-MIB", "iPAddrIPAddress"), (0, "ES4612-MIB", "iPAddrSubnetMask"))
if mibBuilder.loadTexts: iPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: iPAddrEntry.setDescription('A set of configuration parameters for a particular network interface on this device. If the device has no network interface, this table is empty. The index is composed of the ifIndex assigned to the corresponding interface.')
iPAddrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 1), IpAddress())
if mibBuilder.loadTexts: iPAddrIPAddress.setStatus('current')
if mibBuilder.loadTexts: iPAddrIPAddress.setDescription('The IP address of this Net interface. The default value for this object is 0.0.0.0. If either the IPAddrIPAddress or IPAddrSubnetMask is 0.0.0.0, then when the device boots, it may use BOOTP to try to figure out what these values should be. If BOOTP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
iPAddrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 2), IpAddress())
if mibBuilder.loadTexts: iPAddrSubnetMask.setStatus('current')
if mibBuilder.loadTexts: iPAddrSubnetMask.setDescription('The subnet mask of this Net interface. The default value for this object is 0.0.0.0. If either the IPAddrIPAddress or IPAddrSubnetMask are 0.0.0.0, then when the device boots, it may use BOOTP to try to figure out what these values should be. If BOOTP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
iPAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: iPAddrIfIndex.setDescription('The VLAN interface being used by this table entry. Only the VLAN interfaces which have an IP configured will appear in the table.')
iPAddrPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrPrimaryInterface.setStatus('current')
if mibBuilder.loadTexts: iPAddrPrimaryInterface.setDescription('Whether this is a primary interface.')
iPAddrUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unnumbered", 1), ("notUnnumbered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPAddrUnnumbered.setStatus('current')
if mibBuilder.loadTexts: iPAddrUnnumbered.setDescription('Whether this is an unnumbered interface.')
iPAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPAddrStatus.setStatus('current')
if mibBuilder.loadTexts: iPAddrStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
dhcpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11))
dhcpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1))
dhcpcOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1))
dhcpcInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1), )
if mibBuilder.loadTexts: dhcpcInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: dhcpcInterfaceTable.setDescription('Table for DHCP client information listed by interface. Depending on the nature of the product, this table may have only one entry(e.g. for the management VLAN), or may have many entries(e.g. for all ports, or for all static VLANs).')
dhcpcInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpcIfIndex"))
if mibBuilder.loadTexts: dhcpcInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpcInterfaceEntry.setDescription('Entry for DHCP client information listed by interface.')
dhcpcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpcIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpcIfIndex.setDescription('This is defined by ifIndex in the IF-MIB.(static vlan if index)')
dhcpcIfClientIdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecify", 1), ("text", 2), ("hex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpcIfClientIdMode.setStatus('current')
if mibBuilder.loadTexts: dhcpcIfClientIdMode.setDescription('Whether the Client ID is in text mode or in Hex mode.')
dhcpcIfClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 1, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpcIfClientId.setStatus('current')
if mibBuilder.loadTexts: dhcpcIfClientId.setDescription('The value that the DHCP client sets in the client_id option of DHCPDISCOVER and DHCPREQUEST messages. This value may be used by DHCP servers to uniquely identify the client.')
dhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2))
dhcpRelayServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2), )
if mibBuilder.loadTexts: dhcpRelayServerAddrTable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrTable.setDescription('The role of DHCP Relay Agent is to forward requests and replies between server and client when they are not in the same subnet. To enable DHCP Relay service user needs to specify Relay Server ip address and then restart DHCP Relay. This Table is to specify Relay Server ip address, the maximum numbers of server ip address user can specify is 5. To Restart DHCP Relay, please use the dhcpRelayRestart variable.')
dhcpRelayServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpRelayServerAddrIfIndex"), (0, "ES4612-MIB", "dhcpRelayServerAddrIndex"))
if mibBuilder.loadTexts: dhcpRelayServerAddrEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrEntry.setDescription('A conceptual row of dhcpRelayServerAddrTable.')
dhcpRelayServerAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpRelayServerAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrIfIndex.setDescription('The VLAN interface being used by this table entry.')
dhcpRelayServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)))
if mibBuilder.loadTexts: dhcpRelayServerAddrIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrIndex.setDescription('The Index of the Relay server IP address.')
dhcpRelayServerAddrServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerAddrServerIp.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerAddrServerIp.setDescription('The IP address of the relay server.')
dhcpRelayRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayRestart.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayRestart.setDescription('Set to restart(1) to restart DCHP Relay. Always get noRestart(2) when you read this variable.')
dhcpServerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3))
dhcpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1), )
if mibBuilder.loadTexts: dhcpPoolTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolTable.setDescription('A dhcp pool is a collection of user configuration such as option config-lease time or dns-server IPs, a network address for network pool, or a host IP plus a hardware address pair for host pool. However, a dhcp pool only can either be a network pool or a host pool, or none of them (such as that pool only containing option config no network address config or a host ip config as well)')
dhcpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolPoolName"))
if mibBuilder.loadTexts: dhcpPoolEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolEntry.setDescription('A conceptual row of dhcpPoolTable.')
dhcpPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolPoolName.setDescription('PoolName, simply specify a string which string size NO MORE THAN 8')
dhcpPoolPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecify", 1), ("netWork", 2), ("host", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolPoolType.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolPoolType.setDescription('Pool Type: notSpecify(1); netWork(2);host(3)')
dhcpPoolPoolAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolPoolAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolPoolAddress.setDescription('Pool Address')
dhcpPoolSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolSubnetMask.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolSubnetMask.setDescription('Subnet Mask')
dhcpPoolHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSpecify", 1), ("ethernet", 2), ("ieee802", 3), ("fddi", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolHardwareType.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolHardwareType.setDescription('Hardware type: notSpecify(1); ethernet(2); ieee802(3); fddi(4)')
dhcpPoolMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolMacAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolMacAddress.setDescription('MAC address')
dhcpPoolstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 1, 1, 7), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolstatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolstatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
dhcpPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2), )
if mibBuilder.loadTexts: dhcpPoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionTable.setDescription('This is the Option table of the dhcpPoolTable, user can specify Options configuration in this table')
dhcpPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolOptionPoolName"))
if mibBuilder.loadTexts: dhcpPoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionEntry.setDescription('A conceptual row of dhcpPoolOptionTable.')
dhcpPoolOptionPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptionPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionPoolName.setDescription('PoolName, simply specify a string which string size NO MORE THAN 8')
dhcpPoolOptionNextServer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionNextServer.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionNextServer.setDescription('Specifies the IP address of the next server in the boot process, which is typically a Trivial File Transfer Protocol(TFTP) server. One IP address is required.')
dhcpPoolOptionNetbiosNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("b-node", 2), ("p-node", 3), ("m-node", 4), ("h-node", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionNetbiosNodeType.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionNetbiosNodeType.setDescription('Specifies the NetBIOS node type. Valid types are: none(1) b-node(2) - Broadcast p-node(3) - Peer-to-peer m-node(4) - Mixed h-node(5) - Hybrid.')
dhcpPoolOptionDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionDomainName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionDomainName.setDescription('Specifies the domain name string.')
dhcpPoolOptionBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionBootFile.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionBootFile.setDescription('To specify the name of the default boot image.')
dhcpPoolOptionLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionLeaseTime.setDescription('To configure the duration of the lease of an IP address that is assigned from a DHCP Server to a DHCP client.')
dhcpPoolOptionCidMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecify", 1), ("text", 2), ("hex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionCidMode.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionCidMode.setDescription("Set this variable to text(2) of hex(3) to specify the mode of the Client Id, which is useful for CLI to determine the display way of the Client Id. You will get default value 'notSpecify(1)'when this variable had never been set. Setting this to notSpecify(1) is a invalid operation.")
dhcpPoolOptionCidBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionCidBuffer.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionCidBuffer.setDescription(' Content of Client Id. You MUST specify the dhcpPoolOptionCidMode before setting this variable.')
dhcpPoolOptionDnsSerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3), )
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerTable.setDescription('To specify the DNS IP servers available to a DHCP client, you can specify up to two addresses for each DHCP pool.')
dhcpPoolOptionDnsSerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolOptionDnsSerPoolName"), (0, "ES4612-MIB", "dhcpPoolOptionDnsSerIndex"))
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerEntry.setDescription('A conceptual row of dhcpPoolOptionDnsSerTable.')
dhcpPoolOptionDnsSerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerPoolName.setDescription('PoolName, simply specify a string which string size NO MORE THAN 8')
dhcpPoolOptionDnsSerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerIndex.setDescription('Index of the DNS server.')
dhcpPoolOptionDnsSerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerIpAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptionDnsSerIpAddress.setDescription('Ip address of the DNS server.')
dhcpPoolOptDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4), )
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterTable.setDescription('Specifices the default router list for a DHCP Client, you can specify up to two addresses for each DHCP pool.')
dhcpPoolOptDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolOptDefaultRouterPoolName"), (0, "ES4612-MIB", "dhcpPoolOptDefaultRouterIndex"))
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterEntry.setDescription('A conceptual row of dhcpPoolOptDefaultRouterTable.')
dhcpPoolOptDefaultRouterPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterPoolName.setDescription('PoolName, simply specify a string which string size NO MORE THAN 8')
dhcpPoolOptDefaultRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterIndex.setDescription('Index of the default router.')
dhcpPoolOptDefaultRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterIpAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptDefaultRouterIpAddress.setDescription('Specifies the IP address of a router. One IP address is required.')
dhcpPoolOptNetbiosServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5), )
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerTable.setDescription('To configure the NetBIOS WINS name servers that are available to DHCP clients. You can specify up to eight addressed for each DHCP pool.')
dhcpPoolOptNetbiosServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpPoolOptNetbiosServerPoolName"), (0, "ES4612-MIB", "dhcpPoolOptNetbiosServerIndex"))
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerEntry.setDescription('A conceptual row of dhcpPoolOptNetbiosServerTable.')
dhcpPoolOptNetbiosServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerPoolName.setDescription('PoolName, simply specify a string which string size NO MORE THAN 8')
dhcpPoolOptNetbiosServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerIndex.setDescription('Index of the Netbios name Server.')
dhcpPoolOptNetbiosServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolOptNetbiosServerIpAddress.setDescription('Specifies the IP address of the NetBIOS WINS name server. One IP address is required.')
dhcpServerExcludedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6), )
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrTable.setDescription('To specify IP addresses that a DHCP Server shuld not assign to DHCP clients.')
dhcpServerExcludedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpServerExcludedIpAddrLowIp"), (0, "ES4612-MIB", "dhcpServerExcludedIpAddrHiIp"))
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrEntry.setDescription('A conceptual row of dhcpServerExcludedIpAddrTable.')
dhcpServerExcludedIpAddrLowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrLowIp.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrLowIp.setDescription('The excluded IP address, or first IP address in an excluded address range.')
dhcpServerExcludedIpAddrHiIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrHiIp.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrHiIp.setDescription('The last IP address in the excluded address range.')
dhcpServerExcludedIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 6, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerExcludedIpAddrStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
dhcpServerLeaseBindingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7), )
if mibBuilder.loadTexts: dhcpServerLeaseBindingTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingTable.setDescription('To configure the address bindings on the DHCP server.')
dhcpServerLeaseBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1), ).setIndexNames((0, "ES4612-MIB", "dhcpServerLeaseBindingIp"))
if mibBuilder.loadTexts: dhcpServerLeaseBindingEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingEntry.setDescription('A conceptual row of dhcpServerLeaseBindingTable.')
dhcpServerLeaseBindingIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: dhcpServerLeaseBindingIp.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingIp.setDescription('The IP address of the host as recorded on the DHCP Server.')
dhcpServerLeaseBindingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingMac.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingMac.setDescription('The MAC address of the host as recorded on the DHCP Server.')
dhcpServerLeaseBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingLeaseTime.setDescription('The lease expiration date of the IP address of the host.')
dhcpServerLeaseBindingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseBindingStartTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingStartTime.setDescription('Show current system real time in sec.')
dhcpServerLeaseBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 7, 1, 5), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerLeaseBindingStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseBindingStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
dhcpServerServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 10, 11, 3, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerServiceStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerServiceStatus.setDescription('Setting this to 1 to enable the dhcp server service. Setting this to 2 to disable the dhcp server service.')
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
if mibBuilder.loadTexts: bcastStormTable.setDescription('Table of descriptive and status information about configuration of each switch ports(including expansion slot) in this system.')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1), ).setIndexNames((0, "ES4612-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
if mibBuilder.loadTexts: bcastStormEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: bcastStormIfIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
if mibBuilder.loadTexts: bcastStormStatus.setDescription('Whether broadcast storm protection is enabled.')
bcastStormSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pkt-rate", 1), ("octet-rate", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormSampleType.setStatus('current')
if mibBuilder.loadTexts: bcastStormSampleType.setDescription('Sample type. If this is pkt-rate(1), then bcastStormPktRate is valid. If this is octet-rate(2), then bcastStormOctetRate is valid. If this is percent(3), then bcastStormPercent is valid.')
bcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPktRate.setStatus('current')
if mibBuilder.loadTexts: bcastStormPktRate.setDescription('Broadcast storm threshold as packets per second.')
bcastStormOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormOctetRate.setStatus('current')
if mibBuilder.loadTexts: bcastStormOctetRate.setDescription('Broadcast storm threshold as octets per second.')
bcastStormPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPercent.setStatus('current')
if mibBuilder.loadTexts: bcastStormPercent.setDescription('Broadcast storm threshold as percentage of bandwidth.')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('Table for VLAN configuration.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 1, 1), ).setIndexNames((0, "ES4612-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('Entry for VLAN configuration.')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
if mibBuilder.loadTexts: vlanIndex.setDescription('Same is dot1qVlanIndex in the Q-BRIDGE-MIB. This table has only one entry - the entry for the VLAN of the management interface.')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
if mibBuilder.loadTexts: vlanAddressMethod.setDescription('Method to get the IP address.')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 2), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
if mibBuilder.loadTexts: vlanPortTable.setDescription('Table for port configuration in VLAN.')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 2, 1), ).setIndexNames((0, "ES4612-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: vlanPortEntry.setDescription('Entry for port configuration in VLAN.')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: vlanPortIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hybrid", 1), ("dot1qTrunk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
if mibBuilder.loadTexts: vlanPortMode.setDescription('This variable sets the 802.1Q VLAN mode. Setting it to hybrid(1) sets a hybrid link. Setting it to dot1qTrunk(2) sets a trunk link.')
prioIpPrecDscpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("precedence", 2), ("dscp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecDscpStatus.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecDscpStatus.setDescription('Whether IP precedence or DSCP look-up is enabled.')
prioIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2), )
if mibBuilder.loadTexts: prioIpPrecTable.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecTable.setDescription('Table for IP precedence priority mapping.')
prioIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2, 1), ).setIndexNames((0, "ES4612-MIB", "prioIpPrecPort"), (0, "ES4612-MIB", "prioIpPrecValue"))
if mibBuilder.loadTexts: prioIpPrecEntry.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecEntry.setDescription('Entry for IP precendence priority mapping.')
prioIpPrecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: prioIpPrecPort.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecPort.setDescription('This is defined as ifIndex in the IF-MIB.')
prioIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioIpPrecValue.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecValue.setDescription('Precedence value for this entry.')
prioIpPrecCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecCos.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecCos.setDescription('Class of service for this entry.')
prioIpPrecRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecRestoreDefault.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecRestoreDefault.setDescription('This object is to restore IP Precedence settings of a port to default. To do this, write it to the value of ifIndex defined by the ifIndex in the IF-MIB. When read, this object always returns 0.')
prioIpDscpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4), )
if mibBuilder.loadTexts: prioIpDscpTable.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpTable.setDescription('Table for IP DSCP priority mapping.')
prioIpDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4, 1), ).setIndexNames((0, "ES4612-MIB", "prioIpDscpPort"), (0, "ES4612-MIB", "prioIpDscpValue"))
if mibBuilder.loadTexts: prioIpDscpEntry.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpEntry.setDescription('Entry for IP DSCP priority mapping.')
prioIpDscpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpDscpPort.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpPort.setDescription('This is defined as ifIndex in the IF-MIB.')
prioIpDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: prioIpDscpValue.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpValue.setDescription('DSCP value for this entry.')
prioIpDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpCos.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpCos.setDescription('Class of service for this entry.')
prioIpDscpRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpRestoreDefault.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpRestoreDefault.setDescription('This object is to restore IP DSCP settings of a port to default. To do this, write it to the value of ifIndex defined by the ifIndex in the IF-MIB. When read, this object always returns 0.')
prioIpPortEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPortEnableStatus.setStatus('current')
if mibBuilder.loadTexts: prioIpPortEnableStatus.setDescription('Whether IP Port priority look-up is enabled.')
prioIpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7), )
if mibBuilder.loadTexts: prioIpPortTable.setStatus('current')
if mibBuilder.loadTexts: prioIpPortTable.setDescription('Table for IP port priority mapping.')
prioIpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1), ).setIndexNames((0, "ES4612-MIB", "prioIpPortPhysPort"), (0, "ES4612-MIB", "prioIpPortValue"))
if mibBuilder.loadTexts: prioIpPortEntry.setStatus('current')
if mibBuilder.loadTexts: prioIpPortEntry.setDescription('Entry for IP port priority mapping.')
prioIpPortPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpPortPhysPort.setStatus('current')
if mibBuilder.loadTexts: prioIpPortPhysPort.setDescription('The port and the trunk (excluding trunk member) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
prioIpPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: prioIpPortValue.setStatus('current')
if mibBuilder.loadTexts: prioIpPortValue.setDescription('IP port for this value.')
prioIpPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortCos.setStatus('current')
if mibBuilder.loadTexts: prioIpPortCos.setDescription('Class of service for this entry.')
prioIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 7, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: prioIpPortStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
prioCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 8))
prioCopyIpPrec = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPrec.setStatus('current')
if mibBuilder.loadTexts: prioCopyIpPrec.setDescription('Action to copy IP Precedence settings from a source port to many destination ports. The first four octets represent an integer for the source port, in high-to-low (big-endian) order. Starting from the 5th octet is destination port list in a form described by PortList in the Q-BRIDGE-MIB. Writing this object will perform copy. Reading this object will always get a zero-length octet string.')
prioCopyIpDscp = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpDscp.setStatus('current')
if mibBuilder.loadTexts: prioCopyIpDscp.setDescription('Action to copy IP DSCP settings from a source port to many destination ports. The first four octets represent an integer for the source port, in high-to-low (big-endian) order. Starting from the 5th octet is destination port list in a form described by PortList in the Q-BRIDGE-MIB. Writing this object will perform copy. Reading this object will always get a zero-length octet string.')
prioCopyIpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPort.setStatus('current')
if mibBuilder.loadTexts: prioCopyIpPort.setDescription('Action to copy IP Port settings from a source port to many destination ports. The first four octets represent an integer for the source port, in high-to-low (big-endian) order. Starting from the 5th octet is destination port list in a form described by PortList in the Q-BRIDGE-MIB. Writing this object will perform copy. Reading this object will always get a zero-length octet string.')
prioQueueMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrr", 1), ("strict", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioQueueMode.setStatus('current')
if mibBuilder.loadTexts: prioQueueMode.setDescription('The global status for the prioQueue. wrr(1),strict(2)')
prioWrrPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12), )
if mibBuilder.loadTexts: prioWrrPortTable.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortTable.setDescription('Table for per port weighted round robin (WRR).')
prioWrrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12, 1), ).setIndexNames((0, "ES4612-MIB", "prioWrrPortIfIndex"), (0, "ES4612-MIB", "prioWrrPortTrafficClass"))
if mibBuilder.loadTexts: prioWrrPortEntry.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortEntry.setDescription('Entry for per port weighted round robin (WRR).')
prioWrrPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: prioWrrPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortIfIndex.setDescription('The port interface of the prioWrrPortEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
prioWrrPortTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrPortTrafficClass.setReference('MIB.IETF|Q-BRIDGE-MIB.dot1dTrafficClass.')
if mibBuilder.loadTexts: prioWrrPortTrafficClass.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortTrafficClass.setDescription('Traffic class for this entry, as defined in dot1dTrafficClass in the P-BRIDGE-MIB. The actual maximum depends on the hardware, and is equal to dot1dPortNumTrafficClasses-1.')
prioWrrPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 13, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrPortWeight.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortWeight.setDescription('Weight for this entry.')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
if mibBuilder.loadTexts: trapDestTable.setDescription('A list of trap destination entries.')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1), ).setIndexNames((0, "ES4612-MIB", "trapDestAddress"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
if mibBuilder.loadTexts: trapDestEntry.setDescription('This entry includes a destination IP address to which to send traps for this community.')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
if mibBuilder.loadTexts: trapDestAddress.setDescription('The address to send traps.')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
if mibBuilder.loadTexts: trapDestCommunity.setDescription('A community to which this destination address belongs.')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
if mibBuilder.loadTexts: trapDestStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
if mibBuilder.loadTexts: trapDestVersion.setDescription('This variables represent the version of the Trap we wish to send to trap Receiver. If the value is 1, mean we wish to send Version 1 trap. If the value is 2, mean we wish to send version 2 trap. If the value is 3, mean we wish to send version 3 trap.')
trapDestUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestUdpPort.setStatus('current')
if mibBuilder.loadTexts: trapDestUdpPort.setDescription('Determines the UDP port number of the trap that is to be sent to the trap Receiver.')
portSecurityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2))
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4))
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 5))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6))
aclMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7))
ipFilterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9))
portSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1), )
if mibBuilder.loadTexts: portSecPortTable.setStatus('current')
if mibBuilder.loadTexts: portSecPortTable.setDescription('The Port Security(MAC bindind) Table')
portSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1), ).setIndexNames((0, "ES4612-MIB", "portSecPortIndex"))
if mibBuilder.loadTexts: portSecPortEntry.setStatus('current')
if mibBuilder.loadTexts: portSecPortEntry.setDescription('The entry of portSecPortTable')
portSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portSecPortIndex.setStatus('current')
if mibBuilder.loadTexts: portSecPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
portSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecPortStatus.setStatus('current')
if mibBuilder.loadTexts: portSecPortStatus.setDescription('Set enabled(1) to enable port security and set disabled(2) to disable port security.')
portSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("shutdown", 3), ("trapAndShutdown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAction.setStatus('current')
if mibBuilder.loadTexts: portSecAction.setDescription('The corresponding actions that will take place when a port is under intruded, when this variable is set to none(1), no action will perform, when this variable is set to trap(2), a swPortSecurityTrap trap will send, when this variable is set to shutdown(3), the port will shutdown, when this variable is set to trapAndShutdown(4), a swPortSecurityTrap will send and the port will shutdown.')
portSecMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMaxMacCount.setStatus('current')
if mibBuilder.loadTexts: portSecMaxMacCount.setDescription('The maximun number of MAC addresses that will be learned and locked. When we change the value of this variable, if the portSecPortStatus is enabled, we will discard all secure MAC and begin to learn again, until the number of MAC has reached this value, and only the secure MAC addresses can enter this port. If the portSecPortStatus is disabled, we will begin to learn the MAC, and auto enabled the portSecPortStatus when the MAC has reached this value.')
radiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: radiusServerAddress.setDescription('IP address of RADIUS server.')
radiusServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusServerPortNumber.setDescription('IP port number of RADIUS server.')
radiusServerKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
if mibBuilder.loadTexts: radiusServerKey.setDescription('Key for RADIUS. This variable can only be written. When this variable is read, it always returns a zero-length string.')
radiusServerRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: radiusServerRetransmit.setDescription('Maximum number of retransmissions for RADIUS.')
radiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusServerTimeout.setDescription('Timeout for RADIUS.')
tacacsServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerAddress.setStatus('current')
if mibBuilder.loadTexts: tacacsServerAddress.setDescription('IP address of TACACS server.')
tacacsServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: tacacsServerPortNumber.setDescription('IP port number of TACACS server.')
tacacsServerKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerKey.setStatus('current')
if mibBuilder.loadTexts: tacacsServerKey.setDescription('Key for TACACS.')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
if mibBuilder.loadTexts: sshServerStatus.setDescription('The status of Secure Shell Server, set this value to 1 to enable SSH server, set this value to 2 to disable the SSH server.')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerMajorVersion.setDescription('The major version of the SSH Server.')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerMinorVersion.setDescription('The minor version of the SSH Server.')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
if mibBuilder.loadTexts: sshTimeout.setDescription('The time interval that the router waits for the SSH client to respond. The range is 1-120.')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
if mibBuilder.loadTexts: sshAuthRetries.setDescription('The number of attempts after which the interface is reset. The range is 1-5.')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
if mibBuilder.loadTexts: sshConnInfoTable.setDescription('The table for Secure Shell Connection.')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1), ).setIndexNames((0, "ES4612-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sshConnInfoEntry.setDescription('The conceptual row for sshConnInfoTable.')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: sshConnID.setStatus('current')
if mibBuilder.loadTexts: sshConnID.setDescription('The connection ID of the Secure Shell Connection.')
sshConnMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sshConnMajorVersion.setDescription('The SSH major version.')
sshConnMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sshConnMinorVersion.setDescription('The SSH minor version.')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
if mibBuilder.loadTexts: sshConnStatus.setDescription('The SSH connection State. negotiationStart(1) mean the SSH is in its negotiation start state, authenticationStart(2) mean the SSH is in authentication start state, sessionStart(3) mean the SSH is in session start State.')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
if mibBuilder.loadTexts: sshConnUserName.setDescription('The user name of the connection.')
sshDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisconnect", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshDisconnect.setStatus('current')
if mibBuilder.loadTexts: sshDisconnect.setDescription('Set the variables to disconnect to disconnect the connection, when read, this variables always return noDisconnect(1).')
sshConnEncryptionTypeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setStatus('current')
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setDescription('The encryption type of the SSH.')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 896))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('current')
if mibBuilder.loadTexts: sshKeySize.setDescription('The SSH server key size.')
sshRsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey1.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey1.setDescription('The total length of RSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshRsaHostKey1: part 1 of the RSA host key (1-128) sshRsaHostKey2: part 2 of the RSA host key (129-256) sshRsaHostKey3: part 3 of the RSA host key (257-384) sshRsaHostKey4: part 4 of the RSA host key (385-512) sshRsaHostKey5: part 5 of the RSA host key (513-640) sshRsaHostKey6: part 6 of the RSA host key (641-768) sshRsaHostKey7: part 7 of the RSA host key (769-896) sshRsaHostKey8: part 8 of the RSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshRsaHostKey1, and a string which length is 1 in sshRsaHostKey2, moreover, sshRsaHostKey3 to sshRsaHostKey8 will all got zero-length string.')
sshRsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey2.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey2.setDescription('The total length of RSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshRsaHostKey1: part 1 of the RSA host key (1-128) sshRsaHostKey2: part 2 of the RSA host key (129-256) sshRsaHostKey3: part 3 of the RSA host key (257-384) sshRsaHostKey4: part 4 of the RSA host key (385-512) sshRsaHostKey5: part 5 of the RSA host key (513-640) sshRsaHostKey6: part 6 of the RSA host key (641-768) sshRsaHostKey7: part 7 of the RSA host key (769-896) sshRsaHostKey8: part 8 of the RSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshRsaHostKey1, and a string which length is 1 in sshRsaHostKey2, moreover, sshRsaHostKey3 to sshRsaHostKey8 will all got zero-length string.')
sshRsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey3.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey3.setDescription('The total length of RSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshRsaHostKey1: part 1 of the RSA host key (1-128) sshRsaHostKey2: part 2 of the RSA host key (129-256) sshRsaHostKey3: part 3 of the RSA host key (257-384) sshRsaHostKey4: part 4 of the RSA host key (385-512) sshRsaHostKey5: part 5 of the RSA host key (513-640) sshRsaHostKey6: part 6 of the RSA host key (641-768) sshRsaHostKey7: part 7 of the RSA host key (769-896) sshRsaHostKey8: part 8 of the RSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshRsaHostKey1, and a string which length is 1 in sshRsaHostKey2, moreover, sshRsaHostKey3 to sshRsaHostKey8 will all got zero-length string.')
sshRsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey4.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey4.setDescription('The total length of RSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshRsaHostKey1: part 1 of the RSA host key (1-128) sshRsaHostKey2: part 2 of the RSA host key (129-256) sshRsaHostKey3: part 3 of the RSA host key (257-384) sshRsaHostKey4: part 4 of the RSA host key (385-512) sshRsaHostKey5: part 5 of the RSA host key (513-640) sshRsaHostKey6: part 6 of the RSA host key (641-768) sshRsaHostKey7: part 7 of the RSA host key (769-896) sshRsaHostKey8: part 8 of the RSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshRsaHostKey1, and a string which length is 1 in sshRsaHostKey2, moreover, sshRsaHostKey3 to sshRsaHostKey8 will all got zero-length string.')
sshRsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey5.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey5.setDescription('The total length of RSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshRsaHostKey1: part 1 of the RSA host key (1-128) sshRsaHostKey2: part 2 of the RSA host key (129-256) sshRsaHostKey3: part 3 of the RSA host key (257-384) sshRsaHostKey4: part 4 of the RSA host key (385-512) sshRsaHostKey5: part 5 of the RSA host key (513-640) sshRsaHostKey6: part 6 of the RSA host key (641-768) sshRsaHostKey7: part 7 of the RSA host key (769-896) sshRsaHostKey8: part 8 of the RSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshRsaHostKey1, and a string which length is 1 in sshRsaHostKey2, moreover, sshRsaHostKey3 to sshRsaHostKey8 will all got zero-length string.')
sshRsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey6.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey6.setDescription('The total length of RSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshRsaHostKey1: part 1 of the RSA host key (1-128) sshRsaHostKey2: part 2 of the RSA host key (129-256) sshRsaHostKey3: part 3 of the RSA host key (257-384) sshRsaHostKey4: part 4 of the RSA host key (385-512) sshRsaHostKey5: part 5 of the RSA host key (513-640) sshRsaHostKey6: part 6 of the RSA host key (641-768) sshRsaHostKey7: part 7 of the RSA host key (769-896) sshRsaHostKey8: part 8 of the RSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshRsaHostKey1, and a string which length is 1 in sshRsaHostKey2, moreover, sshRsaHostKey3 to sshRsaHostKey8 will all got zero-length string.')
sshRsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey7.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey7.setDescription('The total length of RSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshRsaHostKey1: part 1 of the RSA host key (1-128) sshRsaHostKey2: part 2 of the RSA host key (129-256) sshRsaHostKey3: part 3 of the RSA host key (257-384) sshRsaHostKey4: part 4 of the RSA host key (385-512) sshRsaHostKey5: part 5 of the RSA host key (513-640) sshRsaHostKey6: part 6 of the RSA host key (641-768) sshRsaHostKey7: part 7 of the RSA host key (769-896) sshRsaHostKey8: part 8 of the RSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshRsaHostKey1, and a string which length is 1 in sshRsaHostKey2, moreover, sshRsaHostKey3 to sshRsaHostKey8 will all got zero-length string.')
sshRsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey8.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey8.setDescription('The total length of RSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshRsaHostKey1: part 1 of the RSA host key (1-128) sshRsaHostKey2: part 2 of the RSA host key (129-256) sshRsaHostKey3: part 3 of the RSA host key (257-384) sshRsaHostKey4: part 4 of the RSA host key (385-512) sshRsaHostKey5: part 5 of the RSA host key (513-640) sshRsaHostKey6: part 6 of the RSA host key (641-768) sshRsaHostKey7: part 7 of the RSA host key (769-896) sshRsaHostKey8: part 8 of the RSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshRsaHostKey1, and a string which length is 1 in sshRsaHostKey2, moreover, sshRsaHostKey3 to sshRsaHostKey8 will all got zero-length string.')
sshDsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey1.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey1.setDescription('The total length of DSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshDsaHostKey1: part 1 of the DSA host key (1-128) sshDsaHostKey2: part 2 of the DSA host key (129-256) sshDsaHostKey3: part 3 of the DSA host key (257-384) sshDsaHostKey4: part 4 of the DSA host key (385-512) sshDsaHostKey5: part 5 of the DSA host key (513-640) sshDsaHostKey6: part 6 of the DSA host key (641-768) sshDsaHostKey7: part 7 of the DSA host key (769-896) sshDsaHostKey8: part 8 of the DSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshDsaHostKey1, and a string which length is 1 in sshDsaHostKey2, moreover, sshDsaHostKey3 to sshDsaHostKey8 will all got zero-length string.')
sshDsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey2.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey2.setDescription('The total length of DSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshDsaHostKey1: part 1 of the DSA host key (1-128) sshDsaHostKey2: part 2 of the DSA host key (129-256) sshDsaHostKey3: part 3 of the DSA host key (257-384) sshDsaHostKey4: part 4 of the DSA host key (385-512) sshDsaHostKey5: part 5 of the DSA host key (513-640) sshDsaHostKey6: part 6 of the DSA host key (641-768) sshDsaHostKey7: part 7 of the DSA host key (769-896) sshDsaHostKey8: part 8 of the DSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshDsaHostKey1, and a string which length is 1 in sshDsaHostKey2, moreover, sshDsaHostKey3 to sshDsaHostKey8 will all got zero-length string.')
sshDsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey3.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey3.setDescription('The total length of DSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshDsaHostKey1: part 1 of the DSA host key (1-128) sshDsaHostKey2: part 2 of the DSA host key (129-256) sshDsaHostKey3: part 3 of the DSA host key (257-384) sshDsaHostKey4: part 4 of the DSA host key (385-512) sshDsaHostKey5: part 5 of the DSA host key (513-640) sshDsaHostKey6: part 6 of the DSA host key (641-768) sshDsaHostKey7: part 7 of the DSA host key (769-896) sshDsaHostKey8: part 8 of the DSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshDsaHostKey1, and a string which length is 1 in sshDsaHostKey2, moreover, sshDsaHostKey3 to sshDsaHostKey8 will all got zero-length string.')
sshDsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey4.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey4.setDescription('The total length of DSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshDsaHostKey1: part 1 of the DSA host key (1-128) sshDsaHostKey2: part 2 of the DSA host key (129-256) sshDsaHostKey3: part 3 of the DSA host key (257-384) sshDsaHostKey4: part 4 of the DSA host key (385-512) sshDsaHostKey5: part 5 of the DSA host key (513-640) sshDsaHostKey6: part 6 of the DSA host key (641-768) sshDsaHostKey7: part 7 of the DSA host key (769-896) sshDsaHostKey8: part 8 of the DSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshDsaHostKey1, and a string which length is 1 in sshDsaHostKey2, moreover, sshDsaHostKey3 to sshDsaHostKey8 will all got zero-length string.')
sshDsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey5.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey5.setDescription('The total length of DSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshDsaHostKey1: part 1 of the DSA host key (1-128) sshDsaHostKey2: part 2 of the DSA host key (129-256) sshDsaHostKey3: part 3 of the DSA host key (257-384) sshDsaHostKey4: part 4 of the DSA host key (385-512) sshDsaHostKey5: part 5 of the DSA host key (513-640) sshDsaHostKey6: part 6 of the DSA host key (641-768) sshDsaHostKey7: part 7 of the DSA host key (769-896) sshDsaHostKey8: part 8 of the DSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshDsaHostKey1, and a string which length is 1 in sshDsaHostKey2, moreover, sshDsaHostKey3 to sshDsaHostKey8 will all got zero-length string.')
sshDsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey6.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey6.setDescription('The total length of DSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshDsaHostKey1: part 1 of the DSA host key (1-128) sshDsaHostKey2: part 2 of the DSA host key (129-256) sshDsaHostKey3: part 3 of the DSA host key (257-384) sshDsaHostKey4: part 4 of the DSA host key (385-512) sshDsaHostKey5: part 5 of the DSA host key (513-640) sshDsaHostKey6: part 6 of the DSA host key (641-768) sshDsaHostKey7: part 7 of the DSA host key (769-896) sshDsaHostKey8: part 8 of the DSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshDsaHostKey1, and a string which length is 1 in sshDsaHostKey2, moreover, sshDsaHostKey3 to sshDsaHostKey8 will all got zero-length string.')
sshDsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey7.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey7.setDescription('The total length of DSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshDsaHostKey1: part 1 of the DSA host key (1-128) sshDsaHostKey2: part 2 of the DSA host key (129-256) sshDsaHostKey3: part 3 of the DSA host key (257-384) sshDsaHostKey4: part 4 of the DSA host key (385-512) sshDsaHostKey5: part 5 of the DSA host key (513-640) sshDsaHostKey6: part 6 of the DSA host key (641-768) sshDsaHostKey7: part 7 of the DSA host key (769-896) sshDsaHostKey8: part 8 of the DSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshDsaHostKey1, and a string which length is 1 in sshDsaHostKey2, moreover, sshDsaHostKey3 to sshDsaHostKey8 will all got zero-length string.')
sshDsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey8.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey8.setDescription('The total length of DSA host key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshDsaHostKey1: part 1 of the DSA host key (1-128) sshDsaHostKey2: part 2 of the DSA host key (129-256) sshDsaHostKey3: part 3 of the DSA host key (257-384) sshDsaHostKey4: part 4 of the DSA host key (385-512) sshDsaHostKey5: part 5 of the DSA host key (513-640) sshDsaHostKey6: part 6 of the DSA host key (641-768) sshDsaHostKey7: part 7 of the DSA host key (769-896) sshDsaHostKey8: part 8 of the DSA host key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshDsaHostKey1, and a string which length is 1 in sshDsaHostKey2, moreover, sshDsaHostKey3 to sshDsaHostKey8 will all got zero-length string.')
sshHostKeyGenAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noGen", 1), ("genRsaKey", 2), ("genDsaKey", 3), ("genBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyGenAction.setDescription('This variable is for host key generating. For the set behavior: set it to genRsaKey(2) to generate the RSA host key, genDsaKey(3) to generate the DSA host key, if genBothKeys(4) is set, both RSA and DSA host key are generated. For the get behavior: you will get genRsaKey(2), genDsaKey(3) or genBothKeys(4) when the key gen action is in progress. otherwise, you will get noGen(1).')
sshHostKeyGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeyGenStatus.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyGenStatus.setDescription('The result of the last KeyGen status. if no Key gen action has been perform you will get unknown(1) status.')
sshHostKeySaveAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSave", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeySaveAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeySaveAction.setDescription('To save host key from memory to flash. For the set behavior: set it to save(2) to perform the save operation. For the get behavior: you will get save(1) when the save action is in progress. otherwise, you will get noSave(1).')
sshHostKeySaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeySaveStatus.setStatus('current')
if mibBuilder.loadTexts: sshHostKeySaveStatus.setDescription('The result of the last savekey status. if no save action has been perform you will get unknown(1) status.')
sshHostKeyDelAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyDelAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyDelAction.setDescription('To delete the host key. For the set behavior: set it to delRsaKey(2) to delete the RSA host key, delDsaKey(3) to delete the DSA host key, or delBothKeys(4) to delete both RSA and DSA host key. For the get behavior: you will get delRsaKey(2), delDsaKey(3) or delBothKeys(4) when the delete operation is in progress. otherwise, you will get noDel(1).')
sshUserTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29), )
if mibBuilder.loadTexts: sshUserTable.setStatus('current')
if mibBuilder.loadTexts: sshUserTable.setDescription('The conceptual table of all of sshUserEntry ')
sshUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1), ).setIndexNames((1, "ES4612-MIB", "sshUserName"))
if mibBuilder.loadTexts: sshUserEntry.setStatus('current')
if mibBuilder.loadTexts: sshUserEntry.setDescription('The conceptual row for sshUserTable.')
sshUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: sshUserName.setStatus('current')
if mibBuilder.loadTexts: sshUserName.setDescription('User Name.')
sshUserRsaKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey1.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey1.setDescription('The total length of RSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the RSA user key (1-128) sshUserRsaKey2: part 2 of the RSA user key (129-256) sshUserRsaKey3: part 3 of the RSA user key (257-384) sshUserRsaKey4: part 4 of the RSA user key (385-512) sshUserRsaKey5: part 5 of the RSA user key (513-640) sshUserRsaKey6: part 6 of the RSA user key (641-768) sshUserRsaKey7: part 7 of the RSA user key (769-896) sshUserRsaKey8: part 8 of the RSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserRsaKey1, and a string which length is 1 in sshUserRsaKey2, moreover, sshUserRsaKey3 to sshUserRsaKey8 will all got zero-length string.')
sshUserRsaKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey2.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey2.setDescription('The total length of RSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the RSA user key (1-128) sshUserRsaKey2: part 2 of the RSA user key (129-256) sshUserRsaKey3: part 3 of the RSA user key (257-384) sshUserRsaKey4: part 4 of the RSA user key (385-512) sshUserRsaKey5: part 5 of the RSA user key (513-640) sshUserRsaKey6: part 6 of the RSA user key (641-768) sshUserRsaKey7: part 7 of the RSA user key (769-896) sshUserRsaKey8: part 8 of the RSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserRsaKey1, and a string which length is 1 in sshUserRsaKey2, moreover, sshUserRsaKey3 to sshUserRsaKey8 will all got zero-length string.')
sshUserRsaKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey3.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey3.setDescription('The total length of RSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the RSA user key (1-128) sshUserRsaKey2: part 2 of the RSA user key (129-256) sshUserRsaKey3: part 3 of the RSA user key (257-384) sshUserRsaKey4: part 4 of the RSA user key (385-512) sshUserRsaKey5: part 5 of the RSA user key (513-640) sshUserRsaKey6: part 6 of the RSA user key (641-768) sshUserRsaKey7: part 7 of the RSA user key (769-896) sshUserRsaKey8: part 8 of the RSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserRsaKey1, and a string which length is 1 in sshUserRsaKey2, moreover, sshUserRsaKey3 to sshUserRsaKey8 will all got zero-length string.')
sshUserRsaKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey4.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey4.setDescription('The total length of RSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the RSA user key (1-128) sshUserRsaKey2: part 2 of the RSA user key (129-256) sshUserRsaKey3: part 3 of the RSA user key (257-384) sshUserRsaKey4: part 4 of the RSA user key (385-512) sshUserRsaKey5: part 5 of the RSA user key (513-640) sshUserRsaKey6: part 6 of the RSA user key (641-768) sshUserRsaKey7: part 7 of the RSA user key (769-896) sshUserRsaKey8: part 8 of the RSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserRsaKey1, and a string which length is 1 in sshUserRsaKey2, moreover, sshUserRsaKey3 to sshUserRsaKey8 will all got zero-length string.')
sshUserRsaKey5 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey5.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey5.setDescription('The total length of RSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the RSA user key (1-128) sshUserRsaKey2: part 2 of the RSA user key (129-256) sshUserRsaKey3: part 3 of the RSA user key (257-384) sshUserRsaKey4: part 4 of the RSA user key (385-512) sshUserRsaKey5: part 5 of the RSA user key (513-640) sshUserRsaKey6: part 6 of the RSA user key (641-768) sshUserRsaKey7: part 7 of the RSA user key (769-896) sshUserRsaKey8: part 8 of the RSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserRsaKey1, and a string which length is 1 in sshUserRsaKey2, moreover, sshUserRsaKey3 to sshUserRsaKey8 will all got zero-length string.')
sshUserRsaKey6 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey6.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey6.setDescription('The total length of RSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the RSA user key (1-128) sshUserRsaKey2: part 2 of the RSA user key (129-256) sshUserRsaKey3: part 3 of the RSA user key (257-384) sshUserRsaKey4: part 4 of the RSA user key (385-512) sshUserRsaKey5: part 5 of the RSA user key (513-640) sshUserRsaKey6: part 6 of the RSA user key (641-768) sshUserRsaKey7: part 7 of the RSA user key (769-896) sshUserRsaKey8: part 8 of the RSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserRsaKey1, and a string which length is 1 in sshUserRsaKey2, moreover, sshUserRsaKey3 to sshUserRsaKey8 will all got zero-length string.')
sshUserRsaKey7 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey7.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey7.setDescription('The total length of RSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the RSA user key (1-128) sshUserRsaKey2: part 2 of the RSA user key (129-256) sshUserRsaKey3: part 3 of the RSA user key (257-384) sshUserRsaKey4: part 4 of the RSA user key (385-512) sshUserRsaKey5: part 5 of the RSA user key (513-640) sshUserRsaKey6: part 6 of the RSA user key (641-768) sshUserRsaKey7: part 7 of the RSA user key (769-896) sshUserRsaKey8: part 8 of the RSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserRsaKey1, and a string which length is 1 in sshUserRsaKey2, moreover, sshUserRsaKey3 to sshUserRsaKey8 will all got zero-length string.')
sshUserRsaKey8 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey8.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey8.setDescription('The total length of RSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the RSA user key (1-128) sshUserRsaKey2: part 2 of the RSA user key (129-256) sshUserRsaKey3: part 3 of the RSA user key (257-384) sshUserRsaKey4: part 4 of the RSA user key (385-512) sshUserRsaKey5: part 5 of the RSA user key (513-640) sshUserRsaKey6: part 6 of the RSA user key (641-768) sshUserRsaKey7: part 7 of the RSA user key (769-896) sshUserRsaKey8: part 8 of the RSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserRsaKey1, and a string which length is 1 in sshUserRsaKey2, moreover, sshUserRsaKey3 to sshUserRsaKey8 will all got zero-length string.')
sshUserDsaKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey1.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey1.setDescription('The total length of DSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the DSA user key (1-128) sshUserRsaKey2: part 2 of the DSA user key (129-256) sshUserRsaKey3: part 3 of the DSA user key (257-384) sshUserRsaKey4: part 4 of the DSA user key (385-512) sshUserRsaKey5: part 5 of the DSA user key (513-640) sshUserRsaKey6: part 6 of the DSA user key (641-768) sshUserRsaKey7: part 7 of the DSA user key (769-896) sshUserRsaKey8: part 8 of the DSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserDsaKey1, and a string which length is 1 in sshUserDsaKey2, moreover, sshUserDsaKey3 to sshUserDsaKey8 will all got zero-length string.')
sshUserDsaKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey2.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey2.setDescription('The total length of DSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the DSA user key (1-128) sshUserRsaKey2: part 2 of the DSA user key (129-256) sshUserRsaKey3: part 3 of the DSA user key (257-384) sshUserRsaKey4: part 4 of the DSA user key (385-512) sshUserRsaKey5: part 5 of the DSA user key (513-640) sshUserRsaKey6: part 6 of the DSA user key (641-768) sshUserRsaKey7: part 7 of the DSA user key (769-896) sshUserRsaKey8: part 8 of the DSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserDsaKey1, and a string which length is 1 in sshUserDsaKey2, moreover, sshUserDsaKey3 to sshUserDsaKey8 will all got zero-length string.')
sshUserDsaKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey3.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey3.setDescription('The total length of DSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the DSA user key (1-128) sshUserRsaKey2: part 2 of the DSA user key (129-256) sshUserRsaKey3: part 3 of the DSA user key (257-384) sshUserRsaKey4: part 4 of the DSA user key (385-512) sshUserRsaKey5: part 5 of the DSA user key (513-640) sshUserRsaKey6: part 6 of the DSA user key (641-768) sshUserRsaKey7: part 7 of the DSA user key (769-896) sshUserRsaKey8: part 8 of the DSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserDsaKey1, and a string which length is 1 in sshUserDsaKey2, moreover, sshUserDsaKey3 to sshUserDsaKey8 will all got zero-length string.')
sshUserDsaKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey4.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey4.setDescription('The total length of DSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the DSA user key (1-128) sshUserRsaKey2: part 2 of the DSA user key (129-256) sshUserRsaKey3: part 3 of the DSA user key (257-384) sshUserRsaKey4: part 4 of the DSA user key (385-512) sshUserRsaKey5: part 5 of the DSA user key (513-640) sshUserRsaKey6: part 6 of the DSA user key (641-768) sshUserRsaKey7: part 7 of the DSA user key (769-896) sshUserRsaKey8: part 8 of the DSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserDsaKey1, and a string which length is 1 in sshUserDsaKey2, moreover, sshUserDsaKey3 to sshUserDsaKey8 will all got zero-length string.')
sshUserDsaKey5 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey5.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey5.setDescription('The total length of DSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the DSA user key (1-128) sshUserRsaKey2: part 2 of the DSA user key (129-256) sshUserRsaKey3: part 3 of the DSA user key (257-384) sshUserRsaKey4: part 4 of the DSA user key (385-512) sshUserRsaKey5: part 5 of the DSA user key (513-640) sshUserRsaKey6: part 6 of the DSA user key (641-768) sshUserRsaKey7: part 7 of the DSA user key (769-896) sshUserRsaKey8: part 8 of the DSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserDsaKey1, and a string which length is 1 in sshUserDsaKey2, moreover, sshUserDsaKey3 to sshUserDsaKey8 will all got zero-length string.')
sshUserDsaKey6 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey6.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey6.setDescription('The total length of DSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the DSA user key (1-128) sshUserRsaKey2: part 2 of the DSA user key (129-256) sshUserRsaKey3: part 3 of the DSA user key (257-384) sshUserRsaKey4: part 4 of the DSA user key (385-512) sshUserRsaKey5: part 5 of the DSA user key (513-640) sshUserRsaKey6: part 6 of the DSA user key (641-768) sshUserRsaKey7: part 7 of the DSA user key (769-896) sshUserRsaKey8: part 8 of the DSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserDsaKey1, and a string which length is 1 in sshUserDsaKey2, moreover, sshUserDsaKey3 to sshUserDsaKey8 will all got zero-length string.')
sshUserDsaKey7 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey7.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey7.setDescription('The total length of DSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the DSA user key (1-128) sshUserRsaKey2: part 2 of the DSA user key (129-256) sshUserRsaKey3: part 3 of the DSA user key (257-384) sshUserRsaKey4: part 4 of the DSA user key (385-512) sshUserRsaKey5: part 5 of the DSA user key (513-640) sshUserRsaKey6: part 6 of the DSA user key (641-768) sshUserRsaKey7: part 7 of the DSA user key (769-896) sshUserRsaKey8: part 8 of the DSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserDsaKey1, and a string which length is 1 in sshUserDsaKey2, moreover, sshUserDsaKey3 to sshUserDsaKey8 will all got zero-length string.')
sshUserDsaKey8 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey8.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey8.setDescription('The total length of DSA user key is 1024 characters, it is divided into 8 parts and store in 8 separated mib variables as below: sshUserRsaKey1: part 1 of the DSA user key (1-128) sshUserRsaKey2: part 2 of the DSA user key (129-256) sshUserRsaKey3: part 3 of the DSA user key (257-384) sshUserRsaKey4: part 4 of the DSA user key (385-512) sshUserRsaKey5: part 5 of the DSA user key (513-640) sshUserRsaKey6: part 6 of the DSA user key (641-768) sshUserRsaKey7: part 7 of the DSA user key (769-896) sshUserRsaKey8: part 8 of the DSA user key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will filled by zero-length string. for example, if the length of the key is 129, we will get a string which length is 128 in sshUserDsaKey1, and a string which length is 1 in sshUserDsaKey2, moreover, sshUserDsaKey3 to sshUserDsaKey8 will all got zero-length string.')
sshUserKeyDelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 6, 29, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserKeyDelAction.setStatus('current')
if mibBuilder.loadTexts: sshUserKeyDelAction.setDescription('To delete the user key. For the set behavior: set it to delRsaKey(2) to delete the RSA user key, delDsaKey(3) to delete the DSA user key, or delBothKeys(4) to delete both RSA and DSA user key. For the get behavior: you will get delRsaKey(2), delDsaKey(3) or delBothKeys(4) when the delete operation is in progress. otherwise, you will get noDel(1).')
aclIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1), )
if mibBuilder.loadTexts: aclIpAceTable.setStatus('current')
if mibBuilder.loadTexts: aclIpAceTable.setDescription('The conceptual table of all of aclIpAceEntry.')
aclIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1), ).setIndexNames((0, "ES4612-MIB", "aclIpAceName"), (0, "ES4612-MIB", "aclIpAceIndex"))
if mibBuilder.loadTexts: aclIpAceEntry.setStatus('current')
if mibBuilder.loadTexts: aclIpAceEntry.setDescription('The conceptual row for aclIpAceTable.')
aclIpAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclIpAceName.setStatus('current')
if mibBuilder.loadTexts: aclIpAceName.setDescription('The name of an ACL. Within a feature a unique name is used to identify the list to which the entry belongs in the device.')
aclIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclIpAceIndex.setStatus('current')
if mibBuilder.loadTexts: aclIpAceIndex.setDescription('The unique index of an ACE within an ACL.')
aclIpAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpAcePrecedence.setStatus('current')
if mibBuilder.loadTexts: aclIpAcePrecedence.setDescription('Specifies the IP precedence value to be matched against. This object cannot not be configured when the status of the entry, aclIpAceStatus, is active(1).')
aclIpAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceAction.setStatus('current')
if mibBuilder.loadTexts: aclIpAceAction.setDescription('Indicates the action to be taken if a packet matches this ACE. This object cannot not be configured when the status of the entry, aclIpAceStatus, is active(1).')
aclIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: aclIpAceSourceIpAddr.setDescription("The specified source IP address. The packet's source address is AND-ed with the value of aclIpAceSourceIpAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, aclIpAceStatus, is active(1).")
aclIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIpAceSourceIpAddrBitmask.setDescription("The specified source IP address mask. The packet's destination address is AND-ed with the value of aclIpAceSourceIpAddr and then compared against the value of this object.")
aclIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDestIpAddr.setDescription("The specified destination IP address. The packet's destination address is AND-ed with the value of aclIpAceDestIpAddrBitmask and then compared against the value of this object.")
aclIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDestIpAddrBitmask.setDescription('The specified destination IP address mask.')
aclIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceProtocol.setStatus('current')
if mibBuilder.loadTexts: aclIpAceProtocol.setDescription("The protocol number field in the IP header used to indicate the higher layer protocol as specified in RFC 1700. A value value of 0 matches every IP packet. The object=256, means 'any' For example : 0 is IP, 1 is ICMP, 2 is IGMP, 4 is IP in IP encapsulation, 6 is TCP, 9 is IGRP, 17 is UDP, 47 is GRE, 50 is ESP, 51 is AH, 88 is IGRP, 89 is OSPF, 94 is KA9Q/NOS compatible IP over IP, 103 is PIMv2, 108 is PCP. ")
aclIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAcePrec.setStatus('current')
if mibBuilder.loadTexts: aclIpAcePrec.setDescription('Specifies the IP precedence value to be matched against. This object cannot be configured when the status of the entry, aclIpAceStatus, is active(1). The value of this object is ignored whenever the value of aclIpAcePrec object is 8.')
aclIpAceTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceTos.setStatus('current')
if mibBuilder.loadTexts: aclIpAceTos.setDescription('Specifies the IP ToS facility value to be matched against. This object cannot be configured when the status of the entry, aclIpAceStatus, is active(1). The value of this object is ignored whenever the value of aclIpAcePrec object is 9.')
aclIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDscp.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDscp.setDescription('Specifies the DSCP value to be matched against. This object cannot be configured when the status of the entry, aclIpAceStatus, is active(1). The value of this object is ignored whenever the value of aclIpAcePrec object is 64.')
aclIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourcePortOp.setStatus('current')
if mibBuilder.loadTexts: aclIpAceSourcePortOp.setDescription("Indicates how a packet's source TCP/UDP port number is to be compared. noOperator(1), which is the default value, means no comparison is to be made with the source TCP/UDP port number.")
aclIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinSourcePort.setStatus('current')
if mibBuilder.loadTexts: aclIpAceMinSourcePort.setDescription('If the aclIpAceSourcePortOp is range(3), this indicates the lower bound of the TCP/UDP port number value range.')
aclIpAceMaxSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxSourcePort.setStatus('current')
if mibBuilder.loadTexts: aclIpAceMaxSourcePort.setDescription('If the aclIpAceSourcePortOp is range(3), this indicates the upper bound of the TCP/UDP port number value range.')
aclIpAceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourcePortBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIpAceSourcePortBitmask.setDescription('If the aclIpAceSourcePortOp is equal(2), this indicates the bitmask of the aclIpAceMinSourcePort.')
aclIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestPortOp.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDestPortOp.setDescription("Indicates how a packet's destination TCP/UDP port number is to be compared. noOperator(1), which is the default value, means that no comparison is to be made with the destination TCP/UDP port number.")
aclIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinDestPort.setStatus('current')
if mibBuilder.loadTexts: aclIpAceMinDestPort.setDescription('If the aclIpAceDestPortOp is range(3), this indicates the lower bound of the TCP/UDP port number value range.')
aclIpAceMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxDestPort.setStatus('current')
if mibBuilder.loadTexts: aclIpAceMaxDestPort.setDescription('If the aclIpAceDestPortOp is range(3), this indicates the upper bound of the TCP/UDP port number value range.')
aclIpAceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestPortBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDestPortBitmask.setDescription('If the aclIpAceDestPortOp is equal(2), this indicates the bitmask of the aclIpAceMinDestPort.')
aclIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCode.setStatus('current')
if mibBuilder.loadTexts: aclIpAceControlCode.setDescription('Indicates how the control flags of TCP packets are to be compared. aceIpControlCode is AND-ed with aceIpControlCodeBitmask.')
aclIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCodeBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIpAceControlCodeBitmask.setDescription('Indicates how the control flags of TCP packets are to be compared. It can be used to check multiple flags of the FIN, SYN, RST, PSH, ACK, URG by the sum of FIN=1, SYN=2, RST=4, PSH=8, ACK=16, URG=32.')
aclIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceStatus.setStatus('current')
if mibBuilder.loadTexts: aclIpAceStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
aclMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2), )
if mibBuilder.loadTexts: aclMacAceTable.setStatus('current')
if mibBuilder.loadTexts: aclMacAceTable.setDescription('The conceptual table of all of aclMacAceEntry.')
aclMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1), ).setIndexNames((0, "ES4612-MIB", "aclMacAceName"), (0, "ES4612-MIB", "aclMacAceIndex"))
if mibBuilder.loadTexts: aclMacAceEntry.setStatus('current')
if mibBuilder.loadTexts: aclMacAceEntry.setDescription('The conceptual row for aclMacAceTable. ')
aclMacAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclMacAceName.setStatus('current')
if mibBuilder.loadTexts: aclMacAceName.setDescription('The name of an ACL. Within a feature, a unique name is used to identify the list to which the entry belongs in the device.')
aclMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclMacAceIndex.setStatus('current')
if mibBuilder.loadTexts: aclMacAceIndex.setDescription('The unique index of an ACE within an ACL.')
aclMacAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacAcePrecedence.setStatus('current')
if mibBuilder.loadTexts: aclMacAcePrecedence.setDescription("Specifies the entry's precedence.")
aclMacAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceAction.setStatus('current')
if mibBuilder.loadTexts: aclMacAceAction.setDescription('Indicates the action to be taken if a packet matches this ACE. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAcePktformat.setStatus('current')
if mibBuilder.loadTexts: aclMacAcePktformat.setDescription('Used to check the packet format of the packets. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: aclMacAceSourceMacAddr.setDescription("Indicates the 48-bit destination MAC address. The specified source MAC of the packet The packet's source MAC address is AND-ed with the value of aceMacSourceMacAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).")
aclMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclMacAceSourceMacAddrBitmask.setDescription('The specified source MAC address mask. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: aclMacAceDestMacAddr.setDescription("Indicates the 48-bit destination MAC address. The specified destination MAC of the packet. The packet's destination MAC address is AND-ed with the value of aceMacDestMacAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).")
aclMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclMacAceDestMacAddrBitmask.setDescription('The specified destination MAC address mask. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceVidOp.setStatus('current')
if mibBuilder.loadTexts: aclMacAceVidOp.setDescription("Indicates how a packet's vid is to be compared. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).")
aclMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinVid.setStatus('current')
if mibBuilder.loadTexts: aclMacAceMinVid.setDescription('Indicates the lower bound of the vid value range if the aclMacAceVidOp is range(3). This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceVidBitmask.setStatus('current')
if mibBuilder.loadTexts: aclMacAceVidBitmask.setDescription('The bitmask of vid if the aclMacAceVidOp is equal, default value is 0xfff.')
aclMacAceMaxVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxVid.setStatus('current')
if mibBuilder.loadTexts: aclMacAceMaxVid.setDescription('Indicates the upper bound of the vid value range if the aclMacAceVidOp is range(3). This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceEtherTypeOp.setStatus('current')
if mibBuilder.loadTexts: aclMacAceEtherTypeOp.setDescription("Indicates how a packet's ethertype is to be compared. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).")
aclMacAceEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceEtherTypeBitmask.setStatus('current')
if mibBuilder.loadTexts: aclMacAceEtherTypeBitmask.setDescription('The bitmask of vid if the aclMacAceVidOp is equal(2) , default value is 0xFFFF.')
aclMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinEtherType.setStatus('current')
if mibBuilder.loadTexts: aclMacAceMinEtherType.setDescription('Indicates the lower bound of the vid value range if the aclMacAceEtherTypeOp is range(3). This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceMaxEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxEtherType.setStatus('current')
if mibBuilder.loadTexts: aclMacAceMaxEtherType.setDescription('Indicates the upper bound of the vid value range if the aclMacAceEtherTypeOp is range(3). This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceStatus.setStatus('current')
if mibBuilder.loadTexts: aclMacAceStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
aclAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3), )
if mibBuilder.loadTexts: aclAclGroupTable.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupTable.setDescription('The conceptual table of aclAclGroupEntry.')
aclAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1), ).setIndexNames((0, "ES4612-MIB", "aclAclGroupIfIndex"))
if mibBuilder.loadTexts: aclAclGroupEntry.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupEntry.setDescription('The conceptual row for aclAclGroupTable.')
aclAclGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aclAclGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupIfIndex.setDescription('The interface number specifying the ACL binding to.')
aclAclGroupIngressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressIpAcl.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupIngressIpAcl.setDescription('Specifies the ingress IP ACL(standard or extended) binding to the interface.')
aclAclGroupEgressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressIpAcl.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupEgressIpAcl.setDescription('Specifies the egress IP ACL(standard or extended) binding to the interface.')
aclAclGroupIngressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressMacAcl.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupIngressMacAcl.setDescription('Specifies the ingress MAC ACL binding to the interface.')
aclAclGroupEgressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressMacAcl.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupEgressMacAcl.setDescription('Specifies the egress MAC ACL binding to the interface.')
aclIngressIpMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4), )
if mibBuilder.loadTexts: aclIngressIpMaskTable.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskTable.setDescription('The conceptual table of aclIngressIpMaskEntry.')
aclIngressIpMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1), ).setIndexNames((0, "ES4612-MIB", "aclIngressIpMaskIndex"))
if mibBuilder.loadTexts: aclIngressIpMaskEntry.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskEntry.setDescription('The conceptual row for aclIngressIpMaskTable.')
aclIngressIpMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclIngressIpMaskIndex.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskIndex.setDescription('Indicates the bitmask of the source IP address. The relative bitmask must be created before the ACE binds to the interface. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIngressIpMaskPrecedence.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskPrecedence.setDescription('Indicates whether to check the IP precedence against the packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskIsEnableTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 3), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableTos.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableTos.setDescription('Indicates whether to check the IP ToS facility against the packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskIsEnableDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 4), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableDscp.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableDscp.setDescription('Indicates whether to check the IP DSCP against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskIsEnablePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 5), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnablePrecedence.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskIsEnablePrecedence.setDescription('Indicates whether to check the IP precednce against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskIsEnableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableProtocol.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskIsEnableProtocol.setDescription('Indicates whether to check the IP protocol against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskSourceIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskSourceIpAddrBitmask.setDescription('Indicates the source IP bitmask to check against the packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskDestIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskDestIpAddrBitmask.setDescription('Indicates the destination IP bitmask to check against the packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskSourcePortBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskSourcePortBitmask.setDescription('Indicates the source port bitmask to check against the TCP/UDP packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskDestPortBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskDestPortBitmask.setDescription('Indicates the destination port bitmask to check against the TCP/UDP packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskControlCodeBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskControlCodeBitmask.setDescription('Indicates the control code bitmask to check against the TCP packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressIpMaskStatus, is active(1).')
aclIngressIpMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressIpMaskStatus.setStatus('current')
if mibBuilder.loadTexts: aclIngressIpMaskStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
aclEgressIpMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5), )
if mibBuilder.loadTexts: aclEgressIpMaskTable.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskTable.setDescription('The conceptual table of aclEgressIpMaskEntry.')
aclEgressIpMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1), ).setIndexNames((0, "ES4612-MIB", "aclEgressIpMaskIndex"))
if mibBuilder.loadTexts: aclEgressIpMaskEntry.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskEntry.setDescription('The conceptual row for aclEgressIpMaskTable.')
aclEgressIpMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclEgressIpMaskIndex.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskIndex.setDescription('The index of a mask entry within a mask table.')
aclEgressIpMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEgressIpMaskPrecedence.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskPrecedence.setDescription('The created precedence of an mask entry within the mask table.')
aclEgressIpMaskIsEnableTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 3), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableTos.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableTos.setDescription('Indicates whether to check the IP ToS facility against the packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskIsEnableDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 4), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableDscp.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableDscp.setDescription('Indicates whether to check the IP DSCP against the packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskIsEnablePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 5), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnablePrecedence.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskIsEnablePrecedence.setDescription('Indicates whether to check the IP precedence against the packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskIsEnableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableProtocol.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskIsEnableProtocol.setDescription('Indicates whether to check the IP protocol against the packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskSourceIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskSourceIpAddrBitmask.setDescription('Indicates the source IP bitmask to check against the packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskDestIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskDestIpAddrBitmask.setDescription('Indicates the destination IP bitmask to check against the packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskSourcePortBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskSourcePortBitmask.setDescription('Indicates the source port bitmask to check against the TCP/UDP packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskDestPortBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskDestPortBitmask.setDescription('Indicates the destination port bitmask to check against the TCP/UDP packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskControlCodeBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskControlCodeBitmask.setDescription('Indicates the control code bitmask to check against the TCP packets. The relative bitmask must be created before the ACE binds to the interface in egress direction. This object cannot be configured when the status of the entry, aclEgressIpMaskStatus, is active(1).')
aclEgressIpMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 5, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressIpMaskStatus.setStatus('current')
if mibBuilder.loadTexts: aclEgressIpMaskStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
aclIngressMacMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6), )
if mibBuilder.loadTexts: aclIngressMacMaskTable.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskTable.setDescription('The conceptual table of aclIngressMacMaskEntry.')
aclIngressMacMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1), ).setIndexNames((0, "ES4612-MIB", "aclIngressMacMaskIndex"))
if mibBuilder.loadTexts: aclIngressMacMaskEntry.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskEntry.setDescription('The conceptual row for aclIngressMacMaskTable.')
aclIngressMacMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclIngressMacMaskIndex.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskIndex.setDescription('The index of an mask entry within an ingress mask table.')
aclIngressMacMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIngressMacMaskPrecedence.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskPrecedence.setDescription('The created order of an mask entry within an ingress mask table.')
aclIngressMacMaskSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskSourceMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskSourceMacAddrBitmask.setDescription('Indicates the source MAC bitmask to check against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressMacMaskStatus, is active(1).')
aclIngressMacMaskDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskDestMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskDestMacAddrBitmask.setDescription('Indicates the destination MAC bitmask to check against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressMacMaskStatus, is active(1).')
aclIngressMacMaskVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskVidBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskVidBitmask.setDescription('Indicates the vid bitmask to check against the packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressMacMaskStatus, is active(1).')
aclIngressMacMaskEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskEtherTypeBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskEtherTypeBitmask.setDescription('Indicates the ethertype bitmask to check against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressMacMaskStatus, is active(1).')
aclIngressMacMaskIsEnablePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 7), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskIsEnablePktformat.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskIsEnablePktformat.setDescription('Indicates whether to check the packet format against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclIngressMacMaskStatus, is active(1).')
aclIngressMacMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIngressMacMaskStatus.setStatus('current')
if mibBuilder.loadTexts: aclIngressMacMaskStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
aclEgressMacMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7), )
if mibBuilder.loadTexts: aclEgressMacMaskTable.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskTable.setDescription('The conceptual table of aclEgressMacMaskEntry.')
aclEgressMacMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1), ).setIndexNames((0, "ES4612-MIB", "aclEgressMacMaskIndex"))
if mibBuilder.loadTexts: aclEgressMacMaskEntry.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskEntry.setDescription('The conceptual row for aclEgressMacMaskTable.')
aclEgressMacMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: aclEgressMacMaskIndex.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskIndex.setDescription('The index of a mask entry within an egress mask table.')
aclEgressMacMaskPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEgressMacMaskPrecedence.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskPrecedence.setDescription('The created precedence of a mask entry within an egress mask table.')
aclEgressMacMaskSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskSourceMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskSourceMacAddrBitmask.setDescription('Indicates the source MAC bitmask to check against the packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclEgressMacMaskStatus, is active(1).')
aclEgressMacMaskDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskDestMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskDestMacAddrBitmask.setDescription('Indicates the destination MAC bitmask to check against the packets, The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclEgressMacMaskStatus, is active(1).')
aclEgressMacMaskVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskVidBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskVidBitmask.setDescription('Indicates the vid bitmask to check against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclEgressMacMaskStatus, is active(1).')
aclEgressMacMaskEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskEtherTypeBitmask.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskEtherTypeBitmask.setDescription('Indicates the ethertype bitmask to check against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclEgressMacMaskStatus, is active(1).')
aclEgressMacMaskIsEnablePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 7), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskIsEnablePktformat.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskIsEnablePktformat.setDescription('Indicates whether to check the packet format against the packets. The relative bitmask must be created before the ACE binds to the interface in ingress direction. This object cannot be configured when the status of the entry, aclEgressMacMaskStatus, is active(1).')
aclEgressMacMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 7, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclEgressMacMaskStatus.setStatus('current')
if mibBuilder.loadTexts: aclEgressMacMaskStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
ipFilterSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1), )
if mibBuilder.loadTexts: ipFilterSnmpTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpTable.setDescription('A list of IP address entries.')
ipFilterSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1, 1), ).setIndexNames((0, "ES4612-MIB", "ipFilterSnmpStartAddress"))
if mibBuilder.loadTexts: ipFilterSnmpEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpEntry.setDescription('This entry includes an IP address range which the system will allow them to connect to this device through SNMP.')
ipFilterSnmpStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterSnmpStartAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpStartAddress.setDescription('The start-ip-address.')
ipFilterSnmpEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpEndAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpEndAddress.setDescription('The end-ip-address.')
ipFilterSnmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterHTTPTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2), )
if mibBuilder.loadTexts: ipFilterHTTPTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPTable.setDescription('A list of IP address entries.')
ipFilterHTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2, 1), ).setIndexNames((0, "ES4612-MIB", "ipFilterHTTPStartAddress"))
if mibBuilder.loadTexts: ipFilterHTTPEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPEntry.setDescription('This entry includes an IP address range which the system will allow them to connect to this device through SNMP.')
ipFilterHTTPStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterHTTPStartAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPStartAddress.setDescription('The start-ip-address.')
ipFilterHTTPEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPEndAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPEndAddress.setDescription('The end-ip-address.')
ipFilterHTTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 2, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterTelnetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3), )
if mibBuilder.loadTexts: ipFilterTelnetTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetTable.setDescription('A list of IP address entries.')
ipFilterTelnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3, 1), ).setIndexNames((0, "ES4612-MIB", "ipFilterTelnetStartAddress"))
if mibBuilder.loadTexts: ipFilterTelnetEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetEntry.setDescription('This entry includes an IP address range which the system will allow them to connect to this device through SNMP.')
ipFilterTelnetStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterTelnetStartAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetStartAddress.setDescription('The start-ip-address.')
ipFilterTelnetEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetEndAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetEndAddress.setDescription('The end-ip-address.')
ipFilterTelnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 17, 9, 3, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
if mibBuilder.loadTexts: sysLogStatus.setDescription('Whether system log is enabled.')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setDescription('Severity level for logging to flash.')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setDescription('Severity level for logging to RAM.')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
if mibBuilder.loadTexts: remoteLogStatus.setDescription('Whether the remote log system is enabled.')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
if mibBuilder.loadTexts: remoteLogLevel.setDescription('Severity level for remote log.')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
if mibBuilder.loadTexts: remoteLogFacilityType.setDescription(' The FacilityType for remote log.')
remoteLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 4), )
if mibBuilder.loadTexts: remoteLogServerTable.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerTable.setDescription('A Table for storing the remote log Server list.')
remoteLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 4, 1), ).setIndexNames((0, "ES4612-MIB", "remoteLogServerIp"))
if mibBuilder.loadTexts: remoteLogServerEntry.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerEntry.setDescription('A conceptually row for remoteLogServerTable.')
remoteLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: remoteLogServerIp.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerIp.setDescription('The IP address of the remote log Server.')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 6, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
smtpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('current')
if mibBuilder.loadTexts: smtpStatus.setDescription('Set enabled(1) to enable the SMTP, set disabled(2) to disable the SMTP.')
smtpSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: smtpSeverityLevel.setDescription('specify the SMTP minimum severity level to send the event message.')
smtpSourceEMail = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSourceEMail.setStatus('current')
if mibBuilder.loadTexts: smtpSourceEMail.setDescription("SMTP source email address, the sender's mail address that appears in the 'From' field of the mail.")
smtpServerIpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 4), )
if mibBuilder.loadTexts: smtpServerIpTable.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpTable.setDescription('The table of SMTP server Ip. The maximum servers to be added is 3.')
smtpServerIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 4, 1), ).setIndexNames((0, "ES4612-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: smtpServerIpEntry.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpEntry.setDescription('A conceptual row of the smtpServerIpTable.')
smtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 4, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smtpServerIp.setStatus('current')
if mibBuilder.loadTexts: smtpServerIp.setDescription(' SMTP mail servers IP address.')
smtpServerIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpServerIpStatus.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
smtpDestEMailTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 5), )
if mibBuilder.loadTexts: smtpDestEMailTable.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailTable.setDescription('The table of the destination e-mail address. The maximum numbers of destination email address to be added is 5.')
smtpDestEMailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 5, 1), ).setIndexNames((0, "ES4612-MIB", "smtpDestEMail"))
if mibBuilder.loadTexts: smtpDestEMailEntry.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailEntry.setDescription('A conceptual row of the smtpDestEMailTable.')
smtpDestEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41)))
if mibBuilder.loadTexts: smtpDestEMail.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMail.setDescription('SMTP destination e-mail address.')
smtpDestEMailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 19, 7, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpDestEMailStatus.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
consoleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1))
telnetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2))
consoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits7", 1), ("databits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDataBits.setStatus('current')
if mibBuilder.loadTexts: consoleDataBits.setDescription('Number of data bits.')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partyNone", 1), ("partyEven", 2), ("partyOdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
if mibBuilder.loadTexts: consoleParity.setDescription('Define the generation of a parity bit.')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits1", 1), ("stopbits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
if mibBuilder.loadTexts: consoleStopBits.setDescription('The stop Bits of the console, valid value is stopbits1(1) or stopbits2(2)')
consoleExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleExecTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleExecTimeout.setDescription('In serial console, use the consoleExecTimeout variables to set the interval that the EXEC command interpreter waits until user input is detected, set the value to 0 to disable it.')
consolePasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePasswordThreshold.setStatus('current')
if mibBuilder.loadTexts: consolePasswordThreshold.setDescription('In serial console, use the consolePasswordThreshold variabes to set the password intrusion threshold, which limits the number of failed logon attempts allowed. Set it value to 0 to disable it.')
consoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSilentTime.setStatus('current')
if mibBuilder.loadTexts: consoleSilentTime.setDescription('In Console, Use the consoleSilentTime variable to set the amount of time the management console is inaccessible after the number of unsuccessful logon attempts exceeds the threshold set by the password-thresh command. Set it to 0 to disable it.')
consoleAdminBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleAdminBaudRate.setStatus('current')
if mibBuilder.loadTexts: consoleAdminBaudRate.setDescription('Baud rate. Valid values are 2400, 4800, 9600, 19200, 38400, 57600, 115200. Setting this variable to 0 means autobaud. Please read the actual baud rate in the consoleOperBaudRate variable.')
consoleOperBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleOperBaudRate.setStatus('current')
if mibBuilder.loadTexts: consoleOperBaudRate.setDescription('The baud rate currently in use.')
telnetExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetExecTimeout.setStatus('current')
if mibBuilder.loadTexts: telnetExecTimeout.setDescription('In a telnet session, to set the interval that the EXEC command interpreter waits until user input is detected, use the telnetExecTimeout variables. ')
telnetPasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPasswordThreshold.setStatus('current')
if mibBuilder.loadTexts: telnetPasswordThreshold.setDescription('In a telnet session, use the consolePasswordThreshold variabes to set the password intrusion threshold, which limits the number of failed logon attempts allowed. Set it value to 0 to disable it.')
telnetStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2, 4), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetStatus.setStatus('current')
if mibBuilder.loadTexts: telnetStatus.setDescription('To enable or disable the telnet function. Any new telnet request will be rejected and all current telnet sessions will be terminated if this status is set to disabled(2).')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 20, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
if mibBuilder.loadTexts: telnetPortNumber.setDescription('The telnet session port number.')
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1))
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
if mibBuilder.loadTexts: rateLimitPortTable.setDescription('Table for rate limit of each port.')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1), ).setIndexNames((0, "ES4612-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
if mibBuilder.loadTexts: rateLimitPortEntry.setDescription('Entry for rate limit of each port.')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
if mibBuilder.loadTexts: rlPortIndex.setDescription('The port and the trunk (including trunk member) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
rlPortInputLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputLimit.setStatus('current')
if mibBuilder.loadTexts: rlPortInputLimit.setDescription('Value of the input rate limit. Its unit is megabits per second. For a 100 Mb/s port, the range is 1 to 100. For a 1000 Mb/s port, the range is 1 to 1000.')
rlPortOutputLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputLimit.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputLimit.setDescription('Value of the output rate limit. Its unit is megabits per second. For a 100 Mb/s port, the range is 1 to 100. For a 1000 Mb/s port, the range is 1 to 1000.')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
if mibBuilder.loadTexts: rlPortInputStatus.setDescription('Whether input rate limit is enabled for this port.')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 1, 2, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputStatus.setDescription('Whether output rate limit is enabled for this port.')
markerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2))
markerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1), )
if mibBuilder.loadTexts: markerTable.setStatus('current')
if mibBuilder.loadTexts: markerTable.setDescription('The marker table.')
markerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1), ).setIndexNames((0, "ES4612-MIB", "markerIfIndex"), (0, "ES4612-MIB", "markerAclName"))
if mibBuilder.loadTexts: markerEntry.setStatus('current')
if mibBuilder.loadTexts: markerEntry.setDescription('Entry for marker table.')
markerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: markerIfIndex.setStatus('current')
if mibBuilder.loadTexts: markerIfIndex.setDescription('The interface index of the marker table. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
markerAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: markerAclName.setStatus('current')
if mibBuilder.loadTexts: markerAclName.setDescription('The name of an ACL. Within a feature the name is unique used to identifies the list to which the entry belongs in the device.')
markerActionBitList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("dscp", 0), ("precedence", 1), ("priority", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerActionBitList.setStatus('current')
if mibBuilder.loadTexts: markerActionBitList.setDescription('The marker action bit list, in right to left order. for example: 0x3(11 in binary) means dscp(0) and precedence(1) 0x4(100 in binary) means priority(2)')
markerDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerDscp.setStatus('current')
if mibBuilder.loadTexts: markerDscp.setDescription('The Dscp value of the marker entry.')
markerPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerPrecedence.setStatus('current')
if mibBuilder.loadTexts: markerPrecedence.setDescription('The precedence value of the marker entry.')
markerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerPriority.setStatus('current')
if mibBuilder.loadTexts: markerPriority.setDescription('The priority value of the marker entry.')
markerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: markerStatus.setStatus('current')
if mibBuilder.loadTexts: markerStatus.setDescription('The status of this marker conceptual row entry. This object is used to manage creation, deletion and modification of rows in this table. An entry may not exist in the active state unless all objects in the entry have an appropriate value. Once a row becomes active, value in any other column within such row cannot be modified. ip ace created by SNMP basically belong to ip extended ACL. Valid values are: active(1); notInService(2); notReady(3); createAndGo(4); createAndWait(5); destroy(6). Set this value to createAndGo(4) to ceate a new entry and make it active at once, set to createAndWait(5) means create a new entry but not active now, set to destroy(6) to delete an entry You may get one of the following value when you try to read this variable: active(1); notInService(2); notReady(3) representing the current status of this entry')
cosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3))
prioAclToCosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1), )
if mibBuilder.loadTexts: prioAclToCosMappingTable.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingTable.setDescription('Table for Acl to Cos Mapping.')
prioAclToCosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1), ).setIndexNames((0, "ES4612-MIB", "prioAclToCosMappingIfIndex"), (0, "ES4612-MIB", "prioAclToCosMappingAclName"))
if mibBuilder.loadTexts: prioAclToCosMappingEntry.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingEntry.setDescription('Entry for Acl to Cos Mapping.')
prioAclToCosMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: prioAclToCosMappingIfIndex.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingIfIndex.setDescription('The port interface of the prioAclToCosMappingEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
prioAclToCosMappingAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: prioAclToCosMappingAclName.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingAclName.setDescription('The name of an IP ACL. Within a feature the name is unique used to identifies the list to which the entry belongs in the device.')
prioAclToCosMappingCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingCosValue.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingCosValue.setDescription('Cos value of the prioAclToCosMappingTable.')
prioAclToCosMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 16, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingStatus.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingStatus.setDescription('The status of this acl to cos mapping conceptual row entry. This object is used to manage creation, deletion and modification of rows in this table. An entry may not exist in the active state unless all objects in the entry have an appropriate value. Once a row becomes active, value in any other column within such row cannot be modified. ip ace created by SNMP basically belong to ip extended ACL. Valid values are: active(1); notInService(2); notReady(3); createAndGo(4); createAndWait(5); destroy(6). Set this value to createAndGo(4) to ceate a new entry and make it active at once, set to createAndWait(5) means create a new entry but not active now, set to destroy(6) to delete an entry You may get one of the following value when you try to read this variable: active(1); notInService(2); notReady(3) representing the current status of this entry.')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
if mibBuilder.loadTexts: sntpStatus.setDescription('Set enabled(1) to enable the SNTP, set disabled(2) to disable the SNTP.')
sntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServiceMode.setStatus('current')
if mibBuilder.loadTexts: sntpServiceMode.setDescription('Service mode.')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
if mibBuilder.loadTexts: sntpPollInterval.setDescription('Polling interval.')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 4), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
if mibBuilder.loadTexts: sntpServerTable.setDescription('Table for SNTP servers')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 4, 1), ).setIndexNames((0, "ES4612-MIB", "sntpServerIndex"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: sntpServerEntry.setDescription('Entry for SNTP servers.')
sntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sntpServerIndex.setStatus('current')
if mibBuilder.loadTexts: sntpServerIndex.setDescription('The index of a server. This table has fixed size.')
sntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: sntpServerIpAddress.setDescription('The IP address of a server. Valid IP addresses must occupy contiguous indexes. All IP addresses after the last valid index is 0.')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
if mibBuilder.loadTexts: sysCurrentTime.setDescription("It is a text string in the following form, based on Unix: 'Mmm _d hh:mm:ss yyyy'. 'Mmm' is the first three letters of the English name of the month. '_d' is the day of month. A single-digit day is preceded by the space. 'hh:mm:ss' is a 24-hour representations of hours, minutes, and seconds. A single-digit hour is preceded by a zero. 'yyyy' is the four-digit year. An example is: 'Jan 1 02:03:04 2002'.")
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
if mibBuilder.loadTexts: sysTimeZone.setDescription("It is a text string in the following form: '[s]hh:mm'. '[s]' is a plus-or-minus sign. For UTC, this is omitted. For a positive offset, this is '+'. For a negative offset, this is '-'. 'hh:mm' in the hour and minute offset from UTC. A single-digit hour is preceded by a zero.")
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 23, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: sysTimeZoneName.setDescription('The name of the time zone.')
fileCopyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1))
fileCopySrcOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcOperType.setStatus('current')
if mibBuilder.loadTexts: fileCopySrcOperType.setDescription("The Copy Operation in which we want to perform to the fileCopyDestOperType, this operation is similar to the CLI command 'copy fileCopySrcOperType fileCopyDestOperType'. file(1) means we want to perform the 'copy file fileCopyDestType' operation, runningCfg(2) means we want to perform the 'copy running-config fileCopyDestOperType' operation, startUpCfg(3) means we want to perform the 'copy startup-config fileCopyDestOperType' operation, tftp(4) means we want to perform the 'copy tftp fileCopyDestOperType' operation, unit(5) is only avaiable in stacking system, in which we can copy files from one unit to another unit and it means we want to perform the 'copy unit fileCopyDestOperType' operation. The possible permuations is as follow: (1)copy file file (2)copy file runningCfg (3) copy file startUpCfg (4)copy file tftp (5) copy file unit(for stacking system only) (6)copy runningCfg file (7)copy runningCfg startUpCfg (8)copy runningCfg tftp (9)copy startupCfg file (10)copy startupCfg runningcfg (11)copy startupCfg tftp (12)copy tftp file (13)copy tftp runningCfg (14)copy tftp startUpCfg (15)copy unit file.")
fileCopySrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcFileName.setStatus('current')
if mibBuilder.loadTexts: fileCopySrcFileName.setDescription('The source file name for fileCopyMgt when a copy operation is next requested via this MIB. This value is set to the zero length string when no file name has been specified. Note: if the fileCopySrcOperType is runningCfg(2) or startUpCfg(3), this varible can be ignored.')
fileCopyDestOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestOperType.setStatus('current')
if mibBuilder.loadTexts: fileCopyDestOperType.setDescription("The Copy Operation in which we want to perform from the fileCopySrcOperType, this operation is similar to the CLI command 'copy fileCopySrcOperType fileCopyDestOperType'. file(1) means we want to perform the 'copy fileCopySrcType file ' operation, runningCfg(2) means we want to perform the 'copy fileCopySrcOperType running-config ' operation, startUpCfg(3) means we want to perform the 'copy fileCopySrcOperType startup-config ' operation, tftp(4) means we want to perform the 'copy fileCopySrcOperType tftp' operation, unit(5) is only avaiable in stacking system, in which we can copy files from one unit to another unit and it means we want to perform the 'copy fileCopySrcOperType unit' operation. The possible permuations is as follow: (1)copy file file (2)copy file runningCfg (3) copy file startUpCfg (4)copy file tftp (5) copy file unit(for stacking system only) (6)copy runningCfg file (7)copy runningCfg startUpCfg (8)copy runningCfg tftp (9)copy startupCfg file (10)copy startupCfg runningcfg (11)copy startupCfg tftp (12)copy tftp file (13)copy tftp runningCfg (14)copy tftp startUpCfg (15)copy unit file.")
fileCopyDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestFileName.setStatus('current')
if mibBuilder.loadTexts: fileCopyDestFileName.setDescription('The destination file name for fileCopyMgt when a copy operation is next requested via this MIB. This value is set to the zero length string when no file name has been specified. Note: if the fileCopyDestOperType is runningCfg(2) or startupCfg(3), this varible can be ignored.')
fileCopyFileType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2), ("bootRom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyFileType.setStatus('current')
if mibBuilder.loadTexts: fileCopyFileType.setDescription('Type of file to copy in fileCopyMgt. If the fileCopySrcOperType or fileCopyDestOperType is either runningCfg(2) or startupCfg(3), this varible can be ignored. If the fileCopySrcOperType or fileCopyDestOperType is unit(5), this varibles cannot be set to bootRom(3).')
fileCopyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyTftpServer.setStatus('current')
if mibBuilder.loadTexts: fileCopyTftpServer.setDescription("The IP address of the TFTP server for transfer when a download is next requested via this MIB. This value is set to '0.0.0.0' when no IP address has been specified. If neither fileCopySrcOperType nor fileCopyDestOperType is tftp(4), this variable can be ignored.")
fileCopyUnitId = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUnitId.setStatus('current')
if mibBuilder.loadTexts: fileCopyUnitId.setDescription("Specify the unit of the switch for stackable device when performing the 'copy unit file' or 'copy file unit' action, If neither fileCopySrcOperType nor fileCopyDestOperType is unit(5), this variable can be ignored.")
fileCopyAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyAction.setStatus('current')
if mibBuilder.loadTexts: fileCopyAction.setDescription('Setting this object to copy(2) to begin the copy Operation.')
fileCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyStatus.setStatus('current')
if mibBuilder.loadTexts: fileCopyStatus.setDescription('The status of the last copy procedure, if any. This object will have a value of downloadStatusUnknown(2) if no copy operation has been performed.')
fileCopyTftpErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyTftpErrMsg.setStatus('current')
if mibBuilder.loadTexts: fileCopyTftpErrMsg.setDescription('The tftp error messge, this value is meaningful only when the fileCopyStatus is fileCopyTftpUndefError(1).')
fileInfoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2))
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
if mibBuilder.loadTexts: fileInfoTable.setDescription('This table contain the information of the file system, we can also perfrom the delete, set startup file operation.')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1), ).setIndexNames((0, "ES4612-MIB", "fileInfoUnitID"), (1, "ES4612-MIB", "fileInfoFileName"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
if mibBuilder.loadTexts: fileInfoEntry.setDescription('A conceptually row for fileInfoTable.')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: fileInfoUnitID.setDescription('The unit of the switch in a stacking system, in a non-stacking system, it value is always 1.')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileName.setDescription('The file Name of the file System in the device.')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("diag", 1), ("runtime", 2), ("syslog", 3), ("cmdlog", 4), ("config", 5), ("postlog", 6), ("private", 7), ("certificate", 8), ("webarchive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileType.setDescription('The file type of the file System in the device.')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
if mibBuilder.loadTexts: fileInfoIsStartUp.setDescription('This flag indicate whether this file is a startup file, Setting this object to truth(1) to indicate this is a startup file, setting this object to false(2) is a invalid operation.')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileSize.setDescription('The sizes( in bytes) of the file.')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
if mibBuilder.loadTexts: fileInfoCreationTime.setDescription('The creation time of the file.')
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
if mibBuilder.loadTexts: fileInfoDelete.setDescription('Writing this object to delete(2) to delete a file, when read, this always return noDelete(1).')
dnsDomainLookup = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainLookup.setStatus('current')
if mibBuilder.loadTexts: dnsDomainLookup.setDescription('To enable the IP Domain Naming System (DNS)-based host name-to-address translation')
dnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsDomainName.setDescription('To define a default domain name to complete unqualified host names (names without a dotted-decimal domain name)')
dnsHostTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3), )
if mibBuilder.loadTexts: dnsHostTable.setStatus('current')
if mibBuilder.loadTexts: dnsHostTable.setDescription('This table is used to define static host name-to-address mapping.')
dnsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3, 1), ).setIndexNames((0, "ES4612-MIB", "dnsHostName"), (0, "ES4612-MIB", "dnsHostIndex"))
if mibBuilder.loadTexts: dnsHostEntry.setStatus('current')
if mibBuilder.loadTexts: dnsHostEntry.setDescription('A conceptual row for the dnsHostTable.')
dnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: dnsHostName.setStatus('current')
if mibBuilder.loadTexts: dnsHostName.setDescription('The DNS Host name.')
dnsHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dnsHostIndex.setStatus('current')
if mibBuilder.loadTexts: dnsHostIndex.setDescription('The secondary index of this dnsHostTable, representing the sequence of the dnsHostIp.')
dnsHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsHostIp.setStatus('current')
if mibBuilder.loadTexts: dnsHostIp.setDescription('The DNS Host IP.')
dnsAliasTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 4), )
if mibBuilder.loadTexts: dnsAliasTable.setStatus('current')
if mibBuilder.loadTexts: dnsAliasTable.setDescription('This table display the alias of the host name')
dnsAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 4, 1), ).setIndexNames((0, "ES4612-MIB", "dnsAliasName"), (0, "ES4612-MIB", "dnaAliasAlias"))
if mibBuilder.loadTexts: dnsAliasEntry.setStatus('current')
if mibBuilder.loadTexts: dnsAliasEntry.setDescription('A conceptually row for dnsAliasTable.')
dnsAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAliasName.setStatus('current')
if mibBuilder.loadTexts: dnsAliasName.setDescription('Host Name')
dnaAliasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnaAliasAlias.setStatus('current')
if mibBuilder.loadTexts: dnaAliasAlias.setDescription('Alias')
dnsDomainListTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 5), )
if mibBuilder.loadTexts: dnsDomainListTable.setStatus('current')
if mibBuilder.loadTexts: dnsDomainListTable.setDescription('This table define a list of default domain names to complete unqualified host names')
dnsDomainListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 5, 1), ).setIndexNames((0, "ES4612-MIB", "dnsDomainListName"))
if mibBuilder.loadTexts: dnsDomainListEntry.setStatus('current')
if mibBuilder.loadTexts: dnsDomainListEntry.setDescription('A conceptually row for dnsDomainListTable.')
dnsDomainListName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: dnsDomainListName.setStatus('current')
if mibBuilder.loadTexts: dnsDomainListName.setDescription('Domain Name')
dnsDomainListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsDomainListStatus.setStatus('current')
if mibBuilder.loadTexts: dnsDomainListStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
dnsNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 6), )
if mibBuilder.loadTexts: dnsNameServerTable.setStatus('current')
if mibBuilder.loadTexts: dnsNameServerTable.setDescription('To specify the address of one or more name servers to use for name and address resolution')
dnsNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 6, 1), ).setIndexNames((0, "ES4612-MIB", "dnsNameServerIp"))
if mibBuilder.loadTexts: dnsNameServerEntry.setStatus('current')
if mibBuilder.loadTexts: dnsNameServerEntry.setDescription('A conceptually row for dnsNameServerTable.')
dnsNameServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: dnsNameServerIp.setStatus('current')
if mibBuilder.loadTexts: dnsNameServerIp.setDescription('Ip address of name server')
dnsNameServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 6, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsNameServerStatus.setStatus('current')
if mibBuilder.loadTexts: dnsNameServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
dnsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7), )
if mibBuilder.loadTexts: dnsCacheTable.setStatus('current')
if mibBuilder.loadTexts: dnsCacheTable.setDescription('To display the RRs in DNS cache')
dnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1), ).setIndexNames((0, "ES4612-MIB", "dnsCacheIndex"))
if mibBuilder.loadTexts: dnsCacheEntry.setStatus('current')
if mibBuilder.loadTexts: dnsCacheEntry.setDescription('A conceptually row for dnsCacheTable.')
dnsCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: dnsCacheIndex.setStatus('current')
if mibBuilder.loadTexts: dnsCacheIndex.setDescription('The sequence number of the entry')
dnsCacheFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheFlag.setStatus('current')
if mibBuilder.loadTexts: dnsCacheFlag.setDescription('Always get 4, means this record is unreliable')
dnsCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("address", 1), ("cname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheType.setStatus('current')
if mibBuilder.loadTexts: dnsCacheType.setDescription('Cache Type: address(1); cname(2).')
dnsCacheIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheIp.setStatus('current')
if mibBuilder.loadTexts: dnsCacheIp.setDescription('Cache Ip')
dnsCacheTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 876000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheTtl.setStatus('current')
if mibBuilder.loadTexts: dnsCacheTtl.setDescription('Cache Ttl')
dnsCacheDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 26, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheDomain.setStatus('current')
if mibBuilder.loadTexts: dnsCacheDomain.setDescription('Cache domain')
arpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1))
ripMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2))
ospfMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3))
dvmrpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4))
routeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5))
arpCacheDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("noDelete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheDeleteAll.setStatus('current')
if mibBuilder.loadTexts: arpCacheDeleteAll.setDescription('To delete all dynamic entries in the ARP cache, write this variable to delete(1). Writing this variable to noDelete(2) has no effect on the device. When read, this variable always returns noDelete(2).')
arpCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: arpCacheTimeout.setDescription("The timeout is provided for entries in the ARP Cache. It's for dynamic mapping only. Static mapping by creating a entry that associates a logical address with a physical address is never age out.")
arpTrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3))
arpStatSendRequestPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatSendRequestPackets.setStatus('current')
if mibBuilder.loadTexts: arpStatSendRequestPackets.setDescription('The number of ARP Request packets sent by the ARP process.')
arpStatRcvRequestPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatRcvRequestPackets.setStatus('current')
if mibBuilder.loadTexts: arpStatRcvRequestPackets.setDescription('The number of ARP Request packets received by the ARP process.')
arpStatSendReplyPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatSendReplyPackets.setStatus('current')
if mibBuilder.loadTexts: arpStatSendReplyPackets.setDescription('The number of ARP Reply packets sent by the ARP process.')
arpStatRcvReplyPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatRcvReplyPackets.setStatus('current')
if mibBuilder.loadTexts: arpStatRcvReplyPackets.setDescription('The number of ARP Reply packets received by the ARP process.')
arpProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 4), )
if mibBuilder.loadTexts: arpProxyArpTable.setStatus('current')
if mibBuilder.loadTexts: arpProxyArpTable.setDescription('A list of Proxy ARP status. This table has entries for all static VLANs.')
arpProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 4, 1), ).setIndexNames((0, "ES4612-MIB", "arpProxyArpIfIndex"))
if mibBuilder.loadTexts: arpProxyArpEntry.setStatus('current')
if mibBuilder.loadTexts: arpProxyArpEntry.setDescription('An entry in the table, containing information about Proxy ARP configuration.')
arpProxyArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: arpProxyArpIfIndex.setStatus('current')
if mibBuilder.loadTexts: arpProxyArpIfIndex.setDescription('This is defined as a VLAN interface. A routing interface is a VLAN binds a IP subnet.')
arpProxyArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 1, 4, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpProxyArpStatus.setStatus('current')
if mibBuilder.loadTexts: arpProxyArpStatus.setDescription('Enable or Disable Proxy ARP process on an interface')
ripTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 1))
ripUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripUpdateTime.setStatus('current')
if mibBuilder.loadTexts: ripUpdateTime.setDescription('The update time in seconds controls the advertising of regular update messages. The real working model, while using this timer, the time should be offset by a small random time (+/- 0 to 5 seconds each time it is set.')
ripTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(90, 360)).clone(180)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: ripTimeoutTime.setDescription('The timeout timer in seconds governs the validity of a route. It is initialized when a route is established, and any time an update message is received for the route. If the setting time elapses from the last time the timrout was initialized, the route is considered to have expired, and the hop count of the route is set to infinite. It should be at least three times the value of update timer.')
ripGarbageCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 240)).clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripGarbageCollectionTime.setStatus('current')
if mibBuilder.loadTexts: ripGarbageCollectionTime.setDescription('When the information about a route becomes invalid, the system should not immediately purge that route from its table. Instead, it continues to advertise the route with a metric of infinite. At the same time, the garbage-collection timer is set for that route. When the count reaches zero, the route is purged from the the table. This timer allows neighbors to become aware of the invalidity of a route prior to purging.')
ripRoutingProcessStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripRoutingProcessStatus.setStatus('current')
if mibBuilder.loadTexts: ripRoutingProcessStatus.setDescription('Enable or Disable RIP routing process on a system.')
ripRouterVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byInterface", 1), ("rip1", 2), ("rip2", 3))).clone('rip2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripRouterVersion.setStatus('current')
if mibBuilder.loadTexts: ripRouterVersion.setDescription('To specify a RIP version used globally by the rourter.')
ripInstabilityPreventingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 4), )
if mibBuilder.loadTexts: ripInstabilityPreventingTable.setStatus('current')
if mibBuilder.loadTexts: ripInstabilityPreventingTable.setDescription('A list of RIP instability preventing status')
ripInstabilityPreventingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 4, 1), ).setIndexNames((0, "ES4612-MIB", "ripVlanIndex"))
if mibBuilder.loadTexts: ripInstabilityPreventingEntry.setStatus('current')
if mibBuilder.loadTexts: ripInstabilityPreventingEntry.setDescription("An entry in the table, containing information about RIP instability preventing configuration. The ifIndex index is a VLAN's ifIndex")
ripVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: ripVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ripVlanIndex.setDescription('This is defined as a VLAN interface. A routing interface is a VLAN binds a IP subnet.')
ripSplitHorizonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("splitHorizon", 1), ("poisonReverse", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSplitHorizonStatus.setStatus('current')
if mibBuilder.loadTexts: ripSplitHorizonStatus.setDescription('Enable or Disable RIP Poison Reverse on an interface')
ripStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: ripStatisticsReset.setDescription("Write it to reset(1), the following objects in RFC 1724 should be reset: 1. Global Counters: 'rip2GlobalRouteChanges', 'rip2GlobalQueries'. 2. Interface Status Table, for each 'rip2IfStatAddress': 'rip2IfStatRcvBadPackets', 'rip2IfStatRcvBadRoutes', 'rip2IfStatSendUpdates' 3. Peer Table, for each 'rip2PeerAddress' and 'rip2PeerDomain', 'rip2PeerRcvBadPackets', 'rip2PeerRcvBadRoutes' When read it, this value always is noReset(2).")
ripNetworkAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 6), )
if mibBuilder.loadTexts: ripNetworkAddrTable.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrTable.setDescription('')
ripNetworkAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 6, 1), ).setIndexNames((0, "ES4612-MIB", "ripNetworkAddrAddress"))
if mibBuilder.loadTexts: ripNetworkAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrEntry.setDescription('')
ripNetworkAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: ripNetworkAddrAddress.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrAddress.setDescription('The RIP Network address.')
ripNetworkAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 2, 6, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNetworkAddrStatus.setStatus('current')
if mibBuilder.loadTexts: ripNetworkAddrStatus.setDescription('Set this variable to create or destroy a RIP network address.')
ospfSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1))
ospfRouterIdType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRouterIdType.setStatus('current')
if mibBuilder.loadTexts: ospfRouterIdType.setDescription('Set router ID automatically or manually.')
ospfRfc1583CompatibleState = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfRfc1583CompatibleState.setStatus('current')
if mibBuilder.loadTexts: ospfRfc1583CompatibleState.setDescription('Enable or disable rfc1583 compatibility.')
ospfAutoCost = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 3), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAutoCost.setStatus('current')
if mibBuilder.loadTexts: ospfAutoCost.setDescription('Set the reference bandwith of auto cost, the unit is Mbps.')
ospfOriginateDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 4), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfOriginateDefaultRoute.setStatus('current')
if mibBuilder.loadTexts: ospfOriginateDefaultRoute.setDescription('Enable or disable ASBR to generate a default external route into an OSPF domain if the default route already exists.')
ospfAdvertiseDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("notAlways", 2))).clone('notAlways')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAdvertiseDefaultRoute.setStatus('current')
if mibBuilder.loadTexts: ospfAdvertiseDefaultRoute.setDescription('If enabled, always advertises the default route regardless of whether the default route exists.')
ospfExternalMetricType = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfExternalMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfExternalMetricType.setDescription('External link type associated with the default route advertised into the OSPF routing domain.')
ospfDefaultExternalMetric = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 7), OspfBigMetric().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfDefaultExternalMetric.setStatus('current')
if mibBuilder.loadTexts: ospfDefaultExternalMetric.setDescription('Metric used for generating the default route.')
ospfSpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSpfHoldTime.setStatus('current')
if mibBuilder.loadTexts: ospfSpfHoldTime.setDescription('Sets the hold time between two consecutive SPF calculations.')
ospfSpfDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSpfDelayTime.setStatus('current')
if mibBuilder.loadTexts: ospfSpfDelayTime.setDescription('Sets the delay time to calculate SPF Delay time, in seconds, between when OSPF receives a topology change and when it starts an SPF calculation.')
ospfAreaNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNumber.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNumber.setDescription('Records the OSPF area numbers.')
ospfNssaTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2), )
if mibBuilder.loadTexts: ospfNssaTable.setStatus('current')
if mibBuilder.loadTexts: ospfNssaTable.setDescription('A conceptually table for ospfNssaEntry.')
ospfNssaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1), ).setIndexNames((0, "ES4612-MIB", "ospfNssaAreaId"))
if mibBuilder.loadTexts: ospfNssaEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNssaEntry.setDescription('A conceptually row for ospfNssaTable.')
ospfNssaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1, 1), OspfAreaID())
if mibBuilder.loadTexts: ospfNssaAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfNssaAreaId.setDescription('The 32-bit identifier for the NSSA. On creation, this can be derived from the instance.')
ospfNssaRedistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaRedistributeStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNssaRedistributeStatus.setDescription('Enabled or disabled to import routes only into the normal areas, but not into the NSSA area.')
ospfNssaOriginateDefaultInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaOriginateDefaultInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNssaOriginateDefaultInfoStatus.setDescription('Enable or disable to generate a Type 7 default into the NSSA area.')
ospfNssaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNssaStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNssaStatus.setDescription("The status of this conceptual row entry. This object is used to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
ospfRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3), )
if mibBuilder.loadTexts: ospfRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeTable.setDescription('The conceptual table of all of ospfRedistributeEntry.')
ospfRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1), ).setIndexNames((0, "ES4612-MIB", "ospfRedistributeProtocol"))
if mibBuilder.loadTexts: ospfRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeEntry.setDescription('The conceptual row for ospfRedistributeTable.')
ospfRedistributeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rip", 1), ("static", 2), ("connected", 3))))
if mibBuilder.loadTexts: ospfRedistributeProtocol.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeProtocol.setDescription('Protocol ID. Static is not supported now.')
ospfRedistributeMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeMetricType.setDescription('Metric type.')
ospfRedistributeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1, 3), OspfBigMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetric.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeMetric.setDescription('Metric value.')
ospfRedistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeStatus.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
ospfSummaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4), )
if mibBuilder.loadTexts: ospfSummaryAddressTable.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryAddressTable.setDescription('The conceptual table of all of ospfSummaryAddressEntry.')
ospfSummaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4, 1), ).setIndexNames((0, "ES4612-MIB", "ospfSummaryAddress"), (0, "ES4612-MIB", "ospfSummaryMask"))
if mibBuilder.loadTexts: ospfSummaryAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryAddressEntry.setDescription('The conceptual row for ospfSummaryAddressTable.')
ospfSummaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: ospfSummaryAddress.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryAddress.setDescription('Summary address.')
ospfSummaryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: ospfSummaryMask.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryMask.setDescription('Summary mask.')
ospfSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfSummaryStatus.setStatus('current')
if mibBuilder.loadTexts: ospfSummaryStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
ospfNetworkAreaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5), )
if mibBuilder.loadTexts: ospfNetworkAreaAddressTable.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaAddressTable.setDescription('The conceptual table of all of ospfNetworkAreaAddressEntry.')
ospfNetworkAreaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1), ).setIndexNames((0, "ES4612-MIB", "ospfNetworkAareaAddress"), (0, "ES4612-MIB", "ospfNetworkAreaMask"))
if mibBuilder.loadTexts: ospfNetworkAreaAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaAddressEntry.setDescription('The conceptual row for ospfNetworkAreaAddressTable.')
ospfNetworkAareaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ospfNetworkAareaAddress.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAareaAddress.setDescription('NetworkArea address.')
ospfNetworkAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: ospfNetworkAreaMask.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaMask.setDescription('NetworkArea mask.')
ospfNetworkAreaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNetworkAreaAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaAreaId.setDescription('NetworkArea area ID.')
ospfNetworkAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 3, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNetworkAreaStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNetworkAreaStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
dvmrpScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 1))
dvmrpVersionString = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpVersionString.setStatus('current')
if mibBuilder.loadTexts: dvmrpVersionString.setDescription("The router's DVMRP version information. Similar to sysDescr in MIB-II, this is a free-form field which can be used to display vendor-specific information.")
dvmrpNumRoutes = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNumRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpNumRoutes.setDescription('The number of entries in the routing table. This can be used to monitor the routing table size.')
dvmrpReachableRoutes = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpReachableRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpReachableRoutes.setDescription('The number of entries in the routing table with non infinite metrics. This can be used to detect network partitions by observing the ratio of reachable routes to total routes.')
dvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2), )
if mibBuilder.loadTexts: dvmrpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceTable.setDescription("The (conceptual) table listing the router's multicast- capable interfaces.")
dvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpInterfaceIndex"))
if mibBuilder.loadTexts: dvmrpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceEntry.setDescription('An entry (conceptual row) in the dvmrpInterfaceTable. This row augments ipMRouteInterfaceEntry in the IP Multicast MIB, where the threshold object resides.')
dvmrpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dvmrpInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceIndex.setDescription('The ifIndex value of the interface for which DVMRP is enabled.')
dvmrpInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceLocalAddress.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceLocalAddress.setDescription('The IP address this system will use as a source address on this interface. On unnumbered interfaces, it must be the same value as dvmrpInterfaceLocalAddress for some interface on the system.')
dvmrpInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceMetric.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceMetric.setDescription('The distance metric for this interface which is used to calculate distance vectors.')
dvmrpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceStatus.setDescription('The status of this entry. Creating the entry enables DVMRP on the virtual interface; destroying the entry or setting it to notInService disables DVMRP on the virtual interface.')
dvmrpInterfaceRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadPkts.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadPkts.setDescription('The number of DVMRP messages received on the interface by the DVMRP process which were subsequently discarded as invalid (e.g. invalid packet format, or a route report from an unknown neighbor).')
dvmrpInterfaceRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceRcvBadRoutes.setDescription('The number of routes, in valid DVMRP packets, which were ignored because the entry was invalid.')
dvmrpInterfaceSentRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceSentRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceSentRoutes.setDescription('The number of routes, in DVMRP Report packets, which have been sent on this interface. Together with dvmrpNeighborRcvRoutes at a peer, this object is useful for detecting routes being lost.')
dvmrpInterfaceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceKey.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceKey.setDescription('The (shared) key for authenticating neighbors on this interface. This object is intended solely for the purpose of setting the interface key, and MUST be accessible only via requests using both authentication and privacy. The agent MAY report an empty string in response to get, get- next, get-bulk requests.')
dvmrpInterfaceKeyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dvmrpInterfaceKeyVersion.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceKeyVersion.setDescription('The highest version number of all known interface keys for this interface used for authenticating neighbors.')
dvmrpInterfaceGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpInterfaceGenerationId.setStatus('current')
if mibBuilder.loadTexts: dvmrpInterfaceGenerationId.setDescription('The generation identifier for the interface. This is used by neighboring routers to detect whether the DVMRP routing table should be resent.')
dvmrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3), )
if mibBuilder.loadTexts: dvmrpNeighborTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborTable.setDescription("The (conceptual) table listing the router's DVMRP neighbors, as discovered by receiving DVMRP messages.")
dvmrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpNeighborIfIndex"), (0, "ES4612-MIB", "dvmrpNeighborAddress"))
if mibBuilder.loadTexts: dvmrpNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborEntry.setDescription('An entry (conceptual row) in the dvmrpNeighborTable.')
dvmrpNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dvmrpNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborIfIndex.setDescription('The value of ifIndex for the virtual interface used to reach this DVMRP neighbor.')
dvmrpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: dvmrpNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborAddress.setDescription('The IP address of the DVMRP neighbor for which this entry contains information.')
dvmrpNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborUpTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborUpTime.setDescription('The time since this DVMRP neighbor (last) became a neighbor of the local router.')
dvmrpNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborExpiryTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborExpiryTime.setDescription('The minimum time remaining before this DVMRP neighbor will be aged out.')
dvmrpNeighborGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborGenerationId.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborGenerationId.setDescription("The neighboring router's generation identifier.")
dvmrpNeighborMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborMajorVersion.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborMajorVersion.setDescription("The neighboring router's major DVMRP version number.")
dvmrpNeighborMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborMinorVersion.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborMinorVersion.setDescription("The neighboring router's minor DVMRP version number.")
dvmrpNeighborCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 8), Bits().clone(namedValues=NamedValues(("leaf", 0), ("prune", 1), ("generationID", 2), ("mtrace", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborCapabilities.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborCapabilities.setDescription("This object describes the neighboring router's capabilities. The leaf bit indicates that the neighbor has only one interface with neighbors. The prune bit indicates that the neighbor supports pruning. The generationID bit indicates that the neighbor sends its generationID in Probe messages. The mtrace bit indicates that the neighbor can handle mtrace requests.")
dvmrpNeighborRcvRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborRcvRoutes.setDescription('The total number of routes received in valid DVMRP packets received from this neighbor. This can be used to diagnose problems such as unicast route injection, as well as giving an indication of the level of DVMRP route exchange activity.')
dvmrpNeighborRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvBadPkts.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborRcvBadPkts.setDescription('The number of packet received from this neighbor which were discarded as invalid.')
dvmrpNeighborRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborRcvBadRoutes.setDescription('The number of routes, in valid DVMRP packets received from this neighbor, which were ignored because the entry was invalid.')
dvmrpNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneway", 1), ("active", 2), ("ignoring", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpNeighborState.setStatus('current')
if mibBuilder.loadTexts: dvmrpNeighborState.setDescription('State of the neighbor adjacency.')
dvmrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4), )
if mibBuilder.loadTexts: dvmrpRouteTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteTable.setDescription('The table of routes learned through DVMRP route exchange.')
dvmrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpRouteSource"), (0, "ES4612-MIB", "dvmrpRouteSourceMask"))
if mibBuilder.loadTexts: dvmrpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteEntry.setDescription('An entry (conceptual row) containing the multicast routing information used by DVMRP in place of the unicast routing information.')
dvmrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: dvmrpRouteSource.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteSource.setDescription('The network address which when combined with the corresponding value of dvmrpRouteSourceMask identifies the sources for which this entry contains multicast routing information.')
dvmrpRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: dvmrpRouteSourceMask.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteSourceMask.setDescription('The network mask which when combined with the corresponding value of dvmrpRouteSource identifies the sources for which this entry contains multicast routing information.')
dvmrpRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteUpstreamNeighbor.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteUpstreamNeighbor.setDescription('The address of the upstream neighbor (e.g., RPF neighbor) from which IP datagrams from these sources are received.')
dvmrpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteIfIndex.setDescription('The value of ifIndex for the interface on which IP datagrams sent by these sources are received. A value of 0 typically means the route is an aggregate for which no next- hop interface exists.')
dvmrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteMetric.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteMetric.setDescription('The distance in hops to the source subnet.')
dvmrpRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteExpiryTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out.')
dvmrpRouteUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteUpTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteUpTime.setDescription('The time since the route represented by this entry was learned by the router.')
dvmrpRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5), )
if mibBuilder.loadTexts: dvmrpRouteNextHopTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopTable.setDescription('The (conceptual) table containing information on the next hops on outgoing interfaces for routing IP multicast datagrams.')
dvmrpRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpRouteNextHopSource"), (0, "ES4612-MIB", "dvmrpRouteNextHopSourceMask"), (0, "ES4612-MIB", "dvmrpRouteNextHopIfIndex"))
if mibBuilder.loadTexts: dvmrpRouteNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopEntry.setDescription('An entry (conceptual row) in the list of next hops on outgoing interfaces to which IP multicast datagrams from particular sources are routed.')
dvmrpRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: dvmrpRouteNextHopSource.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopSource.setDescription('The network address which when combined with the corresponding value of dvmrpRouteNextHopSourceMask identifies the sources for which this entry specifies a next hop on an outgoing interface.')
dvmrpRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: dvmrpRouteNextHopSourceMask.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopSourceMask.setDescription('The network mask which when combined with the corresponding value of dvmrpRouteNextHopSource identifies the sources for which this entry specifies a next hop on an outgoing interface.')
dvmrpRouteNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: dvmrpRouteNextHopIfIndex.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopIfIndex.setDescription('The ifIndex value of the interface for the outgoing interface for this next hop.')
dvmrpRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leaf", 1), ("branch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpRouteNextHopType.setStatus('current')
if mibBuilder.loadTexts: dvmrpRouteNextHopType.setDescription('Type is leaf if no downstream dependent neighbors exist on the outgoing virtual interface. Otherwise, type is branch.')
dvmrpPruneTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6), )
if mibBuilder.loadTexts: dvmrpPruneTable.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneTable.setDescription("The (conceptual) table listing the router's upstream prune state.")
dvmrpPruneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1), ).setIndexNames((0, "ES4612-MIB", "dvmrpPruneGroup"), (0, "ES4612-MIB", "dvmrpPruneSource"), (0, "ES4612-MIB", "dvmrpPruneSourceMask"))
if mibBuilder.loadTexts: dvmrpPruneEntry.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneEntry.setDescription('An entry (conceptual row) in the dvmrpPruneTable.')
dvmrpPruneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: dvmrpPruneGroup.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneGroup.setDescription('The group address which has been pruned.')
dvmrpPruneSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: dvmrpPruneSource.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneSource.setDescription('The address of the source or source network which has been pruned.')
dvmrpPruneSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: dvmrpPruneSourceMask.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneSourceMask.setDescription("The address of the source or source network which has been pruned. The mask must either be all 1's, or else dvmrpPruneSource and dvmrpPruneSourceMask must match dvmrpRouteSource and dvmrpRouteSourceMask for some entry in the dvmrpRouteTable.")
dvmrpPruneExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 4, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dvmrpPruneExpiryTime.setStatus('current')
if mibBuilder.loadTexts: dvmrpPruneExpiryTime.setDescription("The amount of time remaining before this prune should expire at the upstream neighbor. This value should be the minimum of the default prune lifetime and the remaining prune lifetimes of the local router's downstream neighbors, if any.")
ipCidrRouteExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2), )
if mibBuilder.loadTexts: ipCidrRouteExtTable.setReference('Rfc2096 Section 9, IP CIDR Route Table.')
if mibBuilder.loadTexts: ipCidrRouteExtTable.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteExtTable.setDescription("This entity's IP Extension Routing table.")
ipCidrRouteExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1), ).setIndexNames((0, "ES4612-MIB", "ipCidrRouteExtDest"), (0, "ES4612-MIB", "ipCidrRouteExtMask"), (0, "ES4612-MIB", "ipCidrRouteExtTos"), (0, "ES4612-MIB", "ipCidrRouteExtNextHop"))
if mibBuilder.loadTexts: ipCidrRouteExtEntry.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteExtEntry.setDescription('A particular route to a particular destina- tion, under a particular policy.')
ipCidrRouteExtDest = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipCidrRouteExtDest.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteExtDest.setDescription('The destination IP address of this route. This object may not take a Multicast (Class D) address value. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the ipCidrRouteMask object is not equal to x.')
ipCidrRouteExtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipCidrRouteExtMask.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteExtMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the ipCidrRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the ipCidrRouteMask by reference to the IP Ad- dress Class. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the ipCidrRouteDest object is not equal to ipCidrRoute- Dest.')
ipCidrRouteExtTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: ipCidrRouteExtTos.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteExtTos.setDescription('The policy specifier is the IP TOS Field. The encoding of IP TOS is as specified by the following convention. Zero indicates the default path if no more specific policy applies. +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | PRECEDENCE | TYPE OF SERVICE | 0 | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ IP TOS IP TOS Field Policy Field Policy Contents Code Contents Code 0 0 0 0 ==> 0 0 0 0 1 ==> 2 0 0 1 0 ==> 4 0 0 1 1 ==> 6 0 1 0 0 ==> 8 0 1 0 1 ==> 10 0 1 1 0 ==> 12 0 1 1 1 ==> 14 1 0 0 0 ==> 16 1 0 0 1 ==> 18 1 0 1 0 ==> 20 1 0 1 1 ==> 22 1 1 0 0 ==> 24 1 1 0 1 ==> 26 1 1 1 0 ==> 28 1 1 1 1 ==> 30')
ipCidrRouteExtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 4), IpAddress())
if mibBuilder.loadTexts: ipCidrRouteExtNextHop.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteExtNextHop.setDescription('On remote routes, the address of the next sys- tem en route; Otherwise, 0.0.0.0.')
ipCidrRouteExtOspfSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 18, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("ospfInter", 2), ("ospfIntra", 3), ("ospfNssa1", 4), ("ospfNssa2", 5), ("ospfType1", 6), ("ospfType2", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCidrRouteExtOspfSubType.setReference(' Rfc2096 Section 9, IP CIDR Route Table.')
if mibBuilder.loadTexts: ipCidrRouteExtOspfSubType.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteExtOspfSubType.setDescription('The OSPF SubType, when the ipCidrRouteProto in IP-FORWARD MIB is ospf(13), this object has value (2)-(7), otherwises, this object will always show none(1).')
cHsrpGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 1))
cHsrpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2))
cHsrpConfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cHsrpConfigTimeout.setStatus('current')
if mibBuilder.loadTexts: cHsrpConfigTimeout.setDescription('The amount of time in minutes a row in cHsrpGrpTable can remain in a state other than active before being timed out.')
cHsrpGrpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1), )
if mibBuilder.loadTexts: cHsrpGrpTable.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpTable.setDescription('A table containing information on each HSRP group for each interface.')
cHsrpGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ES4612-MIB", "cHsrpGrpNumber"))
if mibBuilder.loadTexts: cHsrpGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpEntry.setDescription("Information about an HSRP group. Management applications use cHsrpGrpRowStatus to control entry modification, creation and deletion. Setting cHsrpGrpRowStatus to 'active' causes the router to communicate using HSRP. The value of cHsrpGrpRowStatus may be set to 'destroy' at any time. Entries may not be created via SNMP without explicitly setting cHsrpGrpRowStatus to either 'createAndGo' or 'createAndWait'. Entries can be created and modified via the management protocol or by the device's local management interface. A management application wishing to create an entry should choose the ifIndex of the interface which is to be added as part of an HSRP group. Also, a cHsrpGrpNumber should be chosen. A group number is unique only amongst the groups on a particular interface. The value of the group number appears in packets which are transmitted and received on a LAN segment to which the router is connected. The application must select the group number as explained in the description for cHsrpGrpNumber. If the row is not active, and a local management interface command modifies that row, the row may transition to active state. A row which is not in active state will timeout after a configurable period (five minutes by default). This timeout period can be changed by setting cHsrpConfigTimeout.")
cHsrpGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cHsrpGrpNumber.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpNumber.setDescription("This object along with the ifIndex of a particular interface uniquely identifies an HSRP group. Group numbers 0,1 and 2 are the only valid group numbers for TokenRing interfaces. For other media types, numbers range from 0 to 255. Each interface has its own set of group numbers. There's no relationship between the groups configured on different interfaces. Using a group number on one interface doesn't preclude using the same group number on a different interface. For example, there can be a group 1 on an Ethernet and a group 1 on Token Ring. More details can be found from RFC 2281.")
cHsrpGrpAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone('cisco')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpAuth.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpAuth.setDescription("This is an unencrypted authentication string which is carried in all HSRP messages. An authentication string mismatch prevents a router interface from learning the designated IP address or HSRP timer values from other HSRP-enabled routers with the same group number. The function of this object is not to supply any sort of security-like authentication but rather to confirm that what's happening is what's intended. In other words, this is meant for sanity checking only.")
cHsrpGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpPriority.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpPriority.setDescription('The cHsrpGrpPriority helps to select the active and the standby routers. The router with the highest priority is selected as the active router. In the priority range of 0 to 255, 0 is the lowest priority and 255 is the highest priority. If two (or more) routers in a group have the same priority, the one with the highest ip address of the interface is the active router. When the active router fails to send a Hello message within a configurable period of time, the standby router with the highest priority becomes the active router. A router with highest priority will only attempt to overthrow a lower priority active router if it is configured to preempt. But, if there is more than one router which is not active, the highest priority non-active router becomes the standby router.')
cHsrpGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpPreempt.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpPreempt.setDescription('This object, if TRUE, indicates that the current router should attempt to overthrow a lower priority active router and attempt to become the active router. If this object is FALSE, the router will become the active router only if there is no such router (or if an active router fails).')
cHsrpGrpPreemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpPreemptDelay.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpPreemptDelay.setDescription("This delay is the time difference between a router power up and the time it can actually start preempting the currently active router. When a router first comes up, it doesn't have a complete routing table. If it's configured to preempt, then it will become the Active router, but it will not be able to provide adequate routing services. The solution to this is to allow for a configurable delay before the router actually preempts the currently active router.")
cHsrpGrpUseConfiguredTimers = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpUseConfiguredTimers.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpUseConfiguredTimers.setDescription("HSRP routers learn a group's Hellotime or Holdtime from hello messages. The Hellotime is used to determine the frequency of generating hello messages when this router becomes the active or standby router. The Holdtime is the interval between the receipt of a Hello message and the presumption that the sending router has failed. If this object is TRUE, the cHsrpGrpConfiguredHelloTime and cHsrpGrpConfiguredHoldTime will be used. If it is FALSE, the Hellotime and Holdtime values are learned.")
cHsrpGrpConfiguredHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 7), Unsigned32().clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpConfiguredHelloTime.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpConfiguredHelloTime.setDescription('If cHsrpGrpUseConfiguredTimers is true, cHsrpGrpConfiguredHelloTime is used when this router is an active router. Otherwise, the Hellotime learned from the current active router is used. All routers on a particular LAN segment must use the same Hellotime.')
cHsrpGrpConfiguredHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 8), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpConfiguredHoldTime.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpConfiguredHoldTime.setDescription('If cHsrpGrpUseConfiguredTimers is true, cHsrpGrpConfiguredHoldTime is used when this router is an active router. Otherwise, the Holdtime learned from the current active router is used. All routers on a particular LAN segment should use the same Holdtime. Also, the Holdtime should be at least three times the value of the Hellotime and must be greater than the Hellotime.')
cHsrpGrpLearnedHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 9), Unsigned32().clone(3000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpLearnedHelloTime.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpLearnedHelloTime.setDescription('If the Hellotime is not configured on a router, it can be learned from the Hello messages from active router, provided the Hello message is authenticated. If the Hellotime is not learned from a Hello message from the active router and it is not manually configured, a default value of 3 seconds is recommended.')
cHsrpGrpLearnedHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 10), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpLearnedHoldTime.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpLearnedHoldTime.setDescription('If the Holdtime is not configured on a router, it can be learned from the Hello message from the active router. Holdtime should be learned only if the Hello message is authenticated. If the Holdtime is not learned and it is not manually configured, a default value of 10 seconds is recommended.')
cHsrpGrpVirtualIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpVirtualIpAddr.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpVirtualIpAddr.setDescription('This is the primary virtual IP address used by this group. If this address is configured (i.e a non zero ip address), this value is used. Otherwise, the agent will attempt to discover the virtual address through a discovery process (which scans the hello messages).')
cHsrpGrpUseConfigVirtualIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpUseConfigVirtualIpAddr.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpUseConfigVirtualIpAddr.setDescription('If this object is TRUE, cHsrpGrpVirtualIpAddr was a configured one. Otherwise, it indicates that cHsrpGrpVirtualIpAddr was a learned one.')
cHsrpGrpActiveRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpActiveRouter.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpActiveRouter.setDescription('Ip Address of the currently active router for this group.')
cHsrpGrpStandbyRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpStandbyRouter.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpStandbyRouter.setDescription('Ip Address of the currently standby router for this group.')
cHsrpGrpStandbyState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 15), HsrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpStandbyState.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpStandbyState.setDescription('The current HSRP state of this group on this interface.')
cHsrpGrpVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHsrpGrpVirtualMacAddr.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpVirtualMacAddr.setDescription('Mac Addresses used are as specified in RFC 2281. For ethernet and fddi interfaces, a MAC address will be in the range 00:00:0c:07:ac:00 through 00:00:0c:07:ac:ff. The last octet is the hexadecimal equivalent of cHsrpGrpNumber (0-255). Some Ethernet and FDDI interfaces allow a unicast MAC address for each HSRP group. Certain Ethernet chipsets(LANCE Ethernet, VGANYLAN and QUICC Ethernet) only support a single Unicast Mac Address. In this case, only one HSRP group is allowed. For TokenRing interfaces, the following three MAC addresses are permitted (functional addresses): C0:00:00:01:00:00 C0:00:00:02:00:00 C0:00:00:04:00:00.')
cHsrpGrpEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 2, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpGrpEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: cHsrpGrpEntryRowStatus.setDescription('The control that allows modification, creation, and deletion of entries. For detailed rules see the DESCRIPTION for cHsrpGrpEntry.')
cHsrpExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3))
cHsrpExtIfTrackedTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1), )
if mibBuilder.loadTexts: cHsrpExtIfTrackedTable.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedTable.setDescription('A table containing information about tracked interfaces per HSRP group.')
cHsrpExtIfTrackedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ES4612-MIB", "cHsrpGrpNumber"), (0, "ES4612-MIB", "cHsrpExtIfTracked"))
if mibBuilder.loadTexts: cHsrpExtIfTrackedEntry.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedEntry.setDescription("The cHsrpExtIfTrackedEntry allows an HSRP group interface to track one or more interfaces. Weight(priority) is given to each and every interface tracked. When a tracked interface is unavailable, the HSRP priority of the router is decreased. i.e cHsrpGrpPriority value assigned to an HSRP group will reduce by the value assigned to cHsrpExtIfTrackedPriority. This reduces the likelihood of a router with a failed key interface becoming the active router. Setting cHsrpExtIfTrackedRowStatus to active starts the tracking of cHsrpExtIfTracked by the HSRP group. The value of cHsrpExtIfTrackedRowStatus may be set to destroy at any time. Entries may not be created via SNMP without explicitly setting cHsrpExtIfTrackedRowStatus to either 'createAndGo' or 'createAndWait'. Entries can be created and modified via the management protocol or by the device's local management interface. If the row is not active, and a local management interface command modifies that row, the row may transition to active state. A row entry in the cHsrpExtIfTrackedTable can not be created unless the corresponding row in the cHsrpGrpTable has been created. If that corresponding row in cHsrpGrpTable is deleted, the interfaces it tracks also get deleted. A row which is not in active state will timeout after a configurable period (five minutes by default). This timeout period can be changed by setting cHsrpConfigTimeout.")
cHsrpExtIfTracked = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cHsrpExtIfTracked.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTracked.setDescription('Index into the cHsrpExtIfTrackedTable for the corresponding { ifIndex, cHsrpGrpNumber } pair i.e for an HSRP group. This is the ifIndex of the tracked interface.')
cHsrpExtIfTrackedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfTrackedPriority.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedPriority.setDescription("Priority of the tracked interface for the corresponding { ifIndex, cHsrpGrpNumber } pair. In the range of 0 to 255, 0 is the lowest priority and 255 is the highest. When a tracked interface is unavailable, the cHsrpGrpPriority of the router is decreased by the value of this object instance (If the cHsrpGrpPriority is less than the cHsrpExtIfTrackedPriority, then the HSRP priority becomes 0). This allows a standby router to be configured with a priority such that if the currently active router's priority is lowered because the tracked interface goes down, the standby router can takeover.")
cHsrpExtIfTrackedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtIfTrackedRowStatus.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtIfTrackedRowStatus.setDescription('The control that allows modification, creation, and deletion of entries. For detailed rules see the DESCRIPTION for cHsrpExtIfTrackedEntry.')
cHsrpExtSecAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 2), )
if mibBuilder.loadTexts: cHsrpExtSecAddrTable.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrTable.setDescription('A table containing information about secondary HSRP IP Addresses per interface and group.')
cHsrpExtSecAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ES4612-MIB", "cHsrpGrpNumber"), (0, "ES4612-MIB", "cHsrpExtSecAddrAddress"))
if mibBuilder.loadTexts: cHsrpExtSecAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrEntry.setDescription("The CHsrpExtSecAddrEntry allows creation of secondary IP Addresses for each cHsrpGrpEntry row. Secondary addresses can be added by setting cHsrpExtSecAddrRowStatus to be active. The value of cHsrpExtSecAddrRowStatus may be set to destroy at any time. Entries may not be created via SNMP without explicitly setting cHsrpExtSecAddrRowStatus to either 'createAndGo' or 'createAndWait'. Entries can be created and modified via the management protocol or by the device's local management interface. If the row is not active, and a local management interface command modifies that row, the row may transition to active state. A row which is not in active state will timeout after a configurable period (five minutes by default). This timeout period can be changed by setting cHsrpConfigTimeout. Before creation of a cHsrpExtSecAddrEntry row, either cHsrpGrpConfiguredVirtualIpAddr or cHsrpGrpLearnedVirtualIpAddr must have a valid IP Address. This is because a secondary ip address cannot be created unless the primary ip address has already been set. To create a new cHsrpExtSecAddrEntry row, a management station should choose the ifIndex of the interface which is to be added as part of an HSRP group. Also, an HSRP group number and a cHsrpExtSecAddrAddress should be chosen. Deleting a {ifIndex, cHsrpGrpNumber} row in the cHsrpGrpTable will delete all corresponding rows in the cHsrpExtSecAddrTable. Deleting a primary address value in the cHsrpGrpEntry row will delete all secondary addresses for the same {ifIndex, cHsrpGrpNumber} pair.")
cHsrpExtSecAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cHsrpExtSecAddrAddress.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrAddress.setDescription('A secondary IpAddress for the {ifIndex, cHsrpGrpNumber} pair. As explained in the DESCRIPTION for cHsrpExtSecAddrEntry, a primary address must exist before a secondary address for the same {ifIndex, cHsrpGrpNumber} pair can be created.')
cHsrpExtSecAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 29, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHsrpExtSecAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cHsrpExtSecAddrRowStatus.setDescription('The control that allows modification, creation, and deletion of entries. For detailed rules see the DESCRIPTION for cHsrpExtSecAddrEntry.')
mvrStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrStatus.setStatus('current')
if mibBuilder.loadTexts: mvrStatus.setDescription('Parameter to enable or disable MVR(Multicast VLAN Registration) on the device. NOTE: IGMP Snooping must be enabled first before enabling MVR and MVR will be disabled when IGMP Snooping is disabled.')
mvrVlanId = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrVlanId.setStatus('current')
if mibBuilder.loadTexts: mvrVlanId.setDescription('To set VLAN for MVR.The VLAN identified by a particular value of this index is the same VLAN as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB.')
mvrMaxGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrMaxGroups.setStatus('current')
if mibBuilder.loadTexts: mvrMaxGroups.setDescription('The maximum number of MVR groups.')
mvrCurrentGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrCurrentGroups.setStatus('current')
if mibBuilder.loadTexts: mvrCurrentGroups.setDescription('The current number of MVR groups.')
mvrGroupsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 5))
mvrGroupsCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlId.setStatus('current')
if mibBuilder.loadTexts: mvrGroupsCtlId.setDescription('The start of a contiguous range of MVR group addresses.')
mvrGroupsCtlCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlCount.setStatus('current')
if mibBuilder.loadTexts: mvrGroupsCtlCount.setDescription('The range count for configuring MVR group addresses.')
mvrGroupsCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlAction.setStatus('current')
if mibBuilder.loadTexts: mvrGroupsCtlAction.setDescription('Sets the configure action for a contiguous range of MVR group addresses. The start addresses is the current value of mvrGroupsCtlId and the range count is the current value of mvrGroupsCtlCount. Set this object to create(2) to create MVR group addresses. Set this object to destory(3) to delete MVR group addresses. When the action is complete, this object becomes noAction(1).')
mvrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6), )
if mibBuilder.loadTexts: mvrGroupTable.setStatus('current')
if mibBuilder.loadTexts: mvrGroupTable.setDescription('The table for configuring the MVR group.')
mvrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6, 1), ).setIndexNames((0, "ES4612-MIB", "mvrGroupId"))
if mibBuilder.loadTexts: mvrGroupEntry.setStatus('current')
if mibBuilder.loadTexts: mvrGroupEntry.setDescription('The entry for configuring the MVR group.')
mvrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupId.setStatus('current')
if mibBuilder.loadTexts: mvrGroupId.setDescription('The multicast address of the MVR group.')
mvrGroutActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrGroutActive.setStatus('current')
if mibBuilder.loadTexts: mvrGroutActive.setDescription('To indicate if the group has a member or not. If there are no members, the status is inactive(2); otherwise the status is active(1).')
mvrGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStatus.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
mvrGroupStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7), )
if mibBuilder.loadTexts: mvrGroupStaticTable.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticTable.setDescription('The table for configuring the static members of the MVR group.')
mvrGroupStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7, 1), ).setIndexNames((0, "ES4612-MIB", "mvrGroupStaticAddress"))
if mibBuilder.loadTexts: mvrGroupStaticEntry.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticEntry.setDescription('The entry for configuring the static members of the MVR group.')
mvrGroupStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupStaticAddress.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticAddress.setDescription('The multicast address of the MVR group.')
mvrGroupStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStaticPorts.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticPorts.setDescription('The set of ports configured by management in this entry. Ports entered in this list will be the static members of this MVR group.')
mvrGroupStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStaticStatus.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
mvrGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 8), )
if mibBuilder.loadTexts: mvrGroupCurrentTable.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrentTable.setDescription('The table for the current members of the MVR group.')
mvrGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 8, 1), ).setIndexNames((0, "ES4612-MIB", "mvrGroupCurrentAddress"))
if mibBuilder.loadTexts: mvrGroupCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrentEntry.setDescription('The entry for the current members of the MVR group.')
mvrGroupCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupCurrentAddress.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrentAddress.setDescription('The multicast address of the MVR group.')
mvrGroupCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrGroupCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrentPorts.setDescription('The complete set of ports currently associated with this MVR group.')
mvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9), )
if mibBuilder.loadTexts: mvrPortTable.setStatus('current')
if mibBuilder.loadTexts: mvrPortTable.setDescription('The table for configuring the MVR port.')
mvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1), ).setIndexNames((0, "ES4612-MIB", "mvrIfIndex"))
if mibBuilder.loadTexts: mvrPortEntry.setStatus('current')
if mibBuilder.loadTexts: mvrPortEntry.setDescription('The entry for configuring the MVR port.')
mvrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mvrIfIndex.setStatus('current')
if mibBuilder.loadTexts: mvrIfIndex.setDescription('The port interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
mvrPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("source", 1), ("receiver", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortType.setStatus('current')
if mibBuilder.loadTexts: mvrPortType.setDescription('For configuring the MVR port type. To disable the MVR port type, use the none(0).')
mvrPortImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: mvrPortImmediateLeave.setDescription('To enable immediate leave on MVR port.')
mvrPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortActive.setStatus('current')
if mibBuilder.loadTexts: mvrPortActive.setDescription('To indicate if the port is associated with the MVR group. If the port is the MVR receiver port or the MVR source port in MVR vlan, the status is active(1); otherwise the status is inactive(2).')
mvrRunningStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 1, 44, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrRunningStatus.setStatus('current')
if mibBuilder.loadTexts: mvrRunningStatus.setDescription('Describes the running status of MVR (Multicast VLAN Registration) to the switch. A value of true(1) indicates that all necessary conditions in the MVR environment are satisfied. A value of false(2) indicates that some necessary conditions in the MVR environment are not satisfied.')
es4612Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1))
es4612TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0))
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 1)).setObjects(("ES4612-MIB", "swIndivPowerUnitIndex"), ("ES4612-MIB", "swIndivPowerIndex"), ("ES4612-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setDescription('This trap is sent when the power status of an individual power changes.')
swFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 17)).setObjects(("ES4612-MIB", "switchUnitIndex"), ("ES4612-MIB", "switchFanIndex"))
if mibBuilder.loadTexts: swFanFailureTrap.setStatus('current')
if mibBuilder.loadTexts: swFanFailureTrap.setDescription('This trap is sent when the fan is failure.')
swFanRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 18)).setObjects(("ES4612-MIB", "switchUnitIndex"), ("ES4612-MIB", "switchFanIndex"))
if mibBuilder.loadTexts: swFanRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: swFanRecoverTrap.setDescription('This trap is sent when fan failure has recovered.')
swPortSecurityTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 36)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: swPortSecurityTrap.setStatus('current')
if mibBuilder.loadTexts: swPortSecurityTrap.setDescription('This trap is sent when the port is being intruded. This trap will only be sent when the portSecActionTrap is enabled.')
swSmtpConnFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 6, 10, 57, 2, 1, 0, 41)).setObjects(("ES4612-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: swSmtpConnFailureTrap.setStatus('current')
if mibBuilder.loadTexts: swSmtpConnFailureTrap.setDescription('This trap will be triggered if the SMTP system cannot open a connection to the mail server successfully.')
mibBuilder.exportSymbols("ES4612-MIB", xstInstanceCfgBridgeForwardDelay=xstInstanceCfgBridgeForwardDelay, portName=portName, ipFilterSnmpEndAddress=ipFilterSnmpEndAddress, prioIpPortCos=prioIpPortCos, vlanPortTable=vlanPortTable, trapDestCommunity=trapDestCommunity, rlPortOutputStatus=rlPortOutputStatus, prioIpPrecTable=prioIpPrecTable, staPortOperPointToPoint=staPortOperPointToPoint, dhcpServerLeaseBindingEntry=dhcpServerLeaseBindingEntry, aclEgressIpMaskSourceIpAddrBitmask=aclEgressIpMaskSourceIpAddrBitmask, aclIpAceMaxSourcePort=aclIpAceMaxSourcePort, cHsrpGrpConfiguredHoldTime=cHsrpGrpConfiguredHoldTime, consoleExecTimeout=consoleExecTimeout, arpMgt=arpMgt, ospfSummaryMask=ospfSummaryMask, dhcpServerLeaseBindingStatus=dhcpServerLeaseBindingStatus, prioIpPortPhysPort=prioIpPortPhysPort, dvmrpNeighborRcvBadPkts=dvmrpNeighborRcvBadPkts, prioIpPrecValue=prioIpPrecValue, cHsrpExtIfTracked=cHsrpExtIfTracked, markerTable=markerTable, es4612MIBConformance=es4612MIBConformance, xstInstanceCfgTable=xstInstanceCfgTable, rlPortInputStatus=rlPortInputStatus, portType=portType, ipCidrRouteExtTable=ipCidrRouteExtTable, mstInstanceEditVlansMap=mstInstanceEditVlansMap, arpCacheTimeout=arpCacheTimeout, sshTimeout=sshTimeout, ospfRedistributeMetricType=ospfRedistributeMetricType, dnsAliasTable=dnsAliasTable, sshHostKeyGenStatus=sshHostKeyGenStatus, sshRsaHostKey3=sshRsaHostKey3, aclIngressIpMaskIsEnableTos=aclIngressIpMaskIsEnableTos, sshRsaHostKey2=sshRsaHostKey2, consoleMgt=consoleMgt, mstRevision=mstRevision, dnsCacheTtl=dnsCacheTtl, xstInstanceCfgHelloTime=xstInstanceCfgHelloTime, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, dhcpPoolMacAddress=dhcpPoolMacAddress, prioIpDscpEntry=prioIpDscpEntry, sntpServerIpAddress=sntpServerIpAddress, aclEgressIpMaskEntry=aclEgressIpMaskEntry, mvrPortEntry=mvrPortEntry, staPortSystemStatus=staPortSystemStatus, xstInstanceCfgRootPort=xstInstanceCfgRootPort, aclIpAceDestPortOp=aclIpAceDestPortOp, dvmrpInterfaceRcvBadPkts=dvmrpInterfaceRcvBadPkts, xstInstancePortPathCost=xstInstancePortPathCost, bcastStormPercent=bcastStormPercent, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, sshUserRsaKey8=sshUserRsaKey8, portEntry=portEntry, arpStatSendRequestPackets=arpStatSendRequestPackets, dnsCacheType=dnsCacheType, dvmrpInterfaceEntry=dvmrpInterfaceEntry, mvrGroupStaticTable=mvrGroupStaticTable, smtpServerIpEntry=smtpServerIpEntry, dvmrpNeighborGenerationId=dvmrpNeighborGenerationId, dnsCacheEntry=dnsCacheEntry, switchProductId=switchProductId, aclIngressIpMaskIsEnablePrecedence=aclIngressIpMaskIsEnablePrecedence, swProdDescription=swProdDescription, prioIpDscpTable=prioIpDscpTable, igmpSnoopQueryCount=igmpSnoopQueryCount, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, ipDhcpRestart=ipDhcpRestart, dnsHostIndex=dnsHostIndex, dvmrpPruneGroup=dvmrpPruneGroup, portCapabilities=portCapabilities, dvmrpRouteIfIndex=dvmrpRouteIfIndex, aclIngressIpMaskControlCodeBitmask=aclIngressIpMaskControlCodeBitmask, dhcpPoolOptionNetbiosNodeType=dhcpPoolOptionNetbiosNodeType, sshConnStatus=sshConnStatus, sshConnInfoTable=sshConnInfoTable, dhcpPoolOptionTable=dhcpPoolOptionTable, fileCopyStatus=fileCopyStatus, prioIpPortTable=prioIpPortTable, sshRsaHostKey4=sshRsaHostKey4, dvmrpRouteUpTime=dvmrpRouteUpTime, xstInstancePortPortRole=xstInstancePortPortRole, sshRsaHostKey1=sshRsaHostKey1, qosMgt=qosMgt, sshDsaHostKey1=sshDsaHostKey1, cHsrpGlobalConfig=cHsrpGlobalConfig, aclMacAceStatus=aclMacAceStatus, dvmrpRouteTable=dvmrpRouteTable, arpCacheDeleteAll=arpCacheDeleteAll, igmpSnoopMulticastCurrentStatus=igmpSnoopMulticastCurrentStatus, mvrVlanId=mvrVlanId, portSecPortEntry=portSecPortEntry, fileCopyTftpServer=fileCopyTftpServer, dnsNameServerStatus=dnsNameServerStatus, arpStatRcvReplyPackets=arpStatRcvReplyPackets, ipFilterSnmpEntry=ipFilterSnmpEntry, aclEgressIpMaskPrecedence=aclEgressIpMaskPrecedence, mstInstanceOperTable=mstInstanceOperTable, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, mstInstanceEditIndex=mstInstanceEditIndex, prioAclToCosMappingEntry=prioAclToCosMappingEntry, aclIngressMacMaskStatus=aclIngressMacMaskStatus, igmpSnoopMulticastCurrentIpAddress=igmpSnoopMulticastCurrentIpAddress, aclIngressIpMaskIsEnableDscp=aclIngressIpMaskIsEnableDscp, dhcpRelayServerAddrIfIndex=dhcpRelayServerAddrIfIndex, aclIngressMacMaskIndex=aclIngressMacMaskIndex, smtpServerIpStatus=smtpServerIpStatus, sshUserDsaKey7=sshUserDsaKey7, dhcpPoolEntry=dhcpPoolEntry, trunkTable=trunkTable, ipHttpsPort=ipHttpsPort, cHsrpExtIfTrackedEntry=cHsrpExtIfTrackedEntry, prioIpPrecEntry=prioIpPrecEntry, ripRoutingProcessStatus=ripRoutingProcessStatus, dhcpcIfClientId=dhcpcIfClientId, aclIngressIpMaskDestPortBitmask=aclIngressIpMaskDestPortBitmask, dnsDomainListTable=dnsDomainListTable, ospfNetworkAreaAreaId=ospfNetworkAreaAreaId, sshDsaHostKey5=sshDsaHostKey5, fileMgt=fileMgt, portAutonegotiation=portAutonegotiation, xstInstanceCfgTimeSinceTopologyChange=xstInstanceCfgTimeSinceTopologyChange, trapDestTable=trapDestTable, dnsAliasEntry=dnsAliasEntry, mvrGroupsCtlId=mvrGroupsCtlId, prioIpPortStatus=prioIpPortStatus, ospfRfc1583CompatibleState=ospfRfc1583CompatibleState, es4612TrapsPrefix=es4612TrapsPrefix, ripInstabilityPreventingEntry=ripInstabilityPreventingEntry, igmpSnoopQuerier=igmpSnoopQuerier, switchInfoEntry=switchInfoEntry, xstInstanceCfgPriority=xstInstanceCfgPriority, portSecurityMgt=portSecurityMgt, consoleDataBits=consoleDataBits, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, aclEgressMacMaskTable=aclEgressMacMaskTable, prioAclToCosMappingTable=prioAclToCosMappingTable, xstInstanceCfgTxHoldCount=xstInstanceCfgTxHoldCount, es4612MIBObjects=es4612MIBObjects, bcastStormStatus=bcastStormStatus, sshConnMinorVersion=sshConnMinorVersion, ripNetworkAddrTable=ripNetworkAddrTable, mvrGroupsCtl=mvrGroupsCtl, ripGarbageCollectionTime=ripGarbageCollectionTime, ipFilterTelnetTable=ipFilterTelnetTable, telnetMgt=telnetMgt, smtpStatus=smtpStatus, igmpSnoopMulticastCurrentVlanIndex=igmpSnoopMulticastCurrentVlanIndex, aclIngressIpMaskStatus=aclIngressIpMaskStatus, aclEgressIpMaskDestIpAddrBitmask=aclEgressIpMaskDestIpAddrBitmask, prioQueueMode=prioQueueMode, mirrorEntry=mirrorEntry, mvrPortActive=mvrPortActive, ipFilterSnmpTable=ipFilterSnmpTable, xstInstanceCfgRootCost=xstInstanceCfgRootCost, dhcpcIfClientIdMode=dhcpcIfClientIdMode, dnsHostTable=dnsHostTable, ospfSystemGroup=ospfSystemGroup, prioIpDscpRestoreDefault=prioIpDscpRestoreDefault, dvmrpScalar=dvmrpScalar, portMgt=portMgt, aclEgressMacMaskIsEnablePktformat=aclEgressMacMaskIsEnablePktformat, aclMacAceMinVid=aclMacAceMinVid, vlanPortIndex=vlanPortIndex, mvrGroupCurrentPorts=mvrGroupCurrentPorts, aclIpAceDestPortBitmask=aclIpAceDestPortBitmask, dhcpServerServiceStatus=dhcpServerServiceStatus, aclMgt=aclMgt, aclIpAcePrecedence=aclIpAcePrecedence, ipFilterSnmpStatus=ipFilterSnmpStatus, rateLimitPortEntry=rateLimitPortEntry, switchFanEntry=switchFanEntry, dvmrpRouteNextHopEntry=dvmrpRouteNextHopEntry, prioIpDscpValue=prioIpDscpValue, dnsCacheTable=dnsCacheTable, ospfRedistributeProtocol=ospfRedistributeProtocol, cosMgt=cosMgt, aclMacAceMaxEtherType=aclMacAceMaxEtherType, xstInstanceCfgIndex=xstInstanceCfgIndex, consoleAdminBaudRate=consoleAdminBaudRate, dvmrpInterfaceGenerationId=dvmrpInterfaceGenerationId, ospfRouterIdType=ospfRouterIdType, fileCopySrcOperType=fileCopySrcOperType, ipFilterTelnetStartAddress=ipFilterTelnetStartAddress, xstInstancePortTable=xstInstancePortTable, cHsrpGrpConfiguredHelloTime=cHsrpGrpConfiguredHelloTime, mstInstanceEditTable=mstInstanceEditTable, hsrpMgt=hsrpMgt, prioWrrPortEntry=prioWrrPortEntry, sshKeySize=sshKeySize, dnsDomainListStatus=dnsDomainListStatus, aclIngressMacMaskVidBitmask=aclIngressMacMaskVidBitmask, dvmrpReachableRoutes=dvmrpReachableRoutes, ripRouterVersion=ripRouterVersion, prioAclToCosMappingIfIndex=prioAclToCosMappingIfIndex, xstInstancePortDesignatedRoot=xstInstancePortDesignatedRoot, iPAddrUnnumbered=iPAddrUnnumbered, HsrpState=HsrpState, ipFilterHTTPStartAddress=ipFilterHTTPStartAddress, fileInfoTable=fileInfoTable, mvrGroupCurrentTable=mvrGroupCurrentTable, sshUserKeyDelAction=sshUserKeyDelAction, lacpPortEntry=lacpPortEntry, xstInstancePortPort=xstInstancePortPort, markerPrecedence=markerPrecedence, dhcpServerExcludedIpAddrHiIp=dhcpServerExcludedIpAddrHiIp, bcastStormEntry=bcastStormEntry, dvmrpNumRoutes=dvmrpNumRoutes, bcastStormPktRate=bcastStormPktRate, swExpansionSlot2=swExpansionSlot2, mvrPortType=mvrPortType, aclIpAceStatus=aclIpAceStatus, ripStatisticsReset=ripStatisticsReset, sshMgt=sshMgt, arpTrafficStatistics=arpTrafficStatistics, trunkPorts=trunkPorts, swRoleInSystem=swRoleInSystem, dhcpPoolPoolName=dhcpPoolPoolName, dhcpPoolOptionDnsSerIndex=dhcpPoolOptionDnsSerIndex, ValidStatus=ValidStatus, sshUserDsaKey1=sshUserDsaKey1, telnetExecTimeout=telnetExecTimeout, aclIngressMacMaskDestMacAddrBitmask=aclIngressMacMaskDestMacAddrBitmask, dhcpPoolOptNetbiosServerTable=dhcpPoolOptNetbiosServerTable, sshUserRsaKey5=sshUserRsaKey5, iPAddrPrimaryInterface=iPAddrPrimaryInterface, dhcpPoolOptionDnsSerIpAddress=dhcpPoolOptionDnsSerIpAddress, ipFilterHTTPEntry=ipFilterHTTPEntry, dhcpClient=dhcpClient, markerAclName=markerAclName, vlanEntry=vlanEntry, aclEgressIpMaskTable=aclEgressIpMaskTable, markerPriority=markerPriority, ipCidrRouteExtMask=ipCidrRouteExtMask, vlanAddressMethod=vlanAddressMethod, bcastStormMgt=bcastStormMgt, dnsAliasName=dnsAliasName, aclIngressMacMaskSourceMacAddrBitmask=aclIngressMacMaskSourceMacAddrBitmask, sshUserEntry=sshUserEntry, ospfNssaOriginateDefaultInfoStatus=ospfNssaOriginateDefaultInfoStatus, radiusServerKey=radiusServerKey, dhcpPoolOptionDnsSerTable=dhcpPoolOptionDnsSerTable, swFanFailureTrap=swFanFailureTrap, dhcpPoolOptionCidMode=dhcpPoolOptionCidMode, aclIpAceSourcePortBitmask=aclIpAceSourcePortBitmask, sshDsaHostKey3=sshDsaHostKey3, fileCopySrcFileName=fileCopySrcFileName, trunkIndex=trunkIndex, trunkMgt=trunkMgt, iPAddrTable=iPAddrTable, sysCurrentTime=sysCurrentTime, sshDsaHostKey6=sshDsaHostKey6, cHsrpGrpActiveRouter=cHsrpGrpActiveRouter)
mibBuilder.exportSymbols("ES4612-MIB", ospfExternalMetricType=ospfExternalMetricType, cHsrpGrpVirtualIpAddr=cHsrpGrpVirtualIpAddr, prioCopyIpPort=prioCopyIpPort, xstInstanceCfgBridgeMaxAge=xstInstanceCfgBridgeMaxAge, mirrorStatus=mirrorStatus, swFanRecoverTrap=swFanRecoverTrap, mstInstanceOperVlansMap=mstInstanceOperVlansMap, mvrGroupEntry=mvrGroupEntry, sshServerMinorVersion=sshServerMinorVersion, sshUserRsaKey7=sshUserRsaKey7, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, mvrGroupStaticEntry=mvrGroupStaticEntry, dnsCacheFlag=dnsCacheFlag, dvmrpRouteMetric=dvmrpRouteMetric, aclEgressMacMaskStatus=aclEgressMacMaskStatus, ipFilterHTTPTable=ipFilterHTTPTable, aclEgressIpMaskDestPortBitmask=aclEgressIpMaskDestPortBitmask, dnsNameServerTable=dnsNameServerTable, aclEgressMacMaskEntry=aclEgressMacMaskEntry, aclEgressIpMaskIsEnableProtocol=aclEgressIpMaskIsEnableProtocol, consoleSilentTime=consoleSilentTime, dnsDomainLookup=dnsDomainLookup, telnetStatus=telnetStatus, dvmrpPruneExpiryTime=dvmrpPruneExpiryTime, ipCidrRouteExtTos=ipCidrRouteExtTos, portComboForcedMode=portComboForcedMode, rlPortIndex=rlPortIndex, rlPortOutputLimit=rlPortOutputLimit, trunkValidNumber=trunkValidNumber, mstInstanceEditVlansMap4k=mstInstanceEditVlansMap4k, dhcpPoolOptNetbiosServerIndex=dhcpPoolOptNetbiosServerIndex, swModelNumber=swModelNumber, aclIpAceName=aclIpAceName, dhcpPoolOptDefaultRouterEntry=dhcpPoolOptDefaultRouterEntry, sysLogStatus=sysLogStatus, aclEgressIpMaskIndex=aclEgressIpMaskIndex, dhcpRelayRestart=dhcpRelayRestart, aclMacAceDestMacAddrBitmask=aclMacAceDestMacAddrBitmask, markerIfIndex=markerIfIndex, ipFilterMgt=ipFilterMgt, swProdName=swProdName, xstInstancePortEnable=xstInstancePortEnable, cHsrpExtIfTrackedPriority=cHsrpExtIfTrackedPriority, aclIpAceMaxDestPort=aclIpAceMaxDestPort, fileInfoIsStartUp=fileInfoIsStartUp, mvrGroupsCtlAction=mvrGroupsCtlAction, radiusServerAddress=radiusServerAddress, aclIngressIpMaskEntry=aclIngressIpMaskEntry, igmpSnoopStatus=igmpSnoopStatus, sntpPollInterval=sntpPollInterval, dvmrpMgt=dvmrpMgt, dvmrpRouteNextHopSource=dvmrpRouteNextHopSource, aclIngressIpMaskDestIpAddrBitmask=aclIngressIpMaskDestIpAddrBitmask, ipCidrRouteExtNextHop=ipCidrRouteExtNextHop, trunkStatus=trunkStatus, smtpDestEMailEntry=smtpDestEMailEntry, ripNetworkAddrStatus=ripNetworkAddrStatus, dhcpPoolOptionDnsSerPoolName=dhcpPoolOptionDnsSerPoolName, xstInstanceCfgBridgeHelloTime=xstInstanceCfgBridgeHelloTime, cHsrpGrpVirtualMacAddr=cHsrpGrpVirtualMacAddr, cHsrpGrpNumber=cHsrpGrpNumber, restartMgt=restartMgt, dnsNameServerIp=dnsNameServerIp, rateLimitPortTable=rateLimitPortTable, dhcpPoolOptionPoolName=dhcpPoolOptionPoolName, portSecPortTable=portSecPortTable, smtpServerIp=smtpServerIp, igmpSnoopMulticastStaticStatus=igmpSnoopMulticastStaticStatus, xstInstancePortDesignatedCost=xstInstancePortDesignatedCost, sshDsaHostKey7=sshDsaHostKey7, ripTimers=ripTimers, dvmrpRouteExpiryTime=dvmrpRouteExpiryTime, dhcpServerExcludedIpAddrTable=dhcpServerExcludedIpAddrTable, sshServerStatus=sshServerStatus, dhcpServerLeaseBindingStartTime=dhcpServerLeaseBindingStartTime, dhcpPoolOptionCidBuffer=dhcpPoolOptionCidBuffer, arpProxyArpIfIndex=arpProxyArpIfIndex, prioCopyIpDscp=prioCopyIpDscp, dhcpPoolOptionBootFile=dhcpPoolOptionBootFile, dvmrpRouteEntry=dvmrpRouteEntry, sshDsaHostKey2=sshDsaHostKey2, aclEgressMacMaskVidBitmask=aclEgressMacMaskVidBitmask, smtpDestEMailStatus=smtpDestEMailStatus, aclIngressIpMaskIndex=aclIngressIpMaskIndex, arpProxyArpTable=arpProxyArpTable, swIdentifier=swIdentifier, swIndivPowerIndex=swIndivPowerIndex, cHsrpGrpPriority=cHsrpGrpPriority, dhcpPoolOptDefaultRouterPoolName=dhcpPoolOptDefaultRouterPoolName, sshUserRsaKey2=sshUserRsaKey2, fileCopyUnitId=fileCopyUnitId, staPortLongPathCost=staPortLongPathCost, ipFilterSnmpStartAddress=ipFilterSnmpStartAddress, dvmrpPruneEntry=dvmrpPruneEntry, swMicrocodeVer=swMicrocodeVer, mirrorSourcePort=mirrorSourcePort, mvrStatus=mvrStatus, dhcpServerLeaseBindingTable=dhcpServerLeaseBindingTable, prioWrrPortWeight=prioWrrPortWeight, ospfRedistributeMetric=ospfRedistributeMetric, portIndex=portIndex, xstInstanceCfgTopChanges=xstInstanceCfgTopChanges, ospfAutoCost=ospfAutoCost, aclMacAceTable=aclMacAceTable, sntpServiceMode=sntpServiceMode, cHsrpGrpStandbyState=cHsrpGrpStandbyState, sshUserDsaKey8=sshUserDsaKey8, igmpSnoopVersion=igmpSnoopVersion, dnaAliasAlias=dnaAliasAlias, ospfNetworkAreaAddressTable=ospfNetworkAreaAddressTable, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, tacacsServerKey=tacacsServerKey, dvmrpNeighborAddress=dvmrpNeighborAddress, aclIpAceDestIpAddr=aclIpAceDestIpAddr, cHsrpExtIfTrackedRowStatus=cHsrpExtIfTrackedRowStatus, aclIngressMacMaskTable=aclIngressMacMaskTable, staMgt=staMgt, swChassisServiceTag=swChassisServiceTag, swLoaderVer=swLoaderVer, trapDestMgt=trapDestMgt, ipFilterTelnetEndAddress=ipFilterTelnetEndAddress, cHsrpExtSecAddrEntry=cHsrpExtSecAddrEntry, dnsHostName=dnsHostName, consolePasswordThreshold=consolePasswordThreshold, mvrPortTable=mvrPortTable, dhcpServerLeaseBindingMac=dhcpServerLeaseBindingMac, xstInstanceCfgForwardDelay=xstInstanceCfgForwardDelay, iPAddrEntry=iPAddrEntry, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, igmpSnoopMgt=igmpSnoopMgt, aclEgressIpMaskControlCodeBitmask=aclEgressIpMaskControlCodeBitmask, xstInstancePortForwardTransitions=xstInstancePortForwardTransitions, sshUserRsaKey4=sshUserRsaKey4, cHsrpGrpPreempt=cHsrpGrpPreempt, xstInstancePortDesignatedBridge=xstInstancePortDesignatedBridge, dvmrpNeighborUpTime=dvmrpNeighborUpTime, sshDsaHostKey8=sshDsaHostKey8, xstInstancePortState=xstInstancePortState, fileCopyDestOperType=fileCopyDestOperType, sshConnEncryptionTypeStr=sshConnEncryptionTypeStr, igmpSnoopMulticastCurrentPorts=igmpSnoopMulticastCurrentPorts, ospfMgt=ospfMgt, cHsrpGrpEntryRowStatus=cHsrpGrpEntryRowStatus, priorityMgt=priorityMgt, remoteLogStatus=remoteLogStatus, dvmrpRouteNextHopSourceMask=dvmrpRouteNextHopSourceMask, sshConnID=sshConnID, aclMacAceMinEtherType=aclMacAceMinEtherType, amtrMgt=amtrMgt, xstInstanceCfgPathCostMethod=xstInstanceCfgPathCostMethod, aclEgressIpMaskIsEnablePrecedence=aclEgressIpMaskIsEnablePrecedence, dvmrpInterfaceRcvBadRoutes=dvmrpInterfaceRcvBadRoutes, aclIpAceMinDestPort=aclIpAceMinDestPort, trunkCreation=trunkCreation, mvrPortImmediateLeave=mvrPortImmediateLeave, mstInstanceOperVlansMap4k=mstInstanceOperVlansMap4k, aclMacAceSourceMacAddr=aclMacAceSourceMacAddr, dvmrpRouteNextHopTable=dvmrpRouteNextHopTable, ripUpdateTime=ripUpdateTime, iPAddrIPAddress=iPAddrIPAddress, aclIpAceIndex=aclIpAceIndex, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, mvrGroupsCtlCount=mvrGroupsCtlCount, sshUserDsaKey5=sshUserDsaKey5, dnsDomainListEntry=dnsDomainListEntry, dhcpPoolOptionLeaseTime=dhcpPoolOptionLeaseTime, mvrMgt=mvrMgt, bcastStormOctetRate=bcastStormOctetRate, arpStatSendReplyPackets=arpStatSendReplyPackets, fileInfoFileName=fileInfoFileName, staPortAdminPointToPoint=staPortAdminPointToPoint, igmpSnoopQueryTimeout=igmpSnoopQueryTimeout, aclIngressMacMaskEtherTypeBitmask=aclIngressMacMaskEtherTypeBitmask, lacpMgt=lacpMgt, aclIpAceSourceIpAddrBitmask=aclIpAceSourceIpAddrBitmask, prioIpDscpPort=prioIpDscpPort, radiusServerPortNumber=radiusServerPortNumber, swExpansionSlot1=swExpansionSlot1, ripNetworkAddrAddress=ripNetworkAddrAddress, ospfNssaAreaId=ospfNssaAreaId, ipMgt=ipMgt, aclEgressMacMaskSourceMacAddrBitmask=aclEgressMacMaskSourceMacAddrBitmask, ripMgt=ripMgt, mstInstanceEditVlansMap3k=mstInstanceEditVlansMap3k, dhcpRelayServerAddrIndex=dhcpRelayServerAddrIndex, xstInstancePortDesignatedPort=xstInstancePortDesignatedPort, telnetPortNumber=telnetPortNumber, remoteLogFacilityType=remoteLogFacilityType, dhcpcOptions=dhcpcOptions, cHsrpGrpStandbyRouter=cHsrpGrpStandbyRouter, xstMgt=xstMgt, mvrGroupCurrentEntry=mvrGroupCurrentEntry, aclIngressIpMaskTable=aclIngressIpMaskTable, igmpSnoopRouterCurrentStatus=igmpSnoopRouterCurrentStatus, fileCopyAction=fileCopyAction, mstInstanceOperEntry=mstInstanceOperEntry, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, vlanIndex=vlanIndex, ospfSummaryAddressTable=ospfSummaryAddressTable, portTable=portTable, rateLimitMgt=rateLimitMgt, arpProxyArpStatus=arpProxyArpStatus, prioIpPortEntry=prioIpPortEntry, aclIngressIpMaskIsEnableProtocol=aclIngressIpMaskIsEnableProtocol, bcastStormTable=bcastStormTable, sshRsaHostKey5=sshRsaHostKey5, sshHostKeyDelAction=sshHostKeyDelAction, smtpServerIpTable=smtpServerIpTable, dnsCacheIp=dnsCacheIp, sshServerMajorVersion=sshServerMajorVersion, ipHttpsState=ipHttpsState, dvmrpInterfaceKey=dvmrpInterfaceKey, radiusMgt=radiusMgt, ospfAdvertiseDefaultRoute=ospfAdvertiseDefaultRoute, dhcpcInterfaceTable=dhcpcInterfaceTable, dvmrpVersionString=dvmrpVersionString, ospfSummaryStatus=ospfSummaryStatus, aclIngressMacMaskIsEnablePktformat=aclIngressMacMaskIsEnablePktformat, dvmrpRouteSourceMask=dvmrpRouteSourceMask, mstInstanceEditRemainingHops=mstInstanceEditRemainingHops, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, dvmrpInterfaceKeyVersion=dvmrpInterfaceKeyVersion, ipHttpPort=ipHttpPort, ospfSpfHoldTime=ospfSpfHoldTime, ospfNssaStatus=ospfNssaStatus, prioWrrPortIfIndex=prioWrrPortIfIndex, layer3Mgt=layer3Mgt, dhcpPoolSubnetMask=dhcpPoolSubnetMask, dhcpcIfIndex=dhcpcIfIndex, ospfNetworkAreaStatus=ospfNetworkAreaStatus, mstInstanceEditVlansMap2k=mstInstanceEditVlansMap2k, sshUserRsaKey1=sshUserRsaKey1, dnsHostEntry=dnsHostEntry, mirrorTable=mirrorTable, sshUserDsaKey4=sshUserDsaKey4, markerDscp=markerDscp, cHsrpGrpLearnedHelloTime=cHsrpGrpLearnedHelloTime, vlanPortEntry=vlanPortEntry, ipFilterHTTPStatus=ipFilterHTTPStatus, ospfRedistributeStatus=ospfRedistributeStatus, aclMacAceAction=aclMacAceAction, prioAclToCosMappingStatus=prioAclToCosMappingStatus, portSecMaxMacCount=portSecMaxMacCount, dnsCacheIndex=dnsCacheIndex, dhcpRelay=dhcpRelay, aclMacAceName=aclMacAceName, staTxHoldCount=staTxHoldCount, mstMaxHops=mstMaxHops, ospfRedistributeTable=ospfRedistributeTable, dvmrpInterfaceSentRoutes=dvmrpInterfaceSentRoutes, fileCopyMgt=fileCopyMgt, vlanMgt=vlanMgt, switchManagementVlan=switchManagementVlan, iPAddrIfIndex=iPAddrIfIndex)
mibBuilder.exportSymbols("ES4612-MIB", sshUserRsaKey6=sshUserRsaKey6, sysLogMgt=sysLogMgt, es4612MIBNotifications=es4612MIBNotifications, cHsrpExtGroup=cHsrpExtGroup, snmpMgt=snmpMgt, aclEgressMacMaskDestMacAddrBitmask=aclEgressMacMaskDestMacAddrBitmask, restartOpCodeFile=restartOpCodeFile, aclMacAceVidOp=aclMacAceVidOp, xstInstanceCfgHoldTime=xstInstanceCfgHoldTime, dnsCacheDomain=dnsCacheDomain, dhcpPoolOptNetbiosServerEntry=dhcpPoolOptNetbiosServerEntry, trapDestUdpPort=trapDestUdpPort, switchFanTable=switchFanTable, dnsDomainName=dnsDomainName, dvmrpInterfaceTable=dvmrpInterfaceTable, mvrIfIndex=mvrIfIndex, sshDisconnect=sshDisconnect, sshHostKeyGenAction=sshHostKeyGenAction, sshAuthRetries=sshAuthRetries, dhcpPoolOptNetbiosServerPoolName=dhcpPoolOptNetbiosServerPoolName, staSystemStatus=staSystemStatus, dvmrpInterfaceIndex=dvmrpInterfaceIndex, swProdUrl=swProdUrl, cHsrpGrpLearnedHoldTime=cHsrpGrpLearnedHoldTime, switchUnitIndex=switchUnitIndex, prioIpPrecCos=prioIpPrecCos, prioWrrPortTrafficClass=prioWrrPortTrafficClass, PYSNMP_MODULE_ID=es4612MIB, switchOperState=switchOperState, lacpPortIndex=lacpPortIndex, ipFilterTelnetStatus=ipFilterTelnetStatus, OspfAreaID=OspfAreaID, mstInstanceOperVlansMap3k=mstInstanceOperVlansMap3k, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, smtpDestEMailTable=smtpDestEMailTable, prioAclToCosMappingCosValue=prioAclToCosMappingCosValue, sysTimeZone=sysTimeZone, dvmrpRouteSource=dvmrpRouteSource, portSecPortStatus=portSecPortStatus, vlanPortMode=vlanPortMode, cHsrpGroup=cHsrpGroup, aclAclGroupEntry=aclAclGroupEntry, portSpeedDpxCfg=portSpeedDpxCfg, sshHostKeySaveStatus=sshHostKeySaveStatus, aclIpAceTos=aclIpAceTos, es4612MIB=es4612MIB, cHsrpConfigTimeout=cHsrpConfigTimeout, portSecPortIndex=portSecPortIndex, dhcpPoolOptionDnsSerEntry=dhcpPoolOptionDnsSerEntry, smtpSeverityLevel=smtpSeverityLevel, sntpServerEntry=sntpServerEntry, aclMacAceSourceMacAddrBitmask=aclMacAceSourceMacAddrBitmask, dhcpPoolOptDefaultRouterTable=dhcpPoolOptDefaultRouterTable, aclMacAceEtherTypeBitmask=aclMacAceEtherTypeBitmask, fileInfoUnitID=fileInfoUnitID, routeMgt=routeMgt, igmpSnoopMulticastCurrentTable=igmpSnoopMulticastCurrentTable, swPortSecurityTrap=swPortSecurityTrap, aclIpAceDestIpAddrBitmask=aclIpAceDestIpAddrBitmask, portTrunkIndex=portTrunkIndex, staPortAdminEdgePort=staPortAdminEdgePort, ospfNssaRedistributeStatus=ospfNssaRedistributeStatus, markerMgt=markerMgt, dhcpPoolOptionEntry=dhcpPoolOptionEntry, smtpDestEMail=smtpDestEMail, ripVlanIndex=ripVlanIndex, switchNumber=switchNumber, xstInstanceCfgEntry=xstInstanceCfgEntry, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, mirrorDestinationPort=mirrorDestinationPort, dhcpPoolHardwareType=dhcpPoolHardwareType, remoteLogServerIp=remoteLogServerIp, fileInfoMgt=fileInfoMgt, dnsNameServerEntry=dnsNameServerEntry, switchFanIndex=switchFanIndex, aclAclGroupIngressMacAcl=aclAclGroupIngressMacAcl, aclAclGroupIfIndex=aclAclGroupIfIndex, swBootRomVer=swBootRomVer, staPortIndex=staPortIndex, igmpSnoopQueryInterval=igmpSnoopQueryInterval, cHsrpGrpAuth=cHsrpGrpAuth, dhcpPoolPoolAddress=dhcpPoolPoolAddress, xstInstancePortEntry=xstInstancePortEntry, dhcpPoolOptNetbiosServerIpAddress=dhcpPoolOptNetbiosServerIpAddress, sshUserDsaKey3=sshUserDsaKey3, dvmrpNeighborExpiryTime=dvmrpNeighborExpiryTime, switchJumboFrameStatus=switchJumboFrameStatus, sshConnInfoEntry=sshConnInfoEntry, sshUserTable=sshUserTable, swSmtpConnFailureTrap=swSmtpConnFailureTrap, mvrGroupCurrentAddress=mvrGroupCurrentAddress, dhcpRelayServerAddrTable=dhcpRelayServerAddrTable, dvmrpNeighborIfIndex=dvmrpNeighborIfIndex, remoteLogServerStatus=remoteLogServerStatus, prioIpPrecPort=prioIpPrecPort, es4612Traps=es4612Traps, mvrCurrentGroups=mvrCurrentGroups, dvmrpNeighborEntry=dvmrpNeighborEntry, staProtocolType=staProtocolType, aclIpAceTable=aclIpAceTable, aclEgressIpMaskIsEnableDscp=aclEgressIpMaskIsEnableDscp, ripNetworkAddrEntry=ripNetworkAddrEntry, securityMgt=securityMgt, mstInstanceEditEntry=mstInstanceEditEntry, smtpMgt=smtpMgt, dhcpRelayServerAddrEntry=dhcpRelayServerAddrEntry, ospfNetworkAreaAddressEntry=ospfNetworkAreaAddressEntry, aclMacAceEtherTypeOp=aclMacAceEtherTypeOp, ipCidrRouteExtEntry=ipCidrRouteExtEntry, swPowerStatusChangeTrap=swPowerStatusChangeTrap, swProdManufacturer=swProdManufacturer, ipHttpState=ipHttpState, ipFilterHTTPEndAddress=ipFilterHTTPEndAddress, sysTimeZoneName=sysTimeZoneName, sshConnMajorVersion=sshConnMajorVersion, trapDestVersion=trapDestVersion, aclIngressIpMaskSourcePortBitmask=aclIngressIpMaskSourcePortBitmask, remoteLogServerEntry=remoteLogServerEntry, dhcpServerLeaseBindingIp=dhcpServerLeaseBindingIp, aclIpAceAction=aclIpAceAction, aclMacAceMaxVid=aclMacAceMaxVid, sshRsaHostKey6=sshRsaHostKey6, mirrorType=mirrorType, iPAddrStatus=iPAddrStatus, swPowerStatus=swPowerStatus, swServiceTag=swServiceTag, sntpServerIndex=sntpServerIndex, netDefaultGateway=netDefaultGateway, dhcpPoolOptDefaultRouterIndex=dhcpPoolOptDefaultRouterIndex, dvmrpNeighborCapabilities=dvmrpNeighborCapabilities, sysLogHistoryRamLevel=sysLogHistoryRamLevel, sshUserRsaKey3=sshUserRsaKey3, iPAddrSubnetMask=iPAddrSubnetMask, cHsrpGrpPreemptDelay=cHsrpGrpPreemptDelay, ospfSpfDelayTime=ospfSpfDelayTime, swIndivPowerUnitIndex=swIndivPowerUnitIndex, trunkEntry=trunkEntry, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, xstInstanceCfgDesignatedRoot=xstInstanceCfgDesignatedRoot, aclEgressIpMaskIsEnableTos=aclEgressIpMaskIsEnableTos, dhcpPoolstatus=dhcpPoolstatus, staPortTable=staPortTable, aclMacAceVidBitmask=aclMacAceVidBitmask, cHsrpGrpUseConfiguredTimers=cHsrpGrpUseConfiguredTimers, prioIpPrecDscpStatus=prioIpPrecDscpStatus, tacacsServerAddress=tacacsServerAddress, sshUserDsaKey2=sshUserDsaKey2, ripSplitHorizonStatus=ripSplitHorizonStatus, prioAclToCosMappingAclName=prioAclToCosMappingAclName, ospfNetworkAreaMask=ospfNetworkAreaMask, staPortEntry=staPortEntry, aclMacAceEntry=aclMacAceEntry, aclIngressMacMaskPrecedence=aclIngressMacMaskPrecedence, swOpCodeVer=swOpCodeVer, arpProxyArpEntry=arpProxyArpEntry, sntpMgt=sntpMgt, radiusServerRetransmit=radiusServerRetransmit, staPortProtocolMigration=staPortProtocolMigration, cHsrpExtSecAddrRowStatus=cHsrpExtSecAddrRowStatus, dvmrpNeighborTable=dvmrpNeighborTable, sshRsaHostKey8=sshRsaHostKey8, bcastStormIfIndex=bcastStormIfIndex, dhcpPoolPoolType=dhcpPoolPoolType, dvmrpPruneSource=dvmrpPruneSource, aclEgressMacMaskIndex=aclEgressMacMaskIndex, lineMgt=lineMgt, fileCopyDestFileName=fileCopyDestFileName, dhcpServerMgt=dhcpServerMgt, remoteLogMgt=remoteLogMgt, ripInstabilityPreventingTable=ripInstabilityPreventingTable, dvmrpPruneSourceMask=dvmrpPruneSourceMask, aclIpAceSourcePortOp=aclIpAceSourcePortOp, dnsMgt=dnsMgt, trunkMaxId=trunkMaxId, ospfAreaNumber=ospfAreaNumber, mvrGroupStaticPorts=mvrGroupStaticPorts, aclIngressMacMaskEntry=aclIngressMacMaskEntry, prioCopyIpPrec=prioCopyIpPrec, aclMacAceDestMacAddr=aclMacAceDestMacAddr, igmpSnoopRouterStaticStatus=igmpSnoopRouterStaticStatus, xstInstancePortInstance=xstInstancePortInstance, dnsDomainListName=dnsDomainListName, dvmrpNeighborMinorVersion=dvmrpNeighborMinorVersion, xstInstancePortPriority=xstInstancePortPriority, accton=accton, cHsrpExtSecAddrAddress=cHsrpExtSecAddrAddress, fileCopyTftpErrMsg=fileCopyTftpErrMsg, bcastStormSampleType=bcastStormSampleType, tacacsServerPortNumber=tacacsServerPortNumber, rlPortInputLimit=rlPortInputLimit, aclAclGroupIngressIpAcl=aclAclGroupIngressIpAcl, aclIpAceControlCodeBitmask=aclIpAceControlCodeBitmask, aclAclGroupTable=aclAclGroupTable, restartControl=restartControl, dhcpServerLeaseBindingLeaseTime=dhcpServerLeaseBindingLeaseTime, aclAclGroupEgressIpAcl=aclAclGroupEgressIpAcl, portFlowCtrlStatus=portFlowCtrlStatus, ospfNssaTable=ospfNssaTable, xstInstanceCfgMaxAge=xstInstanceCfgMaxAge, aclEgressMacMaskEtherTypeBitmask=aclEgressMacMaskEtherTypeBitmask, cheetahSwitchMgt=cheetahSwitchMgt, dvmrpRouteUpstreamNeighbor=dvmrpRouteUpstreamNeighbor, cHsrpExtSecAddrTable=cHsrpExtSecAddrTable, aclIpAceMinSourcePort=aclIpAceMinSourcePort, staPortFastForward=staPortFastForward, sysTimeMgt=sysTimeMgt, aclIpAceDscp=aclIpAceDscp, aclMacAceIndex=aclMacAceIndex, ipFilterTelnetEntry=ipFilterTelnetEntry, ospfSummaryAddress=ospfSummaryAddress, switchIndivPowerTable=switchIndivPowerTable, dnsHostIp=dnsHostIp, dhcpPoolOptionNextServer=dhcpPoolOptionNextServer, dvmrpNeighborMajorVersion=dvmrpNeighborMajorVersion, prioIpPortValue=prioIpPortValue, cHsrpGrpTable=cHsrpGrpTable, trapDestEntry=trapDestEntry, swSerialNumber=swSerialNumber, aclIpAceProtocol=aclIpAceProtocol, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, cHsrpGrpEntry=cHsrpGrpEntry, mstName=mstName, fileCopyFileType=fileCopyFileType, portFlowCtrlCfg=portFlowCtrlCfg, dvmrpRouteNextHopType=dvmrpRouteNextHopType, dvmrpNeighborRcvRoutes=dvmrpNeighborRcvRoutes, mvrGroupStaticAddress=mvrGroupStaticAddress, sshDsaHostKey4=sshDsaHostKey4, mvrGroupStaticStatus=mvrGroupStaticStatus, mvrGroupStatus=mvrGroupStatus, aclMacAcePktformat=aclMacAcePktformat, dvmrpInterfaceStatus=dvmrpInterfaceStatus, aclMacAcePrecedence=aclMacAcePrecedence, sshConnUserName=sshConnUserName, mvrMaxGroups=mvrMaxGroups, swIndivPowerStatus=swIndivPowerStatus, aclIngressIpMaskSourceIpAddrBitmask=aclIngressIpMaskSourceIpAddrBitmask, consoleParity=consoleParity, prioCopy=prioCopy, restartConfigFile=restartConfigFile, ipCidrRouteExtOspfSubType=ipCidrRouteExtOspfSubType, lacpPortTable=lacpPortTable, markerActionBitList=markerActionBitList, dhcpPoolTable=dhcpPoolTable, ripTimeoutTime=ripTimeoutTime, ospfRedistributeEntry=ospfRedistributeEntry, smtpSourceEMail=smtpSourceEMail, dvmrpPruneTable=dvmrpPruneTable, arpStatRcvRequestPackets=arpStatRcvRequestPackets, prioIpDscpCos=prioIpDscpCos, dhcpServerExcludedIpAddrEntry=dhcpServerExcludedIpAddrEntry, swUnitIndex=swUnitIndex, swPortNumber=swPortNumber, mvrGroupId=mvrGroupId)
mibBuilder.exportSymbols("ES4612-MIB", switchInfoTable=switchInfoTable, mirrorMgt=mirrorMgt, OspfBigMetric=OspfBigMetric, dhcpPoolOptionDomainName=dhcpPoolOptionDomainName, switchFanStatus=switchFanStatus, portSpeedDpxStatus=portSpeedDpxStatus, tacacsMgt=tacacsMgt, telnetPasswordThreshold=telnetPasswordThreshold, amtrMacAddrAgingStatus=amtrMacAddrAgingStatus, ospfDefaultExternalMetric=ospfDefaultExternalMetric, fileInfoEntry=fileInfoEntry, swProdVersion=swProdVersion, lacpPortStatus=lacpPortStatus, fileInfoFileSize=fileInfoFileSize, swHardwareVer=swHardwareVer, cHsrpExtIfTrackedTable=cHsrpExtIfTrackedTable, sshRsaHostKey7=sshRsaHostKey7, trapDestStatus=trapDestStatus, prioIpPortEnableStatus=prioIpPortEnableStatus, dvmrpInterfaceMetric=dvmrpInterfaceMetric, ospfOriginateDefaultRoute=ospfOriginateDefaultRoute, aclIpAcePrec=aclIpAcePrec, mvrGroutActive=mvrGroutActive, vlanTable=vlanTable, consoleStopBits=consoleStopBits, sntpServerTable=sntpServerTable, fileInfoCreationTime=fileInfoCreationTime, fileInfoDelete=fileInfoDelete, mvrGroupTable=mvrGroupTable, dhcpPoolOptDefaultRouterIpAddress=dhcpPoolOptDefaultRouterIpAddress, dhcpMgt=dhcpMgt, cHsrpGrpUseConfigVirtualIpAddr=cHsrpGrpUseConfigVirtualIpAddr, dhcpServerExcludedIpAddrLowIp=dhcpServerExcludedIpAddrLowIp, aclIpAceSourceIpAddr=aclIpAceSourceIpAddr, markerEntry=markerEntry, portSecAction=portSecAction, ospfNssaEntry=ospfNssaEntry, switchMgt=switchMgt, radiusServerTimeout=radiusServerTimeout, aclEgressMacMaskPrecedence=aclEgressMacMaskPrecedence, fileInfoFileType=fileInfoFileType, switchIndivPowerEntry=switchIndivPowerEntry, aclIpAceControlCode=aclIpAceControlCode, markerStatus=markerStatus, igmpSnoopMulticastCurrentEntry=igmpSnoopMulticastCurrentEntry, aclIngressIpMaskPrecedence=aclIngressIpMaskPrecedence, sshUserName=sshUserName, aclAclGroupEgressMacAcl=aclAclGroupEgressMacAcl, ospfSummaryAddressEntry=ospfSummaryAddressEntry, prioIpPrecRestoreDefault=prioIpPrecRestoreDefault, mstInstanceOperVlansMap2k=mstInstanceOperVlansMap2k, aclEgressIpMaskSourcePortBitmask=aclEgressIpMaskSourcePortBitmask, mvrRunningStatus=mvrRunningStatus, consoleOperBaudRate=consoleOperBaudRate, StaPathCostMode=StaPathCostMode, staPortOperEdgePort=staPortOperEdgePort, dhcpcInterfaceEntry=dhcpcInterfaceEntry, sntpStatus=sntpStatus, dvmrpNeighborState=dvmrpNeighborState, aclEgressIpMaskStatus=aclEgressIpMaskStatus, remoteLogServerTable=remoteLogServerTable, aclIpAceEntry=aclIpAceEntry, dvmrpNeighborRcvBadRoutes=dvmrpNeighborRcvBadRoutes, dhcpRelayServerAddrServerIp=dhcpRelayServerAddrServerIp, trapDestAddress=trapDestAddress, prioWrrPortTable=prioWrrPortTable, remoteLogLevel=remoteLogLevel, dvmrpInterfaceLocalAddress=dvmrpInterfaceLocalAddress, ipCidrRouteExtDest=ipCidrRouteExtDest, staPathCostMethod=staPathCostMethod, dvmrpRouteNextHopIfIndex=dvmrpRouteNextHopIfIndex, mstInstanceOperIndex=mstInstanceOperIndex, dhcpServerExcludedIpAddrStatus=dhcpServerExcludedIpAddrStatus, ospfNetworkAareaAddress=ospfNetworkAareaAddress, sshUserDsaKey6=sshUserDsaKey6, sshHostKeySaveAction=sshHostKeySaveAction)
