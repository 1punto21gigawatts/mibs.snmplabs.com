#
# PySNMP MIB module MADGE-ABC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MADGE-ABC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:09:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter32, IpAddress, ObjectIdentity, TimeTicks, enterprises, NotificationType, Unsigned32, MibIdentifier, Integer32, Bits, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "IpAddress", "ObjectIdentity", "TimeTicks", "enterprises", "NotificationType", "Unsigned32", "MibIdentifier", "Integer32", "Bits", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class AbcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disable", 1), ("enable", 2), ("monitor", 3))

class AbcFlush(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("flush", 1))

madge = MibIdentifier((1, 3, 6, 1, 4, 1, 494))
madgeAbc = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15))
madgeAbcVersion = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcVersion.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcVersion.setDescription('The version number of the Active Broadcast Control MIB. The most recent version is 1.')
madgeAbcTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 2))
madgeAbcNetbios = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 3))
madgeAbcIp = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 4))
madgeAbcIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 5))
madgeAbcTokenRingAreFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 2, 1))
madgeAbcTokenRingAreConversion = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 2, 2))
madgeAbcNetbiosName = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 3, 1))
madgeAbcNetbiosAddName = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 3, 2))
madgeAbcIpArp = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 4, 1))
madgeAbcIpxRipSapSuppress = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 5, 1))
madgeAbcIpxType20Filter = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 15, 5, 2))
madgeAbcTokenRingAreFilterState = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 1, 1), AbcState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterState.setDescription('The current state of the ARE (All Route Explorer) filter. disable: Perform no action. enable: Only optimal ARE frames will be forwared onto other ports - optimal frames are those which are quicker or have shorter routing information than other frames. monitor: No filtering will be performed but the potential performance of the filter will be measured, i.e. the count and timeout keys will be incremented as if the filter was on.')
madgeAbcTokenRingAreFilterFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 1, 2), AbcFlush()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterFlushCache.setDescription('Write the value 1 (flush) to flush the ARE filter cache and reset counters.')
madgeAbcTokenRingAreFilterCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterCount.setDescription('The total number of ARE frames seen by the filter.')
madgeAbcTokenRingAreFilterFiltered = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterFiltered.setDescription('The total number of ARE frames the filter has removed.')
madgeAbcTokenRingAreFilterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreFilterTimeout.setDescription('The maximum lifetime of an entry in the ARE filter cache. Default value : 100 (centiseconds) Minimum value : 25 Maximum value : 60000 (=10 minutes)')
madgeAbcTokenRingAreConversionState = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 2, 1), AbcState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionState.setDescription('The current state of the ARE (All Route Explorer) conversion filter. disable: Perform no action. enable: Turn on ARE conversion. The frames specified by the mode key will be converted into Spanning Tree Explorers (ARE). monitor: No filtering will be performed but the potential performance of the filter will be measured, i.e. the count and timeout keys will be incremented as if the filter was on.')
madgeAbcTokenRingAreConversionFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 2, 2), AbcFlush()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionFlushCache.setDescription('Write the value 1 (flush) to flush the ARE filter cache and reset counters.')
madgeAbcTokenRingAreConversionCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionCount.setDescription('The total number of ARE frames seen by the filter.')
madgeAbcTokenRingAreConversionFiltered = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionFiltered.setDescription('The total number of ARE frames the filter has converted into STEs.')
madgeAbcTokenRingAreConversionMode = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("all", 2), ("bcast-first", 3), ("bcast-all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionMode.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcTokenRingAreConversionMode.setDescription('This variable controls the action taken when forwarding All Routes Explorer frames. first: convert all ARE frames with a RIF length of 2 to STE frames. all: convert all ARE frames to STE frames. bcast-first: convert all ARE frames with the broadcast destination address, with a RIF length of 2 to STE frames. bcast-all: convert all ARE frames with the broadcast destination address to STE frames.')
madgeAbcNetbiosNameState = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 1, 1), AbcState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcNetbiosNameState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosNameState.setDescription('The current state of the NetBIOS name filter. disable: Perform no action. enable: Frames sent to recognised NetBIOS names will be forwarded on the port(s) on which the names are known to exist. monitor: No filtering will be performed but the potential performance of the filter will be measured, i.e. the count and timeout keys will be incremented as if the filter was on.')
madgeAbcNetbiosNameFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 1, 2), AbcFlush()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcNetbiosNameFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosNameFlushCache.setDescription('Write the value 1 (flush) to flush the NetBIOS name filter cache and reset counters.')
madgeAbcNetbiosNameCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcNetbiosNameCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosNameCount.setDescription('The total number of NetBIOS frames seen by the filter that have a named destination.')
madgeAbcNetbiosNameFiltered = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcNetbiosNameFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosNameFiltered.setDescription('The total number of NetBIOS frames that the filter has been able to forward on the appropriate port(s).')
madgeAbcNetbiosNameTimeout = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcNetbiosNameTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosNameTimeout.setDescription('The time for which a name will remain in the NetBIOS name cache. Default value : 78000 (centiseconds) (=13 minutes) Minimum value : 100 Maximum value : 60480000 (=1 day)')
madgeAbcNetbiosNameForwardTimeout = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcNetbiosNameForwardTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosNameForwardTimeout.setDescription('The time for which NAME_QUERY frames for a name will be forwarded without receiving a reply. If no reply is received within this time the entry will be removed from the cache Default value : 40 (centiseconds) (=.4 seconds) Minimum value : 10 Maximum value : 6000 (=1 minute)')
madgeAbcNetbiosAddNameState = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 2, 1), AbcState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameState.setDescription('The current state of the NetBIOS ADD_NAME_QUERY filter. disable: Perform no action. enable: The frequency of retries by NetBIOS stations will be limited to a certain number over a particular period of time. The number and time are configureable. monitor: No filtering will be performed but the potential performance of the filter will be measured, i.e. the count and timeout keys will be incremented as if the filter was on.')
madgeAbcNetbiosAddNameFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 2, 2), AbcFlush()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameFlushCache.setDescription('Write the value 1 (flush) to flush the ADD_NAME_QUERY filter cache and reset counters.')
madgeAbcNetbiosAddNameCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameCount.setDescription('The total number of ADD_NAME_QUERY NetBIOS frames seen by the filter.')
madgeAbcNetbiosAddNameFiltered = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameFiltered.setDescription('The total number of ADD_NAME_QUERY NetBIOS frames that have been removed by the filter.')
madgeAbcNetbiosAddNameRetryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 2, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameRetryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameRetryPeriod.setDescription('The time over which a maximum number of ADD_NAME_QUERY frames will be forwarded. Default value : 500 (centiseconds) Minimum value : 100 Maximum value : 6000 (=1 minute)')
madgeAbcNetbiosAddNameRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcNetbiosAddNameRetryCount.setDescription('The maximum number of times a ADD_NAME_QUERY frame will be forwarded within a given period of time. Default value : 2 Minimum value : 1 Maximum value : 10')
madgeAbcIpArpState = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 4, 1, 1), AbcState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpArpState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpArpState.setDescription('The current state of the ARP filter. disable: Perform no action. enable: ARP frames for recognised IP addresses will be forwarded only on the port(s) on which the IP address is known to be. monitor: No filtering will be performed but the potential performance of the filter will be measured, i.e. the count and timeout keys will be incremented as if the filter was on.')
madgeAbcIpArpFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 4, 1, 2), AbcFlush()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpArpFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpArpFlushCache.setDescription('Write the value 1 (flush) to flush the ARP filter cache and reset counters.')
madgeAbcIpArpCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcIpArpCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpArpCount.setDescription('The total number of ARP frames seen by the filter.')
madgeAbcIpArpFiltered = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcIpArpFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpArpFiltered.setDescription('The total number of ARP frames that the filter has been able to forward on the appropriate port(s).')
madgeAbcIpArpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 4, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpArpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpArpTimeout.setDescription('The time for which an IP address will remain in the ARP cache. Default value : 60000 (centiseconds) (=10 minutes) Minimum value : 100 Maximum value : 60480000 (=1 day)')
madgeAbcIpxRipSapSuppressState = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 1, 1), AbcState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressState.setDescription('The current state of the RIP/SAP suppression filter. disable: Perform no action. enable: IPX RIP and SAP Response frames will be forwarded only to those ports that have recently sourced such a frame. This reduces the number of gratuitous frames sent out on LANs that only have IPX workstations attached. monitor: No filtering will be performed but the potential performance of the filter will be measured, i.e. the count and timeout keys will be incremented as if the filter was on.')
madgeAbcIpxRipSapSuppressFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 1, 2), AbcFlush()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressFlushCache.setDescription('Write the value 1 (flush) to flush the IPX RIP/SAP suppression filter cache and reset counters.')
madgeAbcIpxRipSapSuppressCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressCount.setDescription('The total number of RIP and SAP frames seen by the filter.')
madgeAbcIpxRipSapSuppressFiltered = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressFiltered.setDescription('The total number of frames the filter has has been able to filter.')
madgeAbcIpxRipSapSuppressTimeout = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxRipSapSuppressTimeout.setDescription('The time for which a port will receive RIP and SAP response frames after sourcing such a frame. Default value : 60000 (centiseconds) (=10 minutes) Minimum value : 36000 (=6 minutes) Maximum value : 720000 (=2 hours)')
madgeAbcIpxType20FilterState = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 2, 1), AbcState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpxType20FilterState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxType20FilterState.setDescription('The current state of the IPX Type 20 filter. disable: Perform no action. enable: Only optimal Type 20 frames will be forwared onto other ports - optimal frames are those which are quicker or have shorter routing information than other frames. monitor: No filtering will be performed but the potential performance of the filter will be measured, i.e. the count and timeout keys will be incremented as if the filter was on.')
madgeAbcIpxType20FilterFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 2, 2), AbcFlush()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpxType20FilterFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxType20FilterFlushCache.setDescription('Write the value 1 (flush) to flush the Type 20 filter cache and reset counters.')
madgeAbcIpxType20FilterCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcIpxType20FilterCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxType20FilterCount.setDescription('The total number of Type 20 frames seen by the filter.')
madgeAbcIpxType20FilterFiltered = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeAbcIpxType20FilterFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxType20FilterFiltered.setDescription('The total number of Type 20 frames the filter has removed.')
madgeAbcIpxType20FilterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 494, 15, 5, 2, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeAbcIpxType20FilterTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: madgeAbcIpxType20FilterTimeout.setDescription('The maximum lifetime of an entry in the Type 20 filter cache. Default value : 100 (centiseconds) Minimum value : 25 Maximum value : 6000 (=1 minute)')
mibBuilder.exportSymbols("MADGE-ABC-MIB", madgeAbcNetbiosAddName=madgeAbcNetbiosAddName, madgeAbcIpArp=madgeAbcIpArp, madgeAbcTokenRingAreFilterState=madgeAbcTokenRingAreFilterState, madge=madge, madgeAbcTokenRingAreFilterTimeout=madgeAbcTokenRingAreFilterTimeout, madgeAbcVersion=madgeAbcVersion, AbcState=AbcState, madgeAbcTokenRingAreConversion=madgeAbcTokenRingAreConversion, madgeAbcIpxType20FilterFlushCache=madgeAbcIpxType20FilterFlushCache, madgeAbcTokenRingAreConversionFlushCache=madgeAbcTokenRingAreConversionFlushCache, AbcFlush=AbcFlush, madgeAbcTokenRingAreConversionMode=madgeAbcTokenRingAreConversionMode, madgeAbcNetbiosNameFiltered=madgeAbcNetbiosNameFiltered, madgeAbcNetbiosNameFlushCache=madgeAbcNetbiosNameFlushCache, madgeAbcNetbiosNameForwardTimeout=madgeAbcNetbiosNameForwardTimeout, madgeAbc=madgeAbc, madgeAbcIpxType20Filter=madgeAbcIpxType20Filter, madgeAbcIpArpCount=madgeAbcIpArpCount, madgeAbcTokenRingAreConversionFiltered=madgeAbcTokenRingAreConversionFiltered, madgeAbcIpArpFiltered=madgeAbcIpArpFiltered, madgeAbcTokenRingAreFilterFiltered=madgeAbcTokenRingAreFilterFiltered, madgeAbcNetbiosNameCount=madgeAbcNetbiosNameCount, madgeAbcTokenRing=madgeAbcTokenRing, madgeAbcIpArpState=madgeAbcIpArpState, madgeAbcNetbios=madgeAbcNetbios, madgeAbcNetbiosAddNameRetryCount=madgeAbcNetbiosAddNameRetryCount, madgeAbcIpxType20FilterState=madgeAbcIpxType20FilterState, madgeAbcIpxRipSapSuppressCount=madgeAbcIpxRipSapSuppressCount, madgeAbcNetbiosName=madgeAbcNetbiosName, madgeAbcTokenRingAreFilterFlushCache=madgeAbcTokenRingAreFilterFlushCache, madgeAbcIpxRipSapSuppressFiltered=madgeAbcIpxRipSapSuppressFiltered, madgeAbcIp=madgeAbcIp, madgeAbcNetbiosNameState=madgeAbcNetbiosNameState, madgeAbcIpArpFlushCache=madgeAbcIpArpFlushCache, madgeAbcIpArpTimeout=madgeAbcIpArpTimeout, madgeAbcIpxRipSapSuppressTimeout=madgeAbcIpxRipSapSuppressTimeout, madgeAbcNetbiosAddNameFlushCache=madgeAbcNetbiosAddNameFlushCache, madgeAbcIpxType20FilterCount=madgeAbcIpxType20FilterCount, madgeAbcTokenRingAreConversionState=madgeAbcTokenRingAreConversionState, madgeAbcIpxRipSapSuppressState=madgeAbcIpxRipSapSuppressState, madgeAbcNetbiosAddNameState=madgeAbcNetbiosAddNameState, madgeAbcNetbiosNameTimeout=madgeAbcNetbiosNameTimeout, madgeAbcNetbiosAddNameRetryPeriod=madgeAbcNetbiosAddNameRetryPeriod, madgeAbcIpxRipSapSuppress=madgeAbcIpxRipSapSuppress, madgeAbcIpxRipSapSuppressFlushCache=madgeAbcIpxRipSapSuppressFlushCache, madgeAbcIpxType20FilterFiltered=madgeAbcIpxType20FilterFiltered, madgeAbcIpx=madgeAbcIpx, madgeAbcTokenRingAreConversionCount=madgeAbcTokenRingAreConversionCount, madgeAbcTokenRingAreFilter=madgeAbcTokenRingAreFilter, madgeAbcNetbiosAddNameCount=madgeAbcNetbiosAddNameCount, madgeAbcNetbiosAddNameFiltered=madgeAbcNetbiosAddNameFiltered, madgeAbcIpxType20FilterTimeout=madgeAbcIpxType20FilterTimeout, madgeAbcTokenRingAreFilterCount=madgeAbcTokenRingAreFilterCount)
