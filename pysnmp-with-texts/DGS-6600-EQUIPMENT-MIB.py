#
# PySNMP MIB module DGS-6600-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-6600-EQUIPMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:45:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
dgs6600_system, = mibBuilder.importSymbols("DGS-6600-ID-MIB", "dgs6600-system")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Bits, iso, Counter32, NotificationType, IpAddress, ModuleIdentity, ObjectIdentity, MibIdentifier, Gauge32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Bits", "iso", "Counter32", "NotificationType", "IpAddress", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Gauge32", "Unsigned32", "Counter64")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
dgs6600EquipmentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2))
if mibBuilder.loadTexts: dgs6600EquipmentMIB.setLastUpdated('1302070000Z')
if mibBuilder.loadTexts: dgs6600EquipmentMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: dgs6600EquipmentMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: dgs6600EquipmentMIB.setDescription('The structure of chassis HW function for the proprietary enterprise.')
chassisControlModuleLEDInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1))
chassisPowerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2))
chassisFanTrayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3))
chassisSlotInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4))
chassisTemperatureInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5))
chassisPortLEDInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6))
chassisControlModuleLEDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1), )
if mibBuilder.loadTexts: chassisControlModuleLEDInfoTable.setStatus('current')
if mibBuilder.loadTexts: chassisControlModuleLEDInfoTable.setDescription('TBD.')
chassisControlModuleLEDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisControlModuleLEDInfoIndex"))
if mibBuilder.loadTexts: chassisControlModuleLEDInfoEntry.setStatus('current')
if mibBuilder.loadTexts: chassisControlModuleLEDInfoEntry.setDescription('TBD.')
chassisControlModuleLEDInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoIndex.setStatus('current')
if mibBuilder.loadTexts: chassisControlModuleLEDInfoIndex.setDescription('This object indicates the slot index of Control Module.')
chassisControlModuleLEDInfoConsole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rs232", 1), ("usb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoConsole.setStatus('current')
if mibBuilder.loadTexts: chassisControlModuleLEDInfoConsole.setDescription('This object indicates the console type. There are two different interfaces: 1: RS232. 2: USB.')
chassisControlModuleLEDInfoMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMaster.setStatus('current')
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMaster.setDescription('This object indicates whether this control module is master or not? 1: This control module is active CM. 2: This control module is standby CM.')
chassisControlModuleLEDInfoCPUUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zero-LED", 0), ("one-LED", 1), ("two-LEDs", 2), ("three-LEDs", 3), ("four-LEDs", 4), ("five-LEDs", 5), ("six-LEDs", 6), ("seven-LEDs", 7), ("eight-LEDs", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoCPUUtilization.setStatus('current')
if mibBuilder.loadTexts: chassisControlModuleLEDInfoCPUUtilization.setDescription('This object indicates the CPU utilization(in percentage) of this control module.')
chassisControlModuleLEDInfoMgmtPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("steady-green", 2), ("blinking-green", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMgmtPortStatus.setStatus('current')
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMgmtPortStatus.setDescription('This object indicates the management port status.')
chassisControlModuleLEDInfoMgmtPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link-0", 1), ("link-100", 2), ("link-1000", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMgmtPortSpeed.setStatus('current')
if mibBuilder.loadTexts: chassisControlModuleLEDInfoMgmtPortSpeed.setDescription('This object indicates the management port link speed.')
chassisPowerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1), )
if mibBuilder.loadTexts: chassisPowerInfoTable.setStatus('current')
if mibBuilder.loadTexts: chassisPowerInfoTable.setDescription('TBD.')
chassisPowerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisPowerIndex"))
if mibBuilder.loadTexts: chassisPowerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: chassisPowerInfoEntry.setDescription('TBD.')
chassisPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerIndex.setStatus('current')
if mibBuilder.loadTexts: chassisPowerIndex.setDescription('This object indicates the PSU index.')
chassisPowerExist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("empty", 1), ("exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerExist.setStatus('current')
if mibBuilder.loadTexts: chassisPowerExist.setDescription('This object indicates whether the specified PSU is exist or not. 1: The PSU is not exist. 2: The PSU is installed.')
chassisPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("AC", 1), ("DC", 2), ("Unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerType.setStatus('current')
if mibBuilder.loadTexts: chassisPowerType.setDescription('This object indicates the PSU type. 1: The PSU type is AC. 2: The PSU type is DC. 3: The PSU type is unknown.')
chassisPowerAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("in-operation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerAlive.setStatus('current')
if mibBuilder.loadTexts: chassisPowerAlive.setDescription('This object indicates whether the specified PSU is alive or not. 1: The PSU is not available. 2: The PSU is working normally.')
chassisPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerVoltage.setStatus('current')
if mibBuilder.loadTexts: chassisPowerVoltage.setDescription('This object indicates the output voltage(V) of the specified PSU.')
chassisPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerCurrent.setStatus('current')
if mibBuilder.loadTexts: chassisPowerCurrent.setDescription('This object indicates the output current(mA) of the specified PSU.')
chassisPowerPowerWatt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerPowerWatt.setStatus('current')
if mibBuilder.loadTexts: chassisPowerPowerWatt.setDescription('This object indicates the output power(W) of the specified PSU.')
chassisPowerFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerFanSpeed.setStatus('current')
if mibBuilder.loadTexts: chassisPowerFanSpeed.setDescription('This object indicates the internal fan speed(rpm) of specified PSU.')
chassisFanTrayInfoState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-exist", 1), ("failed", 2), ("in-operation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanTrayInfoState.setStatus('current')
if mibBuilder.loadTexts: chassisFanTrayInfoState.setDescription('This object indicates the fan tray state. There are three different state: 1. Not existed 2. Existed but failed 3. Working normally')
chassisFanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2), )
if mibBuilder.loadTexts: chassisFanInfoTable.setStatus('current')
if mibBuilder.loadTexts: chassisFanInfoTable.setDescription('TBD.')
chassisFanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisFanIndex"))
if mibBuilder.loadTexts: chassisFanInfoEntry.setStatus('current')
if mibBuilder.loadTexts: chassisFanInfoEntry.setDescription('TBD.')
chassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanIndex.setStatus('current')
if mibBuilder.loadTexts: chassisFanIndex.setDescription('This object indicates the fan tray index.')
chassisFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanStatus.setStatus('current')
if mibBuilder.loadTexts: chassisFanStatus.setDescription('This object indicates the fan status(ok or failed).')
chassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanSpeed.setStatus('current')
if mibBuilder.loadTexts: chassisFanSpeed.setDescription('This object indicates the fan speed in RPM.')
chassisSlotInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1), )
if mibBuilder.loadTexts: chassisSlotInfoTable.setStatus('current')
if mibBuilder.loadTexts: chassisSlotInfoTable.setDescription('TBD.')
chassisSlotInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisSlotIndex"))
if mibBuilder.loadTexts: chassisSlotInfoEntry.setStatus('current')
if mibBuilder.loadTexts: chassisSlotInfoEntry.setDescription('TBD.')
chassisSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chassisSlotIndex.setDescription('This object indicates the slot index.')
chassisSlotState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("empty", 1), ("no-power", 2), ("failed", 3), ("booting", 4), ("in-operation", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotState.setStatus('current')
if mibBuilder.loadTexts: chassisSlotState.setDescription('This object indicates the slot state: 1: The slot has no card installed. 2: The card which installed at this slot is not powered up. 3: The card which installed at this slot is failed. 4: The card which installed at this slot is booting up. 5: The card is powered up.')
chassisSlotLEDPoEModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotLEDPoEModeEnabled.setStatus('current')
if mibBuilder.loadTexts: chassisSlotLEDPoEModeEnabled.setDescription('This object indicates whether the PoE mode is enabled or not?')
chassisSlotModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotModel.setStatus('current')
if mibBuilder.loadTexts: chassisSlotModel.setDescription('This object indicates the card model name.')
chassisSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chassisSlotSerialNumber.setDescription('This object indicates the serial number of the installed card.')
chassisSlotHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotHwVersion.setStatus('current')
if mibBuilder.loadTexts: chassisSlotHwVersion.setDescription('This object indicates the HW version of the installed card.')
chassisSlotPCBAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotPCBAVersion.setStatus('current')
if mibBuilder.loadTexts: chassisSlotPCBAVersion.setDescription('This object indicates the PCBA version of the installed card.')
chassisSlotBootloaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotBootloaderVersion.setStatus('current')
if mibBuilder.loadTexts: chassisSlotBootloaderVersion.setDescription('This object indicates the PCBA version of the installed card.')
chassisSlotRuntimeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotRuntimeVersion.setStatus('current')
if mibBuilder.loadTexts: chassisSlotRuntimeVersion.setDescription('This object indicates the runtime version of the installed card.')
chassisSlotCPLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotCPLDVersion.setStatus('current')
if mibBuilder.loadTexts: chassisSlotCPLDVersion.setDescription('This object indicates the CPLD version of the installed card.')
chassisSlotFirsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotFirsMacAddress.setStatus('current')
if mibBuilder.loadTexts: chassisSlotFirsMacAddress.setDescription('This object indicates the first MAC address of the installed card.')
chassisSlotNumberOfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotNumberOfMacAddress.setStatus('current')
if mibBuilder.loadTexts: chassisSlotNumberOfMacAddress.setDescription('This object indicates the number of MAC address of the installed card.')
chassisTemperatureInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1), )
if mibBuilder.loadTexts: chassisTemperatureInfoTable.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureInfoTable.setDescription('TBD.')
chassisTemperatureInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisTemperatureSlotIndex"))
if mibBuilder.loadTexts: chassisTemperatureInfoEntry.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureInfoEntry.setDescription('TBD.')
chassisTemperatureSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureSlotIndex.setDescription('This object indicates the slot number which is currently querying.')
chassisTemperatureInletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureInletCurrent.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureInletCurrent.setDescription('This object displays the current temperature of Inlet sensor.')
chassisTemperatureInletOverheat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureInletOverheat.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureInletOverheat.setDescription('This object displays the overheat threshold of Inlet sensor.')
chassisTemperatureInletHeatdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureInletHeatdown.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureInletHeatdown.setDescription('This object displays the heatdown threshold of Inlet sensor.')
chassisTemperatureCenterCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureCenterCurrent.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureCenterCurrent.setDescription('This object displays the current temperature of Center sensor.')
chassisTemperatureCenterOverheat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureCenterOverheat.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureCenterOverheat.setDescription('This object displays the overheat threshold of Center sensor.')
chassisTemperatureCenterHeatdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureCenterHeatdown.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureCenterHeatdown.setDescription('This object displays the heatdown threshold of Center sensor.')
chassisTemperatureOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureOutletCurrent.setDescription('This object displays the current temperature of Outlet sensor. The string N/A will be displayed to indicate that the card has no this sensor.')
chassisTemperatureOutletOverheat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureOutletOverheat.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureOutletOverheat.setDescription('This object displays the overheat threshold of Outlet sensor. The string N/A will be displayed to indicate that the card has no this sensor.')
chassisTemperatureOutletHeatdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 5, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureOutletHeatdown.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureOutletHeatdown.setDescription('This object displays the outlet threshold of Outlet sensor. The string N/A will be displayed to indicate that the card has no this sensor.')
chassisPortLEDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1), )
if mibBuilder.loadTexts: chassisPortLEDInfoTable.setStatus('current')
if mibBuilder.loadTexts: chassisPortLEDInfoTable.setDescription('TBD.')
chassisPortLEDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1), ).setIndexNames((0, "DGS-6600-EQUIPMENT-MIB", "chassisPortLEDIFIndex"))
if mibBuilder.loadTexts: chassisPortLEDInfoEntry.setStatus('current')
if mibBuilder.loadTexts: chassisPortLEDInfoEntry.setDescription('TBD.')
chassisPortLEDIFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDIFIndex.setStatus('current')
if mibBuilder.loadTexts: chassisPortLEDIFIndex.setDescription('This object indicates the interface index.')
chassisPortLEDIFName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDIFName.setStatus('current')
if mibBuilder.loadTexts: chassisPortLEDIFName.setDescription('This object indicates the interface name.')
chassisPortLEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("steady-amber", 2), ("steady-green", 3), ("blinking-amber", 4), ("blinking-green", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDStatus.setStatus('current')
if mibBuilder.loadTexts: chassisPortLEDStatus.setDescription('This object indicates the port LED status: 1: The port LED status of the interface index is off. 2: The port LED status of the interface index is steady-amber. 3: The port LED status of the interface index is steady-green. 4: The port LED status of the interface index is blinking-amber. 5: The port LED status of the interface index is blinking-green.')
chassisPortLEDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("poe", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDMode.setStatus('current')
if mibBuilder.loadTexts: chassisPortLEDMode.setDescription('This object indicates the port LED mode: 1: The port LED is in Ethernet mode. 2: The poer LED is in PoE mode.')
chassisPortLEDMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 1, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPortLEDMediumType.setStatus('current')
if mibBuilder.loadTexts: chassisPortLEDMediumType.setDescription('This object indicates the port LED medium type: 1: The medium type of port LED is copper. 2: The medium type of port LED is fiber.')
mibBuilder.exportSymbols("DGS-6600-EQUIPMENT-MIB", chassisSlotSerialNumber=chassisSlotSerialNumber, chassisTemperatureCenterCurrent=chassisTemperatureCenterCurrent, chassisControlModuleLEDInfoCPUUtilization=chassisControlModuleLEDInfoCPUUtilization, chassisPowerInfoTable=chassisPowerInfoTable, chassisPowerInfoEntry=chassisPowerInfoEntry, dgs6600EquipmentMIB=dgs6600EquipmentMIB, chassisPortLEDInfoEntry=chassisPortLEDInfoEntry, chassisTemperatureSlotIndex=chassisTemperatureSlotIndex, chassisControlModuleLEDInfo=chassisControlModuleLEDInfo, chassisSlotRuntimeVersion=chassisSlotRuntimeVersion, chassisPortLEDInfoTable=chassisPortLEDInfoTable, chassisPowerIndex=chassisPowerIndex, chassisTemperatureCenterHeatdown=chassisTemperatureCenterHeatdown, chassisSlotInfoEntry=chassisSlotInfoEntry, chassisSlotNumberOfMacAddress=chassisSlotNumberOfMacAddress, chassisSlotModel=chassisSlotModel, chassisSlotPCBAVersion=chassisSlotPCBAVersion, PYSNMP_MODULE_ID=dgs6600EquipmentMIB, chassisControlModuleLEDInfoMgmtPortSpeed=chassisControlModuleLEDInfoMgmtPortSpeed, chassisFanTrayInfoState=chassisFanTrayInfoState, chassisControlModuleLEDInfoEntry=chassisControlModuleLEDInfoEntry, chassisSlotInfoTable=chassisSlotInfoTable, chassisSlotLEDPoEModeEnabled=chassisSlotLEDPoEModeEnabled, chassisPowerAlive=chassisPowerAlive, chassisTemperatureInfoEntry=chassisTemperatureInfoEntry, chassisPortLEDMode=chassisPortLEDMode, chassisSlotState=chassisSlotState, chassisPortLEDIFName=chassisPortLEDIFName, chassisPowerInfo=chassisPowerInfo, chassisPortLEDMediumType=chassisPortLEDMediumType, chassisTemperatureInletHeatdown=chassisTemperatureInletHeatdown, chassisControlModuleLEDInfoConsole=chassisControlModuleLEDInfoConsole, chassisPowerFanSpeed=chassisPowerFanSpeed, chassisFanIndex=chassisFanIndex, chassisTemperatureOutletOverheat=chassisTemperatureOutletOverheat, chassisTemperatureInfo=chassisTemperatureInfo, chassisTemperatureCenterOverheat=chassisTemperatureCenterOverheat, chassisSlotCPLDVersion=chassisSlotCPLDVersion, chassisFanStatus=chassisFanStatus, chassisControlModuleLEDInfoMgmtPortStatus=chassisControlModuleLEDInfoMgmtPortStatus, chassisFanInfoEntry=chassisFanInfoEntry, chassisSlotFirsMacAddress=chassisSlotFirsMacAddress, chassisTemperatureInletCurrent=chassisTemperatureInletCurrent, chassisPortLEDIFIndex=chassisPortLEDIFIndex, chassisPowerExist=chassisPowerExist, chassisTemperatureInletOverheat=chassisTemperatureInletOverheat, chassisPowerPowerWatt=chassisPowerPowerWatt, chassisSlotHwVersion=chassisSlotHwVersion, chassisPowerType=chassisPowerType, chassisControlModuleLEDInfoMaster=chassisControlModuleLEDInfoMaster, chassisPortLEDStatus=chassisPortLEDStatus, chassisPowerCurrent=chassisPowerCurrent, chassisSlotInfo=chassisSlotInfo, chassisFanInfoTable=chassisFanInfoTable, chassisControlModuleLEDInfoIndex=chassisControlModuleLEDInfoIndex, chassisControlModuleLEDInfoTable=chassisControlModuleLEDInfoTable, chassisPowerVoltage=chassisPowerVoltage, chassisSlotIndex=chassisSlotIndex, chassisSlotBootloaderVersion=chassisSlotBootloaderVersion, chassisTemperatureInfoTable=chassisTemperatureInfoTable, chassisPortLEDInfo=chassisPortLEDInfo, chassisFanSpeed=chassisFanSpeed, chassisTemperatureOutletCurrent=chassisTemperatureOutletCurrent, chassisTemperatureOutletHeatdown=chassisTemperatureOutletHeatdown, chassisFanTrayInfo=chassisFanTrayInfo)
