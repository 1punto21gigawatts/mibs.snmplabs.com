#
# PySNMP MIB module SVRMGT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SVRMGT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, enterprises, TimeTicks, Counter64, ModuleIdentity, ObjectIdentity, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, mgmt, NotificationType, IpAddress, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "enterprises", "TimeTicks", "Counter64", "ModuleIdentity", "ObjectIdentity", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "mgmt", "NotificationType", "IpAddress", "MibIdentifier", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class SnmpErrors(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("noError", 1), ("tooBig", 2), ("readonly", 3), ("genericError", 4), ("noSuchName", 5), ("badValue", 6))

class Severity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("high", 1), ("medium", 2), ("low", 3), ("informational", 4))

class AlarmCategory(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("processorStatus", 3), ("diskStatus", 4), ("fanStatus", 5), ("voltageStatus", 6), ("powerSupplyStatus", 7), ("temperatureStatus", 8), ("memoryStatus", 9), ("fileUsage", 10), ("temperatureReading", 11), ("cpuUsage", 12), ("networkInboundErrors", 13), ("networkOutboundErrors", 14), ("networkInboundPackets", 15), ("networkOutboundPackets", 16), ("networkInboundDiscards", 17), ("networkOutboundDiscards", 18), ("networkInboundUnicastPackets", 19), ("networkOutboundUnicastPackets", 20), ("networkInboundNonUnicastPackets", 21), ("networkOutboundNonUnicastPackets", 22), ("networkInboundOctets", 23), ("networkOutboundOctets", 24), ("networkUnknownProtocol", 25), ("voltageReading", 26), ("clusterGroupStatus", 27), ("secureBoxStatus", 28), ("secureBoxBreakInCount", 29))

class ResetRelationalOperators(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("greaterThan", 1), ("greaterThanOrEqualTo", 2), ("equalTo", 3), ("lessThanOrEqualTo", 4), ("lessThan", 5), ("notEqualTo", 6))

class ThresholdOwner(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("serverWorks", 3), ("serverWorksMinimalHealth", 4), ("netView", 5), ("openView", 6), ("uniCenter", 7), ("distributedMonitor", 8), ("bmcPatrol", 9), ("eminate", 10))

mib_extensions_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18)).setLabel("mib-extensions-1")
svrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22))
svrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2))
svrMgtMibInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 1))
svrAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2))
svrControl = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 3))
svrTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4))
svrMinimalHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5))
svrMgtMibMajorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMgtMibMajorRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrMgtMibMajorRev.setDescription('Major revision of this MIB. Should equal 2.')
svrMgtMibMinorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMgtMibMinorRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrMgtMibMinorRev.setDescription('Minor revision of this mib. Should be 0.')
svrAlarmNextThrIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrAlarmNextThrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrAlarmNextThrIndex.setDescription('Next available index for creating a svrThrEntry. If the value is -1 then the maximum number of thresholds has been reached. This means that a threshold record can not be created until a current threshold record is deleted. ')
svrAlarmEnableTraps = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 2), Boolean())
if mibBuilder.loadTexts: svrAlarmEnableTraps.setStatus('obsolete')
if mibBuilder.loadTexts: svrAlarmEnableTraps.setDescription('Starting with V2.0, this variable has been moved. Use the svrControlEnableTraps for the same functionality.')
svrThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3), )
if mibBuilder.loadTexts: svrThresholdTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrThresholdTable.setDescription('Table of thresholds against which the agent should check for exceptions. This table describes conditions for setting and resetting alarms. Alarms may be set on absolute values - i.e. the current integer value of the sampled variable - or on delta values - i.e. the difference between the current or last value. Alarms may be GreaterThan exception alarms, LessThan exception alarms, EqualsTo alarms etc. See svrThrAlarmType for differences. Hysteresis is introduced by providing thresholds both for setting and resetting of the alarm state, thereby limiting the number of traps that will be sent on alarm triggering. Alarms may be created to persist across agent reboots, but this is not recommended for dynamic table variables. The triggering of an alarm will change a state variable in the conceptual row. It may also trigger the sending of a trap, the local logging of an event, or the triggering of a locally- defined action. ')
svrThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1), ).setIndexNames((0, "SVRMGT-MIB", "svrThrIndex"))
if mibBuilder.loadTexts: svrThresholdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrThresholdEntry.setDescription('One threshold alarm set on some particular integer-valued variable. An alarm entry is created by the management console. It uses the current value of svrAlarmNextThrIndex to name the instances of the row variables, and sets its svrThrStatus to underCreation. When creating a theshold entry for the first time, issue a set request on svrThrStatus. The remaining row variables may be set in the same operation, or in subsequent operations. Those not set will have retain their default values as described. The following variable values MUST be set before enabling the alarm: svrThrStatus must be set to underCreation svrThrVariableName svrThrThresholdValue ')
svrThrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrIndex.setDescription('A locally-unique index value. On creation, this should be set to the value of svrAlarmNextThrIndex.')
svrThrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("underCreation", 1), ("rowInvalid", 2), ("rowEnabled", 3), ("rowDisabled", 4), ("rowError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrStatus.setDescription(' This variable describes the status of the row. When the row is created with the initial set, svrThrStatus must be set to underCreation. When the management console has completed row setup, it should set this variable to rowEnabled. Variables in the row may only be written if svrThrStatus is in the initial underCreation state or has been set to rowDisabled. To delete the row, set the status to rowInvalid. The agent will physically delete the row and make that instance available to be used again. Errors in variable polling and threshold checking that are determined by local implementation to be non-correctable will cause a row status change to rowError. Once the status is set to rowError by the agent, the agent will not reset it. Instead, it is up to the management console to reset the status based on information returned via svrThrErrorValue or for other reasons. ')
svrThrVariableName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrVariableName.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrVariableName.setDescription("The OID of an integer-valued variable to be tested against this threshold. On row creation, this variable will equal the value 0.0, and must be set to the OID of an integer-valued variable before enabling the alarm. It's possible to get an error setting this due to invalid oid (may not support thresholding on this oid due to data type perhaps) or that we couldn't access the agent that supports this oid.")
svrThrValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrValueType.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrValueType.setDescription('Is this an absolute value or a delta value. The deltaValue is calculated by taking the current value and subtracting svtThrLastValue. The difference may be negative - allows for thresholding on negative changes.Default on row creation is absoluteValue. ')
svrThrAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("greaterThan", 1), ("greaterThanOrEqualTo", 2), ("equalTo", 3), ("lessThanOrEqualTo", 4), ("lessThan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrAlarmType.setDescription('Is this a greater than, greater than or equal to, equal to, less than or equal to, or less than alarm? Greater Than or Greater Than or Equal To thresholds for absolute values occur when the sample value exceeds (or equals) the svrThrThresholdValue and svrThrAlarmState was reset. This will cause the svrThrAlarmState to be set and, if svrAlarmEnableTraps is true, a svrThrExceptTrap will be sent. SvrThrAlarmState will be reset when the sample value falls below or equals svrThrResetValue. For delta values, the same holds true except the difference between the sample value and the svrThrLastValue is used for comparison with both the svrThrThresholdValue and the svrThrResetValue. Less Than or Less Than or Equal To thresholds for absolute values occur when the sample value falls below (or equals) the svrThrThresholdValue and svrThrAlarmState was reset. This will cause the svrThrAlarmState to be set and, if svrAlarmEnableTraps is true, a svrThrExceptTrap will be sent. SvrThrAlarmState will be reset when the sample value exceeds or equals svrThrResetValue. For delta values, the same holds true except the difference between the sample value and the svrThrLastValue is used for comparison with both the svrThrThresholdValue and the svrThrResetValue. Equal To thresholds for absolute values occur when the sample value equals svrThrThresholdValue and svrThrAlarmState was reset. This will cause the svrThrAlarmState to be set and, if svrAlarmEnableTraps is true, a svrThrExceptTrap will be sent. SvrThrAlarmState will be reset when the sample value does not equal svrThrResetValue. For delta values, the same holds true except the difference between the sample value and the svrThrLastValue is used for comparison with both the svrThrThresholdValue and the svrThrResetValue. NOTE - It is possible to have negative delta values since the differ- ence is computed as the current value minus the svrThrLastValue. The default value on row creation is greaterThan. ')
svrThrSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrSampleInterval.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrSampleInterval.setDescription('Interval in seconds between polls to check for threshold exceptions. Minimum Value is 1. The default value on row creation is 30 seconds.')
svrThrPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 7), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrPersistent.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrPersistent.setDescription('True if this threshold should persist across agent restarts. Default value on row creation is false.')
svrThrThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrThresholdValue.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrThresholdValue.setDescription('This is the thresholding value which gets compared to the current or delta value. Default value on row creation is 0.')
svrThrResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrResetValue.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrResetValue.setDescription('This is the value that on all svrThrAlarmTypes except for equalTo, is used to reset the threshold. Default value on row creation is 0')
svrThrLastValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThrLastValue.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrLastValue.setDescription('Saved previous sample; needed to evaluate if alarm should be triggered or to evaluate delta values for threshold checking.')
svrThrAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("reset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThrAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrAlarmState.setDescription('Whether this alarm is currently set or reset. This variable is used by polling management applications to determine if a threshold exception state has been detected based on this alarm definition. It will initially have a value of reset when the alarm is enabled. For state change rules look at the definition for svrThrAlarmType. In all cases, this value will reset on svrThrStatus change to rowDisabled or rowInvalid. The default value on row creation is reset.')
svrThrLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrLogEvent.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrLogEvent.setDescription('If yes, log to the system event log. Default value on row creation is false.')
svrThrInvokeLocalHandler = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 13), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrInvokeLocalHandler.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrInvokeLocalHandler.setDescription('If true, invoke a local alarm handler, passing the concatenated local handler argument strings starting with argument 1. Default value on row creation is false.')
svrThrLocalHandlerPath = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrLocalHandlerPath.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrLocalHandlerPath.setDescription('Pathname of local alarm handler. This can be any pathname as long as it can be recognized by the particular operating system.')
svrThrDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrDescr.setDescription('This attribute is used to describe the type of threshold. This is set by the management console not by the agent. ')
svrThrErrorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 16), SnmpErrors()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThrErrorValue.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrErrorValue.setDescription('This is the SNMP defined error status which caused the svrThrStatus value to become equal to rowError. Only valid at that time. Default value on row creation is noError.')
svrThrComparisonName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 17), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrComparisonName.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrComparisonName.setDescription("An OID to a descriptor attribute which can be used with persistent to verify that the svrThrVariableName instance is correct. On agent restarts the value for this oid will be retrieved and compared to the svrThrComparisonValue. If not equal, then it's possible that the oid instancing for svrThrVariableName is incorrect. If this occurs, then the svrThrStatus will be set to rowError and the svrThrErrorValue will be set to badValue. This attribute is optional. The default value on row creation is 0.0. Can be reset back to 0.0 if this attribute is not to be used.")
svrThrComparisonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrComparisonValue.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrComparisonValue.setDescription('Data value of svrThrComparisonName - used when persistent is set. This value is compared to the current value on agent restarts. This attribute is optional. The default value on row creation is NULL.')
svrThrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 19), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrSeverity.setDescription('Indicates the severity of the threshold. Default value on row creation is informational.')
svrThrTrapEnabler = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 20), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrTrapEnabler.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrTrapEnabler.setDescription('Determines if a trap should be sent out if the threshold event does occur. If true, a trap will be sent out. If false, a trap will not be sent out. Default value on row creation is true.')
svrThrLocalHandlerArguments1 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrLocalHandlerArguments1.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrLocalHandlerArguments1.setDescription("This is the first part of the argument line if the svrThrInvokeLocalHandler is used. This argument line is passed directly to the application pointed to by the svrThrLocalHandlerPath. A parameter(s) could be substituted anywhere in the argument line with an oid's value if there is a %oid% found within the string. The %oid% will be replaced with the value of the oid at the time the event occurred. For example if the svrSystemDesc value from the Digital Server System mib is required, then the argument list would have a replacement statement like this: %.1.3.6.1.4.1.36.2.18.22.1.2.3.0%. If a value from a threshold record is requested, use %oid% where the oid is .1.3.6.1.4.1.36.2.18.22.2.2.3.1.offset.instance. The offset is the oid offset (from 1 to 30) of the threshold entry variable. For svrThrIndex, the offset is 1. The instance can be dropped if the current threshold record (that which caused the event) is to be used. Otherwise, the instance of the requested threshold entry must be part of the %oid% statement. All the replaced values are inserted into the argument strings as ascii/text strings. For an integer (counter, gauge, etc) value, if the value is negative, there will be a minus sign in front of the value. For a positive number, there is no sign in front of the value. The integer value will be in ascii format - it is the responsibility of the application to convert the text into a decimal number. All octet strings, excluding display strings, will be inserted into the argument string as a text string in the format of 0xoctet value. For example if an octet string (hex based) of 8,23,6a,4e was retrieved using the %oid% format, then the replaced value would be a text string looking like this - 0x8,0x23,0x6a,0x4e where the number are in ascii (displayable) format separated by a comma. The 0x represents the hexadecimal base while the number following that is the ascii representation of the hexadecimal number. For display strings, there will be a pair of quotes around the string. Use of the Handler Arguments must be done in ascending order. No skipping of argument variables is allowed. NOTE - All oids must be preceded with a period(.) for proper system group recognition. Also all argument lists (concatenated starting with argument #1) are separated by a space. Default value on row creation is null.")
svrThrLocalHandlerArguments2 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrLocalHandlerArguments2.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrLocalHandlerArguments2.setDescription('Same semantics as svrThrLocalHandlerArguments1.')
svrThrLocalHandlerArguments3 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrLocalHandlerArguments3.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrLocalHandlerArguments3.setDescription('Same semantics as svrThrLocalHandlerArguments1.')
svrThrLocalHandlerArguments4 = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrLocalHandlerArguments4.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrLocalHandlerArguments4.setDescription('Same semantics as svrThrLocalHandlerArguments1.')
svrThrTrapsSendingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrTrapsSendingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrTrapsSendingInterval.setDescription('Represents how often a trap should be sent if dealing with sending multiple traps per event. The units is minutes. Default value on row creation is 0 minutes. When set to 0, only 1 trap will be sent out per event.')
svrThrManagerDefinedTrapData = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrManagerDefinedTrapData.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrManagerDefinedTrapData.setDescription('This is a string provided by a management console to be sent out with every trap. Default value on row creation is null.')
svrThrUserDefinedTrapData = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrUserDefinedTrapData.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrUserDefinedTrapData.setDescription('This is a string provided by a user via a management console to be sent out with every trap. Default value on row creation is null.')
svrThrRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrRetryCount.setDescription('Allows for a trap to be sent n number of sampling intervals after the threshold event occurred rather than right after the event occurred. This allows for cases when an event is just a momentary event and should not be considered a problem until it has persisted over a number of sampling intervals. If the retry count is 0, then the trap will be sent out immediately after the event has occurred. Default value on row creation is 0.')
svrThrResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 29), ResetRelationalOperators()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrResetType.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrResetType.setDescription("Is this a greater than, greater than or equal to, equal to, less than or equal to, or less than the reset value? This variable works just like the svrThrAlarmType. It is a relational operator used to compare the oid's current value with the svrThrResetValue to determine if the threshold's alarm state should be reset. Default value on row creation is lessThanOrEqualTo.")
svrThrAlarmCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 30), AlarmCategory()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrAlarmCategory.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrAlarmCategory.setDescription('A management station provided variable to allow for classification/grouping of thresholds.')
svrThrTrapOid = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 31), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrTrapOid.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrTrapOid.setDescription('A fully defined OID of a svrmgt trap (other than reset and modify) that will be sent out when an event occurs. This OID will override the usage of the svrThrSeverity value when choosing the appropriate trap. NOTE - The svrmgt trap OID must be preceded with a period(.) for proper system group recognition. This attribute is optional. The default value on row creation is 0.0.')
svrThrCreatedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 32), ThresholdOwner()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrCreatedBy.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrCreatedBy.setDescription('Represents the creator of this threshold. This variable can be modified only during threshold creation. The default value on row creation is the unknown value. ')
svrThrModifiable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 2, 3, 1, 33), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThrModifiable.setStatus('mandatory')
if mibBuilder.loadTexts: svrThrModifiable.setDescription('Determines whether modification of the threshold record is allowed after creation. If false, modification is allowed only during row creation. This variable can be modified only during threshold creation. The default value on row creation is true. ')
svrControlEnableTraps = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 3, 1), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrControlEnableTraps.setStatus('mandatory')
if mibBuilder.loadTexts: svrControlEnableTraps.setDescription('If true, the appropriate exception trap will be sent for each triggered alarm. This value persists over agent restarts. Default value is true.')
svrControlEnableModifyTraps = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 3, 2), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrControlEnableModifyTraps.setStatus('mandatory')
if mibBuilder.loadTexts: svrControlEnableModifyTraps.setDescription('If true, a modify trap will be sent for each modification of the threshold table when the threshold entry state is rowDisabled. This value persists over agent restarts. Default value is false.')
svrControlEnableResetTraps = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 3, 3), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrControlEnableResetTraps.setStatus('mandatory')
if mibBuilder.loadTexts: svrControlEnableResetTraps.setDescription('If true, a reset trap will be sent each time any threshold event is reset. If the alarm state goes from set to reset, a reset trap will be sent. This value persists over agent restarts. Default value is false.')
svrControlModifyOID = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 3, 4), ObjectIdentifier())
if mibBuilder.loadTexts: svrControlModifyOID.setStatus('mandatory')
if mibBuilder.loadTexts: svrControlModifyOID.setDescription('This variable is used as a variable in the modification trap, svrThrModifyTrap to represent the threshold variable which caused the modify trap to be sent. This variable can not be retrieved nor modified by the user.')
svrTrapReconfigureEvent = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: svrTrapReconfigureEvent.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapReconfigureEvent.setDescription('By setting this value to enable, trap destinations will be reconfigured. On some operating systems like Windows/NT this will cause the SNMP agent to restart.')
svrTrapCommunityNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrTrapCommunityNextIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapCommunityNextIndex.setDescription('Next available index for creating a svrTrapCommunityEntry. If the value is -1, then the maximum number of community names has been reached. This means that a community record can not be created until another community name has been deleted.')
svrTrapCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 6), )
if mibBuilder.loadTexts: svrTrapCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapCommunityTable.setDescription('Table of svrTrapCommunityEntry (community names) for which each can have a list of IP addresses/TCPIP names/Netbios names/IPX addresses. These address/names are trap destinations. A trap is sent out per community/address(name) pairing.')
svrTrapCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 6, 1), ).setIndexNames((0, "SVRMGT-MIB", "svrTrapCommunityIndex"))
if mibBuilder.loadTexts: svrTrapCommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapCommunityEntry.setDescription('In order to create a community entry, the svrTrapCommunityNextIndex must be userd as the instance for that entry.')
svrTrapCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrTrapCommunityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapCommunityIndex.setDescription('A locally-unique index value. On creation, this should be set to the value of svrTrapCommunityNextIndex.')
svrTrapCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrTrapCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapCommunityName.setDescription('This is the community name that network addresses/names will be associated with. When the trap is sent out, this community name is sent out with it. A common community name is public. To create a community name entry, just issue a SET command for svrTrapCommunityName with an instance of svrTrapCommunityNextIndex. To delete the entry, issue a SET command for that particular instance using an empty display string (length = 0). By deleting the community name entry, the underlying destination entries for this community name instance will also be deleted.')
svrTrapDestinationNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrTrapDestinationNextIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapDestinationNextIndex.setDescription('Next available index for creating a svrTrapDestinationEntry. If the value is -1 then the maximum number of destination entries has been reached. This means that a destination record can not be created until another has been deleted.')
svrTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 7), )
if mibBuilder.loadTexts: svrTrapDestinationTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapDestinationTable.setDescription('Table of IP addresses/TCPIP names/Netbios names/IPX addresses which are the trap destinations. A trap is sent out per community name/ address(name) pairing.')
svrTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 7, 1), ).setIndexNames((0, "SVRMGT-MIB", "svrTrapCommunityIndex"), (0, "SVRMGT-MIB", "svrTrapDestinationIndex"))
if mibBuilder.loadTexts: svrTrapDestinationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapDestinationEntry.setDescription('In order to create an address/name entry, the svrTrapDestinationNextIndex must be used as the instance for that entry.')
svrTrapDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrTrapDestinationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapDestinationIndex.setDescription('A locally-unique index value. On creation, this must be set to the value of svrTrapDestinationNextIndex.')
svrTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 4, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrTrapDestination.setStatus('mandatory')
if mibBuilder.loadTexts: svrTrapDestination.setDescription('This is the destination that the trap will be sent. It can either an IP address, TCPIP name, Netbios name or IPX address. To create a destination entry, just issue a SET command for svrTrapDestination with an instance of svrTrapDestinationNextIndex. To delete the entry, issue a SET command for that particular instance using an empty display string (length = 0).')
svrMinimalHealthMajorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthMajorRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthMajorRev.setDescription('Major revision of the Minimal Health module. Default is 0')
svrMinimalHealthMinorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthMinorRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthMinorRev.setDescription('Minor revision of the Minimal Health module. Default is 0.')
svrMinimalHealthEnable = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 3), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthEnable.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthEnable.setDescription('If true, the minimal health module will be started. This value persists over agent restarts. Default value is true.')
svrMinimalHealthDesiredTemplateName = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthDesiredTemplateName.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthDesiredTemplateName.setDescription('This is the desired template name for use by the minimal health agent.')
svrMinimalHealthDesiredTemplateRevision = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthDesiredTemplateRevision.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthDesiredTemplateRevision.setDescription('This is the desired template revision for use by the minimal health agent.')
svrMinimalHealthDesiredTemplateRevisionDate = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthDesiredTemplateRevisionDate.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthDesiredTemplateRevisionDate.setDescription('This is the desired template revision date for use by the minimal health agent.')
svrMinimalHealthActualTemplateName = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthActualTemplateName.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthActualTemplateName.setDescription('This is the actual template name for use by the minimal health agent.')
svrMinimalHealthActualTemplateRevision = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthActualTemplateRevision.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthActualTemplateRevision.setDescription('This is the actual template revision for use by the minimal health agent.')
svrMinimalHealthActualTemplateRevisionDate = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2, 5, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrMinimalHealthActualTemplateRevisionDate.setStatus('mandatory')
if mibBuilder.loadTexts: svrMinimalHealthActualTemplateRevisionDate.setDescription('This is the actual template revision date for use by the minimal health agent.')
svrThrModifyTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,99)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrControlModifyOID"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrModifyTrap.setDescription('This is a modification trap. The threshold OID whose value caused the alarm is in svrControlModifyOID.')
svrThrResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,100)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrResetValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrResetTrap.setDescription('This is a reset trap. The value that cuased the alarm to be reset is returned in svrThrLastValue.')
svrThrHighExceptTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,101)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrHighExceptTrap.setDescription('This is a high severity trap. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrMediumExceptTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,102)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrMediumExceptTrap.setDescription('This is a medium severity trap. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrLowExceptTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,103)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrLowExceptTrap.setDescription('This is a low severity trap. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrInformationalExceptTrap = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,104)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrInformationalExceptTrap.setDescription('This is an Informational severity trap. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrDiskDown = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,105)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrDiskDown.setDescription('This indicates that the disk is not available for any use. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,106)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrDiskWarning.setDescription('This indicates that an unusual disk error condition has occured but that the device is still operational. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrDiskOk = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,107)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrDiskOk.setDescription('This indicates that the disk is up and running and that no unusual error conditions are known. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrFileSystemUsage = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,108)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrFileSystemUsage.setDescription('This indicates that file system usage has exceeded the user defined threshold.The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrTemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,109)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrTemperatureOk.setDescription('This indicates that the temperature is within normal limits. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrTemperatureCritical = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,110)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrTemperatureCritical.setDescription('This indicates that the temperature is in a critical state either low or high. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,111)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrTemperatureWarning.setDescription('This indicates that the temperature is in a warning state either low or high. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,112)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrFanFailed.setDescription('This indicates that the fan has failed. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrFanOk = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,113)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrFanOk.setDescription('This indicates that the fan is functioning well. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrFanBackup = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,114)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrFanBackup.setDescription('This indicates that the fan is a backup fan. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,115)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrVoltageOk.setDescription('This indicates that the voltage is within normal limits. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrVoltageCritical = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,116)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrVoltageCritical.setDescription('This indicates that the voltage is in a critical state, either low or high, but has not reached the shutdown threshold. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrVoltageWarning = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,117)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrVoltageWarning.setDescription('This indicates that the voltage is in a warning state, either low or high. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,118)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrPowerSupplyFailed.setDescription('This indicates that the power supply failed. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,119)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrPowerSupplyWarning.setDescription('This indicates that the power supply is in a warning state but has not yet failed. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,120)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrPowerSupplyOk.setDescription('This indicates that the power supply is functioning well. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrPowerSupplyBackup = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,121)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrPowerSupplyBackup.setDescription('This indicates that the power supply is in backup state. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrMemoryEltFailed = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,122)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrMemoryEltFailed.setDescription('This indicates that the memory element has failed. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrMemoryEltWarning = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,123)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrMemoryEltWarning.setDescription('This indicates that the memory element is reporting errors. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrMemoryEltOk = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,124)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrMemoryEltOk.setDescription('This indicates that the memory element is functioning well. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrNetworkIfInErrors = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,125)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrNetworkIfInErrors.setDescription('This indicates that the network interface inbound errors have exceeded the user defined threshold. The value that caused the alarm to occur is returned in svrThrLastValue. ')
svrThrNetworkIfInOctets = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,126)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrNetworkIfInOctets.setDescription('This indicates that the network interface inbound octets have exceeded the user defined threshold. The value that caused the alarm to occur is returned in svrThrLastValue. ')
svrThrNetworkIfOutOctets = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,127)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrNetworkIfOutOctets.setDescription('This indicates that the network interface outbound octets have exceeded the user defined threshold. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrNetworkIfInPkts = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,128)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrNetworkIfInPkts.setDescription('This indicates that the network interface inbound packets have exceeded the user defined threshold. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrNetworkIfOutPkts = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,129)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrNetworkIfOutPkts.setDescription('This indicates that the network interface outbound packets have exceeded the user defined threshold. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrNetworkIfOutErrors = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,130)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrNetworkIfOutErrors.setDescription('This indicates that the network interface outbound errors have exceeded the user defined threshold. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrNetworkIfInDiscards = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,131)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrNetworkIfInDiscards.setDescription('This indicates that the network interface inbound discards have exceeded the user defined threshold. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrProcessorDown = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,132)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrProcessorDown.setDescription('This indicates that the processor is not available for any use. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrProcessorWarning = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,133)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrProcessorWarning.setDescription('This indicates that the processor has encountered an unusual error condition but is still considered to be operational. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrProcessorOk = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,134)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrProcessorOk.setDescription('This indicates that the processor is up and running and that no unusual error conditions are known. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrCpuUsage = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,135)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrCpuUsage.setDescription('This indicates that CPU usage has exceeded the user defined threshold. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrClusterFailOverOwner = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,136)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrClusterFailOverOwner.setDescription('This indicates that the node has become the current owner of a cluster resource. The value that caused the alarm to occur is returned in svrThrLastValue.')
svrThrClusterFailOverNotOwner = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 2) + (0,137)).setObjects(("SVRMGT-MIB", "svrThrVariableName"), ("SVRMGT-MIB", "svrThrValueType"), ("SVRMGT-MIB", "svrThrThresholdValue"), ("SVRMGT-MIB", "svrThrLastValue"), ("SVRMGT-MIB", "svrThrDescr"), ("SVRMGT-MIB", "svrThrManagerDefinedTrapData"), ("SVRMGT-MIB", "svrThrUserDefinedTrapData"), ("SVRMGT-MIB", "svrThrAlarmCategory"), ("SVRMGT-MIB", "svrThrCreatedBy"), ("SVRMGT-MIB", "svrThrSeverity"))
if mibBuilder.loadTexts: svrThrClusterFailOverNotOwner.setDescription('This indicates that the node is not the current owner of a cluster resource. The value that caused the alarm to occur is returned in svrThrLastValue.')
mibBuilder.exportSymbols("SVRMGT-MIB", svrThrAlarmType=svrThrAlarmType, svrThrFanBackup=svrThrFanBackup, svrTrapReconfigureEvent=svrTrapReconfigureEvent, dec=dec, svrThrLocalHandlerArguments3=svrThrLocalHandlerArguments3, svrThrCpuUsage=svrThrCpuUsage, svrThrCreatedBy=svrThrCreatedBy, svrMinimalHealthMinorRev=svrMinimalHealthMinorRev, svrThrNetworkIfInOctets=svrThrNetworkIfInOctets, svrThrStatus=svrThrStatus, svrThrRetryCount=svrThrRetryCount, svrMgt=svrMgt, svrThrUserDefinedTrapData=svrThrUserDefinedTrapData, svrThrSampleInterval=svrThrSampleInterval, SnmpErrors=SnmpErrors, svrThrResetTrap=svrThrResetTrap, svrTrapDestinationTable=svrTrapDestinationTable, svrThresholdEntry=svrThresholdEntry, svrThrNetworkIfInErrors=svrThrNetworkIfInErrors, svrThrInvokeLocalHandler=svrThrInvokeLocalHandler, svrThrTemperatureWarning=svrThrTemperatureWarning, svrTrapDestinationIndex=svrTrapDestinationIndex, svrThrNetworkIfInPkts=svrThrNetworkIfInPkts, ThresholdOwner=ThresholdOwner, svrThrNetworkIfOutPkts=svrThrNetworkIfOutPkts, svrThrLogEvent=svrThrLogEvent, svrThrDiskOk=svrThrDiskOk, svrMinimalHealthActualTemplateRevision=svrMinimalHealthActualTemplateRevision, svrMgtMibMajorRev=svrMgtMibMajorRev, svrMgtMibMinorRev=svrMgtMibMinorRev, svrThrVoltageWarning=svrThrVoltageWarning, svrControl=svrControl, AlarmCategory=AlarmCategory, svrThrNetworkIfOutErrors=svrThrNetworkIfOutErrors, svrThrPowerSupplyWarning=svrThrPowerSupplyWarning, svrThrDiskDown=svrThrDiskDown, svrAlarms=svrAlarms, svrMinimalHealthActualTemplateRevisionDate=svrMinimalHealthActualTemplateRevisionDate, svrThrProcessorOk=svrThrProcessorOk, svrThrVoltageCritical=svrThrVoltageCritical, svrThrResetType=svrThrResetType, svrThrManagerDefinedTrapData=svrThrManagerDefinedTrapData, svrControlModifyOID=svrControlModifyOID, svrThrDiskWarning=svrThrDiskWarning, svrThrComparisonValue=svrThrComparisonValue, svrTrapCommunityNextIndex=svrTrapCommunityNextIndex, svrThrProcessorDown=svrThrProcessorDown, svrThrSeverity=svrThrSeverity, svrThrFanOk=svrThrFanOk, svrThrTrapsSendingInterval=svrThrTrapsSendingInterval, svrThrPowerSupplyFailed=svrThrPowerSupplyFailed, svrThrNetworkIfOutOctets=svrThrNetworkIfOutOctets, svrTrap=svrTrap, svrThrClusterFailOverNotOwner=svrThrClusterFailOverNotOwner, ema=ema, svrControlEnableTraps=svrControlEnableTraps, svrMinimalHealthDesiredTemplateName=svrMinimalHealthDesiredTemplateName, svrThrTemperatureOk=svrThrTemperatureOk, svrThrDescr=svrThrDescr, svrTrapDestinationEntry=svrTrapDestinationEntry, svrThrModifyTrap=svrThrModifyTrap, svrTrapDestination=svrTrapDestination, svrThrModifiable=svrThrModifiable, svrThrLocalHandlerArguments2=svrThrLocalHandlerArguments2, svrTrapCommunityIndex=svrTrapCommunityIndex, svrMinimalHealthMajorRev=svrMinimalHealthMajorRev, svrThrFanFailed=svrThrFanFailed, svrThrNetworkIfInDiscards=svrThrNetworkIfInDiscards, svrMinimalHealth=svrMinimalHealth, svrThrVoltageOk=svrThrVoltageOk, svrMinimalHealthEnable=svrMinimalHealthEnable, svrControlEnableResetTraps=svrControlEnableResetTraps, Boolean=Boolean, svrAlarmNextThrIndex=svrAlarmNextThrIndex, mib_extensions_1=mib_extensions_1, svrThrTrapOid=svrThrTrapOid, svrThrMemoryEltOk=svrThrMemoryEltOk, svrThrClusterFailOverOwner=svrThrClusterFailOverOwner, Severity=Severity, svrThrPersistent=svrThrPersistent, svrThrTemperatureCritical=svrThrTemperatureCritical, svrThrLocalHandlerArguments4=svrThrLocalHandlerArguments4, svrThrPowerSupplyOk=svrThrPowerSupplyOk, svrAlarmEnableTraps=svrAlarmEnableTraps, svrThrLastValue=svrThrLastValue, svrThresholdTable=svrThresholdTable, svrTrapCommunityTable=svrTrapCommunityTable, svrThrPowerSupplyBackup=svrThrPowerSupplyBackup, svrThrMediumExceptTrap=svrThrMediumExceptTrap, svrTrapCommunityName=svrTrapCommunityName, svrThrLocalHandlerPath=svrThrLocalHandlerPath, svrMinimalHealthActualTemplateName=svrMinimalHealthActualTemplateName, svrThrLowExceptTrap=svrThrLowExceptTrap, svrThrMemoryEltFailed=svrThrMemoryEltFailed, ResetRelationalOperators=ResetRelationalOperators, svrMinimalHealthDesiredTemplateRevision=svrMinimalHealthDesiredTemplateRevision, svrThrVariableName=svrThrVariableName, svrThrIndex=svrThrIndex, svrThrErrorValue=svrThrErrorValue, svrControlEnableModifyTraps=svrControlEnableModifyTraps, svrSystem=svrSystem, svrThrFileSystemUsage=svrThrFileSystemUsage, svrThrLocalHandlerArguments1=svrThrLocalHandlerArguments1, svrThrAlarmCategory=svrThrAlarmCategory, svrThrMemoryEltWarning=svrThrMemoryEltWarning, svrTrapCommunityEntry=svrTrapCommunityEntry, svrThrAlarmState=svrThrAlarmState, svrThrThresholdValue=svrThrThresholdValue, svrMgtMibInfo=svrMgtMibInfo, svrThrValueType=svrThrValueType, svrThrComparisonName=svrThrComparisonName, svrThrInformationalExceptTrap=svrThrInformationalExceptTrap, svrTrapDestinationNextIndex=svrTrapDestinationNextIndex, svrMinimalHealthDesiredTemplateRevisionDate=svrMinimalHealthDesiredTemplateRevisionDate, svrThrResetValue=svrThrResetValue, svrThrProcessorWarning=svrThrProcessorWarning, svrThrHighExceptTrap=svrThrHighExceptTrap, svrThrTrapEnabler=svrThrTrapEnabler)
