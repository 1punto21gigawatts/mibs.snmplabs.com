#
# PySNMP MIB module SK-UPPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SK-UPPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, Counter32, Counter64, Gauge32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Unsigned32, Integer32, NotificationType, ObjectIdentity, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Counter32", "Counter64", "Gauge32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Unsigned32", "Integer32", "NotificationType", "ObjectIdentity", "IpAddress", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class FddiMACLongAddressType(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sk = MibIdentifier((1, 3, 6, 1, 4, 1, 179))
skMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2))
sk_board = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2)).setLabel("sk-board")
sk_board_status = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 1)).setLabel("sk-board-status")
sk_board_client = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 2)).setLabel("sk-board-client")
eth = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 3))
tok = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 4))
fddi = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 5))
sk_board_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 6)).setLabel("sk-board-statistics")
stTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1), )
if mibBuilder.loadTexts: stTable.setStatus('mandatory')
if mibBuilder.loadTexts: stTable.setDescription('A list of board status entries.')
stEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "stIfIndex"))
if mibBuilder.loadTexts: stEntry.setStatus('mandatory')
if mibBuilder.loadTexts: stEntry.setDescription('A board status entry containing information common to a given board.')
stIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: stIfIndex.setDescription('The ifIndex of the corresponding entry in the ifTable.')
stVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stVersion.setStatus('mandatory')
if mibBuilder.loadTexts: stVersion.setDescription('VersionNr. of the DLI')
stLogAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stLogAddress.setStatus('mandatory')
if mibBuilder.loadTexts: stLogAddress.setDescription("This is the adapter's current logical node address. In normal case this address is equal to the value of PHYSADDR. If the DLI wants to change the logical address, it calls DriverChangeAddress.")
stInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stInterrupt.setStatus('mandatory')
if mibBuilder.loadTexts: stInterrupt.setDescription('This is the IRQ line used by the adapter (-1 if none).')
stBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stBaseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: stBaseAddress.setDescription("This is the segment address (base) at which the adapter's RAM is located in the address space of the PC (0 if adapter has no shared memory).")
stRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: stRAMSize.setDescription('This is the size in bytes of the shared memory on the adapter.')
stIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stIOPort.setStatus('mandatory')
if mibBuilder.loadTexts: stIOPort.setDescription('This is the first I/O port address (base) used by the adapter (0 if none).')
stDMALine = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stDMALine.setStatus('mandatory')
if mibBuilder.loadTexts: stDMALine.setDescription('This is the DMA channel number used by the adapter (-1 if none).')
stNumMbufs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stNumMbufs.setStatus('mandatory')
if mibBuilder.loadTexts: stNumMbufs.setDescription('This is the total number of all Mbufs. Mbuf is a data structure in the DLI whichs includes the necessary information to coordinate the interaction of various functions and events between the DLI and the protocol clients.')
stMaxTxMbufs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stMaxTxMbufs.setStatus('mandatory')
if mibBuilder.loadTexts: stMaxTxMbufs.setDescription('This is the maximum number of Mbufs that may be allocated by the protocol clients')
stMaxRxMbufs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stMaxRxMbufs.setStatus('mandatory')
if mibBuilder.loadTexts: stMaxRxMbufs.setDescription('The number of Mbufs destined for packet reception can be calculated as NumMbufs - MaxTXMbufs.')
stCurrentPacketFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stCurrentPacketFilter.setStatus('mandatory')
if mibBuilder.loadTexts: stCurrentPacketFilter.setDescription('This variable is a value representing the address types that are received by the driver. Default is O. Then, for each address type A, with the value 1 - 4, the power of two of (A - 1) is added. Address types: 1 Direct addressing (+Broadcast) 2 Multicast or group addressing plus functional addresses 3 Promiscuous mode 4 Source routing If the variable has the value O, this object will not be supported. ')
stServiceInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stServiceInterrupt.setStatus('mandatory')
if mibBuilder.loadTexts: stServiceInterrupt.setDescription('This is the service interrupt occupied by UPPSDLI. It can be set at start of the DLI (default:0x7c).')
stOEMSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stOEMSignature.setStatus('mandatory')
if mibBuilder.loadTexts: stOEMSignature.setDescription('OEM-Signature')
stTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("fddi", 2), ("token-ring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTopology.setStatus('mandatory')
if mibBuilder.loadTexts: stTopology.setDescription('This field holds the network topology id. Topology ids are assigned by Schneider & Koch. The following topology ids have been defined: ID Topology === ========= 01h Ethernet 02h FDDI 03h Token Ring')
stIORange = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stIORange.setStatus('mandatory')
if mibBuilder.loadTexts: stIORange.setDescription('Specifies the number of I/O ports following the I/O port base.')
clTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1), )
if mibBuilder.loadTexts: clTable.setStatus('mandatory')
if mibBuilder.loadTexts: clTable.setDescription('A list of clients.')
clEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "clPID"))
if mibBuilder.loadTexts: clEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clEntry.setDescription('A client entry containing information common to a given client.')
clIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clIfIndex.setDescription('The corresponding ifIndex of the given client.')
clType = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clType.setStatus('mandatory')
if mibBuilder.loadTexts: clType.setDescription("This object represents the protocol type to be opened. The protocol types are the following: Mode (PMODE) TYPE Protocol =========== =============== ================== Ethernet II 0000h IEEE 802.3 (cf. below) Ethernet II 0001h-05DCh 'Dummy' = no reception! Ethernet II 05DDh-FFFEh Ethernet II type code Ethernet II FFFFh Demultiplexor (or Promiscuous or Hook) IEEE SAP xx00h IEEE 802.2 Service Access Point IEEE SNAP 0000h-FFFFh IEEE 802.2 SNAP Type Code Note that true ETHERNET II type code protocols can only have type codes 05DDh (1501 decimal) or higher. A protocol with type code less than 05DDh can be logged on at the DLI. However, this protocol cannot receive packets, as packets with type code less than 05DDh are interpreted as IEEE 802.3 packets and will be routed to a possibly active IEEE 802.3 protocol or (if inactive) will be dismissed. ")
clMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: clMulticast.setDescription('This is the number of multicast addresses tered registered by the protocol.')
clName = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clName.setStatus('mandatory')
if mibBuilder.loadTexts: clName.setDescription('This is a character chain that characterizes the protocol/application.')
clMode = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMode.setStatus('mandatory')
if mibBuilder.loadTexts: clMode.setDescription('This value represents the mode of the registered protocol (cf. UPPS Developers Kit)')
clPID = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPID.setStatus('mandatory')
if mibBuilder.loadTexts: clPID.setDescription('This value represents a virtual board number to identify a protocol')
ethStatsTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1), )
if mibBuilder.loadTexts: ethStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsTable.setDescription('Statistics for a collection of ethernet-like interfaces attached to a particular system.')
ethStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "ethStatsIndex"))
if mibBuilder.loadTexts: ethStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsEntry.setDescription('Statistics for a particular interface to an ethernet-like medium.')
ethStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsIndex.setDescription('An index value that uniquely identifies an interface to an ethernet-like medium. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ethStatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsAlignmentErrors.setDescription('A count of frames received on a particular interface that are not an integral number of octets in length and do not pass the FCS check. The count represented by an instance of this object is incremented when the alignmentError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according tothe conventions of [9], counted exclusively according to the error status presented to the LLC.')
ethStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsFCSErrors.setDescription('A count of frames received on a particular interface that are an integral number of octets in length but do not pass the FCS check. The count represented by an instance of this object is incremented when the frameCheckError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according tothe conventions of [9], counted exclusively according to the error status presented to the LLC.')
ethStatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsSingleCollisionFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by exactly one collision. A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts or ifOutNUcastPkts object and is not counted by the corresponding instance of the ethStatsMultipleCollisionFrames object.')
ethStatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsMultipleCollisionFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision. A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts or ifOutNUcastPkts object and is not counted by the corresponding instance of the ethStatsSingleCollisionFrames object.')
ethStatsSQETestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSQETestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsSQETestErrors.setDescription('A count of times that the SQE TEST ERROR message is generated by the PLS sublayer for a particular interface. this object is not supported')
ethStatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsDeferredTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsDeferredTransmissions.setDescription('A count of frames for which the first transmission attempt on a particular interface is delayed because the medium is busy. The count represented by an instance of this object does not include frames involved in collisions.')
ethStatsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsLateCollisions.setDescription('The number of times that a collision is detected on a particular interface later than 512 bit-times into the transmission of a packet. Five hundred and twelve bit-times corresponds to 51.2 microseconds on a 10 Mbit/s system. A (late) collision included in a count represented by an instance of this object is also considered as a (generic) collision for purposes of other collision-related statistics.')
ethStatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsExcessiveCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsExcessiveCollisions.setDescription('A count of frames for which transmission on a particular interface fails due to excessive collisions.')
ethStatsInternalMacTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsInternalMacTransErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsInternalMacTransErrors.setDescription('A count of frames for which transmission on a particular interface fails due to an internal MAC sublayer transmit error. A frame is only counted by an instance of this object if it is not counted by the corresponding instance of either the ethStatsLateCollisions object, the ethStatsExcessiveCollisions object, the ethStatsCarrierSenseErrors object, or the ethStatsExcessiveDeferrals object. The precise meaning of the count represented by an instance of this object is implementation- specific. In particular, an instance of this object may represent a count of transmission errors on a particular interface that are not otherwise counted.')
ethStatsCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsCarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsCarrierSenseErrors.setDescription('The number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame on a particular interface. The count represented by an instance of this object is incremented at most once per transmission attempt, even if the carrier sense condition fluctuates during a transmission attempt.')
ethStatsExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsExcessiveDeferrals.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsExcessiveDeferrals.setDescription('A count of frames for which transmission on a particular interface is deferred for an excessive period of time.')
ethStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsFrameTooLongs.setDescription('A count of frames received on a particular interface that exceed the maximum permitted frame size. The count represented by an instance of this object is incremented when the frameTooLong status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of [9], counted exclusively according to the error status presented to the LLC.')
ethStatsInRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsInRangeLengthErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsInRangeLengthErrors.setDescription('A count of frames received on a particular interface with a length field value that falls between the minimum unpadded LLC data size and the maximum allowed LLC data size inclusive and that does not match the number of LLC data octets received. The count represented by an instance of this object also includes frames for which the length field value is less than the minimum unpadded LLC data size.')
ethStatsOutOfRangeLengthFields = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsOutOfRangeLengthFields.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsOutOfRangeLengthFields.setDescription('A count of frames received on a particular interface for which the length field value exceeds the maximum allowed LLC data size. The count represented by an instance of this object is not incremented in implementations that observe Ethernet encapsulation conventions (by which the IEEE 802.3 length field is interpreted as the Ethernet Type field).')
ethStatsInternalMacRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsInternalMacRecvErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ethStatsInternalMacRecvErrors.setDescription('A count of frames for which reception on a particular interface fails due to an internal MAC sublayer receive error. A frame is only counted by an instance of this object if it is not counted by the corresponding instance of either the ethStatsFrameTooLongs object, the ethStatsAlignmentErrors object, the ethStatsFCSErrors object, the ethStatsInRangeLengthErrors object, or the ethStatsOutOfRangeLengthFields object. The precise meaning of the count represented by an instance of this object is implementation- specific. In particular, an instance of this object may represent a count of receive errors on a particular interface that are not otherwise counted.')
tokStatsTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1), )
if mibBuilder.loadTexts: tokStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsTable.setDescription('Statistics for a collection of token-ring interfaces attached to a particular system.')
tokStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "tokStatsIndex"))
if mibBuilder.loadTexts: tokStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsEntry.setDescription('Statistics for a particular interface for Token Ring.')
tokStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsIndex.setDescription('An index value that uniquely identifies an interface to a token-ring medium. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
tokStatsUpstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsUpstreamNbr.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsUpstreamNbr.setDescription("The MAC's upstream neighbour's long individual MAC address.")
tokStatsLocalRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsLocalRingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsLocalRingNumber.setDescription('The unique number of the local Token Ring')
tokStatsRingUpCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsRingUpCounts.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsRingUpCounts.setDescription("The number of times the station made sucessfully an 'open adapter' ")
tokStatsSignalLossErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsSignalLossErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsSignalLossErrors.setDescription('The number of times the adapter detected a loss of signal on the ring')
tokStatsLobeWireFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsLobeWireFaults.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsLobeWireFaults.setDescription('The number of times the adapter detected an open or short circuit in the cable between the adapter and the wiring concentrator.')
tokStatsRingRecoveryCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsRingRecoveryCounts.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsRingRecoveryCounts.setDescription('The number of times the adapter observes claim token MAC frames on the ring. The adapter may be transmitting the claim token frames.')
tokStatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsLineErrors.setDescription('The line error counter is incremented whenever 1) a frame is repeated or copied, and 2) the error detected indicator is zero in the incoming frame, and 3) at least one of the following conditions exists: a) a code violation between the starting delimiter and the ending delimiter of the frame. b) a code violation in the token c) a Frame Check Sequence (FCS) error. When the line error is incremented, the EDI of the frame is set to one so that no further station count the error.')
tokStatsBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsBurstErrors.setDescription('The burst error counter is contained in all adapter configurations and is incremented when the adapter detects the absence of transitions for five half- bit times between SDEL and EDEL, or EDEL and SDEL. Only one adapter detects the burst five condition because the adapter that detects a burst four condition (four half bit times without transition) directs its transmitter to transmit idles if the burst five condition is detected.')
tokStatsARI_FCIErrors = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 10), Counter32()).setLabel("tokStatsARI-FCIErrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsARI_FCIErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsARI_FCIErrors.setDescription('The ARI/FCI error counter is incremented when an adapter receives an Active Monitor Present (AMP)MAC frame with the ARI/FCI bits equal to zero and a Standby Monitor Present (SMP)MAC frame with the ARI/FCI bits equal to zero, or more than one SMP MAC frame with the ARI/FCI bits equal to zero, without receiving an intervening AMP MAC frame. This condition indicates that the upstream neighbor is unable to set the ARI/FCI bits in a frame that it has copied.')
tokStatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsLostFrameErrors.setDescription('The lost frame error counter is incremented when an adapter is in transmit (stripping) mode and fails to receive the end of the frame transmitted.')
tokStatsReceiveCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsReceiveCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsReceiveCongestionErrors.setDescription('The receive congestion error counter is incremented when an adapter in the repeat mode recognizes a frame addressed to it but has no buffer available to copy the frame.')
tokStatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsFrameCopiedErrors.setDescription('The frame copied error counter is incremented when an adapter in the repeat/receive mode recognizes a frame addressed to its specific address but finds the ARI bit not equal to zero. This indicates a possible line hit or duplicate address.')
tokStatsTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsTokenErrors.setDescription('The token error is active only in the active monitor station. It is incremented when the active monitor detects an error with the token protocol as follows: 1)The MONITOR_COUNT bit of a token with nonzero priority equals one. 2)The MONITOR_COUNT bit of a frame equals one 3)No token or frame is received within a 10-ms window 4)The starting delimiter/token sequence has a code violation in an area where code violation must not exist.')
tokStatsDMABusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsDMABusErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsDMABusErrors.setDescription('The DMA bus error counter counts the occurrences of DMA bus errors that do not exceed the abort thresholds as specified in the Initialization parameters.')
tokStatsDMAParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsDMAParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsDMAParityErrors.setDescription('The DMA parity error counter counts the occurrences of DMA parity errors that do not exceed the abort thresholds as specified in the Initialization parameters.')
tokStatsReceiveOverflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsReceiveOverflowErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tokStatsReceiveOverflowErrors.setDescription('The Receive Overflow error counter counts the occurrences of packets which do not fit in one DLI Mbuf ( > 4504 Bytes).')
fddiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1), )
if mibBuilder.loadTexts: fddiStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: fddiStatsTable.setDescription('Statistics for a collection of fddi interfaces attached to a particular system.')
fddiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "fddiStatsIndex"))
if mibBuilder.loadTexts: fddiStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fddiStatsEntry.setDescription('Statistics for a particular interface to a fddi medium.')
fddiStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fddiStatsIndex.setDescription('An index value that uniquely identifies an interface to an fddi medium. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
fddiSMTOpVersionId = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTOpVersionId.setReference('ANSI { fddiSMT 13 }')
if mibBuilder.loadTexts: fddiSMTOpVersionId.setStatus('mandatory')
if mibBuilder.loadTexts: fddiSMTOpVersionId.setDescription('The version that this station is using for its operation (refer to ANSI 7.1.2.2).')
fddiSMTCFState = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTCFState.setReference('ANSI { fddiSMT 42 }')
if mibBuilder.loadTexts: fddiSMTCFState.setStatus('mandatory')
if mibBuilder.loadTexts: fddiSMTCFState.setDescription('The attachment configuration for the station or concentrator (refer to ANSI SMT 9.7.4.3). The following values are possible: cf0(0), -- Isolated cf1(1), -- local_a cf2(2), -- local_b cf3(3), -- local_ab cf4(4), -- local_s cf5(5), -- wrap_a cf6(6), -- wrap_b cf7(7), -- wrap_ab cf8(8), -- wrap_s cf9(9), -- c_wrap_a cf10(10), -- c_wrap_b cf11(11), -- c_wrap_s cf12(12) -- thru')
fddiSMTFrameSends = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTFrameSends.setStatus('mandatory')
if mibBuilder.loadTexts: fddiSMTFrameSends.setDescription('The number of SMT frames sent')
fddiSMTFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTFrameReceives.setStatus('mandatory')
if mibBuilder.loadTexts: fddiSMTFrameReceives.setDescription('The number of SMT frames received')
fddiSMTRingUps = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTRingUps.setStatus('mandatory')
if mibBuilder.loadTexts: fddiSMTRingUps.setDescription('The number of times the Ring came up')
fddiMACUpstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 7), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACUpstreamNbr.setReference('ANSI { fddiMAC 24 }')
if mibBuilder.loadTexts: fddiMACUpstreamNbr.setStatus('mandatory')
if mibBuilder.loadTexts: fddiMACUpstreamNbr.setDescription("The MAC's upstream neighbor's long individual MAC address. It may be determined by the Neighbor Information Frame protocol (refer to ANSI SMT 7.2.1). The value shall be reported as '00 00 F8 00 00 00' if it is unknown.")
fddiMACDownstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 8), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACDownstreamNbr.setReference('ANSI { fddiMAC 24 }')
if mibBuilder.loadTexts: fddiMACDownstreamNbr.setStatus('mandatory')
if mibBuilder.loadTexts: fddiMACDownstreamNbr.setDescription("The MAC's downstream neighbor's long individual MAC address. It may be determined by the Neighbor Information Frame protocol (refer to ANSI SMT 7.2.1). The value shall be reported as '00 00 F8 00 00 00' if it is unknown.")
fddiMACFrameCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACFrameCts.setReference('ANSI { fddiMAC 71 }')
if mibBuilder.loadTexts: fddiMACFrameCts.setStatus('mandatory')
if mibBuilder.loadTexts: fddiMACFrameCts.setDescription('Frame_Counter (refer to ANSI MAC 2.2.1).')
fddiMACErrorCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACErrorCts.setReference('ANSI { fddiMAC 81 }')
if mibBuilder.loadTexts: fddiMACErrorCts.setStatus('mandatory')
if mibBuilder.loadTexts: fddiMACErrorCts.setDescription('Error_Counter (refer to ANSI MAC 2.2.1).')
fddiMACLostCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACLostCts.setReference('ANSI { fddiMAC 82 }')
if mibBuilder.loadTexts: fddiMACLostCts.setStatus('mandatory')
if mibBuilder.loadTexts: fddiMACLostCts.setDescription('Lost_Counter (refer to ANSI MAC 2.2.1).')
fddiPORT1LerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPORT1LerEstimate.setReference('ANSI { fddiPORT 51 }')
if mibBuilder.loadTexts: fddiPORT1LerEstimate.setStatus('mandatory')
if mibBuilder.loadTexts: fddiPORT1LerEstimate.setDescription('A long term average link error rate of Port 1. It ranges from 10**-4 to 10**-15 and is reported as the absolute value of the exponent of the estimate.')
fddiPORT2LerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPORT2LerEstimate.setReference('ANSI { fddiPORT 51 }')
if mibBuilder.loadTexts: fddiPORT2LerEstimate.setStatus('mandatory')
if mibBuilder.loadTexts: fddiPORT2LerEstimate.setDescription('A long term average link error rate of Port2. It ranges from 10**-4 to 10**-15 and is reported as the absolute value of the exponent of the estimate. Returns Null if Port is not available')
fddiATTACHMENTClass = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single-attachment", 1), ("dual-attachment", 2), ("concentrator", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiATTACHMENTClass.setReference('ANSI { fddiATTACHMENT 11 }')
if mibBuilder.loadTexts: fddiATTACHMENTClass.setStatus('mandatory')
if mibBuilder.loadTexts: fddiATTACHMENTClass.setDescription('The Attachment class. This represents a PORT or a pair of PORTs plus the associated optional optical bypass that are managed as a functional unit. The PORT associations are the following: single-attachment - S PORTs dual-attachment - A/B PORT Pairs concentrator - M PORTs ')
fddiATTACHOptBypassPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiATTACHOptBypassPresent.setReference('ANSI { fddiATTACHMENT 12 }')
if mibBuilder.loadTexts: fddiATTACHOptBypassPresent.setStatus('mandatory')
if mibBuilder.loadTexts: fddiATTACHOptBypassPresent.setDescription("The value of this object is false for 'single- attachment'. Correct operation of CMT for single-attachment and concentrator attachments requires that a bypass function must not loopback the network side of the MIC, but only the node side.")
statsTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1), )
if mibBuilder.loadTexts: statsTable.setStatus('mandatory')
if mibBuilder.loadTexts: statsTable.setDescription('A list of board statistic entries.')
statsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "statsIfIndex"))
if mibBuilder.loadTexts: statsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: statsEntry.setDescription('A board statistic entry containing information common to a given board.')
statsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: statsIfIndex.setDescription('The ifIndex of the corresponding entry in the ifTable.')
statsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: statsFCSErrors.setDescription(' The number of frames received with a Cyclic Redundancy Check error. This counter is incremented by the template part of the DLI not by the hardware driver as it it is done in the topology-specific statistics.')
statsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: statsAlignmentErrors.setDescription('The number of frames received, which did not end on a byte boundery. This counter is incremented by the template part of the DLI not by the hardware driver as it it is done in the topology-specific statistics.')
statsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: statsFrameTooLongs.setDescription('The number of frames received which were to long to fit in the data area of the Mbuf. This counter is incremented by the template part of the DLI not by the hardware driver as it it is done in the topology-specific statistics.')
mibBuilder.exportSymbols("SK-UPPS-MIB", fddiSMTFrameSends=fddiSMTFrameSends, fddiMACDownstreamNbr=fddiMACDownstreamNbr, stVersion=stVersion, stIORange=stIORange, tok=tok, tokStatsBurstErrors=tokStatsBurstErrors, tokStatsLocalRingNumber=tokStatsLocalRingNumber, clMulticast=clMulticast, statsTable=statsTable, ethStatsDeferredTransmissions=ethStatsDeferredTransmissions, tokStatsSignalLossErrors=tokStatsSignalLossErrors, tokStatsARI_FCIErrors=tokStatsARI_FCIErrors, stTable=stTable, ethStatsInRangeLengthErrors=ethStatsInRangeLengthErrors, fddiATTACHOptBypassPresent=fddiATTACHOptBypassPresent, fddiATTACHMENTClass=fddiATTACHMENTClass, fddiPORT1LerEstimate=fddiPORT1LerEstimate, clName=clName, stIOPort=stIOPort, fddiSMTRingUps=fddiSMTRingUps, stEntry=stEntry, fddi=fddi, stMaxTxMbufs=stMaxTxMbufs, clType=clType, fddiMACErrorCts=fddiMACErrorCts, fddiSMTOpVersionId=fddiSMTOpVersionId, tokStatsLineErrors=tokStatsLineErrors, tokStatsRingRecoveryCounts=tokStatsRingRecoveryCounts, statsIfIndex=statsIfIndex, tokStatsDMABusErrors=tokStatsDMABusErrors, stInterrupt=stInterrupt, fddiSMTCFState=fddiSMTCFState, sk_board_statistics=sk_board_statistics, sk=sk, fddiMACFrameCts=fddiMACFrameCts, sk_board_client=sk_board_client, ethStatsFrameTooLongs=ethStatsFrameTooLongs, skMibs=skMibs, clPID=clPID, stRAMSize=stRAMSize, statsAlignmentErrors=statsAlignmentErrors, fddiStatsTable=fddiStatsTable, stNumMbufs=stNumMbufs, stLogAddress=stLogAddress, stDMALine=stDMALine, ethStatsInternalMacRecvErrors=ethStatsInternalMacRecvErrors, fddiMACUpstreamNbr=fddiMACUpstreamNbr, ethStatsMultipleCollisionFrames=ethStatsMultipleCollisionFrames, sk_board=sk_board, tokStatsRingUpCounts=tokStatsRingUpCounts, stServiceInterrupt=stServiceInterrupt, stOEMSignature=stOEMSignature, fddiStatsIndex=fddiStatsIndex, ethStatsCarrierSenseErrors=ethStatsCarrierSenseErrors, FddiMACLongAddressType=FddiMACLongAddressType, tokStatsFrameCopiedErrors=tokStatsFrameCopiedErrors, statsFrameTooLongs=statsFrameTooLongs, tokStatsLostFrameErrors=tokStatsLostFrameErrors, fddiMACLostCts=fddiMACLostCts, clIfIndex=clIfIndex, ethStatsEntry=ethStatsEntry, tokStatsIndex=tokStatsIndex, tokStatsEntry=tokStatsEntry, stMaxRxMbufs=stMaxRxMbufs, stIfIndex=stIfIndex, tokStatsLobeWireFaults=tokStatsLobeWireFaults, tokStatsReceiveCongestionErrors=tokStatsReceiveCongestionErrors, statsEntry=statsEntry, stBaseAddress=stBaseAddress, ethStatsIndex=ethStatsIndex, ethStatsFCSErrors=ethStatsFCSErrors, clEntry=clEntry, clMode=clMode, fddiPORT2LerEstimate=fddiPORT2LerEstimate, tokStatsUpstreamNbr=tokStatsUpstreamNbr, tokStatsTokenErrors=tokStatsTokenErrors, tokStatsDMAParityErrors=tokStatsDMAParityErrors, clTable=clTable, ethStatsAlignmentErrors=ethStatsAlignmentErrors, fddiSMTFrameReceives=fddiSMTFrameReceives, ethStatsLateCollisions=ethStatsLateCollisions, tokStatsTable=tokStatsTable, stTopology=stTopology, statsFCSErrors=statsFCSErrors, ethStatsExcessiveDeferrals=ethStatsExcessiveDeferrals, ethStatsOutOfRangeLengthFields=ethStatsOutOfRangeLengthFields, ethStatsSQETestErrors=ethStatsSQETestErrors, ethStatsSingleCollisionFrames=ethStatsSingleCollisionFrames, ethStatsTable=ethStatsTable, ethStatsInternalMacTransErrors=ethStatsInternalMacTransErrors, ethStatsExcessiveCollisions=ethStatsExcessiveCollisions, eth=eth, tokStatsReceiveOverflowErrors=tokStatsReceiveOverflowErrors, sk_board_status=sk_board_status, fddiStatsEntry=fddiStatsEntry, stCurrentPacketFilter=stCurrentPacketFilter)
