#
# PySNMP MIB module Wellfleet-SMDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-SMDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Bits, TimeTicks, Counter64, Counter32, MibIdentifier, Integer32, Unsigned32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Bits", "TimeTicks", "Counter64", "Counter32", "MibIdentifier", "Integer32", "Unsigned32", "ModuleIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfWanGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfWanGroup")
wfSmdsCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3), )
if mibBuilder.loadTexts: wfSmdsCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitTable.setDescription('The Wellfleet SMDS Circuit Record')
wfSmdsCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1), ).setIndexNames((0, "Wellfleet-SMDS-MIB", "wfSmdsCircuitID"))
if mibBuilder.loadTexts: wfSmdsCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitEntry.setDescription('per Wellfleet circuit SMDS configuration parameters and counters')
wfSmdsCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitDelete.setDescription('create/delete parameter, dflt = created')
wfSmdsCircuitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitDisable.setDescription('enable/disable parameter, dflt = enabled')
wfSmdsCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitState.setDescription('SMDS state variable, Up, Down Init, Not Present')
wfSmdsCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitID.setDescription('cct number for this instance')
wfSmdsCircuitIndivAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitIndivAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitIndivAddr.setDescription('SMDS E.164 Individual address for this Wellfleet circuit - must be 8 octets long')
wfSmdsCircuitGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitGroupAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitGroupAddr.setDescription('SMDS E.164 Group address for this Wellfleet circuit - must be 8 octets long')
wfSmdsCircuitArpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitArpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitArpAddr.setDescription('SMDS E.164 ARP address for this Wellfleet circuit - must be 8 octets long')
wfSmdsCircuitDisableHrtbtPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitDisableHrtbtPoll.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitDisableHrtbtPoll.setDescription('determine use of DXI heartbeat poll')
wfSmdsCircuitHrtbtPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitHrtbtPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitHrtbtPollInterval.setDescription("heartbeat polling messages get sent every this many seconds - we don't want the polling interval to be less than or equal to the unacknowledgment timer, which is 5 seconds")
wfSmdsCircuitHrtbtPollDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitHrtbtPollDownCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitHrtbtPollDownCount.setDescription('if this many consecutive heartbeat polling messages go unacknowledged, log an event declaring the line down')
wfSmdsCircuitDisableNetMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitDisableNetMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitDisableNetMgmt.setDescription('determine use of LMI network management')
wfSmdsCircuitSipL3ReceivedIndividualDAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsCircuitSipL3ReceivedIndividualDAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitSipL3ReceivedIndividualDAs.setDescription('The total number of individually addressed SIP Level 3 PDUs received from the remote system across the SNI. The total includes only unerrored L3PDUs.')
wfSmdsCircuitSipL3ReceivedGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsCircuitSipL3ReceivedGAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitSipL3ReceivedGAs.setDescription('The total number of group addressed SIP Level 3 PDUs received from the remote system across the SNI. The total includes only unerrored L3PDUs.')
wfSmdsCircuitSipL3SentIndividualDAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsCircuitSipL3SentIndividualDAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitSipL3SentIndividualDAs.setDescription('The number of individually addressed SIP Level 3 PDUs that have been sent by this system across the SNI.')
wfSmdsCircuitSipL3SentGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsCircuitSipL3SentGAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitSipL3SentGAs.setDescription('The number of group addressed SIP L3PDUs that have been sent by this system across the SNI.')
wfSmdsCircuitSipL3VersionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("version", 1))).clone('version')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsCircuitSipL3VersionSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitSipL3VersionSupport.setDescription('A value which indicates the version(s) of SIP that this interface supports. The value is a sum. This sum initially takes the value zero. For each version, V, that this interface supports, 2 raised to (V - 1) is added to the sum. For example, a port supporting versions 1 and 2 would have a value of (2^(1-1)+2^(2-1))=3. The SipL3VersionSupport is effectively a bit mask with Version 1 equal to the least significant bit (LSB).')
wfSmdsCircuitDisableAddrVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsCircuitDisableAddrVerify.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitDisableAddrVerify.setDescription('This object enables/disables verification checking of destination addresses in received packets.')
wfSmdsCircuitAddrVerifyDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsCircuitAddrVerifyDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsCircuitAddrVerifyDiscards.setDescription('This is the count of SMDS PDUs discarded due to mismatched group or individual addresses')
mibBuilder.exportSymbols("Wellfleet-SMDS-MIB", wfSmdsCircuitDisableHrtbtPoll=wfSmdsCircuitDisableHrtbtPoll, wfSmdsCircuitDisableAddrVerify=wfSmdsCircuitDisableAddrVerify, wfSmdsCircuitSipL3SentIndividualDAs=wfSmdsCircuitSipL3SentIndividualDAs, wfSmdsCircuitIndivAddr=wfSmdsCircuitIndivAddr, wfSmdsCircuitSipL3SentGAs=wfSmdsCircuitSipL3SentGAs, wfSmdsCircuitEntry=wfSmdsCircuitEntry, wfSmdsCircuitHrtbtPollDownCount=wfSmdsCircuitHrtbtPollDownCount, wfSmdsCircuitSipL3ReceivedIndividualDAs=wfSmdsCircuitSipL3ReceivedIndividualDAs, wfSmdsCircuitState=wfSmdsCircuitState, wfSmdsCircuitGroupAddr=wfSmdsCircuitGroupAddr, wfSmdsCircuitArpAddr=wfSmdsCircuitArpAddr, wfSmdsCircuitSipL3ReceivedGAs=wfSmdsCircuitSipL3ReceivedGAs, wfSmdsCircuitSipL3VersionSupport=wfSmdsCircuitSipL3VersionSupport, wfSmdsCircuitHrtbtPollInterval=wfSmdsCircuitHrtbtPollInterval, wfSmdsCircuitDisable=wfSmdsCircuitDisable, wfSmdsCircuitDisableNetMgmt=wfSmdsCircuitDisableNetMgmt, wfSmdsCircuitTable=wfSmdsCircuitTable, wfSmdsCircuitID=wfSmdsCircuitID, wfSmdsCircuitAddrVerifyDiscards=wfSmdsCircuitAddrVerifyDiscards, wfSmdsCircuitDelete=wfSmdsCircuitDelete)
