#
# PySNMP MIB module File-Transfer-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/File-Transfer-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, iso, NotificationType, IpAddress, NotificationType, Integer32, Counter32, ModuleIdentity, Counter64, Gauge32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "iso", "NotificationType", "IpAddress", "NotificationType", "Integer32", "Counter32", "ModuleIdentity", "Counter64", "Gauge32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniFT = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18))
sniFTStartandStop = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 1))
sniFTSysParam = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 2))
sniFTEncryptKey = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 3))
sniFTStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 4))
sniFTDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 5))
sniFTTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 6))
sniFTPollInterval = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 7))
sniFTPartners = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 8))
sniFTTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 9))
sniFTTrapSwitches = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 10))
ftStartandStop = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("on", 3), ("off", 4), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftStartandStop.setStatus('mandatory')
if mibBuilder.loadTexts: ftStartandStop.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Reading: Status of FT STARTED or NOT STARTED; writing: START or TERMINATE Filetransfer')
ftStartandStopFTAM = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("on", 3), ("off", 4), ("not-yet", 5), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftStartandStopFTAM.setStatus('mandatory')
if mibBuilder.loadTexts: ftStartandStopFTAM.setDescription('Object is supported only in FT-SINIX: Reading: Status of FTAM - on or off; writing: START or TERMINATE FTAM')
ftSysparVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftSysparVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparVersion.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Type and version of FT-system e.g. FT-BS2000 V5.2A20')
ftSysparTransportUnitSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparTransportUnitSize.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparTransportUnitSize.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Maximum size of transport unit (in Bytes)')
ftSysparTaskLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparTaskLimit.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparTaskLimit.setDescription('Object is supported only in FT-BS2000: Maximum number of tasks that can be reserved simultaneously for the execution of the FT requests')
ftSysparConnectionLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparConnectionLimit.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparConnectionLimit.setDescription('Object is supported only in FT-BS2000: Maximum number of transport connections that can be reserved for the execution of FT requests')
ftSysparRequestWaitLevel = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparRequestWaitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparRequestWaitLevel.setDescription('Object is supported only in FT-BS2000: Number of waiting requests that must exist before a parallel connection to that remote system is created')
ftSysparPartnerCheck = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("std", 1), ("transport-address", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparPartnerCheck.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparPartnerCheck.setDescription('Object is supported only in FT-BS2000: Modification/Display of the extended authentication check')
ftSysparMaxOSP = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparMaxOSP.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparMaxOSP.setDescription('Object is supported only in FT-SINIX: Maximum number of requests issued locally (outbound) that can be processed simultaneously')
ftSysparMaxISP = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparMaxISP.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparMaxISP.setDescription('Object is supported only in FT-SINIX: Maximum number of requests issued remotely (inbound) that can be processed simultaneously')
ftSysparProcessorName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparProcessorName.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparProcessorName.setDescription('Object is supported only in FT-SINIX: Processor name assigned to target system')
ftSysparStationName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparStationName.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparStationName.setDescription('Object is supported only in FT-SINIX: Station name assigned to target system')
ftSysparCode = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 9, 255))).clone(namedValues=NamedValues(("iso8859-1", 1), ("iso8859-2", 2), ("iso8859-5", 5), ("iso8859-6", 6), ("iso8859-7", 7), ("iso8859-9", 9), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparCode.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparCode.setDescription('Object is supported only in FT-SINIX: eXtended Host Code Support (XHCS); possible values: ISO8859-i (i = 1,2,5,6,7,9)')
ftSysparMaxInboundReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparMaxInboundReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparMaxInboundReqs.setDescription('Object is supported in FT-BS2000 and FT-SINIX (FTOS-only): Maximum number of inbound requests per partner system')
ftSysparMaxLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparMaxLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: ftSysparMaxLifeTime.setDescription('Object is supported in FT-SINIX (FTOS-only) and FT-BS2000: Maximum lifetime (in days) for requests in the request queue (max. 400 days) BS2000: 0 is the value for unlimited')
ftEncryptKey = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("create-new-key", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftEncryptKey.setStatus('mandatory')
if mibBuilder.loadTexts: ftEncryptKey.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Ability to create a new code for encryption')
ftStatSuspend = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatSuspend.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatSuspend.setDescription('Object is supported only in FT-BS2000: Number of requests that are currently in SUSPEND status')
ftStatLocked = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatLocked.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatLocked.setDescription('Object is supp. in FT-BS2000 and FT-SINIX (FTOS-only): Number of requests that are currently in LOCKED status')
ftStatWait = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatWait.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatWait.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Number of requests that are currently in WAIT status')
ftStatActive = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatActive.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatActive.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Number of requests that are currently in ACTIVE status')
ftStatCanceled = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatCanceled.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatCanceled.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Number of reqs that are currently in CANCELED status')
ftStatFinished = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatFinished.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatFinished.setDescription('Object is supp. in FT-BS2000 and FT-SINIX (FTOS-only): Number of reqs that are currently in FINISHED status')
ftStatHold = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatHold.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatHold.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Number of requests that are currently in HOLD status')
ftStatLocalReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatLocalReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatLocalReqs.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Number of async. requests issued in the local system, but not yet executed')
ftStatRemoteReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatRemoteReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ftStatRemoteReqs.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Number of requests issued in the remote system, but not yet executed')
ftDiagStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 255))).clone(namedValues=NamedValues(("off", 1), ("snn", 2), ("pnn", 3), ("mnn", 4), ("nnn", 5), ("ssn", 6), ("sns", 7), ("sss", 8), ("psn", 9), ("pns", 10), ("pss", 11), ("msn", 12), ("mns", 13), ("mss", 14), ("nsn", 15), ("nns", 16), ("nss", 17), ("on", 18), ("smnn", 19), ("smsn", 20), ("smns", 21), ("smss", 22), ("pmnn", 23), ("pmsn", 24), ("pmns", 25), ("pmss", 26), ("mmnn", 27), ("mmsn", 28), ("mmns", 29), ("mmss", 30), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftDiagStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ftDiagStatus.setDescription('Object is supported in FT-BS2000 and FT-SINIX: Switches FT function on or off; abbreviations are: 1.pos=ftnea, 2.pos=ftam, 3.pos=session s: standard; n: none; m: minimum; p: partner 4-character abbreviations (2nd character m - memory) means ftnea-Trace only in Memory (only FT-BS2000)')
ftTrapsSubsystemState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsSubsystemState.setStatus('mandatory')
if mibBuilder.loadTexts: ftTrapsSubsystemState.setDescription('Object is supported in FT-BS2000 only: Switch on/off sending of the traps ftSubsystemStartTrap and ftSubsystemStopTrap')
ftTrapsFTState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsFTState.setStatus('mandatory')
if mibBuilder.loadTexts: ftTrapsFTState.setDescription('Object is supported in FT-BS2000 only: Switch on/off sending of the traps ftStopTrap and ftStartTrap')
ftTrapsPartState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsPartState.setStatus('mandatory')
if mibBuilder.loadTexts: ftTrapsPartState.setDescription('Object is supported in FT-BS2000 only: Switch on/off sending of the trap ftPartnerStateTrap')
ftTrapsPartnerUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsPartnerUnreachable.setStatus('mandatory')
if mibBuilder.loadTexts: ftTrapsPartnerUnreachable.setDescription('Object is supported in FT-BS2000 only: Switch on/off sending of the trap ftPartnerUnreachableTrap')
ftTrapsRequestQueueState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsRequestQueueState.setStatus('mandatory')
if mibBuilder.loadTexts: ftTrapsRequestQueueState.setDescription('Object is supported in FT-BS2000 only: Switch on/off sending of the traps ftRequestQueueLowerLimitTrap and ftRequestQueueUpperLimitTrap')
ftTrapsTransSucc = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsTransSucc.setStatus('mandatory')
if mibBuilder.loadTexts: ftTrapsTransSucc.setDescription('Object is supported in FT-BS2000 only: Switch on/off sending of the trap ftRequestSuccessfulTrap')
ftTrapsTransFail = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsTransFail.setStatus('mandatory')
if mibBuilder.loadTexts: ftTrapsTransFail.setDescription('Object is supported in FT-BS2000 only: Switch on/off sending of the trap ftRequestErrorTrap')
ftStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,1))
if mibBuilder.loadTexts: ftStopTrap.setDescription('Sending a TRAP, if FT has exited/aborted (FT-SINIX and FT-BS2000)')
ftMaxRequestTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,2))
if mibBuilder.loadTexts: ftMaxRequestTrap.setDescription('Sending a TRAP, if the maximum number of FT requests is reached (only FT-SINIX)')
ftErrorLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,3))
if mibBuilder.loadTexts: ftErrorLimitTrap.setDescription('Sending a TRAP, if the error limit is reached (concerning restarts - only FT-SINIX)')
ftPartnerStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,4)).setObjects(("File-Transfer-MIB", "ftPartnerName"), ("File-Transfer-MIB", "ftPartnerState"))
if mibBuilder.loadTexts: ftPartnerStateTrap.setDescription('Sending a TRAP, if the Partner changed state (only FT-BS2000)')
ftPartnerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,5)).setObjects(("File-Transfer-MIB", "ftPartnerName"))
if mibBuilder.loadTexts: ftPartnerUnreachableTrap.setDescription('Maybe Partner ist unreachable (only FT-BS2000)')
ftStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,6))
if mibBuilder.loadTexts: ftStartTrap.setDescription('Sending a TRAP, if FT has been started (only FT-BS2000)')
ftRequestQueueUpperLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,7))
if mibBuilder.loadTexts: ftRequestQueueUpperLimitTrap.setDescription('at least 85 percent of Request file full (only FT-BS2000)')
ftRequestQueueLowerLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,8))
if mibBuilder.loadTexts: ftRequestQueueLowerLimitTrap.setDescription('at least 20 percent of Request queue unoccupied (only FT-BS2000)')
ftRequestSuccessfulTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,9)).setObjects(("File-Transfer-MIB", "ftRequestInitiator"), ("File-Transfer-MIB", "ftRequestID"), ("File-Transfer-MIB", "ftRequestPartnerName"), ("File-Transfer-MIB", "ftRequestUserID"), ("File-Transfer-MIB", "ftRequestFileName"))
if mibBuilder.loadTexts: ftRequestSuccessfulTrap.setDescription('Ft-Request was finished successfully (only FT-BS2000)')
ftRequestErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,10)).setObjects(("File-Transfer-MIB", "ftRequestInitiator"), ("File-Transfer-MIB", "ftRequestID"), ("File-Transfer-MIB", "ftRequestPartnerName"), ("File-Transfer-MIB", "ftRequestUserID"), ("File-Transfer-MIB", "ftRequestFileName"), ("File-Transfer-MIB", "ftRequestError"))
if mibBuilder.loadTexts: ftRequestErrorTrap.setDescription('FT-Request finished with error (only FT-BS2000)')
ftSubsystemStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,11))
if mibBuilder.loadTexts: ftSubsystemStartTrap.setDescription('Sending a TRAP, if Subsystem FT is started (only FT-BS2000)')
ftSubsystemStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,12))
if mibBuilder.loadTexts: ftSubsystemStopTrap.setDescription('Sending a TRAP, if Subsystem FT is stopped (only FT-BS2000)')
ftPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ftPollInterval.setDescription('Object is supported only in FT-SINIX. The poll interval is the time in minutes between poll actions for verifying whether FT has been stopped, in order to send an ftStopTrap. The value 0 (zero) means: no polling. Default: 0 Reading: Informs poll interval. Writing: Sets poll interval.')
ftPartnerTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1), )
if mibBuilder.loadTexts: ftPartnerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerTable.setDescription('Table of FT or FTAM-Partners supported in FT-BS2000')
ftPartnerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1), ).setIndexNames((0, "File-Transfer-MIB", "ftPartnerName"))
if mibBuilder.loadTexts: ftPartnerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerEntry.setDescription('Entry describes one FT-(FTAM-)Partner')
ftPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerName.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerName.setDescription('Object is supported in FT-BS2000: Name of FT-Partner')
ftPartnerType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openft", 1), ("ftam", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerType.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerType.setDescription('Object is supported in FT-BS2000: Partner to be reached with openFT / FTAM - Protocol')
ftPartnerState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("act", 1), ("inact", 2), ("nocon", 3), ("lunk", 4), ("runk", 5), ("adeact", 6), ("ainact", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftPartnerState.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerState.setDescription('Object is supported in FT-BS2000: Status of FT-Partner READ: Status ACT - AINACT, WRITE: Status ACT, DEACT, ADEAC')
ftPartnerNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerNetworkAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerNetworkAddr.setDescription('Object is supported in FT-BS2000: Layer 3 Address of Partner')
ftPartnerTransportSel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerTransportSel.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerTransportSel.setDescription('Object is supported in FT-BS2000: Layer 4 Address of Partner')
ftPartnerSessionSel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerSessionSel.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerSessionSel.setDescription('Object is supported in FT-BS2000: Layer 5 Address of Partner')
ftPartnerPresentationSel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerPresentationSel.setStatus('mandatory')
if mibBuilder.loadTexts: ftPartnerPresentationSel.setDescription('Object is supported in FT-BS2000: Layer 6 Address of Partner')
ftRequestID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 1), Integer32())
if mibBuilder.loadTexts: ftRequestID.setStatus('mandatory')
if mibBuilder.loadTexts: ftRequestID.setDescription('Transfer ID of FT-Request (only FT-BS2000)')
ftRequestInitiator = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))))
if mibBuilder.loadTexts: ftRequestInitiator.setStatus('mandatory')
if mibBuilder.loadTexts: ftRequestInitiator.setDescription('Initiator of FT-Request (only FT-BS2000)')
ftRequestPartnerName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: ftRequestPartnerName.setStatus('mandatory')
if mibBuilder.loadTexts: ftRequestPartnerName.setDescription('Partner of FT-Request (only FT-BS2000)')
ftRequestUserID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: ftRequestUserID.setStatus('mandatory')
if mibBuilder.loadTexts: ftRequestUserID.setDescription('UserID of FT-Request (only FT-BS2000)')
ftRequestFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 221)))
if mibBuilder.loadTexts: ftRequestFileName.setStatus('mandatory')
if mibBuilder.loadTexts: ftRequestFileName.setDescription('name of transferred File (only FT-BS2000)')
ftRequestError = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7)))
if mibBuilder.loadTexts: ftRequestError.setStatus('mandatory')
if mibBuilder.loadTexts: ftRequestError.setDescription('Error in Request (only FT-BS2000)')
mibBuilder.exportSymbols("File-Transfer-MIB", ftStatFinished=ftStatFinished, ftPartnerStateTrap=ftPartnerStateTrap, ftStatLocked=ftStatLocked, ftSubsystemStartTrap=ftSubsystemStartTrap, ftPartnerState=ftPartnerState, ftPartnerNetworkAddr=ftPartnerNetworkAddr, ftStatCanceled=ftStatCanceled, ftStartTrap=ftStartTrap, ftRequestSuccessfulTrap=ftRequestSuccessfulTrap, ftPartnerPresentationSel=ftPartnerPresentationSel, ftRequestError=ftRequestError, sniFTTraps=sniFTTraps, ftSysparStationName=ftSysparStationName, ftSysparMaxOSP=ftSysparMaxOSP, ftTrapsPartState=ftTrapsPartState, ftStopTrap=ftStopTrap, ftSysparMaxISP=ftSysparMaxISP, ftRequestQueueLowerLimitTrap=ftRequestQueueLowerLimitTrap, sniFTEncryptKey=sniFTEncryptKey, ftSysparMaxLifeTime=ftSysparMaxLifeTime, ftStatRemoteReqs=ftStatRemoteReqs, ftRequestQueueUpperLimitTrap=ftRequestQueueUpperLimitTrap, sniFTTrapSwitches=sniFTTrapSwitches, sniFTTrapData=sniFTTrapData, ftSysparCode=ftSysparCode, sniFTSysParam=sniFTSysParam, ftStatHold=ftStatHold, sniFTStartandStop=sniFTStartandStop, ftSysparTaskLimit=ftSysparTaskLimit, ftTrapsTransFail=ftTrapsTransFail, ftStatSuspend=ftStatSuspend, ftStatActive=ftStatActive, ftPartnerEntry=ftPartnerEntry, ftRequestUserID=ftRequestUserID, ftStartandStop=ftStartandStop, ftPartnerName=ftPartnerName, ftPartnerTransportSel=ftPartnerTransportSel, ftPartnerUnreachableTrap=ftPartnerUnreachableTrap, sniProductMibs=sniProductMibs, ftPartnerTable=ftPartnerTable, ftStatWait=ftStatWait, ftSubsystemStopTrap=ftSubsystemStopTrap, sni=sni, sniFTPartners=sniFTPartners, ftDiagStatus=ftDiagStatus, ftRequestID=ftRequestID, ftPartnerSessionSel=ftPartnerSessionSel, sniFTStatistics=sniFTStatistics, ftTrapsSubsystemState=ftTrapsSubsystemState, ftTrapsFTState=ftTrapsFTState, ftSysparMaxInboundReqs=ftSysparMaxInboundReqs, ftSysparPartnerCheck=ftSysparPartnerCheck, ftSysparProcessorName=ftSysparProcessorName, ftStatLocalReqs=ftStatLocalReqs, ftMaxRequestTrap=ftMaxRequestTrap, ftRequestFileName=ftRequestFileName, ftRequestErrorTrap=ftRequestErrorTrap, ftTrapsRequestQueueState=ftTrapsRequestQueueState, ftTrapsPartnerUnreachable=ftTrapsPartnerUnreachable, ftStartandStopFTAM=ftStartandStopFTAM, ftPartnerType=ftPartnerType, ftSysparConnectionLimit=ftSysparConnectionLimit, ftErrorLimitTrap=ftErrorLimitTrap, ftRequestInitiator=ftRequestInitiator, ftTrapsTransSucc=ftTrapsTransSucc, sniFTDiagnostics=sniFTDiagnostics, ftSysparTransportUnitSize=ftSysparTransportUnitSize, ftSysparRequestWaitLevel=ftSysparRequestWaitLevel, sniFT=sniFT, sniFTPollInterval=sniFTPollInterval, ftEncryptKey=ftEncryptKey, ftRequestPartnerName=ftRequestPartnerName, ftPollInterval=ftPollInterval, ftSysparVersion=ftSysparVersion)
