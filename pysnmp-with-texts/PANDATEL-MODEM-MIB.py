#
# PySNMP MIB module PANDATEL-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, MibIdentifier, iso, ObjectIdentity, Integer32, Unsigned32, Counter64, enterprises, IpAddress, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "MibIdentifier", "iso", "ObjectIdentity", "Integer32", "Unsigned32", "Counter64", "enterprises", "IpAddress", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pandatel = MibIdentifier((1, 3, 6, 1, 4, 1, 760))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1))
wan_products = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2)).setLabel("wan-products")
mdm_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1)).setLabel("mdm-mgmt")
mdmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1))
mdmInstalledRacks = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInstalledRacks.setStatus('mandatory')
if mibBuilder.loadTexts: mdmInstalledRacks.setDescription('This is the number of currently installed modem racks.')
mdmInstalledModems = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInstalledModems.setStatus('mandatory')
if mibBuilder.loadTexts: mdmInstalledModems.setDescription('This is the number of currently installed modems')
mdmLoopModeTraps = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLoopModeTraps.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLoopModeTraps.setDescription('This enables or disables traps generated by a Loop Mode status change at any local modem port of one of the installed modems (values: disable, enable).')
mdmCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCurrentDate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCurrentDate.setDescription("This indicate the current date as 'mm/dd/yy'. The date will be used for local management.")
mdmCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCurrentTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCurrentTime.setDescription("This indicate the current time as 'hh:mm:ss'. The time will be used for local management.")
mdmRackTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: mdmRackTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRackTable.setDescription('Table which contains information about the installed racks.')
rackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rackRack"))
if mibBuilder.loadTexts: rackEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rackEntry.setDescription('The index of the table.')
rackRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackRack.setStatus('mandatory')
if mibBuilder.loadTexts: rackRack.setDescription('The index of this particular modem rack in the stack. The index of the rack which contains the agent should have the number 1.')
rackType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("rack-10s-3hu", 2), ("rack-12s-3hu", 3), ("rack-10s-6hu", 4), ("rack-6s-9s-6hu", 5), ("device-stack-15s", 6), ("rack-8s-4hu", 7), ("rack-10s-2c-6hu", 8), ("hs-rack-10s-3hu", 9), ("rack-8s-2c-6hu", 10), ("hs-rack-3s-1c-3hu", 11), ("rack-1s-1c-1hu", 12), ("rack-3s-1c-1hu", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackType.setStatus('mandatory')
if mibBuilder.loadTexts: rackType.setDescription('This entry shows the type number of the rack.')
rackDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackDescription.setStatus('mandatory')
if mibBuilder.loadTexts: rackDescription.setDescription('A verbal description of the modem rack.')
rackModemSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackModemSlots.setStatus('mandatory')
if mibBuilder.loadTexts: rackModemSlots.setDescription('This entry shows the number of slots for modem cards in the rack.')
rackModems = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackModems.setStatus('mandatory')
if mibBuilder.loadTexts: rackModems.setDescription('This entry shows the number of modems currently installed in the rack.')
rackPowerSupplySlots = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(999))).clone(namedValues=NamedValues(("unknown", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackPowerSupplySlots.setStatus('mandatory')
if mibBuilder.loadTexts: rackPowerSupplySlots.setDescription('This entry shows the number of slots for power supplies in the rack.')
rackPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(999))).clone(namedValues=NamedValues(("unknown", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackPowerSupplies.setStatus('mandatory')
if mibBuilder.loadTexts: rackPowerSupplies.setDescription('This entry shows the number of power supplies currently installed in the rack.')
mdmModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3), )
if mibBuilder.loadTexts: mdmModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemTable.setDescription('Table which contains general information about the installed modems.')
modemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "mdmRack"), (0, "PANDATEL-MODEM-MIB", "mdmModem"))
if mibBuilder.loadTexts: modemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: modemEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the modem is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('The index of this particular modem in the rack. The value corresponds with the slot where the modem is inserted.')
mdmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDescription.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDescription.setDescription('A verbal description of the modem.')
mdmUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmUserName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmUserName.setDescription('A verbal description of the modem which can be changed by the manager.')
mdmSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSelfTest.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSelfTest.setDescription("This entry enables the execution of a selftest. Write requests with values other than 'start' or 'cancel' will be rejected. The result will be found in mdmSelfTestResult.")
mdmSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 97, 98, 99, 100))).clone(namedValues=NamedValues(("started", 3), ("running", 4), ("ram-error", 5), ("rom-error", 6), ("eeprom-error", 7), ("line-if-error", 8), ("other-error", 97), ("never-started", 98), ("cancelled", 99), ("ok", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSelfTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSelfTestResult.setDescription("This entry shows the result status of the last modem-dependent self test. After start, the status may change to 'running' before the first error that occured is displayed. If no error was detected the status changes to 'ok'.")
mdmRemoteAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("access", 2), ("no-access", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRemoteAccessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteAccessStatus.setDescription("This entry shows the access status to the remote counterpart of the modem. The standard value depends on the device. Some remote modems are always accessible, others are not accessible or can be switched to both modes (see 'mdmForcedRemoteAccess' in the specific modem MIB).")
mdmInterfacePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInterfacePorts.setStatus('mandatory')
if mibBuilder.loadTexts: mdmInterfacePorts.setDescription('This entry indicates the number of interface ports of the modem. An interface port connects an external device.')
mdmLinePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmLinePorts.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLinePorts.setDescription('This entry indicates the number of line ports of the modem. A line port connects a remote modem.')
mdmVerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4), )
if mibBuilder.loadTexts: mdmVerInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmVerInfoTable.setDescription("Table which contains information about the installed modems' versions.")
verInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "viRack"), (0, "PANDATEL-MODEM-MIB", "viModem"))
if mibBuilder.loadTexts: verInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: verInfoEntry.setDescription('The index of the table.')
viRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viRack.setStatus('mandatory')
if mibBuilder.loadTexts: viRack.setDescription('The index of the rack where the modem is installed.')
viModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viModem.setStatus('mandatory')
if mibBuilder.loadTexts: viModem.setDescription('The index of this particular modem in the rack. The value corresponds with the slot where the modem is inserted.')
viType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 102, 103, 201, 202, 203, 204, 205, 206, 301, 302, 401, 501, 502, 503, 504, 505, 506, 507, 601, 701, 801, 802, 901))).clone(namedValues=NamedValues(("not-present", 0), ("other", 1), ("fhfl", 101), ("fhfl-f", 102), ("fhfl-s", 103), ("gm-h", 201), ("gm-f", 202), ("gm-d", 203), ("gm-s", 204), ("gm-s-f", 205), ("gm-d-f", 206), ("bm-p", 301), ("bm-z", 302), ("gx", 401), ("fobus", 501), ("fx", 502), ("fx-i", 503), ("fx-ig", 504), ("os", 505), ("fx-g", 506), ("fx-ih", 507), ("fme", 601), ("inax", 701), ("emx", 801), ("cmx-ie", 802), ("etc", 901)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viType.setStatus('mandatory')
if mibBuilder.loadTexts: viType.setDescription('This entry indicates the type of the modem.')
viFirmwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viFirmwVer.setStatus('mandatory')
if mibBuilder.loadTexts: viFirmwVer.setDescription('This entry indicates the firmware revision of the modem.')
viUnitRel = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viUnitRel.setStatus('mandatory')
if mibBuilder.loadTexts: viUnitRel.setDescription('This entry indicates the hardware version and revision of the modem.')
viArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viArtNo.setStatus('mandatory')
if mibBuilder.loadTexts: viArtNo.setDescription('This entry indicates the article number of the modem.')
viFrontVer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viFrontVer.setStatus('mandatory')
if mibBuilder.loadTexts: viFrontVer.setDescription('For factory purposes only.')
viSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: viSerialNumber.setDescription('This entry indicates the serial number of the modem.')
mdmPortTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5), )
if mibBuilder.loadTexts: mdmPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPortTable.setDescription('Table which contains information about all ports.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "portRack"), (0, "PANDATEL-MODEM-MIB", "portModem"), (0, "PANDATEL-MODEM-MIB", "portPort"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portEntry.setDescription('The index of the table.')
portRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRack.setStatus('mandatory')
if mibBuilder.loadTexts: portRack.setDescription('The index of the rack where the modem to which this port belongs is installed.')
portModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModem.setStatus('mandatory')
if mibBuilder.loadTexts: portModem.setDescription('The index of the modem to which this port belongs.')
portPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPort.setStatus('mandatory')
if mibBuilder.loadTexts: portPort.setDescription('The index of the port.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("interface-port", 2), ("line-port", 3), ("vt100-mgmt-port", 4), ("outband-mgmt-port", 5), ("backup-port", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
if mibBuilder.loadTexts: portType.setDescription('This entry indicates the type of the port.')
portInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 34, 39, 40, 48, 55, 56, 66, 67, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 999))).clone(namedValues=NamedValues(("other", 1), ("v24", 2), ("v35", 3), ("v36", 4), ("x21", 5), ("rs485", 6), ("g703-e1t1", 7), ("g703-e2t2", 8), ("g703-64k", 9), ("i430", 10), ("store-loop", 11), ("intercom", 12), ("fo-e1t1", 13), ("s0", 14), ("hdsl", 15), ("no-module", 17), ("atm-26mb", 18), ("g703-e3", 19), ("g703-t3", 20), ("sts-1", 21), ("hssi", 22), ("bm", 34), ("g703-t1", 39), ("g703-t2", 40), ("eth-bridge", 48), ("g703-e1", 55), ("g703-e2", 56), ("sts-3", 66), ("stm-1", 67), ("sm-fiber-820nm", 130), ("sm-fiber-1300nm", 131), ("sm-fiber-1550nm", 132), ("mm-fiber-820nm", 133), ("mm-fiber-1300nm", 134), ("mm-fiber-1550nm", 135), ("sm-fiber-1530-33nm", 136), ("sm-fiber-1531-12nm", 137), ("sm-fiber-1531-90nm", 138), ("sm-fiber-1532-68nm", 139), ("sm-fiber-1533-47nm", 140), ("sm-fiber-1534-25nm", 141), ("sm-fiber-1535-04nm", 142), ("sm-fiber-1535-82nm", 143), ("sm-fiber-1536-61nm", 144), ("sm-fiber-1537-40nm", 145), ("sm-fiber-1538-19nm", 146), ("sm-fiber-1538-98nm", 147), ("sm-fiber-1539-77nm", 148), ("sm-fiber-1540-56nm", 149), ("sm-fiber-1541-35nm", 150), ("sm-fiber-1542-14nm", 151), ("sm-fiber-1542-94nm", 152), ("sm-fiber-1543-73nm", 153), ("sm-fiber-1544-53nm", 154), ("sm-fiber-1545-32nm", 155), ("sm-fiber-1546-12nm", 156), ("sm-fiber-1546-92nm", 157), ("sm-fiber-1547-72nm", 158), ("sm-fiber-1548-51nm", 159), ("sm-fiber-1549-32nm", 160), ("sm-fiber-1550-12nm", 161), ("sm-fiber-1550-92nm", 162), ("sm-fiber-1551-72nm", 163), ("sm-fiber-1552-52nm", 164), ("sm-fiber-1553-33nm", 165), ("sm-fiber-1554-13nm", 166), ("sm-fiber-1554-94nm", 167), ("sm-fiber-1555-75nm", 168), ("sm-fiber-1556-55nm", 169), ("sm-fiber-1557-36nm", 170), ("sm-fiber-1558-17nm", 171), ("sm-fiber-1558-98nm", 172), ("sm-fiber-1559-79nm", 173), ("sm-fiber-1560-61nm", 174), ("sm-fiber-1561-42nm", 175), ("sm-fiber-1562-23nm", 176), ("sm-fiber-1563-05nm", 177), ("sm-fiber-1563-86nm", 178), ("sm-fiber-1564-68nm", 179), ("sm-fiber-1565-50nm", 180), ("sm-1300-1550nm", 181), ("sm-1550-1300nm", 182), ("mm-820-1300nm", 183), ("mm-1300-820nm", 184), ("sm-fiber-1480nm", 185), ("sm-fiber-1510nm", 186), ("sm-fiber-1538nm", 187), ("sm-fiber-1553nm", 188), ("sm-mm-fiber-1310nm", 189), ("missing", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: portInterfaceType.setDescription('This entry indicates the type of interface of the port.')
portConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 997, 998, 999))).clone(namedValues=NamedValues(("other", 1), ("single-fiber", 2), ("dual-fiber", 3), ("bnc", 4), ("dpc", 5), ("rj45", 7), ("ics", 8), ("mic", 9), ("db-9-f", 10), ("db-9-m", 11), ("db-15-f", 12), ("db-15-m", 13), ("db-25-f", 14), ("db-25-m", 15), ("db-37-f", 16), ("db-37-m", 17), ("winch-f", 18), ("winch-m", 19), ("mini-c", 20), ("minimicro", 21), ("escon", 22), ("e2000", 23), ("single-sc", 24), ("single-fc", 25), ("single-st", 26), ("dual-sc", 27), ("dual-fc", 28), ("dual-st", 29), ("single-sc-apc", 30), ("single-fc-apc", 31), ("dual-sc-apc", 32), ("dual-fc-apc", 33), ("single-lc", 34), ("single-lc-apc", 35), ("dual-lc", 36), ("dual-lc-apc", 37), ("mt-rj", 38), ("single-sc-45", 39), ("dual-sc-45", 40), ("unknown", 997), ("virtual", 998), ("not-installed", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConnector.setStatus('mandatory')
if mibBuilder.loadTexts: portConnector.setDescription('This entry indicates the connector type of the port.')
portLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("digital", 3), ("line", 4), ("off", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLoopMode.setStatus('mandatory')
if mibBuilder.loadTexts: portLoopMode.setDescription('This entry indicates the loop mode of the port.')
mdmPortSignalTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6), )
if mibBuilder.loadTexts: mdmPortSignalTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPortSignalTable.setDescription('Table which contains information about all port status signals.')
portSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "psignalRack"), (0, "PANDATEL-MODEM-MIB", "psignalModem"), (0, "PANDATEL-MODEM-MIB", "psignalPort"), (0, "PANDATEL-MODEM-MIB", "psignalType"))
if mibBuilder.loadTexts: portSignalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portSignalEntry.setDescription('The index of the table.')
psignalRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalRack.setStatus('mandatory')
if mibBuilder.loadTexts: psignalRack.setDescription('The index of the rack where the modem is installed to which the port belongs that provides the signal.')
psignalModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalModem.setStatus('mandatory')
if mibBuilder.loadTexts: psignalModem.setDescription('The index of the modem to which the port belongs that provides the signal.')
psignalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalPort.setStatus('mandatory')
if mibBuilder.loadTexts: psignalPort.setDescription('The index of the port that provides the signal.')
psignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 26, 27))).clone(namedValues=NamedValues(("other", 1), ("link", 2), ("rts", 3), ("dcd", 4), ("dtr", 5), ("dsr", 6), ("c", 7), ("i", 8), ("fsync", 9), ("ais", 10), ("lay1", 11), ("bond", 12), ("laser-status", 13), ("ta", 14), ("ca", 15), ("eclk", 16), ("laser-tx", 17), ("laser-temp", 18), ("cr", 20), ("rd", 26), ("td", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalType.setStatus('mandatory')
if mibBuilder.loadTexts: psignalType.setDescription('This entry indicates the signal type.')
psignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("on", 4), ("off", 5), ("yes", 6), ("no", 7), ("ok", 8), ("fail", 9), ("active", 10), ("traffic", 11), ("space", 12), ("mark", 13), ("high", 14), ("low", 15), ("sync", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psignalStatus.setDescription('This entry indicates the current status of the signal.')
psignalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psignalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: psignalTrap.setDescription('This enables or disables traps. If Trap is enabled each transition of the signal status may cause a trap portSignalStatusGood/portSignalStatusBad.')
mdmBERTTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7), )
if mibBuilder.loadTexts: mdmBERTTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmBERTTable.setDescription('Table which contains information about all performable bit error rate tests.')
bertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "bertRack"), (0, "PANDATEL-MODEM-MIB", "bertModem"))
if mibBuilder.loadTexts: bertEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bertEntry.setDescription('The index of thetable.')
bertRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertRack.setStatus('mandatory')
if mibBuilder.loadTexts: bertRack.setDescription('The index of the rack where the modem is installed.')
bertModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertModem.setStatus('mandatory')
if mibBuilder.loadTexts: bertModem.setDescription('The index of this particular modem in the rack. The value corresponds with the slot where the modem is inserted.')
bertPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertPort.setStatus('mandatory')
if mibBuilder.loadTexts: bertPort.setDescription('The index of the port where the BER test will be performed. The modem can only perform one test at a time. The test can only be performed on a subset of ports, usually the line ports. Write requests with different port numbers will be rejected. Write requests with valid line port numbers will be rejected while the BER test is running.')
bertBERTest = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5))).clone(namedValues=NamedValues(("start", 3), ("stop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertBERTest.setStatus('mandatory')
if mibBuilder.loadTexts: bertBERTest.setDescription("This entry enables the execution of a BER test. Write requests with values other than 'start' or 'stop' will be rejected.")
bertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("never-started", 2), ("start", 3), ("running", 4), ("stopped", 6), ("start-failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bertStatus.setDescription('This entry indicates the status of the BER test.')
bertRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertRunTime.setStatus('mandatory')
if mibBuilder.loadTexts: bertRunTime.setDescription('This entry indicates the duration of the BER test in seconds.')
bertInErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertInErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: bertInErrorTime.setDescription('This entry shows the duration of erroneous test transmission in seconds.')
bertErrorFreeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertErrorFreeTime.setStatus('mandatory')
if mibBuilder.loadTexts: bertErrorFreeTime.setDescription('This entry shows the duration of error-free test transmission in seconds.')
bertKbitsRecWrapped = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertKbitsRecWrapped.setStatus('mandatory')
if mibBuilder.loadTexts: bertKbitsRecWrapped.setDescription('This is the number the bertKbitsReceived counter has wrapped.')
bertKbitsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertKbitsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: bertKbitsReceived.setDescription('This entry indicates the number of Kbits received during the test. When the counter wraps the bertKbitRecWrapped increases by one.')
bertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertErrors.setStatus('mandatory')
if mibBuilder.loadTexts: bertErrors.setDescription('This entry indicates the number of errors detected during the test.')
bertSyncLosts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertSyncLosts.setStatus('mandatory')
if mibBuilder.loadTexts: bertSyncLosts.setDescription('This entry indicates the number of pattern sync losts detected during the test.')
bertSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-sync", 2), ("no-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertSyncStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bertSyncStatus.setDescription('This entry indicates the current pattern sync status.')
bertBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertBitErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: bertBitErrorRate.setDescription("This entry indicates the bit error rate. It is provided as a string in the format 'd.ddE+/-dd'. Float scanf routines are capable of interpreting the string in the correct manner.")
mdmRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9))
remModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3), )
if mibBuilder.loadTexts: remModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: remModemTable.setDescription('Table which contains general information about all counterparts of the installed modems.')
rmodemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rmdmRack"), (0, "PANDATEL-MODEM-MIB", "rmdmModem"))
if mibBuilder.loadTexts: rmodemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rmodemEntry.setDescription('The index of the table.')
rmdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmRack.setDescription('This entry indicates the index of the rack where the modem is installed that the remote modem is linked to.')
rmdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmModem.setDescription('The index of the modem that the remote modem is linked to.')
rmdmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmDescription.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmDescription.setDescription('A verbal description of the remote modem.')
rmdmUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmdmUserName.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmUserName.setDescription('A verbal description of the remote modem which can be changed by the manager.')
rmdmSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmdmSelfTest.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmSelfTest.setDescription("This entry enables the execution of a selftest. Write requests with values other than 'start' or 'cancel' will be rejected. The result will be found in SelfTestResult.")
rmdmSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 97, 98, 99, 100))).clone(namedValues=NamedValues(("started", 3), ("running", 4), ("ram-error", 5), ("rom-error", 6), ("eeprom-error", 7), ("line-if-error", 8), ("other-error", 97), ("never-started", 98), ("cancelled", 99), ("ok", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmSelfTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmSelfTestResult.setDescription("This indicates the result status of the last modem-dependent self test. After start, the status may change to 'running' before the first error that occured displays. If no error was detected the status changes to 'ok'.")
rmdmRemoteAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("access", 2), ("no-access", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmRemoteAccessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmRemoteAccessStatus.setDescription("This entry shows the access status of the modem. The standard value depends on the device. Some modems are always accessible, others are not accessible or can be switched to both modes (see 'mdmForcedRemoteAccess' in the specific modem MIB).")
rmdmInterfacePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmInterfacePorts.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmInterfacePorts.setDescription('This entry indicates the number of interface ports of the remote modem. An interface port connects an external device.')
rmdmLinePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmLinePorts.setStatus('mandatory')
if mibBuilder.loadTexts: rmdmLinePorts.setDescription('This entry indicates the number of line ports of the modem. A line port connects the local counterpart of the remote modem.')
remVerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4), )
if mibBuilder.loadTexts: remVerInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: remVerInfoTable.setDescription("Table which contains information about the remote modems' versions.")
remVerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rviRack"), (0, "PANDATEL-MODEM-MIB", "rviModem"))
if mibBuilder.loadTexts: remVerInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: remVerInfoEntry.setDescription('The index of the table.')
rviRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviRack.setStatus('mandatory')
if mibBuilder.loadTexts: rviRack.setDescription('The index of the rack where the modem is installed that the remote modem is linked to.')
rviModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviModem.setStatus('mandatory')
if mibBuilder.loadTexts: rviModem.setDescription('The index of the modem that the remote modem is linked to.')
rviType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 102, 103, 201, 202, 203, 204, 205, 206, 301, 302, 401, 501, 502, 503, 504, 506, 507, 601, 701, 801, 802, 901))).clone(namedValues=NamedValues(("not-present", 0), ("other", 1), ("fhfl", 101), ("fhfl-f", 102), ("fhfl-s", 103), ("gm-h", 201), ("gm-f", 202), ("gm-d", 203), ("gm-s", 204), ("gm-s-f", 205), ("gm-d-f", 206), ("bm-p", 301), ("bm-z", 302), ("gx", 401), ("fobus", 501), ("fx", 502), ("fx-i", 503), ("fx-ig", 504), ("fx-g", 506), ("fx-ih", 507), ("fme", 601), ("inax", 701), ("emx", 801), ("cmx-ie", 802), ("etc", 901)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviType.setStatus('mandatory')
if mibBuilder.loadTexts: rviType.setDescription('This entry indicates the type of the remote modem.')
rviFirmwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviFirmwVer.setStatus('mandatory')
if mibBuilder.loadTexts: rviFirmwVer.setDescription('This entry indicates the firmware revision of the remote modem.')
rviUnitRel = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviUnitRel.setStatus('mandatory')
if mibBuilder.loadTexts: rviUnitRel.setDescription('This entry indicates the hardware version and revision of the remote modem.')
rviArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviArtNo.setStatus('mandatory')
if mibBuilder.loadTexts: rviArtNo.setDescription('This entry indicates the article number of the remote modem.')
rviFrontVer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviFrontVer.setStatus('mandatory')
if mibBuilder.loadTexts: rviFrontVer.setDescription('For factory purposes only.')
rviSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rviSerialNumber.setDescription('This entry indicates the serial number of the remote modem.')
remPortTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5), )
if mibBuilder.loadTexts: remPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: remPortTable.setDescription('Table which contains information about all ports of the remote modem.')
remPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rportRack"), (0, "PANDATEL-MODEM-MIB", "rportModem"), (0, "PANDATEL-MODEM-MIB", "rportPort"))
if mibBuilder.loadTexts: remPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: remPortEntry.setDescription('The index of the table.')
rportRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportRack.setStatus('mandatory')
if mibBuilder.loadTexts: rportRack.setDescription('The index of the rack where the local counterpart of the remote modem is installed to which this port belongs.')
rportModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportModem.setStatus('mandatory')
if mibBuilder.loadTexts: rportModem.setDescription('The index of the local counterpart of the remote modem to which this port belongs.')
rportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportPort.setStatus('mandatory')
if mibBuilder.loadTexts: rportPort.setDescription('The index of the port.')
rportType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("interface-port", 2), ("line-port", 3), ("vt100-mgmt-port", 4), ("outband-mgmt-port", 5), ("backup-port", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportType.setStatus('mandatory')
if mibBuilder.loadTexts: rportType.setDescription('This entry indicates the type of the port.')
rportInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 34, 39, 40, 48, 55, 56, 66, 67, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 999))).clone(namedValues=NamedValues(("other", 1), ("v24", 2), ("v35", 3), ("v36", 4), ("x21", 5), ("rs485", 6), ("g703-e1t1", 7), ("g703-e2t2", 8), ("g703-64k", 9), ("i430", 10), ("store-loop", 11), ("intercom", 12), ("fo-e1t1", 13), ("s0", 14), ("hdsl", 15), ("no-module", 17), ("atm-26mb", 18), ("g703-e3", 19), ("g703-t3", 20), ("sts-1", 21), ("hssi", 22), ("bm", 34), ("g703-t1", 39), ("g703-t2", 40), ("eth-bridge", 48), ("g703-e1", 55), ("g703-e2", 56), ("sts-3", 66), ("stm-1", 67), ("sm-fiber-820nm", 130), ("sm-fiber-1300nm", 131), ("sm-fiber-1550nm", 132), ("mm-fiber-820nm", 133), ("mm-fiber-1300nm", 134), ("mm-fiber-1550nm", 135), ("sm-fiber-1530-33nm", 136), ("sm-fiber-1531-12nm", 137), ("sm-fiber-1531-90nm", 138), ("sm-fiber-1532-68nm", 139), ("sm-fiber-1533-47nm", 140), ("sm-fiber-1534-25nm", 141), ("sm-fiber-1535-04nm", 142), ("sm-fiber-1535-82nm", 143), ("sm-fiber-1536-61nm", 144), ("sm-fiber-1537-40nm", 145), ("sm-fiber-1538-19nm", 146), ("sm-fiber-1538-98nm", 147), ("sm-fiber-1539-77nm", 148), ("sm-fiber-1540-56nm", 149), ("sm-fiber-1541-35nm", 150), ("sm-fiber-1542-14nm", 151), ("sm-fiber-1542-94nm", 152), ("sm-fiber-1543-73nm", 153), ("sm-fiber-1544-53nm", 154), ("sm-fiber-1545-32nm", 155), ("sm-fiber-1546-12nm", 156), ("sm-fiber-1546-92nm", 157), ("sm-fiber-1547-72nm", 158), ("sm-fiber-1548-51nm", 159), ("sm-fiber-1549-32nm", 160), ("sm-fiber-1550-12nm", 161), ("sm-fiber-1550-92nm", 162), ("sm-fiber-1551-72nm", 163), ("sm-fiber-1552-52nm", 164), ("sm-fiber-1553-33nm", 165), ("sm-fiber-1554-13nm", 166), ("sm-fiber-1554-94nm", 167), ("sm-fiber-1555-75nm", 168), ("sm-fiber-1556-55nm", 169), ("sm-fiber-1557-36nm", 170), ("sm-fiber-1558-17nm", 171), ("sm-fiber-1558-98nm", 172), ("sm-fiber-1559-79nm", 173), ("sm-fiber-1560-61nm", 174), ("sm-fiber-1561-42nm", 175), ("sm-fiber-1562-23nm", 176), ("sm-fiber-1563-05nm", 177), ("sm-fiber-1563-86nm", 178), ("sm-fiber-1564-68nm", 179), ("sm-fiber-1565-50nm", 180), ("sm-1300-1550nm", 181), ("sm-1550-1300nm", 182), ("mm-820-1300nm", 183), ("mm-1300-820nm", 184), ("sm-fiber-1480nm", 185), ("sm-fiber-1510nm", 186), ("sm-fiber-1538nm", 187), ("sm-fiber-1553nm", 188), ("sm-mm-fiber-1310nm", 189), ("missing", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: rportInterfaceType.setDescription('This entry indicates the type of interface of the port.')
rportConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 997, 998, 999))).clone(namedValues=NamedValues(("other", 1), ("single-fiber", 2), ("dual-fiber", 3), ("bnc", 4), ("dpc", 5), ("rj45", 7), ("ics", 8), ("mic", 9), ("db-9-f", 10), ("db-9-m", 11), ("db-15-f", 12), ("db-15-m", 13), ("db-25-f", 14), ("db-25-m", 15), ("db-37-f", 16), ("db-37-m", 17), ("winch-f", 18), ("winch-m", 19), ("mini-c", 20), ("minimicro", 21), ("escon", 22), ("e2000", 23), ("single-sc", 24), ("single-fc", 25), ("single-st", 26), ("dual-sc", 27), ("dual-fc", 28), ("dual-st", 29), ("single-sc-apc", 30), ("single-fc-apc", 31), ("dual-sc-apc", 32), ("dual-fc-apc", 33), ("single-lc", 34), ("single-lc-apc", 35), ("dual-lc", 36), ("dual-lc-apc", 37), ("mt-rj", 38), ("single-sc-45", 39), ("dual-sc-45", 40), ("unknown", 997), ("virtual", 998), ("not-installed", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportConnector.setStatus('mandatory')
if mibBuilder.loadTexts: rportConnector.setDescription('This entry indicates the connector type of the port.')
rportLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("digital", 3), ("line", 4), ("off", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rportLoopMode.setStatus('mandatory')
if mibBuilder.loadTexts: rportLoopMode.setDescription('This entry indicates the loop mode of the port (remote, digital, line, off).')
remPortSignalTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6), )
if mibBuilder.loadTexts: remPortSignalTable.setStatus('mandatory')
if mibBuilder.loadTexts: remPortSignalTable.setDescription('Table which contains information about all port status signals.')
remPortSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rpsignalRack"), (0, "PANDATEL-MODEM-MIB", "rpsignalModem"), (0, "PANDATEL-MODEM-MIB", "rpsignalPort"), (0, "PANDATEL-MODEM-MIB", "rpsignalType"))
if mibBuilder.loadTexts: remPortSignalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: remPortSignalEntry.setDescription('The index of the table.')
rpsignalRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalRack.setStatus('mandatory')
if mibBuilder.loadTexts: rpsignalRack.setDescription('The index of the rack where the local counterpart of the remote modem is installed.')
rpsignalModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalModem.setStatus('mandatory')
if mibBuilder.loadTexts: rpsignalModem.setDescription('The index of the local counterpart of the remote modem.')
rpsignalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalPort.setStatus('mandatory')
if mibBuilder.loadTexts: rpsignalPort.setDescription('The index of the port at the remote modem that provides the signal.')
rpsignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 26, 27))).clone(namedValues=NamedValues(("other", 1), ("link", 2), ("rts", 3), ("dcd", 4), ("dtr", 5), ("dsr", 6), ("c", 7), ("i", 8), ("fsync", 9), ("ais", 10), ("lay1", 11), ("bond", 12), ("laser-status", 13), ("ta", 14), ("ca", 15), ("eclk", 16), ("laser-tx", 17), ("laser-temp", 18), ("cr", 20), ("rd", 26), ("td", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalType.setStatus('mandatory')
if mibBuilder.loadTexts: rpsignalType.setDescription('This entry indicates the signal type.')
rpsignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("on", 4), ("off", 5), ("yes", 6), ("no", 7), ("ok", 8), ("fail", 9), ("active", 10), ("traffic", 11), ("space", 12), ("mark", 13), ("high", 14), ("low", 15), ("sync", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rpsignalStatus.setDescription('This entry indicates the current status of the signal.')
mdmSpecifics = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10))
mdmMgmtIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20))
mdmIfType = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 999))).clone(namedValues=NamedValues(("other", 1), ("v24", 2), ("v35", 4), ("x21", 5), ("ethernet", 6), ("missing", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIfType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfType.setDescription("This variable shows the agent's interface type.")
mdmIfProtocol = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("slip", 2), ("ppp-async", 3), ("ppp-sync", 4), ("ethernetII", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIfProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfProtocol.setDescription("This variable shows the agent's protocol type.")
mdmIfDataRate = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIfDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfDataRate.setDescription("This variable shows the agent's data rate in bps.")
mdmIfDialEnable = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfDialEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfDialEnable.setDescription('This variable enables the initialization of a dial modem in case of alarm. The following variables (5 to 10) are active only if this variable is enabled.')
mdmIfInitString = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfInitString.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfInitString.setDescription('This variable defines an init string which is generated in case of alarm to configure an external Hayes compatible modem.')
mdmIfDialString = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfDialString.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfDialString.setDescription('This variable defines a modem command which is generated in case of alarm to dial-up a remote NMS station. If the dial string is not defined neither the init string nor the dial string is generated.')
mdmIfSendTTL = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfSendTTL.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfSendTTL.setDescription("This variable defines the TTL (time to live) in seconds. After that time the generated traps will be deleted from the buffer. If the value is '0' the traps will remain in the buffer.")
mdmIfDialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfDialTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfDialTimeout.setDescription('This variable defines a dial timeout for the modem in seconds.')
mdmIfRedialPause = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfRedialPause.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfRedialPause.setDescription('This variable defines the duration of a redial pause in seconds.')
mdmIfIdlePeriodBeforeDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfIdlePeriodBeforeDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfIdlePeriodBeforeDisconnect.setDescription("This variable defines the period of time before disconnecting in seconds. If the value is '0' the modem will remain connected.")
rackAdded = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,1)).setObjects(("PANDATEL-MODEM-MIB", "rackType"))
if mibBuilder.loadTexts: rackAdded.setDescription('This trap will be sent when a rack is added to the managed chassis. The rack index of the new rack is sent along with this trap.')
if mibBuilder.loadTexts: rackAdded.setReference('PANDATEL-MODEM-MIB, RackAdded event notification.')
rackRemoved = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,2)).setObjects(("PANDATEL-MODEM-MIB", "rackType"))
if mibBuilder.loadTexts: rackRemoved.setDescription('This trap will be sent when a rack is removed from the managed chassis. The rack index of the removed rack is sent along with this trap.')
if mibBuilder.loadTexts: rackRemoved.setReference('PANDATEL-MODEM-MIB, RackRemoved event notification.')
modemAdded = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,3)).setObjects(("PANDATEL-MODEM-MIB", "viType"))
if mibBuilder.loadTexts: modemAdded.setDescription('This trap will be sent when a modem is added. The rack number and the index of the new modem is sent along with this trap.')
if mibBuilder.loadTexts: modemAdded.setReference('PANDATEL-MODEM-MIB, ModemAdded event notification.')
modemRemoved = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,4)).setObjects(("PANDATEL-MODEM-MIB", "viType"))
if mibBuilder.loadTexts: modemRemoved.setDescription('This trap will be sent when a modem in one of the slots is removed. The rack number and the index of the removed modem is sent along with this trap.')
if mibBuilder.loadTexts: modemRemoved.setReference('PANDATEL-MODEM-MIB, ModemRemoved event notification.')
portLoopEnabled = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,5)).setObjects(("PANDATEL-MODEM-MIB", "portLoopMode"))
if mibBuilder.loadTexts: portLoopEnabled.setDescription('This trap will be sent when a modem in one of the slots enables a Loop. The rack number, index of the modem, and port number is sent along with this trap.')
if mibBuilder.loadTexts: portLoopEnabled.setReference('PANDATEL-MODEM-MIB, PortLoopEnabled event notification.')
portLoopDisabled = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,6)).setObjects(("PANDATEL-MODEM-MIB", "portLoopMode"))
if mibBuilder.loadTexts: portLoopDisabled.setDescription('This trap will be sent when a modem in one of the slots disables a Loop. The rack number, index of the modem, and port number is sent along with this trap.')
if mibBuilder.loadTexts: portLoopDisabled.setReference('PANDATEL-MODEM-MIB, PortLoopDisabled event notification.')
portSignalStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,7)).setObjects(("PANDATEL-MODEM-MIB", "psignalType"))
if mibBuilder.loadTexts: portSignalStatusGood.setDescription("This will be sent when a status signal of a modem port enters the 'good' status. The rack number, index of the modem, and port number is sent along with this trap.")
if mibBuilder.loadTexts: portSignalStatusGood.setReference('PANDATEL-MODEM-MIB, PortSignalStatusGood event notification.')
portSignalStatusBad = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,8)).setObjects(("PANDATEL-MODEM-MIB", "psignalType"))
if mibBuilder.loadTexts: portSignalStatusBad.setDescription("This trap will be sent when a status signal of a modem port enters the 'bad' status. The rack number, index of the modem, and port number is sent along with this trap.")
if mibBuilder.loadTexts: portSignalStatusBad.setReference('PANDATEL-MODEM-MIB, PortSignalStatusBad event notification.')
portBackupEnabled = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,9)).setObjects(("PANDATEL-MODEM-MIB", "portPort"), ("PANDATEL-MODEM-MIB", "portPort"))
if mibBuilder.loadTexts: portBackupEnabled.setDescription('This trap will be sent when a modem in one of the slots enters a backup status. The first port indicates the active data port, the second the inactive port. The rack number, index of the modem, and port number is sent along with this trap.')
if mibBuilder.loadTexts: portBackupEnabled.setReference('PANDATEL-MODEM-MIB, PortBackupEnabled event notification.')
portBackupDisabled = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,10)).setObjects(("PANDATEL-MODEM-MIB", "portPort"), ("PANDATEL-MODEM-MIB", "portPort"))
if mibBuilder.loadTexts: portBackupDisabled.setDescription('This trap will be sent when a modem in one of the slots leaves a backup status. The first port indicates the active data port, the second the inactive port. The rack number, index of the modem, and port number is sent along with this trap.')
if mibBuilder.loadTexts: portBackupDisabled.setReference('PANDATEL-MODEM-MIB, PortBackupDisabled event notification.')
portBackupAvailable = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,11)).setObjects(("PANDATEL-MODEM-MIB", "portPort"))
if mibBuilder.loadTexts: portBackupAvailable.setDescription('This trap will be sent when a second link can be used as backup. The rack number, index of the modem, and port number is sent along with this trap.')
if mibBuilder.loadTexts: portBackupAvailable.setReference('PANDATEL-MODEM-MIB, PortBackupAvailable event notification.')
portBackupNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,12)).setObjects(("PANDATEL-MODEM-MIB", "portPort"))
if mibBuilder.loadTexts: portBackupNotAvailable.setDescription('This trap will be sent when there is no second link available as backup. The rack number, index of the modem, and port number is sent along with this trap.')
if mibBuilder.loadTexts: portBackupNotAvailable.setReference('PANDATEL-MODEM-MIB, PortBackupNotAvailable event notification.')
portDataPortChanged = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,13)).setObjects(("PANDATEL-MODEM-MIB", "portPort"), ("PANDATEL-MODEM-MIB", "portPort"))
if mibBuilder.loadTexts: portDataPortChanged.setDescription('This trap will be sent when the line port used for data transmission is changed. The first port indicates the active data port, the second the inactive port. The rack number, index of the modem, and port number is sent along with this trap.')
if mibBuilder.loadTexts: portDataPortChanged.setReference('PANDATEL-MODEM-MIB, DataPortChanged event notification.')
mdm_oid = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000)).setLabel("mdm-oid")
comp_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1)).setLabel("comp-id")
device_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2)).setLabel("device-id")
slot_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3)).setLabel("slot-id")
port_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4)).setLabel("port-id")
psupply_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5)).setLabel("psupply-id")
psonoff_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 6)).setLabel("psonoff-id")
fanonoff_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7)).setLabel("fanonoff-id")
rack_other = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 1)).setLabel("rack-other")
rack_10s_3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 2)).setLabel("rack-10s-3hu")
rack_12s_3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 3)).setLabel("rack-12s-3hu")
rack_10s_6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 4)).setLabel("rack-10s-6hu")
rack_6s_9s_6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 5)).setLabel("rack-6s-9s-6hu")
device_stack_15s = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 6)).setLabel("device-stack-15s")
rack_8s_4hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 7)).setLabel("rack-8s-4hu")
rack_10s_2c_6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 8)).setLabel("rack-10s-2c-6hu")
hs_rack_10s_3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 9)).setLabel("hs-rack-10s-3hu")
rack_8s_2c_6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 10)).setLabel("rack-8s-2c-6hu")
hs_rack_3s_1c_3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 11)).setLabel("hs-rack-3s-1c-3hu")
rack_1s_1c_1hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 12)).setLabel("rack-1s-1c-1hu")
rack_3s_1c_1hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 13)).setLabel("rack-3s-1c-1hu")
otherModem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 1))
cms_snmp_master = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 10001)).setLabel("cms-snmp-master")
cms_slave = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 10002)).setLabel("cms-slave")
cms_intelligent_slave = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 10003)).setLabel("cms-intelligent-slave")
rc_control = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 10004)).setLabel("rc-control")
modemSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 1))
mgmtSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 2))
modemAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 3))
mgmtAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 4))
wdmSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 5))
controlSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 6))
psupplySlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 10))
otherPort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 1))
interfacePort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 2))
linePort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 3))
vt100mgmtPort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 4))
outbandmgmtPort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 5))
backupPort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 6))
rs485Port = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 7))
ps_other = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 1)).setLabel("ps-other")
p_ac_x_5v_20a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 2)).setLabel("p-ac-x-5v-20a")
p_ac_x_5v_30a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 3)).setLabel("p-ac-x-5v-30a")
p_dc_48v_5v_18a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 4)).setLabel("p-dc-48v-5v-18a")
p_dc_24v_5v_15a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 5)).setLabel("p-dc-24v-5v-15a")
p_dc_48v_5v_30a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 6)).setLabel("p-dc-48v-5v-30a")
b_ac_x_5v_6a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 7)).setLabel("b-ac-x-5v-6a")
b_dc_48v_5v_lc = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 8)).setLabel("b-dc-48v-5v-lc")
b_dc_48v_5v_hc = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 9)).setLabel("b-dc-48v-5v-hc")
b_dc_24v_5v_su = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 10)).setLabel("b-dc-24v-5v-su")
p_ac_x_3v_20a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 11)).setLabel("p-ac-x-3v-20a")
p_dc_48v_5v_20a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 12)).setLabel("p-dc-48v-5v-20a")
p_dc_5v_3v_4a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 13)).setLabel("p-dc-5v-3v-4a")
p_dc_5v_5v_5a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 14)).setLabel("p-dc-5v-5v-5a")
pS1_PS2_other = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 6, 1)).setLabel("pS1-PS2-other")
pS1_on_PS2_off = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 6, 2)).setLabel("pS1-on-PS2-off")
pS1_on_PS2_on = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 6, 3)).setLabel("pS1-on-PS2-on")
fAN1_FAN2_other = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 1)).setLabel("fAN1-FAN2-other")
fAN1_off_FAN2_off = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 2)).setLabel("fAN1-off-FAN2-off")
fAN1_on_FAN2_off = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 3)).setLabel("fAN1-on-FAN2-off")
fAN1_off_FAN2_on = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 4)).setLabel("fAN1-off-FAN2-on")
fAN1_on_FAN2_on = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 5)).setLabel("fAN1-on-FAN2-on")
mibBuilder.exportSymbols("PANDATEL-MODEM-MIB", rmdmRack=rmdmRack, rackRack=rackRack, remPortSignalTable=remPortSignalTable, portPort=portPort, rackPowerSupplies=rackPowerSupplies, p_dc_24v_5v_15a=p_dc_24v_5v_15a, mdmVerInfoTable=mdmVerInfoTable, rmodemEntry=rmodemEntry, mdmIfSendTTL=mdmIfSendTTL, portSignalStatusBad=portSignalStatusBad, rportConnector=rportConnector, rportInterfaceType=rportInterfaceType, portBackupEnabled=portBackupEnabled, portLoopDisabled=portLoopDisabled, rportPort=rportPort, psignalPort=psignalPort, psignalRack=psignalRack, controlSlot=controlSlot, rmdmRemoteAccessStatus=rmdmRemoteAccessStatus, cms_snmp_master=cms_snmp_master, rackRemoved=rackRemoved, remPortTable=remPortTable, rportLoopMode=rportLoopMode, mdmIfIdlePeriodBeforeDisconnect=mdmIfIdlePeriodBeforeDisconnect, rviFrontVer=rviFrontVer, pS1_PS2_other=pS1_PS2_other, rmdmInterfacePorts=rmdmInterfacePorts, rviSerialNumber=rviSerialNumber, modemAdded=modemAdded, rackPowerSupplySlots=rackPowerSupplySlots, modemAddr=modemAddr, rackAdded=rackAdded, hs_rack_3s_1c_3hu=hs_rack_3s_1c_3hu, p_dc_5v_3v_4a=p_dc_5v_3v_4a, viModem=viModem, rportRack=rportRack, outbandmgmtPort=outbandmgmtPort, fAN1_FAN2_other=fAN1_FAN2_other, fAN1_on_FAN2_on=fAN1_on_FAN2_on, portLoopEnabled=portLoopEnabled, remVerInfoEntry=remVerInfoEntry, bertEntry=bertEntry, viRack=viRack, cms_intelligent_slave=cms_intelligent_slave, bertKbitsRecWrapped=bertKbitsRecWrapped, psignalModem=psignalModem, mdmIfInitString=mdmIfInitString, viUnitRel=viUnitRel, psupplySlot=psupplySlot, rmdmModem=rmdmModem, rackModems=rackModems, remModemTable=remModemTable, p_ac_x_5v_20a=p_ac_x_5v_20a, rack_1s_1c_1hu=rack_1s_1c_1hu, psignalType=psignalType, mdm_mgmt=mdm_mgmt, rack_6s_9s_6hu=rack_6s_9s_6hu, rackEntry=rackEntry, mdmIfProtocol=mdmIfProtocol, mdmSelfTest=mdmSelfTest, mdmModem=mdmModem, rpsignalRack=rpsignalRack, rmdmLinePorts=rmdmLinePorts, b_dc_48v_5v_hc=b_dc_48v_5v_hc, viFrontVer=viFrontVer, viSerialNumber=viSerialNumber, modemEntry=modemEntry, bertRack=bertRack, rpsignalPort=rpsignalPort, wdmSlot=wdmSlot, rviRack=rviRack, bertSyncStatus=bertSyncStatus, portBackupDisabled=portBackupDisabled, bertKbitsReceived=bertKbitsReceived, vt100mgmtPort=vt100mgmtPort, device_id=device_id, mdmCurrentTime=mdmCurrentTime, mdmUserName=mdmUserName, modemSlot=modemSlot, mdmGroup=mdmGroup, portRack=portRack, pS1_on_PS2_off=pS1_on_PS2_off, rviType=rviType, remVerInfoTable=remVerInfoTable, mdmSpecifics=mdmSpecifics, portBackupAvailable=portBackupAvailable, ps_other=ps_other, p_ac_x_5v_30a=p_ac_x_5v_30a, mdmPortTable=mdmPortTable, rmdmDescription=rmdmDescription, rviModem=rviModem, otherModem=otherModem, viArtNo=viArtNo, portBackupNotAvailable=portBackupNotAvailable, rack_10s_6hu=rack_10s_6hu, psignalStatus=psignalStatus, hs_rack_10s_3hu=hs_rack_10s_3hu, linePort=linePort, p_ac_x_3v_20a=p_ac_x_3v_20a, rmdmUserName=rmdmUserName, rack_8s_4hu=rack_8s_4hu, rack_10s_2c_6hu=rack_10s_2c_6hu, rviFirmwVer=rviFirmwVer, rack_8s_2c_6hu=rack_8s_2c_6hu, viFirmwVer=viFirmwVer, bertStatus=bertStatus, bertBERTest=bertBERTest, mdmRemoteAccess=mdmRemoteAccess, mdmInstalledRacks=mdmInstalledRacks, mdmIfDialEnable=mdmIfDialEnable, fAN1_on_FAN2_off=fAN1_on_FAN2_off, mdmMgmtIfGroup=mdmMgmtIfGroup, bertErrorFreeTime=bertErrorFreeTime, rackDescription=rackDescription, mdmRackTable=mdmRackTable, psupply_id=psupply_id, p_dc_48v_5v_18a=p_dc_48v_5v_18a, psonoff_id=psonoff_id, b_dc_24v_5v_su=b_dc_24v_5v_su, bertInErrorTime=bertInErrorTime, mdmBERTTable=mdmBERTTable, products=products, bertRunTime=bertRunTime, rack_12s_3hu=rack_12s_3hu, rportType=rportType, viType=viType, bertBitErrorRate=bertBitErrorRate, rpsignalModem=rpsignalModem, slot_id=slot_id, p_dc_48v_5v_30a=p_dc_48v_5v_30a, mdmIfDialString=mdmIfDialString, mdmModemTable=mdmModemTable, psignalTrap=psignalTrap, rmdmSelfTest=rmdmSelfTest, rackType=rackType, mdmInterfacePorts=mdmInterfacePorts, rc_control=rc_control, mdmSelfTestResult=mdmSelfTestResult, bertSyncLosts=bertSyncLosts, mdmDescription=mdmDescription, mdmIfType=mdmIfType, bertErrors=bertErrors, fAN1_off_FAN2_off=fAN1_off_FAN2_off, bertPort=bertPort, mibs=mibs, interfacePort=interfacePort, mdmIfDialTimeout=mdmIfDialTimeout, b_ac_x_5v_6a=b_ac_x_5v_6a, remPortSignalEntry=remPortSignalEntry, mdmLinePorts=mdmLinePorts, rviArtNo=rviArtNo, port_id=port_id, portEntry=portEntry, rack_other=rack_other, verInfoEntry=verInfoEntry, portSignalStatusGood=portSignalStatusGood, portLoopMode=portLoopMode, otherPort=otherPort, rack_10s_3hu=rack_10s_3hu, fAN1_off_FAN2_on=fAN1_off_FAN2_on, device_stack_15s=device_stack_15s, rpsignalType=rpsignalType, backupPort=backupPort, mgmtAddr=mgmtAddr, comp_id=comp_id, mdmCurrentDate=mdmCurrentDate, rackModemSlots=rackModemSlots, rpsignalStatus=rpsignalStatus, rmdmSelfTestResult=rmdmSelfTestResult, bertModem=bertModem, p_dc_48v_5v_20a=p_dc_48v_5v_20a, mdmLoopModeTraps=mdmLoopModeTraps, fanonoff_id=fanonoff_id, portDataPortChanged=portDataPortChanged, portInterfaceType=portInterfaceType, b_dc_48v_5v_lc=b_dc_48v_5v_lc, pS1_on_PS2_on=pS1_on_PS2_on, mdmPortSignalTable=mdmPortSignalTable, pandatel=pandatel, portType=portType, remPortEntry=remPortEntry, portModem=portModem, wan_products=wan_products, mdmIfRedialPause=mdmIfRedialPause, mdmRack=mdmRack, mdmIfDataRate=mdmIfDataRate, mdmInstalledModems=mdmInstalledModems, mgmtSlot=mgmtSlot, mdmRemoteAccessStatus=mdmRemoteAccessStatus, cms_slave=cms_slave, p_dc_5v_5v_5a=p_dc_5v_5v_5a, mdm_oid=mdm_oid, rs485Port=rs485Port, rviUnitRel=rviUnitRel, rportModem=rportModem, portConnector=portConnector, rack_3s_1c_1hu=rack_3s_1c_1hu, modemRemoved=modemRemoved, portSignalEntry=portSignalEntry)
