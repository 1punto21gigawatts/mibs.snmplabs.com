#
# PySNMP MIB module FOUNDRY-SN-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-AGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
snStack, snAgentSys, snChassis = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snStack", "snAgentSys", "snChassis")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, iso, TimeTicks, ObjectIdentity, Integer32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, Unsigned32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "iso", "TimeTicks", "ObjectIdentity", "Integer32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "Unsigned32", "Bits", "ModuleIdentity")
TruthValue, TextualConvention, TimeStamp, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "TimeStamp", "DisplayString", "RowStatus")
snAgent = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 4))
snAgent.setRevisions(('2014-03-10 00:00', '2013-02-28 00:00', '2012-09-21 00:00', '2012-04-18 00:00', '2012-01-24 00:00', '2011-12-22 00:00', '2010-06-02 00:00', '2009-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snAgent.setRevisionsDescriptions(('Deprecated brcdSwIntfModAutoUpgradeAllImages OID.', 'Added snAgentBrdUpTime object.', 'Added snAgGblPasswordCheckMode object.', 'Added downloadSPMonitor enum to snAgImgLoad object.', 'Added snAgentCpuProcessEnable object.', 'Major Changes in NI 5.3: Added MIBs for Simplified Upgrade, Fixes for status for 100G module in blocked slot, SNMP support for MR2 module Description Updates.', 'Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', 'convert from SMIv1 to SMIv2',))
if mibBuilder.loadTexts: snAgent.setLastUpdated('201209210000Z')
if mibBuilder.loadTexts: snAgent.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: snAgent.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: snAgent.setDescription("Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class MacAddress(TextualConvention, OctetString):
    description = ' This data type is used to model media addresses. For many types of media, this will be in a binary representation. For example, an ethernet address would be represented as a string of 6 octets. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(TextualConvention, OctetString):
    description = 'This data type is used to model textual information taken from the NVT ASCII character set. By convention, objects with this syntax are declared as having SIZE (0..255)'
    status = 'current'

class BrcdImageType(TextualConvention, Integer32):
    description = 'Image types supported by XMR/MLX and CES/CER'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("unknown", 1), ("managementModuleBoot", 2), ("managementModuleMonitor", 3), ("managementModuleApplication", 4), ("interfaceModuleBoot", 5), ("interfaceModuleMonitor", 6), ("interfaceModuleApplication", 7), ("mgmtAndIntfModuleCombinedApp", 8), ("fpgaMBridge", 9), ("fpgaMBridge32", 10), ("fpgaSBridge", 11), ("fpgaHBridge", 12), ("fpgaBundled", 13), ("fpgaPbifOc", 14), ("fpgaStatsOc", 15), ("fpgaXppOc", 16), ("fpgaPbifMrj", 17), ("fpgaStatsMrj", 18), ("fpgaXppMrj", 19), ("fpgaPbifSp2", 20), ("fpgaXgmacSp2", 21), ("fpgaXppSp2", 22), ("fpgaPbif8x10", 23), ("fpgaXpp8x10", 24), ("fpgaXpp2x100", 25), ("fpgaPbifMetro", 26), ("fpgaXpp4x40", 27), ("fpgaPbif4x40", 28))

snChasGen = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1))
snChasPwr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2))
snChasFan = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3))
snChasUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4))
snChasType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasType.setStatus('current')
if mibBuilder.loadTexts: snChasType.setDescription('The chassis type represents the type of Foundry product being managed. ')
snChasSerNum = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasSerNum.setStatus('current')
if mibBuilder.loadTexts: snChasSerNum.setDescription('The serial number of the chassis. If the serial number is unknown or unavailable then the value should be a zero length string.')
snChasPwrSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupplyStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snChasPwrSupplyStatus.setDescription('This object is being deprecated, please use snChasPwrSupplyTable instead. A bit array that contains the value of the Chassis Power Supplies. This is a packed bit string; the 2 power supplies status are encoded into 4 bits (a nibble). There are multiple power supplies per chassis in this release. The following shows the meaning of each bit: (bit 0 is the least significant bit). bit position meaning ------------ ------- 20-31 reserved 19 Power Supply 8 DC (0=bad, 1=good). 18 Power Supply 7 DC (0=bad, 1=good). 17 Power Supply 8 present status (0=present, 1=not-present). 16 Power Supply 7 present status (0=present, 1=not-present). 15 Power Supply 6 DC (0=bad, 1=good). 14 Power Supply 5 DC (0=bad, 1=good). 13 Power Supply 6 present status (0=present, 1=not-present). 12 Power Supply 5 present status (0=present, 1=not-present). 11 Power Supply 4 DC (0=bad, 1=good). 10 Power Supply 3 DC (0=bad, 1=good). 9 Power Supply 4 present status (0=present, 1=not-present). 8 Power Supply 3 present status (0=present, 1=not-present). 4-7 reserved 3 Power Supply 2 DC (0=bad, 1=good). 2 Power Supply 1 DC (0=bad, 1=good). 1 Power Supply 2 present status (0=present, 1=not-present). 0 Power Supply 1 present status (0=present, 1=not-present).')
snChasFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFanStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snChasFanStatus.setDescription('This object is being deprecated, please use snChasFanTable instead. A bit array that contains the value of the fan status. This is a packed bit string. The status of each fan is encoded into one bit. bit value meaning --------- ------- 0 fan failure. 1 fan good. There are two fans per VLAN Switch chassis in this release. The following shows the meaning of each bit: (bit 0 is the least significant bit). bit position meaning ------------ ------- 6-31 reserved 5 fan6 status 4 fan5 status 3 fan4 status 2 fan3 status 1 fan2 status 0 fan1 status')
snChasMainBrdDescription = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasMainBrdDescription.setStatus('current')
if mibBuilder.loadTexts: snChasMainBrdDescription.setDescription('The main board description string. (It is obsoleted for Chassis Product)')
snChasMainPortTotal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasMainPortTotal.setStatus('current')
if mibBuilder.loadTexts: snChasMainPortTotal.setDescription('The total number of ports for the main board. (It is obsoleted for Chassis Product)')
snChasExpBrdDescription = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasExpBrdDescription.setStatus('current')
if mibBuilder.loadTexts: snChasExpBrdDescription.setDescription('The expansion board description string. Expansion board are those boards attaching on the main board. (It is obsoleted for Chassis Product)')
snChasExpPortTotal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasExpPortTotal.setStatus('current')
if mibBuilder.loadTexts: snChasExpPortTotal.setDescription('The total number of ports for the expansion board. (It is obsoleted for Chassis Product)')
snChasStatusLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasStatusLeds.setStatus('current')
if mibBuilder.loadTexts: snChasStatusLeds.setDescription('A bit array that contains the value of the front panel status LEDs. This is a bit-map; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Status LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (Link off) 1 on (Link on) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 --------')
snChasTrafficLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasTrafficLeds.setStatus('current')
if mibBuilder.loadTexts: snChasTrafficLeds.setDescription('A bit array that contains the value of the front panel traffic LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Traffic LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (no traffic) 1 on (traffic) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 --------')
snChasMediaLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasMediaLeds.setStatus('current')
if mibBuilder.loadTexts: snChasMediaLeds.setDescription('A bit array that contains the value of the front panel media LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Media LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning --------- ------- 0 half duplex 1 full duplex The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 ---------')
snChasEnablePwrSupplyTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasEnablePwrSupplyTrap.setStatus('current')
if mibBuilder.loadTexts: snChasEnablePwrSupplyTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate power supply failure traps.')
snChasMainBrdId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasMainBrdId.setStatus('current')
if mibBuilder.loadTexts: snChasMainBrdId.setDescription('The main board identifier, which can uniquely identify a board type. It is an encoded octet string with the following meaning: octet 0 - octet string format version, which identifies the format of this string. If format version octet has the value 1, the octets after the version octet have the following meaning: octet 1 - product type, FIWG=0x57, FIBB=0x42, FIMLS=0x4D NI=0x4E, TI=0x54, TIRT=0x52 octet 2 - board type, POWERPC=1, ALPHA=2 The length of the octet string is 27. If format version octet has the value 2, the octets after the version octet have the following meaning: octet 1 - product type: BI_WG 0x57 BI_BB 0x42 BI_NI 0x4E NI_M4 0x4D BI_SLB 0x53 octet 2 - module type: MASTER_FIBER_8G 0x0 MASTER_FIBER_4G 0x1 MASTER_COPPER_16 0x2 SLAVE_FIBER_4G 0x3 FI_MASTER_FIBER_2G 0x4 FI_MASTER_FIBER_4G 0x5 MASTER_COPPER_8G 0x6 FI_MASTER_FIBER_8G 0x7 SLAVE_FIBER_8G 0x8 MASTER_COPPER_12_2 0x9 SLAVE_COPPER_24 0xA FI_SLAVE_COPPER_24 0xB SLAVE_100FX_8 0xD SLAVE_100FX_16 0xC SLAVE_COPPER_8G 0xE SLAVE_COPPER_16_2 0xF STACK_FIBER_8G 0x10 STACK_COPPER_8G 0x11 MASTER_FIBER_2G 0x12 SLAVE_100FX_24 0x13 MASTER_FIBER_0G 0x14 POS_622M 0x15 POS_155M 0x16 SLAVE_FIBER_2G 0x17 SLAVE_COPPER_2G 0x18 FI_SLAVE_FIBER_2G 0x19 FI_SLAVE_FIBER_4G 0x1A FI_SLAVE_FIBER_8G 0x1B FI_SLAVE_COPPER_8G 0x1C FI_MASTER_COPPER_8G 0x1D POS_155M2P 0x1E FI_MASTER_COPPER_4G 0x1F FI_MASTER_COPPER_2G 0x20 MASTER_COPPER_4G 0x21 MASTER_COPPER_2G 0x22 MASTER_M4_8G 0x23 MASTER_M4_4G 0x24 MASTER_M4_2G 0x25 MASTER_M4_0G 0x26 MASTER_M5_0G 0x27 POS_2488M 0x28 SLAVE_M5_0G 0x29 POS_N2488M 0x2A STACK_IPC_48_2 0x2B SLAVE_NPA_FIBER_4G 0x2C ATM_2PORT 0x2D ATM_4PORT 0x2E SLAVE_FIBER_10G 0x2F STACK_FES_48_2 0x30 STACK_FES_24_2 0x31 STACK_FES_96_4 0x32 STACK_FES_12G 0x33 STACK_FESX_24G 0x34 STACK_FESX_24_2_G 0x35 STACK_FESX_24_1_G 0x36 STACK_FESX_48G 0x37 STACK_FESX_48_2_G 0x38 STACK_FESX_48_1_G 0x39 SUPERX_FI_MGMT 0x40 SUPERX_FI_2P10G 0x41 SUPERX_FI_24GC 0x42 SUPERX_FI_24GF 0x43 SUPERX_FI_2P10G_WAN 0x44 SUPERX_FI_MGMT_II 0x4a SLAVE_JC_48E 0xC3 SLAVE_JC_48T 0xC4 MASTER_JC_M4_8G 0xC5 SLAVE_JC_8G 0xC6 SLAVE_JC_B16GF 0xC8 MASTER_JC_B2404 0xC9 SLAVE_JC_B16GC 0xCA The length of the octet string is 28. Both format version 1 and 2: octet 3 - processor type, PVR_M603=3, PVR_M604=4, PVR_M603E=6, PVR_M603EV=7, PVR_M750=8, PVR_M604E=9, PVR_M8245=81 octet 4 to octet 5 - processor speed in MHz octet 6 - MAC type: MAC_NONE=0 MAC_SEEQ_10_100=1, MAC_DEC_10_100=2, MAC_3COM_10_100=3, MAC_X10GMAC_10000=4, MAC_SEEQ_1000=5, MAC_GMAC_1000=6, MAC_VLSI_1000=7 octet 7 - PHY type, PHY_NONE=0, PHY_QSI=1, PHY_BROADCOM=2, PHY_ICS=3, PHY_NATIONAL=4, PHY_LEVEL1=6, PHY_BROADCOM_10_100=7, PHY_LEVEL24=8, PHY_BROADCOM_10000=9 (for 10G), PHY_3COM_10_100=9 (for others) octet 8 - port type, COPPER=0, FIBER=1 octet 9 - fiber port type, NONFIBER=0, SX_FIBER=1, LX_FIBER=2, LHX_FIBER=3, LX_SX_FIBER=4, LHB_FIBER=5 octet 10 to octet 13 - DRAM size in KBytes octet 14 to octet 17 - boot flash size in KBytes octet 18 to octet 21 - code flash size in KBytes octet 22 to octet 27 - serial number. Format version 1 only: octet 28 - chassis backplane type. chassis4000 = 0x00 chassis8000 = 0x02 chassis15000 = 0x01 chassisFISX = 0x04 Turbo8 = 0x07 (stack2) FastIron2 = 0x06 (stack1)')
snChasExpBrdId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasExpBrdId.setStatus('current')
if mibBuilder.loadTexts: snChasExpBrdId.setDescription('The expansion board identifier. Expansion board are those boards attaching on the main board. It is an encoded octet string with the following meaning: octet 0 - octet string format version, which identifies the format of this string. If format version octet has the value 1, the octets after the version octet have the following meaning: octet 1 - expansion board type, HUNDRED_MEG_1PORT=1, HUNDRED_MEG_2PORT=2, HUNDRED_MEG_1PORT_COPPER=3, HUNDRED_MEG_2PORT_COPPER=4, HUNDRED_MEG_2PORT_LX=5, GIGA_1PORT=8, GIGA_2PORT=9 octet 2 - fiber port type, NONFIBER=0, SX_FIBER=1, LX_FIBER=2, LHX_FIBER=3, LX_SX_FIBER=4 (It is obsoleted for Chassis Product)')
snChasSpeedLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasSpeedLeds.setStatus('current')
if mibBuilder.loadTexts: snChasSpeedLeds.setDescription('A bit array that contains the value of the front panel media LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Speed LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning --------- ------- 0 10 MBit 1 100 MBit The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 ---------')
snChasEnableFanTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasEnableFanTrap.setStatus('current')
if mibBuilder.loadTexts: snChasEnableFanTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate fan failure traps.')
snChasIdNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasIdNumber.setStatus('current')
if mibBuilder.loadTexts: snChasIdNumber.setDescription('An administratively-assigned chassis identity number, used by inventory control.')
snChasActualTemperature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasActualTemperature.setStatus('current')
if mibBuilder.loadTexts: snChasActualTemperature.setDescription('Temperature of the chassis. Each unit is 0.5 degrees Celcius. Only management module built with temperature sensor hardware is applicable. For those non-applicable management module, it returns no-such-name.')
snChasWarningTemperature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasWarningTemperature.setStatus('current')
if mibBuilder.loadTexts: snChasWarningTemperature.setDescription('Actual temperature higher than this threshold value will trigger the switch to send a temperature warning trap. Each unit is 0.5 degrees Celcius. Only management module built with temperature sensor hardware is applicable. For those non-applicable management module, it returns no-such-name.')
snChasShutdownTemperature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasShutdownTemperature.setStatus('current')
if mibBuilder.loadTexts: snChasShutdownTemperature.setDescription('Actual temperature higher than this threshold value will shutdown a partial of the switch hardware to cool down the system. Each unit is 0.5 degrees Celcius. Only management module built with temperature sensor hardware is applicable. For those non-applicable management module, it returns no-such-name.')
snChasEnableTempWarnTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snChasEnableTempWarnTrap.setStatus('current')
if mibBuilder.loadTexts: snChasEnableTempWarnTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate temperature warning traps.')
snChasFlashCard = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFlashCard.setStatus('current')
if mibBuilder.loadTexts: snChasFlashCard.setDescription('A bit array that contains the value of the flash card status. This is a packed bit string. The status of each flash card is encoded into one bit. bit value meaning --------- ------- 0 flash card absent. 1 flash card present. There are up to two flash cards in this release. This object is valid if M4 management module is present. The following shows the meaning of each bit: (bit 0 is the least significant bit). bit position meaning ------------ ------- 2-31 reserved 1 flash card 2 status 0 flash card 1 status')
snChasFlashCardLeds = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFlashCardLeds.setStatus('current')
if mibBuilder.loadTexts: snChasFlashCardLeds.setDescription('A bit array that contains the value of the flash card LEDs. This is a packed bit string; each LED is encoded into 1 bit for each flash card. bit value meaning -------- --------- 0 off 1 on ')
snChasNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasNumSlots.setStatus('current')
if mibBuilder.loadTexts: snChasNumSlots.setDescription('Number of slots of the chassis.')
snChasArchitectureType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stackable", 1), ("bigIron", 2), ("terathon", 3), ("fifthGen", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasArchitectureType.setStatus('current')
if mibBuilder.loadTexts: snChasArchitectureType.setDescription('Architecture type.')
snChasProductType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 50, 66, 77, 78, 83, 87))).clone(namedValues=NamedValues(("invalid", 0), ("mg8", 1), ("ni40G", 2), ("imr", 3), ("biRx800", 4), ("niXmr16000", 5), ("biRx400", 6), ("niXmr8000", 7), ("biRx200", 8), ("niXmr4000", 9), ("niMlx16", 10), ("niMlx8", 11), ("niMlx4", 12), ("niMlx32", 13), ("niXmr32000", 14), ("biRx32", 15), ("niCES2000Series", 16), ("niCER2000Series", 17), ("brMlxE4", 18), ("brMlxE8", 19), ("brMlxE16", 20), ("brMlxE32", 21), ("biNI2", 50), ("biBB", 66), ("biM4", 77), ("biNI", 78), ("biSLB", 83), ("biWG", 87)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasProductType.setStatus('current')
if mibBuilder.loadTexts: snChasProductType.setDescription('Product type.')
snChasSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("xmr", 1), ("mlx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasSystemMode.setStatus('current')
if mibBuilder.loadTexts: snChasSystemMode.setDescription('System Mode. This object is only applicable to XMR/MLX/MLXe products. For example, if snChasProductType is niMlx4/niMlx8/niMlx16/niMlx32 then the this object returns mlx(2). If snChasProductType is niXmr4000/niXmr8000 niXmr160000/niXmr32000 this object returns xmr(1). If snChasProductType is brMlxE4/brMlxE8/brMlxE16/brMlxE32 this object returns either xmr(1) or mlx(2) depending on the mode of the system. This object is not supported for the other products.')
snChasFactoryPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFactoryPartNumber.setStatus('current')
if mibBuilder.loadTexts: snChasFactoryPartNumber.setDescription('Factory Part number assigned by the manufacturer.')
snChasFactorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFactorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: snChasFactorySerialNumber.setDescription('Factory serial number assigned by the manufacturer.')
snChasPwrSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: snChasPwrSupplyTable.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupplyTable.setDescription('A table of each power supply information. Only installed power supply appears in a table row.')
snChasPwrSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasPwrSupplyIndex"))
if mibBuilder.loadTexts: snChasPwrSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupplyEntry.setDescription('A row in the power supply table.')
snChasPwrSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupplyIndex.setDescription('The index to power supply table.')
snChasPwrSupplyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupplyDescription.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupplyDescription.setDescription('The power supply description string.')
snChasPwrSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupplyOperStatus.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupplyOperStatus.setDescription('The power supply operation status.')
snChasPwrSupply2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: snChasPwrSupply2Table.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupply2Table.setDescription('A table of each power supply information for each unit. Only installed power supply appears in a table row.')
snChasPwrSupply2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasPwrSupply2Unit"), (0, "FOUNDRY-SN-AGENT-MIB", "snChasPwrSupply2Index"))
if mibBuilder.loadTexts: snChasPwrSupply2Entry.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupply2Entry.setDescription('A row in the power supply table.')
snChasPwrSupply2Unit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupply2Unit.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupply2Unit.setDescription('The index to power supply table.')
snChasPwrSupply2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupply2Index.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupply2Index.setDescription('The index to power supply table.')
snChasPwrSupply2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupply2Description.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupply2Description.setDescription('The power supply description string.')
snChasPwrSupply2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasPwrSupply2OperStatus.setStatus('current')
if mibBuilder.loadTexts: snChasPwrSupply2OperStatus.setDescription('The power supply operation status.')
snChasFanTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: snChasFanTable.setStatus('current')
if mibBuilder.loadTexts: snChasFanTable.setDescription('A table of each fan information. Only installed fan appears in a table row.')
snChasFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasFanIndex"))
if mibBuilder.loadTexts: snChasFanEntry.setStatus('current')
if mibBuilder.loadTexts: snChasFanEntry.setDescription('A row in the fan table.')
snChasFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFanIndex.setStatus('current')
if mibBuilder.loadTexts: snChasFanIndex.setDescription('The index to fan table.')
snChasFanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFanDescription.setStatus('current')
if mibBuilder.loadTexts: snChasFanDescription.setDescription('The fan description string.')
snChasFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFanOperStatus.setStatus('current')
if mibBuilder.loadTexts: snChasFanOperStatus.setDescription('The fan operation status.')
snChasFan2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: snChasFan2Table.setStatus('current')
if mibBuilder.loadTexts: snChasFan2Table.setDescription('A table of each fan information for each unit. Only installed fan appears in a table row.')
snChasFan2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasFan2Unit"), (0, "FOUNDRY-SN-AGENT-MIB", "snChasFan2Index"))
if mibBuilder.loadTexts: snChasFan2Entry.setStatus('current')
if mibBuilder.loadTexts: snChasFan2Entry.setDescription('A row in the fan table.')
snChasFan2Unit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFan2Unit.setStatus('current')
if mibBuilder.loadTexts: snChasFan2Unit.setDescription('The index to fan table.')
snChasFan2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFan2Index.setStatus('current')
if mibBuilder.loadTexts: snChasFan2Index.setDescription('The index to fan table.')
snChasFan2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFan2Description.setStatus('current')
if mibBuilder.loadTexts: snChasFan2Description.setDescription('The fan description string.')
snChasFan2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasFan2OperStatus.setStatus('current')
if mibBuilder.loadTexts: snChasFan2OperStatus.setDescription('The fan operation status.')
snChasUnitTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: snChasUnitTable.setStatus('current')
if mibBuilder.loadTexts: snChasUnitTable.setDescription('A table of chassis information for each unit. Only active chassis appears in a table row.')
snChasUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snChasUnitIndex"))
if mibBuilder.loadTexts: snChasUnitEntry.setStatus('current')
if mibBuilder.loadTexts: snChasUnitEntry.setDescription('A row in the chassis table.')
snChasUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitIndex.setStatus('current')
if mibBuilder.loadTexts: snChasUnitIndex.setDescription('The index to chassis table.')
snChasUnitSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitSerNum.setStatus('current')
if mibBuilder.loadTexts: snChasUnitSerNum.setDescription('The serial number of the chassis for each unit. If the serial number is unknown or unavailable then the value should be a zero length string.')
snChasUnitNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitNumSlots.setStatus('current')
if mibBuilder.loadTexts: snChasUnitNumSlots.setDescription('Number of slots of the chassis for each unit.')
snChasUnitActualTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitActualTemperature.setStatus('current')
if mibBuilder.loadTexts: snChasUnitActualTemperature.setDescription('Temperature of the chassis. Each unit is 0.5 degrees Celcius. Only management module built with temperature sensor hardware is applicable. For those non-applicable management module, it returns no-such-name.')
snChasUnitWarningTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitWarningTemperature.setStatus('current')
if mibBuilder.loadTexts: snChasUnitWarningTemperature.setDescription('Actual temperature higher than this threshold value will trigger the switch to send a temperature warning trap. Each unit is 0.5 degrees Celcius. Only management module built with temperature sensor hardware is applicable. For those non-applicable management module, it returns no-such-name.')
snChasUnitShutdownTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitShutdownTemperature.setStatus('current')
if mibBuilder.loadTexts: snChasUnitShutdownTemperature.setDescription('Actual temperature higher than this threshold value will shutdown a partial of the switch hardware to cool down the system. Each unit is 0.5 degrees Celcius. Only management module built with temperature sensor hardware is applicable. For those non-applicable management module, it returns no-such-name.')
snChasUnitPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 1, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snChasUnitPartNum.setStatus('current')
if mibBuilder.loadTexts: snChasUnitPartNum.setDescription('The part number of the chassis for each unit. If the part number is unknown or unavailable then the value should be a zero length string.')
snAgentGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1))
snAgentBrd = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2))
snAgentTrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3))
snAgentBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4))
snAgCfgEos = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5))
snAgentLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6))
snAgentSysParaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7))
snAgentConfigModule = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8))
snAgentUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9))
snAgentRedundant = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10))
snAgentCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11))
snAgentHw = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12))
snAgentTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13))
snAgentPoe = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 14))
snAgentLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15))
brcdSw = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16))
snAgentTask = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17))
brcdSwPackageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1))
brcdSwPackageUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1))
brcdSwIntfModAutoUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2))
snAgReload = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3), ("busy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgReload.setStatus('current')
if mibBuilder.loadTexts: snAgReload.setDescription('Action object to reboot the agent. The following values can only be read: other(1).....agent in unknown or other state running(2)...agent running busy(4).......reload not allowed at this time, flash is busy The following value can be written: reset(3).....do a hard reset The agent will return a response before the action occurs.')
snAgEraseNVRAM = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("erase", 3), ("erasing", 4), ("busy", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgEraseNVRAM.setStatus('current')
if mibBuilder.loadTexts: snAgEraseNVRAM.setDescription('Action object to erase NVRAM of the agent. The following values can only be read: normal(1) error(2)... operation failed or bad flash erasing(4)...agent is erasing NVRAM flash busy(5).......operation not allowed at this time, flash is busy The following value can be written: erase(3).....do erase The agent will return a response even before the erase is done. And the read value will be erasing until erase is done. And the erase request will be rejected until error or normal.')
snAgWriteNVRAM = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("write", 3), ("writing", 4), ("busy", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgWriteNVRAM.setStatus('current')
if mibBuilder.loadTexts: snAgWriteNVRAM.setDescription('Action object to save all configuration info to NVRAM of the agent. The following values can only be read: normal(1) error(2)... operation failed or bad flash writing(4)...agent is writing NVRAM flash busy(5).......operation not allowed at this time, flash is busy The following value can be written: write(3).....do write The agent will return a response even before the write is done. And the read value will be writing until write is done. And the write request will be rejected until error or normal.')
snAgConfigFromNVRAM = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("config", 3), ("configing", 4), ("busy", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgConfigFromNVRAM.setStatus('current')
if mibBuilder.loadTexts: snAgConfigFromNVRAM.setDescription('This object is no more supported by FastIron and NetIron agents and should not be used. Action object to config the switch from NVRAM of the agent. The following values can only be read: normal(1) error(2)... operation failed or bad flash configing(4)...configing from NVRAM flash is in process. busy(5).......operation not allowed at this time, flash is busy The following value can be written: config(3).....do config The agent will return a response after config is done.')
snAgTftpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTftpServerIp.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTftpServerIp.setDescription('The tftp server address, this will be used for both download/upload image file and config file.')
snAgImgFname = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgImgFname.setStatus('current')
if mibBuilder.loadTexts: snAgImgFname.setDescription('Name of the image file including path currently associated with the system. When the object is not used, the value is a zero length string.')
snAgImgLoad = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("normal", 1), ("flashPrepareReadFailure", 2), ("flashReadError", 3), ("flashPrepareWriteFailure", 4), ("flashWriteError", 5), ("tftpTimeoutError", 6), ("tftpOutOfBufferSpace", 7), ("tftpBusy", 8), ("tftpRemoteOtherErrors", 9), ("tftpRemoteNoFile", 10), ("tftpRemoteBadAccess", 11), ("tftpRemoteDiskFull", 12), ("tftpRemoteBadOperation", 13), ("tftpRemoteBadId", 14), ("tftpRemoteFileExists", 15), ("tftpRemoteNoUser", 16), ("operationError", 17), ("loading", 18), ("uploadMPPrimary", 19), ("downloadMPPrimary", 20), ("uploadMPSecondary", 21), ("downloadMPSecondary", 22), ("tftpWrongFileType", 23), ("downloadSPPrimary", 24), ("downloadSPSecondary", 25), ("uploadMPBootROM", 26), ("downloadMPBootROM", 27), ("uploadMPBootTFTP", 28), ("downloadMPBootTFTP", 29), ("uploadMPMonitor", 30), ("downloadMPMonitor", 31), ("downloadSPBootROM", 32), ("downloadSPMonitor", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgImgLoad.setStatus('current')
if mibBuilder.loadTexts: snAgImgLoad.setDescription('Action object to down/up load a new image to the agent. The following values: Error values: from normal(1) to operationError(17) and tftpWrongFileType(23). loading(18) .. operation is in process. The following values are used for set : uploadMPPrimary(19)..upload the Primary image from MP flash to tftp server. downloadMPPrimary(20)..download the Primary image from tftp server to MP flash. uploadMPSecondary(21)..upload the Secondary image from MP flash to tftp server. downloadMPSecondary(22)..download the Secondary image from tftp server to MP flash. downloadSPPrimary(24)..download the Primary image from tftp server to SP flash. downloadSPSecondary(25)..download the Secondary image from tftp server to SP flash. uploadMPBootROM(26)..upload the Boot from flash image from MP flash to tftp server. downloadMPBootROM(27)..download the Boot from flash image from tftp server to MP flash. uploadMPBootTFTP(28)..upload the Boot from TFTP image from MP flash to tftp server. downloadMPBootTFTP(29)..download the Boot from TFTP image from tftp server to MP flash. uploadMPMonitor(30)..upload the Monitor image from MP flash to tftp server. downloadMPMonitor(31)..download the Monitor image from tftp server to MP flash. downloadSPBootROM(32)..download the Boot image from tftp server to SP flash. downloadSPMonitor(33)..download the Monitor image from tftp server to SP flash. MP is the management processor, SP is the switch processor. The image filename is defined in snAgImgFname. The tftp server address is defined in snAgTftpServerIp. Atomic set of snAgImgLoad, snAgImgFname and snAgTftpServerIp is required to allow down/up load to happen. And the write request will be rejected during loading until error or normal.')
snAgCfgFname = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgCfgFname.setStatus('current')
if mibBuilder.loadTexts: snAgCfgFname.setDescription('Name of the config file(s) including path currently associated with the system. Some agents in special situations may support a value which contains multiple file names instead of a single file name. Multiple names are specified as a list of file names separated by semicolons (;). When the object is not used, the value is a zero length string.')
snAgCfgLoad = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("normal", 1), ("flashPrepareReadFailure", 2), ("flashReadError", 3), ("flashPrepareWriteFailure", 4), ("flashWriteError", 5), ("tftpTimeoutError", 6), ("tftpOutOfBufferSpace", 7), ("tftpBusy", 8), ("tftpRemoteOtherErrors", 9), ("tftpRemoteNoFile", 10), ("tftpRemoteBadAccess", 11), ("tftpRemoteDiskFull", 12), ("tftpRemoteBadOperation", 13), ("tftpRemoteBadId", 14), ("tftpRemoteFileExists", 15), ("tftpRemoteNoUser", 16), ("operationError", 17), ("loading", 18), ("uploadFromFlashToServer", 20), ("downloadToFlashFromServer", 21), ("uploadFromDramToServer", 22), ("downloadToDramFromServer", 23), ("uploadFromFlashToNMS", 24), ("downloadToFlashFromNMS", 25), ("uploadFromDramToNMS", 26), ("downloadToDramFromNMS", 27), ("operationDoneWithNMS", 28), ("tftpWrongFileType", 29), ("downloadToDramFromServerOverwrite", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgCfgLoad.setStatus('current')
if mibBuilder.loadTexts: snAgCfgLoad.setDescription('Action object to down/up load a config image to the agent. The following values can be read : Error values: from normal(1) to operationError(17) and tftpWrongFileType(29). loading(18) .. operation is in process. The following value can be used to set: uploadFromFlashToServer(20)..upload the config from flash to tftp server. downloadToFlashFromServer(21)..download the config to flash from tftp server. uploadFromDramToServer(22)..upload the config from DRAM to tftp server. downloadToDramFromServer(23)..download the config to DRAM from tftp server. downloadToDramFromServerOverwrite(30)..download the config to DRAM from tftp server, clear the running-config, and overwrite with the new config. The following value can be used to set: uploadFromFlashToNMS(24)..upload the config from flash to NMS. downloadToFlashFromNMS(25)..download the config to flash from NMS. uploadFromDramToNMS(26)..upload the config from DRAM to NMS. downloadToDramFromNMS(27)..download the config to DRAM from NMS. The config filename is defined in snAgCfgFname. The tftp server address is defined in snAgTftpServerIp. Atomic set of snAgCfgLoad, snAgCfgFname and snAgTftpServerIp is required to allow down/up load to happen. And the write request will be rejected during loading until error or normal. For those NMS commands from (24) to (27), The snAgCfgEosTable MIB must be sent along in one PDU. A seperate write memory cli or set snAgWriteNVRAM is required to save the config to NVRAM.')
snAgDefGwayIp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgDefGwayIp.setStatus('current')
if mibBuilder.loadTexts: snAgDefGwayIp.setDescription('The default gateway (router) address.')
snAgImgVer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgImgVer.setStatus('current')
if mibBuilder.loadTexts: snAgImgVer.setDescription("The version of the running software in the form 'major.minor.maintenance[letters]'.")
snAgFlashImgVer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgFlashImgVer.setStatus('current')
if mibBuilder.loadTexts: snAgFlashImgVer.setDescription("The version of the software image saved in local storage such as flash memory in the form 'major.minor.maintenance[letters]'. If not known or not available, then the value is a zero length string.")
snAgGblIfIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: snAgGblIfIpAddr.setDescription('The interface ip address.')
snAgGblIfIpMask = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblIfIpMask.setStatus('current')
if mibBuilder.loadTexts: snAgGblIfIpMask.setDescription('The interface ip address mask.')
snAgGblPassword = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 97))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblPassword.setStatus('current')
if mibBuilder.loadTexts: snAgGblPassword.setDescription("System Security Access Password and this is only allowed to use for setting but not for reading. An SNMP-Get will get an null string. By default, this object needs to be in the same PDU while doing Set operation some critical SNMP objects. If command 'no snmp-server pw-check' is configured on the device, then this object is not needed in the PDU. The value of this object depends on the authentication method configured for SNMP. If there's no AAA authentication configuration for SNMP, this object will have the enable superuser password. If the AAA authentication for SNMP is configured and has leading method as enable or line, this object will have the corresponding enable or line password. If the switch has AAA authentication for SNMP operation, and the method specified is one of local, TACACS+, or RADIUS, this object will have format '<username> <password>' (note one space character in between). The max size allows concatenation of max 48 octets of username and 48 octets of password, with one blank character")
snAgTrpRcvrCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgTrpRcvrCurEntry.setStatus('current')
if mibBuilder.loadTexts: snAgTrpRcvrCurEntry.setDescription('The current total entries of the Trap Receiver Table are created.')
snAgGblDataRetrieveMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nextbootCfg", 0), ("operationalData", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblDataRetrieveMode.setStatus('current')
if mibBuilder.loadTexts: snAgGblDataRetrieveMode.setDescription('By default, this mode is set to nextbootCfg(0). The VLAN Table and Port-STP Table data will be retrieved according to this mode. nextbootCfg(0).........the nextboot configuration data are retrieved operationalData(1)..........the current running data are retrieved')
snAgSystemLog = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSystemLog.setStatus('current')
if mibBuilder.loadTexts: snAgSystemLog.setDescription("The system log object to indicate whether any Network Management Station(NMS) has login. The first byte of the octet string is the value decribed below and followed by 4 bytes of secret code. login(1)..... a value for a NMS to login. heartbeat(2)... a value for the login NMS periodically to checkin; Otherwise, the Agent will automatically set this object to logout(3) after a timeout period. logout(3).... a value for a NMS to logout. changePassword(4).... a value for the login NMS to change password, only if snAgGblPasswordChangeMode was configured to 'anyMgmtEntity'. changeReadOnlyCommunity(5).... a value for the login NMS to change the read-only community string, only if snAgGblPasswordChangeMode was configured to 'anyMgmtEntity'. changeReadWriteCommunity(6).... a value for the login NMS to change the read-write community string, only if snAgGblPasswordChangeMode was configured to 'anyMgmtEntity'.")
snAgGblEnableColdStartTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableColdStartTrap.setStatus('current')
if mibBuilder.loadTexts: snAgGblEnableColdStartTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate cold start traps.')
snAgGblEnableLinkUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableLinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: snAgGblEnableLinkUpTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate link up traps.')
snAgGblEnableLinkDownTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableLinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: snAgGblEnableLinkDownTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate link down traps.')
snAgGblPasswordChangeMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("anyMgmtEntity", 1), ("consoleAndTelnet", 2), ("consoleOnly", 3), ("telnetOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblPasswordChangeMode.setStatus('current')
if mibBuilder.loadTexts: snAgGblPasswordChangeMode.setDescription("Specify which management entity is allowed to change the password. 'anyMgmtEntity' management entities are SNMP management station, console command line interface, and telnet command line interface. For security reason, this object can only be modified by console command line interface or telnet command line interface. The default value is 'consoleAndTelnet', of which both console and telnet command line interfaces are allowed to change the password.")
snAgGblReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblReadOnlyCommunity.setStatus('current')
if mibBuilder.loadTexts: snAgGblReadOnlyCommunity.setDescription("SNMP read community string and this is only allowed to use for setting but not for reading. An SNMP-Get will get an zero length string. Set operation on this object is allowed only if command 'password-change any' is configured on the target device.")
snAgGblReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblReadWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: snAgGblReadWriteCommunity.setDescription("SNMP read-write community string and this is only allowed to use for setting but not for reading. An SNMP-Get will get an zero length string. Set operation on this object is allowed only if command 'password-change any' is configured on the target device.")
snAgGblCurrentSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCurrentSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: snAgGblCurrentSecurityLevel.setDescription('This represnts the current log-in security level. Each level of security requires a password to permit user for different system configurations.')
snAgGblSecurityLevelSet = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblSecurityLevelSet.setStatus('current')
if mibBuilder.loadTexts: snAgGblSecurityLevelSet.setDescription('This shows which the security level password to be set.')
snAgGblLevelPasswordsMask = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblLevelPasswordsMask.setStatus('current')
if mibBuilder.loadTexts: snAgGblLevelPasswordsMask.setDescription('This shows the bitmap of level passwords which successfully assigned to the system.')
snAgGblQueueOverflow = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblQueueOverflow.setStatus('current')
if mibBuilder.loadTexts: snAgGblQueueOverflow.setDescription('false - The device queues are not overflow. true - The device queues are overflow.')
snAgGblBufferShortage = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblBufferShortage.setStatus('current')
if mibBuilder.loadTexts: snAgGblBufferShortage.setDescription('false - The device buffers are adequate. true - The device buffers are in shortage.')
snAgGblDmaFailure = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblDmaFailure.setStatus('current')
if mibBuilder.loadTexts: snAgGblDmaFailure.setDescription('false - The device DMAs are in good condition. true - One of the DMAs in the device fails.')
snAgGblResourceLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblResourceLowWarning.setStatus('current')
if mibBuilder.loadTexts: snAgGblResourceLowWarning.setDescription('false - No, the device does not have resource-low-warning. true - Yes, the device does have resource-low-warning.')
snAgGblExcessiveErrorWarning = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblExcessiveErrorWarning.setStatus('current')
if mibBuilder.loadTexts: snAgGblExcessiveErrorWarning.setDescription('false - No, the device does not have any excessive collision, FCS errors, alignment warning etc. true - Yes, the device does have.')
snAgGblCpuUtilData = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCpuUtilData.setStatus('current')
if mibBuilder.loadTexts: snAgGblCpuUtilData.setDescription('The statistics collection of utilization of the CPU in the device. In NetIron and FastIron platforms, reading this object resets all the counters. Therefore, a user need not set snAgGblUtilCollect.')
snAgGblCpuUtilCollect = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblCpuUtilCollect.setStatus('deprecated')
if mibBuilder.loadTexts: snAgGblCpuUtilCollect.setDescription('enable(1) - The beginning of statistics collection of utilization of the CPU in the device. disable(0) - The end of statistics collection of utilization of the CPU in the device. This object is deprecated. User need not set this object. User can read snAgGblCpuUtilData to reset all the counters. ')
snAgGblTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblTelnetTimeout.setStatus('current')
if mibBuilder.loadTexts: snAgGblTelnetTimeout.setDescription('Telnet session idling timeout value. Each value unit is one minute. FastIron and NetIron platforms support value upto 240 minutes. On these platforms, value 0 means telnet sessions do not timeout.')
snAgGblEnableWebMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableWebMgmt.setStatus('current')
if mibBuilder.loadTexts: snAgGblEnableWebMgmt.setDescription('Enable/disable web management.')
snAgGblSecurityLevelBinding = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblSecurityLevelBinding.setStatus('current')
if mibBuilder.loadTexts: snAgGblSecurityLevelBinding.setDescription('This represnts the binding of a given password to which security level. A value of 255 indicates an invalid binding.')
snAgGblEnableSLB = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblEnableSLB.setStatus('current')
if mibBuilder.loadTexts: snAgGblEnableSLB.setDescription('Enable/disable Server Load Balancing.')
snAgSoftwareFeature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSoftwareFeature.setStatus('current')
if mibBuilder.loadTexts: snAgSoftwareFeature.setDescription('A bit string representing the software feature of the running switch/router image. These features were conditional compiled to different product images. For each bit, exist feature has a value of 1, but non-exist feature has a value of 0. octet 0, bit 0 - RMON octet 0, bit 1 - ipx switching octet 0, bit 2 - server load balancing octet 0, bit 3 - layer 3 filter in switch octet 0, bit 4 - ipx routing octet 0, bit 5 - appletalk routing octet 0, bit 6 - ip multicast routing octet 0, bit 7 - local access control octet 1, bit 0 - BGP routing octet 1, bit 1 - loopback interface octet 1, bit 2 - BigIron multi-management module octet 1, bit 3 - BigIron SYSIF II octet 1, bit 4 - BigIron POS support octet 1, bit 5 - appletalk cable vlan octet 1, bit 6 - 64 subnet octet 1, bit 7 - multi-slot trunk octet 2, bit 0 - TACACS octet 2, bit 1 - Gigabit Ethernet port auto-negotiation mode octet 2, bit 2 - FSRP octet 2, bit 3 - Exodus requested OSPF enhancement octet 2, bit 4 - OSPF NSSA octet 2, bit 5 - POS octet 2, bit 6 - QOS octet 2, bit 7 - Single Span octet 3, bit 0 - Fast Span octet 3, bit 1 - Base L3 octet 3, bit 2 - static log buffer octet 3, bit 3 - L2 POS octet 3, bit 4 - BI15K octet 3, bit 5 - L2 ATM octet 3, bit 6 - ATM octet 3, bit 7 - NETFLOW octet 4, bit 0 - SFLOW octet 4, bit 1 - GVRP octet 4, bit 2 - GARP octet 4, bit 3 - dynamic trunk octet 4, bit 4 - IGC 8G octet 4, bit 5 - rate limit octet 4, bit 6 - IPC rate limit octet 4, bit 7 - MPLS octet 5, bit 0 - ISIS octet 5, bit 1 - link aggregation octet 5, bit 2 - port dual mode octet 5, bit 3 - private vlan octet 5, bit 4 - MBGP octet 5, bit 5 - ipv6 protocol vlan octet 5, bit 6 - X10G octet 5, bit 7 - fastiron edge switch/router (gridiron) octet 6, bit 0 - FDP octet 6, bit 1 - port tag type octet 6, bit 2 - wireless capable octet 6, bit 3 - snSwPortVlanId object has changed from read-only to read-write octet 6, bit 4 - LLDP Bit 0 is the least significant bit of an octet, and bit 7 is the most significant bit of an octet.')
snAgGblEnableModuleInsertedTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableModuleInsertedTrap.setStatus('current')
if mibBuilder.loadTexts: snAgGblEnableModuleInsertedTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate hardware module inserted to chassis traps.')
snAgGblEnableModuleRemovedTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableModuleRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: snAgGblEnableModuleRemovedTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate hardware module removed from chassis traps.')
snAgGblTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblTrapMessage.setStatus('current')
if mibBuilder.loadTexts: snAgGblTrapMessage.setDescription('A generic trap message string.')
snAgGblEnableTelnetServer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblEnableTelnetServer.setStatus('current')
if mibBuilder.loadTexts: snAgGblEnableTelnetServer.setDescription('Enable or disable telnet server in device.')
snAgGblTelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblTelnetPassword.setStatus('current')
if mibBuilder.loadTexts: snAgGblTelnetPassword.setDescription("Telnet Access Password and this is only useful for write operation. A read operation get a null string. Set operation on this object is allowed only if command 'password-change any' is configured on the target device. Another configuration affecting this is 'no snmp-server pw-check'. If its configured on the device, there's no need to pass another varbind snAgGblPassword. By default, 'snmp-server pw-check' is true, and thus needs to have snAgGblPassword along with this object. in the same Set PDU.")
snAgBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgBuildDate.setStatus('current')
if mibBuilder.loadTexts: snAgBuildDate.setDescription('The date of the built software.')
snAgBuildtime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgBuildtime.setStatus('current')
if mibBuilder.loadTexts: snAgBuildtime.setDescription('The time of the built software.')
snAgBuildVer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgBuildVer.setStatus('current')
if mibBuilder.loadTexts: snAgBuildVer.setDescription('The image label of the built software')
snAgGblCpuUtil1SecAvg = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCpuUtil1SecAvg.setStatus('current')
if mibBuilder.loadTexts: snAgGblCpuUtil1SecAvg.setDescription('The statistics collection of 1 second CPU utilization.')
snAgGblCpuUtil5SecAvg = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCpuUtil5SecAvg.setStatus('current')
if mibBuilder.loadTexts: snAgGblCpuUtil5SecAvg.setDescription('The statistics collection of 5 second CPU utilization.')
snAgGblCpuUtil1MinAvg = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblCpuUtil1MinAvg.setStatus('current')
if mibBuilder.loadTexts: snAgGblCpuUtil1MinAvg.setDescription('The statistics collection of 1 minute CPU utilization.')
snAgGblDynMemUtil = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblDynMemUtil.setStatus('deprecated')
if mibBuilder.loadTexts: snAgGblDynMemUtil.setDescription('The system dynamic memory utilization, in unit of percentage. Deprecated: Refer to snAgSystemDRAMUtil. For NI platforms, refer to snAgentBrdMemoryUtil100thPercent')
snAgGblDynMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblDynMemTotal.setStatus('deprecated')
if mibBuilder.loadTexts: snAgGblDynMemTotal.setDescription('The total amount of system dynamic memory, in number of bytes. Deprecated: Refer to snAgSystemDRAMTotal. For NI platforms, refer to snAgentBrdMemoryTotal')
snAgGblDynMemFree = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblDynMemFree.setStatus('deprecated')
if mibBuilder.loadTexts: snAgGblDynMemFree.setDescription('The free amount of system dynamic memory, in number of bytes. Deprecated: Refer to snAgSystemDRAMFree. For NI platforms, refer to snAgentBrdMemoryAvailable')
snAgImgLoadSPModuleType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("vm1", 2), ("pos12", 3), ("pos48", 4), ("atm", 5), ("gignpa", 6), ("lp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgImgLoadSPModuleType.setStatus('current')
if mibBuilder.loadTexts: snAgImgLoadSPModuleType.setDescription('The switch processor module type of which that receives the downloaded image.')
snAgImgLoadSPModuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgImgLoadSPModuleNumber.setStatus('current')
if mibBuilder.loadTexts: snAgImgLoadSPModuleNumber.setDescription('The slot numner of a switch processor module that receives the downloaded image. Setting value 0 applies to all SP modules.')
snAgTrapHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrapHoldTime.setStatus('current')
if mibBuilder.loadTexts: snAgTrapHoldTime.setDescription('The time in seconds for which traps will be witheld during system initialization.')
snAgSFlowSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 59), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSFlowSourceInterface.setStatus('current')
if mibBuilder.loadTexts: snAgSFlowSourceInterface.setDescription('Use the ifIndex value here to specify the source interface to be used for sFlow packets. The interface should have IP address configured on it. Value of 0 indicates that source interface has not been configured for sFlow. Port 65534 is used to specify a null port.')
snAgGblTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblTelnetLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: snAgGblTelnetLoginTimeout.setDescription('Telnet session login timeout value in minutes. FastIron and NetIron platforms support value upto 10 minutes with a default of 2 minutes and 1 minutes for FastIron and NetIron respectively.')
snAgGblBannerExec = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblBannerExec.setStatus('current')
if mibBuilder.loadTexts: snAgGblBannerExec.setDescription("EXEC process creation banner. Insert newlines using '\\n' within the string.")
snAgGblBannerIncoming = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 62), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblBannerIncoming.setStatus('current')
if mibBuilder.loadTexts: snAgGblBannerIncoming.setDescription("Incoming terminal line banner. Insert newlines using '\\n' within the string.")
snAgGblBannerMotd = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 63), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblBannerMotd.setStatus('current')
if mibBuilder.loadTexts: snAgGblBannerMotd.setDescription("Message-of-the-day banner. Insert newlines using '\\n' within the string.")
snAgWebMgmtServerTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgWebMgmtServerTcpPort.setStatus('current')
if mibBuilder.loadTexts: snAgWebMgmtServerTcpPort.setDescription('The TCP port number of web management interface.')
snAgTftpServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 65), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTftpServerAddrType.setStatus('current')
if mibBuilder.loadTexts: snAgTftpServerAddrType.setDescription('TFTP server IP address Type. Supported address types are ipv4(1) and ipv6(2)')
snAgTftpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 66), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTftpServerAddr.setStatus('current')
if mibBuilder.loadTexts: snAgTftpServerAddr.setDescription('TFTP server IP address.')
snAgGblDeleteFirstBeforeDownload = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 67), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgGblDeleteFirstBeforeDownload.setStatus('current')
if mibBuilder.loadTexts: snAgGblDeleteFirstBeforeDownload.setDescription('When set to true deletes the existing target file on the Management module flash. This object can be set to true only when the snAgImgLoad is set to downloadMPPrimary(20), downloadMPSecondary(22), downloadSPPrimary(24), downloadSPSecondary(25) or downloadMPMonitor(31) in the same SNMP set request PDU. This object is reset to false after successful or unsuccessful download of specified file to flash. Reading this object returns false(2).')
snAgGblPasswordCheckMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 1, 68), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgGblPasswordCheckMode.setStatus('current')
if mibBuilder.loadTexts: snAgGblPasswordCheckMode.setDescription('enabled(1) -The password checking for SNMP set requests is enabled. The default value is enable. disabled(2) - The password checking for SNMP set requests is disabled. When enabled all image/file related MIB object set requests PDU must include the password using the snAgGblPassword.')
snAgentBrdTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: snAgentBrdTable.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdTable.setDescription('A table of each physical board information.')
snAgentBrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentBrdIndex"))
if mibBuilder.loadTexts: snAgentBrdEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdEntry.setDescription('A row in the Agent Board table.')
snAgentBrdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdIndex.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdIndex.setDescription('The index to the Agent Interface Table.')
snAgentBrdMainBrdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMainBrdDescription.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdMainBrdDescription.setDescription('The main board description string.')
snAgentBrdMainBrdId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMainBrdId.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdMainBrdId.setDescription('The main board identifier, which can uniquely identify a board type. It is an encoded octet string with the following meaning: octet 0 - octet string format version, which identifies the format of this string. If format version octet has the value 2, the octets after the version octet have the following meaning: octet 1 - product type: BI_WG 0x57 BI_BB 0x42 BI_NI 0x4E BI_NI2 0x32 NI_M4 0x4D BI_SLB 0x53 octet 2 - module type: MASTER_FIBER_8G 0x0 MASTER_FIBER_4G 0x1 MASTER_COPPER_16 0x2 SLAVE_FIBER_4G 0x3 FI_MASTER_FIBER_2G 0x4 FI_MASTER_FIBER_4G 0x5 MASTER_COPPER_8G 0x6 FI_MASTER_FIBER_8G 0x7 SLAVE_FIBER_8G 0x8 MASTER_COPPER_12_2 0x9 SLAVE_COPPER_24 0xA FI_SLAVE_COPPER_24 0xB SLAVE_100FX_8 0xD SLAVE_100FX_16 0xC SLAVE_COPPER_8G 0xE SLAVE_COPPER_16_2 0xF STACK_FIBER_8G 0x10 STACK_COPPER_8G 0x11 MASTER_FIBER_2G 0x12 SLAVE_100FX_24 0x13 MASTER_FIBER_0G 0x14 POS_622M 0x15 POS_155M 0x16 SLAVE_FIBER_2G 0x17 SLAVE_COPPER_2G 0x18 FI_SLAVE_FIBER_2G 0x19 FI_SLAVE_FIBER_4G 0x1A FI_SLAVE_FIBER_8G 0x1B FI_SLAVE_COPPER_8G 0x1C FI_MASTER_COPPER_8G 0x1D POS_155M2P 0x1E FI_MASTER_COPPER_4G 0x1F FI_MASTER_COPPER_2G 0x20 MASTER_COPPER_4G 0x21 MASTER_COPPER_2G 0x22 MASTER_M4_8G 0x23 MASTER_M4_4G 0x24 MASTER_M4_2G 0x25 MASTER_M4_0G 0x26 MASTER_M5_0G 0x27 POS_2488M 0x28 SLAVE_M5_0G 0x29 POS_N2488M 0x2A STACK_IPC_48_2 0x2B SLAVE_NPA_FIBER_4G 0x2C ATM_2PORT 0x2D ATM_4PORT 0x2E SLAVE_FIBER_10G 0x2F STACK_FES_48_2 0x30 STACK_FES_24_2 0x31 STACK_FES_96_4 0x32 STACK_FES_12G 0x33 STACK_FESX_24G 0x34 STACK_FESX_24_2_G 0x35 STACK_FESX_24_1_G 0x36 STACK_FESX_48G 0x37 STACK_FESX_48_2_G 0x38 STACK_FESX_48_1_G 0x39 SUPERX_FI_MGMT 0x40 SUPERX_FI_2P10G 0x41 SUPERX_FI_24GC 0x42 SUPERX_FI_24GF 0x43 SUPERX_FI_2P10G_WAN 0x44 SUPERX_FI_MGMT_II 0x4a SLAVE_JC_48E 0xC3 SLAVE_JC_48T 0xC4 MASTER_JC_M4_8G 0xC5 SLAVE_JC_8G 0xC6 SLAVE_JC_B16GF 0xC8 MASTER_JC_B2404 0xC9 SLAVE_JC_B16GC 0xCA SLAVE_JC_B24FX 0xCE octet 3 - processor type, PVR_M603=3, PVR_M604=4, PVR_M603E=6, PVR_M603EV=7, PVR_M750=8, PVR_M604E=9, PVR_M8245=81 octet 4 to octet 5 - processor speed in MHz octet 6 - MAC type: MAC_NONE=0 MAC_SEEQ_10_100=1, MAC_DEC_10_100=2, MAC_3COM_10_100=3, MAC_X10GMAC_10000=4, MAC_SEEQ_1000=5, MAC_GMAC_1000=6, MAC_VLSI_1000=7 octet 7 - PHY type, PHY_NONE=0, PHY_QSI=1, PHY_BROADCOM=2, PHY_ICS=3, PHY_NATIONAL=4, PHY_LEVEL1=6, PHY_BROADCOM_10_100=7, PHY_LEVEL24=8, PHY_BROADCOM_10000=9 (for 10G), PHY_3COM_10_100=9 (for others) octet 8 - port type, COPPER=0, FIBER=1 octet 9 - fiber port type, NONFIBER=0, SX_FIBER=1, LX_FIBER=2, LHX_FIBER=3, LX_SX_FIBER=4, LHB_FIBER=5 octet 10 to octet 13 - DRAM size in KBytes octet 14 to octet 17 - boot flash size in KBytes octet 18 to octet 21 - code flash size in KBytes octet 22 to octet 27 - serial number. octet 28 - chassis backplane type. chassis4000 = 0x00 chassis8000 = 0x02 chassis15000 = 0x01 chassisFISX = 0x04 Turbo8 = 0x07 (stack2) FastIron2 = 0x06 (stack1)')
snAgentBrdMainPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMainPortTotal.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdMainPortTotal.setDescription('The total number of ports for the main board.')
snAgentBrdExpBrdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdExpBrdDescription.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdExpBrdDescription.setDescription('The expansion board description string. Expansion board are those boards attaching on the main board.')
snAgentBrdExpBrdId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdExpBrdId.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdExpBrdId.setDescription('The expansion board identifier. Expansion board are those boards attaching on the main board. It is an encoded octet string with the following meaning: octet 0 - octet string format version, which identifies the format of this string. If format version octet has the value 1, the octets after the version octet have the following meaning: octet 1 - expansion board type, HUNDRED_MEG_1PORT=1, HUNDRED_MEG_2PORT=2, HUNDRED_MEG_1PORT_COPPER=3, HUNDRED_MEG_2PORT_COPPER=4, HUNDRED_MEG_2PORT_LX=5, GIGA_1PORT=8, GIGA_2PORT=9 octet 2 - fiber port type, NONFIBER=0, SX_FIBER=1, LX_FIBER=2, LHX_FIBER=3, LX_SX_FIBER=4, LHB_FIBER=5')
snAgentBrdExpPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdExpPortTotal.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdExpPortTotal.setDescription('The total number of ports for the expansion board.')
snAgentBrdStatusLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdStatusLeds.setStatus('deprecated')
if mibBuilder.loadTexts: snAgentBrdStatusLeds.setDescription('A bit array that contains the value of the front panel status LEDs. This is a bit-map; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 32 that means 32 Ports Status LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (Link off) 1 on (Link on) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 (It was obsoleted after release 07100, replaced by snAgentBrdStatusLedString)')
snAgentBrdTrafficLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdTrafficLeds.setStatus('deprecated')
if mibBuilder.loadTexts: snAgentBrdTrafficLeds.setDescription('A bit array that contains the value of the front panel traffic LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Traffic LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (no traffic) 1 on (traffic) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 (It was obsoleted after release 07100, replaced by snAgentBrdTrafficLedString)')
snAgentBrdMediaLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMediaLeds.setStatus('deprecated')
if mibBuilder.loadTexts: snAgentBrdMediaLeds.setDescription('A bit array that contains the value of the front panel media LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Media LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning --------- ------- 0 half duplex 1 full duplex The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 (It was obsoleted after release 07100, replaced by snAgentBrdMediaLedString)')
snAgentBrdSpeedLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdSpeedLeds.setStatus('deprecated')
if mibBuilder.loadTexts: snAgentBrdSpeedLeds.setDescription('A bit array that contains the value of the front panel media LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Speed LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning --------- ------- 0 10 MBit 1 100 MBit The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 (It was obsoleted after release 07100, replaced by snAgentBrdSpeedLedString)')
snAgentBrdModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("moduleEmpty", 0), ("moduleGoingDown", 2), ("moduleRejected", 3), ("moduleBad", 4), ("moduleConfigured", 8), ("moduleComingUp", 9), ("moduleRunning", 10), ("moduleBlocked", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdModuleStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdModuleStatus.setDescription('By default, this mode is set to notActivated(0). moduleEmpty(0) ......... The slot of the chassis is empty. moduleGoingDown(2) ..... The module is going down. moduleRejected(3) ...... The module is being rejected due to wrong configuration. moduleBad(4) ........... The module Hardware is bad. moduleConfigured(8) ...... The module is configured (stacking) moduleComingUp(9) ...... The module is in power-up cycle. moduleRunning(10) ....... The module is running. moduleBlocked(11) ....... The module is blocked, for full height card.')
snAgentBrdRedundantStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3), ("crashed", 4), ("comingUp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdRedundantStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdRedundantStatus.setDescription('The redundant status of a module. Non-management module always returns other(1). Management module returns the rest of the states.')
snAgentBrdAlarmLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdAlarmLeds.setStatus('deprecated')
if mibBuilder.loadTexts: snAgentBrdAlarmLeds.setDescription('A bit array that contains the value of the front panel media LEDs (for POS Module Only). This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Speed LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning --------- ------- 0 no alarm 1 alarm The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 (It was obsoleted after release 07100, replaced by snAgentBrdAlarmLedString)')
snAgentBrdTxTrafficLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdTxTrafficLeds.setStatus('deprecated')
if mibBuilder.loadTexts: snAgentBrdTxTrafficLeds.setDescription('A bit array that contains the value of the front panel transmit traffic LEDs (for POS Module Only). This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Transmit Traffic LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (no transmit traffic) 1 on (transmit traffic) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 (It was obsoleted after release 07100, replaced by snAgentBrdTxTrafficLedString)')
snAgentBrdRxTrafficLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdRxTrafficLeds.setStatus('deprecated')
if mibBuilder.loadTexts: snAgentBrdRxTrafficLeds.setDescription('A bit array that contains the value of the front panel receive traffic LEDs (for POS Module Only). This is a packed bit string; each LED is encoded into 1 bit for each switch port. The maximum number of ports in one chassis is 24 that means 24 Ports Receive Traffic LEDs. The expansion port number always begins from the last main port number. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (no receive traffic) 1 on (receive traffic) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 (It was obsoleted after release 07100, replaced by snAgentBrdRxTrafficLedString)')
snAgentBrdStatusLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdStatusLedString.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdStatusLedString.setDescription('A bit array that contains the value of the front panel status LEDs. This is a bit-map; each LED is encoded into 1 bit for each switch port. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (Link off) 1 on (Link on) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 --------')
snAgentBrdTrafficLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdTrafficLedString.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdTrafficLedString.setDescription('A bit array that contains the value of the front panel traffic LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (no traffic) 1 on (traffic) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 --------')
snAgentBrdMediaLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMediaLedString.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdMediaLedString.setDescription('A bit array that contains the value of the front panel media LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The following shows the meaning of each bit for each switch port: bit value meaning --------- ------- 0 half duplex 1 full duplex The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 ---------')
snAgentBrdSpeedLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdSpeedLedString.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdSpeedLedString.setDescription('A bit array that contains the value of the front panel media LEDs. This is a packed bit string; each LED is encoded into 1 bit for each switch port. The following shows the meaning of each bit for each switch port: bit value meaning --------- ------- 0 10 MBit 1 100 MBit The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 ---------')
snAgentBrdAlarmLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdAlarmLedString.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdAlarmLedString.setDescription('A bit array that contains the value of the front panel media LEDs (for POS Module Only). This is a packed bit string; each LED is encoded into 1 bit for each switch port. The following shows the meaning of each bit for each switch port: bit value meaning --------- ------- 0 no alarm 1 alarm The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 ---------')
snAgentBrdTxTrafficLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdTxTrafficLedString.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdTxTrafficLedString.setDescription('A bit array that contains the value of the front panel transmit traffic LEDs (for POS Module Only). This is a packed bit string; each LED is encoded into 1 bit for each switch port. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (no transmit traffic) 1 on (transmit traffic) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 --------')
snAgentBrdRxTrafficLedString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdRxTrafficLedString.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdRxTrafficLedString.setDescription('A bit array that contains the value of the front panel receive traffic LEDs (for POS Module Only). This is a packed bit string; each LED is encoded into 1 bit for each switch port. The following shows the meaning of each bit for each switch port: bit value meaning -------- --------- 0 off (no receive traffic) 1 on (receive traffic) The bitmap of LEDs are as following: (Port1) (Port4) (Port8) Bit (Bit0) (Bit3) (Bit7) Byte 1: LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8 Byte 2: LED9 LED10 LED11 LED12 LED13 LED14 LED15 LED16 Byte 3: LED17 LED18 LED19 LED20 LED21 LED22 LED23 LED24 --------')
snAgentBrdMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 24), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdMemoryTotal.setDescription('The total memory in bytes within this module.')
snAgentBrdMemoryAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 25), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMemoryAvailable.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdMemoryAvailable.setDescription('The total memory in bytes available for use within this module.')
snAgentBrdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdSerialNumber.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdSerialNumber.setDescription('The Board Serial number. Zero length string indicates that module serial number has not been programmed within EEPROM or the module does not support serial number within EEPROM.')
snAgentBrdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdPartNumber.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdPartNumber.setDescription('The Board Part number. Zero length string indicates that module part number has not been programmed within EEPROM or the module does not support part number within EEPROM.')
snAgentBrdMemoryUtil100thPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdMemoryUtil100thPercent.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdMemoryUtil100thPercent.setDescription('Dynamic memory utilization within this module in units of one-hundredth of a percent.')
snAgentBrdUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 1, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrdUpTime.setStatus('current')
if mibBuilder.loadTexts: snAgentBrdUpTime.setDescription('Uptime for this module in units of one-hundredth of a second. This value is only valid if the value of snAgentBrdModuleStatus is moduleRunning.')
snAgentBrd2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: snAgentBrd2Table.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2Table.setDescription('A table of each physical board information for each unit.')
snAgentBrd2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentBrd2Unit"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentBrd2Slot"))
if mibBuilder.loadTexts: snAgentBrd2Entry.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2Entry.setDescription('A row in the Agent Board table.')
snAgentBrd2Unit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2Unit.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2Unit.setDescription('The index to the Agent module Table.')
snAgentBrd2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2Slot.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2Slot.setDescription('The index to the Agent module Table.')
snAgentBrd2MainBrdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2MainBrdDescription.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2MainBrdDescription.setDescription('The main board description string.')
snAgentBrd2MainBrdId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2MainBrdId.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2MainBrdId.setDescription('The main board identifier, which can uniquely identify a board type. It is an encoded octet string with the following meaning: octet 0 - octet string format version, which identifies the format of this string. If format version octet has the value 2, the octets after the version octet have the following meaning: octet 1 - product type: BI_WG 0x57 BI_BB 0x42 BI_NI 0x4E BI_NI2 0x32 NI_M4 0x4D BI_SLB 0x53 octet 2 - module type: MASTER_FIBER_8G 0x0 MASTER_FIBER_4G 0x1 MASTER_COPPER_16 0x2 SLAVE_FIBER_4G 0x3 FI_MASTER_FIBER_2G 0x4 FI_MASTER_FIBER_4G 0x5 MASTER_COPPER_8G 0x6 FI_MASTER_FIBER_8G 0x7 SLAVE_FIBER_8G 0x8 MASTER_COPPER_12_2 0x9 SLAVE_COPPER_24 0xA FI_SLAVE_COPPER_24 0xB SLAVE_100FX_8 0xD SLAVE_100FX_16 0xC SLAVE_COPPER_8G 0xE SLAVE_COPPER_16_2 0xF STACK_FIBER_8G 0x10 STACK_COPPER_8G 0x11 MASTER_FIBER_2G 0x12 SLAVE_100FX_24 0x13 MASTER_FIBER_0G 0x14 POS_622M 0x15 POS_155M 0x16 SLAVE_FIBER_2G 0x17 SLAVE_COPPER_2G 0x18 FI_SLAVE_FIBER_2G 0x19 FI_SLAVE_FIBER_4G 0x1A FI_SLAVE_FIBER_8G 0x1B FI_SLAVE_COPPER_8G 0x1C FI_MASTER_COPPER_8G 0x1D POS_155M2P 0x1E FI_MASTER_COPPER_4G 0x1F FI_MASTER_COPPER_2G 0x20 MASTER_COPPER_4G 0x21 MASTER_COPPER_2G 0x22 MASTER_M4_8G 0x23 MASTER_M4_4G 0x24 MASTER_M4_2G 0x25 MASTER_M4_0G 0x26 MASTER_M5_0G 0x27 POS_2488M 0x28 SLAVE_M5_0G 0x29 POS_N2488M 0x2A STACK_IPC_48_2 0x2B SLAVE_NPA_FIBER_4G 0x2C ATM_2PORT 0x2D ATM_4PORT 0x2E SLAVE_FIBER_10G 0x2F STACK_FES_48_2 0x30 STACK_FES_24_2 0x31 STACK_FES_96_4 0x32 STACK_FES_12G 0x33 STACK_FESX_24G 0x34 STACK_FESX_24_2_G 0x35 STACK_FESX_24_1_G 0x36 STACK_FESX_48G 0x37 STACK_FESX_48_2_G 0x38 STACK_FESX_48_1_G 0x39 SUPERX_FI_MGMT 0x40 SUPERX_FI_2P10G 0x41 SUPERX_FI_24GC 0x42 SUPERX_FI_24GF 0x43 SUPERX_FI_2P10G_WAN 0x44 SUPERX_FI_MGMT_II 0x4a SLAVE_JC_48E 0xC3 SLAVE_JC_48T 0xC4 MASTER_JC_M4_8G 0xC5 SLAVE_JC_8G 0xC6 SLAVE_JC_B16GF 0xC8 MASTER_JC_B2404 0xC9 SLAVE_JC_B16GC 0xCA octet 3 - processor type, PVR_M603=3, PVR_M604=4, PVR_M603E=6, PVR_M603EV=7, PVR_M750=8, PVR_M604E=9, PVR_M8245=81 octet 4 to octet 5 - processor speed in MHz octet 6 - MAC type: MAC_NONE=0 MAC_SEEQ_10_100=1, MAC_DEC_10_100=2, MAC_3COM_10_100=3, MAC_X10GMAC_10000=4, MAC_SEEQ_1000=5, MAC_GMAC_1000=6, MAC_VLSI_1000=7 octet 7 - PHY type, PHY_NONE=0, PHY_QSI=1, PHY_BROADCOM=2, PHY_ICS=3, PHY_NATIONAL=4, PHY_LEVEL1=6, PHY_BROADCOM_10_100=7, PHY_LEVEL24=8, PHY_BROADCOM_10000=9 (for 10G), PHY_3COM_10_100=9 (for others) octet 8 - port type, COPPER=0, FIBER=1 octet 9 - fiber port type, NONFIBER=0, SX_FIBER=1, LX_FIBER=2, LHX_FIBER=3, LX_SX_FIBER=4, LHB_FIBER=5 octet 10 to octet 13 - DRAM size in KBytes octet 14 to octet 17 - boot flash size in KBytes octet 18 to octet 21 - code flash size in KBytes octet 22 to octet 27 - serial number. octet 28 - chassis backplane type. chassis4000 = 0x00 chassis8000 = 0x02 chassis15000 = 0x01 chassisFISX = 0x04 Turbo8 = 0x07 (stack2) FastIron2 = 0x06 (stack1)')
snAgentBrd2MainPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2MainPortTotal.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2MainPortTotal.setDescription('The total number of ports for the main board.')
snAgentBrd2ModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("moduleEmpty", 0), ("moduleGoingDown", 2), ("moduleRejected", 3), ("moduleBad", 4), ("moduleConfigured", 8), ("moduleComingUp", 9), ("moduleRunning", 10), ("moduleBlocked", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2ModuleStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2ModuleStatus.setDescription('By default, this mode is set to notActivated(0). moduleEmpty(0) ......... The slot of the chassis is empty. moduleGoingDown(2) ..... The module is going down. moduleRejected(3) ...... The module is being rejected due to wrong configuration. moduleBad(4) ........... The module Hardware is bad. moduleConfigured(8) ...... The module is configured (stacking) moduleComingUp(9) ...... The module is in power-up cycle. moduleRunning(10) ....... The module is running. moduleBlocked(11) ....... The module is blocked, for full height card.')
snAgentBrd2RedundantStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3), ("crashed", 4), ("comingUp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentBrd2RedundantStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentBrd2RedundantStatus.setDescription('The redundant status of a module. Non-management module always returns other(1). Management module returns the rest of the states.')
snAgTrpRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: snAgTrpRcvrTable.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrTable.setDescription('A table of managers which to send traps.')
snAgTrpRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgTrpRcvrIndex"))
if mibBuilder.loadTexts: snAgTrpRcvrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrEntry.setDescription('A row in the trap receiver table. The column snAgTrpRcvrStatus is used to create and delete rows in the table. Creation requires a SET PDU with objects snAgTrpRcvrIndex, snAgTrpRcvrIpAddr, snAgTrpRcvrComm and snAgTrpRcvrStatus.')
snAgTrpRcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgTrpRcvrIndex.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrIndex.setDescription('The index to the Trap Receiver Table.')
snAgTrpRcvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrIpAddr.setDescription('The ip address for SNMP manager that is to receive the trap.')
snAgTrpRcvrCommunityOrSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrCommunityOrSecurityName.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrCommunityOrSecurityName.setDescription('Community string to use. In case of USM (SNMPv3) security model, this object is used to provide the security name.')
snAgTrpRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("ignore", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrStatus.setDescription("This object is used to create and delete rows in the table and control if they are used. The values that can be written are: ignore(5)...don't use this entry to send traps to at this time delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(5) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: other(1)....some other case valid(2)....the row exists and is valid ignore(5)...don't use this entry to send traps to at this time")
snAgTrpRcvrUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrUDPPort.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrUDPPort.setDescription('UDP port number of the trap receiver.')
snAgTrpRcvrSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("usm", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrSecurityModel.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrSecurityModel.setDescription('Version of trap format to be used.')
snAgTrpRcvrSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuth", 1), ("auth", 2), ("authPriv", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgTrpRcvrSecurityLevel.setStatus('deprecated')
if mibBuilder.loadTexts: snAgTrpRcvrSecurityLevel.setDescription('Used for USM (SNMPv3) security model to specify the level of security. The security name is provided by snAgTrpRcvrCommunityOrSecurityName.')
snAgBootSeqTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: snAgBootSeqTable.setStatus('current')
if mibBuilder.loadTexts: snAgBootSeqTable.setDescription('A table of image load sequnce instructions to the boot code. Boot code will start from instruction of the first valid entry to load the image. If failed, it will use the second valid entry and so on, until a succesful load has completed. Each entry must have an unique instruction, duplicate instructions will be rejected.')
snAgBootSeqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgBootSeqIndex"))
if mibBuilder.loadTexts: snAgBootSeqEntry.setStatus('current')
if mibBuilder.loadTexts: snAgBootSeqEntry.setDescription('A row in the boot sequence table.')
snAgBootSeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgBootSeqIndex.setStatus('current')
if mibBuilder.loadTexts: snAgBootSeqIndex.setDescription('The index to the boot sequence table.')
snAgBootSeqInstruction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fromPrimaryFlash", 1), ("fromSecondaryFlash", 2), ("fromTftpServer", 3), ("fromBootpServer", 4), ("fromPcmciaCard1", 5), ("fromPcmciaCard2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBootSeqInstruction.setStatus('current')
if mibBuilder.loadTexts: snAgBootSeqInstruction.setDescription('The instruction for the boot code.')
snAgBootSeqIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBootSeqIpAddr.setStatus('current')
if mibBuilder.loadTexts: snAgBootSeqIpAddr.setDescription("The ip address of the TFTP server if snAgBootSeqInstruction was set to 'fromTftpServer'; otherwise, this object is not used in any other boot instruction.")
snAgBootSeqFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBootSeqFilename.setStatus('current')
if mibBuilder.loadTexts: snAgBootSeqFilename.setDescription("The image filename on the TFTP server if snAgBootSeqInstruction was set to 'fromTftpServer'; otherwise, this object is not used in any other boot instruction.")
snAgBootSeqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBootSeqRowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgBootSeqRowStatus.setDescription('To create or delete a boot sequence table entry.')
snAgSpBootSeqTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2), )
if mibBuilder.loadTexts: snAgSpBootSeqTable.setStatus('current')
if mibBuilder.loadTexts: snAgSpBootSeqTable.setDescription('A table of image load sequnce instructions to the boot code for the slave (line) modules. Boot code will start from instruction of the first valid entry to load the image. If failed, it will use the second valid entry and so on, until a succesful load has completed. Each entry must have an unique instruction, duplicate instructions will be rejected.')
snAgSpBootSeqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgSpBootSeqSpNumber"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgSpBootSeqIndex"))
if mibBuilder.loadTexts: snAgSpBootSeqEntry.setStatus('current')
if mibBuilder.loadTexts: snAgSpBootSeqEntry.setDescription('A row in the slave module boot sequence table.')
snAgSpBootSeqSpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: snAgSpBootSeqSpNumber.setStatus('current')
if mibBuilder.loadTexts: snAgSpBootSeqSpNumber.setDescription('The slot numner of a slave/witch processor module for which this boot sequence applies. Setting value 0 applies to all SP modules. Index 0 is valid only for setting to simplify the set operation for all the modules.')
snAgSpBootSeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: snAgSpBootSeqIndex.setStatus('current')
if mibBuilder.loadTexts: snAgSpBootSeqIndex.setDescription('The index to the boot sequence table.')
snAgSpBootSeqInstruction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fromSpPrimaryFlash", 1), ("fromSpSecondaryFlash", 2), ("fromMpPrimaryFlash", 3), ("fromMpSecondaryFlash", 4), ("fromPcmciaCard1", 5), ("fromPcmciaCard2", 6), ("fromTftpServer", 7), ("interactively", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSpBootSeqInstruction.setStatus('current')
if mibBuilder.loadTexts: snAgSpBootSeqInstruction.setDescription('The instruction for the boot code.')
snAgSpBootSeqIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSpBootSeqIpAddr.setStatus('current')
if mibBuilder.loadTexts: snAgSpBootSeqIpAddr.setDescription("The ip address of the TFTP server if snAgBootSeqInstruction was set to 'fromTftpServer'; otherwise, this object is not used in any other boot instruction.")
snAgSpBootSeqFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSpBootSeqFilename.setStatus('current')
if mibBuilder.loadTexts: snAgSpBootSeqFilename.setDescription("The image filename on the TFTP server if snAgBootSeqInstruction was set to 'fromTftpServer'; otherwise, this object is not used in any other boot instruction.")
snAgSpBootSeqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("delete", 2), ("create", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSpBootSeqRowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgSpBootSeqRowStatus.setDescription('To create or delete a boot sequence table entry.')
snAgCfgEosTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: snAgCfgEosTable.setStatus('current')
if mibBuilder.loadTexts: snAgCfgEosTable.setDescription('This table represents the fragmented Configuration File data packet with checksum include in each rows of this table. A SNMP-SET represents configuration file download, and a SNMP-GET represents configuration file upload. This action is only if the SNMP-SET of snAgCfgLoad command is sent along with this table consecutively. The applicable snAgCfgLoad command value is as followings: uploadFromFlashToNMS(23), downloadToFlashFromNMS(24), uploadFromDramToNMS(25), downloadToDramFromNMS(26).')
snAgCfgEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgCfgEosIndex"))
if mibBuilder.loadTexts: snAgCfgEosEntry.setStatus('current')
if mibBuilder.loadTexts: snAgCfgEosEntry.setDescription('An EOS row in the table of encoded octet strings for table snAgCfgEosTable. ')
snAgCfgEosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgCfgEosIndex.setStatus('current')
if mibBuilder.loadTexts: snAgCfgEosIndex.setDescription('Each VLAN EOS Buffer Identifier have a multiple VLAN table entries.')
snAgCfgEosPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgCfgEosPacket.setStatus('current')
if mibBuilder.loadTexts: snAgCfgEosPacket.setDescription('An encoded octet string. On reads it contains an integral number of configuration file data packets. The size of each encoded octet string is less than or equal to 1400 bytes.')
snAgCfgEosChkSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgCfgEosChkSum.setStatus('current')
if mibBuilder.loadTexts: snAgCfgEosChkSum.setDescription('A checksum of each configuration file data packet.')
snStackGen = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1))
snStackSecSwitchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2))
snStackPriSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackPriSwitchMode.setStatus('current')
if mibBuilder.loadTexts: snStackPriSwitchMode.setDescription('The Stackable Management Primary Switch mode either enabled or disabled and the default is disabled mode. enabled(1)...........primary switch enabled disabled(0)..........primary switch disabled')
snStackMaxSecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackMaxSecSwitch.setStatus('current')
if mibBuilder.loadTexts: snStackMaxSecSwitch.setDescription('The Maximum Secondary Switches are allowed in the Stackable Management Group.')
snStackTotalSecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackTotalSecSwitch.setStatus('current')
if mibBuilder.loadTexts: snStackTotalSecSwitch.setDescription('The Total Secondary Switches currently connected to the Stackable Management Group.')
snStackSyncAllSecSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 0), ("invalid", 1), ("device", 2), ("global", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSyncAllSecSwitch.setStatus('current')
if mibBuilder.loadTexts: snStackSyncAllSecSwitch.setDescription('Synchronize all the secondary switches in the Stackable Management Group with the following commands. device(2)...........device related parameters. global(3)...........global parameters. local(4)............local parameters. The return result of the above commands are either normal(0)...........normal condition. invalid(1)...........invalid result.')
snStackSmSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSmSlotIndex.setStatus('current')
if mibBuilder.loadTexts: snStackSmSlotIndex.setDescription('The Slot 0 is the Master slot and Slot 1-8 are slaves. All the slot-based MIB data can be retrieved with respect to this slot index such as snChassis global MIB. ')
snStackFmpSetProcess = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("pending", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackFmpSetProcess.setStatus('current')
if mibBuilder.loadTexts: snStackFmpSetProcess.setDescription('normal(0) - The set process is either in an idle state or FMP-SET-SUCCESS state. pending(1) - The pending process is waiting for the result of an FMP-SET. failure(2) - The failure result of an FMP-SET.')
snStackSecSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: snStackSecSwitchTable.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchTable.setDescription('If snSwGroupOperMode is configured as basic mode which is VLAN by Port, Layer2 switching, then this table is valid. Each VLAN switch port could have a number of VLAN IDs.')
snStackSecSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snStackSecSwitchIndex"))
if mibBuilder.loadTexts: snStackSecSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchEntry.setDescription('An entry in the Stackable Management Secondary Switch Information table.')
snStackSecSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackSecSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchIndex.setDescription('The secondary switch index must not be greater than the snStackMaxSecSwitch.')
snStackSecSwitchSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchSlotId.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchSlotId.setDescription('The secondary switch slot ID must be set before the Configuration command sent from the primary switch to the secondary switch either manually or automatically - snStackSecSwitchCfgCmd.')
snStackSecSwitchPortCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackSecSwitchPortCnts.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchPortCnts.setDescription('The number of ports in this secondary switch.')
snStackSecSwitchEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchEnabled.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchEnabled.setDescription('The secondary switch has been selected to Stackable Management Group.')
snStackSecSwitchAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackSecSwitchAck.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchAck.setDescription('The secondary switch has sent reponse to the primary switch.')
snStackSecSwitchMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snStackSecSwitchMacAddr.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchMacAddr.setDescription('The secondary switch physical address. The physical address represents a MAC Station.')
snStackSecSwitchSyncCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 0), ("invalid", 1), ("device", 2), ("global", 3), ("local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchSyncCmd.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchSyncCmd.setDescription('Synchronize the secondary switches in the Stackable Management Group with the following commands. device(2)...........device related parameters. global(3)...........global parameters. local(4)............local parameters. The return result of the above commands are either normal(0)...........normal condition. invalid(1)...........invalid result.')
snStackSecSwitchIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchIpAddr.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchIpAddr.setDescription('The secondary switch IP Address and is used for manual-command of snStackSecSwitchCfgCmd.')
snStackSecSwitchSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchSubnetMask.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchSubnetMask.setDescription('The secondary switch IP Subnet Mask and is used for manual-command of snStackSecSwitchCfgCmd.')
snStackSecSwitchCfgCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("invalid", 1), ("auto", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snStackSecSwitchCfgCmd.setStatus('current')
if mibBuilder.loadTexts: snStackSecSwitchCfgCmd.setDescription('snStackSecSwitchSlotId must be set before the Configuration command sent from the primary switch to the secondary switch either manually or automatically. auto(2)...........auto-configuration command sent. manual(3).........manual-configuration command sent. if manual-mode is used, snStackSecSwitchIpAddr and snStackSecSwitchSubnetMask must be first set before this command is sent. The return result of the above commands are either normal(0)...........normal condition. invalid(1)..........invalid result.')
snAgSysLogGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1))
snAgSysLogGblEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblEnable.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblEnable.setDescription('Enable/disable system logging.')
snAgSysLogGblBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 2), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblBufferSize.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblBufferSize.setDescription('The number of dynamic system logging entries.')
snAgSysLogGblClear = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("clearAll", 1), ("clearDynamic", 2), ("clearStatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblClear.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblClear.setDescription('Clear dynamic and/or static system logging buffers.')
snAgSysLogGblCriticalLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 4), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblCriticalLevel.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblCriticalLevel.setDescription('Filter events going to the logging buffer. This is a packed bit string object of which each bit has the following meaning: (bit 0 is the least significant bit). bit position meaning ------------ ------- 8-31 reserved 7 Warning (warning conditions) 6 Notification (normal but significant conditions) 5 Informational (informational messages) 4 Error (error conditions) 3 Emergency (system is unusable) 2 Debugging (debugging messages) 1 Critical (critical conditions) 0 Alert (immediate action needed) Setting a critical level bit to 1 makes the logging buffer accept the corresponding event. Resetting a critical level bit to 0 makes the logging buffer reject the corresponding event.')
snAgSysLogGblLoggedCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogGblLoggedCount.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblLoggedCount.setDescription('The number events logged in the system logging buffer.')
snAgSysLogGblDroppedCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogGblDroppedCount.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblDroppedCount.setDescription('The number of events dropped.')
snAgSysLogGblFlushedCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogGblFlushedCount.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblFlushedCount.setDescription('The number of times that the system logging buffer was cleared.')
snAgSysLogGblOverrunCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogGblOverrunCount.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblOverrunCount.setDescription('The number of times that the system logging buffer was wrapped around.')
snAgSysLogGblServer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblServer.setStatus('deprecated')
if mibBuilder.loadTexts: snAgSysLogGblServer.setDescription('IP address of syslog server.')
snAgSysLogGblFacility = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("kern", 1), ("user", 2), ("mail", 3), ("daemon", 4), ("auth", 5), ("syslog", 6), ("lpr", 7), ("news", 8), ("uucp", 9), ("sys9", 10), ("sys10", 11), ("sys11", 12), ("sys12", 13), ("sys13", 14), ("sys14", 15), ("cron", 16), ("local0", 17), ("local1", 18), ("local2", 19), ("local3", 20), ("local4", 21), ("local5", 22), ("local6", 23), ("local7", 24))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblFacility.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblFacility.setDescription('Facility code.')
snAgSysLogGblPersistenceEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogGblPersistenceEnable.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogGblPersistenceEnable.setDescription('Enable/disable system logging persistence.')
snAgSysLogBufferTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2), )
if mibBuilder.loadTexts: snAgSysLogBufferTable.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogBufferTable.setDescription('Dynamic system logging buffer table.')
snAgSysLogBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgSysLogBufferIndex"))
if mibBuilder.loadTexts: snAgSysLogBufferEntry.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogBufferEntry.setDescription('A row in the dynamic system logging buffer table.')
snAgSysLogBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferIndex.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogBufferIndex.setDescription('The index to the dynamic system logging buffer table.')
snAgSysLogBufferTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferTimeStamp.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogBufferTimeStamp.setDescription('A time stamp when the event is logged.')
snAgSysLogBufferCriticalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("alert", 2), ("critical", 3), ("debugging", 4), ("emergency", 5), ("error", 6), ("informational", 7), ("notification", 8), ("warning", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferCriticalLevel.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogBufferCriticalLevel.setDescription('The critical level of this event.')
snAgSysLogBufferMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferMessage.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogBufferMessage.setDescription('The system logging message.')
snAgSysLogBufferCalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogBufferCalTimeStamp.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogBufferCalTimeStamp.setDescription('A time stamp when the event is logged. This object returns a NULL terminated time stamp string if the system calendar time was set. It returns a zero length string if the system calendar time was not set.')
snAgStaticSysLogBufferTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3), )
if mibBuilder.loadTexts: snAgStaticSysLogBufferTable.setStatus('current')
if mibBuilder.loadTexts: snAgStaticSysLogBufferTable.setDescription('Static system logging buffer table.')
snAgStaticSysLogBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgStaticSysLogBufferIndex"))
if mibBuilder.loadTexts: snAgStaticSysLogBufferEntry.setStatus('current')
if mibBuilder.loadTexts: snAgStaticSysLogBufferEntry.setDescription('A row in the static system logging buffer table.')
snAgStaticSysLogBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferIndex.setStatus('current')
if mibBuilder.loadTexts: snAgStaticSysLogBufferIndex.setDescription('The index to the static system logging buffer table.')
snAgStaticSysLogBufferTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferTimeStamp.setStatus('current')
if mibBuilder.loadTexts: snAgStaticSysLogBufferTimeStamp.setDescription('A time stamp when the event is logged.')
snAgStaticSysLogBufferCriticalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("alert", 2), ("critical", 3), ("debugging", 4), ("emergency", 5), ("error", 6), ("informational", 7), ("notification", 8), ("warning", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferCriticalLevel.setStatus('current')
if mibBuilder.loadTexts: snAgStaticSysLogBufferCriticalLevel.setDescription('The critical level of this event.')
snAgStaticSysLogBufferMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferMessage.setStatus('current')
if mibBuilder.loadTexts: snAgStaticSysLogBufferMessage.setDescription('The system logging message.')
snAgStaticSysLogBufferCalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgStaticSysLogBufferCalTimeStamp.setStatus('current')
if mibBuilder.loadTexts: snAgStaticSysLogBufferCalTimeStamp.setDescription('A time stamp when the event is logged. This object returns a NULL terminated time stamp string if the system calendar time was set. It returns a zero length string if the system calendar time was not set.')
snAgSysLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4), )
if mibBuilder.loadTexts: snAgSysLogServerTable.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogServerTable.setDescription('System Log Server table.')
snAgSysLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgSysLogServerIP"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgSysLogServerUDPPort"))
if mibBuilder.loadTexts: snAgSysLogServerEntry.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogServerEntry.setDescription('A row in the SysLog Server table.')
snAgSysLogServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogServerIP.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogServerIP.setDescription('IP address of syslog server.')
snAgSysLogServerUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSysLogServerUDPPort.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogServerUDPPort.setDescription('UDP port number of syslog server.')
snAgSysLogServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgSysLogServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgSysLogServerRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: other(1)....some other case valid(2)....the row exists and is valid")
snAgentSysParaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1), )
if mibBuilder.loadTexts: snAgentSysParaConfigTable.setStatus('current')
if mibBuilder.loadTexts: snAgentSysParaConfigTable.setDescription('A table of Agent of each board.')
snAgentSysParaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentSysParaConfigIndex"))
if mibBuilder.loadTexts: snAgentSysParaConfigEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentSysParaConfigEntry.setDescription('A row in the Agent System Parameters Configuation table.')
snAgentSysParaConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigIndex.setStatus('current')
if mibBuilder.loadTexts: snAgentSysParaConfigIndex.setDescription('The index to the Agent System Parameters Configuation Table.')
snAgentSysParaConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigDescription.setStatus('current')
if mibBuilder.loadTexts: snAgentSysParaConfigDescription.setDescription('The main board description string.')
snAgentSysParaConfigMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigMin.setStatus('current')
if mibBuilder.loadTexts: snAgentSysParaConfigMin.setDescription('The minimum value of this Agent System Parameter.')
snAgentSysParaConfigMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigMax.setStatus('current')
if mibBuilder.loadTexts: snAgentSysParaConfigMax.setDescription('The maximum value of this Agent System Parameter.')
snAgentSysParaConfigDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentSysParaConfigDefault.setStatus('current')
if mibBuilder.loadTexts: snAgentSysParaConfigDefault.setDescription('The default value of this Agent System Parameter.')
snAgentSysParaConfigCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentSysParaConfigCurrent.setStatus('current')
if mibBuilder.loadTexts: snAgentSysParaConfigCurrent.setDescription('The current configurated value of this Agent System Parameter.')
snAgentConfigModuleTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1), )
if mibBuilder.loadTexts: snAgentConfigModuleTable.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleTable.setDescription('A table of each configured module information.')
snAgentConfigModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentConfigModuleIndex"))
if mibBuilder.loadTexts: snAgentConfigModuleEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleEntry.setDescription('A row in the Agent Configured Module table.')
snAgentConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleIndex.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleIndex.setDescription('The index to the Agent Configured Module Table.')
snAgentConfigModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 112, 113, 114, 144, 145, 152, 153, 154, 155, 160, 161, 168, 169, 176, 177, 180, 181, 184, 185, 192, 195, 196, 197, 198, 200, 201, 202, 206, 207, 208, 209, 212, 214, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 2064, 2065, 2066, 2067, 2068, 2069, 2074, 2080, 2081, 2083, 2096, 2098, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2112, 2113, 2208, 2209, 2220, 2240, 2241, 2244, 2245, 2246, 2248, 2249, 2016, 2017, 2020, 2021, 2024, 2137, 2138, 2139, 2032, 2033, 2036, 2037, 2040, 2140, 2141, 2142, 2055, 2056, 2057, 2136, 2135, 2134, 2132, 2133, 2224, 2225, 2227, 2228, 2229, 2233, 2234, 2235, 2236))).clone(namedValues=NamedValues(("bi8PortGigManagementModule", 0), ("bi4PortGigManagementModule", 1), ("bi16PortCopperManagementModule", 2), ("bi4PortGigModule", 3), ("fi2PortGigManagementModule", 4), ("fi4PortGigManagementModule", 5), ("bi8PortGigCopperManagementModule", 6), ("fi8PortGigManagementModule", 7), ("bi8PortGigModule", 8), ("bi12PortGigCopper2PortGigFiberManagement", 9), ("bi24PortCopperModule", 10), ("fi24PortCopperModule", 11), ("bi16Port100FXModule", 12), ("bi8Port100FXModule", 13), ("bi8PortGigCopperModule", 14), ("bi12PortGigCopper2PortGigFiber", 15), ("bi2PortGigManagementModule", 18), ("bi24Port100FXModule", 19), ("bi0PortManagementModule", 20), ("pos622MbsModule", 21), ("pos155MbsModule", 22), ("bi2PortGigModule", 23), ("bi2PortGigCopperModule", 24), ("fi2PortGigModule", 25), ("fi4PortGigModule", 26), ("fi8PortGigModule", 27), ("fi8PortGigCopperModule", 28), ("fi8PortGigCopperManagementModule", 29), ("pos155Mbs2PModule", 30), ("fi4PortGigCopperManagementModule", 31), ("fi2PortGigCopperManagementModule", 32), ("bi4PortGigCopperManagementModule", 33), ("bi2PortGigCopperManagementModule", 34), ("bi8PortGigM4ManagementModule", 35), ("bi4PortGigM4ManagementModule", 36), ("bi2PortGigM4ManagementModule", 37), ("bi0PortGigM4ManagementModule", 38), ("bi0PortWSMManagementModule", 39), ("biPos2Port2488MbsModule", 40), ("bi0PortWSMModule", 41), ("niPos2Port2488MbsModule", 42), ("ni4802", 43), ("bi4PortGigNPAModule", 44), ("biAtm2Port155MbsModule", 45), ("biAtm4Port155MbsModule", 46), ("bi1Port10GigModule", 47), ("fes4802Module", 48), ("fes2402Module", 49), ("fes9604Module", 50), ("fes12GigCopperAndGigFiberModule", 51), ("fesx24GigModule", 52), ("fesx24Gig2TenGigModule", 53), ("fesx24Gig1TenGigModule", 54), ("fesx48GigModule", 55), ("fesx48Gig2TenGigModule", 56), ("fesx48Gig1TenGigModule", 57), ("bi40PortGigCopperHVModule", 58), ("bi60PortGigCopperHVModule", 59), ("bi8Port10GigModule", 60), ("bi10PortGigHVModule", 61), ("bi20PortGigHVModule", 62), ("bi24PortGigModule", 63), ("bi24PortGigCopperModule", 64), ("bi48PortGigCopperModule", 65), ("bi24PortGigFiberModule", 66), ("ni4Port10GigSPModule", 75), ("ni40PortGigSPModule", 76), ("ni40PortGigCopperSPModule", 77), ("ni2Port10GigSPModule", 78), ("ni10PortGigSPModule", 79), ("ni20PortGigSPModule", 80), ("xmr4Port10GigSPModule", 81), ("xmr20PortGigSPModule", 82), ("xmr2Port10GigSPModule", 83), ("xmr20PortGigCopperSPModule", 84), ("xmr20PortGigFXSPModule", 85), ("niImrMrManagementModule", 86), ("niXmrMrManagementModule", 87), ("xer4Port10GigSPModule", 88), ("xer2Port10GigSPModule", 89), ("xer20PortGigCopperSPModule", 90), ("xer20PortGigFXSPModule", 91), ("mlx4Port10GigSPModule", 92), ("mlx2Port10GigSPModule", 93), ("mlx20PortGigCopperSPModule", 94), ("mlx20PortGigFXSPModule", 95), ("mlx48PortGigMrj21SPModule", 103), ("fesx24GigFiberGigCopperModule", 112), ("fesx24GigFiber2TenGigModule", 113), ("fesx24GigFiber1TenGigModule", 114), ("fgs24PortManagementModule", 144), ("fgs48PortManagementModule", 145), ("fgsXfp2Port10gModule", 152), ("fgsCx42Port10gModule", 153), ("fgsXfp1Cx41Port10gModule", 154), ("fgsXpf1Port10gModule", 155), ("fls24PortCopperBaseModule", 160), ("fls48PortCopperBaseModule", 161), ("flsXfp1Port10gModule", 168), ("flsCx41Port10gModule", 169), ("fcx624SBaseModule", 176), ("fcx648SBaseModule", 177), ("fcx624SPoeBaseModule", 180), ("fcx648SPoeBaseModule", 181), ("fcxXfp2Port10gModule", 184), ("fcxCx42Port16gModule", 185), ("fcx624SFBaseModule", 192), ("biFiJc48ePort100fxIpcModule", 195), ("biFiJc48tPort100fxIpcModule", 196), ("biFiJc8PortGigM4ManagementModule", 197), ("biFiJc8PortGigIgcModule", 198), ("biFiJc16PortGigIgcModule", 200), ("biJc24PortCopperIpc4GigIgcModule", 201), ("biJc16PortGigCopperIgcModule", 202), ("biFiJc24Port100fxIpcModule", 206), ("bi2Port10GigModule", 207), ("biJc48tPortRJ21OmpModule", 208), ("biJc48ePortRJ45OmpModule", 209), ("biJc24PortIpcRJ45PoeModule", 212), ("biJc2PortGigIgcM4ManagementModule", 214), ("fdryBi4Port10GigModule", 1048), ("fdryBi40PortGigModule", 1049), ("fdryBi1Port100FXManagementModule", 1050), ("fdryBi2Port10GigModule", 1051), ("fdryBi40PortGigCopperModule", 1052), ("fdryBi60PortGigCopperModule", 1053), ("fdryBi4Port10GigHVModule", 1054), ("fdryBi2Port10GigHVModule", 1055), ("fdryBi8Port10GigHVModule", 1056), ("fdryBi40PortGigHVModule", 1057), ("fdryBi40PortGigCopperHVModule", 1058), ("fdryBi60PortGigCopperHVModule", 1059), ("fdryBi8Port10GigModule", 1060), ("fdryBi10PortGigHVModule", 1061), ("fdryBi20PortGigHVModule", 1062), ("fdryBi24PortGigModule", 1063), ("fdryBi24PortGigCopperModule", 1064), ("fdryBi48PortGigCopperModule", 1065), ("fdryBi24PortGigFiberModule", 1066), ("fdryBi16Port10GigModule", 1067), ("fdryNi4Port10GigSPModule", 1075), ("fdryNi40PortGigSPModule", 1076), ("fdryNi40PortGigCopperSPModule", 1077), ("fdryNi2Port10GigSPModule", 1078), ("fdryNi10PortGigSPModule", 1079), ("fdryNi20PortGigSPModule", 1080), ("fdryXmr4Port10GigSPModule", 1081), ("fdryXmr20PortGigSPModule", 1082), ("fdryXmr2Port10GigSPModule", 1083), ("fdryXmr20PortGigCopperSPModule", 1084), ("fdryXmr20PortGigFXSPModule", 1085), ("fdryNiImrMrManagementModule", 1086), ("fdryNiXmrMrManagementModule", 1087), ("fdryMlx4Port10GigSPModule", 1088), ("fdryMlx2Port10GigSPModule", 1089), ("fdryMlx20PortGigCopperSPModule", 1090), ("fdryMlx20PortGigFXSPModule", 1091), ("brMlx4Port10GigXModule", 1093), ("brMlx24PortGigCopperXModule", 1094), ("brMlx24PortGigSfpXModule", 1095), ("niCes24PortFiberModule", 1096), ("niCes24PortCopperModule", 1097), ("niCes2Port10GigModule", 1098), ("niCes48PortFiberModule", 1099), ("niCes48PortCopperModule", 1100), ("niCes48PortFiberWith2Port10GModule", 1101), ("niCes48PortCopperWith2Port10GModule", 1102), ("fdryMlx48PortGigMrj21SPModule", 1103), ("fdryXmr2PortOC192SPModule", 1104), ("fdryXmr1PortOC192SPModule", 1105), ("fdryXmr8PortOC48SPModule", 1106), ("fdryXmr4PortOC48SPModule", 1107), ("fdryXmr2PortOC48SPModule", 1108), ("fdryNiMlxMrManagementModule", 1109), ("niMlx8Port10GigMModule", 1110), ("niMlx8Port10GigDModule", 1111), ("brMlx8Port10GigXModule", 1112), ("brMlx2Port100GigXModule", 1113), ("brcdMlxMr2ManagementModule", 1114), ("brcdXmrMr2ManagementModule", 1115), ("brcdMlx32Mr2ManagementModule", 1116), ("brcdXmr32Mr2ManagementModule", 1117), ("brcdNiXmr32MrManagementModule", 1118), ("brcdNiMlx32MrManagementModule", 1119), ("brcdMlx24Port10GigDMModule", 1120), ("brMlx4Port40GigMModule", 1121), ("brcdNiCes4Port10GigModule", 1122), ("brMlx2Port100GigCFP2Module", 1123), ("brMlx20Port10GigModule", 1124), ("brMlx4Port10GigXIPSecModule", 1125), ("fdryFiV4Sx12ComboPortManagementModule", 2064), ("fdryFiV4Sx2Port10gModule", 2065), ("fdryFiV4Sx24PortGigCopperModule", 2066), ("fdryFiV4Sx24PortGigFiberModule", 2067), ("fdryFiV4Sx2Port10gLanWanModule", 2068), ("fdryFiV4Sx24Port100m1gFiberModule", 2069), ("fdryFiV4Sx12ComboPortManagement2Module", 2074), ("fdryFiV4Sx210gPortManagementModule", 2080), ("fdryFiSx0PortManagementModule", 2081), ("fdryFiV4Sx4g4fPortManagementModule", 2083), ("fdryFiV6Sx12ComboPortManagementModule", 2096), ("fdryFiV6Sx24PortGigCopperModule", 2098), ("fdryFiV6Sx2Port10gModule", 2100), ("fdryFiV6Sx24Port100m1gFiberModule", 2101), ("fdryFiV6Sx210gPortManagementModule", 2102), ("fdryFiV6Sx48PortGigCopperPoeModule", 2103), ("fdryFiV6Sx4g4fPortManagementModule", 2104), ("fdryFiV6Sx12ComboPortManagement2Module", 2105), ("fdryFiV6Sx48PortGigCopperModule", 2106), ("fdryFiV6SxXl0PortManagementModule", 2112), ("fdryFiV6SxXl210gPortManagementModule", 2113), ("fdryFcx624BaseModule", 2208), ("fdryFcx648BaseModule", 2209), ("fdryFcxSfpPlus4Port10gModule", 2220), ("fdryIcx6610624BaseModule", 2240), ("fdryIcx6610648BaseModule", 2241), ("fdryIcx6610624PoeBaseModule", 2244), ("fdryIcx6610648PoeBaseModule", 2245), ("fdryIcx6610624FBaseModule", 2246), ("fdryIcx6610DualMode8PortModule", 2248), ("fdryIcx6610Qsfp10Port160gModule", 2249), ("fdryIcx6430624BaseModule", 2016), ("fdryIcx6430648BaseModule", 2017), ("fdryIcx6430624PoeBaseModule", 2020), ("fdryIcx6430648PoeBaseModule", 2021), ("fdryIcx6430sfp4Port4gModule", 2024), ("fdryIcx6430612CBaseModule", 2137), ("fdryIcx6430Copper2Port2gModule", 2138), ("fdryIcx6430sfp2Port2gModule", 2139), ("fdryIcx6450624BaseModule", 2032), ("fdryIcx6450648BaseModule", 2033), ("fdryIcx6450624PoeBaseModule", 2036), ("fdryIcx6450648PoeBaseModule", 2037), ("fdryIcx6450sfp4Port40gModule", 2040), ("fdryIcx6450612CPDBaseModule", 2140), ("fdryIcx6450Copper2Port2gModule", 2141), ("fdryIcx6450sfp2Port2gModule", 2142), ("fdryIcx665056BaseModule", 2055), ("fdryIcx6650sfp4Port40gModule", 2056), ("fdryIcx6650sfp8Port10gModule", 2057), ("fdryIcx775048CBaseModule", 2136), ("fdryIcx775048FBaseModule", 2135), ("fdryIcx775026QBaseModule", 2134), ("fdryIcx7750QSFP6port40gModule", 2132), ("fdryIcx77506Q6port40gModule", 2133), ("fdryIcx7450624BaseModule", 2224), ("fdryIcx7450648BaseModule", 2225), ("fdryIcx7450648FBaseModule", 2227), ("fdryIcx7450624PoeBaseModule", 2228), ("fdryIcx7450648PoeBaseModule", 2229), ("fdryIcx7400sfpplus4Port40gModule", 2233), ("fdryIcx7400copper4Port40gModule", 2234), ("fdryIcx7400sfp4Port4gModule", 2235), ("fdryIcx7400qsfpplus1Port40gModule", 2236)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentConfigModuleType.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleType.setDescription('The Configured Module Type.')
snAgentConfigModuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentConfigModuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleRowStatus.setDescription('To create or delete a configured module table entry.')
snAgentConfigModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleDescription.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleDescription.setDescription('A description of the configured module.')
snAgentConfigModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleOperStatus.setDescription('Module operational status. Zero length string indicates that physical module has not been inserted to the chassis.')
snAgentConfigModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleSerialNumber.setDescription('Module serial number. Zero length string indicates that module serial number EEPROM has not been programmed or the module does not support serial number EEPROM.')
snAgentConfigModuleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleNumberOfPorts.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleNumberOfPorts.setDescription('The number of ports of module.')
snAgentConfigModuleMgmtModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("nonManagementModule", 2), ("unknownManagementModule", 3), ("m1ManagementModule", 4), ("m2ManagementModule", 5), ("m3ManagementModule", 6), ("m4ManagementModule", 7), ("m5ManagementModule", 8), ("jetcoreStackManagementModule", 9), ("muchoManagementModule", 10), ("rottWeilerManagementModule", 11), ("fesXStackManagementModule", 12), ("fgsStackManagementModule", 13), ("niCesManagementModule", 14), ("fastIronSuperXManagementModule", 15), ("fastIronSXRManagementModule", 16), ("fastIronV6SuperXManagementModule", 17), ("fastIronV6SXRManagementModule", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleMgmtModuleType.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleMgmtModuleType.setDescription('Management module type.')
snAgentConfigModuleNumberOfCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModuleNumberOfCpus.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModuleNumberOfCpus.setDescription('The number of module CPUs.')
snAgentConfigModule2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: snAgentConfigModule2Table.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2Table.setDescription('A table of each configured stacking module information.')
snAgentConfigModule2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentConfigModule2Unit"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentConfigModule2Slot"))
if mibBuilder.loadTexts: snAgentConfigModule2Entry.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2Entry.setDescription('A row in the Agent Configured Stacking Module table.')
snAgentConfigModule2Unit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2Unit.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2Unit.setDescription('The index to the Agent Configured Module Table.')
snAgentConfigModule2Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2Slot.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2Slot.setDescription('The index to the Agent Configured Module Table.')
snAgentConfigModule2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 66, 67, 68, 69, 74, 80, 81, 112, 113, 114, 144, 145, 152, 153, 154, 155, 160, 161, 168, 169, 176, 177, 180, 181, 184, 185, 192, 195, 196, 197, 198, 200, 201, 202, 206, 207, 208, 209, 212, 214, 2208, 2209, 2220, 2240, 2241, 2244, 2245, 2246, 2248, 2249, 2016, 2017, 2020, 2021, 2024, 2137, 2138, 2139, 2032, 2033, 2036, 2037, 2040, 2140, 2141, 2142, 2055, 2056, 2057, 2136, 2135, 2134, 2132, 2133, 2224, 2225, 2227, 2228, 2229, 2233, 2234, 2235, 2236))).clone(namedValues=NamedValues(("bi8PortGigManagementModule", 0), ("bi4PortGigManagementModule", 1), ("bi16PortCopperManagementModule", 2), ("bi4PortGigModule", 3), ("fi2PortGigManagementModule", 4), ("fi4PortGigManagementModule", 5), ("bi8PortGigCopperManagementModule", 6), ("fi8PortGigManagementModule", 7), ("bi8PortGigModule", 8), ("bi12PortGigCopper2PortGigFiberManagement", 9), ("bi24PortCopperModule", 10), ("fi24PortCopperModule", 11), ("bi16Port100FXModule", 12), ("bi8Port100FXModule", 13), ("bi8PortGigCopperModule", 14), ("bi12PortGigCopper2PortGigFiber", 15), ("bi2PortGigManagementModule", 18), ("bi24Port100FXModule", 19), ("bi0PortManagementModule", 20), ("pos622MbsModule", 21), ("pos155MbsModule", 22), ("bi2PortGigModule", 23), ("bi2PortGigCopperModule", 24), ("fi2PortGigModule", 25), ("fi4PortGigModule", 26), ("fi8PortGigModule", 27), ("fi8PortGigCopperModule", 28), ("fi8PortGigCopperManagementModule", 29), ("pos155Mbs2PModule", 30), ("fi4PortGigCopperManagementModule", 31), ("fi2PortGigCopperManagementModule", 32), ("bi4PortGigCopperManagementModule", 33), ("bi2PortGigCopperManagementModule", 34), ("bi8PortGigM4ManagementModule", 35), ("bi4PortGigM4ManagementModule", 36), ("bi2PortGigM4ManagementModule", 37), ("bi0PortGigM4ManagementModule", 38), ("bi0PortWSMManagementModule", 39), ("biPos2Port2488MbsModule", 40), ("bi0PortWSMModule", 41), ("niPos2Port2488MbsModule", 42), ("ni4802", 43), ("bi4PortGigNPAModule", 44), ("biAtm2Port155MbsModule", 45), ("biAtm4Port155MbsModule", 46), ("bi1Port10GigModule", 47), ("fes4802Module", 48), ("fes2402Module", 49), ("fes9604Module", 50), ("fes12GigCopperAndGigFiberModule", 51), ("fesx24GigModule", 52), ("fesx24Gig2TenGigModule", 53), ("fesx24Gig1TenGigModule", 54), ("fesx48GigModule", 55), ("fesx48Gig2TenGigModule", 56), ("fesx48Gig1TenGigModule", 57), ("superx12ComboPortManagementModule", 64), ("superx2PortTenGigModule", 65), ("superx24PortGigCopperModule", 66), ("superx24PortGigFiberModule", 67), ("superx2PortTenGigLanWanModule", 68), ("superx24Port100tx1PortGigFiberModule", 69), ("superx12ComboPortManagement2Module", 74), ("superxR2PortTenGigManagementModule", 80), ("superxRManagementModule", 81), ("fesx24GigFiberGigCopperModule", 112), ("fesx24GigFiber2TenGigModule", 113), ("fesx24GigFiber1TenGigModule", 114), ("fgs24PortManagementModule", 144), ("fgs48PortManagementModule", 145), ("fgsXfp2Port10gModule", 152), ("fgsCx42Port10gModule", 153), ("fgsXfp1Cx41Port10gModule", 154), ("fgsXpf1Port10gModule", 155), ("fls24PortCopperBaseModule", 160), ("fls48PortCopperBaseModule", 161), ("flsXfp1Port10gModule", 168), ("flsCx41Port10gModule", 169), ("fcx624SBaseModule", 176), ("fcx648SBaseModule", 177), ("fcx624SPoeBaseModule", 180), ("fcx648SPoeBaseModule", 181), ("fcxXfp2Port10gModule", 184), ("fcxCx42Port16gModule", 185), ("fcx624SFBaseModule", 192), ("biFiJc48ePort100fxIpcModule", 195), ("biFiJc48tPort100fxIpcModule", 196), ("biFiJc8PortGigM4ManagementModule", 197), ("biFiJc8PortGigIgcModule", 198), ("biFiJc16PortGigIgcModule", 200), ("biJc24PortCopperIpc4GigIgcModule", 201), ("biJc16PortGigCopperIgcModule", 202), ("biFiJc24Port100fxIpcModule", 206), ("bi2Port10GigModule", 207), ("biJc48tPortRJ21OmpModule", 208), ("biJc48ePortRJ45OmpModule", 209), ("biJc24PortIpcRJ45PoeModule", 212), ("biJc2PortGigIgcM4ManagementModule", 214), ("fdryFcx624BaseModule", 2208), ("fdryFcx648BaseModule", 2209), ("fdryFcxSfpPlus4Port10gModule", 2220), ("fdryIcx6610624BaseModule", 2240), ("fdryIcx6610648BaseModule", 2241), ("fdryIcx6610624PoeBaseModule", 2244), ("fdryIcx6610648PoeBaseModule", 2245), ("fdryIcx6610624FBaseModule", 2246), ("fdryIcx6610DualMode8PortModule", 2248), ("fdryIcx6610Qsfp10Port160gModule", 2249), ("fdryIcx6430624BaseModule", 2016), ("fdryIcx6430648BaseModule", 2017), ("fdryIcx6430624PoeBaseModule", 2020), ("fdryIcx6430648PoeBaseModule", 2021), ("fdryIcx6430sfp4Port4gModule", 2024), ("fdryIcx6430612CBaseModule", 2137), ("fdryIcx6430Copper2Port2gModule", 2138), ("fdryIcx6430sfp2Port2gModule", 2139), ("fdryIcx6450624BaseModule", 2032), ("fdryIcx6450648BaseModule", 2033), ("fdryIcx6450624PoeBaseModule", 2036), ("fdryIcx6450648PoeBaseModule", 2037), ("fdryIcx6450sfp4Port40gModule", 2040), ("fdryIcx6450612CPDBaseModule", 2140), ("fdryIcx6450Copper2Port2gModule", 2141), ("fdryIcx6450sfp2Port2gModule", 2142), ("fdryIcx665056BaseModule", 2055), ("fdryIcx6650sfp4Port40gModule", 2056), ("fdryIcx6650sfp8Port10gModule", 2057), ("fdryIcx775048CBaseModule", 2136), ("fdryIcx775048FBaseModule", 2135), ("fdryIcx775026QBaseModule", 2134), ("fdryIcx7750QSFP6port40gModule", 2132), ("fdryIcx77506Q6port40gModule", 2133), ("fdryIcx7450624BaseModule", 2224), ("fdryIcx7450648BaseModule", 2225), ("fdryIcx7450648FBaseModule", 2227), ("fdryIcx7450624PoeBaseModule", 2228), ("fdryIcx7450648PoeBaseModule", 2229), ("fdryIcx7400sfpplus4Port40gModule", 2233), ("fdryIcx7400copper4Port40gModule", 2234), ("fdryIcx7400sfp4Port4gModule", 2235), ("fdryIcx7400qsfpplus1Port40gModule", 2236)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentConfigModule2Type.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2Type.setDescription('The Configured Module Type.')
snAgentConfigModule2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentConfigModule2RowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2RowStatus.setDescription('To create or delete a configured module table entry.')
snAgentConfigModule2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2Description.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2Description.setDescription('A description of the configured module.')
snAgentConfigModule2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2OperStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2OperStatus.setDescription('Module operational status. Zero length string indicates that physical module has not been inserted to the chassis.')
snAgentConfigModule2SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2SerialNumber.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2SerialNumber.setDescription('Module serial number. Zero length string indicates that module serial number EEPROM has not been programmed or the module does not support serial number EEPROM.')
snAgentConfigModule2NumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2NumberOfPorts.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2NumberOfPorts.setDescription('The number of ports of module.')
snAgentConfigModule2MgmtModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("nonManagementModule", 2), ("unknownManagementModule", 3), ("m1ManagementModule", 4), ("m2ManagementModule", 5), ("m3ManagementModule", 6), ("m4ManagementModule", 7), ("m5ManagementModule", 8), ("jetcoreStackManagementModule", 9), ("muchoManagementModule", 10), ("rottWeilerManagementModule", 11), ("fesXStackManagementModule", 12), ("fgsStackManagementModule", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2MgmtModuleType.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2MgmtModuleType.setDescription('Management module type.')
snAgentConfigModule2NumberOfCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 8, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentConfigModule2NumberOfCpus.setStatus('current')
if mibBuilder.loadTexts: snAgentConfigModule2NumberOfCpus.setDescription('The number of module CPUs.')
snAgentUserGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 1))
snAgentUserMaxAccnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentUserMaxAccnt.setStatus('current')
if mibBuilder.loadTexts: snAgentUserMaxAccnt.setDescription('Maximum number of user account entries can be configured.')
snAgentUserAccntTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2), )
if mibBuilder.loadTexts: snAgentUserAccntTable.setStatus('current')
if mibBuilder.loadTexts: snAgentUserAccntTable.setDescription('A table of user account information.')
snAgentUserAccntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentUserAccntName"))
if mibBuilder.loadTexts: snAgentUserAccntEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentUserAccntEntry.setDescription('A row in the Agent User table.')
snAgentUserAccntName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentUserAccntName.setStatus('current')
if mibBuilder.loadTexts: snAgentUserAccntName.setDescription('The user name.')
snAgentUserAccntPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentUserAccntPassword.setStatus('current')
if mibBuilder.loadTexts: snAgentUserAccntPassword.setDescription('The user password.')
snAgentUserAccntEncryptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentUserAccntEncryptCode.setStatus('current')
if mibBuilder.loadTexts: snAgentUserAccntEncryptCode.setDescription('The password encryption method code.')
snAgentUserAccntPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentUserAccntPrivilege.setStatus('current')
if mibBuilder.loadTexts: snAgentUserAccntPrivilege.setDescription('The user privilege.')
snAgentUserAccntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentUserAccntRowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgentUserAccntRowStatus.setDescription('To create or delete a user account table entry.')
snAgentRedunGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1))
snAgentRedunActiveMgmtMod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunActiveMgmtMod.setStatus('current')
if mibBuilder.loadTexts: snAgentRedunActiveMgmtMod.setDescription('Slot number of the active management module. Setting this object does not take effect immediately. Saving configuration data to flash storage and reboot the system are required to take effect. Setting a value of 0 requests the system to auto-select an active management module after power up.')
snAgentRedunSyncConfig = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunSyncConfig.setStatus('current')
if mibBuilder.loadTexts: snAgentRedunSyncConfig.setDescription('Frequency of the backup management module copying the configuration data from the active management module. Each unit is 1 second. Setting a value 0 will disable the synchronization copy. Setting a negative value will initiate the synchronization copy once immediately.')
snAgentRedunBkupCopyBootCode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunBkupCopyBootCode.setStatus('current')
if mibBuilder.loadTexts: snAgentRedunBkupCopyBootCode.setDescription("If enabled(1), the backup management module copies the boot code from the active management module to its boot code flash storage after power up, and whenever the active management module's boot code is updated. The backup management module does not copy if both boot codes were identical.")
snAgentEnableMgmtModRedunStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentEnableMgmtModRedunStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: snAgentEnableMgmtModRedunStateChangeTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate management module redundancy state change traps.')
snAgentRedunBkupBootLoad = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 20))).clone(namedValues=NamedValues(("normal", 1), ("operationError", 17), ("downloadBackup", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunBkupBootLoad.setStatus('current')
if mibBuilder.loadTexts: snAgentRedunBkupBootLoad.setDescription('Action object to down load a new boot code from boot flash storage of the active management module to the backup management module. The following are returned values from get operation: normal(1)............no operation operationError(17)...error codes The following are input values from set operation: downloadBackup(20)...download the boot code from the active management module to the backup management module Any set operation is rejected during loading until error or normal state is reached.')
snAgentRedunSwitchOver = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentRedunSwitchOver.setStatus('current')
if mibBuilder.loadTexts: snAgentRedunSwitchOver.setDescription('To force a switch-over from standby to active state if the backup management module exists in a chassis.')
snAgentCpuUtilTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1), )
if mibBuilder.loadTexts: snAgentCpuUtilTable.setStatus('current')
if mibBuilder.loadTexts: snAgentCpuUtilTable.setDescription('Table to list utilization for all CPUs in the device.')
snAgentCpuUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentCpuUtilSlotNum"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentCpuUtilCpuId"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentCpuUtilInterval"))
if mibBuilder.loadTexts: snAgentCpuUtilEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentCpuUtilEntry.setDescription('A row in the CPU utilization table.')
snAgentCpuUtilSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilSlotNum.setStatus('current')
if mibBuilder.loadTexts: snAgentCpuUtilSlotNum.setDescription('The slot number of module which contains the cpu.')
snAgentCpuUtilCpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilCpuId.setStatus('current')
if mibBuilder.loadTexts: snAgentCpuUtilCpuId.setDescription("The id of cpu. For non-VM1/WSM management module, there is one CPU. For VM1/WSM there's one management CPU and three slave CPUs. The management CPU could be turned off. For POS and ATM there's no management CPU but two slave CPUs. Id for management cpu is 1. Value of 2 or greater are for slave CPUs. ")
snAgentCpuUtilInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilInterval.setStatus('current')
if mibBuilder.loadTexts: snAgentCpuUtilInterval.setDescription('The value, in seconds, for this utilization. For both management and slave CPU, we display utilization for 1 sec, 5 sec, 60 sec and 300 sec interval.')
snAgentCpuUtilValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilValue.setStatus('deprecated')
if mibBuilder.loadTexts: snAgentCpuUtilValue.setDescription('The statistical CPU utilization in units of one-hundredth of a percent. This value is deprecated. Users are recommended to use snAgentCpuUtilPercent or snAgentCpuUtil100thPercent instead.')
snAgentCpuUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtilPercent.setStatus('current')
if mibBuilder.loadTexts: snAgentCpuUtilPercent.setDescription('The statistical CPU utilization in units of a percent.')
snAgentCpuUtil100thPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentCpuUtil100thPercent.setStatus('current')
if mibBuilder.loadTexts: snAgentCpuUtil100thPercent.setDescription('The statistical CPU utilization in units of one-hundredth of a percent.')
snCpuProcessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2), )
if mibBuilder.loadTexts: snCpuProcessTable.setStatus('current')
if mibBuilder.loadTexts: snCpuProcessTable.setDescription('Table to list utilization and runtime for all CPU processes in the device. For NetIron Devices snAgentCpuProcessEnable object needs to be enabled.')
snCpuProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snCpuProcessName"))
if mibBuilder.loadTexts: snCpuProcessEntry.setStatus('current')
if mibBuilder.loadTexts: snCpuProcessEntry.setDescription('A row in the CPU process table.')
snCpuProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcessName.setStatus('current')
if mibBuilder.loadTexts: snCpuProcessName.setDescription('The process name.')
snCpuProcess5SecUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcess5SecUtil.setStatus('current')
if mibBuilder.loadTexts: snCpuProcess5SecUtil.setDescription('The statistics collection of last 5 second process utilization. It is a 100th percentile value (100*n). It can have a value 0 or a value between 100 to 10000 in multiples of 100. If the agent is queried immediately after turning on the CPU usage and 5 seconds have not elapsed then the data will not be available. Therefore we will be returning the data for the actual elapsed time for NetIron devices.')
snCpuProcess1MinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcess1MinUtil.setStatus('current')
if mibBuilder.loadTexts: snCpuProcess1MinUtil.setDescription('The statistics collection of last 5 second process utilization. It is a 100th percentile value (100*n). It can have a value 0 or a value between 100 to 10000 in multiples of 100. If the agent is queried immediately after turning on the CPU usage and 1 minute has not elapsed then the data will not be available. Therefore we will be returning the data for the actual elapsed time for NetIron devices.')
snCpuProcess5MinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcess5MinUtil.setStatus('current')
if mibBuilder.loadTexts: snCpuProcess5MinUtil.setDescription('The statistics collection of last 5 second process utilization. It is a 100th percentile value (100*n). It can have a value 0 or a value between 100 to 10000 in multiples of 100. If the agent is queried immediately after turning on the CPU usage and 5 minutess have not elapsed then the data will not be available. Therefore we will be returning the data for the actual elapsed time for NetIron devices.')
snCpuProcess15MinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcess15MinUtil.setStatus('current')
if mibBuilder.loadTexts: snCpuProcess15MinUtil.setDescription('The statistics collection of last 5 second process utilization. It is a 100th percentile value (100*n). It can have a value 0 or a value between 100 to 10000 in multiples of 100. This object is not supported and has been excluded from agent for NetIron devices')
snCpuProcessRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCpuProcessRuntime.setStatus('current')
if mibBuilder.loadTexts: snCpuProcessRuntime.setDescription('Process runtime in milliseconds.')
snAgentCpuProcessEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 11, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentCpuProcessEnable.setStatus('current')
if mibBuilder.loadTexts: snAgentCpuProcessEnable.setDescription('Enables the CPU utilization statistics collection.')
snAgentHwICBMCounterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1), )
if mibBuilder.loadTexts: snAgentHwICBMCounterTable.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterTable.setDescription('Table to list the ICBM counter values. This table is not supported on 10G module.')
snAgentHwICBMCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentHwICBMCounterSlot"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentHwICBMCounterDMA"))
if mibBuilder.loadTexts: snAgentHwICBMCounterEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterEntry.setDescription('A row representing ICBM counter values for that slot.')
snAgentHwICBMCounterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterSlot.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterSlot.setDescription('Slot number where ICBM resides.')
snAgentHwICBMCounterDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterDMA.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterDMA.setDescription('DMA Id within a slot where ICBM resides. Valid only for Jetcore modules. For non-Jetcore modules, this index is ignored by the agent. In this case, value 0 will be returned by the agent.')
snAgentHwICBMCounterFreeDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterFreeDepth.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterFreeDepth.setDescription('Current depth of the free queue for this ICBM.')
snAgentHwICBMCounterWriteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteDrop.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteDrop.setDescription('Write sequencer drop count for this ICBM.')
snAgentHwICBMCounterWriteInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteInput.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteInput.setDescription('Write sequencer input counter for this ICBM.')
snAgentHwICBMCounterWriteOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteOutput.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterWriteOutput.setDescription('Write sequencer output counter for this ICBM.')
snAgentHwICBMCounterReadInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterReadInput.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterReadInput.setDescription('Read sequencer input counter for this ICBM.')
snAgentHwICBMCounterReadOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentHwICBMCounterReadOutput.setStatus('current')
if mibBuilder.loadTexts: snAgentHwICBMCounterReadOutput.setDescription('Read sequencer output counter for this ICBM.')
snCAMIpStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2), )
if mibBuilder.loadTexts: snCAMIpStatTable.setStatus('current')
if mibBuilder.loadTexts: snCAMIpStatTable.setDescription('Table to list the IP CAM statistics. ')
snCAMIpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snCAMIpStatIfIndex"), (0, "FOUNDRY-SN-AGENT-MIB", "snCAMIpStatLevel"))
if mibBuilder.loadTexts: snCAMIpStatEntry.setStatus('current')
if mibBuilder.loadTexts: snCAMIpStatEntry.setDescription('A row representing IP CAM statistics for a given interface and level.')
snCAMIpStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCAMIpStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: snCAMIpStatIfIndex.setDescription('ifIndex value of the local interface.')
snCAMIpStatLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCAMIpStatLevel.setStatus('current')
if mibBuilder.loadTexts: snCAMIpStatLevel.setDescription('Level of CAM entry for that interface.')
snCAMIpStatFreeEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCAMIpStatFreeEntries.setStatus('current')
if mibBuilder.loadTexts: snCAMIpStatFreeEntries.setDescription('Free entries in the IP CAM for that interface and level.')
snCAMIpStatTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCAMIpStatTotalEntries.setStatus('current')
if mibBuilder.loadTexts: snCAMIpStatTotalEntries.setDescription('Total entries in the IP CAM for that interface and level.')
snCAMStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3), )
if mibBuilder.loadTexts: snCAMStatTable.setStatus('current')
if mibBuilder.loadTexts: snCAMStatTable.setDescription('Table to list the CAM statistics. ')
snCAMStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snCamStatDMAIdNumber"))
if mibBuilder.loadTexts: snCAMStatEntry.setStatus('current')
if mibBuilder.loadTexts: snCAMStatEntry.setDescription('A row representing CAM statistics for a given DMA Id number.')
snCamStatDMAIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatDMAIdNumber.setStatus('current')
if mibBuilder.loadTexts: snCamStatDMAIdNumber.setDescription('DMA Id number.')
snCamStatDMAMasterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatDMAMasterNumber.setStatus('current')
if mibBuilder.loadTexts: snCamStatDMAMasterNumber.setDescription('DMA Master for that DMA Id.')
snCamStatFreePool0Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreePool0Entries.setStatus('current')
if mibBuilder.loadTexts: snCamStatFreePool0Entries.setDescription('CAM free pool0 entries.')
snCamStatFreePool1Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreePool1Entries.setStatus('current')
if mibBuilder.loadTexts: snCamStatFreePool1Entries.setDescription('CAM free pool1 entries.')
snCamStatFreePool2Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreePool2Entries.setStatus('current')
if mibBuilder.loadTexts: snCamStatFreePool2Entries.setDescription('CAM free pool2 entries.')
snCamStatFreePool3Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreePool3Entries.setStatus('current')
if mibBuilder.loadTexts: snCamStatFreePool3Entries.setDescription('CAM free pool3 entries.')
snCamStatFreeL2Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreeL2Entries.setStatus('current')
if mibBuilder.loadTexts: snCamStatFreeL2Entries.setDescription('CAM Free L2 entries.')
snCamStatFreeL2LowestSection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatFreeL2LowestSection.setStatus('current')
if mibBuilder.loadTexts: snCamStatFreeL2LowestSection.setDescription('CAM Free L2 lowest section entries.')
snCamStatHostLookupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatHostLookupCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatHostLookupCount.setDescription('CAM host lookup count for router.')
snCamStatRouteLookupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatRouteLookupCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatRouteLookupCount.setDescription('CAM route lookup count for router.')
snCamStatLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatLevel1.setStatus('current')
if mibBuilder.loadTexts: snCamStatLevel1.setDescription('CAM stat level1 entries for router.')
snCamStatLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatLevel2.setStatus('current')
if mibBuilder.loadTexts: snCamStatLevel2.setDescription('CAM stat level2 entries for router.')
snCamStatLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatLevel3.setStatus('current')
if mibBuilder.loadTexts: snCamStatLevel3.setDescription('CAM stat level3 entries for router.')
snCamStatMacFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatMacFailCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatMacFailCount.setDescription('CAM MAC fail count.')
snCamStatIPRouteFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatIPRouteFailCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatIPRouteFailCount.setDescription('CAM IP route fail count.')
snCamStatIPSessionFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatIPSessionFailCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatIPSessionFailCount.setDescription('CAM IP session fail count.')
snCamStatIPMCastFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatIPMCastFailCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatIPMCastFailCount.setDescription('CAM IP multicast fail count.')
snCamStatL2SessionFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatL2SessionFailCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatL2SessionFailCount.setDescription('CAM L2 session fail count.')
snCamStatAddMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddMACCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatAddMACCount.setDescription('CAM add MAC count.')
snCamStatAddVLANCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddVLANCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatAddVLANCount.setDescription('CAM add VLAN count.')
snCamStatAddIPHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPHostCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatAddIPHostCount.setDescription('CAM add IP host count.')
snCamStatAddIPRouteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPRouteCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatAddIPRouteCount.setDescription('CAM add IP route count.')
snCamStatAddIPSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPSessionCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatAddIPSessionCount.setDescription('CAM add IP session count.')
snCamStatAddIPMCastCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPMCastCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatAddIPMCastCount.setDescription('CAM add IP multicast count.')
snCamStatAddL2SessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddL2SessionCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatAddL2SessionCount.setDescription('CAM add L2 session count.')
snCamStatAddIPXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatAddIPXCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatAddIPXCount.setDescription('CAM add IPX count.')
snCamStatDeleteDMACamCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCamStatDeleteDMACamCount.setStatus('current')
if mibBuilder.loadTexts: snCamStatDeleteDMACamCount.setDescription('CAM delete DMA CAM count.')
snAgSystemDRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4))
snAgSystemDRAMUtil = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMUtil.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDRAMUtil.setDescription('The system dynamic memory utilization, in unit of percentage.')
snAgSystemDRAMTotal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMTotal.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDRAMTotal.setDescription('The total amount of system dynamic memory, in number of bytes.')
snAgSystemDRAMFree = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMFree.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDRAMFree.setDescription('The free amount of system dynamic memory, in number of bytes.')
snAgSystemDRAMForBGP = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMForBGP.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDRAMForBGP.setDescription('The free amount of system dynamic memory used by BGP, in number of bytes.')
snAgSystemDRAMForOSPF = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDRAMForOSPF.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDRAMForOSPF.setDescription('The free amount of system dynamic memory used by OSPF, in number of bytes.')
snAgSystemDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5))
snAgSystemDebugTotalIn = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugTotalIn.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugTotalIn.setDescription('Total incoming packet count. Sum of Buffer Manager and CPU read count.')
snAgSystemDebugTotalOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugTotalOut.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugTotalOut.setDescription('Total outgoing packet count.')
snAgSystemDebugCpuQueueRead = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugCpuQueueRead.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugCpuQueueRead.setDescription('CPU Queue read count.')
snAgSystemDebugDRAMBuffer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugDRAMBuffer.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugDRAMBuffer.setDescription('DRAM buffer count.')
snAgSystemDebugBMBuffer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugBMBuffer.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugBMBuffer.setDescription('BM buffer count.')
snAgSystemDebugBMFreeBuffer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugBMFreeBuffer.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugBMFreeBuffer.setDescription('BM free buffer count.')
snAgSystemDebugBMFreeBufferMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugBMFreeBufferMgmt.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugBMFreeBufferMgmt.setDescription('BM free buffer management count.')
snAgSystemDebugIpcGigLock = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugIpcGigLock.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugIpcGigLock.setDescription('IPC GIG lock count.')
snAgSystemDebugDRAMGetError = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugDRAMGetError.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugDRAMGetError.setDescription('DRAM get error count.')
snAgSystemDebugDRAMToBMCopyFail = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 12, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgSystemDebugDRAMToBMCopyFail.setStatus('current')
if mibBuilder.loadTexts: snAgSystemDebugDRAMToBMCopyFail.setDescription('DRAM to Buffer Manager copy fail count.')
snAgentTempTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1), )
if mibBuilder.loadTexts: snAgentTempTable.setStatus('current')
if mibBuilder.loadTexts: snAgentTempTable.setDescription('Table to list temperatures of all the modules in the device. This table is applicable to only those modules with temperature sensors.')
snAgentTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTempSlotNum"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTempSensorId"))
if mibBuilder.loadTexts: snAgentTempEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentTempEntry.setDescription('A row in the module temperature table.')
snAgentTempSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: snAgentTempSlotNum.setStatus('current')
if mibBuilder.loadTexts: snAgentTempSlotNum.setDescription('The slot number of module which contains the temperature sensor represented by this row.')
snAgentTempSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: snAgentTempSensorId.setStatus('current')
if mibBuilder.loadTexts: snAgentTempSensorId.setDescription('The temperature sensor identifier of Slave module whose temperature is represented by this row, for management module: sensor#1 - Intake Side Temperature sensor# 2 - Exhaust Side Temperature.')
snAgentTempSensorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTempSensorDescr.setStatus('current')
if mibBuilder.loadTexts: snAgentTempSensorDescr.setDescription('Describes the temperature sensor in a human readable form. This is the same as snAgentTempSensorId, which is numeric and used to traverse the temperature sensor table. The description provides the meaning and purpose of this senor.')
snAgentTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTempValue.setStatus('current')
if mibBuilder.loadTexts: snAgentTempValue.setDescription('Temperature of the the sensor represented by this row. Each unit is 0.5 degrees Celcius.')
snAgentTempThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2), )
if mibBuilder.loadTexts: snAgentTempThresholdTable.setStatus('current')
if mibBuilder.loadTexts: snAgentTempThresholdTable.setDescription('Table to list temperature threshold levels for 4 speeds of fan settings. Depending on the temperature level, the fans run at diffrent speeds of RPM. There are 4 levels of temperature settings for 4 fan speeds (low, medium, medium-high, high). This table is applicable to only those modules with temperature sensors. For each row, there are 2 temperature threshold values. The high value, if reached causes the fan to run at next high level speed and when it reduces the below the low value, the fan runs at next low spped.')
snAgentTempThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTempThresholdModule"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTempThresholdLevel"))
if mibBuilder.loadTexts: snAgentTempThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentTempThresholdEntry.setDescription('A row in the module temperature threshold table.')
snAgentTempThresholdModule = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mgmtModule", 1), ("slaveModule", 2), ("switchFabricModule", 3))))
if mibBuilder.loadTexts: snAgentTempThresholdModule.setStatus('current')
if mibBuilder.loadTexts: snAgentTempThresholdModule.setDescription('The module in the system for which threshold levels represented by this row are applicable.')
snAgentTempThresholdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("mediumHhigh", 3), ("high", 4))))
if mibBuilder.loadTexts: snAgentTempThresholdLevel.setStatus('current')
if mibBuilder.loadTexts: snAgentTempThresholdLevel.setDescription('The temperature threshold level of the module for which threshold levels represented by this row are applicable.')
snAgentTempThresholdHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentTempThresholdHighValue.setStatus('current')
if mibBuilder.loadTexts: snAgentTempThresholdHighValue.setDescription("The high value for the temperature threshold, above which the fans would need to operate at the next higher speed. If it reaches more than the high threshold value for 'high' level, the module will be shutdown.")
snAgentTempThresholdLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgentTempThresholdLowValue.setStatus('current')
if mibBuilder.loadTexts: snAgentTempThresholdLowValue.setDescription("The low value for the temperature threshold, below which the fans would need to operate at the next lower speed. This value is not applicable for the 'low' level, as there is no more lower speeds than that.")
snAgentTemp2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3), )
if mibBuilder.loadTexts: snAgentTemp2Table.setStatus('current')
if mibBuilder.loadTexts: snAgentTemp2Table.setDescription('Table to list temperatures of the modules in the device for each unit. This table is applicable to only those modules with temperature sensors.')
snAgentTemp2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTemp2UnitNum"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTemp2SlotNum"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTemp2SensorId"))
if mibBuilder.loadTexts: snAgentTemp2Entry.setStatus('current')
if mibBuilder.loadTexts: snAgentTemp2Entry.setDescription('A row in the module temperature table.')
snAgentTemp2UnitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: snAgentTemp2UnitNum.setStatus('current')
if mibBuilder.loadTexts: snAgentTemp2UnitNum.setDescription('The unit number of module which contains the temperature sensor represented by this row.')
snAgentTemp2SlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: snAgentTemp2SlotNum.setStatus('current')
if mibBuilder.loadTexts: snAgentTemp2SlotNum.setDescription('The slot number of module which contains the temperature sensor represented by this row.')
snAgentTemp2SensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: snAgentTemp2SensorId.setStatus('current')
if mibBuilder.loadTexts: snAgentTemp2SensorId.setDescription('The temperature sensor identifier of Slave module whose temperature is represented by this row, for FastIron management module: sensor#1 - Intake Side Temperature sensor# 2 - Exhaust Side Temperature.')
snAgentTemp2SensorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTemp2SensorDescr.setStatus('current')
if mibBuilder.loadTexts: snAgentTemp2SensorDescr.setDescription('Describes the temperature sensor in a human readable form. This is the same as snAgentTempSensorId, which is numeric and used to traverse the temperature sensor table. The description provides the meaning and purpose of this senor.')
snAgentTemp2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-110, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTemp2Value.setStatus('current')
if mibBuilder.loadTexts: snAgentTemp2Value.setDescription('Temperature of the sensor represented by this row. Each unit is 0.5 degrees Celsius.')
fdryLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1), )
if mibBuilder.loadTexts: fdryLicenseTable.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseTable.setDescription('A list of licenses maintained by license sub-system.')
fdryLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "fdryLicensePackageName"), (0, "FOUNDRY-SN-AGENT-MIB", "fdryLicenseLid"), (1, "FOUNDRY-SN-AGENT-MIB", "fdryLicenseHash"))
if mibBuilder.loadTexts: fdryLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseEntry.setDescription('An entry in a license table.')
fdryLicensePackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24)))
if mibBuilder.loadTexts: fdryLicensePackageName.setStatus('current')
if mibBuilder.loadTexts: fdryLicensePackageName.setDescription('Name of the package, whose license information, this entry displays.')
fdryLicenseLid = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 11)))
if mibBuilder.loadTexts: fdryLicenseLid.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseLid.setDescription('For FastIron: License Id (LID) of the license from the package. For the node locked license, this LID is same as LID of the device. For the non-node locked license, this LID is set as 2.0. This entry displays license information. For NetIron: License Id (LID) of the chassis or the line module for which, this entry displays license information.')
fdryLicenseHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: fdryLicenseHash.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseHash.setDescription('A unique hash for identifying a license entry in the system. This helps traverse through the entries with same package name and LID.')
fdryLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("trial", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseType.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseType.setDescription('The type of the license, which can be either normal or trial.')
fdryLicensePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicensePrecedence.setStatus('current')
if mibBuilder.loadTexts: fdryLicensePrecedence.setDescription('Defines the priority of a particular trial license among those having the same package and LID. This is primarily used for determining which license to use, when there are many trial and normal licenses with same package name and LID.')
fdryLicenseTrialDays = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseTrialDays.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseTrialDays.setDescription("The number of trial days for the license, if it's a trial license. Otherwise, the value has no meaning for normal licenses and read as 0 on Get operation.")
fdryLicenseTrialTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseTrialTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseTrialTimeElapsed.setDescription("The number of trial hours for the license, if it's a trial license. Otherwise, the value has no meaning for normal licenses and read as 0 on Get operation.")
fdryLicenseTrialTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseTrialTimeLeft.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseTrialTimeLeft.setDescription('The number of hours left for the trial license. This is derived from the total number of hours and the cumulative number of hours used. For a normal license, this is 0.')
fdryLicenseTrialState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("unused", 2), ("active", 3), ("expired", 4), ("duplicated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseTrialState.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseTrialState.setDescription("This indicates the state of the trial license. Invalid means the license is not valid for this box, unused means the license is never used, avtive means it has been used at least once and expired means it has expired and can't be used any more. Duplicated means the license has same package name with other license and but both serial numbers are different in the same device, this is only for the non-node locked license. Value duplicated(5) is supported only on FastIron.")
fdryLicenseVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseVendorInfo.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseVendorInfo.setDescription('This is the Brocade specific package data which is an octet string. This contains encoded information of license specific information such as package bit mask, number of ports, etc.')
fdryLicenseSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseSlot.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseSlot.setDescription('This indicates the slot number of the module, the license belongs to. There is a one to one mapping between LID and slot number, as each module has unique LID and can be present only in one slot.')
fdryLicenseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nodeLocked", 1), ("nonNodeLocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseMode.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseMode.setDescription('The mode of the license, which can be either node locked or non-node locked mode. This objects is supported only on FastIron.')
fdryLicenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseSerialNumber.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseSerialNumber.setDescription('This is the serial number of the license. This is only for the non-node locked license. This objects is supported only on FastIron.')
fdryLicenseCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicenseCapacity.setStatus('current')
if mibBuilder.loadTexts: fdryLicenseCapacity.setDescription('The capacity of the license. For POD license, this is the number of ports. For premium or advance license, it is 1. This objects is supported only on FastIron.')
fdryLicensedFeatureInfo = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 2), Bits().clone(namedValues=NamedValues(("ospf", 0), ("isis", 1), ("bgp", 2), ("mpls", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryLicensedFeatureInfo.setStatus('current')
if mibBuilder.loadTexts: fdryLicensedFeatureInfo.setDescription('The features or packages enabled/licensed on the system.')
brcdPortLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 3), )
if mibBuilder.loadTexts: brcdPortLicenseTable.setStatus('current')
if mibBuilder.loadTexts: brcdPortLicenseTable.setDescription('A list of ports which require the port license.')
brcdPortLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "brcdPortLicenseIndex"))
if mibBuilder.loadTexts: brcdPortLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: brcdPortLicenseEntry.setDescription('An entry in a licensed port table.')
brcdPortLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: brcdPortLicenseIndex.setStatus('current')
if mibBuilder.loadTexts: brcdPortLicenseIndex.setDescription('The port/interface index (ifindex).')
brcdPortLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("validLic", 1), ("noLic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdPortLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: brcdPortLicenseStatus.setDescription("The current license state of the port. validLic(1) ............ the port requires port license, and has valid license noLic(2) ........... the port requires port license, and doesn't have valid license ")
brcdSwPackageFname = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwPackageFname.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageFname.setDescription('Name of the release package file or manifest file (including path) currently associated with the system. When the object is not used, the value is a zero length string.')
brcdSwPackageLoad = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("tftpToPrimary", 2), ("tftpToSecondary", 3), ("tftpToMgmtModulePrimaryIntfModuleSecondary", 4), ("tftpToMgmtModuleSecondaryIntfModulePrimary", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwPackageLoad.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageLoad.setDescription('Action object to upgrade the system using a release package. none(1) is the value after the system comes up and should not be used for set-request. The following values will download the release package from a TFTP server and upgrade the system : tftpToPrimary(2) installs both MP and LP application images to primary code. tftpToSecondary(3) installs both MP and LP application images to secondary code. tftpToMgmtModulePrimaryIntfModuleSecondary (4) installs MP application image to primary code and the LP application images to secondary code. tftpToMgmtModuleSecondaryIntfModulePrimary (5) installs MP application image to secondary code and the LP application images to primary code.')
brcdSwPackageLoadStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("normal", 1), ("started", 2), ("internalError", 3), ("manifestFileDownloadError", 4), ("manifestFileValidationError", 5), ("downloadingManagementModuleBoot", 6), ("downloadingManagementModuleMonitor", 7), ("downloadingManagementModuleApplication", 8), ("downloadingInterfaceModuleBoot", 9), ("downloadingInterfaceModuleMonitor", 10), ("downloadingInterfaceModuleApplication", 11), ("downloadingInterfaceModuleFpga", 12), ("downloadingFpgaMBridge", 13), ("downloadingFpgaSBridge", 14), ("downloadingFpgaHBridge", 15), ("upgradingManagementModuleBoot", 16), ("upgradingManagementModuleMonitor", 17), ("upgradingManagementModuleApplication", 18), ("upgradingInterfaceModuleBoot", 19), ("upgradingInterfaceModuleMonitor", 20), ("upgradingInterfaceModuleApplication", 21), ("upgradingInterfaceModuleFpga", 22), ("upgradingFpgaMBridge", 23), ("upgradingFpgaSBridge", 24), ("upgradingFpgaHBridge", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageLoadStatus.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageLoadStatus.setDescription('This object indicates the progress of the upgrade operation. <TBD: more description> ')
brcdSwPackageUpgradeAllImages = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwPackageUpgradeAllImages.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeAllImages.setDescription('To specify an all-image upgrade. If set to true(1), the upgrade sequence will include the MP FPGA images (MBRIDGE/MBRIDGE32 and SBRIDGE/HSBRIDGE). Default is false(2) which will upgrade only the MP and LP Monitor images, MP and LP Application images, and LP Bundled FPGA for MLX/XMR. While CES/CER will upgrade the monitor, application, and FPGA images. This object must be set along with brcdSwPackageLoad. For a read operation, this will always return false(2).')
brcdSwPackageUpgradeResultTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5), )
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultTable.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultTable.setDescription('A table containing the summary of the upgrade operation.')
brcdSwPackageUpgradeResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "brcdSwPackageUpgradeResultIndex"))
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultEntry.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultEntry.setDescription('<TBD>')
brcdSwPackageUpgradeResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultIndex.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultIndex.setDescription('The sequential index, or upgrade step.')
brcdSwPackageUpgradeResultImageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 2), BrcdImageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultImageType.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultImageType.setDescription('The associated image type for this step of upgrade process.')
brcdSwPackageUpgradeResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("downloadFailed", 2), ("installFailed", 3), ("skipped", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultStatus.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultStatus.setDescription('The upgrade status for this particular image upgrade.')
brcdSwPackageUpgradeResultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultTimeStamp.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultTimeStamp.setDescription('The timestamp when this upgrade step was performed.')
brcdSwPackageUpgradeResultDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultDescription.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeResultDescription.setDescription("Summary description for this particular image upgrade. This is empty when brcdSwPackageLoadResultStatus is 'ok'.")
brcdSwPackageUpgradeSkipVersionCheck = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwPackageUpgradeSkipVersionCheck.setStatus('current')
if mibBuilder.loadTexts: brcdSwPackageUpgradeSkipVersionCheck.setDescription("To skip the version comparison of the FPGA images. By default it performs the version comparison between the image version in the manifest file and the one installed in in the system. Setting to 'true' forces the system to upgrade the images by skipping the version check. This object must be set along with brcdSwPackageLoad. For a read operation, this will always return false(2).")
brcdSwIntfModAutoUpgradeMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("tftp", 3), ("slot1", 4), ("slot2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeMode.setStatus('current')
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeMode.setDescription('Specifies the mode of LP Auto-upgrade. <TBD: more description> ')
brcdSwIntfModAutoUpgradeTftpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeTftpAddrType.setStatus('current')
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeTftpAddrType.setDescription('TFTP server IP address Type. Supported address types are ipv4(1) and ipv6(2). <TBD: more description>')
brcdSwIntfModAutoUpgradeTftpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeTftpAddr.setStatus('current')
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeTftpAddr.setDescription('TFTP server IP address. <TBD: more description>')
brcdSwIntfModAutoUpgradeSrcPath = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeSrcPath.setStatus('current')
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeSrcPath.setDescription("Specifies the path to the topmost directory of the release package relative to the root directory. If the source is a TFTP server, the root is the TFTP root. If the source is slot1 or slot2, the root is top-level directory '/'")
brcdSwIntfModAutoUpgradeAllImages = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 16, 1, 2, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeAllImages.setStatus('deprecated')
if mibBuilder.loadTexts: brcdSwIntfModAutoUpgradeAllImages.setDescription("Used to specify an all-image upgrade. If set to true(1), the upgrade sequence will include the LP BOOT image. Default is false(2), which will upgrade only the LP FPGA images. For a read operation, this will return the configured value. Deprecated this OID. SET operation will not take into effect, and READ operations will always return 'false'.")
snAgentTaskCpuTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1), )
if mibBuilder.loadTexts: snAgentTaskCpuTable.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskCpuTable.setDescription('Table to display the Task ID, Task Name, CPU state, wait time, hold time and Activity with respect to each task in the device .')
snAgentTaskCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskCpuTaskID"))
if mibBuilder.loadTexts: snAgentTaskCpuEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskCpuEntry.setDescription('An entry containing the Task ID, Task Name, CPU state, wait time, hold time and Activity with respect to each task in the device ')
snAgentTaskCpuTaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuTaskID.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskCpuTaskID.setDescription('Represents the Task Identification number')
snAgentTaskCpuTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuTaskName.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskCpuTaskName.setDescription('Represents the Task name')
snAgentTaskCpuState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuState.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskCpuState.setDescription('Represents the current state of the task')
snAgentTaskCpuWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuWaitTime.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskCpuWaitTime.setDescription('A count used to represent the wait time in milliseconds')
snAgentTaskCpuHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuHoldTime.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskCpuHoldTime.setDescription('A count used to represent the hold time in milliseconds')
snAgentTaskCpuTaskActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskCpuTaskActivity.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskCpuTaskActivity.setDescription('Represents the Task Activity.A - Was running since last show, I - Idle')
snAgentTaskMQTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2), )
if mibBuilder.loadTexts: snAgentTaskMQTable.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQTable.setDescription('Table to display the Message Queue Priority, Length, Depth, Msgs and the failed count with respect to each task and corresponding MQ priority in the device ')
snAgentTaskMQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskMQTaskID"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskMQPriority"))
if mibBuilder.loadTexts: snAgentTaskMQEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQEntry.setDescription('An entry containing the Message Queue Priority, Length, Depth, Msgs and the failed count with respect to each task and corresponding MQ priority in the device ')
snAgentTaskMQTaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQTaskID.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQTaskID.setDescription('Represents the Task Identification number')
snAgentTaskMQPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQPriority.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQPriority.setDescription('Represents the Priority of the Message Queue')
snAgentTaskMQTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQTaskName.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQTaskName.setDescription('Represents the Task name')
snAgentTaskMQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQLength.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQLength.setDescription('Represents the size of the Message Queue')
snAgentTaskMQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQDepth.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQDepth.setDescription('A count used to represent the message queue depth')
snAgentTaskMQMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQMaxDepth.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQMaxDepth.setDescription('A count used to represent the maximum depth reached ever(clear on read counter)')
snAgentTaskMQStickyMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQStickyMaxDepth.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQStickyMaxDepth.setDescription('A count used to represent the maximum depth reached ever (This counter is not clear on read)')
snAgentTaskMQMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQMsgs.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQMsgs.setDescription('A count used to represent the number of messages')
snAgentTaskMQMaxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQMaxMsgs.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQMaxMsgs.setDescription('A count used to represent the maximum number of messages reached ever(clear on read counter)')
snAgentTaskMQStickyMaxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQStickyMaxMsgs.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQStickyMaxMsgs.setDescription('A count used to represent the maximum number of messages reached ever (This counter is not clear on read)')
snAgentTaskMQFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQFailedCount.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQFailedCount.setDescription('A count used to represent failed count(clear on read counter)')
snAgentTaskMQStickyFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskMQStickyFailedCount.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskMQStickyFailedCount.setDescription('A count used to represent failed count(This counter is not clear on read)')
snAgentTaskBufferTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3), )
if mibBuilder.loadTexts: snAgentTaskBufferTable.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskBufferTable.setDescription('Table to display the Task ID, Task name , Pool_ID and the buffer count of each task in the device')
snAgentTaskBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskBufferTaskID"), (0, "FOUNDRY-SN-AGENT-MIB", "snAgentTaskBufferPoolID"))
if mibBuilder.loadTexts: snAgentTaskBufferEntry.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskBufferEntry.setDescription('An entry containing the Task ID, Task name , Pool_ID and the buffer count of each task in the device')
snAgentTaskBufferTaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskBufferTaskID.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskBufferTaskID.setDescription('Represents the Task Identification number')
snAgentTaskBufferPoolID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskBufferPoolID.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskBufferPoolID.setDescription('Represents the Pool Identification number')
snAgentTaskBufferTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskBufferTaskName.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskBufferTaskName.setDescription('Represents the Task name')
snAgentTaskBufferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 2, 17, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentTaskBufferCount.setStatus('current')
if mibBuilder.loadTexts: snAgentTaskBufferCount.setDescription('A count used to represent the number of buffers allocated to a task')
mibBuilder.exportSymbols("FOUNDRY-SN-AGENT-MIB", snChasFanStatus=snChasFanStatus, snAgTftpServerAddrType=snAgTftpServerAddrType, snStackSecSwitchEnabled=snStackSecSwitchEnabled, snAgentConfigModule2Type=snAgentConfigModule2Type, snAgentConfigModuleNumberOfPorts=snAgentConfigModuleNumberOfPorts, snAgentConfigModuleMgmtModuleType=snAgentConfigModuleMgmtModuleType, snChasFanIndex=snChasFanIndex, snAgBootSeqRowStatus=snAgBootSeqRowStatus, snAgentTaskBufferTable=snAgentTaskBufferTable, snAgReload=snAgReload, snAgGblEnableLinkUpTrap=snAgGblEnableLinkUpTrap, snAgentTempSensorDescr=snAgentTempSensorDescr, snAgentUserAccntName=snAgentUserAccntName, snAgentTaskMQPriority=snAgentTaskMQPriority, snAgentCpu=snAgentCpu, snAgStaticSysLogBufferCriticalLevel=snAgStaticSysLogBufferCriticalLevel, snAgentBrdMainBrdDescription=snAgentBrdMainBrdDescription, snChasGen=snChasGen, snAgentSysParaConfigTable=snAgentSysParaConfigTable, snChasEnableFanTrap=snChasEnableFanTrap, snChasMainBrdDescription=snChasMainBrdDescription, snCAMIpStatIfIndex=snCAMIpStatIfIndex, snAgentTemp2Table=snAgentTemp2Table, snChasFan2Index=snChasFan2Index, snChasPwrSupply2OperStatus=snChasPwrSupply2OperStatus, snAgentConfigModule2Slot=snAgentConfigModule2Slot, snAgentBoot=snAgentBoot, snAgBootSeqIndex=snAgBootSeqIndex, snAgentTaskMQMaxDepth=snAgentTaskMQMaxDepth, snAgentTaskBufferTaskID=snAgentTaskBufferTaskID, snAgSysLogGblDroppedCount=snAgSysLogGblDroppedCount, snAgentConfigModule2Entry=snAgentConfigModule2Entry, snAgFlashImgVer=snAgFlashImgVer, snAgSysLogBufferTimeStamp=snAgSysLogBufferTimeStamp, snChasWarningTemperature=snChasWarningTemperature, snAgentBrdSpeedLeds=snAgentBrdSpeedLeds, snAgentTempThresholdTable=snAgentTempThresholdTable, snCamStatFreePool0Entries=snCamStatFreePool0Entries, snAgentBrdSpeedLedString=snAgentBrdSpeedLedString, snChasPwrSupplyStatus=snChasPwrSupplyStatus, snAgGblTelnetLoginTimeout=snAgGblTelnetLoginTimeout, snCpuProcess5MinUtil=snCpuProcess5MinUtil, snAgCfgEosTable=snAgCfgEosTable, snCamStatAddIPRouteCount=snCamStatAddIPRouteCount, snAgentUserAccntEntry=snAgentUserAccntEntry, snChasUnit=snChasUnit, snAgGblIfIpMask=snAgGblIfIpMask, MacAddress=MacAddress, snAgentTaskMQTaskID=snAgentTaskMQTaskID, fdryLicensedFeatureInfo=fdryLicensedFeatureInfo, snAgSpBootSeqIndex=snAgSpBootSeqIndex, snAgTftpServerAddr=snAgTftpServerAddr, snChasUnitNumSlots=snChasUnitNumSlots, snAgentTempTable=snAgentTempTable, snAgentConfigModule2MgmtModuleType=snAgentConfigModule2MgmtModuleType, snAgGblTelnetTimeout=snAgGblTelnetTimeout, snAgGblCpuUtil1MinAvg=snAgGblCpuUtil1MinAvg, snAgBuildDate=snAgBuildDate, snAgSystemDebugTotalIn=snAgSystemDebugTotalIn, snStackSecSwitchPortCnts=snStackSecSwitchPortCnts, snAgentRedunBkupBootLoad=snAgentRedunBkupBootLoad, DisplayString=DisplayString, snAgentRedunSyncConfig=snAgentRedunSyncConfig, snAgentRedunSwitchOver=snAgentRedunSwitchOver, brcdSwPackageUpgradeAllImages=brcdSwPackageUpgradeAllImages, snAgentTaskBufferPoolID=snAgentTaskBufferPoolID, snAgentSysParaConfigIndex=snAgentSysParaConfigIndex, snChasPwrSupplyTable=snChasPwrSupplyTable, snAgBootSeqInstruction=snAgBootSeqInstruction, snAgentTempEntry=snAgentTempEntry, snAgentTempSlotNum=snAgentTempSlotNum, snCamStatAddIPSessionCount=snCamStatAddIPSessionCount, snAgSystemDebug=snAgSystemDebug, brcdSwPackageUpgradeResultStatus=brcdSwPackageUpgradeResultStatus, snChasProductType=snChasProductType, snAgent=snAgent, snCAMIpStatTotalEntries=snCAMIpStatTotalEntries, snAgentSysParaConfigDescription=snAgentSysParaConfigDescription, snAgStaticSysLogBufferIndex=snAgStaticSysLogBufferIndex, snAgentConfigModuleNumberOfCpus=snAgentConfigModuleNumberOfCpus, snAgGblBufferShortage=snAgGblBufferShortage, snStackSecSwitchMacAddr=snStackSecSwitchMacAddr, snAgentBrdRxTrafficLeds=snAgentBrdRxTrafficLeds, snAgGblCpuUtil5SecAvg=snAgGblCpuUtil5SecAvg, snAgentUserAccntEncryptCode=snAgentUserAccntEncryptCode, snCamStatIPMCastFailCount=snCamStatIPMCastFailCount, snChasSpeedLeds=snChasSpeedLeds, snCAMIpStatEntry=snCAMIpStatEntry, snAgGblBannerExec=snAgGblBannerExec, snChasFan2OperStatus=snChasFan2OperStatus, snAgTrpRcvrIndex=snAgTrpRcvrIndex, fdryLicenseLid=fdryLicenseLid, snAgentTaskMQStickyMaxDepth=snAgentTaskMQStickyMaxDepth, snAgGblDataRetrieveMode=snAgGblDataRetrieveMode, snAgSysLogServerRowStatus=snAgSysLogServerRowStatus, snAgentSysParaConfigEntry=snAgentSysParaConfigEntry, snAgentBrdAlarmLedString=snAgentBrdAlarmLedString, snAgTrpRcvrIpAddr=snAgTrpRcvrIpAddr, snAgStaticSysLogBufferTimeStamp=snAgStaticSysLogBufferTimeStamp, snAgentHwICBMCounterEntry=snAgentHwICBMCounterEntry, brcdSwIntfModAutoUpgradeTftpAddr=brcdSwIntfModAutoUpgradeTftpAddr, snAgSysLogBufferCriticalLevel=snAgSysLogBufferCriticalLevel, snAgentSysParaConfig=snAgentSysParaConfig, snChasExpBrdDescription=snChasExpBrdDescription, snAgGblEnableModuleInsertedTrap=snAgGblEnableModuleInsertedTrap, snAgentBrdEntry=snAgentBrdEntry, snChasMediaLeds=snChasMediaLeds, snChasTrafficLeds=snChasTrafficLeds, snStackMaxSecSwitch=snStackMaxSecSwitch, snCpuProcess15MinUtil=snCpuProcess15MinUtil, snCamStatFreePool2Entries=snCamStatFreePool2Entries, snAgentBrdTable=snAgentBrdTable, snAgentTemp=snAgentTemp, snAgGblPassword=snAgGblPassword, snChasEnableTempWarnTrap=snChasEnableTempWarnTrap, snChasFanEntry=snChasFanEntry, snStackSecSwitchIpAddr=snStackSecSwitchIpAddr, snAgentRedunActiveMgmtMod=snAgentRedunActiveMgmtMod, snAgSpBootSeqFilename=snAgSpBootSeqFilename, snAgentUserAccntPrivilege=snAgentUserAccntPrivilege, snAgentConfigModuleTable=snAgentConfigModuleTable, snAgSysLogGblCriticalLevel=snAgSysLogGblCriticalLevel, snAgSystemDebugBMFreeBuffer=snAgSystemDebugBMFreeBuffer, snAgBuildVer=snAgBuildVer, snAgEraseNVRAM=snAgEraseNVRAM, snAgCfgEosIndex=snAgCfgEosIndex, snAgentBrd2RedundantStatus=snAgentBrd2RedundantStatus, snAgentConfigModuleOperStatus=snAgentConfigModuleOperStatus, snChasFan2Unit=snChasFan2Unit, snChasUnitTable=snChasUnitTable, snStackTotalSecSwitch=snStackTotalSecSwitch, snCamStatLevel1=snCamStatLevel1, snAgentTaskMQEntry=snAgentTaskMQEntry, snAgentConfigModule2NumberOfPorts=snAgentConfigModule2NumberOfPorts, snAgImgLoad=snAgImgLoad, snAgStaticSysLogBufferTable=snAgStaticSysLogBufferTable, snAgSystemDebugBMFreeBufferMgmt=snAgSystemDebugBMFreeBufferMgmt, snAgTftpServerIp=snAgTftpServerIp, snAgentConfigModuleType=snAgentConfigModuleType, snAgSystemDRAMTotal=snAgSystemDRAMTotal, snCamStatIPSessionFailCount=snCamStatIPSessionFailCount, snAgSysLogServerEntry=snAgSysLogServerEntry, brcdSwPackageUpgradeSkipVersionCheck=brcdSwPackageUpgradeSkipVersionCheck, snAgTrpRcvrUDPPort=snAgTrpRcvrUDPPort, snStackSecSwitchIndex=snStackSecSwitchIndex, snAgSpBootSeqSpNumber=snAgSpBootSeqSpNumber, snCpuProcessName=snCpuProcessName, snAgSystemDebugDRAMBuffer=snAgSystemDebugDRAMBuffer, brcdSwPackageGroup=brcdSwPackageGroup, snAgentHwICBMCounterTable=snAgentHwICBMCounterTable, snAgBootSeqIpAddr=snAgBootSeqIpAddr, brcdPortLicenseTable=brcdPortLicenseTable, snAgSystemDRAM=snAgSystemDRAM, snAgentCpuUtil100thPercent=snAgentCpuUtil100thPercent, PYSNMP_MODULE_ID=snAgent, snChasUnitSerNum=snChasUnitSerNum, snAgGblCurrentSecurityLevel=snAgGblCurrentSecurityLevel, snChasShutdownTemperature=snChasShutdownTemperature, snCamStatFreePool3Entries=snCamStatFreePool3Entries, snAgSystemDRAMUtil=snAgSystemDRAMUtil, snAgentTaskMQFailedCount=snAgentTaskMQFailedCount, snCAMIpStatLevel=snCAMIpStatLevel, snChasStatusLeds=snChasStatusLeds, snAgentConfigModuleDescription=snAgentConfigModuleDescription, brcdSwIntfModAutoUpgradeSrcPath=brcdSwIntfModAutoUpgradeSrcPath, brcdSwPackageUpgradeResultTable=brcdSwPackageUpgradeResultTable, snAgSoftwareFeature=snAgSoftwareFeature, brcdSwPackageUpgradeResultIndex=brcdSwPackageUpgradeResultIndex, snAgSysLogBufferCalTimeStamp=snAgSysLogBufferCalTimeStamp, snChasActualTemperature=snChasActualTemperature, snAgentBrd2MainPortTotal=snAgentBrd2MainPortTotal, snChasExpPortTotal=snChasExpPortTotal, snChasMainBrdId=snChasMainBrdId, snStackSecSwitchAck=snStackSecSwitchAck, snAgSysLogBufferIndex=snAgSysLogBufferIndex, snAgentPoe=snAgentPoe, snAgentTaskCpuTaskName=snAgentTaskCpuTaskName, snAgentBrdExpBrdId=snAgentBrdExpBrdId, snChasFlashCard=snChasFlashCard, snChasPwrSupply2Unit=snChasPwrSupply2Unit, snStackPriSwitchMode=snStackPriSwitchMode, snAgentBrdTxTrafficLedString=snAgentBrdTxTrafficLedString, snAgentTempValue=snAgentTempValue, snAgSystemDebugBMBuffer=snAgSystemDebugBMBuffer, snChasExpBrdId=snChasExpBrdId, fdryLicensePackageName=fdryLicensePackageName, snAgentSysParaConfigCurrent=snAgentSysParaConfigCurrent, snCamStatAddL2SessionCount=snCamStatAddL2SessionCount, snAgentTaskBufferEntry=snAgentTaskBufferEntry, snAgentHw=snAgentHw, fdryLicenseTrialTimeLeft=fdryLicenseTrialTimeLeft, snAgGblBannerMotd=snAgGblBannerMotd, snAgSysLogGblBufferSize=snAgSysLogGblBufferSize, snCAMStatTable=snCAMStatTable, snCAMIpStatFreeEntries=snCAMIpStatFreeEntries, snCamStatAddMACCount=snCamStatAddMACCount, snChasFan2Table=snChasFan2Table, snAgGblEnableLinkDownTrap=snAgGblEnableLinkDownTrap, snAgentTask=snAgentTask, snAgentTrp=snAgentTrp, snAgentTempThresholdLowValue=snAgentTempThresholdLowValue, snAgCfgEosChkSum=snAgCfgEosChkSum, snAgentTaskCpuTaskActivity=snAgentTaskCpuTaskActivity, snCamStatAddVLANCount=snCamStatAddVLANCount, snAgentBrdModuleStatus=snAgentBrdModuleStatus, snCamStatMacFailCount=snCamStatMacFailCount, snAgentBrd=snAgentBrd, fdryLicenseSerialNumber=fdryLicenseSerialNumber, snAgentUserGbl=snAgentUserGbl, snChasFactorySerialNumber=snChasFactorySerialNumber, snAgentBrdExpBrdDescription=snAgentBrdExpBrdDescription, snAgentBrdRxTrafficLedString=snAgentBrdRxTrafficLedString, snAgSysLogGblFlushedCount=snAgSysLogGblFlushedCount, fdryLicenseTable=fdryLicenseTable, snChasArchitectureType=snChasArchitectureType, snAgSysLogBufferEntry=snAgSysLogBufferEntry, snAgWebMgmtServerTcpPort=snAgWebMgmtServerTcpPort, snCamStatDeleteDMACamCount=snCamStatDeleteDMACamCount, snAgDefGwayIp=snAgDefGwayIp, snChasIdNumber=snChasIdNumber, snAgentConfigModule=snAgentConfigModule, snChasSerNum=snChasSerNum, snAgSystemLog=snAgSystemLog, snAgentBrdRedundantStatus=snAgentBrdRedundantStatus, snAgentBrd2ModuleStatus=snAgentBrd2ModuleStatus, fdryLicenseEntry=fdryLicenseEntry, brcdPortLicenseIndex=brcdPortLicenseIndex, snChasUnitActualTemperature=snChasUnitActualTemperature, snAgentBrdTrafficLedString=snAgentBrdTrafficLedString, snAgentBrdIndex=snAgentBrdIndex, snAgentConfigModule2Unit=snAgentConfigModule2Unit, snStackSecSwitchInfo=snStackSecSwitchInfo, snCamStatAddIPMCastCount=snCamStatAddIPMCastCount, snCamStatIPRouteFailCount=snCamStatIPRouteFailCount, snAgCfgEosEntry=snAgCfgEosEntry, snCamStatRouteLookupCount=snCamStatRouteLookupCount, snAgentCpuUtilEntry=snAgentCpuUtilEntry, snChasPwrSupply2Table=snChasPwrSupply2Table, snAgBootSeqTable=snAgBootSeqTable, snAgentTaskMQStickyMaxMsgs=snAgentTaskMQStickyMaxMsgs, snAgentBrd2MainBrdDescription=snAgentBrd2MainBrdDescription, snStackSecSwitchCfgCmd=snStackSecSwitchCfgCmd, snAgCfgEos=snAgCfgEos, snAgentTaskMQTable=snAgentTaskMQTable, brcdPortLicenseStatus=brcdPortLicenseStatus, snAgentSysParaConfigMax=snAgentSysParaConfigMax, snAgentBrdTrafficLeds=snAgentBrdTrafficLeds, snAgImgLoadSPModuleNumber=snAgImgLoadSPModuleNumber, snAgGblIfIpAddr=snAgGblIfIpAddr, snAgentCpuUtilInterval=snAgentCpuUtilInterval, snAgentBrdTxTrafficLeds=snAgentBrdTxTrafficLeds, snAgGblPasswordChangeMode=snAgGblPasswordChangeMode, snChasUnitShutdownTemperature=snChasUnitShutdownTemperature, snAgentTemp2UnitNum=snAgentTemp2UnitNum)
mibBuilder.exportSymbols("FOUNDRY-SN-AGENT-MIB", snAgentConfigModule2SerialNumber=snAgentConfigModule2SerialNumber, snAgentTaskCpuTaskID=snAgentTaskCpuTaskID, snAgentBrd2Slot=snAgentBrd2Slot, snAgGblDeleteFirstBeforeDownload=snAgGblDeleteFirstBeforeDownload, snCpuProcess1MinUtil=snCpuProcess1MinUtil, fdryLicenseSlot=fdryLicenseSlot, snAgentTaskCpuEntry=snAgentTaskCpuEntry, snAgSFlowSourceInterface=snAgSFlowSourceInterface, snChasNumSlots=snChasNumSlots, snAgGblTrapMessage=snAgGblTrapMessage, snAgGblEnableTelnetServer=snAgGblEnableTelnetServer, snAgBootSeqFilename=snAgBootSeqFilename, snChasUnitIndex=snChasUnitIndex, snChasSystemMode=snChasSystemMode, brcdSwPackageUpgradeResultEntry=brcdSwPackageUpgradeResultEntry, snAgentBrdAlarmLeds=snAgentBrdAlarmLeds, snStackSecSwitchSyncCmd=snStackSecSwitchSyncCmd, snChasType=snChasType, snAgentBrdStatusLedString=snAgentBrdStatusLedString, snAgTrpRcvrCommunityOrSecurityName=snAgTrpRcvrCommunityOrSecurityName, snAgTrpRcvrStatus=snAgTrpRcvrStatus, snAgentCpuUtilPercent=snAgentCpuUtilPercent, snAgSystemDRAMForBGP=snAgSystemDRAMForBGP, snAgWriteNVRAM=snAgWriteNVRAM, snStackFmpSetProcess=snStackFmpSetProcess, brcdPortLicenseEntry=brcdPortLicenseEntry, snAgStaticSysLogBufferEntry=snAgStaticSysLogBufferEntry, snAgGblDynMemUtil=snAgGblDynMemUtil, snAgSystemDebugCpuQueueRead=snAgSystemDebugCpuQueueRead, snAgentCpuProcessEnable=snAgentCpuProcessEnable, snAgentHwICBMCounterReadOutput=snAgentHwICBMCounterReadOutput, snAgStaticSysLogBufferMessage=snAgStaticSysLogBufferMessage, snCamStatDMAMasterNumber=snCamStatDMAMasterNumber, snAgTrapHoldTime=snAgTrapHoldTime, snAgImgLoadSPModuleType=snAgImgLoadSPModuleType, snAgSysLogGblServer=snAgSysLogGblServer, snAgentTempSensorId=snAgentTempSensorId, snChasMainPortTotal=snChasMainPortTotal, snAgBuildtime=snAgBuildtime, snAgGblCpuUtilCollect=snAgGblCpuUtilCollect, snChasFanDescription=snChasFanDescription, snCamStatFreePool1Entries=snCamStatFreePool1Entries, snAgSysLogGblPersistenceEnable=snAgSysLogGblPersistenceEnable, brcdSwPackageLoadStatus=brcdSwPackageLoadStatus, snAgGblSecurityLevelSet=snAgGblSecurityLevelSet, snAgentTempThresholdLevel=snAgentTempThresholdLevel, snAgBootSeqEntry=snAgBootSeqEntry, snChasPwrSupplyDescription=snChasPwrSupplyDescription, snAgentRedunBkupCopyBootCode=snAgentRedunBkupCopyBootCode, snCamStatDMAIdNumber=snCamStatDMAIdNumber, snStackSecSwitchTable=snStackSecSwitchTable, snAgSysLogGblLoggedCount=snAgSysLogGblLoggedCount, snAgSysLogBufferTable=snAgSysLogBufferTable, snAgTrpRcvrTable=snAgTrpRcvrTable, snAgentConfigModuleSerialNumber=snAgentConfigModuleSerialNumber, brcdSwPackageLoad=brcdSwPackageLoad, snAgSysLogGblClear=snAgSysLogGblClear, fdryLicenseHash=fdryLicenseHash, snAgentCpuUtilCpuId=snAgentCpuUtilCpuId, snAgentUserAccntPassword=snAgentUserAccntPassword, snChasFlashCardLeds=snChasFlashCardLeds, snAgSystemDebugDRAMToBMCopyFail=snAgSystemDebugDRAMToBMCopyFail, snAgGblEnableModuleRemovedTrap=snAgGblEnableModuleRemovedTrap, snChasEnablePwrSupplyTrap=snChasEnablePwrSupplyTrap, snAgSysLogGbl=snAgSysLogGbl, snStackGen=snStackGen, snAgentBrdMediaLedString=snAgentBrdMediaLedString, snAgentEnableMgmtModRedunStateChangeTrap=snAgentEnableMgmtModRedunStateChangeTrap, snCamStatAddIPXCount=snCamStatAddIPXCount, snAgentConfigModuleRowStatus=snAgentConfigModuleRowStatus, snAgentHwICBMCounterWriteOutput=snAgentHwICBMCounterWriteOutput, snAgentBrd2Table=snAgentBrd2Table, snAgSystemDebugIpcGigLock=snAgSystemDebugIpcGigLock, snAgentConfigModule2Table=snAgentConfigModule2Table, snAgentRedundant=snAgentRedundant, snCamStatAddIPHostCount=snCamStatAddIPHostCount, snCpuProcessTable=snCpuProcessTable, snAgentHwICBMCounterWriteInput=snAgentHwICBMCounterWriteInput, snAgentBrdMemoryUtil100thPercent=snAgentBrdMemoryUtil100thPercent, snChasUnitEntry=snChasUnitEntry, snChasFanOperStatus=snChasFanOperStatus, snAgentConfigModule2Description=snAgentConfigModule2Description, snAgGblReadWriteCommunity=snAgGblReadWriteCommunity, snCpuProcessEntry=snCpuProcessEntry, snAgentConfigModuleEntry=snAgentConfigModuleEntry, snAgentConfigModule2RowStatus=snAgentConfigModule2RowStatus, brcdSwIntfModAutoUpgradeAllImages=brcdSwIntfModAutoUpgradeAllImages, snAgConfigFromNVRAM=snAgConfigFromNVRAM, snAgSysLogGblOverrunCount=snAgSysLogGblOverrunCount, snAgentBrdMediaLeds=snAgentBrdMediaLeds, snAgentConfigModule2OperStatus=snAgentConfigModule2OperStatus, snAgGblBannerIncoming=snAgGblBannerIncoming, snChasPwrSupplyIndex=snChasPwrSupplyIndex, snAgSpBootSeqEntry=snAgSpBootSeqEntry, snAgentTaskBufferTaskName=snAgentTaskBufferTaskName, snAgentTaskMQMsgs=snAgentTaskMQMsgs, snAgSystemDRAMForOSPF=snAgSystemDRAMForOSPF, brcdSwIntfModAutoUpgradeTftpAddrType=brcdSwIntfModAutoUpgradeTftpAddrType, snAgentConfigModule2NumberOfCpus=snAgentConfigModule2NumberOfCpus, snAgentBrdPartNumber=snAgentBrdPartNumber, snAgGblDynMemFree=snAgGblDynMemFree, snAgentBrdSerialNumber=snAgentBrdSerialNumber, snAgentHwICBMCounterFreeDepth=snAgentHwICBMCounterFreeDepth, snAgSysLogServerIP=snAgSysLogServerIP, snCamStatLevel2=snCamStatLevel2, snAgImgVer=snAgImgVer, snAgSpBootSeqInstruction=snAgSpBootSeqInstruction, snStackSecSwitchSubnetMask=snStackSecSwitchSubnetMask, snAgentCpuUtilTable=snAgentCpuUtilTable, fdryLicenseTrialTimeElapsed=fdryLicenseTrialTimeElapsed, snStackSecSwitchSlotId=snStackSecSwitchSlotId, snAgSysLogGblFacility=snAgSysLogGblFacility, snAgSystemDRAMFree=snAgSystemDRAMFree, snAgentCpuUtilValue=snAgentCpuUtilValue, snAgentHwICBMCounterReadInput=snAgentHwICBMCounterReadInput, snAgentTaskMQDepth=snAgentTaskMQDepth, snAgTrpRcvrEntry=snAgTrpRcvrEntry, snAgentBrdMainBrdId=snAgentBrdMainBrdId, snAgentBrd2Entry=snAgentBrd2Entry, snAgSysLogBufferMessage=snAgSysLogBufferMessage, snAgentBrd2Unit=snAgentBrd2Unit, snCamStatL2SessionFailCount=snCamStatL2SessionFailCount, snAgStaticSysLogBufferCalTimeStamp=snAgStaticSysLogBufferCalTimeStamp, snAgentCpuUtilSlotNum=snAgentCpuUtilSlotNum, snChasPwrSupply2Description=snChasPwrSupply2Description, snChasPwrSupplyEntry=snChasPwrSupplyEntry, snAgGblSecurityLevelBinding=snAgGblSecurityLevelBinding, snChasUnitWarningTemperature=snChasUnitWarningTemperature, snAgentBrdMainPortTotal=snAgentBrdMainPortTotal, snCamStatLevel3=snCamStatLevel3, snAgentRedunGbl=snAgentRedunGbl, snCamStatFreeL2Entries=snCamStatFreeL2Entries, snAgSysLogServerUDPPort=snAgSysLogServerUDPPort, fdryLicenseTrialState=fdryLicenseTrialState, snAgCfgLoad=snAgCfgLoad, snAgentHwICBMCounterWriteDrop=snAgentHwICBMCounterWriteDrop, snAgentBrdMemoryTotal=snAgentBrdMemoryTotal, snAgGblTelnetPassword=snAgGblTelnetPassword, snAgSpBootSeqIpAddr=snAgSpBootSeqIpAddr, snAgentTemp2Value=snAgentTemp2Value, snAgentBrdExpPortTotal=snAgentBrdExpPortTotal, snAgGblQueueOverflow=snAgGblQueueOverflow, snCpuProcessRuntime=snCpuProcessRuntime, snAgTrpRcvrSecurityLevel=snAgTrpRcvrSecurityLevel, snAgTrpRcvrSecurityModel=snAgTrpRcvrSecurityModel, snCAMStatEntry=snCAMStatEntry, fdryLicensePrecedence=fdryLicensePrecedence, snAgentTaskCpuState=snAgentTaskCpuState, brcdSwPackageUpgradeResultImageType=brcdSwPackageUpgradeResultImageType, snStackSyncAllSecSwitch=snStackSyncAllSecSwitch, snAgGblDmaFailure=snAgGblDmaFailure, snAgentBrd2MainBrdId=snAgentBrd2MainBrdId, snAgGblEnableColdStartTrap=snAgGblEnableColdStartTrap, snAgCfgEosPacket=snAgCfgEosPacket, snAgentTemp2SensorId=snAgentTemp2SensorId, snAgentTempThresholdModule=snAgentTempThresholdModule, snAgentTemp2SensorDescr=snAgentTemp2SensorDescr, snAgGblLevelPasswordsMask=snAgGblLevelPasswordsMask, snAgGblEnableWebMgmt=snAgGblEnableWebMgmt, brcdSwPackageUpgradeResultTimeStamp=brcdSwPackageUpgradeResultTimeStamp, snAgTrpRcvrCurEntry=snAgTrpRcvrCurEntry, snAgGblDynMemTotal=snAgGblDynMemTotal, snAgentSysParaConfigDefault=snAgentSysParaConfigDefault, snAgSystemDebugTotalOut=snAgSystemDebugTotalOut, snAgSysLogServerTable=snAgSysLogServerTable, snAgentUserMaxAccnt=snAgentUserMaxAccnt, snChasPwrSupplyOperStatus=snChasPwrSupplyOperStatus, snAgentBrdStatusLeds=snAgentBrdStatusLeds, snCpuProcess5SecUtil=snCpuProcess5SecUtil, snAgentGbl=snAgentGbl, snAgGblCpuUtil1SecAvg=snAgGblCpuUtil1SecAvg, snAgGblEnableSLB=snAgGblEnableSLB, snChasFan=snChasFan, snChasFactoryPartNumber=snChasFactoryPartNumber, snAgentTemp2SlotNum=snAgentTemp2SlotNum, snAgentBrdMemoryAvailable=snAgentBrdMemoryAvailable, snAgentConfigModuleIndex=snAgentConfigModuleIndex, snCamStatFreeL2LowestSection=snCamStatFreeL2LowestSection, snAgSpBootSeqTable=snAgSpBootSeqTable, snAgentTaskCpuTable=snAgentTaskCpuTable, snStackSecSwitchEntry=snStackSecSwitchEntry, brcdSw=brcdSw, snAgGblReadOnlyCommunity=snAgGblReadOnlyCommunity, brcdSwPackageFname=brcdSwPackageFname, snAgentTaskMQMaxMsgs=snAgentTaskMQMaxMsgs, snAgGblResourceLowWarning=snAgGblResourceLowWarning, snAgImgFname=snAgImgFname, snAgentTaskCpuHoldTime=snAgentTaskCpuHoldTime, snAgentUser=snAgentUser, snAgentUserAccntTable=snAgentUserAccntTable, snChasPwrSupply2Entry=snChasPwrSupply2Entry, snChasPwrSupply2Index=snChasPwrSupply2Index, snAgentLog=snAgentLog, brcdSwPackageUpgradeResultDescription=brcdSwPackageUpgradeResultDescription, snAgGblPasswordCheckMode=snAgGblPasswordCheckMode, brcdSwIntfModAutoUpgrade=brcdSwIntfModAutoUpgrade, snCamStatHostLookupCount=snCamStatHostLookupCount, fdryLicenseTrialDays=fdryLicenseTrialDays, snAgentTempThresholdHighValue=snAgentTempThresholdHighValue, fdryLicenseType=fdryLicenseType, snChasUnitPartNum=snChasUnitPartNum, snChasPwr=snChasPwr, snAgentTaskMQLength=snAgentTaskMQLength, snAgentTemp2Entry=snAgentTemp2Entry, fdryLicenseCapacity=fdryLicenseCapacity, snAgentTaskBufferCount=snAgentTaskBufferCount, snStackSmSlotIndex=snStackSmSlotIndex, snAgentUserAccntRowStatus=snAgentUserAccntRowStatus, snChasFan2Description=snChasFan2Description, snAgCfgFname=snAgCfgFname, snAgentHwICBMCounterDMA=snAgentHwICBMCounterDMA, snChasFanTable=snChasFanTable, snAgentBrdUpTime=snAgentBrdUpTime, snAgGblExcessiveErrorWarning=snAgGblExcessiveErrorWarning, snCAMIpStatTable=snCAMIpStatTable, snChasFan2Entry=snChasFan2Entry, snAgentHwICBMCounterSlot=snAgentHwICBMCounterSlot, snAgentTaskMQStickyFailedCount=snAgentTaskMQStickyFailedCount, BrcdImageType=BrcdImageType, snAgSystemDebugDRAMGetError=snAgSystemDebugDRAMGetError, snAgentTempThresholdEntry=snAgentTempThresholdEntry, snAgentTaskMQTaskName=snAgentTaskMQTaskName, snAgentLicense=snAgentLicense, snAgSpBootSeqRowStatus=snAgSpBootSeqRowStatus, snAgentSysParaConfigMin=snAgentSysParaConfigMin, fdryLicenseMode=fdryLicenseMode, brcdSwPackageUpgrade=brcdSwPackageUpgrade, brcdSwIntfModAutoUpgradeMode=brcdSwIntfModAutoUpgradeMode, snAgentTaskCpuWaitTime=snAgentTaskCpuWaitTime, snAgGblCpuUtilData=snAgGblCpuUtilData, fdryLicenseVendorInfo=fdryLicenseVendorInfo, snAgSysLogGblEnable=snAgSysLogGblEnable)
