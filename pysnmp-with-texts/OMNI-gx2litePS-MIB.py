#
# PySNMP MIB module OMNI-gx2litePS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2litePS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
gx2Liteps, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Liteps")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapChangedObjectId, trapNetworkElemOperState, trapNetworkElemAdminState, trapText, trapPerceivedSeverity, trapNETrapLastTrapTimeStamp, trapChangedValueDisplayString, trapNetworkElemModelNumber, trapNetworkElemAlarmStatus, trapChangedValueInteger, trapIdentifier, trapNetworkElemAvailStatus, trapNetworkElemSerialNum = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapChangedObjectId", "trapNetworkElemOperState", "trapNetworkElemAdminState", "trapText", "trapPerceivedSeverity", "trapNETrapLastTrapTimeStamp", "trapChangedValueDisplayString", "trapNetworkElemModelNumber", "trapNetworkElemAlarmStatus", "trapChangedValueInteger", "trapIdentifier", "trapNetworkElemAvailStatus", "trapNetworkElemSerialNum")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Gauge32, Unsigned32, NotificationType, MibIdentifier, Integer32, Counter32, TimeTicks, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Counter64, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "NotificationType", "MibIdentifier", "Integer32", "Counter32", "TimeTicks", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Counter64", "Bits", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2LitepsDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 1))
gx2LitepsAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2), )
if mibBuilder.loadTexts: gx2LitepsAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2LitepsAnalogTable.setDescription('This table contains gx2Liteps specific parameters with nominal and current values.')
gx2LitepsAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1), ).setIndexNames((0, "OMNI-gx2litePS-MIB", "gx2LitepsAnalogTableIndex"))
if mibBuilder.loadTexts: gx2LitepsAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2LitepsAnalogEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2LitepsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3), )
if mibBuilder.loadTexts: gx2LitepsStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2LitepsStatusTable.setDescription('This table contains gx2Liteps specific parameters with nominal and current values.')
gx2LitepsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3, 2), ).setIndexNames((0, "OMNI-gx2litePS-MIB", "gx2LitepsStatusTableIndex"))
if mibBuilder.loadTexts: gx2LitepsStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2LitepsStatusEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2LitepsAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2LitepsAnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2LitepsAnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
litepslabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepslabel12Volt.setStatus('optional')
if mibBuilder.loadTexts: litepslabel12Volt.setDescription('The value of this object provides the label of the 12 Volt Analog parameter.')
litepsuom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsuom12Volt.setStatus('optional')
if mibBuilder.loadTexts: litepsuom12Volt.setDescription('The value of this object provides the unit of measure of the 12 Volt Analog parameter.')
litepsmajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmajorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmajorHigh12Volt.setDescription('The value of this object provides the Major High alarm value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsmajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmajorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmajorLow12Volt.setDescription('The value of this object provides the Major Low alarm value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminorHigh12Volt.setDescription('The value of this object provides the Minor High alarm value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminorLow12Volt.setDescription('The value of this object provides the Minor Low alarm value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepscurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepscurrentValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepscurrentValue12Volt.setDescription('The value of this object provides the Current value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsstateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsstateFlag12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsstateFlag12Volt.setDescription('The value of this object provides the state of the 12 Volt Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable)')
litepsminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminValue12Volt.setDescription('The value of this object provides the minimum value the 12 Volt Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsmaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmaxValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmaxValue12Volt.setDescription('The value of this object provides the maximum value the 12 Volt Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsalarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsalarmState12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsalarmState12Volt.setDescription('The value of this object provides the curent alarm state of the 12 Volt Analog parameter.')
litepslabel5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepslabel5Volt.setStatus('optional')
if mibBuilder.loadTexts: litepslabel5Volt.setDescription('The value of this object provides the label of the Attenuator Setting Analog parameter.')
litepsuom5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsuom5Volt.setStatus('optional')
if mibBuilder.loadTexts: litepsuom5Volt.setDescription('The value of this object provides the Unit of Measure of the 5 Volt Analog parameter.')
litepsmajorHigh5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmajorHigh5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmajorHigh5Volt.setDescription('The value of this object provides the Major High alarm value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsmajorLow5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmajorLow5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmajorLow5Volt.setDescription('The value of this object provides the Major Low alarm value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsminorHigh5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminorHigh5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminorHigh5Volt.setDescription('The value of this object provides the Minor High alarm value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsminorLow5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminorLow5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminorLow5Volt.setDescription('The value of this object provides the Minor Low alarm value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepscurrentValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepscurrentValue5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepscurrentValue5Volt.setDescription('The value of this object provides the Current value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsstateFlag5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsstateFlag5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsstateFlag5Volt.setDescription('The value of this object provides the state of the 5 Volt Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
litepsminValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminValue5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminValue5Volt.setDescription('The value of this object provides the minimum value the 5 Volt Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsmaxValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmaxValue5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmaxValue5Volt.setDescription('The value of this object provides the maximum value the 5 Volt Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsalarmState5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsalarmState5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsalarmState5Volt.setDescription('The value of this object provides the curent alarm state of the 5 Volt Analog parameter. ')
litepslabel3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepslabel3Volt.setStatus('optional')
if mibBuilder.loadTexts: litepslabel3Volt.setDescription('The value of this object provides the label of the 3 Anode Volt Analog parameter.')
litepsuom3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsuom3Volt.setStatus('optional')
if mibBuilder.loadTexts: litepsuom3Volt.setDescription('The value of this object provides the Unit of Measure of the 3.7V anode voltage analog parameter.')
litepsmajorHigh3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmajorHigh3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmajorHigh3Volt.setDescription('The value of this object provides the Major High alarm value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsmajorLow3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmajorLow3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmajorLow3Volt.setDescription('The value of this object provides the Major Low alarm value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsminorHigh3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminorHigh3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminorHigh3Volt.setDescription('The value of this object provides the Minor High alarm value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsminorLow3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminorLow3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminorLow3Volt.setDescription('The value of this object provides the Minor Low alarm value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepscurrentValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepscurrentValue3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepscurrentValue3Volt.setDescription('The value of this object provides the Current value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsstateFlag3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsstateFlag3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsstateFlag3Volt.setDescription('The value of this object provides the state of the 3 Volt Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable). ')
litepsminValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsminValue3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsminValue3Volt.setDescription('The value of this object provides the minimum value that the 3.7V anode voltage analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsmaxValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsmaxValue3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsmaxValue3Volt.setDescription('The value of this object provides the maximum value that the 3.7V anode voltage analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
litepsalarmState3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsalarmState3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: litepsalarmState3Volt.setDescription('The value of this object provides the curent alarm state of the 3.7V anode voltage analog parameter. ')
gx2LitepsStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2LitepsStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2LitepsStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
litepslabelFan1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepslabelFan1Status.setStatus('optional')
if mibBuilder.loadTexts: litepslabelFan1Status.setDescription('The value of this object provides the label of the Fan 1 Status parameter.')
litepsvalueFan1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsvalueFan1Status.setStatus('mandatory')
if mibBuilder.loadTexts: litepsvalueFan1Status.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
litepsstateflagFan1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsstateflagFan1Status.setStatus('mandatory')
if mibBuilder.loadTexts: litepsstateflagFan1Status.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
litepslabelFan2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepslabelFan2Status.setStatus('optional')
if mibBuilder.loadTexts: litepslabelFan2Status.setDescription('The value of this object provides the label of the Fan 2 Status parameter.')
litepsvalueFan2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsvalueFan2Status.setStatus('mandatory')
if mibBuilder.loadTexts: litepsvalueFan2Status.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
litepsstateflagFan2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: litepsstateflagFan2Status.setStatus('mandatory')
if mibBuilder.loadTexts: litepsstateflagFan2Status.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
trapLitepsConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLitepsConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapLitepsConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLitepsConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapLitepsFanCurrent1 = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLitepsFanCurrent1.setDescription('This trap is issued when Fan 1 is in an alarm condition.')
trapLitepsFanCurrent2 = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLitepsFanCurrent2.setDescription('This trap is issued when Fan 2 is in an alarm condition.')
trapLiteps12Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLiteps12Volt.setDescription('This trap is issued when the 12 Volts is in an alarm condition.')
trapLiteps5Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLiteps5Volt.setDescription('This trap is issued when the 5.1 Volts is in an alarm condition.')
trapLiteps3Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 23) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLiteps3Volt.setDescription('This trap is issued when the 3.7 Volts is in an alarm condition.')
mibBuilder.exportSymbols("OMNI-gx2litePS-MIB", litepsuom12Volt=litepsuom12Volt, trapLiteps12Volt=trapLiteps12Volt, litepsalarmState12Volt=litepsalarmState12Volt, litepsstateFlag3Volt=litepsstateFlag3Volt, gx2LitepsAnalogTable=gx2LitepsAnalogTable, litepsmajorLow12Volt=litepsmajorLow12Volt, trapLiteps3Volt=trapLiteps3Volt, litepslabel3Volt=litepslabel3Volt, litepsminorHigh5Volt=litepsminorHigh5Volt, litepscurrentValue3Volt=litepscurrentValue3Volt, gx2LitepsStatusTableIndex=gx2LitepsStatusTableIndex, litepsstateflagFan2Status=litepsstateflagFan2Status, litepsuom3Volt=litepsuom3Volt, litepsmaxValue12Volt=litepsmaxValue12Volt, litepsstateFlag5Volt=litepsstateFlag5Volt, gx2LitepsAnalogEntry=gx2LitepsAnalogEntry, litepsmajorLow3Volt=litepsmajorLow3Volt, Float=Float, litepsvalueFan2Status=litepsvalueFan2Status, litepsminorLow12Volt=litepsminorLow12Volt, litepsminValue5Volt=litepsminValue5Volt, litepsmajorLow5Volt=litepsmajorLow5Volt, litepslabelFan2Status=litepslabelFan2Status, litepsmaxValue3Volt=litepsmaxValue3Volt, litepsmaxValue5Volt=litepsmaxValue5Volt, litepsminValue3Volt=litepsminValue3Volt, litepslabel12Volt=litepslabel12Volt, litepsminorLow3Volt=litepsminorLow3Volt, gx2LitepsDescriptor=gx2LitepsDescriptor, litepsminorHigh12Volt=litepsminorHigh12Volt, litepsminorLow5Volt=litepsminorLow5Volt, litepsmajorHigh3Volt=litepsmajorHigh3Volt, trapLitepsConfigChangeDisplayString=trapLitepsConfigChangeDisplayString, litepsmajorHigh12Volt=litepsmajorHigh12Volt, litepsstateflagFan1Status=litepsstateflagFan1Status, litepsvalueFan1Status=litepsvalueFan1Status, litepscurrentValue12Volt=litepscurrentValue12Volt, litepsstateFlag12Volt=litepsstateFlag12Volt, gx2LitepsAnalogTableIndex=gx2LitepsAnalogTableIndex, litepscurrentValue5Volt=litepscurrentValue5Volt, gx2LitepsStatusEntry=gx2LitepsStatusEntry, litepslabelFan1Status=litepslabelFan1Status, trapLitepsConfigChangeInteger=trapLitepsConfigChangeInteger, trapLitepsFanCurrent2=trapLitepsFanCurrent2, litepslabel5Volt=litepslabel5Volt, litepsmajorHigh5Volt=litepsmajorHigh5Volt, litepsminorHigh3Volt=litepsminorHigh3Volt, trapLiteps5Volt=trapLiteps5Volt, litepsminValue12Volt=litepsminValue12Volt, gx2LitepsStatusTable=gx2LitepsStatusTable, litepsuom5Volt=litepsuom5Volt, trapLitepsFanCurrent1=trapLitepsFanCurrent1, litepsalarmState5Volt=litepsalarmState5Volt, litepsalarmState3Volt=litepsalarmState3Volt)
