#
# PySNMP MIB module XUPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XUPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:44:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, Bits, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, enterprises, NotificationType, Unsigned32, Integer32, NotificationType, Counter64, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Bits", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "enterprises", "NotificationType", "Unsigned32", "Integer32", "NotificationType", "Counter64", "IpAddress", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
powerware = MibIdentifier((1, 3, 6, 1, 4, 1, 534))
xups = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1))
xupsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 1))
xupsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 2))
xupsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 3))
xupsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 4))
xupsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 5))
xupsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 6))
xupsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7))
xupsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 8))
xupsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 9))
xupsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 10))
xupsTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11))
xupsRecep = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 12))
xupsTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 13))
xupsObjectId = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2))
powerwareEthernetSnmpAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 1))
powerwareNetworkSnmpAdapterEther = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 2))
powerwareNetworkSnmpAdapterToken = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 3))
onlinetDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 4))
connectUPSAdapterEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 5))
powerwareNetworkDigitalIOEther = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 6))
connectUPSAdapterTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 7))
simpleSnmpAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 8))
xupsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: xupsIdentManufacturer.setDescription('The UPS Manufacturer Name (e.g. Powerware Corporation).')
xupsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: xupsIdentModel.setDescription('The UPS Model (e.g. Powerware Plus Model 18).')
xupsIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xupsIdentSoftwareVersion.setDescription('The firmware revision level(s) of the UPS microcontroller(s).')
xupsIdentOemCode = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentOemCode.setStatus('mandatory')
if mibBuilder.loadTexts: xupsIdentOemCode.setDescription('A binary code indicating who the UPS was manufactured or labeled for. 0 or 255 indicates Powerware itself.')
xupsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBatTimeRemaining.setDescription('Battery run time in seconds before UPS turns off due to low battery.')
xupsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBatVoltage.setDescription('Battery voltage as reported by the UPS meters.')
xupsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBatCurrent.setDescription('Battery Current as reported by the UPS metering. Current is positive when discharging, negative when recharging the battery.')
xupsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBatCapacity.setDescription('Battery percent charge.')
xupsBatteryAbmStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("batteryCharging", 1), ("batteryDischarging", 2), ("batteryFloating", 3), ("batteryResting", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryAbmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBatteryAbmStatus.setDescription('Gives the status of the Advanced Battery Management; batteryFloating(3) status means that the charger is temporarily charging the battery to its float voltage; batteryResting(4) is the state when the battery is fully charged and none of the other actions (charging/discharging/floating) is being done.')
xupsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputFrequency.setDescription('The utility line frequency in tenths of Hz.')
xupsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputLineBads.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputLineBads.setDescription('The number of times the Input was out of tolerance in voltage or frequency.')
xupsInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputNumPhases.setStatus('mandatory')
xupsInputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 3, 4), )
if mibBuilder.loadTexts: xupsInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputTable.setDescription('The Aggregate Object with number of entries equal to NumPhases and including the xupsInput group.')
xupsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1), ).setIndexNames((0, "XUPS-MIB", "xupsInputPhase"))
if mibBuilder.loadTexts: xupsInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputEntry.setDescription('The input table entry containing the current, voltage, etc.')
xupsInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputPhase.setDescription('The number of the phase. Serves as index for input table.')
xupsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputVoltage.setDescription('The measured input voltage from the UPS meters in volts.')
xupsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputCurrent.setDescription('The measured input current from the UPS meters in amps.')
xupsInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputWatts.setDescription('The measured input real power in watts.')
xupsInputSource = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("primaryUtility", 3), ("bypassFeed", 4), ("secondaryUtility", 5), ("generator", 6), ("flywheel", 7), ("fuelcell", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputSource.setStatus('mandatory')
if mibBuilder.loadTexts: xupsInputSource.setDescription('The present external source of input power. The enumeration none(2) indicates that there is no external source of power, for example, the UPS is On Battery (an internal source). The bypassFeed(4) can only be used when the Bypass source is known to be a separate utility feed than the primaryUtility(3).')
xupsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputLoad.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputLoad.setDescription('The UPS output load in percent of rated capacity.')
xupsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputFrequency.setDescription('The measured UPS output frequency in tenths of Hz.')
xupsOutputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputNumPhases.setDescription('The number of metered output phases, serves as the table index.')
xupsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 4, 4), )
if mibBuilder.loadTexts: xupsOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputTable.setDescription('The Aggregate Object with number of entries equal to NumPhases and including the xupsOutput group.')
xupsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1), ).setIndexNames((0, "XUPS-MIB", "xupsOutputPhase"))
if mibBuilder.loadTexts: xupsOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputEntry.setDescription('Output Table Entry containing voltage, current, etc.')
xupsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputPhase.setDescription('The number {1..3} of the output phase.')
xupsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputVoltage.setDescription('The measured output voltage from the UPS metering in volts.')
xupsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputCurrent.setDescription('The measured UPS output current in amps.')
xupsOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputWatts.setDescription('The measured real output power in watts.')
xupsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7), ("parallelCapacity", 8), ("parallelRedundant", 9), ("highEfficiencyMode", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputSource.setStatus('mandatory')
if mibBuilder.loadTexts: xupsOutputSource.setDescription('The present source of output power. The enumeration none(2) indicates that there is no source of output power (and therefore no output power), for example, the system has opened the output breaker.')
xupsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBypassFrequency.setDescription('The bypass frequency in tenths of Hz.')
xupsBypassNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBypassNumPhases.setDescription('The number of lines in the UPS bypass table.')
xupsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 5, 3), )
if mibBuilder.loadTexts: xupsBypassTable.setStatus('mandatory')
xupsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1), ).setIndexNames((0, "XUPS-MIB", "xupsBypassPhase"))
if mibBuilder.loadTexts: xupsBypassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBypassEntry.setDescription('Entry in the XUPS bypass table.')
xupsBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassPhase.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBypassPhase.setDescription('The Bypass Phase, index for the table.')
xupsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: xupsBypassVoltage.setDescription('The measured UPS bypass voltage in volts.')
xupsEnvAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvAmbientTemp.setDescription('The reading of the ambient temperature in the vicinity of the UPS or SNMP agent.')
xupsEnvAmbientLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvAmbientLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvAmbientLowerLimit.setDescription('The Lower Limit of the ambient temperature; if xupsEnvAmbientTemp falls below this value, the xupsAmbientTempBad alarm will occur.')
xupsEnvAmbientUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvAmbientUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvAmbientUpperLimit.setDescription('The Upper Limit of the ambient temperature; if xupsEnvAmbientTemp rises above this value, the xupsAmbientTempBad alarm will occur. This value should be greater than xupsEnvAmbientLowerLimit.')
xupsEnvAmbientHumidity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvAmbientHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvAmbientHumidity.setDescription('The reading of the ambient humidity in the vicinity of the UPS or SNMP agent.')
xupsEnvRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvRemoteTemp.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvRemoteTemp.setDescription('The reading of a remote temperature sensor connected to the UPS or SNMP agent.')
xupsEnvRemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvRemoteHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvRemoteHumidity.setDescription('The reading of a remote humidity sensor connected to the UPS or SNMP agent.')
xupsEnvNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvNumContacts.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvNumContacts.setDescription('The number of Contacts in the xupsContactSenseTable. This object indicates the number of rows in the xupsContactSenseTable.')
xupsContactSenseTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 6, 8), )
if mibBuilder.loadTexts: xupsContactSenseTable.setStatus('mandatory')
if mibBuilder.loadTexts: xupsContactSenseTable.setDescription('A list of Contact Sensing table entries. The number of entries is given by the value of xupsEnvNumContacts.')
xupsContactsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1), ).setIndexNames((0, "XUPS-MIB", "xupsContactIndex"))
if mibBuilder.loadTexts: xupsContactsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xupsContactsTableEntry.setDescription('An entry containing information applicable to a particular Contact input.')
xupsContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: xupsContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xupsContactIndex.setDescription('The Contact identifier; identical to the Contact Number.')
xupsContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("anyChange", 3), ("notUsed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsContactType.setStatus('mandatory')
if mibBuilder.loadTexts: xupsContactType.setDescription("The normal state for this contact. The 'other' state is the Active state for generating the xupstdContactActiveNotice trap. If anyChange(3) is selected, then this trap is sent any time the contact changes to either Open or Closed. No traps are sent if the Contact is set to notUsed(4). In many cases, the configuration for Contacts may be done by other means, so this object may be read-only.")
xupsContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("openWithNotice", 3), ("closedWithNotice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsContactState.setStatus('mandatory')
if mibBuilder.loadTexts: xupsContactState.setDescription('The current state of the Contact input; the value is based on the open/closed input state and the setting for xupsContactType. When entering the openWithNotice(3) and closedWithNotice(4) states, no entries added to the xupsAlarmTable, but the xupstdContactActiveNotice trap is sent.')
xupsContactDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsContactDescr.setStatus('mandatory')
if mibBuilder.loadTexts: xupsContactDescr.setDescription('A label identifying the Contact. This object should be set by the administrator.')
xupsEnvRemoteTempLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvRemoteTempLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvRemoteTempLowerLimit.setDescription('The Lower Limit of the remote temperature; if xupsEnvRemoteTemp falls below this value, the xupsRemoteTempBad alarm will occur.')
xupsEnvRemoteTempUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvRemoteTempUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvRemoteTempUpperLimit.setDescription('The Upper Limit of the remote temperature; if xupsEnvRemoteTemp rises above this value, the xupsRemoteTempBad alarm will occur. This value should be greater than xupsEnvRemoteTempLowerLimit.')
xupsEnvRemoteHumidityLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvRemoteHumidityLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvRemoteHumidityLowerLimit.setDescription('The Lower Limit of the remote humidity reading; if xupsEnvRemoteHumidity falls below this value, the xupsRemoteHumidityBad alarm will occur.')
xupsEnvRemoteHumidityUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvRemoteHumidityUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xupsEnvRemoteHumidityUpperLimit.setDescription('The Upper Limit of the remote humidity reading; if xupsEnvRemoteHumidity rises above this value, the xupsRemoteHumidityBad alarm will occur. This value should be greater than xupsEnvRemoteHumidityLowerLimit.')
xupsAlarms = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: xupsAlarms.setDescription('The current number of alarm conditions.')
xupsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 7, 2), )
if mibBuilder.loadTexts: xupsAlarmTable.setStatus('mandatory')
xupsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1), ).setIndexNames((0, "XUPS-MIB", "xupsAlarmID"))
if mibBuilder.loadTexts: xupsAlarmEntry.setStatus('mandatory')
xupsAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmID.setStatus('mandatory')
if mibBuilder.loadTexts: xupsAlarmID.setDescription('A unique identifier for an alarm condition.')
xupsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmDescr.setStatus('mandatory')
if mibBuilder.loadTexts: xupsAlarmDescr.setDescription('A reference to an alarm description object. The object referenced should not be accessible, but rather be used to provide a unique description of the alarm condition.')
xupsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmTime.setStatus('mandatory')
if mibBuilder.loadTexts: xupsAlarmTime.setDescription('The value of the MIB-II variable sysUpTime when the alarm condition occurred.')
xupsOnBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 3))
xupsLowBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 4))
xupsUtilityPowerRestored = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 5))
xupsReturnFromLowBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 6))
xupsOutputOverload = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 7))
xupsInternalFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 8))
xupsBatteryDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 9))
xupsInverterFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 10))
xupsOnBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 11))
xupsBypassNotAvailable = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 12))
xupsOutputOff = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 13))
xupsInputFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 14))
xupsBuildingAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 15))
xupsShutdownImminent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 16))
xupsOnInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 17))
xupsAlarmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 7, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmNumEvents.setStatus('mandatory')
if mibBuilder.loadTexts: xupsAlarmNumEvents.setDescription('The number of entries in the UPS event history queue.')
xupsAlarmEventTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 7, 19), )
if mibBuilder.loadTexts: xupsAlarmEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: xupsAlarmEventTable.setDescription('A table of the UPS internal event history queue.')
xupsAlarmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1), ).setIndexNames((0, "XUPS-MIB", "xupsAlarmEventID"))
if mibBuilder.loadTexts: xupsAlarmEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xupsAlarmEventEntry.setDescription('One of the entries in the UPS event history queue.')
xupsAlarmEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventID.setStatus('deprecated')
if mibBuilder.loadTexts: xupsAlarmEventID.setDescription('A unique number that reflects the order in which the event occurred. The oldest event in the queue will be number 1. Subsequent events will be numbered 2, 3, 4, etc.')
xupsAlarmEventDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventDateAndTime.setStatus('deprecated')
if mibBuilder.loadTexts: xupsAlarmEventDateAndTime.setDescription('The time and date that an event occurred as recorded in the UPS internal event queue. This string will reflect the time and date as set in the UPS itself and will not be referenced to sysUpTime. The format is MM/DD/YYYY:HH:MM:SS. Time is 24 hour standard.')
xupsAlarmEventKind = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("occurred", 1), ("cleared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventKind.setStatus('deprecated')
if mibBuilder.loadTexts: xupsAlarmEventKind.setDescription('Enumerated value that tells whether the event is an occurrence of an alarm condition or a clearing of an alarm condition.')
xupsAlarmEventDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventDescr.setStatus('deprecated')
if mibBuilder.loadTexts: xupsAlarmEventDescr.setDescription("A description of the event stored in the UPS event queue. This description will be a sixteen bit integer value representing one of the defined alarms in the Powerware Binary Computer Mode communication specification; for example, a value of 0 represents the 'Inverter AC Over Voltage' alarm (byte 1, bit 0 in the BCM Alarm Map).")
xupsAlarmEventMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventMsg.setStatus('mandatory')
if mibBuilder.loadTexts: xupsAlarmEventMsg.setDescription('A text string describing each entry in the Event Log. The format of this text message is free (not fixed) for the operator to read; good contents would be a time & date stamp, the event type, and a description of the event.')
xupsBreakerOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 20))
xupsAlarmEntryAdded = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 21))
xupsAlarmEntryRemoved = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 22))
xupsAlarmBatteryBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 23))
xupsOutputOffAsRequested = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 24))
xupsDiagnosticTestFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 25))
xupsCommunicationsLost = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 26))
xupsUpsShutdownPending = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 27))
xupsAlarmTestInProgress = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 28))
xupsAmbientTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 29))
xupsLossOfRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 30))
xupsAlarmTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 31))
xupsAlarmChargerFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 32))
xupsAlarmFanFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 33))
xupsAlarmFuseFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 34))
xupsPowerSwitchBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 35))
xupsModuleFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 36))
xupsOnAlternatePowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 37))
xupsAltPowerNotAvailable = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 38))
xupsNoticeCondition = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 39))
xupsRemoteTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 40))
xupsRemoteHumidityBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 41))
xupsTestBattery = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("startTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTestBattery.setStatus('mandatory')
if mibBuilder.loadTexts: xupsTestBattery.setDescription('Setting this variable to startTest initiates the battery test. All other set values are invalid.')
xupsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTestBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xupsTestBatteryStatus.setDescription('Reading this enumerated value gives an indication of the UPS Battery test status.')
xupsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xupsControlOutputOffDelay.setDescription('Setting this value to other than zero will cause the UPS output to turn off after the number of seconds. Setting it to 0 will cause an attempt to abort a pending shutdown.')
xupsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xupsControlOutputOnDelay.setDescription('Setting this value to other than zero will cause the UPS output to turn on after the number of seconds. Setting it to 0 will cause an attempt to abort a pending startup.')
xupsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOffTrapDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xupsControlOutputOffTrapDelay.setDescription('When xupsControlOutputOffDelay reaches this value, a trap will be sent.')
xupsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOnTrapDelay.setStatus('deprecated')
if mibBuilder.loadTexts: xupsControlOutputOnTrapDelay.setDescription('When xupsControlOutputOnDelay reaches this value, a xupsOutputOff trap will be sent.')
xupsControlToBypassDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlToBypassDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xupsControlToBypassDelay.setDescription('Setting this value to other than zero will cause the UPS output to go to Bypass after the number of seconds. If the Bypass is unavailable, this may cause the UPS to not supply power to the load. Setting it to 0 will cause an attempt to abort a pending shutdown.')
xupsLoadShedSecsWithRestart = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsLoadShedSecsWithRestart.setStatus('mandatory')
if mibBuilder.loadTexts: xupsLoadShedSecsWithRestart.setDescription("Setting this value will cause the UPS output to turn off after the set number of seconds, then restart (after a UPS-defined 'down time') when the utility is again available. Unlike xupsControlOutputOffDelay, which might or might not, this object always maps to the XCP 0x8A Load Dump & Restart command, so the desired shutdown and restart behavior is guaranteed to happen. Once set, this command cannot be aborted. This is the preferred Control object to use when performing an On Battery OS Shutdown.")
xupsConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: xupsConfigOutputVoltage.setDescription('The nominal UPS Output voltage per phase in volts.')
xupsConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: xupsConfigInputVoltage.setDescription('The nominal UPS Input voltage per phase in volts.')
xupsConfigOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: xupsConfigOutputWatts.setDescription('The nominal UPS available real power output in watts.')
xupsConfigOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: xupsConfigOutputFreq.setDescription('The nominal output frequency in tenths of Hz.')
xupsConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsConfigDateAndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xupsConfigDateAndTime.setDescription('Date and time information for the UPS. Setting this variable will initiate a set UPS date and time to this value. Reading this variable will return the UPS time and date. This value is not referenced to sysUpTime. It is simply the clock value from the UPS real time clock. Format is as follows: MM/DD/YYYY:HH:MM:SS.')
xupsConfigLowOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigLowOutputVoltageLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xupsConfigLowOutputVoltageLimit.setDescription('The Lower limit for acceptable Output Voltage, per the UPS specifications.')
xupsConfigHighOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigHighOutputVoltageLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xupsConfigHighOutputVoltageLimit.setDescription('The Upper limit for acceptable Output Voltage, per the UPS specifications.')
xupsMaxTrapLevel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("critical", 2), ("major", 3), ("allTraps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsMaxTrapLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xupsMaxTrapLevel.setDescription('The level of severity of traps which will be sent to the requesting host; individual trap receivers will have individual values for this variable. Values are: (1) none: no traps will be sent to this host; (2) critical: only traps for Critical alarm conditions will be sent to this host; (3) major: Critical and Major traps will be sent; (4) allTraps: all Traps will be sent to this host (Critical, Major, Minor, Informational).')
xupsSendTrapType = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stnd", 1), ("xups", 2), ("stndPlus", 3), ("xupsPlus", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsSendTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: xupsSendTrapType.setDescription('The type of traps which will be sent to the requesting host; individual trap receivers will have individual values for this variable. The additional variables in types (3) and (4) are useful for determining which UPS is the source on multi-port network adapters, and for getting additional descriptive information. Types (1) through (4) are all SNMP version 1 trap PDUs. Values are: (1) stnd: Traps as defined in the Standard UPS MIB (RFC1628) and Generic (MIB II) traps as defined in RFC 1215. (2) xups: xupsTrapDefined Traps as defined in the PowerMIB and Generic (MIB II) traps as defined in RFC 1215. (3) stndPlus: same as stnd plus variables from the interface group and, where appropriate, xupsTrapMessage. (4) xupsPlus: xupsTrapPortN Traps (same as xups plus variables from the interface group) and, for authFail, xupsTrapMessage.')
xupsTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79)))
if mibBuilder.loadTexts: xupsTrapMessage.setStatus('mandatory')
if mibBuilder.loadTexts: xupsTrapMessage.setDescription('A descriptive message which may be sent with traps to further explain the reason for the trap.')
xupsNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsNumReceptacles.setStatus('mandatory')
if mibBuilder.loadTexts: xupsNumReceptacles.setDescription('The number of independently controllable Receptacles, as described in the xupsRecepTable.')
xupsRecepTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 12, 2), )
if mibBuilder.loadTexts: xupsRecepTable.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepTable.setDescription('The Aggregate Object with number of entries equal to NumReceptacles and including the xupsRecep group.')
xupsRecepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1), ).setIndexNames((0, "XUPS-MIB", "xupsRecepIndex"))
if mibBuilder.loadTexts: xupsRecepEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepEntry.setDescription('The Recep table entry, etc.')
xupsRecepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepIndex.setDescription('The number of the Receptacle. Serves as index for Receptacle table.')
xupsRecepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("pendingOff", 3), ("pendingOn", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepStatus.setDescription('The Recep Status 1=On/Close, 2=Off/Open, 3=On w/Pending Off, 4=Off w/Pending ON, 5=Unknown.')
xupsRecepOffDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepOffDelaySecs.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepOffDelaySecs.setDescription('The Delay until the Receptacle is turned Off. Setting this value to other than -1 will cause the UPS output to turn off after the number of seconds (0 is immediately). Setting it to -1 will cause an attempt to abort a pending shutdown. When this object is set while the UPS is On Battery, it is not necessary to set xupsRecepOnDelaySecs, since the outlet will turn back on automatically when power is available again.')
xupsRecepOnDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepOnDelaySecs.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepOnDelaySecs.setDescription(' The Delay until the Receptacle is turned On. Setting this value to other than -1 will cause the UPS output to turn on after the number of seconds (0 is immediately). Setting it to -1 will cause an attempt to abort a pending restart.')
xupsRecepAutoOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepAutoOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepAutoOffDelay.setDescription('The delay after going On Battery until the Receptacle is automatically turned Off. A value of -1 means that this Output should never be turned Off automatically, but must be turned Off only by command. Values from 0 to 30 are valid, but probably innappropriate. The AutoOffDelay can be used to prioritize loads in the event of a prolonged power outage; less critical loads will turn off earlier to extend battery time for the more critical loads. If the utility power is restored before the AutoOff delay counts down to 0 on an outlet, that outlet will not turn Off.')
xupsRecepAutoOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepAutoOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepAutoOnDelay.setDescription('Seconds delay after the Outlet is signaled to turn On before the Output is Automatically turned ON. A value of -1 means that this Output should never be turned On automatically, but only when specifically commanded to do so. A value of 0 means that the Receptacle should come On immediately at power-up or for an On command.')
xupsRecepShedSecsWithRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepShedSecsWithRestart.setStatus('mandatory')
if mibBuilder.loadTexts: xupsRecepShedSecsWithRestart.setDescription("Setting this value will cause the UPS output to turn off after the set number of seconds, then restart (after a UPS-defined 'down time') when the utility is again available. Unlike xupsRecepOffDelaySecs, which might or might not, this object always maps to the XCP 0x8A Load Dump & Restart command, so the desired shutdown and restart behavior is guaranteed to happen. Once set, this command cannot be aborted.")
xupsTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopologyType.setStatus('mandatory')
if mibBuilder.loadTexts: xupsTopologyType.setDescription("Value which denotes the type of UPS by its power topology. Values are the same as those described in the XCP Topology block's Overall Topology field.")
xupsTopoMachineCode = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopoMachineCode.setStatus('mandatory')
if mibBuilder.loadTexts: xupsTopoMachineCode.setDescription("ID Value which denotes the Powerware model of the UPS for software. Values are the same as those described in the XCP Configuration block's Machine Code field.")
xupsTopoUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopoUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xupsTopoUnitNumber.setDescription("Identifies which unit and what type of data is being reported. A value of 0 means that this MIB information comes from the top-level system view (eg, manifold module or system bypass cabinet reporting total system output). Standalone units also use a value of 0, since they are the 'full system' view. A value of 1 or higher indicates the number of the module in the system which is reporting only its own data in the PowerMIB objects.")
xupsTopoPowerStrategy = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highAlert", 1), ("standard", 2), ("enableHighEfficiency", 3), ("immediateHighEfficiency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTopoPowerStrategy.setStatus('mandatory')
if mibBuilder.loadTexts: xupsTopoPowerStrategy.setDescription('Value which denotes which Power Strategy is currently set for the UPS. The values are: highAlert(1) - The UPS shall optimize its operating state to maximize its power-protection levels. This mode will be held for at most 24 hours. standard(2) - Balanced, normal power protection strategy. UPS will not enter HE operating mode from this setting. enableHighEfficiency(3) - The UPS is enabled to enter HE operating mode to optimize its operating state to maximize its efficiency, when conditions change to permit it (as determined by the UPS). forceHighEfficiency(4) - If this value is permitted to be Set for this UPS, and if conditions permit, requires the UPS to enter High Efficiency mode now, without delay (for as long as utility conditions permit). After successfully set to forceHighEfficiency(4), xupsTopoPowerStrategy changes to value enableHighEfficiency(3). xupsOutputSource will indicate if the UPS status is actually operating in High Efficiency mode.')
xupsNull = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 0))
xupsTrapBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 0, 0))
xupsTrapSource = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4))
xupsTrapDefined = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1))
xupsTrapPortN = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2))
xupstbControlOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,1))
if mibBuilder.loadTexts: xupstbControlOff.setDescription('The UPS output power will turn off in a number of seconds equal to upsControlOutputOffTrapDelay.')
xupstbControlOn = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,2))
if mibBuilder.loadTexts: xupstbControlOn.setDescription('The UPS output power will turn on in a number of seconds equal to upsControlOutputOnTrapDelay.')
xupstbOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,3))
if mibBuilder.loadTexts: xupstbOnBattery.setDescription('The UPS has no AC input power and is running on battery.')
xupstbLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,4))
if mibBuilder.loadTexts: xupstbLowBattery.setDescription('The UPS batteries are low. Tied to low battery alarm condition.')
xupstbUtilityPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,5))
if mibBuilder.loadTexts: xupstbUtilityPowerRestored.setDescription('Input power has been restored after running on battery.')
xupstbReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,6))
if mibBuilder.loadTexts: xupstbReturnFromLowBattery.setDescription('The battery has recovered from a low battery condition.')
xupstbOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,7))
if mibBuilder.loadTexts: xupstbOutputOverload.setDescription('The ups has sensed an overload of greater than 106 percent. Tied to the 106% overload alarm.')
xupstbInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,8))
if mibBuilder.loadTexts: xupstbInternalFailure.setDescription('Some component of the ups - rectifier, inverter, control panel has failed. Tied to alarms indicating failure.')
xupstbBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,9))
if mibBuilder.loadTexts: xupstbBatteryDischarged.setDescription('The Battery Totally Discharged Alarm has occurred.')
xupstbInverterFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,10))
if mibBuilder.loadTexts: xupstbInverterFailure.setDescription('The ups inverter is unavailable due to an internal failure.')
xupstbOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,11))
if mibBuilder.loadTexts: xupstbOnBypass.setDescription('The ups has gone on bypass for some reason.')
xupstbBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,12))
if mibBuilder.loadTexts: xupstbBypassNotAvailable.setDescription('The ups bypass is unavailable')
xupstbOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,13))
if mibBuilder.loadTexts: xupstbOutputOff.setDescription('The ups output is switched off.')
xupstbInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,14))
if mibBuilder.loadTexts: xupstbInputFailure.setDescription('The ups input power is incorrect in voltage, frequency, or phase rotation.')
xupstbBuildingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,15))
if mibBuilder.loadTexts: xupstbBuildingAlarm.setDescription('One of the defined building alarms has occurred.')
xupstbShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,16))
if mibBuilder.loadTexts: xupstbShutdownImminent.setDescription('The ups shutdown imminent alarm has occurred.')
xupstbOnInverter = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,17))
if mibBuilder.loadTexts: xupstbOnInverter.setDescription('The ups is returned to utility power running the inverter after either a transfer to bypass or a run on battery.')
xupstbBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,20))
if mibBuilder.loadTexts: xupstbBreakerOpen.setDescription('One of the UPS breakers or contactors has been opened.')
xupstbAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,21))
if mibBuilder.loadTexts: xupstbAlarmEntryAdded.setDescription('An alarm not defined in the xups Well Known Alarms (eg, an alarm defined in RFC1628) has been added to the Alarm Table.')
xupstbAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,22))
if mibBuilder.loadTexts: xupstbAlarmEntryRemoved.setDescription('An alarm not defined in the xups Well Known Alarms has been removed from the Alarm Table.')
xupstdControlOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,1)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdControlOff.setDescription('The UPS output power will turn off in a number of seconds equal to upsControlOutputOffTrapDelay.')
xupstdControlOn = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,2)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdControlOn.setDescription('The UPS output power will turn on in a number of seconds equal to upsControlOutputOnTrapDelay.')
xupstdOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,3)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnBattery.setDescription('The UPS has no AC input power and is running on battery.')
xupstdLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,4)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdLowBattery.setDescription('The UPS batteries are low. Tied to low battery alarm condition.')
xupstdUtilityPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,5)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdUtilityPowerRestored.setDescription('Input power has been restored after running on battery.')
xupstdReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,6)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdReturnFromLowBattery.setDescription('The battery has recovered from a low battery condition.')
xupstdOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,7)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOverload.setDescription('The ups has sensed an overload of greater than 106 percent. Tied to the 106% overload alarm.')
xupstdInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,8)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInternalFailure.setDescription('Some component of the ups - rectifier, inverter, control panel has failed. Tied to alarms indi- cating failure.')
xupstdBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,9)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBatteryDischarged.setDescription('The Battery Totally Discharged Alarm has occurred.')
xupstdInverterFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,10)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInverterFailure.setDescription('The ups inverter is unavailable due to an internal failure.')
xupstdOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,11)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnBypass.setDescription('The ups has gone on bypass for some reason.')
xupstdBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,12)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBypassNotAvailable.setDescription('The ups bypass is unavailable')
xupstdOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,13)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOff.setDescription('The ups output is switched off.')
xupstdInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,14)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdInputFailure.setDescription('The ups input power is incorrect in voltage, frequency, or phase rotation.')
xupstdBuildingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,15)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBuildingAlarm.setDescription('One of the defined building alarms has occurred.')
xupstdShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,16)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdShutdownImminent.setDescription('The ups shutdown imminent alarm has occurred.')
xupstdOnInverter = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,17)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOnInverter.setDescription('The ups is returned to utility power running the inverter after either a transfer to bypass or a run on battery.')
xupstdBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,20)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdBreakerOpen.setDescription('One of the UPS breakers or contactors has been opened.')
xupstdAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,21)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmEntryAdded.setDescription('An alarm not defined in the xups Well Known Alarms (eg, an alarm defined in RFC1628) has been added to the Alarm Table.')
xupstdAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,22)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmEntryRemoved.setDescription('An alarm not defined in the xups Well Known Alarms has been removed from the Alarm Table.')
xupstdAlarmBatteryBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,23)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmBatteryBad.setDescription('One or more batteries have been determined to require replacement.')
xupstdOutputOffAsRequested = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,24)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdOutputOffAsRequested.setDescription('The UPS has shutdown as requested, i.e., the output is off.')
xupstdDiagnosticTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,25)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdDiagnosticTestFailed.setDescription('The result of the last diagnostic test indicates a failure.')
xupstdCommunicationsLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,26)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdCommunicationsLost.setDescription('A problem has been encountered in the communications between the agent and the UPS.')
xupstdUpsShutdownPending = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,27)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdUpsShutdownPending.setDescription('An xupsControlOutputOffDelay countdown is underway.')
xupstdAlarmTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,28)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmTestInProgress.setDescription('A test is in progress, as initiated and indicated by the Battery Test Group.')
xupstdAmbientTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,29)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsEnvAmbientTemp"), ("XUPS-MIB", "xupsEnvAmbientLowerLimit"), ("XUPS-MIB", "xupsEnvAmbientUpperLimit"))
if mibBuilder.loadTexts: xupstdAmbientTempBad.setDescription('The ambient temperature, xupsEnvAmbientTemp, has fallen below the set lower limit, xupsEnvAmbientLowerLimit, or has risen above the set upper limit, xupsEnvAmbientUpperLimit.')
xupstdContactActiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,30)).setObjects(("XUPS-MIB", "xupsContactIndex"), ("XUPS-MIB", "xupsContactType"), ("XUPS-MIB", "xupsContactState"), ("XUPS-MIB", "xupsContactDescr"))
if mibBuilder.loadTexts: xupstdContactActiveNotice.setDescription('The Contact indicated by xupsContactIndex is in its Active state. The following are the situations that generate this trap: For xupsContactType: and xupsContactState: normallyOpen(1) and closedWithNotice(4) normallyClosed(2) and openWithNotice(3) anyChange(3) and openWithNotice(3) or closedWithNotice(4)')
xupstdContactInactiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,31)).setObjects(("XUPS-MIB", "xupsContactIndex"), ("XUPS-MIB", "xupsContactType"), ("XUPS-MIB", "xupsContactState"), ("XUPS-MIB", "xupsContactDescr"))
if mibBuilder.loadTexts: xupstdContactInactiveNotice.setDescription('The Contact indicated by xupsContactIndex has changed to its Inactive state.')
xupstdLossOfRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,32)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdLossOfRedundancy.setDescription('A parallel UPS system is no longer operating in N+1 redundant mode; this may be due to module failure or removal, or due to overloading.')
xupstdAlarmTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,33)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmTempBad.setDescription('An internal temperature is out of tolerance.')
xupstdAlarmChargerFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,34)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmChargerFailed.setDescription('An uncorrected problem has been detected within the UPS charger subsystem.')
xupstdAlarmFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,35)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmFanFailure.setDescription('The failure of one or more fans in the UPS has been detected.')
xupstdAlarmFuseFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,36)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAlarmFuseFailure.setDescription('The failure of one or more fuses has been detected.')
xupstdPowerSwitchBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,37)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdPowerSwitchBad.setDescription('A Relay, Contactor, or Breaker has failed.')
xupstdModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,38)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdModuleFailure.setDescription('One module in a parallel or composite system has failed.')
xupstdOnAlternatePowerSource = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,39)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsInputSource"))
if mibBuilder.loadTexts: xupstdOnAlternatePowerSource.setDescription('The system is being powered by its Alternate Power Source, such as a Secondary utility feed (on a dual AC input UPS), generator, flywheel, or fuelcell.')
xupstdAltPowerNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,40)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdAltPowerNotAvailable.setDescription('On systems with a separate alternate power source (eg, dual AC inputs), that alternate power source is currently not available. This could be a problem if the primary power source (eg, utility) fails for a period of time longer than that for which the internal batteries can supply power.')
xupstdNoticeCondition = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,41)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
if mibBuilder.loadTexts: xupstdNoticeCondition.setDescription('Some Notice condition exists which is not covered by the other traps. This is like an xupstdInternalFailure, but at a lower severity level.')
xupstdRemoteTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,42)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsEnvRemoteTemp"), ("XUPS-MIB", "xupsEnvRemoteTempLowerLimit"), ("XUPS-MIB", "xupsEnvRemoteTempUpperLimit"))
if mibBuilder.loadTexts: xupstdRemoteTempBad.setDescription('The remote temperature, xupsEnvRemoteTemp, has fallen below the set lower limit, xupsEnvRemoteTempLowerLimit, or has risen above the set upper limit, xupsEnvRemoteTempUpperLimit.')
xupstdRemoteHumidityBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,43)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsEnvRemoteHumidity"), ("XUPS-MIB", "xupsEnvRemoteHumidityLowerLimit"), ("XUPS-MIB", "xupsEnvRemoteHumidityUpperLimit"))
if mibBuilder.loadTexts: xupstdRemoteHumidityBad.setDescription('The remote temperature, xupsEnvRemoteHumidity, has fallen below the set lower limit, xupsEnvRemoteHumidityLowerLimit, or has risen above the set upper limit, xupsEnvRemoteHumidityUpperLimit.')
xupstpControlOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,1)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpControlOff.setDescription('The UPS output power will turn off in a number of seconds equal to upsControlOutputOffTrapDelay.')
xupstpControlOn = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,2)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpControlOn.setDescription('The UPS output power will turn on in a number of seconds equal to upsControlOutputOnTrapDelay.')
xupstpOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,3)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpOnBattery.setDescription('The UPS has no AC input power and is running on battery.')
xupstpLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,4)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpLowBattery.setDescription('The UPS batteries are low. Tied to low battery alarm condition.')
xupstpUtilityPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,5)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpUtilityPowerRestored.setDescription('Input power has been restored after running on battery.')
xupstpReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,6)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpReturnFromLowBattery.setDescription('The battery has recovered from a low battery condition.')
xupstpOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,7)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpOutputOverload.setDescription('The ups has sensed an overload of greater than 106 percent. Tied to the 106% overload alarm.')
xupstpInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,8)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpInternalFailure.setDescription('Some component of the ups - rectifier, inverter, control panel has failed. Tied to alarms indi- cating failure.')
xupstpBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,9)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpBatteryDischarged.setDescription('The Battery Totally Discharged Alarm has occurred.')
xupstpInverterFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,10)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpInverterFailure.setDescription('The ups inverter is unavailable due to an internal failure.')
xupstpOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,11)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpOnBypass.setDescription('The ups has gone on bypass for some reason.')
xupstpBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,12)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpBypassNotAvailable.setDescription('The ups bypass is unavailable')
xupstpOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,13)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpOutputOff.setDescription('The ups output is switched off.')
xupstpInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,14)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpInputFailure.setDescription('The ups input power is incorrect in voltage, frequency, or phase rotation.')
xupstpBuildingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,15)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpBuildingAlarm.setDescription('One of the defined building alarms has occurred.')
xupstpShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,16)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpShutdownImminent.setDescription('The ups shutdown imminent alarm has occurred.')
xupstpOnInverter = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,17)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpOnInverter.setDescription('The ups is returned to utility power running the inverter after either a transfer to bypass or a run on battery.')
xupstpBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,20)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpBreakerOpen.setDescription('One of the UPS breakers or contactors has been opened.')
xupstpAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,21)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAlarmEntryAdded.setDescription('An alarm not defined in the xups Well Known Alarms (eg, an alarm defined in RFC1628) has been added to the Alarm Table.')
xupstpAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,22)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAlarmEntryRemoved.setDescription('An alarm not defined in the xups Well Known Alarms has been removed from the Alarm Table.')
xupstpAlarmBatteryBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,23)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAlarmBatteryBad.setDescription('One or more batteries have been determined to require replacement.')
xupstpOutputOffAsRequested = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,24)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpOutputOffAsRequested.setDescription('The UPS has shutdown as requested, i.e., the output is off.')
xupstpDiagnosticTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,25)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpDiagnosticTestFailed.setDescription('The result of the last diagnostic test indicates a failure.')
xupstpCommunicationsLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,26)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpCommunicationsLost.setDescription('A problem has been encountered in the communications between the agent and the UPS.')
xupstpUpsShutdownPending = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,27)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpUpsShutdownPending.setDescription('An xupsControlOutputOffDelay countdown is underway.')
xupstpAlarmTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,28)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAlarmTestInProgress.setDescription('A test is in progress, as initiated and indicated by the Battery Test Group.')
xupstpAmbientTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,29)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("XUPS-MIB", "xupsEnvAmbientTemp"), ("XUPS-MIB", "xupsEnvAmbientLowerLimit"), ("XUPS-MIB", "xupsEnvAmbientUpperLimit"))
if mibBuilder.loadTexts: xupstpAmbientTempBad.setDescription('The ambient temperature, xupsEnvAmbientTemp, has fallen below the set lower limit, xupsEnvAmbientLowerLimit, or has risen above the set upper limit, xupsEnvAmbientUpperLimit.')
xupstpLossOfRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,32)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpLossOfRedundancy.setDescription('A parallel UPS system is no longer operating in N+1 redundant mode; this may be due to module failure or removal, or due to overloading.')
xupstpAlarmTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,33)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAlarmTempBad.setDescription('An internal temperature is out of tolerance.')
xupstpAlarmChargerFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,34)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAlarmChargerFailed.setDescription('An uncorrected problem has been detected within the UPS charger subsystem.')
xupstpAlarmFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,35)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAlarmFanFailure.setDescription('The failure of one or more fans in the UPS has been detected.')
xupstpAlarmFuseFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,36)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAlarmFuseFailure.setDescription('The failure of one or more fuses has been detected.')
xupstpPowerSwitchBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,37)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpPowerSwitchBad.setDescription('A Relay, Contactor, or Breaker has failed.')
xupstpModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,38)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpModuleFailure.setDescription('One module in a parallel or composite system has failed.')
xupstpOnAlternatePowerSource = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,39)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsInputSource"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpOnAlternatePowerSource.setDescription('The system is being powered by its Alternate Power Source, such as a Secondary utility feed (on a dual AC input UPS), generator, flywheel, or fuelcell.')
xupstpAltPowerNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,40)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpAltPowerNotAvailable.setDescription('On systems with a separate alternate power source (eg, dual AC inputs), that alternate power source is currently not available. This could be a problem if the primary power source (eg, utility) fails for a period of time longer than that for which the internal batteries can supply power.')
xupstpNoticeCondition = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,41)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: xupstpNoticeCondition.setDescription('Some Notice condition exists which is not covered by the other traps. This is like an xupstpInternalFailure, but at a lower severity level.')
xupstpRemoteTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,42)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("XUPS-MIB", "xupsEnvRemoteTemp"), ("XUPS-MIB", "xupsEnvRemoteTempLowerLimit"), ("XUPS-MIB", "xupsEnvRemoteTempUpperLimit"))
if mibBuilder.loadTexts: xupstpRemoteTempBad.setDescription('The remote temperature, xupsEnvRemoteTemp, has fallen below the set lower limit, xupsEnvRemoteTempLowerLimit, or has risen above the set upper limit, xupsEnvRemoteTempUpperLimit.')
xupstpRemoteHumidityBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,43)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("XUPS-MIB", "xupsEnvRemoteHumidity"), ("XUPS-MIB", "xupsEnvRemoteHumidityLowerLimit"), ("XUPS-MIB", "xupsEnvRemoteHumidityUpperLimit"))
if mibBuilder.loadTexts: xupstpRemoteHumidityBad.setDescription('The remote temperature, xupsEnvRemoteHumidity, has fallen below the set lower limit, xupsEnvRemoteHumidityLowerLimit, or has risen above the set upper limit, xupsEnvRemoteHumidityUpperLimit.')
mibBuilder.exportSymbols("XUPS-MIB", xupsAlarmEventEntry=xupsAlarmEventEntry, xupsNoticeCondition=xupsNoticeCondition, xupsIdentModel=xupsIdentModel, xupstpOnBattery=xupstpOnBattery, xupstpUpsShutdownPending=xupstpUpsShutdownPending, xupsDiagnosticTestFailed=xupsDiagnosticTestFailed, xupsLoadShedSecsWithRestart=xupsLoadShedSecsWithRestart, xupsControlOutputOffTrapDelay=xupsControlOutputOffTrapDelay, xupstpOutputOffAsRequested=xupstpOutputOffAsRequested, xupsConfigHighOutputVoltageLimit=xupsConfigHighOutputVoltageLimit, xupsEnvRemoteHumidityUpperLimit=xupsEnvRemoteHumidityUpperLimit, xupsAlarmFuseFailure=xupsAlarmFuseFailure, xupsOutputOverload=xupsOutputOverload, xupsRemoteTempBad=xupsRemoteTempBad, xupsIdentManufacturer=xupsIdentManufacturer, xupstpInternalFailure=xupstpInternalFailure, xupstpModuleFailure=xupstpModuleFailure, xupstdOutputOff=xupstdOutputOff, xupsTopologyType=xupsTopologyType, xupstdRemoteTempBad=xupstdRemoteTempBad, xupsConfig=xupsConfig, xupstdRemoteHumidityBad=xupstdRemoteHumidityBad, powerwareEthernetSnmpAdapter=powerwareEthernetSnmpAdapter, xupsTest=xupsTest, xupsAlarmEventTable=xupsAlarmEventTable, xupsIdent=xupsIdent, xupsBypassEntry=xupsBypassEntry, xupsControlOutputOnTrapDelay=xupsControlOutputOnTrapDelay, xupstbOnBattery=xupstbOnBattery, xupstdShutdownImminent=xupstdShutdownImminent, xupstpOutputOverload=xupstpOutputOverload, xupsAlarmTempBad=xupsAlarmTempBad, xupsControlOutputOnDelay=xupsControlOutputOnDelay, xupstdBuildingAlarm=xupstdBuildingAlarm, xupsLossOfRedundancy=xupsLossOfRedundancy, xupsContactSenseTable=xupsContactSenseTable, xupstdAlarmBatteryBad=xupstdAlarmBatteryBad, xupsBypass=xupsBypass, xupstpBuildingAlarm=xupstpBuildingAlarm, xupsConfigOutputFreq=xupsConfigOutputFreq, xupsInput=xupsInput, xupsConfigInputVoltage=xupsConfigInputVoltage, xupsRecepIndex=xupsRecepIndex, xupstpAlarmFanFailure=xupstpAlarmFanFailure, xupstbUtilityPowerRestored=xupstbUtilityPowerRestored, xupsConfigLowOutputVoltageLimit=xupsConfigLowOutputVoltageLimit, xupsObjectId=xupsObjectId, xupsOnBypass=xupsOnBypass, xupsBuildingAlarm=xupsBuildingAlarm, xupstbOutputOverload=xupstbOutputOverload, xupstdAlarmChargerFailed=xupstdAlarmChargerFailed, xupstpLossOfRedundancy=xupstpLossOfRedundancy, xupstpControlOn=xupstpControlOn, xupstbReturnFromLowBattery=xupstbReturnFromLowBattery, xupsAlarmEventDescr=xupsAlarmEventDescr, xupsEnvRemoteTempLowerLimit=xupsEnvRemoteTempLowerLimit, xupstdOnBattery=xupstdOnBattery, xupsContactIndex=xupsContactIndex, xupstdAlarmFanFailure=xupstdAlarmFanFailure, xupsAlarmEntryRemoved=xupsAlarmEntryRemoved, xupsEnvAmbientHumidity=xupsEnvAmbientHumidity, xupstdPowerSwitchBad=xupstdPowerSwitchBad, xupstdLossOfRedundancy=xupstdLossOfRedundancy, xupsInputWatts=xupsInputWatts, xupsRecep=xupsRecep, xupsOutputCurrent=xupsOutputCurrent, xupstbOnInverter=xupstbOnInverter, xupsTrapControl=xupsTrapControl, xupsContactsTableEntry=xupsContactsTableEntry, xupstbBreakerOpen=xupstbBreakerOpen, xupstdInverterFailure=xupstdInverterFailure, xupsBatVoltage=xupsBatVoltage, xupstdCommunicationsLost=xupstdCommunicationsLost, xupstdBreakerOpen=xupstdBreakerOpen, xupstbControlOn=xupstbControlOn, xupsAlarmFanFailure=xupsAlarmFanFailure, xupsAltPowerNotAvailable=xupsAltPowerNotAvailable, xupstpBypassNotAvailable=xupstpBypassNotAvailable, xupstpRemoteTempBad=xupstpRemoteTempBad, xupsOutputPhase=xupsOutputPhase, xupsConfigDateAndTime=xupsConfigDateAndTime, xupsInputTable=xupsInputTable, xupsOutputOff=xupsOutputOff, xups=xups, powerware=powerware, xupsInternalFailure=xupsInternalFailure, xupsAlarmEventKind=xupsAlarmEventKind, xupsOutputEntry=xupsOutputEntry, xupsEnvironment=xupsEnvironment, xupstbInternalFailure=xupstbInternalFailure, xupstdOnInverter=xupstdOnInverter, xupsOnAlternatePowerSource=xupsOnAlternatePowerSource, xupstpShutdownImminent=xupstpShutdownImminent, xupsBatCurrent=xupsBatCurrent, xupstpCommunicationsLost=xupstpCommunicationsLost, xupsBypassTable=xupsBypassTable, xupstpAlarmChargerFailed=xupstpAlarmChargerFailed, xupstdControlOn=xupstdControlOn, xupstpAlarmTestInProgress=xupstpAlarmTestInProgress, xupsRecepEntry=xupsRecepEntry, xupsInputEntry=xupsInputEntry, xupsRecepAutoOffDelay=xupsRecepAutoOffDelay, xupstbBypassNotAvailable=xupstbBypassNotAvailable, xupsInputFrequency=xupsInputFrequency, xupstpRemoteHumidityBad=xupstpRemoteHumidityBad, xupsOnBattery=xupsOnBattery, xupsAlarmEntryAdded=xupsAlarmEntryAdded, xupsConfigOutputVoltage=xupsConfigOutputVoltage, xupsRecepStatus=xupsRecepStatus, xupsModuleFailure=xupsModuleFailure, xupsEnvNumContacts=xupsEnvNumContacts, xupstdOnBypass=xupstdOnBypass, xupsLowBattery=xupsLowBattery, xupsTopology=xupsTopology, xupsIdentOemCode=xupsIdentOemCode, connectUPSAdapterTokenRing=connectUPSAdapterTokenRing, xupsReturnFromLowBattery=xupsReturnFromLowBattery, xupsAlarmTestInProgress=xupsAlarmTestInProgress, xupsControl=xupsControl, xupsPowerSwitchBad=xupsPowerSwitchBad, xupstbOutputOff=xupstbOutputOff, xupstbInverterFailure=xupstbInverterFailure, xupstdControlOff=xupstdControlOff, xupstpReturnFromLowBattery=xupstpReturnFromLowBattery, xupsTopoMachineCode=xupsTopoMachineCode, xupsEnvRemoteHumidity=xupsEnvRemoteHumidity, xupsAmbientTempBad=xupsAmbientTempBad, xupstdModuleFailure=xupstdModuleFailure, xupsBypassPhase=xupsBypassPhase, xupsTrapPortN=xupsTrapPortN, xupsEnvAmbientTemp=xupsEnvAmbientTemp, xupstpAlarmFuseFailure=xupstpAlarmFuseFailure, xupsBypassFrequency=xupsBypassFrequency, xupsOutputLoad=xupsOutputLoad, xupsOnInverter=xupsOnInverter, xupstpAltPowerNotAvailable=xupstpAltPowerNotAvailable, xupsCommunicationsLost=xupsCommunicationsLost, xupsAlarm=xupsAlarm, xupstdDiagnosticTestFailed=xupstdDiagnosticTestFailed, xupstpBatteryDischarged=xupstpBatteryDischarged, xupstbControlOff=xupstbControlOff, xupstbLowBattery=xupstbLowBattery, xupstdContactActiveNotice=xupstdContactActiveNotice, xupsBatCapacity=xupsBatCapacity, xupstdOnAlternatePowerSource=xupstdOnAlternatePowerSource, xupstdBatteryDischarged=xupstdBatteryDischarged, xupsInverterFailure=xupsInverterFailure, xupstbShutdownImminent=xupstbShutdownImminent, xupsContactType=xupsContactType, xupsEnvRemoteHumidityLowerLimit=xupsEnvRemoteHumidityLowerLimit, xupsTrapSource=xupsTrapSource, xupsUpsShutdownPending=xupsUpsShutdownPending, xupsBatTimeRemaining=xupsBatTimeRemaining, xupsOutputVoltage=xupsOutputVoltage, xupsRecepOnDelaySecs=xupsRecepOnDelaySecs, xupsBatteryDischarged=xupsBatteryDischarged, xupsUtilityPowerRestored=xupsUtilityPowerRestored, simpleSnmpAdapter=simpleSnmpAdapter, xupsAlarmBatteryBad=xupsAlarmBatteryBad, xupsRecepAutoOnDelay=xupsRecepAutoOnDelay, xupstdReturnFromLowBattery=xupstdReturnFromLowBattery, xupstdAlarmEntryRemoved=xupstdAlarmEntryRemoved, xupstdContactInactiveNotice=xupstdContactInactiveNotice, xupstpInverterFailure=xupstpInverterFailure, xupsControlOutputOffDelay=xupsControlOutputOffDelay, xupsOutputSource=xupsOutputSource, xupsTrapMessage=xupsTrapMessage, xupstbBuildingAlarm=xupstbBuildingAlarm, xupsInputNumPhases=xupsInputNumPhases, xupsOutput=xupsOutput, xupsTestBattery=xupsTestBattery, xupstpOnAlternatePowerSource=xupstpOnAlternatePowerSource, xupsShutdownImminent=xupsShutdownImminent, xupstdOutputOverload=xupstdOutputOverload, xupstpLowBattery=xupstpLowBattery, xupstdAlarmTempBad=xupstdAlarmTempBad, powerwareNetworkDigitalIOEther=powerwareNetworkDigitalIOEther, xupsTrapBasic=xupsTrapBasic, xupsOutputWatts=xupsOutputWatts, xupsAlarms=xupsAlarms, xupsAlarmTime=xupsAlarmTime, xupstbAlarmEntryRemoved=xupstbAlarmEntryRemoved, xupstpDiagnosticTestFailed=xupstpDiagnosticTestFailed, xupsControlToBypassDelay=xupsControlToBypassDelay, xupsTrapDefined=xupsTrapDefined, xupsAlarmNumEvents=xupsAlarmNumEvents, xupstdOutputOffAsRequested=xupstdOutputOffAsRequested, xupsAlarmTable=xupsAlarmTable, xupsRecepTable=xupsRecepTable, xupstbAlarmEntryAdded=xupstbAlarmEntryAdded, xupsInputVoltage=xupsInputVoltage, xupstpAmbientTempBad=xupstpAmbientTempBad, xupsRecepShedSecsWithRestart=xupsRecepShedSecsWithRestart, xupsInputFailure=xupsInputFailure, onlinetDaemon=onlinetDaemon, xupsBreakerOpen=xupsBreakerOpen, xupsInputCurrent=xupsInputCurrent, xupsRecepOffDelaySecs=xupsRecepOffDelaySecs, xupstpPowerSwitchBad=xupstpPowerSwitchBad, xupsMaxTrapLevel=xupsMaxTrapLevel, xupstpOutputOff=xupstpOutputOff, xupstdAltPowerNotAvailable=xupstdAltPowerNotAvailable, xupsContactDescr=xupsContactDescr, xupstpAlarmBatteryBad=xupstpAlarmBatteryBad, xupsTopoPowerStrategy=xupsTopoPowerStrategy, xupsInputPhase=xupsInputPhase, xupsBypassNumPhases=xupsBypassNumPhases, xupsOutputOffAsRequested=xupsOutputOffAsRequested, xupstdUpsShutdownPending=xupstdUpsShutdownPending, xupsAlarmEventDateAndTime=xupsAlarmEventDateAndTime, xupsTopoUnitNumber=xupsTopoUnitNumber, xupsEnvRemoteTempUpperLimit=xupsEnvRemoteTempUpperLimit, xupsBatteryAbmStatus=xupsBatteryAbmStatus, xupsOutputNumPhases=xupsOutputNumPhases, xupsEnvRemoteTemp=xupsEnvRemoteTemp, xupsAlarmEventMsg=xupsAlarmEventMsg, xupsInputSource=xupsInputSource, xupstdAmbientTempBad=xupstdAmbientTempBad, xupstdInputFailure=xupstdInputFailure, xupstbBatteryDischarged=xupstbBatteryDischarged, powerwareNetworkSnmpAdapterToken=powerwareNetworkSnmpAdapterToken, xupstpUtilityPowerRestored=xupstpUtilityPowerRestored, xupstdLowBattery=xupstdLowBattery, xupsAlarmDescr=xupsAlarmDescr, xupstdUtilityPowerRestored=xupstdUtilityPowerRestored, xupstpAlarmEntryAdded=xupstpAlarmEntryAdded, xupsInputLineBads=xupsInputLineBads, xupsRemoteHumidityBad=xupsRemoteHumidityBad, xupsAlarmEntry=xupsAlarmEntry, xupsTestBatteryStatus=xupsTestBatteryStatus, xupsBattery=xupsBattery, connectUPSAdapterEthernet=connectUPSAdapterEthernet, xupstpBreakerOpen=xupstpBreakerOpen, xupsEnvAmbientLowerLimit=xupsEnvAmbientLowerLimit, xupsBypassVoltage=xupsBypassVoltage, xupsContactState=xupsContactState, xupstpNoticeCondition=xupstpNoticeCondition, xupsIdentSoftwareVersion=xupsIdentSoftwareVersion, xupsSendTrapType=xupsSendTrapType, xupsNumReceptacles=xupsNumReceptacles, xupsConfigOutputWatts=xupsConfigOutputWatts, xupstbOnBypass=xupstbOnBypass, xupstpControlOff=xupstpControlOff, xupsAlarmEventID=xupsAlarmEventID, xupstpOnBypass=xupstpOnBypass, xupstdInternalFailure=xupstdInternalFailure, xupstpInputFailure=xupstpInputFailure, xupsNull=xupsNull, xupstpOnInverter=xupstpOnInverter, xupstpAlarmEntryRemoved=xupstpAlarmEntryRemoved, xupstdAlarmTestInProgress=xupstdAlarmTestInProgress, xupstdAlarmFuseFailure=xupstdAlarmFuseFailure, xupsOutputTable=xupsOutputTable, xupstpAlarmTempBad=xupstpAlarmTempBad)
mibBuilder.exportSymbols("XUPS-MIB", xupstdNoticeCondition=xupstdNoticeCondition, xupsAlarmChargerFailed=xupsAlarmChargerFailed, xupsOutputFrequency=xupsOutputFrequency, powerwareNetworkSnmpAdapterEther=powerwareNetworkSnmpAdapterEther, xupsAlarmID=xupsAlarmID, xupsEnvAmbientUpperLimit=xupsEnvAmbientUpperLimit, xupstbInputFailure=xupstbInputFailure, xupsBypassNotAvailable=xupsBypassNotAvailable, xupstdAlarmEntryAdded=xupstdAlarmEntryAdded, xupstdBypassNotAvailable=xupstdBypassNotAvailable)
