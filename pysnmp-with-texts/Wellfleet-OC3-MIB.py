#
# PySNMP MIB module Wellfleet-OC3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-OC3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, TimeTicks, Bits, IpAddress, MibIdentifier, iso, Counter64, ModuleIdentity, Counter32, Unsigned32, Gauge32, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "Bits", "IpAddress", "MibIdentifier", "iso", "Counter64", "ModuleIdentity", "Counter32", "Unsigned32", "Gauge32", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfSonetGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSonetGroup")
wfOc3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12), )
if mibBuilder.loadTexts: wfOc3ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigTable.setDescription('Statistics for the SONET medium table')
wfOc3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1), ).setIndexNames((0, "Wellfleet-OC3-MIB", "wfOc3ConfigIndex"))
if mibBuilder.loadTexts: wfOc3ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigEntry.setDescription('An entry in the medium table')
wfOc3ConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc3ConfigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigDelete.setDescription('Create/Delete parameter')
wfOc3ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc3ConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigIndex.setDescription('Index for this physical Sonet interface.')
wfOc3ConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc3ConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigType.setDescription('This variable identifies whether a SONET or a SDH signal is used across this interface.')
wfOc3ConfigTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc3ConfigTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurement period.')
wfOc3ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc3ConfigValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigValidIntervals.setDescription('The number of previous intervals for which valid data has been stored.')
wfOc3ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b3zs", 2), ("cmi", 3), ("nrz", 4), ("rz", 5))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc3ConfigLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigLineCoding.setDescription('This variable describes the line coding for this interface.')
wfOc3ConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("shortsinglemode", 2), ("longsinglemode", 3), ("multimode", 4), ("coax", 5), ("utp", 6))).clone('shortsinglemode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOc3ConfigLineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigLineType.setDescription('This variable describes the line type for this interface.')
wfOc3ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOc3ConfigCircuitIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: wfOc3ConfigCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier.")
mibBuilder.exportSymbols("Wellfleet-OC3-MIB", wfOc3ConfigTable=wfOc3ConfigTable, wfOc3ConfigTimeElapsed=wfOc3ConfigTimeElapsed, wfOc3ConfigLineCoding=wfOc3ConfigLineCoding, wfOc3ConfigLineType=wfOc3ConfigLineType, wfOc3ConfigCircuitIdentifier=wfOc3ConfigCircuitIdentifier, wfOc3ConfigValidIntervals=wfOc3ConfigValidIntervals, wfOc3ConfigIndex=wfOc3ConfigIndex, wfOc3ConfigType=wfOc3ConfigType, wfOc3ConfigDelete=wfOc3ConfigDelete, wfOc3ConfigEntry=wfOc3ConfigEntry)
