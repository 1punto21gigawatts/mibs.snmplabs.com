#
# PySNMP MIB module CISCO-DOT11-CONTEXT-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DOT11-CONTEXT-SERVICES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
CiscoInetAddressMask, = mibBuilder.importSymbols("CISCO-TC", "CiscoInetAddressMask")
ifPhysAddress, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifPhysAddress", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, ObjectIdentity, ModuleIdentity, MibIdentifier, Gauge32, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Counter64, NotificationType, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Gauge32", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Counter64", "NotificationType", "Counter32", "Unsigned32")
TextualConvention, TimeInterval, TruthValue, MacAddress, TimeStamp, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeInterval", "TruthValue", "MacAddress", "TimeStamp", "DisplayString", "RowStatus")
ciscoDot11ContextServicesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 110))
ciscoDot11ContextServicesMIB.setRevisions(('2003-09-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDot11ContextServicesMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoDot11ContextServicesMIB.setLastUpdated('200309150000Z')
if mibBuilder.loadTexts: ciscoDot11ContextServicesMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoDot11ContextServicesMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dot11@cisco.com')
if mibBuilder.loadTexts: ciscoDot11ContextServicesMIB.setDescription("This MIB supports managing the devices offering WDS and WNS services. The hierarchy of the devices offering the wireless domain and network services looks like the following. += = = = + | | | WNS | (Campus level) | | += = = = + / \\ / \\ / \\ / \\ \\/ \\/ += = =+ += = =+ | | | | | WNS | | WNS | | | | | += = =+ += = =+ / \\ \\ / \\ \\ / \\ \\ / \\ \\ \\/ \\/ \\/ +=====+ +=====+ +=====+ | | | | | | | WDS | | WDS | | WDS | ( Subnet | | | | | | level- +=====+ +=====+ +=====+ Single / \\ \\ \\ broadcast / \\ \\ \\ domain ) / \\ \\ \\ / \\ \\ \\ / \\ \\ \\ \\/ \\/ \\/ \\/ +~-~-~+ +~-~-~+ +~-~-~+ +~-~-~+ + + + + + + + + + AP + + AP + + AP + + AP + + + + + + + + + +~-~-~+ +~-~-~+ +~-~-~+ +~-~-~+ .. . . . . . . . . . . . . . . . . . . . . . . . \\/ \\/ \\/ \\/ \\/ +.....+ +.....+ +-.-.-.+ +~-~-~+ +......+ + + + + + + + + + + + MN + + MN + + WGB + + AP + + MN + + + + + + + + + + + +.....+ +.....+ +-.-.-.+ +~-~-~+ +......+ . . . . . . . . . . . . \\/ \\/ \\/ ++++++++ +......+ +......+ + + + + + + + EN + + MN + + MN + + + + + + + ++++++++ +......+ +......+ The diagram above depicts the overall campus network hierarchy and the services being offered at various levels in the hierarchy. Here, Infrastructure Node Authentication services are offered by the device providing WNS at the root (Campus) level. WNS at this level thus span an enterprise campus that resides in a geographic location. WNS are offered at various levels as shown in the hierarchy to achieve scalability. WNS at the subsequent levels other than the root level include authentication services for MNs and are typically confined to a single building. At the broadcast domain level, the WDS include authentication and registration services for the APs. An AP provides Proxy Authentication and registration services for the MNs. The APs that connect to parent APs through the wireless interface ( as shown by the dotted lines ) are Repeater-APs. The WGBs are managed in the same manner as the MNs. However, the Ethernet Nodes ( EN ) that are connected to the WGB won't be served as part of the WDS. GLOSSARY Access Point ( AP ) Any entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. Wireless Bridge An 802.11 entity that provides wireless connectivity between two wired LAN segments and is used in point- to-point or point-multipoint configurations. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. WorkGroup Bridge ( WGB ) A work-group bridge is a non-STP AP with an 802.11 primary port and a secondary Ethernet port that provides access to a non-STP secondary Ethernet LAN segment. STP refers to the IEEE 802.1D Spanning Tree Protocol. An 'STP AP' executes the 802.1D STP and the 802.1D STP is operated on an 'STP link'. A 'non-STP AP' does not execute the 802.1D STP. Repeater-AP A repeater is a 'wireless AP' that is attached to a parent AP on an 802.11 primary port. The Ethernet port is disabled in a Repeater-AP. Infrastructure Node ( IN ) This term refers to Access Points, Wireless Bridges and those devices that implement and offer WNS and WDS as shown in the network hierarchy. Ethernet Node ( EN ) The node that gets the uplink to the Wireless AP via the WGB. This node connects to the WGB through its primary Ethernet port. Context The mobility context for an MN includes its current mobility bindings with the APs, IP/802 address bindings, cached configuration parameters, QoS state, IP group membership, authentication state, accounting statistics, and other dynamically derived protocol state information. Wireless Domain Services The set of services being offered at a particular broadcast domain that may be an IP subnet or a particular VLAN. The services include the following. 1. MN security credential caching to provide seamless, secure intra-subnet roaming. 2. Authenticated context transfer for roaming client within the subnet. Since, by definition, the WDS are bound to one subnet ( broadcast domain ), if implemented in a device spanning multiple subnets, the implementation should take care to provide separate set of services for each of the subnets. Wireless Network Services The set of services that can be visualized as being offered at various levels other than the lowest (subnet) level of a hierarchical campus network. At the root level, Infrastructure Authentication services for all the devices in the network that provide WNS and WDS are offered. In case if WNS are not distributed at several levels as shown in the hierarchy above and is confined to be offered only at a single root level, the services offered also include authentication services for the MNs. WNS Entity The logical entity that resides in an infrastructure node and offers WNS to the descendants of that infrastructure node in the wireless services hierarchy. WDS Entity The logical entity that resides in an infrastructure node and offers WDS to the descendants of that infrastructure node in the wireless services hierarchy. WS Entity Refers to one of WNS / WDS Entities. Parent Node The node that immediately precedes an infrastructure node in the hierarchy. For mobile nodes, the parent APs provide proxy wireless services by talking to their immediate parent nodes that offer WDS. Root Node The infrastructure node that is at the highest level in the services hierarchy and that offers WNS. The WNS entity acts as the IN Authenticator for the rest of the infrastructure nodes. In case if WNS are not distributed, the root node also acts as the Mobile Node Authenticator ( See description below ). Descendant A node that is in the sub-tree of the campus hierarchy tree rooted at the node providing WNS. Infrastructure Node ( IN ) Authenticator The logical entity that communicates with the AAA server and provides authentication Services for the infrastructure nodes. Details of the IN Authenticator have to be configured in the device providing WDS manually. The AP learns about the IN Authenticator automatically upon registering with its immediate parent. The WDS also includes MN authentication services if the entity providing WDS is at the root level in the hierarchy. Mobile Node ( MN ) Authenticator The logical entity that communicates with the AAA server and provides authentication Services for mobile nodes. An infrastructure node learns the whereabouts of the MN Authenticator from the root node. Wireless Network Manager ( WNM ) The network management system that manages the entire hierarchy of devices providing WNS and WDS. Advertisement The process by which the Access Points identify their parent nodes providing WDS. APs listen to the advertisements of the WDS entities and gets registered with one of those entities to facilitate secured context transfer. WLCCP Wireless LAN Context Control Protocol. Used to establish and manage the network topology and securely manage the 'operational context' for mobile stations in a campus network. AAA Authentication, Authorization, Accounting A node will request network access by executing a protocol to an authentication server that provides protocols and services for providing authentication, authorization and session accounting. Service Set Identifier ( SSID ) 802.11 Service Set Identifier. An SSID identifies a set of mobile nodes grouped into a logical 'service set' and the APs that provide access for the service set. Wired Equivalent Privacy (WEP) This protocol uses a pseudo random generator and RC4 stream cipher and is specified by the 802.11 standard as the algorithm for encryption and authentication over the wireless segment of the LAN. Temporal Key Integrity Protocol ( TKIP ) This protocol provides initialization vector hashing and a Message Integrity Check ( MIC ) to ensure data integrity. TKIP includes use of dynamic keys to defeat capture of passive keys. TKIP uses the RC4 cipher as WEP but the difference is that TKIP changes temporal keys every 10,000 packets thereby providing a dynamic distribution network that enhances the security of the network. Cisco Key Integrity Protocol ( CKIP ) A proprietary implementation similar to TKIP. CKIP implements key permutation for protecting the CKIP key against attacks. Other features of CKIP include expansion of encryption key to 16 bytes of length for key protection and MIC to ensure data integrity. Wireless services at subnet level ================================= +========+ | | | WDS | ( Subnet level - Broadcast | | domain ) +========+ / \\ / \\ / \\ / \\ / \\ \\/ \\/ +~-~-~+ +~-~-~+ + + + + + AP + + AP + + + + + +~-~-~+ +~-~-~+ . . . . . . . . . . . . . . . . . . \\/ \\/ \\/ +......+ +-.-.-.+ +~-~-~-+ + + + + + + + MN + + WGB + + AP + + + + + + + +......+ +-.-.-.+ +~-~-~-+ The above diagram depicts how wireless services are being offered in an infrastructure node implementing WDS. In such a network, the WDS entity provides authentication services to both the infrastructure and mobile nodes. The other entities in the diagram are the Mobile Node ( MN ), the Workgroup Bridge (WGB) and another AP-in-repeater mode. The Repeater-APs first perform initial authentication with the AAA server ( through WDS ) and then perform infrastructure authentication and registration with the WDS entity. The WGBs go through the same procedure as the MNs for authentication and registration with the WDS entity. ")
ciscoDot11csMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 110, 0))
ciscoDot11csMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 110, 1))
ciscoDot11csMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 110, 2))
cDot11csConfigGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1))
cDot11csDescendantIn = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2))
cDot11csMn = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3))
class CDot11csNodeIndex(TextualConvention, OctetString):
    description = 'This textual convention defines an identifier that is used to uniquely identify a WS Entity in the wireless services hierarchy. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

cDot11csServiceType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wds", 2), ("wns", 3), ("rootWns", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11csServiceType.setStatus('current')
if mibBuilder.loadTexts: cDot11csServiceType.setDescription("This object identifies the type of service this infrastructure node will offer. none(1) - This infrastructure node is not configured to offer any services. wds(2) - This infrastructure node is configured to offer Wireless Domain Services. To configure this infrastructure node to offer Wireless Domain Services, cDot11csServiceType should be set to 'wds' and an entry should be added to cDot11csWdsInstanceTable to specify the configuration for the WDS. wns(3) - This infrastructure node is configured to offer Wireless Network Services. To configure this infrastructure node to offer Wireless Network Services, cDot11csServiceType should be set to 'wns' and cDot11csPrimaryRootNodeAddr should be set to the IP address of the root infrastructure node that offers WNS. rootWns(4) - This infrastructure node is configured to offer Wireless Network Services at the root level in the wireless services hierarchy. To configure an infrastructure node as the root node, cDot11csServiceType should be set to 'rootWns' and cDot11csPrimaryRootNodeAddr should be set to 0.0.0.0 to imply that this infrastructure node is the root node in the wireless services hierarchy. ")
cDot11csParentNodeIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csParentNodeIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cDot11csParentNodeIpAddressType.setDescription('Represents the type of Internet address stored in cDot11csParentNodeIpAddress. ')
cDot11csParentNodeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csParentNodeIpAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11csParentNodeIpAddress.setDescription("The IP address of the immediate parent node of this infrastructure node in the wireless services hierarchy. The semantics for this object are defined as follows. If the value of cDot11csServiceType is 'rootWns' and the value of this object is 0.0.0.0, then this node is the root node offering WNS. If the value of cDot11csServiceType is 'wns', the value of this object is the IP address of the root infrastructure node offering WNS. If the values of cDot11csServiceType, cDot11csIsRootNode and this object are 'wds', 'true' and 0.0.0.0 respectively, then this node is the root node in the wireless services hierarchy. If the values of cDot11csServiceType and cDot11csIsRootNode are 'wds' and 'false' respectively, the value of this object is the IP address of the immediate parent infrastructure node. ")
cDot11csPrimaryRootNodeAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csPrimaryRootNodeAddrType.setStatus('current')
if mibBuilder.loadTexts: cDot11csPrimaryRootNodeAddrType.setDescription('Represents the type of Internet address stored in cDot11csPrimaryRootNodeAddr. ')
cDot11csPrimaryRootNodeAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11csPrimaryRootNodeAddr.setStatus('current')
if mibBuilder.loadTexts: cDot11csPrimaryRootNodeAddr.setDescription("The IP address of the infrastructure node to be configured as the primary root node. The primary root node performs infrastructure authentication for all the infrastructure nodes in the wireless services network. The semantics for this object are defined as follows. If the value of cDot11csServiceType is 'wds' and this infrastructure node is the root node in the wireless services hierarchy, the value configured is 0.0.0.0 to indicate that this node is the root node in the wireless services hierarchy. If the value of cDot11csServiceType is 'wds' and this infrastructure node is not the root node in the wireless services hierarchy, the value configured is the IP address of the infrastructure node for which the value of cDot11csServiceType is 'rootWns'. If the value of cDot11csServiceType is 'wns', the value configured is the IP address of the infrastructure node for which the value of cDot11csServiceType is 'rootWns'. If the value of cDot11csServiceType is 'rootWns', the value 0.0.0.0 is configured to indicate that this infrastructure node is the root node in the wireless services hierarchy. ")
cDot11csSecondaryRootNodeAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csSecondaryRootNodeAddrType.setStatus('current')
if mibBuilder.loadTexts: cDot11csSecondaryRootNodeAddrType.setDescription('Represents the type of Internet address stored in cWSSecondaryRootNodeAddr. ')
cDot11csSecondaryRootNodeAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11csSecondaryRootNodeAddr.setStatus('current')
if mibBuilder.loadTexts: cDot11csSecondaryRootNodeAddr.setDescription("The IP address of the Secondary root node acting as a standby for the primary root node. The semantics for this object are defined as follows. If the values of cDot11wsServiceType, cDot11wsIsRootNode and this object are 'wds', 'true' and 0.0.0.0 respectively, then there is no secondary root node in the wireless hierarchy. If the values of cDot11wsServiceType and cDot11wsIsRootNode are 'wds' and 'false' respectively, then the value of this object is the IP address of an infrastructure node that acts as a backup for the current root node. If the value of cDot11wsServiceType is 'wns', the value of this object is the IP address of an infrastructure node that acts as a backup for the current root node. If value of cDot11wsServiceType is 'rootWns', the value of this object is the IP address of an infrastructure node that acts as a backup for the current root node. ")
cDot11csCurrentRootNodeAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csCurrentRootNodeAddrType.setStatus('current')
if mibBuilder.loadTexts: cDot11csCurrentRootNodeAddrType.setDescription('Represents the type of Internet address stored in cDot11csCurrentRootNodeAddr. ')
cDot11csCurrentRootNodeAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csCurrentRootNodeAddr.setStatus('current')
if mibBuilder.loadTexts: cDot11csCurrentRootNodeAddr.setDescription("The IP address of the infrastructure node that is currently the root node. This object's value is 0.0.0.0 if this infrastructure node is the root node. Else, this object's value is the IP address of the root node. Thus, the object's value is 0.0.0.0 if either one of the following is true. 1) this infrastructure node offers WDS and is the root node. 2) this infrastructure node offers WNS with the value of cDot11csServiceType equal to 'rootWns'. The object's value is the IP address of the root node if the value of cDot11csServiceType is 'wns' for this node. ")
cDot11csWnsEntityName = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11csWnsEntityName.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnsEntityName.setDescription('The name associated with the WNS being offered by this infrastructure node. This name is unique across the wireless services network at the campus level. This is applicable only if the infrastructure node offers WNS. This object is not applicable for read-write operations, if this is an infrastructure node offering WDS. ')
cDot11csMnaIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnaIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnaIpAddressType.setDescription('Represents the type of Internet address stored in cDot11csMnaIpAddress. ')
cDot11csMnaIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnaIpAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnaIpAddress.setDescription("The IP address of the Mobile Node Authenticator. The semantics for this object are defined as follows. If the value of cDot11csServiceType, cDot11csIsRootNode and this object are 'wds', 'true' and 0.0.0.0 respectively, this node is the MN Authenticator. If the values of cDot11csServiceType is 'wds' and the value of cDot11csIsRootNode is 'false' indicating that there is at least one node up in the wireless services hierarchy that offers Wireless Network Services, the value of this object is the IP address of the immediate parent node for which the value of cDot11csServiceType is 'wns'. If the values of cDot11csServiceType and this object are 'wns' and 0.0.0.0 respectively, this infrastructure node is the MN Authenticator. This object is not applicable to a root node offering WNS which is identified by a value of 'rootWns' for cDot11csServiceType. ")
cDot11csIsRootNode = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csIsRootNode.setStatus('current')
if mibBuilder.loadTexts: cDot11csIsRootNode.setDescription("This object indicates if this infrastructure node is the root node. If the value of this object is 'true', this node is the root node. ")
cDot11csNodeOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("adminStandAlone", 1), ("infrastructure", 2), ("fallbackStandAlone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csNodeOperationMode.setStatus('current')
if mibBuilder.loadTexts: cDot11csNodeOperationMode.setDescription("This object indicates the mode which this infrastructure node is currently operating in. The semantics are described as follows. adminStandAlone - An infrastructure node in this mode has been configured to be the highest level node in the wireless services hierarchy and acts as both the Infrastructure and Mobile Node Authenticator. For an infrastructure node for which cDot11csServiceType is configured as 'rootWns', the mode of operation is always 'adminStandAlone' as it is the highest level node in the wireless services hierarchy. An infrastructure node whose cDot11csServiceType is 'wds' can be in 'adminStandAlone' mode if there is no node offering Wireless Network Services and is the root node in the wireless services hierarchy. An infrastructure node for which the value of cDot11csServiceType is 'wns' can't be in 'adminStandAlone' mode since it always has another infrastructure node as its parent for which the value of cDot11csServiceType is 'rootWns' and won't be the root node in the wireless services hierarchy. infrastructure - An infrastructure node in this mode has been configured with an external IN Authenticator. The external IN Authenticator in this case is the infrastructure node whose value of cDot11csServiceType is 'rootWns'. The immediate parent of this infrastructure node is given by the object cDot11csParentNodeAddress. fallbackStandAlone - This infrastructure node has been configured to function in the 'infrastructure' mode but the node has dropped back to 'fallbackStandAlone' mode due to loss of communication with its parent node. From an operational point of view, 'fallbackStandAlone' mode is same as 'adminStandAlone' mode. However, in the 'fallbackStandAlone' mode, an infrastructure node continuously attempts to get back to the 'infrastructure' mode. ")
cDot11csWnsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 15), )
if mibBuilder.loadTexts: cDot11csWnsTable.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnsTable.setDescription('This table holds the information about the subnets that are bound to each WNS entity. This WNS-to-WDS mapping is configured in the root WNS entity. A WDS entity requests the root WNS entity for the parent WNS entity. This table is applicable only for a root node. A row is added to this table in the root WNS entity by the administrator through the WNM, each row holding information about one particular subnet that is being served by a WNS entity. The name of the WNS entity is given by the object cDot11csWnsEntityName. ')
cDot11csWnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 15, 1), ).setIndexNames((0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnsIndex"), (0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnsAddrType"), (0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnsSubnetAddr"))
if mibBuilder.loadTexts: cDot11csWnsEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnsEntry.setDescription('An entry corresponds to one WDS-to-WNS mapping configured in the root WNS entity. ')
cDot11csWnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 15, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cDot11csWnsIndex.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnsIndex.setDescription('The name of the WNS entity that serves a given set of subnets. This object holds the value configured in cDot11csWnsEntityName. ')
cDot11csWnsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 15, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cDot11csWnsAddrType.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnsAddrType.setDescription('Represents the type of Internet addresses stored in cDot11csWnsSubnetAddr and cDot11csWnsSubnetMask. ')
cDot11csWnsSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 15, 1, 3), InetAddress())
if mibBuilder.loadTexts: cDot11csWnsSubnetAddr.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnsSubnetAddr.setDescription('The address of the subnet configured to be served by the WNS entity identified by cDot11csWnsIndex. ')
cDot11csWnsSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 15, 1, 4), CiscoInetAddressMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cDot11csWnsSubnetMask.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnsSubnetMask.setDescription('The subnet mask associated with the subnet address given by cDot11csWnsSubnetAddr. ')
cDot11csWnsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cDot11csWnsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnsRowStatus.setDescription("The status column used for creating and deleting instances of the columnar objects in the cDot11csWnsTable. The following information must be provided by the WNM while creating a row. The subnet address (cDot11csWnsSubnetAddr), the subnet mask ( cDot11csWnsSubnetMask) and Row Status ( cDot11csWnsRowStatus) The type of the addresses stored by the subnet address and the subnet mask should also be specified. The row, when created with the row status value of 'createAndGo' is moved to the 'active' state automatically by the agent and remains in that state till the time the row is removed through the 'destroy' option. This is used to create an entry for a new subnet that is assigned to be serviced by a WNS entity. The 'destroy' option is used when the administrator decides to remove the row representing a particular subnet being served by a WNS entity. ")
cDot11csWnmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 16), )
if mibBuilder.loadTexts: cDot11csWnmConfigTable.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnmConfigTable.setDescription("This table holds the list of IP addresses of those WNMs that have been identified as recipients of the notifications sent by a WS entity. In case of multiple WDS entities running in a single box, this table is common across all the WDS entities. Notifications are sent to those WNMs in this table whose cDot11csConfigWnmAuthenState value is 'authenticated'. A row is added to this table by the administrator through the WNM to specify a particular instance of WNM as a recipient of the notification sent by a infrastructure node configured to offer WDS/WNS. ")
cDot11csWnmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 16, 1), ).setIndexNames((0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnmConfigIpAddressType"), (0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnmConfigIpAddress"))
if mibBuilder.loadTexts: cDot11csWnmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnmConfigEntry.setDescription('An entry corresponds to one WNM instance that is identified as a recipient of the notifications sent by an infrastructure node configured to provide wireless services. ')
cDot11csWnmConfigIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 16, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cDot11csWnmConfigIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnmConfigIpAddressType.setDescription('Represents the type of Internet address stored in cDot11csWnmConfigIpAddress. ')
cDot11csWnmConfigIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 16, 1, 2), InetAddress())
if mibBuilder.loadTexts: cDot11csWnmConfigIpAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnmConfigIpAddress.setDescription('The IP address of this WNM. ')
cDot11csWnmConfigAuthenState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unauthenticated", 1), ("authenticationInProgess", 2), ("authenticationFailed", 3), ("authenticated", 4), ("keysSetUpWithWds", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csWnmConfigAuthenState.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnmConfigAuthenState.setDescription("The semantics for this object are defined as follows. unauthenticated - The WNM hasn't initiated the authentication process yet. authenticationInProgress - The WNM has initiated the the authentication process to get authenticated with the WS entity and the process is currently underway. authenticationFailed - The WNM has failed to get authenticate successfully with the WS Entity. authenticated - The WNM has got authenticated with the WS entity and established a mutual trust relationship with the same. keysSetUpWithScm - The WNM has got authenticated with the WS Entity and set secret keys for securing the communication with the WS Entity. The WNM initiates authentication process only with an 'active' WDS entity. (The state of the WDS entity is given by the object cDot11csWdsInstanceState). Hence, all the authentication states other than 'unauthenticated' are valid only for an 'active' WDS entity. Also, the 'active' WDS entity ( the entity for which the the value of cDot11csWdsInstanceState is 'active ) has to be configured with the address of the WNM before the WNM initiates the authentication process. The value is always 'unauthenticated' for a WDS entity in 'backup' state. ")
cDot11csWnmConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cDot11csWnmConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cDot11csWnmConfigRowStatus.setDescription("The status column used for creating and deleting instances of the columnar objects in cDot11csWnmConfigTable. The administrator must specify the following information while creating a row. The IP address type (cDot11csWnmConfigIpAddressType) The IP address of the WNM (cDot11csWnmConfigIpAddress) The Row status ( cDot11csWnmConfigRowStatus ) The row, when created, is automatically set to active by the agent as indicated by 'createAndGo' and remains in that state till the time the row is removed through the 'destroy' option. The administrator should manually remove a row from this table to remove a WNM instance from the list of notification recipients. The 'createAndGo' option is used to create an entry to configure a particular WNM as one of the recipients of the notifications sent by a WS entity configured in an infrastructure node. The 'destroy' option is used when the administrator decides to remove this WNM from the list of notification recipients for a WS entity. ")
cDot11csWdsInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 17), )
if mibBuilder.loadTexts: cDot11csWdsInstanceTable.setStatus('current')
if mibBuilder.loadTexts: cDot11csWdsInstanceTable.setDescription("This table contains the list of WDS entities currently configured in this device on each of the logical interfaces/VLANs. This table is applicable only if the value of cDot11csServiceType is 'wds'. Before adding a row to this table, the object cDot11csServiceType should have been set to 'wds'. The table is indexed by cDot11csWdsInstanceIndex. The object cDot11csWdsInstanceNodeIndex is an internally generated unique value and so it can't be specified at the time of creating of row. Hence it has been made a read-only object. A row is added to this table to associate a WDS entity with one of the logical interfaces/VLANs configured in this device. ")
cDot11csWdsInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 17, 1), ).setIndexNames((0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWdsInstanceIndex"))
if mibBuilder.loadTexts: cDot11csWdsInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11csWdsInstanceEntry.setDescription('An entry represents a WDS entity currently associated with one of the logical interfaces/VLANs configured in this device. ')
cDot11csWdsInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: cDot11csWdsInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: cDot11csWdsInstanceIndex.setDescription('This object identifies this entry corresponding to a particular WDS entity in the infrastructure node. ')
cDot11csWdsInstanceNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 17, 1, 2), CDot11csNodeIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csWdsInstanceNodeIndex.setStatus('current')
if mibBuilder.loadTexts: cDot11csWdsInstanceNodeIndex.setDescription('This object represents the node identifier of this WDS entity. ')
cDot11csWdsInstanceInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 17, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cDot11csWdsInstanceInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cDot11csWdsInstanceInterfaceIndex.setDescription('This object specifies the ifIndex corresponding to the interface / VLAN which this WDS entity is bound to. ')
cDot11csWdsInstancePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cDot11csWdsInstancePriority.setStatus('current')
if mibBuilder.loadTexts: cDot11csWdsInstancePriority.setDescription('This object specifies the priority value being configured by the administrator for this WDS entity. Based on the priority value, a WDS entity candidate gets elected as the active WDS. 1-127 are typically used for backup WDS candidates and 128 to 255 are typically used for primary WDS candidates. ')
cDot11csWdsInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("backup", 2), ("candidate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csWdsInstanceState.setStatus('current')
if mibBuilder.loadTexts: cDot11csWdsInstanceState.setDescription("This object indicates the current state of this WDS entity. A value of 'active' indicates that this is an active WDS entity that sends periodic WDS advertisement messages for APs to pick those messages and identify the WDS entity they can register with. An 'active' WDS entity moves to the 'backup' state if it receives advertisement message from a WDS entity configured with a higher priority. A value of 'backup' indicates that this WDS entity is in standby mode. A 'backup' WDS entity moves to the 'active' state when it receives advertisement message from a WDS entity configured with a higher priority. The 'candidate' state is the initial state of a WDS entity that participates in the election process. A WDS candidate entity moves either to the 'active' state if it doesn't receive an advertisement message from a higher priority WDS entity within the listen period or to the 'backup' state if it receives a higher priority advertisement message within the listen period. ")
cDot11csWdsInstanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 17, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cDot11csWdsInstanceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cDot11csWdsInstanceRowStatus.setDescription("The status column used for creating, modifying, and deleting instances of the columnar objects in the cDot11csWdsInstanceTable. The administrator must specify the following to create a row in this table and activate it. 1) The ifIndex of the interface / VLAN this WDS entity should bound to. 2) The Priority value of the WDS entity to be created through the object cDot11csWdsInstancePriority. 3) The Row status through the object cDot11csWdsInstanceRowStatus. The 'createAndGo' option is used to create a new instance of WDS entity and bind it to a particular broadcast domain which can either be an IP subnet or a VLAN. While creating a row, the ifIndex of the interface the particular IP subnet/VLAN is bound to and the priority of this WDS entity must be specified along with the row status. The 'destroy' option is used when the administrator decides to decommission a particular WDS entity and remove its bindings with a particular broadcast domain. A row in this table is destroyed when it is in the 'active' state. The ifIndex of the interface the particular IP subnet/VLAN is bound to must be specified along with the row status set to 'destroy' to remove a row from cDot11csWdsInstanceTable. ")
cDot11csStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18), )
if mibBuilder.loadTexts: cDot11csStatusTable.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusTable.setDescription('This table provides information about the status of wireless service entities currently being configured in this device. ')
cDot11csStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1), ).setIndexNames((0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusNodeIndex"))
if mibBuilder.loadTexts: cDot11csStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusEntry.setDescription("An entry provides information about the entity currently offering wireless services and associated with one of the logical interfaces/VLANs configured in this device. For a WDS entity bound to a logical interface/VLAN, a row is added to this table whenever an entry for a WDS entity is added to cDot11csWdsInstanceTable with cDot11csWdsInstanceState set to 'active'. The administrator can't create rows in this table but he can select and temporarily bring the services being provided by one entity to its descendants down by setting the value of cDot11csStatusAdminStatus to 'down'. If the entity provides WNS, this table contains a single row. A row is deleted from this table automatically when one of the following occurs. 1) A WDS entity is decommissioned by destroying the row corresponding to the same in the cDot11csWdsInstance Table. 2) The wireless services are shut down internally. ")
cDot11csStatusNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 1), CDot11csNodeIndex())
if mibBuilder.loadTexts: cDot11csStatusNodeIndex.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusNodeIndex.setDescription('This object uniquely identifies an active wireless service entity. For an active WDS entity, this object holds the same value as the object cDot11csWdsInstanceNodeIndex in cDot11csWdsInstanceTable. For a WNS entity, this will hold a value of type CDot11csNodeIndex. ')
cDot11csStatusAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11csStatusAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusAdminStatus.setDescription("The desired status of the services offered by this entity to its descendants. This has a default value of 'up' whenever a row is created by the agent in this table. Setting this to 'down' disables the services provided by this entity to its descendants. The agent sets this value to 'down' if the entity couldn't offer the services due to failures detected in the underlying interface this entity is bound to. ")
cDot11csStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csStatusOperStatus.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusOperStatus.setDescription('The current operational status of the wireless services provided by this entity. The agent sets the value of this object whenever the administrative status value is modified either through explicit management action or by detecting failures in the functioning of the wireless service entity. ')
cDot11csStatusChangeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csStatusChangeTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusChangeTimeStamp.setDescription('The value of sysUpTime at the time a state transition occurs in cDot11csStatusOperStatus. ')
cDot11csStatusAdvtInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csStatusAdvtInterval.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusAdvtInterval.setDescription('This object indicates the time interval between transmission of advertisement messages. ')
cDot11csStatusInRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csStatusInRegistrations.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusInRegistrations.setDescription('The number of descendant infrastructure nodes registered with this entity since the last reboot of this device. ')
cDot11csStatusInDeRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csStatusInDeRegistrations.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusInDeRegistrations.setDescription('The number of descendant infrastructure nodes de-registered with this entity since the last reboot of this device. ')
cDot11csStatusCurrentlyRegisteredIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csStatusCurrentlyRegisteredIns.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusCurrentlyRegisteredIns.setDescription("The number of descendant infrastructure nodes currently registered with this entity since the operational status of this entity last changed to 'up'. ")
cDot11csStatusSentAdvts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csStatusSentAdvts.setStatus('current')
if mibBuilder.loadTexts: cDot11csStatusSentAdvts.setDescription('The number of advertisement messages sent by this entity since the last reboot of this device. ')
cDot11csElectedAsWdsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11csElectedAsWdsEnable.setStatus('current')
if mibBuilder.loadTexts: cDot11csElectedAsWdsEnable.setDescription("This object controls the generation of the cDot11csElectedAsWdsEnable notification. If the value of this object is set to 'true', the agent shall send the cDot11csElectedAsWds notification to the intended trap recipients. ")
cDot11csInRegisteredWithWsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11csInRegisteredWithWsEnable.setStatus('current')
if mibBuilder.loadTexts: cDot11csInRegisteredWithWsEnable.setDescription("This object controls the generation of the cDot11csInRegisteredWithWs notification. If the value of this object is set to 'true', the agent shall send the cDot11csInRegisteredWithWs notification to the intended trap recipients. ")
cDot11csInDeRegisteredWithWsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11csInDeRegisteredWithWsEnable.setStatus('current')
if mibBuilder.loadTexts: cDot11csInDeRegisteredWithWsEnable.setDescription("This object controls the generation of the cDot11csInDeRegisteredWithWs notification. If the value of this object is set to 'true', the agent shall send the cDot11csInDeRegisteredWithWs notification to the intended trap recipients. ")
cDot11csDescendantInTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1), )
if mibBuilder.loadTexts: cDot11csDescendantInTable.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInTable.setDescription('This table contains the list of the descendant nodes currently registered with this infrastructure node. This table has an expansion dependent relationship on the cDot11csStatusTable, relating one or more descendants with a wireless service entity and holds entries carrying information about the descendants of a particular wireless service entity identified by cDot11csStatusNodeIndex in cDot11csStatusTable. ')
cDot11csDescendantInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusNodeIndex"), (0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInId"))
if mibBuilder.loadTexts: cDot11csDescendantInEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInEntry.setDescription('An entry represents an descendant infrastructure node that is currently registered with the WS entity identified by cDot11csStatusNodeIndex. A row is added to the table by the agent when a descendant infrastructure node registers with the entity identified by the object cDot11csStatusNodeIndex. A row is deleted from this table by the agent when a descendant loses its registration with the wireless service entity identified by cDot11csStatusNodeIndex. Loss of registration occurs if the WS entity identified by cDot11csStatusNodeIndex loses contact with a particular descendant identified by cDot11csDescendantInId. Also, all the entries in this table are deleted if the entry for the wireless service entity is deleted from cDot11csStatusTable. ')
cDot11csDescendantInId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cDot11csDescendantInId.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInId.setDescription('The MAC address of this descendant IN. ')
cDot11csDescendantInType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ap", 1), ("wds", 2), ("wns", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csDescendantInType.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInType.setDescription("This object specifies the type of the infrastructure node. 'ap' - Access Point. 'wds' - Wireless Domain Services Entity. 'wns' - Wireless Network Services Entity. ")
cDot11csDescendantInIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csDescendantInIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInIpAddressType.setDescription('Represents the type of Internet address stored in cDot11csDescendantInIpAddressType. ')
cDot11csDescendantInIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csDescendantInIpAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInIpAddress.setDescription('The IP address of the descendant IN. ')
cDot11csDescendantInRegistrationAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csDescendantInRegistrationAge.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInRegistrationAge.setDescription('The time elapsed since this infrastructure node has registered with the WS entity identified by cDot11csStatusNodeIndex. ')
cDot11csDescendantInCtkRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csDescendantInCtkRefreshes.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInCtkRefreshes.setDescription('The number of context transfer key refreshes done by this infrastructure node with the WS entity identified by cDot11csStatusNodeIndex. ')
cDot11csDescendantInNskExpiryTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 2, 1, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csDescendantInNskExpiryTimeOut.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInNskExpiryTimeOut.setDescription('The network session key timeout value assigned by the AAA server to this infrastructure node. ')
cDot11csMnContextTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1), )
if mibBuilder.loadTexts: cDot11csMnContextTable.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnContextTable.setDescription('This table has an expansion dependent relationship on the cDot11csStatusTable, relating one or more mobile clients with a wireless service entity and holds entries carrying information about the mobile nodes registered with the entity identified by cDot11csStatusNodeIndex in cDot11csStatusTable. ')
cDot11csMnContextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusNodeIndex"), (0, "CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnContextId"))
if mibBuilder.loadTexts: cDot11csMnContextEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnContextEntry.setDescription('An entry represents a mobile node that is currently registered with the entity identified by cDot11csStatusNodeIndex. A row is added to the table by the agent when a mobile node registers with the entity identified by the object cDot11csStatusNodeIndex. A row is deleted from this table by the agent when a mobile node loses its registration with the entity identified by cDot11csStatusNodeIndex. Loss of registration occurs when the mobile node roams from one subnet to another. Also, all the entries in this table are deleted if the entry for the entity is deleted from cDot11csStatusTable. ')
cDot11csMnContextId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cDot11csMnContextId.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnContextId.setDescription('The MAC address of this mobile node. ')
cDot11csMnContextSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnContextSsid.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnContextSsid.setDescription('The Service Set Identifier of this mobile node. ')
cDot11csMnContextSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnContextSystemName.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnContextSystemName.setDescription('The hostname by which the mobile node is uniquely identified in the network. ')
cDot11csMnContextUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnContextUserId.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnContextUserId.setDescription("The name of this mobile node's user. ")
cDot11csMnContextIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnContextIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnContextIpAddressType.setDescription('Represents the type of Internet addresses stored in cDot11csMnContextIpAddress and cDot11csMnParentInIpAddress. ')
cDot11csMnContextIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnContextIpAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnContextIpAddress.setDescription('The IP address of this mobile node. ')
cDot11csMnParentInIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnParentInIpAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnParentInIpAddress.setDescription('The IP address of the parent infrastructure node of this mobile node. ')
cDot11csMnRegistrationAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnRegistrationAge.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnRegistrationAge.setDescription('The time elapsed since this mobile node has registered with the wireless service entity identified by cDot11csStatusNodeIndex in hundredths of a second. This object is not applicable if the entity identified by cDot11csStatusNodeIndex is not a MN Authenticator. ')
cDot11csMnNskExpiryTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnNskExpiryTimeOut.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnNskExpiryTimeOut.setDescription('The network session timeout value assigned by the AAA server to this mobile node in hundredths of a of a second. This object is not applicable if the entity identified by cDot11csStatusNodeIndex is not a MN Authenticator. ')
cDot11csMnCipherNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 110, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("tkip", 2), ("ckip", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11csMnCipherNegotiated.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnCipherNegotiated.setDescription('The type of the cipher negotiated for privacy and authenticity. The various types are described as follows. none - No protocol in use for privacy and authenticity. wep - Wired Equivalent Privacy. tkip - Temporal Key Integrity Protocol. ckip - A proprietary implementation similar to TKIP. other - vendor specific implementations. ')
cDot11csElectedAsWds = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 110, 0, 1)).setObjects(("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: cDot11csElectedAsWds.setStatus('current')
if mibBuilder.loadTexts: cDot11csElectedAsWds.setDescription('This notification is sent by the WDS entity that has got elected to offer Wireless Domain Services.')
cDot11csInRegisteredWithWs = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 110, 0, 2)).setObjects(("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInIpAddressType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInIpAddress"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: cDot11csInRegisteredWithWs.setStatus('current')
if mibBuilder.loadTexts: cDot11csInRegisteredWithWs.setDescription('This notification is sent by the wireless service entity upon an infrastructure node getting registered with that wireless service entity. The notification carries the MAC address of the wireless service entity. ')
cDot11csInDeRegisteredWithWs = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 110, 0, 3)).setObjects(("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInIpAddressType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInIpAddress"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: cDot11csInDeRegisteredWithWs.setStatus('current')
if mibBuilder.loadTexts: cDot11csInDeRegisteredWithWs.setDescription('This notification is sent by the wireless service entity upon an infrastructure node getting deregistered with that wireless service entity. The notification carries the MAC address of the wireless service entity. ')
ciscoDot11csMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 110, 2, 1))
ciscoDot11csMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 110, 2, 2))
ciscoDot11csCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 110, 2, 1, 1)).setObjects(("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csConfigGlobalGroup"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInGroup"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnGroup"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMIBNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11csCompliance = ciscoDot11csCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11csCompliance.setDescription('The compliance statement for the SNMP entities that implement Wireless Domain Services and Wireless Network Services. ')
cDot11csConfigGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 110, 2, 2, 1)).setObjects(("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csServiceType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csParentNodeIpAddressType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csParentNodeIpAddress"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csPrimaryRootNodeAddrType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csPrimaryRootNodeAddr"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csSecondaryRootNodeAddrType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csSecondaryRootNodeAddr"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csCurrentRootNodeAddrType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csCurrentRootNodeAddr"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnsEntityName"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnaIpAddressType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnaIpAddress"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csIsRootNode"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csNodeOperationMode"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnsSubnetMask"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnsRowStatus"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnmConfigAuthenState"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWnmConfigRowStatus"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWdsInstanceNodeIndex"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWdsInstanceInterfaceIndex"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWdsInstancePriority"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWdsInstanceState"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csWdsInstanceRowStatus"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusAdminStatus"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusOperStatus"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusChangeTimeStamp"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusAdvtInterval"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusInRegistrations"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusInDeRegistrations"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusCurrentlyRegisteredIns"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csStatusSentAdvts"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csElectedAsWdsEnable"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csInRegisteredWithWsEnable"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csInDeRegisteredWithWsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDot11csConfigGlobalGroup = cDot11csConfigGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: cDot11csConfigGlobalGroup.setDescription('This collection of objects provide information about the wireless services configured in a device and their current status. ')
cDot11csDescendantInGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 110, 2, 2, 2)).setObjects(("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInIpAddressType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInIpAddress"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInRegistrationAge"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInCtkRefreshes"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csDescendantInNskExpiryTimeOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDot11csDescendantInGroup = cDot11csDescendantInGroup.setStatus('current')
if mibBuilder.loadTexts: cDot11csDescendantInGroup.setDescription('A collection of objects that contain information about all the descendant infrastructure nodes of a wireless service entity. ')
cDot11csMnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 110, 2, 2, 3)).setObjects(("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnContextSsid"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnContextSystemName"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnContextUserId"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnContextIpAddressType"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnContextIpAddress"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnParentInIpAddress"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnRegistrationAge"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnNskExpiryTimeOut"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csMnCipherNegotiated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDot11csMnGroup = cDot11csMnGroup.setStatus('current')
if mibBuilder.loadTexts: cDot11csMnGroup.setDescription('The collection of objects that provide mobile node context information cached in a wireless service entity. ')
cDot11csMIBNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 110, 2, 2, 4)).setObjects(("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csElectedAsWds"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csInRegisteredWithWs"), ("CISCO-DOT11-CONTEXT-SERVICES-MIB", "cDot11csInDeRegisteredWithWs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDot11csMIBNotifGroup = cDot11csMIBNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cDot11csMIBNotifGroup.setDescription('A collection of objects providing notifications related to election of WDS, registration and deregistration of infrastructure nodes with entities offering wireless services. ')
mibBuilder.exportSymbols("CISCO-DOT11-CONTEXT-SERVICES-MIB", cDot11csDescendantInType=cDot11csDescendantInType, cDot11csCurrentRootNodeAddr=cDot11csCurrentRootNodeAddr, cDot11csWnsSubnetAddr=cDot11csWnsSubnetAddr, ciscoDot11csMIBNotifications=ciscoDot11csMIBNotifications, cDot11csDescendantInTable=cDot11csDescendantInTable, cDot11csMnNskExpiryTimeOut=cDot11csMnNskExpiryTimeOut, cDot11csStatusOperStatus=cDot11csStatusOperStatus, cDot11csWnmConfigEntry=cDot11csWnmConfigEntry, cDot11csMnContextId=cDot11csMnContextId, cDot11csCurrentRootNodeAddrType=cDot11csCurrentRootNodeAddrType, cDot11csParentNodeIpAddress=cDot11csParentNodeIpAddress, cDot11csDescendantInEntry=cDot11csDescendantInEntry, ciscoDot11ContextServicesMIB=ciscoDot11ContextServicesMIB, cDot11csWnsEntityName=cDot11csWnsEntityName, cDot11csPrimaryRootNodeAddr=cDot11csPrimaryRootNodeAddr, cDot11csWnmConfigAuthenState=cDot11csWnmConfigAuthenState, cDot11csWdsInstanceIndex=cDot11csWdsInstanceIndex, cDot11csConfigGlobalGroup=cDot11csConfigGlobalGroup, cDot11csStatusAdvtInterval=cDot11csStatusAdvtInterval, cDot11csDescendantIn=cDot11csDescendantIn, cDot11csWnmConfigIpAddress=cDot11csWnmConfigIpAddress, cDot11csConfigGlobal=cDot11csConfigGlobal, cDot11csWdsInstanceEntry=cDot11csWdsInstanceEntry, cDot11csMnaIpAddress=cDot11csMnaIpAddress, cDot11csMnContextIpAddress=cDot11csMnContextIpAddress, cDot11csMnCipherNegotiated=cDot11csMnCipherNegotiated, cDot11csWdsInstanceNodeIndex=cDot11csWdsInstanceNodeIndex, cDot11csStatusAdminStatus=cDot11csStatusAdminStatus, cDot11csWnsEntry=cDot11csWnsEntry, cDot11csStatusTable=cDot11csStatusTable, cDot11csWdsInstanceState=cDot11csWdsInstanceState, cDot11csWdsInstanceInterfaceIndex=cDot11csWdsInstanceInterfaceIndex, cDot11csDescendantInNskExpiryTimeOut=cDot11csDescendantInNskExpiryTimeOut, cDot11csElectedAsWds=cDot11csElectedAsWds, cDot11csIsRootNode=cDot11csIsRootNode, cDot11csElectedAsWdsEnable=cDot11csElectedAsWdsEnable, CDot11csNodeIndex=CDot11csNodeIndex, cDot11csInDeRegisteredWithWs=cDot11csInDeRegisteredWithWs, cDot11csMn=cDot11csMn, cDot11csInRegisteredWithWsEnable=cDot11csInRegisteredWithWsEnable, cDot11csDescendantInRegistrationAge=cDot11csDescendantInRegistrationAge, cDot11csMIBNotifGroup=cDot11csMIBNotifGroup, cDot11csWdsInstanceRowStatus=cDot11csWdsInstanceRowStatus, cDot11csStatusInDeRegistrations=cDot11csStatusInDeRegistrations, cDot11csWnmConfigIpAddressType=cDot11csWnmConfigIpAddressType, cDot11csDescendantInIpAddressType=cDot11csDescendantInIpAddressType, cDot11csDescendantInId=cDot11csDescendantInId, cDot11csMnContextSystemName=cDot11csMnContextSystemName, ciscoDot11csMIBObjects=ciscoDot11csMIBObjects, cDot11csMnContextUserId=cDot11csMnContextUserId, cDot11csPrimaryRootNodeAddrType=cDot11csPrimaryRootNodeAddrType, cDot11csWnsTable=cDot11csWnsTable, cDot11csStatusCurrentlyRegisteredIns=cDot11csStatusCurrentlyRegisteredIns, cDot11csStatusInRegistrations=cDot11csStatusInRegistrations, ciscoDot11csMIBConformance=ciscoDot11csMIBConformance, cDot11csMnGroup=cDot11csMnGroup, cDot11csSecondaryRootNodeAddr=cDot11csSecondaryRootNodeAddr, cDot11csMnParentInIpAddress=cDot11csMnParentInIpAddress, cDot11csStatusNodeIndex=cDot11csStatusNodeIndex, cDot11csWnmConfigTable=cDot11csWnmConfigTable, ciscoDot11csCompliance=ciscoDot11csCompliance, ciscoDot11csMIBCompliances=ciscoDot11csMIBCompliances, cDot11csWnsIndex=cDot11csWnsIndex, cDot11csStatusChangeTimeStamp=cDot11csStatusChangeTimeStamp, cDot11csInDeRegisteredWithWsEnable=cDot11csInDeRegisteredWithWsEnable, cDot11csMnContextTable=cDot11csMnContextTable, cDot11csNodeOperationMode=cDot11csNodeOperationMode, cDot11csDescendantInIpAddress=cDot11csDescendantInIpAddress, cDot11csParentNodeIpAddressType=cDot11csParentNodeIpAddressType, cDot11csWdsInstancePriority=cDot11csWdsInstancePriority, cDot11csWdsInstanceTable=cDot11csWdsInstanceTable, cDot11csMnContextIpAddressType=cDot11csMnContextIpAddressType, PYSNMP_MODULE_ID=ciscoDot11ContextServicesMIB, cDot11csServiceType=cDot11csServiceType, cDot11csWnsAddrType=cDot11csWnsAddrType, cDot11csDescendantInGroup=cDot11csDescendantInGroup, cDot11csStatusEntry=cDot11csStatusEntry, cDot11csMnRegistrationAge=cDot11csMnRegistrationAge, cDot11csMnContextSsid=cDot11csMnContextSsid, cDot11csInRegisteredWithWs=cDot11csInRegisteredWithWs, cDot11csMnContextEntry=cDot11csMnContextEntry, cDot11csWnmConfigRowStatus=cDot11csWnmConfigRowStatus, cDot11csWnsSubnetMask=cDot11csWnsSubnetMask, cDot11csDescendantInCtkRefreshes=cDot11csDescendantInCtkRefreshes, cDot11csStatusSentAdvts=cDot11csStatusSentAdvts, cDot11csSecondaryRootNodeAddrType=cDot11csSecondaryRootNodeAddrType, ciscoDot11csMIBGroups=ciscoDot11csMIBGroups, cDot11csMnaIpAddressType=cDot11csMnaIpAddressType, cDot11csWnsRowStatus=cDot11csWnsRowStatus)
