#
# PySNMP MIB module HP-ICF-OPENFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-OPENFLOW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:34:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
VidList, = mibBuilder.importSymbols("HP-ICF-TC", "VidList")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, TimeTicks, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, Integer32, Counter64, iso, Gauge32, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "TimeTicks", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "Integer32", "Counter64", "iso", "Gauge32", "ModuleIdentity", "Bits")
TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
hpicfOpenFlowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89))
hpicfOpenFlowMIB.setRevisions(('2017-07-16 00:00', '2017-06-18 00:00', '2017-04-28 00:00', '2016-10-25 00:00', '2016-10-05 00:00', '2016-08-06 00:00', '2016-07-31 00:00', '2016-04-21 00:00', '2015-12-10 00:00', '2015-09-29 00:00', '2015-01-11 00:00', '2014-06-04 00:00', '2012-10-01 00:00', '2012-02-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfOpenFlowMIB.setRevisionsDescriptions(('Added a mib object hpicfOpenFlowControllerSourceAddressType corresponding to the source IP when configuring a controller. Updated compliance.', 'Added a mib object hpicfOpenFlowControllerSourceAddress for source IP when configuring a controller.', 'Added traditionalPipeline option hpicfOpenFlowInstanceOverrideProtocol mib object.', 'Removed bfd protocol in hpicfOpenFlowInstanceOverrideProtocol mib object.', 'Added mib object hpicfOpenFlowInstanceMeterPrecedenceLevel.', 'Removed two protocols, dtiscp and webmacauth in hpicfOpenFlowInstanceOverrideProtocol mib object. Also modified the BITS numbering of other protocols.', 'Added mib object hpicfOpenFlowInstanceMissRuleDefaultAction hpicfOpenFlowInstanceOverrideProtocol hpicfOpenFlowInstancePktInVlanTagging', 'Removed mib object hpicfOpenFlowInstanceGroupHWCounterAvailability.', 'Added new enum in following MIB object hpicfOpenFlowInstanceOperStatusReason, disabled enum is added in this MIB object', 'The following MIB object changes in hpicfOpenFlowInstanceOperStatusReason, hardwareFailure is renamed to enableFailedInHardware. controllerVLANRemoved is removed', 'Added support for OpenFlow MAC group tables in the pipeline', 'Added mib objects hpicfOpenFlowInstanceMembers hpicfOpenFlowInstancePipelineModel hpicfOpenFlowInstanceDatapathDesc Deprecated the table hpicfOpenFlowInstanceMembershipTable and mib object hpicfOpenFlowIpControlTableMode. Deprecated groups are hpicfOpenFlowInstanceGroup hpicfOpenFlowInstanceMembershipGroup hpicfOpenFlowScalarsGroup. Added new groups hpicfOpenFlowInstanceGroup1 hpicfOpenFlowScalarsGroup1. Deprecated the compliance hpicfOpenFlowCompliance and added hpicfOpenFlowCompliance1.', 'Added support for OpenFlow Specification 1.3', 'The initial version of this MIB module',))
if mibBuilder.loadTexts: hpicfOpenFlowMIB.setLastUpdated('201707160000Z')
if mibBuilder.loadTexts: hpicfOpenFlowMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfOpenFlowMIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfOpenFlowMIB.setDescription('The MIB module for configuring OpenFlow.')
hpicfOpenFlowNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 0))
hpicfOpenFlowObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1))
hpicfOpenFlowConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2))
hpicfOpenFlowStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("disableWithClearConfig", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowStatus.setDescription("Global configuration to enable or disable OpenFlow on the device. The 'disableWithClearConfig' enum disables OpenFlow along with removing all the OpenFlow related configuration.")
hpicfOpenFlowInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4), )
if mibBuilder.loadTexts: hpicfOpenFlowInstanceTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceTable.setDescription('A table that is used create an OpenFlow instance. For maximum number of OpenFlow instances that can be supported, refer to hpicfOpenFLowMaxInstances MIB object.')
hpicfOpenFlowInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1), ).setIndexNames((0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceName"))
if mibBuilder.loadTexts: hpicfOpenFlowInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceEntry.setDescription('A set of objects that are used to create an OpenFlow instance.')
hpicfOpenFlowInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hpicfOpenFlowInstanceName.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceName.setDescription("Unique name given to an OpenFlow instance. The instance name 'aggregate' is special case denoting switch functioning as OpenFlow switch. The instance name allows lowercase alphanumeric characters and the special character underscore.")
hpicfOpenFlowInstanceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceAdminStatus.setDescription("This object is used to administratively enable or disable an OpenFlow instance. This MIB object can be set to 'enable' only when either hpicfOpenFlowInstanceListenPortCfg has been set to 'true' or atleast one controller is associated with this instance.")
hpicfOpenFlowInstanceListenPortCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceListenPortCfg.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceListenPortCfg.setDescription('This object indicates if a listen-port is configured on this OpenFlow instance.')
hpicfOpenFlowInstanceListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 4), InetPortNumber().clone(6633)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceListenPort.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceListenPort.setDescription('Port number for the listen-port on the OpenFlow instance. A valid port number is between 1024 and 65534 inclusive.')
hpicfOpenFlowInstanceListenPortIsOobm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceListenPortIsOobm.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceListenPortIsOobm.setDescription('This object indicates if a listen-port is configured for this OpenFlow instance over OOBM(Out Of Band Management) interface. This MIB object will be applicable only if there is a physical OOBM port on the device.')
hpicfOpenFlowInstanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMode.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMode.setDescription('This object allows the user to specify the mode of OpenFlow operation for an instance. In active mode, new flows get redirected to the OpenFlow controller. In passive mode, new flows are not sent to the OpenFlow controller.This object is applicable only for an OpenFlow version 1.0 instance.')
hpicfOpenFlowInstanceFlowLocationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardwareOnly", 1), ("hardwareAndSoftware", 2))).clone('hardwareAndSoftware')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceFlowLocationMode.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceFlowLocationMode.setDescription('This object specifies if the flows for this instance will be located in hardware only or in hardware and software. By default, flows will be located in hardware and software.This object is applicable only for an OpenFlow version 1.0 instance.')
hpicfOpenFlowConnectionInterruptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failSecure", 1), ("failStandalone", 2))).clone('failSecure')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowConnectionInterruptionMode.setReference('OpenFlow Spec-v1.1.0, Section 5.3')
if mibBuilder.loadTexts: hpicfOpenFlowConnectionInterruptionMode.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowConnectionInterruptionMode.setDescription('This MIB object is used to specify the type of fallback when the switch loses connection with the controller. In fail-secure mode, packets and messages destined to the current controller are dropped. Flows should continue to expire according to their timeouts in fail-secure mode. In fail-standalone mode, the switch acts as a legacy Ethernet switch or router.')
hpicfOpenFlowInstanceHwRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 9), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceHwRateLimit.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceHwRateLimit.setDescription('This object limits the bandwidth per module in kilobits per second, that this OpenFlow instance can utilize. This implementation supports a minimum rate limit of 0 kbps and a maximum rate limit of 10000000 kbps.')
hpicfOpenFlowInstanceSwRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 10), Integer32().clone(100)).setUnits('packets per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceSwRateLimit.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceSwRateLimit.setDescription('This object limits the number of packets per second for each module, that this instance can send to the software path on the CPU. Increasing the software rate limit would increase CPU consumption and may impact the system performance. For maximum number of packets per second for each module, that an OpenFlow instance can send to the software path on the CPU, refer to hpicfOpenFLowInstanceMaxSwRateLimit MIB object.')
hpicfOpenFlowInstanceDatapathID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceDatapathID.setReference('OpenFlow Spec-v1.1.0, Appendix A.3.1')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceDatapathID.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceDatapathID.setDescription('Datapath ID(DPID) uniquely identifies a datapath between this instance and the controller. Its lower 48-bits are intended for switch MAC address, while the upper 16-bits are defined by the implementation.')
hpicfOpenFlowInstanceNumOfHwFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceNumOfHwFlows.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceNumOfHwFlows.setDescription('This object indicates the number of hardware flows in this OpenFlow instance.')
hpicfOpenFlowInstanceNumOfSwFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceNumOfSwFlows.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceNumOfSwFlows.setDescription('This object indicates the number of software flows in this OpenFlow instance.')
hpicfOpenFlowInstanceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceOperStatus.setDescription('This object is used to determine the operational state of an OpenFlow instance. The reason for operational status to be down is specified by the hpicfOpenFlowInstanceOperStatusReason MIB.')
hpicfOpenFlowInstanceMaxBackOffInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMaxBackOffInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMaxBackOffInterval.setDescription('Interval between two consecutive attempts made by an instance to reconnect to a controller increases exponentially till it reaches the value specified by this MIB object. All subsequent attempts use this value as the interval between retries.')
hpicfOpenFlowInstanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceRowStatus.setDescription('Row status for this table.')
hpicfOpenFlowInstanceProbeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceProbeInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceProbeInterval.setDescription('This MIB object specifies the interval between two consecutive probes sent from an instance to the controller. This MIB value also determines how soon the instance will enter the connection interruption mode. If the instance does not hear a reply from the controller for three consecutive probes, it will flag the controller as unreachable and enter connection interruption mode.')
hpicfOpenFlowInstanceProtoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1dot0", 1), ("v1dot3", 2))).clone('v1dot3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceProtoVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceProtoVersion.setDescription('This MIB object specifies the OpenFlow instance protocol version.')
hpicfOpenFlowInstanceProtoVersionOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceProtoVersionOnly.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceProtoVersionOnly.setDescription('Setting this MIB object to true will support only the specific version mentioned by hpicfOpenFlowInstanceProtoVersion MIB and not compatible with lower versions.')
hpicfOpenFlowInstanceNumOfSwFlowTable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 20), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceNumOfSwFlowTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceNumOfSwFlowTable.setDescription('This MIB object specifies the number of software flow tables for this OpenFlow instance. The maximum value supported is 8. This object is applicable only for an OpenFlow version 1.3 instance.')
hpicfOpenFlowInstanceOperStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("hardwareResourcesUnavailable", 2), ("memberVLANNotConfigured", 3), ("memberVLANRemoved", 4), ("noValidPortsInMemberVLAN", 5), ("controllerVLANNotConfigured", 6), ("enableFailedInHardware", 7), ("disabled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceOperStatusReason.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceOperStatusReason.setDescription('This MIB object specifies the reason for hpicfOpenFlowInstanceOperStatus to be down.')
hpicfOpenFlowInstanceEgressOnlyPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 22), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceEgressOnlyPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceEgressOnlyPorts.setDescription('This MIB object specifies the list of egress only ports for this OpenFlow instance.')
hpicfOpenFlowInstanceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 23), Bits().clone(namedValues=NamedValues(("flowStatistics", 0), ("tableStatistics", 1), ("portStatistics", 2), ("groupStatistics", 3), ("meterStatistics", 4), ("blockPorts", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceCapabilities.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceCapabilities.setDescription('This MIB object specifies the instance capabilities exchanged with the controller.')
hpicfOpenFlowInstanceHwTableMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceHwTableMissCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceHwTableMissCount.setDescription('This MIB object specifies the number of packets which do not match any rules in the hardware table. This object is applicable only for an OpenFlow version 1.0 instance.')
hpicfOpenFlowInstanceTableModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("singleTable", 2), ("policyEngineAndSoftware", 3), ("ipControlWithPolicyEngineAndSoftware", 4), ("customPipeline", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceTableModel.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceTableModel.setDescription('This MIB object determines the table model of an OpenFlow instance.')
hpicfOpenFlowInstanceMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 26), VidList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembers.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembers.setDescription('This MIB object is used to add member VLANs to an OpenFlow instance.')
hpicfOpenFlowInstancePipelineModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("standardMatch", 1), ("ipcontrolTable", 2), ("customPipeline", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowInstancePipelineModel.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstancePipelineModel.setDescription('This MIB object is used to configure the openflow instance pipeline model. A value of 0(none) indicates no table pipeline model which is equal to standard match. A value of 1(standardMatch) enables an instance in advertising its policy-engine and software tables. A value of 2(ipControlTable) enables an OpenFlow 1.3 instance in advertising its IP control table. A value of 3(customPipeline) enables an OpenFlow controller to create a custom OpenFlow table pipeline in the OpenFlow 1.3 instance.')
hpicfOpenFlowInstanceDatapathDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceDatapathDesc.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceDatapathDesc.setDescription('This MIB object is a user-defined description of the data path. If not set, hpicfOpenFlowInstanceName is used.')
hpicfOpenFlowInstanceSourceMacGrpTable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceSourceMacGrpTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceSourceMacGrpTable.setDescription("This object is used to enable or disable the source MAC group table in the OpenFlow pipeline. This MIB object can be set to 'enable' only on one instance.")
hpicfOpenFlowInstanceDestMacGrpTable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceDestMacGrpTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceDestMacGrpTable.setDescription("This object is used to enable or disable the destination MAC group table in the OpenFlow table. This MIB object can be set to 'enable' only on one instance.")
hpicfOpenFlowInstanceMissRuleDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("normal", 2), ("ctrl", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMissRuleDefaultAction.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMissRuleDefaultAction.setDescription('This MIB object is used to configure the flow miss action associated with the instance. A value of 0(none) indicates no flow miss action specified, which is to drop all unknown packets. A value of 1(drop) enables an instance to drop all unknown packets. A value of 2(normal) enables an instance to forward all unknown packets using non-OpenFlow pipeline. A value of 3(ctrl) enables an instance to forward all unknown packets to the OpenFlow controller.')
hpicfOpenFlowInstanceOverrideProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 32), Bits().clone(namedValues=NamedValues(("stp", 0), ("gvrp", 1), ("mvrp", 2), ("lacp", 3), ("dot1x", 4), ("udld", 5), ("loopprotect", 6), ("pvst", 7), ("smartlink", 8), ("dldp", 9), ("bonjour", 10), ("traditionalPipeline", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceOverrideProtocol.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceOverrideProtocol.setDescription('This MIB object is used to configure the Override protocol associated with the instance.')
hpicfOpenFlowInstancePktInVlanTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("inputForm", 1), ("tagAlways", 2), ("untagAlways", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowInstancePktInVlanTagging.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstancePktInVlanTagging.setDescription('This MIB object is used to configure the 802.1q tagging property for a packet encapsulated inside the OpenFlow packet-in header. A value of 0 (default) indicates the default behavior which is the packet encapsulated inside a packet-in message will be tagged in the following cases a) the instance type is aggregate. b) the instance is a named instance with more than one member VLAN. c) the instance is a named instance and the packet was received with a tag. It will be untagged in all other cases. A value of 1 (inputForm) directs the instance to send the encapsulated packet as it was received on the physical port. A value of 2 (tagAlways) directs the instance to send the encapsulated packet always with an 802.1q tag irrespective of how it was received on the physical port. A value of 3 (untagAlways) directs the instance to send the encapsulated packet always without an 802.1q tag irrespective of how it was received on the physical port.')
hpicfOpenFlowInstanceMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 5), )
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembershipTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembershipTable.setDescription('Table used to add members to OpenFlow instances. This table is deprecated and instead object hpicfOpenFlowInstanceMembers is used to configure members for an OpenFlow instance.')
hpicfOpenFlowInstanceMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 5, 1), ).setIndexNames((0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceName"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembershipEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembershipEntry.setDescription('A set of objects that are used to add members to an OpenFlow instance.')
hpicfOpenFlowInstanceMembershipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembershipRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembershipRowStatus.setDescription('Row status for this member.')
hpicfOpenFlowControllerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6), )
if mibBuilder.loadTexts: hpicfOpenFlowControllerTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerTable.setDescription('Table used to configure controllers. For maximum number of OpenFlow controllers that can be supported, refer to hpicfOpenFlowMaxControllers MIB object.')
hpicfOpenFlowControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1), ).setIndexNames((0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerID"))
if mibBuilder.loadTexts: hpicfOpenFlowControllerEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerEntry.setDescription('A set of objects that are used to configure OpenFlow Controllers.')
hpicfOpenFlowControllerID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfOpenFlowControllerID.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerID.setDescription('Unique ID given to a Controller. This will be associated with an instance through hpicfOpenFlowInstanceControllerTable.')
hpicfOpenFlowControllerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowControllerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerInetAddressType.setDescription('Address type of this controller. This implementation supports only ipv4 type.')
hpicfOpenFlowControllerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowControllerInetAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerInetAddress.setDescription('IP Address of the controller.')
hpicfOpenFlowControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowControllerPort.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerPort.setDescription('The port over which the controller can be reached.')
hpicfOpenFlowControllerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowControllerInterface.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerInterface.setDescription('This MIB object specifies an interface over which the controller is reachable.')
hpicfOpenFlowControllerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowControllerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerRowStatus.setDescription("Row status for this table. The hpicfOpenFlowControllerInetAddress and hpicfOpenFlowControllerInterface MIB objects have to be set to valid values to move this object to 'active' state. This conceptual row can be deleted only if the corresponding controller association is removed from the hpicfOpenFlowInstanceControllerTable.")
hpicfOpenFlowControllerSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowControllerSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerSourceAddressType.setDescription('Address type of the Source IP. This implementation supports only ipv4 type.')
hpicfOpenFlowControllerSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 6, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowControllerSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerSourceAddress.setDescription('Source IP address to use when connecting to the controller.')
hpicfOpenFlowInstanceControllerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 8), )
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerTable.setDescription('Table that contains objects for connection state and status between an OpenFlow instance and a controller.')
hpicfOpenFlowInstanceControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 8, 1), ).setIndexNames((0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceName"), (0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerID"))
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerEntry.setDescription('A set of objects used to monitor the status and state of connection between an OpenFlow instance and controller.')
hpicfOpenFlowInstanceControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerStatus.setDescription('Connection status between an OpenFlow instance and a controller.')
hpicfOpenFlowInstanceControllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("void", 1), ("backoff", 2), ("connecting", 3), ("active", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerState.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerState.setDescription("Connection state between an OpenFlow instance and a controller. The state 'void' implies that there is no connection. The state 'backoff' represents a state where the device is attempting to reconnect to the controller at increasing intervals of time. The state 'connecting' represents a state where the device is in the process of connecting to the controller. The state 'active' implies that a connection has been established and that the controller is responsive. The state 'idle' implies that the connection is idle and waiting for a response.")
hpicfOpenFlowInstanceControllerRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("equal", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerRole.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerRole.setDescription('Role of a controller in an instance. The default role of a controller is equal. In this role, the controller has full access to the switch and is equal to other controllers in the same role. In slave role, the controller has read-only access to the switch. The master role is similar to equal and has full access to the switch, the difference is that the switch ensures it is the only controller in this role. When a controller changes its role to master, the switch changes all other controllers with the role master to have the role slave.')
hpicfOpenFlowInstanceControllerConnSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 8, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerConnSecure.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerConnSecure.setDescription('This object indicates if the connection between the controller and instance is secure. Setting this MIB to true will initiate TLS as transport protocol.')
hpicfOpenFlowInstanceControllerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerRowStatus.setDescription("Row status for this table. Row transition to 'createAndWait', 'notReady' and 'notInService' states are not allowed.")
hpicfOpenFlowMaxInstances = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowMaxInstances.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowMaxInstances.setDescription('This MIB object specifies the maximum number of OpenFlow instances.')
hpicfOpenFlowMaxFlows = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowMaxFlows.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowMaxFlows.setDescription('This MIB objects specifies the total number of flows that can be supported on the switch. That is, the sum of all hardware flows and software flows across all OpenFlow instances cannot exceed this number.')
hpicfOpenFlowMaxControllers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowMaxControllers.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowMaxControllers.setDescription('This MIB object specifies the maximum number of OpenFlow controllers.')
hpicfOpenFlowInstanceMeterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 19), )
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterTable.setDescription('Table that contains objects related to meters of an OpenFlow instance. This table is populated when meters are configured from controller.')
hpicfOpenFlowInstanceMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 19, 1), ).setIndexNames((0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceName"), (0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterID"))
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterEntry.setDescription('A set of objects used to retrieve details about meters associated with an OpenFlow instance.')
hpicfOpenFlowInstanceMeterID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterID.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterID.setDescription('Unique ID given to a meter.')
hpicfOpenFlowInstanceMeterFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 19, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterFlowCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterFlowCount.setDescription('Number of flows on which this meter is applied.')
hpicfOpenFlowInstanceMeterInputPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 19, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterInputPktCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterInputPktCount.setDescription('Number of packets processed by this meter.')
hpicfOpenFlowInstanceMeterInputByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 19, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterInputByteCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterInputByteCount.setDescription('Number of bytes processed by this meter.')
hpicfOpenFlowInstanceMeterDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 19, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterDuration.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterDuration.setDescription('Duration for which this meter is active.')
hpicfOpenFlowInstanceMeterBandTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20), )
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandTable.setDescription('Table that contains objects related to meter bands for a specific meter in an OpenFlow instance. This table is populated when meters and their bands are configured from controller.')
hpicfOpenFlowInstanceMeterBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20, 1), ).setIndexNames((0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceName"), (0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterID"), (0, "HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandID"))
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandEntry.setDescription('A set of objects used to retrieve details about meter bands associated with a meter and an OpenFlow instance.')
hpicfOpenFlowInstanceMeterBandID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandID.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandID.setDescription('Unique ID given to a band in a meter.')
hpicfOpenFlowInstanceMeterBandType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("mark", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandType.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandType.setDescription('This meter band type determines how the packets are processed.')
hpicfOpenFlowInstanceMeterBandRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandRate.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandRate.setDescription('This MIB object specifies the rate beyond which the incoming packets would be treated according to action specified by hpicfOpenFlowInstanceMeterBandType MIB. The units of this rate is determined by the hpicfOpenFlowInstanceMeterBandRateUnit MIB')
hpicfOpenFlowInstanceMeterBandRateUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps", 1), ("pps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandRateUnit.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandRateUnit.setDescription('This MIB object specifies the unit for hpicfOpenFlowInstanceMeterBandRate MIB. The units can be either kilobits per second or packets per second.')
hpicfOpenFlowInstanceMeterInBandPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterInBandPktCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterInBandPktCount.setDescription('Number of packets processed by this meter.')
hpicfOpenFlowInstanceMeterInBandByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterInBandByteCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterInBandByteCount.setDescription('Number of bytes processed by this meter.')
hpicfOpenFlowInstanceMeterPrecedenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 20, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterPrecedenceLevel.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterPrecedenceLevel.setDescription('DSCP Precedence level of the band in a meter.')
hpicfOpenFlowScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 21))
hpicfOpenFlowIPControlTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 21, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowIPControlTableUsage.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowIPControlTableUsage.setDescription('This object is used to specify maximum percentage of IP control table resources that can be used by OpenFlow. The percentage is not a guarantee, but a maximum allowed limit.')
hpicfOpenFlowIPControlTableStatsRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 21, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOpenFlowIPControlTableStatsRefreshRate.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowIPControlTableStatsRefreshRate.setDescription("This MIB object is used to specify the time interval at which the hardware will be polled for statistics. A value of '0' would mean that the hardware will no longer be polled to update the statistics.")
hpicfOpenFlowIpControlTableMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 21, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowIpControlTableMode.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowIpControlTableMode.setDescription('This MIB object specifies the OpenFlow operation mode. In this mode, IP control table would be advertised by an OpenFlow 1.3 instance.')
hpicfOpenFlowEgressOnlyPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 1, 21, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOpenFlowEgressOnlyPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowEgressOnlyPorts.setDescription("Setting this MIB object to 'enable' will advertise egress-only ports to the controller.")
hpicfOpenFlowCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 1))
hpicfOpenFlowGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2))
hpicfOpenFlowGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 1)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowMaxInstances"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowMaxFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowMaxControllers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowGlobalConfigGroup = hpicfOpenFlowGlobalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowGlobalConfigGroup.setDescription('Controls the global configuration of OpenFlow status and allocation of policy engine resource.')
hpicfOpenFlowInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 2)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceAdminStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPortCfg"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPort"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPortIsOobm"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceFlowLocationMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowConnectionInterruptionMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceHwRateLimit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceSwRateLimit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDatapathID"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfHwFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfSwFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOperStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMaxBackOffInterval"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceRowStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProbeInterval"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProtoVersion"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProtoVersionOnly"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfSwFlowTable"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOperStatusReason"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceEgressOnlyPorts"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceCapabilities"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceHwTableMissCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceTableModel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowInstanceGroup = hpicfOpenFlowInstanceGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceGroup.setDescription('A collection of objects used to define an OpenFlow instance.')
hpicfOpenFlowInstanceMembershipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 3)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMembershipRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowInstanceMembershipGroup = hpicfOpenFlowInstanceMembershipGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMembershipGroup.setDescription('An object used to associate a member to an OpenFlow instance.')
hpicfOpenFlowControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 4)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerInetAddressType"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerInetAddress"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerPort"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerInterface"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowControllerGroup = hpicfOpenFlowControllerGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowControllerGroup.setDescription('A collection of objects used to define controllers.')
hpicfOpenFlowInstanceControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 6)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerState"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerRole"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerConnSecure"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowInstanceControllerGroup = hpicfOpenFlowInstanceControllerGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceControllerGroup.setDescription('A set of objects used to monitor the status and state of an OpenFlow Instance and controller connection.')
hpicfOpenFlowInstanceMeterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 13)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterFlowCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterInputPktCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterInputByteCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowInstanceMeterGroup = hpicfOpenFlowInstanceMeterGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterGroup.setDescription('A collection of objects used to retrieve details about instance-specific meters.')
hpicfOpenFlowInstanceMeterBandGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 14)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandType"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandRate"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandRateUnit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterInBandPktCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterInBandByteCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterPrecedenceLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowInstanceMeterBandGroup = hpicfOpenFlowInstanceMeterBandGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceMeterBandGroup.setDescription('A collection of objects used to retrieve details about meter band types.')
hpicfOpenFlowScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 15)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowIPControlTableUsage"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowIPControlTableStatsRefreshRate"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowIpControlTableMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowEgressOnlyPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowScalarsGroup = hpicfOpenFlowScalarsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowScalarsGroup.setDescription('Basic Scalars required for OpenFlow implementation.')
hpicfOpenFlowInstanceGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 16)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceAdminStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPortCfg"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPort"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPortIsOobm"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceFlowLocationMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowConnectionInterruptionMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceHwRateLimit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceSwRateLimit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDatapathID"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfHwFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfSwFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOperStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMaxBackOffInterval"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceRowStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProbeInterval"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProtoVersion"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProtoVersionOnly"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfSwFlowTable"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOperStatusReason"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceEgressOnlyPorts"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceCapabilities"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceHwTableMissCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceTableModel"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMembers"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstancePipelineModel"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDatapathDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowInstanceGroup1 = hpicfOpenFlowInstanceGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceGroup1.setDescription('A collection of objects used to define an OpenFlow instance.')
hpicfOpenFlowScalarsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 17)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowIPControlTableUsage"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowIPControlTableStatsRefreshRate"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowEgressOnlyPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowScalarsGroup1 = hpicfOpenFlowScalarsGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowScalarsGroup1.setDescription('Basic Scalars required for OpenFlow implementation.')
hpicfOpenFlowInstanceGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 20)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceAdminStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPortCfg"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPort"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPortIsOobm"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceFlowLocationMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowConnectionInterruptionMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceHwRateLimit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceSwRateLimit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDatapathID"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfHwFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfSwFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOperStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMaxBackOffInterval"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceRowStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProbeInterval"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProtoVersion"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProtoVersionOnly"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfSwFlowTable"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOperStatusReason"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceEgressOnlyPorts"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceCapabilities"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceHwTableMissCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceTableModel"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMembers"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstancePipelineModel"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDatapathDesc"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceSourceMacGrpTable"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDestMacGrpTable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowInstanceGroup2 = hpicfOpenFlowInstanceGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceGroup2.setDescription('A collection of objects used to define an OpenFlow instance.')
hpicfOpenFlowInstanceGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 21)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceAdminStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPortCfg"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPort"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceListenPortIsOobm"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceFlowLocationMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowConnectionInterruptionMode"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceHwRateLimit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceSwRateLimit"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDatapathID"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfHwFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfSwFlows"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOperStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMaxBackOffInterval"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceRowStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProbeInterval"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProtoVersion"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceProtoVersionOnly"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceNumOfSwFlowTable"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOperStatusReason"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceEgressOnlyPorts"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceCapabilities"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceHwTableMissCount"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceTableModel"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMembers"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstancePipelineModel"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDatapathDesc"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceSourceMacGrpTable"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceDestMacGrpTable"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMissRuleDefaultAction"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceOverrideProtocol"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstancePktInVlanTagging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowInstanceGroup3 = hpicfOpenFlowInstanceGroup3.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowInstanceGroup3.setDescription('A collection of objects used to define an OpenFlow instance.')
hpicfOpenFlowControllerGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 2, 22)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerInetAddressType"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerInetAddress"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerPort"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerInterface"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerRowStatus"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerSourceAddressType"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerSourceAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowControllerGroup1 = hpicfOpenFlowControllerGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowControllerGroup1.setDescription('A collection of objects used to define controllers.')
hpicfOpenFlowCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 1, 1)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowGlobalConfigGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMembershipGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowScalarsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowCompliance = hpicfOpenFlowCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowCompliance.setDescription('This compliance statement is for devices supporting OpenFlow. The basic support for OpenFlow requires implementation of the objects listed in the mandatory groups.')
hpicfOpenFlowCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 1, 2)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowGlobalConfigGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceGroup1"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowScalarsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowCompliance1 = hpicfOpenFlowCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowCompliance1.setDescription('This compliance statement is for devices supporting OpenFlow. The basic support for OpenFlow requires implementation of the objects listed in the mandatory groups.')
hpicfOpenFlowCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 1, 3)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowGlobalConfigGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceGroup2"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowScalarsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowCompliance2 = hpicfOpenFlowCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowCompliance2.setDescription('This compliance statement is for devices supporting OpenFlow. The basic support for OpenFlow requires implementation of the objects listed in the mandatory groups.')
hpicfOpenFlowCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 1, 4)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowGlobalConfigGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceGroup3"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowScalarsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowCompliance3 = hpicfOpenFlowCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOpenFlowCompliance3.setDescription('This compliance statement is for devices supporting OpenFlow. The basic support for OpenFlow requires implementation of the objects listed in the mandatory groups.')
hpicfOpenFlowCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 89, 2, 1, 5)).setObjects(("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowGlobalConfigGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceGroup3"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowControllerGroup1"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceControllerGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowInstanceMeterBandGroup"), ("HP-ICF-OPENFLOW-MIB", "hpicfOpenFlowScalarsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOpenFlowCompliance4 = hpicfOpenFlowCompliance4.setStatus('current')
if mibBuilder.loadTexts: hpicfOpenFlowCompliance4.setDescription('This compliance statement is for devices supporting OpenFlow. The basic support for OpenFlow requires implementation of the objects listed in the mandatory groups.')
mibBuilder.exportSymbols("HP-ICF-OPENFLOW-MIB", hpicfOpenFlowInstanceControllerStatus=hpicfOpenFlowInstanceControllerStatus, hpicfOpenFlowConformance=hpicfOpenFlowConformance, hpicfOpenFlowInstanceHwTableMissCount=hpicfOpenFlowInstanceHwTableMissCount, hpicfOpenFlowInstanceMeterBandType=hpicfOpenFlowInstanceMeterBandType, hpicfOpenFlowCompliances=hpicfOpenFlowCompliances, hpicfOpenFlowMIB=hpicfOpenFlowMIB, hpicfOpenFlowControllerRowStatus=hpicfOpenFlowControllerRowStatus, hpicfOpenFlowInstanceOverrideProtocol=hpicfOpenFlowInstanceOverrideProtocol, hpicfOpenFlowControllerInterface=hpicfOpenFlowControllerInterface, hpicfOpenFlowInstanceMeterBandRate=hpicfOpenFlowInstanceMeterBandRate, hpicfOpenFlowStatus=hpicfOpenFlowStatus, hpicfOpenFlowInstanceFlowLocationMode=hpicfOpenFlowInstanceFlowLocationMode, hpicfOpenFlowInstanceNumOfHwFlows=hpicfOpenFlowInstanceNumOfHwFlows, hpicfOpenFlowControllerInetAddressType=hpicfOpenFlowControllerInetAddressType, hpicfOpenFlowInstanceGroup3=hpicfOpenFlowInstanceGroup3, hpicfOpenFlowInstanceMeterBandID=hpicfOpenFlowInstanceMeterBandID, hpicfOpenFlowInstanceMeterInputByteCount=hpicfOpenFlowInstanceMeterInputByteCount, hpicfOpenFlowInstanceMissRuleDefaultAction=hpicfOpenFlowInstanceMissRuleDefaultAction, hpicfOpenFlowInstanceDestMacGrpTable=hpicfOpenFlowInstanceDestMacGrpTable, hpicfOpenFlowInstanceControllerState=hpicfOpenFlowInstanceControllerState, hpicfOpenFlowIpControlTableMode=hpicfOpenFlowIpControlTableMode, hpicfOpenFlowInstanceSourceMacGrpTable=hpicfOpenFlowInstanceSourceMacGrpTable, hpicfOpenFlowInstanceMeterInBandPktCount=hpicfOpenFlowInstanceMeterInBandPktCount, hpicfOpenFlowInstanceMeterInBandByteCount=hpicfOpenFlowInstanceMeterInBandByteCount, hpicfOpenFlowControllerInetAddress=hpicfOpenFlowControllerInetAddress, hpicfOpenFlowInstanceControllerTable=hpicfOpenFlowInstanceControllerTable, hpicfOpenFlowControllerSourceAddress=hpicfOpenFlowControllerSourceAddress, hpicfOpenFlowInstanceOperStatusReason=hpicfOpenFlowInstanceOperStatusReason, hpicfOpenFlowCompliance=hpicfOpenFlowCompliance, hpicfOpenFlowControllerGroup=hpicfOpenFlowControllerGroup, hpicfOpenFlowIPControlTableStatsRefreshRate=hpicfOpenFlowIPControlTableStatsRefreshRate, hpicfOpenFlowInstanceMeterTable=hpicfOpenFlowInstanceMeterTable, hpicfOpenFlowInstanceGroup2=hpicfOpenFlowInstanceGroup2, hpicfOpenFlowInstanceDatapathID=hpicfOpenFlowInstanceDatapathID, hpicfOpenFlowCompliance3=hpicfOpenFlowCompliance3, hpicfOpenFlowInstanceControllerConnSecure=hpicfOpenFlowInstanceControllerConnSecure, hpicfOpenFlowScalarsGroup=hpicfOpenFlowScalarsGroup, hpicfOpenFlowInstanceGroup1=hpicfOpenFlowInstanceGroup1, hpicfOpenFlowInstanceRowStatus=hpicfOpenFlowInstanceRowStatus, hpicfOpenFlowInstanceMeterBandTable=hpicfOpenFlowInstanceMeterBandTable, hpicfOpenFlowInstanceGroup=hpicfOpenFlowInstanceGroup, hpicfOpenFlowInstancePktInVlanTagging=hpicfOpenFlowInstancePktInVlanTagging, hpicfOpenFlowInstanceControllerRole=hpicfOpenFlowInstanceControllerRole, hpicfOpenFlowInstanceSwRateLimit=hpicfOpenFlowInstanceSwRateLimit, hpicfOpenFlowInstanceAdminStatus=hpicfOpenFlowInstanceAdminStatus, hpicfOpenFlowControllerEntry=hpicfOpenFlowControllerEntry, hpicfOpenFlowNotifications=hpicfOpenFlowNotifications, hpicfOpenFlowInstanceMembershipRowStatus=hpicfOpenFlowInstanceMembershipRowStatus, hpicfOpenFlowInstanceMembershipGroup=hpicfOpenFlowInstanceMembershipGroup, hpicfOpenFlowInstanceTableModel=hpicfOpenFlowInstanceTableModel, hpicfOpenFlowInstanceNumOfSwFlows=hpicfOpenFlowInstanceNumOfSwFlows, hpicfOpenFlowInstanceProtoVersion=hpicfOpenFlowInstanceProtoVersion, hpicfOpenFlowScalarObjects=hpicfOpenFlowScalarObjects, hpicfOpenFlowInstanceMembershipEntry=hpicfOpenFlowInstanceMembershipEntry, hpicfOpenFlowControllerPort=hpicfOpenFlowControllerPort, hpicfOpenFlowCompliance1=hpicfOpenFlowCompliance1, hpicfOpenFlowInstanceName=hpicfOpenFlowInstanceName, hpicfOpenFlowInstancePipelineModel=hpicfOpenFlowInstancePipelineModel, hpicfOpenFlowInstanceHwRateLimit=hpicfOpenFlowInstanceHwRateLimit, hpicfOpenFlowInstanceMembers=hpicfOpenFlowInstanceMembers, hpicfOpenFlowMaxControllers=hpicfOpenFlowMaxControllers, hpicfOpenFlowGlobalConfigGroup=hpicfOpenFlowGlobalConfigGroup, hpicfOpenFlowInstanceMeterBandEntry=hpicfOpenFlowInstanceMeterBandEntry, hpicfOpenFlowInstanceEgressOnlyPorts=hpicfOpenFlowInstanceEgressOnlyPorts, hpicfOpenFlowInstanceMembershipTable=hpicfOpenFlowInstanceMembershipTable, hpicfOpenFlowInstanceMeterEntry=hpicfOpenFlowInstanceMeterEntry, hpicfOpenFlowInstanceControllerGroup=hpicfOpenFlowInstanceControllerGroup, hpicfOpenFlowInstanceControllerRowStatus=hpicfOpenFlowInstanceControllerRowStatus, hpicfOpenFlowInstanceNumOfSwFlowTable=hpicfOpenFlowInstanceNumOfSwFlowTable, hpicfOpenFlowControllerSourceAddressType=hpicfOpenFlowControllerSourceAddressType, hpicfOpenFlowInstanceMeterID=hpicfOpenFlowInstanceMeterID, hpicfOpenFlowInstanceControllerEntry=hpicfOpenFlowInstanceControllerEntry, hpicfOpenFlowInstanceMeterGroup=hpicfOpenFlowInstanceMeterGroup, hpicfOpenFlowObjects=hpicfOpenFlowObjects, hpicfOpenFlowScalarsGroup1=hpicfOpenFlowScalarsGroup1, hpicfOpenFlowInstanceMeterBandGroup=hpicfOpenFlowInstanceMeterBandGroup, hpicfOpenFlowMaxFlows=hpicfOpenFlowMaxFlows, hpicfOpenFlowInstanceMeterPrecedenceLevel=hpicfOpenFlowInstanceMeterPrecedenceLevel, hpicfOpenFlowInstanceEntry=hpicfOpenFlowInstanceEntry, hpicfOpenFlowInstanceMode=hpicfOpenFlowInstanceMode, hpicfOpenFlowInstanceProbeInterval=hpicfOpenFlowInstanceProbeInterval, hpicfOpenFlowInstanceListenPort=hpicfOpenFlowInstanceListenPort, hpicfOpenFlowInstanceProtoVersionOnly=hpicfOpenFlowInstanceProtoVersionOnly, hpicfOpenFlowGroups=hpicfOpenFlowGroups, hpicfOpenFlowInstanceOperStatus=hpicfOpenFlowInstanceOperStatus, hpicfOpenFlowInstanceMaxBackOffInterval=hpicfOpenFlowInstanceMaxBackOffInterval, hpicfOpenFlowInstanceDatapathDesc=hpicfOpenFlowInstanceDatapathDesc, PYSNMP_MODULE_ID=hpicfOpenFlowMIB, hpicfOpenFlowInstanceMeterDuration=hpicfOpenFlowInstanceMeterDuration, hpicfOpenFlowControllerID=hpicfOpenFlowControllerID, hpicfOpenFlowInstanceCapabilities=hpicfOpenFlowInstanceCapabilities, hpicfOpenFlowIPControlTableUsage=hpicfOpenFlowIPControlTableUsage, hpicfOpenFlowEgressOnlyPorts=hpicfOpenFlowEgressOnlyPorts, hpicfOpenFlowControllerGroup1=hpicfOpenFlowControllerGroup1, hpicfOpenFlowInstanceListenPortCfg=hpicfOpenFlowInstanceListenPortCfg, hpicfOpenFlowInstanceMeterFlowCount=hpicfOpenFlowInstanceMeterFlowCount, hpicfOpenFlowInstanceListenPortIsOobm=hpicfOpenFlowInstanceListenPortIsOobm, hpicfOpenFlowInstanceMeterInputPktCount=hpicfOpenFlowInstanceMeterInputPktCount, hpicfOpenFlowControllerTable=hpicfOpenFlowControllerTable, hpicfOpenFlowInstanceTable=hpicfOpenFlowInstanceTable, hpicfOpenFlowInstanceMeterBandRateUnit=hpicfOpenFlowInstanceMeterBandRateUnit, hpicfOpenFlowCompliance4=hpicfOpenFlowCompliance4, hpicfOpenFlowConnectionInterruptionMode=hpicfOpenFlowConnectionInterruptionMode, hpicfOpenFlowMaxInstances=hpicfOpenFlowMaxInstances, hpicfOpenFlowCompliance2=hpicfOpenFlowCompliance2)
