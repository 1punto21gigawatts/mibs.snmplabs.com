#
# PySNMP MIB module HPN-ICF-EVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-EVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, NotificationType, Counter64, iso, Integer32, Gauge32, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "NotificationType", "Counter64", "iso", "Integer32", "Gauge32", "Bits", "MibIdentifier")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
hpnicfEvc = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106))
hpnicfEvc.setRevisions(('2009-08-08 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfEvc.setRevisionsDescriptions(('The initial version of this MIB.',))
if mibBuilder.loadTexts: hpnicfEvc.setLastUpdated('200908081000Z')
if mibBuilder.loadTexts: hpnicfEvc.setOrganization('')
if mibBuilder.loadTexts: hpnicfEvc.setContactInfo('')
if mibBuilder.loadTexts: hpnicfEvc.setDescription('Ethernet Virtual Connection MIB')
hpnicfEvcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1))
hpnicfEvcScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 1))
hpnicfEvcSrvInstEncapCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 1, 1), Bits().clone(namedValues=NamedValues(("encapDefault", 0), ("encapUntagged", 1), ("encapTagged", 2), ("encapSvlanId", 3), ("encapSvlanIdList", 4), ("encapSvlanIdOnlyTagged", 5), ("encapSvlanIdCvlanId", 6), ("encapSvlanIdCvlanIdList", 7), ("encapCvlanId", 8), ("encapCvlanIdList", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstEncapCapabilities.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstEncapCapabilities.setDescription('This object displays the encapsulation capabilities of service instance with respect to certain fields. The following values may be supported: encapDefault: Support for matching packets by the default criteria which matches packets that do not match any other service instance. encapUntagged: Support for matching untagged packets. encapTagged: Support for matching all tagged packets. encapSvlanId: Support for matching packets by an SVLAN ID, and the packets may be untagged if PVID of the port is the SVLAN ID when the encapSvlanIdOnlyTagged field is not set. encapSvlanIdList: Support for matching packets by SVLAN ID list, and the packets may be untagged if PVID of the port is in SVLAN ID list when the encapSvlanIdOnlyTagged field is not set. encapSvlanIdOnlyTagged: Support for matching only tagged packets by an SVLAN ID or a SVLAN ID list. encapSvlanIdCvlanId: Support for matching packets by an SVLAN ID and a CVLAN ID. encapSvlanIdCvlanIdList: Support for matching packets by an SVLAN ID and a CVLAN ID list. encapCvlanId: Support for matching packets by a CVLAN ID. encapCvlanIdList: Support for matching packets by a CVLAN ID list.')
hpnicfEvcPortMaxSrvInstNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcPortMaxSrvInstNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcPortMaxSrvInstNum.setDescription('The max service instance number of a port.')
hpnicfEvcSrvInstTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2), )
if mibBuilder.loadTexts: hpnicfEvcSrvInstTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstTable.setDescription('A table for configuring service instance parameter of the port.')
hpnicfEvcSrvInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EVC-MIB", "hpnicfEvcSrvInstId"))
if mibBuilder.loadTexts: hpnicfEvcSrvInstEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstEntry.setDescription('An entry for configuring service instance parameter of the port.')
hpnicfEvcSrvInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfEvcSrvInstId.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstId.setDescription('Service instance ID. Its value ranges from 1 to the value of hpnicfEvcPortMaxSrvInstNum.')
hpnicfEvcSrvInstEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("default", 1), ("untagged", 2), ("tagged", 3), ("svlanIdList", 4), ("svlanIdListOnlyTagged", 5), ("svlanIdCvlanId", 6), ("svlanIdCvlanIdList", 7), ("svlanIdCvlanIdAll", 8), ("cvlanIdList", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstEncap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstEncap.setDescription('Encapsulation mode of a service instance. none : Invalid value. default : Match packets by the default criteria which matches packets that do not match any other service instance. It is supported when the encapDefault field of hpnicfEvcCapabilities is set. untagged : Match untagged packets. It is supported when the encapUntagged field of hpnicfEvcCapabilities is set. tagged : Match all tagged packets. It is supported when the encapTagged field of hpnicfEvcCapabilities is set. svlanIdList: Match packets by SVLAN ID list and untagged packets if PVID of the port is in SVLAN ID list, the SVLAN ID list is denoted by hpnicfEvcSrvInstSvlanIdListLow and hpnicfEvcSrvInstSvlanIdListHigh. It is supported when the encapSvlanId or encapSvlanIdList field of hpnicfEvcCapabilities is set. Only a VLAN ID is supported when the encapSvlanId field of hpnicfEvcCapabilities is set. svlanIdListOnlyTagged: Match only tagged packets by an SVLAN ID list, the SVLAN ID is denoted by hpnicfEvcSrvInstSvlanIdListLow and hpnicfEvcSrvInstSvlanIdListLow. It is supported when the encapSvlanId (or encapSvlanIdList) and encapSvlanIdOnlyTagged fields of hpnicfEvcCapabilities are set. Only a VLAN ID is supported when the encapSvlanId and encapSvlanIdOnlyTagged field of hpnicfEvcCapabilities are set. svlanIdCvlanId: Match packets by an SVLAN ID and a CVLAN ID. The SVLAN ID is denoted by hpnicfEvcSrvInstSvlanIdListLow or hpnicfEvcSrvInstSvlanIdListHigh. The CVLAN ID is denoted by hpnicfEvcSrvInstCvlanIdListLow or hpnicfEvcSrvInstCvlanIdListHigh. It is supported when the encapSvlanIdCvlanId field of hpnicfEvcCapabilities is set. svlanIdCvlanIdList: Match packets by an SVLAN ID and a CVLAN ID list. The SVLAN ID is denoted by hpnicfEvcSrvInstSvlanIdListLow or hpnicfEvcSrvInstSvlanIdListHigh. The CVLAN ID list is denoted by hpnicfEvcSrvInstCvlanIdListLow and hpnicfEvcSrvInstCvlanIdListHigh. It is supported when the encapSvlanIdCvlanIdList field of hpnicfEvcCapabilities is set. svlanIdCvlanIdAll: Match packets by an SVLAN ID and all CVLAN IDs. The SVLAN ID is denoted by hpnicfEvcSrvInstSvlanIdListLow or hpnicfEvcSrvInstSvlanIdListHigh. The CVLAN ID includes all VLAN IDs. It is supported when the encapSvlanIdCvlanIdList field of hpnicfEvcCapabilities is set. cvlanIdList: Match packets by CVLAN ID list. The CVLAN ID list is denoted by hpnicfEvcSrvInstCvlanIdListLow and hpnicfEvcSrvInstCvlanIdListLow. It is supported when the encapCvlanId or encapCvlanIdList field of hpnicfEvcCapabilities is set.')
hpnicfEvcSrvInstSvlanIdListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstSvlanIdListLow.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstSvlanIdListLow.setDescription('This object contains the first 2048 bits of the 4096-bit vector, indicating which SVLAN IDs are assigned to this service instance. The lowest order bit of the first octet corresponds to SVLAN 1, while the highest order bit of the last octet corresponds to SVLAN 2048. A bit that is on (equal to 1) indicates that the corresponding SVLAN ID is assigned to this service instance.')
hpnicfEvcSrvInstSvlanIdListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstSvlanIdListHigh.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstSvlanIdListHigh.setDescription('This object contains the second 2048 bits of the 4096-bit vector, indicating which SVLAN IDs are assigned to this service instance. The lowest order bit of the first octet corresponds to SVLAN 2049, while the third highest order bit of the last octet corresponds to SVLAN 4094. A bit that is on (equal to 1) indicates that the corresponding SVLAN ID is assigned to this service instance.')
hpnicfEvcSrvInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstRowStatus.setDescription('Operation status of this table entry. When a row in this table is in active state, no objects in that row can be modified by the agent.')
hpnicfEvcSrvInstEnableInStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstEnableInStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstEnableInStat.setDescription('The object is used to configure inbound statistics function to this service instance.')
hpnicfEvcSrvInstEnableOutStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstEnableOutStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstEnableOutStat.setDescription('The object is used to configure outbound statistics function to this service instance.')
hpnicfEvcSrvInstCvlanIdListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstCvlanIdListLow.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstCvlanIdListLow.setDescription('This object contains the first 2048 bits of the 4096-bit vector, indicating which CVLAN IDs are assigned to this service instance. The lowest order bit of the first octet corresponds to CVLAN 1, while the highest order bit of the last octet corresponds to CVLAN 2048. A bit that is on (equal to 1) indicates that the corresponding CVLAN ID is assigned to this service instance.')
hpnicfEvcSrvInstCvlanIdListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEvcSrvInstCvlanIdListHigh.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstCvlanIdListHigh.setDescription('This object contains the second 2048 bits of the 4096-bit vector, indicating which CVLAN IDs are assigned to this service instance. The lowest order bit of the first octet corresponds to CVLAN 2049, while the third highest order bit of the last octet corresponds to CVLAN 4094. A bit that is on (equal to 1) indicates that the corresponding CVLAN ID is assigned to this service instance.')
hpnicfEvcSrvInstCarTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 3), )
if mibBuilder.loadTexts: hpnicfEvcSrvInstCarTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstCarTable.setDescription('A table of configuring CAR for the service instance.')
hpnicfEvcSrvInstCarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EVC-MIB", "hpnicfEvcSrvInstId"))
if mibBuilder.loadTexts: hpnicfEvcSrvInstCarEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstCarEntry.setDescription('An entry in the table containing CAR configuration on the service instance. If the following entries are not supported by the service instance, or not configured to the service instance, they are zero.')
hpnicfEvcSrvInstInCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEvcSrvInstInCarIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstInCarIndex.setDescription('The object is used to configure inbound CAR function to this service instance. The CAR index is defined in hpnicfIfQoSAggregativeCarIndex at HPN-ICF-IFQOS2-MIB. The default value is 0.')
hpnicfEvcSrvInstOutCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutCarIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutCarIndex.setDescription('The object is used to configure outbound CAR function to this service instance. The CAR index is defined in hpnicfIfQoSAggregativeCarIndex at HPN-ICF-IFQOS2-MIB. The default value is 0.')
hpnicfEvcSrvInstStatInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4), )
if mibBuilder.loadTexts: hpnicfEvcSrvInstStatInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstStatInfoTable.setDescription('A table for displaying statistics information of service instance.')
hpnicfEvcSrvInstStatInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EVC-MIB", "hpnicfEvcSrvInstId"))
if mibBuilder.loadTexts: hpnicfEvcSrvInstStatInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstStatInfoEntry.setDescription('Table entry of the service instance. If the statistics function is not supported by the service instance, or not configured to the service instance, following entries will be zero.')
hpnicfEvcSrvInstInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstInPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstInPackets.setDescription('Number of inbound packets received on this service instance.')
hpnicfEvcSrvInstInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstInBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstInBytes.setDescription('Byte counts of inbound packets received on this service instance.')
hpnicfEvcSrvInstOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutPackets.setDescription('Number of outbound packets transmitted on this service instance.')
hpnicfEvcSrvInstOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 106, 1, 4, 1, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfEvcSrvInstOutBytes.setDescription('Byte counts of outbound packets transmitted on this service instance.')
mibBuilder.exportSymbols("HPN-ICF-EVC-MIB", hpnicfEvcSrvInstCvlanIdListLow=hpnicfEvcSrvInstCvlanIdListLow, hpnicfEvcPortMaxSrvInstNum=hpnicfEvcPortMaxSrvInstNum, hpnicfEvcSrvInstEncapCapabilities=hpnicfEvcSrvInstEncapCapabilities, hpnicfEvcSrvInstId=hpnicfEvcSrvInstId, hpnicfEvcSrvInstStatInfoTable=hpnicfEvcSrvInstStatInfoTable, hpnicfEvcSrvInstRowStatus=hpnicfEvcSrvInstRowStatus, hpnicfEvcSrvInstOutBytes=hpnicfEvcSrvInstOutBytes, hpnicfEvcSrvInstEnableOutStat=hpnicfEvcSrvInstEnableOutStat, hpnicfEvcSrvInstEncap=hpnicfEvcSrvInstEncap, hpnicfEvcSrvInstCvlanIdListHigh=hpnicfEvcSrvInstCvlanIdListHigh, hpnicfEvcObjects=hpnicfEvcObjects, hpnicfEvcSrvInstOutPackets=hpnicfEvcSrvInstOutPackets, hpnicfEvcSrvInstTable=hpnicfEvcSrvInstTable, hpnicfEvcSrvInstCarTable=hpnicfEvcSrvInstCarTable, hpnicfEvcScalarGroup=hpnicfEvcScalarGroup, hpnicfEvcSrvInstStatInfoEntry=hpnicfEvcSrvInstStatInfoEntry, hpnicfEvcSrvInstInBytes=hpnicfEvcSrvInstInBytes, hpnicfEvcSrvInstSvlanIdListHigh=hpnicfEvcSrvInstSvlanIdListHigh, hpnicfEvcSrvInstCarEntry=hpnicfEvcSrvInstCarEntry, hpnicfEvcSrvInstSvlanIdListLow=hpnicfEvcSrvInstSvlanIdListLow, hpnicfEvc=hpnicfEvc, hpnicfEvcSrvInstInPackets=hpnicfEvcSrvInstInPackets, hpnicfEvcSrvInstInCarIndex=hpnicfEvcSrvInstInCarIndex, hpnicfEvcSrvInstEntry=hpnicfEvcSrvInstEntry, hpnicfEvcSrvInstOutCarIndex=hpnicfEvcSrvInstOutCarIndex, PYSNMP_MODULE_ID=hpnicfEvc, hpnicfEvcSrvInstEnableInStat=hpnicfEvcSrvInstEnableInStat)
