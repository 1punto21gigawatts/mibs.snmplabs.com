#
# PySNMP MIB module CISCO-GPRS-GTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GPRS-GTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, iso, Gauge32, TimeTicks, NotificationType, ModuleIdentity, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Unsigned32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Gauge32", "TimeTicks", "NotificationType", "ModuleIdentity", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Unsigned32", "Counter64", "ObjectIdentity")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
ciscoGprsGtpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 48))
ciscoGprsGtpMIB.setRevisions(('2005-09-19 00:00', '2001-07-30 00:00', '2001-03-08 00:00', '1999-07-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGprsGtpMIB.setRevisionsDescriptions(('This MIB is now obsolete.', 'The information regarding the deprecation of this MIB has been changed.', 'This MIB is being deprecated. All the objects defined in this MIB have been replaced with objects defined in CISCO-GTP-MIB.my, CISCO-GGSN-MIB.my, CISCO-GPRS-CHARGING-MIB.my and CISCO-GPRS-ACC-PT-MIB.my ', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGprsGtpMIB.setLastUpdated('200509190000Z')
if mibBuilder.loadTexts: ciscoGprsGtpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGprsGtpMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-gprs@cisco.com')
if mibBuilder.loadTexts: ciscoGprsGtpMIB.setDescription('The MIB Module for managing the General Packet Radio Service(GPRS) Tunnelling Protocol(GTP) on Gateway GPRS Support Node (GGSN) and Serving GPRS Support Node(SGSN).')
ciscoGprsGtpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 1))
ciscoGprsGtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1))
ciscoGprsGtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2))
cgprsGtpGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1))
cgprsGtpGgsnConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2))
cgprsGtpGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1))
cgprsGtpGgsnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 2))
cgprsGtpGgsnStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 3))
cgprsGtpT3TunnelTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpT3TunnelTimer.setReference('ETSI GSM 04.08. ')
if mibBuilder.loadTexts: cgprsGtpT3TunnelTimer.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpT3TunnelTimer.setDescription("The T3-TUNNEL timer for mobility management. This timer is started by the 'Old SGSN'. Whilst the timer is running, the T-PDUs received by the 'Old SGSN' (from the GGSN), and any buffered T-PDUs are forwarded to the 'New SGSN'. ")
cgprsGtpT3ResponseTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpT3ResponseTimer.setReference('ETSI GSM 04.08. ')
if mibBuilder.loadTexts: cgprsGtpT3ResponseTimer.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpT3ResponseTimer.setDescription('The T3-RESPONSE timer for retransmission. This timer is started by GGSN, upon the transmission of a signalling request message; it is used for message retransmission purposes, in the event that no response is received by the time the timer expires. Note that the total wait time (cgprsGtpT3ResponseTimer*cgprsGtpN3Requests) must be shorter than the Mobile System (MS) wait time between retries of Attach and RA Updates; The product of cgprsGtpT3ResponseTimer and cgprsGtpN3requests must be less than the minimum value of the Attach Timer(T3310) and the Routing Area Update timer(T3330). The cgprsGtpT3ResponseTimer timer, according to the standards, recommends an adaptive back-off mechanism, using increasing values, e.g., 1, 2, 4, and 8 seconds.')
cgprsGtpN3Request = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setUnits('messages').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpN3Request.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpN3Request.setDescription('The N3-REQUESTS value. Maximum number of times a signalling request message is retransmitted in the event of no corresponding response message. ')
cgprsGtpN3BufferSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(8192)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpN3BufferSize.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpN3BufferSize.setDescription('The N3-BUFFER-SIZE value. This is the size of the receive buffer for G-PDUs and signalling request messages. If a packet arrives with more data bytes then the receive buffer can contain, the excess bytes will be discarded.')
cgprsGtpEchoRequestTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpEchoRequestTimer.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpEchoRequestTimer.setDescription("The time interval to transmit 'Echo Request' message. 'Echo Response' message is normally received in response to 'Echo Request' message. In the event of no response to the 'Echo Request' message, a notification is generated identifying the peer GSN (i.e. cgprsGtpGSNid ), which fails to respond.")
cgprsGtpGSNTotalBandwidthResrc = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3000))).setUnits('bits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpGSNTotalBandwidthResrc.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGSNTotalBandwidthResrc.setDescription('The total amount of bandwidth resource on the GGSN. ')
cgprsGtpMaxNumPDPCxts = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(45000)).setUnits('PDP contexts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpMaxNumPDPCxts.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpMaxNumPDPCxts.setDescription('The Maximum number of PDP contexts allowed. The PDP context contains the Session Management parameters that are necessary to transfer between SGSNs at the Inter SGSN Routeing Update procedure.')
cgprsGtpDroppedPktsMonTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpDroppedPktsMonTime.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpDroppedPktsMonTime.setDescription('The time duration for monitoring the excessive rate at which packets are dropped by the GSN due to unknown GTP header problem.')
cgprsGtpNoRespToEchoNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpNoRespToEchoNotifEnable.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpNoRespToEchoNotifEnable.setDescription('The object indicates whether the system produces the cgprsGtpGSNEchoFailedNotif. A false value will prevent the cgprsGtpGSNEchoFailedNotif from being generated by this system. ')
cgprsGtpPDPCxtActRejNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpPDPCxtActRejNotifEnable.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpPDPCxtActRejNotifEnable.setDescription('The object indicates whether the system produces the cgprsGtpPDPCxtActivationRejNotif.A false value will prevent the cgprsGtpPDPCxtActivationRejNotif from being generated by this system. ')
cgprsGtpAPNAddrAllocMethodGlobDef = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("radius", 1), ("dhcp", 2), ("disable", 3), ("notconfig", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsGtpAPNAddrAllocMethodGlobDef.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpAPNAddrAllocMethodGlobDef.setDescription(' The global default value of APN address allocation method. Individual APN address allocation method configuration overrides global default value. ')
cgprsGtpChargingGWTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cgprsGtpChargingGWTable.setReference(' ETSI GSM 10.17 - Charging in GPRS. ')
if mibBuilder.loadTexts: cgprsGtpChargingGWTable.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingGWTable.setDescription(' Charging Gateway table. Charging information in GPRS is collected for each MS by SGSNs and GGSNs that are serving the MS. The information that the operator uses to generate the bill to a subscriber is operator-specific, such as usage of the radio interface, PDP addresses, duration of PDP context, usage of general GPRS resources, location of MS, traffic distination, usage of external data network and so on. Charging Gateways act as a storage buffer for real time Charging Data Record (CDR) collection. It provides the CDRs to the billing system. Charging Gateway Table lists all the charging gateways and their operational states. Backup charging gateway type is not allowed if there is no primary charging gateway type entry in the table. In addition, there is only one primary charging gateway entry. ')
cgprsGtpChargingGWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-GPRS-GTP-MIB", "cgprsGtpChargingGWid"))
if mibBuilder.loadTexts: cgprsGtpChargingGWEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingGWEntry.setDescription('Charging Gateway entry. ')
cgprsGtpChargingGWid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cgprsGtpChargingGWid.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingGWid.setDescription(' The IP address that is used to identify the unique charging gateway. ')
cgprsGtpChargingGWName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsGtpChargingGWName.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingGWName.setDescription('The name of the charging gateway. ')
cgprsGtpChargingGWType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2))).clone('primary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsGtpChargingGWType.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingGWType.setDescription("The type of the charging gateway. The object can ge set to 'primary' if the gateway is a primary charging gateway. One primary charging gateway and one backup charging gateway are allowed for the system to work properly. ")
cgprsGtpChargingGWOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpChargingGWOperState.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingGWOperState.setDescription("The operation state of the charging gateway. 'up' is when the charging gateway is up. 'down' is when the charging gateway is down. 'unknown' is when the charging gateway state can not be determined, such as during the time between it is configured and actual state is detected as functional.")
cgprsGtpChargingGWNotifEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsGtpChargingGWNotifEnable.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingGWNotifEnable.setDescription('The object indicates whether the system produces the cgprsGtpChargingGWNotif. A false value will prevent the cgprsGtpChargingGWUpDownNotif from being generated by this system. ')
cgprsGtpChargingGWRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsGtpChargingGWRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingGWRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table. ')
cgprsGtpAPNTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 3), )
if mibBuilder.loadTexts: cgprsGtpAPNTable.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpAPNTable.setDescription(' The table of Access Point Name (APN). APN is the information relayed by the SGSN to the GGSN, that is used by the GGSN to differentiate between accesses to different external packet data networks using the same PDP type. APN is uniquely identified by its name. ')
cgprsGtpAPNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-GPRS-GTP-MIB", "cgprsGtpAPNId"))
if mibBuilder.loadTexts: cgprsGtpAPNEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpAPNEntry.setDescription('APN entry that contains APN name and method of ip address allocation. Ip address for a MS can be allocated from external DHCP server, or local ip address pool, or static, depends on configuration.')
cgprsGtpAPNId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cgprsGtpAPNId.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpAPNId.setDescription(' APN index. ')
cgprsGtpAPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsGtpAPNName.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpAPNName.setDescription(' APN name. ')
cgprsGtpAPNAddrAllocMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("radius", 1), ("dhcp", 2), ("disable", 3), ("notconfig", 4))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsGtpAPNAddrAllocMethod.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpAPNAddrAllocMethod.setDescription(' APN ip address allocation method. Default is to use global default setting. ')
cgprsGtpAPNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsGtpAPNRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpAPNRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table. ')
cgprsGtpCurRxPacketQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 1), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpCurRxPacketQueueSize.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCurRxPacketQueueSize.setDescription('The current size of the Rx Packet Queue on the GSN node (for data received from the APN, on the Gi interface). ')
cgprsGtpCurActivatedPDPCxtsCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 2), Gauge32()).setUnits('PDP contexts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpCurActivatedPDPCxtsCnt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCurActivatedPDPCxtsCnt.setDescription('The current number of PDP contexts established on the GSN node.')
cgprsGtpCurUnexpRxGpduCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 3), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpCurUnexpRxGpduCnt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCurUnexpRxGpduCnt.setDescription('The total number of G-PDUs received from a SGSN for a non-existing or an inactive PDP context since system startup. ')
cgprsGtpCurRejPDPCxtActivationCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 4), Counter32()).setUnits('PDP contexts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpCurRejPDPCxtActivationCnt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCurRejPDPCxtActivationCnt.setDescription('The total number of Rejected PDP Context activation, due to an overload or other abnormal conditions since system startup. ')
cgprsGtpTotalPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpTotalPktsDropped.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpTotalPktsDropped.setDescription('Total number of packets dropped due to unknown GTP header, since system is up. ')
cgprsGtpDroppedPktsTimeFrame = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpDroppedPktsTimeFrame.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpDroppedPktsTimeFrame.setDescription('The time frame within which the number GTP packets, defined by cgprsGtpDroppedPktsCnt, are dropped. ')
cgprsGtpDroppedPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpDroppedPktsCnt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpDroppedPktsCnt.setDescription('The number of packets dropped by GTPwithin cgprsGtpDroppedPktsTimeFrame. ')
cgprsGtpCurMTForPremiumQos = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 8), Gauge32()).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpCurMTForPremiumQos.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCurMTForPremiumQos.setDescription('The mean throughput for premium class QOS users on the GSN. ')
cgprsGtpCurMTForNormalQos = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 9), Gauge32()).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpCurMTForNormalQos.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCurMTForNormalQos.setDescription('The mean throughput for normal class QOS users on the GSN. ')
cgprsGtpCurMTForBestEffortQos = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 10), Gauge32()).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpCurMTForBestEffortQos.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCurMTForBestEffortQos.setDescription("The mean throughput for a 'best effort' class QOS users on the GSN. ")
cgprsGtpCurGSNBandwidthResrcUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 11), Gauge32()).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpCurGSNBandwidthResrcUsed.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCurGSNBandwidthResrcUsed.setDescription('The current amount of bandwidth resource used on the GSN. The current amount of bandwidth resource available on GSN can be obtained by deducting the value of this object from the value of the object cgprsGtpGSNTotalBandwidthResrc. ')
cgprsGtpGSNTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 12), )
if mibBuilder.loadTexts: cgprsGtpGSNTable.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGSNTable.setDescription(' GSN peer table. The SGSN-GGSN peer relationship is established as following: o A table in DNS listing the APN and corresponding ip address of GGSN. o When Mobile System (MS) wants service, it sends packets to a SGSN with specific APN. o SGSN asks DNS for ip address of a GGSN that service this APN. o DHCP returns a GGSN. o SGSN requires a path to the GGSN using GTP protocol. o The SGSN and GGSN peer maintains path by sending echo request message to each other. If one side fails in echo reply for certain times, the other side will send a trap to NMS. Note: o Multiple-Multiple peer relationship, i.e. a SGSN have multiple GGSN as peers, while a GGSN have multiple SGSN peers, depending on routing path. o Path is kept in database. ')
cgprsGtpGSNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 12, 1), ).setIndexNames((0, "CISCO-GPRS-GTP-MIB", "cgprsGtpGSNid"))
if mibBuilder.loadTexts: cgprsGtpGSNEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGSNEntry.setDescription('GSN entry. The entry is created when a path between a GGSN and SGSN is setup and the end point of the path (either GGSN or SGSN) is not listed in the GSN peer table yet. The entry is deleted when the path is released, or echo test message on the path times out after certain retry number defined as cgprsGtpN3Request. ')
cgprsGtpGSNid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 12, 1, 1), IpAddress())
if mibBuilder.loadTexts: cgprsGtpGSNid.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGSNid.setDescription('Ip address that uniquely identify a GSN node. ')
cgprsGtpGSNEchoFailedNotifCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpGSNEchoFailedNotifCnt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGSNEchoFailedNotifCnt.setDescription(' The echo test failure count before the entry is deleted. ')
cgprsGtpTotalNumAllocIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 2, 1), Gauge32()).setUnits('allocated dynamic addreses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpTotalNumAllocIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpTotalNumAllocIpAddr.setDescription('The current number of total allocated ip addresses on the GGSN.')
cgprsGtpChargingMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpChargingMsgCnt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpChargingMsgCnt.setDescription('The current number of total charging messages in the queue. ')
cgprsGtpNumAllocIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 2, 3), )
if mibBuilder.loadTexts: cgprsGtpNumAllocIpAddrTable.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpNumAllocIpAddrTable.setDescription('The table for currently allocated number of dynamic addreses , associated with a given APN.')
cgprsGtpNumAllocIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 2, 3, 1), ).setIndexNames((0, "CISCO-GPRS-GTP-MIB", "cgprsGtpAPNId"))
if mibBuilder.loadTexts: cgprsGtpNumAllocIpAddrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpNumAllocIpAddrEntry.setDescription('The entry is created when a new APN is created. The entry is deleted when the associated APN is deleted. ')
cgprsGtpNumAllocIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 2, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpNumAllocIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpNumAllocIpAddr.setDescription('Number of ip addresses allocated for the specified APN (as identified by cgprsGtpAPNId). ')
cgprsGtpVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpVersion.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpVersion.setDescription('The gtp version supported. ')
cgprsGtpLastGSNidNoRespToEcho = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpLastGSNidNoRespToEcho.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpLastGSNidNoRespToEcho.setDescription('The name of the last peer GSN that does not reply to echo message. ')
cgprsGtpLastGSNidRecovered = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpLastGSNidRecovered.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpLastGSNidRecovered.setDescription('The name of the last peer GSN that does not reply to echo message. ')
cgprsGtpGSNidOfLastUnexpPDPCxt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpGSNidOfLastUnexpPDPCxt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGSNidOfLastUnexpPDPCxt.setDescription('The name of the peer GSN whose PDP context is unexpected. ')
cgprsGtpTIDOfLastUnexpPDPCxt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpTIDOfLastUnexpPDPCxt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpTIDOfLastUnexpPDPCxt.setDescription('The TID of the last unexpected PDP Context activation. ')
cgprsGtpRejReasonOfLastUnexpPDPCxt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 48, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsGtpRejReasonOfLastUnexpPDPCxt.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpRejReasonOfLastUnexpPDPCxt.setDescription('The reason for rejecting the PDP Context activation. ')
ciscoGprsGtpNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 2))
ciscoGprsGtpNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 2, 0))
cgprsGtpGSNPathFailedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 48, 2, 0, 1)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpLastGSNidNoRespToEcho"))
if mibBuilder.loadTexts: cgprsGtpGSNPathFailedNotif.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGSNPathFailedNotif.setDescription("The notification is sent when the GSN peer is failed to respond to the GTP 'Echo Request' message for cgprsGtpN3Request times and before the GSN entry is deleted from the GSN peer table.")
cgprsGtpGSNPathRecoveredNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 48, 2, 0, 2)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpLastGSNidRecovered"))
if mibBuilder.loadTexts: cgprsGtpGSNPathRecoveredNotif.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGSNPathRecoveredNotif.setDescription('The notification is sent when the GSN peer is recovered from failure.')
cgprsGtpPDPCxtActivationRejNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 48, 2, 0, 3)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpGSNidOfLastUnexpPDPCxt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpTIDOfLastUnexpPDPCxt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpRejReasonOfLastUnexpPDPCxt"))
if mibBuilder.loadTexts: cgprsGtpPDPCxtActivationRejNotif.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpPDPCxtActivationRejNotif.setDescription('This trap indicates that a PDP Context activation was rejected due to an overload, or some other abnormal condition. The trap indicates the Id of the GSN that rejected the PDP Context Activation, the IMSI Id of the MS, and the reson for rejection.')
cgprsGtpPrimaryChargingGWUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 48, 2, 0, 4))
if mibBuilder.loadTexts: cgprsGtpPrimaryChargingGWUpNotif.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpPrimaryChargingGWUpNotif.setDescription('This notification is sent when primary charging gateway is up. ')
cgprsGtpPrimaryChargingGWDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 48, 2, 0, 5))
if mibBuilder.loadTexts: cgprsGtpPrimaryChargingGWDownNotif.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpPrimaryChargingGWDownNotif.setDescription('This notification is sent when primary charging gateway is down. ')
cgprsGtpSecondaryChargingGWUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 48, 2, 0, 6))
if mibBuilder.loadTexts: cgprsGtpSecondaryChargingGWUpNotif.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpSecondaryChargingGWUpNotif.setDescription('This notification is sent when secondary charging gateway is up. ')
cgprsGtpSecondaryChargingGWDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 48, 2, 0, 7))
if mibBuilder.loadTexts: cgprsGtpSecondaryChargingGWDownNotif.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpSecondaryChargingGWDownNotif.setDescription('This notification is sent when secondary charging gateway is down. ')
ciscoGprsGtpConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 3))
cgprsGtpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 1))
cgprsGtpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 2))
cgprsGtpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 1, 1)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpGeneralConfigGroup"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpGeneralStatsGroup"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpGgsnConfigGroup"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpGgsnStatsGroup"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpGgsnStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsGtpCompliance = cgprsGtpCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpCompliance.setDescription(' The compliance statement for entities which implement the CISCO GPRS GTP MIB. ')
cgprsGtpGeneralConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 2, 1)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpT3TunnelTimer"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpT3ResponseTimer"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpN3Request"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpN3BufferSize"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpEchoRequestTimer"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpGSNTotalBandwidthResrc"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpMaxNumPDPCxts"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpDroppedPktsMonTime"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpNoRespToEchoNotifEnable"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpPDPCxtActRejNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsGtpGeneralConfigGroup = cgprsGtpGeneralConfigGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGeneralConfigGroup.setDescription(' A collection of configurable GTP parameters for GGSN and SGSN. ')
cgprsGtpGgsnConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 2, 2)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpAPNAddrAllocMethodGlobDef"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpChargingGWName"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpChargingGWType"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpChargingGWOperState"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpChargingGWNotifEnable"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpChargingGWRowStatus"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpAPNName"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpAPNAddrAllocMethod"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpAPNRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsGtpGgsnConfigGroup = cgprsGtpGgsnConfigGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGgsnConfigGroup.setDescription(' A collection of configurable GTP parameters on GGSN. ')
cgprsGtpGeneralStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 2, 3)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpCurRxPacketQueueSize"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpCurActivatedPDPCxtsCnt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpCurUnexpRxGpduCnt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpCurRejPDPCxtActivationCnt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpTotalPktsDropped"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpDroppedPktsTimeFrame"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpDroppedPktsCnt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpCurMTForPremiumQos"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpCurMTForNormalQos"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpCurMTForBestEffortQos"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpCurGSNBandwidthResrcUsed"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpGSNEchoFailedNotifCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsGtpGeneralStatsGroup = cgprsGtpGeneralStatsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGeneralStatsGroup.setDescription(' A collection of stats for GTP on GGSN and SGSN. ')
cgprsGtpGgsnStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 2, 4)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpTotalNumAllocIpAddr"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpChargingMsgCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsGtpGgsnStatsGroup = cgprsGtpGgsnStatsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGgsnStatsGroup.setDescription(' A collection of statistics for GTP on GGSN. ')
cgprsGtpGgsnStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 2, 5)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpVersion"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpLastGSNidNoRespToEcho"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpLastGSNidRecovered"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpGSNidOfLastUnexpPDPCxt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpTIDOfLastUnexpPDPCxt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpRejReasonOfLastUnexpPDPCxt"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpNumAllocIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsGtpGgsnStatusGroup = cgprsGtpGgsnStatusGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGgsnStatusGroup.setDescription(' A collection of status for GTP on GGSN. ')
cgprsGtpGgsnNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 48, 3, 2, 6)).setObjects(("CISCO-GPRS-GTP-MIB", "cgprsGtpGSNPathFailedNotif"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpGSNPathRecoveredNotif"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpPDPCxtActivationRejNotif"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpPrimaryChargingGWUpNotif"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpPrimaryChargingGWDownNotif"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpSecondaryChargingGWUpNotif"), ("CISCO-GPRS-GTP-MIB", "cgprsGtpSecondaryChargingGWDownNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsGtpGgsnNotifGroup = cgprsGtpGgsnNotifGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsGtpGgsnNotifGroup.setDescription(' A collection of notifications on GGSN.')
mibBuilder.exportSymbols("CISCO-GPRS-GTP-MIB", cgprsGtpGgsnNotifGroup=cgprsGtpGgsnNotifGroup, cgprsGtpGgsnStatusGroup=cgprsGtpGgsnStatusGroup, cgprsGtpPrimaryChargingGWUpNotif=cgprsGtpPrimaryChargingGWUpNotif, cgprsGtpCurRejPDPCxtActivationCnt=cgprsGtpCurRejPDPCxtActivationCnt, cgprsGtpVersion=cgprsGtpVersion, cgprsGtpTotalNumAllocIpAddr=cgprsGtpTotalNumAllocIpAddr, cgprsGtpGSNid=cgprsGtpGSNid, cgprsGtpChargingGWNotifEnable=cgprsGtpChargingGWNotifEnable, ciscoGprsGtpConformances=ciscoGprsGtpConformances, cgprsGtpGSNTotalBandwidthResrc=cgprsGtpGSNTotalBandwidthResrc, cgprsGtpAPNAddrAllocMethod=cgprsGtpAPNAddrAllocMethod, ciscoGprsGtpConfig=ciscoGprsGtpConfig, cgprsGtpGSNPathRecoveredNotif=cgprsGtpGSNPathRecoveredNotif, cgprsGtpNumAllocIpAddrTable=cgprsGtpNumAllocIpAddrTable, cgprsGtpGgsnConfig=cgprsGtpGgsnConfig, cgprsGtpChargingGWEntry=cgprsGtpChargingGWEntry, cgprsGtpN3BufferSize=cgprsGtpN3BufferSize, cgprsGtpChargingGWType=cgprsGtpChargingGWType, cgprsGtpAPNId=cgprsGtpAPNId, cgprsGtpTIDOfLastUnexpPDPCxt=cgprsGtpTIDOfLastUnexpPDPCxt, ciscoGprsGtpStats=ciscoGprsGtpStats, cgprsGtpRejReasonOfLastUnexpPDPCxt=cgprsGtpRejReasonOfLastUnexpPDPCxt, cgprsGtpCurActivatedPDPCxtsCnt=cgprsGtpCurActivatedPDPCxtsCnt, cgprsGtpGgsnConfigGroup=cgprsGtpGgsnConfigGroup, cgprsGtpCurGSNBandwidthResrcUsed=cgprsGtpCurGSNBandwidthResrcUsed, cgprsGtpMaxNumPDPCxts=cgprsGtpMaxNumPDPCxts, cgprsGtpAPNName=cgprsGtpAPNName, cgprsGtpCompliance=cgprsGtpCompliance, cgprsGtpNoRespToEchoNotifEnable=cgprsGtpNoRespToEchoNotifEnable, cgprsGtpGeneralConfig=cgprsGtpGeneralConfig, cgprsGtpPrimaryChargingGWDownNotif=cgprsGtpPrimaryChargingGWDownNotif, cgprsGtpGroups=cgprsGtpGroups, cgprsGtpCurMTForPremiumQos=cgprsGtpCurMTForPremiumQos, cgprsGtpAPNTable=cgprsGtpAPNTable, cgprsGtpGeneralStats=cgprsGtpGeneralStats, cgprsGtpSecondaryChargingGWUpNotif=cgprsGtpSecondaryChargingGWUpNotif, cgprsGtpTotalPktsDropped=cgprsGtpTotalPktsDropped, cgprsGtpGSNidOfLastUnexpPDPCxt=cgprsGtpGSNidOfLastUnexpPDPCxt, cgprsGtpLastGSNidRecovered=cgprsGtpLastGSNidRecovered, cgprsGtpChargingMsgCnt=cgprsGtpChargingMsgCnt, cgprsGtpT3ResponseTimer=cgprsGtpT3ResponseTimer, cgprsGtpChargingGWTable=cgprsGtpChargingGWTable, cgprsGtpT3TunnelTimer=cgprsGtpT3TunnelTimer, cgprsGtpDroppedPktsMonTime=cgprsGtpDroppedPktsMonTime, ciscoGprsGtpMIBObjects=ciscoGprsGtpMIBObjects, cgprsGtpCurMTForNormalQos=cgprsGtpCurMTForNormalQos, cgprsGtpSecondaryChargingGWDownNotif=cgprsGtpSecondaryChargingGWDownNotif, cgprsGtpEchoRequestTimer=cgprsGtpEchoRequestTimer, cgprsGtpCurRxPacketQueueSize=cgprsGtpCurRxPacketQueueSize, cgprsGtpGSNEntry=cgprsGtpGSNEntry, cgprsGtpChargingGWRowStatus=cgprsGtpChargingGWRowStatus, cgprsGtpPDPCxtActRejNotifEnable=cgprsGtpPDPCxtActRejNotifEnable, cgprsGtpCompliances=cgprsGtpCompliances, cgprsGtpChargingGWid=cgprsGtpChargingGWid, cgprsGtpGeneralConfigGroup=cgprsGtpGeneralConfigGroup, cgprsGtpCurMTForBestEffortQos=cgprsGtpCurMTForBestEffortQos, cgprsGtpGeneralStatsGroup=cgprsGtpGeneralStatsGroup, cgprsGtpNumAllocIpAddr=cgprsGtpNumAllocIpAddr, cgprsGtpAPNRowStatus=cgprsGtpAPNRowStatus, cgprsGtpN3Request=cgprsGtpN3Request, cgprsGtpAPNEntry=cgprsGtpAPNEntry, cgprsGtpPDPCxtActivationRejNotif=cgprsGtpPDPCxtActivationRejNotif, cgprsGtpChargingGWOperState=cgprsGtpChargingGWOperState, ciscoGprsGtpNotifs=ciscoGprsGtpNotifs, PYSNMP_MODULE_ID=ciscoGprsGtpMIB, ciscoGprsGtpNotifPrefix=ciscoGprsGtpNotifPrefix, cgprsGtpAPNAddrAllocMethodGlobDef=cgprsGtpAPNAddrAllocMethodGlobDef, cgprsGtpGgsnStatus=cgprsGtpGgsnStatus, cgprsGtpGSNTable=cgprsGtpGSNTable, cgprsGtpChargingGWName=cgprsGtpChargingGWName, cgprsGtpGSNEchoFailedNotifCnt=cgprsGtpGSNEchoFailedNotifCnt, cgprsGtpGgsnStatsGroup=cgprsGtpGgsnStatsGroup, cgprsGtpGgsnStats=cgprsGtpGgsnStats, cgprsGtpDroppedPktsCnt=cgprsGtpDroppedPktsCnt, cgprsGtpDroppedPktsTimeFrame=cgprsGtpDroppedPktsTimeFrame, cgprsGtpNumAllocIpAddrEntry=cgprsGtpNumAllocIpAddrEntry, ciscoGprsGtpMIB=ciscoGprsGtpMIB, cgprsGtpLastGSNidNoRespToEcho=cgprsGtpLastGSNidNoRespToEcho, cgprsGtpCurUnexpRxGpduCnt=cgprsGtpCurUnexpRxGpduCnt, cgprsGtpGSNPathFailedNotif=cgprsGtpGSNPathFailedNotif)
